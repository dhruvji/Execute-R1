{"text": "Write a function to find the elements that are unique to each of the given two tuple lists (elements that appear in one tuple but not the other).", "code": "def find_unique_elements(test_tup1: tuple, test_tup2: tuple):\n    unique_to_tup1 = tuple(set(test_tup1) - set(test_tup2))\n    unique_to_tup2 = tuple(set(test_tup2) - set(test_tup1))\n    return unique_to_tup1 + unique_to_tup2", "task_id": "2_98ff7e47-73fb-4139-831e-3ab384fd2277", "test_setup_code": "", "test_list": ["assert find_unique_elements((1, 2, 3), (3, 4, 5)) == (1, 2, 4, 5)", "assert find_unique_elements((1, 1, 2, 3), (3, 4, 4, 5)) == (1, 2, 4, 5)", "assert find_unique_elements((), ()) == ()", "assert find_unique_elements((1, 2, 3), ()) == (1, 2, 3)", "assert find_unique_elements((), (1, 2, 3)) == (1, 2, 3)", "assert find_unique_elements((1, 2, 3), (1, 2, 3)) == ()", "assert find_unique_elements((1, 2, 3, 4), (2, 3, 4, 5)) == (1, 5)", "assert find_unique_elements((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)", "assert find_unique_elements((1, 1, 1, 1), (1, 1, 1, 1)) == ()", "assert find_unique_elements((1, 2, 3, 4, 5), (5, 6, 7, 8, 9)) == (1, 2, 3, 4, 6, 7, 8, 9)", "assert find_unique_elements((1,), (2,)) == (1, 2)", "assert find_unique_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)", "assert find_unique_elements((1, 2, 3, 4, 5), (3, 4, 5, 6, 7)) == (1, 2, 6, 7)", "assert find_unique_elements((1, 2, 3, 4, 5), (2, 3, 4, 5, 6)) == (1, 6)", "assert find_unique_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5, 6)) == (6)"], "challenge_test_list": []}
{"text": "Write a function to find the common elements from the given two tuple lists and return a dictionary with the elements as keys and their frequency of occurrence as values.", "code": "def common_elements_with_count(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        count1 = test_tup1.count(item)\n        count2 = test_tup2.count(item)\n        result[item] = min(count1, count2)\n    return result", "task_id": "2_2b4ce55f-5294-49fb-ac91-e1c1c377f69d", "test_setup_code": "", "test_list": ["assert common_elements_with_count((1, 2, 3), (3, 4, 5)) == {3: 1}", "assert common_elements_with_count((1, 2, 2, 3), (2, 2, 3, 4)) == {2: 2, 3: 1}", "assert common_elements_with_count((), ()) == {}", "assert common_elements_with_count((1, 2, 3), ()) == {}", "assert common_elements_with_count((), (1, 2, 3)) == {}", "assert common_elements_with_count((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}", "assert common_elements_with_count((1, 1, 1, 2, 2, 3), (1, 1, 2, 2, 2, 3)) == {1: 2, 2: 2, 3: 1}", "assert common_elements_with_count((1, 2, 3, 4), (5, 6, 7, 8)) == {}", "assert common_elements_with_count((1, 2, 3, 4), (4, 3, 2, 1)) == {1: 1, 2: 1, 3: 1, 4: 1}", "assert common_elements_with_count((1, 2, 3, 4, 4), (4, 4, 5, 6)) == {4: 2}", "assert common_elements_with_count((1, 2, 3, 4, 5, 6), (6, 7, 8, 9, 10, 1)) == {1: 1, 6: 1}", "assert common_elements_with_count((1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12)) == {}", "assert common_elements_with_count((1, 1, 1, 1), (1, 1, 1, 1)) == {1: 4}", "assert common_elements_with_count((1, 2, 3, 4, 5), (5, 5, 5, 5, 5)) == {5: 1}", "assert common_elements_with_count((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}"], "challenge_test_list": []}
{"text": "Write a function to find the similar elements from the given two tuple lists, but preserve the order of elements as they appear in the first tuple.", "code": "def similar_elements_ordered(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = tuple(item for item in test_tup1 if item in common)\n    return result", "task_id": "2_5d1911cf-d400-479f-9095-23f715bd8a77", "test_setup_code": "", "test_list": ["assert similar_elements_ordered((1, 2, 3), (3, 4, 5)) == (3,)", "assert similar_elements_ordered((1, 2, 3), (1, 2, 3)) == (1, 2, 3)", "assert similar_elements_ordered((1, 2, 3), (4, 5, 6)) == ()", "assert similar_elements_ordered((), (1, 2, 3)) == ()", "assert similar_elements_ordered((1, 2, 3), ()) == ()", "assert similar_elements_ordered((1, 2, 3, 4, 5), (2, 4, 6)) == (2, 4)", "assert similar_elements_ordered((1, 2, 2, 3), (2, 3, 4)) == (2, 2, 3)", "assert similar_elements_ordered((1, 2, 3), (3, 2, 1)) == (1, 2, 3)", "assert similar_elements_ordered((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 3, 4)", "assert similar_elements_ordered((1, 2, 3), (1, 1, 1)) == (1,)", "assert similar_elements_ordered((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (1, 2, 3, 4, 5)", "assert similar_elements_ordered((1, 2, 3), (2, 3, 4, 5)) == (2, 3)", "assert similar_elements_ordered((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == (1, 2, 3, 4, 5, 6)", "assert similar_elements_ordered((1, 2, 3, 4), (4, 3, 2, 1, 0)) == (1, 2, 3, 4)", "assert similar_elements_ordered((1, 2, 3, 4, 5, 6, 7, 8, 9), (9, 8, 7, 6, 5, 4, 3, 2, 1)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)"], "challenge_test_list": []}
{"text": "Write a function to find elements at the same index positions in two tuples that have the same value.", "code": "def similar_elements_by_index(test_tup1: tuple, test_tup2: tuple):\n    min_len = min(len(test_tup1), len(test_tup2))\n    result = tuple(test_tup1[i] for i in range(min_len) if test_tup1[i] == test_tup2[i])\n    return result", "task_id": "2_2a75d9b5-a882-426c-970e-3a13df1a10e2", "test_setup_code": "", "test_list": ["assert similar_elements_by_index((1, 2, 3), (1, 2, 3)) == (1, 2, 3)", "assert similar_elements_by_index((1, 2, 3), (4, 5, 6)) == ()", "assert similar_elements_by_index((1, 2, 3), (1, 5, 3)) == (1, 3)", "assert similar_elements_by_index((1, 2), (1, 2, 3)) == (1, 2)", "assert similar_elements_by_index((1, 2, 3), (1, 2)) == (1, 2)", "assert similar_elements_by_index((), ()) == ()", "assert similar_elements_by_index((1,), (1,)) == (1)", "assert similar_elements_by_index((1,), (2,)) == ()", "assert similar_elements_by_index((1, 2, 3, 4), (1, 2, 3, 4, 5)) == (1, 2, 3, 4)", "assert similar_elements_by_index((1, 2, 3, 4, 5), (1, 2, 3, 4)) == (1, 2, 3, 4)", "assert similar_elements_by_index((1, 2, 3, 4), (4, 3, 2, 1)) == ()", "assert similar_elements_by_index((1, 2, 3, 4), (1, 2, 3, 5)) == (1, 2, 3)", "assert similar_elements_by_index((1, 2, 3, 4), (0, 2, 3, 4)) == (2, 3, 4)", "assert similar_elements_by_index((1, 2, 3, 4), (1, 2, 0, 4)) == (1, 2, 4)", "assert similar_elements_by_index((1, 2, 3, 4), (1, 0, 3, 4)) == (1, 3, 4)"], "challenge_test_list": []}
{"text": "Write a function to find the elements that appear at least 'threshold' number of times across both tuple lists combined.", "code": "def similar_elements_threshold(test_tup1: tuple, test_tup2: tuple, threshold: int):\n    combined = list(test_tup1) + list(test_tup2)\n    result = tuple(item for item in set(combined) if combined.count(item) >= threshold)\n    return result", "task_id": "2_6d47a8ee-4026-4c63-a3f5-07887ac5151c", "test_setup_code": "", "test_list": ["assert similar_elements_threshold((1, 2, 3), (3, 4, 5), 2) == (3,)", "assert similar_elements_threshold((1, 1, 2), (2, 3, 3), 2) == (1, 2, 3)", "assert similar_elements_threshold((1, 2, 3), (4, 5, 6), 1) == (1, 2, 3, 4, 5, 6)", "assert similar_elements_threshold((), (), 1) == ()", "assert similar_elements_threshold((1, 2, 3), (), 1) == (1, 2, 3)", "assert similar_elements_threshold((), (4, 5, 6), 1) == (4, 5, 6)", "assert similar_elements_threshold((1, 2, 2, 3), (3, 3, 4), 3) == (3,)", "assert similar_elements_threshold((1, 1, 1), (1, 1, 1), 4) == ()", "assert similar_elements_threshold((1, 2, 3), (1, 2, 3), 2) == (1, 2, 3)", "assert similar_elements_threshold((1, 2, 3, 4), (4, 5, 6, 7), 2) == (4,)", "assert similar_elements_threshold((1, 2, 3), (1, 2, 3), 3) == ()", "assert similar_elements_threshold((1, 2, 2, 3, 3, 3), (3, 3, 4, 4, 4, 4), 4) == (3, 4)", "assert similar_elements_threshold((1,), (1, 1, 1), 3) == (1,)", "assert similar_elements_threshold((1, 2, 3, 4, 5), (5, 6, 7, 8, 9), 1) == (1, 2, 3, 4, 5, 6, 7, 8, 9)", "assert similar_elements_threshold((1, 2, 2, 3, 3, 3), (4, 4, 4, 4, 5, 5, 5, 5), 5) == ()"], "challenge_test_list": []}
{"text": "Write a function to find similar elements from two tuples and group them by their data types in a dictionary.", "code": "def similar_elements_type(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        item_type = type(item).__name__\n        if item_type not in result:\n            result[item_type] = []\n        result[item_type].append(item)\n    return result", "task_id": "2_c25c74c8-d75d-4b7a-8cbd-505d29ea13fa", "test_setup_code": "", "test_list": ["assert similar_elements_type((1, 2, 3), (3, 4, 5)) == {'int': [3]}", "assert similar_elements_type((1.1, 2.2, 3.3), (3.3, 4.4, 5.5)) == {'float': [3.3]}", "assert similar_elements_type(('a', 'b', 'c'), ('c', 'd', 'e')) == {'str': [c]}", "assert similar_elements_type((1, 'a', 3.0), (3.0, 'b', 1)) == {'int': [1], 'float': [3.0]}", "assert similar_elements_type((True, False), (False, True)) == {'bool': [False, True]}", "assert similar_elements_type((1, 2, 3), (4, 5, 6)) == {}", "assert similar_elements_type((1, 'a', 3.0), (4, 'b', 5.0)) == {}", "assert similar_elements_type((1, 2, 3, 'a', 'b'), (3, 'a', 4, 'c')) == {'int': [3], 'str': ['a']}", "assert similar_elements_type((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == {'int': [1, 2, 3, 4, 5]}", "assert similar_elements_type((1, 2, 3, 'a', 'b', 3.0), (3, 'a', 4, 'c', 3.0)) == {'int': [3], 'str': ['a'], 'float': [3.0]}", "assert similar_elements_type((), ()) == {}", "assert similar_elements_type((None, 1, 'a'), (None, 2, 'b')) == {'NoneType': [None]}", "assert similar_elements_type((1, 2, 'a', 'b'), (1, 2, 'a', 'b')) == {'int': [1, 2], 'str': ['a', 'b']}", "assert similar_elements_type((1, 2, 3), (1.0, 2.0, 3.0)) == {}", "assert similar_elements_type((1, 2, 3), (1, 2, 3, 4, 5)) == {'int': [1, 2, 3]}"], "challenge_test_list": []}
{"text": "Write a function to find similar elements from two tuples and return a dictionary where keys are the common elements and values are lists of their positions in both tuples.", "code": "def similar_elements_with_positions(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        positions1 = [i for i, x in enumerate(test_tup1) if x == item]\n        positions2 = [i for i, x in enumerate(test_tup2) if x == item]\n        result[item] = [positions1, positions2]\n    return result", "task_id": "2_9434ca25-a4d8-45d0-b142-d93e43fff1fc", "test_setup_code": "", "test_list": ["assert similar_elements_with_positions((1, 2, 3), (3, 4, 5)) == {3: [[2], [0]]}", "assert similar_elements_with_positions((1, 2, 2, 3), (2, 2, 4)) == {2: [[1, 2], [0, 1]]}", "assert similar_elements_with_positions((1, 2, 3, 4), (5, 6, 7, 8)) == {}", "assert similar_elements_with_positions((), ()) == {}", "assert similar_elements_with_positions((1, 2, 3), ()) == {}", "assert similar_elements_with_positions((), (1, 2, 3)) == {}", "assert similar_elements_with_positions((1, 1, 1), (1, 1, 1)) == {1: [[0, 1, 2], [0, 1, 2]]}", "assert similar_elements_with_positions((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == {1: [[0], [4]], 2: [[1], [3]], 3: [[2], [2]], 4: [[3], [1]], 5: [[4], [0]]}", "assert similar_elements_with_positions((1, 2, 3, 2, 1), (2, 1, 2, 1)) == {1: [[0, 4], [1, 3]], 2: [[1, 3], [0, 2]]}", "assert similar_elements_with_positions((1, 2, 3), (1, 2, 3)) == {1: [[0], [0]], 2: [[1], [1]], 3: [[2], [2]]}", "assert similar_elements_with_positions((1, 2, 3, 4), (4, 3, 2, 1)) == {1: [[0], [3]], 2: [[1], [2]], 3: [[2], [1]], 4: [[3], [0]]}", "assert similar_elements_with_positions((1, 2, 2, 3, 3, 3), (2, 3, 2, 3, 2, 3)) == {2: [[1, 2], [0, 2, 4]], 3: [[3, 4, 5], [1, 3, 5]]}", "assert similar_elements_with_positions((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == {}", "assert similar_elements_with_positions((1, 1, 1, 2, 2, 2), (2, 2, 2, 1, 1, 1)) == {1: [[0, 1, 2], [3, 4, 5]], 2: [[3, 4, 5], [0, 1, 2]]}", "assert similar_elements_with_positions((1, 2, 3, 4, 5), (5, 5, 5, 5, 5)) == {5: [[4], [0, 1, 2, 3, 4]]}"], "challenge_test_list": []}
{"text": "Write a function to find consecutive similar elements (elements that appear next to each other in the same order) from the given two tuple lists.", "code": "def similar_elements_consecutive(test_tup1: tuple, test_tup2: tuple):\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2)) - 1):\n        if test_tup1[i:i+2] == test_tup2[i:i+2]:\n            result.extend(test_tup1[i:i+2])\n    return tuple(set(result))", "task_id": "2_0fbdc9b5-585b-41b3-a992-cd9f729fccf7", "test_setup_code": "", "test_list": ["assert similar_elements_consecutive((1, 2, 3), (1, 2, 4)) == (1, 2)", "assert similar_elements_consecutive((1, 2, 3), (4, 5, 6)) == ()", "assert similar_elements_consecutive((1, 2, 3, 4), (1, 2, 3, 4)) == (1, 2, 3, 4)", "assert similar_elements_consecutive((1, 2, 3), (1, 3, 2)) == ()", "assert similar_elements_consecutive((1, 2), (1, 2, 3)) == (1, 2)", "assert similar_elements_consecutive((1, 2, 3, 4), (2, 3, 4, 5)) == (2, 3)", "assert similar_elements_consecutive((1, 2, 2, 3), (1, 2, 2, 4)) == (1, 2, 2)", "assert similar_elements_consecutive((1, 1, 1, 1), (1, 1, 1, 1)) == (1, 1, 1)", "assert similar_elements_consecutive((1, 2, 3, 4, 5), (1, 2, 3, 4, 6)) == (1, 2, 3, 4)", "assert similar_elements_consecutive((1, 2, 3), (1, 2, 3, 4)) == (1, 2, 3)", "assert similar_elements_consecutive((1, 2, 3, 4), (1, 2, 3, 5)) == (1, 2, 3)", "assert similar_elements_consecutive((1, 2, 3, 4), (0, 1, 2, 3)) == (1, 2, 3)", "assert similar_elements_consecutive((1, 2, 3, 4), (1, 2, 3, 4, 5)) == (1, 2, 3, 4)", "assert similar_elements_consecutive((1,), (1,)) == ()", "assert similar_elements_consecutive((), ()) == ()"], "challenge_test_list": []}
{"text": "Write a function to find similar string elements from two tuples, ignoring case sensitivity.", "code": "def similar_elements_case_insensitive(test_tup1: tuple, test_tup2: tuple):\n    lower_tup1 = tuple(str(item).lower() if isinstance(item, str) else item for item in test_tup1)\n    lower_tup2 = tuple(str(item).lower() if isinstance(item, str) else item for item in test_tup2)\n    \n    # Create mapping of lowercase to original case\n    original_case = {}\n    for item in test_tup1 + test_tup2:\n        if isinstance(item, str):\n            original_case[item.lower()] = item\n    \n    common = set(lower_tup1) & set(lower_tup2)\n    result = tuple(original_case.get(item, item) for item in common)\n    return result", "task_id": "2_603a8eda-9ca7-4761-b4b0-c5fad973d777", "test_setup_code": "", "test_list": ["assert similar_elements_case_insensitive(('apple', 'banana', 'Cherry'), ('APPLE', 'Banana', 'grape')) == ('apple', 'banana')", "assert similar_elements_case_insensitive(('dog', 'cat', 'bird'), ('DOG', 'CAT', 'fish')) == ('dog', 'cat')", "assert similar_elements_case_insensitive(('Python', 'Java', 'C++'), ('python', 'java', 'c#')) == ('Python', 'Java')", "assert similar_elements_case_insensitive(('one', 'two', 'three'), ('ONE', 'TWO', 'THREE')) == ('one', 'two', 'three')", "assert similar_elements_case_insensitive(('a', 'b', 'c'), ('A', 'B', 'C', 'd')) == ('a', 'b', 'c')", "assert similar_elements_case_insensitive(('hello', 'world'), ('HELLO', 'WORLD', 'test')) == ('hello', 'world')", "assert similar_elements_case_insensitive(('apple', 'banana'), ('APPLE', 'BANANA', 'cherry')) == ('apple', 'banana')", "assert similar_elements_case_insensitive(('123', '456', '789'), ('123', '456', '789')) == ('123', '456', '789')", "assert similar_elements_case_insensitive(('123', '456', '789'), ('123', '456', '789', '000')) == ('123', '456', '789')", "assert similar_elements_case_insensitive(('mixed', 'Case', 'Test'), ('MIXED', 'case', 'test')) == ('mixed', 'Case', 'Test')", "assert similar_elements_case_insensitive(('UPPER', 'lower', 'Mixed'), ('upper', 'LOWER', 'mixed')) == ('UPPER', 'lower', 'Mixed')", "assert similar_elements_case_insensitive(('no', 'common', 'elements'), ('different', 'set', 'of')) == ()", "assert similar_elements_case_insensitive(('same', 'same', 'same'), ('SAME', 'SAME', 'SAME')) == ('same',)", "assert similar_elements_case_insensitive(('', 'empty', 'string'), ('', 'EMPTY', 'STRING')) == ('', 'empty', 'string')", "assert similar_elements_case_insensitive(('special', 'chars', '!@#'), ('SPECIAL', 'CHARS', '!@#')) == ('special', 'chars', '!@#')"], "challenge_test_list": []}
{"text": "Write a function to find numerically similar elements from two tuples, where numbers are considered similar if their absolute difference is within a given tolerance.", "code": "def similar_elements_fuzzy(test_tup1: tuple, test_tup2: tuple, tolerance: int):\n    result = set()\n    for item1 in test_tup1:\n        if not isinstance(item1, (int, float)):\n            continue\n        for item2 in test_tup2:\n            if not isinstance(item2, (int, float)):\n                continue\n            if abs(item1 - item2) <= tolerance:\n                result.add(item1)\n                result.add(item2)\n    return tuple(result)", "task_id": "2_839e5f9b-700e-4d05-a7a0-369d3bf70a37", "test_setup_code": "", "test_list": ["assert similar_elements_fuzzy((1, 2, 3), (2, 3, 4), 1) == (1, 2, 3, 4)", "assert similar_elements_fuzzy((1, 2, 3), (5, 6, 7), 1) == ()", "assert similar_elements_fuzzy((1.5, 2.5, 3.5), (2.0, 3.0, 4.0), 0.5) == (1.5, 2.0, 2.5, 3.0, 3.5, 4.0)", "assert similar_elements_fuzzy((1, 2, 'a'), (2, 3, 'b'), 1) == (1, 2, 3)", "assert similar_elements_fuzzy((1, 2, 3), (1, 2, 3), 0) == (1, 2, 3)", "assert similar_elements_fuzzy((), (), 1) == ()", "assert similar_elements_fuzzy((1, 2, 3), (), 1) == ()", "assert similar_elements_fuzzy((), (1, 2, 3), 1) == ()", "assert similar_elements_fuzzy((1, 2, 3), (4, 5, 6), 3) == (1, 2, 3, 4, 5, 6)", "assert similar_elements_fuzzy((1, 2, 3), (4, 5, 6), 2) == (2, 3, 4, 5)", "assert similar_elements_fuzzy((1, 2, 3), (4, 5, 6), 0) == ()", "assert similar_elements_fuzzy((1, 2, 3, 4), (2, 3, 4, 5), 1) == (1, 2, 3, 4, 5)", "assert similar_elements_fuzzy((1.1, 2.2, 3.3), (1.0, 2.0, 3.0), 0.2) == (1.1, 1.0, 2.2, 2.0, 3.3, 3.0)", "assert similar_elements_fuzzy((1, 2, 3), (1.5, 2.5, 3.5), 0.5) == (1, 1.5, 2, 2.5, 3, 3.5)", "assert similar_elements_fuzzy((1, 2, 3, 4, 5), (3, 4, 5, 6, 7), 1) == (2, 3, 4, 5, 6)"], "challenge_test_list": []}
{"text": "Write a python function to check if a number is even.", "code": "def is_even(n):\n    return n % 2 == 0", "task_id": "3_f1dfd465-1e05-4d6d-919a-d8f3a54a2f87", "test_setup_code": "", "test_list": ["assert is_even(0) == True", "assert is_even(1) == False", "assert is_even(2) == True", "assert is_even(-1) == False", "assert is_even(-2) == True", "assert is_even(100) == True", "assert is_even(101) == False", "assert is_even(999999) == False", "assert is_even(1000000) == True", "assert is_even(-999999) == False", "assert is_even(-1000000) == True", "assert is_even(2147483646) == True", "assert is_even(2147483647) == False", "assert is_even(-2147483648) == True", "assert is_even(-2147483647) == False"], "challenge_test_list": []}
{"text": "Write a python function to check if a number is odd.", "code": "def is_odd(n):\n    return n % 2 != 0", "task_id": "3_605a1cba-cfd5-4d1a-9ca0-8ad519eb55a3", "test_setup_code": "", "test_list": ["assert is_odd(1) == True", "assert is_odd(2) == False", "assert is_odd(0) == False", "assert is_odd(-1) == True", "assert is_odd(-2) == False", "assert is_odd(999999) == True", "assert is_odd(1000000) == False", "assert is_odd(-999999) == True", "assert is_odd(-1000000) == False", "assert is_odd(123456789) == True", "assert is_odd(123456788) == False", "assert is_odd(-123456789) == True", "assert is_odd(-123456788) == False", "assert is_odd(2147483647) == True", "assert is_odd(-2147483648) == False"], "challenge_test_list": []}
{"text": "Write a python function to check if a number is a perfect square.", "code": "import math\ndef is_perfect_square(n):\n    return math.isqrt(n) ** 2 == n", "task_id": "3_9bf6f757-e0b8-443a-927e-7fe3d055e761", "test_setup_code": "", "test_list": ["assert is_perfect_square(0) == True", "assert is_perfect_square(1) == True", "assert is_perfect_square(4) == True", "assert is_perfect_square(9) == True", "assert is_perfect_square(16) == True", "assert is_perfect_square(25) == True", "assert is_perfect_square(100) == True", "assert is_perfect_square(10000) == True", "assert is_perfect_square(2) == False", "assert is_perfect_square(3) == False", "assert is_perfect_square(5) == False", "assert is_perfect_square(99) == False", "assert is_perfect_square(-1) == False", "assert is_perfect_square(-4) == False", "assert is_perfect_square(8.0) == False"], "challenge_test_list": []}
{"text": "Write a python function to check if a string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "3_3eef5630-c956-4370-9326-3ad004417d0e", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('RaceCar') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True", "assert is_palindrome('12321') == True"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of digits of a number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "3_bbb182b8-608b-44eb-b3a6-c38d850f778d", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(56) == 11", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1) == 1", "assert sum_of_digits(10) == 1", "assert sum_of_digits(1111111111) == 10", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(2147483647) == 46", "assert sum_of_digits(2021) == 5", "assert sum_of_digits(404) == 8", "assert sum_of_digits(55555) == 25"], "challenge_test_list": []}
{"text": "Write a python function to reverse a string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "3_4a0f75b5-d2ca-48c8-8660-e04b38208d04", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('12345') == '54321'", "assert reverse_string('python') == 'nohtyp'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('A man, a plan, a canal: Panama') == 'amanaP :lanac a ,nalp a ,nam A'", "assert reverse_string('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_string('Hello, World!') == '!dlroW ,olleH'", "assert reverse_string('  spaces  ') == '  secaps  '", "assert reverse_string('123 456 789') == '987 654 321'", "assert reverse_string('Python Programming') == 'gnimmargorP nohtyP'", "assert reverse_string('a' * 100) == 'a' * 100", "assert reverse_string('ab' * 50) == 'ba' * 50"], "challenge_test_list": []}
{"text": "Write a python function to check if two strings are anagrams.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "3_b32321f9-9bd3-4ec3-bcb4-13b58d957d35", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cab') == True", "assert is_anagram('abcd', 'dcba') == True", "assert is_anagram('abcd', 'abcc') == False", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '322') == False", "assert is_anagram('!@#', '#@!') == True", "assert is_anagram('!@#', '#@') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('aabbcc', 'aabbc') == False"], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "3_771e95fd-809d-4745-bb8c-9fa8f3cd3968", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(15) == 1307674368000", "assert factorial(20) == 2432902008176640000"], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b", "task_id": "3_b4be4bf5-524d-45c0-b19c-f00c4a79fcae", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(30) == 832040", "assert fibonacci(50) == 12586269025"], "challenge_test_list": []}
{"text": "Write a python function to calculate the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "3_6cebdfad-6c51-4bc0-801d-d7365c7de98f", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 10) == 1", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(1, 1) == 1", "assert gcd(17, 13) == 1", "assert gcd(56, 98) == 14", "assert gcd(100, 25) == 25", "assert gcd(27, 36) == 9", "assert gcd(123456, 789012) == 12", "assert gcd(20, 30) == 10", "assert gcd(81, 153) == 9", "assert gcd(7, 3) == 1", "assert gcd(50, 15) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "task_id": "4_55624dbe-3aff-4e33-b82c-97cb96b9bd9f", "test_setup_code": "", "test_list": ["assert find_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [1, 1, 2]", "assert find_smallest([10, 20, 30, 40, 50], 2) == [10, 20]", "assert find_smallest([5, 5, 5, 5, 5], 3) == [5, 5, 5]", "assert find_smallest([-1, -2, -3, -4, -5], 4) == [-5, -4, -3, -2]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_sum(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return sum(largest_nums)", "task_id": "4_661eaeea-491c-441a-95ec-d5ac3c18ac61", "test_setup_code": "", "test_list": ["assert find_largest_sum([1, 2, 3, 4, 5], 3) == 12", "assert find_largest_sum([10, 5, 20, 15, 30], 2) == 50", "assert find_largest_sum([-1, -2, -3, -4, -5], 4) == -10", "assert find_largest_sum([7, 7, 7, 7, 7], 5) == 35"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_sum(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return sum(smallest_nums)", "task_id": "4_4c0de59e-3f6f-4e07-9113-d01621577e0d", "test_setup_code": "", "test_list": ["assert find_smallest_sum([4, 1, 7, 3, 8, 5], 3) == 8", "assert find_smallest_sum([10, -1, 2, 8, -3, 5], 2) == -4", "assert find_smallest_sum([1, 2, 3, 4, 5], 5) == 15", "assert find_smallest_sum([0, 0, 0, 0, 0], 3) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the product of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\nfrom functools import reduce\ndef find_largest_product(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return reduce(lambda x, y: x * y, largest_nums)", "task_id": "4_06f97eb9-953f-4b18-83c8-7843847cb2ad", "test_setup_code": "", "test_list": ["assert find_largest_product([1, 2, 3, 4, 5], 2) == 20", "assert find_largest_product([10, 20, 5, 6, 3], 3) == 1200", "assert find_largest_product([-10, -20, -5, -6, -3], 2) == 30", "assert find_largest_product([1, 2, 3, 4, 5], 5) == 120"], "challenge_test_list": []}
{"text": "Write a function to find the product of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\nfrom functools import reduce\ndef find_smallest_product(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return reduce(lambda x, y: x * y, smallest_nums)", "task_id": "4_ec13c611-b73e-4d81-9c87-7cbe7c2da037", "test_setup_code": "", "test_list": ["assert find_smallest_product([4, 3, 2, 1], 2) == 2", "assert find_smallest_product([10, 20, 5, 6, 1], 3) == 30", "assert find_smallest_product([5, 8, 12, 7, 3, 9], 4) == 840", "assert find_smallest_product([1, 2, 3, 4, 5], 5) == 120"], "challenge_test_list": []}
{"text": "Write a function to find the largest unique integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_unique(nums, n):\n  unique_nums = list(set(nums))\n  largest_unique_nums = hq.nlargest(n, unique_nums)\n  return largest_unique_nums", "task_id": "4_2ed7fa0b-2dd5-4699-9d98-7569ce1a98b8", "test_setup_code": "", "test_list": ["assert find_largest_unique([4, 1, 2, 2, 3, 4, 5], 3) == [5, 4, 3]", "assert find_largest_unique([10, 20, 20, 30, 40, 50], 2) == [50, 40]", "assert find_largest_unique([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]", "assert find_largest_unique([5, 5, 5, 5, 5], 1) == [5]"], "challenge_test_list": []}
{"text": "Write a function to find the smallest unique integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_unique(nums, n):\n  unique_nums = list(set(nums))\n  smallest_unique_nums = hq.nsmallest(n, unique_nums)\n  return smallest_unique_nums", "task_id": "4_6c933d16-96de-4b8d-981f-5f15e37afdf6", "test_setup_code": "", "test_list": ["assert find_smallest_unique([4, 1, 2, 2, 3, 4, 5], 3) == [1, 2, 3]", "assert find_smallest_unique([10, 20, 20, 10, 30, 40, 50], 4) == [10, 20, 30, 40]", "assert find_smallest_unique([5, 5, 5, 5, 5], 1) == [5]", "assert find_smallest_unique([-1, -2, -3, -4, -5, -1, -2], 3) == [-5, -4, -3]"], "challenge_test_list": []}
{"text": "Write a function to find the indices of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_indices(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  indices = [nums.index(num) for num in largest_nums]\n  return indices", "task_id": "4_ce4f59bd-4f9d-4a85-b5f3-4f161eca07d2", "test_setup_code": "", "test_list": ["assert find_largest_indices([1, 3, 5, 7, 9], 3) == [4, 3, 2]", "assert find_largest_indices([10, 20, 30, 40, 50], 2) == [4, 3]", "assert find_largest_indices([5, 5, 5, 5, 5], 3) == [0, 1, 2]", "assert find_largest_indices([1], 1) == [0]"], "challenge_test_list": []}
{"text": "Write a function to find the indices of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_indices(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  indices = [nums.index(num) for num in smallest_nums]\n  return indices", "task_id": "4_d6d6487c-53be-4cc8-9b99-973474418b92", "test_setup_code": "", "test_list": ["assert find_smallest_indices([4, 1, 7, 3, 8, 5], 2) == [1, 3]", "assert find_smallest_indices([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 3) == [9, 8, 7]", "assert find_smallest_indices([1, 2, 3, 4, 5], 0) == []", "assert find_smallest_indices([5, 3, 1, 2, 4], 5) == [2, 3, 1, 4, 0]"], "challenge_test_list": []}
{"text": "Write a function to find the largest n integers by absolute value from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_absolute(nums, n):\n  largest_abs_nums = hq.nlargest(n, nums, key=abs)\n  return largest_abs_nums", "task_id": "4_127f38f9-47a4-449e-8885-d3a02fbf9c5a", "test_setup_code": "", "test_list": ["assert find_largest_absolute([1, -3, 2, 4, -5], 3) == [-5, 4, -3]", "assert find_largest_absolute([0, 0, 0, 0], 2) == [0, 0]", "assert find_largest_absolute([10, -20, 30, -40, 50], 1) == [-40]", "assert find_largest_absolute([1, 2, 3], 5) == [3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to get the n largest items from a dataset.", "code": "import heapq\ndef largest_nnum(list1, n):\n  largest = heapq.nlargest(n, list1)\n  return largest", "task_id": "10_d8ed2a4b-fcf5-4f25-82ef-7fa9d7634a85", "test_setup_code": "", "test_list": ["assert largest_nnum([1, 2, 3, 4, 5], 3) == [5, 4, 3]", "assert largest_nnum([10, 20, 30, 40, 50], 1) == [50]", "assert largest_nnum([5, 3, 8, 6, 2], 2) == [8, 6]", "assert largest_nnum([1, 1, 1, 1, 1], 3) == [1, 1, 1]", "assert largest_nnum([1, 2, 3], 0) == []", "assert largest_nnum([1, 2, 3], 5) == [3, 2, 1]", "assert largest_nnum([], 3) == []", "assert largest_nnum([7], 1) == [7]", "assert largest_nnum([9, 8, 7, 6, 5], 3) == [9, 8, 7]", "assert largest_nnum([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]", "assert largest_nnum([10, 20, 30, 40, 50], 4) == [50, 40, 30, 20]", "assert largest_nnum([100, 50, 25, 75, 125], 2) == [125, 100]", "assert largest_nnum([1, 2, 2, 3, 3, 4], 3) == [4, 3, 3]", "assert largest_nnum([3, 1, 4, 1, 5, 9, 2, 6], 4) == [9, 6, 5, 4]", "assert largest_nnum([1, 2, 3, 4, 5], 3) == [5, 4, 3]"], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n smallest items from a dataset.", "code": "import heapq\ndef sum_n_smallest(list1, n):\n  smallest = heapq.nsmallest(n, list1)\n  return sum(smallest)", "task_id": "10_969c0e6d-e55a-4c42-8312-a9bfe8538eda", "test_setup_code": "", "test_list": ["assert sum_n_smallest([1, 2, 3, 4, 5], 2) == 3", "assert sum_n_smallest([5, 4, 3, 2, 1], 3) == 6", "assert sum_n_smallest([10, 20, 30, 40, 50], 1) == 10", "assert sum_n_smallest([7, 7, 7, 7, 7], 5) == 35", "assert sum_n_smallest([1, 2, 3, 4, 5], 0) == 0", "assert sum_n_smallest([], 3) == 0", "assert sum_n_smallest([1], 1) == 1", "assert sum_n_smallest([1, 2, 3, 4, 5], 5) == 15", "assert sum_n_smallest([5, 3, 1, 2, 4], 4) == 10", "assert sum_n_smallest([100, 200, 300, 400, 500], 2) == 300", "assert sum_n_smallest([5, 5, 5, 5, 5], 3) == 15", "assert sum_n_smallest([1, 2, 3, 4, 5], 6) == 15", "assert sum_n_smallest([-1, -2, -3, -4, -5], 3) == -12", "assert sum_n_smallest([1, 2, 3, 4, 5], 1) == 1", "assert sum_n_smallest([1, 3, 5, 7, 9], 2) == 4"], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n largest items from a dataset.", "code": "import heapq\ndef sum_n_largest(list1, n):\n  largest = heapq.nlargest(n, list1)\n  return sum(largest)", "task_id": "10_0369ce16-2e0e-4c90-a89f-184193519772", "test_setup_code": "", "test_list": ["assert sum_n_largest([1, 2, 3, 4, 5], 2) == 9", "assert sum_n_largest([10, 20, 30, 40, 50], 3) == 120", "assert sum_n_largest([5, 5, 5, 5, 5], 5) == 25", "assert sum_n_largest([1, 2, 3, 4, 5], 0) == 0", "assert sum_n_largest([1, 2, 3, 4, 5], 1) == 5", "assert sum_n_largest([1, 2, 3, 4, 5], 5) == 15", "assert sum_n_largest([1], 1) == 1", "assert sum_n_largest([1, 2, 3, 4, 5], 3) == 12", "assert sum_n_largest([1, 2, 3, 4, 5], 4) == 14", "assert sum_n_largest([5, 4, 3, 2, 1], 2) == 9", "assert sum_n_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 40", "assert sum_n_largest([100, 200, 300, 400, 500], 3) == 1200", "assert sum_n_largest([1, 1, 1, 1, 1], 3) == 3", "assert sum_n_largest([1, 2, 3, 4, 5], 6) == 15", "assert sum_n_largest([], 3) == 0"], "challenge_test_list": []}
{"text": "Write a function to get the n smallest unique items from a dataset.", "code": "import heapq\ndef smallest_n_unique(list1, n):\n  unique_list = list(set(list1))\n  smallest = heapq.nsmallest(n, unique_list)\n  return smallest", "task_id": "10_efc97607-50c3-479f-9220-14dcb8f5da50", "test_setup_code": "", "test_list": ["assert smallest_n_unique([4, 1, 7, 3, 2, 2, 5], 3) == [1, 2, 3]", "assert smallest_n_unique([10, 20, 30, 40, 50], 2) == [10, 20]", "assert smallest_n_unique([5, 5, 5, 5, 5], 1) == [5]", "assert smallest_n_unique([], 3) == []", "assert smallest_n_unique([1, 2, 3, 4, 5], 0) == []", "assert smallest_n_unique([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert smallest_n_unique([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]", "assert smallest_n_unique([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [1, 2, 3, 4]", "assert smallest_n_unique([1], 1) == [1]", "assert smallest_n_unique([100, 200, 300, 100, 200], 2) == [100, 200]", "assert smallest_n_unique([2, 3, 1, 4, 2, 3, 1, 4], 3) == [1, 2, 3]", "assert smallest_n_unique([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [1, 2, 3, 4, 5]", "assert smallest_n_unique([1, 2, 3, 4, 5], 3) == [1, 2, 3]", "assert smallest_n_unique([5, 4, 3, 2, 1], 3) == [1, 2, 3]", "assert smallest_n_unique([1, 1, 1, 1, 1], 2) == [1]"], "challenge_test_list": []}
{"text": "Write a function to get the n largest unique items from a dataset.", "code": "import heapq\ndef largest_n_unique(list1, n):\n  unique_list = list(set(list1))\n  largest = heapq.nlargest(n, unique_list)\n  return largest", "task_id": "10_c56d6a97-d0fc-4f8e-9ebf-a725fea2599b", "test_setup_code": "", "test_list": ["assert largest_n_unique([1, 2, 3, 4, 5], 3) == [5, 4, 3]", "assert largest_n_unique([5, 5, 5, 5, 5], 1) == [5]", "assert largest_n_unique([1, 2, 3, 4, 5], 0) == []", "assert largest_n_unique([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]", "assert largest_n_unique([1, 2, 3, 4, 5], 10) == [5, 4, 3, 2, 1]", "assert largest_n_unique([], 3) == []", "assert largest_n_unique([1, 1, 1, 1, 1], 3) == [1]", "assert largest_n_unique([1, 2, 3, 4, 5], 1) == [5]", "assert largest_n_unique([5, 4, 3, 2, 1], 3) == [5, 4, 3]", "assert largest_n_unique([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [9, 6, 5, 4]", "assert largest_n_unique([1, 2, 3, 4, 5], 2) == [5, 4]", "assert largest_n_unique([3, 3, 3, 3, 3], 2) == [3]", "assert largest_n_unique([1, 2, 3, 4, 5], 6) == [5, 4, 3, 2, 1]", "assert largest_n_unique([10, 20, 30, 40, 50], 3) == [50, 40, 30]", "assert largest_n_unique([1, 2, 2, 3, 3, 4, 4, 5, 5], 3) == [5, 4, 3]"], "challenge_test_list": []}
{"text": "Write a function to get the indices of the n smallest items from a dataset.", "code": "import heapq\ndef smallest_n_indices(list1, n):\n  smallest = heapq.nsmallest(n, enumerate(list1), key=lambda x: x[1])\n  return [i[0] for i in smallest]", "task_id": "10_685eca7c-0bd0-4b49-b82b-153f0af9be2b", "test_setup_code": "", "test_list": ["assert smallest_n_indices([4, 1, 3, 2], 2) == [1, 3]", "assert smallest_n_indices([10, 20, 30, 40, 50], 3) == [0, 1, 2]", "assert smallest_n_indices([5, 3, 8, 6, 2], 1) == [4]", "assert smallest_n_indices([1, 2, 3, 4, 5], 5) == [0, 1, 2, 3, 4]", "assert smallest_n_indices([5, 4, 3, 2, 1], 3) == [4, 3, 2]", "assert smallest_n_indices([100], 1) == [0]", "assert smallest_n_indices([7, 7, 7, 7, 7], 3) == [0, 1, 2]", "assert smallest_n_indices([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 4) == [1, 3, 6, 0]", "assert smallest_n_indices([1, 2, 3, 1, 2, 3], 2) == [0, 3]", "assert smallest_n_indices([1, 2, 3, 4, 5], 0) == []", "assert smallest_n_indices([1, 2, 3, 4, 5], 6) == [0, 1, 2, 3, 4]", "assert smallest_n_indices([-1, -2, -3, -4, -5], 3) == [4, 3, 2]", "assert smallest_n_indices([1.5, 2.5, 0.5, 3.5], 2) == [2, 0]", "assert smallest_n_indices([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [9, 8, 7, 6, 5]", "assert smallest_n_indices([1, 1, 1, 1, 1], 4) == [0, 1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to get the indices of the n largest items from a dataset.", "code": "import heapq\ndef largest_n_indices(list1, n):\n  largest = heapq.nlargest(n, enumerate(list1), key=lambda x: x[1])\n  return [i[0] for i in largest]", "task_id": "10_6eb0e325-86d1-41a5-8917-857c3514133a", "test_setup_code": "", "test_list": ["assert largest_n_indices([1, 3, 5, 7, 9], 3) == [4, 3, 2]", "assert largest_n_indices([10, 20, 30, 40, 50], 2) == [4, 3]", "assert largest_n_indices([5, 1, 5, 1, 5], 1) == [0]", "assert largest_n_indices([5, 1, 5, 1, 5], 3) == [4, 2, 0]", "assert largest_n_indices([1, 2, 3, 4, 5], 5) == [4, 3, 2, 1, 0]", "assert largest_n_indices([1, 2, 3, 4, 5], 0) == []", "assert largest_n_indices([], 3) == []", "assert largest_n_indices([5], 1) == [0]", "assert largest_n_indices([5, 5, 5, 5, 5], 3) == [4, 3, 2]", "assert largest_n_indices([1, 2, 3, 4, 5], 1) == [4]", "assert largest_n_indices([1, 2, 3, 4, 5], 2) == [4, 3]", "assert largest_n_indices([5, 4, 3, 2, 1], 3) == [0, 1, 2]", "assert largest_n_indices([1, 3, 1, 3, 1], 2) == [3, 1]", "assert largest_n_indices([-1, -2, -3, -4, -5], 2) == [0, 1]", "assert largest_n_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [9, 8, 7, 6]"], "challenge_test_list": []}
{"text": "Write a function to get the n smallest items by absolute value from a dataset.", "code": "import heapq\ndef smallest_n_abs(list1, n):\n  smallest = heapq.nsmallest(n, list1, key=abs)\n  return smallest", "task_id": "10_fdcbcb1c-d395-47c3-a5e1-bc5c457c7bf7", "test_setup_code": "", "test_list": ["assert smallest_n_abs([3, -1, -4, 1, 5, 9], 3) == [-1, 1, 3]", "assert smallest_n_abs([10, -10, 20, -20, 30, -30], 2) == [10, -10]", "assert smallest_n_abs([1, 2, 3, 4, 5], 0) == []", "assert smallest_n_abs([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert smallest_n_abs([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]", "assert smallest_n_abs([-1, -2, -3, -4, -5], 3) == [-1, -2, -3]", "assert smallest_n_abs([0, 0, 0, 0], 2) == [0, 0]", "assert smallest_n_abs([0, 0, 0, 0], 4) == [0, 0, 0, 0]", "assert smallest_n_abs([1, -1, 2, -2, 3, -3], 4) == [1, -1, 2, -2]", "assert smallest_n_abs([100, -100, 50, -50, 25, -25], 3) == [25, -25, 50]", "assert smallest_n_abs([1], 1) == [1]", "assert smallest_n_abs([-1], 1) == [-1]", "assert smallest_n_abs([1, -1, 1, -1], 2) == [1, -1]", "assert smallest_n_abs([3, 1, 4, 1, 5, 9], 3) == [1, 1, 3]", "assert smallest_n_abs([10, -20, 30, -40, 50], 1) == [10]"], "challenge_test_list": []}
{"text": "Write a function to get the n largest items by absolute value from a dataset.", "code": "import heapq\ndef largest_n_abs(list1, n):\n  largest = heapq.nlargest(n, list1, key=abs)\n  return largest", "task_id": "10_be8d65e5-8fdc-43ea-adc8-2d4c2a66b6c7", "test_setup_code": "", "test_list": ["assert largest_n_abs([1, -2, 3, -4, 5], 3) == [5, -4, 3]", "assert largest_n_abs([1, -2, 3, -4, 5], 0) == []", "assert largest_n_abs([1, -2, 3, -4, 5], 5) == [5, -4, 3, -2, 1]", "assert largest_n_abs([1, -2, 3, -4, 5], 1) == [5]", "assert largest_n_abs([1, -2, 3, -4, 5], 2) == [5, -4]", "assert largest_n_abs([1, -2, 3, -4, 5], 10) == [5, -4, 3, -2, 1]", "assert largest_n_abs([], 3) == []", "assert largest_n_abs([0, 0, 0], 2) == [0, 0]", "assert largest_n_abs([1, 2, 3, 4, 5], 3) == [5, 4, 3]", "assert largest_n_abs([-1, -2, -3, -4, -5], 3) == [-5, -4, -3]", "assert largest_n_abs([1, 1, 1, 1, 1], 3) == [1, 1, 1]", "assert largest_n_abs([1, -1, 1, -1, 1], 3) == [1, -1, 1]", "assert largest_n_abs([1], 1) == [1]", "assert largest_n_abs([-1], 1) == [-1]", "assert largest_n_abs([1, -2, 3, -4, 5, 6, -7, 8, -9, 10], 4) == [10, -9, 8, -7]"], "challenge_test_list": []}
{"text": "Write a function to get the n smallest even items from a dataset.", "code": "import heapq\ndef smallest_n_even(list1, n):\n  even_list = [x for x in list1 if x % 2 == 0]\n  smallest = heapq.nsmallest(n, even_list)\n  return smallest", "task_id": "10_2d68db98-0c42-48cb-bc1b-5aa3b1daaace", "test_setup_code": "", "test_list": ["assert smallest_n_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [2, 4, 6]", "assert smallest_n_even([10, 20, 30, 40, 50], 2) == [10, 20]", "assert smallest_n_even([5, 7, 9, 11], 1) == []", "assert smallest_n_even([2, 4, 6, 8, 10], 0) == []", "assert smallest_n_even([2, 4, 6, 8, 10], 10) == [2, 4, 6, 8, 10]", "assert smallest_n_even([], 5) == []", "assert smallest_n_even([1, 3, 5, 7, 9], 3) == []", "assert smallest_n_even([2, 4, 6, 8, 10], 5) == [2, 4, 6, 8, 10]", "assert smallest_n_even([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == [2, 4, 6, 8]", "assert smallest_n_even([1, 2, 2, 4, 4, 6, 6], 3) == [2, 2, 4]", "assert smallest_n_even([0, -2, -4, -6, -8], 3) == [-8, -6, -4]", "assert smallest_n_even([2], 1) == [2]", "assert smallest_n_even([2, 4, 6, 8, 10], 1) == [2]", "assert smallest_n_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [2, 4, 6, 8, 10]", "assert smallest_n_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 7) == [2, 4, 6, 8, 10, 12, 14]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down.", "code": "def min_cost_path(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_5790c430-096e-4394-b4d3-bd1dfbddc2b0", "test_setup_code": "", "test_list": ["assert min_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost_path([[1, 2], [3, 4]], 1, 1) == 7", "assert min_cost_path([[1]], 0, 0) == 1", "assert min_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 21", "assert min_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 2) == 12", "assert min_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1) == 7", "assert min_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 2) == 6", "assert min_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 0) == 6", "assert min_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1) == 9", "assert min_cost_path([[1, 2], [3, 4], [5, 6]], 2, 1) == 10", "assert min_cost_path([[1, 2, 3], [4, 5, 6]], 1, 2) == 12", "assert min_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3) == 34", "assert min_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 1, 3) == 20", "assert min_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 2) == 27", "assert min_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 0, 3) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the maximum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down.", "code": "def max_cost_path(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = max(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_b7ab8d5e-8597-4d8c-bbd3-419b3d3010c6", "test_setup_code": "", "test_list": ["assert max_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 21", "assert max_cost_path([[1, 2], [3, 4]], 1, 1) == 7", "assert max_cost_path([[5]], 0, 0) == 5", "assert max_cost_path([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 16", "assert max_cost_path([[1, 10, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 24", "assert max_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]], 3, 3) == 34", "assert max_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 3, 2) == 30", "assert max_cost_path([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 2, 3) == 33", "assert max_cost_path([[1, 2, 3], [4, 5, 6]], 1, 2) == 12", "assert max_cost_path([[1, 2, 3], [4, 5, 6]], 0, 2) == 6", "assert max_cost_path([[1, 2, 3], [4, 5, 6]], 1, 0) == 5", "assert max_cost_path([[1, 2, 3], [4, 5, 6]], 0, 1) == 3", "assert max_cost_path([[1, 2, 3], [4, 5, 6]], 1, 1) == 7", "assert max_cost_path([[1, 2, 3, 4], [5, 6, 7, 8]], 1, 3) == 26", "assert max_cost_path([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3) == 38"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can move right, down, or diagonally.", "code": "def min_cost_path_diagonal(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_b8b27f47-4b96-4833-8cd9-f6d89cebc9b2", "test_setup_code": "", "test_list": ["assert min_cost_path_diagonal([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8", "assert min_cost_path_diagonal([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1) == 9", "assert min_cost_path_diagonal([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0) == 1", "assert min_cost_path_diagonal([[1]], 0, 0) == 1", "assert min_cost_path_diagonal([[1, 2], [3, 4]], 1, 1) == 7", "assert min_cost_path_diagonal([[10, 10, 2], [10, 10, 2], [2, 2, 1]], 2, 2) == 15", "assert min_cost_path_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2) == 15", "assert min_cost_path_diagonal([[5, 9, 6], [11, 5, 2], [8, 7, 4]], 2, 2) == 14", "assert min_cost_path_diagonal([[1, 2, 3], [4, 8, 2], [1, 5, 3], [2, 2, 2]], 3, 2) == 10", "assert min_cost_path_diagonal([[1, 2, 3, 4], [4, 8, 2, 1], [1, 5, 3, 2]], 2, 3) == 8", "assert min_cost_path_diagonal([[1, 2, 3, 4], [4, 8, 2, 1], [1, 5, 3, 2], [2, 2, 2, 2]], 3, 3) == 9", "assert min_cost_path_diagonal([[1, 2, 3], [4, 8, 2], [1, 5, 3], [2, 2, 2]], 3, 1) == 8", "assert min_cost_path_diagonal([[1, 2, 3, 4], [4, 8, 2, 1], [1, 5, 3, 2], [2, 2, 2, 2]], 2, 2) == 8", "assert min_cost_path_diagonal([[1, 2, 3, 4], [4, 8, 2, 1], [1, 5, 3, 2], [2, 2, 2, 2]], 1, 2) == 6", "assert min_cost_path_diagonal([[1, 2, 3, 4], [4, 8, 2, 1], [1, 5, 3, 2], [2, 2, 2, 2]], 0, 3) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells are marked as obstacles and cannot be traversed.", "code": "def min_cost_path_with_obstacles(cost, m, n, obstacles):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    for obs in obstacles:\n        tc[obs[0]][obs[1]] = float('inf')\n    tc[0][0] = cost[0][0] if (0, 0) not in obstacles else float('inf')\n    for i in range(1, m+1):\n        if (i, 0) not in obstacles:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if (0, j) not in obstacles:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if (i, j) not in obstacles:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_9a9db470-9c14-44fc-8c8e-edc954410425", "test_setup_code": "", "test_list": ["assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, []) == 8", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(1, 1)]) == 9", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(1, 1), (2, 1)]) == -1", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, []) == 1", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, [(0, 0)]) == -1", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, []) == 7", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(1, 0)]) == 9", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(1, 0), (2, 0)]) == -1", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, []) == 7", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, [(0, 1)]) == 9", "assert min_cost_path_with_obstacles([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, [(0, 1), (1, 2)]) == -1", "assert min_cost_path_with_obstacles([[1, 2], [4, 8]], 1, 1, []) == 9", "assert min_cost_path_with_obstacles([[1, 2], [4, 8]], 1, 1, [(1, 0)]) == 3", "assert min_cost_path_with_obstacles([[1, 2], [4, 8]], 1, 1, [(0, 1)]) == 5", "assert min_cost_path_with_obstacles([[1, 2], [4, 8]], 1, 1, [(0, 1), (1, 0)]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move incurs an additional penalty cost.", "code": "def min_cost_path_with_penalty(cost, m, n, penalty):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] + penalty\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] + penalty\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j] + penalty\n    return tc[m][n]", "task_id": "1_afcd5cc8-cc65-46f3-a057-3e5110075c09", "test_setup_code": "", "test_list": ["assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 1) == 15", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, 1) == 12", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, 1) == 9", "assert min_cost_path_with_penalty([[1, 2], [4, 8]], 1, 1, 1) == 12", "assert min_cost_path_with_penalty([[1]], 0, 0, 1) == 1", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 2, 2) == 10", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 0, 2) == 11", "assert min_cost_path_with_penalty([[1, 2], [4, 8], [1, 5]], 2, 1, 0) == 14", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1, 0) == 9", "assert min_cost_path_with_penalty([[1, 2], [4, 8]], 1, 0, 1) == 6", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 1, 1) == 4", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 0, 1) == 6", "assert min_cost_path_with_penalty([[1, 2], [4, 8]], 0, 1, 0) == 3", "assert min_cost_path_with_penalty([[1, 2], [4, 8]], 1, 1, 2) == 15", "assert min_cost_path_with_penalty([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 0) == 13"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells are restricted and cannot be traversed.", "code": "def min_cost_path_with_restrictions(cost, m, n, restrictions):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    for res in restrictions:\n        tc[res[0]][res[1]] = float('inf')\n    tc[0][0] = cost[0][0] if (0, 0) not in restrictions else float('inf')\n    for i in range(1, m+1):\n        if (i, 0) not in restrictions:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if (0, j) not in restrictions:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if (i, j) not in restrictions:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_013b9ee7-3383-476c-bf21-2724a612fa3d", "test_setup_code": "", "test_list": ["assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, []) == 8", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(1, 1)]) == 12", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 1), (1, 1)]) == 10", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 0)]) == -1", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(2, 2)]) == -1", "assert min_cost_path_with_restrictions([[1]], 0, 0, []) == 1", "assert min_cost_path_with_restrictions([[1]], 0, 0, [(0, 0)]) == -1", "assert min_cost_path_with_restrictions([[1, 2], [3, 4]], 1, 1, []) == 7", "assert min_cost_path_with_restrictions([[1, 2], [3, 4]], 1, 1, [(0, 1)]) == 8", "assert min_cost_path_with_restrictions([[1, 2], [3, 4]], 1, 1, [(1, 0)]) == 3", "assert min_cost_path_with_restrictions([[1, 2], [3, 4]], 1, 1, [(1, 1)]) == -1", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, []) == 7", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, [(0, 2)]) == 13", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(1, 0)]) == 8", "assert min_cost_path_with_restrictions([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(2, 0)]) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells have bonus points that reduce the cost.", "code": "def min_cost_path_with_bonus(cost, m, n, bonuses):\n    R = len(cost)\n    C = len(cost[0])\n    bonus_dict = {(x, y): b for x, y, b in bonuses}\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0] - bonus_dict.get((0, 0), 0)\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] - bonus_dict.get((i, 0), 0)\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] - bonus_dict.get((0, j), 0)\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j] - bonus_dict.get((i, j), 0)\n    return tc[m][n]", "task_id": "1_8b219187-fdfd-4fb9-9178-3d7bfb39090b", "test_setup_code": "", "test_list": ["assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, []) == 8", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 0, 1)]) == 7", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(1, 1, 2)]) == 6", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(2, 2, 3)]) == 5", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 1, 1), (1, 2, 1)]) == 7", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, []) == 1", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, [(0, 0, 1)]) == 0", "assert min_cost_path_with_bonus([[1]], 0, 0, []) == 1", "assert min_cost_path_with_bonus([[1]], 0, 0, [(0, 0, 1)]) == 0", "assert min_cost_path_with_bonus([[5, 9, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 0, 5), (1, 1, 8), (2, 2, 3)]) == 0", "assert min_cost_path_with_bonus([[1, 2], [3, 4]], 1, 1, [(0, 1, 1), (1, 0, 1)]) == 4", "assert min_cost_path_with_bonus([[1, 2], [3, 4]], 1, 1, [(0, 0, 1), (1, 1, 2)]) == 5", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, [(0, 1, 1), (1, 2, 1)]) == 6", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(1, 0, 1), (2, 1, 1)]) == 7", "assert min_cost_path_with_bonus([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 0, 1), (1, 1, 2), (2, 2, 3)]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move consumes energy and you have a limited amount of energy.", "code": "def min_cost_path_with_energy(cost, m, n, energy):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        if energy >= i:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if energy >= j:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if energy >= i + j:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_ebac4857-92c7-410e-8c21-e1f3a17425a4", "test_setup_code": "", "test_list": ["assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 10) == 8", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 5) == -1", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1, 3) == 9", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, 1) == 1", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, 4) == 7", "assert min_cost_path_with_energy([[1, 2], [3, 4]], 1, 1, 3) == 7", "assert min_cost_path_with_energy([[1, 2], [3, 4]], 1, 1, 2) == -1", "assert min_cost_path_with_energy([[1]], 0, 0, 1) == 1", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 15) == 8", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 0) == -1", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 7) == -1", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, 6) == 6", "assert min_cost_path_with_energy([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, 3) == -1", "assert min_cost_path_with_energy([[5, 9, 6], [11, 5, 2], [4, 7, 1]], 2, 2, 12) == 14", "assert min_cost_path_with_energy([[5, 9, 6], [11, 5, 2], [4, 7, 1]], 2, 2, 8) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move has a variable cost that changes based on the current position.", "code": "def min_cost_path_with_variable_cost(cost, m, n, variable_cost):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] + variable_cost * i\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] + variable_cost * j\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j] + variable_cost * i, tc[i][j-1] + variable_cost * j) + cost[i][j]\n    return tc[m][n]", "task_id": "1_28d0c4d5-d179-44f9-ade1-cef4dca5f721", "test_setup_code": "", "test_list": ["assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 0) == 8", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, 1) == 11", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 0, 0, 0) == 1", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1, 0) == 9", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 1, 1) == 12", "assert min_cost_path_with_variable_cost([[1, 2], [3, 4]], 1, 1, 0) == 7", "assert min_cost_path_with_variable_cost([[1, 2], [3, 4]], 1, 1, 2) == 11", "assert min_cost_path_with_variable_cost([[1]], 0, 0, 0) == 1", "assert min_cost_path_with_variable_cost([[1, 2], [3, 4]], 0, 1, 0) == 3", "assert min_cost_path_with_variable_cost([[1, 2], [3, 4]], 1, 0, 0) == 4", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, 0) == 10", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, 1) == 14", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, 0) == 7", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, 1) == 11", "assert min_cost_path_with_variable_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 0, 0) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from any of the given starting points in starts for the given cost matrix cost[][], where you can only move right or down.", "code": "def min_cost_path_with_multiple_starts(cost, starts, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    min_cost = float('inf')\n    for start in starts:\n        tc = [[float('inf') for x in range(C)] for x in range(R)]\n        tc[start[0]][start[1]] = cost[start[0]][start[1]]\n        for i in range(start[0], m+1):\n            if i > start[0]:\n                tc[i][start[1]] = tc[i-1][start[1]] + cost[i][start[1]]\n        for j in range(start[1], n+1):\n            if j > start[1]:\n                tc[start[0]][j] = tc[start[0]][j-1] + cost[start[0]][j]\n        for i in range(start[0]+1, m+1):\n            for j in range(start[1]+1, n+1):\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n        min_cost = min(min_cost, tc[m][n])\n    return min_cost", "task_id": "1_5667032b-438e-4b2f-baca-d152fb08b4a6", "test_setup_code": "", "test_list": ["assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(0, 0)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(0, 0), (1, 1)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(0, 0), (2, 0)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2], [4, 8]], [(0, 0)], 1, 1) == 11", "assert min_cost_path_with_multiple_starts([[1, 2], [4, 8]], [(0, 0), (1, 0)], 1, 1) == 11", "assert min_cost_path_with_multiple_starts([[1]], [(0, 0)], 0, 0) == 1", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(0, 1)], 2, 2) == 10", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(1, 1)], 2, 2) == 10", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(2, 2)], 2, 2) == 3", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(0, 0), (0, 2)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(1, 0), (0, 1)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(1, 1), (2, 0)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2, 3], [4, 8, 2], [1, 5, 3]], [(1, 2), (2, 1)], 2, 2) == 8", "assert min_cost_path_with_multiple_starts([[1, 2], [4, 8]], [(0, 1)], 1, 1) == 10", "assert min_cost_path_with_multiple_starts([[1, 2], [4, 8]], [(1, 0)], 1, 1) == 12"], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells have teleport points that allow you to jump to another cell.", "code": "def min_cost_path_with_teleport(cost, m, n, teleports):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    for t in teleports:\n        tc[t[2]][t[3]] = min(tc[t[2]][t[3]], tc[t[0]][t[1]])\n    return tc[m][n]", "task_id": "1_0638d4f5-8eba-4eab-9cf8-8cbd3bd61159", "test_setup_code": "", "test_list": ["assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, []) == 8", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 0, 2, 2)]) == 1", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2, [(0, 1, 2, 2)]) == 4", "assert min_cost_path_with_teleport([[1]], 0, 0, []) == 1", "assert min_cost_path_with_teleport([[1, 2], [3, 4]], 1, 1, [(0, 0, 1, 1)]) == 1", "assert min_cost_path_with_teleport([[1, 2], [3, 4]], 1, 1, [(0, 1, 1, 0)]) == 3", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, []) == 10", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 1, [(0, 1, 2, 1)]) == 7", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, []) == 7", "assert min_cost_path_with_teleport([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 1, 2, [(0, 2, 1, 0)]) == 3", "assert min_cost_path_with_teleport([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3, []) == 21", "assert min_cost_path_with_teleport([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3, [(0, 3, 2, 0)]) == 4", "assert min_cost_path_with_teleport([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3, [(0, 0, 2, 3)]) == 1", "assert min_cost_path_with_teleport([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3, [(1, 1, 2, 2)]) == 16", "assert min_cost_path_with_teleport([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 2, 3, [(0, 0, 1, 1), (1, 1, 2, 2)]) == 7"], "challenge_test_list": []}
{"text": "Write a python function to remove the first and last occurrence of a given character from the string.", "code": "def remove_first_last_occurrence(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n    if last_index != -1:\n        s = s[:last_index] + s[last_index+1:]\n    return s", "task_id": "11_c49cb6d4-f0d6-495c-b392-8174bdfffd5d", "test_setup_code": "", "test_list": ["assert remove_first_last_occurrence('hello', 'l') == 'heo'", "assert remove_first_last_occurrence('hello', 'h') == 'ello'", "assert remove_first_last_occurrence('hello', 'o') == 'hell'", "assert remove_first_last_occurrence('hello', 'x') == 'hello'", "assert remove_first_last_occurrence('aabbcc', 'a') == 'abbcc'", "assert remove_first_last_occurrence('aabbcc', 'b') == 'aabcc'", "assert remove_first_last_occurrence('aabbcc', 'c') == 'aabbc'", "assert remove_first_last_occurrence('aaaaaa', 'a') == 'aaaa'", "assert remove_first_last_occurrence('abcabcabc', 'a') == 'bcabcabc'", "assert remove_first_last_occurrence('abcabcabc', 'b') == 'acabcabc'", "assert remove_first_last_occurrence('abcabcabc', 'c') == 'ababcabc'", "assert remove_first_last_occurrence('xyz', 'x') == 'yz'", "assert remove_first_last_occurrence('xyz', 'y') == 'xz'", "assert remove_first_last_occurrence('xyz', 'z') == 'xy'", "assert remove_first_last_occurrence('', 'a') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given character from the string.", "code": "def remove_all_occurrences(s: str, ch: str) -> str:\n    return s.replace(ch, '')", "task_id": "11_20aa06ad-91a6-4df4-9548-b81612cc53c5", "test_setup_code": "", "test_list": ["assert remove_all_occurrences('hello world', 'l') == 'heo word'", "assert remove_all_occurrences('hello world', 'o') == 'hell wrld'", "assert remove_all_occurrences('hello world', ' ') == 'helloworld'", "assert remove_all_occurrences('hello world', 'x') == 'hello world'", "assert remove_all_occurrences('aaaaaa', 'a') == ''", "assert remove_all_occurrences('aaaaaa', 'b') == 'aaaaaa'", "assert remove_all_occurrences('', 'a') == ''", "assert remove_all_occurrences('a', 'a') == ''", "assert remove_all_occurrences('a', 'b') == 'a'", "assert remove_all_occurrences('abcabcabc', 'b') == 'acacac'", "assert remove_all_occurrences('abcabcabc', 'c') == 'ababab'", "assert remove_all_occurrences('abcabcabc', 'a') == 'bcbcbc'", "assert remove_all_occurrences('123123123', '1') == '232323'", "assert remove_all_occurrences('123123123', '2') == '131313'", "assert remove_all_occurrences('123123123', '3') == '121212'"], "challenge_test_list": []}
{"text": "Write a python function to remove the first occurrence of a given character from the string.", "code": "def remove_first_occurrence(s: str, ch: str) -> str:\n    index = s.find(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n    return s", "task_id": "11_cc78c2a2-6a82-4ba6-ac3e-27542eac3d5d", "test_setup_code": "", "test_list": ["assert remove_first_occurrence('hello', 'l') == 'helo'", "assert remove_first_occurrence('hello', 'h') == 'ello'", "assert remove_first_occurrence('hello', 'o') == 'hell'", "assert remove_first_occurrence('hello', 'x') == 'hello'", "assert remove_first_occurrence('a', 'a') == ''", "assert remove_first_occurrence('abcabc', 'a') == 'bcabc'", "assert remove_first_occurrence('abcabc', 'b') == 'acabc'", "assert remove_first_occurrence('abcabc', 'c') == 'abcab'", "assert remove_first_occurrence('aaaaa', 'a') == 'aaaa'", "assert remove_first_occurrence('mississippi', 's') == 'misisippi'", "assert remove_first_occurrence('mississippi', 'i') == 'mssissippi'", "assert remove_first_occurrence('mississippi', 'p') == 'mississipi'", "assert remove_first_occurrence('', 'a') == ''", "assert remove_first_occurrence('a', 'b') == 'a'", "assert remove_first_occurrence('abc', '') == 'abc'"], "challenge_test_list": []}
{"text": "Write a python function to remove the last occurrence of a given character from the string.", "code": "def remove_last_occurrence(s: str, ch: str) -> str:\n    index = s.rfind(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n    return s", "task_id": "11_c9b21c9a-8b29-4a16-b67e-0ce566f0f43d", "test_setup_code": "", "test_list": ["assert remove_last_occurrence('hello world', 'o') == 'hello wrld'", "assert remove_last_occurrence('hello world', 'l') == 'hello word'", "assert remove_last_occurrence('hello world', 'h') == 'ello world'", "assert remove_last_occurrence('hello world', 'z') == 'hello world'", "assert remove_last_occurrence('aabbcc', 'a') == 'abbcc'", "assert remove_last_occurrence('aabbcc', 'b') == 'aabcc'", "assert remove_last_occurrence('aabbcc', 'c') == 'aabbc'", "assert remove_last_occurrence('aabbcc', 'd') == 'aabbcc'", "assert remove_last_occurrence('aaaa', 'a') == 'aaa'", "assert remove_last_occurrence('abcabc', 'c') == 'abcab'", "assert remove_last_occurrence('abcabc', 'b') == 'abcac'", "assert remove_last_occurrence('abcabc', 'a') == 'bcabc'", "assert remove_last_occurrence('a', 'a') == ''", "assert remove_last_occurrence('', 'a') == ''", "assert remove_last_occurrence('mississippi', 's') == 'mississipi'"], "challenge_test_list": []}
{"text": "Write a python function to remove the first n occurrences of a given character from the string.", "code": "def remove_first_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(result)", "task_id": "11_f58418e4-0949-4759-89fd-797fc5425832", "test_setup_code": "", "test_list": ["assert remove_first_n_occurrences('hello world', 'l', 2) == 'heo world'", "assert remove_first_n_occurrences('hello world', 'o', 1) == 'hell world'", "assert remove_first_n_occurrences('hello world', 'z', 1) == 'hello world'", "assert remove_first_n_occurrences('hello world', 'l', 0) == 'hello world'", "assert remove_first_n_occurrences('hello world', 'l', 10) == 'heo word'", "assert remove_first_n_occurrences('aaaaaa', 'a', 3) == 'aaa'", "assert remove_first_n_occurrences('aaaaaa', 'a', 6) == ''", "assert remove_first_n_occurrences('aaaaaa', 'a', 0) == 'aaaaaa'", "assert remove_first_n_occurrences('abcabcabc', 'b', 2) == 'acacabc'", "assert remove_first_n_occurrences('abcabcabc', 'c', 3) == 'ababab'", "assert remove_first_n_occurrences('', 'a', 1) == ''", "assert remove_first_n_occurrences('a', 'a', 1) == ''", "assert remove_first_n_occurrences('a', 'a', 0) == 'a'", "assert remove_first_n_occurrences('a', 'b', 1) == 'a'", "assert remove_first_n_occurrences('abc', 'a', 1) == 'bc'"], "challenge_test_list": []}
{"text": "Write a python function to remove the last n occurrences of a given character from the string.", "code": "def remove_last_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in reversed(s):\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(reversed(result))", "task_id": "11_2d1f2caf-8be4-441d-b6bf-15e2b722a724", "test_setup_code": "", "test_list": ["assert remove_last_n_occurrences('hello world', 'l', 2) == 'hello word'", "assert remove_last_n_occurrences('hello world', 'o', 1) == 'hell world'", "assert remove_last_n_occurrences('hello world', 'x', 1) == 'hello world'", "assert remove_last_n_occurrences('aaaaa', 'a', 3) == 'aa'", "assert remove_last_n_occurrences('aaaaa', 'a', 5) == ''", "assert remove_last_n_occurrences('aaaaa', 'a', 0) == 'aaaaa'", "assert remove_last_n_occurrences('abcabcabc', 'c', 2) == 'abcabcab'", "assert remove_last_n_occurrences('abcabcabc', 'a', 1) == 'abcabcbc'", "assert remove_last_n_occurrences('abcabcabc', 'b', 3) == 'acacac'", "assert remove_last_n_occurrences('mississippi', 's', 2) == 'mississipi'", "assert remove_last_n_occurrences('mississippi', 'i', 4) == 'msssspp'", "assert remove_last_n_occurrences('mississippi', 'p', 1) == 'mississipi'", "assert remove_last_n_occurrences('a', 'a', 1) == ''", "assert remove_last_n_occurrences('a', 'a', 0) == 'a'", "assert remove_last_n_occurrences('a', 'b', 1) == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to remove occurrences of a given character from the string if they are at an even index.", "code": "def remove_even_index_occurrences(s: str, ch: str) -> str:\n    result = []\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c == ch:\n            continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_b7ccac81-1ab6-42bb-a4df-cb7071a9fa42", "test_setup_code": "", "test_list": ["assert remove_even_index_occurrences('hello', 'l') == 'helo'", "assert remove_even_index_occurrences('abcdefg', 'a') == 'bcdefg'", "assert remove_even_index_occurrences('abcdefg', 'b') == 'acdefg'", "assert remove_even_index_occurrences('abcdefg', 'c') == 'abdefg'", "assert remove_even_index_occurrences('abcdefg', 'd') == 'abcefg'", "assert remove_even_index_occurrences('abcdefg', 'e') == 'abcdfg'", "assert remove_even_index_occurrences('abcdefg', 'f') == 'abcdeg'", "assert remove_even_index_occurrences('abcdefg', 'g') == 'abcdef'", "assert remove_even_index_occurrences('aabbcc', 'a') == 'abbcc'", "assert remove_even_index_occurrences('aabbcc', 'b') == 'aabcc'", "assert remove_even_index_occurrences('aabbcc', 'c') == 'aabbc'", "assert remove_even_index_occurrences('aabbcc', 'd') == 'aabbcc'", "assert remove_even_index_occurrences('a', 'a') == ''", "assert remove_even_index_occurrences('aa', 'a') == 'a'", "assert remove_even_index_occurrences('abcabcabc', 'a') == 'bcabcabc'"], "challenge_test_list": []}
{"text": "Write a python function to remove occurrences of a given character from the string if they are at an odd index.", "code": "def remove_odd_index_occurrences(s: str, ch: str) -> str:\n    result = []\n    for i, c in enumerate(s):\n        if i % 2 != 0 and c == ch:\n            continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_973e4243-83d0-49dc-b823-e3b962e000f2", "test_setup_code": "", "test_list": ["assert remove_odd_index_occurrences('hello', 'l') == 'helo'", "assert remove_odd_index_occurrences('hello', 'o') == 'hello'", "assert remove_odd_index_occurrences('aabbcc', 'a') == 'aabbcc'", "assert remove_odd_index_occurrences('aabbcc', 'b') == 'aabcc'", "assert remove_odd_index_occurrences('aabbcc', 'c') == 'aabbc'", "assert remove_odd_index_occurrences('abcdef', 'a') == 'abcdef'", "assert remove_odd_index_occurrences('abcdef', 'b') == 'acdef'", "assert remove_odd_index_occurrences('abcdef', 'f') == 'abcdef'", "assert remove_odd_index_occurrences('abababab', 'a') == 'abababab'", "assert remove_odd_index_occurrences('abababab', 'b') == 'aaaabaaa'", "assert remove_odd_index_occurrences('xoxoxoxo', 'x') == 'xoxoxoxo'", "assert remove_odd_index_occurrences('xoxoxoxo', 'o') == 'xxoxxxo'", "assert remove_odd_index_occurrences('', 'a') == ''", "assert remove_odd_index_occurrences('a', 'a') == 'a'", "assert remove_odd_index_occurrences('a', 'b') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to remove the first and last n occurrences of a given character from the string.", "code": "def remove_first_last_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    s = ''.join(result)\n    count = 0\n    result = []\n    for c in reversed(s):\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(reversed(result))", "task_id": "11_14ba56ef-4564-40b0-8514-cd741d9276ae", "test_setup_code": "", "test_list": ["assert remove_first_last_n_occurrences('hello world', 'l', 1) == 'heo word'", "assert remove_first_last_n_occurrences('hello world', 'o', 1) == 'hell wrld'", "assert remove_first_last_n_occurrences('banana', 'a', 2) == 'bnn'", "assert remove_first_last_n_occurrences('mississippi', 's', 2) == 'miiippi'", "assert remove_first_last_n_occurrences('aabbcc', 'a', 1) == 'abbcc'", "assert remove_first_last_n_occurrences('aabbcc', 'b', 1) == 'aabcc'", "assert remove_first_last_n_occurrences('aabbcc', 'c', 1) == 'aabbc'", "assert remove_first_last_n_occurrences('aaaaaa', 'a', 3) == 'aaa'", "assert remove_first_last_n_occurrences('abcdefg', 'h', 1) == 'abcdefg'", "assert remove_first_last_n_occurrences('racecar', 'r', 1) == 'aceca'", "assert remove_first_last_n_occurrences('racecar', 'a', 1) == 'rcecr'", "assert remove_first_last_n_occurrences('racecar', 'c', 1) == 'raear'", "assert remove_first_last_n_occurrences('xyxyxyxy', 'x', 2) == 'yxyxy'", "assert remove_first_last_n_occurrences('xyxyxyxy', 'y', 2) == 'xxyxyx'", "assert remove_first_last_n_occurrences('a', 'a', 1) == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove the nth occurrence of a given character from the string.", "code": "def remove_nth_occurrence(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch:\n            count += 1\n            if count == n:\n                continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_b06b7865-44a0-4e8b-b3de-fd244f580a65", "test_setup_code": "", "test_list": ["assert remove_nth_occurrence('hello world', 'l', 2) == 'helo world'", "assert remove_nth_occurrence('hello world', 'o', 1) == 'hell world'", "assert remove_nth_occurrence('hello world', 'z', 1) == 'hello world'", "assert remove_nth_occurrence('banana', 'a', 2) == 'bnana'", "assert remove_nth_occurrence('banana', 'a', 3) == 'banaa'", "assert remove_nth_occurrence('banana', 'a', 4) == 'banana'", "assert remove_nth_occurrence('aaaaa', 'a', 3) == 'aaaa'", "assert remove_nth_occurrence('aaaaa', 'a', 5) == 'aaaa'", "assert remove_nth_occurrence('aaaaa', 'a', 1) == 'aaaa'", "assert remove_nth_occurrence('test case', ' ', 1) == 'testcase'", "assert remove_nth_occurrence('test case', 't', 2) == 'tes case'", "assert remove_nth_occurrence('test case', 'e', 2) == 'test cas'", "assert remove_nth_occurrence('mississippi', 's', 3) == 'missisippi'", "assert remove_nth_occurrence('mississippi', 'i', 4) == 'mississppi'", "assert remove_nth_occurrence('a', 'a', 1) == ''"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the maximum element in each row.", "code": "def sort_matrix_by_max_element(M):\n    result = sorted(M, key=max)\n    return result", "task_id": "12_4eef2232-366e-4c56-98d1-3ba110e50df6", "test_setup_code": "", "test_list": ["assert sort_matrix_by_max_element([[3, 2, 1], [6, 5, 4], [9, 8, 7]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert sort_matrix_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_max_element([[10, 20, 30], [5, 15, 25], [1, 2, 3]]) == [[1, 2, 3], [5, 15, 25], [10, 20, 30]]", "assert sort_matrix_by_max_element([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "assert sort_matrix_by_max_element([[5, 4, 3], [2, 1, 0], [8, 7, 6]]) == [[2, 1, 0], [5, 4, 3], [8, 7, 6]]", "assert sort_matrix_by_max_element([[3, 6, 9], [2, 5, 8], [1, 4, 7]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "assert sort_matrix_by_max_element([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [[0, 0, 0], [1, 1, 1], [2, 2, 2]]", "assert sort_matrix_by_max_element([[7, 8, 9], [4, 5, 6], [1, 2, 3]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_max_element([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [[1, 3, 5], [2, 4, 6], [0, 7, 8]]", "assert sort_matrix_by_max_element([[3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "assert sort_matrix_by_max_element([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]", "assert sort_matrix_by_max_element([[10, 20], [30, 40], [5, 15]]) == [[5, 15], [10, 20], [30, 40]]", "assert sort_matrix_by_max_element([[1], [2], [3]]) == [[1], [2], [3]]", "assert sort_matrix_by_max_element([[3], [2], [1]]) == [[1], [2], [3]]", "assert sort_matrix_by_max_element([[1, 2, 3], [3, 2, 1], [2, 3, 1]]) == [[3, 2, 1], [2, 3, 1], [1, 2, 3]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the minimum element in each row.", "code": "def sort_matrix_by_min_element(M):\n    result = sorted(M, key=min)\n    return result", "task_id": "12_c92de936-02e9-49d9-b188-3bb3eff162ac", "test_setup_code": "", "test_list": ["assert sort_matrix_by_min_element([[3, 4, 2], [1, 5, 6], [7, 8, 9]]) == [[1, 5, 6], [3, 4, 2], [7, 8, 9]]", "assert sort_matrix_by_min_element([[10, 20], [5, 15], [30, 40]]) == [[5, 15], [10, 20], [30, 40]]", "assert sort_matrix_by_min_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_min_element([[7, 8, 9], [4, 5, 6], [1, 2, 3]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_min_element([[3, 2, 1], [6, 5, 4], [9, 8, 7]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert sort_matrix_by_min_element([[1, 1, 1], [0, 0, 0], [2, 2, 2]]) == [[0, 0, 0], [1, 1, 1], [2, 2, 2]]", "assert sort_matrix_by_min_element([[5], [3], [4], [1], [2]]) == [[1], [2], [3], [4], [5]]", "assert sort_matrix_by_min_element([[1]]) == [[1]]", "assert sort_matrix_by_min_element([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [[0, 0, 0], [0, 0, 0], [0, 0, 0]]", "assert sort_matrix_by_min_element([[1, 2], [3, 4], [5, 6], [0, 7]]) == [[0, 7], [1, 2], [3, 4], [5, 6]]", "assert sort_matrix_by_min_element([[10, 20, 30], [5, 15, 25], [0, 10, 20]]) == [[0, 10, 20], [5, 15, 25], [10, 20, 30]]", "assert sort_matrix_by_min_element([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [[0, 7, 8], [1, 3, 5], [2, 4, 6]]", "assert sort_matrix_by_min_element([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]", "assert sort_matrix_by_min_element([[3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "assert sort_matrix_by_min_element([[5, 4, 3], [2, 1, 0], [8, 7, 6]]) == [[2, 1, 0], [5, 4, 3], [8, 7, 6]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the first element in each row.", "code": "def sort_matrix_by_first_element(M):\n    result = sorted(M, key=lambda x: x[0])\n    return result", "task_id": "12_d8c36add-afad-4ec0-8d47-cb0b748c6f72", "test_setup_code": "", "test_list": ["assert sort_matrix_by_first_element([[3, 2], [1, 4], [2, 3]]) == [[1, 4], [2, 3], [3, 2]]", "assert sort_matrix_by_first_element([[5, 6], [2, 8], [3, 7], [1, 9]]) == [[1, 9], [2, 8], [3, 7], [5, 6]]", "assert sort_matrix_by_first_element([[10, 20], [5, 15], [15, 25], [0, 5]]) == [[0, 5], [5, 15], [10, 20], [15, 25]]", "assert sort_matrix_by_first_element([[1, 2], [1, 3], [1, 4]]) == [[1, 2], [1, 3], [1, 4]]", "assert sort_matrix_by_first_element([[1, 2]]) == [[1, 2]]", "assert sort_matrix_by_first_element([]) == []", "assert sort_matrix_by_first_element([[3, 2, 1], [1, 4, 3], [2, 3, 2]]) == [[1, 4, 3], [2, 3, 2], [3, 2, 1]]", "assert sort_matrix_by_first_element([[0, 0], [0, 1], [0, -1]]) == [[0, 0], [0, 1], [0, -1]]", "assert sort_matrix_by_first_element([[1, 2], [2, 1], [1, 1], [2, 2]]) == [[1, 2], [1, 1], [2, 1], [2, 2]]", "assert sort_matrix_by_first_element([[1, 2, 3], [2, 3, 4], [0, 1, 2]]) == [[0, 1, 2], [1, 2, 3], [2, 3, 4]]", "assert sort_matrix_by_first_element([[5, 5], [3, 3], [4, 4], [2, 2], [1, 1]]) == [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]", "assert sort_matrix_by_first_element([[100, 200], [50, 150], [150, 250], [0, 50]]) == [[0, 50], [50, 150], [100, 200], [150, 250]]", "assert sort_matrix_by_first_element([[1], [3], [2]]) == [[1], [2], [3]]", "assert sort_matrix_by_first_element([[1, 2, 3, 4], [4, 3, 2, 1], [2, 3, 4, 1], [3, 2, 1, 4]]) == [[1, 2, 3, 4], [2, 3, 4, 1], [3, 2, 1, 4], [4, 3, 2, 1]]", "assert sort_matrix_by_first_element([[1, 2], [2, 1], [1, 1], [2, 2], [0, 0]]) == [[0, 0], [1, 2], [1, 1], [2, 1], [2, 2]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the last element in each row.", "code": "def sort_matrix_by_last_element(M):\n    result = sorted(M, key=lambda x: x[-1])\n    return result", "task_id": "12_9c319bbb-5c7a-46a6-b84b-01ae6fda85ab", "test_setup_code": "", "test_list": ["assert sort_matrix_by_last_element([[3, 4, 2], [1, 5, 6], [7, 8, 1]]) == [[7, 8, 1], [3, 4, 2], [1, 5, 6]]", "assert sort_matrix_by_last_element([[10, 20, 30], [5, 15, 25], [1, 2, 3]]) == [[1, 2, 3], [5, 15, 25], [10, 20, 30]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_last_element([[3, 2, 1], [6, 5, 4], [9, 8, 7]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert sort_matrix_by_last_element([[3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "assert sort_matrix_by_last_element([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]", "assert sort_matrix_by_last_element([[5, 4], [3, 2], [1, 0]]) == [[1, 0], [3, 2], [5, 4]]", "assert sort_matrix_by_last_element([[1]]) == [[1]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == [[7, 8, 0], [1, 2, 3], [4, 5, 6]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0]]) == [[0, 0, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 10]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 10]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, -1]]) == [[0, 0, -1], [1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0], [10, 11, 12]]) == [[0, 0, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0], [10, 11, -12]]) == [[10, 11, -12], [0, 0, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_last_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0], [10, 11, 12], [13, 14, 15]]) == [[0, 0, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the length of each row.", "code": "def sort_matrix_by_row_length(M):\n    result = sorted(M, key=len)\n    return result", "task_id": "12_9bdf2b14-b165-4b8c-a156-777d77f5d110", "test_setup_code": "", "test_list": ["assert sort_matrix_by_row_length([]) == []", "assert sort_matrix_by_row_length([[1, 2, 3], [4, 5], [6]]) == [[6], [4, 5], [1, 2, 3]]", "assert sort_matrix_by_row_length([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]", "assert sort_matrix_by_row_length([[1, 2], [3], [4, 5, 6], [7, 8]]) == [[3], [1, 2], [7, 8], [4, 5, 6]]", "assert sort_matrix_by_row_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_row_length([[1, 2], [3, 4], [5], [6, 7, 8], [9]]) == [[5], [9], [1, 2], [3, 4], [6, 7, 8]]", "assert sort_matrix_by_row_length([[1, 2, 3, 4], [5, 6], [7, 8, 9], [10]]) == [[10], [5, 6], [7, 8, 9], [1, 2, 3, 4]]", "assert sort_matrix_by_row_length([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]", "assert sort_matrix_by_row_length([[1, 2, 3], [4, 5, 6], [7, 8], [9, 10, 11, 12]]) == [[7, 8], [1, 2, 3], [4, 5, 6], [9, 10, 11, 12]]", "assert sort_matrix_by_row_length([[1, 2], [3, 4, 5], [6, 7, 8, 9], [10]]) == [[10], [1, 2], [3, 4, 5], [6, 7, 8, 9]]", "assert sort_matrix_by_row_length([[1, 2, 3], [4, 5], [6, 7, 8], [9, 10]]) == [[4, 5], [9, 10], [1, 2, 3], [6, 7, 8]]", "assert sort_matrix_by_row_length([[1, 2, 3, 4, 5], [6], [7, 8, 9], [10, 11]]) == [[6], [10, 11], [7, 8, 9], [1, 2, 3, 4, 5]]", "assert sort_matrix_by_row_length([[1, 2, 3, 4], [5, 6, 7], [8, 9], [10]]) == [[10], [8, 9], [5, 6, 7], [1, 2, 3, 4]]", "assert sort_matrix_by_row_length([[1, 2], [3, 4, 5, 6], [7, 8, 9], [10, 11, 12, 13, 14]]) == [[1, 2], [7, 8, 9], [3, 4, 5, 6], [10, 11, 12, 13, 14]]", "assert sort_matrix_by_row_length([[1, 2, 3, 4, 5, 6], [7, 8], [9, 10, 11], [12, 13, 14, 15]]) == [[7, 8], [9, 10, 11], [12, 13, 14, 15], [1, 2, 3, 4, 5, 6]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of even numbers in each row.", "code": "def sort_matrix_by_even_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if i % 2 == 0))\n    return result", "task_id": "12_b7cbc3ba-6ccf-40ec-926a-7e5de26a2a65", "test_setup_code": "", "test_list": ["assert sort_matrix_by_even_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6]]", "assert sort_matrix_by_even_count([[2, 4, 6], [1, 3, 5], [7, 9, 11]]) == [[1, 3, 5], [7, 9, 11], [2, 4, 6]]", "assert sort_matrix_by_even_count([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [2, 2, 2]]", "assert sort_matrix_by_even_count([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [[1, 1, 1], [2, 2, 2], [0, 0, 0]]", "assert sort_matrix_by_even_count([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]", "assert sort_matrix_by_even_count([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == [[1, 3, 5], [7, 9, 11], [2, 4, 6]]", "assert sort_matrix_by_even_count([[1], [2], [3], [4]]) == [[1], [3], [2], [4]]", "assert sort_matrix_by_even_count([[10, 20, 30], [5, 15, 25], [2, 4, 6]]) == [[5, 15, 25], [2, 4, 6], [10, 20, 30]]", "assert sort_matrix_by_even_count([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[1, 2, 3, 4], [9, 10, 11, 12], [5, 6, 7, 8]]", "assert sort_matrix_by_even_count([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]) == [[1, 1, 1, 1], [3, 3, 3, 3], [2, 2, 2, 2]]", "assert sort_matrix_by_even_count([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]", "assert sort_matrix_by_even_count([[1, 3, 5, 7], [2, 4, 6, 8], [9, 11, 13, 15]]) == [[1, 3, 5, 7], [9, 11, 13, 15], [2, 4, 6, 8]]", "assert sort_matrix_by_even_count([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]", "assert sort_matrix_by_even_count([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]", "assert sort_matrix_by_even_count([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [[1, 2, 3, 4, 5], [11, 12, 13, 14, 15], [6, 7, 8, 9, 10]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of odd numbers in each row.", "code": "def sort_matrix_by_odd_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if i % 2 != 0))\n    return result", "task_id": "12_d44cdaae-8a5f-4ede-be76-07a24eb9fcda", "test_setup_code": "", "test_list": ["assert sort_matrix_by_odd_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[4, 5, 6], [1, 2, 3], [7, 8, 9]]", "assert sort_matrix_by_odd_count([[2, 4, 6], [1, 3, 5], [7, 9, 11]]) == [[2, 4, 6], [1, 3, 5], [7, 9, 11]]", "assert sort_matrix_by_odd_count([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[2, 2, 2], [1, 1, 1], [3, 3, 3]]", "assert sort_matrix_by_odd_count([[1, 2], [3, 4], [5, 6]]) == [[2, 4], [1, 2], [3, 4]]", "assert sort_matrix_by_odd_count([[1], [2], [3], [4]]) == [[2], [4], [1], [3]]", "assert sort_matrix_by_odd_count([[1, 3, 5], [2, 4, 6], [7, 9, 11]]) == [[2, 4, 6], [1, 3, 5], [7, 9, 11]]", "assert sort_matrix_by_odd_count([[10, 20, 30], [1, 2, 3], [5, 15, 25]]) == [[10, 20, 30], [1, 2, 3], [5, 15, 25]]", "assert sort_matrix_by_odd_count([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [[0, 0, 0], [2, 2, 2], [1, 1, 1]]", "assert sort_matrix_by_odd_count([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [[2, 4, 6, 8], [1, 2, 3, 4], [9, 10, 11, 12]]", "assert sort_matrix_by_odd_count([[1, 3, 5, 7], [2, 4, 6, 8], [9, 11, 13, 15]]) == [[2, 4, 6, 8], [1, 3, 5, 7], [9, 11, 13, 15]]", "assert sort_matrix_by_odd_count([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[4, 5, 6], [1, 2, 3], [7, 8, 9], [10, 11, 12]]", "assert sort_matrix_by_odd_count([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]) == [[2, 2, 2, 2], [4, 4, 4, 4], [1, 1, 1, 1], [3, 3, 3, 3]]", "assert sort_matrix_by_odd_count([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [11, 13, 15, 17, 19]]) == [[2, 4, 6, 8, 10], [1, 3, 5, 7, 9], [11, 13, 15, 17, 19]]", "assert sort_matrix_by_odd_count([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [[6, 7, 8, 9, 10], [1, 2, 3, 4, 5], [11, 12, 13, 14, 15]]", "assert sort_matrix_by_odd_count([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]) == [[2, 4, 6, 8, 10, 12], [1, 2, 3, 4, 5, 6], [13, 14, 15, 16, 17, 18]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of prime numbers in each row.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sort_matrix_by_prime_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if is_prime(i)))\n    return result", "task_id": "12_ab80222d-5f88-449e-a4ca-6df493154bef", "test_setup_code": "", "test_list": ["assert sort_matrix_by_prime_count([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == [[8, 9, 10], [2, 3, 4], [5, 6, 7]]", "assert sort_matrix_by_prime_count([[11, 13, 17], [4, 6, 8], [2, 3, 5]]) == [[4, 6, 8], [2, 3, 5], [11, 13, 17]]", "assert sort_matrix_by_prime_count([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [3, 3, 3], [2, 2, 2]]", "assert sort_matrix_by_prime_count([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == [[0, 0, 0], [1, 1, 1], [2, 2, 2]]", "assert sort_matrix_by_prime_count([[2, 3, 5], [7, 11, 13], [17, 19, 23]]) == [[2, 3, 5], [7, 11, 13], [17, 19, 23]]", "assert sort_matrix_by_prime_count([[4, 6, 8], [9, 10, 12], [14, 15, 16]]) == [[4, 6, 8], [9, 10, 12], [14, 15, 16]]", "assert sort_matrix_by_prime_count([[2, 4, 6], [3, 5, 7], [11, 13, 17]]) == [[2, 4, 6], [3, 5, 7], [11, 13, 17]]", "assert sort_matrix_by_prime_count([[29, 31, 37], [41, 43, 47], [53, 59, 61]]) == [[29, 31, 37], [41, 43, 47], [53, 59, 61]]", "assert sort_matrix_by_prime_count([[2, 3, 4], [5, 6, 7], [8, 9, 10], [11, 12, 13]]) == [[8, 9, 10], [2, 3, 4], [5, 6, 7], [11, 12, 13]]", "assert sort_matrix_by_prime_count([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]", "assert sort_matrix_by_prime_count([[1, 1, 1], [2, 2, 2], [3, 3, 3], [4, 4, 4]]) == [[1, 1, 1], [3, 3, 3], [2, 2, 2], [4, 4, 4]]", "assert sort_matrix_by_prime_count([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[0, 0, 0], [1, 1, 1], [3, 3, 3], [2, 2, 2]]", "assert sort_matrix_by_prime_count([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]]) == [[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]]", "assert sort_matrix_by_prime_count([[4, 6, 8], [9, 10, 12], [14, 15, 16], [18, 20, 21]]) == [[4, 6, 8], [9, 10, 12], [14, 15, 16], [18, 20, 21]]", "assert sort_matrix_by_prime_count([[2, 4, 6], [3, 5, 7], [11, 13, 17], [19, 23, 29]]) == [[2, 4, 6], [3, 5, 7], [11, 13, 17], [19, 23, 29]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of unique numbers in each row.", "code": "def sort_matrix_by_unique_count(M):\n    result = sorted(M, key=lambda x: len(set(x)))\n    return result", "task_id": "12_00e596c7-c5d0-4203-a12a-419790221c70", "test_setup_code": "", "test_list": ["assert sort_matrix_by_unique_count([[1, 2, 2], [3, 4, 4, 4], [5, 6, 7]]) == [[3, 4, 4, 4], [1, 2, 2], [5, 6, 7]]", "assert sort_matrix_by_unique_count([[1, 1, 1], [2, 2], [3]]) == [[1, 1, 1], [2, 2], [3]]", "assert sort_matrix_by_unique_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_unique_count([[1, 2], [3, 3, 3], [4, 5, 6, 6]]) == [[3, 3, 3], [1, 2], [4, 5, 6, 6]]", "assert sort_matrix_by_unique_count([[1, 1, 2], [3, 4, 5], [6, 7, 7, 7], [8, 9]]) == [[1, 1, 2], [8, 9], [3, 4, 5], [6, 7, 7, 7]]", "assert sort_matrix_by_unique_count([[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]) == [[4, 4, 4, 4], [3, 3, 3], [2, 2], [1]]", "assert sort_matrix_by_unique_count([[1, 2, 3, 4], [5, 5, 5], [6, 7], [8]]) == [[5, 5, 5], [8], [6, 7], [1, 2, 3, 4]]", "assert sort_matrix_by_unique_count([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [3, 4], [5, 6], [7, 8]]", "assert sort_matrix_by_unique_count([[1, 1, 1, 1], [2, 2, 2], [3, 3], [4]]) == [[1, 1, 1, 1], [2, 2, 2], [3, 3], [4]]", "assert sort_matrix_by_unique_count([[1, 2, 2, 2], [3, 3, 3], [4, 5, 6], [7, 8, 9, 9]]) == [[3, 3, 3], [1, 2, 2, 2], [7, 8, 9, 9], [4, 5, 6]]", "assert sort_matrix_by_unique_count([[1, 2, 3], [4, 4, 4], [5, 6, 7, 7], [8, 9, 10]]) == [[4, 4, 4], [5, 6, 7, 7], [1, 2, 3], [8, 9, 10]]", "assert sort_matrix_by_unique_count([[1, 2, 3, 4, 5], [6, 6, 6, 6], [7, 8, 9], [10, 11]]) == [[6, 6, 6, 6], [7, 8, 9], [10, 11], [1, 2, 3, 4, 5]]", "assert sort_matrix_by_unique_count([[1, 1], [2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4, 4]]) == [[4, 4, 4, 4, 4], [3, 3, 3, 3], [2, 2, 2], [1, 1]]", "assert sort_matrix_by_unique_count([[1, 2, 3, 4], [5, 5, 5, 5], [6, 7, 8], [9, 10]]) == [[5, 5, 5, 5], [6, 7, 8], [9, 10], [1, 2, 3, 4]]", "assert sort_matrix_by_unique_count([[1, 1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3], [4, 4], [5]]) == [[1, 1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3], [4, 4], [5]]"], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the sum of the squares of the elements in each row.", "code": "def sort_matrix_by_sum_of_squares(M):\n    result = sorted(M, key=lambda x: sum(i**2 for i in x))\n    return result", "task_id": "12_59ef7081-a109-4d0d-b094-0becff6788f5", "test_setup_code": "", "test_list": ["assert sort_matrix_by_sum_of_squares([[1, 2], [3, 4], [1, 1]]) == [[1, 1], [1, 2], [3, 4]]", "assert sort_matrix_by_sum_of_squares([[0, 0], [0, 1], [1, 1]]) == [[0, 0], [0, 1], [1, 1]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_sum_of_squares([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1, 1, 1], [2, 2, 2], [3, 3, 3]]", "assert sort_matrix_by_sum_of_squares([[10], [5], [1]]) == [[1], [5], [10]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 2], [2, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [2, 1, 1], [1, 2, 2]]", "assert sort_matrix_by_sum_of_squares([[3, 3], [2, 2], [1, 1]]) == [[1, 1], [2, 2], [3, 3]]", "assert sort_matrix_by_sum_of_squares([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 3], [1, 2, 2], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 2], [1, 2, 3]]", "assert sort_matrix_by_sum_of_squares([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [[1, 1, 1], [1, 1, 1], [1, 1, 1]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 3], [3, 2, 1], [2, 3, 1]]) == [[1, 2, 3], [3, 2, 1], [2, 3, 1]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0]]) == [[0, 0, 0], [1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sort_matrix_by_sum_of_squares([[1], [2], [3], [4]]) == [[1], [2], [3], [4]]", "assert sort_matrix_by_sum_of_squares([[1, 2], [2, 1], [1, 3]]) == [[1, 2], [2, 1], [1, 3]]", "assert sort_matrix_by_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [4, 5, 6], [7, 8, 9]]"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "13_7b834ea7-4bcd-406d-aa8c-8fb273a2f2de", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('AEIOU') == 5", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('This is a test string.') == 5", "assert count_vowels('12345') == 0", "assert count_vowels('aEiOu') == 5", "assert count_vowels('The quick brown fox jumps over the lazy dog.') == 11", "assert count_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit.') == 18", "assert count_vowels('Python Programming') == 4", "assert count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 5", "assert count_vowels('aeiouAEIOUaeiouAEIOU') == 20", "assert count_vowels('!@#$%^&*()_+') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in a list of integers.", "code": "def find_max(nums: list) -> int:\n    return max(nums)", "task_id": "13_bf3f6a1e-b406-4c18-94e7-3ebf5b69c141", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([5, 4, 3, 2, 1]) == 5", "assert find_max([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9", "assert find_max([-1, -2, -3, -4, -5]) == -1", "assert find_max([0, 0, 0, 0, 0]) == 0", "assert find_max([100]) == 100", "assert find_max([1, 2, 3, 3, 2, 1]) == 3", "assert find_max([-10, -20, -30, -5, -15]) == -5", "assert find_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 100", "assert find_max([100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == 100", "assert find_max([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert find_max([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3", "assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20", "assert find_max([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 1", "assert find_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1]) == 10"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "13_0c4439ff-679a-4ef8-b541-4c50d777d601", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python is fun') == 'nuf si nohtyP'", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('UPPERCASE') == 'ESACREPPU'", "assert reverse_string('lowercase') == 'esacrewol'", "assert reverse_string('MiXeD CaSe') == 'eSaC DeXiM'", "assert reverse_string('123 abc 456 def') == 'fed 654 cba 321'"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "13_43130b16-ed24-452d-b29d-f7e673b62849", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('racecars') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of a list of integers.", "code": "def sum_of_squares(nums: list) -> int:\n    return sum(x**2 for x in nums)", "task_id": "13_b52b47ca-a7eb-46b7-b295-a2a6eeece2dd", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([0, 0, 0]) == 0", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([]) == 0", "assert sum_of_squares([10, 10, 10]) == 300", "assert sum_of_squares([1, -1, 1, -1]) == 4", "assert sum_of_squares([100, 200, 300]) == 140000", "assert sum_of_squares([-100, -200, -300]) == 140000", "assert sum_of_squares([1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([0, 1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385", "assert sum_of_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_squares([2, 4, 6, 8, 10]) == 220", "assert sum_of_squares([-1, 0, 1]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a list of integers.", "code": "def find_unique(nums: list) -> list:\n    return list(set(nums))", "task_id": "13_a064441e-797d-4216-a5bc-219d430dd43d", "test_setup_code": "", "test_list": ["assert find_unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_unique([1, 1, 1, 1, 1]) == [1]", "assert find_unique([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert find_unique([]) == []", "assert find_unique([1]) == [1]", "assert find_unique([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_unique([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_unique([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert find_unique([-1, -1, -2, -2, -3, -3, -4, -4, -5, -5]) == [-1, -2, -3, -4, -5]", "assert find_unique([0, 0, 0, 0, 0]) == [0]", "assert find_unique([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]", "assert find_unique([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]", "assert find_unique([100, 200, 300, 400, 500, 100, 200, 300, 400, 500]) == [100, 200, 300, 400, 500]", "assert find_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_unique([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to merge two lists into one.", "code": "def merge_lists(list1: list, list2: list) -> list:\n    return list1 + list2", "task_id": "13_fa78c93f-9a53-4f9c-99a2-53a7588a1456", "test_setup_code": "", "test_list": ["assert merge_lists([], []) == []", "assert merge_lists([1], []) == [1]", "assert merge_lists([], [1]) == [1]", "assert merge_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists([1, 2], [3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists([1, 2, 3, 4], [5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists(['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']", "assert merge_lists([1, 'a', 2.5], [3, 'b', 4.5]) == [1, 'a', 2.5, 3, 'b', 4.5]", "assert merge_lists([None], [None]) == [None, None]", "assert merge_lists([True, False], [False, True]) == [True, False, False, True]", "assert merge_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists([], [4, 5, 6]) == [4, 5, 6]", "assert merge_lists([1], [2, 3, 4]) == [1, 2, 3, 4]", "assert merge_lists([1, 2, 3], [1, 2, 3]) == [1, 2, 3, 1, 2, 3]", "assert merge_lists([1, [2, 3]], [[4, 5], 6]) == [1, [2, 3], [4, 5], 6]"], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "13_6ef2e889-5c72-43de-9073-ebbaedd97fe4", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test') == 4", "assert count_words('Count the number of words in this sentence') == 7", "assert count_words('    Leading spaces') == 2", "assert count_words('Trailing spaces    ') == 2", "assert count_words('Multiple   spaces between words') == 4", "assert count_words('New\nline\ncharacters') == 3", "assert count_words('Tab\tcharacters\tbetween\twords') == 4", "assert count_words('Mixed\twhitespace\ncharacters') == 3", "assert count_words('Punctuation, should not affect!') == 5", "assert count_words('123 456 789') == 3", "assert count_words('Special characters #$%^&*()') == 4", "assert count_words('Words-with-hyphens should be counted as separate words') == 8"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number in a list of integers.", "code": "def find_min(nums: list) -> int:\n    return min(nums)", "task_id": "13_7f43b21f-dd72-4ef5-9fd7-1e2c32e8bef6", "test_setup_code": "", "test_list": ["assert find_min([1, 2, 3, 4, 5]) == 1", "assert find_min([5, 4, 3, 2, 1]) == 1", "assert find_min([2, 2, 2, 2, 2]) == 2", "assert find_min([-1, -2, -3, -4, -5]) == -5", "assert find_min([100]) == 100", "assert find_min([0, 0, 0, 0, 0]) == 0", "assert find_min([1, -1, 1, -1, 1]) == -1", "assert find_min([10, 20, 30, 40, 50]) == 10", "assert find_min([-10, 0, 10, 20, 30]) == -10", "assert find_min([999, 1000, 1001, 1002, 1003]) == 999", "assert find_min([3, 3, 3, 3, 3, 2]) == 2", "assert find_min([1, 2, 3, 4, 5, -1]) == -1", "assert find_min([0, -1, -2, -3, -4, -5]) == -5", "assert find_min([5, 4, 3, 2, 1, 0]) == 0", "assert find_min([100, 200, 300, 400, 500, -100]) == -100"], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "13_c9a9aa3a-8301-4b7e-b2a2-55ee009f9417", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('capitalize every word') == 'Capitalize Every Word'", "assert capitalize_words('python programming') == 'Python Programming'", "assert capitalize_words('a quick brown fox') == 'A Quick Brown Fox'", "assert capitalize_words('jumps over the lazy dog') == 'Jumps Over The Lazy Dog'", "assert capitalize_words('123 numbers and symbols!') == '123 Numbers And Symbols!'", "assert capitalize_words('mix of UPPER and lower CASE') == 'Mix Of UPPER And Lower CASE'", "assert capitalize_words('single') == 'Single'", "assert capitalize_words('') == ''", "assert capitalize_words('   leading spaces') == '   Leading Spaces'", "assert capitalize_words('trailing spaces   ') == 'Trailing Spaces   '", "assert capitalize_words('   both leading and trailing   ') == '   Both Leading And Trailing   '", "assert capitalize_words('multiple   spaces between words') == 'Multiple   Spaces Between Words'", "assert capitalize_words('ALLCAPS') == 'Allcaps'"], "challenge_test_list": []}
{"text": "Write a function to split a string at uppercase letters.", "code": "import re\ndef split_upperstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)", "task_id": "15_b7f659a8-94db-4832-9808-ec3edc4e82aa", "test_setup_code": "", "test_list": ["assert split_upperstring('HelloWorld') == ['Hello', 'World']", "assert split_upperstring('CamelCaseString') == ['Camel', 'Case', 'String']", "assert split_upperstring('SplitAtUppercase') == ['Split', 'At', 'Uppercase']", "assert split_upperstring('SingleWord') == ['Single', 'Word']", "assert split_upperstring('') == []", "assert split_upperstring('lowercase') == ['lowercase']", "assert split_upperstring('UPPERCASE') == ['U', 'P', 'P', 'E', 'R', 'C', 'A', 'S', 'E']", "assert split_upperstring('aB') == ['a', 'B']", "assert split_upperstring('AB') == ['A', 'B']", "assert split_upperstring('a') == ['a']", "assert split_upperstring('A') == ['A']", "assert split_upperstring('ThisIsATest') == ['This', 'Is', 'A', 'Test']", "assert split_upperstring('AnotherExample') == ['Another', 'Example']", "assert split_upperstring('YetAnotherTestCase') == ['Yet', 'Another', 'Test', 'Case']", "assert split_upperstring('NoUppercaseLetters') == ['No', 'Uppercase', 'Letters']"], "challenge_test_list": []}
{"text": "Write a function to split a string at digits.", "code": "import re\ndef split_digits(text):\n    return re.findall('\\d[^\\d]*', text)", "task_id": "15_29edefe5-628e-40a4-a0dd-1f85406738d2", "test_setup_code": "", "test_list": ["assert split_digits('a1b2c3') == ['1b', '2c', '3']", "assert split_digits('123abc') == ['1', '2', '3abc']", "assert split_digits('abc123') == ['1', '2', '3']", "assert split_digits('a1b2c') == ['1b', '2c']", "assert split_digits('1a2b3c') == ['1a', '2b', '3c']", "assert split_digits('a1b2c3d4') == ['1b', '2c', '3d', '4']", "assert split_digits('a1b') == ['1b']", "assert split_digits('1a2') == ['1a', '2']", "assert split_digits('a1') == ['1']", "assert split_digits('1a') == ['1a']", "assert split_digits('') == []", "assert split_digits('abc') == []", "assert split_digits('123') == ['1', '2', '3']", "assert split_digits('a1b2c3d4e5f6g7h8i9j0') == ['1b', '2c', '3d', '4e', '5f', '6g', '7h', '8i', '9j', '0']", "assert split_digits('a1b2c3d4e5f6g7h8i9j') == ['1b', '2c', '3d', '4e', '5f', '6g', '7h', '8i', '9j']"], "challenge_test_list": []}
{"text": "Write a function to split a string at vowels.", "code": "import re\ndef split_vowels(text):\n    return re.findall('[aeiouAEIOU][^aeiouAEIOU]*', text)", "task_id": "15_37d47c41-22ad-4d04-89be-11f4b71a799e", "test_setup_code": "", "test_list": ["assert split_vowels('hello') == ['e', 'o']", "assert split_vowels('world') == []", "assert split_vowels('AEIOU') == ['A', 'E', 'I', 'O', 'U']", "assert split_vowels('bcdfghjklmnpqrstvwxyz') == []", "assert split_vowels('') == []", "assert split_vowels('a') == ['a']", "assert split_vowels('b') == []", "assert split_vowels('apple') == ['a', 'e']", "assert split_vowels('banana') == ['a', 'a', 'a']", "assert split_vowels('umbrella') == ['u', 'e', 'a']", "assert split_vowels('rhythm') == []", "assert split_vowels('aeiouAEIOU') == ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']", "assert split_vowels('quizzical') == ['ui', 'i', 'a']", "assert split_vowels('subsequent') == ['u', 'e', 'ue', 'e']", "assert split_vowels('onomatopoeia') == ['o', 'o', 'a', 'o', 'o', 'e', 'ia']"], "challenge_test_list": []}
{"text": "Write a function to split a string at consonants.", "code": "import re\ndef split_consonants(text):\n    return re.findall('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ][^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]*', text)", "task_id": "15_743e4d4c-a961-4cea-ba75-eff5a99f1715", "test_setup_code": "", "test_list": ["assert split_consonants('hello') == ['h', 'ello']", "assert split_consonants('world') == ['w', 'orld']", "assert split_consonants('') == []", "assert split_consonants('a') == []", "assert split_consonants('bcdfgh') == ['b', 'c', 'd', 'f', 'g', 'h']", "assert split_consonants('aeiou') == []", "assert split_consonants('AEIOU') == []", "assert split_consonants('BCDFGH') == ['B', 'C', 'D', 'F', 'G', 'H']", "assert split_consonants('HelloWorld') == ['H', 'elloW', 'orld']", "assert split_consonants('Python3.8') == ['P', 'ython3.8']", "assert split_consonants('12345') == []", "assert split_consonants('C#') == ['C#']", "assert split_consonants('JavaScript') == ['J', 'avaS', 'cript']", "assert split_consonants('HTML5') == ['H', 'TML5']", "assert split_consonants('CSS3') == ['C', 'SS3']"], "challenge_test_list": []}
{"text": "Write a function to split a string at special characters.", "code": "import re\ndef split_specialchars(text):\n    return re.findall('[^a-zA-Z0-9][a-zA-Z0-9]*', text)", "task_id": "15_f07098a6-c830-4f10-a73a-80e63eefd3ec", "test_setup_code": "", "test_list": ["assert split_specialchars('hello,world') == ['hello', 'world']", "assert split_specialchars('123!456@789') == ['123', '456', '789']", "assert split_specialchars('a-b-c') == ['a', 'b', 'c']", "assert split_specialchars('no_special_chars') == ['no_special_chars']", "assert split_specialchars('!@#$%^&*()') == []", "assert split_specialchars('a!b@c#d$e%f^g&h*i(j)k') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']", "assert split_specialchars('') == []", "assert split_specialchars('a!b@c#d$e%f^g&h*i(j)k!') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']", "assert split_specialchars('123abc!456def@789ghi') == ['123abc', '456def', '789ghi']", "assert split_specialchars('!a!b!c!') == ['a', 'b', 'c']", "assert split_specialchars('a!b@c#d$e%f^g&h*i(j)k!l@m#n$o%p^q&r*s(t)u') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']", "assert split_specialchars('!') == []", "assert split_specialchars('a!b@c#d$e%f^g&h*i(j)k!l@m#n$o%p^q&r*s(t)u!') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u']", "assert split_specialchars('abc!def@ghi#jkl$mno%pqr^stu&vwx*yz') == ['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']", "assert split_specialchars('one.two,three;four:five') == ['one', 'two', 'three', 'four', 'five']"], "challenge_test_list": []}
{"text": "Write a function to split a string at whitespace characters.", "code": "import re\ndef split_whitespace(text):\n    return re.findall('\\s[^\\s]*', text)", "task_id": "15_ad036c48-cd43-43ca-be16-fc729aead6b5", "test_setup_code": "", "test_list": ["assert split_whitespace('Hello World') == ['Hello', 'World']", "assert split_whitespace('   Leading spaces') == ['Leading', 'spaces']", "assert split_whitespace('Trailing spaces   ') == ['Trailing', 'spaces']", "assert split_whitespace('Multiple   spaces') == ['Multiple', 'spaces']", "assert split_whitespace('NoSpacesHere') == ['NoSpacesHere']", "assert split_whitespace('') == []", "assert split_whitespace('OneWord') == ['OneWord']", "assert split_whitespace(' Two words with leading space') == ['Two', 'words', 'with', 'leading', 'space']", "assert split_whitespace('Two words with trailing space ') == ['Two', 'words', 'with', 'trailing', 'space']", "assert split_whitespace('  Multiple   spaces  and   tabs') == ['Multiple', 'spaces', 'and', 'tabs']", "assert split_whitespace('New\nline') == ['New', 'line']", "assert split_whitespace('Tab\tseparated') == ['Tab', 'separated']", "assert split_whitespace('Mixed\n\twhitespace') == ['Mixed', 'whitespace']", "assert split_whitespace('Special!@#characters') == ['Special!@#characters']", "assert split_whitespace('123 456 789') == ['123', '456', '789']"], "challenge_test_list": []}
{"text": "Write a function to split a string at punctuation marks.", "code": "import re\ndef split_punctuation(text):\n    return re.findall('[.,!?;:][^.,!?;:]*', text)", "task_id": "15_da39f670-80ad-46d3-8c74-1f29efdc1d67", "test_setup_code": "", "test_list": ["assert split_punctuation('Hello, world! How are you?') == ['Hello,', ' world!', ' How are you?']", "assert split_punctuation('This is a test. Testing, one, two, three.') == ['This is a test.', ' Testing,', ' one,', ' two,', ' three.']", "assert split_punctuation('No punctuation here') == []", "assert split_punctuation('Multiple...dots...here...') == ['Multiple.', '.', '.', 'dots.', '.', '.', 'here.']", "assert split_punctuation('Edge case: punctuation at the end!') == ['Edge case:', ' punctuation at the end!']", "assert split_punctuation('What about question marks? Yes!') == ['What about question marks?', ' Yes!']", "assert split_punctuation('Colon: check; semicolon: check.') == ['Colon:', ' check;', ' semicolon:', ' check.']", "assert split_punctuation('Punctuation,,, in a row!!!') == ['Punctuation,', ',', ',', ' in a row!', '!', '!']", "assert split_punctuation('Mixing: commas, periods. and more!') == ['Mixing:', ' commas,', ' periods.', ' and more!']", "assert split_punctuation('') == []", "assert split_punctuation('Single punctuation.') == ['Single punctuation.']", "assert split_punctuation('!Exclamation at start') == ['!Exclamation at start']", "assert split_punctuation('Special chars #$%^&*()') == []", "assert split_punctuation('Numbers 1, 2, 3. Done.') == ['Numbers 1,', ' 2,', ' 3.', ' Done.']", "assert split_punctuation('Spaces before punctuation . , !') == ['Spaces before punctuation .', ' ,', ' !']"], "challenge_test_list": []}
{"text": "Write a function to split a string at numbers.", "code": "import re\ndef split_numbers(text):\n    return re.findall('[0-9][^0-9]*', text)", "task_id": "15_befead53-6a18-4ffa-bdd9-2c2b2b7dc4e2", "test_setup_code": "", "test_list": ["assert split_numbers('abc123def456') == ['1', '2', '3def', '4', '5', '6']", "assert split_numbers('123abc456') == ['1', '2', '3abc', '4', '5', '6']", "assert split_numbers('abc123') == ['1', '2', '3']", "assert split_numbers('123') == ['1', '2', '3']", "assert split_numbers('1a2b3c') == ['1a', '2b', '3c']", "assert split_numbers('a1b2c3') == ['1b', '2c', '3']", "assert split_numbers('') == []", "assert split_numbers('abc') == []", "assert split_numbers('1') == ['1']", "assert split_numbers('12345') == ['1', '2', '3', '4', '5']", "assert split_numbers('1 2 3 4 5') == ['1 ', '2 ', '3 ', '4 ', '5']", "assert split_numbers('1!2@3#4$5%') == ['1!', '2@', '3#', '4$', '5%']", "assert split_numbers('1\n2\n3') == ['1\n', '2\n', '3']", "assert split_numbers('1234abc5678def') == ['1', '2', '3', '4abc', '5', '6', '7', '8def']", "assert split_numbers('9876543210') == ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']"], "challenge_test_list": []}
{"text": "Write a function to split a string at uppercase vowels.", "code": "import re\ndef split_uppercase_vowels(text):\n    return re.findall('[AEIOU][^AEIOU]*', text)", "task_id": "15_405750b7-8a20-4a61-8f5d-a9a86d6c9e88", "test_setup_code": "", "test_list": ["assert split_uppercase_vowels('AppleOrange') == ['Apple', 'Orange']", "assert split_uppercase_vowels('Umbrella') == ['Umbrella']", "assert split_uppercase_vowels('HelloWorld') == ['HelloWorld']", "assert split_uppercase_vowels('AEIOU') == ['A', 'E', 'I', 'O', 'U']", "assert split_uppercase_vowels('') == []", "assert split_uppercase_vowels('aEiOu') == []", "assert split_uppercase_vowels('ApplesAndOranges') == ['ApplesAndOranges']", "assert split_uppercase_vowels('UnderOver') == ['Under', 'Over']", "assert split_uppercase_vowels('ICECREAM') == ['ICECREAM']", "assert split_uppercase_vowels('UmbrellaUnder') == ['Umbrella', 'Under']", "assert split_uppercase_vowels('ElephantInTheRoom') == ['ElephantInTheRoom']", "assert split_uppercase_vowels('Oasis') == ['Oasis']", "assert split_uppercase_vowels('Igloo') == ['Igloo']", "assert split_uppercase_vowels('AntEater') == ['AntEater']", "assert split_uppercase_vowels('OpenAI') == ['OpenAI']"], "challenge_test_list": []}
{"text": "Write a function to split a string at lowercase consonants.", "code": "import re\ndef split_lowercase_consonants(text):\n    return re.findall('[bcdfghjklmnpqrstvwxyz][^bcdfghjklmnpqrstvwxyz]*', text)", "task_id": "15_21e0d948-7b41-4d95-91bf-b8d9257e158d", "test_setup_code": "", "test_list": ["assert split_lowercase_consonants('hello') == ['he', 'llo']", "assert split_lowercase_consonants('world') == ['wo', 'rld']", "assert split_lowercase_consonants('abc') == ['a', 'bc']", "assert split_lowercase_consonants('xyz') == ['x', 'y', 'z']", "assert split_lowercase_consonants('') == []", "assert split_lowercase_consonants('a') == ['a']", "assert split_lowercase_consonants('b') == ['b']", "assert split_lowercase_consonants('bc') == ['b', 'c']", "assert split_lowercase_consonants('bcd') == ['b', 'cd']", "assert split_lowercase_consonants('bcdfghjklmnpqrstvwxyz') == ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']", "assert split_lowercase_consonants('aeiou') == ['aeiou']", "assert split_lowercase_consonants('AEIOU') == ['AEIOU']", "assert split_lowercase_consonants('12345') == ['12345']", "assert split_lowercase_consonants('hello123') == ['he', 'llo123']", "assert split_lowercase_consonants('123hello') == ['123he', 'llo']"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a triangular prism.", "code": "def find_surface_area(l, b, h):\n    base_area = 0.5 * b * h\n    side_area1 = l * b\n    side_area2 = l * h\n    return 2 * base_area + side_area1 + side_area2", "task_id": "14_7b593482-3341-4c44-a478-45b5acd674ed", "test_setup_code": "", "test_list": ["assert find_surface_area(3, 4, 5) == 49.0", "assert find_surface_area(1, 1, 1) == 3.0", "assert find_surface_area(0, 4, 5) == 0.0", "assert find_surface_area(3, 0, 5) == 15.0", "assert find_surface_area(3, 4, 0) == 12.0", "assert find_surface_area(10, 10, 10) == 300.0", "assert find_surface_area(2.5, 4.5, 6.5) == 61.25", "assert find_surface_area(3, 4, 5.5) == 52.0", "assert find_surface_area(3.5, 4.5, 5.5) == 69.75", "assert find_surface_area(1, 2, 3) == 11.0", "assert find_surface_area(2, 3, 4) == 26.0", "assert find_surface_area(5, 5, 5) == 100.0", "assert find_surface_area(6, 7, 8) == 157.0", "assert find_surface_area(1, 10, 10) == 105.0", "assert find_surface_area(7, 8, 9) == 211.0"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cylinder.", "code": "import math\n\ndef find_volume_cylinder(r, h):\n    return math.pi * r**2 * h", "task_id": "14_31b8365b-bda6-4d68-a29d-c89772c56285", "test_setup_code": "", "test_list": ["assert find_volume_cylinder(1, 1) == 3.141592653589793", "assert find_volume_cylinder(0, 10) == 0.0", "assert find_volume_cylinder(10, 0) == 0.0", "assert find_volume_cylinder(2, 5) == 62.83185307179586", "assert find_volume_cylinder(3.5, 7.2) == 277.2588722239781", "assert find_volume_cylinder(1, 100) == 314.1592653589793", "assert find_volume_cylinder(100, 1) == 31415.926535897932", "assert find_volume_cylinder(0.1, 0.1) == 0.0031415926535897933", "assert find_volume_cylinder(5, 5) == 392.69908169872417", "assert find_volume_cylinder(1, 0.5) == 1.5707963267948966", "assert find_volume_cylinder(0.5, 1) == 0.7853981633974483", "assert find_volume_cylinder(2.5, 3.5) == 68.06784082777885", "assert find_volume_cylinder(7, 7) == 1077.566280181299", "assert find_volume_cylinder(3, 3) == 84.82300164692441", "assert find_volume_cylinder(4.4, 4.4) == 269.3915700459938"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cylinder.", "code": "import math\n\ndef find_surface_area_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)", "task_id": "14_dbb451ad-4aa5-49e0-a58d-57d0dda91b14", "test_setup_code": "", "test_list": ["assert find_surface_area_cylinder(1, 1) == 12.566370614359172", "assert find_surface_area_cylinder(0, 0) == 0.0", "assert find_surface_area_cylinder(5, 10) == 471.23889803846896", "assert find_surface_area_cylinder(2.5, 4.5) == 110.97389186861618", "assert find_surface_area_cylinder(100, 200) == 18849555.92153876", "assert find_surface_area_cylinder(1e-10, 1e-10) == 1.2566370614359174e-19", "assert find_surface_area_cylinder(1, 0) == 6.283185307179586", "assert find_surface_area_cylinder(0, 1) == 0.0", "assert find_surface_area_cylinder(3, 7) == 188.49555921538757", "assert find_surface_area_cylinder(10, 5) == 942.4777960769379", "assert find_surface_area_cylinder(2, 2) == 50.26548245743669", "assert find_surface_area_cylinder(0.5, 0.5) == 4.71238898038469", "assert find_surface_area_cylinder(1, 100) == 635.6194490192345", "assert find_surface_area_cylinder(123, 456) == 4492477.345048514", "assert find_surface_area_cylinder(7.5, 3.5) == 518.3627878423155"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cone.", "code": "import math\n\ndef find_volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h", "task_id": "14_1a811c94-a606-4f11-a34c-cb9d890984d5", "test_setup_code": "", "test_list": ["assert find_volume_cone(1, 1) == 1.0471975511965976", "assert find_volume_cone(0, 5) == 0.0", "assert find_volume_cone(5, 0) == 0.0", "assert find_volume_cone(3, 7) == 65.97344572538566", "assert find_volume_cone(10, 10) == 1047.1975511965977", "assert find_volume_cone(2.5, 4.5) == 29.452431125955", "assert find_volume_cone(100, 100) == 104719.75511965977", "assert find_volume_cone(0.1, 0.1) == 0.0010471975511965976", "assert find_volume_cone(1, 0.1) == 0.10471975511965977", "assert find_volume_cone(0.1, 1) == 0.010471975511965976", "assert find_volume_cone(3.14159, 2.71828) == 28.09459948996802", "assert find_volume_cone(1e-10, 1e-10) == 1.0471975511965978e-30", "assert find_volume_cone(1e10, 1e10) == 1.0471975511965978e+30", "assert find_volume_cone(1.23456789, 9.87654321) == 15.73864663317993", "assert find_volume_cone(123456.789, 98765.4321) == 1.5707963267948967e+15"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cone.", "code": "import math\n\ndef find_surface_area_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + slant_height)", "task_id": "14_e118a44f-8130-4e96-88cc-798f1efb978e", "test_setup_code": "", "test_list": ["assert find_surface_area_cone(3, 4) == 75.39822368615503", "assert find_surface_area_cone(0, 0) == 0.0", "assert find_surface_area_cone(1, 1) == 7.584475591748159", "assert find_surface_area_cone(5, 12) == 282.7433388230814", "assert find_surface_area_cone(10, 10) == 942.4777960769379", "assert find_surface_area_cone(2.5, 7.5) == 89.5353906273091", "assert find_surface_area_cone(1.5, 2.5) == 21.991148575128552", "assert find_surface_area_cone(0.1, 0.1) == 0.12566370614359174", "assert find_surface_area_cone(100, 100) == 11180.339887498949", "assert find_surface_area_cone(0.5, 0.5) == 1.9634954084936207", "assert find_surface_area_cone(3, 0) == 28.274333882308138", "assert find_surface_area_cone(0, 3) == 0.0", "assert find_surface_area_cone(7, 24) == 769.6902127139366", "assert find_surface_area_cone(15, 8) == 1320.1532544552755", "assert find_surface_area_cone(6, 8) == 301.59289474462014"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a sphere.", "code": "import math\n\ndef find_volume_sphere(r):\n    return (4/3) * math.pi * r**3", "task_id": "14_3e891eb2-9edf-485b-8195-4ac961580072", "test_setup_code": "", "test_list": ["assert find_volume_sphere(1) == 4.1887902047863905", "assert find_volume_sphere(0) == 0.0", "assert find_volume_sphere(2) == 33.510321638291124", "assert find_volume_sphere(3.5) == 179.59438003021648", "assert find_volume_sphere(-1) == -4.1887902047863905", "assert find_volume_sphere(10) == 4188.790204786391", "assert find_volume_sphere(0.5) == 0.5235987755982988", "assert find_volume_sphere(100) == 4188790.204786391", "assert find_volume_sphere(1e-10) == 4.188790204786391e-30", "assert find_volume_sphere(1e10) == 4.188790204786391e+30", "assert find_volume_sphere(1.234) == 7.881947554728406", "assert find_volume_sphere(2.71828) == 84.13410032172386", "assert find_volume_sphere(1e-5) == 4.188790204786391e-15", "assert find_volume_sphere(1e5) == 4.188790204786391e+15", "assert find_volume_sphere(0.123456789) == 0.007881947554728406"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a sphere.", "code": "import math\n\ndef find_surface_area_sphere(r):\n    return 4 * math.pi * r**2", "task_id": "14_2421ccde-202c-4bd9-a553-19537d934c0f", "test_setup_code": "", "test_list": ["assert find_surface_area_sphere(1) == 12.566370614359172", "assert find_surface_area_sphere(0) == 0.0", "assert find_surface_area_sphere(2) == 50.26548245743669", "assert find_surface_area_sphere(0.5) == 3.141592653589793", "assert find_surface_area_sphere(10) == 1256.6370614359173", "assert find_surface_area_sphere(100) == 125663.70614359173", "assert find_surface_area_sphere(0.1) == 0.12566370614359174", "assert find_surface_area_sphere(3.5) == 153.93804002589985", "assert find_surface_area_sphere(7) == 615.7521601035994", "assert find_surface_area_sphere(0.01) == 0.0012566370614359172", "assert find_surface_area_sphere(0.001) == 0.000012566370614359172", "assert find_surface_area_sphere(25) == 7853.981633974483", "assert find_surface_area_sphere(50) == 31415.926535897932", "assert find_surface_area_sphere(75) == 70685.83470577035", "assert find_surface_area_sphere(0.25) == 0.7853981633974483"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a rectangular prism.", "code": "def find_volume_rectangular_prism(l, w, h):\n    return l * w * h", "task_id": "14_7a0b0aec-ec52-4fd4-bb3b-997a1b41ca61", "test_setup_code": "", "test_list": ["assert find_volume_rectangular_prism(1, 1, 1) == 1", "assert find_volume_rectangular_prism(2, 3, 4) == 24", "assert find_volume_rectangular_prism(0, 5, 10) == 0", "assert find_volume_rectangular_prism(7, 8, 9) == 504", "assert find_volume_rectangular_prism(1, 2, 3) == 6", "assert find_volume_rectangular_prism(10, 10, 10) == 1000", "assert find_volume_rectangular_prism(5, 5, 5) == 125", "assert find_volume_rectangular_prism(100, 200, 300) == 6000000", "assert find_volume_rectangular_prism(3, 3, 3) == 27", "assert find_volume_rectangular_prism(1, 0, 1) == 0", "assert find_volume_rectangular_prism(2, 2, 2) == 8", "assert find_volume_rectangular_prism(1, 1, 0) == 0", "assert find_volume_rectangular_prism(4, 5, 6) == 120", "assert find_volume_rectangular_prism(1, 1, 10) == 10", "assert find_volume_rectangular_prism(2, 3, 1) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a rectangular pyramid.", "code": "def find_volume_pyramid(l, w, h):\n    return (1/3) * l * w * h", "task_id": "14_adcc21fe-d952-40ec-99c4-7174801f7bde", "test_setup_code": "", "test_list": ["assert find_volume_pyramid(3, 4, 5) == 20.0", "assert find_volume_pyramid(1, 1, 1) == 0.3333333333333333", "assert find_volume_pyramid(0, 4, 5) == 0.0", "assert find_volume_pyramid(3, 0, 5) == 0.0", "assert find_volume_pyramid(3, 4, 0) == 0.0", "assert find_volume_pyramid(1.5, 2.5, 3.5) == 4.375", "assert find_volume_pyramid(100, 200, 300) == 2000000.0", "assert find_volume_pyramid(0.1, 0.2, 0.3) == 0.002", "assert find_volume_pyramid(1, 2, 3) == 2.0", "assert find_volume_pyramid(5, 5, 5) == 41.666666666666664", "assert find_volume_pyramid(10, 10, 10) == 333.3333333333333", "assert find_volume_pyramid(7, 8, 9) == 168.0", "assert find_volume_pyramid(0.5, 0.5, 0.5) == 0.041666666666666664", "assert find_volume_pyramid(2, 3, 4) == 8.0", "assert find_volume_pyramid(6, 7, 8) == 112.0"], "challenge_test_list": []}
{"text": "Write a function to find sequences of uppercase letters joined with a hyphen.", "code": "import re\n\ndef find_uppercase_sequence(text):\n    patterns = '^[A-Z]+-[A-Z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_0662eafa-a094-46c9-8402-111d80106afe", "test_setup_code": "", "test_list": ["assert find_uppercase_sequence('ABC-DEF') == 'Found a match!'", "assert find_uppercase_sequence('A-B') == 'Found a match!'", "assert find_uppercase_sequence('ABC-DEF-GHI') == 'Not matched!'", "assert find_uppercase_sequence('ABc-DEF') == 'Not matched!'", "assert find_uppercase_sequence('ABC-def') == 'Not matched!'", "assert find_uppercase_sequence('123-456') == 'Not matched!'", "assert find_uppercase_sequence('ABC-') == 'Not matched!'", "assert find_uppercase_sequence('-DEF') == 'Not matched!'", "assert find_uppercase_sequence('A-B-C') == 'Not matched!'", "assert find_uppercase_sequence('A-') == 'Not matched!'", "assert find_uppercase_sequence('-A') == 'Not matched!'", "assert find_uppercase_sequence('') == 'Not matched!'", "assert find_uppercase_sequence('AB-CDE') == 'Found a match!'", "assert find_uppercase_sequence('A-B-C-D-E') == 'Not matched!'", "assert find_uppercase_sequence('ABC-DEF-G') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of digits joined with a colon.", "code": "import re\n\ndef find_digits_sequence(text):\n    patterns = '^[0-9]+:[0-9]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_3073266b-ac57-4197-bb8d-a2f10e72dea9", "test_setup_code": "", "test_list": ["assert find_digits_sequence('123:456') == 'Found a match!'", "assert find_digits_sequence('1:2') == 'Found a match!'", "assert find_digits_sequence('0:0') == 'Found a match!'", "assert find_digits_sequence('123:456:789') == 'Not matched!'", "assert find_digits_sequence(':123') == 'Not matched!'", "assert find_digits_sequence('123:') == 'Not matched!'", "assert find_digits_sequence('abc:123') == 'Not matched!'", "assert find_digits_sequence('123:abc') == 'Not matched!'", "assert find_digits_sequence('123 : 456') == 'Not matched!'", "assert find_digits_sequence('') == 'Not matched!'", "assert find_digits_sequence('123456') == 'Not matched!'", "assert find_digits_sequence('123-456') == 'Not matched!'", "assert find_digits_sequence('9999:9999') == 'Found a match!'", "assert find_digits_sequence(' 123:456 ') == 'Not matched!'", "assert find_digits_sequence('123::456') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of alphanumeric characters joined with a dollar sign.", "code": "import re\n\ndef find_alphanumeric_sequence(text):\n    patterns = '^[a-zA-Z0-9]+\\$[a-zA-Z0-9]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_1bfbff72-10c6-43e2-baf4-80cab0324807", "test_setup_code": "", "test_list": ["assert find_alphanumeric_sequence('abc$123') == 'Found a match!'", "assert find_alphanumeric_sequence('123$abc') == 'Found a match!'", "assert find_alphanumeric_sequence('a$b') == 'Found a match!'", "assert find_alphanumeric_sequence('1$2') == 'Found a match!'", "assert find_alphanumeric_sequence('abc123$def456') == 'Found a match!'", "assert find_alphanumeric_sequence('ABC$xyz') == 'Found a match!'", "assert find_alphanumeric_sequence('abc$') == 'Not matched!'", "assert find_alphanumeric_sequence('$abc') == 'Not matched!'", "assert find_alphanumeric_sequence('abc$123$xyz') == 'Not matched!'", "assert find_alphanumeric_sequence('abc def$123') == 'Not matched!'", "assert find_alphanumeric_sequence('abc$123 def') == 'Not matched!'", "assert find_alphanumeric_sequence('abc@123') == 'Not matched!'", "assert find_alphanumeric_sequence('') == 'Not matched!'", "assert find_alphanumeric_sequence('abc$$123') == 'Not matched!'", "assert find_alphanumeric_sequence(' abc$123 ') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of vowels joined with an asterisk.", "code": "import re\n\ndef find_vowel_sequence(text):\n    patterns = '^[aeiou]+\\*[aeiou]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_144d2dcb-9a7d-41fb-a124-fa71131a9ebe", "test_setup_code": "", "test_list": ["assert find_vowel_sequence('a*e') == 'Found a match!'", "assert find_vowel_sequence('i*o') == 'Found a match!'", "assert find_vowel_sequence('u*a') == 'Found a match!'", "assert find_vowel_sequence('ae*io') == 'Not matched!'", "assert find_vowel_sequence('a*') == 'Not matched!'", "assert find_vowel_sequence('*e') == 'Not matched!'", "assert find_vowel_sequence('a*b') == 'Not matched!'", "assert find_vowel_sequence('a*e*o') == 'Not matched!'", "assert find_vowel_sequence('ae*iou') == 'Not matched!'", "assert find_vowel_sequence('a*e*i') == 'Not matched!'", "assert find_vowel_sequence('a*e*') == 'Not matched!'", "assert find_vowel_sequence('a*eio') == 'Not matched!'", "assert find_vowel_sequence('ae*io*') == 'Not matched!'", "assert find_vowel_sequence('ae*io*u') == 'Not matched!'", "assert find_vowel_sequence('a*e*o*u') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of consonants joined with a plus sign.", "code": "import re\n\ndef find_consonant_sequence(text):\n    patterns = '^[bcdfghjklmnpqrstvwxyz]+\\+[bcdfghjklmnpqrstvwxyz]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_c325751f-0c04-4ecb-8631-7543dfccc32d", "test_setup_code": "", "test_list": ["assert find_consonant_sequence('b+c') == 'Found a match!'", "assert find_consonant_sequence('b+c+d') == 'Not matched!'", "assert find_consonant_sequence('b+c+d+e') == 'Not matched!'", "assert find_consonant_sequence('bc+df') == 'Found a match!'", "assert find_consonant_sequence('b+c+d+f') == 'Not matched!'", "assert find_consonant_sequence('b+c+df') == 'Not matched!'", "assert find_consonant_sequence('b+c+d+f+g') == 'Not matched!'", "assert find_consonant_sequence('b+c+d+f+gh') == 'Not matched!'", "assert find_consonant_sequence('b+c+d+f+gh+i') == 'Not matched!'", "assert find_consonant_sequence('bc+df+gh') == 'Found a match!'", "assert find_consonant_sequence('bc+df+gh+jk') == 'Found a match!'", "assert find_consonant_sequence('b+c+d+f+gh+jk') == 'Not matched!'", "assert find_consonant_sequence('bc+df+gh+jk+lm') == 'Found a match!'", "assert find_consonant_sequence('bc+df+gh+jk+lm+n') == 'Not matched!'", "assert find_consonant_sequence('bc+df+gh+jk+lm+np') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of hexadecimal digits joined with a comma.", "code": "import re\n\ndef find_hex_sequence(text):\n    patterns = '^[0-9a-fA-F]+,[0-9a-fA-F]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_86c46fb3-ff42-417a-a6eb-ed249425358c", "test_setup_code": "", "test_list": ["assert find_hex_sequence('1a2b,3c4d') == 'Found a match!'", "assert find_hex_sequence('1A2B,3C4D') == 'Found a match!'", "assert find_hex_sequence('1234,5678') == 'Found a match!'", "assert find_hex_sequence('abcd,efgh') == 'Not matched!'", "assert find_hex_sequence('1234,5678,9abc') == 'Not matched!'", "assert find_hex_sequence('1234,5678,') == 'Not matched!'", "assert find_hex_sequence(',1234,5678') == 'Not matched!'", "assert find_hex_sequence('1234,5678 ') == 'Not matched!'", "assert find_hex_sequence(' 1234,5678') == 'Not matched!'", "assert find_hex_sequence('1234,5678\n') == 'Not matched!'", "assert find_hex_sequence('1234,5678\t') == 'Not matched!'", "assert find_hex_sequence('1234,5678!') == 'Not matched!'", "assert find_hex_sequence('1234,5678@') == 'Not matched!'", "assert find_hex_sequence('1234,5678#') == 'Not matched!'", "assert find_hex_sequence('1234,5678$') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of words joined with a space.", "code": "import re\n\ndef find_word_sequence(text):\n    patterns = '^[a-zA-Z]+\\s[a-zA-Z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_205daa3a-a825-44f8-850c-c31675f572f8", "test_setup_code": "", "test_list": ["assert find_word_sequence('hello world') == 'Found a match!'", "assert find_word_sequence('hello') == 'Not matched!'", "assert find_word_sequence('hello world!') == 'Not matched!'", "assert find_word_sequence('hello  world') == 'Not matched!'", "assert find_word_sequence('Hello World') == 'Found a match!'", "assert find_word_sequence('123 hello') == 'Not matched!'", "assert find_word_sequence('hello 123') == 'Not matched!'", "assert find_word_sequence('hello world ') == 'Not matched!'", "assert find_word_sequence(' hello world') == 'Not matched!'", "assert find_word_sequence('hello world hello') == 'Not matched!'", "assert find_word_sequence('hello world123') == 'Not matched!'", "assert find_word_sequence('hello-world') == 'Not matched!'", "assert find_word_sequence('hello world!') == 'Not matched!'", "assert find_word_sequence('hello world123') == 'Not matched!'", "assert find_word_sequence('hello world!') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of email addresses joined with a semicolon.", "code": "import re\n\ndef find_email_sequence(text):\n    patterns = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4};[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_e24d5b8a-fd4b-4cca-98f0-4d26187355c4", "test_setup_code": "", "test_list": ["assert find_email_sequence('test.email@example.com;another.email@example.com') == 'Found a match!'", "assert find_email_sequence('user@domain.com;user2@domain.com') == 'Found a match!'", "assert find_email_sequence('user@domain.com;user2@domain') == 'Not matched!'", "assert find_email_sequence('user@domain;user2@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.co.uk') == 'Found a match!'", "assert find_email_sequence('user@domain.com;user2@domain.c') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.toolong') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com user3@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com;user4@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com;user4@domain.com;user5@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com;user4@domain.com;user5@domain.com;user6@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com;user4@domain.com;user5@domain.com;user6@domain.com;user7@domain.com') == 'Not matched!'", "assert find_email_sequence('user@domain.com;user2@domain.com;user3@domain.com;user4@domain.com;user5@domain.com;user6@domain.com;user7@domain.com;user8@domain.com') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of dates in the format YYYY-MM-DD joined with a pipe.", "code": "import re\n\ndef find_date_sequence(text):\n    patterns = '^[0-9]{4}-[0-9]{2}-[0-9]{2}\\|[0-9]{4}-[0-9]{2}-[0-9]{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_1484be15-01d8-4e31-924d-d0d28eb1980c", "test_setup_code": "", "test_list": ["assert find_date_sequence('2023-01-01|2023-01-02') == 'Found a match!'", "assert find_date_sequence('2023-01-01|2023-01-02|2023-01-03') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-0') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-32') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01') == 'Found a match!'", "assert find_date_sequence('2023-01-01|2023-13-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2022-12-31') == 'Found a match!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'", "assert find_date_sequence('2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01|2023-01-01') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function to find sequences of times in the format HH:MM:SS joined with an ampersand.", "code": "import re\n\ndef find_time_sequence(text):\n    patterns = '^[0-9]{2}:[0-9]{2}:[0-9]{2}&[0-9]{2}:[0-9]{2}:[0-9]{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_e4643564-69ba-4fe1-81c4-3f5df1071d43", "test_setup_code": "", "test_list": ["assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('00:00:00&00:00:00') == 'Found a match!'", "assert find_time_sequence('23:59:59&23:59:59') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01&12:34:56') == 'Not matched!'", "assert find_time_sequence('12:34:56-23:45:01') == 'Not matched!'", "assert find_time_sequence('12:34:56&23:45') == 'Not matched!'", "assert find_time_sequence('12:34:56&23:45:01&') == 'Not matched!'", "assert find_time_sequence('12:34:56&23:45:01&12:34:56') == 'Not matched!'", "assert find_time_sequence('12:34:56&23:45:01&12:34:56') == 'Not matched!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'", "assert find_time_sequence('12:34:56&23:45:01') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "17_82eb3188-e30f-4778-baa8-7518e1f4e625", "test_setup_code": "", "test_list": ["assert rectangle_perimeter(1, 1) == 4", "assert rectangle_perimeter(0, 0) == 0", "assert rectangle_perimeter(2, 3) == 10", "assert rectangle_perimeter(5, 5) == 20", "assert rectangle_perimeter(10, 20) == 60", "assert rectangle_perimeter(100, 200) == 600", "assert rectangle_perimeter(0, 10) == 20", "assert rectangle_perimeter(10, 0) == 20", "assert rectangle_perimeter(1, 1000) == 2002", "assert rectangle_perimeter(1000, 1) == 2002", "assert rectangle_perimeter(123, 456) == 1158", "assert rectangle_perimeter(999, 999) == 3996", "assert rectangle_perimeter(50, 75) == 250", "assert rectangle_perimeter(7, 9) == 32", "assert rectangle_perimeter(8, 12) == 40"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given its three sides.", "code": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "17_d656b492-b2a9-49a6-8302-910a2c26ed61", "test_setup_code": "", "test_list": ["assert triangle_perimeter(3, 4, 5) == 12", "assert triangle_perimeter(1, 1, 1) == 3", "assert triangle_perimeter(10, 10, 10) == 30", "assert triangle_perimeter(0, 0, 0) == 0", "assert triangle_perimeter(2, 3, 4) == 9", "assert triangle_perimeter(5, 12, 13) == 30", "assert triangle_perimeter(7, 24, 25) == 56", "assert triangle_perimeter(9, 40, 41) == 90", "assert triangle_perimeter(6, 8, 10) == 24", "assert triangle_perimeter(1, 2, 2) == 5", "assert triangle_perimeter(100, 100, 100) == 300", "assert triangle_perimeter(15, 20, 25) == 60", "assert triangle_perimeter(8, 15, 17) == 40", "assert triangle_perimeter(50, 50, 50) == 150", "assert triangle_perimeter(3, 3, 5) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circle_circumference(radius: int) -> float:\n    return 2 * math.pi * radius", "task_id": "17_42ca98c1-3ef9-4e74-8127-96ead59eae73", "test_setup_code": "", "test_list": ["assert circle_circumference(1) == 6.283185307179586", "assert circle_circumference(0) == 0.0", "assert circle_circumference(10) == 62.83185307179586", "assert circle_circumference(2.5) == 15.707963267948966", "assert circle_circumference(100) == 628.3185307179586", "assert circle_circumference(0.1) == 0.6283185307179586", "assert circle_circumference(50) == 314.1592653589793", "assert circle_circumference(7) == 43.982297150257104", "assert circle_circumference(3.14) == 19.729201864543903", "assert circle_circumference(1e-10) == 6.283185307179587e-10", "assert circle_circumference(1e10) == 62831853071.79586", "assert circle_circumference(1.23456789) == 7.757018827163703", "assert circle_circumference(123456789) == 775701882.7163703", "assert circle_circumference(0.000001) == 6.283185307179586e-06", "assert circle_circumference(1e-5) == 6.283185307179587e-05"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a parallelogram given its base and side lengths.", "code": "def parallelogram_perimeter(base: int, side: int) -> int:\n    return 2 * (base + side)", "task_id": "17_563bf0dc-e2f8-4519-840c-ea077fdffcc5", "test_setup_code": "", "test_list": ["assert parallelogram_perimeter(5, 3) == 16", "assert parallelogram_perimeter(10, 7) == 34", "assert parallelogram_perimeter(0, 0) == 0", "assert parallelogram_perimeter(1, 1) == 4", "assert parallelogram_perimeter(100, 50) == 300", "assert parallelogram_perimeter(25, 25) == 100", "assert parallelogram_perimeter(7, 9) == 32", "assert parallelogram_perimeter(12, 5) == 34", "assert parallelogram_perimeter(3, 5) == 16", "assert parallelogram_perimeter(15, 20) == 70", "assert parallelogram_perimeter(8, 8) == 32", "assert parallelogram_perimeter(2, 3) == 10", "assert parallelogram_perimeter(4, 6) == 20", "assert parallelogram_perimeter(11, 13) == 48", "assert parallelogram_perimeter(9, 4) == 26"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rhombus given the length of one of its sides.", "code": "def rhombus_perimeter(side: int) -> int:\n    return 4 * side", "task_id": "17_ef772c36-39e4-4d46-a202-86a79f6097cf", "test_setup_code": "", "test_list": ["assert rhombus_perimeter(1) == 4", "assert rhombus_perimeter(0) == 0", "assert rhombus_perimeter(10) == 40", "assert rhombus_perimeter(25) == 100", "assert rhombus_perimeter(100) == 400", "assert rhombus_perimeter(999) == 3996", "assert rhombus_perimeter(1234) == 4936", "assert rhombus_perimeter(50) == 200", "assert rhombus_perimeter(75) == 300", "assert rhombus_perimeter(500) == 2000", "assert rhombus_perimeter(2) == 8", "assert rhombus_perimeter(3) == 12", "assert rhombus_perimeter(4) == 16", "assert rhombus_perimeter(5) == 20", "assert rhombus_perimeter(6) == 24"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a trapezoid given the lengths of its four sides.", "code": "def trapezoid_perimeter(a: int, b: int, c: int, d: int) -> int:\n    return a + b + c + d", "task_id": "17_83873115-f370-4c48-b8b7-29d858176691", "test_setup_code": "", "test_list": ["assert trapezoid_perimeter(3, 4, 5, 6) == 18", "assert trapezoid_perimeter(1, 1, 1, 1) == 4", "assert trapezoid_perimeter(0, 0, 0, 0) == 0", "assert trapezoid_perimeter(10, 20, 30, 40) == 100", "assert trapezoid_perimeter(7, 8, 9, 10) == 34", "assert trapezoid_perimeter(2, 3, 4, 5) == 14", "assert trapezoid_perimeter(15, 15, 15, 15) == 60", "assert trapezoid_perimeter(100, 200, 300, 400) == 1000", "assert trapezoid_perimeter(1, 2, 3, 4) == 10", "assert trapezoid_perimeter(5, 5, 5, 5) == 20", "assert trapezoid_perimeter(0, 1, 2, 3) == 6", "assert trapezoid_perimeter(1, 0, 1, 0) == 2", "assert trapezoid_perimeter(9, 8, 7, 6) == 30", "assert trapezoid_perimeter(123, 456, 789, 101) == 1469", "assert trapezoid_perimeter(50, 50, 50, 50) == 200"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular pentagon given the length of one of its sides.", "code": "def pentagon_perimeter(side: int) -> int:\n    return 5 * side", "task_id": "17_ab5a364b-f4f0-496e-94a1-deddc926dc9e", "test_setup_code": "", "test_list": ["assert pentagon_perimeter(1) == 5", "assert pentagon_perimeter(0) == 0", "assert pentagon_perimeter(10) == 50", "assert pentagon_perimeter(100) == 500", "assert pentagon_perimeter(5) == 25", "assert pentagon_perimeter(7) == 35", "assert pentagon_perimeter(20) == 100", "assert pentagon_perimeter(15) == 75", "assert pentagon_perimeter(2) == 10", "assert pentagon_perimeter(50) == 250", "assert pentagon_perimeter(3) == 15", "assert pentagon_perimeter(25) == 125", "assert pentagon_perimeter(4) == 20", "assert pentagon_perimeter(30) == 150", "assert pentagon_perimeter(8) == 40"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular hexagon given the length of one of its sides.", "code": "def hexagon_perimeter(side: int) -> int:\n    return 6 * side", "task_id": "17_791c2c71-6cdf-4a00-9fa5-64bc19b20b5c", "test_setup_code": "", "test_list": ["assert hexagon_perimeter(1) == 6", "assert hexagon_perimeter(5) == 30", "assert hexagon_perimeter(10) == 60", "assert hexagon_perimeter(0) == 0", "assert hexagon_perimeter(100) == 600", "assert hexagon_perimeter(7) == 42", "assert hexagon_perimeter(3) == 18", "assert hexagon_perimeter(2) == 12", "assert hexagon_perimeter(15) == 90", "assert hexagon_perimeter(25) == 150", "assert hexagon_perimeter(50) == 300", "assert hexagon_perimeter(12) == 72", "assert hexagon_perimeter(8) == 48", "assert hexagon_perimeter(4) == 24", "assert hexagon_perimeter(6) == 36"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular octagon given the length of one of its sides.", "code": "def octagon_perimeter(side: int) -> int:\n    return 8 * side", "task_id": "17_39aee939-9d9c-41c0-8ced-60814f7ba57f", "test_setup_code": "", "test_list": ["assert octagon_perimeter(1) == 8", "assert octagon_perimeter(0) == 0", "assert octagon_perimeter(5) == 40", "assert octagon_perimeter(10) == 80", "assert octagon_perimeter(100) == 800", "assert octagon_perimeter(123456) == 987648", "assert octagon_perimeter(7) == 56", "assert octagon_perimeter(999) == 7992", "assert octagon_perimeter(50) == 400", "assert octagon_perimeter(25) == 200", "assert octagon_perimeter(12) == 96", "assert octagon_perimeter(3) == 24", "assert octagon_perimeter(8) == 64", "assert octagon_perimeter(15) == 120", "assert octagon_perimeter(1000) == 8000"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of an equilateral triangle given the length of one of its sides.", "code": "def equilateral_triangle_perimeter(side: int) -> int:\n    return 3 * side", "task_id": "17_a8ec3ca2-cf99-4a74-a402-6d84783accbe", "test_setup_code": "", "test_list": ["assert equilateral_triangle_perimeter(1) == 3", "assert equilateral_triangle_perimeter(5) == 15", "assert equilateral_triangle_perimeter(10) == 30", "assert equilateral_triangle_perimeter(0) == 0", "assert equilateral_triangle_perimeter(100) == 300", "assert equilateral_triangle_perimeter(7) == 21", "assert equilateral_triangle_perimeter(2) == 6", "assert equilateral_triangle_perimeter(3) == 9", "assert equilateral_triangle_perimeter(4) == 12", "assert equilateral_triangle_perimeter(6) == 18", "assert equilateral_triangle_perimeter(8) == 24", "assert equilateral_triangle_perimeter(9) == 27", "assert equilateral_triangle_perimeter(11) == 33", "assert equilateral_triangle_perimeter(12) == 36", "assert equilateral_triangle_perimeter(20) == 60"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "18_16e06315-f957-4e2b-a775-fd4f714507ac", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('aeiou') == ''", "assert remove_vowels('AEIOU') == ''", "assert remove_vowels('Python') == 'Pythn'", "assert remove_vowels('') == ''", "assert remove_vowels('bcdfghjklmnpqrstvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('aEiOu') == ''", "assert remove_vowels('The quick brown fox jumps over the lazy dog') == 'Th qck brwn fx jmps vr th lzy dg'", "assert remove_vowels('12345') == '12345'", "assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_vowels('A quick brown fox') == ' qck brwn fx'", "assert remove_vowels('Why do we use vowels?') == 'Why d w s vwls?'", "assert remove_vowels('Vowels are AEIOU and sometimes Y') == 'Vwls r  nd smtms Y'"], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "18_bb12f12e-04d4-450a-8641-cf6fb8b93c9c", "test_setup_code": "", "test_list": ["assert reverse_words('hello world') == 'world hello'", "assert reverse_words('a b c') == 'c b a'", "assert reverse_words('') == ''", "assert reverse_words('singleword') == 'singleword'", "assert reverse_words('  leading spaces') == 'spaces leading'", "assert reverse_words('trailing spaces  ') == 'spaces trailing'", "assert reverse_words('  multiple   spaces  ') == 'spaces multiple'", "assert reverse_words('punctuation, should! be? reversed.') == 'reversed. be? should! punctuation,'", "assert reverse_words('Case Sensitivity') == 'Sensitivity Case'", "assert reverse_words('123 456 789') == '789 456 123'", "assert reverse_words('special-characters #$%^&*') == '#$%^&* special-characters'", "assert reverse_words('new\nline') == 'line new'", "assert reverse_words('tab\tseparated') == 'separated tab'", "assert reverse_words('mixedCASE Words') == 'Words mixedCASE'", "assert reverse_words('a') == 'a'"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "18_b72ad067-a50c-4258-98c6-272224b64490", "test_setup_code": "", "test_list": ["assert remove_duplicates('aabbcc') == 'abc'", "assert remove_duplicates('abcabc') == 'abc'", "assert remove_duplicates('') == ''", "assert remove_duplicates('a') == 'a'", "assert remove_duplicates('aa') == 'a'", "assert remove_duplicates('ab') == 'ab'", "assert remove_duplicates('aab') == 'ab'", "assert remove_duplicates('ababab') == 'ab'", "assert remove_duplicates('abcabcabc') == 'abc'", "assert remove_duplicates('aabbccddeeff') == 'abcdef'", "assert remove_duplicates('112233') == '123'", "assert remove_duplicates('!@!@!@') == '!@'", "assert remove_duplicates('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'", "assert remove_duplicates('thequickbrownfoxjumpsoverthelazydog') == 'thequickbrownfxjmpsvlazydg'", "assert remove_duplicates('1234567890') == '1234567890'"], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "18_cf678c9e-18c1-44cf-aa06-1b4603ab5de3", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('rat', 'car') == False", "assert is_anagram('anagram', 'nagaram') == True", "assert is_anagram('hello', 'billion') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abcd', 'dcba') == True", "assert is_anagram('abcd', 'abcc') == False", "assert is_anagram('12345', '54321') == True", "assert is_anagram('12345', '5432') == False", "assert is_anagram('!@#$', '$#@!') == True"], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a given string with underscores.", "code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "18_e2e8606a-fd57-4dd4-b9a1-9cd530c3be0f", "test_setup_code": "", "test_list": ["assert replace_spaces('hello world') == 'hello_world'", "assert replace_spaces('a b c d e') == 'a_b_c_d_e'", "assert replace_spaces('') == ''", "assert replace_spaces('no_spaces') == 'no_spaces'", "assert replace_spaces(' leading space') == '_leading_space'", "assert replace_spaces('trailing space ') == 'trailing_space_'", "assert replace_spaces(' multiple   spaces ') == '_multiple___spaces_'", "assert replace_spaces('single_space') == 'single_space'", "assert replace_spaces('  ') == '__'", "assert replace_spaces('a b') == 'a_b'", "assert replace_spaces(' a b c ') == '_a_b_c_'", "assert replace_spaces('  leading and trailing  ') == '__leading_and_trailing__'", "assert replace_spaces('spaces_in_the_middle') == 'spaces_in_the_middle'", "assert replace_spaces('   ') == '___'", "assert replace_spaces('space at the end ') == 'space_at_the_end_'"], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "18_d1c0e1db-b32b-4708-99ea-76aed99c81a6", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('capitalize every word') == 'Capitalize Every Word'", "assert capitalize_words('python is fun') == 'Python Is Fun'", "assert capitalize_words('') == ''", "assert capitalize_words('a') == 'A'", "assert capitalize_words('a b c') == 'A B C'", "assert capitalize_words('123 456') == '123 456'", "assert capitalize_words('hello  world') == 'Hello  World'", "assert capitalize_words('  leading spaces') == '  Leading Spaces'", "assert capitalize_words('trailing spaces  ') == 'Trailing Spaces  '", "assert capitalize_words(' multiple   spaces ') == ' Multiple   Spaces '", "assert capitalize_words('mixedCASE words') == 'Mixedcase Words'", "assert capitalize_words('ALL CAPS') == 'All Caps'", "assert capitalize_words('special characters !@#') == 'Special Characters !@#'"], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "18_e63e1d82-d8de-48ff-ae10-cc1c23babda0", "test_setup_code": "", "test_list": ["assert longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'", "assert longest_word('A journey of a thousand miles begins with a single step') == 'thousand'", "assert longest_word('To be or not to be that is the question') == 'question'", "assert longest_word('') == ''", "assert longest_word('Hello') == 'Hello'", "assert longest_word('Python is fun') == 'Python'", "assert longest_word('I love programming') == 'programming'", "assert longest_word('123 4567 89') == '4567'", "assert longest_word('a aa aaa aaaa aaaaa') == 'aaaaa'", "assert longest_word('one two three four five six seven eight nine ten') == 'three'", "assert longest_word('supercalifragilisticexpialidocious') == 'supercalifragilisticexpialidocious'", "assert longest_word('The quick brown fox') == 'quick'", "assert longest_word('Lorem ipsum dolor sit amet consectetur adipiscing elit') == 'consectetur'", "assert longest_word('Short words only') == 'Short'", "assert longest_word('Equal length words test') == 'Equal'"], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "18_7ce331f7-71ac-4c25-bbe6-a33a5e21d2c9", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test string') == 5", "assert count_words('   Leading and trailing spaces   ') == 4", "assert count_words('Multiple   spaces   between   words') == 4", "assert count_words('Punctuation, should not affect: count!') == 5", "assert count_words('New\nline\ncharacters\nshould\ncount\nas\nspaces') == 7", "assert count_words('Tabs\tshould\talso\tcount\tas\tspaces') == 6", "assert count_words('Mix of spaces, tabs\tand\nnewlines') == 6", "assert count_words('123 456 789') == 3", "assert count_words('Special characters #@$%^&*()') == 4", "assert count_words('SingleWord') == 1", "assert count_words('   ') == 0", "assert count_words('Word1 Word2 Word3 Word4 Word5 Word6 Word7 Word8 Word9 Word10') == 10"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "18_8e1d3dfa-ed74-41b4-9e15-70c1b83e7719", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('raceecar') == True", "assert is_palindrome('racecar ') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alpha(s: str) -> str:\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "18_45b83e17-dee5-4b84-952c-d22807af8d2f", "test_setup_code": "", "test_list": ["assert remove_non_alpha('Hello, World!') == 'HelloWorld'", "assert remove_non_alpha('1234567890') == ''", "assert remove_non_alpha('abc123xyz') == 'abcxyz'", "assert remove_non_alpha('!@#$%^&*()') == ''", "assert remove_non_alpha('') == ''", "assert remove_non_alpha('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "assert remove_non_alpha('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'", "assert remove_non_alpha('A1B2C3D4E5F6G7H8I9J0') == 'ABCDEFGHIJ'", "assert remove_non_alpha('a!b@c#d$e%f^g&h*i(j)k_l+m=n') == 'abcdefghijklmno'", "assert remove_non_alpha('The quick brown fox jumps over the lazy dog.') == 'Thequickbrownfoxjumpsoverthelazydog'", "assert remove_non_alpha('123abc!@#XYZ') == 'abcXYZ'", "assert remove_non_alpha('No numbers 123 or symbols!') == 'Nonumbersorsymbols'", "assert remove_non_alpha('Spaces should be removed too') == 'Spacesshouldberemovedtoo'", "assert remove_non_alpha('Mixed123With456Numbers789') == 'MixedWithNumbers'", "assert remove_non_alpha('Symbols!@#$%^&*()_+=-`~') == ''"], "challenge_test_list": []}
{"text": "Write a function to find the first duplicate element in a given array of integers. If no duplicate is found, return -1.", "code": "def find_first_duplicate(nums: list[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "19_ecf5a0fc-4cf4-4296-b9b6-4f7a96f81add", "test_setup_code": "", "test_list": ["assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_first_duplicate([1, 2, 3, 4, 5, 1]) == 1", "assert find_first_duplicate([1, 2, 3, 4, 2, 5, 6, 7, 8, 9, 10]) == 2", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10", "assert find_first_duplicate([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 10]) == 9", "assert find_first_duplicate([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == 1", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5, 5]) == 5", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 3, 3, 3]) == 3", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 8, 8, 8, 8]) == 8", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 2, 2, 2, 2]) == 2", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 4, 4, 4, 4, 4, 4]) == 4", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 6, 6, 6, 6, 6, 6, 6]) == 6", "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 7, 7, 7, 7, 7, 7, 7, 7]) == 7", "assert find_first_duplicate([]) == -1"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from a given array of integers.", "code": "def unique_elements(nums: list[int]) -> list[int]:\n    return list(set(nums))", "task_id": "19_c75e1da5-4b62-4712-b1f9-008f05377514", "test_setup_code": "", "test_list": ["assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 1, 1, 1, 1]) == [1]", "assert unique_elements([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert unique_elements([]) == []", "assert unique_elements([0, 0, 0, 0, 0]) == [0]", "assert unique_elements([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert unique_elements([-1, -1, -1, -1, -1]) == [-1]", "assert unique_elements([1, -1, 2, -2, 3, -3]) == [1, 2, 3, -2, -3, -1]", "assert unique_elements([100, 200, 300, 400, 500]) == [100, 200, 300, 400, 500]", "assert unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]) == [0, 1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == [1, 2, 3, 4, 5, -1, -2, -3, -4, -5]", "assert unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to count the number of duplicate elements in a given array of integers.", "code": "def count_duplicates(nums: list[int]) -> int:\n    from collections import Counter\n    count = Counter(nums)\n    return sum(1 for v in count.values() if v > 1)", "task_id": "19_932a6476-b7a7-49f7-b725-92877d505c63", "test_setup_code": "", "test_list": ["assert count_duplicates([1, 2, 3, 4, 5]) == 0", "assert count_duplicates([1, 2, 2, 3, 3, 3, 4]) == 2", "assert count_duplicates([1, 1, 1, 1, 1]) == 1", "assert count_duplicates([]) == 0", "assert count_duplicates([1]) == 0", "assert count_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5", "assert count_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5", "assert count_duplicates([10, 20, 30, 40, 50, 10, 20, 30, 40, 50, 10]) == 4", "assert count_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0", "assert count_duplicates([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 3", "assert count_duplicates([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 1", "assert count_duplicates([-1, -1, -2, -2, -3, -3]) == 3", "assert count_duplicates([100, 200, 300, 400, 500, 100, 200, 300, 400, 500]) == 5", "assert count_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == 5", "assert count_duplicates([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4"], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate elements from a given array of integers, keeping only the first occurrence.", "code": "def remove_duplicates(nums: list[int]) -> list[int]:\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "task_id": "19_d635e9b4-7f09-4725-b433-afb6ad6dcdc5", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([2, 2, 2, 2, 2, 2, 2]) == [2]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 3, 2, 3, 1, 2, 4, 5, 4]) == [1, 3, 2, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]", "assert remove_duplicates([100, 200, 300, 100, 200, 300, 400, 500]) == [100, 200, 300, 400, 500]"], "challenge_test_list": []}
{"text": "Write a function to check if all elements in a given array of integers are unique.", "code": "def has_all_unique_elements(nums: list[int]) -> bool:\n    return len(nums) == len(set(nums))", "task_id": "19_18644168-0506-4055-9baa-8e7b9453118a", "test_setup_code": "", "test_list": ["assert has_all_unique_elements([]) == true", "assert has_all_unique_elements([1]) == true", "assert has_all_unique_elements([1, 2, 3, 4, 5]) == true", "assert has_all_unique_elements([1, 2, 3, 4, 5, 5]) == false", "assert has_all_unique_elements([1, 1, 1, 1, 1]) == false", "assert has_all_unique_elements([1, -1, 2, -2, 3, -3]) == true", "assert has_all_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == true", "assert has_all_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == false", "assert has_all_unique_elements([0, 0, 0, 0, 0]) == false", "assert has_all_unique_elements([100, 200, 300, 400, 500]) == true", "assert has_all_unique_elements([100, 200, 300, 400, 500, 100]) == false", "assert has_all_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == true", "assert has_all_unique_elements([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == true", "assert has_all_unique_elements([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -10]) == false", "assert has_all_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == false"], "challenge_test_list": []}
{"text": "Write a function to find the missing number in a given array of integers from 1 to n.", "code": "def find_missing_number(nums: list[int], n: int) -> int:\n    return n * (n + 1) // 2 - sum(nums)", "task_id": "19_70191501-d8bc-4e4a-b107-76427b1c5ebd", "test_setup_code": "", "test_list": ["assert find_missing_number([1, 2, 4, 5], 5) == 3", "assert find_missing_number([1, 2, 3, 4, 6, 7, 8, 9, 10], 10) == 5", "assert find_missing_number([2, 3, 4, 5, 6], 6) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10", "assert find_missing_number([1, 3], 3) == 2", "assert find_missing_number([2], 2) == 1", "assert find_missing_number([], 1) == 1", "assert find_missing_number([1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 15) == 4", "assert find_missing_number([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 20) == 20", "assert find_missing_number([1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20) == 2", "assert find_missing_number([1, 2, 3, 4, 5, 7], 7) == 6", "assert find_missing_number([3, 1, 4, 5, 6, 7, 8], 8) == 2", "assert find_missing_number([9, 6, 4, 2, 3, 5, 7, 1], 9) == 8", "assert find_missing_number([2, 3, 1, 5], 5) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in a given array of integers where each integer is between 1 and n-1.", "code": "def find_duplicate_number(nums: list[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "19_b7f526d1-026c-404b-8728-cc2473bed756", "test_setup_code": "", "test_list": ["assert find_duplicate_number([1, 3, 4, 2, 2]) == 2", "assert find_duplicate_number([3, 1, 3, 4, 2]) == 3", "assert find_duplicate_number([1, 1]) == 1", "assert find_duplicate_number([1, 1, 2]) == 1", "assert find_duplicate_number([2, 2, 2, 2, 2]) == 2", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 5]) == 5", "assert find_duplicate_number([5, 1, 2, 3, 4, 5]) == 5", "assert find_duplicate_number([1, 2, 3, 4, 4]) == 4", "assert find_duplicate_number([4, 3, 2, 1, 2]) == 2", "assert find_duplicate_number([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 5]) == 5", "assert find_duplicate_number([1, 2, 3, 1, 4, 5]) == 1", "assert find_duplicate_number([7, 9, 7, 4, 2, 8, 7, 7, 1, 5]) == 7", "assert find_duplicate_number([3, 3, 3]) == 3", "assert find_duplicate_number([1, 2, 3, 4, 5, 1]) == 1", "assert find_duplicate_number([5, 4, 3, 2, 1, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two given arrays of integers.", "code": "def find_intersection(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) & set(arr2))", "task_id": "19_92a02305-9192-47e4-89be-652f427388d7", "test_setup_code": "", "test_list": ["assert find_intersection([1, 2, 3], [3, 4, 5]) == [3]", "assert find_intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []", "assert find_intersection([], [1, 2, 3]) == []", "assert find_intersection([1, 2, 3], []) == []", "assert find_intersection([1, 1, 1], [1, 1, 1]) == [1]", "assert find_intersection([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_intersection([1, 2, 3, 4, 5], [2, 4, 6, 8]) == [2, 4]", "assert find_intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_intersection([1, 2, 3, 4, 5], [0, 2, 4, 6, 8]) == [2, 4]", "assert find_intersection([1, 2, 3, 4, 5], [10, 20, 30, 40, 50]) == []", "assert find_intersection([1, 2, 3, 4, 5], [3, 3, 3, 3, 3]) == [3]", "assert find_intersection([1, 2, 3, 4, 5], [2, 3, 4]) == [2, 3, 4]", "assert find_intersection([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == [5]", "assert find_intersection([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]) == [1, 3, 5]", "assert find_intersection([1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the union of two given arrays of integers.", "code": "def find_union(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) | set(arr2))", "task_id": "19_cfbeb091-39f5-43eb-a6c4-349ef3a7b9c1", "test_setup_code": "", "test_list": ["assert find_union([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert find_union([1, 2, 2, 3], [3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_union([], [1, 2, 3]) == [1, 2, 3]", "assert find_union([1, 2, 3], []) == [1, 2, 3]", "assert find_union([], []) == []", "assert find_union([1, 2, 3], [3, 2, 1]) == [1, 2, 3]", "assert find_union([1], [1]) == [1]", "assert find_union([1, 2, 3, 4], [4, 5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert find_union([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 2]", "assert find_union([1, 2, 3], [4, 5, 6, 1, 2, 3]) == [1, 2, 3, 4, 5, 6]", "assert find_union([-1, -2, -3], [-4, -5, -6]) == [-1, -2, -3, -4, -5, -6]", "assert find_union([-1, 0, 1], [1, 2, 3]) == [-1, 0, 1, 2, 3]", "assert find_union([1, 2, 3], [3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_union([1, 2, 3, 4, 5], [5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_union([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the difference of two given arrays of integers (elements in arr1 but not in arr2).", "code": "def find_difference(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) - set(arr2))", "task_id": "19_12a3d890-f968-4174-870c-003c69d239e3", "test_setup_code": "", "test_list": ["assert find_difference([1, 2, 3], [2, 3, 4]) == [1]", "assert find_difference([1, 2, 2, 3], [2, 4]) == [1, 3]", "assert find_difference([1, 2, 3], [1, 2, 3]) == []", "assert find_difference([1, 2, 3], []) == [1, 2, 3]", "assert find_difference([], [1, 2, 3]) == []", "assert find_difference([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [1, 2]", "assert find_difference([1, 1, 1, 2, 2, 3], [2, 2, 3, 3]) == [1]", "assert find_difference([1, 2, 3], [4, 5, 6]) == [1, 2, 3]", "assert find_difference([1, 2, 3, 4], [2, 3]) == [1, 4]", "assert find_difference([1, 2, 3, 4], [1, 2, 3, 4, 5]) == []", "assert find_difference([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5]", "assert find_difference([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == []", "assert find_difference([1, 2, 3, 4, 5], [1, 2, 3, 6, 7]) == [4, 5]", "assert find_difference([1, 2, 3, 4, 5], [3, 4, 5, 6, 7, 8, 9]) == [1, 2]", "assert find_difference([1, 2, 3, 4, 5, 6, 7, 8, 9], [5, 6, 7, 8, 9]) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "20_f966ba0b-2ef3-4439-a1a1-28d4033e039c", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(5) == True", "assert is_prime(7) == True", "assert is_prime(11) == True", "assert is_prime(13) == True", "assert is_prime(17) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-5) == False", "assert is_prime(4) == False", "assert is_prime(9) == False", "assert is_prime(15) == False", "assert is_prime(25) == False", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a Fibonacci number or not.", "code": "def is_fibonacci(n: int) -> bool:\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "20_84e486a1-9625-43c1-8687-a14d01ac29a1", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == true", "assert is_fibonacci(1) == true", "assert is_fibonacci(2) == true", "assert is_fibonacci(3) == true", "assert is_fibonacci(4) == false", "assert is_fibonacci(5) == true", "assert is_fibonacci(6) == false", "assert is_fibonacci(8) == true", "assert is_fibonacci(13) == true", "assert is_fibonacci(21) == true", "assert is_fibonacci(22) == false", "assert is_fibonacci(34) == true", "assert is_fibonacci(55) == true", "assert is_fibonacci(89) == true", "assert is_fibonacci(144) == true"], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "20_f8718eed-5e39-467e-baee-2affcb354c7a", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == False", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a perfect square or not.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "20_9539e71a-0642-4d71-8644-77bf54add4ba", "test_setup_code": "", "test_list": ["assert is_perfect_square(1) == True", "assert is_perfect_square(4) == True", "assert is_perfect_square(9) == True", "assert is_perfect_square(16) == True", "assert is_perfect_square(25) == True", "assert is_perfect_square(2) == False", "assert is_perfect_square(3) == False", "assert is_perfect_square(10) == False", "assert is_perfect_square(15) == False", "assert is_perfect_square(26) == False", "assert is_perfect_square(0) == True", "assert is_perfect_square(1000000) == True", "assert is_perfect_square(999999) == False", "assert is_perfect_square(2147483647) == False", "assert is_perfect_square(2147395600) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is an Armstrong number or not.", "code": "def is_armstrong(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit)**num_len for digit in num_str)", "task_id": "20_f2003d0b-9569-4bd0-abf9-9dd87497c817", "test_setup_code": "", "test_list": ["assert is_armstrong(153) == True", "assert is_armstrong(370) == True", "assert is_armstrong(371) == True", "assert is_armstrong(407) == True", "assert is_armstrong(0) == True", "assert is_armstrong(1) == True", "assert is_armstrong(10) == False", "assert is_armstrong(100) == False", "assert is_armstrong(9474) == True", "assert is_armstrong(9475) == False", "assert is_armstrong(9476) == False", "assert is_armstrong(9473) == False", "assert is_armstrong(9926315) == True", "assert is_armstrong(9926314) == False", "assert is_armstrong(9926316) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a Harshad number or not.", "code": "def is_harshad(n: int) -> bool:\n    return n % sum(int(digit) for digit in str(n)) == 0", "task_id": "20_d787a888-37c4-4c49-b9d8-cb170a05af4b", "test_setup_code": "", "test_list": ["assert is_harshad(18) == True", "assert is_harshad(21) == True", "assert is_harshad(19) == False", "assert is_harshad(1) == True", "assert is_harshad(10) == True", "assert is_harshad(11) == False", "assert is_harshad(12) == True", "assert is_harshad(100) == True", "assert is_harshad(101) == False", "assert is_harshad(999) == True", "assert is_harshad(1000) == True", "assert is_harshad(1001) == False", "assert is_harshad(6804) == True", "assert is_harshad(6805) == False", "assert is_harshad(1729) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a happy number or not.", "code": "def is_happy_number(n: int) -> bool:\n    def get_next(number):\n        return sum(int(char) ** 2 for char in str(number))\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_next(n)\n    return n == 1", "task_id": "20_3c9cf6d8-cb04-4944-a571-f973521321f4", "test_setup_code": "", "test_list": ["assert is_happy_number(19) == True", "assert is_happy_number(2) == False", "assert is_happy_number(1) == True", "assert is_happy_number(7) == True", "assert is_happy_number(10) == True", "assert is_happy_number(4) == False", "assert is_happy_number(100) == True", "assert is_happy_number(123) == False", "assert is_happy_number(86) == False", "assert is_happy_number(44) == False", "assert is_happy_number(68) == True", "assert is_happy_number(1111111) == True", "assert is_happy_number(999999) == False", "assert is_happy_number(0) == False", "assert is_happy_number(1000000000) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is even or not.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "20_e5c5720e-4862-44b8-8233-b02f38796916", "test_setup_code": "", "test_list": ["assert is_even(0) == True", "assert is_even(1) == False", "assert is_even(2) == True", "assert is_even(-1) == False", "assert is_even(-2) == True", "assert is_even(100) == True", "assert is_even(101) == False", "assert is_even(-100) == True", "assert is_even(-101) == False", "assert is_even(999999) == False", "assert is_even(1000000) == True", "assert is_even(-999999) == False", "assert is_even(-1000000) == True", "assert is_even(2147483647) == False", "assert is_even(2147483646) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given number is odd or not.", "code": "def is_odd(n: int) -> bool:\n    return n % 2 != 0", "task_id": "20_c4239c1b-3d71-4bf4-959c-cf73c6cc3917", "test_setup_code": "", "test_list": ["assert is_odd(1) == true", "assert is_odd(2) == false", "assert is_odd(0) == false", "assert is_odd(-1) == true", "assert is_odd(-2) == false", "assert is_odd(999) == true", "assert is_odd(1000) == false", "assert is_odd(123456789) == true", "assert is_odd(123456788) == false", "assert is_odd(-999) == true", "assert is_odd(-1000) == false", "assert is_odd(2147483647) == true", "assert is_odd(2147483646) == false", "assert is_odd(-2147483647) == true", "assert is_odd(-2147483648) == false"], "challenge_test_list": []}
{"text": "Write a function to find the first non-duplicate element in a given array of integers.", "code": "def find_first_non_duplicate(nums):\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for num in nums:\n        if num_count[num] == 1:\n            return num\n    return -1", "task_id": "22_88649413-2c56-4af9-8a5c-a38bb23ffd80", "test_setup_code": "", "test_list": ["assert find_first_non_duplicate([1, 2, 2, 3, 3, 4, 4]) == 1", "assert find_first_non_duplicate([4, 5, 6, 7, 7, 6, 5]) == 4", "assert find_first_non_duplicate([1, 1, 1, 2, 2, 3, 3]) == -1", "assert find_first_non_duplicate([10, 20, 30, 40, 50]) == 10", "assert find_first_non_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert find_first_non_duplicate([]) == -1", "assert find_first_non_duplicate([1]) == 1", "assert find_first_non_duplicate([2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6", "assert find_first_non_duplicate([1, 1, 2, 2, 3, 3, 4, 5, 5]) == 4", "assert find_first_non_duplicate([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == -1", "assert find_first_non_duplicate([7, 8, 9, 7, 8, 9, 10]) == 10", "assert find_first_non_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1", "assert find_first_non_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 1", "assert find_first_non_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1", "assert find_first_non_duplicate([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the first repeated character in a given string.", "code": "def find_first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return ''", "task_id": "22_31eeaebd-dbd6-4836-96f2-6e8a94eea8ba", "test_setup_code": "", "test_list": ["assert find_first_repeated_char('abcdefghija') == 'a'", "assert find_first_repeated_char('hello') == 'l'", "assert find_first_repeated_char('programming') == 'r'", "assert find_first_repeated_char('abcdefg') == ''", "assert find_first_repeated_char('') == ''", "assert find_first_repeated_char('aabbcc') == 'a'", "assert find_first_repeated_char('abcabc') == 'a'", "assert find_first_repeated_char('AABBCC') == 'A'", "assert find_first_repeated_char('AbCdEfAb') == 'A'", "assert find_first_repeated_char('123123') == '1'", "assert find_first_repeated_char('a') == ''", "assert find_first_repeated_char('aA') == ''", "assert find_first_repeated_char('abcdeA1234Abc') == 'A'", "assert find_first_repeated_char(' hello world ') == 'l'", "assert find_first_repeated_char('!@#$%^&*()!') == '!'"], "challenge_test_list": []}
{"text": "Write a function to find the first unique character in a given string.", "code": "def find_first_unique_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "22_2714f605-6a90-49a6-ba55-8675ce00b6a3", "test_setup_code": "", "test_list": ["assert find_first_unique_char('leetcode') == 'l'", "assert find_first_unique_char('loveleetcode') == 'v'", "assert find_first_unique_char('aabb') == ''", "assert find_first_unique_char('') == ''", "assert find_first_unique_char('abcabc') == ''", "assert find_first_unique_char('a') == 'a'", "assert find_first_unique_char('abacabad') == 'c'", "assert find_first_unique_char('aabbccddeeffg') == 'g'", "assert find_first_unique_char('aabbccddeeff') == ''", "assert find_first_unique_char('abcdabcd') == ''", "assert find_first_unique_char('abcd') == 'a'", "assert find_first_unique_char('aabbccddee') == ''", "assert find_first_unique_char('aabbccddeeffggh') == 'h'", "assert find_first_unique_char('xxyz') == 'y'", "assert find_first_unique_char('aabbccddeeffgghhiijjkkllmmn') == 'n'"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first duplicate element in a given array of integers.", "code": "def find_first_duplicate_index(nums):\n    num_set = set()\n    for i, num in enumerate(nums):\n        if num in num_set:\n            return i\n        num_set.add(num)\n    return -1", "task_id": "22_377e16c3-379b-442f-a2ce-01702cb32014", "test_setup_code": "", "test_list": ["assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 9", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_first_duplicate_index([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 8, 9]) == 8", "assert find_first_duplicate_index([1]) == -1", "assert find_first_duplicate_index([]) == -1", "assert find_first_duplicate_index([5, 5, 5, 5, 5, 5]) == 1", "assert find_first_duplicate_index([1, 2, 3, 4, 2, 5, 6, 7, 8, 9]) == 4", "assert find_first_duplicate_index([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]) == 10", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1]) == 10", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]) == 10", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 9", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 9]) == 8", "assert find_first_duplicate_index([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]) == 2", "assert find_first_duplicate_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 1]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the first repeated word in a given string.", "code": "def find_first_repeated_word(s):\n    word_set = set()\n    words = s.split()\n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    return ''", "task_id": "22_a2edeb95-b4bf-4bbe-95e6-f1e98177eb67", "test_setup_code": "", "test_list": ["assert find_first_repeated_word('this is a test this is only a test') == 'this'", "assert find_first_repeated_word('hello world hello') == 'hello'", "assert find_first_repeated_word('no repetition here') == ''", "assert find_first_repeated_word('repeat repeat repeat') == 'repeat'", "assert find_first_repeated_word('') == ''", "assert find_first_repeated_word('one two three four five six seven eight nine ten') == ''", "assert find_first_repeated_word('a a b b c c') == 'a'", "assert find_first_repeated_word('the quick brown fox jumps over the lazy dog the quick brown fox') == 'the'", "assert find_first_repeated_word('123 456 789 123') == '123'", "assert find_first_repeated_word('apple banana cherry apple banana cherry') == 'apple'", "assert find_first_repeated_word('singleword') == ''", "assert find_first_repeated_word('word word word word') == 'word'", "assert find_first_repeated_word('first second third fourth fifth first') == 'first'", "assert find_first_repeated_word('a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 'a'", "assert find_first_repeated_word('python java c++ python java c++') == 'python'"], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeated word in a given string.", "code": "def find_first_non_repeated_word(s):\n    word_count = {}\n    words = s.split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in words:\n        if word_count[word] == 1:\n            return word\n    return ''", "task_id": "22_7c60da90-e539-4842-9a90-74e426527ac2", "test_setup_code": "", "test_list": ["assert find_first_non_repeated_word('this is a test this is only a test') == 'only'", "assert find_first_non_repeated_word('one fish two fish red fish blue fish') == 'one'", "assert find_first_non_repeated_word('hello world hello') == 'world'", "assert find_first_non_repeated_word('a a a a b b b c c d') == 'd'", "assert find_first_non_repeated_word('') == ''", "assert find_first_non_repeated_word('single') == 'single'", "assert find_first_non_repeated_word('repeat repeat repeat') == ''", "assert find_first_non_repeated_word('first second first third second') == 'third'", "assert find_first_non_repeated_word('apple banana apple cherry banana') == 'cherry'", "assert find_first_non_repeated_word('cat dog cat bird dog') == 'bird'", "assert find_first_non_repeated_word('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a'", "assert find_first_non_repeated_word('word word word word word word word word word word') == ''", "assert find_first_non_repeated_word('the quick brown fox jumps over the lazy dog') == 'quick'", "assert find_first_non_repeated_word('this is a test of the emergency broadcast system') == 'of'", "assert find_first_non_repeated_word('no no no no no no no no no yes') == 'yes'"], "challenge_test_list": []}
{"text": "Write a function to find the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_pair(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return (num, num)\n        num_set.add(num)\n    return (-1, -1)", "task_id": "22_05c973b4-2f0e-4975-b097-493cd2f0fa2b", "test_setup_code": "", "test_list": ["assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (-1, -1)", "assert find_first_duplicate_pair([1, 2, 3, 1, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert find_first_duplicate_pair([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]) == (10, 10)", "assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == (9, 9)", "assert find_first_duplicate_pair([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 2)", "assert find_first_duplicate_pair([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == (10, 10)", "assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) == (8, 8)", "assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == (6, 6)", "assert find_first_duplicate_pair([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]) == (4, 4)", "assert find_first_duplicate_pair([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]) == (3, 3)", "assert find_first_duplicate_pair([1, 2, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 2)", "assert find_first_duplicate_pair([]) == (-1, -1)", "assert find_first_duplicate_pair([1]) == (-1, -1)", "assert find_first_duplicate_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == (1, 1)"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_sum(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num + num\n        num_set.add(num)\n    return -1", "task_id": "22_6a9157a3-35ba-4878-844f-b8ba7f7d4530", "test_setup_code": "", "test_list": ["assert find_first_duplicate_sum([1, 2, 3, 4, 5, 1]) == 2", "assert find_first_duplicate_sum([1, 2, 3, 4, 5, 6]) == -1", "assert find_first_duplicate_sum([1, 1, 2, 2, 3, 3]) == 2", "assert find_first_duplicate_sum([5, 5, 5, 5, 5]) == 10", "assert find_first_duplicate_sum([]) == -1", "assert find_first_duplicate_sum([1]) == -1", "assert find_first_duplicate_sum([1, 2, 3, 2, 1]) == 4", "assert find_first_duplicate_sum([10, 20, 30, 40, 50, 10]) == 20", "assert find_first_duplicate_sum([0, 0, 0, 0]) == 0", "assert find_first_duplicate_sum([-1, -2, -3, -1]) == -2", "assert find_first_duplicate_sum([100, 200, 300, 100, 200]) == 200", "assert find_first_duplicate_sum([7, 8, 9, 10, 7, 8]) == 14", "assert find_first_duplicate_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 2", "assert find_first_duplicate_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_first_duplicate_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 18"], "challenge_test_list": []}
{"text": "Write a function to find the product of the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_product(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num * num\n        num_set.add(num)\n    return -1", "task_id": "22_38726e03-c11b-4f0c-93e8-1899089f1237", "test_setup_code": "", "test_list": ["assert find_first_duplicate_product([1, 2, 3, 2, 4, 5]) == 4", "assert find_first_duplicate_product([5, 1, 5, 2, 3, 4]) == 25", "assert find_first_duplicate_product([1, 2, 3, 4, 5]) == -1", "assert find_first_duplicate_product([1, 1, 2, 3, 4, 5]) == 1", "assert find_first_duplicate_product([2, 3, 4, 5, 2, 6]) == 4", "assert find_first_duplicate_product([10, 20, 30, 40, 50, 10]) == 100", "assert find_first_duplicate_product([7, 8, 9, 7, 10, 11]) == 49", "assert find_first_duplicate_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_first_duplicate_product([1]) == -1", "assert find_first_duplicate_product([]) == -1", "assert find_first_duplicate_product([0, 0, 1, 2, 3]) == 0", "assert find_first_duplicate_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1", "assert find_first_duplicate_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 81", "assert find_first_duplicate_product([1, 2, 2, 3, 3, 4, 4]) == 4", "assert find_first_duplicate_product([1, 2, 3, 4, 2, 3, 4]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the first duplicate element within k distance in a given array of integers.", "code": "def find_first_duplicate_within_k(nums, k):\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict and i - num_dict[num] <= k:\n            return num\n        num_dict[num] = i\n    return -1", "task_id": "22_b68a7173-c4da-4fa4-9aa6-56d17c77d239", "test_setup_code": "", "test_list": ["assert find_first_duplicate_within_k([1, 2, 3, 1, 4, 5], 3) == 1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6], 2) == -1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 2, 5], 3) == 2", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 1], 5) == 1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 1], 4) == -1", "assert find_first_duplicate_within_k([1, 1, 1, 1, 1, 1], 1) == 1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == -1", "assert find_first_duplicate_within_k([1, 2, 3, 1, 2, 3], 2) == 1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 1], 9) == 1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 1], 8) == -1", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1], 10) == 1", "assert find_first_duplicate_within_k([1, 2, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 2", "assert find_first_duplicate_within_k([1, 2, 3, 4, 2, 5, 6, 7, 8, 9], 4) == 2", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 10) == 2", "assert find_first_duplicate_within_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2], 9) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of squares of elements of list in a list of lists.", "code": "def find_max_sum_of_squares(lst):\n    maxi = -100000\n    for x in lst:\n        sum_squares = sum(y**2 for y in x)\n        maxi = max(sum_squares, maxi)\n    return maxi", "task_id": "23_b7693645-b9ee-433d-a466-6378bef7c7ae", "test_setup_code": "", "test_list": ["assert find_max_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 285", "assert find_max_sum_of_squares([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_squares([[1, -1, 1], [-1, 1, -1], [1, 1, 1]]) == 3", "assert find_max_sum_of_squares([[1], [2], [3]]) == 9", "assert find_max_sum_of_squares([[10, 10], [5, 5], [1, 1]]) == 200", "assert find_max_sum_of_squares([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == 285", "assert find_max_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 365", "assert find_max_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 650", "assert find_max_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == 1015", "assert find_max_sum_of_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]) == 1460", "assert find_max_sum_of_squares([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14]]) == 365", "assert find_max_sum_of_squares([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 650", "assert find_max_sum_of_squares([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 1240", "assert find_max_sum_of_squares([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]) == 2025", "assert find_max_sum_of_squares([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21]]) == 2926"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of elements of list in a list of lists.", "code": "def find_min_sum(lst):\n    mini = 100000\n    for x in lst:\n        sum_elements = sum(x)\n        mini = min(sum_elements, mini)\n    return mini", "task_id": "23_1f4c64c8-cd82-44bb-8d39-f2c9641bbae6", "test_setup_code": "", "test_list": ["assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 6", "assert find_min_sum([[10, 20, 30], [5, 5, 5], [1, 1, 1]]) == 3", "assert find_min_sum([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == 0", "assert find_min_sum([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -24", "assert find_min_sum([[100], [200], [300]]) == 100", "assert find_min_sum([[1, 2, 3], [1, 2], [1]]) == 1", "assert find_min_sum([[1, 2, 3, 4], [4, 5, 6], [7, 8, 9]]) == 10", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0, 0, 0]]) == 0", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1]]) == 3", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 1]]) == 4", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 0]]) == 3", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, -1]]) == 2", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [-1, -2, -3]]) == -6", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [0]]) == 0", "assert find_min_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1, 1]]) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of elements of list in a list of lists.", "code": "def find_max_product(lst):\n    maxi = -100000\n    for x in lst:\n        product = 1\n        for y in x:\n            product *= y\n        maxi = max(product, maxi)\n    return maxi", "task_id": "23_544905b5-01a6-48b2-86f9-c552fb4c323f", "test_setup_code": "", "test_list": ["assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 504", "assert find_max_product([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == 336", "assert find_max_product([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -6", "assert find_max_product([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == 504", "assert find_max_product([[1, 2], [3, 4], [5, 6]]) == 30", "assert find_max_product([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 11880", "assert find_max_product([[1], [2], [3]]) == 3", "assert find_max_product([[1, 2, 3], [0, 0, 0], [4, 5, 6]]) == 120", "assert find_max_product([[1, 2, 3], [4, 5, 6], [0, 0, 0]]) == 120", "assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == 120", "assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 10]]) == 560", "assert find_max_product([[-1, 2, -3], [4, -5, 6], [-7, 8, -9]]) == 504", "assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 504", "assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9, 0]]) == 120", "assert find_max_product([[1, 2, 3], [4, 5, 6], [7, 8, 9, -1]]) == 504"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of absolute values of elements of list in a list of lists.", "code": "def find_max_sum_of_absolute_values(lst):\n    maxi = -100000\n    for x in lst:\n        sum_abs = sum(abs(y) for y in x)\n        maxi = max(sum_abs, maxi)\n    return maxi", "task_id": "23_f0eaed5e-f7fd-46b2-a72d-4cf2c6a7479e", "test_setup_code": "", "test_list": ["assert find_max_sum_of_absolute_values([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == 24", "assert find_max_sum_of_absolute_values([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_absolute_values([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24", "assert find_max_sum_of_absolute_values([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == 24", "assert find_max_sum_of_absolute_values([[1], [2], [3]]) == 3", "assert find_max_sum_of_absolute_values([[1, -1], [-1, 1], [1, -1]]) == 2", "assert find_max_sum_of_absolute_values([[100, -200, 300], [-400, 500, -600], [700, -800, 900]]) == 2400", "assert find_max_sum_of_absolute_values([[1, 2], [3, 4], [5, 6]]) == 11", "assert find_max_sum_of_absolute_values([[1, -1, 1, -1], [-1, 1, -1, 1], [1, -1, 1, -1]]) == 4", "assert find_max_sum_of_absolute_values([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 65", "assert find_max_sum_of_absolute_values([[-1, -2, -3, -4, -5], [-6, -7, -8, -9, -10], [-11, -12, -13, -14, -15]]) == 65", "assert find_max_sum_of_absolute_values([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == 21", "assert find_max_sum_of_absolute_values([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 33", "assert find_max_sum_of_absolute_values([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == 42", "assert find_max_sum_of_absolute_values([[1, -2, 3, -4], [-5, 6, -7, 8], [9, -10, 11, -12]]) == 42"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of even elements of list in a list of lists.", "code": "def find_max_sum_of_even_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_even = sum(y for y in x if y % 2 == 0)\n        maxi = max(sum_even, maxi)\n    return maxi", "task_id": "23_ccb053e9-8e26-428c-8cdd-37ab2909a886", "test_setup_code": "", "test_list": ["assert find_max_sum_of_even_elements([[2, 4, 6], [8, 10]]) == 18", "assert find_max_sum_of_even_elements([[1, 3, 5], [7, 9]]) == 0", "assert find_max_sum_of_even_elements([[1, 2, 3], [4, 5, 6]]) == 10", "assert find_max_sum_of_even_elements([[-2, 4], [6, -8, 10]]) == 8", "assert find_max_sum_of_even_elements([[0], [0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_even_elements([]) == -100000", "assert find_max_sum_of_even_elements([[], []]) == 0", "assert find_max_sum_of_even_elements([[1], [2], [3], [4]]) == 4", "assert find_max_sum_of_even_elements([[100, 200], [2, 4, 6]]) == 300", "assert find_max_sum_of_even_elements([[-2, -4, -6], [-8, -10]]) == -18", "assert find_max_sum_of_even_elements([[1, 2], [3, 4], [5, 6]]) == 6", "assert find_max_sum_of_even_elements([[2, 3, 4], [6, 7, 8]]) == 14", "assert find_max_sum_of_even_elements([[1, 1, 1], [2, 2, 2]]) == 6", "assert find_max_sum_of_even_elements([[10000], [20000]]) == 20000", "assert find_max_sum_of_even_elements([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10]]) == 30"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of odd elements of list in a list of lists.", "code": "def find_max_sum_of_odd_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_odd = sum(y for y in x if y % 2 != 0)\n        maxi = max(sum_odd, maxi)\n    return maxi", "task_id": "23_e2812c54-da6f-4da4-ba66-80ccce38be90", "test_setup_code": "", "test_list": ["assert find_max_sum_of_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 16", "assert find_max_sum_of_odd_elements([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == 45", "assert find_max_sum_of_odd_elements([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == 0", "assert find_max_sum_of_odd_elements([[1], [3], [5]]) == 5", "assert find_max_sum_of_odd_elements([[-1, -3, -5], [-7, -9, -11], [-13, -15, -17]]) == -1", "assert find_max_sum_of_odd_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_odd_elements([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 39", "assert find_max_sum_of_odd_elements([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 3", "assert find_max_sum_of_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == 27", "assert find_max_sum_of_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13]]) == 39", "assert find_max_sum_of_odd_elements([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [11, 13, 15, 17, 19]]) == 75", "assert find_max_sum_of_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 39", "assert find_max_sum_of_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == 39", "assert find_max_sum_of_odd_elements([[1, 3, 5, 7, 9], [2, 4, 6, 8, 10], [11, 13, 15, 17, 19], [20, 21, 22, 23, 24]]) == 75", "assert find_max_sum_of_odd_elements([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20], [21, 22, 23, 24, 25, 26, 27, 28, 29, 30]]) == 125"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of positive elements of list in a list of lists.", "code": "def find_max_sum_of_positive_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_positive = sum(y for y in x if y > 0)\n        maxi = max(sum_positive, maxi)\n    return maxi", "task_id": "23_d4390738-4e6b-467e-b152-caa7aa57bda4", "test_setup_code": "", "test_list": ["assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24", "assert find_max_sum_of_positive_elements([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == 10", "assert find_max_sum_of_positive_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_positive_elements([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == 0", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, -9]]) == 15", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == 15", "assert find_max_sum_of_positive_elements([[1], [2], [3]]) == 3", "assert find_max_sum_of_positive_elements([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 240", "assert find_max_sum_of_positive_elements([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 65", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 34", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, -9, 10]]) == 20", "assert find_max_sum_of_positive_elements([[1, -2, 3], [4, -5, 6], [7, -8, 9]]) == 16", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, -10]]) == 24", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, 0]]) == 24", "assert find_max_sum_of_positive_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == 45"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of negative elements of list in a list of lists.", "code": "def find_max_sum_of_negative_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_negative = sum(y for y in x if y < 0)\n        maxi = max(sum_negative, maxi)\n    return maxi", "task_id": "23_54622e29-4011-420a-a0ad-13861e4c65da", "test_setup_code": "", "test_list": ["assert find_max_sum_of_negative_elements([[1, -2, -3], [-4, -5, 6], [7, 8, -9]]) == -9", "assert find_max_sum_of_negative_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 0", "assert find_max_sum_of_negative_elements([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -6", "assert find_max_sum_of_negative_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_negative_elements([[1, -1, 1], [-1, 1, -1], [1, -1, 1]]) == -2", "assert find_max_sum_of_negative_elements([[-10, -20, 30], [40, -50, 60], [-70, 80, -90]]) == -30", "assert find_max_sum_of_negative_elements([[1], [-2], [3], [-4], [5], [-6]]) == -6", "assert find_max_sum_of_negative_elements([[1, -1, 2, -2, 3, -3]]) == -6", "assert find_max_sum_of_negative_elements([[-1, -2, -3, -4], [1, 2, 3, 4], [-5, -6, -7, -8]]) == -26", "assert find_max_sum_of_negative_elements([[-1, 2, -3, 4], [-5, 6, -7, 8], [-9, 10, -11, 12]]) == -20", "assert find_max_sum_of_negative_elements([[1, 2, 3], [-4, -5, -6], [7, 8, 9]]) == -15", "assert find_max_sum_of_negative_elements([[-1, -2, -3], [-4, -5, -6], [7, 8, 9]]) == -15", "assert find_max_sum_of_negative_elements([[1, 2, 3], [4, 5, 6], [-7, -8, -9]]) == -24", "assert find_max_sum_of_negative_elements([[0, -1, -2], [3, -4, 5], [-6, 7, -8]]) == -14", "assert find_max_sum_of_negative_elements([[-1, -2, -3], [4, 5, 6], [-7, -8, -9]]) == -24"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of prime elements of list in a list of lists.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_max_sum_of_prime_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_prime = sum(y for y in x if is_prime(y))\n        maxi = max(sum_prime, maxi)\n    return maxi", "task_id": "23_5ea6c7a1-1993-4b4e-b91d-51f45fa50a9a", "test_setup_code": "", "test_list": ["assert find_max_sum_of_prime_elements([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == 12", "assert find_max_sum_of_prime_elements([[11, 13, 17], [19, 23, 29], [31, 37, 41]]) == 109", "assert find_max_sum_of_prime_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 10", "assert find_max_sum_of_prime_elements([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 0", "assert find_max_sum_of_prime_elements([[2], [3], [5], [7], [11]]) == 11", "assert find_max_sum_of_prime_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert find_max_sum_of_prime_elements([[2, 3, 5, 7], [11, 13, 17, 19], [23, 29, 31, 37]]) == 120", "assert find_max_sum_of_prime_elements([[4, 6, 8], [10, 12, 14], [16, 18, 20]]) == 0", "assert find_max_sum_of_prime_elements([[2, 3, 5], [7, 11, 13], [17, 19, 23]]) == 59", "assert find_max_sum_of_prime_elements([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]]) == 97", "assert find_max_sum_of_prime_elements([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == 2", "assert find_max_sum_of_prime_elements([[3, 5, 7], [11, 13, 17], [19, 23, 29]]) == 71", "assert find_max_sum_of_prime_elements([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37], [41, 43, 47]]) == 131", "assert find_max_sum_of_prime_elements([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37], [41, 43, 47], [53, 59, 61]]) == 173", "assert find_max_sum_of_prime_elements([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37], [41, 43, 47], [53, 59, 61], [67, 71, 73]]) == 211"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of unique elements of list in a list of lists.", "code": "def find_max_sum_of_unique_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_unique = sum(set(x))\n        maxi = max(sum_unique, maxi)\n    return maxi", "task_id": "23_a2d79d2a-ea5d-456d-8594-fc82a1748360", "test_setup_code": "", "test_list": ["assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 24", "assert find_max_sum_of_unique_elements([[1, 2, 2, 3], [4, 4, 5, 6], [7, 8, 8, 9]]) == 24", "assert find_max_sum_of_unique_elements([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == 3", "assert find_max_sum_of_unique_elements([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 6", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [1, 2, 3, 4, 5, 6]]) == 21", "assert find_max_sum_of_unique_elements([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == 19", "assert find_max_sum_of_unique_elements([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == 240", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 33", "assert find_max_sum_of_unique_elements([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 1, 1, 1, 1]]) == 15", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 5], [6, 7, 8]]) == 21", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 42", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6]]) == 24", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == 51", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21]]) == 60", "assert find_max_sum_of_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18], [19, 20, 21], [22, 23, 24]]) == 69"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first m multiples of n.", "code": "def sum_of_multiples(m, n):\n    multiples = list(range(n, (m + 1) * n, n))\n    return sum(multiples)", "task_id": "21_2b56e2b5-93ee-49a3-863e-95a041645e04", "test_setup_code": "", "test_list": ["assert sum_of_multiples(1, 5) == 5", "assert sum_of_multiples(2, 5) == 15", "assert sum_of_multiples(3, 5) == 30", "assert sum_of_multiples(4, 5) == 50", "assert sum_of_multiples(5, 5) == 75", "assert sum_of_multiples(0, 5) == 0", "assert sum_of_multiples(10, 1) == 55", "assert sum_of_multiples(10, 0) == 0", "assert sum_of_multiples(1, 0) == 0", "assert sum_of_multiples(5, -1) == -15", "assert sum_of_multiples(3, -5) == -30", "assert sum_of_multiples(10, 2) == 110", "assert sum_of_multiples(1, 1000000) == 1000000", "assert sum_of_multiples(5, 1000000) == 15000000", "assert sum_of_multiples(3, 7) == 42"], "challenge_test_list": []}
{"text": "Write a function to find the first m even multiples of n.", "code": "def even_multiples(m, n):\n    multiples = [i for i in range(n, (m * 2 + 1) * n, n) if i % 2 == 0]\n    return multiples[:m]", "task_id": "21_542320c6-a0f3-4486-8548-599eea9e8bd7", "test_setup_code": "", "test_list": ["assert even_multiples(1, 2) == [2]", "assert even_multiples(3, 2) == [2, 4, 6]", "assert even_multiples(5, 3) == [6, 12, 18, 24, 30]", "assert even_multiples(0, 4) == []", "assert even_multiples(4, 5) == [10, 20, 30, 40]", "assert even_multiples(2, 1) == [2, 4]", "assert even_multiples(3, 10) == [20, 40, 60]", "assert even_multiples(1, 7) == [14]", "assert even_multiples(2, 11) == [22, 44]", "assert even_multiples(6, 2) == [2, 4, 6, 8, 10, 12]", "assert even_multiples(3, 15) == [30, 60, 90]", "assert even_multiples(4, 8) == [16, 32, 48, 64]", "assert even_multiples(1, 100) == [200]", "assert even_multiples(5, 0) == [0, 0, 0, 0, 0]", "assert even_multiples(3, -2) == [-4, -8, -12]"], "challenge_test_list": []}
{"text": "Write a function to find the first m odd multiples of n.", "code": "def odd_multiples(m, n):\n    multiples = [i for i in range(n, (m * 2 + 1) * n, n) if i % 2 != 0]\n    return multiples[:m]", "task_id": "21_d19173cd-d630-4f17-8847-011778ecffd6", "test_setup_code": "", "test_list": ["assert odd_multiples(1, 1) == [1]", "assert odd_multiples(2, 1) == [1, 3]", "assert odd_multiples(3, 1) == [1, 3, 5]", "assert odd_multiples(1, 2) == [2]", "assert odd_multiples(2, 2) == [2, 6]", "assert odd_multiples(3, 2) == [2, 6, 10]", "assert odd_multiples(1, 3) == [3]", "assert odd_multiples(2, 3) == [3, 9]", "assert odd_multiples(3, 3) == [3, 9, 15]", "assert odd_multiples(5, 5) == [5, 15, 25, 35, 45]", "assert odd_multiples(4, 7) == [7, 21, 35, 49]", "assert odd_multiples(0, 5) == []", "assert odd_multiples(3, 0) == [0, 0, 0]", "assert odd_multiples(3, -2) == [-2, -6, -10]", "assert odd_multiples(2, 10) == [10, 30]"], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples of n within a given range (start, end).", "code": "def multiples_within_range(m, n, start, end):\n    multiples = [i for i in range(start, end + 1) if i % n == 0]\n    return multiples[:m]", "task_id": "21_110e5770-f9ad-4314-937d-848506f207aa", "test_setup_code": "", "test_list": ["assert multiples_within_range(3, 2, 1, 10) == [2, 4, 6]", "assert multiples_within_range(5, 3, 1, 20) == [3, 6, 9, 12, 15]", "assert multiples_within_range(2, 5, 5, 25) == [5, 10]", "assert multiples_within_range(4, 7, 1, 50) == [7, 14, 21, 28]", "assert multiples_within_range(1, 10, 1, 100) == [10]", "assert multiples_within_range(0, 3, 1, 10) == []", "assert multiples_within_range(3, 2, 8, 16) == [8, 10, 12]", "assert multiples_within_range(5, 4, 1, 20) == [4, 8, 12, 16, 20]", "assert multiples_within_range(3, 6, 1, 18) == [6, 12, 18]", "assert multiples_within_range(2, 8, 10, 50) == [16, 24]", "assert multiples_within_range(3, 11, 10, 100) == [11, 22, 33]", "assert multiples_within_range(4, 9, 1, 50) == [9, 18, 27, 36]", "assert multiples_within_range(3, 5, 5, 5) == [5]", "assert multiples_within_range(2, 7, 50, 100) == [56, 63]", "assert multiples_within_range(3, 1, 1, 3) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first m multiples of n within a given range (start, end).", "code": "def multiples_sum_within_range(m, n, start, end):\n    multiples = [i for i in range(start, end + 1) if i % n == 0]\n    return sum(multiples[:m])", "task_id": "21_66f59d44-71be-4293-9043-621906b2d1bf", "test_setup_code": "", "test_list": ["assert multiples_sum_within_range(3, 2, 1, 10) == 12", "assert multiples_sum_within_range(5, 3, 1, 20) == 45", "assert multiples_sum_within_range(2, 5, 10, 30) == 25", "assert multiples_sum_within_range(4, 7, 1, 50) == 84", "assert multiples_sum_within_range(1, 4, 1, 20) == 4", "assert multiples_sum_within_range(0, 3, 1, 10) == 0", "assert multiples_sum_within_range(3, 6, 5, 50) == 18", "assert multiples_sum_within_range(2, 10, 1, 100) == 30", "assert multiples_sum_within_range(5, 1, 1, 5) == 15", "assert multiples_sum_within_range(3, 2, 5, 15) == 18", "assert multiples_sum_within_range(4, 3, 0, 30) == 18", "assert multiples_sum_within_range(3, 5, 5, 25) == 30", "assert multiples_sum_within_range(2, 7, 14, 49) == 21", "assert multiples_sum_within_range(1, 8, 8, 64) == 8", "assert multiples_sum_within_range(3, 9, 9, 81) == 27"], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples that are common to both n1 and n2.", "code": "def multiples_of_two_numbers(m, n1, n2):\n    lcm = n1 * n2 // math.gcd(n1, n2)\n    multiples = list(range(lcm, (m + 1) * lcm, lcm))\n    return multiples[:m]", "task_id": "21_dd13f603-90a3-4445-a7e4-259ab197e612", "test_setup_code": "", "test_list": ["assert multiples_of_two_numbers(5, 3, 4) == [12, 24, 36, 48, 60]", "assert multiples_of_two_numbers(3, 5, 7) == [35, 70, 105]", "assert multiples_of_two_numbers(4, 6, 8) == [24, 48, 72, 96]", "assert multiples_of_two_numbers(1, 2, 3) == [6]", "assert multiples_of_two_numbers(6, 10, 15) == [30, 60, 90, 120, 150, 180]", "assert multiples_of_two_numbers(2, 1, 1) == [1, 2]", "assert multiples_of_two_numbers(5, 2, 5) == [10, 20, 30, 40, 50]", "assert multiples_of_two_numbers(3, 9, 12) == [36, 72, 108]", "assert multiples_of_two_numbers(4, 7, 14) == [14, 28, 42, 56]", "assert multiples_of_two_numbers(3, 11, 13) == [143, 286, 429]", "assert multiples_of_two_numbers(5, 4, 6) == [12, 24, 36, 48, 60]", "assert multiples_of_two_numbers(2, 8, 9) == [72, 144]", "assert multiples_of_two_numbers(3, 13, 17) == [221, 442, 663]", "assert multiples_of_two_numbers(4, 2, 3) == [6, 12, 18, 24]", "assert multiples_of_two_numbers(1, 5, 10) == [10]"], "challenge_test_list": []}
{"text": "Write a function to find multiples of n such that their sum does not exceed a given limit.", "code": "def multiples_with_sum_limit(n, limit):\n    multiples = []\n    current_sum = 0\n    i = 1\n    while current_sum + n * i <= limit:\n        multiples.append(n * i)\n        current_sum += n * i\n        i += 1\n    return multiples", "task_id": "21_3334a042-ed7d-4cd6-8926-6c4420109d5c", "test_setup_code": "", "test_list": ["assert multiples_with_sum_limit(3, 10) == [3, 6, 9]", "assert multiples_with_sum_limit(5, 20) == [5, 10, 15, 20]", "assert multiples_with_sum_limit(1, 5) == [1, 2, 3, 4, 5]", "assert multiples_with_sum_limit(2, 1) == []", "assert multiples_with_sum_limit(7, 50) == [7, 14, 21, 28, 35, 42, 49]", "assert multiples_with_sum_limit(10, 100) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "assert multiples_with_sum_limit(4, 15) == [4, 8, 12]", "assert multiples_with_sum_limit(6, 30) == [6, 12, 18, 24, 30]", "assert multiples_with_sum_limit(1, 1) == [1]", "assert multiples_with_sum_limit(9, 81) == [9, 18, 27, 36, 45, 54, 63, 72, 81]", "assert multiples_with_sum_limit(3, 0) == []", "assert multiples_with_sum_limit(2, 8) == [2, 4, 6, 8]", "assert multiples_with_sum_limit(11, 100) == [11, 22, 33, 44, 55, 66, 77, 88, 99]", "assert multiples_with_sum_limit(5, 5) == [5]", "assert multiples_with_sum_limit(8, 50) == [8, 16, 24, 32, 40, 48]"], "challenge_test_list": []}
{"text": "Write a function to find multiples of n such that their product does not exceed a given limit.", "code": "def multiples_with_product_limit(n, limit):\n    multiples = []\n    current_product = 1\n    i = 1\n    while current_product * n * i <= limit:\n        multiples.append(n * i)\n        current_product *= n * i\n        i += 1\n    return multiples", "task_id": "21_5f661b34-fc78-4b08-9448-a2249b9e6482", "test_setup_code": "", "test_list": ["assert multiples_with_product_limit(2, 10) == [2, 4]", "assert multiples_with_product_limit(3, 50) == [3, 9]", "assert multiples_with_product_limit(5, 100) == [5, 25]", "assert multiples_with_product_limit(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert multiples_with_product_limit(10, 1000) == [10, 100]", "assert multiples_with_product_limit(7, 500) == [7, 49]", "assert multiples_with_product_limit(1, 1) == [1]", "assert multiples_with_product_limit(2, 1) == []", "assert multiples_with_product_limit(3, 27) == [3, 9]", "assert multiples_with_product_limit(4, 64) == [4, 16]", "assert multiples_with_product_limit(6, 720) == [6, 36]", "assert multiples_with_product_limit(8, 512) == [8, 64]", "assert multiples_with_product_limit(9, 1000) == [9, 81]", "assert multiples_with_product_limit(11, 10000) == [11, 121]", "assert multiples_with_product_limit(13, 169) == [13, 169]"], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples of n whose digits sum up to a given value.", "code": "def multiples_with_digit_sum(m, n, digit_sum):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    multiples = []\n    i = 1\n    while len(multiples) < m:\n        multiple = n * i\n        if sum_of_digits(multiple) == digit_sum:\n            multiples.append(multiple)\n        i += 1\n    return multiples", "task_id": "21_08cbb9ab-2413-4eb4-a412-1ccbb342e493", "test_setup_code": "", "test_list": ["assert multiples_with_digit_sum(1, 5, 5) == [5]", "assert multiples_with_digit_sum(2, 7, 7) == [7, 16]", "assert multiples_with_digit_sum(3, 12, 3) == [12, 21, 30]", "assert multiples_with_digit_sum(1, 10, 1) == [10]", "assert multiples_with_digit_sum(2, 9, 9) == [9, 18]", "assert multiples_with_digit_sum(3, 8, 8) == [8, 17, 26]", "assert multiples_with_digit_sum(4, 6, 6) == [6, 15, 24, 33]", "assert multiples_with_digit_sum(1, 11, 2) == [11]", "assert multiples_with_digit_sum(2, 5, 10) == [19, 28]", "assert multiples_with_digit_sum(3, 3, 3) == [3, 12, 21]", "assert multiples_with_digit_sum(5, 4, 4) == [4, 13, 22, 31, 40]", "assert multiples_with_digit_sum(1, 1, 1) == [1]", "assert multiples_with_digit_sum(2, 2, 2) == [2, 11]", "assert multiples_with_digit_sum(3, 15, 6) == [15, 24, 33]", "assert multiples_with_digit_sum(4, 7, 5) == [14, 23, 32, 41]"], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal number to its decimal equivalent.", "code": "def hex_to_decimal(hex_num: str) -> int:\n    return int(hex_num, 16)", "task_id": "24_842f1c07-cf53-4f1c-b952-2e932564adb7", "test_setup_code": "", "test_list": ["assert hex_to_decimal('0') == 0", "assert hex_to_decimal('1') == 1", "assert hex_to_decimal('A') == 10", "assert hex_to_decimal('F') == 15", "assert hex_to_decimal('10') == 16", "assert hex_to_decimal('1A') == 26", "assert hex_to_decimal('100') == 256", "assert hex_to_decimal('ABC') == 2748", "assert hex_to_decimal('FFF') == 4095", "assert hex_to_decimal('1234') == 4660", "assert hex_to_decimal('DEAD') == 57005", "assert hex_to_decimal('BEEF') == 48879", "assert hex_to_decimal('CAFEBABE') == 3405691582", "assert hex_to_decimal('FFFFFFFF') == 4294967295", "assert hex_to_decimal('7FFFFFFF') == 2147483647"], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its decimal equivalent.", "code": "def octal_to_decimal(octal: str) -> int:\n    return int(octal, 8)", "task_id": "24_78df7788-8a9d-4203-b0cf-214c1eff5bd1", "test_setup_code": "", "test_list": ["assert octal_to_decimal('0') == 0", "assert octal_to_decimal('1') == 1", "assert octal_to_decimal('7') == 7", "assert octal_to_decimal('10') == 8", "assert octal_to_decimal('17') == 15", "assert octal_to_decimal('20') == 16", "assert octal_to_decimal('77') == 63", "assert octal_to_decimal('100') == 64", "assert octal_to_decimal('123') == 83", "assert octal_to_decimal('377') == 255", "assert octal_to_decimal('400') == 256", "assert octal_to_decimal('777') == 511", "assert octal_to_decimal('1000') == 512", "assert octal_to_decimal('1777') == 1023", "assert octal_to_decimal('2000') == 1024"], "challenge_test_list": []}
{"text": "Write a function to convert the given binary number to its hexadecimal equivalent.", "code": "def binary_to_hex(binary: str) -> str:\n    decimal = int(binary, 2)\n    return hex(decimal)[2:]", "task_id": "24_af387aa3-a6a2-4880-9019-45ef72c804bf", "test_setup_code": "", "test_list": ["assert binary_to_hex('0') == '0'", "assert binary_to_hex('1') == '1'", "assert binary_to_hex('10') == '2'", "assert binary_to_hex('11') == '3'", "assert binary_to_hex('100') == '4'", "assert binary_to_hex('101') == '5'", "assert binary_to_hex('110') == '6'", "assert binary_to_hex('111') == '7'", "assert binary_to_hex('1000') == '8'", "assert binary_to_hex('1001') == '9'", "assert binary_to_hex('1010') == 'a'", "assert binary_to_hex('1100') == 'c'", "assert binary_to_hex('1111') == 'f'", "assert binary_to_hex('11001100') == 'cc'", "assert binary_to_hex('111100001111') == 'f0f'"], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its binary equivalent.", "code": "def decimal_to_binary(decimal: int) -> str:\n    return bin(decimal)[2:]", "task_id": "24_0a2b2015-dd5e-4e1b-8a9e-3f8709d52849", "test_setup_code": "", "test_list": ["assert decimal_to_binary(0) == '0'", "assert decimal_to_binary(1) == '1'", "assert decimal_to_binary(2) == '10'", "assert decimal_to_binary(3) == '11'", "assert decimal_to_binary(4) == '100'", "assert decimal_to_binary(5) == '101'", "assert decimal_to_binary(10) == '1010'", "assert decimal_to_binary(15) == '1111'", "assert decimal_to_binary(16) == '10000'", "assert decimal_to_binary(31) == '11111'", "assert decimal_to_binary(32) == '100000'", "assert decimal_to_binary(63) == '111111'", "assert decimal_to_binary(64) == '1000000'", "assert decimal_to_binary(255) == '11111111'", "assert decimal_to_binary(256) == '100000000'"], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its octal equivalent.", "code": "def decimal_to_octal(decimal: int) -> str:\n    return oct(decimal)[2:]", "task_id": "24_e3fc4e35-36c2-43cf-b63c-5ec5de37b2a2", "test_setup_code": "", "test_list": ["assert decimal_to_octal(0) == '0'", "assert decimal_to_octal(1) == '1'", "assert decimal_to_octal(7) == '7'", "assert decimal_to_octal(8) == '10'", "assert decimal_to_octal(10) == '12'", "assert decimal_to_octal(15) == '17'", "assert decimal_to_octal(16) == '20'", "assert decimal_to_octal(64) == '100'", "assert decimal_to_octal(100) == '144'", "assert decimal_to_octal(255) == '377'", "assert decimal_to_octal(256) == '400'", "assert decimal_to_octal(512) == '1000'", "assert decimal_to_octal(1024) == '2000'", "assert decimal_to_octal(2048) == '4000'", "assert decimal_to_octal(4096) == '10000'"], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its hexadecimal equivalent.", "code": "def decimal_to_hex(decimal: int) -> str:\n    return hex(decimal)[2:]", "task_id": "24_370d7b28-e975-4180-bd1b-42c50a7e4be4", "test_setup_code": "", "test_list": ["assert decimal_to_hex(0) == '0'", "assert decimal_to_hex(1) == '1'", "assert decimal_to_hex(10) == 'a'", "assert decimal_to_hex(15) == 'f'", "assert decimal_to_hex(16) == '10'", "assert decimal_to_hex(255) == 'ff'", "assert decimal_to_hex(256) == '100'", "assert decimal_to_hex(4095) == 'fff'", "assert decimal_to_hex(4096) == '1000'", "assert decimal_to_hex(65535) == 'ffff'", "assert decimal_to_hex(65536) == '10000'", "assert decimal_to_hex(1048575) == 'fffff'", "assert decimal_to_hex(1048576) == '100000'", "assert decimal_to_hex(16777215) == 'ffffff'", "assert decimal_to_hex(16777216) == '1000000'"], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal number to its binary equivalent.", "code": "def hex_to_binary(hex_num: str) -> str:\n    decimal = int(hex_num, 16)\n    return bin(decimal)[2:]", "task_id": "24_3e7552df-13e9-40df-adb0-94d22adab777", "test_setup_code": "", "test_list": ["assert hex_to_binary('0') == '0'", "assert hex_to_binary('1') == '1'", "assert hex_to_binary('A') == '1010'", "assert hex_to_binary('F') == '1111'", "assert hex_to_binary('10') == '10000'", "assert hex_to_binary('1A') == '11010'", "assert hex_to_binary('FF') == '11111111'", "assert hex_to_binary('100') == '100000000'", "assert hex_to_binary('ABC') == '101010111100'", "assert hex_to_binary('1234') == '1001000110100'", "assert hex_to_binary('FFFF') == '1111111111111111'", "assert hex_to_binary('7FFFFFFF') == '1111111111111111111111111111111'", "assert hex_to_binary('80000000') == '10000000000000000000000000000000'", "assert hex_to_binary('DEADBEEF') == '11011110101011011011111011101111'", "assert hex_to_binary('CAFEBABE') == '11001010111111101011101010111110'"], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its binary equivalent.", "code": "def octal_to_binary(octal: str) -> str:\n    decimal = int(octal, 8)\n    return bin(decimal)[2:]", "task_id": "24_4092b30a-52c0-485e-9ac8-7b76dbb7a0f1", "test_setup_code": "", "test_list": ["assert octal_to_binary('0') == '0'", "assert octal_to_binary('1') == '1'", "assert octal_to_binary('7') == '111'", "assert octal_to_binary('10') == '1000'", "assert octal_to_binary('17') == '1111'", "assert octal_to_binary('20') == '10000'", "assert octal_to_binary('77') == '111111'", "assert octal_to_binary('100') == '1000000'", "assert octal_to_binary('123') == '1010011'", "assert octal_to_binary('377') == '11111111'", "assert octal_to_binary('400') == '100000000'", "assert octal_to_binary('777') == '111111111'", "assert octal_to_binary('1000') == '1000000000'", "assert octal_to_binary('1234') == '1010011100'", "assert octal_to_binary('7777') == '111111111111'"], "challenge_test_list": []}
{"text": "Write a function to convert the given binary number to its octal equivalent.", "code": "def binary_to_octal(binary: str) -> str:\n    decimal = int(binary, 2)\n    return oct(decimal)[2:]", "task_id": "24_668f25e3-99c4-4281-bd87-0117fd533768", "test_setup_code": "", "test_list": ["assert binary_to_octal('0') == '0'", "assert binary_to_octal('1') == '1'", "assert binary_to_octal('10') == '2'", "assert binary_to_octal('11') == '3'", "assert binary_to_octal('100') == '4'", "assert binary_to_octal('101') == '5'", "assert binary_to_octal('110') == '6'", "assert binary_to_octal('111') == '7'", "assert binary_to_octal('1000') == '10'", "assert binary_to_octal('1001') == '11'", "assert binary_to_octal('11010') == '32'", "assert binary_to_octal('111111') == '77'", "assert binary_to_octal('1000000') == '100'", "assert binary_to_octal('111111111') == '777'", "assert binary_to_octal('1010101010') == '1252'"], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its hexadecimal equivalent.", "code": "def octal_to_hex(octal: str) -> str:\n    decimal = int(octal, 8)\n    return hex(decimal)[2:]", "task_id": "24_a8a6e39e-2485-42e5-b7af-fe9736a3391c", "test_setup_code": "", "test_list": ["assert octal_to_hex('0') == '0'", "assert octal_to_hex('1') == '1'", "assert octal_to_hex('7') == '7'", "assert octal_to_hex('10') == '8'", "assert octal_to_hex('17') == 'f'", "assert octal_to_hex('20') == '10'", "assert octal_to_hex('77') == '3f'", "assert octal_to_hex('100') == '40'", "assert octal_to_hex('123') == '53'", "assert octal_to_hex('377') == 'ff'", "assert octal_to_hex('400') == '100'", "assert octal_to_hex('777') == '1ff'", "assert octal_to_hex('1000') == '200'", "assert octal_to_hex('1777') == '7ff'", "assert octal_to_hex('2000') == '400'"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of non-repeated elements in a given array.", "code": "def sum_unique_elements(arr: list) -> int:\n    unique_elements = set(arr)\n    return sum(unique_elements)", "task_id": "25_609049a1-f7db-4975-af15-23f87a2b284e", "test_setup_code": "", "test_list": ["assert sum_unique_elements([1, 2, 3, 4, 5]) == 15", "assert sum_unique_elements([1, 2, 2, 3, 3, 4, 5]) == 15", "assert sum_unique_elements([10, 10, 10, 10]) == 10", "assert sum_unique_elements([1, 1, 1, 1, 1, 1]) == 1", "assert sum_unique_elements([]) == 0", "assert sum_unique_elements([0, 0, 0, 0]) == 0", "assert sum_unique_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_unique_elements([-1, -1, -2, -2, -3, -3, -4, -4, -5, -5]) == -15", "assert sum_unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15", "assert sum_unique_elements([100, 200, 300, 400, 500]) == 1500", "assert sum_unique_elements([1]) == 1", "assert sum_unique_elements([1, -1, 1, -1]) == 0", "assert sum_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_unique_elements([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 0", "assert sum_unique_elements([1, 2, 3, 4, 5, 0, 0, 0, 0, 0]) == 15"], "challenge_test_list": []}
{"text": "Write a python function to find the product of all even elements in a given array.", "code": "def product_of_even_elements(arr: list) -> int:\n    prod = 1\n    for num in arr:\n        if num % 2 == 0:\n            prod *= num\n    return prod", "task_id": "25_213c1a2a-20cb-469b-9399-43c132aee98e", "test_setup_code": "", "test_list": ["assert product_of_even_elements([2, 4, 6, 8, 10]) == 3840", "assert product_of_even_elements([1, 3, 5, 7, 9]) == 1", "assert product_of_even_elements([2, 3, 4, 5, 6]) == 48", "assert product_of_even_elements([10, 20, 30, 40, 50]) == 12000000", "assert product_of_even_elements([0, 2, 4, 6, 8]) == 0", "assert product_of_even_elements([1, 2, 3, 4, 5, 6]) == 48", "assert product_of_even_elements([2, 2, 2, 2, 2]) == 32", "assert product_of_even_elements([100, 200, 300, 400, 500]) == 12000000000", "assert product_of_even_elements([-2, -4, -6, -8, -10]) == -3840", "assert product_of_even_elements([-1, -3, -5, -7, -9]) == 1", "assert product_of_even_elements([2]) == 2", "assert product_of_even_elements([1]) == 1", "assert product_of_even_elements([]) == 1", "assert product_of_even_elements([2, 4, 6, 0, 8]) == 0", "assert product_of_even_elements([1, 2, 3, 0, 4, 5, 6]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd elements in a given array.", "code": "def sum_of_odd_elements(arr: list) -> int:\n    total = 0\n    for num in arr:\n        if num % 2 != 0:\n            total += num\n    return total", "task_id": "25_35b78be6-238a-4994-95d8-26a5098eb96d", "test_setup_code": "", "test_list": ["assert sum_of_odd_elements([1, 2, 3, 4, 5]) == 9", "assert sum_of_odd_elements([2, 4, 6, 8, 10]) == 0", "assert sum_of_odd_elements([1, 3, 5, 7, 9]) == 25", "assert sum_of_odd_elements([]) == 0", "assert sum_of_odd_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25", "assert sum_of_odd_elements([-1, -2, -3, -4, -5]) == -9", "assert sum_of_odd_elements([-1, 1, -3, 3, -5, 5]) == 0", "assert sum_of_odd_elements([11, 22, 33, 44, 55]) == 99", "assert sum_of_odd_elements([1001, 1002, 1003, 1004, 1005]) == 3009", "assert sum_of_odd_elements([0]) == 0", "assert sum_of_odd_elements([1]) == 1", "assert sum_of_odd_elements([2]) == 0", "assert sum_of_odd_elements([-7, -3, 0, 3, 7]) == 0", "assert sum_of_odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 36", "assert sum_of_odd_elements([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique elements in a given array.", "code": "def count_unique_elements(arr: list) -> int:\n    unique_elements = set(arr)\n    return len(unique_elements)", "task_id": "25_a3afdf60-8a41-4b40-8a65-8b1e718f75c1", "test_setup_code": "", "test_list": ["assert count_unique_elements([]) == 0", "assert count_unique_elements([1]) == 1", "assert count_unique_elements([1, 2, 3, 4, 5]) == 5", "assert count_unique_elements([1, 1, 1, 1, 1]) == 1", "assert count_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4", "assert count_unique_elements([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 5", "assert count_unique_elements([-1, -2, -3, -4, -5]) == 5", "assert count_unique_elements([-1, -1, -2, -2, -3, -3, -4, -4, -5, -5]) == 5", "assert count_unique_elements([0, 0, 0, 0, 0]) == 1", "assert count_unique_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert count_unique_elements([1, '1', 2, '2', 3, '3']) == 6", "assert count_unique_elements(['a', 'b', 'c', 'a', 'b', 'c']) == 3", "assert count_unique_elements([True, False, True, False]) == 2", "assert count_unique_elements([None, None, None]) == 1", "assert count_unique_elements([1.1, 2.2, 3.3, 1.1, 2.2, 3.3]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum unique element in a given array.", "code": "def max_unique_element(arr: list) -> int:\n    unique_elements = set(arr)\n    return max(unique_elements)", "task_id": "25_73ce8c52-6e4b-43ee-bb8a-0166296bfb90", "test_setup_code": "", "test_list": ["assert max_unique_element([1, 2, 3, 4, 5]) == 5", "assert max_unique_element([5, 5, 5, 5, 5]) == 5", "assert max_unique_element([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5", "assert max_unique_element([-1, -2, -3, -4, -5]) == -1", "assert max_unique_element([0, 0, 0, 0, 0]) == 0", "assert max_unique_element([1]) == 1", "assert max_unique_element([1, 3, 3, 2, 2, 4, 4, 5, 5, 6, 6]) == 6", "assert max_unique_element([10, 20, 30, 40, 50]) == 50", "assert max_unique_element([100, 200, 300, 400, 500, 100, 200, 300, 400, 500]) == 500", "assert max_unique_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 10", "assert max_unique_element([-10, -20, -30, -40, -50]) == -10", "assert max_unique_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert max_unique_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 10", "assert max_unique_element([1000, 2000, 3000, 4000, 5000]) == 5000", "assert max_unique_element([1, 2, 3, 4, 5, 100, 200, 300, 400, 500]) == 500"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum unique element in a given array.", "code": "def min_unique_element(arr: list) -> int:\n    unique_elements = set(arr)\n    return min(unique_elements)", "task_id": "25_3efdf2b3-fc10-455a-93e7-9992ed325e15", "test_setup_code": "", "test_list": ["assert min_unique_element([1, 2, 3, 4, 5]) == 1", "assert min_unique_element([5, 5, 5, 5, 5]) == 5", "assert min_unique_element([2, 2, 3, 3, 4, 4, 1]) == 1", "assert min_unique_element([10, 20, 30, 40, 50]) == 10", "assert min_unique_element([100, 200, 300, 400, 500]) == 100", "assert min_unique_element([0, -1, -2, -3, -4, -5]) == -5", "assert min_unique_element([1, 1, 1, 2, 2, 2, 3, 3, 3]) == 1", "assert min_unique_element([7, 8, 9, 10, 11, 12]) == 7", "assert min_unique_element([4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert min_unique_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 1", "assert min_unique_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert min_unique_element([-10, -20, -30, -40, -50]) == -50", "assert min_unique_element([1000, 2000, 3000, 4000, 5000]) == 1000", "assert min_unique_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert min_unique_element([1]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the product of all positive elements in a given array.", "code": "def product_of_positive_elements(arr: list) -> int:\n    prod = 1\n    for num in arr:\n        if num > 0:\n            prod *= num\n    return prod", "task_id": "25_aa537250-8416-46d2-992c-9505d50408d2", "test_setup_code": "", "test_list": ["assert product_of_positive_elements([1, 2, 3, 4, 5]) == 120", "assert product_of_positive_elements([-1, -2, -3, -4, -5]) == 1", "assert product_of_positive_elements([0, 0, 0, 0, 0]) == 1", "assert product_of_positive_elements([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 120", "assert product_of_positive_elements([1]) == 1", "assert product_of_positive_elements([-1]) == 1", "assert product_of_positive_elements([0]) == 1", "assert product_of_positive_elements([0, 1, 2, 3, 4, 5]) == 120", "assert product_of_positive_elements([1, 2, 3, 4, 5, 0]) == 120", "assert product_of_positive_elements([1, 2, 3, 4, 5, -1]) == 120", "assert product_of_positive_elements([1, 2, 3, 4, 5, -1, 0]) == 120", "assert product_of_positive_elements([0, -1, -2, -3, -4, -5]) == 1", "assert product_of_positive_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800", "assert product_of_positive_elements([10, 20, 30, 40, 50]) == 12000000", "assert product_of_positive_elements([1, 0, 2, 0, 3, 0, 4, 0, 5, 0]) == 120"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all negative elements in a given array.", "code": "def sum_of_negative_elements(arr: list) -> int:\n    total = 0\n    for num in arr:\n        if num < 0:\n            total += num\n    return total", "task_id": "25_58c8625f-78c2-4cfe-957a-dc5b41c25091", "test_setup_code": "", "test_list": ["assert sum_of_negative_elements([1, -2, 3, -4, 5]) == -6", "assert sum_of_negative_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_of_negative_elements([1, 2, 3, 4, 5]) == 0", "assert sum_of_negative_elements([]) == 0", "assert sum_of_negative_elements([0, -1, 2, -3, 4, -5]) == -9", "assert sum_of_negative_elements([-10, -20, -30, -40, -50]) == -150", "assert sum_of_negative_elements([10, 20, 30, 40, 50]) == 0", "assert sum_of_negative_elements([0, 0, 0, 0, 0]) == 0", "assert sum_of_negative_elements([-1]) == -1", "assert sum_of_negative_elements([1]) == 0", "assert sum_of_negative_elements([-100, 100, -200, 200, -300, 300]) == -600", "assert sum_of_negative_elements([1, -1, 1, -1, 1, -1]) == -3", "assert sum_of_negative_elements([-1, -1, -1, -1, -1]) == -5", "assert sum_of_negative_elements([1, 2, 3, -1, -2, -3]) == -6", "assert sum_of_negative_elements([100, -100, 200, -200, 300, -300]) == -600"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even elements in a given array.", "code": "def count_even_elements(arr: list) -> int:\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count", "task_id": "25_7ee7af9c-f196-412f-be96-0d06e7d2c700", "test_setup_code": "", "test_list": ["assert count_even_elements([1, 2, 3, 4, 5]) == 2", "assert count_even_elements([2, 4, 6, 8, 10]) == 5", "assert count_even_elements([1, 3, 5, 7, 9]) == 0", "assert count_even_elements([0, -2, -4, -6, -8]) == 5", "assert count_even_elements([]) == 0", "assert count_even_elements([1]) == 0", "assert count_even_elements([2]) == 1", "assert count_even_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_even_elements([11, 13, 15, 17, 19, 21]) == 0", "assert count_even_elements([-1, -3, -5, -7, -9]) == 0", "assert count_even_elements([2, 2, 2, 2, 2]) == 5", "assert count_even_elements([1, 2, 1, 2, 1, 2]) == 3", "assert count_even_elements([100, 200, 300, 400, 500]) == 5", "assert count_even_elements([101, 202, 303, 404, 505]) == 2", "assert count_even_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a given array.", "code": "def count_odd_elements(arr: list) -> int:\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n    return count", "task_id": "25_ed9c07be-755a-479b-a3f3-149eeef26d1c", "test_setup_code": "", "test_list": ["assert count_odd_elements([1, 2, 3, 4, 5]) == 3", "assert count_odd_elements([2, 4, 6, 8, 10]) == 0", "assert count_odd_elements([1, 3, 5, 7, 9]) == 5", "assert count_odd_elements([]) == 0", "assert count_odd_elements([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_odd_elements([-1, -2, -3, -4, -5]) == 3", "assert count_odd_elements([100, 101, 102, 103, 104, 105]) == 3", "assert count_odd_elements([1]) == 1", "assert count_odd_elements([2]) == 0", "assert count_odd_elements([0]) == 0", "assert count_odd_elements([1, 1, 1, 1, 1]) == 5", "assert count_odd_elements([2, 2, 2, 2, 2]) == 0", "assert count_odd_elements([1, 2, 1, 2, 1, 2]) == 3", "assert count_odd_elements([10, 20, 30, 40, 50]) == 0", "assert count_odd_elements([-1, -3, -5, -7, -9]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "28_e714a29b-4376-4646-b142-1eca0fe43508", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "28_c510e008-5755-434b-84e4-c1578268a984", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(25) == 75025", "assert fibonacci(30) == 832040"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)", "task_id": "28_767839db-025a-4297-b139-110ed869e6c8", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(54, 24) == 6", "assert gcd(17, 31) == 1", "assert gcd(100, 10) == 10", "assert gcd(81, 27) == 27", "assert gcd(7, 14) == 7", "assert gcd(56, 98) == 14", "assert gcd(123456, 789012) == 12", "assert gcd(1, 1) == 1", "assert gcd(20, 30) == 10", "assert gcd(270, 192) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return abs(a * b) // gcd(a, b)", "task_id": "28_78760c51-cffc-460d-9838-1479f8386fdf", "test_setup_code": "", "test_list": ["assert lcm(1, 1) == 1", "assert lcm(2, 3) == 6", "assert lcm(4, 6) == 12", "assert lcm(7, 5) == 35", "assert lcm(10, 15) == 30", "assert lcm(21, 6) == 42", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(13, 17) == 221", "assert lcm(8, 9) == 72", "assert lcm(100, 25) == 100", "assert lcm(9, 12) == 36", "assert lcm(14, 28) == 28", "assert lcm(18, 24) == 72"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    return s[-1] + reverse_string(s[:-1])", "task_id": "28_90447ada-3302-4870-bfee-85cc44f14358", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('abc') == 'cba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('The quick brown fox jumps over the lazy dog') == 'god yzal eht revo spmuj xof nworb kciuq ehT'", "assert reverse_string('Python is fun!') == '!nuf si nohtyP'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])", "task_id": "28_0bad096a-99b9-4101-a3fa-62f59ed395dc", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('palindrome') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon no melon'.replace(' ', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    if len(s) == 0:\n        return 0\n    return (1 if s[0] in vowels else 0) + count_vowels(s[1:])", "task_id": "28_520786af-efaf-4e24-bcf7-aebb0c70f92d", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python Programming') == 4", "assert count_vowels('1234567890') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('a') == 1", "assert count_vowels('b') == 0", "assert count_vowels('A long string with multiple vowels and consonants.') == 13", "assert count_vowels('Why do we need to count vowels?') == 8", "assert count_vowels('Uppercase and lowercase vowels: A E I O U a e i o u') == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements in a given list.", "code": "def sum_of_list(lst: list) -> int:\n    if len(lst) == 0:\n        return 0\n    return lst[0] + sum_of_list(lst[1:])", "task_id": "28_2e507d88-3c3a-4d7e-ad06-bef921d77250", "test_setup_code": "", "test_list": ["assert sum_of_list([1, 2, 3, 4, 5]) == 15", "assert sum_of_list([0, 0, 0, 0]) == 0", "assert sum_of_list([-1, -2, -3, -4]) == -10", "assert sum_of_list([100]) == 100", "assert sum_of_list([]) == 0", "assert sum_of_list([1, -1, 1, -1]) == 0", "assert sum_of_list([999, 1]) == 1000", "assert sum_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_of_list([-10, 10, -10, 10]) == 0", "assert sum_of_list([1, 2, 3, 4, 5, -15]) == 0", "assert sum_of_list([1, 2, 3, 4, 5, 100]) == 115", "assert sum_of_list([0]) == 0", "assert sum_of_list([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_list([-1, 1, -1, 1, -1, 1, -1, 1]) == 0", "assert sum_of_list([1000, 2000, 3000, 4000, 5000]) == 15000"], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a list of strings.", "code": "import re\ndef remove_vowels(words):\n    pattern = '[aeiouAEIOU]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_cf4b2194-0c8e-4c30-bad9-9a0f5a88fc11", "test_setup_code": "", "test_list": ["assert remove_vowels(['hello', 'world']) == ['hll', 'wrld']", "assert remove_vowels(['AEIOU', 'aeiou']) == ['', '']", "assert remove_vowels(['Python', 'Programming']) == ['Pythn', 'Prgrmmng']", "assert remove_vowels(['']) == ['']", "assert remove_vowels(['a', 'e', 'i', 'o', 'u']) == ['', '', '', '', '']", "assert remove_vowels(['bcdfg', 'hjklmn', 'pqrst', 'vwxyz']) == ['bcdfg', 'hjklmn', 'pqrst', 'vwxyz']", "assert remove_vowels(['This', 'is', 'a', 'test']) == ['Ths', 's', '', 'tst']", "assert remove_vowels(['UPPERCASE', 'lowercase']) == ['PPRCS', 'lwrcs']", "assert remove_vowels(['123', '456']) == ['123', '456']", "assert remove_vowels(['aEiOu123', 'bCdFg456']) == ['123', 'bCdFg456']", "assert remove_vowels(['']) == ['']", "assert remove_vowels(['AEIOUaeiou']) == ['']", "assert remove_vowels(['abracadabra', 'alakazam']) == ['brcdbr', 'lkzm']", "assert remove_vowels(['qwertyuiop', 'asdfghjkl']) == ['qwrtyp', 'sdfghjkl']", "assert remove_vowels(['vowels', 'removed']) == ['vwls', 'rmvd']"], "challenge_test_list": []}
{"text": "Write a python function to remove all special characters from a list of strings.", "code": "import re\ndef remove_special_chars(words):\n    pattern = '[^a-zA-Z0-9\\s]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_c2009b4a-9e5c-4abd-bd85-ea955a4e5123", "test_setup_code": "", "test_list": ["assert remove_special_chars(['hello!', 'world?']) == ['hello', 'world']", "assert remove_special_chars(['a@b.c', 'd#e$f']) == ['abc', 'def']", "assert remove_special_chars(['123!@#', '456$%^']) == ['123', '456']", "assert remove_special_chars(['no-special-chars']) == ['nospecialchars']", "assert remove_special_chars(['']) == ['']", "assert remove_special_chars([]) == []", "assert remove_special_chars(['!@#$%^&*()']) == ['']", "assert remove_special_chars(['hello world!']) == ['hello world']", "assert remove_special_chars(['abc123', '!@#']) == ['abc123', '']", "assert remove_special_chars(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert remove_special_chars(['a!b@c#', 'd$e%f^']) == ['abc', 'def']", "assert remove_special_chars(['123', 'abc', '!@#']) == ['123', 'abc', '']", "assert remove_special_chars(['Hello, World!', 'Python 3.9']) == ['Hello World', 'Python 39']", "assert remove_special_chars(['a\nb\tc']) == ['a\nb\tc']", "assert remove_special_chars(['(test)', '[test]', '{test}']) == ['test', 'test', 'test']"], "challenge_test_list": []}
{"text": "Write a python function to remove all uppercase letters from a list of strings.", "code": "import re\ndef remove_uppercase(words):\n    pattern = '[A-Z]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_d6516f57-6fa7-4555-acfe-d7bd861c0015", "test_setup_code": "", "test_list": ["assert remove_uppercase(['Hello', 'World']) == ['ello', 'orld']", "assert remove_uppercase(['ABC', 'def']) == ['', 'def']", "assert remove_uppercase(['abc', 'def']) == ['abc', 'def']", "assert remove_uppercase(['a', 'B', 'c']) == ['a', '', 'c']", "assert remove_uppercase(['']) == ['']", "assert remove_uppercase([]) == []", "assert remove_uppercase(['UPPERCASE']) == ['']", "assert remove_uppercase(['lowercase']) == ['lowercase']", "assert remove_uppercase(['MiXeD', 'CaSe']) == ['ie', 'ae']", "assert remove_uppercase(['Hello123', 'World456']) == ['ello123', 'orld456']", "assert remove_uppercase(['123ABC', '456DEF']) == ['123', '456']", "assert remove_uppercase(['A', 'B', 'C']) == ['', '', '']", "assert remove_uppercase(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert remove_uppercase(['A1B2C3', 'a1b2c3']) == ['123', 'a1b2c3']", "assert remove_uppercase(['Hello World', 'PYTHON is FUN']) == ['ello orld', ' is ']"], "challenge_test_list": []}
{"text": "Write a python function to remove all lowercase letters from a list of strings.", "code": "import re\ndef remove_lowercase(words):\n    pattern = '[a-z]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_19508eec-1209-4aa2-a9af-aed73021187d", "test_setup_code": "", "test_list": ["assert remove_lowercase(['hello', 'world']) == ['H', 'W']", "assert remove_lowercase(['Python', 'Is', 'Awesome']) == ['P', 'I', 'A']", "assert remove_lowercase(['123', '456']) == ['123', '456']", "assert remove_lowercase(['HELLO', 'WORLD']) == ['HELLO', 'WORLD']", "assert remove_lowercase(['aBcDeF', 'gHiJkL']) == ['BDF', 'HJL']", "assert remove_lowercase(['', '']) == ['', '']", "assert remove_lowercase(['a', 'b', 'c']) == ['', '', '']", "assert remove_lowercase(['A', 'B', 'C']) == ['A', 'B', 'C']", "assert remove_lowercase(['a1b2c3', 'd4e5f6']) == ['123', '456']", "assert remove_lowercase(['abcABC', 'defDEF']) == ['ABC', 'DEF']", "assert remove_lowercase(['aBc123', 'dEf456']) == ['B123', 'F456']", "assert remove_lowercase(['lowerCASE', 'UPPERcase']) == ['CASE', 'UPPER']", "assert remove_lowercase(['mixed123CASE', '123mixedCASE']) == ['123CASE', '123CASE']", "assert remove_lowercase(['', 'UPPERCASE']) == ['', 'UPPERCASE']", "assert remove_lowercase(['lowercase', 'UPPERCASE']) == ['', 'UPPERCASE']"], "challenge_test_list": []}
{"text": "Write a python function to remove all spaces from a list of strings.", "code": "import re\ndef remove_spaces(words):\n    pattern = '\\s'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_0969f055-420e-41cd-abb9-8748c250cdcf", "test_setup_code": "", "test_list": ["assert remove_spaces(['hello', 'world']) == ['hello', 'world']", "assert remove_spaces(['hello world', 'foo bar']) == ['helloworld', 'foobar']", "assert remove_spaces(['a b c', 'd e f']) == ['abc', 'def']", "assert remove_spaces(['   leading', 'trailing   ']) == ['leading', 'trailing']", "assert remove_spaces(['', '']) == ['', '']", "assert remove_spaces([' ', ' ']) == ['', '']", "assert remove_spaces(['singleword']) == ['singleword']", "assert remove_spaces(['multiple  spaces', 'in between']) == ['multiplespaces', 'inbetween']", "assert remove_spaces(['tab\tseparated', 'values']) == ['tabseparated', 'values']", "assert remove_spaces(['new\nline', 'characters']) == ['newline', 'characters']", "assert remove_spaces(['mixed \t\n spaces']) == ['mixedspaces']", "assert remove_spaces(['special!@# $%^&*() characters']) == ['special!@#$%^&*()characters']", "assert remove_spaces(['123 456', '789 0']) == ['123456', '7890']", "assert remove_spaces(['', 'non-empty']) == ['', 'non-empty']", "assert remove_spaces(['no spaces here', '']) == ['nospaceshere', '']"], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a list of strings.", "code": "import re\ndef remove_consonants(words):\n    pattern = '[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_1b60c0f6-d419-44d2-ae0e-59130ab012ab", "test_setup_code": "", "test_list": ["assert remove_consonants(['hello', 'world']) == ['eo', 'o']", "assert remove_consonants(['Python', 'is', 'fun']) == ['o', 'i', 'u']", "assert remove_consonants(['AEIOU', 'aeiou']) == ['AEIOU', 'aeiou']", "assert remove_consonants(['']) == ['']", "assert remove_consonants(['bcdfghjklmnpqrstvwxyz']) == ['']", "assert remove_consonants(['BCDFGHJKLMNPQRSTVWXYZ']) == ['']", "assert remove_consonants(['123', '456']) == ['123', '456']", "assert remove_consonants(['a1b2c3', 'd4e5f6']) == ['a1', 'e5']", "assert remove_consonants(['!@#$', '%^&*']) == ['!@#$', '%^&*']", "assert remove_consonants(['']) == ['']", "assert remove_consonants(['a', 'b', 'c', 'd', 'e']) == ['a', '', '', '', 'e']", "assert remove_consonants(['This', 'is', 'a', 'test']) == ['i', 'i', 'a', 'e']", "assert remove_consonants(['Consonants', 'should', 'be', 'removed']) == ['ooa', 'ou', 'e', 'eoe']", "assert remove_consonants(['UPPERCASE', 'lowercase']) == ['UEAE', 'oeae']", "assert remove_consonants(['Mixed', 'CASE']) == ['ie', 'AE']"], "challenge_test_list": []}
{"text": "Write a python function to remove all digits and special characters from a list of strings.", "code": "import re\ndef remove_digits_and_special_chars(words):\n    pattern = '[^a-zA-Z\\s]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_0dc5fffb-3820-46c9-8a27-a637c126c607", "test_setup_code": "", "test_list": ["assert remove_digits_and_special_chars(['hello123', 'world!']) == ['hello', 'world']", "assert remove_digits_and_special_chars(['123', '456']) == ['', '']", "assert remove_digits_and_special_chars(['!@#$', '%^&*']) == ['', '']", "assert remove_digits_and_special_chars(['abc123', 'def456']) == ['abc', 'def']", "assert remove_digits_and_special_chars(['a1b2c3', 'd4e5f6']) == ['abc', 'def']", "assert remove_digits_and_special_chars(['', '']) == ['', '']", "assert remove_digits_and_special_chars(['no_digits', 'no_special_chars']) == ['no_digits', 'no_special_chars']", "assert remove_digits_and_special_chars(['123abc!', '456def@']) == ['abc', 'def']", "assert remove_digits_and_special_chars(['hello world', 'python3.8']) == ['hello world', 'python']", "assert remove_digits_and_special_chars(['a!b@c#', 'd$e%f^']) == ['abc', 'def']", "assert remove_digits_and_special_chars(['spaces and tabs\t', 'newline\ncharacters']) == ['spaces and tabs\t', 'newline\ncharacters']", "assert remove_digits_and_special_chars(['UPPERCASE123', 'lowercase456']) == ['UPPERCASE', 'lowercase']", "assert remove_digits_and_special_chars(['mix3dCASE!', 'CaSe@123']) == ['mixdCASE', 'CaSe']", "assert remove_digits_and_special_chars(['special$$$characters###', 'digits123456']) == ['specialcharacters', 'digits']", "assert remove_digits_and_special_chars(['multiple words 123', 'with special!@#']) == ['multiple words ', 'with special']"], "challenge_test_list": []}
{"text": "Write a python function to remove all non-alphanumeric characters from a list of strings.", "code": "import re\ndef remove_non_alphanumeric(words):\n    pattern = '[^a-zA-Z0-9]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_69f8d2bb-fe1b-4ed0-ad27-4b91879cd053", "test_setup_code": "", "test_list": ["assert remove_non_alphanumeric(['hello', 'world!']) == ['hello', 'world']", "assert remove_non_alphanumeric(['123', 'abc', 'a1b2c3']) == ['123', 'abc', 'a1b2c3']", "assert remove_non_alphanumeric(['@#$%', 'test123', '']) == ['', 'test123', '']", "assert remove_non_alphanumeric(['spaces ', ' and', ' tabs\t']) == ['spaces', 'and', 'tabs']", "assert remove_non_alphanumeric(['newline\n', 'carriage\r', 'return\r\n']) == ['newline', 'carriage', 'return']", "assert remove_non_alphanumeric(['special&*^%$#@!']) == ['special']", "assert remove_non_alphanumeric(['UPPERCASE', 'lowercase']) == ['UPPERCASE', 'lowercase']", "assert remove_non_alphanumeric(['1234567890', '0987654321']) == ['1234567890', '0987654321']", "assert remove_non_alphanumeric(['mixed123', '456case']) == ['mixed123', '456case']", "assert remove_non_alphanumeric(['', '']) == ['', '']", "assert remove_non_alphanumeric(['only symbols: !@#$%^&*()']) == ['onlysymbols']", "assert remove_non_alphanumeric(['a!b@c#d$e%f^g&h*i(j)k']) == ['abcdefghijk']", "assert remove_non_alphanumeric(['  spaces  ']) == ['spaces']", "assert remove_non_alphanumeric(['dash-separated', 'words']) == ['dashseparated', 'words']", "assert remove_non_alphanumeric(['underscore_separated', 'words']) == ['underscoreseparated', 'words']"], "challenge_test_list": []}
{"text": "Write a python function to remove all non-ASCII characters from a list of strings.", "code": "import re\ndef remove_non_ascii(words):\n    pattern = '[^\\x00-\\x7F]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_b838c8df-d57c-4895-a3dd-4f26fa868fcd", "test_setup_code": "", "test_list": ["assert remove_non_ascii(['hello', 'world']) == ['hello', 'world']", "assert remove_non_ascii(['h\u00e9llo', 'w\u00f8rld']) == ['hllo', 'wrld']", "assert remove_non_ascii(['', '']) == ['', '']", "assert remove_non_ascii(['123', '456']) == ['123', '456']", "assert remove_non_ascii(['h\u00e9llo123', 'w\u00f8rld456']) == ['hllo123', 'wrld456']", "assert remove_non_ascii(['h\u00e9llo!@#', 'w\u00f8rld$%^']) == ['hllo!@#', 'wrld$%^']", "assert remove_non_ascii(['\u3053\u3093\u306b\u3061\u306f', '\u4e16\u754c']) == ['', '']", "assert remove_non_ascii(['hello', '']) == ['hello', '']", "assert remove_non_ascii(['', 'world']) == ['', 'world']", "assert remove_non_ascii(['h\u00e9llo', '']) == ['hllo', '']", "assert remove_non_ascii(['', 'w\u00f8rld']) == ['', 'wrld']", "assert remove_non_ascii(['h\u00e9llo', 'w\u00f8rld', '\u3053\u3093\u306b\u3061\u306f']) == ['hllo', 'wrld', '']", "assert remove_non_ascii(['h\u00e9llo123', 'w\u00f8rld456', '\u3053\u3093\u306b\u3061\u306f789']) == ['hllo123', 'wrld456', '789']", "assert remove_non_ascii(['h\u00e9llo!@#', 'w\u00f8rld$%^', '\u3053\u3093\u306b\u3061\u306f&*()']) == ['hllo!@#', 'wrld$%^', '&*()']", "assert remove_non_ascii(['h\u00e9llo', 'w\u00f8rld', 'hello', 'world']) == ['hllo', 'wrld', 'hello', 'world']"], "challenge_test_list": []}
{"text": "Write a function to check if all elements in each tuple of the given list are equal to K.", "code": "def check_all_elements_equal(test_list, K):\n    for tup in test_list:\n        if not all(ele == K for ele in tup):\n            return False\n    return True", "task_id": "26_63f1f5d7-147d-4b57-86fe-55324332b0ab", "test_setup_code": "", "test_list": ["assert check_all_elements_equal([(1, 1, 1), (1, 1)], 1) == True", "assert check_all_elements_equal([(2, 2, 2), (2, 2)], 2) == True", "assert check_all_elements_equal([(1, 1, 1), (1, 1, 2)], 1) == False", "assert check_all_elements_equal([(0, 0, 0), (0, 0)], 0) == True", "assert check_all_elements_equal([(5, 5, 5), (5, 5, 5)], 5) == True", "assert check_all_elements_equal([(3, 3, 3), (3, 3, 4)], 3) == False", "assert check_all_elements_equal([(1, 1, 1), (1, 1, 1, 1)], 1) == True", "assert check_all_elements_equal([(1, 1, 1), (1, 1, 1, 1)], 2) == False", "assert check_all_elements_equal([], 1) == True", "assert check_all_elements_equal([(1, 1, 1), (1, 1, 1)], 0) == False", "assert check_all_elements_equal([(1,)], 1) == True", "assert check_all_elements_equal([(1, 1), (1, 1), (1, 1)], 1) == True", "assert check_all_elements_equal([(1, 1), (1, 2)], 1) == False", "assert check_all_elements_equal([(2, 2, 2), (2, 2, 2)], 2) == True", "assert check_all_elements_equal([(3, 3, 3), (3, 3, 3)], 4) == False"], "challenge_test_list": []}
{"text": "Write a function to check if any element in any tuple of the given list is equal to K.", "code": "def check_any_element_equal(test_list, K):\n    for tup in test_list:\n        if any(ele == K for ele in tup):\n            return True\n    return False", "task_id": "26_8714f78e-df25-41d6-b836-579ec02ede33", "test_setup_code": "", "test_list": ["assert check_any_element_equal([(1, 2, 3), (4, 5, 6)], 5) == True", "assert check_any_element_equal([(1, 2, 3), (4, 5, 6)], 7) == False", "assert check_any_element_equal([(1, 2), (3, 4)], 3) == True", "assert check_any_element_equal([(1, 2), (3, 4)], 0) == False", "assert check_any_element_equal([(1, 2, 3)], 3) == True", "assert check_any_element_equal([(1, 2, 3)], 4) == False", "assert check_any_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == True", "assert check_any_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == False", "assert check_any_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == True", "assert check_any_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9) == True", "assert check_any_element_equal([(1, 2), (3, 4), (5, 6)], 6) == True", "assert check_any_element_equal([(1, 2), (3, 4), (5, 6)], 7) == False", "assert check_any_element_equal([(1,)], 1) == True", "assert check_any_element_equal([(1,)], 2) == False", "assert check_any_element_equal([], 1) == False"], "challenge_test_list": []}
{"text": "Write a function to count the number of tuples in the given list that contain the element K.", "code": "def count_tuples_with_k(test_list, K):\n    count = 0\n    for tup in test_list:\n        if K in tup:\n            count += 1\n    return count", "task_id": "26_20f16b41-01de-4bc4-ac0c-9329e5e05022", "test_setup_code": "", "test_list": ["assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 5) == 1", "assert count_tuples_with_k([(1, 2), (3, 4), (5, 6)], 7) == 0", "assert count_tuples_with_k([(1, 2), (2, 3), (3, 4)], 2) == 2", "assert count_tuples_with_k([(1,), (2,), (3,)], 1) == 1", "assert count_tuples_with_k([(1, 2, 3), (1, 2, 3), (1, 2, 3)], 3) == 3", "assert count_tuples_with_k([], 1) == 0", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 10) == 0", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 1) == 1", "assert count_tuples_with_k([(1, 2, 3), (1, 2, 3), (1, 2, 3)], 2) == 3", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 7) == 1", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == 1", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 4) == 1", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6) == 1", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == 1", "assert count_tuples_with_k([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9) == 1"], "challenge_test_list": []}
{"text": "Write a function to check if no elements in any tuple of the given list are equal to K.", "code": "def check_no_elements_equal(test_list, K):\n    for tup in test_list:\n        if any(ele == K for ele in tup):\n            return False\n    return True", "task_id": "26_b6bf527d-28b3-471b-8042-54a7c2407991", "test_setup_code": "", "test_list": ["assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 7) == True", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 5) == False", "assert check_no_elements_equal([(0, 0, 0), (0, 0, 0)], 0) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 0) == True", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 1) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 6) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 3) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 4) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 2) == False", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], 8) == True", "assert check_no_elements_equal([(1, 2, 3), (4, 5, 6)], -1) == True", "assert check_no_elements_equal([], 1) == True", "assert check_no_elements_equal([(1, 2), (3, 4), (5, 6)], 5) == False", "assert check_no_elements_equal([(1, 2), (3, 4), (5, 6)], 7) == True", "assert check_no_elements_equal([(1, 2), (3, 4), (5, 6)], 0) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the first element of each tuple in the given list is equal to K.", "code": "def check_first_element_equal(test_list, K):\n    for tup in test_list:\n        if tup[0] != K:\n            return False\n    return True", "task_id": "26_68a5aadd-05f5-4b8e-a2eb-2da553597bbf", "test_setup_code": "", "test_list": ["assert check_first_element_equal([(1, 2), (1, 3), (1, 4)], 1) == True", "assert check_first_element_equal([(2, 2), (2, 3), (2, 4)], 2) == True", "assert check_first_element_equal([(1, 2), (2, 3), (1, 4)], 1) == False", "assert check_first_element_equal([(3, 2), (3, 3), (3, 4)], 3) == True", "assert check_first_element_equal([(4, 2), (4, 3), (4, 4)], 4) == True", "assert check_first_element_equal([(5, 2), (5, 3), (6, 4)], 5) == False", "assert check_first_element_equal([(7, 2), (7, 3), (7, 4)], 7) == True", "assert check_first_element_equal([(8, 2), (9, 3), (8, 4)], 8) == False", "assert check_first_element_equal([(10, 2), (10, 3), (10, 4)], 10) == True", "assert check_first_element_equal([(11, 2), (11, 3), (12, 4)], 11) == False", "assert check_first_element_equal([(13, 2), (13, 3), (13, 4)], 13) == True", "assert check_first_element_equal([(14, 2)], 14) == True", "assert check_first_element_equal([(15, 2)], 16) == False", "assert check_first_element_equal([], 17) == True", "assert check_first_element_equal([(18, 2), (18, 3), (18, 4)], 18) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the last element of each tuple in the given list is equal to K.", "code": "def check_last_element_equal(test_list, K):\n    for tup in test_list:\n        if tup[-1] != K:\n            return False\n    return True", "task_id": "26_a62cb2e9-5937-4875-9731-c0cbcd8b2a92", "test_setup_code": "", "test_list": ["assert check_last_element_equal([(1, 2, 3), (4, 5, 3), (6, 7, 3)], 3) == True", "assert check_last_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == False", "assert check_last_element_equal([(1, 2, 3)], 3) == True", "assert check_last_element_equal([(1, 2, 3)], 4) == False", "assert check_last_element_equal([], 3) == True", "assert check_last_element_equal([(1,)], 1) == True", "assert check_last_element_equal([(1,), (2,), (3,)], 3) == True", "assert check_last_element_equal([(1,), (2,), (3,)], 2) == False", "assert check_last_element_equal([(1, 2, 3), (4, 5, 3), (6, 7, 8)], 3) == False", "assert check_last_element_equal([(1, 2, 2), (3, 4, 2), (5, 6, 2)], 2) == True", "assert check_last_element_equal([(1, 2, 3), (4, 5, 3), (6, 7, 3)], 2) == False", "assert check_last_element_equal([(1, 2, 3), (4, 5, 3), (6, 7, 3)], 7) == False", "assert check_last_element_equal([(1, 2, 3), (4, 5, 3), (6, 7, 3)], 0) == False", "assert check_last_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9) == True", "assert check_last_element_equal([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 6) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all tuples in the given list have the specified length.", "code": "def check_length_of_tuples(test_list, length):\n    for tup in test_list:\n        if len(tup) != length:\n            return False\n    return True", "task_id": "26_0428f6a1-9ba5-4232-bace-4191f20ac116", "test_setup_code": "", "test_list": ["assert check_length_of_tuples([(1, 2), (3, 4)], 2) == True", "assert check_length_of_tuples([(1, 2), (3, 4, 5)], 2) == False", "assert check_length_of_tuples([], 2) == True", "assert check_length_of_tuples([(1,)], 1) == True", "assert check_length_of_tuples([(1, 2), (3, 4), (5, 6)], 2) == True", "assert check_length_of_tuples([(1, 2), (3, 4), (5,)], 2) == False", "assert check_length_of_tuples([(1, 2, 3), (4, 5, 6)], 3) == True", "assert check_length_of_tuples([(1, 2, 3), (4, 5)], 3) == False", "assert check_length_of_tuples([(1, 2, 3, 4)], 4) == True", "assert check_length_of_tuples([(1, 2, 3, 4)], 3) == False", "assert check_length_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == True", "assert check_length_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8)], 3) == False", "assert check_length_of_tuples([(1, 2)], 2) == True", "assert check_length_of_tuples([(1, 2)], 1) == False", "assert check_length_of_tuples([(1, 2, 3, 4, 5)], 5) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the sum of elements in each tuple of the given list is equal to S.", "code": "def check_sum_of_elements(test_list, S):\n    for tup in test_list:\n        if sum(tup) != S:\n            return False\n    return True", "task_id": "26_f25b540a-ef49-4f99-9730-219e8b30bc68", "test_setup_code": "", "test_list": ["assert check_sum_of_elements([(1, 2, 3), (4, 1)], 6) == True", "assert check_sum_of_elements([(1, 2, 3), (4, 2)], 6) == False", "assert check_sum_of_elements([(0, 0, 0), (0, 0)], 0) == True", "assert check_sum_of_elements([(1, -1, 0), (2, -2)], 0) == True", "assert check_sum_of_elements([(1, 1, 1), (2, 2)], 3) == False", "assert check_sum_of_elements([(3, 3), (2, 4)], 6) == True", "assert check_sum_of_elements([(1, 2, 3), (1, 2, 3)], 6) == True", "assert check_sum_of_elements([(1, 2, 3), (1, 2, 4)], 6) == False", "assert check_sum_of_elements([(1, 2, 3, 4), (10, 0)], 10) == True", "assert check_sum_of_elements([(1, 2, 3, 4), (10, 1)], 10) == False", "assert check_sum_of_elements([(5, 5), (5, 5)], 10) == True", "assert check_sum_of_elements([(5, 5), (5, 4)], 10) == False", "assert check_sum_of_elements([(1, 1, 1, 1, 1, 1)], 6) == True", "assert check_sum_of_elements([(1, 1, 1, 1, 1, 1)], 5) == False", "assert check_sum_of_elements([(10, -10), (0, 0)], 0) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the product of elements in each tuple of the given list is equal to P.", "code": "def check_product_of_elements(test_list, P):\n    for tup in test_list:\n        product = 1\n        for ele in tup:\n            product *= ele\n        if product != P:\n            return False\n    return True", "task_id": "26_18ce2ad2-8a2d-4b04-a331-2ef1c0732a12", "test_setup_code": "", "test_list": ["assert check_product_of_elements([(1, 2, 3), (4, 5)], 6) == False", "assert check_product_of_elements([(1, 2, 3)], 6) == True", "assert check_product_of_elements([(1, 2, 3), (2, 3)], 6) == False", "assert check_product_of_elements([(1, 2, 3), (1, 6)], 6) == True", "assert check_product_of_elements([(1, 1, 1), (1, 1, 1)], 1) == True", "assert check_product_of_elements([(1, 1, 1), (1, 1, 2)], 1) == False", "assert check_product_of_elements([(0, 1, 2)], 0) == True", "assert check_product_of_elements([(0, 1, 2), (1, 2, 3)], 0) == False", "assert check_product_of_elements([(2, 3, 4)], 24) == True", "assert check_product_of_elements([(2, 3, 4), (1, 2, 12)], 24) == True", "assert check_product_of_elements([(2, 3, 4), (1, 2, 12)], 12) == False", "assert check_product_of_elements([(1,)], 1) == True", "assert check_product_of_elements([(1,), (1,)], 1) == True", "assert check_product_of_elements([(1,), (2,)], 1) == False", "assert check_product_of_elements([(1, 2, 3), (4, 5)], 1) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all elements in each tuple of the given list are greater than K.", "code": "def check_all_elements_greater(test_list, K):\n    for tup in test_list:\n        if not all(ele > K for ele in tup):\n            return False\n    return True", "task_id": "26_7673baf1-304b-4e82-a1b9-8c8d85dddac2", "test_setup_code": "", "test_list": ["assert check_all_elements_greater([(5, 6, 7), (8, 9, 10)], 4) == True", "assert check_all_elements_greater([(5, 6, 7), (8, 9, 10)], 6) == False", "assert check_all_elements_greater([(5, 6, 7), (8, 9, 10)], 10) == False", "assert check_all_elements_greater([(5, 6, 7), (8, 9, 10)], 0) == True", "assert check_all_elements_greater([(0, 1, 2), (3, 4, 5)], 3) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring an odd number of times in a list of integers.", "code": "def find_odd_occurrence(nums):\n    for num in nums:\n        if nums.count(num) % 2 != 0:\n            return num\n    return -1", "task_id": "29_37693342-2003-4d61-9947-3a98587d82b7", "test_setup_code": "", "test_list": ["assert find_odd_occurrence([1, 2, 3, 2, 3, 1, 3]) == 3", "assert find_odd_occurrence([4, 4, 4, 4, 4]) == 4", "assert find_odd_occurrence([10, 20, 20, 10, 10]) == 10", "assert find_odd_occurrence([5, 7, 5, 7, 5, 7, 7]) == 7", "assert find_odd_occurrence([1, 1, 2, 2, 3, 3, 4]) == 4", "assert find_odd_occurrence([9, 8, 7, 8, 9, 7, 7]) == 7", "assert find_odd_occurrence([1]) == 1", "assert find_odd_occurrence([2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6", "assert find_odd_occurrence([0, 0, 0, 1, 1, 1, 2, 2, 2]) == 0", "assert find_odd_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert find_odd_occurrence([100, 200, 300, 400, 500, 100, 200, 300, 400]) == 500", "assert find_odd_occurrence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]) == 11", "assert find_odd_occurrence([1, 2, 3, 1, 2, 3, 1, 2, 3, 4]) == 4", "assert find_odd_occurrence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21]) == 21", "assert find_odd_occurrence([1, 2, 1, 2, 1, 2, 1, 2, 3]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring an even number of times in a list of integers.", "code": "def find_even_occurrence(nums):\n    for num in nums:\n        if nums.count(num) % 2 == 0:\n            return num\n    return -1", "task_id": "29_adb66afb-95ae-4a51-86bf-7b3a124eff5f", "test_setup_code": "", "test_list": ["assert find_even_occurrence([1, 2, 3, 2, 3, 1, 3, 3]) == 2", "assert find_even_occurrence([4, 5, 6, 7, 8, 4, 6, 8, 5, 7, 7]) == 4", "assert find_even_occurrence([10, 20, 30, 20, 10, 30, 30]) == 20", "assert find_even_occurrence([1, 1, 2, 2, 3, 3]) == 1", "assert find_even_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_even_occurrence([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 20]) == 20", "assert find_even_occurrence([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3]) == 1", "assert find_even_occurrence([5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert find_even_occurrence([7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12]) == 7", "assert find_even_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert find_even_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20]) == 20", "assert find_even_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == -1", "assert find_even_occurrence([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 1", "assert find_even_occurrence([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 2", "assert find_even_occurrence([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the first unique element in a list of integers.", "code": "def find_unique(nums):\n    for num in nums:\n        if nums.count(num) == 1:\n            return num\n    return -1", "task_id": "29_c60606f2-9688-4939-a9df-b59250dfb38a", "test_setup_code": "", "test_list": ["assert find_unique([1, 2, 2, 3, 3, 4, 4]) == 1", "assert find_unique([4, 5, 5, 4, 6, 7, 7]) == 6", "assert find_unique([1, 1, 2, 2, 3, 3, 4]) == 4", "assert find_unique([10, 20, 20, 30, 30, 40, 40, 50]) == 10", "assert find_unique([1, 1, 1, 1, 1, 1, 1]) == -1", "assert find_unique([2, 3, 4, 2, 3, 4, 5]) == 5", "assert find_unique([1]) == 1", "assert find_unique([]) == -1", "assert find_unique([0, 0, 0, 0, 0, 0, 1]) == 1", "assert find_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert find_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_unique([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == -1", "assert find_unique([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11]) == 11", "assert find_unique([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]) == 1", "assert find_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-unique element in a list of integers.", "code": "def find_non_unique(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n    return -1", "task_id": "29_b23ebe06-559f-45b8-a522-eb4d7084ee74", "test_setup_code": "", "test_list": ["assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 2]) == 2", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_non_unique([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1", "assert find_non_unique([5, 5, 5, 5, 5]) == 5", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]) == 0", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 3]) == 3", "assert find_non_unique([]) == -1", "assert find_non_unique([1]) == -1", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 1, 2]) == 1", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 9", "assert find_non_unique([1, 2, 3, 4, 4, 5, 6, 7, 8, 9]) == 4", "assert find_non_unique([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]) == 10", "assert find_non_unique([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_non_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated element in a list of integers.", "code": "def find_first_repeated(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "29_446b299b-9773-48db-8959-fe9931a04152", "test_setup_code": "", "test_list": ["assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1", "assert find_first_repeated([5, 3, 4, 2, 5, 7, 8, 9, 10]) == 5", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1", "assert find_first_repeated([1, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_first_repeated([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 10]) == 10", "assert find_first_repeated([1, 2, 3, 2, 4, 5, 6, 7, 8, 9]) == 2", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 3]) == 3", "assert find_first_repeated([1, 2, 3, 4, 5, 1, 6, 7, 8, 9]) == 1", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 9", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 8, 8, 9]) == 8", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 7, 7, 8, 9]) == 7", "assert find_first_repeated([1, 2, 3, 4, 5, 6, 6, 7, 8, 9]) == 6", "assert find_first_repeated([1, 2, 3, 4, 5, 5, 6, 7, 8, 9]) == 5", "assert find_first_repeated([1, 2, 3, 4, 4, 5, 6, 7, 8, 9]) == 4", "assert find_first_repeated([1, 2, 3, 3, 4, 5, 6, 7, 8, 9]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated element in a list of integers.", "code": "def find_first_non_repeated(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    for num in nums:\n        if count[num] == 1:\n            return num\n    return -1", "task_id": "29_8c464436-12b3-4b19-9d93-92a50ba735e2", "test_setup_code": "", "test_list": ["assert find_first_non_repeated([1, 2, 2, 3, 3, 4, 4, 5]) == 1", "assert find_first_non_repeated([4, 5, 1, 2, 0, 4]) == 5", "assert find_first_non_repeated([1, 1, 1, 1, 1, 1, 2]) == 2", "assert find_first_non_repeated([7, 7, 8, 8, 9, 9, 10]) == 10", "assert find_first_non_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_first_non_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8]) == 9", "assert find_first_non_repeated([1]) == 1", "assert find_first_non_repeated([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == -1", "assert find_first_non_repeated([]) == -1", "assert find_first_non_repeated([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == 6", "assert find_first_non_repeated([10, 20, 30, 40, 50, 10, 20, 30, 40]) == 50", "assert find_first_non_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1", "assert find_first_non_repeated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert find_first_non_repeated([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == 10", "assert find_first_non_repeated([5, 4, 3, 2, 1, 5, 4, 3, 2]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the majority element in a list of integers. The majority element is the element that appears more than n/2 times.", "code": "def find_majority_element(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > len(nums) // 2:\n            return num\n    return -1", "task_id": "29_ee9631d0-d856-40cb-98e7-7dd22340831e", "test_setup_code": "", "test_list": ["assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4", "assert find_majority_element([2, 2, 1, 1, 1, 2, 2]) == 2", "assert find_majority_element([1]) == 1", "assert find_majority_element([1, 1, 1, 2, 2, 2, 2]) == 2", "assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4]) == -1", "assert find_majority_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_majority_element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert find_majority_element([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 1]) == 1", "assert find_majority_element([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1]) == 2", "assert find_majority_element([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert find_majority_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1, 1, 1]) == 1", "assert find_majority_element([1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 1, 1]) == 1", "assert find_majority_element([1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert find_majority_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == -1", "assert find_majority_element([10, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the most frequent element in a list of integers.", "code": "def find_most_frequent(nums):\n    count = {}\n    max_count = 0\n    most_frequent = -1\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > max_count:\n            max_count = count[num]\n            most_frequent = num\n    return most_frequent", "task_id": "29_a534f392-19b6-4de8-9e5b-6cf952a53bbd", "test_setup_code": "", "test_list": ["assert find_most_frequent([1, 3, 3, 2, 1, 3]) == 3", "assert find_most_frequent([1, 1, 1, 1, 1]) == 1", "assert find_most_frequent([5, 5, 5, 3, 3, 3, 2, 2, 2, 2]) == 2", "assert find_most_frequent([10, 20, 10, 20, 30, 30, 30]) == 30", "assert find_most_frequent([7, 8, 9, 7, 8, 7]) == 7", "assert find_most_frequent([1]) == 1", "assert find_most_frequent([]) == -1", "assert find_most_frequent([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert find_most_frequent([2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 6]) == 6", "assert find_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1", "assert find_most_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4", "assert find_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1, 1]) == 1", "assert find_most_frequent([100, 200, 300, 100, 200, 300, 100]) == 100", "assert find_most_frequent([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]) == 0", "assert find_most_frequent([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 9]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the least frequent element in a list of integers.", "code": "def find_least_frequent(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    min_count = float('inf')\n    least_frequent = -1\n    for num in count:\n        if count[num] < min_count:\n            min_count = count[num]\n            least_frequent = num\n    return least_frequent", "task_id": "29_797dc4f8-af39-45c0-b609-ec397a805800", "test_setup_code": "", "test_list": ["assert find_least_frequent([1, 2, 2, 3, 3, 3]) == 1", "assert find_least_frequent([4, 4, 4, 4, 4]) == 4", "assert find_least_frequent([1, 2, 3, 4, 5]) == 1", "assert find_least_frequent([5, 5, 5, 6, 6, 7, 7, 7, 8, 8, 8, 8]) == 6", "assert find_least_frequent([1, 1, 2, 2, 3, 3, 4]) == 4", "assert find_least_frequent([10]) == 10", "assert find_least_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 1", "assert find_least_frequent([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6]) == 6", "assert find_least_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == 1", "assert find_least_frequent([7, 7, 8, 8, 8, 9, 9, 9, 9]) == 7", "assert find_least_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6]) == 1", "assert find_least_frequent([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9]) == 9", "assert find_least_frequent([]) == -1", "assert find_least_frequent([1, 1, 1, 1, 2, 2, 2, 3, 3, 4]) == 4", "assert find_least_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the second most frequent element in a list of integers.", "code": "def find_second_most_frequent(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    if len(sorted_count) > 1:\n        return sorted_count[1][0]\n    return -1", "task_id": "29_61a8111b-068e-42f3-b598-af26d5e25020", "test_setup_code": "", "test_list": ["assert find_second_most_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3", "assert find_second_most_frequent([1, 1, 2, 2, 3, 3, 4, 4]) == 3", "assert find_second_most_frequent([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3", "assert find_second_most_frequent([1, 1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) == 2", "assert find_second_most_frequent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert find_second_most_frequent([1]) == -1", "assert find_second_most_frequent([]) == -1", "assert find_second_most_frequent([1, 2, 2, 3, 3, 3]) == 2", "assert find_second_most_frequent([4, 4, 4, 4, 4, 4, 4, 4]) == -1", "assert find_second_most_frequent([1, 2, 3, 4, 5, 5, 5, 6, 6, 6, 6]) == 5", "assert find_second_most_frequent([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == 4", "assert find_second_most_frequent([1, 1, 2, 2, 2, 3, 3, 3, 3]) == 2", "assert find_second_most_frequent([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 3", "assert find_second_most_frequent([1, 1, 2, 2, 3, 3, 4, 4, 4]) == 3", "assert find_second_most_frequent([1, 2, 2, 3, 3, 4, 4, 4, 4]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime factors of a given number.", "code": "import math\ndef sum_of_primes(n):\n    sumPrimes = 0\n    while n % 2 == 0:\n        sumPrimes += 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            sumPrimes += i\n            n = n / i\n    if n > 2:\n        sumPrimes += n\n    return int(sumPrimes)", "task_id": "32_22f2e069-29b1-486b-b9b2-d7a99c5e6810", "test_setup_code": "", "test_list": ["assert sum_of_primes(28) == 10", "assert sum_of_primes(1) == 0", "assert sum_of_primes(2) == 2", "assert sum_of_primes(100) == 14"], "challenge_test_list": []}
{"text": "Write a python function to count the number of distinct prime factors of a given number.", "code": "import math\ndef count_prime_factors(n):\n    count = 0\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n / i\n    if n > 2:\n        count += 1\n    return count", "task_id": "32_363db79a-0806-41e6-96f4-727fada0ffef", "test_setup_code": "", "test_list": ["assert count_prime_factors(28) == 2", "assert count_prime_factors(1) == 0", "assert count_prime_factors(2) == 1", "assert count_prime_factors(30) == 3"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "task_id": "32_07b5bb80-2e26-408d-b8f8-f6957cae524f", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(97) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the next prime number greater than a given number.", "code": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef next_prime(n):\n    prime = n\n    found = False\n    while not found:\n        prime += 1\n        if is_prime(prime):\n            found = True\n    return prime", "task_id": "32_d8fe6375-0c07-47a0-a895-302af8296c11", "test_setup_code": "", "test_list": ["assert next_prime(10) == 11", "assert next_prime(29) == 31", "assert next_prime(1) == 2", "assert next_prime(100) == 101"], "challenge_test_list": []}
{"text": "Write a python function to find all prime factors of a given number.", "code": "import math\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 2:\n        factors.append(n)\n    return factors", "task_id": "32_9d41b8b6-994d-4893-b34d-eb44d62dd9ca", "test_setup_code": "", "test_list": ["assert prime_factors(1) == []", "assert prime_factors(2) == [2]", "assert prime_factors(3) == [3]", "assert prime_factors(4) == [2, 2]", "assert prime_factors(5) == [5]", "assert prime_factors(6) == [2, 3]", "assert prime_factors(7) == [7]", "assert prime_factors(8) == [2, 2, 2]", "assert prime_factors(9) == [3, 3]", "assert prime_factors(10) == [2, 5]", "assert prime_factors(11) == [11]", "assert prime_factors(12) == [2, 2, 3]", "assert prime_factors(13) == [13]", "assert prime_factors(14) == [2, 7]", "assert prime_factors(15) == [3, 5]"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a perfect square.", "code": "import math\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return n == root * root", "task_id": "32_855ffd77-00be-4429-a1ea-225b8d707bba", "test_setup_code": "", "test_list": ["assert is_perfect_square(16) == True", "assert is_perfect_square(15) == False", "assert is_perfect_square(0) == True", "assert is_perfect_square(-4) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "32_20f6067d-4448-456b-bc6a-3c1f00e796a7", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(17, 0) == 17"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)", "task_id": "32_42e0df48-87b4-4335-af8a-55ceb7406a34", "test_setup_code": "", "test_list": ["assert lcm(12, 18) == 36", "assert lcm(7, 5) == 35", "assert lcm(0, 10) == 0", "assert lcm(21, 6) == 42"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a Fibonacci number.", "code": "import math\ndef is_perfect_square(x):\n    s = int(math.sqrt(x))\n    return s * s == x\n\ndef is_fibonacci(n):\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)", "task_id": "32_47296c64-c21a-4b02-9f8e-cebef08e0fec", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == True", "assert is_fibonacci(1) == True", "assert is_fibonacci(4) == False", "assert is_fibonacci(21) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number.", "code": "def sum_of_divisors(n):\n    sumDiv = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sumDiv += i\n    return sumDiv", "task_id": "32_251240c8-eaa8-4e9b-b110-ba33db2934ce", "test_setup_code": "", "test_list": ["assert sum_of_divisors(1) == 1", "assert sum_of_divisors(6) == 12", "assert sum_of_divisors(28) == 56", "assert sum_of_divisors(100) == 217"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a vowel.", "code": "def is_vowel(c):\n    return c in 'aeiouAEIOU'\n\ndef count_vowel_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_vowel(s[i]) and is_vowel(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_0be66dc3-666b-4957-b271-5356e292b189", "test_setup_code": "", "test_list": ["assert count_vowel_substrings('aeiou') == 15", "assert count_vowel_substrings('abcde') == 3", "assert count_vowel_substrings('hello') == 2", "assert count_vowel_substrings('world') == 0", "assert count_vowel_substrings('a') == 1", "assert count_vowel_substrings('') == 0", "assert count_vowel_substrings('ae') == 1", "assert count_vowel_substrings('aeae') == 6", "assert count_vowel_substrings('aeiouaeiou') == 45", "assert count_vowel_substrings('bcd') == 0", "assert count_vowel_substrings('aebcde') == 4", "assert count_vowel_substrings('aeioubcd') == 15", "assert count_vowel_substrings('AEIOU') == 15", "assert count_vowel_substrings('AEIOUaeiou') == 45", "assert count_vowel_substrings('aEiOu') == 15"], "challenge_test_list": []}
{"text": "Write a python function to count all the palindromic substrings.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef count_palindromic_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_palindrome(s[i:i+j]):\n                result += 1\n    return result", "task_id": "30_8142625a-4478-4f5c-8e57-a394ae1e3b52", "test_setup_code": "", "test_list": ["assert count_palindromic_substrings('') == 0", "assert count_palindromic_substrings('a') == 1", "assert count_palindromic_substrings('aa') == 3", "assert count_palindromic_substrings('ab') == 2", "assert count_palindromic_substrings('aba') == 4", "assert count_palindromic_substrings('abba') == 6", "assert count_palindromic_substrings('abc') == 3", "assert count_palindromic_substrings('racecar') == 10", "assert count_palindromic_substrings('aabb') == 6", "assert count_palindromic_substrings('abcba') == 7", "assert count_palindromic_substrings('abcdedcba') == 9", "assert count_palindromic_substrings('a'*10) == 55", "assert count_palindromic_substrings('abacdfgdcaba') == 7", "assert count_palindromic_substrings('noon') == 6", "assert count_palindromic_substrings('level') == 7"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an even digit.", "code": "def is_even_digit(c):\n    return c in '02468'\n\ndef count_even_digit_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_even_digit(s[i]) and is_even_digit(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_5f59edc0-c270-4cc6-a674-ff12c1a8579a", "test_setup_code": "", "test_list": ["assert count_even_digit_substrings('123456') == 6", "assert count_even_digit_substrings('2468') == 10", "assert count_even_digit_substrings('1357') == 0", "assert count_even_digit_substrings('') == 0", "assert count_even_digit_substrings('2') == 1", "assert count_even_digit_substrings('22') == 3", "assert count_even_digit_substrings('222') == 6", "assert count_even_digit_substrings('202') == 5", "assert count_even_digit_substrings('2002') == 10", "assert count_even_digit_substrings('204060') == 15", "assert count_even_digit_substrings('1234567890') == 15", "assert count_even_digit_substrings('0000') == 10", "assert count_even_digit_substrings('102030405060708090') == 45", "assert count_even_digit_substrings('111222333444') == 21", "assert count_even_digit_substrings('8642086420') == 28"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c.lower() not in 'aeiou'\n\ndef count_consonant_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_consonant(s[i]) and is_consonant(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_bbfc657b-122a-4959-8b6a-454e254aab0b", "test_setup_code": "", "test_list": ["assert count_consonant_substrings('hello') == 6", "assert count_consonant_substrings('abc') == 1", "assert count_consonant_substrings('xyz') == 6", "assert count_consonant_substrings('aeiou') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a digit.", "code": "def is_digit(c):\n    return c.isdigit()\n\ndef count_digit_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_digit(s[i]) and is_digit(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_1a95a325-db7f-4f69-99d5-fa1bfaa03fed", "test_setup_code": "", "test_list": ["assert count_digit_substrings('a1b2c3') == 3", "assert count_digit_substrings('12345') == 15", "assert count_digit_substrings('abc') == 0", "assert count_digit_substrings('1a2b3c4d5') == 10"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an uppercase letter.", "code": "def is_uppercase(c):\n    return c.isupper()\n\ndef count_uppercase_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_uppercase(s[i]) and is_uppercase(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_214d9873-9672-45b0-802f-e96a8496b93d", "test_setup_code": "", "test_list": ["assert count_uppercase_substrings('A') == 1", "assert count_uppercase_substrings('AB') == 1", "assert count_uppercase_substrings('AaB') == 2", "assert count_uppercase_substrings('AaBbCc') == 3", "assert count_uppercase_substrings('ABC') == 6", "assert count_uppercase_substrings('aBC') == 3", "assert count_uppercase_substrings('ABcD') == 4", "assert count_uppercase_substrings('AaaB') == 2", "assert count_uppercase_substrings('') == 0", "assert count_uppercase_substrings('a') == 0", "assert count_uppercase_substrings('aA') == 0", "assert count_uppercase_substrings('Aa') == 0", "assert count_uppercase_substrings('AaAa') == 4", "assert count_uppercase_substrings('AaAaA') == 6", "assert count_uppercase_substrings('AaAaAa') == 9"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a special character (non-alphanumeric).", "code": "def is_special_char(c):\n    return not c.isalnum()\n\ndef count_special_char_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_special_char(s[i]) and is_special_char(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_c0f6d0f2-201d-406d-8f9e-5c423ff49bb5", "test_setup_code": "", "test_list": ["assert count_special_char_substrings('!a!') == 3", "assert count_special_char_substrings('a!b@c#') == 3", "assert count_special_char_substrings('@@@') == 6", "assert count_special_char_substrings('abc') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an alphanumeric character.", "code": "def is_alphanumeric(c):\n    return c.isalnum()\n\ndef count_alphanumeric_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_alphanumeric(s[i]) and is_alphanumeric(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_d78e3ef6-019f-4f5d-b0c8-7be7659f850f", "test_setup_code": "", "test_list": ["assert count_alphanumeric_substrings('abc123') == 21", "assert count_alphanumeric_substrings('a!b@c#') == 6", "assert count_alphanumeric_substrings('12345') == 15", "assert count_alphanumeric_substrings('') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with the same case (both uppercase or both lowercase).", "code": "def is_same_case(c1, c2):\n    return (c1.isupper() and c2.isupper()) or (c1.islower() and c2.islower())\n\ndef count_same_case_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_same_case(s[i], s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_1e06a1b3-ed70-418a-b42e-1abb89761376", "test_setup_code": "", "test_list": ["assert count_same_case_substrings('aA') == 1", "assert count_same_case_substrings('Aa') == 1", "assert count_same_case_substrings('aa') == 3", "assert count_same_case_substrings('AA') == 3", "assert count_same_case_substrings('aAaA') == 4", "assert count_same_case_substrings('AaAa') == 4", "assert count_same_case_substrings('abcABC') == 9", "assert count_same_case_substrings('aBcDeF') == 6", "assert count_same_case_substrings('') == 0", "assert count_same_case_substrings('a') == 1", "assert count_same_case_substrings('A') == 1", "assert count_same_case_substrings('abAB') == 4", "assert count_same_case_substrings('aAaAaA') == 9", "assert count_same_case_substrings('AaAaAa') == 9", "assert count_same_case_substrings('abCDEfgHI') == 9"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a binary number (as a string).", "code": "def hex_to_binary(hex_num: str) -> str:\n    return bin(int(hex_num, 16))[2:]", "task_id": "33_88400104-4773-4e0e-a1a4-757201ee7b69", "test_setup_code": "", "test_list": ["assert hex_to_binary('1A') == '11010'", "assert hex_to_binary('FF') == '11111111'", "assert hex_to_binary('0') == '0'", "assert hex_to_binary('DEADBEEF') == '11011110101011011011111011101111'"], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to an octal number (as a string).", "code": "def decimal_to_octal(decimal_num: int) -> str:\n    return oct(decimal_num)[2:]", "task_id": "33_c943999e-2275-488f-9b05-b60429b487ac", "test_setup_code": "", "test_list": ["assert decimal_to_octal(10) == '12'", "assert decimal_to_octal(0) == '0'", "assert decimal_to_octal(255) == '377'", "assert decimal_to_octal(8) == '10'"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to a decimal number.", "code": "def binary_to_decimal(binary_num: str) -> int:\n    return int(binary_num, 2)", "task_id": "33_860bcb23-9938-4aba-82a8-b91166f38ecd", "test_setup_code": "", "test_list": ["assert binary_to_decimal('0') == 0", "assert binary_to_decimal('1') == 1", "assert binary_to_decimal('101') == 5", "assert binary_to_decimal('11111111') == 255"], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number (as a string) to a decimal number.", "code": "def octal_to_decimal(octal_num: str) -> int:\n    return int(octal_num, 8)", "task_id": "33_7d0ef1f0-7c01-4b57-bd23-412e44d8a95b", "test_setup_code": "", "test_list": ["assert octal_to_decimal('10') == 8", "assert octal_to_decimal('0') == 0", "assert octal_to_decimal('777') == 511", "assert octal_to_decimal('1234567') == 342391"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to a hexadecimal number (as a string).", "code": "def binary_to_hex(binary_num: str) -> str:\n    return hex(int(binary_num, 2))[2:]", "task_id": "33_763744b6-5651-448d-a80e-baca2f5f921f", "test_setup_code": "", "test_list": ["assert binary_to_hex('1101') == 'd'", "assert binary_to_hex('11111111') == 'ff'", "assert binary_to_hex('0') == '0'", "assert binary_to_hex('1000000000000000') == '8000'"], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to a hexadecimal number (as a string).", "code": "def decimal_to_hex(decimal_num: int) -> str:\n    return hex(decimal_num)[2:]", "task_id": "33_5ea34740-42b2-44b0-8f0f-89a6da32d4d9", "test_setup_code": "", "test_list": ["assert decimal_to_hex(255) == 'ff'", "assert decimal_to_hex(0) == '0'", "assert decimal_to_hex(16) == '10'", "assert decimal_to_hex(4095) == 'fff'"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a decimal number.", "code": "def hex_to_decimal(hex_num: str) -> int:\n    return int(hex_num, 16)", "task_id": "33_a29e8433-a815-4ba2-9fd0-005a668be28d", "test_setup_code": "", "test_list": ["assert hex_to_decimal('1A') == 26", "assert hex_to_decimal('FF') == 255", "assert hex_to_decimal('0') == 0", "assert hex_to_decimal('10') == 16"], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number (as a string) to a binary number (as a string).", "code": "def octal_to_binary(octal_num: str) -> str:\n    return bin(int(octal_num, 8))[2:]", "task_id": "33_9331e3b6-caf3-4a83-86f9-7c6db5b78f7e", "test_setup_code": "", "test_list": ["assert octal_to_binary('0') == '0'", "assert octal_to_binary('7') == '111'", "assert octal_to_binary('10') == '1000'", "assert octal_to_binary('377') == '11111111'"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to an octal number (as a string).", "code": "def binary_to_octal(binary_num: str) -> str:\n    return oct(int(binary_num, 2))[2:]", "task_id": "33_973ff844-bc6d-4804-92a7-d1f51189e424", "test_setup_code": "", "test_list": ["assert binary_to_octal('110') == '6'", "assert binary_to_octal('11111111') == '377'", "assert binary_to_octal('0') == '0'", "assert binary_to_octal('1000000000000000') == '200000'"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to an octal number (as a string).", "code": "def hex_to_octal(hex_num: str) -> str:\n    return oct(int(hex_num, 16))[2:]", "task_id": "33_a7adce94-0d34-49d5-9f3d-8220fdf669aa", "test_setup_code": "", "test_list": ["assert hex_to_octal('1A') == '32'", "assert hex_to_octal('0') == '0'", "assert hex_to_octal('FFFF') == '177777'", "assert hex_to_octal('ABCDEF') == '5274677'"], "challenge_test_list": []}
{"text": "Write a function to find the n-th square number.", "code": "def find_square_num(n: int) -> int:\n    return n * n", "task_id": "35_239f1a64-9ed5-4790-b22b-d3a285c26825", "test_setup_code": "", "test_list": ["assert find_square_num(1) == 1", "assert find_square_num(5) == 25", "assert find_square_num(10) == 100", "assert find_square_num(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th triangular number.", "code": "def find_triangular_num(n: int) -> int:\n    return n * (n + 1) // 2", "task_id": "35_7da5ae13-0752-4af7-8ac3-628b56a57b50", "test_setup_code": "", "test_list": ["assert find_triangular_num(1) == 1", "assert find_triangular_num(5) == 15", "assert find_triangular_num(0) == 0", "assert find_triangular_num(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the n-th pentagonal number.", "code": "def find_pentagonal_num(n: int) -> int:\n    return n * (3 * n - 1) // 2", "task_id": "35_31035ed6-114a-4b11-bad6-61b7f148d919", "test_setup_code": "", "test_list": ["assert find_pentagonal_num(1) == 1", "assert find_pentagonal_num(5) == 35", "assert find_pentagonal_num(0) == 0", "assert find_pentagonal_num(10) == 145"], "challenge_test_list": []}
{"text": "Write a function to find the n-th hexagonal number.", "code": "def find_hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "task_id": "35_888b5092-c815-4dce-9bf0-6febb4e602a8", "test_setup_code": "", "test_list": ["assert find_hexagonal_num(1) == 1", "assert find_hexagonal_num(2) == 6", "assert find_hexagonal_num(10) == 190", "assert find_hexagonal_num(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th heptagonal number.", "code": "def find_heptagonal_num(n: int) -> int:\n    return n * (5 * n - 3) // 2", "task_id": "35_6314a2d5-fb97-49d2-b24b-13384f7e73ef", "test_setup_code": "", "test_list": ["assert find_heptagonal_num(1) == 1", "assert find_heptagonal_num(2) == 9", "assert find_heptagonal_num(10) == 370", "assert find_heptagonal_num(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th Fibonacci number.", "code": "def find_fibonacci_num(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "35_fc943f27-d019-4cfc-8e4b-42088748d421", "test_setup_code": "", "test_list": ["assert find_fibonacci_num(0) == 0", "assert find_fibonacci_num(1) == 1", "assert find_fibonacci_num(10) == 55", "assert find_fibonacci_num(20) == 6765"], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def find_sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "35_ebf86c7f-6f0c-4731-9ccf-6972a2eb4fec", "test_setup_code": "", "test_list": ["assert find_sum_of_squares(1) == 1", "assert find_sum_of_squares(5) == 55", "assert find_sum_of_squares(0) == 0", "assert find_sum_of_squares(10) == 385"], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def find_sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "35_1dcb07e4-1d6b-4338-b963-410c4785a327", "test_setup_code": "", "test_list": ["assert find_sum_of_cubes(1) == 1", "assert find_sum_of_cubes(2) == 9", "assert find_sum_of_cubes(10) == 3025", "assert find_sum_of_cubes(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "36_09012602-0fff-4dba-9bf3-b9c4d579fda6", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "36_0f4cc837-bb31-4a89-9544-d7c76c9dcb88", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('A man, a plan, a canal, Panama') == 'amanaP ,lanac a ,nalp a ,nam A'"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "36_daeec9ce-1726-44ca-aff3-71821e475849", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('') == True"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "36_390ffc77-93f2-430c-9e2c-0647ef2d37d9", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "36_f4fc53c8-55be-4a3a-a6bd-df5319351925", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(5) == 5", "assert fibonacci(10) == 55"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "36_bde7aaea-73cf-4ad5-9262-3b2eba7f4313", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(17, 17) == 17"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "36_40d94ec6-c233-45d1-8e4e-60435813aa62", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(0, 10) == 0", "assert lcm(21, 6) == 42", "assert lcm(1, 1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "36_69bcb08f-be2d-4922-8614-e7d20223eb27", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(lst1: list, lst2: list) -> list:\n    return sorted(lst1 + lst2)", "task_id": "36_17f6be1f-7d72-4baa-bd25-11793b729e95", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([], [1, 2, 3]) == [1, 2, 3]", "assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists([-5, -3, 0, 2], [-4, -2, 1, 3]) == [-5, -4, -3, -2, 0, 1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that occur most frequently from given lists of integers (not necessarily sorted or distinct) using heap queue algorithm.", "code": "def find_top_k(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_912a7a74-8057-4513-990d-09e2ada5552e", "test_setup_code": "", "test_list": ["assert find_top_k([[1, 1, 1, 2, 2, 3]], 2) == [1, 2]", "assert find_top_k([[1, 1, 1, 2, 2, 3]], 1) == [1]", "assert find_top_k([[1, 2, 3, 4, 5]], 3) == [1, 2, 3]", "assert find_top_k([[1, 2, 3, 4, 5]], 5) == [1, 2, 3, 4, 5]", "assert find_top_k([[1, 2, 3, 4, 5]], 0) == []", "assert find_top_k([[1, 2, 2, 3, 3, 3, 4, 4, 4, 4]], 2) == [3, 4]", "assert find_top_k([[1, 1, 1, 1, 1]], 1) == [1]", "assert find_top_k([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [1, 2, 3]", "assert find_top_k([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [1, 2]", "assert find_top_k([[1, 1, 2, 2, 3, 3, 4, 4, 5, 5]], 3) == [1, 2, 3]", "assert find_top_k([[1]], 1) == [1]", "assert find_top_k([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_top_k([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 5) == [1, 2, 3, 4, 5]", "assert find_top_k([[1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]], 5) == [1, 2, 3, 4, 5]", "assert find_top_k([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 3) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the top k even integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_even(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % 2 == 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_e049c430-2e24-4e01-a503-747d27fbec6e", "test_setup_code": "", "test_list": ["assert find_top_k_even([[1, 2, 3, 4, 4, 6, 6, 6]], 2) == [4, 6]", "assert find_top_k_even([[2, 2, 2, 3, 3, 4, 4, 4], [4, 6, 6, 6, 8]], 3) == [4, 6, 2]", "assert find_top_k_even([[1, 3, 5, 7]], 1) == []", "assert find_top_k_even([[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]], 5) == [2, 4, 6, 8, 10]", "assert find_top_k_even([[2, 2, 2, 2, 2, 2, 2]], 1) == [2]", "assert find_top_k_even([[2, 2, 4, 4, 6, 6, 8, 8]], 2) == [4, 2]", "assert find_top_k_even([[2, 4, 4, 6, 6, 6, 8, 8, 8, 8]], 3) == [6, 4, 8]", "assert find_top_k_even([[2, 4, 6, 8, 10], [12, 14, 16, 18, 20]], 3) == [2, 4, 6]", "assert find_top_k_even([[2, 4, 6], [8, 10, 12], [14, 16, 18]], 4) == [2, 4, 6, 8]", "assert find_top_k_even([[2, 4, 6, 8, 10], [2, 4, 6, 8, 10]], 2) == [2, 4]", "assert find_top_k_even([[2, 2, 4, 4, 6, 6, 8, 8], [10, 10, 12, 12, 14, 14]], 3) == [4, 6, 2]", "assert find_top_k_even([[2, 4, 6, 8, 10], [12, 14, 16, 18, 20], [22, 24, 26, 28, 30]], 5) == [2, 4, 6, 8, 10]", "assert find_top_k_even([[2, 4, 6, 8, 10], [2, 4, 6, 8, 10], [2, 4, 6, 8, 10]], 1) == [2]", "assert find_top_k_even([[2, 4, 6, 8, 10], [12, 14, 16, 18, 20], [22, 24, 26, 28, 30]], 10) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "assert find_top_k_even([[2, 4, 6, 8, 10], [12, 14, 16, 18, 20], [22, 24, 26, 28, 30]], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to find the top k odd integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_odd(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % 2 != 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_b16721bb-2dd6-4698-a82e-0b594c2faf45", "test_setup_code": "", "test_list": ["assert find_top_k_odd([[1, 2, 3, 4, 5], [1, 3, 5, 7, 9], [1, 1, 3, 3, 5]], 3) == [3, 5, 1]", "assert find_top_k_odd([[2, 4, 6, 8], [10, 12, 14]], 2) == []", "assert find_top_k_odd([[1, 1, 1, 1, 1], [3, 3, 3], [5, 5]], 1) == [1]", "assert find_top_k_odd([[7, 7, 7, 7, 7], [7, 7, 7, 7, 7], [7, 7, 7, 7, 7]], 2) == [7]"], "challenge_test_list": []}
{"text": "Write a function to find the top k positive integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_positive(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i > 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_85d6f4d0-b673-4690-97da-8e2a83cc6ca7", "test_setup_code": "", "test_list": ["assert find_top_k_positive([[1, 2, 3, 4, 5, 1, 2, 1], [1, 3, 4, 4, 4, 5]], 2) == [4, 1]", "assert find_top_k_positive([[1, 1, 1], [2, 2], [3]], 1) == [1]", "assert find_top_k_positive([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [7, 8, 9]", "assert find_top_k_positive([[1, 2, 2, 3, 3, 3], [4, 4, 4, 4], [5, 5, 5, 5, 5]], 2) == [5, 4]"], "challenge_test_list": []}
{"text": "Write a function to find the top k negative integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_negative(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i < 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_91113813-c199-4e42-8ce3-e4e3b9d1619c", "test_setup_code": "", "test_list": ["assert find_top_k_negative([[-1, -2, -3, 1, 2], [-1, -2, 3, 4], [-1, 5, 6]], 2) == [-1, -2]", "assert find_top_k_negative([[-5, -5, -3, -3, -1], [-5, -3, -1], [-5, -1]], 3) == [-5, -3, -1]", "assert find_top_k_negative([[1, 2, 3], [4, 5, 6]], 1) == []", "assert find_top_k_negative([[-10, -9, -8, -7], [-6, -5, -4], [-3, -2, -1]], 4) == [-10, -9, -8, -7]"], "challenge_test_list": []}
{"text": "Write a function to find the top k unique integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_unique(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    unique_items = {key for key, value in d.items() if value == 1}\n    temp = []\n    import heapq\n    for key in unique_items:\n        if len(temp) < k:\n            temp.append((d[key], key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if d[key] > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (d[key], key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_0a27b684-240e-4fa0-9cd7-a19c4889b47a", "test_setup_code": "", "test_list": ["assert find_top_k_unique([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [1, 5]", "assert find_top_k_unique([[1, 1, 2], [2, 3, 4], [5, 6, 7]], 3) == [3, 4, 5]", "assert find_top_k_unique([[1, 2, 3], [4, 5, 6]], 3) == [1, 2, 3]", "assert find_top_k_unique([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 0) == []", "assert find_top_k_unique([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 4, 5]", "assert find_top_k_unique([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], 1) == [1]", "assert find_top_k_unique([[1, 1, 1], [2, 2, 2], [3, 4, 5]], 3) == [3, 4, 5]", "assert find_top_k_unique([[10, 20, 30], [10, 20, 30], [40, 50, 60]], 3) == [40, 50, 60]", "assert find_top_k_unique([[1, 2], [3, 4], [5, 6], [7, 8]], 4) == [1, 2, 3, 4]", "assert find_top_k_unique([[1, 1, 1], [1, 1, 1]], 0) == []", "assert find_top_k_unique([[1, 2, 3], [4, 5, 6]], 6) == [1, 2, 3, 4, 5, 6]", "assert find_top_k_unique([[1, 2, 3], [3, 4, 5], [5, 6, 7]], 2) == [1, 2]", "assert find_top_k_unique([[100, 200], [200, 300], [300, 400]], 2) == [100, 400]", "assert find_top_k_unique([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 9) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_top_k_unique([[5, 5, 5], [5, 5, 1], [1, 2, 3]], 2) == [2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the top k prime integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_prime(nums, k):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_prime(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_0b093b03-cef1-4e97-b2c8-0381e3dddb49", "test_setup_code": "", "test_list": ["assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 3) == [17, 19, 23]", "assert find_top_k_prime([[2, 3, 5, 7, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 2) == [2, 3]", "assert find_top_k_prime([[2, 2, 2, 2, 2, 2, 2, 2, 2, 2]], 1) == [2]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71]], 5) == [47, 53, 59, 61, 67]", "assert find_top_k_prime([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37]], 4) == [11, 13, 17, 19]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 3) == [17, 19, 23]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97]], 1) == [97]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 2) == [2, 3]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113]], 3) == [107, 109, 113]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 1) == [2]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 2) == [2, 3]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 3) == [2, 3, 5]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 4) == [2, 3, 5, 7]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 5) == [2, 3, 5, 7, 11]", "assert find_top_k_prime([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [31, 37, 41, 43, 47, 53, 59, 61, 67, 71], [73, 79, 83, 89, 97], [101, 103, 107, 109, 113], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29], [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]], 6) == [2, 3, 5, 7, 11, 13]"], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are multiples of a given number n and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_multiples_of_n(nums, k, n):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % n == 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_6883aa1e-b3f5-4f6e-b215-a227dbfbb87a", "test_setup_code": "", "test_list": ["assert find_top_k_multiples_of_n([[1, 2, 3, 4, 6, 8, 12], [6, 12, 18, 24]], 3, 6) == [6, 12, 18]", "assert find_top_k_multiples_of_n([[5, 10, 15, 20, 25], [30, 35, 40, 45, 50]], 2, 5) == [5, 10]", "assert find_top_k_multiples_of_n([[7, 14, 21, 28], [14, 28, 35, 42]], 2, 7) == [14, 28]", "assert find_top_k_multiples_of_n([[3, 6, 9, 12], [15, 18, 21, 24]], 4, 3) == [3, 6, 9, 12]", "assert find_top_k_multiples_of_n([[2, 4, 6, 8, 10], [12, 14, 16, 18, 20]], 1, 2) == [2]", "assert find_top_k_multiples_of_n([[1, 2, 3], [4, 5, 6]], 2, 1) == [1, 2]", "assert find_top_k_multiples_of_n([[10, 20, 30], [40, 50, 60]], 3, 10) == [10, 20, 30]", "assert find_top_k_multiples_of_n([[5, 10, 15], [20, 25, 30]], 2, 10) == [10, 20]", "assert find_top_k_multiples_of_n([[8, 16, 24], [32, 40, 48]], 3, 8) == [8, 16, 24]", "assert find_top_k_multiples_of_n([[9, 18, 27], [36, 45, 54]], 2, 9) == [9, 18]", "assert find_top_k_multiples_of_n([[1, 3, 5], [7, 9, 11]], 1, 3) == [3]", "assert find_top_k_multiples_of_n([[2, 4, 6], [8, 10, 12]], 2, 4) == [4, 8]", "assert find_top_k_multiples_of_n([[3, 6, 9], [12, 15, 18]], 1, 6) == [6]", "assert find_top_k_multiples_of_n([[4, 8, 12], [16, 20, 24]], 3, 4) == [4, 8, 12]", "assert find_top_k_multiples_of_n([[5, 10, 15], [20, 25, 30]], 1, 5) == [5]"], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are perfect squares and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_squares(nums, k):\n    def is_square(n):\n        return int(n ** 0.5) ** 2 == n\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_square(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_ce2b8072-7c25-4150-9175-ffec65093fd2", "test_setup_code": "", "test_list": ["assert find_top_k_squares([[1, 4, 9, 16], [4, 9, 25, 36], [1, 4, 9]], 2) == [4, 9]", "assert find_top_k_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1]", "assert find_top_k_squares([[16, 25, 36], [49, 64, 81], [100, 121, 144]], 3) == [16, 25, 36]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 5) == [1, 4, 9, 16, 25]", "assert find_top_k_squares([[1, 4, 9], [4, 9, 16], [9, 16, 25]], 3) == [9, 4, 16]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 0) == []", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 10) == [1, 4, 9, 16, 25, 36, 49, 64, 81]", "assert find_top_k_squares([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 4]", "assert find_top_k_squares([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 1) == [1]", "assert find_top_k_squares([[4, 4, 4], [4, 4, 4], [4, 4, 4]], 1) == [4]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 1) == [1]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 4) == [1, 4, 9, 16]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 6) == [1, 4, 9, 16, 25, 36]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 7) == [1, 4, 9, 16, 25, 36, 49]", "assert find_top_k_squares([[1, 4, 9], [16, 25, 36], [49, 64, 81]], 8) == [1, 4, 9, 16, 25, 36, 49, 64]"], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are Fibonacci numbers and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_fibonacci(nums, k):\n    def is_fibonacci(n):\n        x, y = 0, 1\n        while y < n:\n            x, y = y, x + y\n        return y == n\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_fibonacci(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_08a87f5d-071e-492d-befd-62ca50b0b963", "test_setup_code": "", "test_list": ["assert find_top_k_fibonacci([[1, 1, 2, 3, 5, 8, 13, 21, 34]], 3) == [8, 13, 21]", "assert find_top_k_fibonacci([[1, 2, 3], [5, 8, 13], [21, 34, 55]], 5) == [3, 5, 8, 13, 21]", "assert find_top_k_fibonacci([[1, 2, 3], [5, 8, 13], [21, 34, 55]], 0) == []", "assert find_top_k_fibonacci([[1, 1, 2, 2, 3, 3, 5, 5]], 2) == [3, 5]", "assert find_top_k_fibonacci([[1, 1, 1, 1, 1]], 1) == [1]", "assert find_top_k_fibonacci([[1, 2, 3, 5, 8, 13, 21, 34, 55, 89]], 10) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "assert find_top_k_fibonacci([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]], 3) == [2, 3, 5]", "assert find_top_k_fibonacci([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2]", "assert find_top_k_fibonacci([[10, 20, 30], [40, 50, 60]], 1) == []", "assert find_top_k_fibonacci([[13, 21, 34, 55, 89], [13, 21, 34, 55, 89]], 3) == [34, 55, 89]", "assert find_top_k_fibonacci([[1, 2, 3], [5, 8, 13], [21, 34, 55], [89, 144, 233]], 4) == [13, 21, 34, 55]", "assert find_top_k_fibonacci([[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]], 5) == [21, 34, 55, 89, 144]", "assert find_top_k_fibonacci([[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]], 1) == [1]", "assert find_top_k_fibonacci([[1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]], 14) == [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]", "assert find_top_k_fibonacci([[]], 3) == []"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an unsorted array of unique integers from 1 to n.", "code": "def find_missing_number(arr: list[int]) -> int:\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum", "task_id": "34_fa44c071-e041-46e7-80b0-297b0a685403", "test_setup_code": "", "test_list": ["assert find_missing_number([1, 2, 4, 5, 6]) == 3", "assert find_missing_number([3, 7, 1, 2, 8, 4, 5]) == 6", "assert find_missing_number([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the duplicate number in an array of n+1 integers where each integer is between 1 and n.", "code": "def find_duplicate_number(arr: list[int]) -> int:\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "34_61f7b2af-a5c5-4ab0-8224-8ba6001e7249", "test_setup_code": "", "test_list": ["assert find_duplicate_number([1, 3, 4, 2, 2]) == 2", "assert find_duplicate_number([3, 1, 3, 4, 2]) == 3", "assert find_duplicate_number([1, 1]) == 1", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the missing and duplicate numbers in an array of n integers where each integer is between 1 and n.", "code": "def find_missing_and_duplicate(arr: list[int]) -> tuple[int, int]:\n    n = len(arr)\n    total_sum = n * (n + 1) // 2\n    total_square_sum = n * (n + 1) * (2 * n + 1) // 6\n    arr_sum = sum(arr)\n    arr_square_sum = sum(x * x for x in arr)\n    sum_diff = total_sum - arr_sum\n    square_sum_diff = total_square_sum - arr_square_sum\n    missing = (sum_diff + square_sum_diff // sum_diff) // 2\n    duplicate = missing - sum_diff\n    return (missing, duplicate)", "task_id": "34_f400a303-2058-4777-b1e2-011e5f2c4d57", "test_setup_code": "", "test_list": ["assert find_missing_and_duplicate([1, 2, 2, 4]) == (3, 2)", "assert find_missing_and_duplicate([3, 1, 3]) == (2, 3)", "assert find_missing_and_duplicate([1, 1]) == (2, 1)", "assert find_missing_and_duplicate([2, 2, 3, 4, 5]) == (1, 2)"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive integer in an unsorted array.", "code": "def find_first_missing_positive(arr: list[int]) -> int:\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "task_id": "34_f68d0f4d-7212-4ea4-b61c-c22326a659e9", "test_setup_code": "", "test_list": ["assert find_first_missing_positive([3, 4, -1, 1]) == 2", "assert find_first_missing_positive([1, 2, 0]) == 3", "assert find_first_missing_positive([7, 8, 9, 11, 12]) == 1", "assert find_first_missing_positive([1, 2, 3, 4, 5]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers within a given range [start, end].", "code": "def find_missing_number_in_range(arr: list[int], start: int, end: int) -> int:\n    expected_sum = sum(range(start, end + 1))\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum", "task_id": "34_05c7e623-b550-47b3-b2e0-e45aa191a514", "test_setup_code": "", "test_list": ["assert find_missing_number_in_range([1, 2, 4, 5], 1, 5) == 3", "assert find_missing_number_in_range([10, 11, 13, 14], 10, 14) == 12", "assert find_missing_number_in_range([100, 101, 102, 104, 105], 100, 105) == 103", "assert find_missing_number_in_range([0, 1, 2, 3, 4, 5, 7], 0, 7) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find all missing numbers in an array of integers from 1 to n.", "code": "def find_missing_numbers(arr: list[int], n: int) -> list[int]:\n    present = [False] * (n + 1)\n    for num in arr:\n        present[num] = True\n    missing = [i for i in range(1, n + 1) if not present[i]]\n    return missing", "task_id": "34_04409e9d-6900-43bc-9c00-bcbbfa0716b3", "test_setup_code": "", "test_list": ["assert find_missing_numbers([1, 2, 4, 6], 6) == [3, 5]", "assert find_missing_numbers([2, 3, 7, 4, 8, 1], 8) == [5, 6]", "assert find_missing_numbers([], 5) == [1, 2, 3, 4, 5]", "assert find_missing_numbers([1, 2, 3, 4, 5], 5) == []"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a sorted and rotated array of unique integers from 1 to n.", "code": "def find_missing_number_in_sorted_rotated(arr: list[int]) -> int:\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum", "task_id": "34_ebaec7a9-cb36-46a3-be7a-e9e87cbd5e2c", "test_setup_code": "", "test_list": ["assert find_missing_number_in_sorted_rotated([3, 4, 5, 1]) == 2", "assert find_missing_number_in_sorted_rotated([2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 11", "assert find_missing_number_in_sorted_rotated([2]) == 1", "assert find_missing_number_in_sorted_rotated([1, 2, 3, 4, 6, 7, 8, 9, 10]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers from 1 to n with possible duplicates.", "code": "def find_missing_number_with_duplicates(arr: list[int], n: int) -> int:\n    unique_sum = sum(set(arr))\n    expected_sum = n * (n + 1) // 2\n    return expected_sum - unique_sum", "task_id": "34_a6fa6aa4-a79c-443c-becc-a97f7d795249", "test_setup_code": "", "test_list": ["assert find_missing_number_with_duplicates([1, 2, 2, 4], 4) == 3", "assert find_missing_number_with_duplicates([1, 1, 2, 3, 5, 5], 5) == 4", "assert find_missing_number_with_duplicates([1, 3, 3, 4, 5], 5) == 2", "assert find_missing_number_with_duplicates([2, 2, 3, 4, 5], 5) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a large range [start, end] where the array may not fit into memory.", "code": "def find_missing_number_in_large_range(arr: list[int], start: int, end: int) -> int:\n    expected_sum = sum(range(start, end + 1))\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum", "task_id": "34_964ab028-67c0-419a-ad58-2ad831b2b413", "test_setup_code": "", "test_list": ["assert find_missing_number_in_large_range([1, 2, 4, 5], 1, 5) == 3", "assert find_missing_number_in_large_range([10, 11, 12, 14, 15], 10, 15) == 13", "assert find_missing_number_in_large_range([1000000, 1000001, 1000002, 1000003, 1000005], 1000000, 1000005) == 1000004", "assert find_missing_number_in_large_range([-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], -2, 10) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given list of lists.", "code": "def sum_of_elements(nums):\n  return sum(sum(sublist) for sublist in nums)", "task_id": "40_fab0f286-03d7-4156-9dbd-9d53ac6453e8", "test_setup_code": "", "test_list": ["assert sum_of_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 45", "assert sum_of_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0", "assert sum_of_elements([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == -45", "assert sum_of_elements([[1], [2], [3], [4], [5]]) == 15"], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list(nums):\n  return [item for sublist in nums for item in sublist]", "task_id": "40_c0208a36-8b85-4fcd-ade9-fa121369a985", "test_setup_code": "", "test_list": ["assert flatten_list([[1, 2, 3], [4, 5], [6]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([[], [1, 2], [], [3, 4, 5]]) == [1, 2, 3, 4, 5]", "assert flatten_list([[1], [2], [3], [4]]) == [1, 2, 3, 4]", "assert flatten_list([[], [], []]) == []"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given list of lists.", "code": "def unique_elements(nums):\n  return set(item for sublist in nums for item in sublist)", "task_id": "40_5910ca8f-d3c1-4253-b2fd-8157f258878a", "test_setup_code": "", "test_list": ["assert unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == {1, 2, 3, 4, 5, 6, 7, 8, 9}", "assert unique_elements([[1, 2, 2], [3, 4, 4], [5, 6, 6]]) == {1, 2, 3, 4, 5, 6}", "assert unique_elements([[], [1, 2, 3], [3, 4, 5]]) == {1, 2, 3, 4, 5}", "assert unique_elements([[1], [1], [1]]) == {1}"], "challenge_test_list": []}
{"text": "Write a function to transpose a given matrix (list of lists).", "code": "def transpose_matrix(matrix):\n  return [list(row) for row in zip(*matrix)]", "task_id": "40_caca2725-d00a-435d-a0e0-e935fa7a19b0", "test_setup_code": "", "test_list": ["assert transpose_matrix([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]", "assert transpose_matrix([[1]]) == [[1]]", "assert transpose_matrix([]) == []", "assert transpose_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]"], "challenge_test_list": []}
{"text": "Write a function to compute the element-wise sum of two matrices (lists of lists) of the same dimensions.", "code": "def element_wise_sum(matrix1, matrix2):\n  return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]", "task_id": "40_5e782ac9-17b0-44dc-b3f1-ba91c3d6a4dd", "test_setup_code": "", "test_list": ["assert element_wise_sum([[1, 2], [3, 4]], [[5, 6], [7, 8]]) == [[6, 8], [10, 12]]", "assert element_wise_sum([[0, 0], [0, 0]], [[0, 0], [0, 0]]) == [[0, 0], [0, 0]]", "assert element_wise_sum([[1]], [[2]]) == [[3]]", "assert element_wise_sum([[-1, -2], [-3, -4]], [[1, 2], [3, 4]]) == [[0, 0], [0, 0]]"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the diagonal elements of a square matrix (list of lists).", "code": "def diagonal_sum(matrix):\n  return sum(matrix[i][i] for i in range(len(matrix)))", "task_id": "40_19e7118b-d684-49cf-855d-cdb63694726f", "test_setup_code": "", "test_list": ["assert diagonal_sum([[1, 2], [3, 4]]) == 5", "assert diagonal_sum([[5]]) == 5", "assert diagonal_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 15", "assert diagonal_sum([[0, 1, 2], [3, 0, 4], [5, 6, 0]]) == 0"], "challenge_test_list": []}
{"text": "Write a function to reverse each list within a given list of lists.", "code": "def reverse_each_list(nums):\n  return [sublist[::-1] for sublist in nums]", "task_id": "40_4e89a52d-3f00-4c86-ba2a-32ce499f3a18", "test_setup_code": "", "test_list": ["assert reverse_each_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert reverse_each_list([]) == []", "assert reverse_each_list([[1], [2], [3]]) == [[1], [2], [3]]", "assert reverse_each_list([[], [1, 2], [3, 4, 5]]) == [[], [2, 1], [5, 4, 3]]"], "challenge_test_list": []}
{"text": "Write a function to count the number of zeros in a given list of lists.", "code": "def count_zeros(nums):\n  return sum(sublist.count(0) for sublist in nums)", "task_id": "40_2a0a9fbe-dd6c-470f-bf74-b29ab270df19", "test_setup_code": "", "test_list": ["assert count_zeros([[0, 1, 2], [3, 4, 0], [0, 0, 5]]) == 4", "assert count_zeros([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 0", "assert count_zeros([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 9", "assert count_zeros([[], [0], [1, 0, 2, 0], [3, 4, 5, 0]]) == 4"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of each row in a given matrix (list of lists).", "code": "def row_sums(matrix):\n  return [sum(row) for row in matrix]", "task_id": "40_07fef709-565d-4b9f-ba92-922ae65f63de", "test_setup_code": "", "test_list": ["assert row_sums([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [6, 15, 24]", "assert row_sums([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert row_sums([[1], [2], [3]]) == [1, 2, 3]", "assert row_sums([[-1, -2, -3], [4, 5, -6], [7, -8, 9]]) == [-6, 3, 8]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number of a given list.", "code": "def sum_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even + first_odd", "task_id": "38_890a44ac-1a8a-4368-a75e-ae5e61f61964", "test_setup_code": "", "test_list": ["assert sum_first_even_odd([1, 2, 3, 4, 5]) == 3", "assert sum_first_even_odd([2, 4, 6, 8]) == 2", "assert sum_first_even_odd([1, 3, 5, 7]) == 1", "assert sum_first_even_odd([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the product of the first even and odd number of a given list.", "code": "def product_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 1)\n    first_odd = next((el for el in list1 if el%2!=0), 1)\n    return first_even * first_odd", "task_id": "38_f52a54fe-016f-4e0d-8345-8c8db7a65293", "test_setup_code": "", "test_list": ["assert product_first_even_odd([1, 2, 3, 4, 5]) == 2", "assert product_first_even_odd([2, 4, 6, 8, 10]) == 2", "assert product_first_even_odd([1, 3, 5, 7, 9]) == 1", "assert product_first_even_odd([0, 1, 2, 3, 4]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the difference between the first even and odd number of a given list.", "code": "def difference_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even - first_odd", "task_id": "38_75e34960-bfeb-4985-8c6d-33ae52b92255", "test_setup_code": "", "test_list": ["assert difference_first_even_odd([2, 3, 5, 7, 8, 10]) == -1", "assert difference_first_even_odd([1, 3, 5, 7, 2, 4]) == 1", "assert difference_first_even_odd([4, 6, 8, 10]) == 4", "assert difference_first_even_odd([1, 3, 5, 7]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first two even numbers of a given list.", "code": "def sum_first_two_evens(list1):\n    evens = [el for el in list1 if el%2==0]\n    return sum(evens[:2])", "task_id": "38_3f2a26a9-3103-4a00-8523-3aee80cbe566", "test_setup_code": "", "test_list": ["assert sum_first_two_evens([1, 2, 3, 4, 5]) == 6", "assert sum_first_two_evens([2, 4, 6, 8]) == 6", "assert sum_first_two_evens([1, 3, 5, 7]) == 0", "assert sum_first_two_evens([0, 2, 4, 6]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first two odd numbers of a given list.", "code": "def sum_first_two_odds(list1):\n    odds = [el for el in list1 if el%2!=0]\n    return sum(odds[:2])", "task_id": "38_0815aa0d-3c7a-49d8-8622-2ce602422324", "test_setup_code": "", "test_list": ["assert sum_first_two_odds([1, 2, 3, 4, 5]) == 4", "assert sum_first_two_odds([2, 4, 6, 8]) == 0", "assert sum_first_two_odds([7, 8, 9, 10, 11]) == 16", "assert sum_first_two_odds([1]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number at even and odd indices respectively of a given list.", "code": "def sum_first_even_odd_indices(list1):\n    first_even = next((list1[i] for i in range(0, len(list1), 2) if list1[i]%2==0), 0)\n    first_odd = next((list1[i] for i in range(1, len(list1), 2) if list1[i]%2!=0), 0)\n    return first_even + first_odd", "task_id": "38_eeb2362b-fce3-4d91-8271-c532cba14a20", "test_setup_code": "", "test_list": ["assert sum_first_even_odd_indices([2, 3, 4, 5, 6, 7]) == 5", "assert sum_first_even_odd_indices([1, 2, 3, 4, 5, 6]) == 0", "assert sum_first_even_odd_indices([0, 1, 2, 3, 4, 5]) == 1", "assert sum_first_even_odd_indices([10, 21, 30, 41, 50, 61]) == 31"], "challenge_test_list": []}
{"text": "Write a function to find the product of the first even and odd number at even and odd indices respectively of a given list.", "code": "def product_first_even_odd_indices(list1):\n    first_even = next((list1[i] for i in range(0, len(list1), 2) if list1[i]%2==0), 1)\n    first_odd = next((list1[i] for i in range(1, len(list1), 2) if list1[i]%2!=0), 1)\n    return first_even * first_odd", "task_id": "38_4a59ac69-3c35-4a1e-94fc-c20d6d68eebb", "test_setup_code": "", "test_list": ["assert product_first_even_odd_indices([2, 3, 4, 5, 6, 7]) == 6", "assert product_first_even_odd_indices([1, 2, 3, 4, 5, 6]) == 1", "assert product_first_even_odd_indices([2, 4, 6, 8, 10, 12]) == 1", "assert product_first_even_odd_indices([1, 3, 5, 7, 9, 11]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of the first even and odd number of a given list.", "code": "def sum_first_even_odd_squares(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even**2 + first_odd**2", "task_id": "38_393768d4-25ef-4165-a848-7e8d926b7421", "test_setup_code": "", "test_list": ["assert sum_first_even_odd_squares([1, 2, 3, 4, 5]) == 5", "assert sum_first_even_odd_squares([2, 4, 6, 8, 10]) == 4", "assert sum_first_even_odd_squares([1, 3, 5, 7, 9]) == 1", "assert sum_first_even_odd_squares([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of the first even and odd number of a given list.", "code": "def sum_first_even_odd_cubes(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even**3 + first_odd**3", "task_id": "38_85474da2-0fba-46de-a6a8-1f96949fd470", "test_setup_code": "", "test_list": ["assert sum_first_even_odd_cubes([1, 2, 3, 4, 5]) == 9", "assert sum_first_even_odd_cubes([2, 4, 6, 8]) == 8", "assert sum_first_even_odd_cubes([1, 3, 5, 7]) == 1", "assert sum_first_even_odd_cubes([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the absolute values of the first even and odd number of a given list.", "code": "def sum_first_even_odd_abs(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return abs(first_even) + abs(first_odd)", "task_id": "38_8f019b91-a7f8-49cf-a0c7-472b3d23182c", "test_setup_code": "", "test_list": ["assert sum_first_even_odd_abs([1, 2, 3, 4, 5]) == 3", "assert sum_first_even_odd_abs([-2, -3, 4, 5]) == 5", "assert sum_first_even_odd_abs([]) == 0", "assert sum_first_even_odd_abs([10, 20, 30]) == 10"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings in descending order.", "code": "def sort_mixed_list_desc(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int], reverse=True)\n    str_part = sorted([i for i in mixed_list if type(i) is str], reverse=True)\n    return int_part + str_part", "task_id": "37_560d107e-910f-4a90-9451-7ac585a203c5", "test_setup_code": "", "test_list": ["assert sort_mixed_list_desc([3, 'apple', 1, 'banana', 2]) == [3, 2, 1, 'banana', 'apple']", "assert sort_mixed_list_desc(['cat', 10, 'dog', 5, 'elephant']) == [10, 5, 'elephant', 'dog', 'cat']", "assert sort_mixed_list_desc([100, 'zebra', 50, 'yak', 75, 'xenon']) == [100, 75, 50, 'zebra', 'yak', 'xenon']", "assert sort_mixed_list_desc([]) == []"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in ascending order.", "code": "def sort_mixed_list_by_type(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "task_id": "37_51e2a145-d362-4913-b363-11b94bac3824", "test_setup_code": "", "test_list": ["assert sort_mixed_list_by_type([3, 'apple', 1, 'banana', 2]) == [1, 2, 3, 'apple', 'banana']", "assert sort_mixed_list_by_type([10, '10', 20, '20', 5, '5']) == [5, 10, 20, '10', '20', '5']", "assert sort_mixed_list_by_type([]) == []", "assert sort_mixed_list_by_type([100, 'zebra', -1, 'apple', 0, 'banana']) == [-1, 0, 100, 'apple', 'banana', 'zebra']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings sorted by their length.", "code": "def sort_mixed_list_by_length(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=len)\n    return int_part + str_part", "task_id": "37_15eae3cb-d1b1-450f-ac06-30acdca4ad3d", "test_setup_code": "", "test_list": ["assert sort_mixed_list_by_length([1, 'apple', 3, 'banana', 2, 'cat']) == [1, 2, 3, 'cat', 'apple', 'banana']", "assert sort_mixed_list_by_length(['hello', 5, 'world', 10, 'python']) == [5, 10, 'world', 'hello', 'python']", "assert sort_mixed_list_by_length([]) == []", "assert sort_mixed_list_by_length([100, 42, -5, 0, 'a', 'ab', 'abc']) == [-5, 0, 42, 100, 'a', 'ab', 'abc']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with even integers first in ascending order, followed by odd integers in ascending order, and then strings in ascending order.", "code": "def sort_mixed_list_even_odd(mixed_list):\n    even_ints = sorted([i for i in mixed_list if type(i) is int and i % 2 == 0])\n    odd_ints = sorted([i for i in mixed_list if type(i) is int and i % 2 != 0])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return even_ints + odd_ints + str_part", "task_id": "37_d72b92b3-705e-4899-9f9f-6f136ef56b54", "test_setup_code": "", "test_list": ["assert sort_mixed_list_even_odd([4, 'apple', 3, 2, 'banana', 1]) == [2, 4, 1, 3, 'apple', 'banana']", "assert sort_mixed_list_even_odd(['zebra', 5, 8, 'cat', 7, 6]) == [6, 8, 5, 7, 'cat', 'zebra']", "assert sort_mixed_list_even_odd([10, 'dog', 'elephant', 3, 2, 1]) == [2, 10, 1, 3, 'dog', 'elephant']", "assert sort_mixed_list_even_odd([2, 4, 6, 8, 'a', 'b', 'c']) == [2, 4, 6, 8, 'a', 'b', 'c']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in case-insensitive alphabetical order.", "code": "def sort_mixed_list_case_insensitive(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=lambda s: s.lower())\n    return int_part + str_part", "task_id": "37_fe1c1e7e-084c-4e9c-90ec-21dca3111943", "test_setup_code": "", "test_list": ["assert sort_mixed_list_case_insensitive([3, 'apple', 1, 'Banana', 2, 'cherry']) == [1, 2, 3, 'apple', 'Banana', 'cherry']", "assert sort_mixed_list_case_insensitive(['zebra', 'Apple', 10, 'banana', 5, 3]) == [3, 5, 10, 'Apple', 'banana', 'zebra']", "assert sort_mixed_list_case_insensitive([100, 'dog', 'Cat', 50, 'elephant', 0, 'bat']) == [0, 50, 100, 'bat', 'Cat', 'dog', 'elephant']", "assert sort_mixed_list_case_insensitive([]) == []"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in descending order followed by strings in ascending order.", "code": "def sort_mixed_list_custom_order(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int], reverse=True)\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "task_id": "37_6fb64dac-aae4-4520-82a1-34079cb52e69", "test_setup_code": "", "test_list": ["assert sort_mixed_list_custom_order([3, 'apple', 1, 'banana', 2, 'cherry']) == [3, 2, 1, 'apple', 'banana', 'cherry']", "assert sort_mixed_list_custom_order([]) == []", "assert sort_mixed_list_custom_order([42, 'zebra', 'apple', 100, 'banana', 1]) == [100, 42, 1, 'apple', 'banana', 'zebra']", "assert sort_mixed_list_custom_order(['apple', 'banana', 'cherry']) == ['apple', 'banana', 'cherry']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings sorted by their length in descending order.", "code": "def sort_mixed_list_length_desc(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=len, reverse=True)\n    return int_part + str_part", "task_id": "37_8bf06029-a8db-49f8-a645-3c7fada7a75e", "test_setup_code": "", "test_list": ["assert sort_mixed_list_length_desc([3, 'apple', 1, 'banana', 2, 'kiwi']) == [1, 2, 3, 'banana', 'apple', 'kiwi']", "assert sort_mixed_list_length_desc(['a', 3, 'abc', 1, 'ab', 2]) == [1, 2, 3, 'abc', 'ab', 'a']", "assert sort_mixed_list_length_desc([5, 3, 9, 'longstring', 'short', 'tiny']) == [3, 5, 9, 'longstring', 'short', 'tiny']", "assert sort_mixed_list_length_desc([10, 'a', 'ab', 'abc', 5, 1]) == [1, 5, 10, 'abc', 'ab', 'a']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings that start with a vowel in ascending order, then other strings in ascending order.", "code": "def sort_mixed_list_vowels_first(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    vowels = 'AEIOUaeiou'\n    str_vowels = sorted([i for i in mixed_list if type(i) is str and i[0] in vowels])\n    str_others = sorted([i for i in mixed_list if type(i) is str and i[0] not in vowels])\n    return int_part + str_vowels + str_others", "task_id": "37_aca12853-5e08-4d7a-ba58-c8c470e262da", "test_setup_code": "", "test_list": ["assert sort_mixed_list_vowels_first([3, 'apple', 1, 'banana', 'orange', 2, 'grape']) == [1, 2, 3, 'apple', 'orange', 'banana', 'grape']", "assert sort_mixed_list_vowels_first(['umbrella', 'elephant', 5, 3, 'dog', 'cat', 1]) == [1, 3, 5, 'elephant', 'umbrella', 'cat', 'dog']", "assert sort_mixed_list_vowels_first([10, 'echo', 'alpha', 20, 'india', 'Oscar', 30]) == [10, 20, 30, 'alpha', 'echo', 'india', 'Oscar']", "assert sort_mixed_list_vowels_first([]) == []"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with prime integers first in ascending order, followed by non-prime integers in ascending order, and then strings in ascending order.", "code": "def sort_mixed_list_prime_first(mixed_list):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_ints = sorted([i for i in mixed_list if type(i) is int and is_prime(i)])\n    non_prime_ints = sorted([i for i in mixed_list if type(i) is int and not is_prime(i)])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return prime_ints + non_prime_ints + str_part", "task_id": "37_a645049c-2a32-46c3-9912-10345ffdf0aa", "test_setup_code": "", "test_list": ["assert sort_mixed_list_prime_first([3, 'apple', 2, 5, 'banana', 4, 1]) == [2, 3, 5, 1, 4, 'apple', 'banana']", "assert sort_mixed_list_prime_first([7, 6, 'orange', 11, 'grape', 8, 10]) == [7, 11, 6, 8, 10, 'grape', 'orange']", "assert sort_mixed_list_prime_first(['cat', 'dog', 13, 9, 2, 0, 'apple']) == [2, 13, 0, 9, 'apple', 'cat', 'dog']", "assert sort_mixed_list_prime_first([17, 'zebra', 19, 'apple', 22, 23, 'banana']) == [17, 19, 23, 22, 'apple', 'banana', 'zebra']"], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in reverse alphabetical order.", "code": "def sort_mixed_list_reverse_alpha(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], reverse=True)\n    return int_part + str_part", "task_id": "37_e73c10ca-b4eb-4d64-9041-5069b09524f6", "test_setup_code": "", "test_list": ["assert sort_mixed_list_reverse_alpha([3, 'apple', 1, 'banana', 2, 'cherry']) == [1, 2, 3, 'cherry', 'banana', 'apple']", "assert sort_mixed_list_reverse_alpha([10, 'zebra', 5, 'apple', 3, 'mango']) == [3, 5, 10, 'zebra', 'mango', 'apple']", "assert sort_mixed_list_reverse_alpha([7, 'dog', 'cat', 1, 4, 'elephant']) == [1, 4, 7, 'elephant', 'dog', 'cat']", "assert sort_mixed_list_reverse_alpha([0, 'banana', 'apple', -1, -5, 'cherry']) == [-5, -1, 0, 'cherry', 'banana', 'apple']"], "challenge_test_list": []}
{"text": "Write a function to filter positive numbers using a lambda function.", "code": "def filter_positive_numbers(nums):\n    positive_nums = list(filter(lambda x: x > 0, nums))\n    return positive_nums", "task_id": "41_4cb1a554-92c1-4fe5-9029-5d1a3fec52be", "test_setup_code": "", "test_list": ["assert filter_positive_numbers([1, -2, 3, -4, 5]) == [1, 3, 5]", "assert filter_positive_numbers([-1, -2, -3, -4, -5]) == []", "assert filter_positive_numbers([0, 2, 4, 6, 8]) == [2, 4, 6, 8]", "assert filter_positive_numbers([]) == []"], "challenge_test_list": []}
{"text": "Write a function to filter numbers that are multiples of three using a lambda function.", "code": "def filter_multiples_of_three(nums):\n    multiples_of_three = list(filter(lambda x: x % 3 == 0, nums))\n    return multiples_of_three", "task_id": "41_a597c544-dfe8-46f3-9eea-07bfee73acd6", "test_setup_code": "", "test_list": ["assert filter_multiples_of_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [3, 6, 9]", "assert filter_multiples_of_three([0, 3, 6, 9, 12, 15, 18, 21, 24, 27]) == [0, 3, 6, 9, 12, 15, 18, 21, 24, 27]", "assert filter_multiples_of_three([-3, -2, -1, 0, 1, 2, 3]) == [-3, 0, 3]", "assert filter_multiples_of_three([1, 2, 4, 5, 7, 8, 10]) == []"], "challenge_test_list": []}
{"text": "Write a function to filter strings that contain vowels using a lambda function.", "code": "def filter_strings_with_vowels(strings):\n    vowels = 'aeiouAEIOU'\n    strings_with_vowels = list(filter(lambda s: any(v in s for v in vowels), strings))\n    return strings_with_vowels", "task_id": "41_a986df47-3465-456a-a429-ebd53e7e8f54", "test_setup_code": "", "test_list": ["assert filter_strings_with_vowels(['apple', 'sky', 'orange', 'fly']) == ['apple', 'orange']", "assert filter_strings_with_vowels(['bcd', 'fgh', 'jkl']) == []", "assert filter_strings_with_vowels(['A', 'E', 'I', 'O', 'U']) == ['A', 'E', 'I', 'O', 'U']", "assert filter_strings_with_vowels(['', 'b', 'c', 'd', 'e']) == ['e']"], "challenge_test_list": []}
{"text": "Write a function to filter palindromic strings using a lambda function.", "code": "def filter_palindromes(strings):\n    palindromes = list(filter(lambda s: s == s[::-1], strings))\n    return palindromes", "task_id": "41_2d1c3f35-e397-4aa1-b85e-f58060c8bfa8", "test_setup_code": "", "test_list": ["assert filter_palindromes(['racecar', 'hello', 'level', 'world']) == ['racecar', 'level']", "assert filter_palindromes(['madam', 'noon', 'python', 'radar']) == ['madam', 'noon', 'radar']", "assert filter_palindromes(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']", "assert filter_palindromes(['', 'notapalindrome', 'wow', '']) == ['', 'wow', '']"], "challenge_test_list": []}
{"text": "Write a function to filter strings that are entirely uppercase using a lambda function.", "code": "def filter_uppercase_strings(strings):\n    uppercase_strings = list(filter(lambda s: s.isupper(), strings))\n    return uppercase_strings", "task_id": "41_d2a2f664-e02e-48d4-8fc6-4a76ca53337c", "test_setup_code": "", "test_list": ["assert filter_uppercase_strings(['HELLO', 'WORLD', 'Python', 'JAVA']) == ['HELLO', 'WORLD', 'JAVA']", "assert filter_uppercase_strings(['this', 'is', 'a', 'TEST']) == ['TEST']", "assert filter_uppercase_strings(['ALLCAPS', 'nocaps', 'MixedCase', '123', '']) == ['ALLCAPS']", "assert filter_uppercase_strings([]) == []"], "challenge_test_list": []}
{"text": "Write a function to filter strings longer than a given length using a lambda function.", "code": "def filter_long_strings(strings, length):\n    long_strings = list(filter(lambda s: len(s) > length, strings))\n    return long_strings", "task_id": "41_e3e1f241-3a15-4982-977e-5bfc0dc7d408", "test_setup_code": "", "test_list": ["assert filter_long_strings(['apple', 'banana', 'cherry', 'date'], 5) == ['banana', 'cherry']", "assert filter_long_strings(['a', 'ab', 'abc', 'abcd'], 2) == ['abc', 'abcd']", "assert filter_long_strings([], 3) == []", "assert filter_long_strings(['short', 'tiny', 'minuscule', 'small'], 6) == ['minuscule']"], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no two adjacent characters are the same.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 2 > len(s) + 1:\n        return False\n    return True", "task_id": "39_172dba18-0012-41db-8360-a7434dfb45d2", "test_setup_code": "", "test_list": ["assert can_rearrange('aabb') == True", "assert can_rearrange('aaab') == False", "assert can_rearrange('') == True", "assert can_rearrange('a') == True"], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that the same characters are at least k distance apart.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_with_k_distance(s: str, k: int) -> str:\n    if k == 0:\n        return s\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    queue = []\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        queue.append((freq + 1, char))\n        if len(queue) >= k:\n            freq, char = queue.pop(0)\n            if freq < 0:\n                heapq.heappush(max_heap, (freq, char))\n    return ''.join(result) if len(result) == len(s) else ''", "task_id": "39_0e8f13c6-105e-487f-99ab-4b8c3f2c77da", "test_setup_code": "", "test_list": ["assert rearrange_with_k_distance('aabbcc', 3) == 'abcabc'", "assert rearrange_with_k_distance('aaabc', 2) == 'abaca'", "assert rearrange_with_k_distance('aaadbbcc', 2) == 'abacabad'", "assert rearrange_with_k_distance('aa', 2) == 'aa'"], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string to form a palindrome if possible, otherwise return an empty string.", "code": "from collections import Counter\n\ndef rearrange_to_palindrome(s: str) -> str:\n    ctr = Counter(s)\n    odd_count = sum(1 for count in ctr.values() if count % 2 != 0)\n    if odd_count > 1:\n        return ''\n    half_palindrome = []\n    middle_char = ''\n    for char, count in ctr.items():\n        if count % 2 != 0:\n            middle_char = char\n        half_palindrome.extend(char * (count // 2))\n    return ''.join(half_palindrome) + middle_char + ''.join(half_palindrome[::-1])", "task_id": "39_afbb8e5c-5966-4115-9312-4c7f1e4ef2e7", "test_setup_code": "", "test_list": ["assert rearrange_to_palindrome('aabb') == 'abba'", "assert rearrange_to_palindrome('racecar') == 'racecar'", "assert rearrange_to_palindrome('abc') == ''", "assert rearrange_to_palindrome('aabbccdde') == ''"], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no character repeats more than twice consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_repeats(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 3 > len(s) + 2:\n        return False\n    return True", "task_id": "39_fb17be40-60be-4bb7-b657-62ac24505455", "test_setup_code": "", "test_list": ["assert can_rearrange_to_avoid_repeats('aabbcc') == True", "assert can_rearrange_to_avoid_repeats('aaab') == False", "assert can_rearrange_to_avoid_repeats('abcabc') == True", "assert can_rearrange_to_avoid_repeats('aaa') == False"], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no character repeats more than twice consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_repeats(s: str) -> str:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 3 > len(s) + 2:\n        return ''\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char1, char2])\n        if freq1 + 2 < 0:\n            heapq.heappush(max_heap, (freq1 + 2, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_e2adccc7-040b-4866-9284-ae673be90279", "test_setup_code": "", "test_list": ["assert rearrange_to_avoid_repeats('aaabbc') == 'ababac'", "assert rearrange_to_avoid_repeats('aaab') == ''", "assert rearrange_to_avoid_repeats('aabbcc') == 'abcabc'", "assert rearrange_to_avoid_repeats('a') == 'a'"], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no character repeats more than three times consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_triples(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 4 > len(s) + 3:\n        return False\n    return True", "task_id": "39_515d3883-a9d9-458f-87b0-b80d340f6087", "test_setup_code": "", "test_list": ["assert can_rearrange_to_avoid_triples('aaabb') == True", "assert can_rearrange_to_avoid_triples('aaabbbccc') == True", "assert can_rearrange_to_avoid_triples('aaaabbbb') == False", "assert can_rearrange_to_avoid_triples('aabbccddeeffgghh') == True"], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no character repeats more than three times consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_triples(s: str) -> str:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 4 > len(s) + 3:\n        return ''\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char1, char1, char2])\n        if freq1 + 3 < 0:\n            heapq.heappush(max_heap, (freq1 + 3, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_53ba7139-eaf2-439a-ac16-e268ada982bf", "test_setup_code": "", "test_list": ["assert rearrange_to_avoid_triples('aaabbb') == 'ababab'", "assert rearrange_to_avoid_triples('aaabb') == 'ababa'", "assert rearrange_to_avoid_triples('aaa') == 'aaa'", "assert rearrange_to_avoid_triples('aaabbbccc') == 'abcabcabc'"], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no two consecutive characters are vowels.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_consecutive_vowels(s: str) -> bool:\n    vowels = set('aeiouAEIOU')\n    ctr = Counter(s)\n    vowel_count = sum(ctr[char] for char in ctr if char in vowels)\n    non_vowel_count = len(s) - vowel_count\n    return vowel_count <= non_vowel_count + 1", "task_id": "39_4bfb7b03-1d8d-4607-882c-2fccc6869e41", "test_setup_code": "", "test_list": ["assert can_rearrange_to_avoid_consecutive_vowels('aabbcc') == True", "assert can_rearrange_to_avoid_consecutive_vowels('aaeiou') == False", "assert can_rearrange_to_avoid_consecutive_vowels('a') == True", "assert can_rearrange_to_avoid_consecutive_vowels('aeiouxyz') == True"], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no two consecutive characters are vowels.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_consecutive_vowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    ctr = Counter(s)\n    vowel_count = sum(ctr[char] for char in ctr if char in vowels)\n    non_vowel_count = len(s) - vowel_count\n    if vowel_count > non_vowel_count + 1:\n        return ''\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        if (char1 in vowels and char2 in vowels) or (char1 not in vowels and char2 not in vowels):\n            result.extend([char1, char2])\n        else:\n            result.extend([char1, char2])\n        if freq1 + 1 < 0:\n            heapq.heappush(max_heap, (freq1 + 1, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_d2d76c95-3052-42b3-8651-7b95ff6e92b3", "test_setup_code": "", "test_list": ["assert rearrange_to_avoid_consecutive_vowels('aabbcc') == 'abacbc' or rearrange_to_avoid_consecutive_vowels('aabbcc') == 'bacabc'", "assert rearrange_to_avoid_consecutive_vowels('aeiou') == ''", "assert rearrange_to_avoid_consecutive_vowels('aabbccddeeffgghhii') == 'abacbdcdefefghghii' or rearrange_to_avoid_consecutive_vowels('aabbccddeeffgghhii') == 'bacabdcdefefghghii'", "assert rearrange_to_avoid_consecutive_vowels('') == ''"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "100_7b272279-9d6b-4ba7-a3eb-fd06eefdff52", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(97) == True"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "100_ed274af7-4aee-49d0-ac05-d7c267597d76", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('The quick brown fox jumps over the lazy dog') == 'god yzal eht revo spmuj xof nworb kciuq ehT'", "assert reverse_string('Python is fun') == 'nuf si nohtyP'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string(' ') == ' '", "assert reverse_string('!') == '!'", "assert reverse_string('Palindrome') == 'emordnilaP'"], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "100_34087082-00ec-4bc0-a261-212845c98019", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "100_d7e30b61-2fe7-4402-9f37-8a8dc23d07cb", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(25) == 75025", "assert fibonacci(30) == 832040"], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "100_44f47797-9ad6-41e6-a422-02b4a03bfd0d", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('rat', 'car') == False", "assert is_anagram('anagram', 'nagaram') == True", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '1234') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abcd', 'dcba') == True", "assert is_anagram('abcd', 'abce') == False", "assert is_anagram('aabbccdd', 'abcdabcd') == True"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "100_6929d5e0-d16e-4920-ae33-e4de08014081", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(5) == 5", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(11111) == 5", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(10) == 1", "assert sum_of_digits(101010) == 3", "assert sum_of_digits(202020) == 6", "assert sum_of_digits(12345678901234567890) == 90", "assert sum_of_digits(2147483647) == 46", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(999999999) == 81"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "100_2dd3dd43-ac86-4d76-8fdd-45ba1a643ff7", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('!@#$%^&*()_+_)(*&^%$#@!') == True", "assert is_palindrome('racecar') == True", "assert is_palindrome('notapalindrome') == False"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "100_8f64a809-b05a-4213-9f12-ac4720fa9613", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(56, 98) == 14", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(1, 1) == 1", "assert gcd(25, 100) == 25", "assert gcd(17, 19) == 1", "assert gcd(270, 192) == 6", "assert gcd(123456, 789012) == 12", "assert gcd(20, 30) == 10", "assert gcd(7, 49) == 7", "assert gcd(35, 64) == 1", "assert gcd(81, 153) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a*b) // gcd(a, b)", "task_id": "100_2e92036a-6571-428f-a1fa-a95f0b41a85b", "test_setup_code": "", "test_list": ["assert lcm(1, 1) == 1", "assert lcm(2, 3) == 6", "assert lcm(4, 5) == 20", "assert lcm(6, 8) == 24", "assert lcm(7, 3) == 21", "assert lcm(10, 15) == 30", "assert lcm(9, 12) == 36", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(13, 17) == 221", "assert lcm(21, 6) == 42", "assert lcm(100, 25) == 100", "assert lcm(14, 28) == 28", "assert lcm(18, 24) == 72"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "100_9ac9d410-db24-4613-8bda-0eaa1c65ab17", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 5", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('aeiou') == 5", "assert count_vowels('AEIOU') == 5", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG') == 11", "assert count_vowels('12345') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('a1e2i3o4u5') == 5", "assert count_vowels('A1E2I3O4U5') == 5"], "challenge_test_list": []}
{"text": "Write a function to convert camel case string to snake case string.", "code": "def camel_to_snake(word):\n    import re\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()", "task_id": "102_19cacb0b-55f1-4a1f-a0d3-1f6f62c648f0", "test_setup_code": "", "test_list": ["assert camel_to_snake('camelCase') == 'camel_case'", "assert camel_to_snake('CamelCase') == 'camel_case'", "assert camel_to_snake('thisIsATest') == 'this_is_a_test'", "assert camel_to_snake('thisIsAnotherTest') == 'this_is_another_test'", "assert camel_to_snake('easy') == 'easy'", "assert camel_to_snake('Easy') == 'easy'", "assert camel_to_snake('') == ''", "assert camel_to_snake('a') == 'a'", "assert camel_to_snake('A') == 'a'", "assert camel_to_snake('camelCaseWithNumbers123') == 'camel_case_with_numbers123'", "assert camel_to_snake('CamelCaseWithNumbers123') == 'camel_case_with_numbers123'", "assert camel_to_snake('already_snake_case') == 'already_snake_case'", "assert camel_to_snake('multipleCAPSInARow') == 'multiple_caps_in_a_row'", "assert camel_to_snake('withSpecialCharacters!@#') == 'with_special_characters!@#'", "assert camel_to_snake('with123NumbersAndCAPS') == 'with123_numbers_and_caps'"], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given sentence.", "code": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])", "task_id": "102_685db32f-a59e-41dc-ac64-fd0b2fe13d95", "test_setup_code": "", "test_list": ["assert reverse_words('Hello world') == 'world Hello'", "assert reverse_words('The quick brown fox') == 'fox brown quick The'", "assert reverse_words('Python is fun') == 'fun is Python'", "assert reverse_words('a b c d e f g') == 'g f e d c b a'", "assert reverse_words('') == ''", "assert reverse_words('singleword') == 'singleword'", "assert reverse_words('  leading spaces') == 'spaces leading'", "assert reverse_words('trailing spaces  ') == 'spaces trailing'", "assert reverse_words('  multiple   spaces  ') == 'spaces multiple'", "assert reverse_words('word') == 'word'", "assert reverse_words('Two  spaces') == 'spaces Two'", "assert reverse_words('A B C D E') == 'E D C B A'", "assert reverse_words('1 2 3 4 5') == '5 4 3 2 1'", "assert reverse_words('Special characters !@#') == '!@# characters Special'", "assert reverse_words('Mix of UPPER and lower CASE') == 'CASE lower and UPPER of Mix'"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(word):\n    return word == word[::-1]", "task_id": "102_0787d2c2-da68-47be-a159-77c8e85c305d", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon no melon'.replace(' ', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(word):\n    return sum(1 for char in word if char.lower() in 'aeiou')", "task_id": "102_961ca736-18ec-49bf-ae94-2741169c3af0", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python Programming') == 4", "assert count_vowels('A quick movement of the enemy will jeopardize five gunboats') == 16", "assert count_vowels('1234567890') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels(' ') == 0", "assert count_vowels('a') == 1", "assert count_vowels('E') == 1", "assert count_vowels('Why do you ask?') == 4"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "102_a6186be5-170b-483e-986e-d3d9f23b7ad3", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 1, 1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([]) == []", "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert remove_duplicates(['a', 'b', 'b', 'c', 'a']) == ['a', 'b', 'c']", "assert remove_duplicates(['apple', 'banana', 'apple', 'orange', 'banana']) == ['apple', 'banana', 'orange']", "assert remove_duplicates([True, False, True, False, True]) == [True, False]", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates([1.1, 2.2, 2.2, 3.3, 4.4, 4.4]) == [1.1, 2.2, 3.3, 4.4]", "assert remove_duplicates([1, '1', 1, '1']) == [1, '1']", "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "102_2325ce15-cc66-4d89-b34d-27eb3de7d392", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(12) == 479001600", "assert factorial(15) == 1307674368000", "assert factorial(20) == 2432902008176640000", "assert factorial(25) == 15511210043330985984000000"], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "102_937d61b1-db65-408e-a114-cfa74cf2eb27", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(11) == 89", "assert fibonacci(12) == 144", "assert fibonacci(13) == 233", "assert fibonacci(14) == 377"], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)", "task_id": "102_de2f7a78-9af3-43f3-bca7-d449d498ed6b", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('abcd', 'dcba') == True", "assert is_anagram('abcd', 'abce') == False", "assert is_anagram('12345', '54321') == True", "assert is_anagram('12345', '5432') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abc', 'abcd') == False", "assert is_anagram('aabbccddeeff', 'ffeeddccbbaa') == True", "assert is_anagram('aabbccddeeff', 'ffeeddccbba') == False"], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "task_id": "102_65bbb6ca-3990-4a32-ba47-06ae85ec46b8", "test_setup_code": "", "test_list": ["assert flatten_list([1, [2, 3], [4, [5, 6]]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([]) == []", "assert flatten_list([1, 2, 3]) == [1, 2, 3]", "assert flatten_list([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([[[1]], 2, [3, [4, [5]]]]) == [1, 2, 3, 4, 5]", "assert flatten_list([1, [2, [3, [4, [5, [6]]]]]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([[[[[[1]]]]]]) == [1]", "assert flatten_list([1, 'a', [2, 'b'], [3, ['c', 4]]]) == [1, 'a', 2, 'b', 3, 'c', 4]", "assert flatten_list([[1, 2, [3, 4]], [5, 6, [7, 8]]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list([[], [1, 2, []], [3, [4, []]]]) == [1, 2, 3, 4]", "assert flatten_list([None, [None, [None]]]) == [None, None, None]", "assert flatten_list([1, [2, [3, [4, [5, [6, []]]]]]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([[], [], []]) == []", "assert flatten_list([['a', ['b', ['c']]], 'd']) == ['a', 'b', 'c', 'd']", "assert flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given sentence.", "code": "def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)", "task_id": "102_b2425744-87e1-449a-9101-57183100f89f", "test_setup_code": "", "test_list": ["assert longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'", "assert longest_word('Hello world') == 'Hello'", "assert longest_word('A journey of a thousand miles begins with a single step') == 'thousand'", "assert longest_word('To be or not to be that is the question') == 'question'", "assert longest_word('') == ''", "assert longest_word('One') == 'One'", "assert longest_word('Python programming is fun') == 'programming'", "assert longest_word('Short and sweet') == 'Short'", "assert longest_word('Supercalifragilisticexpialidocious is a long word') == 'Supercalifragilisticexpialidocious'", "assert longest_word('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == 'A'", "assert longest_word('123 4567 89 0') == '4567'", "assert longest_word('Spaces    between    words') == 'between'", "assert longest_word('Hyphenated-words are tricky') == 'Hyphenated-words'", "assert longest_word('Punctuation, should not affect the result!') == 'Punctuation,'", "assert longest_word('Mix of UPPER and lower CASE') == 'lower'"], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest element in the given array.", "code": "def kth_smallest_element(arr, k):\n  arr.sort()\n  return arr[k-1]", "task_id": "101_1a0f6f96-26cb-4905-89fc-d4cb17b32b0d", "test_setup_code": "", "test_list": ["assert kth_smallest_element([3, 1, 2], 1) == 1", "assert kth_smallest_element([3, 1, 2], 2) == 2", "assert kth_smallest_element([3, 1, 2], 3) == 3", "assert kth_smallest_element([5, 3, 8, 4, 2], 1) == 2", "assert kth_smallest_element([5, 3, 8, 4, 2], 3) == 4", "assert kth_smallest_element([5, 3, 8, 4, 2], 5) == 8", "assert kth_smallest_element([1, 2, 3, 4, 5], 3) == 3", "assert kth_smallest_element([5, 4, 3, 2, 1], 4) == 4", "assert kth_smallest_element([7, 10, 4, 3, 20, 15], 3) == 7", "assert kth_smallest_element([7, 10, 4, 3, 20, 15], 4) == 10", "assert kth_smallest_element([1], 1) == 1", "assert kth_smallest_element([9, 8, 7, 6, 5, 4, 3, 2, 1], 9) == 9", "assert kth_smallest_element([1, 1, 1, 1, 1], 3) == 1", "assert kth_smallest_element([2, 2, 2, 2, 2], 5) == 2", "assert kth_smallest_element([3, 1, 2, 4, 5, 6], 6) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the kth largest element in the given array.", "code": "def kth_largest_element(arr, k):\n  arr.sort(reverse=True)\n  return arr[k-1]", "task_id": "101_31841c28-283e-4e23-8afa-370f0e9dd4e7", "test_setup_code": "", "test_list": ["assert kth_largest_element([3, 2, 1, 5, 6, 4], 2) == 5", "assert kth_largest_element([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4", "assert kth_largest_element([1], 1) == 1", "assert kth_largest_element([1, 2], 1) == 2", "assert kth_largest_element([1, 2], 2) == 1", "assert kth_largest_element([7, 6, 5, 4, 3, 2, 1], 3) == 5", "assert kth_largest_element([1, 2, 3, 4, 5, 6, 7], 3) == 5", "assert kth_largest_element([5, 3, 1, 2, 4], 5) == 1", "assert kth_largest_element([5, 3, 1, 2, 4], 1) == 5", "assert kth_largest_element([5, 5, 5, 5, 5], 3) == 5", "assert kth_largest_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert kth_largest_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 10", "assert kth_largest_element([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 1", "assert kth_largest_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 6", "assert kth_largest_element([3, 2, 1, 5, 6, 4, 8, 7], 6) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the kth unique element in the given array.", "code": "def kth_unique_element(arr, k):\n  unique_elements = list(set(arr))\n  unique_elements.sort()\n  return unique_elements[k-1]", "task_id": "101_99eb7145-ad15-4e7d-b642-43c81c202679", "test_setup_code": "", "test_list": ["assert kth_unique_element([1, 2, 3, 4, 5], 1) == 1", "assert kth_unique_element([1, 2, 2, 3, 4, 4, 5], 3) == 3", "assert kth_unique_element([5, 4, 3, 2, 1], 2) == 2", "assert kth_unique_element([1, 1, 1, 1, 2], 2) == 2", "assert kth_unique_element([10, 20, 30, 40, 50], 5) == 50", "assert kth_unique_element([1, 2, 3, 4, 5], 5) == 5", "assert kth_unique_element([1, 2, 3, 4, 5], 3) == 3", "assert kth_unique_element([1, 2, 2, 3, 3, 4, 4, 5], 4) == 5", "assert kth_unique_element([7, 7, 7, 7, 7], 1) == 7", "assert kth_unique_element([3, 1, 4, 1, 5, 9, 2, 6, 5], 4) == 4", "assert kth_unique_element([1, 2, 3, 4, 5], 6) == None", "assert kth_unique_element([], 1) == None", "assert kth_unique_element([1], 1) == 1", "assert kth_unique_element([1, 2, 2, 3, 3, 4, 4, 5], 2) == 3", "assert kth_unique_element([1, 2, 2, 3, 3, 4, 4, 5], 5) == None"], "challenge_test_list": []}
{"text": "Write a function to find the kth even element in the given array.", "code": "def kth_even_element(arr, k):\n  even_elements = [x for x in arr if x % 2 == 0]\n  even_elements.sort()\n  return even_elements[k-1]", "task_id": "101_a881ca93-e3d0-4f0b-975d-58e0edec787a", "test_setup_code": "", "test_list": ["assert kth_even_element([1, 2, 3, 4, 5, 6], 1) == 2", "assert kth_even_element([1, 2, 3, 4, 5, 6], 2) == 4", "assert kth_even_element([1, 2, 3, 4, 5, 6], 3) == 6", "assert kth_even_element([10, 20, 30, 40, 50], 1) == 10", "assert kth_even_element([10, 20, 30, 40, 50], 5) == 50", "assert kth_even_element([1, 3, 5, 7, 9], 1) == None", "assert kth_even_element([2, 4, 6, 8, 10], 3) == 6", "assert kth_even_element([2, 4, 6, 8, 10], 5) == 10", "assert kth_even_element([2, 4, 6, 8, 10], 6) == None", "assert kth_even_element([], 1) == None", "assert kth_even_element([1, 3, 5, 7, 9], 0) == None", "assert kth_even_element([2, 4, 6, 8, 10], 0) == None", "assert kth_even_element([1, 2, 3, 4, 5, 6], -1) == None", "assert kth_even_element([2, 4, 6, 8, 10], 1) == 2", "assert kth_even_element([1, 2, 3, 4, 5, 6, 8, 10, 12], 4) == 8"], "challenge_test_list": []}
{"text": "Write a function to find the kth odd element in the given array.", "code": "def kth_odd_element(arr, k):\n  odd_elements = [x for x in arr if x % 2 != 0]\n  odd_elements.sort()\n  return odd_elements[k-1]", "task_id": "101_b6f8e14e-a505-43e3-ab56-6448c72fb478", "test_setup_code": "", "test_list": ["assert kth_odd_element([1, 2, 3, 4, 5], 1) == 1", "assert kth_odd_element([1, 2, 3, 4, 5], 2) == 3", "assert kth_odd_element([1, 2, 3, 4, 5], 3) == 5", "assert kth_odd_element([2, 4, 6, 8, 10], 1) == None", "assert kth_odd_element([1, 3, 5, 7, 9], 5) == 9", "assert kth_odd_element([1, 3, 5, 7, 9], 6) == None", "assert kth_odd_element([11, 13, 15, 17, 19], 3) == 15", "assert kth_odd_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 7", "assert kth_odd_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 9", "assert kth_odd_element([], 1) == None", "assert kth_odd_element([1], 1) == 1", "assert kth_odd_element([1], 2) == None", "assert kth_odd_element([2, 4, 6, 8, 1, 3, 5], 2) == 3", "assert kth_odd_element([2, 4, 6, 8, 1, 3, 5], 3) == 5", "assert kth_odd_element([1, 3, 5, 7, 9, 11, 13, 15], 8) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the kth prime element in the given array.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef kth_prime_element(arr, k):\n  prime_elements = [x for x in arr if is_prime(x)]\n  prime_elements.sort()\n  return prime_elements[k-1]", "task_id": "101_dc6974ce-8454-4c0e-b790-46188ce608b9", "test_setup_code": "", "test_list": ["assert kth_prime_element([2, 3, 5, 7, 11], 1) == 2", "assert kth_prime_element([2, 3, 5, 7, 11], 3) == 5", "assert kth_prime_element([10, 15, 20, 25], 1) == None", "assert kth_prime_element([29, 23, 19, 17, 13], 2) == 19", "assert kth_prime_element([1, 2, 3, 4, 5], 4) == None", "assert kth_prime_element([31, 37, 41, 43, 47], 5) == 47", "assert kth_prime_element([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 10) == 29", "assert kth_prime_element([4, 6, 8, 9, 10], 1) == None", "assert kth_prime_element([2, 3, 5, 7, 11], 6) == None", "assert kth_prime_element([7, 5, 3, 2], 2) == 5", "assert kth_prime_element([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 1) == 2", "assert kth_prime_element([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 5) == 11", "assert kth_prime_element([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 15) == None", "assert kth_prime_element([], 1) == None", "assert kth_prime_element([11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], 7) == 31"], "challenge_test_list": []}
{"text": "Write a function to find the kth negative element in the given array.", "code": "def kth_negative_element(arr, k):\n  negative_elements = [x for x in arr if x < 0]\n  negative_elements.sort()\n  return negative_elements[k-1]", "task_id": "101_7e9c8f22-f6b3-4518-940b-5af31d75d80d", "test_setup_code": "", "test_list": ["assert kth_negative_element([-1, -2, -3, -4, -5], 1) == -5", "assert kth_negative_element([-1, -2, -3, -4, -5], 5) == -1", "assert kth_negative_element([1, 2, 3, -1, -2, -3], 2) == -2", "assert kth_negative_element([0, -1, -2, -3, 4, 5], 3) == -1", "assert kth_negative_element([-10, -20, -30, -40, -50], 4) == -20", "assert kth_negative_element([1, 2, 3, 4, 5], 1) == None", "assert kth_negative_element([-1, -2, -3, -4, -5, 0, 1, 2, 3], 3) == -3", "assert kth_negative_element([-1, -2, -3, -4, -5], 6) == None", "assert kth_negative_element([], 1) == None", "assert kth_negative_element([1, -1, 2, -2, 3, -3], 3) == -1", "assert kth_negative_element([-1, -2, -3, -4, -5], 0) == None", "assert kth_negative_element([1, -1, 2, -2, 3, -3], 1) == -3", "assert kth_negative_element([-1, -2, -3, -4, -5], 2) == -4", "assert kth_negative_element([1, 2, 3, 4, 5], 0) == None", "assert kth_negative_element([-1, -2, -3, -4, -5], 3) == -3"], "challenge_test_list": []}
{"text": "Write a function to find the kth positive element in the given array.", "code": "def kth_positive_element(arr, k):\n  positive_elements = [x for x in arr if x > 0]\n  positive_elements.sort()\n  return positive_elements[k-1]", "task_id": "101_d12d6ffa-4b0a-4cc2-9411-96c588a4c956", "test_setup_code": "", "test_list": ["assert kth_positive_element([1, 2, 3, 4, 5], 1) == 1", "assert kth_positive_element([1, 2, 3, 4, 5], 5) == 5", "assert kth_positive_element([-1, -2, 3, 4, 5], 1) == 3", "assert kth_positive_element([-1, -2, 3, 4, 5], 3) == 5", "assert kth_positive_element([0, 0, 0, 0, 1], 1) == 1", "assert kth_positive_element([0, 0, 0, 0, 1], 2) == None", "assert kth_positive_element([1, 2, 3, 4, 5], 0) == None", "assert kth_positive_element([1, 2, 3, 4, 5], 6) == None", "assert kth_positive_element([1, -1, 2, -2, 3, -3], 2) == 2", "assert kth_positive_element([1, -1, 2, -2, 3, -3], 3) == 3", "assert kth_positive_element([1, 2, 3, 4, 5], 3) == 3", "assert kth_positive_element([5, 4, 3, 2, 1], 2) == 2", "assert kth_positive_element([5, 4, 3, 2, 1], 4) == 4", "assert kth_positive_element([1, 2, 3, 4, 5], 4) == 4", "assert kth_positive_element([-1, -2, -3, -4, -5], 1) == None"], "challenge_test_list": []}
{"text": "Write a function to find the kth element in the given array after removing all occurrences of x.", "code": "def kth_element_after_removal(arr, k, x):\n  filtered_elements = [elem for elem in arr if elem != x]\n  filtered_elements.sort()\n  return filtered_elements[k-1]", "task_id": "101_4bc942ea-38ff-49e8-9d30-e0ff64ae4d96", "test_setup_code": "", "test_list": ["assert kth_element_after_removal([1, 2, 3, 4, 5], 2, 3) == 2", "assert kth_element_after_removal([1, 2, 2, 2, 3, 4, 5], 3, 2) == 4", "assert kth_element_after_removal([5, 4, 3, 2, 1], 1, 5) == 1", "assert kth_element_after_removal([1, 2, 3, 4, 5], 5, 1) == 5", "assert kth_element_after_removal([1, 1, 1, 1, 1], 1, 1) == None", "assert kth_element_after_removal([10, 20, 30, 40, 50], 2, 20) == 30", "assert kth_element_after_removal([1, 2, 3, 4, 5], 3, 6) == 3", "assert kth_element_after_removal([1, 3, 3, 3, 5], 1, 3) == 1", "assert kth_element_after_removal([1, 2, 3, 4, 5], 1, 2) == 1", "assert kth_element_after_removal([1, 2, 3, 4, 5], 4, 3) == 5", "assert kth_element_after_removal([1, 2, 3, 4, 5], 0, 3) == None", "assert kth_element_after_removal([], 1, 1) == None", "assert kth_element_after_removal([1, 2, 3, 4, 5], 3, 5) == 3", "assert kth_element_after_removal([1, 2, 2, 3, 4, 5], 2, 2) == 3", "assert kth_element_after_removal([1, 2, 3, 4, 5], 6, 3) == None"], "challenge_test_list": []}
{"text": "Write a function to find the kth element in the subarray defined by start and end indices.", "code": "def kth_element_in_subarray(arr, start, end, k):\n  subarray = arr[start:end+1]\n  subarray.sort()\n  return subarray[k-1]", "task_id": "101_69bd7c11-1e12-45bc-a5a3-32242838e986", "test_setup_code": "", "test_list": ["assert kth_element_in_subarray([1, 5, 2, 4, 3], 1, 3, 2) == 4", "assert kth_element_in_subarray([7, 10, 4, 3, 20, 15], 0, 5, 3) == 10", "assert kth_element_in_subarray([7, 10, 4, 3, 20, 15], 1, 4, 1) == 3", "assert kth_element_in_subarray([7, 10, 4, 3, 20, 15], 1, 4, 4) == 20", "assert kth_element_in_subarray([1, 2, 3, 4, 5], 0, 4, 5) == 5", "assert kth_element_in_subarray([1, 2, 3, 4, 5], 0, 4, 1) == 1", "assert kth_element_in_subarray([1, 2, 3, 4, 5], 2, 4, 2) == 4", "assert kth_element_in_subarray([5, 4, 3, 2, 1], 0, 4, 3) == 3", "assert kth_element_in_subarray([5, 4, 3, 2, 1], 1, 3, 2) == 3", "assert kth_element_in_subarray([1, 3, 3, 3, 5], 1, 3, 2) == 3", "assert kth_element_in_subarray([1, 3, 3, 3, 5], 1, 3, 3) == 3", "assert kth_element_in_subarray([1, 3, 3, 3, 5], 1, 4, 4) == 5", "assert kth_element_in_subarray([1, 3, 3, 3, 5], 2, 2, 1) == 3", "assert kth_element_in_subarray([1], 0, 0, 1) == 1", "assert kth_element_in_subarray([5, 2, 9, 1, 5, 6], 2, 5, 3) == 6"], "challenge_test_list": []}
{"text": "Write a function to reverse each sublist in a given list of lists.", "code": "def reverse_sublists(input_list):\n    result = [x[::-1] for x in input_list]\n    return result", "task_id": "104_eb51d1f5-6ed8-47ef-a9ff-c5c011c9a31c", "test_setup_code": "", "test_list": ["assert reverse_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[3, 2, 1], [6, 5, 4], [9, 8, 7]]", "assert reverse_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]) == [['c', 'b', 'a'], ['f', 'e', 'd'], ['i', 'h', 'g']]", "assert reverse_sublists([[1], [2], [3]]) == [[1], [2], [3]]", "assert reverse_sublists([[1, 2], [3, 4], [5, 6]]) == [[2, 1], [4, 3], [6, 5]]", "assert reverse_sublists([[], [], []]) == [[], [], []]", "assert reverse_sublists([[1, 2, 3, 4], [5, 6, 7, 8]]) == [[4, 3, 2, 1], [8, 7, 6, 5]]", "assert reverse_sublists([[1, 2], [], [3, 4, 5]]) == [[2, 1], [], [5, 4, 3]]", "assert reverse_sublists([[1, 2, 3]]) == [[3, 2, 1]]", "assert reverse_sublists([[1, 2, 3], [4, 5], [6]]) == [[3, 2, 1], [5, 4], [6]]", "assert reverse_sublists([['a'], ['b'], ['c']]) == [['a'], ['b'], ['c']]", "assert reverse_sublists([[1, 2, 3], [4, 5, 6], []]) == [[3, 2, 1], [6, 5, 4], []]", "assert reverse_sublists([[1, 2, 3], [], [4, 5, 6]]) == [[3, 2, 1], [], [6, 5, 4]]", "assert reverse_sublists([[], [1, 2, 3], [4, 5, 6]]) == [[], [3, 2, 1], [6, 5, 4]]", "assert reverse_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [[3, 2, 1], [6, 5, 4], [10, 9, 8, 7]]", "assert reverse_sublists([['a', 'b'], ['c', 'd', 'e'], ['f']]) == [['b', 'a'], ['e', 'd', 'c'], ['f']]"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of each sublist in a given list of lists.", "code": "def sum_sublists(input_list):\n    result = [sum(x) for x in input_list]\n    return result", "task_id": "104_bd76fade-77d7-4b5f-9436-df532f4a79be", "test_setup_code": "", "test_list": ["assert sum_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [6, 15, 24]", "assert sum_sublists([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-6, -15, -24]", "assert sum_sublists([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert sum_sublists([[1], [2], [3]]) == [1, 2, 3]", "assert sum_sublists([[1, -1], [2, -2], [3, -3]]) == [0, 0, 0]", "assert sum_sublists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [10, 26, 42]", "assert sum_sublists([[]]) == [0]", "assert sum_sublists([[], [1, 2, 3], []]) == [0, 6, 0]", "assert sum_sublists([[100, 200, 300], [400, 500, 600], [700, 800, 900]]) == [600, 1500, 2400]", "assert sum_sublists([[0.1, 0.2, 0.3], [0.4, 0.5, 0.6], [0.7, 0.8, 0.9]]) == [0.6, 1.5, 2.4]", "assert sum_sublists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [3, 7, 11, 15]", "assert sum_sublists([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [6, 9, 6, 34]", "assert sum_sublists([[1, -1, 1, -1], [2, -2, 2, -2], [3, -3, 3, -3]]) == [0, 0, 0]", "assert sum_sublists([[1000, 2000, 3000], [4000, 5000, 6000], [7000, 8000, 9000]]) == [6000, 15000, 24000]", "assert sum_sublists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]]) == [15, 40, 65]"], "challenge_test_list": []}
{"text": "Write a function to filter out odd numbers from each sublist in a given list of lists.", "code": "def filter_even_sublists(input_list):\n    result = [[num for num in x if num % 2 == 0] for x in input_list]\n    return result", "task_id": "104_1f8877c0-1a81-4005-b4a8-9036bebf5b6f", "test_setup_code": "", "test_list": ["assert filter_even_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[2], [4, 6], [8]]", "assert filter_even_sublists([[10, 15, 20], [25, 30, 35], [40, 45, 50]]) == [[10, 20], [30], [40, 50]]", "assert filter_even_sublists([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == [[2, 4, 6], [8, 10, 12], [14, 16, 18]]", "assert filter_even_sublists([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == [[], [], []]", "assert filter_even_sublists([[], [], []]) == [[], [], []]", "assert filter_even_sublists([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == [[0, 2], [4], [6, 8]]", "assert filter_even_sublists([[1], [2], [3], [4], [5], [6]]) == [[], [2], [], [4], [], [6]]", "assert filter_even_sublists([[11, 22, 33], [44, 55, 66], [77, 88, 99]]) == [[22], [44, 66], [88]]", "assert filter_even_sublists([[100, 101, 102], [103, 104, 105], [106, 107, 108]]) == [[100, 102], [104], [106, 108]]", "assert filter_even_sublists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == [[2, 4], [6, 8, 10]]", "assert filter_even_sublists([[0], [0], [0]]) == [[0], [0], [0]]", "assert filter_even_sublists([[2, 4, 6, 8, 10], [1, 3, 5, 7, 9]]) == [[2, 4, 6, 8, 10], []]", "assert filter_even_sublists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [[2], [4], [6], [8], [10]]", "assert filter_even_sublists([[12, 14, 16], [18, 20, 22], [24, 26, 28]]) == [[12, 14, 16], [18, 20, 22], [24, 26, 28]]", "assert filter_even_sublists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[], [2, 2, 2], []]"], "challenge_test_list": []}
{"text": "Write a function to compute the length of each sublist in a given list of lists.", "code": "def length_of_sublists(input_list):\n    result = [len(x) for x in input_list]\n    return result", "task_id": "104_8c1cdde2-7657-45f2-a62f-daf9401debab", "test_setup_code": "", "test_list": ["assert length_of_sublists([[1, 2, 3], [4, 5], [6]]) == [3, 2, 1]", "assert length_of_sublists([[], [1], [1, 2, 3, 4]]) == [0, 1, 4]", "assert length_of_sublists([[1, 2], [], [3, 4, 5, 6], [7]]) == [2, 0, 4, 1]", "assert length_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 3, 3]", "assert length_of_sublists([[], [], []]) == [0, 0, 0]", "assert length_of_sublists([[1], [2], [3], [4]]) == [1, 1, 1, 1]", "assert length_of_sublists([[1, 2, 3, 4, 5], [6, 7, 8], [9]]) == [5, 3, 1]", "assert length_of_sublists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [2, 2, 2, 2, 2]", "assert length_of_sublists([[1, 2, 3], [], [4, 5, 6, 7], [8, 9]]) == [3, 0, 4, 2]", "assert length_of_sublists([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [1, 2, 3, 4]", "assert length_of_sublists([[1, 2, 3, 4], [5, 6, 7], [8, 9], [10]]) == [4, 3, 2, 1]", "assert length_of_sublists([[], [1, 2, 3], [], [4, 5, 6, 7, 8]]) == [0, 3, 0, 5]", "assert length_of_sublists([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]) == [10]", "assert length_of_sublists([[], [1, 2], [], [], [3, 4, 5]]) == [0, 2, 0, 0, 3]", "assert length_of_sublists([[1], [], [2, 3, 4], [5, 6], [], [7, 8, 9, 10]]) == [1, 0, 3, 2, 0, 4]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list_of_lists(input_list):\n    result = [item for sublist in input_list for item in sublist]\n    return result", "task_id": "104_eadd9cd2-8e96-4891-b250-ba0d46258388", "test_setup_code": "", "test_list": ["assert flatten_list_of_lists([[1, 2, 3], [4, 5], [6]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_lists([[], [1, 2], [], [3, 4, 5]]) == [1, 2, 3, 4, 5]", "assert flatten_list_of_lists([[1], [2], [3], [4]]) == [1, 2, 3, 4]", "assert flatten_list_of_lists([[], [], []]) == []", "assert flatten_list_of_lists([[1, 2, 3]]) == [1, 2, 3]", "assert flatten_list_of_lists([[1], [2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_lists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list_of_lists([[1, 2], [], [3, 4], [], [5, 6], []]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_lists([[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert flatten_list_of_lists([[1], [2, 3], [4, 5], [6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert flatten_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert flatten_list_of_lists([[1], [2], [3], [4], [5], [6], [7], [8], [9], [10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert flatten_list_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert flatten_list_of_lists([[], [1], [], [2], [], [3], [], [4], [], [5], []]) == [1, 2, 3, 4, 5]", "assert flatten_list_of_lists([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in each sublist of a given list of lists.", "code": "def max_in_sublists(input_list):\n    result = [max(x) for x in input_list]\n    return result", "task_id": "104_c0249b24-228e-4cc6-8bbc-d5a45dbb0145", "test_setup_code": "", "test_list": ["assert max_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 6, 9]", "assert max_in_sublists([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [30, 60, 90]", "assert max_in_sublists([[1], [2], [3]]) == [1, 2, 3]", "assert max_in_sublists([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-1, -4, -7]", "assert max_in_sublists([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert max_in_sublists([[100], [200], [300]]) == [100, 200, 300]", "assert max_in_sublists([[1, 2], [3, 4], [5, 6]]) == [2, 4, 6]", "assert max_in_sublists([[1, 2, 3], [3, 2, 1], [2, 3, 1]]) == [3, 3, 3]", "assert max_in_sublists([[1, 2, 3, 4], [4, 3, 2, 1], [2, 3, 4, 1]]) == [4, 4, 4]", "assert max_in_sublists([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) == [5, 5, 5]", "assert max_in_sublists([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]", "assert max_in_sublists([[1, 2, 3], [], [4, 5, 6]]) == [3, None, 6]", "assert max_in_sublists([[], [], []]) == [None, None, None]", "assert max_in_sublists([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == [0, -3, -6]", "assert max_in_sublists([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 3, 5, 7, 9]]) == [5, 5, 9]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in each sublist of a given list of lists.", "code": "def min_in_sublists(input_list):\n    result = [min(x) for x in input_list]\n    return result", "task_id": "104_19dc281c-c709-4a50-9de6-380b47387c5e", "test_setup_code": "", "test_list": ["assert min_in_sublists([[3, 1, 2], [7, 5, 6], [9, 8, 4]]) == [1, 5, 4]", "assert min_in_sublists([[10, 20, 30], [40, 50, 60], [70, 80, 90]]) == [10, 40, 70]", "assert min_in_sublists([[1], [2], [3]]) == [1, 2, 3]", "assert min_in_sublists([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-3, -6, -9]", "assert min_in_sublists([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert min_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]", "assert min_in_sublists([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) == [5, 5, 5]", "assert min_in_sublists([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]", "assert min_in_sublists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 5, 9]", "assert min_in_sublists([[100, 200, 300], [400, 500, 600], [700, 800, 900]]) == [100, 400, 700]", "assert min_in_sublists([[1, -1], [2, -2], [3, -3]]) == [-1, -2, -3]", "assert min_in_sublists([[3, 3, 3], [2, 2, 2], [1, 1, 1]]) == [3, 2, 1]", "assert min_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 0]]) == [1, 4, 0]", "assert min_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, -1]]) == [1, 4, -1]", "assert min_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12]]) == [1, 4, 7]"], "challenge_test_list": []}
{"text": "Write a function to compute the product of each sublist in a given list of lists.", "code": "from functools import reduce\n\ndef product_of_sublists(input_list):\n    result = [reduce(lambda a, b: a * b, x) for x in input_list]\n    return result", "task_id": "104_020251fa-5168-4e37-a599-61cb59e63710", "test_setup_code": "", "test_list": ["assert product_of_sublists([[1, 2, 3], [4, 5, 6]]) == [6, 120]", "assert product_of_sublists([[1, 2], [3, 4], [5, 6]]) == [2, 12, 30]", "assert product_of_sublists([[1], [2], [3]]) == [1, 2, 3]", "assert product_of_sublists([[0, 1, 2], [3, 4, 5]]) == [0, 60]", "assert product_of_sublists([[1, -1], [2, -2], [3, -3]]) == [-1, -4, -9]", "assert product_of_sublists([[1, 2, 3, 4], [5, 6, 7, 8]]) == [24, 1680]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [6, 120, 504]", "assert product_of_sublists([[1, 2, 3], [0], [7, 8, 9]]) == [6, 0, 504]", "assert product_of_sublists([[10, 20, 30], [40, 50, 60]]) == [6000, 120000]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 0]]) == [6, 120, 0]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == [6, 120, 5040]", "assert product_of_sublists([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [1, 8, 27]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [0, 0, 0]]) == [6, 120, 0]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, -9]]) == [6, 120, -504]", "assert product_of_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == [6, 120, 55440]"], "challenge_test_list": []}
{"text": "Write a function to sort each sublist of strings in a given list of lists by the length of the strings.", "code": "def sort_sublists_by_length(input_list):\n    result = [sorted(x, key = lambda x: len(x)) for x in input_list]\n    return result", "task_id": "104_14c3482c-1ba1-4577-bf3f-6404ff6696a7", "test_setup_code": "", "test_list": ["assert sort_sublists_by_length([['apple', 'banana', 'cherry'], ['dog', 'cat', 'elephant']]) == [['dog', 'cat', 'elephant'], ['dog', 'cat', 'elephant']]", "assert sort_sublists_by_length([['a', 'bb', 'ccc'], ['dddd', 'ee', 'f']]) == [['a', 'bb', 'ccc'], ['f', 'ee', 'dddd']]", "assert sort_sublists_by_length([['short', 'tiny', 'minuscule'], ['big', 'huge', 'gigantic']]) == [['tiny', 'short', 'minuscule'], ['big', 'huge', 'gigantic']]", "assert sort_sublists_by_length([['one', 'two', 'three'], ['four', 'five', 'six']]) == [['one', 'two', 'three'], ['four', 'five', 'six']]", "assert sort_sublists_by_length([['a'], ['b', 'c', 'd']]) == [['a'], ['b', 'c', 'd']]", "assert sort_sublists_by_length([[''], ['a', 'ab', 'abc']]) == [[''], ['a', 'ab', 'abc']]", "assert sort_sublists_by_length([['same', 'size', 'test'], ['one', 'two', 'six']]) == [['same', 'size', 'test'], ['one', 'two', 'six']]", "assert sort_sublists_by_length([['longest', 'longer', 'long'], ['short', 'shorter', 'shortest']]) == [['long', 'longer', 'longest'], ['short', 'shorter', 'shortest']]", "assert sort_sublists_by_length([['a', 'ab', 'abc', 'abcd'], ['abcd', 'abc', 'ab', 'a']]) == [['a', 'ab', 'abc', 'abcd'], ['a', 'ab', 'abc', 'abcd']]", "assert sort_sublists_by_length([['abc', 'def', 'ghi'], ['jkl', 'mno', 'pqr']]) == [['abc', 'def', 'ghi'], ['jkl', 'mno', 'pqr']]", "assert sort_sublists_by_length([['one', 'three', 'two'], ['four', 'five', 'six']]) == [['one', 'two', 'three'], ['four', 'five', 'six']]", "assert sort_sublists_by_length([['a', 'longword', 'short'], ['tiny', 'big', 'huge']]) == [['a', 'short', 'longword'], ['big', 'tiny', 'huge']]", "assert sort_sublists_by_length([['a', 'aa', 'aaa'], ['aaaa', 'aaaaa', 'aaaaaa']]) == [['a', 'aa', 'aaa'], ['aaaa', 'aaaaa', 'aaaaaa']]", "assert sort_sublists_by_length([['word', 'longerword', 'short'], ['tiny', 'big', 'huge']]) == [['word', 'short', 'longerword'], ['big', 'tiny', 'huge']]", "assert sort_sublists_by_length([['one', 'two', 'three'], ['four', 'five', 'six', 'seven']]) == [['one', 'two', 'three'], ['four', 'five', 'six', 'seven']]"], "challenge_test_list": []}
{"text": "Write a function to concatenate the strings in each sublist of a given list of lists.", "code": "def concatenate_sublists(input_list):\n    result = [''.join(x) for x in input_list]\n    return result", "task_id": "104_b5a717ba-968a-4704-80d6-f098ee90c934", "test_setup_code": "", "test_list": ["assert concatenate_sublists([['a', 'b'], ['c', 'd']]) == ['ab', 'cd']", "assert concatenate_sublists([['hello', 'world'], ['foo', 'bar']]) == ['helloworld', 'foobar']", "assert concatenate_sublists([[''], ['']]) == ['', '']", "assert concatenate_sublists([['a'], ['b']]) == ['a', 'b']", "assert concatenate_sublists([['a', 'b', 'c'], ['d', 'e', 'f']]) == ['abc', 'def']", "assert concatenate_sublists([['1', '2', '3'], ['4', '5', '6']]) == ['123', '456']", "assert concatenate_sublists([['a', ''], ['', 'b']]) == ['a', 'b']", "assert concatenate_sublists([['a', 'b'], []]) == ['ab', '']", "assert concatenate_sublists([['', ''], ['']]) == ['', '']", "assert concatenate_sublists([['a', 'b', 'c'], []]) == ['abc', '']", "assert concatenate_sublists([['longstring1', 'longstring2'], ['anotherlongstring']]) == ['longstring1longstring2', 'anotherlongstring']", "assert concatenate_sublists([['a', 'b', 'c'], ['d', 'e', 'f', 'g']]) == ['abc', 'defg']", "assert concatenate_sublists([['a', 'b'], ['c', 'd', 'e']]) == ['ab', 'cde']", "assert concatenate_sublists([[], []]) == ['', '']", "assert concatenate_sublists([['a'], ['b', 'c', 'd']]) == ['a', 'bcd']"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in the given list.", "code": "def count_odds(lst):\n    return sum(1 for x in lst if x % 2 != 0)", "task_id": "105_45f6ede8-5a16-4b52-91f3-e063d1cbaaae", "test_setup_code": "", "test_list": ["assert count_odds([1, 2, 3, 4, 5]) == 3", "assert count_odds([2, 4, 6, 8, 10]) == 0", "assert count_odds([1, 3, 5, 7, 9]) == 5", "assert count_odds([]) == 0", "assert count_odds([0, 2, 4, 6, 8, 10]) == 0", "assert count_odds([1]) == 1", "assert count_odds([2]) == 0", "assert count_odds([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_odds([11, 13, 15, 17, 19, 21, 23, 25, 27, 29]) == 10", "assert count_odds([-1, -3, -5, -7, -9]) == 5", "assert count_odds([-2, -4, -6, -8, -10]) == 0", "assert count_odds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_odds([100, 101, 102, 103, 104, 105]) == 3", "assert count_odds([0, -1, -2, -3, -4, -5]) == 3", "assert count_odds([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in the given list.", "code": "def count_evens(lst):\n    return sum(1 for x in lst if x % 2 == 0)", "task_id": "105_acde9a3b-1a76-4f98-bb95-e8aedf71e599", "test_setup_code": "", "test_list": ["assert count_evens([1, 2, 3, 4, 5, 6]) == 3", "assert count_evens([1, 3, 5, 7, 9]) == 0", "assert count_evens([2, 4, 6, 8, 10]) == 5", "assert count_evens([]) == 0", "assert count_evens([0]) == 1", "assert count_evens([1]) == 0", "assert count_evens([2]) == 1", "assert count_evens([-2, -4, -6, -8, -10]) == 5", "assert count_evens([-1, -3, -5, -7, -9]) == 0", "assert count_evens([100, 101, 102, 103, 104]) == 3", "assert count_evens([1, 2, 2, 3, 4, 4, 5, 6, 6]) == 6", "assert count_evens([10**6, 10**7, 10**8]) == 2", "assert count_evens([10**6 + 1, 10**7 + 1, 10**8 + 1]) == 0", "assert count_evens([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 10", "assert count_evens([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in the given list.", "code": "def count_positive(lst):\n    return sum(1 for x in lst if x > 0)", "task_id": "105_41603c08-2ed1-4b20-8c33-21cfd4d5d197", "test_setup_code": "", "test_list": ["assert count_positive([1, -2, 3, 4, -5]) == 3", "assert count_positive([0, -1, -2, -3, -4]) == 0", "assert count_positive([10, 20, 30, 40, 50]) == 5", "assert count_positive([]) == 0", "assert count_positive([-10, -20, -30, -40, -50]) == 0", "assert count_positive([1]) == 1", "assert count_positive([-1]) == 0", "assert count_positive([0]) == 0", "assert count_positive([1, 1, 1, 1, 1]) == 5", "assert count_positive([1, -1, 1, -1, 1]) == 3", "assert count_positive([100, -100, 0, 50, -50]) == 2", "assert count_positive([0, 0, 0, 0, 0]) == 0", "assert count_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert count_positive([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 0", "assert count_positive([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in the given list.", "code": "def count_negative(lst):\n    return sum(1 for x in lst if x < 0)", "task_id": "105_09010adc-55a9-4564-9187-0b2129104cf4", "test_setup_code": "", "test_list": ["assert count_negative([1, -2, -3, 4, 5]) == 2", "assert count_negative([]) == 0", "assert count_negative([0, 1, 2, 3, 4]) == 0", "assert count_negative([-1, -2, -3, -4, -5]) == 5", "assert count_negative([0, -1, 1, -2, 2, -3, 3]) == 3", "assert count_negative([100, -100, 200, -200, 300, -300]) == 3", "assert count_negative([0]) == 0", "assert count_negative([-1]) == 1", "assert count_negative([1]) == 0", "assert count_negative([1, 2, 3, 4, 5]) == 0", "assert count_negative([-1, -1, -1, -1, -1]) == 5", "assert count_negative([0, 0, 0, 0, 0]) == 0", "assert count_negative([-1, 0, 1, -1, 0, 1, -1, 0, 1]) == 3", "assert count_negative([-10, -20, -30, -40, -50, 60, 70, 80, 90, 100]) == 5", "assert count_negative([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "105_37c8a992-80fa-447e-8c00-537f1119b980", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('aeiou') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python Programming') == 4", "assert count_vowels('1234567890') == 0", "assert count_vowels('!@#$%^&*()_+') == 0", "assert count_vowels('A quick movement of the enemy will jeopardize five gunboats') == 15", "assert count_vowels('Glib jocks quiz nymph to vex dwarf') == 5", "assert count_vowels('Pack my box with five dozen liquor jugs') == 11", "assert count_vowels('How razorback-jumping frogs can level six piqued gymnasts!') == 14", "assert count_vowels('Cozy lummox gives smart squid who asks for job pen') == 11"], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in the given string.", "code": "def count_uppercase(s):\n    return sum(1 for char in s if char.isupper())", "task_id": "105_8a40fa22-7ec8-4522-af7a-99d8f784d160", "test_setup_code": "", "test_list": ["assert count_uppercase('Hello World') == 2", "assert count_uppercase('HELLO') == 5", "assert count_uppercase('hello') == 0", "assert count_uppercase('') == 0", "assert count_uppercase('12345') == 0", "assert count_uppercase('123ABCdef') == 3", "assert count_uppercase('A') == 1", "assert count_uppercase('a') == 0", "assert count_uppercase('AaBbCc') == 3", "assert count_uppercase('UPPERCASE') == 9", "assert count_uppercase('lowercase') == 0", "assert count_uppercase('MiXeD CaSe') == 4", "assert count_uppercase('NoUppercaseHere') == 1", "assert count_uppercase('UPPER lower') == 5", "assert count_uppercase('12345!@#$%') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in the given string.", "code": "def count_lowercase(s):\n    return sum(1 for char in s if char.islower())", "task_id": "105_c7cc1da1-f227-4c71-909c-e2cd6690ef11", "test_setup_code": "", "test_list": ["assert count_lowercase('hello world') == 9", "assert count_lowercase('HELLO WORLD') == 0", "assert count_lowercase('12345') == 0", "assert count_lowercase('') == 0", "assert count_lowercase('a') == 1", "assert count_lowercase('A') == 0", "assert count_lowercase('aA') == 1", "assert count_lowercase('Aa') == 1", "assert count_lowercase('abcDEFghi') == 6", "assert count_lowercase('abc123DEFghi456') == 6", "assert count_lowercase('!@#$%^&*()') == 0", "assert count_lowercase('a!b@c#d$e%f^g&h*i(j)k') == 11", "assert count_lowercase('The Quick Brown Fox Jumps Over The Lazy Dog') == 24", "assert count_lowercase('Python3.8') == 5", "assert count_lowercase('lowerCASE') == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in the given string.", "code": "def count_spaces(s):\n    return sum(1 for char in s if char == ' ')", "task_id": "105_1da894f0-ea8c-4d14-88c2-840ceb1e6e5a", "test_setup_code": "", "test_list": ["assert count_spaces('hello world') == 1", "assert count_spaces('') == 0", "assert count_spaces(' ') == 1", "assert count_spaces('a b c d e f g') == 6", "assert count_spaces('no_spaces_here') == 0", "assert count_spaces('   leading spaces') == 3", "assert count_spaces('trailing spaces   ') == 3", "assert count_spaces('multiple   spaces   in   between') == 8", "assert count_spaces('one space at the end ') == 1", "assert count_spaces(' one space at the start') == 1", "assert count_spaces('   ') == 3", "assert count_spaces('a b c') == 2", "assert count_spaces('a  b  c') == 4", "assert count_spaces('a b  c   d') == 6", "assert count_spaces('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 25"], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic strings in the given list.", "code": "def count_palindromes(lst):\n    return sum(1 for s in lst if s == s[::-1])", "task_id": "105_3398486b-84fc-4f5c-8dfd-8371f3ac278e", "test_setup_code": "", "test_list": ["assert count_palindromes(['racecar', 'level', 'hello', 'world']) == 2", "assert count_palindromes(['madam', 'noon', 'civic', 'radar', 'deified']) == 5", "assert count_palindromes(['apple', 'banana', 'cherry']) == 0", "assert count_palindromes(['a', 'b', 'c', 'd', 'e']) == 5", "assert count_palindromes(['', 'a', 'aa', 'aaa', 'aaaa']) == 5", "assert count_palindromes(['palindrome', 'notapalindrome', 'almostomla']) == 0", "assert count_palindromes(['12321', '45654', '78987']) == 3", "assert count_palindromes(['123', '456', '789']) == 0", "assert count_palindromes(['Was it a car or a cat I saw', 'A man a plan a canal Panama']) == 0", "assert count_palindromes(['A Santa at NASA', 'Eva can I see bees in a cave']) == 0", "assert count_palindromes(['']) == 1", "assert count_palindromes(['a', 'aa', 'aaa', 'aaaaa', 'aaaa']) == 5", "assert count_palindromes(['rotor', 'motor', 'level', 'reviver', 'deified']) == 4", "assert count_palindromes(['step on no pets', 'top spot', 'not a palindrome']) == 0", "assert count_palindromes(['bob', 'anna', 'otto', 'eve', 'wow']) == 5"], "challenge_test_list": []}
{"text": "Write a function to compute the binomial coefficient C(n, k).", "code": "def binomial_coefficient(n: int, k: int) -> int:\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)", "task_id": "103_262c415a-c3c1-4a2c-bce5-26cd8fe08684", "test_setup_code": "", "test_list": ["assert binomial_coefficient(0, 0) == 1", "assert binomial_coefficient(1, 0) == 1", "assert binomial_coefficient(1, 1) == 1", "assert binomial_coefficient(2, 0) == 1", "assert binomial_coefficient(2, 1) == 2", "assert binomial_coefficient(2, 2) == 1", "assert binomial_coefficient(3, 0) == 1", "assert binomial_coefficient(3, 1) == 3", "assert binomial_coefficient(3, 2) == 3", "assert binomial_coefficient(3, 3) == 1", "assert binomial_coefficient(4, 2) == 6", "assert binomial_coefficient(5, 2) == 10", "assert binomial_coefficient(5, 3) == 10", "assert binomial_coefficient(6, 3) == 20", "assert binomial_coefficient(10, 5) == 252"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "103_4e984589-9a54-459e-8233-78a287155e41", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(25) == 75025", "assert fibonacci(30) == 832040"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Catalan number.", "code": "def catalan_number(n: int) -> int:\n    if n == 0:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res", "task_id": "103_9b9f10db-fcbd-4182-a9b2-d5be8b383794", "test_setup_code": "", "test_list": ["assert catalan_number(0) == 1", "assert catalan_number(1) == 1", "assert catalan_number(2) == 2", "assert catalan_number(3) == 5", "assert catalan_number(4) == 14", "assert catalan_number(5) == 42", "assert catalan_number(6) == 132", "assert catalan_number(7) == 429", "assert catalan_number(8) == 1430", "assert catalan_number(9) == 4862", "assert catalan_number(10) == 16796", "assert catalan_number(11) == 58786", "assert catalan_number(12) == 208012", "assert catalan_number(13) == 742900", "assert catalan_number(14) == 2674440"], "challenge_test_list": []}
{"text": "Write a function to generate the nth row of Pascal's triangle.", "code": "def pascal_triangle_row(n: int) -> list[int]:\n    row = [1]\n    for k in range(1, n+1):\n        row.append(row[-1] * (n - k + 1) // k)\n    return row", "task_id": "103_95fedd18-50e8-4c13-b96a-2d0ec2a69f03", "test_setup_code": "", "test_list": ["assert pascal_triangle_row(0) == [1]", "assert pascal_triangle_row(1) == [1, 1]", "assert pascal_triangle_row(2) == [1, 2, 1]", "assert pascal_triangle_row(3) == [1, 3, 3, 1]", "assert pascal_triangle_row(4) == [1, 4, 6, 4, 1]", "assert pascal_triangle_row(5) == [1, 5, 10, 10, 5, 1]", "assert pascal_triangle_row(6) == [1, 6, 15, 20, 15, 6, 1]", "assert pascal_triangle_row(7) == [1, 7, 21, 35, 35, 21, 7, 1]", "assert pascal_triangle_row(8) == [1, 8, 28, 56, 70, 56, 28, 8, 1]", "assert pascal_triangle_row(9) == [1, 9, 36, 84, 126, 126, 84, 36, 9, 1]", "assert pascal_triangle_row(10) == [1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1]", "assert pascal_triangle_row(15) == [1, 15, 105, 455, 1365, 3003, 5005, 6435, 6435, 5005, 3003, 1365, 455, 105, 15, 1]", "assert pascal_triangle_row(20) == [1, 20, 190, 1140, 4845, 15504, 38760, 77520, 125970, 167960, 184756, 167960, 125970, 77520, 38760, 15504, 4845, 1140, 190, 20, 1]", "assert pascal_triangle_row(25) == [1, 25, 300, 2300, 12650, 53130, 177100, 480700, 1081575, 2042975, 3268760, 4457400, 5200300, 4457400, 3268760, 2042975, 1081575, 480700, 177100, 53130, 12650, 2300, 300, 25, 1]", "assert pascal_triangle_row(30) == [1, 30, 435, 4060, 27405, 142506, 593775, 2035800, 5852925, 14307150, 30045015, 54627300, 86493225, 119759850, 145422675, 155117520, 145422675, 119759850, 86493225, 54627300, 30045015, 14307150, 5852925, 2035800, 593775, 142506, 27405, 4060, 435, 30, 1]"], "challenge_test_list": []}
{"text": "Write a function to compute the Stirling number of the second kind S(n, k).", "code": "def stirling_number(n: int, k: int) -> int:\n    if n == k == 0:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    return k * stirling_number(n-1, k) + stirling_number(n-1, k-1)", "task_id": "103_db38a205-21ca-44ae-b51d-7079d7c12902", "test_setup_code": "", "test_list": ["assert stirling_number(0, 0) == 1", "assert stirling_number(1, 1) == 1", "assert stirling_number(2, 1) == 1", "assert stirling_number(2, 2) == 1", "assert stirling_number(3, 1) == 1", "assert stirling_number(3, 2) == 3", "assert stirling_number(3, 3) == 1", "assert stirling_number(4, 1) == 1", "assert stirling_number(4, 2) == 7", "assert stirling_number(4, 3) == 6", "assert stirling_number(4, 4) == 1", "assert stirling_number(5, 1) == 1", "assert stirling_number(5, 2) == 15", "assert stirling_number(5, 3) == 25", "assert stirling_number(5, 4) == 10", "assert stirling_number(5, 5) == 1"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Bell number.", "code": "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "task_id": "103_41738053-60a6-4829-9acb-95fa5594588a", "test_setup_code": "", "test_list": ["assert bell_number(0) == 1", "assert bell_number(1) == 1", "assert bell_number(2) == 2", "assert bell_number(3) == 5", "assert bell_number(4) == 15", "assert bell_number(5) == 52", "assert bell_number(6) == 203", "assert bell_number(7) == 877", "assert bell_number(8) == 4140", "assert bell_number(9) == 21147", "assert bell_number(10) == 115975", "assert bell_number(11) == 678570", "assert bell_number(12) == 4213597", "assert bell_number(13) == 27644437", "assert bell_number(14) == 190899322"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Motzkin number.", "code": "def motzkin_number(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    motzkin = [0] * (n + 1)\n    motzkin[0], motzkin[1] = 1, 1\n    for i in range(2, n + 1):\n        motzkin[i] = ((2 * i + 1) * motzkin[i - 1] + (3 * i - 3) * motzkin[i - 2]) // (i + 2)\n    return motzkin[n]", "task_id": "103_8a594b70-cc73-4f8f-9960-52be433a6efe", "test_setup_code": "", "test_list": ["assert motzkin_number(0) == 1", "assert motzkin_number(1) == 1", "assert motzkin_number(2) == 2", "assert motzkin_number(3) == 4", "assert motzkin_number(4) == 9", "assert motzkin_number(5) == 21", "assert motzkin_number(6) == 51", "assert motzkin_number(7) == 127", "assert motzkin_number(8) == 323", "assert motzkin_number(9) == 835", "assert motzkin_number(10) == 2188", "assert motzkin_number(15) == 272497", "assert motzkin_number(20) == 12751240", "assert motzkin_number(25) == 598602682", "assert motzkin_number(30) == 281895309883"], "challenge_test_list": []}
{"text": "Write a function to compute the number of derangements (permutations with no fixed points) of n items.", "code": "def derangement(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))", "task_id": "103_3710f6ad-4260-41ca-a974-b567ac47d72c", "test_setup_code": "", "test_list": ["assert derangement(0) == 1", "assert derangement(1) == 0", "assert derangement(2) == 1", "assert derangement(3) == 2", "assert derangement(4) == 9", "assert derangement(5) == 44", "assert derangement(6) == 265", "assert derangement(7) == 1854", "assert derangement(8) == 14833", "assert derangement(9) == 133496", "assert derangement(10) == 1334961", "assert derangement(11) == 14684570", "assert derangement(12) == 176214841", "assert derangement(13) == 2290792932", "assert derangement(14) == 32071101049"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Lucas number.", "code": "def lucas_number(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return lucas_number(n-1) + lucas_number(n-2)", "task_id": "103_eea0ede7-3731-4bcb-b430-8ccb65db34ce", "test_setup_code": "", "test_list": ["assert lucas_number(0) == 2", "assert lucas_number(1) == 1", "assert lucas_number(2) == 3", "assert lucas_number(3) == 4", "assert lucas_number(4) == 7", "assert lucas_number(5) == 11", "assert lucas_number(6) == 18", "assert lucas_number(7) == 29", "assert lucas_number(8) == 47", "assert lucas_number(9) == 76", "assert lucas_number(10) == 123", "assert lucas_number(11) == 199", "assert lucas_number(12) == 322", "assert lucas_number(13) == 521", "assert lucas_number(14) == 843"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Tribonacci number.", "code": "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)", "task_id": "103_89878fcf-a3ec-484d-9bbe-f672f1a5da52", "test_setup_code": "", "test_list": ["assert tribonacci(0) == 0", "assert tribonacci(1) == 1", "assert tribonacci(2) == 1", "assert tribonacci(3) == 2", "assert tribonacci(4) == 4", "assert tribonacci(5) == 7", "assert tribonacci(6) == 13", "assert tribonacci(7) == 24", "assert tribonacci(8) == 44", "assert tribonacci(9) == 81", "assert tribonacci(10) == 149", "assert tribonacci(11) == 274", "assert tribonacci(12) == 504", "assert tribonacci(13) == 927", "assert tribonacci(14) == 1705"], "challenge_test_list": []}
{"text": "Write a function to multiply each element of the given list with the corresponding element of the given tuple.", "code": "def multiply_elements(test_list, test_tup):\n    res = tuple(a * b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_1cf76e51-94ef-4a8d-aa44-4fe44f511871", "test_setup_code": "", "test_list": ["assert multiply_elements([1, 2, 3], (4, 5, 6)) == (4, 10, 18)", "assert multiply_elements([0, 0, 0], (1, 2, 3)) == (0, 0, 0)", "assert multiply_elements([1, -2, 3], (4, 5, -6)) == (4, -10, -18)", "assert multiply_elements([1, 2], (3, 4)) == (3, 8)", "assert multiply_elements([1], (2,)) == (2,)", "assert multiply_elements([], ()) == ()", "assert multiply_elements([1, 2, 3, 4], (5, 6, 7, 8)) == (5, 12, 21, 32)", "assert multiply_elements([1, 2, 3], (1, 1, 1)) == (1, 2, 3)", "assert multiply_elements([1, 2, 3], (0, 0, 0)) == (0, 0, 0)", "assert multiply_elements([100, 200, 300], (1, 2, 3)) == (100, 400, 900)", "assert multiply_elements([1.5, 2.5, 3.5], (2, 2, 2)) == (3.0, 5.0, 7.0)", "assert multiply_elements([1, 2, 3], (1.5, 2.5, 3.5)) == (1.5, 5.0, 10.5)", "assert multiply_elements([1, 2, 3, 4, 5], (5, 4, 3, 2, 1)) == (5, 8, 9, 8, 5)", "assert multiply_elements([1, 2, 3], (10, 100, 1000)) == (10, 200, 3000)", "assert multiply_elements([1, 2, 3], (1, 2)) == (1, 4)"], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of the given list with the corresponding element of the given tuple.", "code": "def concatenate_elements(test_list, test_tup):\n    res = tuple(str(a) + str(b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_13c389c9-38df-4bd6-8c10-86fdb2c31ce1", "test_setup_code": "", "test_list": ["assert concatenate_elements(['a', 'b', 'c'], ('1', '2', '3')) == ('a1', 'b2', 'c3')", "assert concatenate_elements(['hello', 'world'], ('123', '456')) == ('hello123', 'world456')", "assert concatenate_elements(['x', 'y'], ('1', '2', '3')) == ('x1', 'y2')", "assert concatenate_elements(['apple', 'banana'], ('', '')) == ('apple', 'banana')", "assert concatenate_elements([], ()) == ()", "assert concatenate_elements(['a'], ('1',)) == ('a1')", "assert concatenate_elements(['a', 'b'], ('1',)) == ('a1',)", "assert concatenate_elements(['a'], ('1', '2')) == ('a1',)", "assert concatenate_elements(['', ''], ('1', '2')) == ('1', '2')", "assert concatenate_elements(['a', 'b', 'c'], ('1', '2')) == ('a1', 'b2')", "assert concatenate_elements(['123', '456'], ('abc', 'def')) == ('123abc', '456def')", "assert concatenate_elements(['a', 'b', 'c'], ('', '', '')) == ('a', 'b', 'c')", "assert concatenate_elements(['', '', ''], ('1', '2', '3')) == ('1', '2', '3')", "assert concatenate_elements(['a', 'b', 'c'], ('1', '2', '3', '4')) == ('a1', 'b2', 'c3')", "assert concatenate_elements(['1', '2', '3'], ('a', 'b', 'c')) == ('1a', '2b', '3c')"], "challenge_test_list": []}
{"text": "Write a function to add a given constant to each element of the given list and tuple.", "code": "def add_constant_to_elements(test_list, test_tup, constant):\n    res = tuple(a + constant for a in test_list + list(test_tup))\n    return res", "task_id": "106_bee938a5-83cb-411b-bb32-3eb514445b58", "test_setup_code": "", "test_list": ["assert add_constant_to_elements([1, 2, 3], (4, 5, 6), 1) == (2, 3, 4, 5, 6, 7)", "assert add_constant_to_elements([], (), 10) == ()", "assert add_constant_to_elements([0], (0,), 0) == (0, 0)", "assert add_constant_to_elements([-1, -2, -3], (-4, -5, -6), 5) == (4, 3, 2, 1, 0, -1)", "assert add_constant_to_elements([100, 200], (300, 400), -100) == (0, 100, 200, 300)", "assert add_constant_to_elements([1], (2,), 3) == (4, 5)", "assert add_constant_to_elements([1, 1, 1], (1, 1, 1), 1) == (2, 2, 2, 2, 2, 2)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), 0) == (1, 2, 3, 4, 5, 6)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), -1) == (0, 1, 2, 3, 4, 5)", "assert add_constant_to_elements([0, 0, 0], (0, 0, 0), 100) == (100, 100, 100, 100, 100, 100)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), 1000000) == (1000001, 1000002, 1000003, 1000004, 1000005, 1000006)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), -1000000) == (-999999, -999998, -999997, -999996, -999995, -999994)", "assert add_constant_to_elements([1.5, 2.5], (3.5, 4.5), 1.5) == (3.0, 4.0, 5.0, 6.0)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), 1.5) == (2.5, 3.5, 4.5, 5.5, 6.5, 7.5)", "assert add_constant_to_elements([1, 2, 3], (4, 5, 6), -1.5) == (-0.5, 0.5, 1.5, 2.5, 3.5, 4.5)"], "challenge_test_list": []}
{"text": "Write a function to subtract each element of the given tuple from the corresponding element of the given list.", "code": "def subtract_elements(test_list, test_tup):\n    res = tuple(a - b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_cbe0f788-02fb-4c26-ae8c-668df68f621b", "test_setup_code": "", "test_list": ["assert subtract_elements([5, 10, 15], (1, 2, 3)) == (4, 8, 12)", "assert subtract_elements([0, 0, 0], (0, 0, 0)) == (0, 0, 0)", "assert subtract_elements([1, 2, 3], (1, 2, 3)) == (0, 0, 0)", "assert subtract_elements([100, 200, 300], (50, 50, 50)) == (50, 150, 250)", "assert subtract_elements([-1, -2, -3], (-1, -2, -3)) == (0, 0, 0)", "assert subtract_elements([1, 2, 3], (-1, -2, -3)) == (2, 4, 6)", "assert subtract_elements([0], (0)) == (0,)", "assert subtract_elements([1000, 2000, 3000], (500, 1500, 2500)) == (500, 500, 500)", "assert subtract_elements([1, 1, 1], (0, 0, 0)) == (1, 1, 1)", "assert subtract_elements([0, 0, 0], (1, 1, 1)) == (-1, -1, -1)", "assert subtract_elements([10, 20, 30], (5, 10, 15)) == (5, 10, 15)", "assert subtract_elements([1, 2, 3, 4], (1, 2, 3, 4)) == (0, 0, 0, 0)", "assert subtract_elements([100, 200], (50, 100)) == (50, 100)", "assert subtract_elements([1, 2], (2, 1)) == (-1, 1)", "assert subtract_elements([0, 0, 0, 0], (0, 0, 0, 0)) == (0, 0, 0, 0)"], "challenge_test_list": []}
{"text": "Write a function to divide each element of the given list by the corresponding element of the given tuple.", "code": "def divide_elements(test_list, test_tup):\n    res = tuple(a / b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e1288e2a-c8b8-4868-abd4-64e5afb5984c", "test_setup_code": "", "test_list": ["assert divide_elements([10, 20, 30], (2, 4, 6)) == (5.0, 5.0, 5.0)", "assert divide_elements([1, 2, 3], (1, 1, 1)) == (1.0, 2.0, 3.0)", "assert divide_elements([0, 0, 0], (1, 2, 3)) == (0.0, 0.0, 0.0)", "assert divide_elements([10, 20, 30], (10, 10, 10)) == (1.0, 2.0, 3.0)", "assert divide_elements([100, 200, 300], (10, 20, 30)) == (10.0, 10.0, 10.0)", "assert divide_elements([1, 2, 3], (3, 2, 1)) == (0.3333333333333333, 1.0, 3.0)", "assert divide_elements([1, -2, 3], (1, -2, 1)) == (1.0, 1.0, 3.0)", "assert divide_elements([1, 2, 3], (1, 2, 0.5)) == (1.0, 1.0, 6.0)", "assert divide_elements([1, 2, 3], (0.5, 0.25, 0.125)) == (2.0, 8.0, 24.0)", "assert divide_elements([10, 20, 30], (1, 2, 3)) == (10.0, 10.0, 10.0)", "assert divide_elements([0, 0, 0], (1, 1, 1)) == (0.0, 0.0, 0.0)", "assert divide_elements([1, 2, 3], (1, 2, 3)) == (1.0, 1.0, 1.0)", "assert divide_elements([1, 2, 3], (1, 2, 4)) == (1.0, 1.0, 0.75)", "assert divide_elements([1, 2, 3], (3, 2, 1)) == (0.3333333333333333, 1.0, 3.0)", "assert divide_elements([1, 2, 3], (1, 2, 3)) == (1.0, 1.0, 1.0)"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of each element of the given list by the corresponding element of the given tuple.", "code": "def mod_elements(test_list, test_tup):\n    res = tuple(a % b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_fae1f0e7-fa06-4ae5-8f22-174f2af6415c", "test_setup_code": "", "test_list": ["assert mod_elements([10, 20, 30], (3, 4, 5)) == (1, 0, 0)", "assert mod_elements([1, 2, 3], (1, 1, 1)) == (0, 0, 0)", "assert mod_elements([0, 0, 0], (1, 2, 3)) == (0, 0, 0)", "assert mod_elements([10, 15, 25], (2, 3, 4)) == (0, 0, 1)", "assert mod_elements([100, 200, 300], (10, 20, 30)) == (0, 0, 0)", "assert mod_elements([5, 10, 15], (6, 7, 8)) == (5, 3, 7)", "assert mod_elements([9, 18, 27], (2, 3, 4)) == (1, 0, 3)", "assert mod_elements([13, 26, 39], (5, 5, 5)) == (3, 1, 4)", "assert mod_elements([7, 14, 21], (3, 4, 5)) == (1, 2, 1)", "assert mod_elements([10, 20, 30], (1, 2, 3)) == (0, 0, 0)", "assert mod_elements([0, 1, 2], (1, 1, 1)) == (0, 0, 0)", "assert mod_elements([100, 200, 300], (3, 4, 5)) == (1, 0, 0)", "assert mod_elements([50, 75, 100], (7, 8, 9)) == (1, 3, 1)", "assert mod_elements([18, 27, 36], (4, 5, 6)) == (2, 2, 0)", "assert mod_elements([11, 22, 33], (2, 3, 4)) == (1, 1, 1)"], "challenge_test_list": []}
{"text": "Write a function to raise each element of the given list to the power of the corresponding element of the given tuple.", "code": "def power_elements(test_list, test_tup):\n    res = tuple(a ** b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_6c63f53a-313b-44db-a6da-fb9f334e7a5f", "test_setup_code": "", "test_list": ["assert power_elements([2, 3, 4], (1, 2, 3)) == (2, 9, 64)", "assert power_elements([1, 2, 3], (0, 0, 0)) == (1, 1, 1)", "assert power_elements([0, 0, 0], (1, 2, 3)) == (0, 0, 0)", "assert power_elements([2, 3, 4], (3, 2, 1)) == (8, 9, 4)", "assert power_elements([5, 6, 7], (2, 2, 2)) == (25, 36, 49)", "assert power_elements([10, 20, 30], (1, 1, 1)) == (10, 20, 30)", "assert power_elements([1, 2, 3], (3, 2, 1)) == (1, 4, 3)", "assert power_elements([2, 3, 4], (0, 1, 2)) == (1, 3, 16)", "assert power_elements([1, 2, 3], (4, 5, 6)) == (1, 32, 729)", "assert power_elements([0, 1, 2], (3, 2, 1)) == (0, 1, 2)", "assert power_elements([2, 3, 4], (2, 2, 2)) == (4, 9, 16)", "assert power_elements([1, 2, 3], (1, 2, 3)) == (1, 4, 27)", "assert power_elements([2, 3, 4], (3, 0, 1)) == (8, 1, 4)", "assert power_elements([5, 5, 5], (1, 2, 3)) == (5, 25, 125)", "assert power_elements([2, 2, 2], (2, 2, 2)) == (4, 4, 4)"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of each element of the given list and the corresponding element of the given tuple.", "code": "def max_elements(test_list, test_tup):\n    res = tuple(max(a, b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e35923f3-ce4e-43f6-aa12-cbb2f45d0d73", "test_setup_code": "", "test_list": ["assert max_elements([1, 2, 3], (3, 2, 1)) == (3, 2, 3)", "assert max_elements([5, 6, 7], (1, 6, 8)) == (5, 6, 8)", "assert max_elements([0, 0, 0], (0, 0, 0)) == (0, 0, 0)", "assert max_elements([10, 20, 30], (5, 25, 35)) == (10, 25, 35)", "assert max_elements([1, 1, 1], (2, 2, 2)) == (2, 2, 2)", "assert max_elements([100, 200, 300], (300, 200, 100)) == (300, 200, 300)", "assert max_elements([1, 2], (3, 4)) == (3, 4)", "assert max_elements([5], (10,)) == (10,)", "assert max_elements([7, 8, 9, 10], (6, 7, 8, 9)) == (7, 8, 9, 10)", "assert max_elements([0, -1, -2], (-3, -2, -1)) == (0, -1, -1)", "assert max_elements([1, 2, 3], (3, 2, 3)) == (3, 2, 3)", "assert max_elements([1, 2, 3], (1, 2, 3)) == (1, 2, 3)", "assert max_elements([1, 2, 3], (4, 5, 6)) == (4, 5, 6)", "assert max_elements([10, 20, 30], (30, 20, 10)) == (30, 20, 30)", "assert max_elements([1, 2, 3, 4], (4, 3, 2, 1)) == (4, 3, 3, 4)"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of each element of the given list and the corresponding element of the given tuple.", "code": "def min_elements(test_list, test_tup):\n    res = tuple(min(a, b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_f75a9e4c-d01a-4e42-bf0a-d563364bdf62", "test_setup_code": "", "test_list": ["assert min_elements([1, 2, 3], (3, 2, 1)) == (1, 2, 1)", "assert min_elements([5, 6, 7], (2, 8, 9)) == (2, 6, 7)", "assert min_elements([10, 20, 30], (5, 25, 35)) == (5, 20, 30)", "assert min_elements([0, -1, -2], (1, -2, -3)) == (0, -2, -3)", "assert min_elements([100, 200, 300], (150, 250, 350)) == (100, 200, 300)", "assert min_elements([1, 2], (3, 4)) == (1, 2)", "assert min_elements([5, 6, 7, 8], (2, 3, 4, 5)) == (2, 3, 4, 5)", "assert min_elements([1, 2, 3, 4, 5], (5, 4, 3, 2, 1)) == (1, 2, 3, 2, 1)", "assert min_elements([0, 0, 0], (0, 0, 0)) == (0, 0, 0)", "assert min_elements([1, 1, 1], (1, 1, 1)) == (1, 1, 1)", "assert min_elements([1, 2, 3], (1, 2, 3)) == (1, 2, 3)", "assert min_elements([1, 2, 3], (3, 2, 1)) == (1, 2, 1)", "assert min_elements([-1, -2, -3], (-3, -2, -1)) == (-3, -2, -3)", "assert min_elements([0, 1, 2], (2, 1, 0)) == (0, 1, 0)", "assert min_elements([10, 20, 30], (30, 20, 10)) == (10, 20, 10)"], "challenge_test_list": []}
{"text": "Write a function to sum each element of the given list with the corresponding element of the given tuple.", "code": "def sum_elements(test_list, test_tup):\n    res = tuple(a + b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e1603cc9-7fec-43bf-a0ce-c76cd8cb4492", "test_setup_code": "", "test_list": ["assert sum_elements([1, 2, 3], (4, 5, 6)) == (5, 7, 9)", "assert sum_elements([0, 0, 0], (0, 0, 0)) == (0, 0, 0)", "assert sum_elements([-1, -2, -3], (1, 2, 3)) == (0, 0, 0)", "assert sum_elements([1, 2], (3, 4)) == (4, 6)", "assert sum_elements([1], (2,)) == (3,)", "assert sum_elements([100, 200, 300], (400, 500, 600)) == (500, 700, 900)", "assert sum_elements([1.5, 2.5, 3.5], (4.5, 5.5, 6.5)) == (6.0, 8.0, 10.0)", "assert sum_elements([1, 2, 3, 4], (5, 6, 7, 8)) == (6, 8, 10, 12)", "assert sum_elements([1, 2, 3], (4, 5, 6, 7)) == (5, 7, 9)", "assert sum_elements([1, 2, 3, 4], (5, 6, 7)) == (6, 8, 10)", "assert sum_elements([], ()) == ()", "assert sum_elements([1, 2, 3], (0, 0, 0)) == (1, 2, 3)", "assert sum_elements([0, 0, 0], (1, 2, 3)) == (1, 2, 3)", "assert sum_elements([1, -1, 1], (-1, 1, -1)) == (0, 0, 0)", "assert sum_elements([1, 2, 3], (4, 5, 6, 7, 8)) == (5, 7, 9)"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list using heap queue algorithm.", "code": "import heapq\n\ndef merge_sorted_lists(*lists):\n    return list(heapq.merge(*lists))", "task_id": "108_7fa44468-7534-4435-961e-2387b353c705", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists([1], [2], [3]) == [1, 2, 3]", "assert merge_sorted_lists([1, 4, 7], [2, 5, 8], [3, 6, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists([1, 3, 5], [2, 4, 6], [0, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([1, 2, 3], [], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([], [], []) == []", "assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists([-3, -2, -1], [0, 1, 2]) == [-3, -2, -1, 0, 1, 2]", "assert merge_sorted_lists([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3]", "assert merge_sorted_lists([5, 10, 15], [3, 8, 13], [1, 6, 11]) == [1, 3, 5, 6, 8, 10, 11, 13, 15]", "assert merge_sorted_lists([1, 2], [3, 4], [5, 6], [0, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert merge_sorted_lists([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([1], [2], [3], [4], [5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted dictionaries into a single sorted dictionary.", "code": "def merge_sorted_dicts(dict1, dict2):\n    merged = {**dict1, **dict2}\n    return dict(sorted(merged.items()))", "task_id": "108_da80762f-c654-4e20-8b46-51afc7f396fe", "test_setup_code": "", "test_list": ["assert merge_sorted_dicts({}, {}) == {}", "assert merge_sorted_dicts({'a': 1}, {}) == {'a': 1}", "assert merge_sorted_dicts({}, {'b': 2}) == {'b': 2}", "assert merge_sorted_dicts({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}", "assert merge_sorted_dicts({'b': 2}, {'a': 1}) == {'a': 1, 'b': 2}", "assert merge_sorted_dicts({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert merge_sorted_dicts({'c': 3, 'd': 4}, {'a': 1, 'b': 2}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert merge_sorted_dicts({'a': 1, 'c': 3}, {'b': 2, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert merge_sorted_dicts({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == {'a': 3, 'b': 2, 'c': 4}", "assert merge_sorted_dicts({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == {'a': 1, 'b': 2}", "assert merge_sorted_dicts({'a': 2}, {'a': 1}) == {'a': 1}", "assert merge_sorted_dicts({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "assert merge_sorted_dicts({'d': 4, 'e': 5}, {'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "assert merge_sorted_dicts({'a': 1, 'b': 2, 'c': 3}, {'c': 4, 'd': 5}) == {'a': 1, 'b': 2, 'c': 4, 'd': 5}", "assert merge_sorted_dicts({'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted strings into a single sorted string.", "code": "def merge_sorted_strings(str1, str2):\n    return ''.join(sorted(str1 + str2))", "task_id": "108_136fe294-9c41-4fe7-b786-9116fccddbac", "test_setup_code": "", "test_list": ["assert merge_sorted_strings('abc', 'def') == 'abcdef'", "assert merge_sorted_strings('ace', 'bdf') == 'abcdef'", "assert merge_sorted_strings('a', 'b') == 'ab'", "assert merge_sorted_strings('', '') == ''", "assert merge_sorted_strings('a', '') == 'a'", "assert merge_sorted_strings('', 'b') == 'b'", "assert merge_sorted_strings('abc', 'abc') == 'aabbcc'", "assert merge_sorted_strings('xyz', 'abc') == 'abcxyz'", "assert merge_sorted_strings('aabbcc', 'ddeeff') == 'aabbccddeeff'", "assert merge_sorted_strings('z', 'a') == 'az'", "assert merge_sorted_strings('hello', 'world') == 'dehllloorw'", "assert merge_sorted_strings('123', '456') == '123456'", "assert merge_sorted_strings('!@#', '$%^') == '!#$%@^'", "assert merge_sorted_strings('AaBbCc', 'DdEeFf') == 'ABCDEFabcdef'", "assert merge_sorted_strings('longstring', 'short') == 'ghilnnoorsttr'"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted tuples into a single sorted tuple.", "code": "def merge_sorted_tuples(tup1, tup2):\n    return tuple(sorted(tup1 + tup2))", "task_id": "108_3877603f-80f9-4efd-b4c6-20d8af867770", "test_setup_code": "", "test_list": ["assert merge_sorted_tuples((1, 3, 5), (2, 4, 6)) == (1, 2, 3, 4, 5, 6)", "assert merge_sorted_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)", "assert merge_sorted_tuples((4, 5, 6), (1, 2, 3)) == (1, 2, 3, 4, 5, 6)", "assert merge_sorted_tuples((1, 1, 1), (2, 2, 2)) == (1, 1, 1, 2, 2, 2)", "assert merge_sorted_tuples((1, 3, 5), ()) == (1, 3, 5)", "assert merge_sorted_tuples((), (2, 4, 6)) == (2, 4, 6)", "assert merge_sorted_tuples((), ()) == ()", "assert merge_sorted_tuples((1,), (2,)) == (1, 2)", "assert merge_sorted_tuples((2,), (1,)) == (1, 2)", "assert merge_sorted_tuples((1, 2, 3), (1, 2, 3)) == (1, 1, 2, 2, 3, 3)", "assert merge_sorted_tuples((1, 2, 3), (3, 4, 5)) == (1, 2, 3, 3, 4, 5)", "assert merge_sorted_tuples((1, 2), (2, 3)) == (1, 2, 2, 3)", "assert merge_sorted_tuples((5, 6, 7), (1, 2, 3)) == (1, 2, 3, 5, 6, 7)", "assert merge_sorted_tuples((1, 3, 5, 7), (2, 4, 6, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)", "assert merge_sorted_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted sets into a single sorted list.", "code": "def merge_sorted_sets(set1, set2):\n    return sorted(set1.union(set2))", "task_id": "108_2d10a64b-99aa-44f7-973a-020832dd5283", "test_setup_code": "", "test_list": ["assert merge_sorted_sets({1, 3, 5}, {2, 4, 6}) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_sets({-1, 0, 1}, {2, 3, 4}) == [-1, 0, 1, 2, 3, 4]", "assert merge_sorted_sets({1, 2, 3}, {1, 2, 3}) == [1, 2, 3]", "assert merge_sorted_sets({10, 20, 30}, {5, 15, 25}) == [5, 10, 15, 20, 25, 30]", "assert merge_sorted_sets({100, 200, 300}, {50, 150, 250}) == [50, 100, 150, 200, 250, 300]", "assert merge_sorted_sets({1}, {2}) == [1, 2]", "assert merge_sorted_sets(set(), {1, 2, 3}) == [1, 2, 3]", "assert merge_sorted_sets({1, 2, 3}, set()) == [1, 2, 3]", "assert merge_sorted_sets(set(), set()) == []", "assert merge_sorted_sets({-5, -3, -1}, {-4, -2, 0}) == [-5, -4, -3, -2, -1, 0]", "assert merge_sorted_sets({1, 3, 5, 7}, {2, 4, 6, 8}) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_sets({1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert merge_sorted_sets({1, 3, 5, 7, 9}, {2, 4, 6, 8, 10}) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert merge_sorted_sets({-10, -5, 0, 5, 10}, {-20, -15, -10, -5, 0}) == [-20, -15, -10, -5, 0, 5, 10]", "assert merge_sorted_sets({1, 3, 5, 7, 9, 11, 13}, {2, 4, 6, 8, 10, 12, 14}) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]"], "challenge_test_list": []}
{"text": "Write a function to merge three sorted arrays into a single sorted array.", "code": "import heapq\n\ndef merge_sorted_arrays(arr1, arr2, arr3):\n    return list(heapq.merge(arr1, arr2, arr3))", "task_id": "108_4a766083-53d9-4749-80ca-4b3b7c1b60f3", "test_setup_code": "", "test_list": ["assert merge_sorted_arrays([1, 3, 5], [2, 4, 6], [0, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_arrays([], [], []) == []", "assert merge_sorted_arrays([1, 2, 3], [], []) == [1, 2, 3]", "assert merge_sorted_arrays([], [4, 5, 6], []) == [4, 5, 6]", "assert merge_sorted_arrays([], [], [7, 8, 9]) == [7, 8, 9]", "assert merge_sorted_arrays([1, 1, 1], [2, 2, 2], [3, 3, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3]", "assert merge_sorted_arrays([1], [2], [3]) == [1, 2, 3]", "assert merge_sorted_arrays([1, 3, 5], [2, 4, 6], [0, 2, 4]) == [0, 1, 2, 2, 3, 4, 4, 5, 6]", "assert merge_sorted_arrays([1, 2], [3, 4], [5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_arrays([-3, -2, -1], [0, 1, 2], [3, 4, 5]) == [-3, -2, -1, 0, 1, 2, 3, 4, 5]", "assert merge_sorted_arrays([1, 4, 7], [2, 5, 8], [3, 6, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_arrays([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3]", "assert merge_sorted_arrays([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_arrays([1, 3, 5], [2, 4, 6], [0, 9, 10]) == [0, 1, 2, 3, 4, 5, 6, 9, 10]", "assert merge_sorted_arrays([1, 3, 5, 7], [2, 4, 6, 8], [0, 9, 10, 11]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"], "challenge_test_list": []}
{"text": "Write a function to merge a list of sorted lists into a single sorted list.", "code": "import heapq\n\ndef merge_sorted_lists_of_lists(lists):\n    return list(heapq.merge(*lists))", "task_id": "108_ecf70e65-6f70-453f-a94b-3c5de325c37d", "test_setup_code": "", "test_list": ["assert merge_sorted_lists_of_lists([[1, 3, 5], [2, 4, 6]]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_of_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists_of_lists([[5, 10, 15], [3, 8, 12], [1, 4, 7]]) == [1, 3, 4, 5, 7, 8, 10, 12, 15]", "assert merge_sorted_lists_of_lists([[], [1, 2, 3]]) == [1, 2, 3]", "assert merge_sorted_lists_of_lists([[1, 2, 3], []]) == [1, 2, 3]", "assert merge_sorted_lists_of_lists([[1], [2], [3]]) == [1, 2, 3]", "assert merge_sorted_lists_of_lists([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists_of_lists([[1, 1, 1], [1, 1, 1]]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists_of_lists([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists_of_lists([[10, 20, 30], [5, 15, 25], [1, 2, 3]]) == [1, 2, 3, 5, 10, 15, 20, 25, 30]", "assert merge_sorted_lists_of_lists([[], [], []]) == []", "assert merge_sorted_lists_of_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 1, 1, 2, 2, 2, 3, 3, 3]", "assert merge_sorted_lists_of_lists([[1, 3, 5, 7], [2, 4, 6, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists_of_lists([[1, 4, 7], [2, 5, 8], [3, 6, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists_of_lists([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list, allowing duplicates.", "code": "import heapq\n\ndef merge_sorted_lists_with_duplicates(*lists):\n    return list(heapq.merge(*lists))", "task_id": "108_73534e69-1bae-4b4c-89a4-7ecde02ed681", "test_setup_code": "", "test_list": ["assert merge_sorted_lists_with_duplicates([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_with_duplicates([1, 2, 2, 3], [2, 2, 4, 5]) == [1, 2, 2, 2, 2, 3, 4, 5]", "assert merge_sorted_lists_with_duplicates([], [1, 2, 3]) == [1, 2, 3]", "assert merge_sorted_lists_with_duplicates([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists_with_duplicates([], []) == []", "assert merge_sorted_lists_with_duplicates([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists_with_duplicates([1, 3, 5], [2, 4, 6], [0, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists_with_duplicates([1, 3], [2, 4], [0, 5]) == [0, 1, 2, 3, 4, 5]", "assert merge_sorted_lists_with_duplicates([1], [1], [1]) == [1, 1, 1]", "assert merge_sorted_lists_with_duplicates([1, 3, 5], [2, 4, 6], [1, 2, 3]) == [1, 1, 2, 2, 3, 3, 4, 5, 6]", "assert merge_sorted_lists_with_duplicates([-1, 0, 1], [-2, 2, 3]) == [-2, -1, 0, 1, 2, 3]", "assert merge_sorted_lists_with_duplicates([1, 2, 3], [3, 4, 5], [5, 6, 7]) == [1, 2, 3, 3, 4, 5, 5, 6, 7]", "assert merge_sorted_lists_with_duplicates([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]", "assert merge_sorted_lists_with_duplicates([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists_with_duplicates([1, 2, 3], [3, 3, 3], [2, 2, 2]) == [1, 2, 2, 2, 2, 3, 3, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list, removing duplicates.", "code": "import heapq\n\ndef merge_sorted_lists_remove_duplicates(*lists):\n    return sorted(set(heapq.merge(*lists)))", "task_id": "108_3a0f3f3e-f8f0-4cff-a0e9-79e78c7469f1", "test_setup_code": "", "test_list": ["assert merge_sorted_lists_remove_duplicates([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_remove_duplicates([1, 1, 1], [1, 1, 1]) == [1]", "assert merge_sorted_lists_remove_duplicates([], []) == []", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists_remove_duplicates([], [4, 5, 6]) == [4, 5, 6]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [2, 3, 4]) == [1, 2, 3, 4]", "assert merge_sorted_lists_remove_duplicates([1, 3, 5], [2, 4, 6], [0, 7, 8]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists_remove_duplicates([1, 3, 5], [2, 4, 6], [5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert merge_sorted_lists_remove_duplicates([1, 2], [3, 4], [5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_remove_duplicates([1], [1], [1]) == [1]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [3, 4, 5], [5, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [2, 3, 4], [3, 4, 5]) == [1, 2, 3, 4, 5]", "assert merge_sorted_lists_remove_duplicates([1, 2, 3], [2, 3, 4], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list using a custom key function.", "code": "import heapq\n\ndef merge_sorted_lists_with_custom_key(*lists, key):\n    merged = heapq.merge(*lists)\n    return sorted(merged, key=key)", "task_id": "108_d5a63384-134e-4ce6-9d26-8442d957fa77", "test_setup_code": "", "test_list": ["assert merge_sorted_lists_with_custom_key([1, 3, 5], [2, 4, 6], key=lambda x: x) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_with_custom_key([1, 2, 3], [4, 5, 6], key=lambda x: -x) == [6, 5, 4, 3, 2, 1]", "assert merge_sorted_lists_with_custom_key([1, 3], [2, 4], [0, 5], key=lambda x: x) == [0, 1, 2, 3, 4, 5]", "assert merge_sorted_lists_with_custom_key([], [], key=lambda x: x) == []", "assert merge_sorted_lists_with_custom_key([1, 2, 3], [], key=lambda x: x) == [1, 2, 3]", "assert merge_sorted_lists_with_custom_key([1], [2], [3], key=lambda x: x) == [1, 2, 3]", "assert merge_sorted_lists_with_custom_key([1, 4, 5], [2, 3, 6], key=lambda x: x) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_with_custom_key([1, 2, 3], [1, 2, 3], key=lambda x: x) == [1, 1, 2, 2, 3, 3]", "assert merge_sorted_lists_with_custom_key([3, 2, 1], [6, 5, 4], key=lambda x: x) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_with_custom_key([1, 3, 5], [2, 4, 6], key=lambda x: -x) == [6, 5, 4, 3, 2, 1]", "assert merge_sorted_lists_with_custom_key([1], [2], key=lambda x: x) == [1, 2]", "assert merge_sorted_lists_with_custom_key([1, 2, 3], [4, 5, 6], key=lambda x: x % 2) == [2, 4, 6, 1, 3, 5]", "assert merge_sorted_lists_with_custom_key([1, 3, 5], [2, 4, 6], key=lambda x: x % 3) == [3, 6, 1, 4, 2, 5]", "assert merge_sorted_lists_with_custom_key([1, 3, 5], [2, 4, 6], key=lambda x: x // 2) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists_with_custom_key([1, 2, 3], [4, 5, 6], key=lambda x: x % 2 == 0) == [1, 3, 5, 2, 4, 6]"], "challenge_test_list": []}
{"text": "Write a python function to count even hexadecimal numbers for a given range.", "code": "def count_even_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 2 == 0:\n            count += 1\n    return count", "task_id": "107_c5613694-fc66-4bc3-9962-cc5a3bb1ec13", "test_setup_code": "", "test_list": ["assert count_even_hexadecimal(0, 10) == 6", "assert count_even_hexadecimal(1, 10) == 5", "assert count_even_hexadecimal(2, 2) == 1", "assert count_even_hexadecimal(1, 1) == 0", "assert count_even_hexadecimal(0, 0) == 1", "assert count_even_hexadecimal(10, 20) == 6", "assert count_even_hexadecimal(15, 25) == 5", "assert count_even_hexadecimal(100, 110) == 6", "assert count_even_hexadecimal(200, 210) == 6", "assert count_even_hexadecimal(1000, 1010) == 6", "assert count_even_hexadecimal(0, 1) == 1", "assert count_even_hexadecimal(1, 2) == 1", "assert count_even_hexadecimal(2, 3) == 1", "assert count_even_hexadecimal(0, 100) == 51", "assert count_even_hexadecimal(50, 60) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count odd hexadecimal numbers for a given range.", "code": "def count_odd_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 2 != 0:\n            count += 1\n    return count", "task_id": "107_cdcceecc-3dcd-4e49-a98f-f4b185095aa5", "test_setup_code": "", "test_list": ["assert count_odd_hexadecimal(0, 0) == 0", "assert count_odd_hexadecimal(1, 1) == 1", "assert count_odd_hexadecimal(0, 1) == 1", "assert count_odd_hexadecimal(0, 2) == 1", "assert count_odd_hexadecimal(1, 2) == 1", "assert count_odd_hexadecimal(1, 3) == 2", "assert count_odd_hexadecimal(2, 4) == 1", "assert count_odd_hexadecimal(10, 20) == 5", "assert count_odd_hexadecimal(15, 30) == 8", "assert count_odd_hexadecimal(0, 100) == 50", "assert count_odd_hexadecimal(99, 199) == 51", "assert count_odd_hexadecimal(100, 200) == 50", "assert count_odd_hexadecimal(0, 1000) == 500", "assert count_odd_hexadecimal(500, 1000) == 250", "assert count_odd_hexadecimal(1000, 2000) == 500"], "challenge_test_list": []}
{"text": "Write a python function to sum all hexadecimal numbers for a given range.", "code": "def sum_hexadecimal(L, R):\n    total = 0\n    for i in range(L, R + 1):\n        total += i\n    return total", "task_id": "107_f526c517-0a48-40b6-a217-64ad3f7d5653", "test_setup_code": "", "test_list": ["assert sum_hexadecimal(1, 1) == 1", "assert sum_hexadecimal(0, 0) == 0", "assert sum_hexadecimal(1, 2) == 3", "assert sum_hexadecimal(10, 15) == 75", "assert sum_hexadecimal(0, 10) == 55", "assert sum_hexadecimal(5, 5) == 5", "assert sum_hexadecimal(1, 100) == 5050", "assert sum_hexadecimal(50, 60) == 605", "assert sum_hexadecimal(100, 200) == 15150", "assert sum_hexadecimal(0, 1) == 1", "assert sum_hexadecimal(1, 0) == 0", "assert sum_hexadecimal(1, 10) == 55", "assert sum_hexadecimal(10, 20) == 165", "assert sum_hexadecimal(1000, 1005) == 5025", "assert sum_hexadecimal(999, 1000) == 1999"], "challenge_test_list": []}
{"text": "Write a python function to count prime hexadecimal numbers for a given range.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if is_prime(i):\n            count += 1\n    return count", "task_id": "107_47ab279f-c732-4ae2-bb42-1e9ed365cdab", "test_setup_code": "", "test_list": ["assert count_prime_hexadecimal(0, 10) == 4", "assert count_prime_hexadecimal(10, 20) == 4", "assert count_prime_hexadecimal(20, 30) == 2", "assert count_prime_hexadecimal(0, 0) == 0", "assert count_prime_hexadecimal(1, 1) == 0", "assert count_prime_hexadecimal(2, 2) == 1", "assert count_prime_hexadecimal(0, 1) == 0", "assert count_prime_hexadecimal(0, 2) == 1", "assert count_prime_hexadecimal(100, 110) == 2", "assert count_prime_hexadecimal(1000, 1010) == 0", "assert count_prime_hexadecimal(100, 200) == 21", "assert count_prime_hexadecimal(500, 600) == 14", "assert count_prime_hexadecimal(1000, 1100) == 16", "assert count_prime_hexadecimal(10000, 10010) == 1", "assert count_prime_hexadecimal(100000, 100010) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count palindromic hexadecimal numbers for a given range.", "code": "def is_palindromic(n):\n    return str(n) == str(n)[::-1]\n\ndef count_palindromic_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if is_palindromic(i):\n            count += 1\n    return count", "task_id": "107_fd3383c7-78e6-44ed-90cc-ac4c44d73f80", "test_setup_code": "", "test_list": ["assert count_palindromic_hexadecimal(1, 10) == 9", "assert count_palindromic_hexadecimal(10, 20) == 1", "assert count_palindromic_hexadecimal(0, 0) == 1", "assert count_palindromic_hexadecimal(0, 1) == 2", "assert count_palindromic_hexadecimal(1, 1) == 1", "assert count_palindromic_hexadecimal(15, 15) == 0", "assert count_palindromic_hexadecimal(1, 100) == 18", "assert count_palindromic_hexadecimal(50, 60) == 1", "assert count_palindromic_hexadecimal(100, 200) == 9", "assert count_palindromic_hexadecimal(500, 600) == 9", "assert count_palindromic_hexadecimal(1000, 1100) == 10", "assert count_palindromic_hexadecimal(0, 255) == 24", "assert count_palindromic_hexadecimal(256, 512) == 9", "assert count_palindromic_hexadecimal(1024, 2048) == 19", "assert count_palindromic_hexadecimal(4096, 8192) == 37"], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers divisible by 5 for a given range.", "code": "def count_divisible_by_five_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 5 == 0:\n            count += 1\n    return count", "task_id": "107_1a4b2daa-973d-40a2-9792-53b64cedf281", "test_setup_code": "", "test_list": ["assert count_divisible_by_five_hexadecimal(0, 10) == 3", "assert count_divisible_by_five_hexadecimal(5, 15) == 3", "assert count_divisible_by_five_hexadecimal(10, 20) == 3", "assert count_divisible_by_five_hexadecimal(0, 0) == 1", "assert count_divisible_by_five_hexadecimal(1, 1) == 0", "assert count_divisible_by_five_hexadecimal(4, 9) == 1", "assert count_divisible_by_five_hexadecimal(5, 5) == 1", "assert count_divisible_by_five_hexadecimal(6, 6) == 0", "assert count_divisible_by_five_hexadecimal(0, 100) == 21", "assert count_divisible_by_five_hexadecimal(95, 105) == 3", "assert count_divisible_by_five_hexadecimal(50, 60) == 3", "assert count_divisible_by_five_hexadecimal(100, 200) == 21", "assert count_divisible_by_five_hexadecimal(0, 1) == 1", "assert count_divisible_by_five_hexadecimal(0, 50) == 11", "assert count_divisible_by_five_hexadecimal(123, 456) == 67"], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing a specific digit for a given range.", "code": "def count_hexadecimal_with_digit(L, R, digit):\n    count = 0\n    for i in range(L, R + 1):\n        if str(digit) in str(i):\n            count += 1\n    return count", "task_id": "107_d31ecc42-3fe9-47ad-9c56-b3a533a65e6c", "test_setup_code": "", "test_list": ["assert count_hexadecimal_with_digit(0, 15, 'a') == 1", "assert count_hexadecimal_with_digit(0, 15, '1') == 2", "assert count_hexadecimal_with_digit(16, 31, '1') == 8", "assert count_hexadecimal_with_digit(0, 255, 'f') == 16", "assert count_hexadecimal_with_digit(0, 255, '0') == 16", "assert count_hexadecimal_with_digit(0, 255, '9') == 16", "assert count_hexadecimal_with_digit(0, 100, 'a') == 6", "assert count_hexadecimal_with_digit(0, 100, 'b') == 6", "assert count_hexadecimal_with_digit(0, 100, 'c') == 6", "assert count_hexadecimal_with_digit(0, 100, 'd') == 6", "assert count_hexadecimal_with_digit(0, 100, 'e') == 6", "assert count_hexadecimal_with_digit(0, 100, 'f') == 6", "assert count_hexadecimal_with_digit(0, 0, '0') == 1", "assert count_hexadecimal_with_digit(255, 255, 'f') == 1", "assert count_hexadecimal_with_digit(0, 16, '1') == 2"], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only even digits for a given range.", "code": "def count_hexadecimal_with_even_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(int(d) % 2 == 0 for d in str(i)):\n            count += 1\n    return count", "task_id": "107_59f7a747-d75b-4f78-a05e-d410a1a987e0", "test_setup_code": "", "test_list": ["assert count_hexadecimal_with_even_digits(0, 10) == 1", "assert count_hexadecimal_with_even_digits(0, 15) == 2", "assert count_hexadecimal_with_even_digits(16, 32) == 1", "assert count_hexadecimal_with_even_digits(0, 0) == 1", "assert count_hexadecimal_with_even_digits(1, 1) == 0", "assert count_hexadecimal_with_even_digits(2, 2) == 1", "assert count_hexadecimal_with_even_digits(10, 20) == 1", "assert count_hexadecimal_with_even_digits(20, 40) == 1", "assert count_hexadecimal_with_even_digits(100, 200) == 0", "assert count_hexadecimal_with_even_digits(0, 255) == 3", "assert count_hexadecimal_with_even_digits(0, 1000) == 3", "assert count_hexadecimal_with_even_digits(256, 512) == 1", "assert count_hexadecimal_with_even_digits(0, 1024) == 3", "assert count_hexadecimal_with_even_digits(0, 4096) == 4", "assert count_hexadecimal_with_even_digits(0, 65535) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only odd digits for a given range.", "code": "def count_hexadecimal_with_odd_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(int(d) % 2 != 0 for d in str(i)):\n            count += 1\n    return count", "task_id": "107_e5c5bd08-d815-4215-89bd-e6f6b6039dc1", "test_setup_code": "", "test_list": ["assert count_hexadecimal_with_odd_digits(1, 10) == 5", "assert count_hexadecimal_with_odd_digits(10, 20) == 5", "assert count_hexadecimal_with_odd_digits(15, 15) == 0", "assert count_hexadecimal_with_odd_digits(1, 1) == 1", "assert count_hexadecimal_with_odd_digits(0, 0) == 0", "assert count_hexadecimal_with_odd_digits(0, 15) == 8", "assert count_hexadecimal_with_odd_digits(1, 100) == 25", "assert count_hexadecimal_with_odd_digits(1, 255) == 64", "assert count_hexadecimal_with_odd_digits(100, 200) == 25", "assert count_hexadecimal_with_odd_digits(200, 300) == 25", "assert count_hexadecimal_with_odd_digits(1, 16) == 8", "assert count_hexadecimal_with_odd_digits(1, 31) == 16", "assert count_hexadecimal_with_odd_digits(1, 50) == 25", "assert count_hexadecimal_with_odd_digits(1, 1000) == 250", "assert count_hexadecimal_with_odd_digits(1, 5000) == 1250"], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only prime digits for a given range.", "code": "def is_prime_digit(d):\n    return d in {2, 3, 5, 7}\n\ndef count_hexadecimal_with_prime_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(is_prime_digit(int(d)) for d in str(i)):\n            count += 1\n    return count", "task_id": "107_9ebe9d06-bae4-4217-988b-6cf0318e2f31", "test_setup_code": "", "test_list": ["assert count_hexadecimal_with_prime_digits(0, 10) == 1", "assert count_hexadecimal_with_prime_digits(0, 15) == 2", "assert count_hexadecimal_with_prime_digits(10, 20) == 0", "assert count_hexadecimal_with_prime_digits(2, 7) == 4", "assert count_hexadecimal_with_prime_digits(5, 10) == 1", "assert count_hexadecimal_with_prime_digits(0, 0) == 0", "assert count_hexadecimal_with_prime_digits(2, 2) == 1", "assert count_hexadecimal_with_prime_digits(7, 7) == 1", "assert count_hexadecimal_with_prime_digits(10, 15) == 1", "assert count_hexadecimal_with_prime_digits(20, 30) == 0", "assert count_hexadecimal_with_prime_digits(0, 100) == 2", "assert count_hexadecimal_with_prime_digits(0, 1000) == 2", "assert count_hexadecimal_with_prime_digits(100, 200) == 0", "assert count_hexadecimal_with_prime_digits(200, 300) == 0", "assert count_hexadecimal_with_prime_digits(0, 1) == 0"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in an odd decimal value.", "code": "def count_odd_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "task_id": "109_342dccf1-ca1d-41ee-b495-1d252c049077", "test_setup_code": "", "test_list": ["assert count_odd_rotations('101') == 2", "assert count_odd_rotations('111') == 3", "assert count_odd_rotations('000') == 0", "assert count_odd_rotations('1') == 1", "assert count_odd_rotations('0') == 0", "assert count_odd_rotations('1010') == 2", "assert count_odd_rotations('1001') == 2", "assert count_odd_rotations('1100') == 2", "assert count_odd_rotations('0110') == 2", "assert count_odd_rotations('1110') == 3", "assert count_odd_rotations('0101') == 2", "assert count_odd_rotations('1000') == 1", "assert count_odd_rotations('0001') == 1", "assert count_odd_rotations('1101') == 3", "assert count_odd_rotations('1011') == 3"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in an even decimal value.", "code": "def count_even_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 0:\n            count += 1\n    return count", "task_id": "109_93afd1a7-5e20-4f45-9bfb-8310e6d90ae2", "test_setup_code": "", "test_list": ["assert count_even_rotations('1010') == 2", "assert count_even_rotations('1111') == 0", "assert count_even_rotations('0000') == 4", "assert count_even_rotations('1001') == 2", "assert count_even_rotations('0101') == 4", "assert count_even_rotations('1') == 0", "assert count_even_rotations('0') == 1", "assert count_even_rotations('1100') == 4", "assert count_even_rotations('0011') == 2", "assert count_even_rotations('101010') == 6", "assert count_even_rotations('111000') == 6", "assert count_even_rotations('000111') == 3", "assert count_even_rotations('100000') == 6", "assert count_even_rotations('010101') == 6", "assert count_even_rotations('110110') == 6"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of binary strings with an odd number of 1s after any rotation.", "code": "def count_odd_ones(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 1:\n            count += 1\n    return count", "task_id": "109_eaf9f98e-8020-4e09-99ce-89bc14c5d2ff", "test_setup_code": "", "test_list": ["assert count_odd_ones('101') == 3", "assert count_odd_ones('111') == 3", "assert count_odd_ones('000') == 0", "assert count_odd_ones('1') == 1", "assert count_odd_ones('0') == 0", "assert count_odd_ones('1010') == 4", "assert count_odd_ones('1100') == 2", "assert count_odd_ones('1001') == 4", "assert count_odd_ones('010101') == 6", "assert count_odd_ones('111000') == 3", "assert count_odd_ones('100000') == 1", "assert count_odd_ones('110110') == 6", "assert count_odd_ones('1010101010') == 10", "assert count_odd_ones('0000000000') == 0", "assert count_odd_ones('1111111111') == 10"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of binary strings with an even number of 1s after any rotation.", "code": "def count_even_ones(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 0:\n            count += 1\n    return count", "task_id": "109_5f9720ea-6e5c-4971-a68c-adb2f3ad3424", "test_setup_code": "", "test_list": ["assert count_even_ones('') == 0", "assert count_even_ones('0') == 1", "assert count_even_ones('1') == 0", "assert count_even_ones('00') == 2", "assert count_even_ones('01') == 1", "assert count_even_ones('10') == 1", "assert count_even_ones('11') == 0", "assert count_even_ones('000') == 3", "assert count_even_ones('001') == 2", "assert count_even_ones('010') == 2", "assert count_even_ones('011') == 1", "assert count_even_ones('100') == 2", "assert count_even_ones('101') == 1", "assert count_even_ones('110') == 1", "assert count_even_ones('111') == 0", "assert count_even_ones('0000') == 4", "assert count_even_ones('0001') == 3", "assert count_even_ones('0010') == 3", "assert count_even_ones('0011') == 2", "assert count_even_ones('0100') == 3", "assert count_even_ones('0101') == 2", "assert count_even_ones('0110') == 2", "assert count_even_ones('0111') == 1", "assert count_even_ones('1000') == 3", "assert count_even_ones('1001') == 2", "assert count_even_ones('1010') == 2", "assert count_even_ones('1011') == 1", "assert count_even_ones('1100') == 2", "assert count_even_ones('1101') == 1", "assert count_even_ones('1110') == 1", "assert count_even_ones('1111') == 0", "assert count_even_ones('00000') == 5", "assert count_even_ones('00001') == 4", "assert count_even_ones('00010') == 4", "assert count_even_ones('00011') == 3", "assert count_even_ones('00100') == 4", "assert count_even_ones('00101') == 3", "assert count_even_ones('00110') == 3", "assert count_even_ones('00111') == 2", "assert count_even_ones('01000') == 4", "assert count_even_ones('01001') == 3", "assert count_even_ones('01010') == 3", "assert count_even_ones('01011') == 2", "assert count_even_ones('01100') == 3", "assert count_even_ones('01101') == 2", "assert count_even_ones('01110') == 2", "assert count_even_ones('01111') == 1", "assert count_even_ones('10000') == 4", "assert count_even_ones('10001') == 3", "assert count_even_ones('10010') == 3", "assert count_even_ones('10011') == 2", "assert count_even_ones('10100') == 3", "assert count_even_ones('10101') == 2", "assert count_even_ones('10110') == 2", "assert count_even_ones('10111') == 1", "assert count_even_ones('11000') == 3", "assert count_even_ones('11001') == 2", "assert count_even_ones('11010') == 2", "assert count_even_ones('11011') == 1", "assert count_even_ones('11100') == 2", "assert count_even_ones('11101') == 1", "assert count_even_ones('11110') == 1", "assert count_even_ones('11111') == 0"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in a palindromic string.", "code": "def count_palindromic_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated == rotated[::-1]:\n            count += 1\n    return count", "task_id": "109_14379fba-2f5f-485d-8836-ce2c47b60fa5", "test_setup_code": "", "test_list": ["assert count_palindromic_rotations('a') == 1", "assert count_palindromic_rotations('aa') == 2", "assert count_palindromic_rotations('ab') == 0", "assert count_palindromic_rotations('aba') == 2", "assert count_palindromic_rotations('abc') == 0", "assert count_palindromic_rotations('abcd') == 0", "assert count_palindromic_rotations('abba') == 2", "assert count_palindromic_rotations('aabb') == 0", "assert count_palindromic_rotations('racecar') == 1", "assert count_palindromic_rotations('madam') == 1", "assert count_palindromic_rotations('noon') == 2", "assert count_palindromic_rotations('level') == 1", "assert count_palindromic_rotations('rotor') == 1", "assert count_palindromic_rotations('deified') == 1", "assert count_palindromic_rotations('civic') == 1"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of unique rotations of a binary string.", "code": "def count_unique_rotations(s: str) -> int:\n    rotations = set()\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        rotations.add(rotated)\n    return len(rotations)", "task_id": "109_b6c430f7-d2a1-4631-afcf-7db63e170451", "test_setup_code": "", "test_list": ["assert count_unique_rotations('101') == 3", "assert count_unique_rotations('111') == 1", "assert count_unique_rotations('000') == 1", "assert count_unique_rotations('1100') == 4", "assert count_unique_rotations('1010') == 2", "assert count_unique_rotations('1001') == 4", "assert count_unique_rotations('1101') == 4", "assert count_unique_rotations('0011') == 2", "assert count_unique_rotations('010101') == 3", "assert count_unique_rotations('111000') == 6", "assert count_unique_rotations('000111') == 6", "assert count_unique_rotations('101010') == 2", "assert count_unique_rotations('10000001') == 8", "assert count_unique_rotations('11001100') == 4", "assert count_unique_rotations('01101001') == 8"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that have exactly k number of 1s.", "code": "def count_rotations_with_k_ones(s: str, k: int) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') == k:\n            count += 1\n    return count", "task_id": "109_e153ca79-ddf8-4c09-920e-0a3f96785966", "test_setup_code": "", "test_list": ["assert count_rotations_with_k_ones('101', 2) == 3", "assert count_rotations_with_k_ones('101', 1) == 0", "assert count_rotations_with_k_ones('111', 3) == 3", "assert count_rotations_with_k_ones('000', 0) == 3", "assert count_rotations_with_k_ones('1100', 2) == 4", "assert count_rotations_with_k_ones('1100', 1) == 0", "assert count_rotations_with_k_ones('1100', 3) == 0", "assert count_rotations_with_k_ones('10101', 3) == 5", "assert count_rotations_with_k_ones('10101', 2) == 0", "assert count_rotations_with_k_ones('111000', 3) == 6", "assert count_rotations_with_k_ones('111000', 2) == 0", "assert count_rotations_with_k_ones('1', 1) == 1", "assert count_rotations_with_k_ones('1', 0) == 0", "assert count_rotations_with_k_ones('0', 0) == 1", "assert count_rotations_with_k_ones('0', 1) == 0"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that have exactly k number of 0s.", "code": "def count_rotations_with_k_zeros(s: str, k: int) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('0') == k:\n            count += 1\n    return count", "task_id": "109_8958e1d3-104e-4427-a7b7-fdb60e640bda", "test_setup_code": "", "test_list": ["assert count_rotations_with_k_zeros('1010', 2) == 4", "assert count_rotations_with_k_zeros('1111', 0) == 4", "assert count_rotations_with_k_zeros('0000', 4) == 4", "assert count_rotations_with_k_zeros('1001', 1) == 0", "assert count_rotations_with_k_zeros('1100', 2) == 4", "assert count_rotations_with_k_zeros('101010', 3) == 6", "assert count_rotations_with_k_zeros('101010', 2) == 0", "assert count_rotations_with_k_zeros('0', 1) == 1", "assert count_rotations_with_k_zeros('1', 0) == 1", "assert count_rotations_with_k_zeros('10', 1) == 2", "assert count_rotations_with_k_zeros('110', 1) == 3", "assert count_rotations_with_k_zeros('101', 1) == 3", "assert count_rotations_with_k_zeros('100', 1) == 2", "assert count_rotations_with_k_zeros('000', 2) == 0", "assert count_rotations_with_k_zeros('111000', 3) == 6"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in a prime decimal value.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_rotations_with_prime_value(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if is_prime(int(rotated, 2)):\n            count += 1\n    return count", "task_id": "109_89ca0072-ca8f-44cf-94b5-27688f15fb92", "test_setup_code": "", "test_list": ["assert count_rotations_with_prime_value('101') == 2", "assert count_rotations_with_prime_value('11') == 2", "assert count_rotations_with_prime_value('111') == 0", "assert count_rotations_with_prime_value('1001') == 1", "assert count_rotations_with_prime_value('1101') == 2", "assert count_rotations_with_prime_value('1010') == 1", "assert count_rotations_with_prime_value('0000') == 0", "assert count_rotations_with_prime_value('0001') == 1", "assert count_rotations_with_prime_value('0101') == 2", "assert count_rotations_with_prime_value('0011') == 2", "assert count_rotations_with_prime_value('10001') == 1", "assert count_rotations_with_prime_value('11101') == 2", "assert count_rotations_with_prime_value('10111') == 2", "assert count_rotations_with_prime_value('11011') == 1", "assert count_rotations_with_prime_value('01101') == 2"], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that contain a palindromic substring of length at least 3.", "code": "def is_palindrome(sub: str) -> bool:\n    return sub == sub[::-1]\n\ndef count_rotations_with_palindromic_substring(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        for j in range(n):\n            for k in range(j + 3, n + 1):\n                if is_palindrome(rotated[j:k]):\n                    count += 1\n                    break\n    return count", "task_id": "109_56651786-70db-40c0-a136-faccf8a64cd9", "test_setup_code": "", "test_list": ["assert count_rotations_with_palindromic_substring('101') == 3", "assert count_rotations_with_palindromic_substring('111') == 3", "assert count_rotations_with_palindromic_substring('000') == 3", "assert count_rotations_with_palindromic_substring('1001') == 4", "assert count_rotations_with_palindromic_substring('11011') == 5", "assert count_rotations_with_palindromic_substring('0110') == 4", "assert count_rotations_with_palindromic_substring('10101') == 5", "assert count_rotations_with_palindromic_substring('01010') == 5", "assert count_rotations_with_palindromic_substring('10001') == 5", "assert count_rotations_with_palindromic_substring('111000') == 6", "assert count_rotations_with_palindromic_substring('110110') == 6", "assert count_rotations_with_palindromic_substring('000000') == 6", "assert count_rotations_with_palindromic_substring('1') == 0", "assert count_rotations_with_palindromic_substring('10') == 0", "assert count_rotations_with_palindromic_substring('1010101010') == 10"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing ranges within the given range.", "code": "def find_missing_ranges(nums, lower, upper):\n    missing_ranges = []\n    prev = lower - 1\n    for num in nums + [upper + 1]:\n        if num == prev + 2:\n            missing_ranges.append(str(prev + 1))\n        elif num > prev + 2:\n            missing_ranges.append(f'{prev + 1}->{num - 1}')\n        prev = num\n    return missing_ranges", "task_id": "110_e5c354de-79aa-42c0-be69-b4f0fbe29981", "test_setup_code": "", "test_list": ["assert find_missing_ranges([1, 3, 5, 7], 1, 10) == ['2', '4', '6', '8->10']", "assert find_missing_ranges([2, 4, 6, 8], 1, 10) == ['1', '3', '5', '7', '9->10']", "assert find_missing_ranges([], 1, 5) == ['1->5']", "assert find_missing_ranges([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_ranges([1, 2, 3, 4, 5], 0, 6) == ['0', '6']", "assert find_missing_ranges([1, 2, 3, 4, 5], 2, 4) == []", "assert find_missing_ranges([1, 2, 3, 4, 5], 0, 4) == ['0']", "assert find_missing_ranges([1, 2, 3, 4, 5], 2, 6) == ['6']", "assert find_missing_ranges([1, 3, 50, 75], 0, 99) == ['0', '2', '4->49', '51->74', '76->99']", "assert find_missing_ranges([10, 20, 30, 40], 5, 45) == ['5->9', '11->19', '21->29', '31->39', '41->45']", "assert find_missing_ranges([0, 1, 3, 50, 75], 0, 99) == ['2', '4->49', '51->74', '76->99']", "assert find_missing_ranges([10, 20, 30, 40], 10, 40) == ['11->19', '21->29', '31->39']", "assert find_missing_ranges([10, 20, 30, 40], 15, 35) == ['15->19', '21->29', '31->35']", "assert find_missing_ranges([1, 2, 3, 4, 5], 0, 5) == ['0']", "assert find_missing_ranges([1, 2, 3, 4, 5], 1, 6) == ['6']"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing individual elements within the given range.", "code": "def find_missing_elements(nums, lower, upper):\n    missing_elements = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_elements.append(num)\n    return missing_elements", "task_id": "110_0be33f8c-00ed-40cf-8c38-501561af58b4", "test_setup_code": "", "test_list": ["assert find_missing_elements([1, 2, 4, 5], 1, 5) == [3]", "assert find_missing_elements([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_elements([], 1, 5) == [1, 2, 3, 4, 5]", "assert find_missing_elements([1, 3, 5, 7], 1, 7) == [2, 4, 6]", "assert find_missing_elements([2, 3, 5, 7], 1, 7) == [1, 4, 6]", "assert find_missing_elements([1, 2, 3, 4, 5], 0, 6) == [0, 6]", "assert find_missing_elements([0, 1, 2, 3, 4, 5, 6], 0, 6) == []", "assert find_missing_elements([1, 2, 3, 4, 5], 6, 10) == [6, 7, 8, 9, 10]", "assert find_missing_elements([1, 2, 3, 4, 5], 5, 5) == []", "assert find_missing_elements([1, 2, 3, 4, 5], 0, 0) == [0]", "assert find_missing_elements([1, 2, 3, 4, 5], -2, 2) == [-2, -1, 0]", "assert find_missing_elements([1, 3, 5, 7, 9], 0, 10) == [0, 2, 4, 6, 8, 10]", "assert find_missing_elements([1, 2, 4, 6, 8], 1, 8) == [3, 5, 7]", "assert find_missing_elements([1, 2, 3, 4, 5], 3, 7) == [6, 7]", "assert find_missing_elements([1, 2, 3, 4, 5], 2, 4) == []"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing intervals within the given range.", "code": "def find_missing_intervals(nums, lower, upper):\n    missing_intervals = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_intervals.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_intervals.append((prev, upper))\n    return missing_intervals", "task_id": "110_f8a42a10-a90d-4159-b5d9-6ae8405a4c15", "test_setup_code": "", "test_list": ["assert find_missing_intervals([], 1, 10) == [(1, 10)]", "assert find_missing_intervals([1, 2, 3], 1, 3) == []", "assert find_missing_intervals([2, 4, 6], 1, 7) == [(1, 1), (3, 3), (5, 5), (7, 7)]", "assert find_missing_intervals([1, 3, 5, 7], 1, 7) == [(2, 2), (4, 4), (6, 6)]", "assert find_missing_intervals([1, 2, 3, 5, 6, 7], 1, 7) == [(4, 4)]", "assert find_missing_intervals([1, 2, 3, 5, 6, 7], 0, 7) == [(0, 0), (4, 4)]", "assert find_missing_intervals([1, 2, 3, 5, 6, 7], 1, 8) == [(4, 4), (8, 8)]", "assert find_missing_intervals([2, 4, 6, 8], 1, 9) == [(1, 1), (3, 3), (5, 5), (7, 7), (9, 9)]", "assert find_missing_intervals([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_intervals([1, 2, 3, 4, 5], 0, 5) == [(0, 0)]", "assert find_missing_intervals([1, 2, 3, 4, 5], 1, 6) == [(6, 6)]", "assert find_missing_intervals([1, 2, 3, 4, 5], 0, 6) == [(0, 0), (6, 6)]", "assert find_missing_intervals([1, 3, 5, 7, 9], 1, 10) == [(2, 2), (4, 4), (6, 6), (8, 8), (10, 10)]", "assert find_missing_intervals([2, 4, 6, 8], 1, 8) == [(1, 1), (3, 3), (5, 5), (7, 7)]", "assert find_missing_intervals([2, 4, 6, 8], 0, 9) == [(0, 1), (3, 3), (5, 5), (7, 7), (9, 9)]"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing ranges within the given range with a specific step size.", "code": "def find_missing_ranges_with_steps(nums, lower, upper, step):\n    missing_ranges = []\n    prev = lower - step\n    for num in nums + [upper + step]:\n        if num == prev + step:\n            missing_ranges.append(str(prev + step))\n        elif num > prev + step:\n            missing_ranges.append(f'{prev + step}->{num - step}')\n        prev = num\n    return missing_ranges", "task_id": "110_33690b95-7133-4cd4-83c0-f4aea1ad660e", "test_setup_code": "", "test_list": ["assert find_missing_ranges_with_steps([], 1, 10, 1) == ['1->10']", "assert find_missing_ranges_with_steps([2, 5, 7], 1, 10, 1) == ['1', '3->4', '6', '8->10']", "assert find_missing_ranges_with_steps([1, 10], 1, 10, 1) == ['2->9']", "assert find_missing_ranges_with_steps([1, 2, 3, 4, 5], 1, 5, 1) == []", "assert find_missing_ranges_with_steps([1, 3, 5, 7, 9], 1, 10, 1) == ['2', '4', '6', '8', '10']", "assert find_missing_ranges_with_steps([2, 4, 6, 8], 1, 10, 1) == ['1', '3', '5', '7', '9->10']", "assert find_missing_ranges_with_steps([1, 2, 3, 4, 5], 1, 10, 2) == ['7->9']", "assert find_missing_ranges_with_steps([1, 3, 5, 7, 9], 1, 10, 2) == ['2', '4', '6', '8', '10']", "assert find_missing_ranges_with_steps([2, 4, 6, 8], 1, 10, 2) == ['1->3', '5->7', '9->10']", "assert find_missing_ranges_with_steps([1, 2, 3, 4, 5], 1, 10, 3) == ['7->10']", "assert find_missing_ranges_with_steps([1, 4, 7], 1, 10, 3) == ['2->3', '5->6', '8->10']", "assert find_missing_ranges_with_steps([3, 6, 9], 1, 10, 3) == ['1->2', '4->5', '7->8', '10']", "assert find_missing_ranges_with_steps([1, 2, 3, 4, 5], 1, 10, 4) == ['6->10']", "assert find_missing_ranges_with_steps([1, 5, 9], 1, 10, 4) == ['2->4', '6->8', '10']", "assert find_missing_ranges_with_steps([4, 8], 1, 10, 4) == ['1->3', '5->7', '9->10']"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing subranges within the given range.", "code": "def find_missing_subranges(nums, lower, upper):\n    missing_subranges = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_subranges.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_subranges.append((prev, upper))\n    return missing_subranges", "task_id": "110_c4e8f4d9-3452-4ae1-b595-a4aa6361b231", "test_setup_code": "", "test_list": ["assert find_missing_subranges([], 1, 10) == [(1, 10)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_subranges([1, 3, 5, 7], 1, 10) == [(2, 2), (4, 4), (6, 6), (8, 10)]", "assert find_missing_subranges([2, 4, 6, 8], 1, 10) == [(1, 1), (3, 3), (5, 5), (7, 7), (9, 10)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 1, 10) == [(4, 6), (10, 10)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 5, 10) == [(5, 6), (10, 10)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 0, 10) == [(0, 0), (4, 6), (10, 10)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 1, 9) == [(4, 6)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 2, 8) == [(4, 6)]", "assert find_missing_subranges([1, 2, 3, 7, 8, 9], 2, 7) == [(4, 6)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 0, 6) == [(0, 0), (6, 6)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 0, 5) == [(0, 0)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 0, 4) == [(0, 0), (6, 6)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 6, 10) == [(6, 10)]", "assert find_missing_subranges([1, 2, 3, 4, 5], 5, 5) == []"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing numbers within the given range.", "code": "def find_missing_numbers(nums, lower, upper):\n    missing_numbers = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_numbers.append(num)\n    return missing_numbers", "task_id": "110_1616f19f-3296-4af8-87d7-62b9b6fe5cf2", "test_setup_code": "", "test_list": ["assert find_missing_numbers([1, 2, 4, 6], 1, 6) == [3, 5]", "assert find_missing_numbers([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_numbers([], 1, 5) == [1, 2, 3, 4, 5]", "assert find_missing_numbers([1, 3, 5, 7], 1, 7) == [2, 4, 6]", "assert find_missing_numbers([2, 3, 7, 10], 1, 10) == [1, 4, 5, 6, 8, 9]", "assert find_missing_numbers([1, 2, 3, 4, 5], 0, 5) == [0]", "assert find_missing_numbers([0, 1, 2, 3, 4, 5], 0, 5) == []", "assert find_missing_numbers([1, 2, 3, 4, 5], 1, 6) == [6]", "assert find_missing_numbers([1, 2, 3, 4, 5], 0, 4) == [0]", "assert find_missing_numbers([1, 3, 5], 1, 5) == [2, 4]", "assert find_missing_numbers([1, 2, 3], 1, 3) == []", "assert find_missing_numbers([1, 2, 3], 0, 3) == [0]", "assert find_missing_numbers([1, 2, 3], 1, 4) == [4]", "assert find_missing_numbers([1, 2, 3], 2, 5) == [4, 5]", "assert find_missing_numbers([1, 3, 5, 7, 9], 1, 10) == [2, 4, 6, 8, 10]"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing values within the given range.", "code": "def find_missing_values(nums, lower, upper):\n    missing_values = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_values.append(num)\n    return missing_values", "task_id": "110_c786bca3-1426-4620-aa9c-5a6723b5c37a", "test_setup_code": "", "test_list": ["assert find_missing_values([1, 2, 4, 5], 1, 5) == [3]", "assert find_missing_values([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_values([], 1, 5) == [1, 2, 3, 4, 5]", "assert find_missing_values([1, 3, 5, 7], 1, 7) == [2, 4, 6]", "assert find_missing_values([10, 11, 12, 14], 10, 15) == [13, 15]", "assert find_missing_values([1, 2, 3], 0, 3) == [0]", "assert find_missing_values([0, 1, 2, 3], 0, 3) == []", "assert find_missing_values([2, 4, 6, 8], 1, 8) == [1, 3, 5, 7]", "assert find_missing_values([5, 6, 7, 8], 1, 10) == [1, 2, 3, 4, 9, 10]", "assert find_missing_values([1, 3, 5, 7, 9], 1, 10) == [2, 4, 6, 8, 10]", "assert find_missing_values([1, 2, 3, 4, 5], 0, 6) == [0, 6]", "assert find_missing_values([1, 2, 3, 4, 5], 6, 10) == [6, 7, 8, 9, 10]", "assert find_missing_values([1, 2, 3, 4, 5], 1, 1) == []", "assert find_missing_values([1, 2, 3, 4, 5], 0, 0) == [0]", "assert find_missing_values([1, 2, 3, 4, 5], 5, 5) == []"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing segments within the given range.", "code": "def find_missing_segments(nums, lower, upper):\n    missing_segments = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_segments.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_segments.append((prev, upper))\n    return missing_segments", "task_id": "110_30556ab3-d81c-494c-800b-8e39b6887e11", "test_setup_code": "", "test_list": ["assert find_missing_segments([1, 2, 4, 7], 1, 10) == [(3, 3), (5, 6), (8, 10)]", "assert find_missing_segments([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_segments([], 1, 5) == [(1, 5)]", "assert find_missing_segments([2, 3, 5, 7], 1, 8) == [(1, 1), (4, 4), (6, 6), (8, 8)]", "assert find_missing_segments([1, 3, 5, 7], 1, 7) == [(2, 2), (4, 4), (6, 6)]", "assert find_missing_segments([1, 2, 3], 1, 3) == []", "assert find_missing_segments([2, 4, 6], 1, 6) == [(1, 1), (3, 3), (5, 5)]", "assert find_missing_segments([1, 2, 3, 4, 5], 0, 5) == [(0, 0)]", "assert find_missing_segments([1, 2, 3, 4, 5], 1, 6) == [(6, 6)]", "assert find_missing_segments([1, 3, 5], 0, 6) == [(0, 0), (2, 2), (4, 4), (6, 6)]", "assert find_missing_segments([1, 2, 3, 4, 5], 2, 4) == []", "assert find_missing_segments([1, 3, 5, 7], 0, 8) == [(0, 0), (2, 2), (4, 4), (6, 6), (8, 8)]", "assert find_missing_segments([2, 4, 6, 8], 1, 9) == [(1, 1), (3, 3), (5, 5), (7, 7), (9, 9)]", "assert find_missing_segments([1, 2, 3, 4, 5], 0, 4) == [(0, 0)]", "assert find_missing_segments([1, 3, 5, 7], 2, 6) == [(2, 2), (4, 4), (6, 6)]"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing gaps within the given range.", "code": "def find_missing_gaps(nums, lower, upper):\n    missing_gaps = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_gaps.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_gaps.append((prev, upper))\n    return missing_gaps", "task_id": "110_2c588d6b-d424-4a8e-8147-c69a8a6f74dd", "test_setup_code": "", "test_list": ["assert find_missing_gaps([1, 3, 7], 1, 10) == [(2, 2), (4, 6), (8, 10)]", "assert find_missing_gaps([2, 5, 9], 1, 10) == [(1, 1), (3, 4), (6, 8), (10, 10)]", "assert find_missing_gaps([], 1, 5) == [(1, 5)]", "assert find_missing_gaps([1, 2, 3, 4, 5], 1, 5) == []", "assert find_missing_gaps([1, 2, 3, 4, 5], 0, 6) == [(0, 0), (6, 6)]", "assert find_missing_gaps([2, 3, 5], 1, 5) == [(1, 1), (4, 4)]", "assert find_missing_gaps([1, 2, 3], 1, 3) == []", "assert find_missing_gaps([1, 2, 3], 0, 3) == [(0, 0)]", "assert find_missing_gaps([1, 2, 3], 1, 4) == [(4, 4)]", "assert find_missing_gaps([1, 2, 3], 0, 4) == [(0, 0), (4, 4)]", "assert find_missing_gaps([1, 2, 3, 7, 8], 1, 10) == [(4, 6), (9, 10)]", "assert find_missing_gaps([1, 2, 3, 7, 8], 0, 10) == [(0, 0), (4, 6), (9, 10)]", "assert find_missing_gaps([1, 2, 3, 7, 8], 0, 9) == [(0, 0), (4, 6), (9, 9)]", "assert find_missing_gaps([1, 2, 3, 7, 8], 0, 8) == [(0, 0), (4, 6)]", "assert find_missing_gaps([1, 2, 3, 7, 8], 0, 7) == [(0, 0), (4, 6), (7, 7)]"], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing intervals within the given range with a specific step size.", "code": "def find_missing_intervals_with_steps(nums, lower, upper, step):\n    missing_intervals = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_intervals.append((prev, num - step))\n        prev = num + step\n    if prev <= upper:\n        missing_intervals.append((prev, upper))\n    return missing_intervals", "task_id": "110_df3a7a4f-4988-4fc5-82dc-d4aeda08af22", "test_setup_code": "", "test_list": ["assert find_missing_intervals_with_steps([1, 3, 7], 0, 10, 1) == [(0, 0), (2, 2), (4, 6), (8, 10)]", "assert find_missing_intervals_with_steps([2, 5, 8], 1, 10, 2) == [(1, 1), (3, 4), (6, 7), (9, 10)]", "assert find_missing_intervals_with_steps([], 0, 10, 1) == [(0, 10)]", "assert find_missing_intervals_with_steps([2, 4, 6], 0, 6, 1) == [(0, 1), (3, 3), (5, 5)]", "assert find_missing_intervals_with_steps([1, 2, 3], 0, 5, 1) == [(0, 0), (4, 5)]", "assert find_missing_intervals_with_steps([1, 2, 3], 0, 5, 2) == [(0, 0), (4, 5)]", "assert find_missing_intervals_with_steps([1, 2, 3], 0, 5, 3) == [(0, 0), (4, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 1) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 2) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 3) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 4) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 5) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 6) == [(3, 5)]", "assert find_missing_intervals_with_steps([0, 1, 2], 0, 5, 7) == [(3, 5)]", "assert find_missing_intervals_with_steps([1, 3, 5, 7], 0, 8, 1) == [(0, 0), (2, 2), (4, 4), (6, 6), (8, 8)]"], "challenge_test_list": []}
{"text": "Write a function to find elements that appear in at least 'threshold' number of nested lists.", "code": "def common_in_nested_lists_with_threshold(nestedlist, threshold):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= threshold]", "task_id": "111_f1e779d4-d509-48d9-b698-5f6484811fb0", "test_setup_code": "", "test_list": ["assert common_in_nested_lists_with_threshold([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3, 4]", "assert common_in_nested_lists_with_threshold([[1, 2], [2, 3], [3, 4]], 3) == [2, 3]", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [1, 2, 3]", "assert common_in_nested_lists_with_threshold([[1, 2], [3, 4], [5, 6]], 2) == []", "assert common_in_nested_lists_with_threshold([[], [], []], 1) == []", "assert common_in_nested_lists_with_threshold([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 5) == [1]", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == []", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 3) == [3]", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1) == [1, 2, 3]", "assert common_in_nested_lists_with_threshold([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [1, 2, 3]", "assert common_in_nested_lists_with_threshold([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]], 2) == [2, 3, 4]", "assert common_in_nested_lists_with_threshold([[1], [1], [1]], 1) == [1]", "assert common_in_nested_lists_with_threshold([[1, 2], [2, 3], [3, 4]], 1) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find elements that appear in all but one of the nested lists.", "code": "def common_elements_in_all_but_one(nestedlist):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= len(nestedlist) - 1]", "task_id": "111_7ad38927-4d42-4619-bf90-0f7f40c6fdbe", "test_setup_code": "", "test_list": ["assert common_elements_in_all_but_one([[1, 2, 3], [2, 3, 4], [2, 3, 5]]) == [2, 3]", "assert common_elements_in_all_but_one([[1, 2], [2, 3], [4, 5]]) == []", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]", "assert common_elements_in_all_but_one([[1], [1], [2]]) == [1]", "assert common_elements_in_all_but_one([[1, 2], [2, 3], [2, 4], [2, 5]]) == [2]", "assert common_elements_in_all_but_one([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2], [1, 2, 4], [1, 2, 5]]) == [1, 2]", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]) == [1, 2, 3]", "assert common_elements_in_all_but_one([[], [], []]) == []", "assert common_elements_in_all_but_one([[1], [1, 2], [1, 3], [1, 4]]) == [1]", "assert common_elements_in_all_but_one([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]]) == []", "assert common_elements_in_all_but_one([[1, 2, 3, 4], [2, 3, 4], [2, 3, 4], [2, 3, 4]]) == [2, 3, 4]", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2, 4], [1, 2, 5], [1, 2, 6]]) == [1, 2]", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [4, 5, 6]]) == [1, 2, 3]", "assert common_elements_in_all_but_one([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find unique elements in each nested list.", "code": "def unique_elements_in_each_list(nestedlist):\n    return [list(set(sublist)) for sublist in nestedlist]", "task_id": "111_02fe661f-b3f6-4ecf-8e96-c46032e5a8ae", "test_setup_code": "", "test_list": ["assert unique_elements_in_each_list([[1, 2, 2, 3], [4, 4, 5], [6, 7, 7, 8]]) == [[1, 2, 3], [4, 5], [6, 7, 8]]", "assert unique_elements_in_each_list([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [[1], [2], [3]]", "assert unique_elements_in_each_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert unique_elements_in_each_list([[], [], []]) == [[], [], []]", "assert unique_elements_in_each_list([[1], [2], [3]]) == [[1], [2], [3]]", "assert unique_elements_in_each_list([[1, 2, 2, 3, 3, 3], [4, 4, 4, 5, 5], [6, 6, 7, 7, 8, 8]]) == [[1, 2, 3], [4, 5], [6, 7, 8]]", "assert unique_elements_in_each_list([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]) == [[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]]", "assert unique_elements_in_each_list([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]]) == [[1], [2], [3]]", "assert unique_elements_in_each_list([[1, 2], [2, 3], [3, 4]]) == [[1, 2], [2, 3], [3, 4]]", "assert unique_elements_in_each_list([[1, 2, 3], [3, 2, 1], [2, 1, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]", "assert unique_elements_in_each_list([[1, 2, 2, 2, 3], [4, 4, 4, 4, 5], [6, 6, 6, 6, 7]]) == [[1, 2, 3], [4, 5], [6, 7]]", "assert unique_elements_in_each_list([[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1], [1, 3, 5, 7, 9]]) == [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 3, 5, 7, 9]]", "assert unique_elements_in_each_list([[1, 1, 1, 1, 1], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3]]) == [[1], [2], [3]]", "assert unique_elements_in_each_list([[1, 2, 3, 3, 3], [4, 5, 5, 5, 5], [6, 7, 8, 8, 8]]) == [[1, 2, 3], [4, 5], [6, 7, 8]]", "assert unique_elements_in_each_list([[1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4]]) == [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]]"], "challenge_test_list": []}
{"text": "Write a function to find elements that appear at least 'min_freq' times across all nested lists.", "code": "def common_elements_with_min_frequency(nestedlist, min_freq):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= min_freq]", "task_id": "111_cff8c978-98c4-4db9-be6a-ca32ebb9bc57", "test_setup_code": "", "test_list": ["assert common_elements_with_min_frequency([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3, 4]", "assert common_elements_with_min_frequency([[1, 2], [2, 3], [3, 4]], 3) == []", "assert common_elements_with_min_frequency([[1, 1, 1], [1, 2, 2], [2, 2, 3]], 3) == [1, 2]", "assert common_elements_with_min_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common_elements_with_min_frequency([[], [], []], 1) == []", "assert common_elements_with_min_frequency([[1, 2, 3]], 1) == [1, 2, 3]", "assert common_elements_with_min_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [1, 2, 3]", "assert common_elements_with_min_frequency([[1, 2, 2], [2, 3, 3], [3, 4, 4]], 2) == [2, 3]", "assert common_elements_with_min_frequency([[1, 2, 3], [1, 2, 4], [1, 2, 5]], 3) == [1, 2]", "assert common_elements_with_min_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == []", "assert common_elements_with_min_frequency([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 3) == [3]", "assert common_elements_with_min_frequency([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 9) == [1]", "assert common_elements_with_min_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common_elements_with_min_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1) == [1, 2, 3]", "assert common_elements_with_min_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 4) == []"], "challenge_test_list": []}
{"text": "Write a function to find elements that appear at most 'max_freq' times across all nested lists.", "code": "def common_elements_with_max_frequency(nestedlist, max_freq):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq <= max_freq]", "task_id": "111_7f0b8275-a5b0-4090-9077-f957345a73af", "test_setup_code": "", "test_list": ["assert common_elements_with_max_frequency([[1, 2, 3], [4, 2, 6], [1, 7, 8]], 1) == [3, 4, 6, 7, 8]", "assert common_elements_with_max_frequency([[1, 2, 2], [3, 4, 4], [5, 6, 6]], 2) == [1, 2, 3, 4, 5, 6]", "assert common_elements_with_max_frequency([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 0) == []", "assert common_elements_with_max_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common_elements_with_max_frequency([[1, 2], [2, 3], [3, 4]], 2) == [1, 4]", "assert common_elements_with_max_frequency([[], [], []], 1) == []", "assert common_elements_with_max_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [1, 2, 3]", "assert common_elements_with_max_frequency([[1, 2], [3, 4], [5, 6]], 1) == [1, 2, 3, 4, 5, 6]", "assert common_elements_with_max_frequency([[1, 2, 2], [2, 3, 3], [3, 4, 4]], 2) == [1]", "assert common_elements_with_max_frequency([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 1) == []", "assert common_elements_with_max_frequency([[1, 2, 3], [3, 4, 5], [5, 6, 7]], 2) == [1, 2, 4, 6, 7]", "assert common_elements_with_max_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []", "assert common_elements_with_max_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 1) == []", "assert common_elements_with_max_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert common_elements_with_max_frequency([[1, 1, 2], [2, 3, 3], [3, 4, 4]], 1) == [4]"], "challenge_test_list": []}
{"text": "Write a function to find common elements in the first 'n' nested lists.", "code": "def common_elements_in_first_n_lists(nestedlist, n):\n    return list(set.intersection(*map(set, nestedlist[:n])))", "task_id": "111_b15c669b-8c17-4f8c-8fad-97eb49907a6c", "test_setup_code": "", "test_list": ["assert common_elements_in_first_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [2, 3]", "assert common_elements_in_first_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 3) == [3]", "assert common_elements_in_first_n_lists([[1, 2], [2, 3], [3, 4]], 1) == [1, 2]", "assert common_elements_in_first_n_lists([[1, 2], [2, 3], [3, 4]], 0) == []", "assert common_elements_in_first_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == []", "assert common_elements_in_first_n_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [1, 2, 3]", "assert common_elements_in_first_n_lists([[1], [1], [1]], 3) == [1]", "assert common_elements_in_first_n_lists([[1, 2, 3], [2, 3, 4]], 2) == [2, 3]", "assert common_elements_in_first_n_lists([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]], 3) == [3, 4]", "assert common_elements_in_first_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [1, 2, 3]", "assert common_elements_in_first_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == []", "assert common_elements_in_first_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 1) == [1, 2, 3]", "assert common_elements_in_first_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 0) == []", "assert common_elements_in_first_n_lists([[], [], []], 3) == []", "assert common_elements_in_first_n_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 2) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find common elements in the last 'n' nested lists.", "code": "def common_elements_in_last_n_lists(nestedlist, n):\n    return list(set.intersection(*map(set, nestedlist[-n:])))", "task_id": "111_6df759fb-14a3-4002-aed1-70b9aef6d6fc", "test_setup_code": "", "test_list": ["assert common_elements_in_last_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == []", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 2) == [3, 4]", "assert common_elements_in_last_n_lists([[1, 2], [2, 3], [2, 4]], 3) == [2]", "assert common_elements_in_last_n_lists([[1, 2, 3]], 1) == [1, 2, 3]", "assert common_elements_in_last_n_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == [1, 2, 3]", "assert common_elements_in_last_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [7, 8, 9]", "assert common_elements_in_last_n_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == []", "assert common_elements_in_last_n_lists([[], [1, 2], [2, 3]], 2) == []", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 3) == [3]", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], 1) == [3, 4, 5]", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], 2) == [4, 5]", "assert common_elements_in_last_n_lists([[1, 2], [2, 3], [3, 4], [4, 5]], 4) == []", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], 3) == [4]", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], 4) == []", "assert common_elements_in_last_n_lists([[1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6]], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists, excluding elements present in the 'exclude' list.", "code": "def common_elements_with_exclusion(nestedlist, exclude):\n    common_elements = list(set.intersection(*map(set, nestedlist)))\n    return [item for item in common_elements if item not in exclude]", "task_id": "111_1853e6ad-1490-4cfc-8a77-e813c11c308d", "test_setup_code": "", "test_list": ["assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [3]) == [2]", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [2, 3]) == []", "assert common_elements_with_exclusion([[1, 2], [2, 3], [2, 4]], []) == [2]", "assert common_elements_with_exclusion([[1, 2], [2, 3], [2, 4]], [2]) == []", "assert common_elements_with_exclusion([[1, 2, 3], [4, 5, 6], [7, 8, 9]], []) == []", "assert common_elements_with_exclusion([[1, 2, 3], [1, 2, 3], [1, 2, 3]], [1]) == [2, 3]", "assert common_elements_with_exclusion([[1, 2, 3], [1, 2, 3], [1, 2, 3]], [1, 2, 3]) == []", "assert common_elements_with_exclusion([[1]], [1]) == []", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [4]) == [2, 3]", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [5]) == [2, 3]", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [1, 2, 3, 4, 5]) == []", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [0]) == [2, 3]", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [2, 4]) == [3]", "assert common_elements_with_exclusion([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [3, 5]) == [2]", "assert common_elements_with_exclusion([[1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]], [4]) == [3, 5]"], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists that fall within a specified range [start, end].", "code": "def common_elements_within_range(nestedlist, start, end):\n    common_elements = list(set.intersection(*map(set, nestedlist)))\n    return [item for item in common_elements if start <= item <= end]", "task_id": "111_f250d3d4-641d-4ce0-8fef-b5b9507b0a2e", "test_setup_code": "", "test_list": ["assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 5, 6]], 2, 3) == [2]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 1, 3) == [2, 3]", "assert common_elements_within_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 9) == []", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 0, 1) == []", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 3, 6) == [3]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 2, 2) == [2]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 4, 5) == []", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 1, 2) == [2]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 0, 0) == []", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 5, 6) == []", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 2, 4) == [2, 3]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 3, 3) == [3]", "assert common_elements_within_range([[1, 2, 3], [2, 3, 4], [2, 3, 6]], 1, 4) == [2, 3]", "assert common_elements_within_range([[1, 2], [2, 3], [2, 4]], 2, 2) == [2]", "assert common_elements_within_range([[1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 6]], 2, 4) == [2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists that have at least 'min_length' elements.", "code": "def common_elements_with_min_length(nestedlist, min_length):\n    filtered_lists = [sublist for sublist in nestedlist if len(sublist) >= min_length]\n    return list(set.intersection(*map(set, filtered_lists)))", "task_id": "111_08544fa0-ea6d-4300-8d69-7aa593fd643a", "test_setup_code": "", "test_list": ["assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 5]], 2) == [2]", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 5]], 3) == []", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 3, 5]], 2) == [2, 3]", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 3, 5]], 1) == [2, 3]", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 3, 5]], 4) == []", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4]], 2) == [2, 3]", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4]], 3) == []", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6]], 2) == [2, 3]", "assert common_elements_with_min_length([[1, 2, 3], [2, 3, 4], [2, 3, 5], [2, 3, 6]], 3) == []", "assert common_elements_with_min_length([[1, 2], [2, 3], [2, 4]], 2) == [2]", "assert common_elements_with_min_length([[1, 2], [2, 3], [2, 4]], 1) == [2]", "assert common_elements_with_min_length([[1, 2], [2, 3], [2, 4]], 3) == []", "assert common_elements_with_min_length([[1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 6]], 3) == [2, 3, 4]", "assert common_elements_with_min_length([[1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 6]], 4) == [2, 3, 4]", "assert common_elements_with_min_length([[1, 2, 3, 4], [2, 3, 4, 5], [2, 3, 4, 6]], 5) == []"], "challenge_test_list": []}
{"text": "Write a python function to find the area of a rectangle.", "code": "def area_of_rectangle(length: int, width: int) -> int:\n    return length * width", "task_id": "112_6b33f9a1-fd0c-4214-8e53-18e9a8e62ff0", "test_setup_code": "", "test_list": ["assert area_of_rectangle(5, 10) == 50", "assert area_of_rectangle(0, 10) == 0", "assert area_of_rectangle(10, 0) == 0", "assert area_of_rectangle(1, 1) == 1", "assert area_of_rectangle(100, 200) == 20000", "assert area_of_rectangle(999, 999) == 998001", "assert area_of_rectangle(1, 1000) == 1000", "assert area_of_rectangle(1000, 1) == 1000", "assert area_of_rectangle(123, 456) == 56088", "assert area_of_rectangle(2147483647, 1) == 2147483647", "assert area_of_rectangle(1, 2147483647) == 2147483647", "assert area_of_rectangle(2, 2) == 4", "assert area_of_rectangle(3, 7) == 21", "assert area_of_rectangle(10, 10) == 100", "assert area_of_rectangle(50, 50) == 2500"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cylinder.", "code": "import math\n\ndef volume_of_cylinder(radius: float, height: float) -> float:\n    return math.pi * radius**2 * height", "task_id": "112_c4a458c4-1de5-4465-b157-b083e9a497ec", "test_setup_code": "", "test_list": ["assert volume_of_cylinder(1, 1) == 3.141592653589793", "assert volume_of_cylinder(0, 10) == 0.0", "assert volume_of_cylinder(10, 0) == 0.0", "assert volume_of_cylinder(2.5, 4) == 78.53981633974483", "assert volume_of_cylinder(3, 3) == 84.82300164692441", "assert volume_of_cylinder(1.5, 2.5) == 17.671458676442587", "assert volume_of_cylinder(100, 1) == 31415.926535897932", "assert volume_of_cylinder(1, 100) == 314.1592653589793", "assert volume_of_cylinder(0.1, 0.1) == 0.0031415926535897933", "assert volume_of_cylinder(1e-6, 1e-6) == 3.141592653589793e-18", "assert volume_of_cylinder(1e6, 1e6) == 3.141592653589793e+18", "assert volume_of_cylinder(1.234, 5.678) == 27.243221046799147", "assert volume_of_cylinder(2, 3.5) == 43.982297150257104", "assert volume_of_cylinder(7.89, 0.12) == 23.43559215301057", "assert volume_of_cylinder(0.001, 0.001) == 3.141592653589793e-9"], "challenge_test_list": []}
{"text": "Write a python function to find the perimeter of a rectangle.", "code": "def perimeter_of_rectangle(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "112_186c18bc-556e-4511-b358-94e3bb42d4d1", "test_setup_code": "", "test_list": ["assert perimeter_of_rectangle(1, 1) == 4", "assert perimeter_of_rectangle(0, 0) == 0", "assert perimeter_of_rectangle(10, 5) == 30", "assert perimeter_of_rectangle(100, 50) == 300", "assert perimeter_of_rectangle(3, 7) == 20", "assert perimeter_of_rectangle(8, 8) == 32", "assert perimeter_of_rectangle(2, 3) == 10", "assert perimeter_of_rectangle(0, 5) == 10", "assert perimeter_of_rectangle(5, 0) == 10", "assert perimeter_of_rectangle(999, 1) == 2000", "assert perimeter_of_rectangle(1, 999) == 2000", "assert perimeter_of_rectangle(123, 456) == 1158", "assert perimeter_of_rectangle(2147483647, 1) == 4294967296", "assert perimeter_of_rectangle(1, 2147483647) == 4294967296", "assert perimeter_of_rectangle(2147483647, 2147483647) == 8589934592"], "challenge_test_list": []}
{"text": "Write a python function to find the area of a circle.", "code": "import math\n\ndef area_of_circle(radius: float) -> float:\n    return math.pi * radius**2", "task_id": "112_204a957d-4324-4bbf-8a16-b5baafd032e3", "test_setup_code": "", "test_list": ["assert area_of_circle(0) == 0.0", "assert area_of_circle(1) == 3.141592653589793", "assert area_of_circle(-1) == 3.141592653589793", "assert area_of_circle(2.5) == 19.634954084936208", "assert area_of_circle(10) == 314.1592653589793", "assert area_of_circle(0.1) == 0.031415926535897934", "assert area_of_circle(100) == 31415.926535897932", "assert area_of_circle(1e-10) == 3.1415926535897936e-20", "assert area_of_circle(1e10) == 3.1415926535897933e+20", "assert area_of_circle(3.14159) == 31.006224300558934", "assert area_of_circle(1.23456789) == 4.788283183070884", "assert area_of_circle(123456789) == 4.788283183070884e+16", "assert area_of_circle(0.000001) == 3.141592653589793e-12", "assert area_of_circle(999999.999999) == 3.141592653589793e+12", "assert area_of_circle(5.5) == 95.03317777109125"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cube.", "code": "def volume_of_cube(side: int) -> int:\n    return side**3", "task_id": "112_7440f221-f115-413b-9497-553bf318792b", "test_setup_code": "", "test_list": ["assert volume_of_cube(1) == 1", "assert volume_of_cube(0) == 0", "assert volume_of_cube(2) == 8", "assert volume_of_cube(3) == 27", "assert volume_of_cube(10) == 1000", "assert volume_of_cube(5) == 125", "assert volume_of_cube(7) == 343", "assert volume_of_cube(15) == 3375", "assert volume_of_cube(20) == 8000", "assert volume_of_cube(25) == 15625", "assert volume_of_cube(50) == 125000", "assert volume_of_cube(100) == 1000000", "assert volume_of_cube(12) == 1728", "assert volume_of_cube(8) == 512", "assert volume_of_cube(6) == 216"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cube.", "code": "def surface_area_of_cube(side: int) -> int:\n    return 6 * side**2", "task_id": "112_cd3029dd-763c-40cc-b6ab-4b3041e60b48", "test_setup_code": "", "test_list": ["assert surface_area_of_cube(1) == 6", "assert surface_area_of_cube(2) == 24", "assert surface_area_of_cube(3) == 54", "assert surface_area_of_cube(0) == 0", "assert surface_area_of_cube(10) == 600", "assert surface_area_of_cube(100) == 60000", "assert surface_area_of_cube(50) == 15000", "assert surface_area_of_cube(5) == 150", "assert surface_area_of_cube(7) == 294", "assert surface_area_of_cube(8) == 384", "assert surface_area_of_cube(12) == 864", "assert surface_area_of_cube(15) == 1350", "assert surface_area_of_cube(20) == 2400", "assert surface_area_of_cube(25) == 3750", "assert surface_area_of_cube(30) == 5400"], "challenge_test_list": []}
{"text": "Write a python function to find the circumference of a circle.", "code": "import math\n\ndef circumference_of_circle(radius: float) -> float:\n    return 2 * math.pi * radius", "task_id": "112_7fb45936-d8c0-494e-ad49-c9ff2c65ec0e", "test_setup_code": "", "test_list": ["assert circumference_of_circle(1) == 2 * math.pi", "assert circumference_of_circle(0) == 0", "assert circumference_of_circle(2.5) == 2 * math.pi * 2.5", "assert circumference_of_circle(-1) == -2 * math.pi", "assert circumference_of_circle(100) == 2 * math.pi * 100", "assert circumference_of_circle(0.1) == 2 * math.pi * 0.1", "assert circumference_of_circle(3.14159) == 2 * math.pi * 3.14159", "assert circumference_of_circle(1e-10) == 2 * math.pi * 1e-10", "assert circumference_of_circle(1e10) == 2 * math.pi * 1e10", "assert circumference_of_circle(123456789) == 2 * math.pi * 123456789", "assert circumference_of_circle(0.00001) == 2 * math.pi * 0.00001", "assert circumference_of_circle(50) == 2 * math.pi * 50", "assert circumference_of_circle(7) == 2 * math.pi * 7", "assert circumference_of_circle(0.333) == 2 * math.pi * 0.333", "assert circumference_of_circle(9.81) == 2 * math.pi * 9.81"], "challenge_test_list": []}
{"text": "Write a python function to find the area of a triangle.", "code": "def area_of_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "112_981c1d9d-1c01-4a36-a856-9dd027da32c5", "test_setup_code": "", "test_list": ["assert area_of_triangle(10, 5) == 25.0", "assert area_of_triangle(0, 10) == 0.0", "assert area_of_triangle(10, 0) == 0.0", "assert area_of_triangle(1, 1) == 0.5", "assert area_of_triangle(3.5, 2) == 3.5", "assert area_of_triangle(7, 3.5) == 12.25", "assert area_of_triangle(100, 50) == 2500.0", "assert area_of_triangle(0.1, 0.1) == 0.005", "assert area_of_triangle(1000, 2000) == 1000000.0", "assert area_of_triangle(0.0001, 0.0001) == 5e-09", "assert area_of_triangle(123.456, 789.012) == 48614.060256", "assert area_of_triangle(1e-10, 1e-10) == 5e-21", "assert area_of_triangle(1e10, 1e10) == 5e19", "assert area_of_triangle(3, 4) == 6.0", "assert area_of_triangle(5, 12) == 30.0"], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a sphere.", "code": "import math\n\ndef volume_of_sphere(radius: float) -> float:\n    return (4/3) * math.pi * radius**3", "task_id": "112_91a3a4c9-ccf7-41e6-a122-4885ec305546", "test_setup_code": "", "test_list": ["assert volume_of_sphere(1) == 4.1887902047863905", "assert volume_of_sphere(0) == 0.0", "assert volume_of_sphere(2) == 33.510321638291124", "assert volume_of_sphere(0.5) == 0.5235987755982988", "assert volume_of_sphere(10) == 4188.790204786391", "assert volume_of_sphere(3.5) == 179.59438003021648", "assert volume_of_sphere(100) == 4188790.2047863905", "assert volume_of_sphere(0.1) == 0.004188790204786391", "assert volume_of_sphere(1.234) == 7.881947554728406", "assert volume_of_sphere(50) == 523598.7755982988", "assert volume_of_sphere(0.01) == 4.188790204786391e-06", "assert volume_of_sphere(5) == 523.5987755982989", "assert volume_of_sphere(7.89) == 2058.443178684358", "assert volume_of_sphere(0.001) == 4.188790204786391e-09", "assert volume_of_sphere(123.456) == 7883823.834936641"], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a sphere.", "code": "import math\n\ndef surface_area_of_sphere(radius: float) -> float:\n    return 4 * math.pi * radius**2", "task_id": "112_e5f476a0-f567-4b2d-adcc-7dbb3ad597b1", "test_setup_code": "", "test_list": ["assert surface_area_of_sphere(1) == 12.566370614359172", "assert surface_area_of_sphere(0) == 0.0", "assert surface_area_of_sphere(2.5) == 78.53981633974483", "assert surface_area_of_sphere(10) == 1256.6370614359173", "assert surface_area_of_sphere(0.1) == 0.12566370614359174", "assert surface_area_of_sphere(100) == 125663.70614359173", "assert surface_area_of_sphere(0.001) == 1.2566370614359173e-05", "assert surface_area_of_sphere(3.14159) == 124.02489720223573", "assert surface_area_of_sphere(5.5) == 380.132711084365", "assert surface_area_of_sphere(7.77) == 758.0652042432046", "assert surface_area_of_sphere(0.333) == 1.392920065876976", "assert surface_area_of_sphere(50) == 31415.926535897932", "assert surface_area_of_sphere(0.0001) == 1.2566370614359173e-07", "assert surface_area_of_sphere(15.75) == 3115.132446945336", "assert surface_area_of_sphere(8.88) == 990.3566310987358"], "challenge_test_list": []}
{"text": "Write a function to check if a string represents a floating-point number or not.", "code": "def check_float(text):\n    text = text.strip()\n    if len(text) < 1:\n        return False\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False", "task_id": "113_f782b4c5-d9cd-4e12-bd03-10db09373392", "test_setup_code": "", "test_list": ["assert check_float('3.14') == True", "assert check_float('0.1') == True", "assert check_float('-2.718') == True", "assert check_float(' ') == False", "assert check_float('abc') == False", "assert check_float('1e10') == True", "assert check_float('4.') == True", "assert check_float('.5') == True", "assert check_float('-.5') == True", "assert check_float('1.2.3') == False", "assert check_float('') == False", "assert check_float('  3.14  ') == True", "assert check_float('NaN') == True", "assert check_float('Infinity') == True", "assert check_float('-Infinity') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a string represents a valid hexadecimal number or not.", "code": "def check_hexadecimal(text):\n    text = text.strip()\n    if len(text) < 1:\n        return False\n    try:\n        int(text, 16)\n        return True\n    except ValueError:\n        return False", "task_id": "113_7dd3c086-244a-4772-9599-79b985128594", "test_setup_code": "", "test_list": ["assert check_hexadecimal('1A3F') == True", "assert check_hexadecimal('123') == True", "assert check_hexadecimal('0') == True", "assert check_hexadecimal('') == False", "assert check_hexadecimal('GHI') == False", "assert check_hexadecimal('1A3G') == False", "assert check_hexadecimal(' 1A3F ') == True", "assert check_hexadecimal(' 123 ') == True", "assert check_hexadecimal('0x1A3F') == False", "assert check_hexadecimal('0X1A3F') == False", "assert check_hexadecimal('1a3f') == True", "assert check_hexadecimal('abcdef') == True", "assert check_hexadecimal('ABCDEF') == True", "assert check_hexadecimal('1234567890abcdef') == True", "assert check_hexadecimal(' 1234567890abcdef ') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome or not.", "code": "def check_palindrome(text):\n    text = text.strip().lower()\n    return text == text[::-1]", "task_id": "113_4fb202f7-cab7-434c-b8b1-5f39829338fb", "test_setup_code": "", "test_list": ["assert check_palindrome('') == True", "assert check_palindrome('a') == True", "assert check_palindrome('aa') == True", "assert check_palindrome('ab') == False", "assert check_palindrome('aba') == True", "assert check_palindrome('abc') == False", "assert check_palindrome('A man a plan a canal Panama') == True", "assert check_palindrome('No lemon no melon') == True", "assert check_palindrome('Was it a car or a cat I saw') == True", "assert check_palindrome('Madam In Eden Im Adam') == True", "assert check_palindrome('12321') == True", "assert check_palindrome('12345') == False", "assert check_palindrome('Able was I ere I saw Elba') == True", "assert check_palindrome('Racecar') == True", "assert check_palindrome('Hello World') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a string is in uppercase or not.", "code": "def check_uppercase(text):\n    return text.isupper()", "task_id": "113_558ae498-9848-463c-985b-0679191a5b87", "test_setup_code": "", "test_list": ["assert check_uppercase('HELLO') == True", "assert check_uppercase('Hello') == False", "assert check_uppercase('hello') == False", "assert check_uppercase('12345') == False", "assert check_uppercase('') == False", "assert check_uppercase('HELLO WORLD') == True", "assert check_uppercase('HELLO WORLD!') == True", "assert check_uppercase('HELLO123') == True", "assert check_uppercase('HELLO 123') == True", "assert check_uppercase('hello world') == False", "assert check_uppercase('HELLO WORLD123') == True", "assert check_uppercase('123 HELLO') == True", "assert check_uppercase('!@#$%^&*()') == False", "assert check_uppercase('HELLO!@#') == True", "assert check_uppercase('HELLO123!@#') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a string is in lowercase or not.", "code": "def check_lowercase(text):\n    return text.islower()", "task_id": "113_2070413d-bc05-4bab-9d09-c746b7333e0b", "test_setup_code": "", "test_list": ["assert check_lowercase('hello') == True", "assert check_lowercase('Hello') == False", "assert check_lowercase('HELLO') == False", "assert check_lowercase('') == False", "assert check_lowercase('hello world') == True", "assert check_lowercase('Hello World') == False", "assert check_lowercase('123') == False", "assert check_lowercase('hello123') == True", "assert check_lowercase('HELLO123') == False", "assert check_lowercase('hello!') == True", "assert check_lowercase('Hello!') == False", "assert check_lowercase('!@#$%^&*()') == False", "assert check_lowercase('hello!@#') == True", "assert check_lowercase('HELLO!@#') == False", "assert check_lowercase('hello world!') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a string is alphanumeric or not.", "code": "def check_alphanumeric(text):\n    return text.isalnum()", "task_id": "113_221f6e02-33fe-4cb2-8bd0-8bda8d5f1195", "test_setup_code": "", "test_list": ["assert check_alphanumeric('abc123') == True", "assert check_alphanumeric('abc') == True", "assert check_alphanumeric('123') == True", "assert check_alphanumeric('abc123!') == False", "assert check_alphanumeric('abc 123') == False", "assert check_alphanumeric('') == False", "assert check_alphanumeric(' ') == False", "assert check_alphanumeric('!@#$%^&*()') == False", "assert check_alphanumeric('abcABC123') == True", "assert check_alphanumeric('abcABC') == True", "assert check_alphanumeric('1234567890') == True", "assert check_alphanumeric('abc123\n') == False", "assert check_alphanumeric('abc123\t') == False", "assert check_alphanumeric('abc123_') == False", "assert check_alphanumeric('abc123-') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a string is in title case or not.", "code": "def check_title_case(text):\n    return text.istitle()", "task_id": "113_eed6a50a-93ae-4fdf-a77c-6705aaae2f15", "test_setup_code": "", "test_list": ["assert check_title_case('This Is A Title Case String') == True", "assert check_title_case('this is not title case') == False", "assert check_title_case('This Is Not Title Case') == False", "assert check_title_case('This Is a Title Case String') == False", "assert check_title_case('This Is A Title Case String With Numbers 123') == True", "assert check_title_case('This Is A Title Case String With Special Characters!') == True", "assert check_title_case('This Is A Title Case String With Mixed CASE') == False", "assert check_title_case('This Is A Title Case String With ACRONYMS') == True", "assert check_title_case('This Is A Title Case String With Acronyms Like NASA') == True", "assert check_title_case('This Is A Title Case String With A Single Word') == True", "assert check_title_case('') == False", "assert check_title_case(' ') == False", "assert check_title_case('Title') == True", "assert check_title_case('tITLE') == False", "assert check_title_case('This Is A Title Case String With Hyphens-In-Between') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a string contains only ASCII characters or not.", "code": "def check_ascii(text):\n    return all(ord(char) < 128 for char in text)", "task_id": "113_5a6b9890-62c0-4075-8e26-877c22d91bc9", "test_setup_code": "", "test_list": ["assert check_ascii('Hello, World!') == True", "assert check_ascii('1234567890') == True", "assert check_ascii('') == True", "assert check_ascii(' ') == True", "assert check_ascii('!@#$%^&*()_+') == True", "assert check_ascii('abcdefghijklmnopqrstuvwxyz') == True", "assert check_ascii('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == True", "assert check_ascii('The quick brown fox jumps over the lazy dog') == True", "assert check_ascii('\u3053\u3093\u306b\u3061\u306f') == False", "assert check_ascii('\u4f60\u597d') == False", "assert check_ascii('\uc548\ub155\ud558\uc138\uc694') == False", "assert check_ascii('\u041f\u0440\u0438\u0432\u0435\u0442') == False", "assert check_ascii('\u0645\u0631\u062d\u0628\u0627') == False", "assert check_ascii('123 ABC abc !@#') == True", "assert check_ascii('Caf\u00e9') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with a vowel or not.", "code": "def check_vowel_start(text):\n    text = text.strip().lower()\n    return text[0] in 'aeiou' if text else False", "task_id": "113_8b3f6629-42fa-410e-b84e-8f741190b14b", "test_setup_code": "", "test_list": ["assert check_vowel_start('apple') == True", "assert check_vowel_start('Orange') == True", "assert check_vowel_start('umbrella') == True", "assert check_vowel_start('Elephant') == True", "assert check_vowel_start('Ice') == True", "assert check_vowel_start('banana') == False", "assert check_vowel_start('grape') == False", "assert check_vowel_start('cherry') == False", "assert check_vowel_start('kiwi') == False", "assert check_vowel_start('') == False", "assert check_vowel_start(' ') == False", "assert check_vowel_start('  apple') == True", "assert check_vowel_start('  Banana') == False", "assert check_vowel_start('123apple') == False", "assert check_vowel_start('!@#apple') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are empty or not.", "code": "def all_strings_empty(lst: list) -> bool:\n    return all(s == '' for s in lst)", "task_id": "115_03c8d424-6f73-4acf-acc4-b63a9574e1c0", "test_setup_code": "", "test_list": ["assert all_strings_empty([]) == True", "assert all_strings_empty(['']) == True", "assert all_strings_empty(['', '']) == True", "assert all_strings_empty(['', '', '']) == True", "assert all_strings_empty(['a']) == False", "assert all_strings_empty(['', 'a']) == False", "assert all_strings_empty(['a', '']) == False", "assert all_strings_empty(['a', 'b']) == False", "assert all_strings_empty(['', '', 'a']) == False", "assert all_strings_empty(['', ' ', '']) == False", "assert all_strings_empty(['', '', '', '']) == True", "assert all_strings_empty(['', '', '', 'a']) == False", "assert all_strings_empty(['', '', '', ' ']) == False", "assert all_strings_empty(['', '', '', '', '']) == True", "assert all_strings_empty(['', '', '', '', 'a']) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all lists in a list are empty or not.", "code": "def all_lists_empty(lst: list) -> bool:\n    return all(len(sublist) == 0 for sublist in lst)", "task_id": "115_1dbe631c-6e8e-46bc-b2d9-517a954bc217", "test_setup_code": "", "test_list": ["assert all_lists_empty([[], [], []]) == true", "assert all_lists_empty([[1], [], []]) == false", "assert all_lists_empty([[], [2], []]) == false", "assert all_lists_empty([[], [], [3]]) == false", "assert all_lists_empty([[]]) == true", "assert all_lists_empty([[1]]) == false", "assert all_lists_empty([]) == true", "assert all_lists_empty([[], [], [], []]) == true", "assert all_lists_empty([[1, 2, 3], [], []]) == false", "assert all_lists_empty([[], [1, 2, 3], []]) == false", "assert all_lists_empty([[], [], [1, 2, 3]]) == false", "assert all_lists_empty([[1], [2], [3]]) == false", "assert all_lists_empty([[], [], [], [], []]) == true", "assert all_lists_empty([[1], [], [2], [], [3]]) == false", "assert all_lists_empty([[], [], [], [], [], []]) == true"], "challenge_test_list": []}
{"text": "Write a function to check whether all sets in a list are empty or not.", "code": "def all_sets_empty(lst: list) -> bool:\n    return all(len(s) == 0 for s in lst)", "task_id": "115_8aef3721-49f3-4931-a163-dd3efad02965", "test_setup_code": "", "test_list": ["assert all_sets_empty([set(), set(), set()]) == true", "assert all_sets_empty([set(), {1}, set()]) == false", "assert all_sets_empty([{1, 2}, set(), set()]) == false", "assert all_sets_empty([set()]) == true", "assert all_sets_empty([{1}, {2}, {3}]) == false", "assert all_sets_empty([]) == true", "assert all_sets_empty([set(), set(), {1, 2, 3}]) == false", "assert all_sets_empty([set(), set(), set(), set()]) == true", "assert all_sets_empty([{1}, set(), set(), set()]) == false", "assert all_sets_empty([set(), {1}, {2}, set()]) == false", "assert all_sets_empty([set(), set(), set(), {1}]) == false", "assert all_sets_empty([set(), set(), set(), set(), set()]) == true", "assert all_sets_empty([set(), set({1}), set()]) == false", "assert all_sets_empty([set(), set(), set(), set(), set(), set()]) == true", "assert all_sets_empty([{1, 2, 3}, set(), set(), set()]) == false"], "challenge_test_list": []}
{"text": "Write a function to check whether all tuples in a list are empty or not.", "code": "def all_tuples_empty(lst: list) -> bool:\n    return all(len(t) == 0 for t in lst)", "task_id": "115_270f7c1e-e265-403b-8953-cb30b3f3ee3b", "test_setup_code": "", "test_list": ["assert all_tuples_empty([]) == True", "assert all_tuples_empty([()]) == True", "assert all_tuples_empty([(), ()]) == True", "assert all_tuples_empty([(), (1,)]) == False", "assert all_tuples_empty([(1,), ()]) == False", "assert all_tuples_empty([(1,), (2,)]) == False", "assert all_tuples_empty([(1, 2), ()]) == False", "assert all_tuples_empty([(), (), (), ()]) == True", "assert all_tuples_empty([(), (1, 2, 3), ()]) == False", "assert all_tuples_empty([(0,), ()]) == False", "assert all_tuples_empty([(), (None,)]) == False", "assert all_tuples_empty([(), (False,)]) == False", "assert all_tuples_empty([(), (), (None, None)]) == False", "assert all_tuples_empty([(1, 2, 3), (4, 5, 6)]) == False", "assert all_tuples_empty([(), (), (), (1,)]) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all values in a list are None or not.", "code": "def all_values_none(lst: list) -> bool:\n    return all(x is None for x in lst)", "task_id": "115_86f8f26b-1130-46d0-9442-df81be30b1c4", "test_setup_code": "", "test_list": ["assert all_values_none([]) == True", "assert all_values_none([None]) == True", "assert all_values_none([None, None, None]) == True", "assert all_values_none([None, 1, None]) == False", "assert all_values_none([1, 2, 3]) == False", "assert all_values_none([None, None, 'None']) == False", "assert all_values_none([None, None, 0]) == False", "assert all_values_none([None, None, False]) == False", "assert all_values_none([None, None, '']) == False", "assert all_values_none([None, None, []]) == False", "assert all_values_none([None, None, {}]) == False", "assert all_values_none([None, None, [None]]) == False", "assert all_values_none([None, None, (None,)]) == False", "assert all_values_none([None, None, None, None, None]) == True", "assert all_values_none([None, None, None, None, 1]) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are uppercase or not.", "code": "def all_strings_uppercase(lst: list) -> bool:\n    return all(s.isupper() for s in lst)", "task_id": "115_a65ea644-7c66-404f-ace3-f331dcbc1b7f", "test_setup_code": "", "test_list": ["assert all_strings_uppercase(['HELLO', 'WORLD']) == True", "assert all_strings_uppercase(['hello', 'WORLD']) == False", "assert all_strings_uppercase(['HELLO', 'WORLD', 'PYTHON']) == True", "assert all_strings_uppercase(['HELLO', 'world', 'PYTHON']) == False", "assert all_strings_uppercase(['HELLO', 'WORLD', '123']) == True", "assert all_strings_uppercase(['HELLO', 'WORLD', 'Python']) == False", "assert all_strings_uppercase(['HELLO', 'WORLD', '']) == True", "assert all_strings_uppercase(['HELLO', '', 'WORLD']) == True", "assert all_strings_uppercase(['']) == True", "assert all_strings_uppercase(['HELLO']) == True", "assert all_strings_uppercase(['hello']) == False", "assert all_strings_uppercase(['HELLO', 'WORLD', '123', '456']) == True", "assert all_strings_uppercase(['HELLO', 'WORLD', '123', '456', 'Python']) == False", "assert all_strings_uppercase(['HELLO', 'WORLD', '123', '456', '']) == True", "assert all_strings_uppercase([]) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all numbers in a list are positive or not.", "code": "def all_numbers_positive(lst: list) -> bool:\n    return all(x > 0 for x in lst)", "task_id": "115_d2762df4-f9ab-4712-9eea-94d9ac7ad02f", "test_setup_code": "", "test_list": ["assert all_numbers_positive([1, 2, 3, 4, 5]) == True", "assert all_numbers_positive([0, 1, 2, 3, 4]) == False", "assert all_numbers_positive([-1, 2, 3, 4, 5]) == False", "assert all_numbers_positive([10, 20, 30, 40, 50]) == True", "assert all_numbers_positive([-10, -20, -30, -40, -50]) == False", "assert all_numbers_positive([1]) == True", "assert all_numbers_positive([-1]) == False", "assert all_numbers_positive([]) == True", "assert all_numbers_positive([1000000, 2000000, 3000000]) == True", "assert all_numbers_positive([-1000000, 2000000, 3000000]) == False", "assert all_numbers_positive([1, 2, 3, 4, 0]) == False", "assert all_numbers_positive([1.5, 2.5, 3.5, 4.5]) == True", "assert all_numbers_positive([-1.5, 2.5, 3.5, 4.5]) == False", "assert all_numbers_positive([1, 2, -3, 4, 5]) == False", "assert all_numbers_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all elements in a list are equal or not.", "code": "def all_elements_equal(lst: list) -> bool:\n    return all(x == lst[0] for x in lst)", "task_id": "115_d87d4e7a-4918-41da-abaf-0edf770a177e", "test_setup_code": "", "test_list": ["assert all_elements_equal([1, 1, 1, 1]) == true", "assert all_elements_equal([1, 2, 1, 1]) == false", "assert all_elements_equal(['a', 'a', 'a']) == true", "assert all_elements_equal(['a', 'b', 'a']) == false", "assert all_elements_equal([True, True, True]) == true", "assert all_elements_equal([True, False, True]) == false", "assert all_elements_equal([None, None, None]) == true", "assert all_elements_equal([None, 1, None]) == false", "assert all_elements_equal([]) == true", "assert all_elements_equal([5]) == true", "assert all_elements_equal([0, 0, 0, 0, 0, 0]) == true", "assert all_elements_equal([0, 0, 0, 1, 0, 0]) == false", "assert all_elements_equal(['same', 'same', 'same']) == true", "assert all_elements_equal(['same', 'different', 'same']) == false", "assert all_elements_equal([1.1, 1.1, 1.1]) == true"], "challenge_test_list": []}
{"text": "Write a function to check whether a specific key is present in all dictionaries in a list.", "code": "def all_keys_present(lst: list, key: str) -> bool:\n    return all(key in d for d in lst)", "task_id": "115_16481042-a458-46e9-a6b3-6a3127d567a2", "test_setup_code": "", "test_list": ["assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], 'a') == True", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], 'b') == True", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'c': 4}], 'b') == False", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], 'c') == False", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4, 'c': 5}], 'c') == False", "assert all_keys_present([{'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5, 'c': 6}], 'c') == True", "assert all_keys_present([{'a': 1}, {'a': 2}, {'a': 3}], 'a') == True", "assert all_keys_present([{'a': 1}, {'b': 2}, {'c': 3}], 'a') == False", "assert all_keys_present([{'a': 1, 'b': 2}], 'a') == True", "assert all_keys_present([{'a': 1, 'b': 2}], 'b') == True", "assert all_keys_present([{'a': 1, 'b': 2}], 'c') == False", "assert all_keys_present([], 'a') == True", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4}], '') == False", "assert all_keys_present([{'': 1, 'b': 2}, {'': 3, 'b': 4}], '') == True", "assert all_keys_present([{'a': 1, 'b': 2}, {'a': 3, 'b': 4, 'c': 5}], 'a') == True"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into an integer.", "code": "def list_to_int(nums):\n    result = int(''.join(map(str, nums)))\n    return result", "task_id": "116_74b829be-7e13-4632-aae2-c944027f71c4", "test_setup_code": "", "test_list": ["assert list_to_int([1, 2, 3]) == 123", "assert list_to_int([0]) == 0", "assert list_to_int([9, 8, 7, 6, 5]) == 98765", "assert list_to_int([1, 0, 0, 0]) == 1000", "assert list_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1234567890", "assert list_to_int([5, 5, 5, 5, 5]) == 55555", "assert list_to_int([1, 2, 3, 0, 4, 5]) == 123045", "assert list_to_int([7, 0, 0, 7]) == 7007", "assert list_to_int([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1111111111", "assert list_to_int([2, 3, 4, 5, 6, 7, 8, 9, 0, 1]) == 2345678901", "assert list_to_int([0, 0, 0, 1]) == 1", "assert list_to_int([1, 0, 1, 0]) == 1010", "assert list_to_int([3, 2, 1]) == 321", "assert list_to_int([4, 0, 4, 0, 4, 0]) == 404040", "assert list_to_int([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 123456789"], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a string.", "code": "def tuple_to_str(nums):\n    result = ''.join(map(str, nums))\n    return result", "task_id": "116_7e26c663-bebe-42cf-81f2-ec41e3b15a3b", "test_setup_code": "", "test_list": ["assert tuple_to_str((1, 2, 3)) == '123'", "assert tuple_to_str((0,)) == '0'", "assert tuple_to_str((9, 8, 7, 6, 5, 4, 3, 2, 1, 0)) == '9876543210'", "assert tuple_to_str((123, 456, 789)) == '123456789'", "assert tuple_to_str((1, 1, 1, 1)) == '1111'", "assert tuple_to_str((10, 20, 30)) == '102030'", "assert tuple_to_str((100, 200, 300)) == '100200300'", "assert tuple_to_str((999, 888, 777)) == '999888777'", "assert tuple_to_str((5, 5, 5, 5, 5)) == '55555'", "assert tuple_to_str((0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == '0123456789'", "assert tuple_to_str((1, 0, 1, 0, 1, 0)) == '101010'", "assert tuple_to_str((11, 22, 33, 44)) == '11223344'", "assert tuple_to_str((12345,)) == '12345'", "assert tuple_to_str((0, 0, 0, 0)) == '0000'", "assert tuple_to_str((1, 234, 5678, 90)) == '1234567890'"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a string.", "code": "def list_to_str(nums):\n    result = ''.join(map(str, nums))\n    return result", "task_id": "116_16e25c5a-93d6-4e7b-b6f9-3a43b7ef93b8", "test_setup_code": "", "test_list": ["assert list_to_str([1, 2, 3]) == '123'", "assert list_to_str([0]) == '0'", "assert list_to_str([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == '9876543210'", "assert list_to_str([123, 456, 789]) == '123456789'", "assert list_to_str([1, 11, 111]) == '111111'", "assert list_to_str([100, 200, 300]) == '100200300'", "assert list_to_str([5, 50, 500]) == '550500'", "assert list_to_str([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '12345678910'", "assert list_to_str([1000, 2000, 3000]) == '100020003000'", "assert list_to_str([7, 70, 700]) == '770700'", "assert list_to_str([1, 2, 3, 4, 5, 6, 7, 8, 9]) == '123456789'", "assert list_to_str([10, 20, 30, 40, 50]) == '1020304050'", "assert list_to_str([111, 222, 333]) == '111222333'", "assert list_to_str([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == '0123456789'", "assert list_to_str([999, 888, 777]) == '999888777'"], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a float.", "code": "def tuple_to_float(nums):\n    result = float(''.join(map(str, nums)))\n    return result", "task_id": "116_4f21811d-ef62-4f69-88e3-f84fb3a6bf09", "test_setup_code": "", "test_list": ["assert tuple_to_float((1, 2, 3)) == 123.0", "assert tuple_to_float((0, 1, 2)) == 12.0", "assert tuple_to_float((9, 9, 9)) == 999.0", "assert tuple_to_float((1,)) == 1.0", "assert tuple_to_float((1, 0, 0, 0)) == 1000.0", "assert tuple_to_float((1, 2, 3, 4, 5)) == 12345.0", "assert tuple_to_float((5, 0, 0, 5)) == 5005.0", "assert tuple_to_float((7, 8, 9, 0)) == 7890.0", "assert tuple_to_float((0, 0, 0, 1)) == 1.0", "assert tuple_to_float((1, 1, 1, 1)) == 1111.0", "assert tuple_to_float((4, 5, 6, 7, 8, 9)) == 456789.0", "assert tuple_to_float((1, 2, 3, 0, 4, 5)) == 123045.0", "assert tuple_to_float((2, 0, 2, 1)) == 2021.0", "assert tuple_to_float((3, 1, 4, 1, 5, 9)) == 314159.0", "assert tuple_to_float((0, 0, 0, 0)) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a float.", "code": "def list_to_float(nums):\n    result = float(''.join(map(str, nums)))\n    return result", "task_id": "116_690d4dd5-e1e2-40d3-a8b1-5f126b308ad1", "test_setup_code": "", "test_list": ["assert list_to_float([1, 2, 3]) == 123.0", "assert list_to_float([0]) == 0.0", "assert list_to_float([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == 9876543210.0", "assert list_to_float([1, 0, 0, 0, 0]) == 10000.0", "assert list_to_float([5, 5, 5, 5, 5]) == 55555.0", "assert list_to_float([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 1234567890.0", "assert list_to_float([1, 0, 1, 0, 1, 0]) == 101010.0", "assert list_to_float([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3333333333.0", "assert list_to_float([2, 4, 6, 8, 0]) == 24680.0", "assert list_to_float([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1111111111.0", "assert list_to_float([7, 0, 0, 7]) == 7007.0", "assert list_to_float([4, 2]) == 42.0", "assert list_to_float([0, 0, 0, 0, 0]) == 0.0", "assert list_to_float([9]) == 9.0", "assert list_to_float([1, 2, 0, 3, 4]) == 12034.0"], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a hexadecimal string.", "code": "def tuple_to_hex(nums):\n    result = hex(int(''.join(map(str, nums))))\n    return result", "task_id": "116_9017c059-f7e4-491e-b4f6-bbd0caeea89d", "test_setup_code": "", "test_list": ["assert tuple_to_hex((1, 2, 3)) == '0x123'", "assert tuple_to_hex((10, 11, 12)) == '0xa0b0c'", "assert tuple_to_hex((255,)) == '0xff'", "assert tuple_to_hex((0,)) == '0x0'", "assert tuple_to_hex((16, 32, 48)) == '0x102030'", "assert tuple_to_hex((1, 0, 0, 0)) == '0x1000'", "assert tuple_to_hex((1, 2, 3, 4, 5, 6, 7, 8, 9, 0)) == '0x1234567890'", "assert tuple_to_hex((15, 15, 15)) == '0xf0f0f'", "assert tuple_to_hex((1, 1, 1, 1)) == '0x1111'", "assert tuple_to_hex((9, 8, 7, 6, 5, 4, 3, 2, 1)) == '0x987654321'", "assert tuple_to_hex((0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == '0x123456789'", "assert tuple_to_hex((1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == '0x1111111111'", "assert tuple_to_hex((10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) == '0xa141e28323c4650'", "assert tuple_to_hex((123, 456, 789)) == '0x7b1c8f5'", "assert tuple_to_hex((999, 888, 777)) == '0x3e73b8a9'"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a hexadecimal string.", "code": "def list_to_hex(nums):\n    result = hex(int(''.join(map(str, nums))))\n    return result", "task_id": "116_15f21319-b3f9-4083-9c2b-8a11a5d48f6f", "test_setup_code": "", "test_list": ["assert list_to_hex([10, 11, 12]) == '0xa0b0c'", "assert list_to_hex([1, 2, 3, 4, 5]) == '0x12345'", "assert list_to_hex([255, 255, 255]) == '0xfff'", "assert list_to_hex([0]) == '0x0'", "assert list_to_hex([16, 32, 48]) == '0x102030'", "assert list_to_hex([1, 0, 1]) == '0x101'", "assert list_to_hex([15, 15, 15]) == '0xf0f0f'", "assert list_to_hex([123, 456, 789]) == '0x123456789'", "assert list_to_hex([9, 8, 7, 6, 5, 4, 3, 2, 1]) == '0x987654321'", "assert list_to_hex([0, 0, 0, 0]) == '0x0'", "assert list_to_hex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '0x123456789a'", "assert list_to_hex([10, 20, 30, 40, 50]) == '0xa14283c28'", "assert list_to_hex([100, 200, 300]) == '0x100200300'", "assert list_to_hex([4096, 8192, 16384]) == '0x100020004000'", "assert list_to_hex([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == '0x1111111111'"], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a binary string.", "code": "def tuple_to_bin(nums):\n    result = bin(int(''.join(map(str, nums))))\n    return result", "task_id": "116_b257c118-103a-4e1e-b261-c1c8c77e71fc", "test_setup_code": "", "test_list": ["assert tuple_to_bin((1, 2, 3)) == '0b1111011'", "assert tuple_to_bin((0,)) == '0b0'", "assert tuple_to_bin((1, 0, 1)) == '0b1100101'", "assert tuple_to_bin((9, 9, 9)) == '0b1111100111'", "assert tuple_to_bin((1, 1, 1, 1)) == '0b1111'", "assert tuple_to_bin((1, 2, 3, 4, 5)) == '0b111101100110101'", "assert tuple_to_bin((2, 5, 6)) == '0b100000110'", "assert tuple_to_bin((7, 8, 9)) == '0b1111101001'", "assert tuple_to_bin((3, 3, 3)) == '0b1101001011'", "assert tuple_to_bin((4, 4, 4)) == '0b111000100'", "assert tuple_to_bin((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '0b1111011001101011101110001001'", "assert tuple_to_bin((1, 0, 0, 0, 0, 0, 0, 0, 1)) == '0b10000000000000001'", "assert tuple_to_bin((5, 5, 5)) == '0b1000101011'", "assert tuple_to_bin((1, 2, 3, 4, 5, 6, 7, 8, 0)) == '0b1111011001101011101110001000'", "assert tuple_to_bin((8, 8, 8)) == '0b1101111000'"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a binary string.", "code": "def list_to_bin(nums):\n    result = bin(int(''.join(map(str, nums))))\n    return result", "task_id": "116_0b5ac0a9-5c61-42af-b2aa-ba3d79279d10", "test_setup_code": "", "test_list": ["assert list_to_bin([1, 2, 3]) == '0b123'", "assert list_to_bin([0]) == '0b0'", "assert list_to_bin([9, 8, 7]) == '0b987'", "assert list_to_bin([1, 0, 1]) == '0b101'", "assert list_to_bin([5, 5, 5]) == '0b555'", "assert list_to_bin([1, 2, 3, 4, 5]) == '0b12345'", "assert list_to_bin([7, 6, 5, 4, 3, 2, 1]) == '0b7654321'", "assert list_to_bin([1, 1, 1, 1, 1]) == '0b11111'", "assert list_to_bin([2, 4, 6, 8, 0]) == '0b24680'", "assert list_to_bin([3, 3, 3, 3, 3]) == '0b33333'", "assert list_to_bin([9, 9, 9, 9, 9]) == '0b99999'", "assert list_to_bin([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == '0b1234567890'", "assert list_to_bin([4, 4, 4, 4, 4, 4, 4, 4]) == '0b44444444'", "assert list_to_bin([1, 3, 5, 7, 9]) == '0b13579'", "assert list_to_bin([2, 4, 6, 8]) == '0b2468'"], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into an octal string.", "code": "def tuple_to_octal(nums):\n    result = oct(int(''.join(map(str, nums))))\n    return result", "task_id": "116_56ef58a5-7525-4c70-a073-fb21308ec0e6", "test_setup_code": "", "test_list": ["assert tuple_to_octal((1, 2, 3)) == '0o173'", "assert tuple_to_octal((7, 8, 9)) == '0o7451'", "assert tuple_to_octal((0,)) == '0o0'", "assert tuple_to_octal((1, 0, 0, 0)) == '0o1750'", "assert tuple_to_octal((4, 5, 6, 7)) == '0o4567'", "assert tuple_to_octal((3, 3, 3, 3)) == '0o3333'", "assert tuple_to_octal((1, 1, 1, 1)) == '0o1111'", "assert tuple_to_octal((2, 2, 2, 2)) == '0o2222'", "assert tuple_to_octal((8, 8, 8, 8)) == '0o100100100'", "assert tuple_to_octal((9, 9, 9, 9)) == '0o111111111'", "assert tuple_to_octal((1, 2, 3, 4, 5, 6, 7, 8, 9)) == '0o1234567451'", "assert tuple_to_octal((7, 7, 7, 7, 7, 7, 7, 7, 7)) == '0o777777777'", "assert tuple_to_octal((1, 0, 1, 0, 1, 0, 1, 0)) == '0o1010101010'", "assert tuple_to_octal((2, 5, 7)) == '0o257'", "assert tuple_to_octal((6, 6, 6, 6)) == '0o6666'"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each element in a list and return a list of tuples with the element and its frequency.", "code": "from collections import Counter\n\ndef count_elements(lst):\n    return list(Counter(lst).items())", "task_id": "114_1274e5ec-a389-4764-baf5-f1d97a7cfd50", "test_setup_code": "", "test_list": ["assert count_elements([]) == []", "assert count_elements([1]) == [(1, 1)]", "assert count_elements([1, 1, 1]) == [(1, 3)]", "assert count_elements([1, 2, 3]) == [(1, 1), (2, 1), (3, 1)]", "assert count_elements([1, 2, 2, 3, 3, 3]) == [(1, 1), (2, 2), (3, 3)]", "assert count_elements(['a', 'b', 'a']) == [('a', 2), ('b', 1)]", "assert count_elements(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'b', 'c']) == [('a', 3), ('b', 3), ('c', 3)]", "assert count_elements([None, None, None]) == [(None, 3)]", "assert count_elements([True, False, True, True]) == [(True, 3), (False, 1)]", "assert count_elements([1, '1', 1, '1']) == [(1, 2), ('1', 2)]", "assert count_elements([1.1, 1.1, 2.2, 3.3, 3.3, 3.3]) == [(1.1, 2), (2.2, 1), (3.3, 3)]", "assert count_elements(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == [('apple', 3), ('banana', 2), ('orange', 1)]", "assert count_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [(1, 1), (2, 2), (3, 3), (4, 4)]", "assert count_elements(['a', 'A', 'a', 'A']) == [('a', 2), ('A', 2)]", "assert count_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1), (10, 1)]"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each character in a string and return a dictionary with the character as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef char_frequency(s):\n    return dict(Counter(s))", "task_id": "114_4eaac10a-89f2-4af3-832a-1e1456e549d8", "test_setup_code": "", "test_list": ["assert char_frequency('hello') == {'h': 1, 'e': 1, 'l': 2, 'o': 1}", "assert char_frequency('') == {}", "assert char_frequency('a') == {'a': 1}", "assert char_frequency('aaa') == {'a': 3}", "assert char_frequency('abc') == {'a': 1, 'b': 1, 'c': 1}", "assert char_frequency('aabbcc') == {'a': 2, 'b': 2, 'c': 2}", "assert char_frequency('aA') == {'a': 1, 'A': 1}", "assert char_frequency('12345') == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}", "assert char_frequency('112233') == {'1': 2, '2': 2, '3': 2}", "assert char_frequency('!@#$$%^') == {'!': 1, '@': 1, '#': 1, '$': 2, '%': 1, '^': 1}", "assert char_frequency('a b c') == {'a': 1, ' ': 2, 'b': 1, 'c': 1}", "assert char_frequency('hello world') == {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1}", "assert char_frequency('a'*1000) == {'a': 1000}", "assert char_frequency('ab'*500) == {'a': 500, 'b': 500}", "assert char_frequency('The quick brown fox jumps over the lazy dog') == {'T': 1, 'h': 2, 'e': 3, ' ': 8, 'q': 1, 'u': 2, 'i': 1, 'c': 1, 'k': 1, 'b': 1, 'r': 2, 'o': 4, 'w': 1, 'n': 1, 'f': 1, 'x': 1, 'j': 1, 'm': 1, 'p': 1, 's': 1, 'v': 1, 't': 1, 'l': 1, 'a': 1, 'z': 1, 'y': 1, 'd': 1, 'g': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each word in a sentence and return a dictionary with the word as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef word_frequency(sentence):\n    words = sentence.split()\n    return dict(Counter(words))", "task_id": "114_01593ecd-ae94-4363-aeff-318e83ec9104", "test_setup_code": "", "test_list": ["assert word_frequency('hello world') == {'hello': 1, 'world': 1}", "assert word_frequency('hello hello world') == {'hello': 2, 'world': 1}", "assert word_frequency('') == {}", "assert word_frequency('a a a b b c') == {'a': 3, 'b': 2, 'c': 1}", "assert word_frequency('one fish two fish red fish blue fish') == {'one': 1, 'fish': 4, 'two': 1, 'red': 1, 'blue': 1}", "assert word_frequency('test test test test') == {'test': 4}", "assert word_frequency('Python is great and Python is fun') == {'Python': 2, 'is': 2, 'great': 1, 'and': 1, 'fun': 1}", "assert word_frequency('Case CASE case') == {'Case': 1, 'CASE': 1, 'case': 1}", "assert word_frequency('123 123 456') == {'123': 2, '456': 1}", "assert word_frequency('special-characters! are special-characters!') == {'special-characters!': 2, 'are': 1}", "assert word_frequency('punctuation, should be handled correctly.') == {'punctuation,': 1, 'should': 1, 'be': 1, 'handled': 1, 'correctly.': 1}", "assert word_frequency('multiple    spaces should be handled') == {'multiple': 1, 'spaces': 1, 'should': 1, 'be': 1, 'handled': 1}", "assert word_frequency('new\nline\ncharacters\nshould\nbe\nhandled') == {'new': 1, 'line': 1, 'characters': 1, 'should': 1, 'be': 1, 'handled': 1}", "assert word_frequency('tab\tcharacters\tshould\tbe\thandled') == {'tab': 1, 'characters': 1, 'should': 1, 'be': 1, 'handled': 1}", "assert word_frequency('mix of different cases CASE case Case') == {'mix': 1, 'of': 1, 'different': 1, 'cases': 1, 'CASE': 1, 'case': 1, 'Case': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each element in a list of lists and return a list of tuples with the element and its frequency.", "code": "from collections import Counter\n\ndef element_frequency(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return list(Counter(flat_list).items())", "task_id": "114_7628b965-1c02-4612-be51-8175963295e5", "test_setup_code": "", "test_list": ["assert element_frequency([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [(1, 2), (2, 2), (3, 2), (4, 1), (5, 1), (6, 1)]", "assert element_frequency([['a', 'b', 'a'], ['b', 'c', 'c'], ['a', 'c', 'd']]) == [('a', 3), ('b', 2), ('c', 3), ('d', 1)]", "assert element_frequency([[1], [1], [1]]) == [(1, 3)]", "assert element_frequency([[], [], []]) == []", "assert element_frequency([[1, 2], [2, 3], [3, 4]]) == [(1, 1), (2, 2), (3, 2), (4, 1)]", "assert element_frequency([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [(1, 3), (2, 3), (3, 3)]", "assert element_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1), (6, 1), (7, 1), (8, 1), (9, 1)]", "assert element_frequency([[1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4]]) == [(1, 3), (2, 3), (3, 3), (4, 3)]", "assert element_frequency([[1, 2], [2, 3], [3, 4], [4, 5], [5, 6]]) == [(1, 1), (2, 2), (3, 2), (4, 2), (5, 2), (6, 1)]", "assert element_frequency([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]) == [(1, 4), (2, 4), (3, 4), (4, 4)]", "assert element_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [(1, 4), (2, 4), (3, 4)]", "assert element_frequency([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [(1, 2), (2, 2), (3, 2), (4, 2), (5, 2), (6, 2), (7, 2), (8, 2), (9, 2)]", "assert element_frequency([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [9, 10, 11]]) == [(1, 1), (2, 1), (3, 2), (4, 1), (5, 2), (6, 1), (7, 2), (8, 1), (9, 2), (10, 1), (11, 1)]", "assert element_frequency([[1, 2, 2], [2, 3, 3], [3, 4, 4], [4, 5, 5]]) == [(1, 1), (2, 3), (3, 3), (4, 3), (5, 2)]", "assert element_frequency([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [(1, 5), (2, 5), (3, 5)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from the given list.", "code": "def unique_elements(lst):\n    return list(set(lst))", "task_id": "114_d8c3ab10-c777-43ce-9d61-a1b3a60b3dea", "test_setup_code": "", "test_list": ["assert unique_elements([]) == []", "assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 1, 1, 1, 1]) == [1]", "assert unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert unique_elements([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements(['a', 'b', 'c', 'a', 'b', 'c']) == ['a', 'b', 'c']", "assert unique_elements(['apple', 'banana', 'apple', 'cherry', 'banana']) == ['apple', 'banana', 'cherry']", "assert unique_elements([1.1, 2.2, 3.3, 1.1, 2.2]) == [1.1, 2.2, 3.3]", "assert unique_elements([True, False, True, False]) == [False, True]", "assert unique_elements([None, None, None]) == [None]", "assert unique_elements([1, '1', 2, '2', 3, '3']) == [1, '1', 2, '2', 3, '3']", "assert unique_elements([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert unique_elements(['a', 'A', 'a', 'A']) == ['a', 'A']", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the most common element in a list and return a tuple with the element and its frequency.", "code": "from collections import Counter\n\ndef most_common_element(lst):\n    counter = Counter(lst)\n    return counter.most_common(1)[0]", "task_id": "114_639d21e7-32d6-4859-96c4-0281f273f149", "test_setup_code": "", "test_list": ["assert most_common_element([1, 2, 3, 1, 2, 1]) == (1, 3)", "assert most_common_element(['a', 'b', 'a', 'c', 'a', 'b']) == ('a', 3)", "assert most_common_element([1, 1, 1, 1]) == (1, 4)", "assert most_common_element([1, 2, 3, 4, 5]) == (1, 1)", "assert most_common_element(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == ('apple', 3)", "assert most_common_element([True, False, True, True, False]) == (True, 3)", "assert most_common_element([None, None, None]) == (None, 3)", "assert most_common_element([]) == (None, 0)", "assert most_common_element([1]) == (1, 1)", "assert most_common_element(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ('a', 1)", "assert most_common_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (4, 4)", "assert most_common_element(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == ('c', 3)", "assert most_common_element([0, 0, 0, 1, 1, 1, 1]) == (1, 4)", "assert most_common_element(['x', 'y', 'z', 'x', 'y', 'x']) == ('x', 3)", "assert most_common_element([1.1, 2.2, 1.1, 3.3, 1.1]) == (1.1, 3)"], "challenge_test_list": []}
{"text": "Write a function to find the least common element in a list and return a tuple with the element and its frequency.", "code": "from collections import Counter\n\ndef least_common_element(lst):\n    counter = Counter(lst)\n    return counter.most_common()[-1]", "task_id": "114_e3708dc7-5225-44e0-8bd3-51e0abebac32", "test_setup_code": "", "test_list": ["assert least_common_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert least_common_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == (1, 2)", "assert least_common_element([1, 1, 1, 2, 2, 2, 3, 3, 3, 4]) == (4, 1)", "assert least_common_element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (1, 10)", "assert least_common_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (1, 1)", "assert least_common_element([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == (5, 10)", "assert least_common_element([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == (1, 1)", "assert least_common_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5]) == (1, 1)", "assert least_common_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == (6, 1)", "assert least_common_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9]) == (1, 1)", "assert least_common_element([3, 3, 3, 2, 2, 1]) == (1, 1)", "assert least_common_element([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7]) == (7, 1)", "assert least_common_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]) == (1, 1)", "assert least_common_element([1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (4, 4)", "assert least_common_element([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == (1, 1)"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each vowel in a string and return a dictionary with the vowel as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_vowels(s):\n    vowels = 'aeiou'\n    filtered_vowels = [char for char in s if char in vowels]\n    return dict(Counter(filtered_vowels))", "task_id": "114_ea19a1bf-39e9-4529-a589-5a8fcda3338d", "test_setup_code": "", "test_list": ["assert count_vowels('hello world') == {'e': 1, 'o': 2}", "assert count_vowels('aeiou') == {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}", "assert count_vowels('') == {}", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == {}", "assert count_vowels('AEIOU') == {}", "assert count_vowels('aAaAaA') == {'a': 3}", "assert count_vowels('The quick brown fox jumps over the lazy dog') == {'e': 3, 'u': 2, 'i': 1, 'o': 4, 'a': 1}", "assert count_vowels('1234567890') == {}", "assert count_vowels('!@#$%^&*()') == {}", "assert count_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit') == {'o': 3, 'e': 4, 'i': 6, 'u': 2, 'a': 1}", "assert count_vowels('Python programming is fun') == {'o': 2, 'a': 1, 'i': 2, 'u': 1}", "assert count_vowels('') == {}", "assert count_vowels('a') == {'a': 1}", "assert count_vowels('e') == {'e': 1}", "assert count_vowels('aeiouAEIOU') == {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of words of different lengths in a sentence and return a dictionary with the word length as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_words_length(sentence):\n    words = sentence.split()\n    lengths = [len(word) for word in words]\n    return dict(Counter(lengths))", "task_id": "114_baec0392-45cb-46b2-8be0-5313f265e005", "test_setup_code": "", "test_list": ["assert count_words_length('Hello world') == {5: 1, 5: 1}", "assert count_words_length('A quick brown fox jumps over the lazy dog') == {1: 1, 5: 1, 5: 1, 3: 1, 5: 1, 4: 1, 3: 1, 4: 1, 3: 1}", "assert count_words_length('') == {}", "assert count_words_length('One two three four five six seven eight nine ten') == {3: 6, 4: 2, 5: 2}", "assert count_words_length('Supercalifragilisticexpialidocious') == {34: 1}", "assert count_words_length('I am') == {1: 1, 2: 1}", "assert count_words_length('Python is fun') == {6: 1, 2: 1, 3: 1}", "assert count_words_length('123 4567 89') == {3: 1, 4: 1, 2: 1}", "assert count_words_length('Hello, world!') == {6: 1, 6: 1}", "assert count_words_length('To be or not to be, that is the question') == {2: 3, 3: 1, 4: 1, 5: 1, 4: 1, 2: 1, 3: 1, 8: 1}", "assert count_words_length('A B C D E F G H I J K L M N O P Q R S T U V W X Y Z') == {1: 26}", "assert count_words_length('This is a test sentence with multiple words of different lengths') == {4: 3, 2: 1, 1: 1, 5: 1, 4: 1, 8: 1, 5: 1, 2: 1, 9: 1}", "assert count_words_length('Spaces    between   words') == {6: 1, 7: 1, 5: 1}", "assert count_words_length('Punctuation! Should, not; affect: word-lengths.') == {12: 1, 7: 1, 3: 1, 6: 1, 12: 1}", "assert count_words_length('Case sensitivity should not matter') == {4: 1, 11: 1, 6: 1, 3: 1, 6: 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each digit in an integer and return a dictionary with the digit as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_digit_frequency(n):\n    digits = str(n)\n    return dict(Counter(digits))", "task_id": "114_075a7e71-695f-40c7-bdf7-62842a6c001b", "test_setup_code": "", "test_list": ["assert count_digit_frequency(12345) == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1}", "assert count_digit_frequency(11111) == {'1': 5}", "assert count_digit_frequency(112233) == {'1': 2, '2': 2, '3': 2}", "assert count_digit_frequency(0) == {'0': 1}", "assert count_digit_frequency(9876543210) == {'9': 1, '8': 1, '7': 1, '6': 1, '5': 1, '4': 1, '3': 1, '2': 1, '1': 1, '0': 1}", "assert count_digit_frequency(1000000000) == {'1': 1, '0': 9}", "assert count_digit_frequency(999999999) == {'9': 9}", "assert count_digit_frequency(12345678901234567890) == {'1': 2, '2': 2, '3': 2, '4': 2, '5': 2, '6': 2, '7': 2, '8': 2, '9': 2, '0': 2}", "assert count_digit_frequency(1010101010) == {'1': 5, '0': 5}", "assert count_digit_frequency(2222222222) == {'2': 10}", "assert count_digit_frequency(3141592653) == {'3': 2, '1': 2, '4': 1, '5': 2, '9': 1, '2': 1, '6': 1}", "assert count_digit_frequency(4444444444) == {'4': 10}", "assert count_digit_frequency(123321) == {'1': 2, '2': 2, '3': 2}", "assert count_digit_frequency(555555555) == {'5': 9}", "assert count_digit_frequency(987654321) == {'9': 1, '8': 1, '7': 1, '6': 1, '5': 1, '4': 1, '3': 1, '2': 1, '1': 1}"], "challenge_test_list": []}
{"text": "Write a function to convert all possible convertible elements in the list to integers.", "code": "def convert_to_int(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(int(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_307c4853-8f1b-424b-9b71-101ab7b40bad", "test_setup_code": "", "test_list": ["assert convert_to_int(['1', '2', '3']) == [1, 2, 3]", "assert convert_to_int(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert convert_to_int(['1', 'a', '2', 'b']) == [1, 'a', 2, 'b']", "assert convert_to_int(['1.1', '2.2', '3.3']) == ['1.1', '2.2', '3.3']", "assert convert_to_int(['1', '2', 'three', '4']) == [1, 2, 'three', 4]", "assert convert_to_int(['']) == ['']", "assert convert_to_int(['100', '200', '300']) == [100, 200, 300]", "assert convert_to_int(['-1', '-2', '-3']) == [-1, -2, -3]", "assert convert_to_int(['0']) == [0]", "assert convert_to_int(['123', 'abc', '456']) == [123, 'abc', 456]", "assert convert_to_int(['1e3', '2e2', '3e1']) == ['1e3', '2e2', '3e1']", "assert convert_to_int(['1', '2', '3', '4', '5']) == [1, 2, 3, 4, 5]", "assert convert_to_int(['1', '1.0', '1.1']) == [1, '1.0', '1.1']", "assert convert_to_int(['0', '0.0', '0.1']) == [0, '0.0', '0.1']", "assert convert_to_int(['-1', '-1.0', '-1.1']) == [-1, '-1.0', '-1.1']"], "challenge_test_list": []}
{"text": "Write a function to convert all elements in the list to strings.", "code": "def convert_to_str(lst):\n    return [str(item) for item in lst]", "task_id": "117_05bf9b1c-cc7e-401e-935b-b6f164b3f2de", "test_setup_code": "", "test_list": ["assert convert_to_str([1, 2, 3]) == ['1', '2', '3']", "assert convert_to_str([1.1, 2.2, 3.3]) == ['1.1', '2.2', '3.3']", "assert convert_to_str(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert convert_to_str([True, False]) == ['True', 'False']", "assert convert_to_str([None, 0, '']) == ['None', '0', '']", "assert convert_to_str([[], {}, ()]) == ['[]', '{}', '()']", "assert convert_to_str([1, 'a', 3.14, True]) == ['1', 'a', '3.14', 'True']", "assert convert_to_str([0]) == ['0']", "assert convert_to_str([1000000]) == ['1000000']", "assert convert_to_str([-1, -2, -3]) == ['-1', '-2', '-3']", "assert convert_to_str([1, -1, 0]) == ['1', '-1', '0']", "assert convert_to_str([1.0, 2.0, 3.0]) == ['1.0', '2.0', '3.0']", "assert convert_to_str(['1', '2', '3']) == ['1', '2', '3']", "assert convert_to_str([1, '1', 1.0, True]) == ['1', '1', '1.0', 'True']", "assert convert_to_str([]) == []"], "challenge_test_list": []}
{"text": "Write a function to convert all possible convertible elements in the list to boolean values.", "code": "def convert_to_bool(lst):\n    res = []\n    for item in lst:\n        if str(item).lower() in ['true', 'false']:\n            res.append(item.lower() == 'true')\n        else:\n            res.append(item)\n    return res", "task_id": "117_2f55755c-aec6-4899-9f9b-0639e68db227", "test_setup_code": "", "test_list": ["assert convert_to_bool(['true', 'false', 'True', 'False']) == [True, False, True, False]", "assert convert_to_bool(['TRUE', 'FALSE', 'yes', 'no']) == [True, False, 'yes', 'no']", "assert convert_to_bool([1, 0, 'true', 'false']) == [1, 0, True, False]", "assert convert_to_bool(['True', 'False', 1, 0, None]) == [True, False, 1, 0, None]", "assert convert_to_bool(['true', 'false', 'TRUE', 'FALSE', 'True', 'False']) == [True, False, True, False, True, False]", "assert convert_to_bool(['true', 'false', '', ' ']) == [True, False, '', ' ']", "assert convert_to_bool(['true', 'false', 'maybe', 'perhaps']) == [True, False, 'maybe', 'perhaps']", "assert convert_to_bool(['true', 'false', '123', '456']) == [True, False, '123', '456']", "assert convert_to_bool(['true', 'false', 'True', 'False', 'TRUE', 'FALSE']) == [True, False, True, False, True, False]", "assert convert_to_bool(['true', 'false', 'tRuE', 'fAlSe']) == [True, False, True, False]", "assert convert_to_bool(['true', 'false', 'True', 'False', 'yes', 'no']) == [True, False, True, False, 'yes', 'no']", "assert convert_to_bool(['true', 'false', 'True', 'False', 'TRUE', 'FALSE', 'yes', 'no']) == [True, False, True, False, True, False, 'yes', 'no']", "assert convert_to_bool(['true', 'false', 'True', 'False', 'TRUE', 'FALSE', '1', '0']) == [True, False, True, False, True, False, '1', '0']", "assert convert_to_bool(['true', 'false', 'True', 'False', 'TRUE', 'FALSE', 'yes', 'no', 'maybe']) == [True, False, True, False, True, False, 'yes', 'no', 'maybe']", "assert convert_to_bool([]) == []"], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to uppercase.", "code": "def convert_to_uppercase(lst):\n    return [item.upper() if isinstance(item, str) else item for item in lst]", "task_id": "117_88fb1264-5cef-4b00-b593-2b8cd4243a89", "test_setup_code": "", "test_list": ["assert convert_to_uppercase(['hello', 'world']) == ['HELLO', 'WORLD']", "assert convert_to_uppercase(['Python', 'is', 'fun']) == ['PYTHON', 'IS', 'FUN']", "assert convert_to_uppercase(['123', 'abc', 'DEF']) == ['123', 'ABC', 'DEF']", "assert convert_to_uppercase(['', 'test', 'CASE']) == ['', 'TEST', 'CASE']", "assert convert_to_uppercase(['UPPER', 'lower', 'Mixed']) == ['UPPER', 'LOWER', 'MIXED']", "assert convert_to_uppercase(['single']) == ['SINGLE']", "assert convert_to_uppercase(['MIXED', 123, 'CASE']) == ['MIXED', 123, 'CASE']", "assert convert_to_uppercase([123, 456, 789]) == [123, 456, 789]", "assert convert_to_uppercase([]) == []", "assert convert_to_uppercase(['a', 'b', 'c']) == ['A', 'B', 'C']", "assert convert_to_uppercase(['A', 'B', 'C']) == ['A', 'B', 'C']", "assert convert_to_uppercase(['Hello', 'World', 123, 'Test']) == ['HELLO', 'WORLD', 123, 'TEST']", "assert convert_to_uppercase(['mixed', 'CASE', '123']) == ['MIXED', 'CASE', '123']", "assert convert_to_uppercase(['']) == ['']", "assert convert_to_uppercase(['UPPERCASE', 'lowercase', '123']) == ['UPPERCASE', 'LOWERCASE', '123']"], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to lowercase.", "code": "def convert_to_lowercase(lst):\n    return [item.lower() if isinstance(item, str) else item for item in lst]", "task_id": "117_efdd669f-9345-4aac-bdc7-4b826fca47db", "test_setup_code": "", "test_list": ["assert convert_to_lowercase(['Hello', 'WORLD', 'PyThOn']) == ['hello', 'world', 'python']", "assert convert_to_lowercase(['123', 'ABC', 'def']) == ['123', 'abc', 'def']", "assert convert_to_lowercase(['', 'TEST', 'case']) == ['', 'test', 'case']", "assert convert_to_lowercase(['MIXED', 'CaSe', '']) == ['mixed', 'case', '']", "assert convert_to_lowercase(['SINGLE']) == ['single']", "assert convert_to_lowercase(['lowercase', 'UPPERCASE']) == ['lowercase', 'uppercase']", "assert convert_to_lowercase(['123', '456', '789']) == ['123', '456', '789']", "assert convert_to_lowercase(['a', 'B', 'c', 'D']) == ['a', 'b', 'c', 'd']", "assert convert_to_lowercase(['']) == ['']", "assert convert_to_lowercase(['Mixed123', 'CaSe456']) == ['mixed123', 'case456']", "assert convert_to_lowercase(['NUM123', 'num456']) == ['num123', 'num456']", "assert convert_to_lowercase(['SpEcIaL', 'ChArS!@#']) == ['special', 'chars!@#']", "assert convert_to_lowercase(['Whitespace ', ' Test']) == ['whitespace ', ' test']", "assert convert_to_lowercase(['  Leading', 'Trailing  ']) == ['  leading', 'trailing  ']", "assert convert_to_lowercase(['MiXeD CaSe', 'TeSt']) == ['mixed case', 'test']"], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their absolute values.", "code": "def convert_to_abs(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(abs(float(item)))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_1807815e-2cda-4c19-8747-deaa466ffe04", "test_setup_code": "", "test_list": ["assert convert_to_abs([1, -2, 3.5, '-4.2', '5', '-6']) == [1.0, 2.0, 3.5, 4.2, 5.0, 6.0]", "assert convert_to_abs(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert convert_to_abs([0, '-0', '0.0', -0.0]) == [0.0, 0.0, 0.0, 0.0]", "assert convert_to_abs([1, 2, 3, 4, 5]) == [1.0, 2.0, 3.0, 4.0, 5.0]", "assert convert_to_abs([-1, -2, -3, -4, -5]) == [1.0, 2.0, 3.0, 4.0, 5.0]", "assert convert_to_abs(['-1.1', '2.2', '-3.3', '4.4']) == [1.1, 2.2, 3.3, 4.4]", "assert convert_to_abs(['1e2', '-1e2', '1.5e2', '-1.5e2']) == [100.0, 100.0, 150.0, 150.0]", "assert convert_to_abs([None, True, False, 'True', 'False']) == [None, 1.0, 0.0, 'True', 'False']", "assert convert_to_abs(['', ' ', '0', '-0']) == ['', ' ', 0.0, 0.0]", "assert convert_to_abs(['123', '-123', '123.456', '-123.456']) == [123.0, 123.0, 123.456, 123.456]", "assert convert_to_abs(['-inf', 'inf', 'nan']) == [float('inf'), float('inf'), float('nan')]", "assert convert_to_abs(['-0.0', '0.0', '-0', '0']) == [0.0, 0.0, 0.0, 0.0]", "assert convert_to_abs(['-0.0001', '0.0001']) == [0.0001, 0.0001]", "assert convert_to_abs(['-999999999', '999999999']) == [999999999.0, 999999999.0]", "assert convert_to_abs(['-1e-10', '1e-10']) == [1e-10, 1e-10]"], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to their lengths.", "code": "def convert_to_length(lst):\n    return [len(item) if isinstance(item, str) else item for item in lst]", "task_id": "117_b2b5866b-ac65-4f00-b5b5-b89f0b368cde", "test_setup_code": "", "test_list": ["assert convert_to_length(['apple', 'banana', 'cherry']) == [5, 6, 6]", "assert convert_to_length(['a', 'ab', 'abc', 'abcd']) == [1, 2, 3, 4]", "assert convert_to_length(['', ' ', '  ']) == [0, 1, 2]", "assert convert_to_length(['hello', 123, 'world']) == [5, 123, 5]", "assert convert_to_length(['test', None, 'case']) == [4, None, 4]", "assert convert_to_length(['longer string', 'short', 'medium length']) == [13, 5, 13]", "assert convert_to_length([]) == []", "assert convert_to_length(['single']) == [6]", "assert convert_to_length([True, 'false', False]) == [True, 5, False]", "assert convert_to_length(['one', 'two', 'three', 'four', 'five']) == [3, 3, 5, 4, 4]", "assert convert_to_length(['12345', '67890', 12345]) == [5, 5, 12345]", "assert convert_to_length(['a'*1000, 'b'*2000]) == [1000, 2000]", "assert convert_to_length(['a', 1, 'b', 2, 'c', 3]) == [1, 1, 1, 2, 1, 3]", "assert convert_to_length(['special characters !@#$', 'numbers 12345']) == [23, 14]", "assert convert_to_length(['mix', 'of', 'different', 'lengths']) == [3, 2, 9, 7]"], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their square values.", "code": "def convert_to_square(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(float(item) ** 2)\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_69c194a6-b369-4e39-8281-f531fc647f27", "test_setup_code": "", "test_list": ["assert convert_to_square([1, 2, 3]) == [1.0, 4.0, 9.0]", "assert convert_to_square(['4', '5', '6']) == [16.0, 25.0, 36.0]", "assert convert_to_square([1.5, 2.5, 3.5]) == [2.25, 6.25, 12.25]", "assert convert_to_square(['1.1', '2.2', '3.3']) == [1.21, 4.84, 10.89]", "assert convert_to_square(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert convert_to_square([1, '2', 3.0, '4.0']) == [1.0, 4.0, 9.0, 16.0]", "assert convert_to_square([]) == []", "assert convert_to_square([0, '0', 0.0]) == [0.0, 0.0, 0.0]", "assert convert_to_square([-1, '-2', -3.0, '-4.0']) == [1.0, 4.0, 9.0, 16.0]", "assert convert_to_square(['1e1', '2e2', '3e3']) == [100.0, 40000.0, 9000000.0]", "assert convert_to_square([None, True, False]) == [None, 1.0, 0.0]", "assert convert_to_square(['NaN', 'Infinity', '-Infinity']) == ['NaN', 'Infinity', '-Infinity']", "assert convert_to_square(['1', 'a', 2.5, '3.5']) == [1.0, 'a', 6.25, 12.25]", "assert convert_to_square([1, '2.2', 'three', 4.0]) == [1.0, 4.84, 'three', 16.0]", "assert convert_to_square(['1.0', '2.0', '3.0', '4.0']) == [1.0, 4.0, 9.0, 16.0]"], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to floats, and leave other elements unchanged.", "code": "def convert_to_float_if_possible(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(float(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_0b876b1d-076a-46af-a5a9-ed7b67ba782a", "test_setup_code": "", "test_list": ["assert convert_to_float_if_possible(['1', '2', '3']) == [1.0, 2.0, 3.0]", "assert convert_to_float_if_possible(['1.1', '2.2', '3.3']) == [1.1, 2.2, 3.3]", "assert convert_to_float_if_possible(['1', 'two', '3']) == [1.0, 'two', 3.0]", "assert convert_to_float_if_possible(['one', 'two', 'three']) == ['one', 'two', 'three']", "assert convert_to_float_if_possible(['1', '2.2', 'three', '4.4']) == [1.0, 2.2, 'three', 4.4]", "assert convert_to_float_if_possible(['0', '0.0', '0.00']) == [0.0, 0.0, 0.0]", "assert convert_to_float_if_possible(['-1', '-2.2', '-3']) == [-1.0, -2.2, -3.0]", "assert convert_to_float_if_possible(['1e2', '2e-2', '3.14']) == [100.0, 0.02, 3.14]", "assert convert_to_float_if_possible(['NaN', 'Infinity', '-Infinity']) == ['NaN', 'Infinity', '-Infinity']", "assert convert_to_float_if_possible(['', ' ', '0']) == ['', ' ', 0.0]", "assert convert_to_float_if_possible(['1', '2', '3', 'four', '5']) == [1.0, 2.0, 3.0, 'four', 5.0]", "assert convert_to_float_if_possible(['1.1', '2.2', 'three', '4.4', 'five']) == [1.1, 2.2, 'three', 4.4, 'five']", "assert convert_to_float_if_possible(['1', 'two', '3', 'four', '5']) == [1.0, 'two', 3.0, 'four', 5.0]", "assert convert_to_float_if_possible(['0', '0.0', '0.00', 'zero']) == [0.0, 0.0, 0.0, 'zero']", "assert convert_to_float_if_possible(['-1', '-2.2', '-3', 'negative four']) == [-1.0, -2.2, -3.0, 'negative four']"], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their negative values.", "code": "def convert_to_negative(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(-float(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_8f6878bd-b91e-47a7-afe4-7c765232912e", "test_setup_code": "", "test_list": ["assert convert_to_negative([1, 2, 3]) == [-1.0, -2.0, -3.0]", "assert convert_to_negative(['1', '2', '3']) == [-1.0, -2.0, -3.0]", "assert convert_to_negative([1.5, 2.5, 3.5]) == [-1.5, -2.5, -3.5]", "assert convert_to_negative(['1.5', '2.5', '3.5']) == [-1.5, -2.5, -3.5]", "assert convert_to_negative(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert convert_to_negative([1, '2', 3.5, 'a']) == [-1.0, -2.0, -3.5, 'a']", "assert convert_to_negative([]) == []", "assert convert_to_negative([0]) == [-0.0]", "assert convert_to_negative(['0']) == [-0.0]", "assert convert_to_negative([-1, -2, -3]) == [1.0, 2.0, 3.0]", "assert convert_to_negative(['-1', '-2', '-3']) == [1.0, 2.0, 3.0]", "assert convert_to_negative([1, '2', 'three', 4.0]) == [-1.0, -2.0, 'three', -4.0]", "assert convert_to_negative([float('inf'), float('-inf')]) == [-float('inf'), float('inf')]", "assert convert_to_negative(['inf', '-inf']) == [-float('inf'), float('inf')]", "assert convert_to_negative([1e10, '1e-10']) == [-1e10, -1e-10]"], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "118_f9b162d8-5d03-4813-aeda-92ac6bdea35d", "test_setup_code": "", "test_list": ["assert reverse_words('hello world') == 'world hello'", "assert reverse_words('a b c d e') == 'e d c b a'", "assert reverse_words('') == ''", "assert reverse_words('singleword') == 'singleword'", "assert reverse_words('  leading spaces') == 'spaces leading'", "assert reverse_words('trailing spaces  ') == 'spaces trailing'", "assert reverse_words('  multiple   spaces  ') == 'spaces multiple'", "assert reverse_words('punctuation, should! be? handled.') == 'handled. be? should! punctuation,'", "assert reverse_words('123 456 789') == '789 456 123'", "assert reverse_words('a quick brown fox') == 'fox brown quick a'", "assert reverse_words('reverse the order of words') == 'words of order the reverse'", "assert reverse_words('UPPERCASE lowercase MIXEDcase') == 'MIXEDcase lowercase UPPERCASE'", "assert reverse_words('new\nline') == 'line new'", "assert reverse_words('tab\tseparated') == 'separated tab'", "assert reverse_words('special@characters#in$string') == 'string in characters#in special@characters'"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "118_93ffd254-364a-4066-9386-a7df156d6edd", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('a') == 1", "assert count_vowels('e') == 1", "assert count_vowels('i') == 1", "assert count_vowels('o') == 1", "assert count_vowels('u') == 1", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Why do you ask?') == 4", "assert count_vowels('Python is fun!') == 3", "assert count_vowels('1234567890') == 0", "assert count_vowels('!@#$%^&*()') == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    s = s.replace(' ', '').lower()\n    return s == s[::-1]", "task_id": "118_2bdc383d-785d-44d4-b821-eefa2572d85d", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('RaceCar') == True", "assert is_palindrome('A man a plan a canal Panama') == True", "assert is_palindrome('No lemon no melon') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('Was it a car or a cat I saw') == True", "assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abcba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('Able was I ere I saw Elba') == True", "assert is_palindrome('Madam In Eden Im Adam') == True", "assert is_palindrome('Step on no pets') == True"], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "118_433e0189-fe36-476f-9fdf-eb8680d1278c", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('python programming') == 'Python Programming'", "assert capitalize_words('capitalize the first letter') == 'Capitalize The First Letter'", "assert capitalize_words('a quick brown fox') == 'A Quick Brown Fox'", "assert capitalize_words('jumps over the lazy dog') == 'Jumps Over The Lazy Dog'", "assert capitalize_words('') == ''", "assert capitalize_words('single') == 'Single'", "assert capitalize_words('MULTIPLE WORDS IN UPPERCASE') == 'Multiple Words In Uppercase'", "assert capitalize_words('mIxEd CaSe InPuT') == 'Mixed Case Input'", "assert capitalize_words('  leading and trailing spaces  ') == 'Leading And Trailing Spaces'", "assert capitalize_words('123 numbers and symbols!') == '123 Numbers And Symbols!'", "assert capitalize_words('special-characters: should be handled') == 'Special-characters: Should Be Handled'", "assert capitalize_words('a') == 'A'", "assert capitalize_words('a b c d e f g') == 'A B C D E F G'"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(dict.fromkeys(lst))", "task_id": "118_2b31ecf7-ca39-475a-ad96-797879728447", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([]) == []", "assert remove_duplicates([5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([1, 2, 1, 2, 1, 2, 1, 2]) == [1, 2]", "assert remove_duplicates(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']", "assert remove_duplicates(['a', 'a', 'a', 'a']) == ['a']", "assert remove_duplicates(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']", "assert remove_duplicates([1, 'a', 1, 'a']) == [1, 'a']", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates([True, False, True, False]) == [True, False]", "assert remove_duplicates([1.1, 2.2, 1.1, 2.2]) == [1.1, 2.2]", "assert remove_duplicates([1, 2, 3, 4, 3, 2, 1]) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "118_1d3f1f6a-65f6-4420-9870-f8a1250aaefb", "test_setup_code": "", "test_list": ["assert find_longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'", "assert find_longest_word('Hello world') == 'Hello'", "assert find_longest_word('a aa aaa aaaa aaaaa') == 'aaaaa'", "assert find_longest_word('') == ''", "assert find_longest_word('One two three four five six') == 'three'", "assert find_longest_word('Python is awesome') == 'awesome'", "assert find_longest_word('This is a test case') == 'case'", "assert find_longest_word('Edge cases are important') == 'important'", "assert find_longest_word('Supercalifragilisticexpialidocious is a long word') == 'Supercalifragilisticexpialidocious'", "assert find_longest_word('Short') == 'Short'", "assert find_longest_word('Equal length words here') == 'Equal'", "assert find_longest_word('Multiple spaces between words') == 'Multiple'", "assert find_longest_word('Punctuation, should not affect.') == 'Punctuation,'", "assert find_longest_word('123 4567 89 0') == '4567'", "assert find_longest_word('Mix of UPPER and lower CASE') == 'lower'"], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of a given integer.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "118_2ba41501-8c10-429e-bc6b-d87d77e1f829", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(5) == 5", "assert sum_of_digits(10) == 1", "assert sum_of_digits(1111) == 4", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(-123) == 6", "assert sum_of_digits(-999) == 27", "assert sum_of_digits(-1001) == 2", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(2147483647) == 46", "assert sum_of_digits(-2147483648) == 47"], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1.replace(' ', '').lower()) == sorted(s2.replace(' ', '').lower())", "task_id": "118_2a54dcb1-3840-4468-8cf9-2c4353684362", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('A gentleman', 'Elegant man') == True", "assert is_anagram('Clint Eastwood', 'Old West Action') == True", "assert is_anagram('Dormitory', 'Dirty room') == True", "assert is_anagram('The eyes', 'They see') == True", "assert is_anagram('Astronomer', 'Moon starer') == True", "assert is_anagram('Conversation', 'Voices rant on') == True", "assert is_anagram('School master', 'The classroom') == True", "assert is_anagram('Listen', 'Silent') == True", "assert is_anagram('Hello', 'Olelh') == True", "assert is_anagram('The Morse Code', 'Here come dots') == True", "assert is_anagram('Slot machines', 'Cash lost in me') == True", "assert is_anagram('Eleven plus two', 'Twelve plus one') == True"], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n: int) -> list:\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:n]", "task_id": "118_ea2a13c2-2cf7-4b7d-994a-903920189828", "test_setup_code": "", "test_list": ["assert fibonacci(0) == []", "assert fibonacci(1) == [0]", "assert fibonacci(2) == [0, 1]", "assert fibonacci(3) == [0, 1, 1]", "assert fibonacci(4) == [0, 1, 1, 2]", "assert fibonacci(5) == [0, 1, 1, 2, 3]", "assert fibonacci(6) == [0, 1, 1, 2, 3, 5]", "assert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8]", "assert fibonacci(8) == [0, 1, 1, 2, 3, 5, 8, 13]", "assert fibonacci(9) == [0, 1, 1, 2, 3, 5, 8, 13, 21]", "assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "assert fibonacci(15) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]", "assert fibonacci(20) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]", "assert fibonacci(25) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]", "assert fibonacci(30) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]"], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(lst: list) -> list:\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "task_id": "118_3d1505ba-5f6b-4bf1-86fc-d94d98b61fe5", "test_setup_code": "", "test_list": ["assert flatten_list([1, [2, 3], [4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert flatten_list([]) == []", "assert flatten_list([1, 2, 3]) == [1, 2, 3]", "assert flatten_list([[1, 2, 3], [4, 5], [6, 7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list([[[[1]]], 2, [[3, 4]], 5]) == [1, 2, 3, 4, 5]", "assert flatten_list([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]", "assert flatten_list([[[[]]]]) == []", "assert flatten_list([[], [1, 2], [], [3, 4], []]) == [1, 2, 3, 4]", "assert flatten_list([1, 'a', [2, 'b'], [3, 'c', [4, 'd']]]) == [1, 'a', 2, 'b', 3, 'c', 4, 'd']", "assert flatten_list([None, [None, [None]], None]) == [None, None, None, None]", "assert flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert flatten_list([['a', ['b', ['c', ['d']]]]]) == ['a', 'b', 'c', 'd']", "assert flatten_list([[], [], []]) == []", "assert flatten_list([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]", "assert flatten_list([[[1, 2], 3], 4, [5, [6, 7]]]) == [1, 2, 3, 4, 5, 6, 7]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum from the pairs of tuples within a given list.", "code": "def max_sum_tuple(list1):\n    result_max = max([x + y for x, y in list1])\n    return result_max", "task_id": "120_aba3b92c-a7d5-48b8-992a-741f3e5e5105", "test_setup_code": "", "test_list": ["assert max_sum_tuple([(1, 2), (3, 4), (5, 6)]) == 11", "assert max_sum_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert max_sum_tuple([(-1, -2), (-3, -4), (-5, -6)]) == -3", "assert max_sum_tuple([(10, 20), (30, 40), (50, 60)]) == 110", "assert max_sum_tuple([(1, 1), (2, 2), (3, 3)]) == 6", "assert max_sum_tuple([(100, 200), (300, 400), (500, 600)]) == 1100", "assert max_sum_tuple([(1, -1), (-2, 2), (3, -3)]) == 0", "assert max_sum_tuple([(1, 2), (2, 1), (1, 1)]) == 3", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4)]) == 7", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5)]) == 9", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 11", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 13", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 15", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == 17", "assert max_sum_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]) == 19"], "challenge_test_list": []}
{"text": "Write a function to find the minimum product from the pairs of tuples within a given list.", "code": "def min_product_tuple(list1):\n    result_min = min([x * y for x, y in list1])\n    return result_min", "task_id": "120_5825bfc5-86af-4da4-898d-f6f4548c0844", "test_setup_code": "", "test_list": ["assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 2", "assert min_product_tuple([(0, 10), (2, 3), (-1, 4)]) == -4", "assert min_product_tuple([(1, 1), (1, 1), (1, 1)]) == 1", "assert min_product_tuple([(-1, -1), (-2, -2), (-3, -3)]) == 1", "assert min_product_tuple([(100, 200), (300, 400), (500, 600)]) == 20000", "assert min_product_tuple([(1, 0), (2, 3), (4, 5)]) == 0", "assert min_product_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert min_product_tuple([(1, -1), (-2, 2), (3, -3)]) == -9", "assert min_product_tuple([(1, 2), (2, 1), (3, 3)]) == 2", "assert min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5)]) == 2", "assert min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 2", "assert min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 2", "assert min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == 2", "assert min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == 2", "assert min_product_tuple([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute sum from the pairs of tuples within a given list.", "code": "def max_sum_abs_tuple(list1):\n    result_max = max([abs(x + y) for x, y in list1])\n    return result_max", "task_id": "120_138e08dd-6784-406c-b587-4a2143b5dba7", "test_setup_code": "", "test_list": ["assert max_sum_abs_tuple([(1, 2), (3, 4), (5, 6)]) == 11", "assert max_sum_abs_tuple([(-1, -2), (-3, -4), (-5, -6)]) == 11", "assert max_sum_abs_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert max_sum_abs_tuple([(1, -2), (-3, 4), (5, -6)]) == 7", "assert max_sum_abs_tuple([(100, 200), (-300, -400), (500, 600)]) == 1100", "assert max_sum_abs_tuple([(1, 1), (1, 1), (1, 1)]) == 2", "assert max_sum_abs_tuple([(0, 1), (1, 0), (-1, 0)]) == 1", "assert max_sum_abs_tuple([(1, 2), (2, 1), (3, 3)]) == 6", "assert max_sum_abs_tuple([(1, -1), (-1, 1), (2, -2)]) == 4", "assert max_sum_abs_tuple([(10, 20), (30, 40), (50, 60)]) == 110", "assert max_sum_abs_tuple([(-10, -20), (-30, -40), (-50, -60)]) == 110", "assert max_sum_abs_tuple([(1, -1), (1, -1), (1, -1)]) == 2", "assert max_sum_abs_tuple([(1000, -1000), (2000, -2000), (3000, -3000)]) == 6000", "assert max_sum_abs_tuple([(1, 0), (0, 1), (-1, 0)]) == 1", "assert max_sum_abs_tuple([(1, 2), (3, 4), (5, 6), (-7, -8)]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum from the pairs of tuples within a given list.", "code": "def min_sum_tuple(list1):\n    result_min = min([x + y for x, y in list1])\n    return result_min", "task_id": "120_491ed808-6026-4685-897f-933463877595", "test_setup_code": "", "test_list": ["assert min_sum_tuple([(1, 2), (3, 4), (5, 6)]) == 3", "assert min_sum_tuple([(10, 20), (30, 40), (5, 1)]) == 6", "assert min_sum_tuple([(0, 0), (0, 1), (1, 0)]) == 0", "assert min_sum_tuple([(-1, -2), (-3, -4), (-5, -6)]) == -11", "assert min_sum_tuple([(100, 200), (300, 400), (500, 600)]) == 300", "assert min_sum_tuple([(1, 1), (2, 2), (3, 3)]) == 2", "assert min_sum_tuple([(1, -1), (-2, 2), (3, -3)]) == -1", "assert min_sum_tuple([(0, 0)]) == 0", "assert min_sum_tuple([(1, 2), (2, 1), (1, 1)]) == 2", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == 3", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (0, 0)]) == 0", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (1, 1)]) == 2", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (1, 0)]) == 1", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (-1, -1)]) == -2", "assert min_sum_tuple([(1, 2), (3, 4), (5, 6), (0, -1)]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference from the pairs of tuples within a given list.", "code": "def max_diff_tuple(list1):\n    result_max = max([abs(x - y) for x, y in list1])\n    return result_max", "task_id": "120_fa1d5406-e639-47fe-9945-a876d83716bc", "test_setup_code": "", "test_list": ["assert max_diff_tuple([(1, 2), (3, 5), (7, 10)]) == 3", "assert max_diff_tuple([(10, 2), (3, 5), (7, 10)]) == 8", "assert max_diff_tuple([(1, 1), (2, 2), (3, 3)]) == 0", "assert max_diff_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert max_diff_tuple([(1, -1), (-1, 1), (2, -2)]) == 4", "assert max_diff_tuple([(100, 50), (200, 150), (300, 250)]) == 50", "assert max_diff_tuple([(-100, -50), (-200, -150), (-300, -250)]) == 50", "assert max_diff_tuple([(1, 100), (50, 150), (200, 300)]) == 100", "assert max_diff_tuple([(1, 2)]) == 1", "assert max_diff_tuple([(0, 1), (1, 0), (2, 3)]) == 1", "assert max_diff_tuple([(1, 1000), (1000, 1), (500, 500)]) == 999", "assert max_diff_tuple([(1, 2), (2, 3), (3, 4)]) == 1", "assert max_diff_tuple([(1, 2), (2, 1), (3, 3)]) == 1", "assert max_diff_tuple([(1, 10), (10, 1), (5, 5)]) == 9", "assert max_diff_tuple([(1, 0), (0, 1), (1, 1)]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum difference from the pairs of tuples within a given list.", "code": "def min_diff_tuple(list1):\n    result_min = min([abs(x - y) for x, y in list1])\n    return result_min", "task_id": "120_baf306c0-54c5-49f8-946b-100aab92fb8b", "test_setup_code": "", "test_list": ["assert min_diff_tuple([(1, 2), (3, 5), (6, 8)]) == 1", "assert min_diff_tuple([(10, 20), (30, 25), (50, 55)]) == 5", "assert min_diff_tuple([(5, 5), (10, 10), (15, 15)]) == 0", "assert min_diff_tuple([(100, 200), (150, 250), (300, 350)]) == 50", "assert min_diff_tuple([(1, 100), (2, 99), (3, 98)]) == 1", "assert min_diff_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert min_diff_tuple([(1, 1), (2, 2), (3, 3)]) == 0", "assert min_diff_tuple([(1, -1), (2, -2), (3, -3)]) == 2", "assert min_diff_tuple([(1, 10), (2, 9), (3, 8)]) == 1", "assert min_diff_tuple([(1, 2), (2, 3), (3, 4)]) == 1", "assert min_diff_tuple([(1000, 1001), (2000, 2001), (3000, 3001)]) == 1", "assert min_diff_tuple([(1, 100), (50, 51), (100, 101)]) == 1", "assert min_diff_tuple([(1, 1000), (500, 501), (1000, 1001)]) == 1", "assert min_diff_tuple([(1, 1000), (500, 1000), (1000, 2000)]) == 500", "assert min_diff_tuple([(1, 2), (2, 4), (4, 8)]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute product from the pairs of tuples within a given list.", "code": "def max_product_abs_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1])\n    return result_max", "task_id": "120_4c717cbb-19d4-44bc-9f98-e6db93a183b7", "test_setup_code": "", "test_list": ["assert max_product_abs_tuple([(1, 2), (3, 4), (5, 6)]) == 30", "assert max_product_abs_tuple([(-1, -2), (-3, -4), (-5, -6)]) == 30", "assert max_product_abs_tuple([(0, 1), (2, 0), (3, 4)]) == 12", "assert max_product_abs_tuple([(1, -2), (-3, 4), (5, -6)]) == 30", "assert max_product_abs_tuple([(1, 1), (1, 1), (1, 1)]) == 1", "assert max_product_abs_tuple([(1, 0), (0, 1), (0, 0)]) == 0", "assert max_product_abs_tuple([(1000, 1000), (999, 999), (998, 998)]) == 1000000", "assert max_product_abs_tuple([(1, 2), (3, 4), (5, 0)]) == 12", "assert max_product_abs_tuple([(1, 2), (3, 4), (0, 0)]) == 12", "assert max_product_abs_tuple([(1, 2), (3, 4), (5, 6), (-7, -8)]) == 56", "assert max_product_abs_tuple([(1, 2)]) == 2", "assert max_product_abs_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert max_product_abs_tuple([(1, -1), (-1, 1), (1, 1)]) == 1", "assert max_product_abs_tuple([(123, 456), (-789, 1011), (1213, -1415)]) == 1718195", "assert max_product_abs_tuple([(-1, 2), (3, -4), (-5, 6)]) == 30"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the maximum products from the pairs of tuples within a given list.", "code": "def sum_of_max_products(list1):\n    result_sum = sum([max(x, y) for x, y in list1])\n    return result_sum", "task_id": "120_4d2e32ca-1d75-44a6-88fa-963a22062711", "test_setup_code": "", "test_list": ["assert sum_of_max_products([(1, 2), (3, 4), (5, 6)]) == 12", "assert sum_of_max_products([(10, 20), (30, 40), (50, 60)]) == 120", "assert sum_of_max_products([(0, 0), (0, 0), (0, 0)]) == 0", "assert sum_of_max_products([(1, 1), (1, 1), (1, 1)]) == 3", "assert sum_of_max_products([(1, 100), (200, 2), (3, 300)]) == 600", "assert sum_of_max_products([(-1, -2), (-3, -4), (-5, -6)]) == -9", "assert sum_of_max_products([(0, 1), (2, 0), (0, 3)]) == 6", "assert sum_of_max_products([(100, 200), (300, 400), (500, 600)]) == 1200", "assert sum_of_max_products([(1, 2)]) == 2", "assert sum_of_max_products([(1, 2), (3, 4), (5, 6), (7, 8)]) == 20", "assert sum_of_max_products([(1, 2), (2, 1), (3, 3)]) == 7", "assert sum_of_max_products([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == 30", "assert sum_of_max_products([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == 42", "assert sum_of_max_products([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 15", "assert sum_of_max_products([(0, 0), (1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of squares from the pairs of tuples within a given list.", "code": "def max_sum_of_squares(list1):\n    result_max = max([x**2 + y**2 for x, y in list1])\n    return result_max", "task_id": "120_a4dcc6c2-7ae2-49a9-bc9a-ca5af8039391", "test_setup_code": "", "test_list": ["assert max_sum_of_squares([(1, 2), (3, 4), (5, 6)]) == 61", "assert max_sum_of_squares([(0, 0), (0, 1), (1, 0)]) == 1", "assert max_sum_of_squares([(-1, -2), (-3, -4), (-5, -6)]) == 61", "assert max_sum_of_squares([(1, 1), (2, 2), (3, 3)]) == 18", "assert max_sum_of_squares([(10, 10), (20, 20), (30, 30)]) == 1800", "assert max_sum_of_squares([(0, 0)]) == 0", "assert max_sum_of_squares([(1, 0), (0, 1), (1, 1)]) == 2", "assert max_sum_of_squares([(100, 100), (200, 200), (300, 300)]) == 180000", "assert max_sum_of_squares([(1, -1), (-1, 1), (1, 1)]) == 2", "assert max_sum_of_squares([(1, 2), (2, 1), (2, 2)]) == 8", "assert max_sum_of_squares([(1, 1), (1, 1), (1, 1)]) == 2", "assert max_sum_of_squares([(1, 2), (2, 3), (3, 4)]) == 25", "assert max_sum_of_squares([(1, 1), (2, 2), (3, 3), (4, 4)]) == 32", "assert max_sum_of_squares([(1, 2), (2, 3), (3, 4), (4, 5)]) == 41", "assert max_sum_of_squares([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == 61"], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of squares from the pairs of tuples within a given list.", "code": "def min_sum_of_squares(list1):\n    result_min = min([x**2 + y**2 for x, y in list1])\n    return result_min", "task_id": "120_8a969486-fdd5-4f7d-9ce8-19a328c486d9", "test_setup_code": "", "test_list": ["assert min_sum_of_squares([(1, 2), (3, 4), (5, 6)]) == 5", "assert min_sum_of_squares([(0, 0), (1, 1), (2, 2)]) == 0", "assert min_sum_of_squares([(-1, -1), (-2, -2), (-3, -3)]) == 2", "assert min_sum_of_squares([(0, 1), (1, 0), (2, 2)]) == 1", "assert min_sum_of_squares([(10, 10), (1, 1), (5, 5)]) == 2", "assert min_sum_of_squares([(100, 100), (50, 50), (0, 0)]) == 0", "assert min_sum_of_squares([(1, 1), (2, 2), (3, 3), (4, 4)]) == 2", "assert min_sum_of_squares([(1, 2), (2, 1), (3, 4), (4, 3)]) == 5", "assert min_sum_of_squares([(0, 1), (1, 0), (1, 1), (2, 2)]) == 1", "assert min_sum_of_squares([(0, 0), (0, 1), (1, 0), (1, 1)]) == 0", "assert min_sum_of_squares([(1, 1), (2, 2), (3, 3), (0, 0)]) == 0", "assert min_sum_of_squares([(1, 1), (1, 2), (2, 2), (2, 3)]) == 2", "assert min_sum_of_squares([(1, 1), (1, 1), (1, 1), (1, 1)]) == 2", "assert min_sum_of_squares([(1, 2), (2, 3), (3, 4), (4, 5)]) == 5", "assert min_sum_of_squares([(1, 2), (2, 3), (3, 4), (4, 5), (-1, -1)]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the element that appears only once in an unsorted array.", "code": "def find_unique(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result", "task_id": "119_d75e228b-5264-4481-b9c7-1f0178db5f0f", "test_setup_code": "", "test_list": ["assert find_unique([2, 3, 5, 4, 5, 3, 4]) == 2", "assert find_unique([1, 1, 2, 2, 3, 3, 4]) == 4", "assert find_unique([10, 10, 20, 30, 30]) == 20", "assert find_unique([7, 7, 8, 8, 9]) == 9", "assert find_unique([0, 1, 0, 1, 0, 1, 2]) == 2", "assert find_unique([100, 200, 300, 200, 100]) == 300", "assert find_unique([5, 5, 6, 6, 7, 7, 8]) == 8", "assert find_unique([9, 9, 8, 8, 7, 7, 6]) == 6", "assert find_unique([1, 2, 3, 4, 3, 2, 1]) == 4", "assert find_unique([11, 22, 33, 22, 11]) == 33", "assert find_unique([1]) == 1", "assert find_unique([2, 2, 3, 3, 4, 4, 5, 5, 6]) == 6", "assert find_unique([0, 0, 1, 1, 2, 2, 3, 3, 4]) == 4", "assert find_unique([1000, 2000, 1000, 3000, 2000]) == 3000", "assert find_unique([7, 3, 5, 4, 5, 3, 4]) == 7"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers from 1 to n.", "code": "def find_missing(arr, n):\n    total = n * (n + 1) // 2\n    sum_arr = sum(arr)\n    return total - sum_arr", "task_id": "119_310b9ec8-bb36-4c9a-ad8c-7dbe0fc57574", "test_setup_code": "", "test_list": ["assert find_missing([1, 2, 4, 5, 6], 6) == 3", "assert find_missing([2, 3, 4, 5, 6], 6) == 1", "assert find_missing([1, 2, 3, 4, 5], 6) == 6", "assert find_missing([1, 3, 4, 5, 6], 6) == 2", "assert find_missing([1, 2, 3, 5, 6], 6) == 4", "assert find_missing([1, 2, 3, 4, 6], 6) == 5", "assert find_missing([1], 2) == 2", "assert find_missing([], 1) == 1", "assert find_missing([2, 3, 4, 5, 7, 8, 9, 10], 10) == 1", "assert find_missing([1, 2, 3, 4, 5, 6, 7, 9, 10], 10) == 8", "assert find_missing([1, 2, 3, 4, 5, 6, 7, 8, 10], 10) == 9", "assert find_missing([1, 3], 3) == 2", "assert find_missing([1, 2, 4], 4) == 3", "assert find_missing([2], 2) == 1", "assert find_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 11], 11) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the duplicate number in an array of integers where each integer is between 1 and n-1.", "code": "def find_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)", "task_id": "119_2ceb6237-de64-41f2-9e31-bf7ba3866c32", "test_setup_code": "", "test_list": ["assert find_duplicate([1, 3, 4, 2, 2]) == 2", "assert find_duplicate([3, 1, 3, 4, 2]) == 3", "assert find_duplicate([1, 1]) == 1", "assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]) == 5", "assert find_duplicate([9, 8, 7, 6, 5, 4, 3, 2, 1, 9]) == 9", "assert find_duplicate([2, 2, 2, 2, 2]) == 2", "assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 1", "assert find_duplicate([5, 4, 3, 2, 1, 5]) == 5", "assert find_duplicate([1, 2, 3, 4, 4]) == 4", "assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10", "assert find_duplicate([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10]) == 8", "assert find_duplicate([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]) == 7", "assert find_duplicate([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]) == 5", "assert find_duplicate([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the two elements that appear only once in an array where every other element appears exactly twice.", "code": "def find_single_numbers(arr):\n    xor = 0\n    for num in arr:\n        xor ^= num\n    rightmost_bit = xor & -xor\n    num1, num2 = 0, 0\n    for num in arr:\n        if num & rightmost_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n    return num1, num2", "task_id": "119_b689f8d4-ddf4-4bdb-99bc-9a7988f118a2", "test_setup_code": "", "test_list": ["assert find_single_numbers([1, 2, 1, 3, 2, 5]) == (3, 5)", "assert find_single_numbers([4, 1, 2, 1, 2, 3, 4, 5]) == (3, 5)", "assert find_single_numbers([2, 3, 7, 9, 2, 3]) == (7, 9)", "assert find_single_numbers([0, 1, 0, 2]) == (1, 2)", "assert find_single_numbers([10, 14, 10, 14, 5, 7]) == (5, 7)", "assert find_single_numbers([1, 2, 3, 2, 1, 4]) == (3, 4)", "assert find_single_numbers([5, 6, 7, 5, 6, 8]) == (7, 8)", "assert find_single_numbers([10, 20, 30, 20, 10, 40]) == (30, 40)", "assert find_single_numbers([100, 200, 300, 200, 100, 400]) == (300, 400)", "assert find_single_numbers([1, 1, 2, 2, 3, 4]) == (3, 4)", "assert find_single_numbers([1, 2, 3, 4, 3, 2]) == (1, 4)", "assert find_single_numbers([0, 0, 1, 2, 1, 3]) == (2, 3)", "assert find_single_numbers([9, 8, 7, 8, 9, 6]) == (7, 6)", "assert find_single_numbers([11, 22, 33, 22, 11, 44]) == (33, 44)", "assert find_single_numbers([5, 5, 6, 7, 6, 8]) == (7, 8)"], "challenge_test_list": []}
{"text": "Write a python function to find the missing and duplicate numbers in an array of integers from 1 to n.", "code": "def find_missing_and_duplicate(arr, n):\n    total = n * (n + 1) // 2\n    sum_arr = sum(arr)\n    sum_sq_arr = sum(x*x for x in arr)\n    total_sq = sum(x*x for x in range(1, n+1))\n    diff = total - sum_arr\n    sq_diff = total_sq - sum_sq_arr\n    sum_missing_duplicate = sq_diff // diff\n    missing = (diff + sum_missing_duplicate) // 2\n    duplicate = sum_missing_duplicate - missing\n    return missing, duplicate", "task_id": "119_9512849f-cbca-4cda-bd7d-484c50f8bb40", "test_setup_code": "", "test_list": ["assert find_missing_and_duplicate([1, 2, 2, 4], 4) == (3, 2)", "assert find_missing_and_duplicate([1, 3, 3, 4], 4) == (2, 3)", "assert find_missing_and_duplicate([1, 1, 3, 4], 4) == (2, 1)", "assert find_missing_and_duplicate([2, 2, 3, 4], 4) == (1, 2)", "assert find_missing_and_duplicate([1, 2, 3, 3], 4) == (4, 3)", "assert find_missing_and_duplicate([1, 2, 3, 5, 5], 5) == (4, 5)", "assert find_missing_and_duplicate([1, 2, 4, 4, 5], 5) == (3, 4)", "assert find_missing_and_duplicate([1, 3, 4, 4, 5], 5) == (2, 4)", "assert find_missing_and_duplicate([1, 2, 2, 3, 5], 5) == (4, 2)", "assert find_missing_and_duplicate([2, 3, 3, 4, 5], 5) == (1, 3)", "assert find_missing_and_duplicate([1, 1], 2) == (2, 1)", "assert find_missing_and_duplicate([2, 2], 2) == (1, 2)", "assert find_missing_and_duplicate([1, 2, 2], 3) == (3, 2)", "assert find_missing_and_duplicate([1, 1, 3], 3) == (2, 1)", "assert find_missing_and_duplicate([2, 2, 3], 3) == (1, 2)"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a string.", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "119_20f03f39-561b-4783-8f03-a15bd4dcd030", "test_setup_code": "", "test_list": ["assert find_first_non_repeating_char('aabbccdde') == 'e'", "assert find_first_non_repeating_char('aabbccdd') == ''", "assert find_first_non_repeating_char('abcabc') == ''", "assert find_first_non_repeating_char('a') == 'a'", "assert find_first_non_repeating_char('') == ''", "assert find_first_non_repeating_char('abacabad') == 'c'", "assert find_first_non_repeating_char('abacabaabacaba') == ''", "assert find_first_non_repeating_char('xxyz') == 'y'", "assert find_first_non_repeating_char('xyyz') == 'x'", "assert find_first_non_repeating_char('aabbccddeeffg') == 'g'", "assert find_first_non_repeating_char('aabbccddeeff') == ''", "assert find_first_non_repeating_char('aabbccddeeffgh') == 'g'", "assert find_first_non_repeating_char('11223344556677889900') == ''", "assert find_first_non_repeating_char('1122334455667788990') == '0'", "assert find_first_non_repeating_char('abcdefghijklmnopqrstuvwxyz') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to find the element that appears only once in an array where every other element appears exactly three times.", "code": "def find_single_element(arr):\n    ones, twos = 0, 0\n    for num in arr:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones", "task_id": "119_8d22f438-350f-46f0-9b99-4a1d4378b1c9", "test_setup_code": "", "test_list": ["assert find_single_element([2, 2, 3, 2]) == 3", "assert find_single_element([0, 1, 0, 1, 0, 1, 99]) == 99", "assert find_single_element([30000, 500, 100, 30000, 100, 30000, 100]) == 500", "assert find_single_element([7, 7, 7, 8]) == 8", "assert find_single_element([1, 1, 1, 2, 2, 2, 3]) == 3", "assert find_single_element([-1, -1, -1, -2]) == -2", "assert find_single_element([10, 10, 10, 20, 20, 20, 30]) == 30", "assert find_single_element([0, 0, 0, 1]) == 1", "assert find_single_element([5, 5, 5, 6, 6, 6, 7, 7, 7, 8]) == 8", "assert find_single_element([9, 9, 9, 10, 10, 10, 11, 11, 11, 12]) == 12", "assert find_single_element([4, 4, 4, 5, 5, 5, 6, 6, 6, 7, 7, 7, 8]) == 8", "assert find_single_element([1, 2, 1, 2, 1, 2, 3]) == 3", "assert find_single_element([1, 1, 1, 2, 2, 2, 3, 3, 3, 4]) == 4", "assert find_single_element([10, 10, 10, 20, 20, 20, 30, 30, 30, 40]) == 40", "assert find_single_element([0, 0, 0, -1, -1, -1, -2]) == -2"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive integer in an unsorted array.", "code": "def find_first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "task_id": "119_16efa38c-1f9a-468f-8dbd-6d890ac0f350", "test_setup_code": "", "test_list": ["assert find_first_missing_positive([3, 4, -1, 1]) == 2", "assert find_first_missing_positive([1, 2, 0]) == 3", "assert find_first_missing_positive([7, 8, 9, 11, 12]) == 1", "assert find_first_missing_positive([1, 2, 3, 4, 5]) == 6", "assert find_first_missing_positive([2, 3, 4, 5, 6]) == 1", "assert find_first_missing_positive([0, 0, 0, 0, 0]) == 1", "assert find_first_missing_positive([-1, -2, -3, -4, -5]) == 1", "assert find_first_missing_positive([1]) == 2", "assert find_first_missing_positive([2]) == 1", "assert find_first_missing_positive([1, 1, 1, 1, 1]) == 2", "assert find_first_missing_positive([1, 2, 3, 5]) == 4", "assert find_first_missing_positive([3, 7, 1, 2, 8, -1, -10, 15]) == 4", "assert find_first_missing_positive([]) == 1", "assert find_first_missing_positive([1, 2, 3, 10, 2147483647]) == 4", "assert find_first_missing_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 21"], "challenge_test_list": []}
{"text": "Write a python function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 & set2)", "task_id": "119_008f35b2-2150-4a5d-8b97-2dd3fab3cd3f", "test_setup_code": "", "test_list": ["assert find_intersection([1, 2, 3], [3, 4, 5]) == [3]", "assert find_intersection([1, 2, 3], [4, 5, 6]) == []", "assert find_intersection([], [1, 2, 3]) == []", "assert find_intersection([1, 2, 3], []) == []", "assert find_intersection([1, 2, 2, 3], [2, 2, 4, 5]) == [2]", "assert find_intersection([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_intersection([1], [1, 2, 3]) == [1]", "assert find_intersection([1, 2, 3], [1]) == [1]", "assert find_intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []", "assert find_intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]", "assert find_intersection([1, 1, 1, 1], [1, 1, 1, 1]) == [1]", "assert find_intersection([1, 2, 3], [3, 3, 3]) == [3]", "assert find_intersection([1, 2, 3], [2, 3, 4]) == [2, 3]", "assert find_intersection([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]) == [1, 3, 5]", "assert find_intersection([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [2, 4]"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all divisors of a given number.", "code": "def sum_of_divisors(n: int) -> int:\n    return sum([i for i in range(1, n+1) if n % i == 0])", "task_id": "123_8ddabbfe-62dc-45b6-a104-26f074f7b73d", "test_setup_code": "", "test_list": ["assert sum_of_divisors(1) == 1", "assert sum_of_divisors(2) == 3", "assert sum_of_divisors(3) == 4", "assert sum_of_divisors(4) == 7", "assert sum_of_divisors(5) == 6", "assert sum_of_divisors(6) == 12", "assert sum_of_divisors(10) == 18", "assert sum_of_divisors(12) == 28", "assert sum_of_divisors(15) == 24", "assert sum_of_divisors(16) == 31", "assert sum_of_divisors(20) == 42", "assert sum_of_divisors(25) == 31", "assert sum_of_divisors(36) == 91", "assert sum_of_divisors(49) == 57", "assert sum_of_divisors(100) == 217"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect number.", "code": "def is_perfect_number(n: int) -> bool:\n    return sum([i for i in range(1, n) if n % i == 0]) == n", "task_id": "123_d0418e0e-150c-4262-bd61-4a2d3eed343c", "test_setup_code": "", "test_list": ["assert is_perfect_number(6) == True", "assert is_perfect_number(28) == True", "assert is_perfect_number(496) == True", "assert is_perfect_number(1) == False", "assert is_perfect_number(0) == False", "assert is_perfect_number(-6) == False", "assert is_perfect_number(12) == False", "assert is_perfect_number(27) == False", "assert is_perfect_number(2) == False", "assert is_perfect_number(3) == False", "assert is_perfect_number(5) == False", "assert is_perfect_number(7) == False", "assert is_perfect_number(10) == False"], "challenge_test_list": []}
{"text": "Write a function to sum all abundant numbers from 1 to a specified number.", "code": "def sum_of_abundant_numbers(limit: int) -> int:\n    return sum([n for n in range(1, limit + 1) if sum([i for i in range(1, n) if n % i == 0]) > n])", "task_id": "123_a9bac643-c593-4f69-9fbd-aecea9e16a34", "test_setup_code": "", "test_list": ["assert sum_of_abundant_numbers(1) == 0", "assert sum_of_abundant_numbers(12) == 12", "assert sum_of_abundant_numbers(18) == 30", "assert sum_of_abundant_numbers(20) == 42", "assert sum_of_abundant_numbers(23) == 42", "assert sum_of_abundant_numbers(24) == 66", "assert sum_of_abundant_numbers(25) == 66", "assert sum_of_abundant_numbers(28) == 66", "assert sum_of_abundant_numbers(30) == 84", "assert sum_of_abundant_numbers(36) == 120", "assert sum_of_abundant_numbers(50) == 336", "assert sum_of_abundant_numbers(60) == 504", "assert sum_of_abundant_numbers(100) == 2766", "assert sum_of_abundant_numbers(200) == 17912", "assert sum_of_abundant_numbers(500) == 122850"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a deficient number.", "code": "def is_deficient_number(n: int) -> bool:\n    return sum([i for i in range(1, n) if n % i == 0]) < n", "task_id": "123_4f814185-ebaa-4bc6-97f9-77ea793be633", "test_setup_code": "", "test_list": ["assert is_deficient_number(1) == True", "assert is_deficient_number(2) == True", "assert is_deficient_number(3) == True", "assert is_deficient_number(4) == True", "assert is_deficient_number(5) == True", "assert is_deficient_number(6) == False", "assert is_deficient_number(8) == True", "assert is_deficient_number(12) == False", "assert is_deficient_number(15) == True", "assert is_deficient_number(16) == True", "assert is_deficient_number(18) == False", "assert is_deficient_number(20) == True", "assert is_deficient_number(28) == False", "assert is_deficient_number(30) == False", "assert is_deficient_number(31) == True"], "challenge_test_list": []}
{"text": "Write a function to sum all deficient numbers from 1 to a specified number.", "code": "def sum_of_deficient_numbers(limit: int) -> int:\n    return sum([n for n in range(1, limit + 1) if sum([i for i in range(1, n) if n % i == 0]) < n])", "task_id": "123_9bfee39e-ba71-4b18-a23d-34cf223f0c63", "test_setup_code": "", "test_list": ["assert sum_of_deficient_numbers(1) == 1", "assert sum_of_deficient_numbers(2) == 3", "assert sum_of_deficient_numbers(3) == 6", "assert sum_of_deficient_numbers(4) == 10", "assert sum_of_deficient_numbers(5) == 15", "assert sum_of_deficient_numbers(6) == 21", "assert sum_of_deficient_numbers(10) == 55", "assert sum_of_deficient_numbers(12) == 78", "assert sum_of_deficient_numbers(15) == 120", "assert sum_of_deficient_numbers(20) == 210", "assert sum_of_deficient_numbers(25) == 325", "assert sum_of_deficient_numbers(30) == 465", "assert sum_of_deficient_numbers(50) == 1275", "assert sum_of_deficient_numbers(100) == 5050", "assert sum_of_deficient_numbers(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to sum all prime numbers from 1 to a specified number.", "code": "def sum_of_prime_numbers(limit: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return sum([n for n in range(2, limit + 1) if is_prime(n)])", "task_id": "123_bafaecc1-80d8-4947-9c28-a2ce1873fca9", "test_setup_code": "", "test_list": ["assert sum_of_prime_numbers(1) == 0", "assert sum_of_prime_numbers(2) == 2", "assert sum_of_prime_numbers(3) == 5", "assert sum_of_prime_numbers(10) == 17", "assert sum_of_prime_numbers(0) == 0", "assert sum_of_prime_numbers(20) == 77", "assert sum_of_prime_numbers(30) == 129", "assert sum_of_prime_numbers(50) == 328", "assert sum_of_prime_numbers(100) == 1060", "assert sum_of_prime_numbers(4) == 5", "assert sum_of_prime_numbers(5) == 10", "assert sum_of_prime_numbers(6) == 10", "assert sum_of_prime_numbers(7) == 17", "assert sum_of_prime_numbers(11) == 28", "assert sum_of_prime_numbers(13) == 41"], "challenge_test_list": []}
{"text": "Write a function to sum all Fibonacci numbers up to a specified number.", "code": "def sum_of_fibonacci_numbers(limit: int) -> int:\n    a, b = 0, 1\n    total = 0\n    while a <= limit:\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "123_c83b8c28-068b-48e4-bab5-8551b2b94515", "test_setup_code": "", "test_list": ["assert sum_of_fibonacci_numbers(0) == 0", "assert sum_of_fibonacci_numbers(1) == 1", "assert sum_of_fibonacci_numbers(2) == 2", "assert sum_of_fibonacci_numbers(3) == 4", "assert sum_of_fibonacci_numbers(4) == 7", "assert sum_of_fibonacci_numbers(5) == 7", "assert sum_of_fibonacci_numbers(10) == 20", "assert sum_of_fibonacci_numbers(15) == 23", "assert sum_of_fibonacci_numbers(20) == 33", "assert sum_of_fibonacci_numbers(21) == 54", "assert sum_of_fibonacci_numbers(50) == 143", "assert sum_of_fibonacci_numbers(100) == 231", "assert sum_of_fibonacci_numbers(144) == 376", "assert sum_of_fibonacci_numbers(200) == 376", "assert sum_of_fibonacci_numbers(1000) == 798"], "challenge_test_list": []}
{"text": "Write a function to sum the squares of all numbers from 1 to a specified number.", "code": "def sum_of_squares(limit: int) -> int:\n    return sum([i ** 2 for i in range(1, limit + 1)])", "task_id": "123_39043226-76e7-496c-9c85-1085ece42efb", "test_setup_code": "", "test_list": ["assert sum_of_squares(1) == 1", "assert sum_of_squares(2) == 5", "assert sum_of_squares(3) == 14", "assert sum_of_squares(4) == 30", "assert sum_of_squares(5) == 55", "assert sum_of_squares(10) == 385", "assert sum_of_squares(0) == 0", "assert sum_of_squares(100) == 338350", "assert sum_of_squares(50) == 42925", "assert sum_of_squares(25) == 5525", "assert sum_of_squares(15) == 1240", "assert sum_of_squares(20) == 2870", "assert sum_of_squares(30) == 9455", "assert sum_of_squares(7) == 140", "assert sum_of_squares(12) == 650"], "challenge_test_list": []}
{"text": "Write a function to sum the cubes of all numbers from 1 to a specified number.", "code": "def sum_of_cubes(limit: int) -> int:\n    return sum([i ** 3 for i in range(1, limit + 1)])", "task_id": "123_157631ea-e16c-4906-8b92-ef5a587763b0", "test_setup_code": "", "test_list": ["assert sum_of_cubes(1) == 1", "assert sum_of_cubes(2) == 9", "assert sum_of_cubes(3) == 36", "assert sum_of_cubes(4) == 100", "assert sum_of_cubes(5) == 225", "assert sum_of_cubes(6) == 441", "assert sum_of_cubes(7) == 784", "assert sum_of_cubes(8) == 1296", "assert sum_of_cubes(9) == 2025", "assert sum_of_cubes(10) == 3025", "assert sum_of_cubes(0) == 0", "assert sum_of_cubes(11) == 4356", "assert sum_of_cubes(12) == 6084", "assert sum_of_cubes(13) == 8190", "assert sum_of_cubes(14) == 10731"], "challenge_test_list": []}
{"text": "Write a function to find the triplet with product of the given array.", "code": "def find_triplet_with_product(arr, product):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] * arr[j] * arr[k] == product:\n                    return True\n    return False", "task_id": "121_6e560898-16bc-420f-9825-33365f873052", "test_setup_code": "", "test_list": ["assert find_triplet_with_product([1, 2, 3, 4, 5], 6) == True", "assert find_triplet_with_product([1, 2, 3, 4, 5], 60) == True", "assert find_triplet_with_product([1, 2, 3, 4, 5], 120) == False", "assert find_triplet_with_product([0, 2, 3, 4, 5], 0) == True", "assert find_triplet_with_product([-1, -2, -3, 4, 5], -6) == True", "assert find_triplet_with_product([-1, -2, -3, 4, 5], 6) == False", "assert find_triplet_with_product([1, 1, 1, 1, 1], 1) == True", "assert find_triplet_with_product([1, 1, 1, 1, 1], 2) == False", "assert find_triplet_with_product([1, 2, 3], 6) == True", "assert find_triplet_with_product([1, 2, 3], 7) == False", "assert find_triplet_with_product([1, 2, 3, 0], 0) == True", "assert find_triplet_with_product([1, 2, 3, 4, 6], 24) == True", "assert find_triplet_with_product([1, 2, 3, 4, 6], 25) == False", "assert find_triplet_with_product([1, 2, 3, 4, 6, 8], 48) == True", "assert find_triplet_with_product([1, 2, 3, 4, 6, 8], 50) == False"], "challenge_test_list": []}
{"text": "Write a function to find the quadruplet with sum of the given array.", "code": "def find_quadruplet_with_sum(arr, target):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False", "task_id": "121_8a17537b-1274-499e-ad77-fd125bd4613e", "test_setup_code": "", "test_list": ["assert find_quadruplet_with_sum([1, 2, 3, 4, 5], 10) == True", "assert find_quadruplet_with_sum([1, 2, 3, 4, 5], 15) == False", "assert find_quadruplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8], 26) == True", "assert find_quadruplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8], 30) == False", "assert find_quadruplet_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 4) == True", "assert find_quadruplet_with_sum([1, 1, 1, 1, 1, 1, 1, 1], 5) == False", "assert find_quadruplet_with_sum([0, 0, 0, 0, 0, 0, 0, 0], 0) == True", "assert find_quadruplet_with_sum([0, 0, 0, 0, 0, 0, 0, 0], 1) == False", "assert find_quadruplet_with_sum([10, 20, 30, 40, 50], 100) == True", "assert find_quadruplet_with_sum([10, 20, 30, 40, 50], 150) == False", "assert find_quadruplet_with_sum([1, 2, 3, 4], 10) == True", "assert find_quadruplet_with_sum([1, 2, 3, 4], 11) == False", "assert find_quadruplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 34) == True", "assert find_quadruplet_with_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 40) == False", "assert find_quadruplet_with_sum([-1, -2, -3, -4, -5, -6, -7, -8], -10) == True"], "challenge_test_list": []}
{"text": "Write a function to find the triplet with sum closest to the given target.", "code": "def find_triplet_with_sum_closest(arr, target):\n    arr.sort()\n    closest_sum = float('inf')\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if abs(target - current_sum) < abs(target - closest_sum):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            elif current_sum > target:\n                right -= 1\n            else:\n                return current_sum\n    return closest_sum", "task_id": "121_13270187-6a98-45f1-a988-efbb923a70dd", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_closest([1, 2, 3, 4, 5], 10) == 10", "assert find_triplet_with_sum_closest([-1, 2, 1, -4], 1) == 2", "assert find_triplet_with_sum_closest([0, 0, 0], 1) == 0", "assert find_triplet_with_sum_closest([1, 1, 1, 1], 3) == 3", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5], 12) == 12", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5], 7) == 6", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5], 20) == 12", "assert find_triplet_with_sum_closest([-1, -2, -3, -4, -5], -6) == -6", "assert find_triplet_with_sum_closest([-1, -2, -3, -4, -5], -10) == -9", "assert find_triplet_with_sum_closest([1, 2, 3], 6) == 6", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5, 6, 7, 8, 9], 15) == 15", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5, 6, 7, 8, 9], 30) == 24", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 6", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5, 6, 7, 8, 9], 1) == 6", "assert find_triplet_with_sum_closest([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum zero in the given array.", "code": "def find_triplet_with_sum_zero(arr):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "task_id": "121_2cdb4a10-7856-422e-b826-a0ac9202513c", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_zero([0, -1, 2, -3, 1]) == True", "assert find_triplet_with_sum_zero([1, -2, 1, 0, 5]) == False", "assert find_triplet_with_sum_zero([3, -1, -7, 2, 8, -3]) == True", "assert find_triplet_with_sum_zero([1, 2, 3, 4, 5]) == False", "assert find_triplet_with_sum_zero([-1, -2, -3, -4, -5]) == False", "assert find_triplet_with_sum_zero([0, 0, 0]) == True", "assert find_triplet_with_sum_zero([1, -1, 0]) == True", "assert find_triplet_with_sum_zero([1, 2, -2, -1]) == True", "assert find_triplet_with_sum_zero([1, 2, 3, -3, -2, -1]) == True", "assert find_triplet_with_sum_zero([1, 2, -4, 3, 0]) == True", "assert find_triplet_with_sum_zero([1, 2, 3, 4, -10]) == False", "assert find_triplet_with_sum_zero([1, 2, -3, 4, -1]) == True", "assert find_triplet_with_sum_zero([-1, 1, 0, 2, -2]) == True", "assert find_triplet_with_sum_zero([0, 1, 1, -1, -1]) == True", "assert find_triplet_with_sum_zero([1, 1, 1, 1, 1]) == False"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum greater than the given target in the array.", "code": "def find_triplet_with_sum_greater_than(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum > target:\n                return True\n            elif current_sum <= target:\n                left += 1\n            else:\n                right -= 1\n    return False", "task_id": "121_9c84fd08-c0c4-4318-b58a-457c6a8b6246", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_greater_than([1, 2, 3, 4, 5], 10) == True", "assert find_triplet_with_sum_greater_than([1, 2, 3, 4, 5], 12) == False", "assert find_triplet_with_sum_greater_than([5, 1, 3, 2, 4], 9) == True", "assert find_triplet_with_sum_greater_than([5, 1, 3, 2, 4], 11) == False", "assert find_triplet_with_sum_greater_than([10, 20, 30, 40, 50], 100) == True", "assert find_triplet_with_sum_greater_than([10, 20, 30, 40, 50], 120) == False", "assert find_triplet_with_sum_greater_than([1, 1, 1, 1, 1], 2) == True", "assert find_triplet_with_sum_greater_than([1, 1, 1, 1, 1], 3) == False", "assert find_triplet_with_sum_greater_than([1, 2, 3], 5) == True", "assert find_triplet_with_sum_greater_than([1, 2, 3], 6) == False", "assert find_triplet_with_sum_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 20) == True", "assert find_triplet_with_sum_greater_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 25) == False", "assert find_triplet_with_sum_greater_than([-1, 0, 1, 2, -1, -4], 0) == True", "assert find_triplet_with_sum_greater_than([-1, 0, 1, 2, -1, -4], 2) == False", "assert find_triplet_with_sum_greater_than([0, 0, 0, 0, 0], 0) == True"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum less than the given target in the array.", "code": "def find_triplet_with_sum_less_than(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum < target:\n                return True\n            elif current_sum >= target:\n                right -= 1\n            else:\n                left += 1\n    return False", "task_id": "121_79468707-ef24-4aee-bc7e-f5a2609c558e", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5], 10) == True", "assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5], 6) == False", "assert find_triplet_with_sum_less_than([5, 1, 3, 2, 4], 9) == True", "assert find_triplet_with_sum_less_than([5, 1, 3, 2, 4], 5) == False", "assert find_triplet_with_sum_less_than([1, 1, 1, 1, 1], 4) == True", "assert find_triplet_with_sum_less_than([1, 1, 1, 1, 1], 3) == False", "assert find_triplet_with_sum_less_than([1, 2, 3], 7) == True", "assert find_triplet_with_sum_less_than([1, 2, 3], 6) == False", "assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5, 6], 15) == True", "assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5, 6], 7) == True", "assert find_triplet_with_sum_less_than([10, 20, 30, 40, 50], 100) == True", "assert find_triplet_with_sum_less_than([10, 20, 30, 40, 50], 60) == True", "assert find_triplet_with_sum_less_than([10, 20, 30, 40, 50], 50) == False", "assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 25) == True", "assert find_triplet_with_sum_less_than([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == True"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with an even sum in the given array.", "code": "def find_triplet_with_sum_even(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 2 == 0:\n                    return True\n    return False", "task_id": "121_1d7b09b8-76e8-49d4-90d2-ad19f3b661bb", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_even([1, 2, 3, 4, 5]) == True", "assert find_triplet_with_sum_even([1, 3, 5, 7, 9]) == False", "assert find_triplet_with_sum_even([2, 4, 6, 8, 10]) == True", "assert find_triplet_with_sum_even([1, 1, 1]) == False", "assert find_triplet_with_sum_even([1, 2, 2]) == True", "assert find_triplet_with_sum_even([1, 2, 3]) == True", "assert find_triplet_with_sum_even([1, 1, 2, 2]) == True", "assert find_triplet_with_sum_even([1, 1, 1, 1, 1]) == False", "assert find_triplet_with_sum_even([1, 2, 3, 4, 5, 6]) == True", "assert find_triplet_with_sum_even([0, 0, 0]) == True", "assert find_triplet_with_sum_even([0, 1, 2]) == True", "assert find_triplet_with_sum_even([2, 2, 2]) == True", "assert find_triplet_with_sum_even([-1, -2, -3, -4, -5]) == True", "assert find_triplet_with_sum_even([-1, -3, -5, -7, -9]) == False", "assert find_triplet_with_sum_even([100, 200, 300]) == True"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with an odd sum in the given array.", "code": "def find_triplet_with_sum_odd(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 2 != 0:\n                    return True\n    return False", "task_id": "121_1a202228-c683-4d40-82a9-29dae24cbc1b", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_odd([1, 2, 3, 4, 5]) == True", "assert find_triplet_with_sum_odd([2, 4, 6, 8, 10]) == False", "assert find_triplet_with_sum_odd([1, 3, 5, 7, 9]) == True", "assert find_triplet_with_sum_odd([1, 2, 4, 6, 8]) == True", "assert find_triplet_with_sum_odd([2, 4, 6]) == False", "assert find_triplet_with_sum_odd([1, 1, 1]) == True", "assert find_triplet_with_sum_odd([0, 0, 0]) == False", "assert find_triplet_with_sum_odd([1, 2, 2, 2, 2]) == True", "assert find_triplet_with_sum_odd([10, 20, 30, 40, 50]) == False", "assert find_triplet_with_sum_odd([1, 2, 3]) == True", "assert find_triplet_with_sum_odd([1, 1, 2, 2, 2]) == True", "assert find_triplet_with_sum_odd([1, 1, 1, 2, 2, 2]) == True", "assert find_triplet_with_sum_odd([2, 2, 2, 2, 2, 2]) == False", "assert find_triplet_with_sum_odd([1, 1, 2]) == True", "assert find_triplet_with_sum_odd([5, 5, 5, 5, 5]) == True"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum that is a multiple of k in the given array.", "code": "def find_triplet_with_sum_multiple_of_k(arr, k):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % k == 0:\n                    return True\n    return False", "task_id": "121_4009deae-a960-4b48-ae80-accd2f30c60a", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 3) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 7) == False", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5, 6], 6) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3], 6) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3], 5) == False", "assert find_triplet_with_sum_multiple_of_k([0, 0, 0], 1) == True", "assert find_triplet_with_sum_multiple_of_k([1, 1, 1], 2) == False", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5, 6], 10) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5, 6], 11) == False", "assert find_triplet_with_sum_multiple_of_k([10, 20, 30, 40, 50], 10) == True", "assert find_triplet_with_sum_multiple_of_k([10, 20, 30, 40, 50], 25) == False", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 1) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 2) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 4) == True", "assert find_triplet_with_sum_multiple_of_k([1, 2, 3, 4, 5], 8) == False"], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum in the given range [low, high] in the array.", "code": "def find_triplet_with_sum_in_range(arr, low, high):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if low <= arr[i] + arr[j] + arr[k] <= high:\n                    return True\n    return False", "task_id": "121_aee96f13-db07-4673-8801-53c7f4de06a9", "test_setup_code": "", "test_list": ["assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5], 6, 10) == True", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5], 15, 20) == False", "assert find_triplet_with_sum_in_range([-1, 0, 1, 2], 0, 2) == True", "assert find_triplet_with_sum_in_range([1, 1, 1, 1], 2, 3) == False", "assert find_triplet_with_sum_in_range([5, 5, 5, 5], 10, 15) == True", "assert find_triplet_with_sum_in_range([1, 2, 3], 6, 6) == True", "assert find_triplet_with_sum_in_range([1, 2, 3], 7, 7) == False", "assert find_triplet_with_sum_in_range([0, 0, 0], 0, 0) == True", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5], 12, 15) == True", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5], 3, 5) == False", "assert find_triplet_with_sum_in_range([10, 20, 30, 40, 50], 60, 100) == True", "assert find_triplet_with_sum_in_range([10, 20, 30, 40, 50], 10, 50) == False", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5, 6, 7, 8, 9], 15, 18) == True", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5, 6, 7, 8, 9], 30, 40) == False", "assert find_triplet_with_sum_in_range([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 2) == False"], "challenge_test_list": []}
{"text": "Write a function to get the magnitude of a complex number.", "code": "import cmath\ndef magnitude_complex(a: float, b: float) -> float:\n    cn = complex(a, b)\n    magnitude = abs(cn)\n    return magnitude", "task_id": "124_a9b307d1-1a18-4962-864e-75a174cd012c", "test_setup_code": "", "test_list": ["assert magnitude_complex(3, 4) == 5.0", "assert magnitude_complex(1, 1) == 1.4142135623730951", "assert magnitude_complex(0, 0) == 0.0", "assert magnitude_complex(-3, -4) == 5.0", "assert magnitude_complex(5, 12) == 13.0", "assert magnitude_complex(-5, 12) == 13.0", "assert magnitude_complex(5, -12) == 13.0", "assert magnitude_complex(-5, -12) == 13.0", "assert magnitude_complex(0.3, 0.4) == 0.5", "assert magnitude_complex(-0.3, -0.4) == 0.5", "assert magnitude_complex(1e-10, 1e-10) == 1.414213562373095e-10", "assert magnitude_complex(1e10, 1e10) == 1.4142135623730951e10", "assert magnitude_complex(0, 1) == 1.0", "assert magnitude_complex(1, 0) == 1.0", "assert magnitude_complex(123456789, 987654321) == 995340462.62581"], "challenge_test_list": []}
{"text": "Write a function to get the conjugate of a complex number.", "code": "def conjugate_complex(a: float, b: float) -> complex:\n    cn = complex(a, b)\n    conjugate = cn.conjugate()\n    return conjugate", "task_id": "124_223decee-6469-4c3b-b6fc-14894f9d779f", "test_setup_code": "", "test_list": ["assert conjugate_complex(1, 1) == complex(1, -1)", "assert conjugate_complex(0, 0) == complex(0, 0)", "assert conjugate_complex(-1, -1) == complex(-1, 1)", "assert conjugate_complex(1.5, -2.5) == complex(1.5, 2.5)", "assert conjugate_complex(-3.2, 4.1) == complex(-3.2, -4.1)", "assert conjugate_complex(0, 5) == complex(0, -5)", "assert conjugate_complex(5, 0) == complex(5, 0)", "assert conjugate_complex(123456789, 987654321) == complex(123456789, -987654321)", "assert conjugate_complex(-123456789, -987654321) == complex(-123456789, 987654321)", "assert conjugate_complex(1e-10, 1e-10) == complex(1e-10, -1e-10)", "assert conjugate_complex(-1e-10, -1e-10) == complex(-1e-10, 1e-10)", "assert conjugate_complex(3.14159, 2.71828) == complex(3.14159, -2.71828)", "assert conjugate_complex(-3.14159, -2.71828) == complex(-3.14159, 2.71828)", "assert conjugate_complex(0, -1) == complex(0, 1)", "assert conjugate_complex(-1, 0) == complex(-1, 0)"], "challenge_test_list": []}
{"text": "Write a function to add two complex numbers.", "code": "def add_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 + cn2\n    return result", "task_id": "124_b6fe5192-f512-4e6b-8156-2ccfd4cbe6fe", "test_setup_code": "", "test_list": ["assert add_complex(1, 2, 3, 4) == (4+6j)", "assert add_complex(0, 0, 0, 0) == 0j", "assert add_complex(-1, -1, -1, -1) == (-2-2j)", "assert add_complex(1.5, 2.5, 3.5, 4.5) == (5+7j)", "assert add_complex(1, 0, 0, 1) == (1+1j)", "assert add_complex(0, 1, 1, 0) == (1+1j)", "assert add_complex(1e10, 1e10, 1e10, 1e10) == (2e10+2e10j)", "assert add_complex(-1e10, -1e10, -1e10, -1e10) == (-2e10-2e10j)", "assert add_complex(1.123456789, 2.987654321, 3.123456789, 4.987654321) == (4.246913578+7.975308642j)", "assert add_complex(0.1, 0.2, 0.3, 0.4) == (0.4+0.6000000000000001j)", "assert add_complex(1, -1, -1, 1) == 0j", "assert add_complex(1, 1, -1, -1) == 0j", "assert add_complex(1e-10, 1e-10, 1e-10, 1e-10) == (2e-10+2e-10j)", "assert add_complex(1.0, 2.0, 3.0, 4.0) == (4+6j)", "assert add_complex(-1.0, -2.0, -3.0, -4.0) == (-4-6j)"], "challenge_test_list": []}
{"text": "Write a function to subtract the second complex number from the first.", "code": "def subtract_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 - cn2\n    return result", "task_id": "124_97108854-56a8-46e6-ac47-7fdbc2f27d0b", "test_setup_code": "", "test_list": ["assert subtract_complex(3, 2, 1, 1) == complex(2, 1)", "assert subtract_complex(0, 0, 0, 0) == complex(0, 0)", "assert subtract_complex(-1, -1, -1, -1) == complex(0, 0)", "assert subtract_complex(1.5, 2.5, 1.5, 2.5) == complex(0, 0)", "assert subtract_complex(1, 0, 0, 1) == complex(1, -1)", "assert subtract_complex(0, 1, 1, 0) == complex(-1, 1)", "assert subtract_complex(1.1, 2.2, 3.3, 4.4) == complex(-2.2, -2.2)", "assert subtract_complex(1000, 2000, 500, 1500) == complex(500, 500)", "assert subtract_complex(-1000, -2000, -500, -1500) == complex(-500, -500)", "assert subtract_complex(1e-10, 1e-10, 1e-10, 1e-10) == complex(0, 0)", "assert subtract_complex(1e10, 1e10, 1e10, 1e10) == complex(0, 0)", "assert subtract_complex(1e10, -1e10, -1e10, 1e10) == complex(2e10, -2e10)", "assert subtract_complex(-1e10, 1e10, 1e10, -1e10) == complex(-2e10, 2e10)", "assert subtract_complex(0.123456789, 0.987654321, 0.123456789, 0.987654321) == complex(0, 0)", "assert subtract_complex(0.123456789, 0.987654321, 0.987654321, 0.123456789) == complex(-0.864197532, 0.864197532)"], "challenge_test_list": []}
{"text": "Write a function to multiply two complex numbers.", "code": "def multiply_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 * cn2\n    return result", "task_id": "124_caa4f6d8-01fd-4415-aa66-1259e73cfdc8", "test_setup_code": "", "test_list": ["assert multiply_complex(1, 2, 3, 4) == complex(-5, 10)", "assert multiply_complex(0, 0, 0, 0) == complex(0, 0)", "assert multiply_complex(-1, -1, -1, -1) == complex(0, 2)", "assert multiply_complex(1, 0, 0, 1) == complex(0, 1)", "assert multiply_complex(1, 1, 1, 1) == complex(0, 2)", "assert multiply_complex(0.5, 0.5, 0.5, 0.5) == complex(0, 0.5)", "assert multiply_complex(1, 2, -3, -4) == complex(5, -10)", "assert multiply_complex(1.5, 2.5, 3.5, 4.5) == complex(-5.25, 13.5)", "assert multiply_complex(0, 1, 1, 0) == complex(0, 1)", "assert multiply_complex(2, 3, 4, 5) == complex(-7, 22)", "assert multiply_complex(-2, 3, 4, -5) == complex(7, 22)", "assert multiply_complex(1, -1, -1, 1) == complex(0, -2)", "assert multiply_complex(0, 1, 0, 1) == complex(-1, 0)", "assert multiply_complex(1, 0, 1, 0) == complex(1, 0)", "assert multiply_complex(-1, 0, 0, -1) == complex(0, 1)"], "challenge_test_list": []}
{"text": "Write a function to divide the first complex number by the second.", "code": "def divide_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 / cn2\n    return result", "task_id": "124_8f9c5b10-6e65-4dab-9bc4-4be5e707f8c2", "test_setup_code": "", "test_list": ["assert divide_complex(4, 2, 1, 1) == complex(3, -1)", "assert divide_complex(1, 1, 1, 1) == complex(1, 0)", "assert divide_complex(0, 0, 1, 1) == complex(0, 0)", "assert divide_complex(1, 0, 1, 0) == complex(1, 0)", "assert divide_complex(0, 1, 1, 0) == complex(0, 1)", "assert divide_complex(1, 1, 0, 1) == complex(1, -1)", "assert divide_complex(1, 1, 1, 0) == complex(1, 1)", "assert divide_complex(-1, -1, 1, 1) == complex(-1, 0)", "assert divide_complex(1, 1, -1, -1) == complex(-1, 0)", "assert divide_complex(1, -1, 1, 1) == complex(0, -1)", "assert divide_complex(1, 1, 1, -1) == complex(0, 1)", "assert divide_complex(3, 4, 1, 2) == complex(2.2, -0.4)", "assert divide_complex(1, 2, 3, 4) == complex(0.44, 0.08)", "assert divide_complex(5, 6, 7, 8) == complex(0.7307692307692307, 0.038461538461538464)", "assert divide_complex(1e-10, 1e-10, 1e-10, 1e-10) == complex(1, 0)"], "challenge_test_list": []}
{"text": "Write a function to get the polar coordinates of a complex number.", "code": "import cmath\ndef polar_coordinates(a: float, b: float) -> tuple:\n    cn = complex(a, b)\n    polar = cmath.polar(cn)\n    return polar", "task_id": "124_8145b03c-29f4-439e-929a-94773dab26b9", "test_setup_code": "", "test_list": ["assert polar_coordinates(3, 4) == (5.0, 0.9272952180016122)", "assert polar_coordinates(0, 0) == (0.0, 0.0)", "assert polar_coordinates(1, 0) == (1.0, 0.0)", "assert polar_coordinates(0, 1) == (1.0, 1.5707963267948966)", "assert polar_coordinates(-1, 0) == (1.0, 3.141592653589793)", "assert polar_coordinates(0, -1) == (1.0, -1.5707963267948966)", "assert polar_coordinates(-3, 4) == (5.0, 2.214297435588181)", "assert polar_coordinates(3, -4) == (5.0, -0.9272952180016122)", "assert polar_coordinates(-3, -4) == (5.0, -2.214297435588181)", "assert polar_coordinates(1.5, 2.5) == (2.9154759474226504, 1.0303768265243125)", "assert polar_coordinates(-1.5, 2.5) == (2.9154759474226504, 2.111215827065481)", "assert polar_coordinates(1.5, -2.5) == (2.9154759474226504, -1.0303768265243125)", "assert polar_coordinates(-1.5, -2.5) == (2.9154759474226504, -2.111215827065481)", "assert polar_coordinates(0.0001, 0.0001) == (0.0001414213562373095, 0.7853981633974483)", "assert polar_coordinates(123456789, 987654321) == (995340462.62581, 1.446441332248135)"], "challenge_test_list": []}
{"text": "Write a function to get the real part of a complex number.", "code": "def real_part(a: float, b: float) -> float:\n    cn = complex(a, b)\n    real = cn.real\n    return real", "task_id": "124_e8f62c20-fef3-40cb-8fb6-1d638f0df260", "test_setup_code": "", "test_list": ["assert real_part(3, 4) == 3.0", "assert real_part(0, 0) == 0.0", "assert real_part(-5, 2) == -5.0", "assert real_part(2.5, -3.6) == 2.5", "assert real_part(-1.1, -1.1) == -1.1", "assert real_part(1000000, 1000000) == 1000000.0", "assert real_part(-1000000, -1000000) == -1000000.0", "assert real_part(0.000001, 0.000001) == 0.000001", "assert real_part(-0.000001, -0.000001) == -0.000001", "assert real_part(123456789, 987654321) == 123456789.0", "assert real_part(-123456789, -987654321) == -123456789.0", "assert real_part(3.14159, 2.71828) == 3.14159", "assert real_part(-3.14159, -2.71828) == -3.14159", "assert real_part(1e-10, 1e-10) == 1e-10", "assert real_part(-1e-10, -1e-10) == -1e-10"], "challenge_test_list": []}
{"text": "Write a function to get the imaginary part of a complex number.", "code": "def imaginary_part(a: float, b: float) -> float:\n    cn = complex(a, b)\n    imaginary = cn.imag\n    return imaginary", "task_id": "124_39d9b614-069b-4ce1-b22f-6d2611a9769d", "test_setup_code": "", "test_list": ["assert imaginary_part(3, 4) == 4.0", "assert imaginary_part(0, 0) == 0.0", "assert imaginary_part(-5, -6) == -6.0", "assert imaginary_part(1.5, 2.5) == 2.5", "assert imaginary_part(0, 3.14) == 3.14", "assert imaginary_part(2.71, 0) == 0.0", "assert imaginary_part(-3.14, -2.71) == -2.71", "assert imaginary_part(1000000, 1000000) == 1000000.0", "assert imaginary_part(-1000000, -1000000) == -1000000.0", "assert imaginary_part(1e-10, 1e-10) == 1e-10", "assert imaginary_part(-1e-10, -1e-10) == -1e-10", "assert imaginary_part(123456789, 987654321) == 987654321.0", "assert imaginary_part(0.123456789, 0.987654321) == 0.987654321", "assert imaginary_part(-0.123456789, -0.987654321) == -0.987654321", "assert imaginary_part(1, -1) == -1.0"], "challenge_test_list": []}
{"text": "Write a function to convert a complex number to its string representation.", "code": "def complex_to_string(a: float, b: float) -> str:\n    cn = complex(a, b)\n    return str(cn)", "task_id": "124_2948116b-e6e8-4588-b967-710b563ab327", "test_setup_code": "", "test_list": ["assert complex_to_string(1, 1) == '(1+1j)'", "assert complex_to_string(0, 0) == '0j'", "assert complex_to_string(-1, -1) == '(-1-1j)'", "assert complex_to_string(1.5, -2.5) == '(1.5-2.5j)'", "assert complex_to_string(-3.4, 4.5) == '(-3.4+4.5j)'", "assert complex_to_string(0, 1) == '1j'", "assert complex_to_string(1, 0) == '(1+0j)'", "assert complex_to_string(0, -1) == '-1j'", "assert complex_to_string(-1, 0) == '(-1+0j)'", "assert complex_to_string(123456789, 987654321) == '(123456789+987654321j)'", "assert complex_to_string(-123456789, -987654321) == '(-123456789-987654321j)'", "assert complex_to_string(1e-10, 1e-10) == '(1e-10+1e-10j)'", "assert complex_to_string(-1e-10, -1e-10) == '(-1e-10-1e-10j)'", "assert complex_to_string(3.14159, 2.71828) == '(3.14159+2.71828j)'", "assert complex_to_string(-3.14159, -2.71828) == '(-3.14159-2.71828j)'"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th prime number.", "code": "def findNthPrime(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        for i in primes:\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return primes[-1]", "task_id": "122_240ed24d-7233-4020-9c70-4696bc71dfdc", "test_setup_code": "", "test_list": ["assert findNthPrime(1) == 2", "assert findNthPrime(2) == 3", "assert findNthPrime(3) == 5", "assert findNthPrime(4) == 7", "assert findNthPrime(5) == 11", "assert findNthPrime(6) == 13", "assert findNthPrime(10) == 29", "assert findNthPrime(20) == 71", "assert findNthPrime(50) == 229", "assert findNthPrime(100) == 541", "assert findNthPrime(200) == 1223", "assert findNthPrime(500) == 3571", "assert findNthPrime(1000) == 7919", "assert findNthPrime(1500) == 12799", "assert findNthPrime(2000) == 17389"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Fibonacci number.", "code": "def nthFibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "122_a159e497-38f1-4282-918e-2917f46fe76c", "test_setup_code": "", "test_list": ["assert nthFibonacci(0) == 0", "assert nthFibonacci(1) == 1", "assert nthFibonacci(2) == 1", "assert nthFibonacci(3) == 2", "assert nthFibonacci(4) == 3", "assert nthFibonacci(5) == 5", "assert nthFibonacci(6) == 8", "assert nthFibonacci(7) == 13", "assert nthFibonacci(8) == 21", "assert nthFibonacci(9) == 34", "assert nthFibonacci(10) == 55", "assert nthFibonacci(15) == 610", "assert nthFibonacci(20) == 6765", "assert nthFibonacci(30) == 832040", "assert nthFibonacci(50) == 12586269025"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th perfect square.", "code": "def nthPerfectSquare(n):\n    return n * n", "task_id": "122_ac510939-f73b-4067-a45b-f4204fa165bc", "test_setup_code": "", "test_list": ["assert nthPerfectSquare(1) == 1", "assert nthPerfectSquare(2) == 4", "assert nthPerfectSquare(3) == 9", "assert nthPerfectSquare(4) == 16", "assert nthPerfectSquare(5) == 25", "assert nthPerfectSquare(10) == 100", "assert nthPerfectSquare(0) == 0", "assert nthPerfectSquare(15) == 225", "assert nthPerfectSquare(20) == 400", "assert nthPerfectSquare(50) == 2500", "assert nthPerfectSquare(100) == 10000", "assert nthPerfectSquare(999) == 998001", "assert nthPerfectSquare(1000) == 1000000", "assert nthPerfectSquare(12345) == 152399025", "assert nthPerfectSquare(2147483647) == 4611686014132420609"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th triangular number.", "code": "def nthTriangularNumber(n):\n    return n * (n + 1) // 2", "task_id": "122_1d45f2e9-af11-4772-b212-d645494f68b5", "test_setup_code": "", "test_list": ["assert nthTriangularNumber(1) == 1", "assert nthTriangularNumber(2) == 3", "assert nthTriangularNumber(3) == 6", "assert nthTriangularNumber(4) == 10", "assert nthTriangularNumber(5) == 15", "assert nthTriangularNumber(10) == 55", "assert nthTriangularNumber(0) == 0", "assert nthTriangularNumber(20) == 210", "assert nthTriangularNumber(50) == 1275", "assert nthTriangularNumber(100) == 5050", "assert nthTriangularNumber(500) == 125250", "assert nthTriangularNumber(1000) == 500500", "assert nthTriangularNumber(10000) == 50005000", "assert nthTriangularNumber(12345) == 76205685", "assert nthTriangularNumber(99999) == 4999950000"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Catalan number.", "code": "def nthCatalanNumber(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = sum(catalan[j] * catalan[i - 1 - j] for j in range(i))\n    return catalan[n]", "task_id": "122_46218af8-0cce-47f5-8b1d-7003acb8cf8f", "test_setup_code": "", "test_list": ["assert nthCatalanNumber(0) == 1", "assert nthCatalanNumber(1) == 1", "assert nthCatalanNumber(2) == 2", "assert nthCatalanNumber(3) == 5", "assert nthCatalanNumber(4) == 14", "assert nthCatalanNumber(5) == 42", "assert nthCatalanNumber(6) == 132", "assert nthCatalanNumber(7) == 429", "assert nthCatalanNumber(8) == 1430", "assert nthCatalanNumber(9) == 4862", "assert nthCatalanNumber(10) == 16796", "assert nthCatalanNumber(11) == 58786", "assert nthCatalanNumber(12) == 208012", "assert nthCatalanNumber(13) == 742900", "assert nthCatalanNumber(14) == 2674440"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th pentagonal number.", "code": "def nthPentagonalNumber(n):\n    return n * (3 * n - 1) // 2", "task_id": "122_00361da4-f744-43cc-b271-8bfbf0b4a2d1", "test_setup_code": "", "test_list": ["assert nthPentagonalNumber(1) == 1", "assert nthPentagonalNumber(2) == 5", "assert nthPentagonalNumber(3) == 12", "assert nthPentagonalNumber(4) == 22", "assert nthPentagonalNumber(5) == 35", "assert nthPentagonalNumber(6) == 51", "assert nthPentagonalNumber(7) == 70", "assert nthPentagonalNumber(8) == 92", "assert nthPentagonalNumber(9) == 117", "assert nthPentagonalNumber(10) == 145", "assert nthPentagonalNumber(0) == 0", "assert nthPentagonalNumber(-1) == -2", "assert nthPentagonalNumber(100) == 14950", "assert nthPentagonalNumber(50) == 3725", "assert nthPentagonalNumber(20) == 590"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th harmonic number.", "code": "def nthHarmonicNumber(n):\n    harmonic = 0.0\n    for i in range(1, n + 1):\n        harmonic += 1 / i\n    return harmonic", "task_id": "122_e29fb6f0-005b-47c4-b6b9-41642a40a8f0", "test_setup_code": "", "test_list": ["assert nthHarmonicNumber(1) == 1.0", "assert nthHarmonicNumber(2) == 1.5", "assert nthHarmonicNumber(3) == 1.8333333333333333", "assert nthHarmonicNumber(4) == 2.083333333333333", "assert nthHarmonicNumber(5) == 2.283333333333333", "assert nthHarmonicNumber(6) == 2.45", "assert nthHarmonicNumber(7) == 2.5928571428571425", "assert nthHarmonicNumber(8) == 2.7178571428571425", "assert nthHarmonicNumber(9) == 2.828968253968254", "assert nthHarmonicNumber(10) == 2.928968253968254", "assert nthHarmonicNumber(15) == 3.3182289932289937", "assert nthHarmonicNumber(20) == 3.597739657143682", "assert nthHarmonicNumber(50) == 4.499205338329425", "assert nthHarmonicNumber(100) == 5.187377517639621", "assert nthHarmonicNumber(0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Lucas number.", "code": "def nthLucasNumber(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "122_f0181628-7438-455d-ab54-2dcfadb81889", "test_setup_code": "", "test_list": ["assert nthLucasNumber(0) == 2", "assert nthLucasNumber(1) == 1", "assert nthLucasNumber(2) == 3", "assert nthLucasNumber(3) == 4", "assert nthLucasNumber(4) == 7", "assert nthLucasNumber(5) == 11", "assert nthLucasNumber(6) == 18", "assert nthLucasNumber(7) == 29", "assert nthLucasNumber(8) == 47", "assert nthLucasNumber(9) == 76", "assert nthLucasNumber(10) == 123", "assert nthLucasNumber(20) == 15127", "assert nthLucasNumber(30) == 1860498", "assert nthLucasNumber(50) == 28143753123", "assert nthLucasNumber(100) == 792070839848372253127"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th square pyramidal number.", "code": "def nthSquarePyramidalNumber(n):\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "122_8c2b6efc-b13f-4826-b5c5-c37c09d5680a", "test_setup_code": "", "test_list": ["assert nthSquarePyramidalNumber(1) == 1", "assert nthSquarePyramidalNumber(2) == 5", "assert nthSquarePyramidalNumber(3) == 14", "assert nthSquarePyramidalNumber(4) == 30", "assert nthSquarePyramidalNumber(5) == 55", "assert nthSquarePyramidalNumber(10) == 385", "assert nthSquarePyramidalNumber(0) == 0", "assert nthSquarePyramidalNumber(6) == 91", "assert nthSquarePyramidalNumber(7) == 140", "assert nthSquarePyramidalNumber(8) == 204", "assert nthSquarePyramidalNumber(9) == 285", "assert nthSquarePyramidalNumber(15) == 1240", "assert nthSquarePyramidalNumber(20) == 2870", "assert nthSquarePyramidalNumber(50) == 42925", "assert nthSquarePyramidalNumber(100) == 338350"], "challenge_test_list": []}
{"text": "Write a python function to find the product of common divisors of two given numbers.", "code": "def product_of_common_divisors(a, b):\n    product = 1\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            product *= i\n    return product", "task_id": "126_498affe9-6e48-4f02-b4be-7d623bee529c", "test_setup_code": "", "test_list": ["assert product_of_common_divisors(12, 18) == 36", "assert product_of_common_divisors(7, 13) == 1", "assert product_of_common_divisors(100, 50) == 50", "assert product_of_common_divisors(15, 25) == 5", "assert product_of_common_divisors(21, 14) == 21", "assert product_of_common_divisors(1, 1) == 1", "assert product_of_common_divisors(0, 10) == 0", "assert product_of_common_divisors(10, 0) == 0", "assert product_of_common_divisors(0, 0) == 0", "assert product_of_common_divisors(100, 200) == 100", "assert product_of_common_divisors(17, 34) == 17", "assert product_of_common_divisors(50, 75) == 25", "assert product_of_common_divisors(6, 9) == 3", "assert product_of_common_divisors(81, 27) == 27", "assert product_of_common_divisors(144, 12) == 12"], "challenge_test_list": []}
{"text": "Write a python function to count the number of common divisors of two given numbers.", "code": "def count_common_divisors(a, b):\n    count = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n    return count", "task_id": "126_52de9821-6076-4275-a82b-662090e7ae05", "test_setup_code": "", "test_list": ["assert count_common_divisors(10, 15) == 2", "assert count_common_divisors(12, 18) == 4", "assert count_common_divisors(100, 200) == 9", "assert count_common_divisors(7, 13) == 1", "assert count_common_divisors(1, 1) == 1", "assert count_common_divisors(0, 0) == 0", "assert count_common_divisors(0, 10) == 0", "assert count_common_divisors(10, 0) == 0", "assert count_common_divisors(36, 48) == 6", "assert count_common_divisors(101, 103) == 1", "assert count_common_divisors(50, 75) == 3", "assert count_common_divisors(21, 28) == 2", "assert count_common_divisors(60, 90) == 6", "assert count_common_divisors(17, 34) == 2", "assert count_common_divisors(1000, 2500) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "126_abe76710-0277-4b43-a385-20c191cbcbb4", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(56, 98) == 14", "assert gcd(20, 30) == 10", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(1, 1) == 1", "assert gcd(123456, 789012) == 12", "assert gcd(1000000000, 500000000) == 500000000", "assert gcd(17, 19) == 1", "assert gcd(25, 100) == 25", "assert gcd(81, 27) == 27", "assert gcd(7, 49) == 7", "assert gcd(2147483647, 2147483646) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)", "task_id": "126_d7248d0a-02ce-4385-8a85-3971fd716e7d", "test_setup_code": "", "test_list": ["assert lcm(1, 1) == 1", "assert lcm(2, 3) == 6", "assert lcm(4, 5) == 20", "assert lcm(6, 8) == 24", "assert lcm(7, 3) == 21", "assert lcm(10, 15) == 30", "assert lcm(9, 12) == 36", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(13, 17) == 221", "assert lcm(21, 6) == 42", "assert lcm(100, 25) == 100", "assert lcm(14, 28) == 28", "assert lcm(18, 24) == 72"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique common divisors of two given numbers.", "code": "def sum_of_unique_common_divisors(a, b):\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)", "task_id": "126_f16865e2-382d-4c60-a7e1-bb81fd3d55e4", "test_setup_code": "", "test_list": ["assert sum_of_unique_common_divisors(12, 18) == 12", "assert sum_of_unique_common_divisors(100, 200) == 217", "assert sum_of_unique_common_divisors(7, 13) == 1", "assert sum_of_unique_common_divisors(1, 1) == 1", "assert sum_of_unique_common_divisors(0, 10) == 0", "assert sum_of_unique_common_divisors(10, 0) == 0", "assert sum_of_unique_common_divisors(0, 0) == 0", "assert sum_of_unique_common_divisors(15, 45) == 16", "assert sum_of_unique_common_divisors(21, 14) == 7", "assert sum_of_unique_common_divisors(50, 75) == 15", "assert sum_of_unique_common_divisors(9, 27) == 10", "assert sum_of_unique_common_divisors(8, 32) == 15", "assert sum_of_unique_common_divisors(49, 77) == 8", "assert sum_of_unique_common_divisors(1000, 2000) == 217", "assert sum_of_unique_common_divisors(81, 243) == 41"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime common divisors of two given numbers.", "code": "def sum_of_prime_common_divisors(a, b):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and is_prime(i):\n            sum += i\n    return sum", "task_id": "126_34c4cbc7-ec90-451b-a0fe-0105ef2d91b2", "test_setup_code": "", "test_list": ["assert sum_of_prime_common_divisors(12, 18) == 5", "assert sum_of_prime_common_divisors(7, 14) == 7", "assert sum_of_prime_common_divisors(15, 25) == 5", "assert sum_of_prime_common_divisors(11, 13) == 0", "assert sum_of_prime_common_divisors(30, 42) == 5", "assert sum_of_prime_common_divisors(1, 1) == 0", "assert sum_of_prime_common_divisors(2, 3) == 0", "assert sum_of_prime_common_divisors(17, 34) == 17", "assert sum_of_prime_common_divisors(60, 90) == 5", "assert sum_of_prime_common_divisors(100, 200) == 5", "assert sum_of_prime_common_divisors(2, 4) == 2", "assert sum_of_prime_common_divisors(8, 32) == 2", "assert sum_of_prime_common_divisors(9, 27) == 3", "assert sum_of_prime_common_divisors(50, 75) == 5", "assert sum_of_prime_common_divisors(49, 77) == 7"], "challenge_test_list": []}
{"text": "Write a python function to return a list of common divisors of two given numbers.", "code": "def common_divisors_list(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return common_divisors", "task_id": "126_7d64b02e-9f25-4499-8a45-6969691ce086", "test_setup_code": "", "test_list": ["assert common_divisors_list(10, 15) == [1, 5]", "assert common_divisors_list(12, 18) == [1, 2, 3, 6]", "assert common_divisors_list(7, 13) == [1]", "assert common_divisors_list(100, 200) == [1, 2, 4, 5, 10, 20, 25, 50, 100]", "assert common_divisors_list(1, 1) == [1]", "assert common_divisors_list(0, 10) == []", "assert common_divisors_list(10, 0) == []", "assert common_divisors_list(0, 0) == []", "assert common_divisors_list(36, 60) == [1, 2, 3, 4, 6, 12]", "assert common_divisors_list(17, 19) == [1]", "assert common_divisors_list(50, 75) == [1, 5, 25]", "assert common_divisors_list(81, 27) == [1, 3, 9, 27]", "assert common_divisors_list(14, 49) == [1, 7]", "assert common_divisors_list(1000, 500) == [1, 2, 4, 5, 10, 20, 25, 50, 100, 125, 250, 500]", "assert common_divisors_list(21, 14) == [1, 7]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of common divisors of two given numbers.", "code": "def sum_of_squares_of_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i**2\n    return sum", "task_id": "126_5c3a40f2-bc4b-4850-8f15-634ed7c78d87", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_common_divisors(10, 15) == 1", "assert sum_of_squares_of_common_divisors(12, 18) == 10", "assert sum_of_squares_of_common_divisors(7, 13) == 1", "assert sum_of_squares_of_common_divisors(100, 200) == 101", "assert sum_of_squares_of_common_divisors(1, 1) == 1", "assert sum_of_squares_of_common_divisors(0, 0) == 0", "assert sum_of_squares_of_common_divisors(6, 9) == 1", "assert sum_of_squares_of_common_divisors(24, 36) == 85", "assert sum_of_squares_of_common_divisors(48, 64) == 65", "assert sum_of_squares_of_common_divisors(5, 25) == 26", "assert sum_of_squares_of_common_divisors(50, 75) == 26", "assert sum_of_squares_of_common_divisors(21, 28) == 1", "assert sum_of_squares_of_common_divisors(14, 35) == 10", "assert sum_of_squares_of_common_divisors(60, 90) == 91", "assert sum_of_squares_of_common_divisors(11, 22) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd common divisors of two given numbers.", "code": "def sum_of_odd_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and i % 2 != 0:\n            sum += i\n    return sum", "task_id": "126_d4ae2c1e-5b42-4792-a659-c3c9c0ea63f2", "test_setup_code": "", "test_list": ["assert sum_of_odd_common_divisors(15, 25) == 10", "assert sum_of_odd_common_divisors(9, 27) == 9", "assert sum_of_odd_common_divisors(12, 18) == 1", "assert sum_of_odd_common_divisors(7, 14) == 7", "assert sum_of_odd_common_divisors(1, 1) == 1", "assert sum_of_odd_common_divisors(2, 4) == 0", "assert sum_of_odd_common_divisors(100, 200) == 1", "assert sum_of_odd_common_divisors(21, 35) == 7", "assert sum_of_odd_common_divisors(45, 60) == 1", "assert sum_of_odd_common_divisors(81, 243) == 81", "assert sum_of_odd_common_divisors(50, 75) == 25", "assert sum_of_odd_common_divisors(13, 26) == 13", "assert sum_of_odd_common_divisors(0, 0) == 0", "assert sum_of_odd_common_divisors(1, 1000000) == 1", "assert sum_of_odd_common_divisors(1000000, 1000000) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even common divisors of two given numbers.", "code": "def sum_of_even_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "task_id": "126_21eb0fa8-3399-4a2e-a763-83629bdfc169", "test_setup_code": "", "test_list": ["assert sum_of_even_common_divisors(12, 18) == 6", "assert sum_of_even_common_divisors(10, 15) == 0", "assert sum_of_even_common_divisors(8, 12) == 4", "assert sum_of_even_common_divisors(100, 200) == 106", "assert sum_of_even_common_divisors(1, 1) == 0", "assert sum_of_even_common_divisors(2, 2) == 2", "assert sum_of_even_common_divisors(0, 10) == 0", "assert sum_of_even_common_divisors(10, 0) == 0", "assert sum_of_even_common_divisors(0, 0) == 0", "assert sum_of_even_common_divisors(50, 75) == 0", "assert sum_of_even_common_divisors(24, 36) == 12", "assert sum_of_even_common_divisors(48, 60) == 24", "assert sum_of_even_common_divisors(7, 14) == 0", "assert sum_of_even_common_divisors(14, 28) == 14", "assert sum_of_even_common_divisors(18, 24) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of two integers without using the % operator in python.", "code": "def modulus_int(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    return x - (x // y) * y", "task_id": "127_aafcf6c6-20c1-4148-bfe6-7ccb394ce743", "test_setup_code": "", "test_list": ["assert modulus_int(10, 3) == 1", "assert modulus_int(10, 2) == 0", "assert modulus_int(10, 5) == 0", "assert modulus_int(10, 7) == 3", "assert modulus_int(10, 1) == 0", "assert modulus_int(0, 3) == 0", "assert modulus_int(3, 3) == 0", "assert modulus_int(3, 10) == 3", "assert modulus_int(10, -3) == 1", "assert modulus_int(-10, 3) == -1", "assert modulus_int(-10, -3) == -1", "assert modulus_int(10, 10) == 0", "assert modulus_int(10, 11) == 10", "assert modulus_int(100, 99) == 1", "assert modulus_int(123456, 123) == 6"], "challenge_test_list": []}
{"text": "Write a function to calculate the power of an integer raised to another integer without using the ** operator in python.", "code": "def power_int(x, y):\n    if y == 0:\n        return 1\n    elif y < 0:\n        return 1 / power_int(x, -y)\n    elif y % 2 == 0:\n        half_power = power_int(x, y // 2)\n        return half_power * half_power\n    else:\n        return x * power_int(x, y - 1)", "task_id": "127_a2898279-3e5d-467c-976d-23ea3a6f4969", "test_setup_code": "", "test_list": ["assert power_int(2, 3) == 8", "assert power_int(5, 0) == 1", "assert power_int(7, 1) == 7", "assert power_int(2, -2) == 0.25", "assert power_int(3, 4) == 81", "assert power_int(10, 2) == 100", "assert power_int(1, 100) == 1", "assert power_int(0, 5) == 0", "assert power_int(0, 0) == 1", "assert power_int(-2, 3) == -8", "assert power_int(-2, 4) == 16", "assert power_int(2, 10) == 1024", "assert power_int(2, -3) == 0.125", "assert power_int(3, 0) == 1", "assert power_int(4, 3) == 64"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two integers without using the gcd function from the math module.", "code": "def gcd_int(x, y):\n    while y:\n        x, y = y, x % y\n    return x", "task_id": "127_5aefed5c-22b3-40b9-a2d4-7294655cd1fa", "test_setup_code": "", "test_list": ["assert gcd_int(48, 18) == 6", "assert gcd_int(101, 10) == 1", "assert gcd_int(0, 5) == 5", "assert gcd_int(5, 0) == 5", "assert gcd_int(0, 0) == 0", "assert gcd_int(17, 13) == 1", "assert gcd_int(100, 25) == 25", "assert gcd_int(81, 27) == 27", "assert gcd_int(56, 98) == 14", "assert gcd_int(123456, 789012) == 12", "assert gcd_int(1, 1) == 1", "assert gcd_int(7, 3) == 1", "assert gcd_int(270, 192) == 6", "assert gcd_int(144, 12) == 12", "assert gcd_int(999, 27) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two integers without using the lcm function from the math module.", "code": "def lcm_int(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(x * y) // gcd(x, y)", "task_id": "127_7eed50ae-57b5-48bd-b9e0-7c6be9d54f37", "test_setup_code": "", "test_list": ["assert lcm_int(4, 5) == 20", "assert lcm_int(0, 5) == 0", "assert lcm_int(5, 0) == 0", "assert lcm_int(7, 3) == 21", "assert lcm_int(21, 6) == 42", "assert lcm_int(8, 12) == 24", "assert lcm_int(1, 1) == 1", "assert lcm_int(100, 25) == 100", "assert lcm_int(13, 17) == 221", "assert lcm_int(9, 6) == 18", "assert lcm_int(15, 20) == 60", "assert lcm_int(1000000, 1) == 1000000", "assert lcm_int(14, 28) == 28", "assert lcm_int(35, 10) == 70", "assert lcm_int(123456, 789012) == 8117355456"], "challenge_test_list": []}
{"text": "Write a function to negate an integer without using the - operator in python.", "code": "def negate_int(x):\n    return ~x + 1", "task_id": "127_441e1633-8b1c-45b7-9b92-5c3efd5ba10e", "test_setup_code": "", "test_list": ["assert negate_int(0) == 0", "assert negate_int(1) == -1", "assert negate_int(-1) == 1", "assert negate_int(123) == -123", "assert negate_int(-123) == 123", "assert negate_int(2147483647) == -2147483647", "assert negate_int(-2147483647) == 2147483647", "assert negate_int(1000000) == -1000000", "assert negate_int(-1000000) == 1000000", "assert negate_int(999999) == -999999", "assert negate_int(-999999) == 999999", "assert negate_int(42) == -42", "assert negate_int(-42) == 42", "assert negate_int(32767) == -32767", "assert negate_int(-32767) == 32767"], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of an integer without using the abs function in python.", "code": "def abs_int(x):\n    return x if x >= 0 else negate_int(x)", "task_id": "127_9e46e099-48b5-455c-97de-e8113439a5ac", "test_setup_code": "", "test_list": ["assert abs_int(0) == 0", "assert abs_int(1) == 1", "assert abs_int(-1) == 1", "assert abs_int(123) == 123", "assert abs_int(-123) == 123", "assert abs_int(1000) == 1000", "assert abs_int(-1000) == 1000", "assert abs_int(999999) == 999999", "assert abs_int(-999999) == 999999", "assert abs_int(2147483647) == 2147483647", "assert abs_int(-2147483648) == 2147483648", "assert abs_int(50) == 50", "assert abs_int(-50) == 50", "assert abs_int(32767) == 32767", "assert abs_int(-32768) == 32768"], "challenge_test_list": []}
{"text": "Write a function to check if an integer is even without using the % operator in python.", "code": "def is_even(x):\n    return (x & 1) == 0", "task_id": "127_9818ecb7-176e-45c8-94fb-5338db4d05c4", "test_setup_code": "", "test_list": ["assert is_even(0) == True", "assert is_even(1) == False", "assert is_even(2) == True", "assert is_even(-1) == False", "assert is_even(-2) == True", "assert is_even(999999) == False", "assert is_even(1000000) == True", "assert is_even(2147483647) == False", "assert is_even(2147483646) == True", "assert is_even(-2147483648) == True", "assert is_even(-2147483647) == False", "assert is_even(123456789) == False", "assert is_even(123456788) == True", "assert is_even(42) == True", "assert is_even(43) == False"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that start with a given character from a given list of words.", "code": "def words_starting_with(char: str, words: list) -> list:\n    result = []\n    for word in words:\n        if word.startswith(char):\n            result.append(word)\n    return result", "task_id": "128_63ff4e1e-5373-47f4-b859-580a2c2d527f", "test_setup_code": "", "test_list": ["assert words_starting_with('a', ['apple', 'banana', 'apricot', 'cherry']) == ['apple', 'apricot']", "assert words_starting_with('b', ['ball', 'bat', 'apple', 'banana']) == ['ball', 'bat', 'banana']", "assert words_starting_with('c', ['cat', 'dog', 'camel', 'cow']) == ['cat', 'camel', 'cow']", "assert words_starting_with('d', ['dove', 'deer', 'dog', 'duck']) == ['dove', 'deer', 'dog', 'duck']", "assert words_starting_with('e', ['elephant', 'eagle', 'ear', 'eye']) == ['elephant', 'eagle', 'ear', 'eye']", "assert words_starting_with('f', ['fish', 'frog', 'fox', 'flamingo']) == ['fish', 'frog', 'fox', 'flamingo']", "assert words_starting_with('g', ['goat', 'giraffe', 'goose', 'gorilla']) == ['goat', 'giraffe', 'goose', 'gorilla']", "assert words_starting_with('h', ['horse', 'hen', 'hippo', 'hamster']) == ['horse', 'hen', 'hippo', 'hamster']", "assert words_starting_with('i', ['iguana', 'ibis', 'ice', 'iron']) == ['iguana', 'ibis', 'ice', 'iron']", "assert words_starting_with('j', ['jaguar', 'jellyfish', 'jackal', 'jaguar']) == ['jaguar', 'jellyfish', 'jackal', 'jaguar']", "assert words_starting_with('k', ['kangaroo', 'kiwi', 'koala', 'kite']) == ['kangaroo', 'kiwi', 'koala', 'kite']", "assert words_starting_with('l', ['lion', 'leopard', 'lemur', 'llama']) == ['lion', 'leopard', 'lemur', 'llama']", "assert words_starting_with('m', ['monkey', 'mouse', 'moose', 'mule']) == ['monkey', 'mouse', 'moose', 'mule']", "assert words_starting_with('z', ['zebra', 'zoo', 'zephyr', 'zodiac']) == ['zebra', 'zoo', 'zephyr', 'zodiac']", "assert words_starting_with('a', ['banana', 'cherry', 'date', 'fig']) == []"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain a given substring from a given list of words.", "code": "def words_containing_substring(substring: str, words: list) -> list:\n    result = []\n    for word in words:\n        if substring in word:\n            result.append(word)\n    return result", "task_id": "128_86a9c9ba-c148-4b12-a2a5-70263192b3fc", "test_setup_code": "", "test_list": ["assert words_containing_substring('test', ['testing', 'contest', 'best', 'taste']) == ['testing', 'contest']", "assert words_containing_substring('a', ['apple', 'banana', 'grape', 'orange']) == ['apple', 'banana', 'grape', 'orange']", "assert words_containing_substring('z', ['apple', 'banana', 'grape', 'orange']) == []", "assert words_containing_substring('', ['apple', 'banana', 'grape', 'orange']) == ['apple', 'banana', 'grape', 'orange']", "assert words_containing_substring('app', ['apple', 'application', 'happy', 'grape']) == ['apple', 'application']", "assert words_containing_substring('gr', ['grape', 'great', 'grip', 'grow']) == ['grape', 'great', 'grip', 'grow']", "assert words_containing_substring('test', ['test', 'testing', 'attest', 'protest']) == ['test', 'testing', 'attest', 'protest']", "assert words_containing_substring('test', ['apple', 'banana', 'grape', 'orange']) == []", "assert words_containing_substring('e', ['elephant', 'eagle', 'ear', 'eye']) == ['elephant', 'eagle', 'ear', 'eye']", "assert words_containing_substring('xy', ['xylophone', 'oxygen', 'proxy', 'syntax']) == ['xylophone', 'proxy', 'syntax']", "assert words_containing_substring('na', ['banana', 'ananas', 'canary', 'narrative']) == ['banana', 'ananas', 'canary', 'narrative']", "assert words_containing_substring('oo', ['book', 'look', 'cook', 'hook']) == ['book', 'look', 'cook', 'hook']", "assert words_containing_substring('oo', ['apple', 'banana', 'grape', 'orange']) == []", "assert words_containing_substring('a', ['a', 'aa', 'aaa', 'aaaa']) == ['a', 'aa', 'aaa', 'aaaa']", "assert words_containing_substring('xyz', ['xyz', 'abcxyz', 'xyzabc', 'abc']) == ['xyz', 'abcxyz', 'xyzabc']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one vowel from a given list of words.", "code": "def words_with_vowels(words: list) -> list:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for word in words:\n        if any(char in vowels for char in word):\n            result.append(word)\n    return result", "task_id": "128_83e23637-c427-4374-85f0-0a043a0339f3", "test_setup_code": "", "test_list": ["assert words_with_vowels(['apple', 'sky', 'orange', 'fly']) == ['apple', 'orange']", "assert words_with_vowels(['sky', 'fly', 'try']) == []", "assert words_with_vowels(['']) == []", "assert words_with_vowels(['a', 'e', 'i', 'o', 'u']) == ['a', 'e', 'i', 'o', 'u']", "assert words_with_vowels(['A', 'E', 'I', 'O', 'U']) == ['A', 'E', 'I', 'O', 'U']", "assert words_with_vowels(['b', 'c', 'd', 'f', 'g']) == []", "assert words_with_vowels(['apple', 'banana', 'cherry']) == ['apple', 'banana', 'cherry']", "assert words_with_vowels(['APPLE', 'BANANA', 'CHERRY']) == ['APPLE', 'BANANA', 'CHERRY']", "assert words_with_vowels(['123', '456', '789']) == []", "assert words_with_vowels(['123a', '456e', '789i']) == ['123a', '456e', '789i']", "assert words_with_vowels(['a1b2c3', 'd4e5f6', 'g7h8i9']) == ['a1b2c3', 'd4e5f6', 'g7h8i9']", "assert words_with_vowels(['apple', 'sky', 'orange', 'fly', 'umbrella']) == ['apple', 'orange', 'umbrella']", "assert words_with_vowels(['xyz', 'pqr', 'lmn']) == []", "assert words_with_vowels(['aeiou', 'AEIOU', 'xyz']) == ['aeiou', 'AEIOU']", "assert words_with_vowels(['hello', 'world', 'python', 'code']) == ['hello', 'world', 'code']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have an even number of characters from a given list of words.", "code": "def words_with_even_length(words: list) -> list:\n    result = []\n    for word in words:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return result", "task_id": "128_4d3efa22-eb78-48a4-9514-c87ce0d3399e", "test_setup_code": "", "test_list": ["assert words_with_even_length(['hello', 'world', 'python', 'code']) == ['code']", "assert words_with_even_length(['even', 'odd', 'evening', 'morning']) == ['even', 'evening']", "assert words_with_even_length(['a', 'ab', 'abc', 'abcd']) == ['ab', 'abcd']", "assert words_with_even_length(['']) == ['']", "assert words_with_even_length(['single']) == []", "assert words_with_even_length(['double', 'triple', 'quadruple', 'quintuple']) == ['double', 'quadruple']", "assert words_with_even_length(['one', 'two', 'three', 'four']) == ['four']", "assert words_with_even_length(['six', 'seven', 'eight', 'nine', 'ten']) == ['eight', 'ten']", "assert words_with_even_length(['', 'a', 'bb', 'ccc', 'dddd']) == ['', 'bb', 'dddd']", "assert words_with_even_length(['apple', 'banana', 'cherry', 'date']) == ['banana', 'date']", "assert words_with_even_length(['red', 'blue', 'green', 'yellow']) == ['blue', 'green']", "assert words_with_even_length(['cat', 'dog', 'fish', 'bird']) == ['fish']", "assert words_with_even_length(['this', 'is', 'a', 'test']) == ['this', 'test']", "assert words_with_even_length(['short', 'longer', 'longest', 'tiny']) == ['longer', 'tiny']", "assert words_with_even_length(['alpha', 'beta', 'gamma', 'delta', 'epsilon']) == ['delta']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have an odd number of characters from a given list of words.", "code": "def words_with_odd_length(words: list) -> list:\n    result = []\n    for word in words:\n        if len(word) % 2 != 0:\n            result.append(word)\n    return result", "task_id": "128_52e71ce7-9fe8-45a6-8f5e-7eef0db74a8e", "test_setup_code": "", "test_list": ["assert words_with_odd_length(['apple', 'banana', 'cherry']) == ['apple', 'banana']", "assert words_with_odd_length(['dog', 'cat', 'fish']) == ['dog', 'cat']", "assert words_with_odd_length(['one', 'two', 'three', 'four']) == ['one', 'three']", "assert words_with_odd_length(['']) == []", "assert words_with_odd_length(['a', 'bb', 'ccc', 'dddd']) == ['a', 'ccc']", "assert words_with_odd_length(['even', 'odd', 'evenodd']) == ['odd', 'evenodd']", "assert words_with_odd_length([]) == []", "assert words_with_odd_length(['12345', '1234', '123']) == ['12345', '123']", "assert words_with_odd_length(['short', 'longer', 'longest']) == ['short', 'longest']", "assert words_with_odd_length(['spaces ', ' tabs\t', 'newlines\n']) == ['spaces ', ' tabs\t', 'newlines\n']", "assert words_with_odd_length(['a'*100, 'b'*101]) == ['b'*101]", "assert words_with_odd_length(['palindrome', 'racecar', 'level']) == ['palindrome', 'racecar', 'level']", "assert words_with_odd_length(['UPPERCASE', 'lowercase', 'MixedCase']) == ['UPPERCASE', 'MixedCase']", "assert words_with_odd_length(['123', '4567', '89']) == ['123', '4567']", "assert words_with_odd_length(['!@#$', '%^&*', '()_+']) == ['!@#$', '()_+']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one uppercase letter from a given list of words.", "code": "def words_with_uppercase(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.isupper() for char in word):\n            result.append(word)\n    return result", "task_id": "128_23e5b3be-6816-4dff-8ca2-35f32a802966", "test_setup_code": "", "test_list": ["assert words_with_uppercase(['Hello', 'world', 'Python', 'rocks']) == ['Hello', 'Python']", "assert words_with_uppercase(['ALL', 'lowercase', 'WORDS', 'here']) == ['ALL', 'WORDS']", "assert words_with_uppercase(['no', 'uppercase', 'letters']) == []", "assert words_with_uppercase(['MixedCASE', 'words', 'ARE', 'fun']) == ['MixedCASE', 'ARE']", "assert words_with_uppercase(['']) == []", "assert words_with_uppercase(['a', 'B', 'c', 'D']) == ['B', 'D']", "assert words_with_uppercase(['123', 'abc', 'ABC', '123ABC']) == ['ABC', '123ABC']", "assert words_with_uppercase(['UPPER', 'lower', 'MiXeD']) == ['UPPER', 'MiXeD']", "assert words_with_uppercase(['NoUppercaseHere', 'ButHereIsOne']) == ['NoUppercaseHere', 'ButHereIsOne']", "assert words_with_uppercase(['UPPERCASE', 'lowercase', '1234', '']) == ['UPPERCASE']", "assert words_with_uppercase(['aBcDeF', 'gHiJkL', 'MnOpQr']) == ['aBcDeF', 'gHiJkL', 'MnOpQr']", "assert words_with_uppercase(['OneWord', 'AnotherWord', 'thirdword']) == ['OneWord', 'AnotherWord']", "assert words_with_uppercase(['UPPERCASE', 'lowercase', 'MixedCase']) == ['UPPERCASE', 'MixedCase']", "assert words_with_uppercase(['a', 'b', 'C', 'd', 'E']) == ['C', 'E']", "assert words_with_uppercase(['UPPERCASE', 'lowercase', '1234', 'Mixed123']) == ['UPPERCASE', 'Mixed123']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one lowercase letter from a given list of words.", "code": "def words_with_lowercase(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.islower() for char in word):\n            result.append(word)\n    return result", "task_id": "128_b8744eb6-11fd-499d-ac92-32042363d5c7", "test_setup_code": "", "test_list": ["assert words_with_lowercase(['Hello', 'WORLD', 'Python', '123']) == ['Hello', 'Python']", "assert words_with_lowercase(['ALLCAPS', 'nocaps', 'MIXEDcase']) == ['nocaps', 'MIXEDcase']", "assert words_with_lowercase(['lowercase', 'UPPERCASE', 'MixedCase']) == ['lowercase', 'MixedCase']", "assert words_with_lowercase(['123', '456', '789']) == []", "assert words_with_lowercase(['', 'UPPER', 'lower']) == ['lower']", "assert words_with_lowercase(['a', 'B', 'c']) == ['a', 'c']", "assert words_with_lowercase(['A1', 'b2', 'C3']) == ['b2']", "assert words_with_lowercase(['NoLower', 'YES', 'maybe']) == ['maybe']", "assert words_with_lowercase(['ALLUPPER', 'lowercase']) == ['lowercase']", "assert words_with_lowercase(['MIXEDcase', 'SINGLElower']) == ['MIXEDcase', 'SINGLElower']", "assert words_with_lowercase(['123ABC', 'abc123', 'ABC123']) == ['abc123']", "assert words_with_lowercase(['', '']) == []", "assert words_with_lowercase(['UPPERCASE', 'lowercase', 'MIXEDCase']) == ['lowercase', 'MIXEDCase']", "assert words_with_lowercase(['12345', '67890', 'abcde']) == ['abcde']", "assert words_with_lowercase(['ALLCAPS', 'nocaps', 'MIXEDcase', '']) == ['nocaps', 'MIXEDcase']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one digit from a given list of words.", "code": "def words_with_digit(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.isdigit() for char in word):\n            result.append(word)\n    return result", "task_id": "128_f71a4f6d-3a6d-49f4-b049-82b50c06c20d", "test_setup_code": "", "test_list": ["assert words_with_digit(['hello', 'world', 'python3', 'test1']) == ['python3', 'test1']", "assert words_with_digit(['123', 'abc', '456def', 'ghi789']) == ['123', '456def', 'ghi789']", "assert words_with_digit(['no', 'digits', 'here']) == []", "assert words_with_digit(['1', '2', '3']) == ['1', '2', '3']", "assert words_with_digit(['a1', 'b2', 'c3', 'd4']) == ['a1', 'b2', 'c3', 'd4']", "assert words_with_digit(['', ' ', ' 1', '2 ']) == [' 1', '2 ']", "assert words_with_digit(['word1', 'word2', 'word3']) == ['word1', 'word2', 'word3']", "assert words_with_digit(['no1digit', 'yes2digit', '3rd']) == ['no1digit', 'yes2digit', '3rd']", "assert words_with_digit(['mixed123', '456mixed', '789']) == ['mixed123', '456mixed', '789']", "assert words_with_digit(['a', 'b', 'c']) == []", "assert words_with_digit(['a1b2c3', 'd4e5f6', 'g7h8i9']) == ['a1b2c3', 'd4e5f6', 'g7h8i9']", "assert words_with_digit(['one1', 'two2', 'three3']) == ['one1', 'two2', 'three3']", "assert words_with_digit(['1one', '2two', '3three']) == ['1one', '2two', '3three']", "assert words_with_digit(['abc1def', 'ghi2jkl', 'mno3pqr']) == ['abc1def', 'ghi2jkl', 'mno3pqr']", "assert words_with_digit(['digit1', 'nodigit', 'digit2']) == ['digit1', 'digit2']"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one special character (non-alphanumeric) from a given list of words.", "code": "def words_with_special_char(words: list) -> list:\n    result = []\n    for word in words:\n        if any(not char.isalnum() for char in word):\n            result.append(word)\n    return result", "task_id": "128_1dc6f8f7-1e6f-4c63-b2c1-d4b58c6471a2", "test_setup_code": "", "test_list": ["assert words_with_special_char(['hello', 'world!']) == ['world!']", "assert words_with_special_char(['foo', 'bar', 'baz']) == []", "assert words_with_special_char(['@home', 'sweet', 'home']) == ['@home']", "assert words_with_special_char(['#hashtag', 'clean', 'words']) == ['#hashtag']", "assert words_with_special_char(['123', '456', '789']) == []", "assert words_with_special_char(['one', 'two', 'three!']) == ['three!']", "assert words_with_special_char(['no_specials', 'here']) == []", "assert words_with_special_char(['special$', 'characters*', 'everywhere!']) == ['special$', 'characters*', 'everywhere!']", "assert words_with_special_char(['mix3d', 'with', 'numb3rs!']) == ['numb3rs!']", "assert words_with_special_char(['empty', 'list']) == []", "assert words_with_special_char(['', '']) == []", "assert words_with_special_char(['@', '#', '$']) == ['@', '#', '$']", "assert words_with_special_char(['a!b', 'c@d', 'e#f']) == ['a!b', 'c@d', 'e#f']", "assert words_with_special_char(['normal', 'words', 'only']) == []", "assert words_with_special_char(['spaces', 'in', 'words are', 'not_special']) == []"], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have a length within a given range (inclusive) from a given list of words.", "code": "def words_with_length_in_range(min_len: int, max_len: int, words: list) -> list:\n    result = []\n    for word in words:\n        if min_len <= len(word) <= max_len:\n            result.append(word)\n    return result", "task_id": "128_7ee8f154-4ceb-49d3-859b-60ad9c30027b", "test_setup_code": "", "test_list": ["assert words_with_length_in_range(3, 5, ['apple', 'bat', 'cat', 'dog', 'elephant']) == ['apple', 'bat', 'cat', 'dog']", "assert words_with_length_in_range(1, 3, ['a', 'an', 'the', 'in', 'on']) == ['a', 'an', 'the', 'in', 'on']", "assert words_with_length_in_range(4, 4, ['tree', 'bush', 'flower', 'grass']) == ['tree', 'bush']", "assert words_with_length_in_range(0, 2, ['a', 'b', 'ab', 'abc']) == ['a', 'b', 'ab']", "assert words_with_length_in_range(5, 10, ['short', 'longer', 'lengthy', 'tiny', 'gigantic']) == ['short', 'longer', 'lengthy']", "assert words_with_length_in_range(3, 3, ['one', 'two', 'three', 'four']) == ['one', 'two']", "assert words_with_length_in_range(6, 8, ['banana', 'cherry', 'apple', 'blueberry']) == ['banana', 'cherry']", "assert words_with_length_in_range(2, 5, ['hi', 'hello', 'hey', 'hola', 'bonjour']) == ['hi', 'hello', 'hey', 'hola']", "assert words_with_length_in_range(1, 1, ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']", "assert words_with_length_in_range(4, 6, ['apple', 'pear', 'plum', 'kiwi', 'banana']) == ['apple', 'plum', 'kiwi']", "assert words_with_length_in_range(3, 7, ['cat', 'dog', 'elephant', 'tiger', 'lion']) == ['cat', 'dog', 'tiger', 'lion']", "assert words_with_length_in_range(5, 5, ['apple', 'peach', 'grape', 'melon']) == ['apple', 'peach', 'grape']", "assert words_with_length_in_range(2, 4, ['hi', 'bye', 'yes', 'no', 'maybe']) == ['hi', 'bye', 'yes', 'no']", "assert words_with_length_in_range(4, 9, ['short', 'longer', 'tiny', 'gigantic', 'huge']) == ['short', 'longer', 'gigantic']", "assert words_with_length_in_range(1, 10, []) == []"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of even and odd numbers in any sub-array of the given array of integers.", "code": "def max_diff_even_odd(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num % 2 == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_c0c23619-c9a7-460b-a31b-485c86dff8bd", "test_setup_code": "", "test_list": ["assert max_diff_even_odd([1, 2, 3, 4, 5, 6]) == 1", "assert max_diff_even_odd([2, 4, 6, 8, 10]) == 5", "assert max_diff_even_odd([1, 3, 5, 7, 9]) == 0", "assert max_diff_even_odd([2, 3, 4, 5, 6, 7, 8, 9]) == 2", "assert max_diff_even_odd([1, 2, 2, 1, 1, 2, 2, 1, 1, 2]) == 2", "assert max_diff_even_odd([1, 2, 1, 2, 1, 2, 1, 2]) == 1", "assert max_diff_even_odd([2, 2, 2, 2, 2, 2, 2, 2]) == 8", "assert max_diff_even_odd([1, 1, 1, 1, 1, 1, 1, 1]) == 0", "assert max_diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert max_diff_even_odd([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 10", "assert max_diff_even_odd([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == 5", "assert max_diff_even_odd([2, 1, 2, 1, 2, 1, 2, 1, 2, 1]) == 1", "assert max_diff_even_odd([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 1", "assert max_diff_even_odd([1]) == 0", "assert max_diff_even_odd([2]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of vowels and consonants in any sub-string of the given string.", "code": "def max_diff_vowels_consonants(s):\n    vowels = 'aeiouAEIOU'\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        current_sum += (1 if char in vowels else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_68e566a4-9cf7-4b82-8c44-8ce55fb15bc6", "test_setup_code": "", "test_list": ["assert max_diff_vowels_consonants('aeiou') == 5", "assert max_diff_vowels_consonants('bcdfg') == 0", "assert max_diff_vowels_consonants('aebcd') == 2", "assert max_diff_vowels_consonants('aeiouBCDFG') == 5", "assert max_diff_vowels_consonants('') == 0", "assert max_diff_vowels_consonants('a') == 1", "assert max_diff_vowels_consonants('b') == 0", "assert max_diff_vowels_consonants('aeioubcdfg') == 5", "assert max_diff_vowels_consonants('bcdfgaeio') == 4", "assert max_diff_vowels_consonants('aeiobcdfg') == 4", "assert max_diff_vowels_consonants('aeiobcdfgAEIOU') == 9", "assert max_diff_vowels_consonants('bcdfgAEIOU') == 5", "assert max_diff_vowels_consonants('aeiobcdfgAEIOUbcdfg') == 9", "assert max_diff_vowels_consonants('bcdfgAEIOUbcdfg') == 5", "assert max_diff_vowels_consonants('aeiobcdfgAEIOUbcdfgAEIOU') == 9"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of uppercase and lowercase letters in any sub-string of the given string.", "code": "def max_diff_upper_lower(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        if char.isalpha():\n            current_sum += (1 if char.isupper() else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_28af28fe-79ec-495a-bcd7-a59139df62f1", "test_setup_code": "", "test_list": ["assert max_diff_upper_lower('aA') == 1", "assert max_diff_upper_lower('aAaA') == 1", "assert max_diff_upper_lower('aAAa') == 2", "assert max_diff_upper_lower('abcABC') == 3", "assert max_diff_upper_lower('ABCabc') == 3", "assert max_diff_upper_lower('') == 0", "assert max_diff_upper_lower('a') == 0", "assert max_diff_upper_lower('A') == 1", "assert max_diff_upper_lower('aAaaAA') == 2", "assert max_diff_upper_lower('AaAaAaAa') == 1", "assert max_diff_upper_lower('AABBcc') == 4", "assert max_diff_upper_lower('aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ') == 2", "assert max_diff_upper_lower('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 26", "assert max_diff_upper_lower('1234567890') == 0", "assert max_diff_upper_lower('a1A2b3B4c5C6d7D8e9E0') == 1"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of positive and negative numbers in any sub-array of the given array of integers.", "code": "def max_diff_pos_neg(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num > 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_be086e72-6ed2-42f5-b193-e142b8b8bac1", "test_setup_code": "", "test_list": ["assert max_diff_pos_neg([1, -1, 2, -2, 3, -3]) == 1", "assert max_diff_pos_neg([1, 2, 3, -1, -2, -3, 4, 5]) == 3", "assert max_diff_pos_neg([-1, -2, -3, -4, -5]) == 0", "assert max_diff_pos_neg([1, 2, 3, 4, 5]) == 5", "assert max_diff_pos_neg([1, -1, 1, -1, 1, -1, 1, -1]) == 1", "assert max_diff_pos_neg([1, -2, 3, -4, 5, -6, 7, -8]) == 1", "assert max_diff_pos_neg([1, 1, 1, 1, 1, -1, -1, -1, -1, -1]) == 5", "assert max_diff_pos_neg([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 1", "assert max_diff_pos_neg([0, 0, 0, 0, 0]) == 0", "assert max_diff_pos_neg([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 1", "assert max_diff_pos_neg([1, 1, -1, -1, 1, 1, -1, -1, 1, 1]) == 2", "assert max_diff_pos_neg([1, 2, 3, -1, -2, -3, 4, 5, -4, -5]) == 3", "assert max_diff_pos_neg([-1, -1, -1, 1, 1, 1, -1, -1, -1, 1, 1, 1]) == 3", "assert max_diff_pos_neg([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6]) == 1", "assert max_diff_pos_neg([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of prime and non-prime numbers in any sub-array of the given array of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_diff_primes_nonprimes(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if is_prime(num) else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_160ec2f8-bb36-4a88-b241-2b1b7cf28a2f", "test_setup_code": "", "test_list": ["assert max_diff_primes_nonprimes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert max_diff_primes_nonprimes([11, 13, 15, 17, 19, 21, 23, 25]) == 4", "assert max_diff_primes_nonprimes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert max_diff_primes_nonprimes([4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0", "assert max_diff_primes_nonprimes([2, 3, 5, 7, 11, 13, 17, 19, 23]) == 9", "assert max_diff_primes_nonprimes([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0", "assert max_diff_primes_nonprimes([2, 2, 2, 2, 2, 2, 2, 2, 2]) == 9", "assert max_diff_primes_nonprimes([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5", "assert max_diff_primes_nonprimes([29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65]) == 5", "assert max_diff_primes_nonprimes([1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30]) == 0", "assert max_diff_primes_nonprimes([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71]) == 20", "assert max_diff_primes_nonprimes([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 1", "assert max_diff_primes_nonprimes([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73]) == 20", "assert max_diff_primes_nonprimes([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 25", "assert max_diff_primes_nonprimes([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 34, 35, 36, 38, 40]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of elements divisible by k and not divisible by k in any sub-array of the given array of integers.", "code": "def max_diff_divisible_nondivisible(arr, k):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num % k == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_ad037421-6bb3-4894-8ca4-ec355861cb18", "test_setup_code": "", "test_list": ["assert max_diff_divisible_nondivisible([3, 6, 9, 12], 3) == 4", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5, 6], 2) == 1", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5, 6], 3) == 1", "assert max_diff_divisible_nondivisible([10, 15, 20, 25, 30], 5) == 5", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5], 10) == 0", "assert max_diff_divisible_nondivisible([0, 0, 0, 0], 1) == 4", "assert max_diff_divisible_nondivisible([1, 1, 1, 1], 1) == 4", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5], 2) == 1", "assert max_diff_divisible_nondivisible([5, 10, 15, 20, 25], 5) == 5", "assert max_diff_divisible_nondivisible([1, 3, 5, 7, 9], 2) == 0", "assert max_diff_divisible_nondivisible([2, 4, 6, 8, 10], 2) == 5", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == 2", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 1", "assert max_diff_divisible_nondivisible([1, 1, 1, 1, 1, 1, 1, 1], 1) == 8", "assert max_diff_divisible_nondivisible([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the sum of positive and negative numbers in any sub-array of the given array of integers.", "code": "def max_diff_positives_negatives(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_5162e00e-8c8d-418f-92a4-76879263a559", "test_setup_code": "", "test_list": ["assert max_diff_positives_negatives([1, -2, 3, 10, -4, 7, 2, -5]) == 18", "assert max_diff_positives_negatives([-1, -2, -3, -4]) == 0", "assert max_diff_positives_negatives([1, 2, 3, 4]) == 10", "assert max_diff_positives_negatives([0, 0, 0, 0]) == 0", "assert max_diff_positives_negatives([1, -1, 1, -1, 1, -1]) == 1", "assert max_diff_positives_negatives([5, -2, -3, 6, -1, 4, -2]) == 12", "assert max_diff_positives_negatives([2, -1, 2, -1, 2, -1, 2]) == 6", "assert max_diff_positives_negatives([-5, -4, -3, -2, -1]) == 0", "assert max_diff_positives_negatives([1, 2, 3, -6, 4, 5, -2, 2]) == 9", "assert max_diff_positives_negatives([1]) == 1", "assert max_diff_positives_negatives([-1]) == 0", "assert max_diff_positives_negatives([100, -50, 50, -100, 200]) == 200", "assert max_diff_positives_negatives([-10, 20, -30, 40, -50, 60]) == 60", "assert max_diff_positives_negatives([3, -1, -1, 3, -1, -1, 3]) == 6", "assert max_diff_positives_negatives([10, -5, 5, -10, 10, -5, 5, -10, 10]) == 20"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of zeros and non-zeros in any sub-array of the given array of integers.", "code": "def max_diff_zeros_nonzeros(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_30418da7-24c4-4bf4-a64f-b0d83773af06", "test_setup_code": "", "test_list": ["assert max_diff_zeros_nonzeros([0, 1, 0, 1, 0, 1, 0]) == 1", "assert max_diff_zeros_nonzeros([0, 0, 1, 1, 0, 0, 1]) == 2", "assert max_diff_zeros_nonzeros([1, 1, 1, 1, 1]) == 0", "assert max_diff_zeros_nonzeros([0, 0, 0, 0, 0]) == 5", "assert max_diff_zeros_nonzeros([1, 0, 1, 0, 1, 0, 1, 0]) == 1", "assert max_diff_zeros_nonzeros([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]) == 1", "assert max_diff_zeros_nonzeros([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]) == 1", "assert max_diff_zeros_nonzeros([0]) == 1", "assert max_diff_zeros_nonzeros([1]) == 0", "assert max_diff_zeros_nonzeros([0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0]) == 3", "assert max_diff_zeros_nonzeros([1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0]) == 3", "assert max_diff_zeros_nonzeros([0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 1", "assert max_diff_zeros_nonzeros([1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0]) == 1", "assert max_diff_zeros_nonzeros([0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]) == 3", "assert max_diff_zeros_nonzeros([1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0]) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of alphabetic characters and digits in any sub-string of the given string.", "code": "def max_diff_char_digit(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        current_sum += (1 if char.isalpha() else -1 if char.isdigit() else 0)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_7dcf5179-fcd5-4aa1-b56d-da853ebedf3a", "test_setup_code": "", "test_list": ["assert max_diff_char_digit('abc123') == 3", "assert max_diff_char_digit('a1b2c3') == 1", "assert max_diff_char_digit('123abc') == 3", "assert max_diff_char_digit('a1b2c3d4') == 1", "assert max_diff_char_digit('abcd') == 4", "assert max_diff_char_digit('1234') == 0", "assert max_diff_char_digit('a1b2c3d4e5f6g7h8i9j0') == 1", "assert max_diff_char_digit('a1b2c3d4e5f6g7h8i9j0k') == 2", "assert max_diff_char_digit('a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0') == 1", "assert max_diff_char_digit('') == 0", "assert max_diff_char_digit('a') == 1", "assert max_diff_char_digit('1') == 0", "assert max_diff_char_digit('a1') == 1", "assert max_diff_char_digit('1a') == 1", "assert max_diff_char_digit('a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u') == 2"], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of odd and even digits in any sub-string of the given string.", "code": "def max_diff_odd_even_digits(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        if char.isdigit():\n            current_sum += (1 if int(char) % 2 != 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_765199ca-63b0-4edf-b123-5673f374d6a1", "test_setup_code": "", "test_list": ["assert max_diff_odd_even_digits('123456') == 1", "assert max_diff_odd_even_digits('13579') == 5", "assert max_diff_odd_even_digits('24680') == 0", "assert max_diff_odd_even_digits('112233445566778899') == 1", "assert max_diff_odd_even_digits('') == 0", "assert max_diff_odd_even_digits('1') == 1", "assert max_diff_odd_even_digits('2') == 0", "assert max_diff_odd_even_digits('111222333444') == 1", "assert max_diff_odd_even_digits('1357924680') == 3", "assert max_diff_odd_even_digits('9876543210') == 1", "assert max_diff_odd_even_digits('1111111111') == 10", "assert max_diff_odd_even_digits('2222222222') == 0", "assert max_diff_odd_even_digits('1234567890') == 1", "assert max_diff_odd_even_digits('102030405060708090') == 1", "assert max_diff_odd_even_digits('0000000000') == 0"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the consonants of a given string.", "code": "def reverse_consonants(s: str) -> str:\n\tconsonants = \"\"\n\tfor char in s:\n\t\tif char.lower() not in \"aeiou\" and char.isalpha():\n\t\t\tconsonants += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.lower() not in \"aeiou\" and char.isalpha():\n\t\t\tresult_string += consonants[-1]\n\t\t\tconsonants = consonants[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_9baa428e-6672-412b-9622-82fff37fdbf5", "test_setup_code": "", "test_list": ["assert reverse_consonants('hello') == 'holle'", "assert reverse_consonants('world') == 'dlrow'", "assert reverse_consonants('a') == 'a'", "assert reverse_consonants('aeiou') == 'aeiou'", "assert reverse_consonants('bcdfghjklmnpqrstvwxyz') == 'zyxwvutsrqpnmlkjhgfdcb'", "assert reverse_consonants('The quick brown fox jumps over the lazy dog') == 'The kciuq nworb xof spmuj revo eht yzal god'", "assert reverse_consonants('Python Programming') == 'Pnythg Prammorign'", "assert reverse_consonants('12345') == '12345'", "assert reverse_consonants('') == ''", "assert reverse_consonants('Consonants and Vowels') == 'Swnsonantc and Volews'", "assert reverse_consonants('A quick brown fox.') == 'A kciuq nworb fxo.'", "assert reverse_consonants('!@#$%^&*()') == '!@#$%^&*()'", "assert reverse_consonants('Reverse the consonants!') == 'Rovsrse the cnsnnatse!'", "assert reverse_consonants('abcdefghijklmnopqrstuvwxyz') == 'azyxwvutsrqpnmlkjhgfdcb'", "assert reverse_consonants('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'AZYXWVUTSRQPNMLKJHGFDCB'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the digits of a given string.", "code": "def reverse_digits(s: str) -> str:\n\tdigits = \"\"\n\tfor char in s:\n\t\tif char.isdigit():\n\t\t\tdigits += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.isdigit():\n\t\t\tresult_string += digits[-1]\n\t\t\tdigits = digits[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_61c7b215-1f63-477e-ab9c-45b477fbc325", "test_setup_code": "", "test_list": ["assert reverse_digits('abc123') == 'abc321'", "assert reverse_digits('123abc456') == '654abc321'", "assert reverse_digits('a1b2c3') == 'a3b2c1'", "assert reverse_digits('no digits here!') == 'no digits here!'", "assert reverse_digits('') == ''", "assert reverse_digits('1') == '1'", "assert reverse_digits('12') == '21'", "assert reverse_digits('a1b2c3d4e5') == 'a5b4c3d2e1'", "assert reverse_digits('abc123def456ghi789') == 'abc987def654ghi321'", "assert reverse_digits('0a1b2c3d4e5f6g7h8i9') == '9a8b7c6d5e4f3g2h1i0'", "assert reverse_digits('1234567890') == '0987654321'", "assert reverse_digits('a1b2c3d4e5f6g7h8i9j0') == 'a0b9c8d7e6f5g4h3i2j1'", "assert reverse_digits('a1!b2@c3#d4$e5%f6^g7&h8*i9(j0)') == 'a0!b9@c8#d7$e6%f5^g4&h3*i2(j1)'", "assert reverse_digits('123abc321') == '123abc321'", "assert reverse_digits('a1b2c3d4e5f6g7h8i9j0k') == 'a0b9c8d7e6f5g4h3i2j1k'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the uppercase letters of a given string.", "code": "def reverse_uppercase(s: str) -> str:\n\tuppercase = \"\"\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tuppercase += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tresult_string += uppercase[-1]\n\t\t\tuppercase = uppercase[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_82043248-846f-4bc7-8ba1-1ffc775174ea", "test_setup_code": "", "test_list": ["assert reverse_uppercase('aBcDeF') == 'aFeDcB'", "assert reverse_uppercase('HelloWorld') == 'HolleWorLd'", "assert reverse_uppercase('PYTHON') == 'NOHTYP'", "assert reverse_uppercase('python') == 'python'", "assert reverse_uppercase('aBcDeFgHiJ') == 'aJcDeFgHiB'", "assert reverse_uppercase('') == ''", "assert reverse_uppercase('A') == 'A'", "assert reverse_uppercase('a') == 'a'", "assert reverse_uppercase('AbCdEfGhIjK') == 'KbCdEfGhIjA'", "assert reverse_uppercase('123ABC') == '123CBA'", "assert reverse_uppercase('abcDEFghi') == 'abcFEDghi'", "assert reverse_uppercase('aBcD123') == 'aDcB123'", "assert reverse_uppercase('UPPERlower') == 'REPPUlower'", "assert reverse_uppercase('MixedCASE') == 'SixedCAME'", "assert reverse_uppercase('NoUpperCase') == 'NoUpperCase'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the lowercase letters of a given string.", "code": "def reverse_lowercase(s: str) -> str:\n\tlowercase = \"\"\n\tfor char in s:\n\t\tif char.islower():\n\t\t\tlowercase += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.islower():\n\t\t\tresult_string += lowercase[-1]\n\t\t\tlowercase = lowercase[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_396bd481-cdc7-4eec-8a3e-e372cffe76b7", "test_setup_code": "", "test_list": ["assert reverse_lowercase('aBcDe') == 'eBcDa'", "assert reverse_lowercase('AbCdEfGh') == 'AhCdEfGb'", "assert reverse_lowercase('') == ''", "assert reverse_lowercase('ABCDEF') == 'ABCDEF'", "assert reverse_lowercase('abcdef') == 'fedcba'", "assert reverse_lowercase('a1b2c3') == 'c1b2a3'", "assert reverse_lowercase('12345') == '12345'", "assert reverse_lowercase('aA') == 'aA'", "assert reverse_lowercase('Aa') == 'Aa'", "assert reverse_lowercase('a!b@c#d$') == 'd!c@b#a$'", "assert reverse_lowercase('zYxWvUt') == 'tYxWvUz'", "assert reverse_lowercase('HelloWorld') == 'HolleWolrd'", "assert reverse_lowercase('Python3.8') == 'nohtyP3.8'", "assert reverse_lowercase('1a2b3c') == '1c2b3a'", "assert reverse_lowercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 'zBcDeFgHiJkLmNoPqRsTuVwXyA'"], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n\twords = s.split()\n\treturn ' '.join(words[::-1])", "task_id": "131_b9abf7f8-5770-4af0-a2b5-219b8cb71ec4", "test_setup_code": "", "test_list": ["assert reverse_words('hello world') == 'world hello'", "assert reverse_words('a b c') == 'c b a'", "assert reverse_words('') == ''", "assert reverse_words('singleword') == 'singleword'", "assert reverse_words('This is a test') == 'test a is This'", "assert reverse_words('  leading spaces') == 'spaces leading'", "assert reverse_words('trailing spaces  ') == 'spaces trailing'", "assert reverse_words('  multiple   spaces  ') == 'spaces multiple'", "assert reverse_words('punctuation, should; remain: intact!') == 'intact! remain: should; punctuation,'", "assert reverse_words('123 456 789') == '789 456 123'", "assert reverse_words('UPPER lower CASE') == 'CASE lower UPPER'", "assert reverse_words('special characters !@# $%^ &*()') == '&*() $%^ !@# characters special'", "assert reverse_words('new\nline') == 'new line'", "assert reverse_words('tab\tseparated') == 'tab separated'", "assert reverse_words('mix of 123 and words') == 'words and 123 of mix'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the characters at even indices of a given string.", "code": "def reverse_even_indexed_chars(s: str) -> str:\n\teven_chars = \"\"\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0:\n\t\t\teven_chars += s[i]\n\tresult_string = \"\"\n\teven_index = 0\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0:\n\t\t\tresult_string += even_chars[-(even_index + 1)]\n\t\t\teven_index += 1\n\t\telse:\n\t\t\tresult_string += s[i]\n\treturn result_string", "task_id": "131_11fe8a79-aee2-4496-8e97-8c75e2dd33e8", "test_setup_code": "", "test_list": ["assert reverse_even_indexed_chars('abcdef') == 'fbdcea'", "assert reverse_even_indexed_chars('a') == 'a'", "assert reverse_even_indexed_chars('ab') == 'ab'", "assert reverse_even_indexed_chars('abc') == 'cba'", "assert reverse_even_indexed_chars('abcd') == 'cbad'", "assert reverse_even_indexed_chars('') == ''", "assert reverse_even_indexed_chars('abcdefgh') == 'hbdcfega'", "assert reverse_even_indexed_chars('aabbccdd') == 'dabbccaa'", "assert reverse_even_indexed_chars('aaaa') == 'aaaa'", "assert reverse_even_indexed_chars('abababab') == 'babababa'", "assert reverse_even_indexed_chars('1234567890') == '0987654321'", "assert reverse_even_indexed_chars('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_even_indexed_chars('racecar') == 'racecar'", "assert reverse_even_indexed_chars('palindrome') == 'emlindorpa'", "assert reverse_even_indexed_chars('python') == 'nhtyop'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the characters at odd indices of a given string.", "code": "def reverse_odd_indexed_chars(s: str) -> str:\n\todd_chars = \"\"\n\tfor i in range(len(s)):\n\t\tif i % 2 != 0:\n\t\t\todd_chars += s[i]\n\tresult_string = \"\"\n\todd_index = 0\n\tfor i in range(len(s)):\n\t\tif i % 2 != 0:\n\t\t\tresult_string += odd_chars[-(odd_index + 1)]\n\t\t\todd_index += 1\n\t\telse:\n\t\t\tresult_string += s[i]\n\treturn result_string", "task_id": "131_cb82c696-4a62-4219-84f4-182609cd55c6", "test_setup_code": "", "test_list": ["assert reverse_odd_indexed_chars('abcdef') == 'aecdbf'", "assert reverse_odd_indexed_chars('a') == 'a'", "assert reverse_odd_indexed_chars('ab') == 'ab'", "assert reverse_odd_indexed_chars('abc') == 'abc'", "assert reverse_odd_indexed_chars('abcd') == 'abdc'", "assert reverse_odd_indexed_chars('abcdefgh') == 'aecdbfgh'", "assert reverse_odd_indexed_chars('a1b2c3d4') == 'a4b3c2d1'", "assert reverse_odd_indexed_chars('123456789') == '193857462'", "assert reverse_odd_indexed_chars('') == ''", "assert reverse_odd_indexed_chars('a!b@c#d$') == 'a$d#c@b!'", "assert reverse_odd_indexed_chars('racecar') == 'raccera'", "assert reverse_odd_indexed_chars('palindrome') == 'plnrdmoiae'", "assert reverse_odd_indexed_chars('python') == 'pythno'", "assert reverse_odd_indexed_chars('reverse') == 'rervese'", "assert reverse_odd_indexed_chars('1234abcd5678') == '1234dcb5678a'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the words of even length in a given string.", "code": "def reverse_words_of_even_length(s: str) -> str:\n\twords = s.split()\n\tfor i in range(len(words)):\n\t\tif len(words[i]) % 2 == 0:\n\t\t\twords[i] = words[i][::-1]\n\treturn ' '.join(words)", "task_id": "131_39ed4b24-9662-4fa8-95a3-5a52592d8674", "test_setup_code": "", "test_list": ["assert reverse_words_of_even_length('hello world') == 'hello dlrow'", "assert reverse_words_of_even_length('abcd efgh ijkl') == 'dcba hgfe lkji'", "assert reverse_words_of_even_length('a bb ccc dddd eeeee') == 'a bb ccc dddd eeeee'", "assert reverse_words_of_even_length('') == ''", "assert reverse_words_of_even_length('even length words are reversed') == 'neve length sdrow are desrever'", "assert reverse_words_of_even_length('one two three four five six') == 'one owt three ruof five xis'", "assert reverse_words_of_even_length('a ab abc abcd abcde abcdef') == 'a ab abc dcba abcde fedcba'", "assert reverse_words_of_even_length('singleword') == 'singleword'", "assert reverse_words_of_even_length('even even even even') == 'neve neve neve neve'", "assert reverse_words_of_even_length('odd odd odd odd') == 'odd odd odd odd'", "assert reverse_words_of_even_length('even odd even odd even odd') == 'neve odd neve odd neve odd'", "assert reverse_words_of_even_length('1234 5678 91011 121314') == '4321 8765 91011 413121'", "assert reverse_words_of_even_length('this is a test') == 'this si a test'", "assert reverse_words_of_even_length('palindrome racecar') == 'emordnilap racecar'", "assert reverse_words_of_even_length('short longshort longerlongest') == 'trohs longshort tsetgnolregnol'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the words of odd length in a given string.", "code": "def reverse_words_of_odd_length(s: str) -> str:\n\twords = s.split()\n\tfor i in range(len(words)):\n\t\tif len(words[i]) % 2 != 0:\n\t\t\twords[i] = words[i][::-1]\n\treturn ' '.join(words)", "task_id": "131_b15a1eaf-ded7-4024-9d07-2cca49be588c", "test_setup_code": "", "test_list": ["assert reverse_words_of_odd_length('hello world') == 'olleh world'", "assert reverse_words_of_odd_length('This is a test') == 'sihT is a test'", "assert reverse_words_of_odd_length('Python programming is fun') == 'nohtyP programming is fun'", "assert reverse_words_of_odd_length('') == ''", "assert reverse_words_of_odd_length('a') == 'a'", "assert reverse_words_of_odd_length('ab') == 'ab'", "assert reverse_words_of_odd_length('abc') == 'cba'", "assert reverse_words_of_odd_length('abcd') == 'abcd'", "assert reverse_words_of_odd_length('abcde') == 'edcba'", "assert reverse_words_of_odd_length('a ab abc abcd abcde') == 'a ab cba abcd edcba'", "assert reverse_words_of_odd_length('odd even odd even') == 'ddo even ddo even'", "assert reverse_words_of_odd_length('one two three four five six') == 'eno two eerht four evif six'", "assert reverse_words_of_odd_length('palindrome emordnilap') == 'emordnilap emordnilap'", "assert reverse_words_of_odd_length('123 4567 89 101112') == '123 7654 89 101112'", "assert reverse_words_of_odd_length('spaceship rocket') == 'pihsecaps rocket'"], "challenge_test_list": []}
{"text": "Write a python function to reverse only the special characters (non-alphanumeric) of a given string.", "code": "def reverse_special_chars(s: str) -> str:\n\tspecial_chars = \"\"\n\tfor char in s:\n\t\tif not char.isalnum():\n\t\t\tspecial_chars += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif not char.isalnum():\n\t\t\tresult_string += special_chars[-1]\n\t\t\tspecial_chars = special_chars[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_18fde052-0764-4a64-b731-5c58b64e8c02", "test_setup_code": "", "test_list": ["assert reverse_special_chars('a!b@c#') == 'a#b@c!'", "assert reverse_special_chars('hello!world') == 'hello!world'", "assert reverse_special_chars('123$%^456') == '123%^$456'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('') == ''", "assert reverse_special_chars('abc') == 'abc'", "assert reverse_special_chars('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_special_chars('a!b@') == 'a@b!'", "assert reverse_special_chars('!a@b#c$d%e^f&g*h(i)j') == 'j!i@h(g&f^e%d$c#b@a!'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'", "assert reverse_special_chars('a!b@c#d$e%f^g&h*i(j)k') == 'a)k@j(i*h&g^f%e$d#c@b!a'"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is symmetric.", "code": "def is_symmetric(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "task_id": "129_1e0f1312-e8a2-49f0-be87-553d11b88b8e", "test_setup_code": "", "test_list": ["assert is_symmetric([[1, 2, 3], [2, 4, 5], [3, 5, 6]]) == True", "assert is_symmetric([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_symmetric([[1, 2, 3], [2, 4, 5], [3, 5, 7]]) == False", "assert is_symmetric([[1]]) == True", "assert is_symmetric([[1, 2], [2, 1]]) == True", "assert is_symmetric([[1, 2], [3, 1]]) == False", "assert is_symmetric([[1, 2, 3], [2, 1, 2], [3, 2, 1]]) == True", "assert is_symmetric([[1, 2, 3], [2, 1, 2], [3, 2, 0]]) == False", "assert is_symmetric([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True", "assert is_symmetric([[1, -1, 1], [-1, 1, -1], [1, -1, 1]]) == True", "assert is_symmetric([[1, 2, 3], [2, 1, 4], [3, 4, 1]]) == False", "assert is_symmetric([[1, 2], [2, 1], [3, 4]]) == False", "assert is_symmetric([[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]]) == False", "assert is_symmetric([[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]]) == False", "assert is_symmetric([[1, 2, 3, 4], [2, 1, 4, 3], [3, 4, 1, 2], [4, 3, 2, 1]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is an identity matrix.", "code": "def is_identity(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            elif i != j and matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_814643bc-17e4-412f-af50-530d9af5f599", "test_setup_code": "", "test_list": ["assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_identity([[1, 0], [0, 1]]) == True", "assert is_identity([[1]]) == True", "assert is_identity([[0]]) == False", "assert is_identity([[1, 0, 0], [0, 0, 0], [0, 0, 1]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [1, 0, 1]]) == False", "assert is_identity([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]) == True", "assert is_identity([[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 2]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 1], [0, 0, 1]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0, 1]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0, 0]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0, 0]]) == False", "assert is_identity([[1, 0, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0, 1]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is upper triangular.", "code": "def is_upper_triangular(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_69bdd969-3ce1-46a1-b1aa-f8eda6c76fd4", "test_setup_code": "", "test_list": ["assert is_upper_triangular([[1, 2, 3], [0, 5, 6], [0, 0, 9]]) == True", "assert is_upper_triangular([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_upper_triangular([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False", "assert is_upper_triangular([[1]]) == True", "assert is_upper_triangular([[0]]) == True", "assert is_upper_triangular([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True", "assert is_upper_triangular([[1, 2, 3], [0, 5, 6], [1, 0, 9]]) == False", "assert is_upper_triangular([[1, 2], [0, 3]]) == True", "assert is_upper_triangular([[1, 0], [1, 1]]) == False", "assert is_upper_triangular([[1, 2, 3, 4], [0, 5, 6, 7], [0, 0, 9, 10], [0, 0, 0, 11]]) == True", "assert is_upper_triangular([[1, 2, 3, 4], [0, 5, 6, 7], [0, 0, 9, 10], [0, 1, 0, 11]]) == False", "assert is_upper_triangular([[1, 2, 3], [0, 5, 6], [0, 1, 9]]) == False", "assert is_upper_triangular([[1, 2], [0, 0]]) == True", "assert is_upper_triangular([[1, 2, 3], [0, 0, 6], [0, 0, 0]]) == True", "assert is_upper_triangular([[0, 0, 0], [0, 0, 0], [1, 0, 0]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is lower triangular.", "code": "def is_lower_triangular(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_c17cd707-406e-46be-8b3e-7d8372c85d50", "test_setup_code": "", "test_list": ["assert is_lower_triangular([[1, 0, 0], [2, 3, 0], [4, 5, 6]]) == True", "assert is_lower_triangular([[1, 0, 0], [2, 3, 1], [4, 5, 6]]) == False", "assert is_lower_triangular([[1]]) == True", "assert is_lower_triangular([[0]]) == True", "assert is_lower_triangular([[1, 0], [2, 3]]) == True", "assert is_lower_triangular([[1, 1], [2, 3]]) == False", "assert is_lower_triangular([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_lower_triangular([[1, 0, 0], [0, 1, 1], [0, 0, 1]]) == False", "assert is_lower_triangular([[5, 0, 0, 0], [2, 3, 0, 0], [4, 5, 6, 0], [7, 8, 9, 10]]) == True", "assert is_lower_triangular([[5, 0, 0, 1], [2, 3, 0, 0], [4, 5, 6, 0], [7, 8, 9, 10]]) == False", "assert is_lower_triangular([[1, 0, 0, 0], [2, 3, 0, 0], [4, 5, 6, 0], [7, 8, 9, 0]]) == True", "assert is_lower_triangular([[1, 0, 0, 0], [0, 3, 0, 0], [0, 0, 6, 0], [0, 0, 0, 10]]) == True", "assert is_lower_triangular([[1, 0, 0, 0], [0, 3, 0, 0], [0, 0, 6, 0], [0, 0, 0, 0]]) == True", "assert is_lower_triangular([[1, 0, 0, 0], [0, 3, 0, 1], [0, 0, 6, 0], [0, 0, 0, 10]]) == False", "assert is_lower_triangular([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True"], "challenge_test_list": []}
{"text": "Write a function to transpose a given square matrix.", "code": "def transpose(matrix):\n    n = len(matrix)\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return transposed", "task_id": "129_b7b1694f-8c5c-409d-a930-14abcf128ac5", "test_setup_code": "", "test_list": ["assert transpose([[1]]) == [[1]]", "assert transpose([[1, 2], [3, 4]]) == [[1, 3], [2, 4]]", "assert transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "assert transpose([[0, 0], [0, 0]]) == [[0, 0], [0, 0]]", "assert transpose([[1, -1], [-1, 1]]) == [[1, -1], [-1, 1]]", "assert transpose([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [[1, 5, 9, 13], [2, 6, 10, 14], [3, 7, 11, 15], [4, 8, 12, 16]]", "assert transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [[1, 4, 7, 10], [2, 5, 8, 11], [3, 6, 9, 12]]", "assert transpose([[-1, -2], [-3, -4]]) == [[-1, -3], [-2, -4]]", "assert transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12, 15]]", "assert transpose([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "assert transpose([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [[1, 4, 7, 10, 13, 16], [2, 5, 8, 11, 14, 17], [3, 6, 9, 12, 15, 18]]", "assert transpose([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]", "assert transpose([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [[1, 6, 11, 16, 21], [2, 7, 12, 17, 22], [3, 8, 13, 18, 23], [4, 9, 14, 19, 24], [5, 10, 15, 20, 25]]", "assert transpose([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]) == [[1, 7, 13, 19, 25, 31], [2, 8, 14, 20, 26, 32], [3, 9, 15, 21, 27, 33], [4, 10, 16, 22, 28, 34], [5, 11, 17, 23, 29, 35], [6, 12, 18, 24, 30, 36]]", "assert transpose([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]) == [[1, 5, 9, 13, 17], [2, 6, 10, 14, 18], [3, 7, 11, 15, 19], [4, 8, 12, 16, 20]]"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a diagonal matrix.", "code": "def is_diagonal(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_d86d1cca-84be-4019-93ff-69f81a1d084f", "test_setup_code": "", "test_list": ["assert is_diagonal([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_diagonal([[1, 0, 0], [0, 0, 0], [0, 0, 1]]) == True", "assert is_diagonal([[1, 2, 0], [0, 1, 0], [0, 0, 1]]) == False", "assert is_diagonal([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True", "assert is_diagonal([[5]]) == True", "assert is_diagonal([[1, 0], [0, 1]]) == True", "assert is_diagonal([[1, 2], [0, 1]]) == False", "assert is_diagonal([[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 0], [0, 0, 0, 4]]) == True", "assert is_diagonal([[1, 0, 0, 0], [0, 2, 0, 0], [0, 0, 3, 1], [0, 0, 0, 4]]) == False", "assert is_diagonal([[1, 0, 0], [0, 2, 0], [0, 0, 0]]) == True", "assert is_diagonal([[1, 0, 0], [0, 2, 0], [1, 0, 3]]) == False", "assert is_diagonal([[1, 0], [1, 1]]) == False", "assert is_diagonal([[0, 0], [0, 0]]) == True", "assert is_diagonal([[1, 0, 0], [0, 0, 0], [0, 0, 0]]) == True", "assert is_diagonal([[1, 0, 0], [0, 2, 0], [0, 0, 3], [0, 0, 0]]) == False"], "challenge_test_list": []}
{"text": "Write a function to calculate the trace of a given square matrix.", "code": "def trace(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))", "task_id": "129_073c23f2-9384-4519-9892-6239d28253ca", "test_setup_code": "", "test_list": ["assert trace([[1, 2], [3, 4]]) == 5", "assert trace([[5, 6], [7, 8]]) == 13", "assert trace([[1, 0], [0, 1]]) == 2", "assert trace([[0, 0], [0, 0]]) == 0", "assert trace([[2, 3, 4], [5, 6, 7], [8, 9, 10]]) == 18", "assert trace([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 15", "assert trace([[10, 20], [30, 40]]) == 50", "assert trace([[1]]) == 1", "assert trace([[0]]) == 0", "assert trace([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 34", "assert trace([[1, -2], [-3, 4]]) == 5", "assert trace([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 'Error: Not a square matrix'", "assert trace([[1, 2], [3, 4], [5, 6]]) == 'Error: Not a square matrix'", "assert trace([[1.5, 2.5], [3.5, 4.5]]) == 6.0", "assert trace([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 'Error: Not a square matrix'"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is skew-symmetric.", "code": "def is_skew_symmetric(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != -matrix[j][i]:\n                return False\n    return True", "task_id": "129_4b1a8963-746a-4deb-9ec5-17aae1d64389", "test_setup_code": "", "test_list": ["assert is_skew_symmetric([[0]]) == True", "assert is_skew_symmetric([[0, 1], [-1, 0]]) == True", "assert is_skew_symmetric([[0, 2], [-2, 0]]) == True", "assert is_skew_symmetric([[0, 1], [1, 0]]) == False", "assert is_skew_symmetric([[0, -1], [1, 0]]) == True", "assert is_skew_symmetric([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == True", "assert is_skew_symmetric([[0, 1, 2], [-1, 0, 3], [-2, -3, 0]]) == True", "assert is_skew_symmetric([[0, 1, 2], [-1, 0, 3], [-2, 3, 0]]) == False", "assert is_skew_symmetric([[0, 1, 2], [-1, 0, 3], [-2, -3, 1]]) == False", "assert is_skew_symmetric([[0, 1, 2, 3], [-1, 0, 4, 5], [-2, -4, 0, 6], [-3, -5, -6, 0]]) == True", "assert is_skew_symmetric([[0, 1, 2, 3], [-1, 0, 4, 5], [-2, -4, 0, 6], [-3, -5, 6, 0]]) == False", "assert is_skew_symmetric([[0, 1, 2, 3], [-1, 0, 4, 5], [-2, -4, 0, 6], [-3, -5, -6, 1]]) == False", "assert is_skew_symmetric([[0, 1, 2, 3, 4], [-1, 0, 5, 6, 7], [-2, -5, 0, 8, 9], [-3, -6, -8, 0, 10], [-4, -7, -9, -10, 0]]) == True", "assert is_skew_symmetric([[0, 1, 2, 3, 4], [-1, 0, 5, 6, 7], [-2, -5, 0, 8, 9], [-3, -6, -8, 0, 10], [-4, -7, -9, 10, 0]]) == False", "assert is_skew_symmetric([[0, 1, 2, 3, 4], [-1, 0, 5, 6, 7], [-2, -5, 0, 8, 9], [-3, -6, -8, 0, 10], [-4, -7, -9, -10, 1]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a permutation matrix.", "code": "def is_permutation_matrix(matrix):\n    n = len(matrix)\n    for row in matrix:\n        if sum(row) != 1 or any(x not in [0, 1] for x in row):\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != 1:\n            return False\n    return True", "task_id": "129_88ba06ab-71bc-4978-aac6-4fd794a3df2d", "test_setup_code": "", "test_list": ["assert is_permutation_matrix([[1, 0], [0, 1]]) == True", "assert is_permutation_matrix([[0, 1], [1, 0]]) == True", "assert is_permutation_matrix([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == True", "assert is_permutation_matrix([[0, 1, 0], [1, 0, 0], [0, 0, 1]]) == True", "assert is_permutation_matrix([[1, 0, 0], [0, 0, 1], [0, 1, 0]]) == True", "assert is_permutation_matrix([[1, 1], [0, 1]]) == False", "assert is_permutation_matrix([[1, 0], [1, 0]]) == False", "assert is_permutation_matrix([[1, 0, 0], [0, 1, 1], [0, 0, 1]]) == False", "assert is_permutation_matrix([[1, 0, 0], [0, 1, 0], [1, 0, 0]]) == False", "assert is_permutation_matrix([[1, 0], [0, 0]]) == False", "assert is_permutation_matrix([[0, 0], [0, 1]]) == False", "assert is_permutation_matrix([[1, 0, 0], [0, 0, 1], [0, 1, 1]]) == False", "assert is_permutation_matrix([[1, 0, 0], [0, 1, 0], [0, 0, 0]]) == False", "assert is_permutation_matrix([[1]]) == True", "assert is_permutation_matrix([[0]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a Toeplitz matrix.", "code": "def is_toeplitz(matrix):\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(1, n):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True", "task_id": "129_961b2a05-9f39-49fa-a28e-f8b3d7350855", "test_setup_code": "", "test_list": ["assert is_toeplitz([[1, 2, 3], [4, 1, 2], [5, 4, 1]]) == True", "assert is_toeplitz([[1, 2], [3, 1]]) == True", "assert is_toeplitz([[1, 2, 3], [4, 1, 2], [5, 4, 0]]) == False", "assert is_toeplitz([[1]]) == True", "assert is_toeplitz([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1]]) == True", "assert is_toeplitz([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 9, 2], [7, 6, 5, 1]]) == False", "assert is_toeplitz([[1, 2, 3], [4, 1, 2], [7, 4, 1]]) == True", "assert is_toeplitz([[1, 2, 3], [4, 1, 2], [7, 4, 0]]) == False", "assert is_toeplitz([[1, 2], [3, 4]]) == False", "assert is_toeplitz([[1, 2, 3], [4, 1, 2], [5, 4, 1], [6, 5, 4]]) == False", "assert is_toeplitz([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1], [8, 7, 6, 5]]) == True", "assert is_toeplitz([[1, 2, 3, 4], [5, 1, 2, 3], [6, 5, 1, 2], [7, 6, 5, 1], [8, 7, 6, 0]]) == False", "assert is_toeplitz([[1, 2, 3, 4, 5], [6, 1, 2, 3, 4], [7, 6, 1, 2, 3], [8, 7, 6, 1, 2], [9, 8, 7, 6, 1]]) == True", "assert is_toeplitz([[1, 2, 3, 4, 5], [6, 1, 2, 3, 4], [7, 6, 1, 2, 3], [8, 7, 6, 1, 2], [9, 8, 7, 6, 0]]) == False", "assert is_toeplitz([[1, 2, 3, 4, 5, 6], [7, 1, 2, 3, 4, 5], [8, 7, 1, 2, 3, 4], [9, 8, 7, 1, 2, 3], [10, 9, 8, 7, 1, 2], [11, 10, 9, 8, 7, 1]]) == True"], "challenge_test_list": []}
{"text": "Write a function to convert a list of characters to a string.", "code": "def list_to_string(lst):\n    return ''.join(lst)", "task_id": "132_fb061345-7c46-4812-9fe8-3f771f34a4da", "test_setup_code": "", "test_list": ["assert list_to_string(['a', 'b', 'c']) == 'abc'", "assert list_to_string(['h', 'e', 'l', 'l', 'o']) == 'hello'", "assert list_to_string(['1', '2', '3', '4']) == '1234'", "assert list_to_string(['!', '@', '#', '$']) == '!@#$'", "assert list_to_string(['a', ' ', 'b', ' ', 'c']) == 'a b c'", "assert list_to_string([]) == ''", "assert list_to_string(['a']) == 'a'", "assert list_to_string([' ', ' ', ' ']) == '   '", "assert list_to_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'abcdefghijklmnopqrstuvwxyz'", "assert list_to_string(['A', 'B', 'C']) == 'ABC'", "assert list_to_string(['a', 'B', 'c', 'D']) == 'aBcD'", "assert list_to_string(['1', '2', '3', 'a', 'b', 'c']) == '123abc'", "assert list_to_string(['a', '1', 'b', '2', 'c', '3']) == 'a1b2c3'", "assert list_to_string(['\n', '\t', '\r']) == '\\n\\t\\r'", "assert list_to_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']) == 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string, but in reverse order.", "code": "def reverse_tuple_to_string(tup):\n    return ''.join(reversed(tup))", "task_id": "132_b0e7984b-716a-4f21-9aaa-c15c6eb72049", "test_setup_code": "", "test_list": ["assert reverse_tuple_to_string(('a', 'b', 'c')) == 'cba'", "assert reverse_tuple_to_string(('1', '2', '3')) == '321'", "assert reverse_tuple_to_string(('!', '@', '#')) == '#@!'", "assert reverse_tuple_to_string(('a',)) == 'a'", "assert reverse_tuple_to_string(()) == ''", "assert reverse_tuple_to_string(('a', 'b', 'c', 'd', 'e')) == 'edcba'", "assert reverse_tuple_to_string(('hello', 'world')) == 'worldhello'", "assert reverse_tuple_to_string(('racecar',)) == 'racecar'", "assert reverse_tuple_to_string(('123', '456', '789')) == '789456123'", "assert reverse_tuple_to_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == 'jihgfedcba'", "assert reverse_tuple_to_string((' ', ' ', ' ')) == '   '", "assert reverse_tuple_to_string(('a', ' ', 'b')) == 'b a'", "assert reverse_tuple_to_string(('a', 'b', 'c', ' ', 'd', 'e', 'f')) == 'fed cba'", "assert reverse_tuple_to_string(('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')) == '0987654321'", "assert reverse_tuple_to_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 'zyxwvutsrqponmlkjihgfedcba'"], "challenge_test_list": []}
{"text": "Write a function to convert a list of integers to a string.", "code": "def int_list_to_string(lst):\n    return ''.join(map(str, lst))", "task_id": "132_05180187-7649-4eab-82a8-b3d6b49c8279", "test_setup_code": "", "test_list": ["assert int_list_to_string([1, 2, 3]) == '123'", "assert int_list_to_string([]) == ''", "assert int_list_to_string([0]) == '0'", "assert int_list_to_string([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == '9876543210'", "assert int_list_to_string([1, 0, 1, 0]) == '1010'", "assert int_list_to_string([123, 456, 789]) == '123456789'", "assert int_list_to_string([0, 0, 0, 0]) == '0000'", "assert int_list_to_string([1, -2, 3]) == '1-23'", "assert int_list_to_string([-1, -2, -3]) == '-1-2-3'", "assert int_list_to_string([10, 20, 30]) == '102030'", "assert int_list_to_string([100, 200, 300]) == '100200300'", "assert int_list_to_string([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '12345678910'", "assert int_list_to_string([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == '0123456789'", "assert int_list_to_string([111, 222, 333]) == '111222333'", "assert int_list_to_string([5, 4, 3, 2, 1]) == '54321'"], "challenge_test_list": []}
{"text": "Write a function to convert a list of words to a single string with spaces between words.", "code": "def list_of_words_to_string(lst):\n    return ' '.join(lst)", "task_id": "132_1c2ba37c-f5f3-4a32-bdd2-38611d9d201b", "test_setup_code": "", "test_list": ["assert list_of_words_to_string(['hello', 'world']) == 'hello world'", "assert list_of_words_to_string(['one', 'two', 'three']) == 'one two three'", "assert list_of_words_to_string(['a', 'b', 'c', 'd']) == 'a b c d'", "assert list_of_words_to_string(['']) == ''", "assert list_of_words_to_string(['singleword']) == 'singleword'", "assert list_of_words_to_string(['multiple', 'spaces', 'between', 'words']) == 'multiple spaces between words'", "assert list_of_words_to_string(['edge', 'case', 'with', 'punctuation!']) == 'edge case with punctuation!'", "assert list_of_words_to_string(['123', '456', '789']) == '123 456 789'", "assert list_of_words_to_string(['mixed', 'CASE', 'words']) == 'mixed CASE words'", "assert list_of_words_to_string(['special', 'characters', '@', '#', '$']) == 'special characters @ # $'", "assert list_of_words_to_string(['', '', '']) == '  '", "assert list_of_words_to_string(['leading', '', 'spaces']) == 'leading  spaces'", "assert list_of_words_to_string(['trailing', 'spaces', '']) == 'trailing spaces '", "assert list_of_words_to_string(['multiple', '', '', 'empty', 'strings']) == 'multiple   empty strings'", "assert list_of_words_to_string([]) == ''"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with commas between elements.", "code": "def tuple_to_comma_string(tup):\n    return ','.join(tup)", "task_id": "132_b8e6aca2-28d3-4e78-a2cd-e53267dc150e", "test_setup_code": "", "test_list": ["assert tuple_to_comma_string(('a', 'b', 'c')) == 'a,b,c'", "assert tuple_to_comma_string(('1', '2', '3')) == '1,2,3'", "assert tuple_to_comma_string(('', '', '')) == ',,'", "assert tuple_to_comma_string(('hello', 'world')) == 'hello,world'", "assert tuple_to_comma_string(('single',)) == 'single'", "assert tuple_to_comma_string(()) == ''", "assert tuple_to_comma_string(('a', 'b', 'c', 'd', 'e')) == 'a,b,c,d,e'", "assert tuple_to_comma_string(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')) == '1,2,3,4,5,6,7,8,9,10'", "assert tuple_to_comma_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == 'a,b,c,d,e,f,g,h,i,j'", "assert tuple_to_comma_string(('apple', 'banana', 'cherry')) == 'apple,banana,cherry'", "assert tuple_to_comma_string(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15')) == '1,2,3,4,5,6,7,8,9,10,11,12,13,14,15'", "assert tuple_to_comma_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z'", "assert tuple_to_comma_string(('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')) == '!,@,#,$,%,^,&,*,(,)'", "assert tuple_to_comma_string(('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')) == '1,2,3,4,5,6,7,8,9,0'", "assert tuple_to_comma_string(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == 'a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z'"], "challenge_test_list": []}
{"text": "Write a function to convert a list of characters to an uppercase string.", "code": "def list_to_uppercase_string(lst):\n    return ''.join(lst).upper()", "task_id": "132_9dac5506-20a1-482b-ba4d-e33ec5eb4658", "test_setup_code": "", "test_list": ["assert list_to_uppercase_string(['a', 'b', 'c']) == 'ABC'", "assert list_to_uppercase_string(['A', 'B', 'C']) == 'ABC'", "assert list_to_uppercase_string(['a', 'B', 'c']) == 'ABC'", "assert list_to_uppercase_string(['x', 'y', 'z']) == 'XYZ'", "assert list_to_uppercase_string(['1', '2', '3']) == '123'", "assert list_to_uppercase_string(['!', '@', '#']) == '!@#'", "assert list_to_uppercase_string([]) == ''", "assert list_to_uppercase_string(['a']) == 'A'", "assert list_to_uppercase_string(['A']) == 'A'", "assert list_to_uppercase_string(['a', 'a', 'a']) == 'AAA'", "assert list_to_uppercase_string(['a', '1', 'b', '2']) == 'A1B2'", "assert list_to_uppercase_string([' ', 'a', ' ', 'b', ' ']) == ' A B '", "assert list_to_uppercase_string(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 'ABCDEFGHIJ'", "assert list_to_uppercase_string(['a', 'B', 'c', 'D', 'e', 'F', 'g', 'H', 'i', 'J']) == 'ABCDEFGHIJ'", "assert list_to_uppercase_string(['a', 'A', 'a', 'A', 'a', 'A']) == 'AAAAAA'"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with a given prefix before each element.", "code": "def tuple_to_string_with_prefix(tup, prefix):\n    return ''.join(prefix + elem for elem in tup)", "task_id": "132_76edf3be-e974-44e9-a99a-6942466c0583", "test_setup_code": "", "test_list": ["assert tuple_to_string_with_prefix((), 'pre') == ''", "assert tuple_to_string_with_prefix(('a',), 'pre') == 'prea'", "assert tuple_to_string_with_prefix(('a', 'b', 'c'), 'pre') == 'preaprebprec'", "assert tuple_to_string_with_prefix(('1', '2', '3'), 'num') == 'num1num2num3'", "assert tuple_to_string_with_prefix(('apple', 'banana'), 'fruit_') == 'fruit_applefruit_banana'", "assert tuple_to_string_with_prefix(('hello', 'world'), '') == 'helloworld'", "assert tuple_to_string_with_prefix(('hello', 'world'), ' ') == ' hello world'", "assert tuple_to_string_with_prefix(('a', 'b', 'c'), '123') == '123a123b123c'", "assert tuple_to_string_with_prefix(('x', 'y', 'z'), 'xyz') == 'xyzxxyzyz'", "assert tuple_to_string_with_prefix(('a', 'b', 'c', 'd', 'e'), 'pre') == 'preaprebprecpreprede'", "assert tuple_to_string_with_prefix(('a', 'b', 'c'), 'pre_') == 'pre_a_pre_b_pre_c'", "assert tuple_to_string_with_prefix(('1', '2', '3'), '0') == '01_02_03'", "assert tuple_to_string_with_prefix(('longword', 'short'), 'pre') == 'prelongwordpreshort'", "assert tuple_to_string_with_prefix(('a', 'b', 'c'), 'prefix') == 'prefixaprefixbprefixc'", "assert tuple_to_string_with_prefix(('a', 'b', 'c'), 'pre pre') == 'pre prea pre preb pre prec'"], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples to a single string, where each tuple is converted to a string first.", "code": "def list_of_tuples_to_string(lst):\n    return ''.join(''.join(tup) for tup in lst)", "task_id": "132_a272c8eb-62b1-4b06-988c-984b63a3e7e7", "test_setup_code": "", "test_list": ["assert list_of_tuples_to_string([]) == ''", "assert list_of_tuples_to_string([('a', 'b')]) == 'ab'", "assert list_of_tuples_to_string([('a', 'b'), ('c', 'd')]) == 'abcd'", "assert list_of_tuples_to_string([('1', '2'), ('3', '4')]) == '1234'", "assert list_of_tuples_to_string([('hello', 'world')]) == 'helloworld'", "assert list_of_tuples_to_string([('a',), ('b',), ('c',)]) == 'abc'", "assert list_of_tuples_to_string([('a', 'b', 'c')]) == 'abc'", "assert list_of_tuples_to_string([('a', 'b', 'c'), ('d', 'e', 'f')]) == 'abcdef'", "assert list_of_tuples_to_string([('a', 'b', 'c'), ('d', 'e')]) == 'abcde'", "assert list_of_tuples_to_string([('a', 'b'), ('c', 'd', 'e')]) == 'abcde'", "assert list_of_tuples_to_string([('a', 'b'), ('', 'd')]) == 'abd'", "assert list_of_tuples_to_string([('a', 'b'), ('c', ''), ('d', 'e')]) == 'abcde'", "assert list_of_tuples_to_string([('a', 'b'), ('c', 'd'), ('e', 'f')]) == 'abcdef'", "assert list_of_tuples_to_string([('a', 'b', 'c'), ('d', 'e', 'f'), ('g', 'h', 'i')]) == 'abcdefghi'", "assert list_of_tuples_to_string([('a', 'b'), ('c', 'd'), ('e', 'f'), ('g', 'h')]) == 'abcdefgh'"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with a given separator between elements.", "code": "def tuple_to_string_with_separator(tup, sep):\n    return sep.join(tup)", "task_id": "132_7d0daa48-b404-4c28-9b79-1c61179be946", "test_setup_code": "", "test_list": ["assert tuple_to_string_with_separator(('a', 'b', 'c'), ',') == 'a,b,c'", "assert tuple_to_string_with_separator(('1', '2', '3'), '-') == '1-2-3'", "assert tuple_to_string_with_separator(('hello', 'world'), ' ') == 'hello world'", "assert tuple_to_string_with_separator(('apple', 'banana', 'cherry'), ';') == 'apple;banana;cherry'", "assert tuple_to_string_with_separator(('', '', ''), ',') == ',,'", "assert tuple_to_string_with_separator(('single',), ',') == 'single'", "assert tuple_to_string_with_separator((), ',') == ''", "assert tuple_to_string_with_separator(('a', 'b', 'c'), '') == 'abc'", "assert tuple_to_string_with_separator(('a', 'b', 'c'), '---') == 'a---b---c'", "assert tuple_to_string_with_separator(('1', '2', '3'), '123') == '112323'", "assert tuple_to_string_with_separator(('a', 'b', 'c'), ' ') == 'a b c'", "assert tuple_to_string_with_separator(('a', 'b', 'c'), '!!!') == 'a!!!b!!!c'", "assert tuple_to_string_with_separator(('a', 'b', 'c'), 'a') == 'aabac'", "assert tuple_to_string_with_separator(('apple', 'banana'), '') == 'applebanana'", "assert tuple_to_string_with_separator(('a', 'b', 'c', 'd', 'e'), ', ') == 'a, b, c, d, e'"], "challenge_test_list": []}
{"text": "Write a function to convert a list of numbers to a string with a space between each number.", "code": "def list_of_numbers_to_string(lst):\n    return ' '.join(map(str, lst))", "task_id": "132_0f19e2ea-c50f-4391-8b41-52f1de91b3a9", "test_setup_code": "", "test_list": ["assert list_of_numbers_to_string([1, 2, 3]) == '1 2 3'", "assert list_of_numbers_to_string([]) == ''", "assert list_of_numbers_to_string([0]) == '0'", "assert list_of_numbers_to_string([100, 200, 300]) == '100 200 300'", "assert list_of_numbers_to_string([-1, -2, -3]) == '-1 -2 -3'", "assert list_of_numbers_to_string([1.1, 2.2, 3.3]) == '1.1 2.2 3.3'", "assert list_of_numbers_to_string([0, 0, 0]) == '0 0 0'", "assert list_of_numbers_to_string([123456789]) == '123456789'", "assert list_of_numbers_to_string([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == '1 2 3 4 5 6 7 8 9 10'", "assert list_of_numbers_to_string([1, -1, 2, -2, 3, -3]) == '1 -1 2 -2 3 -3'", "assert list_of_numbers_to_string([0.1, 0.2, 0.3]) == '0.1 0.2 0.3'", "assert list_of_numbers_to_string([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15'", "assert list_of_numbers_to_string([999999999, -999999999]) == '999999999 -999999999'", "assert list_of_numbers_to_string([1.23456789, 2.3456789, 3.456789]) == '1.23456789 2.3456789 3.456789'", "assert list_of_numbers_to_string([0, 1, 0, 1, 0, 1]) == '0 1 0 1 0 1'"], "challenge_test_list": []}
{"text": "Write a function to find the item with the second highest frequency in a given list.", "code": "from collections import defaultdict\n\ndef second_max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    sorted_items = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1]", "task_id": "130_1ae09312-fa67-4783-b769-ba1ce5395455", "test_setup_code": "", "test_list": ["assert second_max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (3, 3)", "assert second_max_occurrences([1, 1, 2, 2, 3, 3, 3]) == (2, 2)", "assert second_max_occurrences([5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7]) == (6, 4)", "assert second_max_occurrences([10, 20, 20, 30, 30, 30, 40, 40, 40, 40, 50]) == (30, 3)", "assert second_max_occurrences([1, 1, 1, 2, 2, 2, 2, 3, 3]) == (1, 3)", "assert second_max_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (2, 1)", "assert second_max_occurrences([1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5]) == (4, 3)", "assert second_max_occurrences([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6]) == (5, 4)", "assert second_max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6]) == (5, 4)", "assert second_max_occurrences([1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) == (2, 3)", "assert second_max_occurrences([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == (2, 2)", "assert second_max_occurrences([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == (4, 4)", "assert second_max_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]) == (4, 4)", "assert second_max_occurrences([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5]) == (4, 4)", "assert second_max_occurrences([1, 1, 1, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]) == (3, 6)"], "challenge_test_list": []}
{"text": "Write a function to find the item with the minimum frequency in a given list.", "code": "from collections import defaultdict\n\ndef min_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = min(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_7f568d32-e729-4326-8906-b6574a1d7e87", "test_setup_code": "", "test_list": ["assert min_occurrences([1, 2, 2, 3, 3, 3]) == (1, 1)", "assert min_occurrences([4, 4, 4, 4, 4]) == (4, 5)", "assert min_occurrences([1, 2, 3, 4, 5]) == (1, 1)", "assert min_occurrences([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (1, 2)", "assert min_occurrences([5, 5, 5, 6, 6, 7, 7, 7, 8]) == (6, 2)", "assert min_occurrences([9, 9, 9, 10, 10, 10, 10, 11]) == (11, 1)", "assert min_occurrences([0, 0, 1, 1, 1, 2, 2, 2, 2]) == (0, 2)", "assert min_occurrences([1]) == (1, 1)", "assert min_occurrences([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert min_occurrences([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == (10, 1)", "assert min_occurrences([1, 2, 3, 1, 2, 1]) == (3, 1)", "assert min_occurrences([1, 1, 1, 2, 2, 3, 3, 3, 3]) == (2, 2)", "assert min_occurrences([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (1, 1)", "assert min_occurrences([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == (1, 1)", "assert min_occurrences([1, 1, 1, 1, 2, 2, 2, 3, 3, 4]) == (4, 1)"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements in the given list.", "code": "def unique_elements(nums):\n    return list(set(nums))", "task_id": "130_f5d75487-c711-445b-803b-3287709eaa21", "test_setup_code": "", "test_list": ["assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 1, 1, 1, 1]) == [1]", "assert unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert unique_elements([]) == []", "assert unique_elements([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5]", "assert unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([1]) == [1]", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]", "assert unique_elements([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"], "challenge_test_list": []}
{"text": "Write a function to return a dictionary with the frequency of each element in the given list.", "code": "from collections import defaultdict\n\ndef element_frequencies(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    return dict", "task_id": "130_3f32c630-b23d-4727-8f17-3f0be256df40", "test_setup_code": "", "test_list": ["assert element_frequencies([]) == {}", "assert element_frequencies([1]) == {1: 1}", "assert element_frequencies([1, 1, 1]) == {1: 3}", "assert element_frequencies([1, 2, 3]) == {1: 1, 2: 1, 3: 1}", "assert element_frequencies([1, 2, 2, 3, 3, 3]) == {1: 1, 2: 2, 3: 3}", "assert element_frequencies([0, 0, 0, 0]) == {0: 4}", "assert element_frequencies([-1, -1, -2, -2, -2]) == {-1: 2, -2: 3}", "assert element_frequencies([1, 2, 3, 1, 2, 3, 1, 2, 3]) == {1: 3, 2: 3, 3: 3}", "assert element_frequencies([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == {5: 10}", "assert element_frequencies([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}", "assert element_frequencies([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == {1: 2, 2: 2, 3: 2, 4: 2, 5: 2}", "assert element_frequencies([100, 200, 300, 100, 200, 300, 100, 200, 300]) == {100: 3, 200: 3, 300: 3}", "assert element_frequencies(['a', 'b', 'a', 'b', 'a', 'c']) == {'a': 3, 'b': 2, 'c': 1}", "assert element_frequencies(['apple', 'banana', 'apple', 'orange', 'banana', 'apple']) == {'apple': 3, 'banana': 2, 'orange': 1}", "assert element_frequencies([True, False, True, True, False]) == {True: 3, False: 2}"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent even number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_even(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i % 2 == 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_36d40b3a-f44f-4234-8ed1-ae0807bade6f", "test_setup_code": "", "test_list": ["assert most_frequent_even([1, 2, 2, 3, 4, 4, 4, 5]) == 4", "assert most_frequent_even([1, 3, 5, 7]) == None", "assert most_frequent_even([2, 2, 2, 2, 2]) == 2", "assert most_frequent_even([0, 1, 2, 2, 3, 4, 4, 4, 6, 6, 6, 6]) == 6", "assert most_frequent_even([]) == None", "assert most_frequent_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2", "assert most_frequent_even([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 10", "assert most_frequent_even([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert most_frequent_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10]) == 2", "assert most_frequent_even([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == None", "assert most_frequent_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40]) == 2", "assert most_frequent_even([2, 2, 2, 3, 3, 3, 4, 4, 4]) == 2", "assert most_frequent_even([2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10]) == 2", "assert most_frequent_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10, 2, 4, 6, 8, 10]) == 2", "assert most_frequent_even([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39]) == None"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent odd number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_odd(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i % 2 != 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_b9b57f29-7370-4962-a4ab-fc392601db45", "test_setup_code": "", "test_list": ["assert most_frequent_odd([1, 2, 3, 4, 5, 1, 3, 3]) == (3, 3)", "assert most_frequent_odd([2, 4, 6, 8, 10]) == None", "assert most_frequent_odd([1, 1, 1, 1, 1]) == (1, 5)", "assert most_frequent_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == (1, 1)", "assert most_frequent_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert most_frequent_odd([11, 11, 11, 11, 11, 11, 11, 11, 11, 11]) == (11, 10)", "assert most_frequent_odd([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == (1, 5)", "assert most_frequent_odd([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == (3, 10)", "assert most_frequent_odd([1, 3, 5, 7, 9, 3, 5, 7, 9, 3]) == (3, 3)", "assert most_frequent_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 1, 1]) == (1, 4)", "assert most_frequent_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19, 19]) == (19, 3)", "assert most_frequent_odd([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 1, 1, 1]) == (1, 5)", "assert most_frequent_odd([2, 4, 6, 8, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 19, 19, 19]) == (19, 4)", "assert most_frequent_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (1, 11)", "assert most_frequent_odd([]) == None"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent negative number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_negative(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i < 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_9dfc9bf7-b20b-44ac-b833-4fc185148c85", "test_setup_code": "", "test_list": ["assert most_frequent_negative([-1, -2, -3, -1, -2, -1]) == (-1, 3)", "assert most_frequent_negative([-1, -1, -1, -1]) == (-1, 4)", "assert most_frequent_negative([-1, -2, -3, -4, -5]) == (-1, 1)", "assert most_frequent_negative([1, 2, 3, 4, 5]) == None", "assert most_frequent_negative([-1, -2, -2, -3, -3, -3]) == (-3, 3)", "assert most_frequent_negative([-1, -2, -2, -3, -3, -3, -2]) == (-2, 3)", "assert most_frequent_negative([-1, -1, -2, -2, -3, -3, -3, -3]) == (-3, 4)", "assert most_frequent_negative([0, -1, -1, -1, 1, 2, 3]) == (-1, 3)", "assert most_frequent_negative([-1, -2, -3, -4, -4, -4, -4, -5, -5, -5]) == (-4, 4)", "assert most_frequent_negative([-10, -20, -30, -40, -50, -10, -10, -10]) == (-10, 4)", "assert most_frequent_negative([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == (-1, 1)", "assert most_frequent_negative([-1, -1, -1, -2, -2, -2, -3, -3, -3, -3]) == (-3, 4)", "assert most_frequent_negative([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -10, -10]) == (-10, 3)", "assert most_frequent_negative([-1, -1, -1, -1, -2, -2, -2, -2, -2]) == (-2, 5)", "assert most_frequent_negative([]) == None"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent positive number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_positive(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i > 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_c1104bf5-e4b2-4ae5-900f-d725ce5b619b", "test_setup_code": "", "test_list": ["assert most_frequent_positive([1, 2, 3, 2, 1, 2]) == (2, 3)", "assert most_frequent_positive([4, 4, 4, 4, 4]) == (4, 5)", "assert most_frequent_positive([1, -1, 1, -1, 1]) == (1, 3)", "assert most_frequent_positive([0, 0, 0, 0, 0]) == (0, 0)", "assert most_frequent_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 1)", "assert most_frequent_positive([-1, -2, -3, -4, -5]) == (0, 0)", "assert most_frequent_positive([100, 200, 300, 100, 200, 100]) == (100, 3)", "assert most_frequent_positive([1, 1, 1, 2, 2, 3, 3, 3, 3]) == (3, 4)", "assert most_frequent_positive([1]) == (1, 1)", "assert most_frequent_positive([]) == (0, 0)", "assert most_frequent_positive([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1]) == (1, 3)", "assert most_frequent_positive([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == (5, 10)", "assert most_frequent_positive([1, 2, 3, 1, 2, 3, 1, 2, 3]) == (1, 3)", "assert most_frequent_positive([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == (10, 1)", "assert most_frequent_positive([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == (4, 4)"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent prime number in the given list.", "code": "from collections import defaultdict\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef most_frequent_prime(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if is_prime(i):\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_56bfb8f2-b4d3-4dfd-803d-77a28eb33a9e", "test_setup_code": "", "test_list": ["assert most_frequent_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 2", "assert most_frequent_prime([4, 6, 8, 9, 10, 12, 14, 15, 16, 18]) == None", "assert most_frequent_prime([2, 2, 3, 3, 3, 5, 5, 5, 5, 7]) == 5", "assert most_frequent_prime([31, 31, 31, 17, 17, 17, 17, 19, 19, 23]) == 17", "assert most_frequent_prime([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2", "assert most_frequent_prime([101, 103, 107, 109, 113, 101, 103, 107, 109, 113]) == 101", "assert most_frequent_prime([2]) == 2", "assert most_frequent_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 29, 29]) == 29", "assert most_frequent_prime([37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 37", "assert most_frequent_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113]) == 2", "assert most_frequent_prime([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2", "assert most_frequent_prime([5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert most_frequent_prime([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 3", "assert most_frequent_prime([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == 7", "assert most_frequent_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the most frequent non-prime number in the given list.", "code": "from collections import defaultdict\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef most_frequent_non_prime(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if not is_prime(i):\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_7cdec1ec-0f07-403c-b927-1ad6b064d737", "test_setup_code": "", "test_list": ["assert most_frequent_non_prime([4, 4, 6, 8, 8, 8, 9]) == 8", "assert most_frequent_non_prime([10, 15, 15, 15, 20, 20, 25]) == 15", "assert most_frequent_non_prime([2, 3, 5, 7, 11, 13, 17]) == None", "assert most_frequent_non_prime([0, 1, 1, 1, 2, 2, 4]) == 1", "assert most_frequent_non_prime([9, 9, 9, 10, 10, 10, 10]) == 10", "assert most_frequent_non_prime([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]) == 4", "assert most_frequent_non_prime([21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 21", "assert most_frequent_non_prime([100, 100, 100, 101, 101, 102, 102, 102]) == 100", "assert most_frequent_non_prime([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert most_frequent_non_prime([6, 6, 6, 6, 7, 7, 7, 7, 7]) == 7", "assert most_frequent_non_prime([30, 30, 30, 31, 31, 32, 32, 32, 32]) == 32", "assert most_frequent_non_prime([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 2", "assert most_frequent_non_prime([3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) == None", "assert most_frequent_non_prime([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0", "assert most_frequent_non_prime([50, 51, 52, 53, 54, 55, 56, 57, 58, 59]) == 50"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the even numbers of a given list of numbers using lambda function.", "code": "def sum_even_numbers(nums):\n  even_numbers = list(filter(lambda x: x % 2 == 0, nums))\n  return sum(even_numbers)", "task_id": "133_46161901-2eb6-4457-9cb3-095951348645", "test_setup_code": "", "test_list": ["assert sum_even_numbers([1, 2, 3, 4, 5, 6]) == 12", "assert sum_even_numbers([10, 20, 30, 40]) == 100", "assert sum_even_numbers([1, 3, 5, 7]) == 0", "assert sum_even_numbers([-2, -4, -6, -8]) == -20", "assert sum_even_numbers([0, 1, 2, 3, 4, 5]) == 6", "assert sum_even_numbers([2]) == 2", "assert sum_even_numbers([1]) == 0", "assert sum_even_numbers([]) == 0", "assert sum_even_numbers([100, 200, 300, 400, 500]) == 1500", "assert sum_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert sum_even_numbers([11, 22, 33, 44, 55, 66, 77, 88, 99]) == 220", "assert sum_even_numbers([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110", "assert sum_even_numbers([-1, -2, -3, -4, -5, -6]) == -12", "assert sum_even_numbers([1, 2, 2, 3, 4, 4, 5, 6, 6]) == 24", "assert sum_even_numbers([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in a given list of numbers using lambda function.", "code": "def count_positive_numbers(nums):\n  positive_numbers = list(filter(lambda x: x > 0, nums))\n  return len(positive_numbers)", "task_id": "133_380505a7-11cd-46f2-95a5-6fb0f91a2868", "test_setup_code": "", "test_list": ["assert count_positive_numbers([1, -2, 3, 4, -5]) == 3", "assert count_positive_numbers([-1, -2, -3, -4, -5]) == 0", "assert count_positive_numbers([0, 0, 0, 0, 0]) == 0", "assert count_positive_numbers([1, 2, 3, 4, 5]) == 5", "assert count_positive_numbers([]) == 0", "assert count_positive_numbers([100, -100, 200, -200, 0]) == 2", "assert count_positive_numbers([0.1, -0.2, 0.3, -0.4, 0.5]) == 3", "assert count_positive_numbers([1, 1, 1, 1, 1]) == 5", "assert count_positive_numbers([-1, -1, -1, -1, -1]) == 0", "assert count_positive_numbers([1, -1, 1, -1, 1]) == 3", "assert count_positive_numbers([10**6, -10**6, 10**7, -10**7, 0]) == 2", "assert count_positive_numbers([0.0001, -0.0001, 0.0002, -0.0002, 0]) == 2", "assert count_positive_numbers([1, 2, 3, -1, -2, -3, 0]) == 3", "assert count_positive_numbers([1.5, 2.5, -1.5, -2.5, 0]) == 2", "assert count_positive_numbers([float('inf'), float('-inf'), float('nan')]) == 1"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the numbers in a given list using lambda function.", "code": "def sum_of_squares(nums):\n  squares = list(map(lambda x: x**2, nums))\n  return sum(squares)", "task_id": "133_c6f7f048-7e18-4e8a-9fdc-efbcee7311c8", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([0, 0, 0]) == 0", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([]) == 0", "assert sum_of_squares([10, 20, 30]) == 1400", "assert sum_of_squares([1, -1, 1, -1]) == 4", "assert sum_of_squares([100, 200, 300]) == 140000", "assert sum_of_squares([1.5, 2.5, 3.5]) == 21.75", "assert sum_of_squares([0.1, 0.2, 0.3]) == 0.14", "assert sum_of_squares([-10, 10, -10, 10]) == 400", "assert sum_of_squares([2, 4, 6, 8]) == 120", "assert sum_of_squares([1, 1, 1, 1, 1]) == 5", "assert sum_of_squares([3, 3, 3]) == 27", "assert sum_of_squares([7, 11, 13]) == 339"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string using lambda function.", "code": "def count_vowels(s):\n  vowels = list(filter(lambda x: x in 'aeiouAEIOU', s))\n  return len(vowels)", "task_id": "133_2ba86a3c-d29a-43f5-a2fe-945d2247e3cc", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python is fun!') == 3", "assert count_vowels('1234567890') == 0", "assert count_vowels('AaEeIiOoUu') == 10", "assert count_vowels('Why do you ask?') == 4", "assert count_vowels('') == 0", "assert count_vowels('A quick movement of the enemy will jeopardize six gunboats') == 16", "assert count_vowels('Pack my box with five dozen liquor jugs') == 11", "assert count_vowels('Sphinx of black quartz, judge my vow') == 7"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the lengths of the words in a given list using lambda function.", "code": "def sum_of_lengths(words):\n  lengths = list(map(lambda x: len(x), words))\n  return sum(lengths)", "task_id": "133_dc27faac-162b-4cac-b79f-9a8949f77b35", "test_setup_code": "", "test_list": ["assert sum_of_lengths(['hello', 'world']) == 10", "assert sum_of_lengths(['a', 'ab', 'abc']) == 6", "assert sum_of_lengths(['']) == 0", "assert sum_of_lengths(['', 'a', 'ab']) == 3", "assert sum_of_lengths(['one', 'two', 'three', 'four']) == 15", "assert sum_of_lengths(['singleword']) == 10", "assert sum_of_lengths(['this', 'is', 'a', 'test']) == 10", "assert sum_of_lengths(['123', '4567', '89']) == 9", "assert sum_of_lengths(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 7", "assert sum_of_lengths(['longword', 'short', 'tiny']) == 17", "assert sum_of_lengths(['']) == 0", "assert sum_of_lengths(['a' * 1000]) == 1000", "assert sum_of_lengths(['a', 'ab', 'abc', 'abcd', 'abcde']) == 15", "assert sum_of_lengths(['spaces', 'in', 'the', 'middle']) == 20", "assert sum_of_lengths(['mix', 'of', 'UPPER', 'and', 'lower']) == 18"], "challenge_test_list": []}
{"text": "Write a function to filter out words longer than a given length n from a list of words using lambda function.", "code": "def filter_long_words(words, n):\n  long_words = list(filter(lambda x: len(x) > n, words))\n  return long_words", "task_id": "133_7405b55f-b45f-484f-a4bf-3e5f0daf16a8", "test_setup_code": "", "test_list": ["assert filter_long_words(['apple', 'banana', 'cherry', 'date'], 5) == ['banana', 'cherry']", "assert filter_long_words(['a', 'ab', 'abc', 'abcd', 'abcde'], 3) == ['abcd', 'abcde']", "assert filter_long_words(['hello', 'world', 'python', 'code'], 4) == ['hello', 'world', 'python']", "assert filter_long_words([], 3) == []", "assert filter_long_words(['short', 'tiny', 'small'], 4) == ['short', 'small']", "assert filter_long_words(['one', 'two', 'three', 'four'], 3) == ['three', 'four']", "assert filter_long_words(['a', 'b', 'c'], 1) == []", "assert filter_long_words(['example', 'test', 'sample'], 6) == ['example']", "assert filter_long_words(['longword', 'short', 'tiny'], 5) == ['longword', 'short']", "assert filter_long_words(['a', 'ab', 'abc', 'abcd'], 2) == ['abc', 'abcd']", "assert filter_long_words(['apple', 'banana', 'cherry'], 6) == ['banana', 'cherry']", "assert filter_long_words(['one', 'two', 'three'], 4) == ['three']", "assert filter_long_words(['', 'a', 'ab', 'abc'], 0) == ['a', 'ab', 'abc']", "assert filter_long_words(['same', 'length', 'words'], 4) == ['length', 'words']", "assert filter_long_words(['this', 'is', 'a', 'test'], 2) == ['this', 'test']"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the numbers in a given list using lambda function.", "code": "def sum_of_cubes(nums):\n  cubes = list(map(lambda x: x**3, nums))\n  return sum(cubes)", "task_id": "133_4e11d1d7-7b96-4113-ae96-7ae9c0fce8d9", "test_setup_code": "", "test_list": ["assert sum_of_cubes([1, 2, 3]) == 36", "assert sum_of_cubes([0, 0, 0]) == 0", "assert sum_of_cubes([-1, -2, -3]) == -36", "assert sum_of_cubes([1]) == 1", "assert sum_of_cubes([2]) == 8", "assert sum_of_cubes([-1]) == -1", "assert sum_of_cubes([0]) == 0", "assert sum_of_cubes([10, 20, 30]) == 36000", "assert sum_of_cubes([-10, -20, -30]) == -36000", "assert sum_of_cubes([1, -1, 2, -2]) == 0", "assert sum_of_cubes([100]) == 1000000", "assert sum_of_cubes([1, 2, 3, 4, 5]) == 225", "assert sum_of_cubes([]) == 0", "assert sum_of_cubes([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_cubes([3, 3, 3]) == 81"], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in a given string using lambda function.", "code": "def count_uppercase(s):\n  uppercase_letters = list(filter(lambda x: x.isupper(), s))\n  return len(uppercase_letters)", "task_id": "133_d2d60a3e-5bdd-4800-a50f-a25644f90137", "test_setup_code": "", "test_list": ["assert count_uppercase('Hello World') == 2", "assert count_uppercase('') == 0", "assert count_uppercase('ALLUPPERCASE') == 12", "assert count_uppercase('nouppercase') == 0", "assert count_uppercase('MiXeDCaSe') == 4", "assert count_uppercase('12345') == 0", "assert count_uppercase('123ABCdef') == 3", "assert count_uppercase('!@#$%^&*()') == 0", "assert count_uppercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 13", "assert count_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 26", "assert count_uppercase('aA') == 1", "assert count_uppercase('Zz') == 1", "assert count_uppercase('The Quick Brown Fox Jumps Over The Lazy Dog') == 9", "assert count_uppercase('Python3.8') == 1", "assert count_uppercase('UPPERlowerUPPER') == 10"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the absolute values of the numbers in a given list using lambda function.", "code": "def sum_of_absolute_values(nums):\n  absolute_values = list(map(lambda x: abs(x), nums))\n  return sum(absolute_values)", "task_id": "133_41a6c7ec-cd5f-4f26-9082-b1d48d2f4027", "test_setup_code": "", "test_list": ["assert sum_of_absolute_values([1, -2, 3, -4, 5]) == 15", "assert sum_of_absolute_values([-1, -2, -3, -4, -5]) == 15", "assert sum_of_absolute_values([0, 0, 0, 0, 0]) == 0", "assert sum_of_absolute_values([1]) == 1", "assert sum_of_absolute_values([-1]) == 1", "assert sum_of_absolute_values([]) == 0", "assert sum_of_absolute_values([100, -200, 300, -400, 500]) == 1500", "assert sum_of_absolute_values([-1000, 2000, -3000, 4000, -5000]) == 15000", "assert sum_of_absolute_values([0, -1, 2, -3, 4, -5, 6, -7, 8, -9, 10]) == 55", "assert sum_of_absolute_values([1.5, -2.5, 3.5, -4.5]) == 12.0", "assert sum_of_absolute_values([-0.1, 0.2, -0.3, 0.4]) == 1.0", "assert sum_of_absolute_values([999999, -999999]) == 1999998", "assert sum_of_absolute_values([int(1e6), -int(1e6)]) == 2000000", "assert sum_of_absolute_values([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 10", "assert sum_of_absolute_values([1, -2, 3, -4, 5, -6, 7, -8, 9, -10]) == 55"], "challenge_test_list": []}
{"text": "Write a python function to check whether the first element of the given array is even or odd after performing an operation p times.", "code": "def check_first(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum += arr[i]\n    if p == 1:\n        if arr[0] % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_1cbcaae4-c9f1-4da6-b49a-148b2e7fda97", "test_setup_code": "", "test_list": ["assert check_first([2, 3, 4], 3, 1) == 'EVEN'", "assert check_first([1, 2, 3], 3, 1) == 'ODD'", "assert check_first([0, 1, 2], 3, 1) == 'EVEN'", "assert check_first([2, 4, 6], 3, 2) == 'EVEN'", "assert check_first([1, 3, 5], 3, 2) == 'EVEN'", "assert check_first([2], 1, 1) == 'EVEN'", "assert check_first([1], 1, 1) == 'ODD'", "assert check_first([2, 2, 2, 2], 4, 1) == 'EVEN'", "assert check_first([1, 1, 1, 1], 4, 1) == 'ODD'", "assert check_first([2, 3, 4, 5], 4, 0) == 'EVEN'", "assert check_first([1, 2, 3, 4], 4, 0) == 'EVEN'", "assert check_first([2, 3, 4, 5], 4, 3) == 'EVEN'", "assert check_first([1, 2, 3, 4], 4, 3) == 'EVEN'", "assert check_first([0], 1, 1) == 'EVEN'", "assert check_first([1, 0, 0, 0], 4, 1) == 'ODD'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the given array is even or odd after performing an operation p times.", "code": "def check_sum(arr, n, p):\n    _sum = sum(arr)\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_e45feb42-a169-421c-98aa-bf5be73c0952", "test_setup_code": "", "test_list": ["assert check_sum([1, 2, 3], 3, 1) == 'EVEN'", "assert check_sum([1, 2, 3], 3, 2) == 'EVEN'", "assert check_sum([1, 1, 1], 3, 1) == 'ODD'", "assert check_sum([2, 2, 2], 3, 1) == 'EVEN'", "assert check_sum([2, 2, 2], 3, 3) == 'EVEN'", "assert check_sum([1], 1, 1) == 'ODD'", "assert check_sum([2], 1, 1) == 'EVEN'", "assert check_sum([1, 1, 1, 1], 4, 1) == 'EVEN'", "assert check_sum([1, 1, 1, 1], 4, 2) == 'EVEN'", "assert check_sum([1, 2, 3, 4, 5], 5, 1) == 'ODD'", "assert check_sum([1, 2, 3, 4, 5], 5, 2) == 'EVEN'", "assert check_sum([0, 0, 0, 0], 4, 1) == 'EVEN'", "assert check_sum([0, 0, 0, 0], 4, 2) == 'EVEN'", "assert check_sum([1, 2, 3, 4, 5, 6], 6, 1) == 'ODD'", "assert check_sum([1, 2, 3, 4, 5, 6], 6, 2) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the given array is even or odd after performing an operation p times.", "code": "def check_product(arr, n, p):\n    _product = 1\n    for i in range(n):\n        _product *= arr[i]\n    if p == 1:\n        if _product % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_00fcb54e-12c3-4736-8a65-aa56410714e5", "test_setup_code": "", "test_list": ["assert check_product([2, 3, 4], 3, 1) == 'EVEN'", "assert check_product([1, 3, 5], 3, 1) == 'ODD'", "assert check_product([2, 4, 6], 3, 1) == 'EVEN'", "assert check_product([1, 2, 3], 3, 1) == 'EVEN'", "assert check_product([1, 1, 1], 3, 1) == 'ODD'", "assert check_product([2, 2, 2], 3, 1) == 'EVEN'", "assert check_product([1], 1, 1) == 'ODD'", "assert check_product([2], 1, 1) == 'EVEN'", "assert check_product([3], 1, 1) == 'ODD'", "assert check_product([4], 1, 1) == 'EVEN'", "assert check_product([1, 2, 3], 3, 2) == 'EVEN'", "assert check_product([1, 3, 5], 3, 2) == 'EVEN'", "assert check_product([2, 4, 6], 3, 2) == 'EVEN'", "assert check_product([1, 1, 1], 3, 2) == 'EVEN'", "assert check_product([2, 2, 2], 3, 2) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the maximum element of the given array is even or odd after performing an operation p times.", "code": "def check_max(arr, n, p):\n    _max = max(arr)\n    if p == 1:\n        if _max % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_fe3a1187-9041-4c8f-8f8d-3c8a89b506e0", "test_setup_code": "", "test_list": ["assert check_max([1, 2, 3, 4], 4, 1) == 'EVEN'", "assert check_max([1, 3, 5, 7], 4, 1) == 'ODD'", "assert check_max([2, 4, 6, 8], 4, 1) == 'EVEN'", "assert check_max([1, 1, 1, 1], 4, 1) == 'ODD'", "assert check_max([0, 0, 0, 0], 4, 1) == 'EVEN'", "assert check_max([1000000, 999999, 999998], 3, 1) == 'EVEN'", "assert check_max([1000001, 999999, 999998], 3, 1) == 'ODD'", "assert check_max([1], 1, 1) == 'ODD'", "assert check_max([2], 1, 1) == 'EVEN'", "assert check_max([1, 2, 3, 4], 4, 0) == 'EVEN'", "assert check_max([1, 3, 5, 7], 4, 0) == 'EVEN'", "assert check_max([2, 4, 6, 8], 4, 0) == 'EVEN'", "assert check_max([1, 1, 1, 1], 4, 0) == 'EVEN'", "assert check_max([0, 0, 0, 0], 4, 0) == 'EVEN'", "assert check_max([1000000, 999999, 999998], 3, 0) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the minimum element of the given array is even or odd after performing an operation p times.", "code": "def check_min(arr, n, p):\n    _min = min(arr)\n    if p == 1:\n        if _min % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_52a3b41b-0c12-4048-b1ca-d603286e492a", "test_setup_code": "", "test_list": ["assert check_min([1, 2, 3, 4, 5], 5, 1) == 'ODD'", "assert check_min([2, 4, 6, 8, 10], 5, 1) == 'EVEN'", "assert check_min([1, 3, 5, 7, 9], 5, 1) == 'ODD'", "assert check_min([2, 4, 6, 8, 10], 5, 0) == 'EVEN'", "assert check_min([1, 3, 5, 7, 9], 5, 0) == 'EVEN'", "assert check_min([2], 1, 1) == 'EVEN'", "assert check_min([1], 1, 1) == 'ODD'", "assert check_min([0], 1, 1) == 'EVEN'", "assert check_min([0], 1, 0) == 'EVEN'", "assert check_min([1, 2, 3, 4, 5], 5, 2) == 'EVEN'", "assert check_min([1, 2, 3, 4, 5], 5, 100) == 'EVEN'", "assert check_min([1, 1, 1, 1, 1], 5, 1) == 'ODD'", "assert check_min([2, 2, 2, 2, 2], 5, 1) == 'EVEN'", "assert check_min([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 1) == 'ODD'", "assert check_min([10, 20, 30, 40, 50], 5, 1) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the median element of the given array is even or odd after performing an operation p times.", "code": "def check_median(arr, n, p):\n    arr.sort()\n    _median = arr[n//2] if n % 2 != 0 else (arr[n//2 - 1] + arr[n//2]) // 2\n    if p == 1:\n        if _median % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_380b4fa2-3c99-444d-a222-d668961d5b57", "test_setup_code": "", "test_list": ["assert check_median([1, 3, 5, 7, 9], 5, 1) == 'ODD'", "assert check_median([2, 4, 6, 8, 10], 5, 1) == 'EVEN'", "assert check_median([1, 2, 3, 4, 5, 6], 6, 1) == 'EVEN'", "assert check_median([1, 2, 3, 4, 5, 6, 7], 7, 1) == 'ODD'", "assert check_median([1, 2, 3, 4, 5, 6, 7, 8], 8, 1) == 'EVEN'", "assert check_median([1], 1, 1) == 'ODD'", "assert check_median([2], 1, 1) == 'EVEN'", "assert check_median([1, 2, 3], 3, 1) == 'ODD'", "assert check_median([2, 4, 6], 3, 1) == 'EVEN'", "assert check_median([1, 2, 3, 4, 5], 5, 0) == 'EVEN'", "assert check_median([1, 3, 5, 7, 9, 11], 6, 1) == 'ODD'", "assert check_median([2, 4, 6, 8, 10, 12], 6, 1) == 'EVEN'", "assert check_median([1, 1, 1, 1, 1], 5, 1) == 'ODD'", "assert check_median([2, 2, 2, 2, 2], 5, 1) == 'EVEN'", "assert check_median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 1) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the second last element of the given array is even or odd after performing an operation p times.", "code": "def check_second_last(arr, n, p):\n    if n < 2:\n        return 'EVEN'\n    if p == 1:\n        if arr[-2] % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_fa18d023-15d9-4330-a9bc-29b5d845768e", "test_setup_code": "", "test_list": ["assert check_second_last([1, 2, 3, 4], 4, 1) == 'EVEN'", "assert check_second_last([1, 3, 5, 7], 4, 1) == 'ODD'", "assert check_second_last([2, 4, 6, 8], 4, 1) == 'EVEN'", "assert check_second_last([1, 2, 3], 3, 1) == 'ODD'", "assert check_second_last([1, 2], 2, 1) == 'EVEN'", "assert check_second_last([1], 1, 1) == 'EVEN'", "assert check_second_last([], 0, 1) == 'EVEN'", "assert check_second_last([1, 2, 3, 4], 4, 0) == 'EVEN'", "assert check_second_last([1, 3, 5, 7], 4, 2) == 'EVEN'", "assert check_second_last([2, 4, 6, 8], 4, 3) == 'EVEN'", "assert check_second_last([1, 2, 3], 3, 0) == 'EVEN'", "assert check_second_last([1, 2], 2, 2) == 'EVEN'", "assert check_second_last([1, 3, 5, 7, 9], 5, 1) == 'ODD'", "assert check_second_last([2, 4, 6, 8, 10], 5, 1) == 'EVEN'", "assert check_second_last([1, 2, 3, 4, 5], 5, 1) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the first and last element of the given array is even or odd after performing an operation p times.", "code": "def check_sum_first_last(arr, n, p):\n    _sum = arr[0] + arr[-1]\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_9fd6cc94-00b6-4ac9-ad19-260134e31d55", "test_setup_code": "", "test_list": ["assert check_sum_first_last([1, 2, 3, 4], 4, 1) == 'EVEN'", "assert check_sum_first_last([1, 2, 3, 4], 4, 2) == 'EVEN'", "assert check_sum_first_last([1, 2, 3, 5], 4, 1) == 'ODD'", "assert check_sum_first_last([1, 2, 3, 5], 4, 3) == 'EVEN'", "assert check_sum_first_last([2, 4, 6, 8], 4, 1) == 'EVEN'", "assert check_sum_first_last([2, 4, 6, 8], 4, 5) == 'EVEN'", "assert check_sum_first_last([1, 3, 5, 7], 4, 1) == 'EVEN'", "assert check_sum_first_last([1, 3, 5, 7], 4, 4) == 'EVEN'", "assert check_sum_first_last([1, 1, 1, 1], 4, 1) == 'EVEN'", "assert check_sum_first_last([1, 1, 1, 1], 4, 10) == 'EVEN'", "assert check_sum_first_last([1, 2, 1, 2], 4, 1) == 'ODD'", "assert check_sum_first_last([1, 2, 1, 2], 4, 6) == 'EVEN'", "assert check_sum_first_last([0, 0, 0, 0], 4, 1) == 'EVEN'", "assert check_sum_first_last([0, 0, 0, 0], 4, 100) == 'EVEN'", "assert check_sum_first_last([1, 2, 3, 4, 5], 5, 1) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of elements at even indices of the given array is even or odd after performing an operation p times.", "code": "def check_sum_even_indices(arr, n, p):\n    _sum = sum(arr[i] for i in range(0, n, 2))\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_a5cd4a27-2a37-49b6-926c-8e04d91ddfd3", "test_setup_code": "", "test_list": ["assert check_sum_even_indices([1, 2, 3, 4, 5], 5, 1) == 'ODD'", "assert check_sum_even_indices([2, 4, 6, 8, 10], 5, 1) == 'EVEN'", "assert check_sum_even_indices([1, 1, 1, 1, 1], 5, 1) == 'ODD'", "assert check_sum_even_indices([0, 0, 0, 0, 0], 5, 1) == 'EVEN'", "assert check_sum_even_indices([1, 2, 3, 4, 5], 5, 2) == 'EVEN'", "assert check_sum_even_indices([2, 4, 6, 8, 10], 5, 2) == 'EVEN'", "assert check_sum_even_indices([1, 1, 1, 1, 1], 5, 2) == 'EVEN'", "assert check_sum_even_indices([0, 0, 0, 0, 0], 5, 2) == 'EVEN'", "assert check_sum_even_indices([1], 1, 1) == 'ODD'", "assert check_sum_even_indices([2], 1, 1) == 'EVEN'", "assert check_sum_even_indices([], 0, 1) == 'EVEN'", "assert check_sum_even_indices([1, 3, 5, 7, 9], 5, 1) == 'ODD'", "assert check_sum_even_indices([2, 4, 6, 8, 10, 12], 6, 1) == 'EVEN'", "assert check_sum_even_indices([1, 2, 3, 4, 5, 6], 6, 1) == 'ODD'", "assert check_sum_even_indices([2, 4, 6, 8, 10, 12], 6, 2) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of elements at odd indices of the given array is even or odd after performing an operation p times.", "code": "def check_sum_odd_indices(arr, n, p):\n    _sum = sum(arr[i] for i in range(1, n, 2))\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_03ffae0a-920d-4e94-8257-a7d7a7c0e1ce", "test_setup_code": "", "test_list": ["assert check_sum_odd_indices([1, 2, 3, 4, 5], 5, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 3, 5, 7, 9], 5, 1) == 'ODD'", "assert check_sum_odd_indices([2, 4, 6, 8, 10], 5, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 1, 1, 1, 1, 1], 6, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2, 3, 4, 5, 6], 6, 1) == 'ODD'", "assert check_sum_odd_indices([0, 0, 0, 0, 0], 5, 1) == 'EVEN'", "assert check_sum_odd_indices([0, 1, 0, 1, 0], 5, 1) == 'EVEN'", "assert check_sum_odd_indices([1], 1, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2], 2, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2, 3], 3, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2, 3, 4], 4, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 1) == 'ODD'", "assert check_sum_odd_indices([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 10, 1) == 'ODD'", "assert check_sum_odd_indices([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10, 1) == 'EVEN'", "assert check_sum_odd_indices([1, 2, 3, 4, 5], 5, 2) == 'EVEN'"], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def triangular_num(n):\n\treturn n*(n + 1) // 2", "task_id": "135_e211bca0-4869-478c-b6a9-df5d364678c5", "test_setup_code": "", "test_list": ["assert triangular_num(1) == 1", "assert triangular_num(2) == 3", "assert triangular_num(3) == 6", "assert triangular_num(4) == 10", "assert triangular_num(5) == 15", "assert triangular_num(6) == 21", "assert triangular_num(7) == 28", "assert triangular_num(8) == 36", "assert triangular_num(9) == 45", "assert triangular_num(10) == 55", "assert triangular_num(0) == 0", "assert triangular_num(11) == 66", "assert triangular_num(15) == 120", "assert triangular_num(20) == 210", "assert triangular_num(50) == 1275"], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def square_num(n):\n\treturn n*n", "task_id": "135_917b1511-25a6-469c-a31c-c9e48350b16a", "test_setup_code": "", "test_list": ["assert square_num(0) == 0", "assert square_num(1) == 1", "assert square_num(2) == 4", "assert square_num(3) == 9", "assert square_num(4) == 16", "assert square_num(5) == 25", "assert square_num(10) == 100", "assert square_num(15) == 225", "assert square_num(20) == 400", "assert square_num(100) == 10000", "assert square_num(-1) == 1", "assert square_num(-2) == 4", "assert square_num(-3) == 9", "assert square_num(-10) == 100", "assert square_num(-100) == 10000"], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def tetrahedral_num(n):\n\treturn n*(n + 1)*(n + 2) // 6", "task_id": "135_ae50e1e6-b7bc-4426-bcc4-1158f7ba8094", "test_setup_code": "", "test_list": ["assert tetrahedral_num(1) == 1", "assert tetrahedral_num(2) == 4", "assert tetrahedral_num(3) == 10", "assert tetrahedral_num(4) == 20", "assert tetrahedral_num(5) == 35", "assert tetrahedral_num(6) == 56", "assert tetrahedral_num(7) == 84", "assert tetrahedral_num(8) == 120", "assert tetrahedral_num(9) == 165", "assert tetrahedral_num(10) == 220", "assert tetrahedral_num(0) == 0", "assert tetrahedral_num(11) == 286", "assert tetrahedral_num(12) == 364", "assert tetrahedral_num(13) == 455", "assert tetrahedral_num(14) == 560"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of even numbers in an array of integers.", "code": "def count_evens(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 2 == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_b2b80ddd-6f1d-484c-bb1e-aa09725954e9", "test_setup_code": "", "test_list": ["assert count_evens([2, 4, 6, 8, 10]) == 1.0", "assert count_evens([1, 3, 5, 7, 9]) == 0.0", "assert count_evens([1, 2, 3, 4, 5, 6]) == 0.5", "assert count_evens([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.5", "assert count_evens([2]) == 1.0", "assert count_evens([1]) == 0.0", "assert count_evens([]) == 0.0", "assert count_evens([2, 2, 2, 2, 2]) == 1.0", "assert count_evens([1, 1, 1, 1, 1]) == 0.0", "assert count_evens([1, 2, 1, 2, 1, 2]) == 0.5", "assert count_evens([100, 200, 300, 400, 500]) == 1.0", "assert count_evens([-2, -4, -6, -8, -10]) == 1.0", "assert count_evens([-1, -3, -5, -7, -9]) == 0.0", "assert count_evens([-1, -2, -3, -4, -5, -6]) == 0.5", "assert count_evens([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.5"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of odd numbers in an array of integers.", "code": "def count_odds(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 2 != 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_46f4831a-08e3-492b-aacb-3c0a43f372c6", "test_setup_code": "", "test_list": ["assert count_odds([1, 2, 3, 4, 5]) == 0.6", "assert count_odds([2, 4, 6, 8, 10]) == 0.0", "assert count_odds([1, 3, 5, 7, 9]) == 1.0", "assert count_odds([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.5", "assert count_odds([1]) == 1.0", "assert count_odds([2]) == 0.0", "assert count_odds([-1, -3, -5, -7, -9]) == 1.0", "assert count_odds([-2, -4, -6, -8, -10]) == 0.0", "assert count_odds([-1, -2, -3, -4, -5]) == 0.6", "assert count_odds([1000000, 1000001, 1000002, 1000003, 1000004]) == 0.4", "assert count_odds([]) == 0", "assert count_odds([0, 0, 0, 0, 0]) == 0.0", "assert count_odds([1, 1, 1, 1, 1]) == 1.0", "assert count_odds([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == 0.5", "assert count_odds([2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0.5"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of negative numbers in an array of integers.", "code": "def count_negatives(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_d30931d9-e8c4-409e-b6bd-747df5dd5891", "test_setup_code": "", "test_list": ["assert count_negatives([1, -1, 2, -2, 3, -3]) == 0.5", "assert count_negatives([0, 0, 0, 0]) == 0.0", "assert count_negatives([-1, -2, -3, -4]) == 1.0", "assert count_negatives([1, 2, 3, 4]) == 0.0", "assert count_negatives([1, -1, 1, -1, 1, -1]) == 0.5", "assert count_negatives([-1, -1, -1, -1, -1, -1]) == 1.0", "assert count_negatives([1, 1, 1, 1, 1, 1]) == 0.0", "assert count_negatives([1]) == 0.0", "assert count_negatives([-1]) == 1.0", "assert count_negatives([]) == 0.0", "assert count_negatives([1, -1, 2, -2, 0]) == 0.4", "assert count_negatives([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 0.5", "assert count_negatives([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.0", "assert count_negatives([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 1.0", "assert count_negatives([1, -1, 2, -2, 3, -3, 4, -4, 5, -5, 6, -6, 7, -7, 8, -8, 9, -9, 10, -10]) == 0.5"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of positive numbers in an array of integers.", "code": "def count_positives(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_fb1f350a-2bf4-443f-b566-f346eff4d89c", "test_setup_code": "", "test_list": ["assert count_positives([1, 2, 3, 4, 5]) == 1.0", "assert count_positives([-1, -2, -3, -4, -5]) == 0.0", "assert count_positives([0, 0, 0, 0, 0]) == 0.0", "assert count_positives([1, -1, 2, -2, 3, -3]) == 0.5", "assert count_positives([1]) == 1.0", "assert count_positives([-1]) == 0.0", "assert count_positives([]) == 0.0", "assert count_positives([100, 200, 300]) == 1.0", "assert count_positives([-100, -200, -300]) == 0.0", "assert count_positives([0, 1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 0.45", "assert count_positives([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1.0", "assert count_positives([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == 0.0", "assert count_positives([1, -1, 0]) == 0.33", "assert count_positives([0, 0, 0, 1]) == 0.25", "assert count_positives([1, 2, 3, 4, 5, -1, -2, -3, -4, -5, 0, 0, 0]) == 0.38"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of prime numbers in an array of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if is_prime(x):\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_aa22a280-c944-4acb-b40f-9f1978521ff1", "test_setup_code": "", "test_list": ["assert count_primes([2, 3, 5, 7, 11]) == 1.0", "assert count_primes([4, 6, 8, 10, 12]) == 0.0", "assert count_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0.44", "assert count_primes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 0.45", "assert count_primes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 0.25", "assert count_primes([29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 1.0", "assert count_primes([100, 101, 102, 103, 104, 105, 106, 107, 108, 109]) == 0.4", "assert count_primes([2]) == 1.0", "assert count_primes([1]) == 0.0", "assert count_primes([]) == 0.0", "assert count_primes([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0.1", "assert count_primes([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 1.0", "assert count_primes([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 38, 39, 40, 42, 44, 45, 46, 48, 49, 50]) == 0.0", "assert count_primes([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 200]) == 0.98", "assert count_primes([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 0.0", "assert count_primes([2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 1.0"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers divisible by a given integer k in an array of integers.", "code": "def count_divisible_by_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % k == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_5a4ae68d-33e2-41ea-a40e-5fdd98e54189", "test_setup_code": "", "test_list": ["assert count_divisible_by_k([1, 2, 3, 4, 5, 6], 2) == 0.33", "assert count_divisible_by_k([1, 2, 3, 4, 5, 6], 3) == 0.33", "assert count_divisible_by_k([1, 2, 3, 4, 5, 6], 1) == 1.0", "assert count_divisible_by_k([1, 2, 3, 4, 5, 6], 7) == 0.0", "assert count_divisible_by_k([0, 0, 0, 0], 1) == 1.0", "assert count_divisible_by_k([0, 0, 0, 0], 0) == 0.0", "assert count_divisible_by_k([1, 3, 5, 7, 9], 2) == 0.0", "assert count_divisible_by_k([2, 4, 6, 8, 10], 2) == 1.0", "assert count_divisible_by_k([2, 4, 6, 8, 10], 5) == 0.2", "assert count_divisible_by_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 0.2", "assert count_divisible_by_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 0.1", "assert count_divisible_by_k([10, 20, 30, 40, 50], 10) == 1.0", "assert count_divisible_by_k([-10, -20, -30, -40, -50], 10) == 1.0", "assert count_divisible_by_k([1, 2, 3, 4, 5], 0) == 0.0", "assert count_divisible_by_k([], 1) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers greater than a given integer k in an array of integers.", "code": "def count_greater_than_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > k:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_ee71fd50-3e86-4995-af44-ca0e6fd97714", "test_setup_code": "", "test_list": ["assert count_greater_than_k([1, 2, 3, 4, 5], 3) == 0.4", "assert count_greater_than_k([10, 20, 30, 40, 50], 25) == 0.6", "assert count_greater_than_k([1, 1, 1, 1, 1], 0) == 1.0", "assert count_greater_than_k([1, 1, 1, 1, 1], 1) == 0.0", "assert count_greater_than_k([5, 5, 5, 5, 5], 5) == 0.0", "assert count_greater_than_k([5, 5, 5, 5, 5], 4) == 1.0", "assert count_greater_than_k([1, 2, 3, 4, 5], 5) == 0.0", "assert count_greater_than_k([1, 2, 3, 4, 5], -1) == 1.0", "assert count_greater_than_k([100, 200, 300], 150) == 0.67", "assert count_greater_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 0.5", "assert count_greater_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 0.0", "assert count_greater_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == 1.0", "assert count_greater_than_k([], 5) == 0.0", "assert count_greater_than_k([1], 0) == 1.0", "assert count_greater_than_k([1], 1) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers less than a given integer k in an array of integers.", "code": "def count_less_than_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < k:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_6cbc3682-649e-4371-a1dc-0c8f0d835f88", "test_setup_code": "", "test_list": ["assert count_less_than_k([1, 2, 3, 4, 5], 3) == 0.4", "assert count_less_than_k([10, 20, 30, 40, 50], 25) == 0.4", "assert count_less_than_k([1, 1, 1, 1, 1], 2) == 1.0", "assert count_less_than_k([5, 5, 5, 5, 5], 5) == 0.0", "assert count_less_than_k([1, 2, 3, 4, 5], 1) == 0.0", "assert count_less_than_k([1, 2, 3, 4, 5], 6) == 1.0", "assert count_less_than_k([1, 2, 3, 4, 5], 0) == 0.0", "assert count_less_than_k([1, 2, 3, 4, 5], 5) == 0.8", "assert count_less_than_k([], 3) == 0", "assert count_less_than_k([3, 3, 3, 3, 3], 3) == 0.0", "assert count_less_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 0.4", "assert count_less_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 1.0", "assert count_less_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 0.9", "assert count_less_than_k([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 0.0", "assert count_less_than_k([0, -1, -2, -3, -4, -5], 0) == 0.8333333333333334"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers that are multiples of 3 in an array of integers.", "code": "def count_multiples_of_3(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 3 == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_650ce61e-6fb8-4a5b-9db8-9e9bdd8f212a", "test_setup_code": "", "test_list": ["assert count_multiples_of_3([3, 6, 9, 12]) == 1.0", "assert count_multiples_of_3([1, 2, 4, 5]) == 0.0", "assert count_multiples_of_3([3, 5, 9, 10, 12]) == 0.6", "assert count_multiples_of_3([0, 3, 6, 9, 12, 15]) == 1.0", "assert count_multiples_of_3([1, 3, 5, 7, 9, 11, 13, 15]) == 0.38", "assert count_multiples_of_3([1]) == 0.0", "assert count_multiples_of_3([3]) == 1.0", "assert count_multiples_of_3([2, 4, 6, 8, 10]) == 0.2", "assert count_multiples_of_3([3, 3, 3, 3, 3]) == 1.0", "assert count_multiples_of_3([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0.33", "assert count_multiples_of_3([-3, -6, -9, -12]) == 1.0", "assert count_multiples_of_3([-1, -2, -4, -5]) == 0.0", "assert count_multiples_of_3([-3, 0, 3, 6, 9]) == 1.0", "assert count_multiples_of_3([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 0.31", "assert count_multiples_of_3([]) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the ratio of palindromic numbers in an array of integers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef count_palindromes(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if is_palindrome(x):\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_18af967a-ebec-440f-8f59-29c4f6785d34", "test_setup_code": "", "test_list": ["assert is_palindrome(121) == True", "assert is_palindrome(123) == False", "assert is_palindrome(0) == True", "assert is_palindrome(11) == True", "assert is_palindrome(22) == True", "assert is_palindrome(12321) == True", "assert is_palindrome(12345) == False", "assert is_palindrome(-121) == False", "assert is_palindrome(10) == False", "assert is_palindrome(1001) == True", "assert is_palindrome(1221) == True", "assert is_palindrome(1234321) == True", "assert is_palindrome(12344321) == True", "assert is_palindrome(123456789) == False", "assert is_palindrome(987654321) == False"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "139_d6a179d4-74b6-4847-b301-e43f49ddb866", "test_setup_code": "", "test_list": ["assert rectangle_perimeter(5, 3) == 16", "assert rectangle_perimeter(0, 0) == 0", "assert rectangle_perimeter(1, 1) == 4", "assert rectangle_perimeter(10, 5) == 30", "assert rectangle_perimeter(7.5, 2.5) == 20", "assert rectangle_perimeter(100, 50) == 300", "assert rectangle_perimeter(0.1, 0.1) == 0.4", "assert rectangle_perimeter(1000, 500) == 3000", "assert rectangle_perimeter(0.5, 0.2) == 1.4", "assert rectangle_perimeter(123.456, 78.9) == 404.712", "assert rectangle_perimeter(1e-10, 1e-10) == 4e-10", "assert rectangle_perimeter(1e10, 1e10) == 4e10", "assert rectangle_perimeter(3.14159, 2.71828) == 11.71974", "assert rectangle_perimeter(0, 5) == 10", "assert rectangle_perimeter(5, 0) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def triangle_area(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "139_fb49b702-e51e-43b6-8009-0a0f14c6c776", "test_setup_code": "", "test_list": ["assert triangle_area(10, 5) == 25.0", "assert triangle_area(0, 5) == 0.0", "assert triangle_area(10, 0) == 0.0", "assert triangle_area(0, 0) == 0.0", "assert triangle_area(3, 4) == 6.0", "assert triangle_area(1.5, 2.5) == 1.875", "assert triangle_area(100, 200) == 10000.0", "assert triangle_area(0.1, 0.2) == 0.01", "assert triangle_area(12345, 67890) == 419112750.0", "assert triangle_area(1, 1) == 0.5", "assert triangle_area(1e-10, 1e-10) == 5e-21", "assert triangle_area(1e10, 1e10) == 5e19", "assert triangle_area(3.333, 4.444) == 7.404486", "assert triangle_area(1.23456789, 9.87654321) == 6.096631073", "assert triangle_area(50, 50) == 1250.0"], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def square_area(side: float) -> float:\n    return side * side", "task_id": "139_50a57a68-3af9-4f8e-ab3f-4be395c61c4d", "test_setup_code": "", "test_list": ["assert square_area(1) == 1", "assert square_area(0) == 0", "assert square_area(2.5) == 6.25", "assert square_area(-3) == 9", "assert square_area(10) == 100", "assert square_area(0.1) == 0.01", "assert square_area(100) == 10000", "assert square_area(0.0001) == 0.00000001", "assert square_area(-0.5) == 0.25", "assert square_area(7.7) == 59.29", "assert square_area(999) == 998001", "assert square_area(-999) == 998001", "assert square_area(1e-10) == 1e-20", "assert square_area(1e10) == 1e20", "assert square_area(3.14159) == 9.8695877281"], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid.", "code": "def trapezoid_area(base1: float, base2: float, height: float) -> float:\n    return 0.5 * (base1 + base2) * height", "task_id": "139_83757277-8f17-4ac9-a977-701cb29778c1", "test_setup_code": "", "test_list": ["assert trapezoid_area(3, 5, 4) == 16.0", "assert trapezoid_area(0, 0, 0) == 0.0", "assert trapezoid_area(1, 1, 1) == 1.0", "assert trapezoid_area(10, 10, 10) == 100.0", "assert trapezoid_area(2.5, 3.5, 4.5) == 13.5", "assert trapezoid_area(7, 3, 5) == 25.0", "assert trapezoid_area(5, 5, 0) == 0.0", "assert trapezoid_area(0, 5, 5) == 12.5", "assert trapezoid_area(5, 0, 5) == 12.5", "assert trapezoid_area(1.5, 2.5, 3.5) == 7.0", "assert trapezoid_area(100, 200, 50) == 7500.0", "assert trapezoid_area(0.1, 0.2, 0.3) == 0.045", "assert trapezoid_area(3, 3, 3) == 9.0", "assert trapezoid_area(6, 8, 10) == 70.0", "assert trapezoid_area(2, 4, 6) == 18.0"], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def circle_area(radius: float) -> float:\n    return 3.1415 * radius * radius", "task_id": "139_9eeb5c4f-fb33-4dea-bbf8-c8e8f0c19f6c", "test_setup_code": "", "test_list": ["assert circle_area(0) == 0", "assert circle_area(1) == 3.1415", "assert circle_area(2) == 12.566", "assert circle_area(0.5) == 0.785375", "assert circle_area(10) == 314.15", "assert circle_area(100) == 31415", "assert circle_area(0.1) == 0.031415", "assert circle_area(3.1415) == 31.0044471125", "assert circle_area(2.5) == 19.634375", "assert circle_area(7.5) == 176.715625", "assert circle_area(0.01) == 0.00031415", "assert circle_area(1.234) == 4.78253746", "assert circle_area(5.678) == 101.23946778", "assert circle_area(0.0001) == 3.1415e-08", "assert circle_area(50) == 7853.75"], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def parallelogram_area(base: float, height: float) -> float:\n    return base * height", "task_id": "139_14e582d4-1410-4fd1-9495-39122e695068", "test_setup_code": "", "test_list": ["assert parallelogram_area(5, 10) == 50", "assert parallelogram_area(0, 10) == 0", "assert parallelogram_area(10, 0) == 0", "assert parallelogram_area(7.5, 3.2) == 24.0", "assert parallelogram_area(1, 1) == 1", "assert parallelogram_area(100, 100) == 10000", "assert parallelogram_area(0.1, 0.1) == 0.01", "assert parallelogram_area(1e-10, 1e10) == 1.0", "assert parallelogram_area(1e10, 1e-10) == 1.0", "assert parallelogram_area(3.14159, 2.71828) == 8.5397212652", "assert parallelogram_area(-5, 10) == -50", "assert parallelogram_area(5, -10) == -50", "assert parallelogram_area(-5, -10) == 50", "assert parallelogram_area(1.5, 2.5) == 3.75", "assert parallelogram_area(123456789, 987654321) == 121932631112635269"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def cylinder_volume(radius: float, height: float) -> float:\n    return 3.1415 * radius * radius * height", "task_id": "139_b6c3ab2f-37c0-4ada-b191-b149708bf5e8", "test_setup_code": "", "test_list": ["assert cylinder_volume(1, 1) == 3.1415", "assert cylinder_volume(0, 10) == 0.0", "assert cylinder_volume(10, 0) == 0.0", "assert cylinder_volume(2.5, 4) == 78.5375", "assert cylinder_volume(5, 5) == 392.6875", "assert cylinder_volume(3.1415, 3.1415) == 97.408767375", "assert cylinder_volume(1e-5, 1e-5) == 3.1415e-15", "assert cylinder_volume(1e5, 1e5) == 3.1415e15", "assert cylinder_volume(1, 0.5) == 1.57075", "assert cylinder_volume(0.5, 1) == 0.785375", "assert cylinder_volume(2, 3) == 37.698", "assert cylinder_volume(7, 2) == 307.87", "assert cylinder_volume(0.1, 0.1) == 0.0031415", "assert cylinder_volume(100, 100) == 3141500.0", "assert cylinder_volume(0.01, 0.01) == 3.1415e-06"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def sphere_volume(radius: float) -> float:\n    return (4/3) * 3.1415 * radius * radius * radius", "task_id": "139_80a6bc86-cc1c-4f02-99b5-cfea4b2ed40e", "test_setup_code": "", "test_list": ["assert sphere_volume(1) == 4.188666666666666", "assert sphere_volume(0) == 0.0", "assert sphere_volume(2) == 33.512", "assert sphere_volume(0.5) == 0.5234375", "assert sphere_volume(10) == 4188.666666666667", "assert sphere_volume(3.5) == 179.59479166666666", "assert sphere_volume(100) == 4188666.666666667", "assert sphere_volume(0.1) == 0.004188666666666666", "assert sphere_volume(7) == 1436.0266666666666", "assert sphere_volume(0.01) == 4.188666666666666e-06", "assert sphere_volume(5) == 523.5833333333334", "assert sphere_volume(0.25) == 0.06523333333333334", "assert sphere_volume(50) == 523583.3333333334", "assert sphere_volume(0.75) == 1.7671875", "assert sphere_volume(20) == 33510.666666666664"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def cone_volume(radius: float, height: float) -> float:\n    return (1/3) * 3.1415 * radius * radius * height", "task_id": "139_acf57bc1-717e-484d-981a-53aadd8f5284", "test_setup_code": "", "test_list": ["assert cone_volume(1, 1) == 1.0471666666666668", "assert cone_volume(0, 10) == 0.0", "assert cone_volume(10, 0) == 0.0", "assert cone_volume(3, 5) == 47.1225", "assert cone_volume(2.5, 4.5) == 29.452083333333334", "assert cone_volume(7, 2) == 102.95666666666666", "assert cone_volume(1.1, 1.1) == 1.3932216666666667", "assert cone_volume(100, 100) == 1047166.6666666667", "assert cone_volume(0.1, 0.1) == 0.0010471666666666667", "assert cone_volume(5, 5) == 130.89583333333334", "assert cone_volume(1, 100) == 104.71666666666667", "assert cone_volume(100, 1) == 10471.666666666666", "assert cone_volume(3.1415, 3.1415) == 32.46969791666667", "assert cone_volume(2, 3) == 12.566", "assert cone_volume(1.5, 2.5) == 5.890625"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def rectangular_prism_volume(length: float, width: float, height: float) -> float:\n    return length * width * height", "task_id": "139_68d47555-7a75-4d78-9f97-3da6da95ec00", "test_setup_code": "", "test_list": ["assert rectangular_prism_volume(1, 1, 1) == 1", "assert rectangular_prism_volume(0, 1, 1) == 0", "assert rectangular_prism_volume(1, 0, 1) == 0", "assert rectangular_prism_volume(1, 1, 0) == 0", "assert rectangular_prism_volume(2.5, 3.5, 4.5) == 39.375", "assert rectangular_prism_volume(10, 10, 10) == 1000", "assert rectangular_prism_volume(1.1, 2.2, 3.3) == 7.986", "assert rectangular_prism_volume(100, 200, 300) == 6000000", "assert rectangular_prism_volume(0.1, 0.2, 0.3) == 0.006", "assert rectangular_prism_volume(123456, 654321, 111111) == 8989610654323216", "assert rectangular_prism_volume(1, 2, 3) == 6", "assert rectangular_prism_volume(5, 5, 5) == 125", "assert rectangular_prism_volume(7, 8, 9) == 504", "assert rectangular_prism_volume(0.5, 0.5, 0.5) == 0.125", "assert rectangular_prism_volume(3.3, 4.4, 5.5) == 79.86"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.", "code": "def is_Sum_Of_Powers_Of_Three(n):\n    while n > 0:\n        if n % 3 == 2:\n            return False\n        n //= 3\n    return True", "task_id": "138_823dc0f0-1a8b-4d4d-9743-3426814f3064", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Three(1) == True", "assert is_Sum_Of_Powers_Of_Three(2) == True", "assert is_Sum_Of_Powers_Of_Three(3) == True", "assert is_Sum_Of_Powers_Of_Three(4) == True", "assert is_Sum_Of_Powers_Of_Three(5) == False", "assert is_Sum_Of_Powers_Of_Three(6) == True", "assert is_Sum_Of_Powers_Of_Three(7) == False", "assert is_Sum_Of_Powers_Of_Three(8) == True", "assert is_Sum_Of_Powers_Of_Three(9) == True", "assert is_Sum_Of_Powers_Of_Three(10) == True", "assert is_Sum_Of_Powers_Of_Three(11) == False", "assert is_Sum_Of_Powers_Of_Three(12) == True", "assert is_Sum_Of_Powers_Of_Three(13) == True", "assert is_Sum_Of_Powers_Of_Three(14) == False", "assert is_Sum_Of_Powers_Of_Three(27) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 4 or not.", "code": "def is_Sum_Of_Powers_Of_Four(n):\n    while n > 0:\n        if n % 4 == 3:\n            return False\n        n //= 4\n    return True", "task_id": "138_b24892f4-bc9f-4c25-8ed7-30a310518194", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Four(1) == True", "assert is_Sum_Of_Powers_Of_Four(4) == True", "assert is_Sum_Of_Powers_Of_Four(16) == True", "assert is_Sum_Of_Powers_Of_Four(64) == True", "assert is_Sum_Of_Powers_Of_Four(5) == True", "assert is_Sum_Of_Powers_Of_Four(20) == True", "assert is_Sum_Of_Powers_Of_Four(21) == False", "assert is_Sum_Of_Powers_Of_Four(0) == True", "assert is_Sum_Of_Powers_Of_Four(3) == False", "assert is_Sum_Of_Powers_Of_Four(15) == False", "assert is_Sum_Of_Powers_Of_Four(255) == False", "assert is_Sum_Of_Powers_Of_Four(256) == True", "assert is_Sum_Of_Powers_Of_Four(1024) == True", "assert is_Sum_Of_Powers_Of_Four(1025) == True", "assert is_Sum_Of_Powers_Of_Four(1026) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 5 or not.", "code": "def is_Sum_Of_Powers_Of_Five(n):\n    while n > 0:\n        if n % 5 == 4:\n            return False\n        n //= 5\n    return True", "task_id": "138_ec0f6dc7-5a46-42df-824e-c2de81c3afb8", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Five(1) == True", "assert is_Sum_Of_Powers_Of_Five(5) == True", "assert is_Sum_Of_Powers_Of_Five(6) == True", "assert is_Sum_Of_Powers_Of_Five(25) == True", "assert is_Sum_Of_Powers_Of_Five(30) == True", "assert is_Sum_Of_Powers_Of_Five(31) == True", "assert is_Sum_Of_Powers_Of_Five(4) == False", "assert is_Sum_Of_Powers_Of_Five(20) == False", "assert is_Sum_Of_Powers_Of_Five(124) == False", "assert is_Sum_Of_Powers_Of_Five(0) == True", "assert is_Sum_Of_Powers_Of_Five(3125) == True", "assert is_Sum_Of_Powers_Of_Five(3126) == True", "assert is_Sum_Of_Powers_Of_Five(3124) == False", "assert is_Sum_Of_Powers_Of_Five(15625) == True", "assert is_Sum_Of_Powers_Of_Five(15626) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 6 or not.", "code": "def is_Sum_Of_Powers_Of_Six(n):\n    while n > 0:\n        if n % 6 == 5:\n            return False\n        n //= 6\n    return True", "task_id": "138_f8914cdc-c4c6-49bb-a4a8-b02e3236af9a", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Six(1) == True", "assert is_Sum_Of_Powers_Of_Six(6) == True", "assert is_Sum_Of_Powers_Of_Six(7) == True", "assert is_Sum_Of_Powers_Of_Six(8) == False", "assert is_Sum_Of_Powers_Of_Six(36) == True", "assert is_Sum_Of_Powers_Of_Six(37) == True", "assert is_Sum_Of_Powers_Of_Six(38) == False", "assert is_Sum_Of_Powers_Of_Six(216) == True", "assert is_Sum_Of_Powers_Of_Six(217) == True", "assert is_Sum_Of_Powers_Of_Six(218) == False", "assert is_Sum_Of_Powers_Of_Six(0) == True", "assert is_Sum_Of_Powers_Of_Six(5) == False", "assert is_Sum_Of_Powers_Of_Six(11) == False", "assert is_Sum_Of_Powers_Of_Six(42) == False", "assert is_Sum_Of_Powers_Of_Six(1296) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 7 or not.", "code": "def is_Sum_Of_Powers_Of_Seven(n):\n    while n > 0:\n        if n % 7 == 6:\n            return False\n        n //= 7\n    return True", "task_id": "138_2f19b2fe-7e75-4fa2-bbd8-d471fd945c22", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Seven(1) == True", "assert is_Sum_Of_Powers_Of_Seven(7) == True", "assert is_Sum_Of_Powers_Of_Seven(8) == False", "assert is_Sum_Of_Powers_Of_Seven(49) == True", "assert is_Sum_Of_Powers_Of_Seven(50) == False", "assert is_Sum_Of_Powers_Of_Seven(0) == True", "assert is_Sum_Of_Powers_Of_Seven(343) == True", "assert is_Sum_Of_Powers_Of_Seven(344) == False", "assert is_Sum_Of_Powers_Of_Seven(2) == True", "assert is_Sum_Of_Powers_Of_Seven(6) == False", "assert is_Sum_Of_Powers_Of_Seven(14) == True", "assert is_Sum_Of_Powers_Of_Seven(28) == True", "assert is_Sum_Of_Powers_Of_Seven(29) == False", "assert is_Sum_Of_Powers_Of_Seven(100) == False", "assert is_Sum_Of_Powers_Of_Seven(2401) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 8 or not.", "code": "def is_Sum_Of_Powers_Of_Eight(n):\n    while n > 0:\n        if n % 8 == 7:\n            return False\n        n //= 8\n    return True", "task_id": "138_56f15acd-1d24-4a14-8709-653cfebdf06e", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Eight(1) == True", "assert is_Sum_Of_Powers_Of_Eight(8) == True", "assert is_Sum_Of_Powers_Of_Eight(9) == True", "assert is_Sum_Of_Powers_Of_Eight(7) == False", "assert is_Sum_Of_Powers_Of_Eight(64) == True", "assert is_Sum_Of_Powers_Of_Eight(65) == True", "assert is_Sum_Of_Powers_Of_Eight(63) == True", "assert is_Sum_Of_Powers_Of_Eight(72) == True", "assert is_Sum_Of_Powers_Of_Eight(73) == True", "assert is_Sum_Of_Powers_Of_Eight(56) == True", "assert is_Sum_Of_Powers_Of_Eight(57) == True", "assert is_Sum_Of_Powers_Of_Eight(511) == True", "assert is_Sum_Of_Powers_Of_Eight(512) == True", "assert is_Sum_Of_Powers_Of_Eight(513) == True", "assert is_Sum_Of_Powers_Of_Eight(4095) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 9 or not.", "code": "def is_Sum_Of_Powers_Of_Nine(n):\n    while n > 0:\n        if n % 9 == 8:\n            return False\n        n //= 9\n    return True", "task_id": "138_9393ba7d-2446-41b2-afbc-b785ccde5d62", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Nine(1) == True", "assert is_Sum_Of_Powers_Of_Nine(9) == True", "assert is_Sum_Of_Powers_Of_Nine(10) == True", "assert is_Sum_Of_Powers_Of_Nine(17) == True", "assert is_Sum_Of_Powers_Of_Nine(8) == False", "assert is_Sum_Of_Powers_Of_Nine(81) == True", "assert is_Sum_Of_Powers_Of_Nine(82) == True", "assert is_Sum_Of_Powers_Of_Nine(88) == False", "assert is_Sum_Of_Powers_Of_Nine(729) == True", "assert is_Sum_Of_Powers_Of_Nine(730) == True", "assert is_Sum_Of_Powers_Of_Nine(728) == False", "assert is_Sum_Of_Powers_Of_Nine(0) == True", "assert is_Sum_Of_Powers_Of_Nine(100) == True", "assert is_Sum_Of_Powers_Of_Nine(1000) == True", "assert is_Sum_Of_Powers_Of_Nine(999) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 10 or not.", "code": "def is_Sum_Of_Powers_Of_Ten(n):\n    while n > 0:\n        if n % 10 == 9:\n            return False\n        n //= 10\n    return True", "task_id": "138_17faa272-8e32-4a87-b535-681e65643f1e", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Ten(1) == True", "assert is_Sum_Of_Powers_Of_Ten(10) == True", "assert is_Sum_Of_Powers_Of_Ten(100) == True", "assert is_Sum_Of_Powers_Of_Ten(1000) == True", "assert is_Sum_Of_Powers_Of_Ten(9) == False", "assert is_Sum_Of_Powers_Of_Ten(19) == False", "assert is_Sum_Of_Powers_Of_Ten(90) == False", "assert is_Sum_Of_Powers_Of_Ten(109) == False", "assert is_Sum_Of_Powers_Of_Ten(1009) == False", "assert is_Sum_Of_Powers_Of_Ten(0) == True", "assert is_Sum_Of_Powers_Of_Ten(101) == True", "assert is_Sum_Of_Powers_Of_Ten(1001) == True", "assert is_Sum_Of_Powers_Of_Ten(10000) == True", "assert is_Sum_Of_Powers_Of_Ten(1000000000) == True", "assert is_Sum_Of_Powers_Of_Ten(1000000009) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 11 or not.", "code": "def is_Sum_Of_Powers_Of_Eleven(n):\n    while n > 0:\n        if n % 11 == 10:\n            return False\n        n //= 11\n    return True", "task_id": "138_1e9ea431-5fca-4415-8284-7132f7f841f1", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Eleven(1) == True", "assert is_Sum_Of_Powers_Of_Eleven(11) == True", "assert is_Sum_Of_Powers_Of_Eleven(12) == False", "assert is_Sum_Of_Powers_Of_Eleven(121) == True", "assert is_Sum_Of_Powers_Of_Eleven(122) == False", "assert is_Sum_Of_Powers_Of_Eleven(1331) == True", "assert is_Sum_Of_Powers_Of_Eleven(1441) == False", "assert is_Sum_Of_Powers_Of_Eleven(0) == True", "assert is_Sum_Of_Powers_Of_Eleven(10) == False", "assert is_Sum_Of_Powers_Of_Eleven(110) == False", "assert is_Sum_Of_Powers_Of_Eleven(100) == True", "assert is_Sum_Of_Powers_Of_Eleven(1000) == True", "assert is_Sum_Of_Powers_Of_Eleven(10000) == True", "assert is_Sum_Of_Powers_Of_Eleven(100000) == True", "assert is_Sum_Of_Powers_Of_Eleven(1000000) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 12 or not.", "code": "def is_Sum_Of_Powers_Of_Twelve(n):\n    while n > 0:\n        if n % 12 == 11:\n            return False\n        n //= 12\n    return True", "task_id": "138_78c6b081-4c6f-4c06-aa0d-768b5492751b", "test_setup_code": "", "test_list": ["assert is_Sum_Of_Powers_Of_Twelve(1) == True", "assert is_Sum_Of_Powers_Of_Twelve(12) == True", "assert is_Sum_Of_Powers_Of_Twelve(13) == True", "assert is_Sum_Of_Powers_Of_Twelve(24) == True", "assert is_Sum_Of_Powers_Of_Twelve(11) == False", "assert is_Sum_Of_Powers_Of_Twelve(23) == False", "assert is_Sum_Of_Powers_Of_Twelve(25) == True", "assert is_Sum_Of_Powers_Of_Twelve(144) == True", "assert is_Sum_Of_Powers_Of_Twelve(155) == True", "assert is_Sum_Of_Powers_Of_Twelve(156) == True", "assert is_Sum_Of_Powers_Of_Twelve(157) == False", "assert is_Sum_Of_Powers_Of_Twelve(1728) == True", "assert is_Sum_Of_Powers_Of_Twelve(1739) == True", "assert is_Sum_Of_Powers_Of_Twelve(1740) == True", "assert is_Sum_Of_Powers_Of_Twelve(1741) == False"], "challenge_test_list": []}
{"text": "Write a function to calculate water bill based on the given units of water consumed.", "code": "def calculate_water_bill(units):\n    if units <= 30:\n        amount = units * 1.50\n    elif units <= 100:\n        amount = (30 * 1.50) + ((units - 30) * 2.00)\n    elif units <= 200:\n        amount = (30 * 1.50) + (70 * 2.00) + ((units - 100) * 3.00)\n    else:\n        amount = (30 * 1.50) + (70 * 2.00) + (100 * 3.00) + ((units - 200) * 5.00)\n    return amount", "task_id": "136_e71bdc71-1178-417c-9d9a-c09160c22eb6", "test_setup_code": "", "test_list": ["assert calculate_water_bill(0) == 0.0", "assert calculate_water_bill(1) == 1.50", "assert calculate_water_bill(30) == 45.0", "assert calculate_water_bill(31) == 47.0", "assert calculate_water_bill(50) == 75.0", "assert calculate_water_bill(100) == 175.0", "assert calculate_water_bill(101) == 178.0", "assert calculate_water_bill(150) == 328.0", "assert calculate_water_bill(200) == 628.0", "assert calculate_water_bill(201) == 633.0", "assert calculate_water_bill(250) == 883.0", "assert calculate_water_bill(300) == 1133.0", "assert calculate_water_bill(500) == 2133.0", "assert calculate_water_bill(1000) == 4633.0", "assert calculate_water_bill(100) == 175.0"], "challenge_test_list": []}
{"text": "Write a function to calculate gas bill based on the given units of gas consumed.", "code": "def calculate_gas_bill(units):\n    if units <= 20:\n        amount = units * 1.20\n    elif units <= 50:\n        amount = (20 * 1.20) + ((units - 20) * 1.50)\n    elif units <= 100:\n        amount = (20 * 1.20) + (30 * 1.50) + ((units - 50) * 2.00)\n    else:\n        amount = (20 * 1.20) + (30 * 1.50) + (50 * 2.00) + ((units - 100) * 3.00)\n    return amount", "task_id": "136_98ced87e-5d11-4f6c-bcb2-630391109aa4", "test_setup_code": "", "test_list": ["assert calculate_gas_bill(0) == 0.0", "assert calculate_gas_bill(1) == 1.20", "assert calculate_gas_bill(20) == 24.0", "assert calculate_gas_bill(21) == 25.50", "assert calculate_gas_bill(50) == 69.0", "assert calculate_gas_bill(51) == 71.0", "assert calculate_gas_bill(100) == 169.0", "assert calculate_gas_bill(101) == 172.0", "assert calculate_gas_bill(150) == 322.0", "assert calculate_gas_bill(200) == 472.0", "assert calculate_gas_bill(25) == 31.50", "assert calculate_gas_bill(75) == 119.0", "assert calculate_gas_bill(125) == 247.0", "assert calculate_gas_bill(175) == 397.0", "assert calculate_gas_bill(300) == 772.0"], "challenge_test_list": []}
{"text": "Write a function to calculate internet bill based on the given data used in GB.", "code": "def calculate_internet_bill(data_used):\n    if data_used <= 10:\n        amount = data_used * 5.00\n    elif data_used <= 50:\n        amount = (10 * 5.00) + ((data_used - 10) * 4.00)\n    elif data_used <= 100:\n        amount = (10 * 5.00) + (40 * 4.00) + ((data_used - 50) * 3.00)\n    else:\n        amount = (10 * 5.00) + (40 * 4.00) + (50 * 3.00) + ((data_used - 100) * 2.00)\n    return amount", "task_id": "136_bc5eac07-8f7c-4a85-aa58-0a38ae2c10de", "test_setup_code": "", "test_list": ["assert calculate_internet_bill(0) == 0.00", "assert calculate_internet_bill(1) == 5.00", "assert calculate_internet_bill(10) == 50.00", "assert calculate_internet_bill(11) == 54.00", "assert calculate_internet_bill(20) == 90.00", "assert calculate_internet_bill(50) == 210.00", "assert calculate_internet_bill(51) == 213.00", "assert calculate_internet_bill(75) == 285.00", "assert calculate_internet_bill(100) == 360.00", "assert calculate_internet_bill(101) == 362.00", "assert calculate_internet_bill(150) == 460.00", "assert calculate_internet_bill(200) == 560.00", "assert calculate_internet_bill(500) == 1160.00", "assert calculate_internet_bill(1000) == 2160.00", "assert calculate_internet_bill(0.5) == 2.50"], "challenge_test_list": []}
{"text": "Write a function to calculate phone bill based on the given minutes of call time.", "code": "def calculate_phone_bill(minutes):\n    if minutes <= 100:\n        amount = minutes * 0.50\n    elif minutes <= 300:\n        amount = (100 * 0.50) + ((minutes - 100) * 0.40)\n    elif minutes <= 500:\n        amount = (100 * 0.50) + (200 * 0.40) + ((minutes - 300) * 0.30)\n    else:\n        amount = (100 * 0.50) + (200 * 0.40) + (200 * 0.30) + ((minutes - 500) * 0.20)\n    return amount", "task_id": "136_a9510e62-2fac-470f-a88e-bba17b43e5eb", "test_setup_code": "", "test_list": ["assert calculate_phone_bill(0) == 0.0", "assert calculate_phone_bill(1) == 0.5", "assert calculate_phone_bill(50) == 25.0", "assert calculate_phone_bill(100) == 50.0", "assert calculate_phone_bill(101) == 50.4", "assert calculate_phone_bill(150) == 70.0", "assert calculate_phone_bill(200) == 90.0", "assert calculate_phone_bill(300) == 130.0", "assert calculate_phone_bill(301) == 130.3", "assert calculate_phone_bill(400) == 160.0", "assert calculate_phone_bill(500) == 190.0", "assert calculate_phone_bill(501) == 190.2", "assert calculate_phone_bill(600) == 210.0", "assert calculate_phone_bill(1000) == 310.0", "assert calculate_phone_bill(100) == 50.0"], "challenge_test_list": []}
{"text": "Write a function to calculate parking fee based on the given hours parked.", "code": "def calculate_parking_fee(hours):\n    if hours <= 2:\n        amount = hours * 5.00\n    elif hours <= 5:\n        amount = (2 * 5.00) + ((hours - 2) * 4.00)\n    elif hours <= 10:\n        amount = (2 * 5.00) + (3 * 4.00) + ((hours - 5) * 3.00)\n    else:\n        amount = (2 * 5.00) + (3 * 4.00) + (5 * 3.00) + ((hours - 10) * 2.00)\n    return amount", "task_id": "136_6aeca200-3aa3-4792-b60b-943bcb48e15f", "test_setup_code": "", "test_list": ["assert calculate_parking_fee(1) == 5.00", "assert calculate_parking_fee(2) == 10.00", "assert calculate_parking_fee(3) == 14.00", "assert calculate_parking_fee(4) == 18.00", "assert calculate_parking_fee(5) == 22.00", "assert calculate_parking_fee(6) == 25.00", "assert calculate_parking_fee(7) == 28.00", "assert calculate_parking_fee(8) == 31.00", "assert calculate_parking_fee(9) == 34.00", "assert calculate_parking_fee(10) == 37.00", "assert calculate_parking_fee(11) == 39.00", "assert calculate_parking_fee(12) == 41.00", "assert calculate_parking_fee(15) == 47.00", "assert calculate_parking_fee(0) == 0.00", "assert calculate_parking_fee(24) == 67.00"], "challenge_test_list": []}
{"text": "Write a function to calculate taxi fare based on the given distance traveled in kilometers.", "code": "def calculate_taxi_fare(distance):\n    if distance <= 5:\n        amount = distance * 10.00\n    elif distance <= 20:\n        amount = (5 * 10.00) + ((distance - 5) * 8.00)\n    elif distance <= 50:\n        amount = (5 * 10.00) + (15 * 8.00) + ((distance - 20) * 6.00)\n    else:\n        amount = (5 * 10.00) + (15 * 8.00) + (30 * 6.00) + ((distance - 50) * 5.00)\n    return amount", "task_id": "136_9ce6c790-6fd1-4b67-86c2-2f298e734358", "test_setup_code": "", "test_list": ["assert calculate_taxi_fare(0) == 0.0", "assert calculate_taxi_fare(1) == 10.0", "assert calculate_taxi_fare(5) == 50.0", "assert calculate_taxi_fare(6) == 58.0", "assert calculate_taxi_fare(10) == 90.0", "assert calculate_taxi_fare(20) == 170.0", "assert calculate_taxi_fare(21) == 176.0", "assert calculate_taxi_fare(30) == 230.0", "assert calculate_taxi_fare(50) == 350.0", "assert calculate_taxi_fare(51) == 355.0", "assert calculate_taxi_fare(100) == 600.0", "assert calculate_taxi_fare(0.5) == 5.0", "assert calculate_taxi_fare(5.5) == 54.0", "assert calculate_taxi_fare(20.5) == 173.0", "assert calculate_taxi_fare(50.5) == 352.5"], "challenge_test_list": []}
{"text": "Write a function to calculate gym membership fee based on the given number of months.", "code": "def calculate_gym_membership_fee(months):\n    if months <= 3:\n        amount = months * 50.00\n    elif months <= 6:\n        amount = (3 * 50.00) + ((months - 3) * 45.00)\n    elif months <= 12:\n        amount = (3 * 50.00) + (3 * 45.00) + ((months - 6) * 40.00)\n    else:\n        amount = (3 * 50.00) + (3 * 45.00) + (6 * 40.00) + ((months - 12) * 35.00)\n    return amount", "task_id": "136_da6fb44b-1d03-4d5d-a760-12f01f85553a", "test_setup_code": "", "test_list": ["assert calculate_gym_membership_fee(1) == 50.00", "assert calculate_gym_membership_fee(3) == 150.00", "assert calculate_gym_membership_fee(4) == 195.00", "assert calculate_gym_membership_fee(6) == 285.00", "assert calculate_gym_membership_fee(7) == 325.00", "assert calculate_gym_membership_fee(12) == 525.00", "assert calculate_gym_membership_fee(13) == 560.00", "assert calculate_gym_membership_fee(0) == 0.00", "assert calculate_gym_membership_fee(2) == 100.00", "assert calculate_gym_membership_fee(5) == 240.00", "assert calculate_gym_membership_fee(10) == 445.00", "assert calculate_gym_membership_fee(11) == 485.00", "assert calculate_gym_membership_fee(15) == 665.00", "assert calculate_gym_membership_fee(20) == 875.00", "assert calculate_gym_membership_fee(25) == 1050.00"], "challenge_test_list": []}
{"text": "Write a function to calculate movie ticket cost based on the given number of tickets.", "code": "def calculate_movie_ticket_cost(tickets):\n    if tickets <= 2:\n        amount = tickets * 12.00\n    elif tickets <= 5:\n        amount = (2 * 12.00) + ((tickets - 2) * 10.00)\n    elif tickets <= 10:\n        amount = (2 * 12.00) + (3 * 10.00) + ((tickets - 5) * 8.00)\n    else:\n        amount = (2 * 12.00) + (3 * 10.00) + (5 * 8.00) + ((tickets - 10) * 6.00)\n    return amount", "task_id": "136_438ad4ef-80d6-4ca8-99ff-f05c338e2796", "test_setup_code": "", "test_list": ["assert calculate_movie_ticket_cost(1) == 12.00", "assert calculate_movie_ticket_cost(2) == 24.00", "assert calculate_movie_ticket_cost(3) == 34.00", "assert calculate_movie_ticket_cost(4) == 44.00", "assert calculate_movie_ticket_cost(5) == 54.00", "assert calculate_movie_ticket_cost(6) == 62.00", "assert calculate_movie_ticket_cost(7) == 70.00", "assert calculate_movie_ticket_cost(8) == 78.00", "assert calculate_movie_ticket_cost(9) == 86.00", "assert calculate_movie_ticket_cost(10) == 94.00", "assert calculate_movie_ticket_cost(11) == 100.00", "assert calculate_movie_ticket_cost(12) == 106.00", "assert calculate_movie_ticket_cost(15) == 124.00", "assert calculate_movie_ticket_cost(0) == 0.00", "assert calculate_movie_ticket_cost(20) == 184.00"], "challenge_test_list": []}
{"text": "Write a function to calculate laundry cost based on the given number of loads.", "code": "def calculate_laundry_cost(loads):\n    if loads <= 3:\n        amount = loads * 7.00\n    elif loads <= 7:\n        amount = (3 * 7.00) + ((loads - 3) * 6.00)\n    elif loads <= 10:\n        amount = (3 * 7.00) + (4 * 6.00) + ((loads - 7) * 5.00)\n    else:\n        amount = (3 * 7.00) + (4 * 6.00) + (3 * 5.00) + ((loads - 10) * 4.00)\n    return amount", "task_id": "136_a1f48cb1-3c1c-4b23-b31e-08445ee63e24", "test_setup_code": "", "test_list": ["assert calculate_laundry_cost(0) == 0.00", "assert calculate_laundry_cost(1) == 7.00", "assert calculate_laundry_cost(2) == 14.00", "assert calculate_laundry_cost(3) == 21.00", "assert calculate_laundry_cost(4) == 27.00", "assert calculate_laundry_cost(5) == 33.00", "assert calculate_laundry_cost(6) == 39.00", "assert calculate_laundry_cost(7) == 45.00", "assert calculate_laundry_cost(8) == 50.00", "assert calculate_laundry_cost(9) == 55.00", "assert calculate_laundry_cost(10) == 60.00", "assert calculate_laundry_cost(11) == 64.00", "assert calculate_laundry_cost(12) == 68.00", "assert calculate_laundry_cost(15) == 80.00", "assert calculate_laundry_cost(20) == 100.00"], "challenge_test_list": []}
{"text": "Write a function to calculate carpool cost based on the given number of passengers and distance traveled in kilometers.", "code": "def calculate_carpool_cost(passengers, distance):\n    if passengers <= 2:\n        amount = distance * 0.50\n    elif passengers <= 4:\n        amount = distance * 0.40\n    elif passengers <= 6:\n        amount = distance * 0.30\n    else:\n        amount = distance * 0.20\n    return amount", "task_id": "136_76895e49-136a-4ccd-9590-894fd42e4278", "test_setup_code": "", "test_list": ["assert calculate_carpool_cost(1, 10) == 5.0", "assert calculate_carpool_cost(2, 20) == 10.0", "assert calculate_carpool_cost(3, 30) == 12.0", "assert calculate_carpool_cost(4, 40) == 16.0", "assert calculate_carpool_cost(5, 50) == 15.0", "assert calculate_carpool_cost(6, 60) == 18.0", "assert calculate_carpool_cost(7, 70) == 14.0", "assert calculate_carpool_cost(8, 80) == 16.0", "assert calculate_carpool_cost(0, 100) == 50.0", "assert calculate_carpool_cost(1, 0) == 0.0", "assert calculate_carpool_cost(2, 0) == 0.0", "assert calculate_carpool_cost(3, 0) == 0.0", "assert calculate_carpool_cost(4, 0) == 0.0", "assert calculate_carpool_cost(5, 0) == 0.0", "assert calculate_carpool_cost(6, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to reverse a sublist of elements from index 'start' to 'end' in a list.", "code": "def reverse_sublist(nums, start, end):\n    nums[start:end+1] = nums[start:end+1][::-1]\n    return nums", "task_id": "141_0110318b-0ab0-464a-8dc3-d45b6f9c5600", "test_setup_code": "", "test_list": ["assert reverse_sublist([1, 2, 3, 4, 5], 1, 3) == [1, 4, 3, 2, 5]", "assert reverse_sublist([1, 2, 3, 4, 5], 0, 4) == [5, 4, 3, 2, 1]", "assert reverse_sublist([1, 2, 3, 4, 5], 2, 2) == [1, 2, 3, 4, 5]", "assert reverse_sublist([1, 2, 3, 4, 5], 0, 0) == [1, 2, 3, 4, 5]", "assert reverse_sublist([1, 2, 3, 4, 5], 4, 4) == [1, 2, 3, 4, 5]", "assert reverse_sublist([5, 4, 3, 2, 1], 1, 3) == [5, 2, 3, 4, 1]", "assert reverse_sublist([1, 2, 3], 0, 2) == [3, 2, 1]", "assert reverse_sublist([1, 2, 3, 4, 5, 6], 2, 5) == [1, 2, 6, 5, 4, 3]", "assert reverse_sublist([1], 0, 0) == [1]", "assert reverse_sublist([2, 4, 6, 8, 10], 1, 3) == [2, 8, 6, 4, 10]", "assert reverse_sublist([1, 3, 5, 7, 9], 0, 1) == [3, 1, 5, 7, 9]", "assert reverse_sublist([1, 3, 5, 7, 9], 3, 4) == [1, 3, 5, 9, 7]", "assert reverse_sublist([1, 2, 3, 4, 5], 1, 4) == [1, 5, 4, 3, 2]", "assert reverse_sublist([10, 20, 30, 40, 50], 0, 3) == [40, 30, 20, 10, 50]", "assert reverse_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], 2, 6) == [1, 2, 7, 6, 5, 4, 3, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to find the index of the maximum element in a list.", "code": "def find_max_index(nums):\n    return nums.index(max(nums))", "task_id": "141_bce28e67-533a-4229-98b3-975a93412e37", "test_setup_code": "", "test_list": ["assert find_max_index([1, 2, 3, 4, 5]) == 4", "assert find_max_index([5, 4, 3, 2, 1]) == 0", "assert find_max_index([1, 3, 2, 5, 4]) == 3", "assert find_max_index([-1, -2, -3, -4, -5]) == 0", "assert find_max_index([-5, -4, -3, -2, -1]) == 4", "assert find_max_index([0, 0, 0, 0, 0]) == 0", "assert find_max_index([1]) == 0", "assert find_max_index([1, 2, 3, 2, 1]) == 2", "assert find_max_index([2, 2, 2, 2, 2]) == 0", "assert find_max_index([1, 3, 3, 1]) == 1", "assert find_max_index([3, 1, 3]) == 0", "assert find_max_index([1, 2, 3, 4, 3, 2, 1]) == 3", "assert find_max_index([10, 20, 30, 40, 50, 40, 30, 20, 10]) == 4", "assert find_max_index([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 9", "assert find_max_index([1, -1, 1, -1, 1, -1]) == 0"], "challenge_test_list": []}
{"text": "Write a function to rotate a list to the right by k steps.", "code": "def rotate_list(nums, k):\n    k = k % len(nums)\n    return nums[-k:] + nums[:-k]", "task_id": "141_35cf5875-38ee-43a9-9fd0-98f01d9443ce", "test_setup_code": "", "test_list": ["assert rotate_list([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]", "assert rotate_list([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert rotate_list([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert rotate_list([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3]", "assert rotate_list([1], 3) == [1]", "assert rotate_list([], 3) == []", "assert rotate_list([1, 2, 3, 4, 5], -1) == [2, 3, 4, 5, 1]", "assert rotate_list([1, 2, 3, 4, 5], -3) == [4, 5, 1, 2, 3]", "assert rotate_list([1, 2], 1) == [2, 1]", "assert rotate_list([1, 2], 2) == [1, 2]", "assert rotate_list([1, 2], 3) == [2, 1]", "assert rotate_list([1, 2, 3, 4, 5, 6], 3) == [4, 5, 6, 1, 2, 3]", "assert rotate_list([1, 2, 3, 4, 5, 6], 6) == [1, 2, 3, 4, 5, 6]", "assert rotate_list([1, 2, 3, 4, 5, 6], 9) == [4, 5, 6, 1, 2, 3]", "assert rotate_list(['a', 'b', 'c', 'd'], 2) == ['c', 'd', 'a', 'b']"], "challenge_test_list": []}
{"text": "Write a function to find the index of the minimum element in a list.", "code": "def find_min_index(nums):\n    return nums.index(min(nums))", "task_id": "141_11685f64-adfa-4a14-8706-557739908b96", "test_setup_code": "", "test_list": ["assert find_min_index([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1", "assert find_min_index([10, 20, 30, 40, 50]) == 0", "assert find_min_index([5, 4, 3, 2, 1]) == 4", "assert find_min_index([1, 2, 3, 4, 5]) == 0", "assert find_min_index([2, 2, 2, 2, 2]) == 0", "assert find_min_index([-1, -2, -3, -4, -5]) == 4", "assert find_min_index([0, -1, -2, -3, -4, -5]) == 5", "assert find_min_index([100, 200, 300, 0, 400, 500]) == 3", "assert find_min_index([1]) == 0", "assert find_min_index([5, 5, 5, 5, 0, 5, 5]) == 4", "assert find_min_index([0, 0, 0, 0, 0, 0, 0]) == 0", "assert find_min_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 9", "assert find_min_index([3, 3, 3, 3, 3, 3, 3, 1, 3, 3]) == 7", "assert find_min_index([100, 200, 300, 400, 500, -100]) == 5", "assert find_min_index([1, 2, 3, 4, -1, 5, 6, 7, 8, 9]) == 4"], "challenge_test_list": []}
{"text": "Write a function to check if a list is sorted in non-decreasing order.", "code": "def is_sorted(nums):\n    return nums == sorted(nums)", "task_id": "141_93bc347c-0476-4783-b634-3cfbdc7e0f77", "test_setup_code": "", "test_list": ["assert is_sorted([]) == True", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([5, 4, 3, 2, 1]) == False", "assert is_sorted([1, 1, 1, 1, 1]) == True", "assert is_sorted([1, 2, 2, 3, 4]) == True", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([2, 2, 2, 2, 2]) == True", "assert is_sorted([1, 2, 3, 4, 3]) == False", "assert is_sorted([-1, 0, 1, 2, 3]) == True", "assert is_sorted([-3, -2, -1, 0, 1]) == True", "assert is_sorted([1, 2, 3, 2, 4]) == False", "assert is_sorted([1, 2, 3, 4, 5, 5, 6]) == True", "assert is_sorted([1, 2, 3, 4, 5, 4, 6]) == False", "assert is_sorted([100, 200, 300, 400, 500]) == True"], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list while maintaining the order.", "code": "def remove_duplicates(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "task_id": "141_604553fc-bf2e-47b9-beff-0e0d1012d45f", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([2, 2, 2, 3, 3, 3, 4, 4, 4]) == [2, 3, 4]", "assert remove_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([10, 20, 30, 10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]", "assert remove_duplicates([1, 2, 1, 2, 1, 2, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates(['a', 'b', 'a', 'b', 'c']) == ['a', 'b', 'c']", "assert remove_duplicates(['apple', 'banana', 'apple', 'orange', 'banana']) == ['apple', 'banana', 'orange']", "assert remove_duplicates([True, False, True, False]) == [True, False]", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates([1, '1', 2, '2', 1, '1']) == [1, '1', 2, '2']"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)", "task_id": "141_0617e37d-bf3c-495a-b20c-9081856d63d3", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([], []) == []", "assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists([], [4, 5, 6]) == [4, 5, 6]", "assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([4, 5, 6], [1, 2, 3]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([-3, -2, -1], [0, 1, 2]) == [-3, -2, -1, 0, 1, 2]", "assert merge_sorted_lists([0], [0]) == [0, 0]", "assert merge_sorted_lists([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([1, 4, 7], [2, 3, 5, 6]) == [1, 2, 3, 4, 5, 6, 7]", "assert merge_sorted_lists([1], [2]) == [1, 2]", "assert merge_sorted_lists([2], [1]) == [1, 2]", "assert merge_sorted_lists([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]", "assert merge_sorted_lists([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a list.", "code": "def find_second_largest(nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    return unique_nums[-2]", "task_id": "141_d359fc30-644d-40bb-8a73-7dc960b2e283", "test_setup_code": "", "test_list": ["assert find_second_largest([1, 2, 3, 4, 5]) == 4", "assert find_second_largest([5, 5, 5, 5, 5]) == None", "assert find_second_largest([10, 20, 20, 30, 30, 40]) == 30", "assert find_second_largest([1, 1, 2, 2, 3, 3]) == 2", "assert find_second_largest([100, 90, 80, 70, 60]) == 90", "assert find_second_largest([1, 2]) == 1", "assert find_second_largest([2, 1]) == 1", "assert find_second_largest([1]) == None", "assert find_second_largest([]) == None", "assert find_second_largest([-1, -2, -3, -4, -5]) == -2", "assert find_second_largest([0, 0, 0, 0, 0, 1]) == 0", "assert find_second_largest([1, 2, 3, 4, 4, 3, 2, 1]) == 3", "assert find_second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert find_second_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9", "assert find_second_largest([1, 3, 3, 2, 2, 1]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a list.", "code": "def sum_of_elements(nums):\n    return sum(nums)", "task_id": "141_58bd93e4-d5cb-42d1-907b-d4fbed7482c0", "test_setup_code": "", "test_list": ["assert sum_of_elements([1, 2, 3, 4, 5]) == 15", "assert sum_of_elements([0, 0, 0, 0, 0]) == 0", "assert sum_of_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_of_elements([100]) == 100", "assert sum_of_elements([]) == 0", "assert sum_of_elements([1, -1, 1, -1, 1, -1]) == 0", "assert sum_of_elements([1.5, 2.5, 3.5]) == 7.5", "assert sum_of_elements([100, 200, 300, 400, 500]) == 1500", "assert sum_of_elements([1, 2, 3, 4, 5, -15]) == 0", "assert sum_of_elements([1, 2, 3, 4, 5, 0]) == 15", "assert sum_of_elements([1, 2, 3, 4, 5, 1000000]) == 1000015", "assert sum_of_elements([-1, -2, -3, -4, -5, 15]) == 0", "assert sum_of_elements([1, 2, 3, 4, 5, -1000000]) == -999985", "assert sum_of_elements([1, 2, 3, 4, 5, 1000000, -1000000]) == 15", "assert sum_of_elements([1, 2, 3, 4, 5, 0, 0, 0]) == 15"], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a target element in a list.", "code": "def count_occurrences(nums, target):\n    return nums.count(target)", "task_id": "141_b1f1a7a2-2323-4b29-ad40-0385d06ef6f5", "test_setup_code": "", "test_list": ["assert count_occurrences([1, 2, 3, 4, 5], 3) == 1", "assert count_occurrences([1, 1, 1, 1, 1], 1) == 5", "assert count_occurrences([1, 2, 3, 4, 5], 6) == 0", "assert count_occurrences([], 1) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 5) == 1", "assert count_occurrences([1, 2, 3, 4, 5, 5, 5], 5) == 3", "assert count_occurrences([1, 2, 3, 4, 5], -1) == 0", "assert count_occurrences([0, 0, 0, 0, 0], 0) == 5", "assert count_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3], 2) == 3", "assert count_occurrences([1, 2, 3, 1, 2, 3, 1, 2, 3], 4) == 0", "assert count_occurrences([1], 1) == 1", "assert count_occurrences([1, 2, 3, 4, 5], 0) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 2) == 1", "assert count_occurrences([1, 2, 3, 4, 5, 2, 2], 2) == 3", "assert count_occurrences([1, 2, 3, 4, 5, 2, 2], 3) == 1"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of lists.", "code": "def extract_unique_elements(test_list):\n    element_count = {}\n    for sublist in test_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_a28ada44-4cf0-4b1c-a336-f9a216918291", "test_setup_code": "", "test_list": ["assert extract_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert extract_unique_elements([[1, 2, 2], [3, 4, 4], [5, 6, 6]]) == [1, 3, 5]", "assert extract_unique_elements([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == []", "assert extract_unique_elements([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == []", "assert extract_unique_elements([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [4, 5, 6]", "assert extract_unique_elements([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]", "assert extract_unique_elements([[1, 2], [2, 3], [3, 4], [4, 5]]) == [1, 5]", "assert extract_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 4, 7]]) == [2, 3, 5, 6, 8, 9]", "assert extract_unique_elements([[]]) == []", "assert extract_unique_elements([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9]]) == [1, 2, 4, 6, 8, 9]", "assert extract_unique_elements([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]]) == [1, 2, 3, 5, 6, 8, 9, 11, 12, 13]", "assert extract_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert extract_unique_elements([[1, 2, 3], [3, 4, 5], [5, 6, 7], [7, 8, 9], [9, 10, 11]]) == [1, 2, 4, 6, 8, 10, 11]", "assert extract_unique_elements([[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]) == []", "assert extract_unique_elements([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == []"], "challenge_test_list": []}
{"text": "Write a function to extract elements that do not repeat in the given list of lists.", "code": "def extract_non_repeating_elements(test_list):\n    element_count = {}\n    for sublist in test_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_0252783d-7e33-47d4-81d6-43c31e3d0c69", "test_setup_code": "", "test_list": ["assert extract_non_repeating_elements([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert extract_non_repeating_elements([[1, 2], [2, 3], [3, 4]]) == [1, 4]", "assert extract_non_repeating_elements([[1, 1, 2], [2, 3, 4]]) == [3, 4]", "assert extract_non_repeating_elements([[1, 2, 3], [4, 5], [1, 2, 3]]) == [4, 5]", "assert extract_non_repeating_elements([[1, 2, 3], [3, 4, 5], [5, 6, 7]]) == [1, 2, 4, 6, 7]", "assert extract_non_repeating_elements([]) == []", "assert extract_non_repeating_elements([[]]) == []", "assert extract_non_repeating_elements([[], []]) == []", "assert extract_non_repeating_elements([[1, 2, 3]]) == [1, 2, 3]", "assert extract_non_repeating_elements([[1], [1], [1]]) == []", "assert extract_non_repeating_elements([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert extract_non_repeating_elements([[1, 1, 1], [2, 2, 2]]) == []", "assert extract_non_repeating_elements([[1, 2], [3, 4], [1, 3]]) == [2, 4]", "assert extract_non_repeating_elements([[10, 20], [20, 30], [30, 40], [40, 10]]) == []", "assert extract_non_repeating_elements([[100, 200, 300], [400, 500], [100, 400]]) == [200, 300, 500]"], "challenge_test_list": []}
{"text": "Write a function to extract characters that occur exactly once in the given string.", "code": "def extract_unique_chars(test_string):\n    char_count = {}\n    for char in test_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return ''.join([char for char, count in char_count.items() if count == 1])", "task_id": "140_ec87d8ab-01bf-4663-9104-2e8b6645bae1", "test_setup_code": "", "test_list": ["assert extract_unique_chars('abcabc') == ''", "assert extract_unique_chars('aabbccddeeffg') == 'g'", "assert extract_unique_chars('abcdef') == 'abcdef'", "assert extract_unique_chars('a') == 'a'", "assert extract_unique_chars('') == ''", "assert extract_unique_chars('aabbccddeeff') == ''", "assert extract_unique_chars('aabbccddeeffgh') == 'gh'", "assert extract_unique_chars('aabbccddeeffgghhii') == ''", "assert extract_unique_chars('aabbccddeeffgghhiijj') == ''", "assert extract_unique_chars('aabbccddeeffgghhiijjk') == 'k'", "assert extract_unique_chars('The quick brown fox jumps over the lazy dog') == 'Thquickbrownfxjmpsvlazydg'", "assert extract_unique_chars('11223344556677889900') == ''", "assert extract_unique_chars('1234567890') == '1234567890'", "assert extract_unique_chars('!@#$%^&*()') == '!@#$%^&*()'", "assert extract_unique_chars('aA') == 'aA'"], "challenge_test_list": []}
{"text": "Write a function to extract numbers that occur exactly once in the given list of numbers.", "code": "def extract_unique_numbers(test_list):\n    number_count = {}\n    for number in test_list:\n        if number in number_count:\n            number_count[number] += 1\n        else:\n            number_count[number] = 1\n    return [number for number, count in number_count.items() if count == 1]", "task_id": "140_2f5f9b37-0a23-4c61-9eb9-ee59eaaeaa69", "test_setup_code": "", "test_list": ["assert extract_unique_numbers([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]", "assert extract_unique_numbers([1, 1, 1, 1, 1]) == []", "assert extract_unique_numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert extract_unique_numbers([]) == []", "assert extract_unique_numbers([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]", "assert extract_unique_numbers([10, 20, 30, 40, 50, 10, 20, 30]) == [40, 50]", "assert extract_unique_numbers([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == []", "assert extract_unique_numbers([100, 200, 300, 400, 500, 100, 200, 300, 400]) == [500]", "assert extract_unique_numbers([0, 0, 0, 0, 0]) == []", "assert extract_unique_numbers([1, 1, 2, 2, 3, 3, 4, 5, 5]) == [4]", "assert extract_unique_numbers([1]) == [1]", "assert extract_unique_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert extract_unique_numbers([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == [1]", "assert extract_unique_numbers([-1, -2, -2, -3, -3, -4, -4, -5, -5, -6, -6, -7, -7, -8, -8, -9, -9, -10, -10]) == [-1]", "assert extract_unique_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []"], "challenge_test_list": []}
{"text": "Write a function to extract words that occur exactly once in the given string.", "code": "def extract_unique_words(test_string):\n    word_count = {}\n    words = test_string.split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return [word for word, count in word_count.items() if count == 1]", "task_id": "140_d408cfb6-66f0-4636-8c7a-fdd35434e2dd", "test_setup_code": "", "test_list": ["assert extract_unique_words('this is a test') == ['this', 'is', 'a', 'test']", "assert extract_unique_words('hello world hello') == ['world']", "assert extract_unique_words('one fish two fish red fish blue fish') == ['one', 'two', 'red', 'blue']", "assert extract_unique_words('') == []", "assert extract_unique_words('repeat repeat repeat') == []", "assert extract_unique_words('unique words only') == ['unique', 'words', 'only']", "assert extract_unique_words('a a a b b c') == ['c']", "assert extract_unique_words('single') == ['single']", "assert extract_unique_words('case insensitive CASE insensitive') == ['case', 'CASE']", "assert extract_unique_words('punctuation, should not affect!') == ['punctuation,', 'should', 'not', 'affect!']", "assert extract_unique_words('numbers 123 and words 123') == ['numbers', 'and', 'words']", "assert extract_unique_words('mixed CASE case') == ['mixed', 'CASE']", "assert extract_unique_words('edge cases edge') == ['cases']", "assert extract_unique_words('multiple spaces between words') == ['multiple', 'spaces', 'between', 'words']", "assert extract_unique_words('special characters #$%^&*()') == ['special', 'characters', '#$%^&*()']"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given 2D matrix.", "code": "def extract_unique_elements_from_matrix(matrix):\n    element_count = {}\n    for row in matrix:\n        for elem in row:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_d3f3a76d-beed-4613-864d-21e15a1c2183", "test_setup_code": "", "test_list": ["assert extract_unique_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert extract_unique_elements_from_matrix([[1, 2, 2], [3, 4, 4], [5, 6, 6]]) == [1, 3, 5]", "assert extract_unique_elements_from_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == []", "assert extract_unique_elements_from_matrix([[1, 2, 3], [3, 2, 1], [4, 5, 6]]) == [4, 5, 6]", "assert extract_unique_elements_from_matrix([[1, 2], [3, 4], [5, 6], [7, 8]]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert extract_unique_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 1]]) == [2, 3, 4, 5, 6, 7, 8]", "assert extract_unique_elements_from_matrix([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == []", "assert extract_unique_elements_from_matrix([[1]]) == [1]", "assert extract_unique_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]]) == [4, 5, 6, 7, 8, 9]", "assert extract_unique_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert extract_unique_elements_from_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]", "assert extract_unique_elements_from_matrix([[1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10], [10, 11, 12, 13]]) == [1, 2, 3, 5, 6, 8, 9, 11, 12, 13]", "assert extract_unique_elements_from_matrix([[1, 1], [1, 1]]) == []", "assert extract_unique_elements_from_matrix([[1, 2], [2, 3], [3, 4], [4, 5]]) == [1, 5]", "assert extract_unique_elements_from_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of dictionaries.", "code": "def extract_unique_elements_from_dict(dict_list):\n    element_count = {}\n    for d in dict_list:\n        for key, value in d.items():\n            if value in element_count:\n                element_count[value] += 1\n            else:\n                element_count[value] = 1\n    return [value for value, count in element_count.items() if count == 1]", "task_id": "140_e798a015-5a43-4dde-960e-04ad3226a723", "test_setup_code": "", "test_list": ["assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 1}]) == [2]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}]) == [1, 2, 3]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 1}, {'c': 1}]) == []", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 2}]) == [1, 3]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}]) == [1, 2, 3, 4, 5]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 1}]) == [2, 3, 4, 5]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 1}, {'g': 2}]) == [3, 4, 5]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 1}, {'c': 1}, {'d': 1}]) == []", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 2}, {'d': 3}, {'e': 3}, {'f': 4}, {'g': 4}, {'h': 5}, {'i': 5}, {'j': 6}]) == [1, 6]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}, {'k': 1}, {'l': 2}, {'m': 3}, {'n': 4}, {'o': 5}, {'p': 6}, {'q': 7}, {'r': 8}, {'s': 9}, {'t': 10}]) == []", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}, {'k': 11}, {'l': 12}, {'m': 13}, {'n': 14}, {'o': 15}, {'p': 16}, {'q': 17}, {'r': 18}, {'s': 19}, {'t': 20}]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}, {'k': 11}, {'l': 12}, {'m': 13}, {'n': 14}, {'o': 15}, {'p': 16}, {'q': 17}, {'r': 18}, {'s': 19}, {'t': 20}, {'u': 1}, {'v': 2}, {'w': 3}, {'x': 4}, {'y': 5}, {'z': 6}, {'aa': 7}, {'bb': 8}, {'cc': 9}, {'dd': 10}, {'ee': 11}, {'ff': 12}, {'gg': 13}, {'hh': 14}, {'ii': 15}, {'jj': 16}, {'kk': 17}, {'ll': 18}, {'mm': 19}, {'nn': 20}]) == []", "assert extract_unique_elements_from_dict([{'a': 1}, {'b': 1}, {'c': 2}, {'d': 2}, {'e': 3}, {'f': 3}, {'g': 4}, {'h': 4}, {'i': 5}, {'j': 5}, {'k': 6}, {'l': 6}, {'m': 7}, {'n': 7}, {'o': 8}, {'p': 8}, {'q': 9}, {'r': 9}, {'s': 10}, {'t': 10}]) == []", "assert extract_unique_elements_from_dict([]) == []"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given nested list.", "code": "def extract_unique_elements_from_nested_list(nested_list):\n    element_count = {}\n    for sublist in nested_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_971acd98-940d-445d-8eaf-bdef4283f2b2", "test_setup_code": "", "test_list": ["assert extract_unique_elements_from_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert extract_unique_elements_from_nested_list([[1, 2, 2], [3, 4, 4], [5, 6, 6]]) == [1, 3, 5]", "assert extract_unique_elements_from_nested_list([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == []", "assert extract_unique_elements_from_nested_list([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [3, 2, 1]]) == []", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [4, 5, 6], [1, 2, 3]]) == [4, 5, 6]", "assert extract_unique_elements_from_nested_list([[1, 2], [2, 3], [3, 4], [4, 5]]) == [1, 5]", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 3, 5], [7, 9, 11]]) == [2, 4, 6, 8, 11]", "assert extract_unique_elements_from_nested_list([[]]) == []", "assert extract_unique_elements_from_nested_list([[1, 2, 3, 4], [4, 5, 6], [6, 7, 8], [8, 9, 10]]) == [1, 2, 3, 5, 7, 9, 10]", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == []", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert extract_unique_elements_from_nested_list([[1, 2, 2], [3, 4, 4], [5, 6, 6], [7, 8, 8]]) == [1, 3, 5, 7]", "assert extract_unique_elements_from_nested_list([[1, 1, 2, 2], [3, 3, 4, 4], [5, 5, 6, 6]]) == []", "assert extract_unique_elements_from_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of strings.", "code": "def extract_unique_elements_from_string_list(string_list):\n    element_count = {}\n    for string in string_list:\n        for char in string:\n            if char in element_count:\n                element_count[char] += 1\n            else:\n                element_count[char] = 1\n    return [char for char, count in element_count.items() if count == 1]", "task_id": "140_379d9728-a0bc-4c20-a308-f6a4876f4ebb", "test_setup_code": "", "test_list": ["assert extract_unique_elements_from_string_list(['abc', 'def', 'ghi']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i']", "assert extract_unique_elements_from_string_list(['a', 'a', 'a']) == []", "assert extract_unique_elements_from_string_list(['abc', 'bcd', 'cde']) == ['a', 'e']", "assert extract_unique_elements_from_string_list(['', '']) == []", "assert extract_unique_elements_from_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']", "assert extract_unique_elements_from_string_list(['aa', 'bb', 'cc']) == []", "assert extract_unique_elements_from_string_list(['ab', 'bc', 'cd']) == ['a', 'd']", "assert extract_unique_elements_from_string_list(['aabbcc', 'ddeeff', 'gghhii']) == []", "assert extract_unique_elements_from_string_list(['a', 'b', 'c', 'a', 'b', 'c']) == []", "assert extract_unique_elements_from_string_list(['abc', 'def', 'ghi', 'jkl', 'mno', 'pqr', 'stu', 'vwx', 'yz']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']", "assert extract_unique_elements_from_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == []", "assert extract_unique_elements_from_string_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0']", "assert extract_unique_elements_from_string_list(['a1', 'b2', 'c3', 'd4', 'e5', 'f6', 'g7', 'h8', 'i9', 'j0']) == ['a', '1', 'b', '2', 'c', '3', 'd', '4', 'e', '5', 'f', '6', 'g', '7', 'h', '8', 'i', '9', 'j', '0']", "assert extract_unique_elements_from_string_list(['abc', 'abc', 'abc']) == []", "assert extract_unique_elements_from_string_list(['aabbcc', 'ddeeff', 'gghhii', 'jjkkll', 'mmnnoo', 'ppqqrr', 'ssttuu', 'vvwwxx', 'yyzz']) == []"], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of tuples.", "code": "def extract_unique_elements_from_tuple_list(tuple_list):\n    element_count = {}\n    for tpl in tuple_list:\n        for elem in tpl:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_f47f5996-be1a-4558-8da6-360de942a7f8", "test_setup_code": "", "test_list": ["assert extract_unique_elements_from_tuple_list([(1, 2), (3, 4), (5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert extract_unique_elements_from_tuple_list([(1, 2), (2, 3), (3, 4)]) == [1, 4]", "assert extract_unique_elements_from_tuple_list([(1, 1), (2, 2), (3, 3)]) == []", "assert extract_unique_elements_from_tuple_list([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert extract_unique_elements_from_tuple_list([(1,), (1,), (2,), (2,), (3,)]) == [3]", "assert extract_unique_elements_from_tuple_list([]) == []", "assert extract_unique_elements_from_tuple_list([(1, 2, 2), (3, 3, 4)]) == [1, 4]", "assert extract_unique_elements_from_tuple_list([(1, 2, 3), (3, 4, 5), (5, 6, 7)]) == [1, 2, 4, 6, 7]", "assert extract_unique_elements_from_tuple_list([(1, 2), (2, 3), (3, 4), (4, 5)]) == [1, 5]", "assert extract_unique_elements_from_tuple_list([(1, 2, 3, 4), (4, 5, 6, 7), (7, 8, 9, 10)]) == [1, 2, 3, 5, 6, 8, 9, 10]", "assert extract_unique_elements_from_tuple_list([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == []", "assert extract_unique_elements_from_tuple_list([(1, 2), (2, 3), (3, 4), (4, 1)]) == []", "assert extract_unique_elements_from_tuple_list([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert extract_unique_elements_from_tuple_list([(1, 2, 3), (4, 5, 6), (7, 8, 9), (1, 4, 7)]) == [2, 3, 5, 6, 8, 9]", "assert extract_unique_elements_from_tuple_list([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10), (1, 2, 3, 4, 5)]) == [6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to count the number of strings present in the given tuple.", "code": "def count_strings_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, str))", "task_id": "143_28b3b9b7-da7e-4495-aa06-4f794cff850f", "test_setup_code": "", "test_list": ["assert count_strings_in_tuple(()) == 0", "assert count_strings_in_tuple(('a', 'b', 'c')) == 3", "assert count_strings_in_tuple((1, 2, 3)) == 0", "assert count_strings_in_tuple(('a', 1, 'b', 2, 'c', 3)) == 3", "assert count_strings_in_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == 10", "assert count_strings_in_tuple((None, True, False, 'yes', 'no')) == 2", "assert count_strings_in_tuple(('one', 2, 3.0, 'four', [5], {6: 'six'}, 'seven')) == 3", "assert count_strings_in_tuple(('string', '', 'another string', '')) == 4", "assert count_strings_in_tuple(('a', 'b', 'c', 'd', 'e', 1, 2, 3, 4, 5)) == 5", "assert count_strings_in_tuple((1, 2, 3, 4, 5, 'a', 'b', 'c', 'd', 'e')) == 5", "assert count_strings_in_tuple((1, '1', 2, '2', 3, '3')) == 3", "assert count_strings_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0", "assert count_strings_in_tuple(('single',)) == 1", "assert count_strings_in_tuple(('a', 'b', 'c', 1, 2, 3, 'd', 'e', 'f', 4, 5, 6)) == 6", "assert count_strings_in_tuple(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 26"], "challenge_test_list": []}
{"text": "Write a function to count the number of integers present in the given tuple.", "code": "def count_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int))", "task_id": "143_76b6310c-6069-4975-8d19-7fd8740d05f4", "test_setup_code": "", "test_list": ["assert count_integers_in_tuple((1, 2, 3, 4, 5)) == 5", "assert count_integers_in_tuple((1, 'a', 3.5, 4, 'b')) == 2", "assert count_integers_in_tuple(()) == 0", "assert count_integers_in_tuple((1, 2, 3, 4, 5, '6', 7.0, 8, 9)) == 6", "assert count_integers_in_tuple((1, 2, 3, (4, 5), [6, 7])) == 3", "assert count_integers_in_tuple((True, False, 1, 0)) == 4", "assert count_integers_in_tuple((None, 'string', 3.14, 42)) == 1", "assert count_integers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert count_integers_in_tuple(('a', 'b', 'c')) == 0", "assert count_integers_in_tuple((1, 2, 3, '4', '5', 6.0, 7, 8.1)) == 4", "assert count_integers_in_tuple((1, 2, 3, -4, -5)) == 5", "assert count_integers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 20", "assert count_integers_in_tuple((1, 2, 3, 4, 5, 'six', 'seven', 8, 9, 10)) == 8", "assert count_integers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'eleven', 'twelve', 13, 14, 15)) == 13", "assert count_integers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25)) == 25"], "challenge_test_list": []}
{"text": "Write a function to count the number of floats present in the given tuple.", "code": "def count_floats_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, float))", "task_id": "143_b5713d95-7598-43db-a6cf-f5e741170019", "test_setup_code": "", "test_list": ["assert count_floats_in_tuple((1, 2, 3.0, 4.5, 'a', 6.7)) == 3", "assert count_floats_in_tuple((1, 2, 3, 4, 5)) == 0", "assert count_floats_in_tuple((1.1, 2.2, 3.3, 4.4, 5.5)) == 5", "assert count_floats_in_tuple((1.0, 2, 3.0, 4, 5.0)) == 3", "assert count_floats_in_tuple(()) == 0", "assert count_floats_in_tuple((1.1, 'string', 2.2, None, 3.3)) == 3", "assert count_floats_in_tuple((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0)) == 10", "assert count_floats_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0", "assert count_floats_in_tuple((1.1, 2, 3.3, 4, 5.5, 6, 7.7, 8, 9.9, 10)) == 5", "assert count_floats_in_tuple((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5)) == 15", "assert count_floats_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15)) == 0", "assert count_floats_in_tuple((1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.0, 11.1, 12.2, 13.3, 14.4, 15.5, 16.6, 17.7, 18.8, 19.9, 20.0)) == 20", "assert count_floats_in_tuple((1, 2, 3.0, 4.5, 'a', 6.7, 7.8, 8.9, 9.0, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 19.0, 20.1)) == 16", "assert count_floats_in_tuple((1, 2, 3.0, 4.5, 'a', 6.7, 7.8, 8.9, 9.0, 10.1, 11.2, 12.3, 13.4, 14.5, 15.6, 16.7, 17.8, 18.9, 19.0, 20.1, 21.2, 22.3, 23.4, 24.5, 25.6, 26.7, 27.8, 28.9, 29.0, 30.1)) == 24", "assert count_floats_in_tuple((1, 2, 3, 4.0, 5.0, 6.0, 7.0, 8.0, 9.0, 10.0)) == 7"], "challenge_test_list": []}
{"text": "Write a function to count the number of dictionaries present in the given tuple.", "code": "def count_dicts_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, dict))", "task_id": "143_7e8aface-c8d6-4ab8-bc01-c36091b272e4", "test_setup_code": "", "test_list": ["assert count_dicts_in_tuple(()) == 0", "assert count_dicts_in_tuple(({},)) == 1", "assert count_dicts_in_tuple(({}, {}, {})) == 3", "assert count_dicts_in_tuple((1, 2, 3)) == 0", "assert count_dicts_in_tuple((1, {}, 3)) == 1", "assert count_dicts_in_tuple(({}, 2, {})) == 2", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3})) == 3", "assert count_dicts_in_tuple(({'a': 1}, [1, 2, 3], {'b': 2})) == 2", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, [1, 2, 3], 'string', 123)) == 2", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5})) == 5", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3}, 4, 5, 6, 7, 8, 9, 10)) == 3", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10})) == 10", "assert count_dicts_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 10", "assert count_dicts_in_tuple(({'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}, {'e': 5}, {'f': 6}, {'g': 7}, {'h': 8}, {'i': 9}, {'j': 10}, {'k': 11}, {'l': 12}, {'m': 13}, {'n': 14}, {'o': 15}, {'p': 16}, {'q': 17}, {'r': 18}, {'s': 19}, {'t': 20})) == 20"], "challenge_test_list": []}
{"text": "Write a function to count the number of tuples present in the given tuple.", "code": "def count_tuples_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, tuple))", "task_id": "143_a9ebbe87-d02b-4345-93dd-b88bbf3c1903", "test_setup_code": "", "test_list": ["assert count_tuples_in_tuple(()) == 0", "assert count_tuples_in_tuple((1, 2, 3)) == 0", "assert count_tuples_in_tuple(((1, 2), (3, 4), (5, 6))) == 3", "assert count_tuples_in_tuple((1, (2, 3), 4, (5, 6))) == 2", "assert count_tuples_in_tuple(((1,), (2,), (3,), (4,))) == 4", "assert count_tuples_in_tuple((('a', 'b'), ('c', 'd'), 'e', 'f')) == 2", "assert count_tuples_in_tuple((1, (2, 3), (4, 5), 6, (7, 8), 9)) == 3", "assert count_tuples_in_tuple(((1, 2, 3), (4,), (5, 6, 7, 8))) == 3", "assert count_tuples_in_tuple((1, 2, (3, 4, (5, 6)), 7)) == 1", "assert count_tuples_in_tuple(((1, 2), (3, (4, 5)), 6)) == 2", "assert count_tuples_in_tuple((1, (2, (3, (4, (5, 6)))))) == 1", "assert count_tuples_in_tuple(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10))) == 5", "assert count_tuples_in_tuple((1, (2, 3), (4, 5), (6, 7), (8, 9), 10)) == 4", "assert count_tuples_in_tuple(((1, 2), (3, 4), (5, 6), 'a', 'b', 'c')) == 3", "assert count_tuples_in_tuple(((1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12))) == 6"], "challenge_test_list": []}
{"text": "Write a function to count the number of sets present in the given tuple.", "code": "def count_sets_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, set))", "task_id": "143_637afb46-aa31-42f2-9e9d-88aaf8afc87f", "test_setup_code": "", "test_list": ["assert count_sets_in_tuple(()) == 0", "assert count_sets_in_tuple((1, 2, 3)) == 0", "assert count_sets_in_tuple(({1, 2, 3},)) == 1", "assert count_sets_in_tuple(({1, 2}, {3, 4}, {5, 6})) == 3", "assert count_sets_in_tuple((set(), {1}, {1, 2})) == 3", "assert count_sets_in_tuple((set(),)) == 1", "assert count_sets_in_tuple((1, 'string', {1, 2}, [1, 2], (1, 2))) == 1", "assert count_sets_in_tuple(({1, 2}, [1, 2], {1: 2}, 'set')) == 1", "assert count_sets_in_tuple(({1, 2}, {3, 4}, 5, 'set', [1, 2])) == 2", "assert count_sets_in_tuple((frozenset([1, 2]), {1, 2})) == 1", "assert count_sets_in_tuple((set(), set(), set())) == 3", "assert count_sets_in_tuple((None, True, False, 0, '')) == 0", "assert count_sets_in_tuple((dict(), list(), tuple(), set())) == 1", "assert count_sets_in_tuple(({1, 2, 3}, {1: 2, 3: 4}, {1, 2, 3}.union({4, 5}))) == 2", "assert count_sets_in_tuple(({i for i in range(5)}, {i: i for i in range(5)}, [i for i in range(5)])) == 1"], "challenge_test_list": []}
{"text": "Write a function to count the number of booleans present in the given tuple.", "code": "def count_booleans_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, bool))", "task_id": "143_57875c52-25ea-4309-84a5-f2f6db7b8bca", "test_setup_code": "", "test_list": ["assert count_booleans_in_tuple((True, False, True)) == 3", "assert count_booleans_in_tuple((1, 2, 3, 4)) == 0", "assert count_booleans_in_tuple((True, 1, 'True', False, 0)) == 2", "assert count_booleans_in_tuple(()) == 0", "assert count_booleans_in_tuple((True,)) == 1", "assert count_booleans_in_tuple((False,)) == 1", "assert count_booleans_in_tuple((True, False, True, False, True)) == 5", "assert count_booleans_in_tuple((None, True, False, 1, 0, 'False')) == 2", "assert count_booleans_in_tuple((True, True, True, True)) == 4", "assert count_booleans_in_tuple((False, False, False, False)) == 4", "assert count_booleans_in_tuple((1, 2, 3, True, False)) == 2", "assert count_booleans_in_tuple((True, 0, 1, False, 'True', None)) == 2", "assert count_booleans_in_tuple((False, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)) == 1", "assert count_booleans_in_tuple((True, False, 'True', 'False', 1, 0)) == 2", "assert count_booleans_in_tuple((False, 0, 1, 'True', 'False', True)) == 2"], "challenge_test_list": []}
{"text": "Write a function to count the number of None values present in the given tuple.", "code": "def count_none_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if item is None)", "task_id": "143_1f8c88f7-2baa-4783-9e5e-5263823eb091", "test_setup_code": "", "test_list": ["assert count_none_in_tuple((None, None, None)) == 3", "assert count_none_in_tuple((1, 2, 3, None)) == 1", "assert count_none_in_tuple((None, 1, None, 2, None)) == 3", "assert count_none_in_tuple(()) == 0", "assert count_none_in_tuple((1, 2, 3)) == 0", "assert count_none_in_tuple((None,)) == 1", "assert count_none_in_tuple((None, None, 1, 2, 3, None, 4, None)) == 4", "assert count_none_in_tuple((None, 0, None, '', None, False, None)) == 4", "assert count_none_in_tuple((None, None, None, None, None, None, None, None, None, None)) == 10", "assert count_none_in_tuple((None, 'None', None, 'None', None)) == 3", "assert count_none_in_tuple((None, [None], {None: None}, (None,))) == 1", "assert count_none_in_tuple((None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)) == 15", "assert count_none_in_tuple((None, 1, 'a', None, 2.5, None, True, None)) == 4", "assert count_none_in_tuple((None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None)) == 20", "assert count_none_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of positive integers present in the given tuple.", "code": "def count_positive_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int) and item > 0)", "task_id": "143_1ed168a7-7cd8-4376-a57c-27451b1a15d6", "test_setup_code": "", "test_list": ["assert count_positive_integers_in_tuple((1, 2, 3, 4, 5)) == 5", "assert count_positive_integers_in_tuple((-1, -2, -3, -4, -5)) == 0", "assert count_positive_integers_in_tuple((0, 1, -1, 2, -2, 3, -3)) == 3", "assert count_positive_integers_in_tuple((1, 2, '3', 4, '5')) == 3", "assert count_positive_integers_in_tuple((1, 2.5, 3, 4.0, 5)) == 3", "assert count_positive_integers_in_tuple(()) == 0", "assert count_positive_integers_in_tuple((1,)) == 1", "assert count_positive_integers_in_tuple((100, 200, 300, 400, 500)) == 5", "assert count_positive_integers_in_tuple((1, -1, 1, -1, 1, -1)) == 3", "assert count_positive_integers_in_tuple((1, 2, 3, 4, -5, -6, -7, -8, -9, -10)) == 4", "assert count_positive_integers_in_tuple((0, 0, 0, 0, 0)) == 0", "assert count_positive_integers_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert count_positive_integers_in_tuple((1, 2, None, 4, 5)) == 4", "assert count_positive_integers_in_tuple((1, 2, 3, 'four', 5)) == 4", "assert count_positive_integers_in_tuple((1, -1, 0, 2, -2, 3, -3, 4, -4, 5, -5)) == 5"], "challenge_test_list": []}
{"text": "Write a function to count the number of negative integers present in the given tuple.", "code": "def count_negative_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int) and item < 0)", "task_id": "143_8925eb31-04ef-4220-8150-096095d9bf38", "test_setup_code": "", "test_list": ["assert count_negative_integers_in_tuple((1, -1, -2, 3, 4)) == 2", "assert count_negative_integers_in_tuple((0, 1, 2, 3, 4)) == 0", "assert count_negative_integers_in_tuple((-1, -2, -3, -4, -5)) == 5", "assert count_negative_integers_in_tuple((1, -1, 'a', -2, 'b', -3)) == 3", "assert count_negative_integers_in_tuple(()) == 0", "assert count_negative_integers_in_tuple((1, 2, 3, 4, 5)) == 0", "assert count_negative_integers_in_tuple((-1, -1, -1, -1, -1)) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9)) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0)) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, 'a', 'b', 'c')) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, 1.5, -2.5, 3.5)) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, None, True, False)) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, [], {}, ())) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, [1, -1], {1: -1}, (1, -1))) == 5", "assert count_negative_integers_in_tuple((1, -1, -2, 3, 4, -5, -6, 7, 8, -9, 0, 'a', 'b', 'c', -10, -11, -12)) == 8"], "challenge_test_list": []}
{"text": "Write a function to count the common elements in three given lists.", "code": "def count_common_elements(list1, list2, list3):\n    common_elements = set(list1) & set(list2) & set(list3)\n    return len(common_elements)", "task_id": "142_31cbf7f5-c7f9-431f-bb19-63571b2e1fc9", "test_setup_code": "", "test_list": ["assert count_common_elements([1, 2, 3], [3, 4, 5], [3, 6, 7]) == 1", "assert count_common_elements([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0", "assert count_common_elements([1, 1, 1], [1, 1, 1], [1, 1, 1]) == 1", "assert count_common_elements([], [1, 2, 3], [4, 5, 6]) == 0", "assert count_common_elements([1, 2, 3], [], [4, 5, 6]) == 0", "assert count_common_elements([1, 2, 3], [4, 5, 6], []) == 0", "assert count_common_elements([1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]) == 2", "assert count_common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7]) == 3", "assert count_common_elements([1], [1], [1]) == 1", "assert count_common_elements([1, 2, 3], [3, 2, 1], [2, 1, 3]) == 3", "assert count_common_elements([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5]) == 5", "assert count_common_elements([1, 2, 3], [3, 4, 5], [5, 6, 7]) == 0", "assert count_common_elements([1, 2, 3, 4], [4, 5, 6, 7], [7, 8, 9, 10]) == 0", "assert count_common_elements([1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7, 8]) == 3", "assert count_common_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 4"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is greater than a given threshold.", "code": "def count_samepair_with_threshold(list1, list2, list3, threshold):\n    result = sum(m == n == o and m > threshold for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_03ce6243-d26a-4811-8638-db79ae90b932", "test_setup_code": "", "test_list": ["assert count_samepair_with_threshold([1, 2, 3], [1, 2, 3], [1, 2, 3], 0) == 3", "assert count_samepair_with_threshold([1, 2, 3], [1, 2, 3], [1, 2, 3], 2) == 1", "assert count_samepair_with_threshold([1, 2, 3], [1, 2, 3], [1, 2, 3], 3) == 0", "assert count_samepair_with_threshold([4, 5, 6], [4, 5, 6], [4, 5, 6], 3) == 3", "assert count_samepair_with_threshold([4, 5, 6], [4, 5, 6], [4, 5, 6], 5) == 1", "assert count_samepair_with_threshold([4, 5, 6], [4, 5, 6], [4, 5, 6], 6) == 0", "assert count_samepair_with_threshold([7, 8, 9], [7, 8, 9], [7, 8, 9], 6) == 3", "assert count_samepair_with_threshold([7, 8, 9], [7, 8, 9], [7, 8, 9], 8) == 1", "assert count_samepair_with_threshold([7, 8, 9], [7, 8, 9], [7, 8, 9], 9) == 0", "assert count_samepair_with_threshold([1, 2, 3], [4, 5, 6], [7, 8, 9], 0) == 0", "assert count_samepair_with_threshold([10, 20, 30], [10, 20, 30], [10, 20, 30], 15) == 2", "assert count_samepair_with_threshold([10, 20, 30], [10, 20, 30], [10, 20, 30], 25) == 1", "assert count_samepair_with_threshold([10, 20, 30], [10, 20, 30], [10, 20, 30], 30) == 0", "assert count_samepair_with_threshold([0, 0, 0], [0, 0, 0], [0, 0, 0], -1) == 3", "assert count_samepair_with_threshold([0, 0, 0], [0, 0, 0], [0, 0, 0], 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to return the indices of the same pair in three given lists.", "code": "def count_samepair_with_index(list1, list2, list3):\n    result = [i for i, (m, n, o) in enumerate(zip(list1, list2, list3)) if m == n == o]\n    return result", "task_id": "142_df89be22-ea15-44d5-8d41-e533c5d45dc0", "test_setup_code": "", "test_list": ["assert count_samepair_with_index([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [0, 1, 2]", "assert count_samepair_with_index([1, 2, 3], [4, 5, 6], [7, 8, 9]) == []", "assert count_samepair_with_index([1, 2, 3], [1, 5, 3], [1, 8, 3]) == [0, 2]", "assert count_samepair_with_index([], [], []) == []", "assert count_samepair_with_index([1], [1], [1]) == [0]", "assert count_samepair_with_index([1], [2], [3]) == []", "assert count_samepair_with_index([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 5]) == [0, 1, 2]", "assert count_samepair_with_index([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == [0, 1, 2, 3]", "assert count_samepair_with_index([1, 2, 3, 4], [4, 3, 2, 1], [1, 2, 3, 4]) == [0, 2]", "assert count_samepair_with_index([1, 2, 3, 4, 5], [1, 2, 3, 4, 6], [1, 2, 3, 4, 7]) == [0, 1, 2, 3]", "assert count_samepair_with_index([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]", "assert count_samepair_with_index([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5]) == [2]", "assert count_samepair_with_index([1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]) == [0, 1, 2, 3]", "assert count_samepair_with_index([1, 1, 1, 1], [1, 2, 1, 2], [1, 1, 1, 1]) == [0, 2]", "assert count_samepair_with_index([1, 2, 3], [1, 2, 3], [3, 2, 1]) == [1]"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the sum of the pair is even.", "code": "def count_samepair_with_sum(list1, list2, list3):\n    result = sum(m == n == o and (m + n + o) % 2 == 0 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_173402ce-41c3-4ff2-b801-bfbbbd0b4513", "test_setup_code": "", "test_list": ["assert count_samepair_with_sum([2, 4, 6], [2, 4, 6], [2, 4, 6]) == 3", "assert count_samepair_with_sum([1, 3, 5], [1, 3, 5], [1, 3, 5]) == 0", "assert count_samepair_with_sum([2, 2, 2], [2, 2, 2], [2, 2, 2]) == 3", "assert count_samepair_with_sum([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 1", "assert count_samepair_with_sum([0, 0, 0], [0, 0, 0], [0, 0, 0]) == 3", "assert count_samepair_with_sum([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0", "assert count_samepair_with_sum([2, 3, 4], [2, 3, 4], [2, 3, 4]) == 1", "assert count_samepair_with_sum([1, 2, 3], [1, 2, 3], [3, 2, 1]) == 0", "assert count_samepair_with_sum([2, 4, 6], [6, 4, 2], [2, 4, 6]) == 0", "assert count_samepair_with_sum([2, 2, 2], [2, 2, 2], [1, 1, 1]) == 0", "assert count_samepair_with_sum([2, 4, 6, 8], [2, 4, 6, 8], [2, 4, 6, 8]) == 4", "assert count_samepair_with_sum([1, 1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1]) == 0", "assert count_samepair_with_sum([2], [2], [2]) == 1", "assert count_samepair_with_sum([1], [1], [1]) == 0", "assert count_samepair_with_sum([], [], []) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the absolute difference between the pair values is less than 5.", "code": "def count_samepair_with_difference(list1, list2, list3):\n    result = sum(m == n == o and abs(m - n) < 5 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_d0be3567-df26-4ed2-a5ae-916b64eab2c3", "test_setup_code": "", "test_list": ["assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 3", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 4], [1, 2, 3]) == 2", "assert count_samepair_with_difference([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0", "assert count_samepair_with_difference([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == 4", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [4, 5, 6]) == 0", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 4]) == 2", "assert count_samepair_with_difference([1, 2], [1, 2], [1, 2]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 2]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 7]) == 2", "assert count_samepair_with_difference([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == 5", "assert count_samepair_with_difference([1, 2, 3], [1, 3, 3], [1, 2, 3]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 8]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 2]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 5]) == 2", "assert count_samepair_with_difference([1, 2, 3], [1, 2, 3], [1, 2, 6]) == 2"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the product of the pair values is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_samepair_with_product(list1, list2, list3):\n    result = sum(m == n == o and is_prime(m * n * o) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_5c5d2397-1000-4de1-a67c-4b1406da6987", "test_setup_code": "", "test_list": ["assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 5]) == 3", "assert count_samepair_with_product([2, 4, 6], [2, 4, 6], [2, 4, 6]) == 0", "assert count_samepair_with_product([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 0", "assert count_samepair_with_product([3, 5, 7], [3, 5, 7], [3, 5, 7]) == 0", "assert count_samepair_with_product([1, 2, 3], [4, 5, 6], [7, 8, 9]) == 0", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 4]) == 2", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 6]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 7]) == 2", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 8]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 9]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 10]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 11]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 12]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 13]) == 1", "assert count_samepair_with_product([2, 3, 5], [2, 3, 5], [2, 3, 14]) == 1"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the length of the pair value is greater than 2.", "code": "def count_samepair_with_length(list1, list2, list3):\n    result = sum(m == n == o and len(str(m)) > 2 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_cd347fce-08d4-4ce4-9c90-011c97f94059", "test_setup_code": "", "test_list": ["assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [123, 456, 789]) == 3", "assert count_samepair_with_length([123, 456, 789], [123, 456, 780], [123, 456, 789]) == 2", "assert count_samepair_with_length([123, 45, 789], [123, 456, 789], [123, 456, 789]) == 2", "assert count_samepair_with_length([12, 456, 789], [123, 456, 789], [123, 456, 789]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [123, 456, 78]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [12, 456, 789]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 45, 789], [123, 456, 789]) == 1", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [123, 456, 789, 1011]) == 3", "assert count_samepair_with_length([123, 456, 789, 1011], [123, 456, 789], [123, 456, 789]) == 3", "assert count_samepair_with_length([], [], []) == 0", "assert count_samepair_with_length([123], [123], [123]) == 1", "assert count_samepair_with_length([123, 456], [123, 456], [123, 456]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [124, 456, 789]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [123, 456, 780]) == 2", "assert count_samepair_with_length([123, 456, 789], [123, 456, 789], [123, 45, 789]) == 2"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is a palindrome.", "code": "def is_palindrome(s):\n    return str(s) == str(s)[::-1]\n\ndef count_samepair_with_palindrome(list1, list2, list3):\n    result = sum(m == n == o and is_palindrome(m) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_ff4c9df9-8d7d-4d9b-a03a-3d9076279fb3", "test_setup_code": "", "test_list": ["assert count_samepair_with_palindrome([121, 131, 141], [121, 131, 141], [121, 131, 141]) == 3", "assert count_samepair_with_palindrome([121, 131, 141], [121, 132, 141], [121, 131, 142]) == 1", "assert count_samepair_with_palindrome([12321, 45654, 78987], [12321, 45654, 78987], [12321, 45654, 78987]) == 3", "assert count_samepair_with_palindrome([12321, 45654, 78987], [12321, 45654, 78987], [12321, 45654, 78988]) == 2", "assert count_samepair_with_palindrome([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 0", "assert count_samepair_with_palindrome([1, 1, 1], [1, 1, 1], [1, 1, 1]) == 3", "assert count_samepair_with_palindrome([11, 22, 33], [11, 22, 33], [11, 22, 33]) == 3", "assert count_samepair_with_palindrome([11, 22, 33], [11, 22, 34], [11, 22, 33]) == 2", "assert count_samepair_with_palindrome([121, 131, 141], [121, 131, 141], [121, 132, 141]) == 2", "assert count_samepair_with_palindrome([12321, 45654, 78987], [12321, 45654, 78987], [12321, 45654, 78987, 12321]) == 3", "assert count_samepair_with_palindrome([], [], []) == 0", "assert count_samepair_with_palindrome([121], [121], [121]) == 1", "assert count_samepair_with_palindrome([121, 131], [121, 131], [121, 131]) == 2", "assert count_samepair_with_palindrome([121, 131, 141], [121, 131, 141], [121, 131, 141, 151]) == 3", "assert count_samepair_with_palindrome([121, 131, 141], [121, 131, 141], [121, 131, 141, 151, 161]) == 3"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value starts with a vowel.", "code": "def count_samepair_with_vowel(list1, list2, list3):\n    vowels = 'AEIOUaeiou'\n    result = sum(m == n == o and str(m)[0] in vowels for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_02d44ab0-2eff-4fc7-8d8d-5914bc8b0881", "test_setup_code": "", "test_list": ["assert count_samepair_with_vowel(['apple', 'orange', 'ice'], ['apple', 'orange', 'ice'], ['apple', 'orange', 'ice']) == 3", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'icecream']) == 1", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2", "assert count_samepair_with_vowel(['apple', 'banana', 'ice'], ['apple', 'banana', 'ice'], ['apple', 'banana', 'ice', 'extra']) == 2"], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is a perfect square.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef count_samepair_with_square(list1, list2, list3):\n    result = sum(m == n == o and is_perfect_square(m) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_463177b3-ba5b-4d67-b01e-38c03bd53290", "test_setup_code": "", "test_list": ["assert count_samepair_with_square([1, 4, 9], [1, 4, 9], [1, 4, 9]) == 3", "assert count_samepair_with_square([1, 2, 3], [1, 2, 3], [1, 2, 3]) == 1", "assert count_samepair_with_square([1, 2, 3], [1, 4, 9], [1, 4, 9]) == 1", "assert count_samepair_with_square([1, 4, 9], [1, 4, 9], [1, 4, 16]) == 2", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16]) == 4", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 25], [1, 4, 9, 16]) == 3", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 25]) == 3", "assert count_samepair_with_square([1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]) == 1", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16, 25]) == 4", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 16, 25], [1, 4, 9, 16]) == 4", "assert count_samepair_with_square([1, 4, 9, 16, 25], [1, 4, 9, 16], [1, 4, 9, 16]) == 4", "assert count_samepair_with_square([1, 4, 9, 16], [1, 4, 9, 16], [1, 4, 9, 16, 25, 36]) == 4", "assert count_samepair_with_square([1, 4, 9, 16, 25, 36], [1, 4, 9, 16], [1, 4, 9, 16]) == 4", "assert count_samepair_with_square([1, 4, 9, 16, 25, 36], [1, 4, 9, 16, 25, 36], [1, 4, 9, 16, 25, 36]) == 6", "assert count_samepair_with_square([1, 4, 9, 16, 25, 36], [1, 4, 9, 16, 25, 36], [1, 4, 9, 16, 25, 49]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all elements in the given array.", "code": "def sum_of_squares(arr: list) -> int:\n    return sum(x**2 for x in arr)", "task_id": "144_b992c91c-db07-4f61-ad4e-60ecb63f5686", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([0, 0, 0]) == 0", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([]) == 0", "assert sum_of_squares([10, 10, 10]) == 300", "assert sum_of_squares([1, -1, 1, -1]) == 4", "assert sum_of_squares([100, 200, 300]) == 140000", "assert sum_of_squares([-10, -20, -30]) == 1400", "assert sum_of_squares([1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 285", "assert sum_of_squares([1, 4, 9, 16, 25]) == 979", "assert sum_of_squares([2, 4, 6, 8, 10]) == 220", "assert sum_of_squares([-1, 1, -1, 1, -1, 1]) == 6", "assert sum_of_squares([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == 90"], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in the given array.", "code": "def product_of_elements(arr: list) -> int:\n    product = 1\n    for x in arr:\n        product *= x\n    return product", "task_id": "144_8357c4e5-54b7-4360-9436-bee42f830f24", "test_setup_code": "", "test_list": ["assert product_of_elements([1, 2, 3, 4]) == 24", "assert product_of_elements([0, 1, 2, 3]) == 0", "assert product_of_elements([5]) == 5", "assert product_of_elements([-1, 2, -3, 4]) == 24", "assert product_of_elements([1, -1, 1, -1]) == 1", "assert product_of_elements([10, 20, 30]) == 6000", "assert product_of_elements([1, 1, 1, 1, 1]) == 1", "assert product_of_elements([2, 3, 5, 7, 11]) == 2310", "assert product_of_elements([-2, -3, -4]) == -24", "assert product_of_elements([100, 0.1]) == 10.0", "assert product_of_elements([1, 2, 3, 0.5]) == 3.0", "assert product_of_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800", "assert product_of_elements([]) == 1", "assert product_of_elements([1, 2, 3, -4, -5]) == 120", "assert product_of_elements([1, 2, 3, 4, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in the given array.", "code": "def count_even_numbers(arr: list) -> int:\n    return sum(1 for x in arr if x % 2 == 0)", "task_id": "144_d04d72e6-f9e0-4dd4-b999-1ffabb9cd2e9", "test_setup_code": "", "test_list": ["assert count_even_numbers([1, 2, 3, 4, 5]) == 2", "assert count_even_numbers([2, 4, 6, 8, 10]) == 5", "assert count_even_numbers([1, 3, 5, 7, 9]) == 0", "assert count_even_numbers([]) == 0", "assert count_even_numbers([0]) == 1", "assert count_even_numbers([-2, -4, -6]) == 3", "assert count_even_numbers([-1, -3, -5]) == 0", "assert count_even_numbers([-2, -1, 0, 1, 2]) == 3", "assert count_even_numbers([2, 2, 2, 2, 2]) == 5", "assert count_even_numbers([1, 1, 1, 1, 1]) == 0", "assert count_even_numbers([2**10, 2**20, 2**30]) == 3", "assert count_even_numbers([2**10 + 1, 2**20 + 1, 2**30 + 1]) == 0", "assert count_even_numbers([0, 2, 4, 6, 8, 1, 3, 5, 7, 9]) == 5", "assert count_even_numbers([-10, -8, -6, -4, -2, 0, 2, 4, 6, 8, 10]) == 11", "assert count_even_numbers([1000000, 1000001, 1000002]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum difference between any two elements in the given array.", "code": "def max_difference(arr: list) -> int:\n    return max(arr) - min(arr)", "task_id": "144_b9517875-8ca9-4b30-a2f2-8e372466ac20", "test_setup_code": "", "test_list": ["assert max_difference([1, 2, 3, 4, 5]) == 4", "assert max_difference([5, 4, 3, 2, 1]) == 4", "assert max_difference([1, 1, 1, 1, 1]) == 0", "assert max_difference([10, 5, 8, 2, 7]) == 8", "assert max_difference([-5, -2, -10, -1, -8]) == 9", "assert max_difference([100, 0, 50, 75, 25]) == 100", "assert max_difference([0, 0, 0, 0, 1]) == 1", "assert max_difference([-10, 10]) == 20", "assert max_difference([5]) == 0", "assert max_difference([2, 2]) == 0", "assert max_difference([-100, -200, -300]) == 200", "assert max_difference([999, 1, 998, 2, 997]) == 998", "assert max_difference([0, -1, 1]) == 2", "assert max_difference([10**6, 10**5, 10**4]) == 990000", "assert max_difference([7, 1, 5, 3, 6, 4]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime numbers in the given array.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(arr: list) -> int:\n    return sum(x for x in arr if is_prime(x))", "task_id": "144_78a3b8df-0e4d-45f2-82dd-73f0ef880041", "test_setup_code": "", "test_list": ["assert sum_of_primes([2, 3, 5, 7, 11]) == 28", "assert sum_of_primes([4, 6, 8, 10, 12]) == 0", "assert sum_of_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 17", "assert sum_of_primes([1, 2, 3, 4, 5]) == 10", "assert sum_of_primes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 17", "assert sum_of_primes([]) == 0", "assert sum_of_primes([17, 19, 23, 29, 31]) == 119", "assert sum_of_primes([15, 21, 24, 27, 30]) == 0", "assert sum_of_primes([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 129", "assert sum_of_primes([37, 41, 43, 47, 53]) == 221", "assert sum_of_primes([100, 101, 103, 107, 109]) == 420", "assert sum_of_primes([97, 89, 83, 79, 73]) == 421", "assert sum_of_primes([2]) == 2", "assert sum_of_primes([1]) == 0", "assert sum_of_primes([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to reverse the given array.", "code": "def reverse_array(arr: list) -> list:\n    return arr[::-1]", "task_id": "144_c3eebec8-ad39-49cd-93a2-905c6175c9e2", "test_setup_code": "", "test_list": ["assert reverse_array([1, 2, 3]) == [3, 2, 1]", "assert reverse_array([]) == []", "assert reverse_array([1]) == [1]", "assert reverse_array([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_array(['a', 'b', 'c']) == ['c', 'b', 'a']", "assert reverse_array([True, False, True]) == [True, False, True]", "assert reverse_array([1, 'a', 3.14, True]) == [True, 3.14, 'a', 1]", "assert reverse_array([None, None, None]) == [None, None, None]", "assert reverse_array([1, 2, 2, 1]) == [1, 2, 2, 1]", "assert reverse_array([1, -2, 3, -4, 5]) == [5, -4, 3, -2, 1]", "assert reverse_array([0, 0, 0]) == [0, 0, 0]", "assert reverse_array(['single']) == ['single']", "assert reverse_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_array(['a', 'b', 'c', 'd', 'e']) == ['e', 'd', 'c', 'b', 'a']", "assert reverse_array([1.1, 2.2, 3.3]) == [3.3, 2.2, 1.1]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at odd indices in the given array.", "code": "def sum_of_odd_indices(arr: list) -> int:\n    return sum(arr[i] for i in range(1, len(arr), 2))", "task_id": "144_7679ba05-a09e-4e62-9b06-69e2bd5a42ea", "test_setup_code": "", "test_list": ["assert sum_of_odd_indices([1, 2, 3, 4, 5]) == 6", "assert sum_of_odd_indices([10, 20, 30, 40, 50, 60]) == 120", "assert sum_of_odd_indices([0, 1, 0, 1, 0, 1]) == 3", "assert sum_of_odd_indices([1, -1, 1, -1, 1, -1]) == -3", "assert sum_of_odd_indices([100]) == 0", "assert sum_of_odd_indices([]) == 0", "assert sum_of_odd_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert sum_of_odd_indices([-1, -2, -3, -4, -5, -6]) == -12", "assert sum_of_odd_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == 30", "assert sum_of_odd_indices([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5", "assert sum_of_odd_indices([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 60", "assert sum_of_odd_indices([5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 150", "assert sum_of_odd_indices([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 75", "assert sum_of_odd_indices([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == 0", "assert sum_of_odd_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 56"], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in the given array.", "code": "def second_largest(arr: list) -> int:\n    unique_arr = list(set(arr))\n    unique_arr.sort()\n    return unique_arr[-2]", "task_id": "144_b852a589-7ee1-4e35-ad21-3091c74a8c67", "test_setup_code": "", "test_list": ["assert second_largest([1, 2, 3, 4, 5]) == 4", "assert second_largest([5, 4, 3, 2, 1]) == 4", "assert second_largest([2, 2, 3, 3, 4, 4, 5, 5]) == 4", "assert second_largest([10, 20, 30, 40, 50]) == 40", "assert second_largest([50, 40, 30, 20, 10]) == 40", "assert second_largest([1, 1, 1, 1, 1, 2]) == 1", "assert second_largest([-1, -2, -3, -4, -5]) == -2", "assert second_largest([-5, -4, -3, -2, -1]) == -2", "assert second_largest([100, 100, 99, 99, 98, 98]) == 99", "assert second_largest([1, 2]) == 1", "assert second_largest([2, 1]) == 1", "assert second_largest([1, 1, 1, 1, 1, 1]) == None", "assert second_largest([1]) == None", "assert second_largest([]) == None", "assert second_largest([3, 3, 3, 2, 2, 2, 1, 1, 1]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits of all elements in the given array.", "code": "def sum_of_digits(arr: list) -> int:\n    return sum(sum(int(digit) for digit in str(x)) for x in arr)", "task_id": "144_cdc392c0-9ca6-4616-803e-962a797d9a94", "test_setup_code": "", "test_list": ["assert sum_of_digits([123, 456, 789]) == 45", "assert sum_of_digits([1, 2, 3, 4, 5]) == 15", "assert sum_of_digits([10, 20, 30]) == 6", "assert sum_of_digits([9, 99, 999]) == 45", "assert sum_of_digits([]) == 0", "assert sum_of_digits([0]) == 0", "assert sum_of_digits([0, 0, 0]) == 0", "assert sum_of_digits([111, 222, 333]) == 18", "assert sum_of_digits([5]) == 5", "assert sum_of_digits([12345]) == 15", "assert sum_of_digits([1000, 2000, 3000]) == 6", "assert sum_of_digits([7, 77, 777]) == 33", "assert sum_of_digits([1, 10, 100, 1000]) == 3", "assert sum_of_digits([9876, 5432, 1098]) == 54", "assert sum_of_digits([11, 22, 33, 44, 55]) == 30"], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique elements in the given array.", "code": "def count_unique_elements(arr: list) -> int:\n    return len(set(arr))", "task_id": "144_10d9589e-520b-46ac-9dd1-53c12ebcfdef", "test_setup_code": "", "test_list": ["assert count_unique_elements([1, 2, 3, 4, 5]) == 5", "assert count_unique_elements([1, 1, 1, 1, 1]) == 1", "assert count_unique_elements([]) == 0", "assert count_unique_elements([1, 2, 3, 1, 2, 3]) == 3", "assert count_unique_elements([1, 1, 2, 2, 3, 3]) == 3", "assert count_unique_elements([1, 2, 3, 4, 5, 5, 5, 5]) == 5", "assert count_unique_elements([-1, -2, -3, 0, 1, 2, 3]) == 7", "assert count_unique_elements([-1, -1, 0, 0, 1, 1]) == 3", "assert count_unique_elements([True, False]) == 2", "assert count_unique_elements([True, True, False, False]) == 2", "assert count_unique_elements(['a', 'b', 'c', 'd']) == 4", "assert count_unique_elements(['a', 'a', 'b', 'b', 'c', 'c']) == 3", "assert count_unique_elements(['hello', 'world', 'hello']) == 2", "assert count_unique_elements([None, None, None]) == 1", "assert count_unique_elements([None, 1, 'a', True, 1.0]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the sum of ASCII values of all characters in a string.", "code": "def sum_ascii_values(s: str) -> int:\n    return sum(ord(char) for char in s)", "task_id": "146_835d5f82-b45a-4aa2-bcb0-1c4b5eb7b5bd", "test_setup_code": "", "test_list": ["assert sum_ascii_values('') == 0", "assert sum_ascii_values('a') == 97", "assert sum_ascii_values('A') == 65", "assert sum_ascii_values('abc') == 294", "assert sum_ascii_values('ABC') == 198", "assert sum_ascii_values('123') == 150", "assert sum_ascii_values('!@#') == 138", "assert sum_ascii_values(' ') == 32", "assert sum_ascii_values('Hello, World!') == 1085", "assert sum_ascii_values('The quick brown fox jumps over the lazy dog') == 4305", "assert sum_ascii_values('Python3.8') == 800", "assert sum_ascii_values('Sum of ASCII values') == 1761", "assert sum_ascii_values('EdgeCases!') == 840", "assert sum_ascii_values('Test123!@#') == 753", "assert sum_ascii_values('') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of the first and last characters in a string.", "code": "def ascii_value_first_last(s: str) -> tuple:\n    if not s:\n        return (0, 0)\n    return (ord(s[0]), ord(s[-1]))", "task_id": "146_c93ea99e-4cd8-45a2-b7de-d65265be3b73", "test_setup_code": "", "test_list": ["assert ascii_value_first_last('hello') == (104, 111)", "assert ascii_value_first_last('a') == (97, 97)", "assert ascii_value_first_last('') == (0, 0)", "assert ascii_value_first_last('abc') == (97, 99)", "assert ascii_value_first_last('123') == (49, 51)", "assert ascii_value_first_last('A') == (65, 65)", "assert ascii_value_first_last('Z') == (90, 90)", "assert ascii_value_first_last('AZ') == (65, 90)", "assert ascii_value_first_last('za') == (122, 97)", "assert ascii_value_first_last(' space ') == (32, 32)", "assert ascii_value_first_last('!@#') == (33, 35)", "assert ascii_value_first_last('Hello World') == (72, 100)", "assert ascii_value_first_last('\\n\\t') == (10, 9)", "assert ascii_value_first_last('Python') == (80, 110)", "assert ascii_value_first_last('12345') == (49, 53)"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of characters at even indices in a string.", "code": "def ascii_value_even_indices(s: str) -> list:\n    return [ord(s[i]) for i in range(0, len(s), 2)]", "task_id": "146_c4ee1d33-7775-4f1c-b3ae-d8d9a5bffb24", "test_setup_code": "", "test_list": ["assert ascii_value_even_indices('abcdef') == [97, 99, 101]", "assert ascii_value_even_indices('a') == [97]", "assert ascii_value_even_indices('') == []", "assert ascii_value_even_indices('ab') == [97]", "assert ascii_value_even_indices('abc') == [97, 99]", "assert ascii_value_even_indices('abcd') == [97, 99]", "assert ascii_value_even_indices('a1b2c3') == [97, 98, 99]", "assert ascii_value_even_indices('123456') == [49, 51, 53]", "assert ascii_value_even_indices('!@#$%^') == [33, 35, 37]", "assert ascii_value_even_indices('AaBbCc') == [65, 66, 67]", "assert ascii_value_even_indices('AaBbCcDdEe') == [65, 66, 67, 68, 69]", "assert ascii_value_even_indices(' ') == [32]", "assert ascii_value_even_indices('  ') == [32]", "assert ascii_value_even_indices('Hello, World!') == [72, 108, 111, 32, 111, 100]", "assert ascii_value_even_indices('1234 5678') == [49, 51, 32, 53, 55]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of characters at odd indices in a string.", "code": "def ascii_value_odd_indices(s: str) -> list:\n    return [ord(s[i]) for i in range(1, len(s), 2)]", "task_id": "146_62f36480-de2a-4954-81c0-60dd78ac3cee", "test_setup_code": "", "test_list": ["assert ascii_value_odd_indices('abcdef') == [98, 100, 102]", "assert ascii_value_odd_indices('a') == []", "assert ascii_value_odd_indices('') == []", "assert ascii_value_odd_indices('ab') == [98]", "assert ascii_value_odd_indices('abc') == [98]", "assert ascii_value_odd_indices('abcd') == [98, 100]", "assert ascii_value_odd_indices('a1b2c3d4') == [49, 50, 51, 52]", "assert ascii_value_odd_indices('1234567890') == [50, 52, 54, 56, 48]", "assert ascii_value_odd_indices('!@#$%^&*()') == [64, 36, 94, 42, 41]", "assert ascii_value_odd_indices('The quick brown fox') == [104, 32, 117, 105, 107, 32, 114, 119, 110, 32, 111, 120]", "assert ascii_value_odd_indices('Hello, World!') == [101, 108, 44, 87, 114, 100]", "assert ascii_value_odd_indices('Python3.8') == [121, 104, 110, 51]", "assert ascii_value_odd_indices('a b c d e f g') == [32, 98, 32, 100, 32, 102, 32]", "assert ascii_value_odd_indices('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == [66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90]", "assert ascii_value_odd_indices('abcdefghijklmnopqrstuvwxyz') == [98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all vowels in a string.", "code": "def ascii_value_vowels(s: str) -> list:\n    vowels = 'aeiouAEIOU'\n    return [ord(char) for char in s if char in vowels]", "task_id": "146_97fb2f1f-18a6-4c33-8eca-92f5cc7aba41", "test_setup_code": "", "test_list": ["assert ascii_value_vowels('hello') == [101, 111]", "assert ascii_value_vowels('world') == []", "assert ascii_value_vowels('AEIOU') == [65, 69, 73, 79, 85]", "assert ascii_value_vowels('aeiou') == [97, 101, 105, 111, 117]", "assert ascii_value_vowels('Python Programming') == [111, 97]", "assert ascii_value_vowels('') == []", "assert ascii_value_vowels('12345') == []", "assert ascii_value_vowels('aEiOu') == [97, 69, 105, 79, 117]", "assert ascii_value_vowels('bcdfghjklmnpqrstvwxyz') == []", "assert ascii_value_vowels('BCDFGHJKLMNPQRSTVWXYZ') == []", "assert ascii_value_vowels('The quick brown fox jumps over the lazy dog') == [101, 117, 105, 111, 111, 117, 111, 101, 97, 111]", "assert ascii_value_vowels('Lorem Ipsum is simply dummy text of the printing and typesetting industry.') == [111, 101, 73, 117, 105, 105, 117, 101, 111, 105, 101, 105, 117]", "assert ascii_value_vowels('A quick movement of the enemy will jeopardize six gunboats.') == [65, 117, 105, 111, 101, 111, 101, 101, 105, 101, 111, 97]", "assert ascii_value_vowels('How razorback-jumping frogs can level six piqued gymnasts!') == [111, 97, 111, 97, 117, 105, 111, 97, 101, 101, 105, 117]", "assert ascii_value_vowels('Pack my box with five dozen liquor jugs.') == [97, 111, 105, 101, 111, 105, 117]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all consonants in a string.", "code": "def ascii_value_consonants(s: str) -> list:\n    vowels = 'aeiouAEIOU'\n    return [ord(char) for char in s if char.isalpha() and char not in vowels]", "task_id": "146_48177edc-b700-494e-8a13-8ccdf826975d", "test_setup_code": "", "test_list": ["assert ascii_value_consonants('hello') == [104, 108, 108]", "assert ascii_value_consonants('WORLD') == [87, 82, 76, 68]", "assert ascii_value_consonants('aeiou') == []", "assert ascii_value_consonants('AEIOU') == []", "assert ascii_value_consonants('bcdfghjklmnpqrstvwxyz') == [98, 99, 100, 102, 103, 104, 106, 107, 108, 109, 110, 112, 113, 114, 115, 116, 118, 119, 120, 121, 122]", "assert ascii_value_consonants('BCDFGHJKLMNPQRSTVWXYZ') == [66, 67, 68, 70, 71, 72, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90]", "assert ascii_value_consonants('') == []", "assert ascii_value_consonants('123') == []", "assert ascii_value_consonants('a1b2c3') == [98, 99]", "assert ascii_value_consonants('!@#$%^&*()') == []", "assert ascii_value_consonants('Python Programming') == [80, 121, 116, 104, 110, 80, 114, 103, 114, 109, 109, 110, 103]", "assert ascii_value_consonants('AeIoU') == []", "assert ascii_value_consonants('bCdFg') == [98, 67, 100, 70, 103]", "assert ascii_value_consonants(' ') == []", "assert ascii_value_consonants('z') == [122]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all digits in a string.", "code": "def ascii_value_digits(s: str) -> list:\n    return [ord(char) for char in s if char.isdigit()]", "task_id": "146_be55941b-6e69-4158-9902-7101235609d9", "test_setup_code": "", "test_list": ["assert ascii_value_digits('abc123') == [49, 50, 51]", "assert ascii_value_digits('123') == [49, 50, 51]", "assert ascii_value_digits('abc') == []", "assert ascii_value_digits('') == []", "assert ascii_value_digits('0123456789') == [48, 49, 50, 51, 52, 53, 54, 55, 56, 57]", "assert ascii_value_digits('a1b2c3d4e5') == [49, 50, 51, 52, 53]", "assert ascii_value_digits('!@#$%^&*()') == []", "assert ascii_value_digits('12 34 56') == [49, 50, 51, 52, 53, 54]", "assert ascii_value_digits('1') == [49]", "assert ascii_value_digits('9876543210') == [57, 56, 55, 54, 53, 52, 51, 50, 49, 48]", "assert ascii_value_digits('a1b2c3') == [49, 50, 51]", "assert ascii_value_digits('ASCII: 123') == [49, 50, 51]", "assert ascii_value_digits('123abc456') == [49, 50, 51, 52, 53, 54]", "assert ascii_value_digits('0') == [48]", "assert ascii_value_digits('The year is 2023!') == [50, 48, 50, 51]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all special characters in a string.", "code": "def ascii_value_special_chars(s: str) -> list:\n    return [ord(char) for char in s if not char.isalnum()]", "task_id": "146_2b550014-c2c0-411f-bc2e-075f3564619c", "test_setup_code": "", "test_list": ["assert ascii_value_special_chars('Hello, World!') == [44, 32, 33]", "assert ascii_value_special_chars('a+b=c') == [43, 61]", "assert ascii_value_special_chars('abc123') == []", "assert ascii_value_special_chars('') == []", "assert ascii_value_special_chars('!@#$%^&*()') == [33, 64, 35, 36, 37, 94, 38, 42, 40, 41]", "assert ascii_value_special_chars(' ') == [32]", "assert ascii_value_special_chars('\\n\\t\\r') == [10, 9, 13]", "assert ascii_value_special_chars('John Doe') == [32]", "assert ascii_value_special_chars('email@example.com') == [64, 46]", "assert ascii_value_special_chars('100%') == [37]", "assert ascii_value_special_chars('(555) 123-4567') == [40, 41, 32, 45]", "assert ascii_value_special_chars('Python 3.9.0') == [32, 46]", "assert ascii_value_special_chars('$100.00') == [36, 46]", "assert ascii_value_special_chars('a-b_c') == [45, 95]", "assert ascii_value_special_chars('2+2=4') == [43, 61]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all uppercase letters in a string.", "code": "def ascii_value_uppercase(s: str) -> list:\n    return [ord(char) for char in s if char.isupper()]", "task_id": "146_0e856667-624b-4a0e-b838-1f999280f535", "test_setup_code": "", "test_list": ["assert ascii_value_uppercase('Hello World') == [72, 87]", "assert ascii_value_uppercase('PYTHON') == [80, 89, 84, 72, 79, 78]", "assert ascii_value_uppercase('python') == []", "assert ascii_value_uppercase('12345') == []", "assert ascii_value_uppercase('') == []", "assert ascii_value_uppercase('aBcDeFgHiJ') == [66, 68, 70, 72, 74]", "assert ascii_value_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90]", "assert ascii_value_uppercase('a1B2C3D4E5F6G7H8I9J0') == [66, 67, 68, 69, 70, 71, 72, 73, 74]", "assert ascii_value_uppercase('UPPERlowerCASE') == [85, 80, 80, 69, 82, 67, 65, 83, 69]", "assert ascii_value_uppercase('MixedCASEwith123Numbers') == [77, 67, 65, 83, 69]", "assert ascii_value_uppercase('!@#$%^&*()') == []", "assert ascii_value_uppercase('NoUppercaseLettersHere') == [78, 85, 76, 72]", "assert ascii_value_uppercase('SINGLEUPPERCASE') == [83, 73, 78, 71, 76, 69, 85, 80, 80, 69, 82, 67, 65, 83, 69]", "assert ascii_value_uppercase('lowercaseonly') == []", "assert ascii_value_uppercase('123ABCdef456GHI') == [65, 66, 67, 71, 72, 73]"], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all lowercase letters in a string.", "code": "def ascii_value_lowercase(s: str) -> list:\n    return [ord(char) for char in s if char.islower()]", "task_id": "146_e2551a99-0aa2-44e8-b2d6-22ec235c1601", "test_setup_code": "", "test_list": ["assert ascii_value_lowercase('hello') == [104, 101, 108, 108, 111]", "assert ascii_value_lowercase('Hello') == [101, 108, 108, 111]", "assert ascii_value_lowercase('HELLO') == []", "assert ascii_value_lowercase('hElLo') == [104, 108, 111]", "assert ascii_value_lowercase('') == []", "assert ascii_value_lowercase('abcdefghijklmnopqrstuvwxyz') == [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]", "assert ascii_value_lowercase('12345') == []", "assert ascii_value_lowercase('abc123def') == [97, 98, 99, 100, 101, 102]", "assert ascii_value_lowercase('a!b@c#d$e%f^') == [97, 98, 99, 100, 101, 102]", "assert ascii_value_lowercase('A!B@C#D$E%F^') == []", "assert ascii_value_lowercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == [97, 99, 101, 103, 105, 107, 109, 111, 113, 115, 117, 119, 121]", "assert ascii_value_lowercase('The quick brown fox jumps over the lazy dog') == [104, 101, 117, 105, 99, 107, 98, 114, 111, 119, 110, 102, 111, 120, 106, 117, 109, 112, 115, 111, 118, 101, 114, 116, 104, 101, 108, 97, 122, 121, 100, 111, 103]", "assert ascii_value_lowercase('!@#$%^&*()_+') == []", "assert ascii_value_lowercase('lowerCASE') == [108, 111, 119, 101, 114]", "assert ascii_value_lowercase('MiXeD123CaSe') == [105, 120, 101, 100, 97, 101]"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array.", "code": "def min_Abs_Diff(arr: list[int]) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff", "task_id": "145_360a15d6-4ff3-407c-9814-337875343159", "test_setup_code": "", "test_list": ["assert min_Abs_Diff([1, 3, 6, 10, 15]) == 2", "assert min_Abs_Diff([4, 9, 1, 32, 13]) == 3", "assert min_Abs_Diff([5, 5, 5, 5, 5]) == 0", "assert min_Abs_Diff([100, 300, 200, 400, 500]) == 100", "assert min_Abs_Diff([1, 2, 3, 4, 5]) == 1", "assert min_Abs_Diff([10, 20, 30, 40, 50]) == 10", "assert min_Abs_Diff([1, 1000, 10000, 100000]) == 900", "assert min_Abs_Diff([1, 1, 1, 1, 2]) == 0", "assert min_Abs_Diff([1, 2]) == 1", "assert min_Abs_Diff([-10, -20, -30, -40, -50]) == 10", "assert min_Abs_Diff([-1, -2, -3, -4, -5]) == 1", "assert min_Abs_Diff([-1, 0, 1, 2, 3]) == 1", "assert min_Abs_Diff([0, 0, 0, 0, 1]) == 0", "assert min_Abs_Diff([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 100", "assert min_Abs_Diff([1, 100, 1000, 10000, 100000, 1000000]) == 99"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of any two elements in a given array.", "code": "def max_Abs_Sum(arr: list[int]) -> int:\n    arr.sort()\n    return arr[-1] + arr[-2]", "task_id": "145_be6dd06b-1823-4f95-9342-bf6b0446d8bb", "test_setup_code": "", "test_list": ["assert max_Abs_Sum([1, 2, 3, 4, 5]) == 9", "assert max_Abs_Sum([10, 20, 30, 40, 50]) == 90", "assert max_Abs_Sum([-1, -2, -3, -4, -5]) == -3", "assert max_Abs_Sum([-10, 20, 30, -40, 50]) == 80", "assert max_Abs_Sum([0, 0, 0, 0, 0]) == 0", "assert max_Abs_Sum([1, 1, 1, 1, 1]) == 2", "assert max_Abs_Sum([1, 2]) == 3", "assert max_Abs_Sum([100, 200, 300, 400, 500]) == 900", "assert max_Abs_Sum([5, 5, 5, 5, 5]) == 10", "assert max_Abs_Sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 19", "assert max_Abs_Sum([1, 3, 5, 7, 9]) == 16", "assert max_Abs_Sum([-1, 0, 1, 2, 3]) == 5", "assert max_Abs_Sum([1, -1, 1, -1, 1]) == 2", "assert max_Abs_Sum([-1, -2, -3, 0, 1, 2, 3]) == 5", "assert max_Abs_Sum([1000, 2000, 3000, 4000, 5000]) == 9000"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of any two elements in a given array.", "code": "def min_Abs_Sum(arr: list[int]) -> int:\n    arr.sort()\n    return arr[0] + arr[1]", "task_id": "145_e255b58e-6e63-461a-be62-c23011a091d7", "test_setup_code": "", "test_list": ["assert min_Abs_Sum([1, 2, 3, 4, 5]) == 3", "assert min_Abs_Sum([5, 4, 3, 2, 1]) == 3", "assert min_Abs_Sum([10, 20, 30, 40, 50]) == 30", "assert min_Abs_Sum([-5, -4, -3, -2, -1]) == -9", "assert min_Abs_Sum([0, 0, 0, 0, 0]) == 0", "assert min_Abs_Sum([1, 1, 1, 1, 1]) == 2", "assert min_Abs_Sum([-10, -5, 0, 5, 10]) == -15", "assert min_Abs_Sum([100, 200, 300, 400, 500]) == 300", "assert min_Abs_Sum([2, 2]) == 4", "assert min_Abs_Sum([-1, -1]) == -2", "assert min_Abs_Sum([0, 1]) == 1", "assert min_Abs_Sum([-100, 100]) == 0", "assert min_Abs_Sum([7, 3, 9, 5, 1]) == 4", "assert min_Abs_Sum([-7, -3, -9, -5, -1]) == -16", "assert min_Abs_Sum([0, -1, 1, -2, 2]) == -3"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of any two elements in a given array.", "code": "def max_Abs_Product(arr: list[int]) -> int:\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])", "task_id": "145_8a956aad-67b3-4b8e-ac37-b1ecc5ba737c", "test_setup_code": "", "test_list": ["assert max_Abs_Product([1, 2, 3, 4, 5]) == 20", "assert max_Abs_Product([-1, -2, -3, -4, -5]) == -1", "assert max_Abs_Product([-10, -20, 5, 6, 7]) == 200", "assert max_Abs_Product([0, 0, 0, 0, 0]) == 0", "assert max_Abs_Product([1, 0, -1, 2, -2]) == 2", "assert max_Abs_Product([100, 200, 300, 400, 500]) == 200000", "assert max_Abs_Product([-100, -200, -300, -400, -500]) == -100", "assert max_Abs_Product([10, 20, 30, 40, 50, 60]) == 3000", "assert max_Abs_Product([1, 2]) == 2", "assert max_Abs_Product([-1, -2]) == -1", "assert max_Abs_Product([1, -1, 2, -2, 3, -3]) == 9", "assert max_Abs_Product([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 72", "assert max_Abs_Product([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert max_Abs_Product([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 1", "assert max_Abs_Product([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 20"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum product of any two elements in a given array.", "code": "def min_Abs_Product(arr: list[int]) -> int:\n    arr.sort()\n    return min(arr[0] * arr[1], arr[-1] * arr[-2])", "task_id": "145_c1922051-16c9-44b4-bd24-41af0710e0ac", "test_setup_code": "", "test_list": ["assert min_Abs_Product([1, 2, 3, 4]) == 2", "assert min_Abs_Product([-1, -2, -3, -4]) == 12", "assert min_Abs_Product([0, 1, 2, 3]) == 0", "assert min_Abs_Product([0, -1, -2, -3]) == 0", "assert min_Abs_Product([100, 200, 300, 400]) == 20000", "assert min_Abs_Product([-100, -200, -300, -400]) == 120000", "assert min_Abs_Product([5, -1, -2, 3]) == -10", "assert min_Abs_Product([1, 1, 1, 1]) == 1", "assert min_Abs_Product([-1, -1, -1, -1]) == 1", "assert min_Abs_Product([1, -1, 0, 2]) == -2", "assert min_Abs_Product([3, 7, 2, 8, 1]) == 2", "assert min_Abs_Product([-3, -7, -2, -8, -1]) == 56", "assert min_Abs_Product([1, 2]) == 2", "assert min_Abs_Product([-1, -2]) == 2", "assert min_Abs_Product([0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the maximum difference.", "code": "def max_Abs_Diff_Index(arr: list[int]) -> tuple[int, int]:\n    min_index = arr.index(min(arr))\n    max_index = arr.index(max(arr))\n    return (min_index, max_index)", "task_id": "145_c91bd784-c40a-4579-960c-083970aa112e", "test_setup_code": "", "test_list": ["assert max_Abs_Diff_Index([1, 2, 3, 4, 5]) == (0, 4)", "assert max_Abs_Diff_Index([5, 4, 3, 2, 1]) == (4, 0)", "assert max_Abs_Diff_Index([1, 100, 1, 100, 1]) == (0, 1)", "assert max_Abs_Diff_Index([10, 20, 30, 40, 50]) == (0, 4)", "assert max_Abs_Diff_Index([-10, -20, -30, -40, -50]) == (4, 0)", "assert max_Abs_Diff_Index([0, 0, 0, 0, 0]) == (0, 0)", "assert max_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (0, 9)", "assert max_Abs_Diff_Index([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == (9, 0)", "assert max_Abs_Diff_Index([1, -1, 1, -1, 1, -1]) == (1, 0)", "assert max_Abs_Diff_Index([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == (0, 9)", "assert max_Abs_Diff_Index([-100, -200, -300, -400, -500, -600, -700, -800, -900, -1000]) == (9, 0)", "assert max_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]) == (10, 9)", "assert max_Abs_Diff_Index([1]) == (0, 0)", "assert max_Abs_Diff_Index([1, 2]) == (0, 1)", "assert max_Abs_Diff_Index([-1, 1]) == (0, 1)"], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the minimum difference.", "code": "def min_Abs_Diff_Index(arr: list[int]) -> tuple[int, int]:\n    min_diff = float('inf')\n    min_pair = (0, 1)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n                min_pair = (i, j)\n    return min_pair", "task_id": "145_fe328287-54b1-4679-9567-24cbadffd722", "test_setup_code": "", "test_list": ["assert min_Abs_Diff_Index([1, 3, 4, 8, 13, 17]) == (2, 3)", "assert min_Abs_Diff_Index([10, 20, 30, 40, 50]) == (0, 1)", "assert min_Abs_Diff_Index([5, 5, 5, 5, 5]) == (0, 1)", "assert min_Abs_Diff_Index([-1, -2, -3, -4, -5]) == (0, 1)", "assert min_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (0, 1)", "assert min_Abs_Diff_Index([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == (0, 1)", "assert min_Abs_Diff_Index([1, 1, 2, 2, 3, 3, 4, 4]) == (0, 1)", "assert min_Abs_Diff_Index([1, 3, 3, 7, 9, 11]) == (1, 2)", "assert min_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (0, 1)", "assert min_Abs_Diff_Index([1, 100, 1000, 10000, 100000]) == (0, 1)", "assert min_Abs_Diff_Index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (0, 1)", "assert min_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (0, 1)", "assert min_Abs_Diff_Index([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == (0, 1)", "assert min_Abs_Diff_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (0, 1)", "assert min_Abs_Diff_Index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == (0, 1)"], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the maximum sum.", "code": "def max_Abs_Sum_Index(arr: list[int]) -> tuple[int, int]:\n    max1, max2 = sorted(arr)[-2:]\n    return (arr.index(max1), arr.index(max2))", "task_id": "145_ed14578d-04cd-4849-94d9-4730afe290a3", "test_setup_code": "", "test_list": ["assert max_Abs_Sum_Index([1, 2, 3, 4, 5]) == (3, 4)", "assert max_Abs_Sum_Index([5, 4, 3, 2, 1]) == (0, 1)", "assert max_Abs_Sum_Index([1, 1, 1, 1, 1]) == (0, 1)", "assert max_Abs_Sum_Index([10, 20, 30, 40, 50]) == (3, 4)", "assert max_Abs_Sum_Index([50, 40, 30, 20, 10]) == (0, 1)", "assert max_Abs_Sum_Index([1, 2, 3, 4, 3, 2, 1]) == (3, 4)", "assert max_Abs_Sum_Index([1, 2, 3, 4, 5, 5]) == (4, 5)", "assert max_Abs_Sum_Index([5, 5, 5, 5, 5]) == (0, 1)", "assert max_Abs_Sum_Index([-1, -2, -3, -4, -5]) == (0, 1)", "assert max_Abs_Sum_Index([-10, -20, -30, -40, -50]) == (0, 1)", "assert max_Abs_Sum_Index([1, 2, 3, 4, -5]) == (2, 3)", "assert max_Abs_Sum_Index([5, 5, 5, 5, 6]) == (3, 4)", "assert max_Abs_Sum_Index([0, 0, 0, 0, 1]) == (3, 4)", "assert max_Abs_Sum_Index([100, 90, 80, 70, 60]) == (0, 1)", "assert max_Abs_Sum_Index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (8, 9)"], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the minimum sum.", "code": "def min_Abs_Sum_Index(arr: list[int]) -> tuple[int, int]:\n    min1, min2 = sorted(arr)[:2]\n    return (arr.index(min1), arr.index(min2))", "task_id": "145_8bce0119-4693-4289-987a-e2891bb9e42b", "test_setup_code": "", "test_list": ["assert min_Abs_Sum_Index([1, 2, 3, 4, 5]) == (0, 1)", "assert min_Abs_Sum_Index([5, 4, 3, 2, 1]) == (3, 4)", "assert min_Abs_Sum_Index([-1, -2, -3, -4, -5]) == (3, 4)", "assert min_Abs_Sum_Index([10, 20, 30, 40, 50]) == (0, 1)", "assert min_Abs_Sum_Index([1, 1, 1, 1, 1]) == (0, 1)", "assert min_Abs_Sum_Index([0, 0, 0, 0, 0]) == (0, 1)", "assert min_Abs_Sum_Index([100, 200, 300, 400, 500]) == (0, 1)", "assert min_Abs_Sum_Index([1, -1, 2, -2, 3, -3]) == (1, 3)", "assert min_Abs_Sum_Index([1, 2, 3, -4, -5]) == (3, 4)", "assert min_Abs_Sum_Index([1, 2, 3, 4, -5]) == (3, 4)", "assert min_Abs_Sum_Index([1, 2, 3, -4, 5]) == (3, 0)", "assert min_Abs_Sum_Index([1, 2, 3, 4, -1]) == (4, 0)", "assert min_Abs_Sum_Index([1, 2, 3, 4, -2]) == (4, 0)", "assert min_Abs_Sum_Index([1, 2, 3, 4, -3]) == (4, 0)", "assert min_Abs_Sum_Index([1, 2, 3, 4, -4]) == (4, 0)"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "150_f194b810-15c8-446e-bb89-d013f41ba6b3", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(97) == True"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "150_c6f740a0-a9b9-4fa8-a64c-89414af72c13", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('Racecar') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "150_4b5414c4-4a34-462d-953b-f4ac5b8df3a0", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(20) == 6765", "assert fibonacci(30) == 832040", "assert fibonacci(50) == 12586269025", "assert fibonacci(100) == 354224848179261915075"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "150_01c37695-413a-41a4-b1c5-bb0977ea7114", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1111111111) == 10", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(10) == 1", "assert sum_of_digits(5) == 5", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(2147483647) == 46", "assert sum_of_digits(12345678901234567890) == 90", "assert sum_of_digits(11111111111111111111) == 20", "assert sum_of_digits(22222222222222222222) == 40", "assert sum_of_digits(33333333333333333333) == 60"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "150_46116596-21b5-44cf-893f-f65db1833fab", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('a') == 'a'", "assert reverse_string('') == ''", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$$#@!') == '!@#$$#@!'", "assert reverse_string('abcdefg') == 'gfedcba'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string('Was it a car or a cat I saw') == 'was I tac a ro rac a ti saW'", "assert reverse_string('No lemon, no melon') == 'nolem on ,nomel oN'", "assert reverse_string(' ') == ' '", "assert reverse_string('This is a test string.') == '.gnirts tset a si sihT'"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "150_d6eb4f58-b517-4548-b887-d63646f93f5e", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "150_90b964c7-487f-460e-a204-811865a16470", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('rat', 'car') == False", "assert is_anagram('night', 'thing') == True", "assert is_anagram('evil', 'vile') == True", "assert is_anagram('fluster', 'restful') == True", "assert is_anagram('conversation', 'voicesranton') == True", "assert is_anagram('state', 'taste') == True", "assert is_anagram('dusty', 'study') == True", "assert is_anagram('schoolmaster', 'theclassroom') == True", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "150_167fb05a-f459-4f7b-8a55-04e4efe7a6e8", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 10) == 1", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(54, 24) == 6", "assert gcd(17, 13) == 1", "assert gcd(100, 25) == 25", "assert gcd(81, 27) == 27", "assert gcd(56, 42) == 14", "assert gcd(123456, 789012) == 12", "assert gcd(1, 1) == 1", "assert gcd(2, 4) == 2", "assert gcd(123456789, 987654321) == 9", "assert gcd(9999991, 99999989) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)", "task_id": "150_aab74c65-fe11-44db-9c4b-1ac2b043158f", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(7, 3) == 21", "assert lcm(10, 15) == 30", "assert lcm(21, 6) == 42", "assert lcm(8, 12) == 24", "assert lcm(1, 1) == 1", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(13, 17) == 221", "assert lcm(100, 25) == 100", "assert lcm(9, 6) == 18", "assert lcm(14, 28) == 28", "assert lcm(20, 30) == 60", "assert lcm(11, 13) == 143"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a perfect square.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "150_ea517358-902a-4efe-b439-9aecaa60515d", "test_setup_code": "", "test_list": ["assert is_perfect_square(0) == True", "assert is_perfect_square(1) == True", "assert is_perfect_square(4) == True", "assert is_perfect_square(9) == True", "assert is_perfect_square(16) == True", "assert is_perfect_square(25) == True", "assert is_perfect_square(36) == True", "assert is_perfect_square(49) == True", "assert is_perfect_square(64) == True", "assert is_perfect_square(81) == True", "assert is_perfect_square(100) == True", "assert is_perfect_square(2) == False", "assert is_perfect_square(3) == False", "assert is_perfect_square(10) == False", "assert is_perfect_square(15) == False"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the absolute difference of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_difference(N):\n    A = closest(N)\n    return abs(sum_digits_single(A) - sum_digits_single(N - A))", "task_id": "148_bfa0c3bc-865f-45c8-88d3-152236c729b7", "test_setup_code": "", "test_list": ["assert max_digit_sum_difference(10) == 1", "assert max_digit_sum_difference(99) == 18", "assert max_digit_sum_difference(100) == 9", "assert max_digit_sum_difference(123) == 6", "assert max_digit_sum_difference(987) == 18", "assert max_digit_sum_difference(1000) == 9", "assert max_digit_sum_difference(555) == 0", "assert max_digit_sum_difference(1) == 1", "assert max_digit_sum_difference(0) == 0", "assert max_digit_sum_difference(9999) == 36", "assert max_digit_sum_difference(1111) == 0", "assert max_digit_sum_difference(4321) == 6", "assert max_digit_sum_difference(2468) == 18", "assert max_digit_sum_difference(1357) == 0", "assert max_digit_sum_difference(8642) == 18"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the quotient of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_quotient(N):\n    A = closest(N)\n    return sum_digits_single(A) // sum_digits_single(N - A)", "task_id": "148_40ad18ac-9411-457e-a3fa-dda9480c6bc7", "test_setup_code": "", "test_list": ["assert sum_digits_single(123) == 6", "assert sum_digits_single(0) == 0", "assert sum_digits_single(9) == 9", "assert sum_digits_single(10) == 1", "assert sum_digits_single(999) == 27", "assert sum_digits_single(1000) == 1", "assert sum_digits_single(12345) == 15", "assert sum_digits_single(987654321) == 45", "assert sum_digits_single(1111111) == 7", "assert sum_digits_single(9999999) == 63", "assert sum_digits_single(1234567890) == 45", "assert sum_digits_single(100000) == 1", "assert sum_digits_single(99999) == 45", "assert sum_digits_single(54321) == 15", "assert sum_digits_single(2468) == 20"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the modulus of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_modulus(N):\n    A = closest(N)\n    return sum_digits_single(A) % sum_digits_single(N - A)", "task_id": "148_5027dcce-2b3e-48fc-9e64-1f83bc21286f", "test_setup_code": "", "test_list": ["assert sum_digits_single(123) == 6", "assert sum_digits_single(0) == 0", "assert sum_digits_single(9) == 9", "assert sum_digits_single(99) == 18", "assert sum_digits_single(100) == 1", "assert sum_digits_single(987654321) == 45", "assert sum_digits_single(111111111) == 9", "assert sum_digits_single(123456789) == 45", "assert sum_digits_single(55555555) == 40", "assert sum_digits_single(1000000000) == 1", "assert sum_digits_single(999999999) == 81", "assert sum_digits_single(12345678901234567890) == 90", "assert sum_digits_single(2147483647) == 46", "assert sum_digits_single(1000000001) == 2", "assert sum_digits_single(9876543210) == 45"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of digits is minimum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest_min(x):\n    ans = 0\n    while (ans * 10 + 1 <= x):\n        ans = ans * 10 + 1\n    return ans\n\ndef min_digit_sum_sum(N):\n    A = closest_min(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)", "task_id": "148_7190e5f4-2cf1-4436-97b0-06b9faa32aea", "test_setup_code": "", "test_list": ["assert sum_digits_single(123) == 6", "assert sum_digits_single(0) == 0", "assert sum_digits_single(9) == 9", "assert sum_digits_single(10) == 1", "assert sum_digits_single(99) == 18", "assert sum_digits_single(100) == 1", "assert sum_digits_single(12345) == 15", "assert sum_digits_single(987654321) == 45", "assert sum_digits_single(111111111) == 9", "assert sum_digits_single(1000000000) == 1", "assert sum_digits_single(55555) == 25", "assert sum_digits_single(1001) == 2", "assert sum_digits_single(20202020) == 8", "assert sum_digits_single(3333) == 12", "assert sum_digits_single(4444) == 16"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of even digits is maximum.", "code": "def sum_even_digits_single(x):\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit % 2 == 0:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_even(x):\n    ans = 0\n    while (ans * 10 + 8 <= x):\n        ans = ans * 10 + 8\n    return ans\n\ndef max_digit_sum_sum_even(N):\n    A = closest_even(N)\n    return sum_even_digits_single(A) + sum_even_digits_single(N - A)", "task_id": "148_c0d3498a-2ae8-466d-8946-69988c4c1c5b", "test_setup_code": "", "test_list": ["assert sum_even_digits_single(123456) == 12", "assert sum_even_digits_single(0) == 0", "assert sum_even_digits_single(2468) == 20", "assert sum_even_digits_single(13579) == 0", "assert sum_even_digits_single(2222) == 8", "assert sum_even_digits_single(86420) == 20", "assert sum_even_digits_single(9876543210) == 20", "assert sum_even_digits_single(1111111111) == 0", "assert sum_even_digits_single(1010101010) == 0", "assert sum_even_digits_single(246824682468) == 48", "assert sum_even_digits_single(12345678901234567890) == 40", "assert sum_even_digits_single(4444444444) == 40", "assert sum_even_digits_single(88888888) == 64", "assert sum_even_digits_single(102030405060708090) == 20", "assert sum_even_digits_single(999999999999999999) == 0"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of odd digits is maximum.", "code": "def sum_odd_digits_single(x):\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit % 2 != 0:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_odd(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_sum_odd(N):\n    A = closest_odd(N)\n    return sum_odd_digits_single(A) + sum_odd_digits_single(N - A)", "task_id": "148_f5c7da8f-4856-4cf3-a761-8e05ce902ed9", "test_setup_code": "", "test_list": ["assert sum_odd_digits_single(0) == 0", "assert sum_odd_digits_single(1) == 1", "assert sum_odd_digits_single(2) == 0", "assert sum_odd_digits_single(9) == 9", "assert sum_odd_digits_single(10) == 1", "assert sum_odd_digits_single(12345) == 9", "assert sum_odd_digits_single(24680) == 0", "assert sum_odd_digits_single(13579) == 25", "assert sum_odd_digits_single(98765) == 23", "assert sum_odd_digits_single(123456789) == 25", "assert sum_odd_digits_single(987654321) == 25", "assert sum_odd_digits_single(111111) == 6", "assert sum_odd_digits_single(999999) == 54", "assert sum_odd_digits_single(246813579) == 25", "assert sum_odd_digits_single(1000000001) == 2"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of prime digits is maximum.", "code": "def sum_prime_digits_single(x):\n    prime_digits = {2, 3, 5, 7}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in prime_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_prime(x):\n    ans = 0\n    while (ans * 10 + 7 <= x):\n        ans = ans * 10 + 7\n    return ans\n\ndef max_digit_sum_sum_prime(N):\n    A = closest_prime(N)\n    return sum_prime_digits_single(A) + sum_prime_digits_single(N - A)", "task_id": "148_06d627f5-dbeb-4264-96f9-ae7b7ef0d7e8", "test_setup_code": "", "test_list": ["assert sum_prime_digits_single(0) == 0", "assert sum_prime_digits_single(2) == 2", "assert sum_prime_digits_single(3) == 3", "assert sum_prime_digits_single(4) == 0", "assert sum_prime_digits_single(5) == 5", "assert sum_prime_digits_single(7) == 7", "assert sum_prime_digits_single(10) == 0", "assert sum_prime_digits_single(23) == 5", "assert sum_prime_digits_single(37) == 10", "assert sum_prime_digits_single(49) == 0", "assert sum_prime_digits_single(52) == 7", "assert sum_prime_digits_single(77) == 14", "assert sum_prime_digits_single(1234567890) == 17", "assert sum_prime_digits_single(222222) == 12", "assert sum_prime_digits_single(357357) == 30"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of Fibonacci digits is maximum.", "code": "def sum_fibonacci_digits_single(x):\n    fibonacci_digits = {0, 1, 2, 3, 5, 8}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in fibonacci_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_fibonacci(x):\n    ans = 0\n    while (ans * 10 + 8 <= x):\n        ans = ans * 10 + 8\n    return ans\n\ndef max_digit_sum_sum_fibonacci(N):\n    A = closest_fibonacci(N)\n    return sum_fibonacci_digits_single(A) + sum_fibonacci_digits_single(N - A)", "task_id": "148_c07815e0-8f64-42fd-81a4-5713f73d3f75", "test_setup_code": "", "test_list": ["assert sum_fibonacci_digits_single(0) == 0", "assert sum_fibonacci_digits_single(1) == 1", "assert sum_fibonacci_digits_single(2) == 2", "assert sum_fibonacci_digits_single(3) == 3", "assert sum_fibonacci_digits_single(5) == 5", "assert sum_fibonacci_digits_single(8) == 8", "assert sum_fibonacci_digits_single(10) == 1", "assert sum_fibonacci_digits_single(21) == 3", "assert sum_fibonacci_digits_single(123) == 6", "assert sum_fibonacci_digits_single(258) == 15", "assert sum_fibonacci_digits_single(987) == 8", "assert sum_fibonacci_digits_single(13579) == 9", "assert sum_fibonacci_digits_single(24680) == 8", "assert sum_fibonacci_digits_single(112358) == 20", "assert sum_fibonacci_digits_single(999999) == 0"], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of square digits is maximum.", "code": "def sum_square_digits_single(x):\n    square_digits = {0, 1, 4, 9}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in square_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_square(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_sum_square(N):\n    A = closest_square(N)\n    return sum_square_digits_single(A) + sum_square_digits_single(N - A)", "task_id": "148_d789131c-418c-4c4a-a797-da457d3cf2e0", "test_setup_code": "", "test_list": ["assert sum_square_digits_single(0) == 0", "assert sum_square_digits_single(1) == 1", "assert sum_square_digits_single(2) == 0", "assert sum_square_digits_single(3) == 0", "assert sum_square_digits_single(4) == 4", "assert sum_square_digits_single(5) == 0", "assert sum_square_digits_single(9) == 9", "assert sum_square_digits_single(10) == 1", "assert sum_square_digits_single(19) == 10", "assert sum_square_digits_single(29) == 9", "assert sum_square_digits_single(49) == 13", "assert sum_square_digits_single(99) == 18", "assert sum_square_digits_single(123) == 1", "assert sum_square_digits_single(456) == 4", "assert sum_square_digits_single(789) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle.", "code": "def min_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] < tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_22abdcb8-ab04-4c64-b893-2646f462f9ce", "test_setup_code": "", "test_list": ["assert min_path_sum([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 3, 3) == 11", "assert min_path_sum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 14", "assert min_path_sum([[1]], 0, 0) == 1", "assert min_path_sum([[5], [7, 8]], 1, 1) == 12", "assert min_path_sum([[10], [1, 20], [1, 1, 1]], 2, 2) == 12", "assert min_path_sum([[100], [1, 200], [1, 1, 200], [1, 1, 1, 200]], 3, 3) == 103", "assert min_path_sum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1]], 4, 4) == 5", "assert min_path_sum([[9], [9, 9], [9, 9, 9], [9, 9, 9, 9]], 3, 3) == 36", "assert min_path_sum([[1], [2, 3], [4, 5, 6]], 2, 2) == 8", "assert min_path_sum([[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]], 4, 4) == 18", "assert min_path_sum([[1], [1, 2], [99, 3, 99]], 2, 2) == 5", "assert min_path_sum([[0], [0, 0], [0, 0, 0]], 2, 2) == 0", "assert min_path_sum([[-1], [-2, -3], [-4, -5, -6]], 2, 2) == -10", "assert min_path_sum([[10], [5, 15], [2, 8, 12]], 2, 2) == 17", "assert min_path_sum([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 3, 3) == 14"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider even numbers.", "code": "def max_path_sum_even(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 2 == 0 and tri[i+1][j+1] % 2 == 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 2 == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 2 == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_707811d7-57b0-4f6a-9b62-db391b6ebc34", "test_setup_code": "", "test_list": ["assert max_path_sum_even([[2]], 1, 1) == 2", "assert max_path_sum_even([[2], [4, 6]], 2, 2) == 8", "assert max_path_sum_even([[2], [3, 4], [6, 5, 7]], 3, 3) == 10", "assert max_path_sum_even([[2], [4, 6], [8, 10, 12]], 3, 3) == 18", "assert max_path_sum_even([[2], [4, 6], [1, 10, 12]], 3, 3) == 16", "assert max_path_sum_even([[1], [2, 3], [4, 5, 6]], 3, 3) == 6", "assert max_path_sum_even([[2], [4, 1], [1, 10, 12]], 3, 3) == 14", "assert max_path_sum_even([[1], [1, 1], [1, 1, 1]], 3, 3) == 0", "assert max_path_sum_even([[2], [4, 6], [8, 10, 12], [14, 16, 18, 20]], 4, 4) == 38", "assert max_path_sum_even([[2], [4, 6], [8, 10, 12], [1, 16, 18, 20]], 4, 4) == 38", "assert max_path_sum_even([[2], [4, 6], [8, 10, 12], [1, 16, 1, 20]], 4, 4) == 34", "assert max_path_sum_even([[2], [4, 6], [8, 10, 12], [1, 1, 1, 1]], 4, 4) == 22", "assert max_path_sum_even([[2], [4, 6], [1, 1, 1], [1, 1, 1, 1]], 4, 4) == 10", "assert max_path_sum_even([[2], [4, 6], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1]], 5, 5) == 10", "assert max_path_sum_even([[2], [4, 6], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]], 6, 6) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider odd numbers.", "code": "def max_path_sum_odd(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 2 != 0 and tri[i+1][j+1] % 2 != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 2 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 2 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_564a84fc-7e56-4176-9b88-502391a39107", "test_setup_code": "", "test_list": ["assert max_path_sum_odd([[1]], 1, 1) == 1", "assert max_path_sum_odd([[1], [2, 3]], 2, 2) == 4", "assert max_path_sum_odd([[1], [3, 5], [7, 8, 9]], 3, 3) == 15", "assert max_path_sum_odd([[2], [4, 6], [8, 10, 12]], 3, 3) == 0", "assert max_path_sum_odd([[1], [2, 3], [4, 5, 6]], 3, 3) == 9", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7]], 3, 3) == 11", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12]], 4, 4) == 21", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12], [13, 14, 15, 16, 17]], 5, 5) == 34", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23, 24]], 6, 6) == 53", "assert max_path_sum_odd([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 5, 5) == 29", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31]], 7, 7) == 84", "assert max_path_sum_odd([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]], 6, 6) == 41", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36, 37, 38, 39]], 8, 8) == 123", "assert max_path_sum_odd([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]], 7, 7) == 53", "assert max_path_sum_odd([[1], [3, 2], [5, 6, 7], [9, 10, 11, 12], [13, 14, 15, 16, 17], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30, 31], [32, 33, 34, 35, 36, 37, 38, 39], [40, 41, 42, 43, 44, 45, 46, 47, 48]], 9, 9) == 164"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider prime numbers.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num**0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef max_path_sum_prime(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif is_prime(tri[i+1][j]) and is_prime(tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif is_prime(tri[i+1][j]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif is_prime(tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_fd6d8c91-425b-41a1-bfdd-deb471927e73", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(11) == True", "assert is_prime(15) == False", "assert is_prime(17) == True", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(25) == False", "assert is_prime(29) == True"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider adjacent elements in the next row.", "code": "def max_path_sum_no_adjacent(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif j == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\t\t\telif j == i: \n\t\t\t\ttri[i][j] += tri[i+1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] += max(tri[i+1][j-1], tri[i+1][j+1]) \n\treturn tri[0][0]", "task_id": "147_2cddb15c-bcf9-47c1-b1f9-fce3e0d10a03", "test_setup_code": "", "test_list": ["assert max_path_sum_no_adjacent([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 4, 4) == 15", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4, 4) == 23", "assert max_path_sum_no_adjacent([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]], 4, 4) == 4", "assert max_path_sum_no_adjacent([[10]], 1, 1) == 10", "assert max_path_sum_no_adjacent([[1], [2, 1], [1, 2, 1], [1, 1, 2, 1]], 4, 4) == 6", "assert max_path_sum_no_adjacent([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 4, 4) == 23", "assert max_path_sum_no_adjacent([[1], [2, 3], [3, 6, 7], [4, 5, 6, 7]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18", "assert max_path_sum_no_adjacent([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 18"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider non-negative numbers.", "code": "def max_path_sum_non_negative(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] >= 0 and tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_51ee8c07-e64d-4dc1-bae7-bdfb9ba6cdf5", "test_setup_code": "", "test_list": ["assert max_path_sum_non_negative([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 3, 3) == 17", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 20", "assert max_path_sum_non_negative([[1], [2, 3], [4, -5, 6], [7, 8, 9, 10]], 3, 3) == 20", "assert max_path_sum_non_negative([[1], [2, -3], [-4, -5, 6], [7, 8, 9, 10]], 3, 3) == 20", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6]], 2, 2) == 10", "assert max_path_sum_non_negative([[1], [2, 3], [-4, -5, -6]], 2, 2) == 6", "assert max_path_sum_non_negative([[1], [-2, -3], [-4, -5, -6]], 2, 2) == 1", "assert max_path_sum_non_negative([[1]], 0, 0) == 1", "assert max_path_sum_non_negative([[1], [2, 3]], 1, 1) == 4", "assert max_path_sum_non_negative([[10], [2, 3], [4, 5, 6]], 2, 2) == 19", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 4, 4) == 35", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, -9, 10]], 3, 3) == 18", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, -15]], 4, 4) == 34", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]], 5, 5) == 56", "assert max_path_sum_non_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, -21]], 5, 5) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider repeated elements in the next row.", "code": "def max_path_sum_no_repeats(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] != tri[i+1][j+1]: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\treturn tri[0][0]", "task_id": "147_cc4985ef-d5ad-4508-9545-58ac4907203b", "test_setup_code": "", "test_list": ["assert max_path_sum_no_repeats([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 4, 3) == 15", "assert max_path_sum_no_repeats([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 3) == 20", "assert max_path_sum_no_repeats([[1]], 1, 0) == 1", "assert max_path_sum_no_repeats([[1], [2, 2], [3, 3, 3]], 3, 2) == 6", "assert max_path_sum_no_repeats([[10], [9, 8], [7, 6, 5], [4, 3, 2, 1]], 4, 3) == 28", "assert max_path_sum_no_repeats([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]], 4, 3) == 4", "assert max_path_sum_no_repeats([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 4, 3) == 23", "assert max_path_sum_no_repeats([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 4, 3) == 23", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 5, 6, 7]], 4, 3) == 14", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 1, 6, 7]], 4, 3) == 13", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 4, 4, 4]], 4, 3) == 11", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 4, 4, 5]], 4, 3) == 12", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 4, 5, 5]], 4, 3) == 13", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [4, 5, 5, 5]], 4, 3) == 14", "assert max_path_sum_no_repeats([[1], [2, 3], [3, 2, 1], [5, 5, 5, 5]], 4, 3) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider zero elements.", "code": "def max_path_sum_no_zero(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] != 0 and tri[i+1][j+1] != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_a9b14bfa-781d-431a-bc80-90dae8710a58", "test_setup_code": "", "test_list": ["assert max_path_sum_no_zero([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]], 3, 3) == 23", "assert max_path_sum_no_zero([[1], [2, 3], [4, 0, 6], [7, 8, 9, 0]], 3, 3) == 21", "assert max_path_sum_no_zero([[1], [2, 0], [0, 0, 3], [4, 0, 0, 0]], 3, 3) == 7", "assert max_path_sum_no_zero([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 3, 3) == 27", "assert max_path_sum_no_zero([[1], [0, 2], [3, 0, 4], [5, 6, 0, 7]], 3, 3) == 15", "assert max_path_sum_no_zero([[10], [0, 5], [0, 0, 1], [0, 0, 0, 0]], 3, 3) == 15", "assert max_path_sum_no_zero([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3, 3) == 20", "assert max_path_sum_no_zero([[1], [2, 3], [4, 0, 6], [7, 0, 9, 10]], 3, 3) == 19", "assert max_path_sum_no_zero([[1], [0, 2], [3, 4, 0], [5, 6, 7, 0]], 3, 3) == 12", "assert max_path_sum_no_zero([[1], [2, 0], [0, 4, 3], [5, 0, 6, 7]], 3, 3) == 14", "assert max_path_sum_no_zero([[1], [2, 3], [4, 5, 6], [7, 8, 9, 0]], 3, 3) == 20", "assert max_path_sum_no_zero([[1], [2, 0], [3, 4, 0], [5, 6, 0, 7]], 3, 3) == 12", "assert max_path_sum_no_zero([[1], [2, 3], [4, 0, 6], [7, 8, 0, 9]], 3, 3) == 19", "assert max_path_sum_no_zero([[1], [2, 3], [4, 5, 6], [0, 8, 9, 10]], 3, 3) == 20", "assert max_path_sum_no_zero([[1], [2, 0], [3, 4, 0], [5, 6, 0, 7]], 3, 3) == 12"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider negative elements.", "code": "def max_path_sum_no_negative(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] >= 0 and tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_6f4f8a44-68b2-4e3d-8138-46ce06933c88", "test_setup_code": "", "test_list": ["assert max_path_sum_no_negative([[1], [2, 3], [4, 5, 6]], 2, 0) == 10", "assert max_path_sum_no_negative([[5], [7, 8], [2, 3, 4], [1, 2, 3, 4]], 3, 0) == 20", "assert max_path_sum_no_negative([[10]], 0, 0) == 10", "assert max_path_sum_no_negative([[5], [2, 3]], 1, 0) == 8", "assert max_path_sum_no_negative([[1], [-2, 3], [4, -5, 6]], 2, 0) == 10", "assert max_path_sum_no_negative([[1], [2, -3], [-4, 5, -6]], 2, 0) == 3", "assert max_path_sum_no_negative([[1], [-2, -3], [4, 5, 6]], 2, 0) == 1", "assert max_path_sum_no_negative([[-1], [2, 3], [4, 5, 6]], 2, 0) == -1", "assert max_path_sum_no_negative([[0], [0, 0], [0, 0, 0]], 2, 0) == 0", "assert max_path_sum_no_negative([[5], [-7, 8], [-2, -3, 4]], 2, 0) == 9", "assert max_path_sum_no_negative([[5], [7, -8], [2, -3, 4], [1, -2, 3, -4]], 3, 0) == 15", "assert max_path_sum_no_negative([[10], [-20, 30], [40, -50, 60]], 2, 0) == 100", "assert max_path_sum_no_negative([[1], [-1, -1], [-1, -1, -1]], 2, 0) == 1", "assert max_path_sum_no_negative([[100], [50, 40], [20, 30, 10]], 2, 0) == 170", "assert max_path_sum_no_negative([[1], [2, 3], [4, -5, 6], [7, 8, -9, 10]], 3, 0) == 16"], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider elements divisible by 3.", "code": "def max_path_sum_no_divisible_by_3(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 3 != 0 and tri[i+1][j+1] % 3 != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 3 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 3 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_76a8fd1f-c5d8-44f5-a5da-3f263b480705", "test_setup_code": "", "test_list": ["assert max_path_sum_no_divisible_by_3([[2]], 1, 1) == 2", "assert max_path_sum_no_divisible_by_3([[1], [2, 3]], 2, 2) == 3", "assert max_path_sum_no_divisible_by_3([[1], [3, 6], [4, 5, 9]], 3, 3) == 6", "assert max_path_sum_no_divisible_by_3([[1], [2, 4], [1, 2, 3]], 3, 3) == 7", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [1, 6, 9]], 3, 3) == 3", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 12]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 15]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 18]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 21]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 24]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 27]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 30]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 33]], 4, 4) == 15", "assert max_path_sum_no_divisible_by_3([[1], [2, 3], [4, 5, 6], [7, 8, 9, 36]], 4, 4) == 15"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "151_230ce13d-fb12-4143-9614-d0aa323b2c00", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(25) == False", "assert is_prime(29) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef lcm(x: int, y: int) -> int:\n    return abs(x * y) // gcd(x, y)", "task_id": "151_238e2224-638c-4ce8-8ef1-966bd959f3ff", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(7, 3) == 21", "assert lcm(6, 8) == 24", "assert lcm(21, 6) == 42", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(1, 1) == 1", "assert lcm(1, 100) == 100", "assert lcm(100, 1) == 100", "assert lcm(15, 20) == 60", "assert lcm(9, 28) == 252", "assert lcm(123456, 789012) == 8117355456", "assert lcm(100000, 100000) == 100000", "assert lcm(13, 17) == 221"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is even or not.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "151_72d2ee66-d4ed-4be5-a410-389e3650b090", "test_setup_code": "", "test_list": ["assert is_even(2) == True", "assert is_even(3) == False", "assert is_even(0) == True", "assert is_even(-2) == True", "assert is_even(-3) == False", "assert is_even(100) == True", "assert is_even(101) == False", "assert is_even(999999) == False", "assert is_even(1000000) == True", "assert is_even(-999999) == False", "assert is_even(-1000000) == True", "assert is_even(2147483646) == True", "assert is_even(2147483647) == False", "assert is_even(-2147483648) == True", "assert is_even(-2147483647) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "151_b8533248-d269-4458-bd1d-f489878e6190", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(56) == 11", "assert sum_of_digits(7) == 7", "assert sum_of_digits(123456789) == 45", "assert sum_of_digits(10) == 1", "assert sum_of_digits(1111111111) == 10", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(2222222222) == 20", "assert sum_of_digits(314159265) == 36", "assert sum_of_digits(12345678901234567890) == 90", "assert sum_of_digits(8080808080) == 40"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "151_239fbb64-1cf5-4609-b9c4-2eb84b4e7bfb", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "151_ec0a76cb-1c50-4978-b3cf-a2c95e706852", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "151_89da077c-362b-4922-bd2b-953684e662b2", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(30) == 832040", "assert fibonacci(50) == 12586269025"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "151_954f7912-81cc-4310-9139-0f1a93e34525", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('a') == 'a'", "assert reverse_string('') == ''", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('123 456 789') == '987 654 321'", "assert reverse_string('a man a plan a canal panama') == 'amanap lanac a nalp a nam a'", "assert reverse_string('No lemon, no melon') == 'nolem on ,nomel oN'", "assert reverse_string('Was it a car or a cat I saw?') == '?was I tac a ro rac a ti saW'", "assert reverse_string('Madam, in Eden, I\u2019m Adam') == 'madA m\u2019I ,nedE ni ,madaM'"], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "151_16882b4e-54ce-48f1-9068-7867ee5b6e05", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abc', 'abcd') == False", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '2314') == False", "assert is_anagram('!@#', '#@!') == True", "assert is_anagram('!@#', '!@#') == True", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('aabbcc', 'aabbc') == False", "assert is_anagram('anagram', 'nagaram') == True"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "151_41c29f3c-46b1-4d9b-95d9-7d9ad188db7b", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('AEIOU') == 5", "assert count_vowels('aeiou') == 5", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('12345') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('Hello, World!') == 3", "assert count_vowels('Python Programming') == 4", "assert count_vowels('A quick movement of the enemy will jeopardize six gunboats') == 16", "assert count_vowels('Glib jocks quiz nymph to vex dwarf') == 5", "assert count_vowels('Sphinx of black quartz, judge my vow') == 7"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is two for the given array.", "code": "def longest_subseq_with_diff_two(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+2) or (arr[i] == arr[j]-2)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_52b6ed1d-4f20-4d1b-b046-ccd569ddcf16", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_two([1, 3, 5, 7, 9], 5) == 5", "assert longest_subseq_with_diff_two([1, 2, 3, 4, 5], 5) == 1", "assert longest_subseq_with_diff_two([1, 3, 1, 3, 1, 3], 6) == 6", "assert longest_subseq_with_diff_two([10, 12, 14, 16, 18], 5) == 5", "assert longest_subseq_with_diff_two([10, 8, 6, 4, 2], 5) == 5", "assert longest_subseq_with_diff_two([1, 3, 5, 2, 4, 6], 6) == 3", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 2, 4, 6, 8], 8) == 4", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 9, 11, 13, 15], 8) == 8", "assert longest_subseq_with_diff_two([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 1", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 9, 2, 4, 6, 8], 9) == 5", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 10) == 10", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], 11) == 11", "assert longest_subseq_with_diff_two([1, 3, 1, 3, 1, 3, 1, 3, 1, 3], 10) == 10", "assert longest_subseq_with_diff_two([1, 3, 5, 2, 4, 6, 8, 10, 12], 9) == 5", "assert longest_subseq_with_diff_two([1, 3, 5, 7, 9, 2, 4, 6, 8, 10], 10) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is k for the given array.", "code": "def longest_subseq_with_diff_k(arr, n, k): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+k) or (arr[i] == arr[j]-k)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_91f04a82-36da-40e0-aee2-182893d633f5", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_k([1, 2, 3, 4], 4, 1) == 4", "assert longest_subseq_with_diff_k([1, 3, 5, 7], 4, 2) == 4", "assert longest_subseq_with_diff_k([10, 13, 15, 18, 20], 5, 3) == 3", "assert longest_subseq_with_diff_k([1, 5, 3, 4, 2], 5, 1) == 4", "assert longest_subseq_with_diff_k([1, 2, 3, 4, 5], 5, 2) == 3", "assert longest_subseq_with_diff_k([1, 2, 3, 4, 5], 5, 3) == 2", "assert longest_subseq_with_diff_k([1, 3, 5, 7, 9], 5, 4) == 2", "assert longest_subseq_with_diff_k([1, 1, 1, 1], 4, 0) == 4", "assert longest_subseq_with_diff_k([1, 2, 3, 4, 5], 5, 0) == 1", "assert longest_subseq_with_diff_k([1, 2, 3, 4, 5], 5, 10) == 1", "assert longest_subseq_with_diff_k([1, 3, 5, 7, 9, 11], 6, 2) == 6", "assert longest_subseq_with_diff_k([1, 2, 4, 5, 7, 8], 6, 1) == 3", "assert longest_subseq_with_diff_k([1, 2, 4, 5, 7, 8], 6, 2) == 3", "assert longest_subseq_with_diff_k([1, 3, 5, 7, 9, 11, 13], 7, 2) == 7", "assert longest_subseq_with_diff_k([1], 1, 1) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the longest increasing subsequence for the given array.", "code": "def longest_increasing_subseq(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1) \n\treturn max(dp)", "task_id": "149_d4344e82-3d81-42ce-8efd-334d809dfba2", "test_setup_code": "", "test_list": ["assert longest_increasing_subseq([10, 9, 2, 5, 3, 7, 101, 18], 8) == 4", "assert longest_increasing_subseq([0, 1, 0, 3, 2, 3], 6) == 4", "assert longest_increasing_subseq([7, 7, 7, 7, 7, 7, 7], 7) == 1", "assert longest_increasing_subseq([1, 3, 5, 4, 7], 5) == 4", "assert longest_increasing_subseq([2, 2, 2, 2, 2], 5) == 1", "assert longest_increasing_subseq([1, 2, 3, 4, 5], 5) == 5", "assert longest_increasing_subseq([5, 4, 3, 2, 1], 5) == 1", "assert longest_increasing_subseq([1], 1) == 1", "assert longest_increasing_subseq([], 0) == 0", "assert longest_increasing_subseq([3, 10, 2, 1, 20], 5) == 3", "assert longest_increasing_subseq([50, 3, 10, 7, 40, 80], 6) == 4", "assert longest_increasing_subseq([10, 22, 9, 33, 21, 50, 41, 60, 80], 9) == 6", "assert longest_increasing_subseq([3, 4, -1, 0, 6, 2, 3], 7) == 4", "assert longest_increasing_subseq([10, 20, 30, 40, 50], 5) == 5", "assert longest_increasing_subseq([5, 1, 6, 2, 7, 3, 8, 4, 9], 9) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the longest decreasing subsequence for the given array.", "code": "def longest_decreasing_subseq(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] < arr[j]: \n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1) \n\treturn max(dp)", "task_id": "149_2942763d-f571-4369-91f9-bb9598b01128", "test_setup_code": "", "test_list": ["assert longest_decreasing_subseq([5, 3, 4, 8, 6, 7], 6) == 2", "assert longest_decreasing_subseq([9, 8, 7, 6, 5, 4, 3, 2, 1], 9) == 9", "assert longest_decreasing_subseq([1, 2, 3, 4, 5], 5) == 1", "assert longest_decreasing_subseq([5, 4, 3, 2, 1], 5) == 5", "assert longest_decreasing_subseq([5, 1, 5, 1, 5, 1], 6) == 2", "assert longest_decreasing_subseq([10, 20, 30, 25, 20, 15, 10, 5], 8) == 5", "assert longest_decreasing_subseq([1], 1) == 1", "assert longest_decreasing_subseq([], 0) == 0", "assert longest_decreasing_subseq([3, 2, 1, 4, 3, 2, 1], 7) == 3", "assert longest_decreasing_subseq([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0], 11) == 11", "assert longest_decreasing_subseq([1, 3, 2, 4, 3, 5, 4, 6, 5], 9) == 2", "assert longest_decreasing_subseq([5, 4, 3, 2, 1, 2, 3, 4, 5], 9) == 5", "assert longest_decreasing_subseq([100, 90, 80, 70, 60, 50, 40, 30, 20, 10], 10) == 10", "assert longest_decreasing_subseq([1, 2, 3, 4, 3, 2, 1, 0], 8) == 4", "assert longest_decreasing_subseq([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 2, 3, 4, 5], 14) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is odd for the given array.", "code": "def longest_subseq_with_diff_odd_even(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] - arr[j]) % 2 != 0: \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_e182fc76-9570-4307-9392-c3ef6f03da6b", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_odd_even([1, 2, 3, 4, 5], 5) == 3", "assert longest_subseq_with_diff_odd_even([1, 3, 5, 7, 9], 5) == 1", "assert longest_subseq_with_diff_odd_even([2, 4, 6, 8, 10], 5) == 1", "assert longest_subseq_with_diff_odd_even([1, 2, 3, 4], 4) == 3", "assert longest_subseq_with_diff_odd_even([10, 12, 14], 3) == 1", "assert longest_subseq_with_diff_odd_even([5, 2, 9, 4, 7], 5) == 4", "assert longest_subseq_with_diff_odd_even([1, 2], 2) == 2", "assert longest_subseq_with_diff_odd_even([2, 3], 2) == 2", "assert longest_subseq_with_diff_odd_even([7], 1) == 1", "assert longest_subseq_with_diff_odd_even([], 0) == 1", "assert longest_subseq_with_diff_odd_even([1, 1, 1, 1], 4) == 1", "assert longest_subseq_with_diff_odd_even([2, 1, 2, 1, 2], 5) == 5", "assert longest_subseq_with_diff_odd_even([5, 4, 3, 2, 1], 5) == 3", "assert longest_subseq_with_diff_odd_even([1, 3, 5, 2, 4, 6], 6) == 4", "assert longest_subseq_with_diff_odd_even([10, 20, 30, 40, 50], 5) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a prime number for the given array.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num**0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef longest_subseq_with_diff_prime(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_prime(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_607a36b7-8611-47f3-b71d-c0b9098086f9", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_prime([1, 2, 3, 4, 5], 5) == 5", "assert longest_subseq_with_diff_prime([10, 15, 20, 25, 30], 5) == 2", "assert longest_subseq_with_diff_prime([1, 3, 6, 10, 15], 5) == 3", "assert longest_subseq_with_diff_prime([1, 2, 4, 7, 11], 5) == 5", "assert longest_subseq_with_diff_prime([1, 2, 3, 5, 8], 5) == 5", "assert longest_subseq_with_diff_prime([1, 4, 6, 9, 12], 5) == 3", "assert longest_subseq_with_diff_prime([1, 1, 1, 1, 1], 5) == 1", "assert longest_subseq_with_diff_prime([1, 2, 1, 2, 1], 5) == 5", "assert longest_subseq_with_diff_prime([2, 3, 5, 7, 11], 5) == 5", "assert longest_subseq_with_diff_prime([2, 4, 6, 8, 10], 5) == 2", "assert longest_subseq_with_diff_prime([1, 17, 3, 19, 5], 5) == 3", "assert longest_subseq_with_diff_prime([1, 2, 3], 3) == 3", "assert longest_subseq_with_diff_prime([1, 2], 2) == 2", "assert longest_subseq_with_diff_prime([1], 1) == 1", "assert longest_subseq_with_diff_prime([], 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a Fibonacci number for the given array.", "code": "def is_fibonacci(num): \n\tif num < 0: \n\t\treturn False \n\ta, b = 0, 1 \n\twhile b < num: \n\t\ta, b = b, a + b \n\treturn b == num \n\ndef longest_subseq_with_diff_fibonacci(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_fibonacci(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_e65fb74a-db41-4bc7-94f8-f7ac451c2890", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == True", "assert is_fibonacci(1) == True", "assert is_fibonacci(2) == True", "assert is_fibonacci(3) == True", "assert is_fibonacci(4) == False", "assert is_fibonacci(5) == True", "assert is_fibonacci(13) == True", "assert is_fibonacci(21) == True", "assert is_fibonacci(22) == False", "assert is_fibonacci(34) == True", "assert is_fibonacci(55) == True", "assert is_fibonacci(89) == True", "assert is_fibonacci(144) == True", "assert is_fibonacci(233) == True", "assert is_fibonacci(377) == True"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a perfect square for the given array.", "code": "def is_perfect_square(num): \n\tif num < 0: \n\t\treturn False \n\treturn int(num**0.5)**2 == num \n\ndef longest_subseq_with_diff_square(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_perfect_square(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_15b2d622-aeb2-4d4d-b1d7-aa2c76fcf21a", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_square([1, 2, 3, 4, 5], 5) == 2", "assert longest_subseq_with_diff_square([1, 4, 9, 16, 25], 5) == 5", "assert longest_subseq_with_diff_square([1, 2, 3, 5, 7], 5) == 1", "assert longest_subseq_with_diff_square([1, 8, 27, 64, 125], 5) == 1", "assert longest_subseq_with_diff_square([1, 3, 6, 10, 15], 5) == 2", "assert longest_subseq_with_diff_square([1, 5, 10, 15, 20], 5) == 2", "assert longest_subseq_with_diff_square([1, 2, 4, 7, 11], 5) == 3", "assert longest_subseq_with_diff_square([1, 3, 7, 12, 18], 5) == 2", "assert longest_subseq_with_diff_square([1, 2, 3, 4, 6], 5) == 2", "assert longest_subseq_with_diff_square([1, 2, 3, 4, 8], 5) == 2", "assert longest_subseq_with_diff_square([1], 1) == 1", "assert longest_subseq_with_diff_square([], 0) == 0", "assert longest_subseq_with_diff_square([1, 1, 1, 1, 1], 5) == 1", "assert longest_subseq_with_diff_square([1, 4, 1, 4, 1], 5) == 3", "assert longest_subseq_with_diff_square([1, 2, 4, 8, 16], 5) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a perfect cube for the given array.", "code": "def is_perfect_cube(num): \n\tif num < 0: \n\t\treturn False \n\treturn round(num**(1/3))**3 == num \n\ndef longest_subseq_with_diff_cube(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_perfect_cube(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_1317e95f-fd2e-47cf-a750-92e1328f3c82", "test_setup_code": "", "test_list": ["assert longest_subseq_with_diff_cube([1, 8, 27, 64], 4) == 4", "assert longest_subseq_with_diff_cube([1, 2, 3, 4, 5], 5) == 1", "assert longest_subseq_with_diff_cube([1, 9, 28, 65], 4) == 2", "assert longest_subseq_with_diff_cube([1, 8, 27, 64, 125, 216], 6) == 6", "assert longest_subseq_with_diff_cube([1, 2, 10, 18, 26], 5) == 2", "assert longest_subseq_with_diff_cube([1, 8, 15, 22, 29], 5) == 2", "assert longest_subseq_with_diff_cube([1, 8, 16, 24, 32], 5) == 1", "assert longest_subseq_with_diff_cube([1, 27, 64, 125, 216], 5) == 5", "assert longest_subseq_with_diff_cube([1, 2, 3, 4, 5, 6, 7, 8], 8) == 2", "assert longest_subseq_with_diff_cube([1, 8, 27, 64, 125, 216, 343], 7) == 7", "assert longest_subseq_with_diff_cube([1, 9, 28, 65, 126, 217], 6) == 3", "assert longest_subseq_with_diff_cube([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 2", "assert longest_subseq_with_diff_cube([1, 8, 27, 64, 125, 216, 343, 512], 8) == 8", "assert longest_subseq_with_diff_cube([1, 8, 27, 64, 125, 216, 343, 512, 729], 9) == 9", "assert longest_subseq_with_diff_cube([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000], 10) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a factorial number for the given array.", "code": "def is_factorial(num): \n\tif num < 0: \n\t\treturn False \n\tfact = 1 \n\ti = 1 \n\twhile fact < num: \n\t\ti += 1 \n\t\tfact *= i \n\treturn fact == num \n\ndef longest_subseq_with_diff_factorial(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_factorial(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_d2f8f409-0b42-4158-8639-f246380c7af4", "test_setup_code": "", "test_list": ["assert is_factorial(1) == True", "assert is_factorial(2) == True", "assert is_factorial(3) == False", "assert is_factorial(6) == True", "assert is_factorial(24) == True", "assert is_factorial(25) == False", "assert is_factorial(120) == True", "assert is_factorial(121) == False", "assert is_factorial(0) == False", "assert is_factorial(-1) == False", "assert is_factorial(720) == True", "assert is_factorial(5040) == True", "assert is_factorial(40320) == True", "assert is_factorial(362880) == True", "assert is_factorial(362881) == False"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "152_ceaad8f6-f327-4dd3-8a1c-cbf43d77f292", "test_setup_code": "", "test_list": ["assert quick_sort([]) == []", "assert quick_sort([1]) == [1]", "assert quick_sort([2, 1]) == [1, 2]", "assert quick_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert quick_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert quick_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]", "assert quick_sort([-1, -3, -2, 0, 2, 1]) == [-3, -2, -1, 0, 1, 2]", "assert quick_sort([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert quick_sort([100, 50, 25, 75, 0, -25, -50, -100]) == [-100, -50, -25, 0, 25, 50, 75, 100]", "assert quick_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert quick_sort([1, 2, 3, 3, 2, 1]) == [1, 1, 2, 2, 3, 3]", "assert quick_sort([1.1, 2.2, 3.3, 0.9, 2.1, 1.2]) == [0.9, 1.1, 1.2, 2.1, 2.2, 3.3]", "assert quick_sort([3, -1, 4, 1, 5, 9, -2, 6, 5, 3, 5]) == [-2, -1, 1, 3, 3, 4, 5, 5, 5, 6, 9]", "assert quick_sort([1000, 500, 100, 50, 10, 5, 1]) == [1, 5, 10, 50, 100, 500, 1000]", "assert quick_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "152_e774d5b5-eceb-4c93-ae76-567bf41e5c4f", "test_setup_code": "", "test_list": ["assert bubble_sort([3, 2, 1]) == [1, 2, 3]", "assert bubble_sort([5, 1, 4, 2, 8]) == [1, 2, 4, 5, 8]", "assert bubble_sort([]) == []", "assert bubble_sort([1]) == [1]", "assert bubble_sort([2, 2, 2]) == [2, 2, 2]", "assert bubble_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert bubble_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert bubble_sort([3, 1, 2, 3, 1]) == [1, 1, 2, 3, 3]", "assert bubble_sort([-1, -3, -2, 0, 2]) == [-3, -2, -1, 0, 2]", "assert bubble_sort([100, 50, 25, 75, 0]) == [0, 25, 50, 75, 100]", "assert bubble_sort([1, 2, 3, 2, 1]) == [1, 1, 2, 2, 3]", "assert bubble_sort([1, -1, 0]) == [-1, 0, 1]", "assert bubble_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert bubble_sort([1, 3, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 1, 1, 2, 2, 2, 3, 3, 3, 3]", "assert bubble_sort([1.1, 2.2, 0.5, 3.3, 2.1]) == [0.5, 1.1, 2.1, 2.2, 3.3]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "152_4c529244-17a9-4757-b679-bdb8fcf6c0c1", "test_setup_code": "", "test_list": ["assert insertion_sort([]) == []", "assert insertion_sort([1]) == [1]", "assert insertion_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert insertion_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert insertion_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 1, 2, 3, 4, 5, 5, 6, 9]", "assert insertion_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert insertion_sort([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]", "assert insertion_sort([3, 3, 2, 2, 1, 1]) == [1, 1, 2, 2, 3, 3]", "assert insertion_sort([100, 0, -100]) == [-100, 0, 100]", "assert insertion_sort([-5, -10, -3, -1, -8]) == [-10, -8, -5, -3, -1]", "assert insertion_sort([0, 0, 0, 0]) == [0, 0, 0, 0]", "assert insertion_sort([5, 1, 3, 2, 4]) == [1, 2, 3, 4, 5]", "assert insertion_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert insertion_sort([42, 17, 99, 23, 56]) == [17, 23, 42, 56, 99]", "assert insertion_sort([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -1]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "152_8e1f7d72-f392-43c8-a5b9-2bc327b2b5ec", "test_setup_code": "", "test_list": ["assert selection_sort([3, 1, 2]) == [1, 2, 3]", "assert selection_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert selection_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert selection_sort([2, 3, 1, 5, 4]) == [1, 2, 3, 4, 5]", "assert selection_sort([1]) == [1]", "assert selection_sort([]) == []", "assert selection_sort([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]", "assert selection_sort([3, -1, 2, -5, 4]) == [-5, -1, 2, 3, 4]", "assert selection_sort([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert selection_sort([100, 50, 0, -50, -100]) == [-100, -50, 0, 50, 100]", "assert selection_sort([1, 100, 1, 100, 1]) == [1, 1, 1, 100, 100]", "assert selection_sort([1.1, 1.01, 1.001]) == [1.001, 1.01, 1.1]", "assert selection_sort([3, 1, 2, 1, 3]) == [1, 1, 2, 3, 3]", "assert selection_sort([5, 3, 8, 6, 2]) == [2, 3, 5, 6, 8]", "assert selection_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using heap sort.", "code": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr", "task_id": "152_fc1fb9d6-6a32-46d1-b165-27df450c8b0c", "test_setup_code": "", "test_list": ["assert heap_sort([4, 10, 3, 5, 1]) == [1, 3, 4, 5, 10]", "assert heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert heap_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert heap_sort([1]) == [1]", "assert heap_sort([]) == []", "assert heap_sort([2, 3, 2, 1, 4, 3]) == [1, 2, 2, 3, 3, 4]", "assert heap_sort([100, 50, 25, 75, 0]) == [0, 25, 50, 75, 100]", "assert heap_sort([1, 3, 2, 3, 1]) == [1, 1, 2, 3, 3]", "assert heap_sort([-1, -3, -2, -4, -5]) == [-5, -4, -3, -2, -1]", "assert heap_sort([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert heap_sort([5, 3, 8, 4, 2, 7, 1, 10]) == [1, 2, 3, 4, 5, 7, 8, 10]", "assert heap_sort([3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3]", "assert heap_sort([9, 7, 5, 3, 1, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert heap_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using counting sort.", "code": "def counting_sort(arr):\n    max_val = max(arr)\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n    return arr", "task_id": "152_3d9ff548-7f2d-48d9-a236-6472da319eb5", "test_setup_code": "", "test_list": ["assert counting_sort([4, 2, 2, 8, 3, 3, 1]) == [1, 2, 2, 3, 3, 4, 8]", "assert counting_sort([1, 4, 1, 2, 7, 5, 2]) == [1, 1, 2, 2, 4, 5, 7]", "assert counting_sort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert counting_sort([]) == []", "assert counting_sort([0]) == [0]", "assert counting_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert counting_sort([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]", "assert counting_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert counting_sort([2, 3, 1, 0, 2, 5, 4, 3, 2]) == [0, 1, 2, 2, 2, 3, 3, 4, 5]", "assert counting_sort([100, 90, 80, 70, 60, 50, 40, 30, 20, 10]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "assert counting_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert counting_sort([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert counting_sort([1, 3, 2, 3, 4, 2, 1, 0, 0, 5]) == [0, 0, 1, 1, 2, 2, 3, 3, 4, 5]", "assert counting_sort([2, 1]) == [1, 2]", "assert counting_sort([1, 0, 1, 0, 1, 0, 1, 0, 1, 0]) == [0, 0, 0, 0, 0, 1, 1, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using radix sort.", "code": "def counting_sort_exp(arr, exp1):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // exp1\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp1\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_exp(arr, exp)\n        exp *= 10\n    return arr", "task_id": "152_783b9951-92e4-44cd-91b2-96d82843081f", "test_setup_code": "", "test_list": ["assert radix_sort([170, 45, 75, 90, 802, 24, 2, 66]) == [2, 24, 45, 66, 75, 90, 170, 802]", "assert radix_sort([1, 4, 1, 2, 7, 5, 2]) == [1, 1, 2, 2, 4, 5, 7]", "assert radix_sort([10, 100, 1000, 10000]) == [10, 100, 1000, 10000]", "assert radix_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert radix_sort([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert radix_sort([123, 456, 789, 101, 202, 303]) == [101, 123, 202, 303, 456, 789]", "assert radix_sort([9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert radix_sort([100, 200, 300, 400, 500]) == [100, 200, 300, 400, 500]", "assert radix_sort([99, 88, 77, 66, 55, 44, 33, 22, 11, 0]) == [0, 11, 22, 33, 44, 55, 66, 77, 88, 99]", "assert radix_sort([1]) == [1]", "assert radix_sort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert radix_sort([1000, 100, 10, 1]) == [1, 10, 100, 1000]", "assert radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert radix_sort([1234, 5678, 91011, 1213, 1415]) == [1213, 1234, 1415, 5678, 91011]", "assert radix_sort([100, 10, 1, 0]) == [0, 1, 10, 100]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using shell sort.", "code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "task_id": "152_06a93ac5-c111-44d5-8959-73f5bbab4a17", "test_setup_code": "", "test_list": ["assert shell_sort([3, 1, 2]) == [1, 2, 3]", "assert shell_sort([5, 3, 8, 4, 2]) == [2, 3, 4, 5, 8]", "assert shell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert shell_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert shell_sort([1]) == [1]", "assert shell_sort([]) == []", "assert shell_sort([2, 1]) == [1, 2]", "assert shell_sort([1, 2, 1, 2, 1]) == [1, 1, 1, 2, 2]", "assert shell_sort([100, 50, 25, 75, 0]) == [0, 25, 50, 75, 100]", "assert shell_sort([3, -1, -2, 0, 2]) == [-2, -1, 0, 2, 3]", "assert shell_sort([1.1, 2.2, 0.5, 3.3]) == [0.5, 1.1, 2.2, 3.3]", "assert shell_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert shell_sort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert shell_sort([2, 3, 1, 5, 4, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert shell_sort([1, 3, 2, 3, 1, 2]) == [1, 1, 2, 2, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bucket sort.", "code": "def bucket_sort(arr):\n    bucket = [[] for _ in range(len(arr))]\n    for j in arr:\n        index_b = int(len(arr) * j)\n        bucket[index_b].append(j)\n    for i in range(len(arr)):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(len(arr)):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n    return arr", "task_id": "152_5005c2a6-92bb-4d57-9c59-2b8ad43f171b", "test_setup_code": "", "test_list": ["assert bucket_sort([0.25, 0.36, 0.58, 0.41, 0.29, 0.22, 0.45, 0.79, 0.01, 0.69]) == [0.01, 0.22, 0.25, 0.29, 0.36, 0.41, 0.45, 0.58, 0.69, 0.79]", "assert bucket_sort([0.89, 0.24, 0.56, 0.12, 0.34, 0.78, 0.67, 0.45, 0.23, 0.01]) == [0.01, 0.12, 0.23, 0.24, 0.34, 0.45, 0.56, 0.67, 0.78, 0.89]", "assert bucket_sort([0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) == [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]", "assert bucket_sort([0.5, 0.5, 0.5, 0.5, 0.5]) == [0.5, 0.5, 0.5, 0.5, 0.5]", "assert bucket_sort([]) == []", "assert bucket_sort([0.99, 0.01]) == [0.01, 0.99]", "assert bucket_sort([0.01, 0.99]) == [0.01, 0.99]", "assert bucket_sort([0.5]) == [0.5]", "assert bucket_sort([0.123, 0.456, 0.789, 0.101, 0.202, 0.303, 0.404, 0.505, 0.606, 0.707]) == [0.101, 0.123, 0.202, 0.303, 0.404, 0.456, 0.505, 0.606, 0.707, 0.789]", "assert bucket_sort([0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]) == [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]", "assert bucket_sort([0.0, 0.2, 0.4, 0.6, 0.8]) == [0.0, 0.2, 0.4, 0.6, 0.8]", "assert bucket_sort([0.8, 0.6, 0.4, 0.2, 0.0]) == [0.0, 0.2, 0.4, 0.6, 0.8]", "assert bucket_sort([0.33, 0.22, 0.11, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99]) == [0.11, 0.22, 0.33, 0.44, 0.55, 0.66, 0.77, 0.88, 0.99]", "assert bucket_sort([0.5, 0.25, 0.75, 0.1, 0.9, 0.3, 0.7, 0.2, 0.8, 0.4]) == [0.1, 0.2, 0.25, 0.3, 0.4, 0.5, 0.7, 0.75, 0.8, 0.9]", "assert bucket_sort([0.15, 0.85, 0.45, 0.55, 0.35, 0.65, 0.25, 0.75, 0.05, 0.95]) == [0.05, 0.15, 0.25, 0.35, 0.45, 0.55, 0.65, 0.75, 0.85, 0.95]"], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using gnome sort.", "code": "def gnome_sort(arr):\n    index = 0\n    while index < len(arr):\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr", "task_id": "152_3933c1f0-3260-4cf1-bd13-0f8fa549081b", "test_setup_code": "", "test_list": ["assert gnome_sort([3, 2, 1]) == [1, 2, 3]", "assert gnome_sort([1, 2, 3]) == [1, 2, 3]", "assert gnome_sort([5, 3, 8, 4, 2]) == [2, 3, 4, 5, 8]", "assert gnome_sort([]) == []", "assert gnome_sort([1]) == [1]", "assert gnome_sort([2, 1]) == [1, 2]", "assert gnome_sort([1, 2, 2, 1]) == [1, 1, 2, 2]", "assert gnome_sort([3, -1, 0, -5, 2]) == [-5, -1, 0, 2, 3]", "assert gnome_sort([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert gnome_sort([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert gnome_sort([1, 3, 2, 3, 1]) == [1, 1, 2, 3, 3]", "assert gnome_sort([100, 50, 25, 75, 0]) == [0, 25, 50, 75, 100]", "assert gnome_sort([2.5, 3.1, 1.2, 4.8, 3.3]) == [1.2, 2.5, 3.1, 3.3, 4.8]", "assert gnome_sort([-2, -3, -1, -5, -4]) == [-5, -4, -3, -2, -1]", "assert gnome_sort([1, 0, 1, 0, 1, 0]) == [0, 0, 0, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given number.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    while n > 0:\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "155_d810724d-ab67-4877-a904-279eea2b8fe7", "test_setup_code": "", "test_list": ["assert reverse_bits(0) == 0", "assert reverse_bits(1) == 1", "assert reverse_bits(2) == 1", "assert reverse_bits(3) == 3", "assert reverse_bits(4) == 1", "assert reverse_bits(5) == 5", "assert reverse_bits(6) == 3", "assert reverse_bits(7) == 7", "assert reverse_bits(8) == 1", "assert reverse_bits(15) == 15", "assert reverse_bits(16) == 1", "assert reverse_bits(31) == 31", "assert reverse_bits(32) == 1", "assert reverse_bits(255) == 255", "assert reverse_bits(1023) == 1023"], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in a given number.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "155_8db2a135-db16-4ef6-8fe8-89c1f658c887", "test_setup_code": "", "test_list": ["assert count_set_bits(0) == 0", "assert count_set_bits(1) == 1", "assert count_set_bits(2) == 1", "assert count_set_bits(3) == 2", "assert count_set_bits(4) == 1", "assert count_set_bits(7) == 3", "assert count_set_bits(8) == 1", "assert count_set_bits(15) == 4", "assert count_set_bits(16) == 1", "assert count_set_bits(31) == 5", "assert count_set_bits(32) == 1", "assert count_set_bits(63) == 6", "assert count_set_bits(64) == 1", "assert count_set_bits(127) == 7", "assert count_set_bits(128) == 1"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "155_69fdf9b7-f958-45e4-983e-d7e031014d1b", "test_setup_code": "", "test_list": ["assert is_power_of_two(1) == true", "assert is_power_of_two(2) == true", "assert is_power_of_two(3) == false", "assert is_power_of_two(4) == true", "assert is_power_of_two(5) == false", "assert is_power_of_two(8) == true", "assert is_power_of_two(16) == true", "assert is_power_of_two(31) == false", "assert is_power_of_two(32) == true", "assert is_power_of_two(64) == true", "assert is_power_of_two(127) == false", "assert is_power_of_two(128) == true", "assert is_power_of_two(0) == false", "assert is_power_of_two(-1) == false", "assert is_power_of_two(-16) == false"], "challenge_test_list": []}
{"text": "Write a python function to swap all odd and even bits of a given number.", "code": "def swap_odd_even_bits(n: int) -> int:\n    even_bits = n & 0xAAAAAAAA\n    odd_bits = n & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return even_bits | odd_bits", "task_id": "155_94b8f1a9-f385-46f4-94da-55fd9887a3c0", "test_setup_code": "", "test_list": ["assert swap_odd_even_bits(0) == 0", "assert swap_odd_even_bits(1) == 2", "assert swap_odd_even_bits(2) == 1", "assert swap_odd_even_bits(3) == 3", "assert swap_odd_even_bits(10) == 5", "assert swap_odd_even_bits(5) == 10", "assert swap_odd_even_bits(42) == 21", "assert swap_odd_even_bits(21) == 42", "assert swap_odd_even_bits(170) == 85", "assert swap_odd_even_bits(85) == 170", "assert swap_odd_even_bits(0xAAAAAAAA) == 0x55555555", "assert swap_odd_even_bits(0x55555555) == 0xAAAAAAAA", "assert swap_odd_even_bits(0xFFFFFFFF) == 0xFFFFFFFF", "assert swap_odd_even_bits(0x12345678) == 0x1E6A2C48", "assert swap_odd_even_bits(123456789) == 1642514520"], "challenge_test_list": []}
{"text": "Write a python function to toggle all odd bits of a given number.", "code": "def toggle_odd_bits(n: int) -> int:\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "155_4efb5eef-840f-42c9-a4c7-f619ae7ee6b6", "test_setup_code": "", "test_list": ["assert toggle_odd_bits(0) == 0", "assert toggle_odd_bits(1) == 2", "assert toggle_odd_bits(2) == 1", "assert toggle_odd_bits(3) == 0", "assert toggle_odd_bits(4) == 6", "assert toggle_odd_bits(5) == 7", "assert toggle_odd_bits(6) == 5", "assert toggle_odd_bits(7) == 4", "assert toggle_odd_bits(8) == 10", "assert toggle_odd_bits(15) == 8", "assert toggle_odd_bits(16) == 18", "assert toggle_odd_bits(31) == 22", "assert toggle_odd_bits(32) == 34", "assert toggle_odd_bits(64) == 66", "assert toggle_odd_bits(255) == 170"], "challenge_test_list": []}
{"text": "Write a python function to clear the rightmost set bit of a given number.", "code": "def clear_rightmost_set_bit(n: int) -> int:\n    return n & (n - 1)", "task_id": "155_808337a1-6067-4b9e-8979-938333d63394", "test_setup_code": "", "test_list": ["assert clear_rightmost_set_bit(0) == 0", "assert clear_rightmost_set_bit(1) == 0", "assert clear_rightmost_set_bit(2) == 0", "assert clear_rightmost_set_bit(3) == 2", "assert clear_rightmost_set_bit(4) == 0", "assert clear_rightmost_set_bit(5) == 4", "assert clear_rightmost_set_bit(6) == 4", "assert clear_rightmost_set_bit(7) == 6", "assert clear_rightmost_set_bit(8) == 0", "assert clear_rightmost_set_bit(9) == 8", "assert clear_rightmost_set_bit(10) == 8", "assert clear_rightmost_set_bit(15) == 14", "assert clear_rightmost_set_bit(16) == 0", "assert clear_rightmost_set_bit(31) == 30", "assert clear_rightmost_set_bit(32) == 0"], "challenge_test_list": []}
{"text": "Write a python function to isolate the rightmost set bit of a given number.", "code": "def isolate_rightmost_set_bit(n: int) -> int:\n    return n & -n", "task_id": "155_0f0efd4b-016c-4124-92d6-e3fb91cf9619", "test_setup_code": "", "test_list": ["assert isolate_rightmost_set_bit(0) == 0", "assert isolate_rightmost_set_bit(1) == 1", "assert isolate_rightmost_set_bit(2) == 2", "assert isolate_rightmost_set_bit(3) == 1", "assert isolate_rightmost_set_bit(4) == 4", "assert isolate_rightmost_set_bit(5) == 1", "assert isolate_rightmost_set_bit(6) == 2", "assert isolate_rightmost_set_bit(7) == 1", "assert isolate_rightmost_set_bit(8) == 8", "assert isolate_rightmost_set_bit(16) == 16", "assert isolate_rightmost_set_bit(18) == 2", "assert isolate_rightmost_set_bit(32) == 32", "assert isolate_rightmost_set_bit(64) == 64", "assert isolate_rightmost_set_bit(100) == 4", "assert isolate_rightmost_set_bit(255) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the parity of a given number (1 if the number of set bits is odd, otherwise 0).", "code": "def parity(n: int) -> int:\n    result = 0\n    while n > 0:\n        result ^= n & 1\n        n >>= 1\n    return result", "task_id": "155_f83203a2-1f78-45ea-b210-7f1079788542", "test_setup_code": "", "test_list": ["assert parity(0) == 0", "assert parity(1) == 1", "assert parity(2) == 1", "assert parity(3) == 0", "assert parity(4) == 1", "assert parity(7) == 1", "assert parity(8) == 1", "assert parity(15) == 0", "assert parity(16) == 1", "assert parity(31) == 0", "assert parity(32) == 1", "assert parity(63) == 0", "assert parity(64) == 1", "assert parity(127) == 0", "assert parity(128) == 1"], "challenge_test_list": []}
{"text": "Write a python function to rotate the bits of a given number to the left by d positions.", "code": "def rotate_bits_left(n: int, d: int) -> int:\n    INT_BITS = 32\n    return (n << d) | (n >> (INT_BITS - d))", "task_id": "155_989714bf-34a0-4df7-aeb5-2331b8656209", "test_setup_code": "", "test_list": ["assert rotate_bits_left(0, 1) == 0", "assert rotate_bits_left(1, 1) == 2", "assert rotate_bits_left(1, 2) == 4", "assert rotate_bits_left(1, 31) == 2147483648", "assert rotate_bits_left(1, 32) == 1", "assert rotate_bits_left(1, 33) == 2", "assert rotate_bits_left(12, 1) == 24", "assert rotate_bits_left(12, 2) == 48", "assert rotate_bits_left(12, 4) == 192", "assert rotate_bits_left(12, 28) == 192", "assert rotate_bits_left(2147483647, 1) == 4294967294", "assert rotate_bits_left(2147483648, 1) == 1", "assert rotate_bits_left(4294967295, 1) == 4294967295", "assert rotate_bits_left(4294967295, 16) == 4294967295", "assert rotate_bits_left(123456789, 5) == 3950659248"], "challenge_test_list": []}
{"text": "Write a python function to rotate the bits of a given number to the right by d positions.", "code": "def rotate_bits_right(n: int, d: int) -> int:\n    INT_BITS = 32\n    return (n >> d) | (n << (INT_BITS - d))", "task_id": "155_777e31b2-84dd-41e0-b422-4c00234d514b", "test_setup_code": "", "test_list": ["assert rotate_bits_right(0, 1) == 0", "assert rotate_bits_right(1, 1) == 2147483648", "assert rotate_bits_right(1, 0) == 1", "assert rotate_bits_right(1, 32) == 1", "assert rotate_bits_right(4294967295, 1) == 4294967295", "assert rotate_bits_right(4294967295, 16) == 4294967295", "assert rotate_bits_right(123456789, 4) == 3086419722", "assert rotate_bits_right(123456789, 8) == 2155905159", "assert rotate_bits_right(123456789, 12) == 1077952579", "assert rotate_bits_right(123456789, 16) == 538976289", "assert rotate_bits_right(123456789, 20) == 269488144", "assert rotate_bits_right(123456789, 24) == 134744072", "assert rotate_bits_right(123456789, 28) == 67372036", "assert rotate_bits_right(2147483648, 1) == 1073741824", "assert rotate_bits_right(2147483648, 31) == 1"], "challenge_test_list": []}
{"text": "Write a function to extract a specified column from a given two-dimensional list.", "code": "def extract_column(matrix, col_index):\n    return [row[col_index] for row in matrix]", "task_id": "154_34652298-87b1-40a1-b5bb-2b3021a00283", "test_setup_code": "", "test_list": ["assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 4, 7]", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [2, 5, 8]", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [3, 6, 9]", "assert extract_column([[1, 2], [3, 4], [5, 6]], 0) == [1, 3, 5]", "assert extract_column([[1, 2], [3, 4], [5, 6]], 1) == [2, 4, 6]", "assert extract_column([[1]], 0) == [1]", "assert extract_column([[1, 2, 3]], 2) == [3]", "assert extract_column([[1, 2, 3], [4, 5, 6]], 1) == [2, 5]", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]], 3) == []", "assert extract_column([], 0) == []", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1) == [3, 6, 9]", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -2) == [2, 5, 8]", "assert extract_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -3) == [1, 4, 7]", "assert extract_column([[None, None], [None, None]], 1) == [None, None]", "assert extract_column([[1, 2, 3], [4, 5], [7, 8, 9]], 2) == [3, 9]"], "challenge_test_list": []}
{"text": "Write a function to extract a specified row from a given two-dimensional list.", "code": "def extract_row(matrix, row_index):\n    return matrix[row_index]", "task_id": "154_6d6593e3-6f31-47fc-ae8a-b15c82648c20", "test_setup_code": "", "test_list": ["assert extract_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [1, 2, 3]", "assert extract_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [4, 5, 6]", "assert extract_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [7, 8, 9]", "assert extract_row([[1]], 0) == [1]", "assert extract_row([[1, 2], [3, 4]], 1) == [3, 4]", "assert extract_row([[5, 6, 7, 8], [9, 10, 11, 12]], 0) == [5, 6, 7, 8]", "assert extract_row([[5, 6, 7, 8], [9, 10, 11, 12]], 1) == [9, 10, 11, 12]", "assert extract_row([['a', 'b', 'c'], ['d', 'e', 'f']], 0) == ['a', 'b', 'c']", "assert extract_row([['a', 'b', 'c'], ['d', 'e', 'f']], 1) == ['d', 'e', 'f']", "assert extract_row([[None, None], [None, None]], 0) == [None, None]", "assert extract_row([[None, None], [None, None]], 1) == [None, None]", "assert extract_row([[1, 2], [3, 4], [5, 6]], 2) == [5, 6]", "assert extract_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -1) == [7, 8, 9]", "assert extract_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], -2) == [4, 5, 6]", "assert extract_row([[], [], []], 1) == []"], "challenge_test_list": []}
{"text": "Write a function to extract the main diagonal elements from a given square two-dimensional list.", "code": "def extract_diagonal(matrix):\n    return [matrix[i][i] for i in range(len(matrix))]", "task_id": "154_5ddce72d-f64e-4a9e-aecb-2e8d0191f224", "test_setup_code": "", "test_list": ["assert extract_diagonal([[1]]) == [1]", "assert extract_diagonal([[1, 2], [3, 4]]) == [1, 4]", "assert extract_diagonal([[5, 6, 7], [8, 9, 10], [11, 12, 13]]) == [5, 9, 13]", "assert extract_diagonal([[0, 1, 2], [3, 4, 5], [6, 7, 8]]) == [0, 4, 8]", "assert extract_diagonal([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [1, 1, 1]", "assert extract_diagonal([[2, 3, 4, 5], [6, 7, 8, 9], [10, 11, 12, 13], [14, 15, 16, 17]]) == [2, 7, 12, 17]", "assert extract_diagonal([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [1, 7, 13, 19, 25]", "assert extract_diagonal([[1, 2], [3, 4], [5, 6]]) == [1, 4]", "assert extract_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 5, 9]", "assert extract_diagonal([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16], [17, 18, 19, 20]]) == [1, 6, 11, 16]", "assert extract_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 5, 9]", "assert extract_diagonal([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25], [26, 27, 28, 29, 30]]) == [1, 7, 13, 19, 25]", "assert extract_diagonal([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [1, 6, 11, 16]", "assert extract_diagonal([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]) == [1, 8, 15, 22, 29, 36]", "assert extract_diagonal([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35], [36, 37, 38, 39, 40, 41, 42], [43, 44, 45, 46, 47, 48, 49]]) == [1, 9, 17, 25, 33, 41, 49]"], "challenge_test_list": []}
{"text": "Write a function to extract the anti-diagonal elements from a given square two-dimensional list.", "code": "def extract_anti_diagonal(matrix):\n    n = len(matrix)\n    return [matrix[i][n-1-i] for i in range(n)]", "task_id": "154_c51a34e1-7466-47ce-afb4-f40ff7eb2f26", "test_setup_code": "", "test_list": ["assert extract_anti_diagonal([[1]]) == [1]", "assert extract_anti_diagonal([[1, 2], [3, 4]]) == [2, 3]", "assert extract_anti_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 5, 7]", "assert extract_anti_diagonal([[1, 0, 0], [0, 1, 0], [0, 0, 1]]) == [0, 1, 0]", "assert extract_anti_diagonal([[5, 4, 3], [2, 1, 0], [9, 8, 7]]) == [3, 1, 9]", "assert extract_anti_diagonal([[10, 20, 30, 40], [50, 60, 70, 80], [90, 100, 110, 120], [130, 140, 150, 160]]) == [40, 70, 100, 130]", "assert extract_anti_diagonal([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == [5, 9, 13, 17, 21]", "assert extract_anti_diagonal([[1, -1], [-1, 1]]) == [-1, -1]", "assert extract_anti_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 5, 7]", "assert extract_anti_diagonal([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert extract_anti_diagonal([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [4, 7, 10, 13]", "assert extract_anti_diagonal([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24], [25, 26, 27, 28, 29, 30], [31, 32, 33, 34, 35, 36]]) == [6, 11, 16, 21, 26, 31]", "assert extract_anti_diagonal([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35], [36, 37, 38, 39, 40, 41, 42], [43, 44, 45, 46, 47, 48, 49]]) == [7, 12, 17, 25, 31, 37, 43]", "assert extract_anti_diagonal([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [3, 5, 7]", "assert extract_anti_diagonal([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [4, 7, 10, 13]"], "challenge_test_list": []}
{"text": "Write a function to extract the border elements from a given two-dimensional list.", "code": "def extract_border(matrix):\n    if not matrix: return []\n    top = matrix[0]\n    bottom = matrix[-1]\n    left = [row[0] for row in matrix[1:-1]]\n    right = [row[-1] for row in matrix[1:-1]]\n    return top + right + bottom[::-1] + left[::-1]", "task_id": "154_af999486-dde3-498d-9f56-8501c28fb7bf", "test_setup_code": "", "test_list": ["assert extract_border([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 6, 9, 8, 7, 4]", "assert extract_border([[1, 2], [3, 4]]) == [1, 2, 4, 3]", "assert extract_border([[1]]) == [1]", "assert extract_border([]) == []", "assert extract_border([[1, 2, 3]]) == [1, 2, 3]", "assert extract_border([[1], [2], [3]]) == [1, 3, 2]", "assert extract_border([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [1, 2, 3, 4, 8, 12, 11, 10, 9, 5]", "assert extract_border([[1, 2], [3, 4], [5, 6]]) == [1, 2, 4, 6, 5, 3]", "assert extract_border([[1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 6, 4]", "assert extract_border([[0, 0], [0, 0]]) == [0, 0, 0, 0]", "assert extract_border([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-1, -2, -3, -6, -9, -8, -7, -4]", "assert extract_border([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5]", "assert extract_border([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 2, 3, 6, 9, 12, 11, 10, 7, 4]", "assert extract_border([[1, 2, 3, 4, 5]]) == [1, 2, 3, 4, 5]", "assert extract_border([[1], [2], [3], [4], [5]]) == [1, 5, 4, 3, 2]"], "challenge_test_list": []}
{"text": "Write a function to extract all even elements from a given two-dimensional list.", "code": "def extract_even_elements(matrix):\n    return [elem for row in matrix for elem in row if elem % 2 == 0]", "task_id": "154_3611fcf2-1840-47df-aff4-759c087dee61", "test_setup_code": "", "test_list": ["assert extract_even_elements([[1, 2, 3], [4, 5, 6]]) == [2, 4, 6]", "assert extract_even_elements([[7, 8, 9], [10, 11, 12]]) == [8, 10, 12]", "assert extract_even_elements([[13, 15, 17], [19, 21, 23]]) == []", "assert extract_even_elements([[2, 4, 6], [8, 10, 12]]) == [2, 4, 6, 8, 10, 12]", "assert extract_even_elements([[1, 3, 5], [7, 9, 11]]) == []", "assert extract_even_elements([[0, 2, 4], [6, 8, 10]]) == [0, 2, 4, 6, 8, 10]", "assert extract_even_elements([[1, 2], [3, 4], [5, 6]]) == [2, 4, 6]", "assert extract_even_elements([[2], [4], [6]]) == [2, 4, 6]", "assert extract_even_elements([[1], [3], [5]]) == []", "assert extract_even_elements([[2, 3], [4, 5], [6, 7]]) == [2, 4, 6]", "assert extract_even_elements([[0]]) == [0]", "assert extract_even_elements([[1]]) == []", "assert extract_even_elements([[]]) == []", "assert extract_even_elements([[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]", "assert extract_even_elements([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == [2, 4, 6, 8, 10, 12]"], "challenge_test_list": []}
{"text": "Write a function to extract all odd elements from a given two-dimensional list.", "code": "def extract_odd_elements(matrix):\n    return [elem for row in matrix for elem in row if elem % 2 != 0]", "task_id": "154_a0609cc0-8b27-4f11-ad04-b75be9adec32", "test_setup_code": "", "test_list": ["assert extract_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 3, 5, 7, 9]", "assert extract_odd_elements([[10, 11, 12], [13, 14, 15], [16, 17, 18]]) == [11, 13, 15, 17]", "assert extract_odd_elements([[2, 4, 6], [8, 10, 12], [14, 16, 18]]) == []", "assert extract_odd_elements([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == [1, 3, 5, 7, 9, 11, 13, 15, 17]", "assert extract_odd_elements([[]]) == []", "assert extract_odd_elements([[1]]) == [1]", "assert extract_odd_elements([[2]]) == []", "assert extract_odd_elements([[1, 2], [3, 4], [5, 6]]) == [1, 3, 5]", "assert extract_odd_elements([[0, -1, -2], [-3, -4, -5], [-6, -7, -8]]) == [-1, -3, -5, -7]", "assert extract_odd_elements([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == [1, 1, 1, 1, 1, 1, 1, 1, 1]", "assert extract_odd_elements([[1001, 1002], [1003, 1004], [1005, 1006]]) == [1001, 1003, 1005]", "assert extract_odd_elements([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == []", "assert extract_odd_elements([[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]) == [1, 3, 5, 7, 9]", "assert extract_odd_elements([[1, 2], [3, 4], [5, 6], [7, 8], [9, 10]]) == [1, 3, 5, 7, 9]", "assert extract_odd_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == [1, 3, 5, 7, 9, 11]"], "challenge_test_list": []}
{"text": "Write a function to extract all elements greater than a specified threshold from a given two-dimensional list.", "code": "def extract_elements_greater_than(matrix, threshold):\n    return [elem for row in matrix for elem in row if elem > threshold]", "task_id": "154_171e1f7a-2bed-47b1-817a-4060eb84b4f6", "test_setup_code": "", "test_list": ["assert extract_elements_greater_than([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [6, 7, 8, 9]", "assert extract_elements_greater_than([[10, 20], [30, 40]], 25) == [30, 40]", "assert extract_elements_greater_than([[5, 5, 5], [5, 5, 5]], 5) == []", "assert extract_elements_greater_than([[1, 2, 3], [4, 5, 6]], 0) == [1, 2, 3, 4, 5, 6]", "assert extract_elements_greater_than([[-1, -2, -3], [-4, -5, -6]], -3) == [-1, -2]", "assert extract_elements_greater_than([], 10) == []", "assert extract_elements_greater_than([[], []], 10) == []", "assert extract_elements_greater_than([[1]], 0) == [1]", "assert extract_elements_greater_than([[1]], 1) == []", "assert extract_elements_greater_than([[0, 0], [0, 0]], 0) == []", "assert extract_elements_greater_than([[100, 200], [300, 400]], 250) == [300, 400]", "assert extract_elements_greater_than([[1.5, 2.5], [3.5, 4.5]], 2) == [2.5, 3.5, 4.5]", "assert extract_elements_greater_than([[1, 2], [3, 4], [5, 6], [7, 8]], 4) == [5, 6, 7, 8]", "assert extract_elements_greater_than([[10]], 100) == []", "assert extract_elements_greater_than([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) == []"], "challenge_test_list": []}
{"text": "Write a function to extract all elements less than a specified threshold from a given two-dimensional list.", "code": "def extract_elements_less_than(matrix, threshold):\n    return [elem for row in matrix for elem in row if elem < threshold]", "task_id": "154_fc20bc8b-deb2-4fdb-99b2-7b5f66e60be7", "test_setup_code": "", "test_list": ["assert extract_elements_less_than([[1, 2, 3], [4, 5, 6]], 4) == [1, 2, 3]", "assert extract_elements_less_than([[10, 20, 30], [40, 50, 60]], 25) == [10, 20]", "assert extract_elements_less_than([[7, 8, 9], [10, 11, 12]], 10) == [7, 8, 9]", "assert extract_elements_less_than([[1, 2], [3, 4], [5, 6]], 5) == [1, 2, 3, 4]", "assert extract_elements_less_than([[5, 5, 5], [5, 5, 5]], 5) == []", "assert extract_elements_less_than([[1, 2, 3], [4, 5, 6]], 1) == []", "assert extract_elements_less_than([[1]], 2) == [1]", "assert extract_elements_less_than([[1, 2, 3], [4, 5, 6]], 7) == [1, 2, 3, 4, 5, 6]", "assert extract_elements_less_than([[10, 20, 30], [40, 50, 60]], 50) == [10, 20, 30, 40]", "assert extract_elements_less_than([[0, -1, -2], [-3, -4, -5]], 0) == [-1, -2, -3, -4, -5]", "assert extract_elements_less_than([[], []], 5) == []", "assert extract_elements_less_than([[1, 2, 3], [4, 5, 6]], 0) == []", "assert extract_elements_less_than([[100, 200], [300, 400]], 150) == [100]", "assert extract_elements_less_than([[1, 2], [3, 4], [5, 6]], 6) == [1, 2, 3, 4, 5]", "assert extract_elements_less_than([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to extract all elements divisible by a specified number from a given two-dimensional list.", "code": "def extract_elements_divisible_by(matrix, divisor):\n    return [elem for row in matrix for elem in row if elem % divisor == 0]", "task_id": "154_6f3507ed-d9df-4d50-85d6-e57b8a48b960", "test_setup_code": "", "test_list": ["assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [3, 6, 9]", "assert extract_elements_divisible_by([[10, 20, 30], [40, 50, 60]], 10) == [10, 20, 30, 40, 50, 60]", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], 2) == [2, 4, 6]", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], 5) == [5]", "assert extract_elements_divisible_by([[0, 1, 2], [3, 4, 5]], 1) == [0, 1, 2, 3, 4, 5]", "assert extract_elements_divisible_by([[0, 1, 2], [3, 4, 5]], 0) == []", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], 7) == []", "assert extract_elements_divisible_by([[-1, -2, -3], [-4, -5, -6]], 2) == [-2, -4, -6]", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], -2) == [2, 4, 6]", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], 1) == [1, 2, 3, 4, 5, 6]", "assert extract_elements_divisible_by([[1, 2, 3], [4, 5, 6]], 4) == [4]", "assert extract_elements_divisible_by([[12, 15, 18], [21, 24, 27]], 3) == [12, 15, 18, 21, 24, 27]", "assert extract_elements_divisible_by([[0, 0, 0], [0, 0, 0]], 1) == [0, 0, 0, 0, 0, 0]", "assert extract_elements_divisible_by([[100, 200, 300], [400, 500, 600]], 100) == [100, 200, 300, 400, 500, 600]", "assert extract_elements_divisible_by([[1, 2], [3, 4], [5, 6]], 2) == [2, 4, 6]"], "challenge_test_list": []}
{"text": "Write a function to find the focus of a parabola given its coefficients a, b, and c.", "code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    focus = (h, k + 1 / (4 * a))\n    return focus", "task_id": "153_5f54e457-5eca-4d1d-8c4e-e850feeef9a6", "test_setup_code": "", "test_list": ["assert parabola_focus(1, 0, 0) == (0.0, 0.25)", "assert parabola_focus(1, -2, 1) == (1.0, 1.25)", "assert parabola_focus(1, 4, 4) == (-2.0, 3.75)", "assert parabola_focus(2, -4, 2) == (1.0, 2.125)", "assert parabola_focus(0.5, 1, 0) == (-1.0, 0.5)", "assert parabola_focus(-1, 0, 0) == (0.0, -0.25)", "assert parabola_focus(-1, 2, -1) == (1.0, -1.25)", "assert parabola_focus(-2, 4, -2) == (1.0, -2.125)", "assert parabola_focus(0.1, 0, 0) == (0.0, 2.5)", "assert parabola_focus(0.1, 1, 1) == (-5.0, 1.025)", "assert parabola_focus(1, 1, 1) == (-0.5, 0.75)", "assert parabola_focus(1, -1, -1) == (0.5, -0.75)", "assert parabola_focus(2, 0, 0) == (0.0, 0.125)", "assert parabola_focus(3, 6, 9) == (-1.0, 8.916666666666666)", "assert parabola_focus(0.5, -1, 2) == (1.0, 2.5)"], "challenge_test_list": []}
{"text": "Write a function to find the directrix of a parabola given its coefficients a, b, and c.", "code": "def parabola_directrix(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    directrix = k - 1 / (4 * a)\n    return directrix", "task_id": "153_16e20265-837f-4b38-adbe-8f56857eccbb", "test_setup_code": "", "test_list": ["assert parabola_directrix(1, 0, 0) == -0.25", "assert parabola_directrix(1, 0, 1) == 0.75", "assert parabola_directrix(1, 2, 3) == 1.75", "assert parabola_directrix(0.5, 0, 0) == -0.5", "assert parabola_directrix(2, 0, 0) == -0.125", "assert parabola_directrix(-1, 0, 0) == 0.25", "assert parabola_directrix(-2, 0, 0) == 0.125", "assert parabola_directrix(1, -4, 5) == 0.75", "assert abs(parabola_directrix(0.25, 1, -2) - (-2.5)) < 1e-10", "assert abs(parabola_directrix(-0.5, 3, 2) - (6.5)) < 1e-10", "assert abs(parabola_directrix(0.1, -0.6, 1.2) - (0.7)) < 1e-10", "assert abs(parabola_directrix(-0.25, -1, -3) - (-5.5)) < 1e-10", "assert abs(parabola_directrix(0.01, 0.02, 0.03) - (-0.47)) < 1e-10", "assert abs(parabola_directrix(-0.01, -0.02, -0.03) - (0.43)) < 1e-10", "assert abs(parabola_directrix(3, -6, 4) - (0.5)) < 1e-10"], "challenge_test_list": []}
{"text": "Write a function to find the axis of symmetry of a parabola given its coefficients a and b.", "code": "def parabola_axis_of_symmetry(a, b):\n    axis_of_symmetry = -b / (2 * a)\n    return axis_of_symmetry", "task_id": "153_56b78508-9d35-4c0b-9f5d-6a21b313fc9c", "test_setup_code": "", "test_list": ["assert parabola_axis_of_symmetry(1, -4) == 2.0", "assert parabola_axis_of_symmetry(2, -8) == 2.0", "assert parabola_axis_of_symmetry(1, 0) == 0.0", "assert parabola_axis_of_symmetry(3, 6) == -1.0", "assert parabola_axis_of_symmetry(0.5, -1) == 1.0", "assert parabola_axis_of_symmetry(-1, 4) == -2.0", "assert parabola_axis_of_symmetry(-2, 8) == -2.0", "assert parabola_axis_of_symmetry(1, 1) == -0.5", "assert parabola_axis_of_symmetry(0.1, -0.2) == 1.0", "assert parabola_axis_of_symmetry(10, -20) == 1.0", "assert parabola_axis_of_symmetry(-0.5, 1) == -1.0", "assert parabola_axis_of_symmetry(1, -1) == 0.5", "assert parabola_axis_of_symmetry(0.25, -0.5) == 1.0", "assert parabola_axis_of_symmetry(4, -8) == 1.0", "assert parabola_axis_of_symmetry(-1, -1) == 0.5"], "challenge_test_list": []}
{"text": "Write a function to find the y-intercept of a parabola given its coefficients a, b, and c.", "code": "def parabola_y_intercept(a, b, c):\n    return c", "task_id": "153_49944cc6-2f56-4375-b3a2-ddb809a02616", "test_setup_code": "", "test_list": ["assert parabola_y_intercept(1, 2, 3) == 3", "assert parabola_y_intercept(0, 0, 0) == 0", "assert parabola_y_intercept(-1, -2, -3) == -3", "assert parabola_y_intercept(5, 10, 15) == 15", "assert parabola_y_intercept(0.5, 1.5, 2.5) == 2.5", "assert parabola_y_intercept(1, 0, 0) == 0", "assert parabola_y_intercept(0, 1, 0) == 0", "assert parabola_y_intercept(0, 0, 1) == 1", "assert parabola_y_intercept(1, 1, 1) == 1", "assert parabola_y_intercept(-1, 1, -1) == -1", "assert parabola_y_intercept(1, -1, 1) == 1", "assert parabola_y_intercept(0.1, 0.2, 0.3) == 0.3", "assert parabola_y_intercept(100, 200, 300) == 300", "assert parabola_y_intercept(-100, -200, -300) == -300", "assert parabola_y_intercept(1e6, 1e6, 1e6) == 1e6"], "challenge_test_list": []}
{"text": "Write a function to find the x-intercepts of a parabola given its coefficients a, b, and c.", "code": "def parabola_x_intercepts(a, b, c):\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        return ()\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return (x,)\n    else:\n        x1 = (-b + discriminant**0.5) / (2 * a)\n        x2 = (-b - discriminant**0.5) / (2 * a)\n        return (x1, x2)", "task_id": "153_6e33de10-9172-486e-90cb-24ffed9ff29b", "test_setup_code": "", "test_list": ["assert parabola_x_intercepts(1, -3, 2) == (2.0, 1.0)", "assert parabola_x_intercepts(1, 2, 1) == (-1.0,)", "assert parabola_x_intercepts(1, 0, -4) == (2.0, -2.0)", "assert parabola_x_intercepts(1, 0, 4) == ()", "assert parabola_x_intercepts(1, -2, 1) == (1.0,)", "assert parabola_x_intercepts(0, 2, -4) == (2.0,)", "assert parabola_x_intercepts(0, 0, 0) == ()", "assert parabola_x_intercepts(1, 1, 1) == ()", "assert parabola_x_intercepts(1, -7, 10) == (5.0, 2.0)", "assert parabola_x_intercepts(2, -4, 2) == (1.0,)", "assert parabola_x_intercepts(0.5, -1, 0.5) == (1.0,)", "assert parabola_x_intercepts(-1, 3, -2) == (2.0, 1.0)", "assert parabola_x_intercepts(1, 4, 4) == (-2.0,)", "assert parabola_x_intercepts(1, -5, 6) == (3.0, 2.0)", "assert parabola_x_intercepts(1, 0, 0) == (0.0,)"], "challenge_test_list": []}
{"text": "Write a function to determine the opening direction of a parabola given its coefficient a.", "code": "def parabola_opening_direction(a):\n    return 'upward' if a > 0 else 'downward'", "task_id": "153_ffed528d-07ff-4110-82f6-452f1c322d68", "test_setup_code": "", "test_list": ["assert parabola_opening_direction(1) == 'upward'", "assert parabola_opening_direction(-1) == 'downward'", "assert parabola_opening_direction(0.5) == 'upward'", "assert parabola_opening_direction(-0.5) == 'downward'", "assert parabola_opening_direction(100) == 'upward'", "assert parabola_opening_direction(-100) == 'downward'", "assert parabola_opening_direction(0.0001) == 'upward'", "assert parabola_opening_direction(-0.0001) == 'downward'", "assert parabola_opening_direction(1e-10) == 'upward'", "assert parabola_opening_direction(-1e-10) == 'downward'", "assert parabola_opening_direction(1e10) == 'upward'", "assert parabola_opening_direction(-1e10) == 'downward'", "assert parabola_opening_direction(2) == 'upward'", "assert parabola_opening_direction(-2) == 'downward'", "assert parabola_opening_direction(0.1) == 'upward'"], "challenge_test_list": []}
{"text": "Write a function to convert the standard form of a parabola to its vertex form given its coefficients a, b, and c.", "code": "def parabola_vertex_form(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    return f'y = {a}(x - {h})^2 + {k}'", "task_id": "153_aaa83d9b-f3bd-469f-9fe0-e78c921763e4", "test_setup_code": "", "test_list": ["assert parabola_vertex_form(1, -2, 1) == 'y = 1.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 0, 0) == 'y = 1.0(x - 0.0)^2 + 0.0'", "assert parabola_vertex_form(1, 2, 1) == 'y = 1.0(x - -1.0)^2 + 0.0'", "assert parabola_vertex_form(2, -4, 2) == 'y = 2.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(-1, 2, -1) == 'y = -1.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(0.5, -1, 0.5) == 'y = 0.5(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(3, 6, 9) == 'y = 3.0(x - -1.0)^2 + 6.0'", "assert parabola_vertex_form(1, 4, 4) == 'y = 1.0(x - -2.0)^2 + 0.0'", "assert parabola_vertex_form(2, 0, 8) == 'y = 2.0(x - 0.0)^2 + 8.0'", "assert parabola_vertex_form(-2, 4, -8) == 'y = -2.0(x - 1.0)^2 + -6.0'", "assert parabola_vertex_form(1, -6, 9) == 'y = 1.0(x - 3.0)^2 + 0.0'", "assert parabola_vertex_form(4, -8, 4) == 'y = 4.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 1, 1) == 'y = 1.0(x - -0.5)^2 + 0.75'", "assert parabola_vertex_form(0.1, -0.2, 0.1) == 'y = 0.1(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(-0.5, 1, -0.5) == 'y = -0.5(x - 1.0)^2 + 0.0'"], "challenge_test_list": []}
{"text": "Write a function to find the length of the latus rectum of a parabola given its coefficient a.", "code": "def parabola_latus_rectum(a):\n    return 1 / abs(a)", "task_id": "153_c0a8946b-8311-43e2-9c21-071967704c72", "test_setup_code": "", "test_list": ["assert parabola_latus_rectum(1) == 1.0", "assert parabola_latus_rectum(-1) == 1.0", "assert parabola_latus_rectum(0.5) == 2.0", "assert parabola_latus_rectum(-0.5) == 2.0", "assert parabola_latus_rectum(2) == 0.5", "assert parabola_latus_rectum(-2) == 0.5", "assert parabola_latus_rectum(0.1) == 10.0", "assert parabola_latus_rectum(-0.1) == 10.0", "assert parabola_latus_rectum(10) == 0.1", "assert parabola_latus_rectum(-10) == 0.1", "assert parabola_latus_rectum(0.01) == 100.0", "assert parabola_latus_rectum(-0.01) == 100.0", "assert parabola_latus_rectum(100) == 0.01", "assert parabola_latus_rectum(-100) == 0.01", "assert parabola_latus_rectum(1e-6) == 1000000.0"], "challenge_test_list": []}
{"text": "Write a function to find the y-coordinate of the vertex of a parabola given its coefficients a, b, and c.", "code": "def parabola_vertex_y(a, b, c):\n    k = c - (b**2 / (4 * a))\n    return k", "task_id": "153_17bb597f-6020-4e4d-a6c8-36f84414d733", "test_setup_code": "", "test_list": ["assert parabola_vertex_y(1, -2, 1) == 0.0", "assert parabola_vertex_y(1, 0, 0) == 0.0", "assert parabola_vertex_y(1, 2, 1) == 0.0", "assert parabola_vertex_y(2, -4, 2) == 0.0", "assert parabola_vertex_y(1, 4, 4) == -4.0", "assert parabola_vertex_y(1, -6, 9) == 0.0", "assert parabola_vertex_y(-1, 2, -1) == 0.0", "assert parabola_vertex_y(0.5, -1, 0.5) == 0.25", "assert parabola_vertex_y(2, 0, 0) == 0.0", "assert parabola_vertex_y(-1, 0, 0) == 0.0", "assert parabola_vertex_y(1, 1, 1) == 0.75", "assert parabola_vertex_y(3, -6, 2) == -1.0", "assert parabola_vertex_y(1, -1, 0) == -0.25", "assert parabola_vertex_y(1, 2, 3) == 2.0", "assert parabola_vertex_y(0.1, 0.2, 0.3) == 0.275"], "challenge_test_list": []}
{"text": "Write a function to find the discriminant of a parabola given its coefficients a, b, and c.", "code": "def parabola_discriminant(a, b, c):\n    return b**2 - 4 * a * c", "task_id": "153_cfa56b86-08dc-41b7-9aaf-a209b1169fac", "test_setup_code": "", "test_list": ["assert parabola_discriminant(1, 0, 0) == 0", "assert parabola_discriminant(1, 2, 1) == 0", "assert parabola_discriminant(1, -2, 1) == 0", "assert parabola_discriminant(1, 1, 1) == -3", "assert parabola_discriminant(1, -1, 1) == -3", "assert parabola_discriminant(1, 4, 4) == 0", "assert parabola_discriminant(2, 4, 2) == 0", "assert parabola_discriminant(3, 6, 3) == 0", "assert parabola_discriminant(1, 5, 6) == 1", "assert parabola_discriminant(2, 5, 3) == 1", "assert parabola_discriminant(1, 0, -1) == 4", "assert parabola_discriminant(1, 0, 1) == -4", "assert parabola_discriminant(0, 1, 1) == 1", "assert parabola_discriminant(0, 0, 1) == 0", "assert parabola_discriminant(1, 1, 0) == 1"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a tuple of integers.", "code": "def sum_of_tuple_elements(t: tuple) -> int:\n    return sum(t)", "task_id": "156_712014a9-cb28-4d70-b84d-7c29745b3056", "test_setup_code": "", "test_list": ["assert sum_of_tuple_elements((1, 2, 3)) == 6", "assert sum_of_tuple_elements((0, 0, 0)) == 0", "assert sum_of_tuple_elements((-1, -2, -3)) == -6", "assert sum_of_tuple_elements((100, 200, 300)) == 600", "assert sum_of_tuple_elements((1,)) == 1", "assert sum_of_tuple_elements((0,)) == 0", "assert sum_of_tuple_elements((-1,)) == -1", "assert sum_of_tuple_elements((1, -1, 1, -1)) == 0", "assert sum_of_tuple_elements((10, 20, 30, 40, 50)) == 150", "assert sum_of_tuple_elements((5, 5, 5, 5, 5)) == 25", "assert sum_of_tuple_elements((1000, 2000, 3000)) == 6000", "assert sum_of_tuple_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 55", "assert sum_of_tuple_elements((0, -1, 1, -2, 2, -3, 3)) == 0", "assert sum_of_tuple_elements((999, 1)) == 1000", "assert sum_of_tuple_elements(()) == 0"], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of a given tuple.", "code": "def reverse_tuple(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "156_4cb272e2-ea3f-43ec-8d88-9cd49a1423d0", "test_setup_code": "", "test_list": ["assert reverse_tuple((1, 2, 3)) == (3, 2, 1)", "assert reverse_tuple(('a', 'b', 'c')) == ('c', 'b', 'a')", "assert reverse_tuple((True, False, True)) == (True, False, True)", "assert reverse_tuple((1,)) == (1,)", "assert reverse_tuple(()) == ()", "assert reverse_tuple((1, 2, 3, 4, 5)) == (5, 4, 3, 2, 1)", "assert reverse_tuple((None,)) == (None,)", "assert reverse_tuple((1, 'a', True, None)) == (None, True, 'a', 1)", "assert reverse_tuple((0, 0, 0)) == (0, 0, 0)", "assert reverse_tuple((1, 2, 2, 1)) == (1, 2, 2, 1)", "assert reverse_tuple((1.1, 2.2, 3.3)) == (3.3, 2.2, 1.1)", "assert reverse_tuple((('a', 'b'), ('c', 'd'))) == (('c', 'd'), ('a', 'b'))", "assert reverse_tuple((1, [2, 3], 4)) == (4, [2, 3], 1)", "assert reverse_tuple((1, (2, 3), 4)) == (4, (2, 3), 1)", "assert reverse_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a list.", "code": "def tuple_to_list(t: tuple) -> list:\n    return list(t)", "task_id": "156_efb63f4f-3799-41bf-8d93-23546404313a", "test_setup_code": "", "test_list": ["assert tuple_to_list((1, 2, 3)) == [1, 2, 3]", "assert tuple_to_list(('a', 'b', 'c')) == ['a', 'b', 'c']", "assert tuple_to_list((True, False, True)) == [True, False, True]", "assert tuple_to_list((1.1, 2.2, 3.3)) == [1.1, 2.2, 3.3]", "assert tuple_to_list((1, 'a', True, 2.2)) == [1, 'a', True, 2.2]", "assert tuple_to_list(()) == []", "assert tuple_to_list((None,)) == [None]", "assert tuple_to_list((1,)) == [1]", "assert tuple_to_list((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert tuple_to_list(('a',)) == ['a']", "assert tuple_to_list((0, 0, 0)) == [0, 0, 0]", "assert tuple_to_list((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]", "assert tuple_to_list((1, 'a', None, True, 3.14)) == [1, 'a', None, True, 3.14]", "assert tuple_to_list((('nested', 'tuple'),)) == [('nested', 'tuple')]", "assert tuple_to_list(((1, 2), (3, 4))) == [(1, 2), (3, 4)]"], "challenge_test_list": []}
{"text": "Write a function to concatenate two tuples.", "code": "def concatenate_tuples(t1: tuple, t2: tuple) -> tuple:\n    return t1 + t2", "task_id": "156_06e63963-1b4c-4ac5-9741-235c5624e3e9", "test_setup_code": "", "test_list": ["assert concatenate_tuples((), ()) == ()", "assert concatenate_tuples((1,), ()) == (1,)", "assert concatenate_tuples((), (2,)) == (2,)", "assert concatenate_tuples((1,), (2,)) == (1, 2)", "assert concatenate_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)", "assert concatenate_tuples((1, 'a', 3.5), (True, None, 'b')) == (1, 'a', 3.5, True, None, 'b')", "assert concatenate_tuples((1, 2), (3, 4, 5)) == (1, 2, 3, 4, 5)", "assert concatenate_tuples(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')", "assert concatenate_tuples((1, 2, 3), ()) == (1, 2, 3)", "assert concatenate_tuples((), (4, 5, 6)) == (4, 5, 6)", "assert concatenate_tuples((None,), (None,)) == (None, None)", "assert concatenate_tuples((1, 2, 3), (4,)) == (1, 2, 3, 4)", "assert concatenate_tuples((1,), (2, 3, 4)) == (1, 2, 3, 4)", "assert concatenate_tuples((True, False), (False, True)) == (True, False, False, True)", "assert concatenate_tuples((1, 2, 3), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple of key-value pairs to a dictionary.", "code": "def tuple_to_dict(t: tuple) -> dict:\n    return dict(t)", "task_id": "156_82425bee-d521-4966-ac19-9dc47dfecdde", "test_setup_code": "", "test_list": ["assert tuple_to_dict((('a', 1), ('b', 2))) == {'a': 1, 'b': 2}", "assert tuple_to_dict((('key1', 'value1'), ('key2', 'value2'))) == {'key1': 'value1', 'key2': 'value2'}", "assert tuple_to_dict((('x', 10), ('y', 20), ('z', 30))) == {'x': 10, 'y': 20, 'z': 30}", "assert tuple_to_dict((('apple', 5), ('banana', 3), ('cherry', 7))) == {'apple': 5, 'banana': 3, 'cherry': 7}", "assert tuple_to_dict(()) == {}", "assert tuple_to_dict((('a', 1),)) == {'a': 1}", "assert tuple_to_dict((('a', 1), ('a', 2))) == {'a': 2}", "assert tuple_to_dict((('a', None), ('b', None))) == {'a': None, 'b': None}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9}", "assert tuple_to_dict((('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10))) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6, 'g': 7, 'h': 8, 'i': 9, 'j': 10}"], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a tuple of integers.", "code": "def max_in_tuple(t: tuple) -> int:\n    return max(t)", "task_id": "156_4405f13b-3b76-4740-854b-60c7b7e94fc6", "test_setup_code": "", "test_list": ["assert max_in_tuple((1, 2, 3, 4, 5)) == 5", "assert max_in_tuple((5, 4, 3, 2, 1)) == 5", "assert max_in_tuple((0, -1, -2, -3, -4)) == 0", "assert max_in_tuple((-1, -2, -3, -4, -5)) == -1", "assert max_in_tuple((100, 200, 300, 400, 500)) == 500", "assert max_in_tuple((10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) == 100", "assert max_in_tuple((1, 1, 1, 1, 1)) == 1", "assert max_in_tuple((5, 5, 5, 5, 5)) == 5", "assert max_in_tuple((1, 2, 3, 2, 1)) == 3", "assert max_in_tuple((1, 2, 3, 4, 3, 2, 1)) == 4", "assert max_in_tuple((1, 2, 3, 4, 5, 4, 3, 2, 1)) == 5", "assert max_in_tuple((1, 3, 2, 5, 4)) == 5", "assert max_in_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert max_in_tuple((10, 9, 8, 7, 6, 5, 4, 3, 2, 1)) == 10", "assert max_in_tuple((0, 0, 0, 0, 0)) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of a given tuple.", "code": "def tuple_length(t: tuple) -> int:\n    return len(t)", "task_id": "156_1ce0a4bc-2016-44e8-a969-4eca2238a2e2", "test_setup_code": "", "test_list": ["assert tuple_length(()) == 0", "assert tuple_length((1,)) == 1", "assert tuple_length((1, 2, 3)) == 3", "assert tuple_length((1, 2, 3, 4, 5)) == 5", "assert tuple_length(('a', 'b', 'c')) == 3", "assert tuple_length((None,)) == 1", "assert tuple_length((1, 2, (3, 4))) == 3", "assert tuple_length(((1, 2), (3, 4), (5, 6))) == 3", "assert tuple_length((True, False, True)) == 3", "assert tuple_length((1.1, 2.2, 3.3, 4.4)) == 4", "assert tuple_length((1, 'a', None, True)) == 4", "assert tuple_length((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert tuple_length(((),)) == 1", "assert tuple_length(((1,), (2,), (3,))) == 3", "assert tuple_length((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 20"], "challenge_test_list": []}
{"text": "Write a function to check if an element exists in a tuple.", "code": "def element_in_tuple(t: tuple, element: int) -> bool:\n    return element in t", "task_id": "156_e626857b-4190-4e57-a461-07312ecfa2e0", "test_setup_code": "", "test_list": ["assert element_in_tuple((1, 2, 3, 4, 5), 3) == True", "assert element_in_tuple((1, 2, 3, 4, 5), 6) == False", "assert element_in_tuple((), 1) == False", "assert element_in_tuple((1,), 1) == True", "assert element_in_tuple((1,), 2) == False", "assert element_in_tuple((0, 0, 0, 0), 0) == True", "assert element_in_tuple((0, 0, 0, 0), 1) == False", "assert element_in_tuple((-1, -2, -3, -4), -3) == True", "assert element_in_tuple((-1, -2, -3, -4), 3) == False", "assert element_in_tuple((1, 2, 3, 4, 5), 5) == True", "assert element_in_tuple((1, 2, 3, 4, 5), 1) == True", "assert element_in_tuple((1, 2, 3, 4, 5), 0) == False", "assert element_in_tuple((1000000,), 1000000) == True", "assert element_in_tuple((1, 2, 3, 4, 5), -1) == False", "assert element_in_tuple((1.1, 2.2, 3.3), 2.2) == True"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a set.", "code": "def tuple_to_set(t: tuple) -> set:\n    return set(t)", "task_id": "156_7e52162b-11e3-4df4-905c-a27f9b7c9af1", "test_setup_code": "", "test_list": ["assert tuple_to_set((1, 2, 3)) == {1, 2, 3}", "assert tuple_to_set(('a', 'b', 'c')) == {'a', 'b', 'c'}", "assert tuple_to_set((1, 1, 2, 2, 3, 3)) == {1, 2, 3}", "assert tuple_to_set(()) == set()", "assert tuple_to_set((None,)) == {None}", "assert tuple_to_set((True, False, True)) == {True, False}", "assert tuple_to_set((1, 'a', 1.0, 'a')) == {1, 'a'}", "assert tuple_to_set((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == {1, 2, 3, 4, 5, 6, 7, 8, 9, 10}", "assert tuple_to_set((1, 2, 3, 4, 5, 5, 4, 3, 2, 1)) == {1, 2, 3, 4, 5}", "assert tuple_to_set((1, 2, 3, 'a', 'b', 'c')) == {1, 2, 3, 'a', 'b', 'c'}", "assert tuple_to_set((1, 2, 3, (4, 5))) == {1, 2, 3, (4, 5)}", "assert tuple_to_set(((1, 2), (3, 4))) == {(1, 2), (3, 4)}", "assert tuple_to_set((1, 2, 3, (1, 2))) == {1, 2, 3, (1, 2)}", "assert tuple_to_set((1, 2, 3, frozenset([4, 5]))) == {1, 2, 3, frozenset([4, 5])}", "assert tuple_to_set((1, 2, 3, (1, 2, (3, 4)))) == {1, 2, 3, (1, 2, (3, 4))}"], "challenge_test_list": []}
{"text": "Write a function to calculate the product of all elements in a tuple of integers.", "code": "def tuple_product(t: tuple) -> int:\n    product = 1\n    for x in t:\n        product *= x\n    return product", "task_id": "156_f9dc5721-6d3b-4c01-8025-a33bf0ee8b07", "test_setup_code": "", "test_list": ["assert tuple_product((1, 2, 3, 4, 5)) == 120", "assert tuple_product((2, 3, 4)) == 24", "assert tuple_product((5,)) == 5", "assert tuple_product((0, 1, 2, 3)) == 0", "assert tuple_product((-1, 2, -3, 4)) == 24", "assert tuple_product((-5, -2)) == 10", "assert tuple_product((10, 10, 10)) == 1000", "assert tuple_product((1, 1, 1, 1, 1)) == 1", "assert tuple_product((100, 0, 100)) == 0", "assert tuple_product(()) == 1", "assert tuple_product((2, 2, 2, 2, 2, 2, 2, 2, 2, 2)) == 1024", "assert tuple_product((-1, -1, -1, -1)) == 1", "assert tuple_product((-1, -1, -1)) == -1", "assert tuple_product((1, -2, 3, -4, 5, -6)) == -720", "assert tuple_product((2, 0, -5, 0)) == 0"], "challenge_test_list": []}
{"text": "Write a function to decode a run-length encoded list.", "code": "def decode_list(encoded_list):\n    return [key for count, key in encoded_list for _ in range(count)]", "task_id": "157_0fcf2ef9-565a-4ca5-94fe-51b1bfe0a3fd", "test_setup_code": "", "test_list": ["assert decode_list([[2, 1], [3, 2], [1, 3]]) == [1, 1, 2, 2, 2, 3]", "assert decode_list([[1, 1], [1, 2], [1, 3]]) == [1, 2, 3]", "assert decode_list([]) == []", "assert decode_list([[5, 'a']]) == ['a', 'a', 'a', 'a', 'a']", "assert decode_list([[3, True], [2, False]]) == [True, True, True, False, False]", "assert decode_list([[0, 1], [0, 2]]) == []", "assert decode_list([[0, 'a']]) == []", "assert decode_list([[10, 0]]) == [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert decode_list([[1, None]]) == [None]", "assert decode_list([[2, [1, 2]]]) == [[1, 2], [1, 2]]", "assert decode_list([[3, 1], [0, 2], [2, 3]]) == [1, 1, 1, 3, 3]", "assert decode_list([[1, 1], [2, 2], [3, 3], [4, 4], [5, 5]]) == [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]", "assert decode_list([[100, 'x']]) == ['x'] * 100", "assert decode_list([[2, 'a'], [2, 'b'], [2, 'c']]) == ['a', 'a', 'b', 'b', 'c', 'c']", "assert decode_list([[1, 1], [0, 2], [1, 3]]) == [1, 3]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a string.", "code": "from itertools import groupby\n\ndef encode_string(s):\n    return [[len(list(group)), key] for key, group in groupby(s)]", "task_id": "157_23ce6b20-bec9-4c73-b16c-09f985db2d48", "test_setup_code": "", "test_list": ["assert encode_string('') == []", "assert encode_string('a') == [[1, 'a']]", "assert encode_string('aa') == [[2, 'a']]", "assert encode_string('ab') == [[1, 'a'], [1, 'b']]", "assert encode_string('aabb') == [[2, 'a'], [2, 'b']]", "assert encode_string('aabbaa') == [[2, 'a'], [2, 'b'], [2, 'a']]", "assert encode_string('abc') == [[1, 'a'], [1, 'b'], [1, 'c']]", "assert encode_string('aabbcc') == [[2, 'a'], [2, 'b'], [2, 'c']]", "assert encode_string('aaa') == [[3, 'a']]", "assert encode_string('aaabbb') == [[3, 'a'], [3, 'b']]", "assert encode_string('aaabbbccc') == [[3, 'a'], [3, 'b'], [3, 'c']]", "assert encode_string('aabbaabb') == [[2, 'a'], [2, 'b'], [2, 'a'], [2, 'b']]", "assert encode_string('aabbaaabbb') == [[2, 'a'], [2, 'b'], [3, 'a'], [3, 'b']]", "assert encode_string('aabbccddeeff') == [[2, 'a'], [2, 'b'], [2, 'c'], [2, 'd'], [2, 'e'], [2, 'f']]", "assert encode_string('abcdabcd') == [[1, 'a'], [1, 'b'], [1, 'c'], [1, 'd'], [1, 'a'], [1, 'b'], [1, 'c'], [1, 'd']]"], "challenge_test_list": []}
{"text": "Write a function to decode a run-length encoded string.", "code": "def decode_string(encoded_list):\n    return ''.join([key * count for count, key in encoded_list])", "task_id": "157_5fd77f0f-2d9c-4802-8b07-eafddd82a68b", "test_setup_code": "", "test_list": ["assert decode_string([(2, 'a')]) == 'aa'", "assert decode_string([(3, 'a'), (2, 'b')]) == 'aaabb'", "assert decode_string([(1, 'a'), (1, 'b'), (1, 'c')]) == 'abc'", "assert decode_string([(5, 'x')]) == 'xxxxx'", "assert decode_string([]) == ''", "assert decode_string([(0, 'a')]) == ''", "assert decode_string([(10, 'a')]) == 'aaaaaaaaaa'", "assert decode_string([(3, 'a'), (0, 'b'), (2, 'c')]) == 'aaacc'", "assert decode_string([(2, 'a'), (2, 'b'), (2, 'c')]) == 'aabbcc'", "assert decode_string([(1, 'x'), (2, 'y'), (3, 'z')]) == 'xyyzzz'", "assert decode_string([(3, ' ')]) == '   '", "assert decode_string([(2, '\\n')]) == '\\n\\n'", "assert decode_string([(2, '!'), (1, '@'), (3, '#')]) == '!!@###'", "assert decode_string([(1, '1'), (1, '2'), (1, '3')]) == '123'", "assert decode_string([(2, 'a'), (0, 'b'), (0, 'c'), (3, 'd')]) == 'aaddd'"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a string, considering alternating case characters as different.", "code": "from itertools import groupby\n\ndef encode_alternating_case(s):\n    return [[len(list(group)), key] for key, group in groupby(s, key=lambda x: (x.lower(), x.islower()))]", "task_id": "157_64360463-6af7-4c15-a0e7-fdb9faa66c27", "test_setup_code": "", "test_list": ["assert encode_alternating_case('aA') == [[1, 'a'], [1, 'A']]", "assert encode_alternating_case('aaAA') == [[2, 'a'], [2, 'A']]", "assert encode_alternating_case('aAaA') == [[1, 'a'], [1, 'A'], [1, 'a'], [1, 'A']]", "assert encode_alternating_case('a') == [[1, 'a']]", "assert encode_alternating_case('A') == [[1, 'A']]", "assert encode_alternating_case('') == []", "assert encode_alternating_case('aaaAAA') == [[3, 'a'], [3, 'A']]", "assert encode_alternating_case('aAaAaA') == [[1, 'a'], [1, 'A'], [1, 'a'], [1, 'A'], [1, 'a'], [1, 'A']]", "assert encode_alternating_case('aAAa') == [[1, 'a'], [2, 'A'], [1, 'a']]", "assert encode_alternating_case('aaAaaA') == [[2, 'a'], [1, 'A'], [2, 'a'], [1, 'A']]", "assert encode_alternating_case('aAaAAaa') == [[1, 'a'], [1, 'A'], [1, 'a'], [2, 'A'], [2, 'a']]", "assert encode_alternating_case('AaAaAaAa') == [[1, 'A'], [1, 'a'], [1, 'A'], [1, 'a'], [1, 'A'], [1, 'a'], [1, 'A'], [1, 'a']]", "assert encode_alternating_case('aAaaAAaA') == [[1, 'a'], [1, 'A'], [2, 'a'], [2, 'A'], [1, 'a'], [1, 'A']]", "assert encode_alternating_case('aAaAaAaA') == [[1, 'a'], [1, 'A'], [1, 'a'], [1, 'A'], [1, 'a'], [1, 'A'], [1, 'a'], [1, 'A']]", "assert encode_alternating_case('AAaaAAaa') == [[2, 'A'], [2, 'a'], [2, 'A'], [2, 'a']]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the starting index of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_index(list1):\n    result = []\n    index = 0\n    for key, group in groupby(list1):\n        length = len(list(group))\n        result.append([length, key, index])\n        index += length\n    return result", "task_id": "157_c11179b8-5b6c-4097-9ba4-3b766c73cff1", "test_setup_code": "", "test_list": ["assert encode_list_with_index([1, 1, 2, 2, 2, 3]) == [[2, 1, 0], [3, 2, 2], [1, 3, 5]]", "assert encode_list_with_index([4, 4, 4, 4, 4]) == [[5, 4, 0]]", "assert encode_list_with_index([1, 2, 3, 4, 5]) == [[1, 1, 0], [1, 2, 1], [1, 3, 2], [1, 4, 3], [1, 5, 4]]", "assert encode_list_with_index([]) == []", "assert encode_list_with_index([7]) == [[1, 7, 0]]", "assert encode_list_with_index([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [[3, 1, 0], [2, 2, 3], [4, 3, 5]]", "assert encode_list_with_index([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 0], [2, 2, 1], [3, 3, 3], [4, 4, 6]]", "assert encode_list_with_index([5, 5, 5, 5, 2, 2, 1, 1, 1, 1]) == [[4, 5, 0], [2, 2, 4], [4, 1, 6]]", "assert encode_list_with_index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [[10, 1, 0]]", "assert encode_list_with_index([1, 2, 1, 2, 1, 2, 1, 2, 1, 2]) == [[1, 1, 0], [1, 2, 1], [1, 1, 2], [1, 2, 3], [1, 1, 4], [1, 2, 5], [1, 1, 6], [1, 2, 7], [1, 1, 8], [1, 2, 9]]", "assert encode_list_with_index([0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1]) == [[3, 0, 0], [3, 1, 3], [3, 0, 6], [3, 1, 9]]", "assert encode_list_with_index([1, 1, 2, 3, 3, 4, 4, 4, 5, 5]) == [[2, 1, 0], [1, 2, 2], [2, 3, 3], [3, 4, 5], [2, 5, 8]]", "assert encode_list_with_index([9, 9, 8, 8, 7, 7, 6, 6, 5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == [[2, 9, 0], [2, 8, 2], [2, 7, 4], [2, 6, 6], [2, 5, 8], [2, 4, 10], [2, 3, 12], [2, 2, 14], [2, 1, 16]]", "assert encode_list_with_index([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[3, 1, 0], [2, 2, 3], [3, 3, 5], [4, 4, 8]]", "assert encode_list_with_index([10, 10, 20, 20, 20, 30, 30, 40, 40, 40, 40]) == [[2, 10, 0], [3, 20, 2], [2, 30, 5], [4, 40, 7]]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the sum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_sum(list1):\n    return [[len(list(group)), key, sum(group)] for key, group in groupby(list1)]", "task_id": "157_25edd679-6c8c-46ec-9061-a383d8f19be0", "test_setup_code": "", "test_list": ["assert encode_list_with_run_sum([1, 1, 2, 2, 2, 3]) == [[2, 1, 2], [3, 2, 6], [1, 3, 3]]", "assert encode_list_with_run_sum([4, 4, 4, 4]) == [[4, 4, 16]]", "assert encode_list_with_run_sum([1, 2, 3, 4, 5]) == [[1, 1, 1], [1, 2, 2], [1, 3, 3], [1, 4, 4], [1, 5, 5]]", "assert encode_list_with_run_sum([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [[3, 1, 3], [2, 2, 4], [4, 3, 12]]", "assert encode_list_with_run_sum([]) == []", "assert encode_list_with_run_sum([5]) == [[1, 5, 5]]", "assert encode_list_with_run_sum([0, 0, 0, 1, 1, 2, 2, 2, 2]) == [[3, 0, 0], [2, 1, 2], [4, 2, 8]]", "assert encode_list_with_run_sum([-1, -1, -1, 0, 0, 1, 1, 1]) == [[3, -1, -3], [2, 0, 0], [3, 1, 3]]", "assert encode_list_with_run_sum([10, 10, 20, 20, 20, 30]) == [[2, 10, 20], [3, 20, 60], [1, 30, 30]]", "assert encode_list_with_run_sum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [[10, 1, 10]]", "assert encode_list_with_run_sum([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 1], [2, 2, 4], [3, 3, 9], [4, 4, 16]]", "assert encode_list_with_run_sum([7, 7, 7, 8, 8, 9]) == [[3, 7, 21], [2, 8, 16], [1, 9, 9]]", "assert encode_list_with_run_sum([1, 2, 3, 3, 2, 1]) == [[1, 1, 1], [1, 2, 2], [2, 3, 6], [1, 2, 2], [1, 1, 1]]", "assert encode_list_with_run_sum([100, 100, 100, 200, 200, 300, 300, 300]) == [[3, 100, 300], [2, 200, 400], [3, 300, 900]]", "assert encode_list_with_run_sum([1, 1, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5]) == [[2, 1, 2], [1, 2, 2], [3, 3, 9], [2, 4, 8], [4, 5, 20]]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the product of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_product(list1):\n    from functools import reduce\n    import operator\n    return [[len(list(group)), key, reduce(operator.mul, group, 1)] for key, group in groupby(list1)]", "task_id": "157_c82bc5be-2933-44ad-8efa-7cff09140646", "test_setup_code": "", "test_list": ["assert encode_list_with_run_product([1, 1, 2, 2, 2, 3]) == [[2, 1, 1], [3, 2, 8], [1, 3, 3]]", "assert encode_list_with_run_product([4, 4, 4, 4]) == [[4, 4, 256]]", "assert encode_list_with_run_product([1, 2, 3, 4, 5]) == [[1, 1, 1], [1, 2, 2], [1, 3, 3], [1, 4, 4], [1, 5, 5]]", "assert encode_list_with_run_product([5, 5, 5, 6, 6, 7]) == [[3, 5, 125], [2, 6, 36], [1, 7, 7]]", "assert encode_list_with_run_product([9]) == [[1, 9, 9]]", "assert encode_list_with_run_product([]) == []", "assert encode_list_with_run_product([0, 0, 0]) == [[3, 0, 0]]", "assert encode_list_with_run_product([1, 2, 2, 3, 3, 3]) == [[1, 1, 1], [2, 2, 4], [3, 3, 27]]", "assert encode_list_with_run_product([7, 7, 8, 8, 8, 8, 9]) == [[2, 7, 49], [4, 8, 4096], [1, 9, 9]]", "assert encode_list_with_run_product([2, 2, 2, 2, 2, 2]) == [[6, 2, 64]]", "assert encode_list_with_run_product([1, 1, 1, 2, 2, 2, 3, 3, 3, 3]) == [[3, 1, 1], [3, 2, 8], [4, 3, 81]]", "assert encode_list_with_run_product([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == [[10, 10, 10000000000]]", "assert encode_list_with_run_product([1, 3, 3, 3, 2, 2, 1]) == [[1, 1, 1], [3, 3, 27], [2, 2, 4], [1, 1, 1]]", "assert encode_list_with_run_product([1, 1, 2, 2, 1, 1, 2, 2]) == [[2, 1, 1], [2, 2, 4], [2, 1, 1], [2, 2, 4]]", "assert encode_list_with_run_product([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 1], [2, 2, 4], [3, 3, 27], [4, 4, 256]]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the average of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_average(list1):\n    return [[len(list(group)), key, sum(group) / len(group)] for key, group in groupby(list1)]", "task_id": "157_06689238-417c-4004-b56e-8f009d419d07", "test_setup_code": "", "test_list": ["assert encode_list_with_run_average([1, 1, 1, 2, 2, 3]) == [[3, 1, 1.0], [2, 2, 2.0], [1, 3, 3.0]]", "assert encode_list_with_run_average([4, 4, 4, 4, 4]) == [[5, 4, 4.0]]", "assert encode_list_with_run_average([1, 2, 3, 4, 5]) == [[1, 1, 1.0], [1, 2, 2.0], [1, 3, 3.0], [1, 4, 4.0], [1, 5, 5.0]]", "assert encode_list_with_run_average([]) == []", "assert encode_list_with_run_average([1]) == [[1, 1, 1.0]]", "assert encode_list_with_run_average([1, 1, 2, 2, 2, 3, 3, 3, 3]) == [[2, 1, 1.0], [3, 2, 2.0], [4, 3, 3.0]]", "assert encode_list_with_run_average([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 1.0], [2, 2, 2.0], [3, 3, 3.0], [4, 4, 4.0]]", "assert encode_list_with_run_average([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [[10, 1, 1.0]]", "assert encode_list_with_run_average([1, 2, 1, 2, 1, 2]) == [[1, 1, 1.0], [1, 2, 2.0], [1, 1, 1.0], [1, 2, 2.0], [1, 1, 1.0], [1, 2, 2.0]]", "assert encode_list_with_run_average([5, 5, 5, 3, 3, 1, 1, 1, 1]) == [[3, 5, 5.0], [2, 3, 3.0], [4, 1, 1.0]]", "assert encode_list_with_run_average([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [[10, 0, 0.0]]", "assert encode_list_with_run_average([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [[2, 1, 1.0], [2, 2, 2.0], [2, 3, 3.0], [2, 4, 4.0], [2, 5, 5.0]]", "assert encode_list_with_run_average([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == [[3, 1, 1.0], [4, 2, 2.0], [5, 3, 3.0]]", "assert encode_list_with_run_average([10, 10, 10, 20, 20, 30, 30, 30, 30]) == [[3, 10, 10.0], [2, 20, 20.0], [4, 30, 30.0]]", "assert encode_list_with_run_average([1, 1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[4, 1, 1.0], [2, 2, 2.0], [3, 3, 3.0], [4, 4, 4.0]]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the minimum and maximum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_min_max(list1):\n    return [[len(list(group)), key, min(group), max(group)] for key, group in groupby(list1)]", "task_id": "157_787bbe50-c380-4edd-80f5-d2bb7dedf5cf", "test_setup_code": "", "test_list": ["assert encode_list_with_run_min_max([1, 1, 2, 2, 2, 3, 3, 1, 1]) == [[2, 1, 1, 1], [3, 2, 2, 2], [2, 3, 3, 3], [2, 1, 1, 1]]", "assert encode_list_with_run_min_max([4, 4, 4, 5, 5, 6]) == [[3, 4, 4, 4], [2, 5, 5, 5], [1, 6, 6, 6]]", "assert encode_list_with_run_min_max([7, 7, 7, 7, 7]) == [[5, 7, 7, 7]]", "assert encode_list_with_run_min_max([1, 2, 3, 4, 5]) == [[1, 1, 1, 1], [1, 2, 2, 2], [1, 3, 3, 3], [1, 4, 4, 4], [1, 5, 5, 5]]", "assert encode_list_with_run_min_max([]) == []", "assert encode_list_with_run_min_max([1]) == [[1, 1, 1, 1]]", "assert encode_list_with_run_min_max([1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3]) == [[4, 1, 1, 1], [2, 2, 2, 2], [5, 3, 3, 3]]", "assert encode_list_with_run_min_max([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4]]", "assert encode_list_with_run_min_max([10, 10, 20, 20, 20, 30, 30, 40]) == [[2, 10, 10, 10], [3, 20, 20, 20], [2, 30, 30, 30], [1, 40, 40, 40]]", "assert encode_list_with_run_min_max([5, 5, 5, 6, 6, 7, 7, 7, 7, 7, 8, 8]) == [[3, 5, 5, 5], [2, 6, 6, 6], [5, 7, 7, 7], [2, 8, 8, 8]]", "assert encode_list_with_run_min_max([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5]) == [[2, 1, 1, 1], [2, 2, 2, 2], [2, 3, 3, 3], [3, 4, 4, 4], [4, 5, 5, 5]]", "assert encode_list_with_run_min_max([9, 9, 9, 8, 8, 7, 7, 7, 6, 6, 6, 6]) == [[3, 9, 9, 9], [2, 8, 8, 8], [3, 7, 7, 7], [4, 6, 6, 6]]", "assert encode_list_with_run_min_max([1, 2, 3, 4, 4, 4, 5, 6, 6, 7, 8, 8, 9]) == [[1, 1, 1, 1], [1, 2, 2, 2], [1, 3, 3, 3], [3, 4, 4, 4], [1, 5, 5, 5], [2, 6, 6, 6], [1, 7, 7, 7], [2, 8, 8, 8], [1, 9, 9, 9]]", "assert encode_list_with_run_min_max([1, 1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5]) == [[3, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3], [4, 4, 4, 4], [2, 5, 5, 5]]", "assert encode_list_with_run_min_max([100, 100, 200, 200, 200, 300, 300, 400, 400, 400, 400]) == [[2, 100, 100, 100], [3, 200, 200, 200], [2, 300, 300, 300], [4, 400, 400, 400]]"], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the length and sum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_length_and_sum(list1):\n    return [[len(list(group)), key, len(list(group)), sum(group)] for key, group in groupby(list1)]", "task_id": "157_0f8e6b20-aa76-418f-a5f7-3b17c2d28b5e", "test_setup_code": "", "test_list": ["assert encode_list_with_run_length_and_sum([1, 1, 2, 2, 2, 3]) == [[2, 1, 2, 2], [3, 2, 3, 6], [1, 3, 1, 3]]", "assert encode_list_with_run_length_and_sum([1, 1, 1, 1, 1]) == [[5, 1, 5, 5]]", "assert encode_list_with_run_length_and_sum([1, 2, 3, 4, 5]) == [[1, 1, 1, 1], [1, 2, 1, 2], [1, 3, 1, 3], [1, 4, 1, 4], [1, 5, 1, 5]]", "assert encode_list_with_run_length_and_sum([]) == []", "assert encode_list_with_run_length_and_sum([1, 1, 2, 3, 3, 3, 4, 4]) == [[2, 1, 2, 2], [1, 2, 1, 2], [3, 3, 3, 9], [2, 4, 2, 8]]", "assert encode_list_with_run_length_and_sum([5]) == [[1, 5, 1, 5]]", "assert encode_list_with_run_length_and_sum([7, 7, 7, 8, 8, 9]) == [[3, 7, 3, 21], [2, 8, 2, 16], [1, 9, 1, 9]]", "assert encode_list_with_run_length_and_sum([0, 0, 0, 0, 0]) == [[5, 0, 5, 0]]", "assert encode_list_with_run_length_and_sum([1, 2, 2, 3, 3, 3, 4]) == [[1, 1, 1, 1], [2, 2, 2, 4], [3, 3, 3, 9], [1, 4, 1, 4]]", "assert encode_list_with_run_length_and_sum([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [[3, 1, 3, 3], [2, 2, 2, 4], [4, 3, 4, 12]]", "assert encode_list_with_run_length_and_sum([4, 4, 4, 4, 4, 4, 4, 4, 4, 4]) == [[10, 4, 10, 40]]", "assert encode_list_with_run_length_and_sum([1, 2, 3, 3, 3, 2, 2, 1]) == [[1, 1, 1, 1], [1, 2, 1, 2], [3, 3, 3, 9], [2, 2, 2, 4], [1, 1, 1, 1]]", "assert encode_list_with_run_length_and_sum([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [[2, 1, 2, 2], [2, 2, 2, 4], [2, 3, 2, 6], [2, 4, 2, 8], [2, 5, 2, 10]]", "assert encode_list_with_run_length_and_sum([1, 3, 3, 3, 2, 2, 1, 1, 1, 1]) == [[1, 1, 1, 1], [3, 3, 3, 9], [2, 2, 2, 4], [4, 1, 4, 4]]", "assert encode_list_with_run_length_and_sum([2, 2, 2, 2, 3, 3, 3, 1, 1, 1, 1, 1]) == [[4, 2, 4, 8], [3, 3, 3, 9], [5, 1, 5, 5]]"], "challenge_test_list": []}
{"text": "Write a function to determine the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day: int, month: int, year: int) -> str:\n    date = datetime.date(year, month, day)\n    return date.strftime('%A')", "task_id": "159_7d67e717-5082-4d6e-ad22-688fbad8cda9", "test_setup_code": "", "test_list": ["assert day_of_week(1, 1, 2020) == 'Wednesday'", "assert day_of_week(29, 2, 2020) == 'Saturday'", "assert day_of_week(31, 12, 1999) == 'Friday'", "assert day_of_week(1, 1, 2000) == 'Saturday'", "assert day_of_week(15, 8, 1947) == 'Friday'", "assert day_of_week(4, 7, 1776) == 'Thursday'", "assert day_of_week(25, 12, 2021) == 'Saturday'", "assert day_of_week(1, 1, 1900) == 'Monday'", "assert day_of_week(29, 2, 1904) == 'Monday'", "assert day_of_week(31, 12, 9999) == 'Friday'", "assert day_of_week(1, 1, 1000) == 'Monday'", "assert day_of_week(1, 3, 2021) == 'Monday'", "assert day_of_week(31, 1, 2021) == 'Sunday'", "assert day_of_week(28, 2, 2021) == 'Sunday'", "assert day_of_week(1, 1, 1970) == 'Thursday'"], "challenge_test_list": []}
{"text": "Write a function to check if a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "159_c3289554-e3a3-4701-b943-8d8c3746fe9b", "test_setup_code": "", "test_list": ["assert is_leap_year(2000) == True", "assert is_leap_year(1900) == False", "assert is_leap_year(2004) == True", "assert is_leap_year(2001) == False", "assert is_leap_year(2100) == False", "assert is_leap_year(2400) == True", "assert is_leap_year(1996) == True", "assert is_leap_year(1999) == False", "assert is_leap_year(1600) == True", "assert is_leap_year(1700) == False", "assert is_leap_year(1800) == False", "assert is_leap_year(2020) == True", "assert is_leap_year(2021) == False", "assert is_leap_year(2024) == True", "assert is_leap_year(2023) == False"], "challenge_test_list": []}
{"text": "Write a function to return the number of days in a given month and year.", "code": "def days_in_month(month: int, year: int) -> int:\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        return 29 if is_leap_year(year) else 28\n    else:\n        return 0\n\ndef is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "159_5fb233da-73e4-493d-a2f5-b613dad75a63", "test_setup_code": "", "test_list": ["assert days_in_month(1, 2021) == 31", "assert days_in_month(2, 2020) == 29", "assert days_in_month(2, 2021) == 28", "assert days_in_month(4, 2021) == 30", "assert days_in_month(6, 2021) == 30", "assert days_in_month(9, 2021) == 30", "assert days_in_month(11, 2021) == 30", "assert days_in_month(12, 2021) == 31", "assert days_in_month(3, 2021) == 31", "assert days_in_month(5, 2021) == 31", "assert days_in_month(7, 2021) == 31", "assert days_in_month(8, 2021) == 31", "assert days_in_month(2, 1900) == 28", "assert days_in_month(2, 2000) == 29", "assert days_in_month(0, 2021) == 0", "assert days_in_month(13, 2021) == 0", "assert days_in_month(2, 2100) == 28", "assert days_in_month(2, 2400) == 29", "assert days_in_month(2, 2024) == 29", "assert days_in_month(2, 2023) == 28"], "challenge_test_list": []}
{"text": "Write a function to return the next day's date given a day, month, and year.", "code": "import datetime\n\ndef next_day(day: int, month: int, year: int) -> tuple:\n    date = datetime.date(year, month, day)\n    next_date = date + datetime.timedelta(days=1)\n    return (next_date.day, next_date.month, next_date.year)", "task_id": "159_e9f1837e-c962-4423-bbc0-f3d07f0cce52", "test_setup_code": "", "test_list": ["assert next_day(1, 1, 2020) == (2, 1, 2020)", "assert next_day(31, 1, 2020) == (1, 2, 2020)", "assert next_day(28, 2, 2020) == (29, 2, 2020)", "assert next_day(29, 2, 2020) == (1, 3, 2020)", "assert next_day(28, 2, 2019) == (1, 3, 2019)", "assert next_day(31, 12, 2020) == (1, 1, 2021)", "assert next_day(30, 4, 2020) == (1, 5, 2020)", "assert next_day(15, 6, 2020) == (16, 6, 2020)", "assert next_day(31, 7, 2020) == (1, 8, 2020)", "assert next_day(30, 9, 2020) == (1, 10, 2020)", "assert next_day(31, 10, 2020) == (1, 11, 2020)", "assert next_day(30, 11, 2020) == (1, 12, 2020)", "assert next_day(29, 2, 2000) == (1, 3, 2000)", "assert next_day(28, 2, 1900) == (1, 3, 1900)", "assert next_day(31, 12, 1999) == (1, 1, 2000)"], "challenge_test_list": []}
{"text": "Write a function to determine the time of day (morning, afternoon, evening, night) given an hour and minute.", "code": "def time_of_day(hour: int, minute: int) -> str:\n    if 5 <= hour < 12:\n        return 'morning'\n    elif 12 <= hour < 17:\n        return 'afternoon'\n    elif 17 <= hour < 21:\n        return 'evening'\n    else:\n        return 'night'", "task_id": "159_da9a5670-1edf-461a-a427-cabec78df590", "test_setup_code": "", "test_list": ["assert time_of_day(5, 0) == 'morning'", "assert time_of_day(11, 59) == 'morning'", "assert time_of_day(12, 0) == 'afternoon'", "assert time_of_day(16, 59) == 'afternoon'", "assert time_of_day(17, 0) == 'evening'", "assert time_of_day(20, 59) == 'evening'", "assert time_of_day(21, 0) == 'night'", "assert time_of_day(4, 59) == 'night'", "assert time_of_day(0, 0) == 'night'", "assert time_of_day(23, 59) == 'night'", "assert time_of_day(6, 30) == 'morning'", "assert time_of_day(13, 45) == 'afternoon'", "assert time_of_day(18, 15) == 'evening'", "assert time_of_day(22, 10) == 'night'", "assert time_of_day(12, 30) == 'afternoon'"], "challenge_test_list": []}
{"text": "Write a function to check if a given date falls on a weekend.", "code": "import datetime\n\ndef is_weekend(day: int, month: int, year: int) -> bool:\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5", "task_id": "159_81c03d8e-0f88-4135-b200-cc888e3b6a1c", "test_setup_code": "", "test_list": ["assert is_weekend(1, 1, 2022) == True", "assert is_weekend(2, 1, 2022) == False", "assert is_weekend(8, 1, 2022) == True", "assert is_weekend(9, 1, 2022) == False", "assert is_weekend(15, 1, 2022) == True", "assert is_weekend(16, 1, 2022) == False", "assert is_weekend(25, 12, 2021) == True", "assert is_weekend(31, 12, 2021) == False", "assert is_weekend(29, 2, 2020) == True", "assert is_weekend(4, 7, 2020) == True", "assert is_weekend(5, 7, 2020) == False", "assert is_weekend(30, 4, 2023) == False", "assert is_weekend(1, 5, 2023) == True", "assert is_weekend(31, 10, 2021) == False", "assert is_weekend(6, 11, 2021) == True"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days until the next occurrence of a given birthday.", "code": "import datetime\n\ndef days_until_birthday(day: int, month: int, year: int, bday_day: int, bday_month: int) -> int:\n    today = datetime.date(year, month, day)\n    birthday = datetime.date(year, bday_month, bday_day)\n    if birthday < today:\n        birthday = datetime.date(year + 1, bday_month, bday_day)\n    return (birthday - today).days", "task_id": "159_7c4d672d-610c-4c61-bf76-53cbbad42a81", "test_setup_code": "", "test_list": ["assert days_until_birthday(1, 1, 2023, 1, 1) == 0", "assert days_until_birthday(1, 1, 2023, 2, 1) == 31", "assert days_until_birthday(1, 1, 2023, 1, 2) == 1", "assert days_until_birthday(31, 12, 2023, 1, 1) == 1", "assert days_until_birthday(15, 6, 2023, 15, 6) == 0", "assert days_until_birthday(16, 6, 2023, 15, 6) == 364", "assert days_until_birthday(28, 2, 2023, 29, 2) == 366", "assert days_until_birthday(1, 3, 2024, 29, 2) == 365", "assert days_until_birthday(1, 3, 2023, 29, 2) == 365", "assert days_until_birthday(15, 7, 2023, 25, 12) == 163", "assert days_until_birthday(26, 12, 2023, 25, 12) == 364", "assert days_until_birthday(1, 1, 2023, 31, 12) == 364", "assert days_until_birthday(1, 1, 2024, 31, 12) == 365", "assert days_until_birthday(29, 2, 2024, 29, 2) == 0", "assert days_until_birthday(1, 3, 2024, 28, 2) == 364"], "challenge_test_list": []}
{"text": "Write a function to convert a time from 24-hour format to 12-hour format.", "code": "def convert_24_to_12(hour: int, minute: int) -> str:\n    period = 'AM' if hour < 12 else 'PM'\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f'{hour}:{minute:02d} {period}'", "task_id": "159_98d1fade-d5a3-4776-95b5-4a068fb2fd32", "test_setup_code": "", "test_list": ["assert convert_24_to_12(0, 0) == '12:00 AM'", "assert convert_24_to_12(1, 0) == '1:00 AM'", "assert convert_24_to_12(11, 59) == '11:59 AM'", "assert convert_24_to_12(12, 0) == '12:00 PM'", "assert convert_24_to_12(13, 0) == '1:00 PM'", "assert convert_24_to_12(23, 59) == '11:59 PM'", "assert convert_24_to_12(15, 30) == '3:30 PM'", "assert convert_24_to_12(0, 1) == '12:01 AM'", "assert convert_24_to_12(12, 1) == '12:01 PM'", "assert convert_24_to_12(6, 45) == '6:45 AM'", "assert convert_24_to_12(18, 45) == '6:45 PM'", "assert convert_24_to_12(9, 5) == '9:05 AM'", "assert convert_24_to_12(21, 5) == '9:05 PM'", "assert convert_24_to_12(23, 0) == '11:00 PM'", "assert convert_24_to_12(12, 59) == '12:59 PM'"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days between two given dates.", "code": "import datetime\n\ndef days_between_dates(day1: int, month1: int, year1: int, day2: int, month2: int, year2: int) -> int:\n    date1 = datetime.date(year1, month1, day1)\n    date2 = datetime.date(year2, month2, day2)\n    return abs((date2 - date1).days)", "task_id": "159_6d08d802-9294-4017-94ac-fb6f6a849be1", "test_setup_code": "", "test_list": ["assert days_between_dates(1, 1, 2020, 2, 1, 2020) == 1", "assert days_between_dates(1, 1, 2020, 1, 1, 2020) == 0", "assert days_between_dates(1, 1, 2020, 1, 2, 2020) == 31", "assert days_between_dates(1, 1, 2020, 1, 1, 2021) == 366", "assert days_between_dates(28, 2, 2020, 1, 3, 2020) == 2", "assert days_between_dates(31, 12, 2019, 1, 1, 2020) == 1", "assert days_between_dates(1, 1, 2020, 31, 12, 2020) == 365", "assert days_between_dates(29, 2, 2020, 1, 3, 2020) == 1", "assert days_between_dates(1, 3, 2020, 1, 3, 2021) == 365", "assert days_between_dates(1, 1, 2020, 1, 1, 2022) == 731", "assert days_between_dates(1, 1, 2020, 31, 12, 2021) == 730", "assert days_between_dates(1, 1, 2020, 1, 1, 2019) == 365", "assert days_between_dates(1, 1, 2020, 1, 1, 2023) == 1096", "assert days_between_dates(1, 1, 2020, 1, 1, 2024) == 1461", "assert days_between_dates(1, 1, 2020, 1, 2, 2020) == 31"], "challenge_test_list": []}
{"text": "Write a function to remove all even numbers from a given list.", "code": "def remove_even_numbers(lst):\n    return [x for x in lst if x % 2 != 0]", "task_id": "161_4224ab9e-51b8-45cf-b1a4-db4a126c81ef", "test_setup_code": "", "test_list": ["assert remove_even_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "assert remove_even_numbers([2, 4, 6, 8, 10]) == []", "assert remove_even_numbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert remove_even_numbers([]) == []", "assert remove_even_numbers([0, 1, 2, 3, 4, 5]) == [1, 3, 5]", "assert remove_even_numbers([11, 13, 15, 17, 19]) == [11, 13, 15, 17, 19]", "assert remove_even_numbers([10, 20, 30, 40, 50]) == []", "assert remove_even_numbers([21, 22, 23, 24, 25]) == [21, 23, 25]", "assert remove_even_numbers([100, 101, 102, 103, 104, 105]) == [101, 103, 105]", "assert remove_even_numbers([1]) == [1]", "assert remove_even_numbers([2]) == []", "assert remove_even_numbers([-1, -2, -3, -4, -5]) == [-1, -3, -5]", "assert remove_even_numbers([-10, -9, -8, -7, -6]) == [-9, -7]", "assert remove_even_numbers([0, 2, 4, 6, 8, 10]) == []", "assert remove_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "161_40a00919-9a27-4d33-8a3d-6ce94d55e351", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('aeiou') == ''", "assert remove_vowels('AEIOU') == ''", "assert remove_vowels('Python') == 'Pythn'", "assert remove_vowels('') == ''", "assert remove_vowels('bcdfghjklmnpqrstvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('aEiOu') == ''", "assert remove_vowels('ThIs Is A tEsT') == 'Ths s  tst'", "assert remove_vowels('12345') == '12345'", "assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_vowels('The quick brown fox jumps over the lazy dog') == 'Th qck brwn fx jmps vr th lzy dg'", "assert remove_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit') == 'Lrm psm dlr st mt, cnscttr dpscng lt'", "assert remove_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'"], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate elements from a given list.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for x in lst:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result", "task_id": "161_c7e567d8-ca86-44de-af3b-ee17bfbc3028", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([4, 5, 6, 4, 5, 6, 7]) == [4, 5, 6, 7]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']", "assert remove_duplicates(['x', 'y', 'z', 'x', 'y', 'z']) == ['x', 'y', 'z']", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates([True, False, True, False]) == [True, False]", "assert remove_duplicates([1.1, 2.2, 1.1, 3.3]) == [1.1, 2.2, 3.3]", "assert remove_duplicates([1, '1', 2, '2']) == [1, '1', 2, '2']", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates(['a', 'A', 'a', 'A']) == ['a', 'A']", "assert remove_duplicates([0, 0, 0, 0, 0]) == [0]"], "challenge_test_list": []}
{"text": "Write a function to remove all negative numbers from a given list.", "code": "def remove_negative_numbers(lst):\n    return [x for x in lst if x >= 0]", "task_id": "161_8ccbc0ba-93d3-4dd8-917b-8a9b2680f440", "test_setup_code": "", "test_list": ["assert remove_negative_numbers([1, -2, 3, -4, 5]) == [1, 3, 5]", "assert remove_negative_numbers([-1, -2, -3, -4, -5]) == []", "assert remove_negative_numbers([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]", "assert remove_negative_numbers([]) == []", "assert remove_negative_numbers([-1, 0, 1]) == [0, 1]", "assert remove_negative_numbers([100, -100, 200, -200]) == [100, 200]", "assert remove_negative_numbers([0]) == [0]", "assert remove_negative_numbers([-0]) == [0]", "assert remove_negative_numbers([1, -1, 1, -1, 1]) == [1, 1, 1]", "assert remove_negative_numbers([-10, -20, -30, 10, 20, 30]) == [10, 20, 30]", "assert remove_negative_numbers([0, -0, 0, -0]) == [0, 0, 0, 0]", "assert remove_negative_numbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_negative_numbers([-1, -2, -3, 3, 2, 1]) == [3, 2, 1]", "assert remove_negative_numbers([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == [1, 2, 3, 4, 5]", "assert remove_negative_numbers([-1, -2, -3, -4, -5, 0]) == [0]"], "challenge_test_list": []}
{"text": "Write a function to remove all strings shorter than a given length from a list of strings.", "code": "def remove_short_strings(lst, n):\n    return [s for s in lst if len(s) >= n]", "task_id": "161_125f406d-2ef5-47f6-be34-d4e4d1fbfaeb", "test_setup_code": "", "test_list": ["assert remove_short_strings(['apple', 'banana', 'kiwi', 'pear'], 5) == ['apple', 'banana']", "assert remove_short_strings(['a', 'ab', 'abc', 'abcd', 'abcde'], 3) == ['abc', 'abcd', 'abcde']", "assert remove_short_strings(['hello', 'world', 'hi', 'there'], 4) == ['hello', 'world', 'there']", "assert remove_short_strings([], 3) == []", "assert remove_short_strings(['short', 'tiny', 'minuscule'], 6) == ['minuscule']", "assert remove_short_strings(['one', 'two', 'three', 'four'], 4) == ['three', 'four']", "assert remove_short_strings(['a', 'b', 'c'], 2) == []", "assert remove_short_strings(['same', 'length', 'words'], 4) == ['same', 'length', 'words']", "assert remove_short_strings(['longer', 'strings', 'are', 'here'], 5) == ['longer', 'strings']", "assert remove_short_strings(['mix', 'of', 'different', 'lengths'], 7) == ['different', 'lengths']", "assert remove_short_strings(['short', 'and', 'long', 'words'], 5) == ['short', 'words']", "assert remove_short_strings(['exactly', 'five', 'chars'], 5) == ['exactly', 'chars']", "assert remove_short_strings(['a', 'list', 'with', 'varied', 'sizes'], 4) == ['list', 'with', 'varied', 'sizes']", "assert remove_short_strings(['edge', 'case', 'with', 'empty', 'strings', ''], 1) == ['edge', 'case', 'with', 'empty', 'strings']", "assert remove_short_strings(['a', 'b', 'c', 'd', 'e'], 1) == ['a', 'b', 'c', 'd', 'e']"], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alphabetic(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "161_0b9067f1-3335-4120-a4a3-c49a3b8a3510", "test_setup_code": "", "test_list": ["assert remove_non_alphabetic('abc123') == 'abc'", "assert remove_non_alphabetic('!@#abc') == 'abc'", "assert remove_non_alphabetic('a1b2c3') == 'abc'", "assert remove_non_alphabetic('abc!@#') == 'abc'", "assert remove_non_alphabetic('a!b@c#') == 'abc'", "assert remove_non_alphabetic('123456') == ''", "assert remove_non_alphabetic('') == ''", "assert remove_non_alphabetic('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "assert remove_non_alphabetic('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'", "assert remove_non_alphabetic('A1B2C3D4E5F6G7H8I9J0') == 'ABCDEFGHIJ'", "assert remove_non_alphabetic('a!b@c#d$e%f^g&h*i(j)k_l+m=n') == 'abcdefghijklmno'", "assert remove_non_alphabetic('123abc456def789ghi') == 'abcdefghi'", "assert remove_non_alphabetic('a b c') == 'abc'", "assert remove_non_alphabetic('a1!b2@c3#d4$e5%f6^g7&h8*i9(j0)') == 'abcdefghij'", "assert remove_non_alphabetic('The quick brown fox jumps over the lazy dog!') == 'Thequickbrownfoxjumpsoverthelazydog'"], "challenge_test_list": []}
{"text": "Write a function to remove all elements greater than a given number from a list.", "code": "def remove_elements_greater_than(lst, n):\n    return [x for x in lst if x <= n]", "task_id": "161_f51613aa-6743-4ad9-b255-3f129096f0ad", "test_setup_code": "", "test_list": ["assert remove_elements_greater_than([1, 2, 3, 4, 5], 3) == [1, 2, 3]", "assert remove_elements_greater_than([10, 20, 30, 40, 50], 25) == [10, 20]", "assert remove_elements_greater_than([5, 4, 3, 2, 1], 3) == [3, 2, 1]", "assert remove_elements_greater_than([1, 1, 1, 1, 1], 1) == [1, 1, 1, 1, 1]", "assert remove_elements_greater_than([100, 200, 300], 150) == [100]", "assert remove_elements_greater_than([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert remove_elements_greater_than([1, 2, 3, 4, 5], 0) == []", "assert remove_elements_greater_than([], 10) == []", "assert remove_elements_greater_than([1, 2, 3, 4, 5], -1) == []", "assert remove_elements_greater_than([1, 2, 3, 4, 5], 1) == [1]", "assert remove_elements_greater_than([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]", "assert remove_elements_greater_than([10, 9, 8, 7, 6], 7) == [7, 6]", "assert remove_elements_greater_than([1, 3, 5, 7, 9], 4) == [1, 3]", "assert remove_elements_greater_than([2, 4, 6, 8, 10], 6) == [2, 4, 6]", "assert remove_elements_greater_than([1, 2, 3, 4, 5], 2) == [1, 2]"], "challenge_test_list": []}
{"text": "Write a function to remove all strings starting with a given character from a list of strings.", "code": "def remove_elements_starting_with(lst, char):\n    return [s for s in lst if not s.startswith(char)]", "task_id": "161_d42ad38f-bb21-4b68-b507-f84e1104564f", "test_setup_code": "", "test_list": ["assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'a') == ['banana', 'cherry', 'date']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'b') == ['apple', 'cherry', 'date']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'c') == ['apple', 'banana', 'date']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'd') == ['apple', 'banana', 'cherry']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'e') == ['apple', 'banana', 'cherry', 'date']", "assert remove_elements_starting_with(['apple', 'apple', 'banana', 'banana'], 'a') == ['banana', 'banana']", "assert remove_elements_starting_with(['apple', 'apple', 'banana', 'banana'], 'b') == ['apple', 'apple']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'z') == ['apple', 'banana', 'cherry', 'date']", "assert remove_elements_starting_with([], 'a') == []", "assert remove_elements_starting_with(['apple'], 'a') == []", "assert remove_elements_starting_with(['apple'], 'b') == ['apple']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], '') == ['apple', 'banana', 'cherry', 'date']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'A') == ['apple', 'banana', 'cherry', 'date']", "assert remove_elements_starting_with(['Apple', 'Banana', 'Cherry', 'Date'], 'A') == ['Banana', 'Cherry', 'Date']", "assert remove_elements_starting_with(['apple', 'banana', 'cherry', 'date'], 'a') == ['banana', 'cherry', 'date']"], "challenge_test_list": []}
{"text": "Write a function to remove all strings containing a given substring from a list of strings.", "code": "def remove_elements_with_substring(lst, substring):\n    return [s for s in lst if substring not in s]", "task_id": "161_35275082-d9e7-4342-ba07-dc29334e3b5d", "test_setup_code": "", "test_list": ["assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'a') == ['cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'z') == ['apple', 'banana', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'apple') == ['banana', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], '') == []", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'ch') == ['apple', 'banana']", "assert remove_elements_with_substring([], 'a') == []", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'e') == ['banana']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'na') == ['apple', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'rry') == ['apple', 'banana']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'pp') == ['banana', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'b') == ['apple', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'an') == ['apple', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'erry') == ['apple', 'banana']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'le') == ['banana', 'cherry']", "assert remove_elements_with_substring(['apple', 'banana', 'cherry'], 'a') == ['cherry']"], "challenge_test_list": []}
{"text": "Write a function to remove all elements at odd indices from a given list.", "code": "def remove_elements_at_odd_indices(lst):\n    return [x for i, x in enumerate(lst) if i % 2 == 0]", "task_id": "161_9e39f26a-5639-44e6-bfef-bf95f2d6c5ae", "test_setup_code": "", "test_list": ["assert remove_elements_at_odd_indices([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "assert remove_elements_at_odd_indices([]) == []", "assert remove_elements_at_odd_indices([1]) == [1]", "assert remove_elements_at_odd_indices([1, 2]) == [1]", "assert remove_elements_at_odd_indices([1, 2, 3]) == [1, 3]", "assert remove_elements_at_odd_indices(['a', 'b', 'c', 'd', 'e']) == ['a', 'c', 'e']", "assert remove_elements_at_odd_indices([True, False, True, False]) == [True, True]", "assert remove_elements_at_odd_indices([None, 'a', None, 'b']) == [None, None]", "assert remove_elements_at_odd_indices([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 30, 50, 70, 90]", "assert remove_elements_at_odd_indices([-1, -2, -3, -4]) == [-1, -3]", "assert remove_elements_at_odd_indices([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 2], [5, 6]]", "assert remove_elements_at_odd_indices([0, 0, 0, 0, 0]) == [0, 0, 0]", "assert remove_elements_at_odd_indices(['hello', 'world']) == ['hello']", "assert remove_elements_at_odd_indices([1.1, 2.2, 3.3, 4.4]) == [1.1, 3.3]", "assert remove_elements_at_odd_indices(['a']) == ['a']"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array equal by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_equal(arr: list[int], k: int) -> int:\n    max1 = max(arr)\n    res = 0\n    for i in range(len(arr)):\n        if abs(max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(max1 - arr[i]) // k\n    return res", "task_id": "158_ced17e28-3c26-4336-964b-b1c65617560b", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_equal([1, 2, 3], 1) == 2", "assert min_ops_to_make_all_elements_equal([1, 2, 3], 2) == -1", "assert min_ops_to_make_all_elements_equal([4, 4, 4], 3) == 0", "assert min_ops_to_make_all_elements_equal([10, 20, 30], 10) == 3", "assert min_ops_to_make_all_elements_equal([1, 5, 9], 2) == -1", "assert min_ops_to_make_all_elements_equal([1, 3, 5], 2) == 2", "assert min_ops_to_make_all_elements_equal([2, 4, 6, 8], 2) == 6", "assert min_ops_to_make_all_elements_equal([1, 1, 1, 1], 1) == 0", "assert min_ops_to_make_all_elements_equal([5, 10, 15], 5) == 3", "assert min_ops_to_make_all_elements_equal([1, 2, 3, 4], 1) == 3", "assert min_ops_to_make_all_elements_equal([100, 200, 300], 100) == 3", "assert min_ops_to_make_all_elements_equal([2, 4, 6, 8, 10], 2) == 10", "assert min_ops_to_make_all_elements_equal([2, 4, 6, 8, 10], 3) == -1", "assert min_ops_to_make_all_elements_equal([1, 1, 1, 1, 1], 2) == 0", "assert min_ops_to_make_all_elements_equal([1, 3, 5, 7], 2) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array zero by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_zero(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if abs(arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(arr[i]) // k\n    return res", "task_id": "158_3e7ecb4f-5e86-47a9-8425-3ad1627b151a", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_zero([0, 0, 0], 5) == 0", "assert min_ops_to_make_all_elements_zero([5, 10, 15], 5) == 6", "assert min_ops_to_make_all_elements_zero([3, 6, 9], 3) == 6", "assert min_ops_to_make_all_elements_zero([2, 4, 6], 2) == 6", "assert min_ops_to_make_all_elements_zero([7], 7) == 1", "assert min_ops_to_make_all_elements_zero([14], 7) == 2", "assert min_ops_to_make_all_elements_zero([3], 2) == -1", "assert min_ops_to_make_all_elements_zero([5, 7], 3) == -1", "assert min_ops_to_make_all_elements_zero([-5, 10, -15], 5) == 6", "assert min_ops_to_make_all_elements_zero([-10, -20, -30], 10) == 6", "assert min_ops_to_make_all_elements_zero([25, -25], 5) == 10", "assert min_ops_to_make_all_elements_zero([], 5) == 0", "assert min_ops_to_make_all_elements_zero([100], 1) == 100", "assert min_ops_to_make_all_elements_zero([1, 2, 3], 1) == 6", "assert min_ops_to_make_all_elements_zero([4, 8, 12, 16], 4) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array equal to m by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_m(arr: list[int], m: int, k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if abs(m - arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(m - arr[i]) // k\n    return res", "task_id": "158_506d9a7d-e06b-43d6-b9df-175ace542f5a", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_m([1, 2, 3], 3, 1) == 3", "assert min_ops_to_make_all_elements_m([1, 2, 3], 3, 2) == -1", "assert min_ops_to_make_all_elements_m([1, 2, 3], 2, 1) == 2", "assert min_ops_to_make_all_elements_m([1, 2, 3], 1, 1) == 2", "assert min_ops_to_make_all_elements_m([1, 2, 3, 4], 3, 1) == 4", "assert min_ops_to_make_all_elements_m([1, 2, 3, 4], 4, 1) == 6", "assert min_ops_to_make_all_elements_m([1, 2, 3, 4], 5, 1) == 10", "assert min_ops_to_make_all_elements_m([1, 2, 3, 4], 5, 2) == -1", "assert min_ops_to_make_all_elements_m([1, 2, 3, 4], 4, 2) == 3", "assert min_ops_to_make_all_elements_m([1, 1, 1, 1], 1, 1) == 0", "assert min_ops_to_make_all_elements_m([1, 1, 1, 1], 2, 1) == 4", "assert min_ops_to_make_all_elements_m([1, 1, 1, 1], 3, 2) == -1", "assert min_ops_to_make_all_elements_m([1, 3, 5, 7], 5, 2) == 4", "assert min_ops_to_make_all_elements_m([1, 3, 5, 7], 6, 2) == 5", "assert min_ops_to_make_all_elements_m([1, 3, 5, 7], 8, 2) == 7"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array even by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_even(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            if k % 2 == 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_8bb5355f-1657-4be9-a7e5-3cf936fa2677", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_even([1, 3, 5], 2) == -1", "assert min_ops_to_make_all_elements_even([1, 3, 5], 1) == 3", "assert min_ops_to_make_all_elements_even([2, 4, 6], 1) == 0", "assert min_ops_to_make_all_elements_even([2, 4, 6], 2) == 0", "assert min_ops_to_make_all_elements_even([1, 2, 3, 4, 5], 1) == 3", "assert min_ops_to_make_all_elements_even([1, 2, 3, 4, 5], 2) == -1", "assert min_ops_to_make_all_elements_even([1], 1) == 1", "assert min_ops_to_make_all_elements_even([1], 2) == -1", "assert min_ops_to_make_all_elements_even([2], 1) == 0", "assert min_ops_to_make_all_elements_even([2], 2) == 0", "assert min_ops_to_make_all_elements_even([1, 3, 5, 7, 9], 1) == 5", "assert min_ops_to_make_all_elements_even([1, 3, 5, 7, 9], 3) == 5", "assert min_ops_to_make_all_elements_even([1, 3, 5, 7, 9], 2) == -1", "assert min_ops_to_make_all_elements_even([1000001, 1000003, 1000005], 1) == 3", "assert min_ops_to_make_all_elements_even([1000002, 1000004, 1000006], 2) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array odd by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_odd(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if k % 2 == 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_2b5182ec-0d58-4380-8ff7-c06757ab1445", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_odd([2, 4, 6], 1) == 3", "assert min_ops_to_make_all_elements_odd([1, 3, 5], 1) == 0", "assert min_ops_to_make_all_elements_odd([2, 4, 6], 2) == -1", "assert min_ops_to_make_all_elements_odd([1, 2, 3, 4, 5], 1) == 2", "assert min_ops_to_make_all_elements_odd([1, 2, 3, 4, 5], 2) == -1", "assert min_ops_to_make_all_elements_odd([0], 1) == 1", "assert min_ops_to_make_all_elements_odd([0], 2) == -1", "assert min_ops_to_make_all_elements_odd([2, 4, 6, 8], 3) == 4", "assert min_ops_to_make_all_elements_odd([2, 4, 6, 8], 5) == 4", "assert min_ops_to_make_all_elements_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == 5", "assert min_ops_to_make_all_elements_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == -1", "assert min_ops_to_make_all_elements_odd([1], 1) == 0", "assert min_ops_to_make_all_elements_odd([2], 1) == 1", "assert min_ops_to_make_all_elements_odd([2], 2) == -1", "assert min_ops_to_make_all_elements_odd([1, 3, 5, 7, 9], 1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array prime by either adding or subtracting k.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef min_ops_to_make_all_elements_prime(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if not is_prime(arr[i]):\n            return -1\n    return res", "task_id": "158_e6a0b9e4-f104-4910-9744-f22608060fb4", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(25) == False", "assert is_prime(29) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array a multiple of y by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_multiple_of_y(arr: list[int], y: int, k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % y != 0:\n            if k % y != 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_ab8c00ec-002d-4175-882c-f360235087ac", "test_setup_code": "", "test_list": ["assert min_ops_to_make_all_elements_multiple_of_y([1, 2, 3], 2, 1) == 2", "assert min_ops_to_make_all_elements_multiple_of_y([4, 6, 8], 2, 1) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([5, 10, 15], 5, 2) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([7, 14, 21], 7, 3) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([1, 3, 5], 2, 1) == 3", "assert min_ops_to_make_all_elements_multiple_of_y([2, 4, 6], 3, 1) == -1", "assert min_ops_to_make_all_elements_multiple_of_y([1, 2, 3], 3, 3) == 2", "assert min_ops_to_make_all_elements_multiple_of_y([7, 11, 13], 5, 5) == 3", "assert min_ops_to_make_all_elements_multiple_of_y([1, 2, 3, 4, 5], 5, 5) == 4", "assert min_ops_to_make_all_elements_multiple_of_y([10, 20, 30], 10, 3) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([11, 22, 33], 11, 4) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([1, 3, 5, 7, 9], 2, 3) == -1", "assert min_ops_to_make_all_elements_multiple_of_y([], 5, 2) == 0", "assert min_ops_to_make_all_elements_multiple_of_y([17], 5, 2) == -1", "assert min_ops_to_make_all_elements_multiple_of_y([17], 5, 5) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array a Fibonacci number by either adding or subtracting k.", "code": "def is_fibonacci(n):\n    x1 = 5 * n * n + 4\n    x2 = 5 * n * n - 4\n    return int(x1**0.5)**2 == x1 or int(x2**0.5)**2 == x2\n\ndef min_ops_to_make_all_elements_fibonacci(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if not is_fibonacci(arr[i]):\n            return -1\n    return res", "task_id": "158_fac663eb-2265-438e-b452-d4e25f1fba0f", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == True", "assert is_fibonacci(1) == True", "assert is_fibonacci(2) == True", "assert is_fibonacci(3) == True", "assert is_fibonacci(4) == False", "assert is_fibonacci(5) == True", "assert is_fibonacci(8) == True", "assert is_fibonacci(13) == True", "assert is_fibonacci(21) == True", "assert is_fibonacci(22) == False", "assert is_fibonacci(34) == True", "assert is_fibonacci(55) == True", "assert is_fibonacci(89) == True", "assert is_fibonacci(144) == True", "assert is_fibonacci(233) == True"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax - by = n.", "code": "def find_xy(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (i, int((n - (i * a)) / b))\n        i += 1\n    return ('No solution',)", "task_id": "160_ca1d21ab-10bb-4de0-9066-08d0b7e2fdfe", "test_setup_code": "", "test_list": ["assert find_xy(2, 3, 1) == (1, 1)", "assert find_xy(4, 6, 2) == (1, 0)", "assert find_xy(5, 7, 3) == ('No solution',)", "assert find_xy(1, 1, 0) == (0, 0)", "assert find_xy(2, 4, 8) == (0, 2)", "assert find_xy(6, 9, 18) == (0, 2)", "assert find_xy(3, 5, 7) == (2, 1)", "assert find_xy(10, 15, 5) == (1, 0)", "assert find_xy(7, 11, 13) == (2, -1)", "assert find_xy(8, 12, 20) == (0, 5)", "assert find_xy(3, 6, 9) == (3, 0)", "assert find_xy(4, 5, 9) == (1, 1)", "assert find_xy(2, 3, 5) == (2, 1)", "assert find_xy(9, 12, 21) == (1, 1)", "assert find_xy(1, 2, 3) == (3, 0)"], "challenge_test_list": []}
{"text": "Write a function to find non-negative x and y that satisfies ax + by = n.", "code": "def find_xy_non_negative(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return ('No solution',)", "task_id": "160_0db0c912-3148-42a2-8403-2e997f03ca56", "test_setup_code": "", "test_list": ["assert find_xy_non_negative(2, 3, 7) == (1, 1)", "assert find_xy_non_negative(2, 3, 8) == (4, 0)", "assert find_xy_non_negative(5, 3, 1) == ('No solution',)", "assert find_xy_non_negative(4, 6, 24) == (0, 4)", "assert find_xy_non_negative(4, 6, 25) == ('No solution',)", "assert find_xy_non_negative(1, 1, 0) == (0, 0)", "assert find_xy_non_negative(1, 2, 3) == (1, 1)", "assert find_xy_non_negative(7, 5, 35) == (5, 0)", "assert find_xy_non_negative(7, 5, 36) == ('No solution',)", "assert find_xy_non_negative(10, 15, 5) == ('No solution',)", "assert find_xy_non_negative(10, 15, 30) == (0, 2)", "assert find_xy_non_negative(1, 1, 100) == (100, 0)", "assert find_xy_non_negative(3, 4, 11) == (1, 2)", "assert find_xy_non_negative(3, 4, 12) == (0, 3)", "assert find_xy_non_negative(2, 5, 9) == (2, 1)"], "challenge_test_list": []}
{"text": "Write a function to find positive x and y that satisfies ax + by = n.", "code": "def find_xy_positive(a, b, n):\n    for x in range(1, n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y > 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_d75e3b44-e6a0-4dfc-9c53-deabff9e4b7f", "test_setup_code": "", "test_list": ["assert find_xy_positive(1, 1, 2) == (1, 1)", "assert find_xy_positive(2, 3, 7) == (2, 1)", "assert find_xy_positive(3, 5, 8) == ('No solution',)", "assert find_xy_positive(4, 6, 10) == ('No solution',)", "assert find_xy_positive(2, 5, 11) == (3, 1)", "assert find_xy_positive(1, 2, 3) == (1, 1)", "assert find_xy_positive(5, 7, 35) == (1, 4)", "assert find_xy_positive(3, 4, 25) == (5, 2)", "assert find_xy_positive(6, 9, 27) == (1, 3)", "assert find_xy_positive(2, 3, 1) == ('No solution',)", "assert find_xy_positive(10, 15, 100) == (1, 6)", "assert find_xy_positive(7, 11, 50) == (3, 1)", "assert find_xy_positive(4, 9, 40) == (1, 4)", "assert find_xy_positive(8, 12, 100) == (5, 2)", "assert find_xy_positive(1, 1, 1) == (1, 0)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, with the constraint that x and y must be less than or equal to a given limit.", "code": "def find_xy_within_limits(a, b, n, limit):\n    for x in range(limit + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y <= limit:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_83aa9819-1422-4991-ad22-42b0b69bc8c9", "test_setup_code": "", "test_list": ["assert find_xy_within_limits(2, 3, 7, 10) == (1, 1)", "assert find_xy_within_limits(1, 1, 5, 5) == (0, 5)", "assert find_xy_within_limits(1, 1, 10, 3) == ('No solution',)", "assert find_xy_within_limits(4, 6, 24, 5) == (0, 4)", "assert find_xy_within_limits(5, 7, 35, 5) == (0, 5)", "assert find_xy_within_limits(3, 5, 14, 3) == (2, 1)", "assert find_xy_within_limits(2, 2, 8, 2) == (2, 2)", "assert find_xy_within_limits(2, 3, 1, 10) == ('No solution',)", "assert find_xy_within_limits(1, 2, 10, 4) == (2, 4)", "assert find_xy_within_limits(1, 3, 10, 3) == (1, 3)", "assert find_xy_within_limits(3, 4, 25, 6) == (5, 2)", "assert find_xy_within_limits(2, 5, 17, 4) == (1, 3)", "assert find_xy_within_limits(3, 6, 18, 3) == (0, 3)", "assert find_xy_within_limits(2, 7, 20, 3) == (1, 2)", "assert find_xy_within_limits(5, 5, 25, 4) == (1, 4)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is minimized.", "code": "def find_xy_with_min_sum(a, b, n):\n    min_sum = float('inf')\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x + y < min_sum:\n                min_sum = x + y\n                result = (x, y)\n    return result", "task_id": "160_f8a49dbb-c37a-48bc-826c-3dab3c2a92b2", "test_setup_code": "", "test_list": ["assert find_xy_with_min_sum(2, 3, 7) == (1, 1)", "assert find_xy_with_min_sum(1, 1, 5) == (0, 5)", "assert find_xy_with_min_sum(5, 3, 11) == (2, 1)", "assert find_xy_with_min_sum(4, 6, 24) == (0, 4)", "assert find_xy_with_min_sum(7, 5, 1) == ('No solution',)", "assert find_xy_with_min_sum(10, 15, 100) == (0, 6)", "assert find_xy_with_min_sum(3, 7, 20) == (2, 2)", "assert find_xy_with_min_sum(9, 4, 35) == (1, 6)", "assert find_xy_with_min_sum(8, 12, 48) == (0, 4)", "assert find_xy_with_min_sum(2, 5, 14) == (2, 2)", "assert find_xy_with_min_sum(6, 9, 18) == (0, 2)", "assert find_xy_with_min_sum(1, 2, 3) == (1, 1)", "assert find_xy_with_min_sum(5, 7, 29) == (2, 3)", "assert find_xy_with_min_sum(3, 11, 33) == (0, 3)", "assert find_xy_with_min_sum(4, 9, 37) == (1, 3)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is maximized.", "code": "def find_xy_with_max_sum(a, b, n):\n    max_sum = -1\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x + y > max_sum:\n                max_sum = x + y\n                result = (x, y)\n    return result", "task_id": "160_d19c4982-c330-42d6-b47e-a3ed0beaaebd", "test_setup_code": "", "test_list": ["assert find_xy_with_max_sum(1, 1, 10) == (10, 0)", "assert find_xy_with_max_sum(2, 3, 7) == (1, 1)", "assert find_xy_with_max_sum(5, 7, 1) == ('No solution',)", "assert find_xy_with_max_sum(4, 6, 24) == (0, 4)", "assert find_xy_with_max_sum(3, 5, 15) == (0, 3)", "assert find_xy_with_max_sum(2, 4, 8) == (0, 2)", "assert find_xy_with_max_sum(1, 2, 5) == (5, 0)", "assert find_xy_with_max_sum(7, 11, 77) == (0, 7)", "assert find_xy_with_max_sum(6, 9, 54) == (0, 6)", "assert find_xy_with_max_sum(3, 7, 21) == (0, 3)", "assert find_xy_with_max_sum(2, 5, 14) == (2, 2)", "assert find_xy_with_max_sum(3, 4, 17) == (1, 3)", "assert find_xy_with_max_sum(10, 15, 100) == (0, 6)", "assert find_xy_with_max_sum(1, 3, 8) == (8, 0)", "assert find_xy_with_max_sum(5, 10, 50) == (0, 5)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the product x * y is minimized.", "code": "def find_xy_with_min_product(a, b, n):\n    min_product = float('inf')\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x * y < min_product:\n                min_product = x * y\n                result = (x, y)\n    return result", "task_id": "160_d84a0b12-13f9-4a69-b633-5886d54bb7fd", "test_setup_code": "", "test_list": ["assert find_xy_with_min_product(1, 1, 10) == (0, 10)", "assert find_xy_with_min_product(2, 3, 7) == (1, 1)", "assert find_xy_with_min_product(2, 5, 11) == (3, 1)", "assert find_xy_with_min_product(3, 5, 8) == (1, 1)", "assert find_xy_with_min_product(4, 6, 24) == (0, 4)", "assert find_xy_with_min_product(5, 7, 35) == (0, 5)", "assert find_xy_with_min_product(6, 9, 54) == (0, 6)", "assert find_xy_with_min_product(7, 11, 77) == (0, 7)", "assert find_xy_with_min_product(8, 12, 96) == (0, 8)", "assert find_xy_with_min_product(9, 13, 117) == (0, 9)", "assert find_xy_with_min_product(10, 15, 150) == (0, 10)", "assert find_xy_with_min_product(2, 4, 1) == ('No solution',)", "assert find_xy_with_min_product(3, 6, 5) == ('No solution',)", "assert find_xy_with_min_product(5, 10, 3) == ('No solution',)", "assert find_xy_with_min_product(7, 14, 6) == ('No solution',)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the product x * y is maximized.", "code": "def find_xy_with_max_product(a, b, n):\n    max_product = -1\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x * y > max_product:\n                max_product = x * y\n                result = (x, y)\n    return result", "task_id": "160_a5b4ed01-8b59-4059-84e8-396ae2a1b9d4", "test_setup_code": "", "test_list": ["assert find_xy_with_max_product(1, 1, 10) == (5, 5)", "assert find_xy_with_max_product(2, 3, 7) == (1, 1)", "assert find_xy_with_max_product(3, 5, 15) == (0, 3)", "assert find_xy_with_max_product(4, 6, 24) == (0, 4)", "assert find_xy_with_max_product(5, 7, 35) == (0, 5)", "assert find_xy_with_max_product(1, 2, 8) == (4, 2)", "assert find_xy_with_max_product(2, 4, 16) == (0, 4)", "assert find_xy_with_max_product(3, 6, 18) == (0, 3)", "assert find_xy_with_max_product(1, 3, 9) == (3, 2)", "assert find_xy_with_max_product(2, 5, 20) == (0, 4)", "assert find_xy_with_max_product(1, 5, 15) == (0, 3)", "assert find_xy_with_max_product(3, 7, 21) == (0, 3)", "assert find_xy_with_max_product(2, 8, 16) == (0, 2)", "assert find_xy_with_max_product(1, 4, 12) == (0, 3)", "assert find_xy_with_max_product(2, 1, 5) == (2, 1)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is even.", "code": "def find_xy_with_even_sum(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if (x + y) % 2 == 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_4818c16e-736a-4afd-8a45-050b1d4f2498", "test_setup_code": "", "test_list": ["assert find_xy_with_even_sum(1, 1, 4) == (2, 2)", "assert find_xy_with_even_sum(2, 3, 10) == (2, 2)", "assert find_xy_with_even_sum(3, 5, 15) == (0, 3)", "assert find_xy_with_even_sum(1, 2, 5) == ('No solution',)", "assert find_xy_with_even_sum(1, 1, 1) == ('No solution',)", "assert find_xy_with_even_sum(2, 4, 8) == (0, 2)", "assert find_xy_with_even_sum(5, 7, 35) == (0, 5)", "assert find_xy_with_even_sum(2, 3, 7) == ('No solution',)", "assert find_xy_with_even_sum(10, 15, 100) == (0, 6)", "assert find_xy_with_even_sum(6, 9, 54) == (0, 6)", "assert find_xy_with_even_sum(1, 3, 8) == (2, 2)", "assert find_xy_with_even_sum(4, 6, 24) == (0, 4)", "assert find_xy_with_even_sum(2, 5, 14) == (2, 2)", "assert find_xy_with_even_sum(3, 7, 21) == (0, 3)", "assert find_xy_with_even_sum(2, 2, 8) == (0, 4)"], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is odd.", "code": "def find_xy_with_odd_sum(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if (x + y) % 2 != 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_a033b5e7-9fd4-4480-88d8-c4caf45c7dc1", "test_setup_code": "", "test_list": ["assert find_xy_with_odd_sum(1, 1, 3) == (1, 2)", "assert find_xy_with_odd_sum(2, 3, 7) == (1, 1)", "assert find_xy_with_odd_sum(2, 4, 8) == ('No solution',)", "assert find_xy_with_odd_sum(3, 5, 11) == (0, 2)", "assert find_xy_with_odd_sum(1, 2, 5) == (1, 2)", "assert find_xy_with_odd_sum(5, 7, 12) == (0, 1)", "assert find_xy_with_odd_sum(6, 9, 15) == (0, 1)", "assert find_xy_with_odd_sum(2, 2, 4) == ('No solution',)", "assert find_xy_with_odd_sum(4, 6, 10) == ('No solution',)", "assert find_xy_with_odd_sum(7, 11, 18) == (0, 1)", "assert find_xy_with_odd_sum(1, 3, 7) == (1, 2)", "assert find_xy_with_odd_sum(2, 5, 9) == (2, 1)", "assert find_xy_with_odd_sum(3, 4, 10) == (1, 1)", "assert find_xy_with_odd_sum(8, 13, 21) == (0, 1)", "assert find_xy_with_odd_sum(1, 1, 2) == ('No solution',)"], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  return 0.5 * base * height", "task_id": "163_c6eb6f08-f2c4-414c-af38-2a5ef0a62b2a", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 5) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(0, 0) == 0.0", "assert area_triangle(3, 4) == 6.0", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(7, 2) == 7.0", "assert area_triangle(5.5, 3.2) == 8.8", "assert area_triangle(100, 50) == 2500.0", "assert area_triangle(0.1, 0.2) == 0.01", "assert area_triangle(12345, 6789) == 41991802.5", "assert area_triangle(1e-10, 1e-10) == 5e-21", "assert area_triangle(1e10, 1e10) == 5e19", "assert area_triangle(2.5, 4.5) == 5.625", "assert area_triangle(7, 3.5) == 12.25"], "challenge_test_list": []}
{"text": "Write a function to calculate the circumference of a circle given its radius.", "code": "from math import pi\n\ndef circumference_circle(radius):\n  return 2 * pi * radius", "task_id": "163_61bc7661-31fd-4784-8c22-21f3337094e9", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 2 * pi", "assert circumference_circle(0) == 0", "assert circumference_circle(5) == 10 * pi", "assert circumference_circle(10) == 20 * pi", "assert circumference_circle(3.5) == 7 * pi", "assert circumference_circle(0.5) == pi", "assert circumference_circle(100) == 200 * pi", "assert circumference_circle(0.1) == 0.2 * pi", "assert circumference_circle(2.5) == 5 * pi", "assert abs(circumference_circle(7) - 43.982297150257104) < 1e-10", "assert abs(circumference_circle(1.23) - 7.7300432778265) < 1e-10", "assert circumference_circle(1/3) == 2 * pi / 3", "assert circumference_circle(2/3) == 4 * pi / 3", "assert abs(circumference_circle(1.5) - 9.42477796076938) < 1e-10", "assert abs(circumference_circle(4.2) - 26.389378290154264) < 1e-10"], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a rectangle given its length and width.", "code": "def area_rectangle(length, width):\n  return length * width", "task_id": "163_6bf59ea8-1482-49d5-b468-bf5977401960", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(10, 0) == 0", "assert area_rectangle(1, 1) == 1", "assert area_rectangle(100, 200) == 20000", "assert area_rectangle(3, 7) == 21", "assert area_rectangle(7, 3) == 21", "assert area_rectangle(50, 50) == 2500", "assert area_rectangle(123, 456) == 56088", "assert area_rectangle(2.5, 4) == 10.0", "assert area_rectangle(4, 2.5) == 10.0", "assert area_rectangle(0.1, 0.2) == 0.02", "assert area_rectangle(1000, 0.001) == 1.0", "assert area_rectangle(0.0001, 10000) == 1.0", "assert area_rectangle(999, 999) == 998001"], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cube given the length of one side.", "code": "def volume_cube(side):\n  return side ** 3", "task_id": "163_ba8af888-a734-4883-8e33-fb287fdd0df8", "test_setup_code": "", "test_list": ["assert volume_cube(1) == 1", "assert volume_cube(0) == 0", "assert volume_cube(2) == 8", "assert volume_cube(-2) == -8", "assert volume_cube(3) == 27", "assert volume_cube(10) == 1000", "assert volume_cube(0.5) == 0.125", "assert volume_cube(1.5) == 3.375", "assert volume_cube(100) == 1000000", "assert volume_cube(-0.5) == -0.125", "assert volume_cube(2.5) == 15.625", "assert volume_cube(0.1) == 0.001", "assert volume_cube(-1) == -1", "assert volume_cube(99) == 970299", "assert volume_cube(0.01) == 0.000001"], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle given its radius.", "code": "from math import pi\n\ndef area_circle(radius):\n  return pi * (radius ** 2)", "task_id": "163_fa7a0171-5b83-41a7-ad9d-24db06935008", "test_setup_code": "", "test_list": ["assert area_circle(1) == pi", "assert area_circle(0) == 0", "assert area_circle(2) == 4 * pi", "assert area_circle(3) == 9 * pi", "assert area_circle(10) == 100 * pi", "assert area_circle(0.5) == 0.25 * pi", "assert area_circle(1.5) == 2.25 * pi", "assert round(area_circle(2.5), 2) == round(6.25 * pi, 2)", "assert area_circle(100) == 10000 * pi", "assert area_circle(0.1) == 0.01 * pi", "assert area_circle(0.01) == 0.0001 * pi", "assert area_circle(5) == 25 * pi", "assert area_circle(7) == 49 * pi", "assert area_circle(3.14) == pi * (3.14 ** 2)", "assert area_circle(2.718) == pi * (2.718 ** 2)"], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cylinder given its radius and height.", "code": "from math import pi\n\ndef volume_cylinder(radius, height):\n  return pi * (radius ** 2) * height", "task_id": "163_72caf253-8760-4966-ae94-246a7bad4d84", "test_setup_code": "", "test_list": ["assert round(volume_cylinder(1, 1), 6) == round(3.141592653589793, 6)", "assert round(volume_cylinder(2, 3), 6) == round(37.69911184307752, 6)", "assert round(volume_cylinder(0, 5), 6) == 0", "assert round(volume_cylinder(5, 0), 6) == 0", "assert round(volume_cylinder(0, 0), 6) == 0", "assert round(volume_cylinder(1.5, 2.5), 6) == round(17.671458676442586, 6)", "assert round(volume_cylinder(10, 10), 6) == round(3141.5926535897932, 6)", "assert round(volume_cylinder(0.1, 0.1), 6) == round(0.0031415926535897933, 6)", "assert round(volume_cylinder(3, 4), 6) == round(113.09733552923255, 6)", "assert round(volume_cylinder(2.5, 7.8), 6) == round(153.93804002589985, 6)", "assert round(volume_cylinder(4.2, 6.3), 6) == round(348.6499182472743, 6)", "assert round(volume_cylinder(7, 2), 6) == round(307.8760801646123, 6)", "assert round(volume_cylinder(3.14, 3.14), 6) == round(97.35089606446934, 6)", "assert round(volume_cylinder(9.99, 9.99), 6) == round(3130.3010889048807, 6)", "assert round(volume_cylinder(0.01, 100), 6) == round(0.031415926535897934, 6)"], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a sphere given its radius.", "code": "from math import pi\n\ndef surface_area_sphere(radius):\n  return 4 * pi * (radius ** 2)", "task_id": "163_1466f888-77f0-49cb-87cb-029bc16603b3", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566370614359172", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2) == 50.26548245743669", "assert surface_area_sphere(10) == 1256.6370614359173", "assert surface_area_sphere(0.5) == 3.141592653589793", "assert surface_area_sphere(100) == 125663.70614359173", "assert surface_area_sphere(0.1) == 0.12566370614359174", "assert surface_area_sphere(3.5) == 153.93804002589985", "assert surface_area_sphere(7) == 615.7521601035994", "assert surface_area_sphere(15) == 2827.4333882308138", "assert surface_area_sphere(0.01) == 0.0012566370614359172", "assert surface_area_sphere(0.001) == 1.2566370614359173e-05", "assert surface_area_sphere(50) == 31415.926535897932", "assert surface_area_sphere(0.25) == 0.7853981633974483", "assert surface_area_sphere(8.75) == 962.1127500663199"], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cone given its radius and height.", "code": "from math import pi\n\ndef volume_cone(radius, height):\n  return (1/3) * pi * (radius ** 2) * height", "task_id": "163_f1c7e795-b3bd-4456-8da9-9e3cfd2fecee", "test_setup_code": "", "test_list": ["assert volume_cone(1, 1) == 1.0471975511965976", "assert volume_cone(0, 5) == 0.0", "assert volume_cone(5, 0) == 0.0", "assert volume_cone(3, 7) == 65.97344572538566", "assert volume_cone(2.5, 4.5) == 29.45243112520272", "assert volume_cone(10, 10) == 1047.1975511965977", "assert volume_cone(1.1, 2.2) == 2.799184392907472", "assert volume_cone(100, 100) == 1047197.5511965977", "assert volume_cone(0.1, 0.1) == 0.0010471975511965976", "assert volume_cone(2, 3.5) == 14.660765716752369", "assert volume_cone(7, 2) == 102.62561630262086", "assert volume_cone(5.5, 8.8) == 279.0575098798872", "assert volume_cone(9, 1) == 84.82300164692441", "assert volume_cone(0.5, 0.5) == 0.1308996938995747", "assert volume_cone(6, 9) == 339.29200658769764"], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base, height):\n  return base * height", "task_id": "163_d9abcbd1-378a-46f2-8441-bd4f8c38bb11", "test_setup_code": "", "test_list": ["assert area_parallelogram(5, 10) == 50", "assert area_parallelogram(0, 10) == 0", "assert area_parallelogram(10, 0) == 0", "assert area_parallelogram(1, 1) == 1", "assert area_parallelogram(3, 7) == 21", "assert area_parallelogram(10, 10) == 100", "assert area_parallelogram(2.5, 4) == 10.0", "assert area_parallelogram(7, 3.5) == 24.5", "assert area_parallelogram(100, 200) == 20000", "assert area_parallelogram(0.1, 0.1) == 0.01", "assert area_parallelogram(1e6, 1e6) == 1e12", "assert area_parallelogram(1.5, 2.5) == 3.75", "assert area_parallelogram(123, 456) == 56088", "assert area_parallelogram(999, 999) == 998001", "assert area_parallelogram(1, 1000000) == 1000000"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the even positive integers of n+(n-2)+(n-4)... (until n-x <= 0).", "code": "def sum_even_series(n):\n  if n < 2:\n    return 0\n  elif n % 2 != 0:\n    return sum_even_series(n - 1)\n  else:\n    return n + sum_even_series(n - 2)", "task_id": "162_8b72717b-88d7-451b-9939-91a5e940d9a5", "test_setup_code": "", "test_list": ["assert sum_even_series(10) == 30", "assert sum_even_series(8) == 20", "assert sum_even_series(6) == 12", "assert sum_even_series(4) == 4", "assert sum_even_series(2) == 2", "assert sum_even_series(1) == 0", "assert sum_even_series(0) == 0", "assert sum_even_series(15) == 56", "assert sum_even_series(20) == 110", "assert sum_even_series(25) == 84", "assert sum_even_series(50) == 650", "assert sum_even_series(3) == 2", "assert sum_even_series(7) == 12", "assert sum_even_series(100) == 2550", "assert sum_even_series(99) == 2450"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the odd positive integers of n+(n-2)+(n-4)... (until n-x <= 0).", "code": "def sum_odd_series(n):\n  if n < 1:\n    return 0\n  elif n % 2 == 0:\n    return sum_odd_series(n - 1)\n  else:\n    return n + sum_odd_series(n - 2)", "task_id": "162_ffa60923-5b34-4f51-9b2a-b6fbf09cbce3", "test_setup_code": "", "test_list": ["assert sum_odd_series(1) == 1", "assert sum_odd_series(2) == 1", "assert sum_odd_series(3) == 4", "assert sum_odd_series(4) == 4", "assert sum_odd_series(5) == 9", "assert sum_odd_series(6) == 9", "assert sum_odd_series(7) == 16", "assert sum_odd_series(8) == 16", "assert sum_odd_series(9) == 25", "assert sum_odd_series(10) == 25", "assert sum_odd_series(0) == 0", "assert sum_odd_series(-1) == 0", "assert sum_odd_series(11) == 36", "assert sum_odd_series(12) == 36", "assert sum_odd_series(13) == 49"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the multiples of 3 of n+(n-3)+(n-6)... (until n-x <= 0).", "code": "def sum_multiples_of_three(n):\n  if n < 3:\n    return 0\n  elif n % 3 != 0:\n    return sum_multiples_of_three(n - 1)\n  else:\n    return n + sum_multiples_of_three(n - 3)", "task_id": "162_b14effc3-2b0a-4f03-93d1-96daf9b4827c", "test_setup_code": "", "test_list": ["assert sum_multiples_of_three(0) == 0", "assert sum_multiples_of_three(1) == 0", "assert sum_multiples_of_three(2) == 0", "assert sum_multiples_of_three(3) == 3", "assert sum_multiples_of_three(4) == 3", "assert sum_multiples_of_three(5) == 3", "assert sum_multiples_of_three(6) == 9", "assert sum_multiples_of_three(7) == 9", "assert sum_multiples_of_three(8) == 9", "assert sum_multiples_of_three(9) == 18", "assert sum_multiples_of_three(10) == 18", "assert sum_multiples_of_three(11) == 18", "assert sum_multiples_of_three(12) == 30", "assert sum_multiples_of_three(15) == 45", "assert sum_multiples_of_three(20) == 63"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def sum_fibonacci(n):\n  def fibonacci(num):\n    if num <= 0:\n      return 0\n    elif num == 1:\n      return 1\n    else:\n      return fibonacci(num - 1) + fibonacci(num - 2)\n  return sum(fibonacci(i) for i in range(n))", "task_id": "162_cf8abedc-cf59-4d37-8020-a59b0c1d660a", "test_setup_code": "", "test_list": ["assert sum_fibonacci(0) == 0", "assert sum_fibonacci(1) == 0", "assert sum_fibonacci(2) == 1", "assert sum_fibonacci(3) == 2", "assert sum_fibonacci(4) == 4", "assert sum_fibonacci(5) == 7", "assert sum_fibonacci(6) == 12", "assert sum_fibonacci(7) == 20", "assert sum_fibonacci(8) == 33", "assert sum_fibonacci(9) == 54", "assert sum_fibonacci(10) == 88", "assert sum_fibonacci(15) == 986", "assert sum_fibonacci(20) == 17710", "assert sum_fibonacci(25) == 196417", "assert sum_fibonacci(30) == 2178308"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n positive integers.", "code": "def sum_squares(n):\n  return sum(i * i for i in range(1, n + 1))", "task_id": "162_350629dd-2838-4168-886a-8d4eb500d2e6", "test_setup_code": "", "test_list": ["assert sum_squares(1) == 1", "assert sum_squares(2) == 5", "assert sum_squares(3) == 14", "assert sum_squares(4) == 30", "assert sum_squares(5) == 55", "assert sum_squares(10) == 385", "assert sum_squares(15) == 1240", "assert sum_squares(20) == 2870", "assert sum_squares(0) == 0", "assert sum_squares(100) == 338350", "assert sum_squares(50) == 42925", "assert sum_squares(7) == 140", "assert sum_squares(9) == 285", "assert sum_squares(11) == 506", "assert sum_squares(25) == 5525"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the first n positive integers.", "code": "def sum_cubes(n):\n  return sum(i * i * i for i in range(1, n + 1))", "task_id": "162_7c42bb29-fc4b-4d05-9724-c0ea7bfec878", "test_setup_code": "", "test_list": ["assert sum_cubes(1) == 1", "assert sum_cubes(2) == 9", "assert sum_cubes(3) == 36", "assert sum_cubes(4) == 100", "assert sum_cubes(5) == 225", "assert sum_cubes(6) == 441", "assert sum_cubes(7) == 784", "assert sum_cubes(8) == 1296", "assert sum_cubes(9) == 2025", "assert sum_cubes(10) == 3025", "assert sum_cubes(0) == 0", "assert sum_cubes(11) == 4356", "assert sum_cubes(12) == 6084", "assert sum_cubes(15) == 14400", "assert sum_cubes(20) == 44100"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of an arithmetic series with a common difference d.", "code": "def sum_arithmetic_series(n, d):\n  return n * (2 + (n - 1) * d) // 2", "task_id": "162_e707f2c8-dfed-4474-ba0a-58c13d7c9052", "test_setup_code": "", "test_list": ["assert sum_arithmetic_series(1, 1) == 1", "assert sum_arithmetic_series(2, 1) == 3", "assert sum_arithmetic_series(3, 1) == 6", "assert sum_arithmetic_series(4, 1) == 10", "assert sum_arithmetic_series(5, 1) == 15", "assert sum_arithmetic_series(1, 2) == 1", "assert sum_arithmetic_series(2, 2) == 5", "assert sum_arithmetic_series(3, 2) == 12", "assert sum_arithmetic_series(4, 2) == 22", "assert sum_arithmetic_series(5, 2) == 35", "assert sum_arithmetic_series(0, 1) == 0", "assert sum_arithmetic_series(1, 0) == 1", "assert sum_arithmetic_series(2, 0) == 2", "assert sum_arithmetic_series(3, 0) == 3", "assert sum_arithmetic_series(10, 5) == 245"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of a geometric series with a common ratio r.", "code": "def sum_geometric_series(n, r):\n  if r == 1:\n    return n\n  else:\n    return (1 - r ** n) // (1 - r)", "task_id": "162_c30e83ec-c73e-46c3-a270-1696e1e67314", "test_setup_code": "", "test_list": ["assert sum_geometric_series(1, 2) == 1", "assert sum_geometric_series(2, 2) == 3", "assert sum_geometric_series(3, 2) == 7", "assert sum_geometric_series(4, 2) == 15", "assert sum_geometric_series(5, 2) == 31", "assert sum_geometric_series(1, 1) == 1", "assert sum_geometric_series(2, 1) == 2", "assert sum_geometric_series(10, 1) == 10", "assert sum_geometric_series(3, 0) == 1", "assert sum_geometric_series(4, 0) == 1", "assert sum_geometric_series(5, 0) == 1", "assert sum_geometric_series(3, -1) == 0", "assert sum_geometric_series(4, -1) == 1", "assert sum_geometric_series(5, -1) == 0", "assert sum_geometric_series(6, -1) == 1"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n positive integers.", "code": "def sum_factorials(n):\n  def factorial(num):\n    if num == 0:\n      return 1\n    else:\n      return num * factorial(num - 1)\n  return sum(factorial(i) for i in range(1, n + 1))", "task_id": "162_ff193df4-6300-4201-bce4-fc9ce17c3fc8", "test_setup_code": "", "test_list": ["assert sum_factorials(1) == 1", "assert sum_factorials(2) == 3", "assert sum_factorials(3) == 9", "assert sum_factorials(4) == 33", "assert sum_factorials(5) == 153", "assert sum_factorials(6) == 873", "assert sum_factorials(7) == 5913", "assert sum_factorials(8) == 46233", "assert sum_factorials(9) == 409113", "assert sum_factorials(10) == 4037913", "assert sum_factorials(0) == 0", "assert sum_factorials(11) == 43954713", "assert sum_factorials(12) == 522956313", "assert sum_factorials(13) == 6749977113", "assert sum_factorials(14) == 93928268313"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n powers of 2.", "code": "def sum_powers_of_two(n):\n  return sum(2 ** i for i in range(n))", "task_id": "162_27ef4dfc-2184-4af7-ad4a-4321660ad2f9", "test_setup_code": "", "test_list": ["assert sum_powers_of_two(0) == 0", "assert sum_powers_of_two(1) == 1", "assert sum_powers_of_two(2) == 3", "assert sum_powers_of_two(3) == 7", "assert sum_powers_of_two(4) == 15", "assert sum_powers_of_two(5) == 31", "assert sum_powers_of_two(10) == 1023", "assert sum_powers_of_two(15) == 32767", "assert sum_powers_of_two(20) == 1048575", "assert sum_powers_of_two(30) == 1073741823", "assert sum_powers_of_two(50) == 1125899906842623", "assert sum_powers_of_two(100) == 1267650600228229401496703205375", "assert sum_powers_of_two(25) == 33554431", "assert sum_powers_of_two(60) == 1152921504606846975", "assert sum_powers_of_two(32) == 4294967295"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a perfect square.", "code": "import math\ndef isPerfectSquare(n: int) -> bool:\n    root = math.isqrt(n)\n    return root * root == n", "task_id": "164_9fb1827f-8d93-4c95-96a3-75eb9446732e", "test_setup_code": "", "test_list": ["assert isPerfectSquare(0) == True", "assert isPerfectSquare(1) == True", "assert isPerfectSquare(4) == True", "assert isPerfectSquare(9) == True", "assert isPerfectSquare(16) == True", "assert isPerfectSquare(25) == True", "assert isPerfectSquare(2) == False", "assert isPerfectSquare(3) == False", "assert isPerfectSquare(5) == False", "assert isPerfectSquare(6) == False", "assert isPerfectSquare(7) == False", "assert isPerfectSquare(8) == False", "assert isPerfectSquare(10) == False", "assert isPerfectSquare(2147483647) == False", "assert isPerfectSquare(2147395600) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a prime number.", "code": "def isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "164_5a794ef7-cbff-47d9-b767-c2c2ce251fe7", "test_setup_code": "", "test_list": ["assert isPrime(2) == True", "assert isPrime(3) == True", "assert isPrime(4) == False", "assert isPrime(5) == True", "assert isPrime(1) == False", "assert isPrime(0) == False", "assert isPrime(-1) == False", "assert isPrime(17) == True", "assert isPrime(18) == False", "assert isPrime(19) == True", "assert isPrime(20) == False", "assert isPrime(23) == True", "assert isPrime(24) == False", "assert isPrime(29) == True", "assert isPrime(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "164_c9282f2f-6dc2-40da-b1aa-08d613fd62f7", "test_setup_code": "", "test_list": ["assert gcd(10, 5) == 5", "assert gcd(8, 12) == 4", "assert gcd(17, 13) == 1", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(48, 18) == 6", "assert gcd(100, 75) == 25", "assert gcd(1, 1) == 1", "assert gcd(1, 7) == 1", "assert gcd(7, 1) == 1", "assert gcd(35, 49) == 7", "assert gcd(144, 36) == 36", "assert gcd(13, 13) == 13", "assert gcd(1071, 462) == 21"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    return abs(a * b) // gcd(a, b)", "task_id": "164_fef5521e-7edf-45e5-9e7d-3600053226a3", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(7, 3) == 21", "assert lcm(6, 8) == 24", "assert lcm(21, 6) == 42", "assert lcm(10, 15) == 30", "assert lcm(1, 1) == 1", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(13, 17) == 221", "assert lcm(100, 25) == 100", "assert lcm(9, 28) == 252", "assert lcm(14, 35) == 70", "assert lcm(18, 24) == 72", "assert lcm(5, 7) == 35"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sumOfDigits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "164_9a9c4ba6-0a0d-47ad-ba8d-227fb26d9df4", "test_setup_code": "", "test_list": ["assert sumOfDigits(123) == 6", "assert sumOfDigits(0) == 0", "assert sumOfDigits(987654321) == 45", "assert sumOfDigits(1001) == 2", "assert sumOfDigits(999) == 27", "assert sumOfDigits(1) == 1", "assert sumOfDigits(10) == 1", "assert sumOfDigits(11111) == 5", "assert sumOfDigits(1234567890) == 45", "assert sumOfDigits(55555) == 25", "assert sumOfDigits(1000000000) == 1", "assert sumOfDigits(2468) == 20", "assert sumOfDigits(13579) == 25", "assert sumOfDigits(222222) == 12", "assert sumOfDigits(333333) == 18"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverseString(s: str) -> str:\n    return s[::-1]", "task_id": "164_9894e2f9-d5aa-4349-a35b-eddcddef3a37", "test_setup_code": "", "test_list": ["assert reverseString('hello') == 'olleh'", "assert reverseString('') == ''", "assert reverseString('a') == 'a'", "assert reverseString('ab') == 'ba'", "assert reverseString('racecar') == 'racecar'", "assert reverseString('12345') == '54321'", "assert reverseString('!@#$%') == '%$#@!'", "assert reverseString('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverseString('Python') == 'nohtyP'", "assert reverseString('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverseString('The quick brown fox') == 'xof nworb kciuq ehT'", "assert reverseString(' ') == ' '", "assert reverseString('  leading space') == 'ecaps gnidael  '", "assert reverseString('trailing space  ') == '  ecaps gniliart'", "assert reverseString('multiple   spaces') == 'secaps   elpitlum'"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome.", "code": "def isPalindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "164_169421f0-e188-4b71-ba37-a4f5a2aa8222", "test_setup_code": "", "test_list": ["assert isPalindrome('') == True", "assert isPalindrome('a') == True", "assert isPalindrome('aa') == True", "assert isPalindrome('ab') == False", "assert isPalindrome('aba') == True", "assert isPalindrome('abc') == False", "assert isPalindrome('racecar') == True", "assert isPalindrome('Racecar') == False", "assert isPalindrome('A man a plan a canal Panama') == False", "assert isPalindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert isPalindrome('12321') == True", "assert isPalindrome('12345') == False", "assert isPalindrome('!@#$$#@!') == True", "assert isPalindrome('!@#$$#@') == False", "assert isPalindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "164_a32f75a6-1020-45fb-a85e-da82a69d95f4", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(25) == 75025", "assert fibonacci(30) == 832040"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "164_26cf347f-10c0-4c05-bc18-23be358fb3db", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(10) == 3628800", "assert factorial(12) == 479001600", "assert factorial(15) == 1307674368000", "assert factorial(20) == 2432902008176640000", "assert factorial(-1) == 'Input must be a non-negative integer' if hasattr(factorial, '__annotations__') and factorial.__annotations__.get('n') == int else True", "assert factorial('5') == 'Input must be a non-negative integer' if hasattr(factorial, '__annotations__') and factorial.__annotations__.get('n') == int else True"], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams.", "code": "def isAnagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "164_b6268209-edc8-4ce2-a9a3-2908e5cbf0f9", "test_setup_code": "", "test_list": ["assert isAnagram('listen', 'silent') == True", "assert isAnagram('triangle', 'integral') == True", "assert isAnagram('apple', 'pale') == False", "assert isAnagram('aabbcc', 'abcabc') == True", "assert isAnagram('rat', 'car') == False", "assert isAnagram('night', 'thing') == True", "assert isAnagram('hello', 'billion') == False", "assert isAnagram('dusty', 'study') == True", "assert isAnagram('conversation', 'voicesranton') == True", "assert isAnagram('a', 'a') == True", "assert isAnagram('a', 'b') == False", "assert isAnagram('', '') == True", "assert isAnagram('anagram', 'nagaram') == True", "assert isAnagram('schoolmaster', 'theclassroom') == True", "assert isAnagram('astronomer', 'moonstarer') == True"], "challenge_test_list": []}
{"text": "Write a python function to count vowels at the same position in a given string (lowercase characters) as in the English alphabet.", "code": "def count_vowels_at_position(s):\n    count_vowels = 0\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels and i == ord(s[i]) - ord('a'):\n            count_vowels += 1\n    return count_vowels", "task_id": "165_34104a6d-a152-4640-8a6b-68b7cdc1f284", "test_setup_code": "", "test_list": ["assert count_vowels_at_position('a') == 1", "assert count_vowels_at_position('e') == 1", "assert count_vowels_at_position('i') == 1", "assert count_vowels_at_position('o') == 1", "assert count_vowels_at_position('u') == 1", "assert count_vowels_at_position('b') == 0", "assert count_vowels_at_position('aeiou') == 5", "assert count_vowels_at_position('abcdefg') == 1", "assert count_vowels_at_position('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels_at_position('') == 0", "assert count_vowels_at_position('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels_at_position('aeioubcdfghjklmnpqrstvwxyz') == 5", "assert count_vowels_at_position('zzzzzzzzzzzzzzzzzzzzzzzzzz') == 0", "assert count_vowels_at_position('aebicoduf') == 4", "assert count_vowels_at_position('aeiouaeiouaeiou') == 5"], "challenge_test_list": []}
{"text": "Write a python function to count digits at even positions in a given string.", "code": "def count_even_position_digits(s):\n    count_digits = 0\n    for i in range(len(s)):\n        if s[i].isdigit() and i % 2 == 0:\n            count_digits += 1\n    return count_digits", "task_id": "165_955ae194-8e9b-45e1-a949-fc6fa607f25d", "test_setup_code": "", "test_list": ["assert count_even_position_digits('1234567890') == 5", "assert count_even_position_digits('a1b2c3d4e5') == 0", "assert count_even_position_digits('') == 0", "assert count_even_position_digits('1') == 1", "assert count_even_position_digits('12') == 1", "assert count_even_position_digits('a') == 0", "assert count_even_position_digits('a1') == 0", "assert count_even_position_digits('1a2b3c4d5e6f7g8h9i0') == 5", "assert count_even_position_digits('1111111111') == 5", "assert count_even_position_digits('2222222222') == 5", "assert count_even_position_digits('1a2b3c4d5e6f7g8h9i0j') == 5", "assert count_even_position_digits('abcdefghij') == 0", "assert count_even_position_digits('a1b2c3d4e5f6g7h8i9j0') == 0", "assert count_even_position_digits('1a2b3c4d5e6f7g8h9i0j1k2l3m4n5o6p7q8r9s0') == 10", "assert count_even_position_digits('0') == 1"], "challenge_test_list": []}
{"text": "Write a python function to count uppercase characters at the same position in a given string as in the English alphabet.", "code": "def count_uppercase_at_position(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i == ord(s[i]) - ord('A'):\n            count_chars += 1\n    return count_chars", "task_id": "165_f47ed1fa-03db-45a4-bf67-42bbe0f2a6eb", "test_setup_code": "", "test_list": ["assert count_uppercase_at_position('A') == 1", "assert count_uppercase_at_position('a') == 0", "assert count_uppercase_at_position('AB') == 1", "assert count_uppercase_at_position('aB') == 0", "assert count_uppercase_at_position('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 1", "assert count_uppercase_at_position('A' * 26) == 1", "assert count_uppercase_at_position('BCDEFGHIJKLMNOPQRSTUVWXYZ') == 0", "assert count_uppercase_at_position('A' + 'B' * 25) == 1", "assert count_uppercase_at_position('A' + 'b' * 25) == 1", "assert count_uppercase_at_position('a' + 'B' * 25) == 0", "assert count_uppercase_at_position('') == 0", "assert count_uppercase_at_position('a' * 26) == 0", "assert count_uppercase_at_position('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 1", "assert count_uppercase_at_position('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 1", "assert count_uppercase_at_position('ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ') == 1"], "challenge_test_list": []}
{"text": "Write a python function to count consonants at the same position in a given string (lowercase characters) as in the English alphabet.", "code": "def count_consonants_at_position(s):\n    count_consonants = 0\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    for i in range(len(s)):\n        if s[i] in consonants and i == ord(s[i]) - ord('a'):\n            count_consonants += 1\n    return count_consonants", "task_id": "165_e8e21c34-b81b-4f95-8368-b35f071e4a5a", "test_setup_code": "", "test_list": ["assert count_consonants_at_position('') == 0", "assert count_consonants_at_position('a') == 0", "assert count_consonants_at_position('b') == 1", "assert count_consonants_at_position('c') == 0", "assert count_consonants_at_position('bc') == 1", "assert count_consonants_at_position('bcd') == 1", "assert count_consonants_at_position('abc') == 0", "assert count_consonants_at_position('abcdefghijklmnopqrstuvwxyz') == 1", "assert count_consonants_at_position('bcdfghjklmnpqrstvwxyz') == 1", "assert count_consonants_at_position('bdfhjlnprtvxz') == 0", "assert count_consonants_at_position('bcdz') == 1", "assert count_consonants_at_position('bcdx') == 1", "assert count_consonants_at_position('bcdfghjklmnpqrstvwxy') == 1", "assert count_consonants_at_position('bcdfghjklmnpqrstvwxyza') == 1", "assert count_consonants_at_position('bcdfghjklmnpqrstvwxyzb') == 2"], "challenge_test_list": []}
{"text": "Write a python function to count digits at the same position in a given string as their value.", "code": "def count_digits_at_position(s):\n    count_digits = 0\n    for i in range(len(s)):\n        if s[i].isdigit() and i == int(s[i]):\n            count_digits += 1\n    return count_digits", "task_id": "165_affebafc-c9bb-432f-a6f3-e32835e69654", "test_setup_code": "", "test_list": ["assert count_digits_at_position('0123456789') == 1", "assert count_digits_at_position('0a2b4c6d8e') == 1", "assert count_digits_at_position('1234567890') == 0", "assert count_digits_at_position('') == 0", "assert count_digits_at_position('0') == 1", "assert count_digits_at_position('1') == 0", "assert count_digits_at_position('012') == 1", "assert count_digits_at_position('abc') == 0", "assert count_digits_at_position('0a1b2c3d4e5f6g7h8i9j') == 1", "assert count_digits_at_position('0000000000') == 1", "assert count_digits_at_position('9876543210') == 0", "assert count_digits_at_position('01234567890123456789') == 1", "assert count_digits_at_position('0a1b2c3d4e5f6g7h8i9j0123456789') == 1", "assert count_digits_at_position('0123456789abcdef') == 1", "assert count_digits_at_position('a0b1c2d3e4f5g6h7i8j9') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count special characters at the same position in a given string as in the ASCII table.", "code": "def count_special_chars_at_position(s):\n    count_special = 0\n    for i in range(len(s)):\n        if not s[i].isalnum() and i == ord(s[i]):\n            count_special += 1\n    return count_special", "task_id": "165_5f6ebcf8-ea61-4e43-a96e-7fd480de08b7", "test_setup_code": "", "test_list": ["assert count_special_chars_at_position('') == 0", "assert count_special_chars_at_position('a') == 0", "assert count_special_chars_at_position('!') == 0", "assert count_special_chars_at_position('!@#') == 0", "assert count_special_chars_at_position('a!c') == 0", "assert count_special_chars_at_position('abc!def') == 0", "assert count_special_chars_at_position('!@#$%^&*()') == 0", "assert count_special_chars_at_position('A!C') == 0", "assert count_special_chars_at_position('A!C@E') == 0", "assert count_special_chars_at_position('!@#abc') == 0", "assert count_special_chars_at_position('a!c@e') == 0", "assert count_special_chars_at_position('!@#123') == 0", "assert count_special_chars_at_position('!@#456') == 0", "assert count_special_chars_at_position('!@#789') == 0", "assert count_special_chars_at_position('!@#0') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count characters at the same position in a given string where the position is even for lowercase and odd for uppercase.", "code": "def count_alternating_case_at_position(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if (i % 2 == 0 and s[i].islower()) or (i % 2 == 1 and s[i].isupper()):\n            count_chars += 1\n    return count_chars", "task_id": "165_dfe397d5-9de8-42f7-bf47-11079db3f164", "test_setup_code": "", "test_list": ["assert count_alternating_case_at_position('aBcDeF') == 6", "assert count_alternating_case_at_position('abcdef') == 3", "assert count_alternating_case_at_position('ABCDEF') == 0", "assert count_alternating_case_at_position('aBcDeFgHiJ') == 8", "assert count_alternating_case_at_position('a') == 1", "assert count_alternating_case_at_position('A') == 0", "assert count_alternating_case_at_position('') == 0", "assert count_alternating_case_at_position('aBcD') == 4", "assert count_alternating_case_at_position('aBCdEfGh') == 4", "assert count_alternating_case_at_position('AbCdEfGh') == 0", "assert count_alternating_case_at_position('aBcDeFgHiJkLmNoP') == 12", "assert count_alternating_case_at_position('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 18", "assert count_alternating_case_at_position('aBcDeFgHiJkLmNoPqRsTuVwXyZ1234567890') == 18", "assert count_alternating_case_at_position('a1c3e5g7i9') == 5", "assert count_alternating_case_at_position('A1C3E5G7I9') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count characters at prime positions in a given string.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_position_chars(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if is_prime(i):\n            count_chars += 1\n    return count_chars", "task_id": "165_799ca089-f3a3-4a3c-a331-1bdaeb2d3f40", "test_setup_code": "", "test_list": ["assert count_prime_position_chars('abcdef') == 2", "assert count_prime_position_chars('a') == 0", "assert count_prime_position_chars('ab') == 0", "assert count_prime_position_chars('abc') == 1", "assert count_prime_position_chars('abcd') == 1", "assert count_prime_position_chars('abcde') == 2", "assert count_prime_position_chars('abcdefg') == 2", "assert count_prime_position_chars('abcdefgh') == 3", "assert count_prime_position_chars('abcdefghi') == 3", "assert count_prime_position_chars('abcdefghij') == 4", "assert count_prime_position_chars('abcdefghijk') == 4", "assert count_prime_position_chars('abcdefghijkl') == 4", "assert count_prime_position_chars('abcdefghijklmnop') == 6", "assert count_prime_position_chars('abcdefghijklmnopqrstuvwxyz') == 8", "assert count_prime_position_chars('a'*100) == 25"], "challenge_test_list": []}
{"text": "Write a python function to count characters in a given string that form a palindrome when read from the start to that position.", "code": "def count_palindrome_chars(s):\n    count_palindromes = 0\n    for i in range(len(s)):\n        if s[:i+1] == s[:i+1][::-1]:\n            count_palindromes += 1\n    return count_palindromes", "task_id": "165_336ff8b8-e5f3-4fb5-b1f4-a5bdbea6a01d", "test_setup_code": "", "test_list": ["assert count_palindrome_chars('a') == 1", "assert count_palindrome_chars('aa') == 2", "assert count_palindrome_chars('ab') == 1", "assert count_palindrome_chars('aba') == 3", "assert count_palindrome_chars('abc') == 1", "assert count_palindrome_chars('abba') == 3", "assert count_palindrome_chars('racecar') == 7", "assert count_palindrome_chars('aabbcbbaa') == 5", "assert count_palindrome_chars('abcdedcba') == 1", "assert count_palindrome_chars('') == 0", "assert count_palindrome_chars('a'*100) == 100", "assert count_palindrome_chars('abacabadabacaba') == 7", "assert count_palindrome_chars('noon') == 4", "assert count_palindrome_chars('level') == 5", "assert count_palindrome_chars('rotor') == 5"], "challenge_test_list": []}
{"text": "Write a python function to count characters at Fibonacci sequence positions in a given string.", "code": "def count_fibonacci_position_chars(s):\n    count_chars = 0\n    a, b = 0, 1\n    while a < len(s):\n        if a < len(s):\n            count_chars += 1\n        a, b = b, a + b\n    return count_chars", "task_id": "165_e462c2eb-f047-4d6c-aa7b-090e0965809b", "test_setup_code": "", "test_list": ["assert count_fibonacci_position_chars('') == 0", "assert count_fibonacci_position_chars('a') == 1", "assert count_fibonacci_position_chars('ab') == 1", "assert count_fibonacci_position_chars('abc') == 2", "assert count_fibonacci_position_chars('abcd') == 2", "assert count_fibonacci_position_chars('abcde') == 3", "assert count_fibonacci_position_chars('abcdef') == 3", "assert count_fibonacci_position_chars('abcdefg') == 3", "assert count_fibonacci_position_chars('abcdefgh') == 4", "assert count_fibonacci_position_chars('abcdefghi') == 4", "assert count_fibonacci_position_chars('abcdefghij') == 4", "assert count_fibonacci_position_chars('abcdefghijk') == 4", "assert count_fibonacci_position_chars('abcdefghijkl') == 5", "assert count_fibonacci_position_chars('abcdefghijklmnop') == 6", "assert count_fibonacci_position_chars('abcdefghijklmnopqrstuvwxyz') == 7"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with xor as an odd number.", "code": "def count_odd_pairs(arr):\n    oddPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                oddPair += 1\n    return oddPair", "task_id": "166_26fe24d8-e620-47a9-adbf-b71fe44abaae", "test_setup_code": "", "test_list": ["assert count_odd_pairs([1, 2, 3, 4]) == 4", "assert count_odd_pairs([1, 1, 1, 1]) == 0", "assert count_odd_pairs([2, 2, 2, 2]) == 0", "assert count_odd_pairs([1, 2, 3]) == 2", "assert count_odd_pairs([1, 3, 5, 7]) == 0", "assert count_odd_pairs([2, 4, 6, 8]) == 0", "assert count_odd_pairs([1, 2, 3, 5, 7]) == 6", "assert count_odd_pairs([10, 15, 20, 25]) == 4", "assert count_odd_pairs([0, 0, 0, 0]) == 0", "assert count_odd_pairs([0, 1, 2, 3]) == 4", "assert count_odd_pairs([1]) == 0", "assert count_odd_pairs([]) == 0", "assert count_odd_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25", "assert count_odd_pairs([100, 101, 102, 103]) == 4", "assert count_odd_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 50"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an even number.", "code": "def count_even_sum_pairs(arr):\n    evenSumPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 == 0:\n                evenSumPair += 1\n    return evenSumPair", "task_id": "166_5a55191e-9e8c-4007-8635-3e5c323fa56a", "test_setup_code": "", "test_list": ["assert count_even_sum_pairs([1, 2, 3, 4, 5]) == 4", "assert count_even_sum_pairs([2, 4, 6, 8]) == 6", "assert count_even_sum_pairs([1, 3, 5, 7]) == 6", "assert count_even_sum_pairs([1, 1, 1, 1]) == 6", "assert count_even_sum_pairs([2, 2, 2, 2]) == 6", "assert count_even_sum_pairs([1, 2, 3, 4, 6]) == 5", "assert count_even_sum_pairs([1]) == 0", "assert count_even_sum_pairs([]) == 0", "assert count_even_sum_pairs([0, 0, 0, 0]) == 6", "assert count_even_sum_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25", "assert count_even_sum_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 20", "assert count_even_sum_pairs([-1, -2, -3, -4]) == 4", "assert count_even_sum_pairs([-1, -2, -3, -4, 1, 2, 3, 4]) == 16", "assert count_even_sum_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 36", "assert count_even_sum_pairs([1, 2, 2, 3, 3, 4]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an odd number.", "code": "def count_odd_sum_pairs(arr):\n    oddSumPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 != 0:\n                oddSumPair += 1\n    return oddSumPair", "task_id": "166_4127f0ab-8406-438a-8c4d-4de1f06f8620", "test_setup_code": "", "test_list": ["assert count_odd_sum_pairs([1, 2, 3, 4, 5]) == 6", "assert count_odd_sum_pairs([1, 1, 1, 1]) == 0", "assert count_odd_sum_pairs([2, 2, 2, 2]) == 0", "assert count_odd_sum_pairs([1, 2, 3, 4]) == 4", "assert count_odd_sum_pairs([1, 3, 5, 7]) == 0", "assert count_odd_sum_pairs([2, 4, 6, 8]) == 0", "assert count_odd_sum_pairs([1, 2, 3, 5, 8, 13]) == 10", "assert count_odd_sum_pairs([10, 20, 30, 40, 50]) == 0", "assert count_odd_sum_pairs([1, 2, 3, 4, 6, 7]) == 9", "assert count_odd_sum_pairs([1]) == 0", "assert count_odd_sum_pairs([]) == 0", "assert count_odd_sum_pairs([1, 2, 2, 1]) == 4", "assert count_odd_sum_pairs([5, 5, 5, 5]) == 0", "assert count_odd_sum_pairs([0, 1, 2, 3]) == 4", "assert count_odd_sum_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is divisible by a given number k.", "code": "def count_divisible_pairs(arr, k):\n    divisiblePair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % k == 0:\n                divisiblePair += 1\n    return divisiblePair", "task_id": "166_5da38b54-c64c-47d2-9d77-3380e838c4bd", "test_setup_code": "", "test_list": ["assert count_divisible_pairs([1, 2, 3, 4, 5], 3) == 4", "assert count_divisible_pairs([1, 3, 5, 7, 9], 2) == 10", "assert count_divisible_pairs([1, 2, 3, 4, 5], 5) == 2", "assert count_divisible_pairs([3, 6, 9, 12, 15], 3) == 10", "assert count_divisible_pairs([2, 4, 6, 8, 10], 4) == 6", "assert count_divisible_pairs([7, 14, 21, 28, 35], 7) == 10", "assert count_divisible_pairs([1, 1, 1, 1, 1], 2) == 0", "assert count_divisible_pairs([2, 2, 2, 2, 2], 2) == 10", "assert count_divisible_pairs([], 5) == 0", "assert count_divisible_pairs([10], 5) == 0", "assert count_divisible_pairs([10, 20], 5) == 1", "assert count_divisible_pairs([10, 20, 30, 40, 50], 25) == 4", "assert count_divisible_pairs([11, 22, 33, 44, 55], 11) == 10", "assert count_divisible_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 11", "assert count_divisible_pairs([100, 200, 300, 400, 500], 100) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is greater than a given number x.", "code": "def count_greater_pairs(arr, x):\n    greaterPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) > x:\n                greaterPair += 1\n    return greaterPair", "task_id": "166_9c94d3b3-ca79-4e52-b828-cff2a9f61aaa", "test_setup_code": "", "test_list": ["assert count_greater_pairs([1, 2, 3, 4, 5], 5) == 4", "assert count_greater_pairs([1, 2, 3, 4, 5], 10) == 0", "assert count_greater_pairs([1, 2, 3, 4, 5], 3) == 7", "assert count_greater_pairs([5, 5, 5, 5, 5], 9) == 10", "assert count_greater_pairs([0, 0, 0, 0, 0], 0) == 0", "assert count_greater_pairs([1, -1, 2, -2, 3, -3], 0) == 4", "assert count_greater_pairs([10, 20, 30, 40, 50], 60) == 4", "assert count_greater_pairs([10, 20, 30, 40, 50], 100) == 0", "assert count_greater_pairs([1, 1, 1, 1, 1], 1) == 10", "assert count_greater_pairs([1, 2, 3, 4, 5], 0) == 10", "assert count_greater_pairs([], 5) == 0", "assert count_greater_pairs([1], 1) == 0", "assert count_greater_pairs([1, 2, 3, 4, 5], -1) == 10", "assert count_greater_pairs([1, 2, 3, 4, 5], 4) == 5", "assert count_greater_pairs([1, 2, 3, 4, 5], 6) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is smaller than a given number x.", "code": "def count_smaller_pairs(arr, x):\n    smallerPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) < x:\n                smallerPair += 1\n    return smallerPair", "task_id": "166_a28d8060-95d2-41e7-bdf1-48cce9866ab0", "test_setup_code": "", "test_list": ["assert count_smaller_pairs([1, 2, 3, 4, 5], 5) == 4", "assert count_smaller_pairs([1, 2, 3, 4, 5], 10) == 10", "assert count_smaller_pairs([1, 2, 3, 4, 5], 3) == 1", "assert count_smaller_pairs([5, 5, 5, 5, 5], 10) == 0", "assert count_smaller_pairs([1, 1, 1, 1, 1], 3) == 10", "assert count_smaller_pairs([1, 2], 4) == 1", "assert count_smaller_pairs([], 5) == 0", "assert count_smaller_pairs([1], 5) == 0", "assert count_smaller_pairs([1, 2, 3, 4, 5], 0) == 0", "assert count_smaller_pairs([1, -2, 3, -4, 5], 0) == 4", "assert count_smaller_pairs([1, 2, 3, 4, 5], 7) == 7", "assert count_smaller_pairs([10, 20, 30, 40, 50], 60) == 4", "assert count_smaller_pairs([1, 2, 3, 4, 5], 2) == 0", "assert count_smaller_pairs([1, 2, 3, 4, 5], 15) == 10", "assert count_smaller_pairs([-1, -2, -3, -4, -5], -5) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is equal to a given number x.", "code": "def count_equal_pairs(arr, x):\n    equalPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == x:\n                equalPair += 1\n    return equalPair", "task_id": "166_2f62e8e9-7df9-4242-8854-f8b300b30501", "test_setup_code": "", "test_list": ["assert count_equal_pairs([1, 2, 3, 4], 5) == 2", "assert count_equal_pairs([1, 1, 1, 1], 2) == 6", "assert count_equal_pairs([1, 2, 3, 4, 5], 9) == 1", "assert count_equal_pairs([1, 2, 3, 4, 5], 10) == 0", "assert count_equal_pairs([], 5) == 0", "assert count_equal_pairs([5, 5, 5, 5], 10) == 6", "assert count_equal_pairs([1, 2, 3, 4, 5, 6], 7) == 3", "assert count_equal_pairs([1, 3, 5, 7], 8) == 2", "assert count_equal_pairs([1, 1, 1, 1, 1], 2) == 10", "assert count_equal_pairs([1, 2, 3, 4, 5], 6) == 2", "assert count_equal_pairs([1, -1, 2, -2, 3, -3], 0) == 3", "assert count_equal_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 5", "assert count_equal_pairs([0, 0, 0, 0], 0) == 6", "assert count_equal_pairs([1, 2, 3, 4, 5], 3) == 1", "assert count_equal_pairs([1, 2, 3, 4, 5, 6], 12) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose product is an even number.", "code": "def count_product_even_pairs(arr):\n    evenProductPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) % 2 == 0:\n                evenProductPair += 1\n    return evenProductPair", "task_id": "166_f9e338af-2baa-4f98-818a-504f06eebc1c", "test_setup_code": "", "test_list": ["assert count_product_even_pairs([1, 2, 3, 4]) == 5", "assert count_product_even_pairs([2, 4, 6, 8]) == 6", "assert count_product_even_pairs([1, 3, 5, 7]) == 0", "assert count_product_even_pairs([0, 1, 2, 3, 4]) == 7", "assert count_product_even_pairs([1, 1, 1, 1]) == 0", "assert count_product_even_pairs([2, 2, 2, 2]) == 6", "assert count_product_even_pairs([1, 2, 3, 4, 5, 6]) == 12", "assert count_product_even_pairs([10, 20, 30]) == 3", "assert count_product_even_pairs([1, 2, 3, 5, 7, 11]) == 5", "assert count_product_even_pairs([1, 2, 2, 3, 4]) == 8", "assert count_product_even_pairs([]) == 0", "assert count_product_even_pairs([1]) == 0", "assert count_product_even_pairs([2]) == 0", "assert count_product_even_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert count_product_even_pairs([-1, -2, -3, -4]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose product is an odd number.", "code": "def count_product_odd_pairs(arr):\n    oddProductPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) % 2 != 0:\n                oddProductPair += 1\n    return oddProductPair", "task_id": "166_a811605a-23ca-477a-af85-b804f2c7f55c", "test_setup_code": "", "test_list": ["assert count_product_odd_pairs([1, 3, 5, 7]) == 6", "assert count_product_odd_pairs([2, 4, 6, 8]) == 0", "assert count_product_odd_pairs([1, 2, 3, 4, 5]) == 4", "assert count_product_odd_pairs([1, 1, 1, 1]) == 6", "assert count_product_odd_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 16", "assert count_product_odd_pairs([1, 2, 3]) == 1", "assert count_product_odd_pairs([1]) == 0", "assert count_product_odd_pairs([]) == 0", "assert count_product_odd_pairs([1, 2, 3, 5, 7, 11]) == 10", "assert count_product_odd_pairs([2, 3, 5, 7, 11]) == 6", "assert count_product_odd_pairs([1, 2, 3, 4, 5, 6]) == 4", "assert count_product_odd_pairs([1, 3, 5, 7, 9, 11, 13]) == 21", "assert count_product_odd_pairs([2, 4, 6, 8, 10, 12]) == 0", "assert count_product_odd_pairs([1, 3, 5, 7, 9, 2, 4, 6, 8]) == 10", "assert count_product_odd_pairs([1, 3, 5, 2, 4, 6, 8, 10, 12, 14]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose xor is greater than a given number x.", "code": "def count_xor_greater_pairs(arr, x):\n    xorGreaterPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) > x:\n                xorGreaterPair += 1\n    return xorGreaterPair", "task_id": "166_6cf1fa62-4e98-4dac-82a4-647fbb00fc23", "test_setup_code": "", "test_list": ["assert count_xor_greater_pairs([1, 2, 3, 4], 1) == 4", "assert count_xor_greater_pairs([1, 2, 3, 4], 2) == 4", "assert count_xor_greater_pairs([1, 2, 3, 4], 3) == 2", "assert count_xor_greater_pairs([1, 2, 3, 4], 4) == 1", "assert count_xor_greater_pairs([1, 2, 3, 4], 5) == 1", "assert count_xor_greater_pairs([1, 2, 3, 4], 6) == 1", "assert count_xor_greater_pairs([1, 1, 1, 1], 0) == 0", "assert count_xor_greater_pairs([1, 1, 1, 1], 1) == 0", "assert count_xor_greater_pairs([0, 0, 0, 0], 0) == 0", "assert count_xor_greater_pairs([0, 0, 0, 0], -1) == 6", "assert count_xor_greater_pairs([5, 9, 7, 6], 8) == 2", "assert count_xor_greater_pairs([5, 9, 7, 6], 10) == 1", "assert count_xor_greater_pairs([5, 9, 7, 6], 15) == 0", "assert count_xor_greater_pairs([10, 20, 30, 40], 25) == 3", "assert count_xor_greater_pairs([10, 20, 30, 40], 50) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 3 greater than or equal to n.", "code": "def smallest_power_of_3(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 3\n    return power", "task_id": "167_5d748ba7-6add-44a3-bf3d-febe65ee939a", "test_setup_code": "", "test_list": ["assert smallest_power_of_3(1) == 1", "assert smallest_power_of_3(2) == 3", "assert smallest_power_of_3(3) == 3", "assert smallest_power_of_3(4) == 9", "assert smallest_power_of_3(8) == 9", "assert smallest_power_of_3(9) == 9", "assert smallest_power_of_3(10) == 27", "assert smallest_power_of_3(26) == 27", "assert smallest_power_of_3(27) == 27", "assert smallest_power_of_3(28) == 81", "assert smallest_power_of_3(80) == 81", "assert smallest_power_of_3(81) == 81", "assert smallest_power_of_3(82) == 243", "assert smallest_power_of_3(242) == 243", "assert smallest_power_of_3(243) == 243"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 5 greater than or equal to n.", "code": "def smallest_power_of_5(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 5\n    return power", "task_id": "167_d9e787cc-f2a2-4dcb-8cf7-9004a5e68e39", "test_setup_code": "", "test_list": ["assert smallest_power_of_5(1) == 1", "assert smallest_power_of_5(5) == 5", "assert smallest_power_of_5(6) == 25", "assert smallest_power_of_5(24) == 25", "assert smallest_power_of_5(25) == 25", "assert smallest_power_of_5(26) == 125", "assert smallest_power_of_5(124) == 125", "assert smallest_power_of_5(125) == 125", "assert smallest_power_of_5(126) == 625", "assert smallest_power_of_5(624) == 625", "assert smallest_power_of_5(625) == 625", "assert smallest_power_of_5(626) == 3125", "assert smallest_power_of_5(3124) == 3125", "assert smallest_power_of_5(3125) == 3125", "assert smallest_power_of_5(0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 10 greater than or equal to n.", "code": "def smallest_power_of_10(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 10\n    return power", "task_id": "167_1948a8e7-6c3a-4da3-95d1-85e17ae54f01", "test_setup_code": "", "test_list": ["assert smallest_power_of_10(1) == 1", "assert smallest_power_of_10(5) == 10", "assert smallest_power_of_10(10) == 10", "assert smallest_power_of_10(11) == 100", "assert smallest_power_of_10(50) == 100", "assert smallest_power_of_10(99) == 100", "assert smallest_power_of_10(100) == 100", "assert smallest_power_of_10(101) == 1000", "assert smallest_power_of_10(999) == 1000", "assert smallest_power_of_10(1000) == 1000", "assert smallest_power_of_10(1001) == 10000", "assert smallest_power_of_10(0) == 1", "assert smallest_power_of_10(-1) == 1", "assert smallest_power_of_10(123456) == 1000000", "assert smallest_power_of_10(999999999) == 1000000000"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 2 minus 1 greater than or equal to n.", "code": "def smallest_power_of_2_minus_1(n: int) -> int:\n    power = 1\n    while power - 1 < n:\n        power *= 2\n    return power - 1", "task_id": "167_2a719c0c-96b0-4f20-b4b1-63a20185680d", "test_setup_code": "", "test_list": ["assert smallest_power_of_2_minus_1(0) == 0", "assert smallest_power_of_2_minus_1(1) == 1", "assert smallest_power_of_2_minus_1(2) == 3", "assert smallest_power_of_2_minus_1(3) == 3", "assert smallest_power_of_2_minus_1(4) == 7", "assert smallest_power_of_2_minus_1(7) == 7", "assert smallest_power_of_2_minus_1(8) == 15", "assert smallest_power_of_2_minus_1(15) == 15", "assert smallest_power_of_2_minus_1(16) == 31", "assert smallest_power_of_2_minus_1(31) == 31", "assert smallest_power_of_2_minus_1(32) == 63", "assert smallest_power_of_2_minus_1(63) == 63", "assert smallest_power_of_2_minus_1(64) == 127", "assert smallest_power_of_2_minus_1(127) == 127", "assert smallest_power_of_2_minus_1(128) == 255"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 3 plus 1 greater than or equal to n.", "code": "def smallest_power_of_3_plus_1(n: int) -> int:\n    power = 1\n    while power + 1 < n:\n        power *= 3\n    return power + 1", "task_id": "167_18b67943-52f9-45e3-843d-168e03001bca", "test_setup_code": "", "test_list": ["assert smallest_power_of_3_plus_1(1) == 2", "assert smallest_power_of_3_plus_1(2) == 2", "assert smallest_power_of_3_plus_1(3) == 4", "assert smallest_power_of_3_plus_1(4) == 4", "assert smallest_power_of_3_plus_1(5) == 10", "assert smallest_power_of_3_plus_1(9) == 10", "assert smallest_power_of_3_plus_1(10) == 10", "assert smallest_power_of_3_plus_1(11) == 28", "assert smallest_power_of_3_plus_1(27) == 28", "assert smallest_power_of_3_plus_1(28) == 28", "assert smallest_power_of_3_plus_1(29) == 82", "assert smallest_power_of_3_plus_1(81) == 82", "assert smallest_power_of_3_plus_1(82) == 82", "assert smallest_power_of_3_plus_1(83) == 244", "assert smallest_power_of_3_plus_1(243) == 244"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 4 greater than or equal to n.", "code": "def smallest_power_of_4(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 4\n    return power", "task_id": "167_4ff856ed-fef8-444c-aeeb-db344d17063f", "test_setup_code": "", "test_list": ["assert smallest_power_of_4(1) == 1", "assert smallest_power_of_4(2) == 4", "assert smallest_power_of_4(3) == 4", "assert smallest_power_of_4(4) == 4", "assert smallest_power_of_4(5) == 16", "assert smallest_power_of_4(15) == 16", "assert smallest_power_of_4(16) == 16", "assert smallest_power_of_4(17) == 64", "assert smallest_power_of_4(63) == 64", "assert smallest_power_of_4(64) == 64", "assert smallest_power_of_4(65) == 256", "assert smallest_power_of_4(255) == 256", "assert smallest_power_of_4(256) == 256", "assert smallest_power_of_4(257) == 1024", "assert smallest_power_of_4(1023) == 1024"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 6 greater than or equal to n.", "code": "def smallest_power_of_6(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 6\n    return power", "task_id": "167_19ee3bc8-c622-4c43-9cc2-162d307b60cc", "test_setup_code": "", "test_list": ["assert smallest_power_of_6(1) == 1", "assert smallest_power_of_6(2) == 6", "assert smallest_power_of_6(6) == 6", "assert smallest_power_of_6(7) == 36", "assert smallest_power_of_6(35) == 36", "assert smallest_power_of_6(36) == 36", "assert smallest_power_of_6(37) == 216", "assert smallest_power_of_6(100) == 216", "assert smallest_power_of_6(216) == 216", "assert smallest_power_of_6(217) == 1296", "assert smallest_power_of_6(1000) == 1296", "assert smallest_power_of_6(1296) == 1296", "assert smallest_power_of_6(1297) == 7776", "assert smallest_power_of_6(5000) == 7776", "assert smallest_power_of_6(7776) == 7776"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 7 greater than or equal to n.", "code": "def smallest_power_of_7(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 7\n    return power", "task_id": "167_09166e36-674a-46fa-9253-ed0b5912cb82", "test_setup_code": "", "test_list": ["assert smallest_power_of_7(1) == 1", "assert smallest_power_of_7(2) == 7", "assert smallest_power_of_7(7) == 7", "assert smallest_power_of_7(8) == 49", "assert smallest_power_of_7(49) == 49", "assert smallest_power_of_7(50) == 343", "assert smallest_power_of_7(0) == 1", "assert smallest_power_of_7(343) == 343", "assert smallest_power_of_7(344) == 2401", "assert smallest_power_of_7(2401) == 2401", "assert smallest_power_of_7(2402) == 16807", "assert smallest_power_of_7(16807) == 16807", "assert smallest_power_of_7(16808) == 117649", "assert smallest_power_of_7(117649) == 117649", "assert smallest_power_of_7(117650) == 823543"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 8 greater than or equal to n.", "code": "def smallest_power_of_8(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 8\n    return power", "task_id": "167_a075045d-0a8c-4002-abdf-2c53aa2879e1", "test_setup_code": "", "test_list": ["assert smallest_power_of_8(1) == 1", "assert smallest_power_of_8(8) == 8", "assert smallest_power_of_8(9) == 64", "assert smallest_power_of_8(64) == 64", "assert smallest_power_of_8(65) == 512", "assert smallest_power_of_8(512) == 512", "assert smallest_power_of_8(513) == 4096", "assert smallest_power_of_8(0) == 1", "assert smallest_power_of_8(-1) == 1", "assert smallest_power_of_8(7) == 8", "assert smallest_power_of_8(100) == 512", "assert smallest_power_of_8(4095) == 4096", "assert smallest_power_of_8(4096) == 4096", "assert smallest_power_of_8(4097) == 32768", "assert smallest_power_of_8(32768) == 32768"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 9 greater than or equal to n.", "code": "def smallest_power_of_9(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 9\n    return power", "task_id": "167_8dfec223-08c5-4859-922b-d252e07f6acb", "test_setup_code": "", "test_list": ["assert smallest_power_of_9(1) == 1", "assert smallest_power_of_9(2) == 9", "assert smallest_power_of_9(8) == 9", "assert smallest_power_of_9(9) == 9", "assert smallest_power_of_9(10) == 81", "assert smallest_power_of_9(80) == 81", "assert smallest_power_of_9(81) == 81", "assert smallest_power_of_9(82) == 729", "assert smallest_power_of_9(728) == 729", "assert smallest_power_of_9(729) == 729", "assert smallest_power_of_9(730) == 6561", "assert smallest_power_of_9(6560) == 6561", "assert smallest_power_of_9(6561) == 6561", "assert smallest_power_of_9(6562) == 59049", "assert smallest_power_of_9(59048) == 59049"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given array.", "code": "def count_even_numbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count", "task_id": "168_54cc837a-5cfb-4011-a207-7b25cd724ac8", "test_setup_code": "", "test_list": ["assert count_even_numbers([1, 2, 3, 4, 5, 6]) == 3", "assert count_even_numbers([2, 4, 6, 8, 10]) == 5", "assert count_even_numbers([1, 3, 5, 7, 9]) == 0", "assert count_even_numbers([]) == 0", "assert count_even_numbers([0, -2, -4, -6]) == 4", "assert count_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_even_numbers([11, 13, 15, 17, 19, 21]) == 0", "assert count_even_numbers([100, 200, 300, 400, 500]) == 5", "assert count_even_numbers([1, 1, 1, 1, 1]) == 0", "assert count_even_numbers([2, 2, 2, 2, 2]) == 5", "assert count_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10", "assert count_even_numbers([21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 5", "assert count_even_numbers([1, -1, 2, -2, 3, -3, 4, -4]) == 4", "assert count_even_numbers([0]) == 1", "assert count_even_numbers([-1, -3, -5, -7, -9]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "168_feb82eee-0467-4a17-bc47-e60fdc602c3b", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('aeiou') == 5", "assert count_vowels('AEIOU') == 5", "assert count_vowels('Python') == 1", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('aAeEiIoOuU') == 10", "assert count_vowels('12345') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('ThIs Is A tEsT') == 4", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit.') == 17", "assert count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all numbers in a given array.", "code": "def sum_of_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total", "task_id": "168_71a499c0-8ddf-417f-bc7a-5ec76f4de1c4", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([]) == 0", "assert sum_of_squares([0]) == 0", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([1, -1]) == 2", "assert sum_of_squares([10, 20, 30]) == 1400", "assert sum_of_squares([-5, 0, 5]) == 50", "assert sum_of_squares([2, 2, 2, 2]) == 16", "assert sum_of_squares([1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([-10, -5, 0, 5, 10]) == 250", "assert sum_of_squares([0.5, 1.5]) == 2.5", "assert sum_of_squares([-0.5, 0.5]) == 0.5", "assert sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 385", "assert sum_of_squares(list(range(-5, 6))) == 110"], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a character in a given string.", "code": "def count_occurrences(s, ch):\n    count = 0\n    for char in s:\n        if char == ch:\n            count += 1\n    return count", "task_id": "168_f92d9955-72e8-4b10-89e1-7d3973a2dbf5", "test_setup_code": "", "test_list": ["assert count_occurrences('hello', 'l') == 2", "assert count_occurrences('hello', 'o') == 1", "assert count_occurrences('hello', 'h') == 1", "assert count_occurrences('hello', 'e') == 1", "assert count_occurrences('hello', 'x') == 0", "assert count_occurrences('', 'a') == 0", "assert count_occurrences('aaaaa', 'a') == 5", "assert count_occurrences('aaaaa', 'b') == 0", "assert count_occurrences('abcabcabc', 'a') == 3", "assert count_occurrences('abcabcabc', 'b') == 3", "assert count_occurrences('abcabcabc', 'c') == 3", "assert count_occurrences('abcabcabc', 'd') == 0", "assert count_occurrences('123123123', '1') == 3", "assert count_occurrences('123123123', '4') == 0", "assert count_occurrences('!@#$%^&*()!@#$', '!') == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum number in a given array.", "code": "def find_max(arr):\n    if not arr:\n        return None\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num", "task_id": "168_ff2f2c36-cfdd-45ed-a895-36410ce940b5", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([5, 4, 3, 2, 1]) == 5", "assert find_max([1, 5, 3, 9, 2]) == 9", "assert find_max([-1, -2, -3, -4, -5]) == -1", "assert find_max([0, 0, 0, 0, 0]) == 0", "assert find_max([1]) == 1", "assert find_max([-10, 0, 10]) == 10", "assert find_max([100, 100, 100]) == 100", "assert find_max([1.5, 2.5, 3.5, 4.5]) == 4.5", "assert find_max([-1.5, -2.5, -3.5, -4.5]) == -1.5", "assert find_max([999999, 1000000, 999998]) == 1000000", "assert find_max([-999999, -1000000, -999998]) == -999998", "assert find_max([0]) == 0", "assert find_max([]) == None", "assert find_max([-5, -5, -5, -5]) == -5"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "168_3ba19c04-5ad1-473c-b364-2585ec57561c", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('python') == 'nohtyp'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('12345') == '54321'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('A man, a plan, a canal: Panama') == 'amanaP :lanac a ,nalp a ,nam A'", "assert reverse_string('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_string('Hello, World!') == '!dlroW ,olleH'", "assert reverse_string('  spaces  ') == '  secaps  '", "assert reverse_string('123 456 789') == '987 654 321'", "assert reverse_string('Python Programming') == 'gnimmargorP nohtyP'", "assert reverse_string('a b c d e f g') == 'g f e d c b a'", "assert reverse_string('Aa Bb Cc Dd') == 'dD cC bB aA'"], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s):\n    return len(s.split())", "task_id": "168_fd968ba6-8cb8-4e03-9387-6c309eccd037", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test') == 4", "assert count_words('   Leading and trailing spaces   ') == 4", "assert count_words('Multiple    spaces between words') == 4", "assert count_words('Word') == 1", "assert count_words('Another test case with more words') == 6", "assert count_words('123 456 789') == 3", "assert count_words('Special characters !@# $%^ &*()') == 5", "assert count_words('New\nline\ncharacters') == 3", "assert count_words('Tab\tseparated\twords') == 3", "assert count_words('Mixed whitespace \t\n characters') == 3", "assert count_words('SingleWord') == 1", "assert count_words('Punctuation, should not affect. count!') == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "168_b12604a6-24ea-4343-b457-ba6d16b26c42", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(999999999) == 81", "assert sum_of_digits(1) == 1", "assert sum_of_digits(10) == 1", "assert sum_of_digits(111111111) == 9", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(5000) == 5", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(222222222) == 18", "assert sum_of_digits(4444) == 16", "assert sum_of_digits(88888888) == 64", "assert sum_of_digits(13579) == 25"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "168_de22b6c3-f5b0-4510-8ac8-504debaa2807", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('racecars') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon no melon'.replace(' ', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a given array.", "code": "def count_positives(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "task_id": "168_2cc83df7-1c05-4807-a50a-baab34c38713", "test_setup_code": "", "test_list": ["assert count_positives([1, -2, 3, 4, -5]) == 3", "assert count_positives([-1, -2, -3, -4, -5]) == 0", "assert count_positives([0, 0, 0, 0, 0]) == 0", "assert count_positives([1, 2, 3, 4, 5]) == 5", "assert count_positives([]) == 0", "assert count_positives([100, 200, 300, 400, 500]) == 5", "assert count_positives([-100, -200, -300, -400, -500]) == 0", "assert count_positives([0, 1, -1, 2, -2, 3, -3]) == 3", "assert count_positives([1]) == 1", "assert count_positives([-1]) == 0", "assert count_positives([0]) == 0", "assert count_positives([1, 1, 1, 1, 1]) == 5", "assert count_positives([-1, -1, -1, -1, -1]) == 0", "assert count_positives([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 5", "assert count_positives([1, 2, 3, -1, -2, -3, 0]) == 3"], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Fibonacci number.", "code": "def fibonacci(n):\n\tif n <= 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\ta, b = 0, 1\n\tfor _ in range(2, n+1):\n\t\ta, b = b, a + b\n\treturn b", "task_id": "169_f7c24756-052f-40a4-ae7d-ac2eeb2ac703", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(20) == 6765", "assert fibonacci(30) == 832040", "assert fibonacci(50) == 12586269025", "assert fibonacci(-1) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Tribonacci number.", "code": "def tribonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\ta, b, c = 0, 1, 1\n\tfor _ in range(3, n+1):\n\t\ta, b, c = b, c, a + b + c\n\treturn c", "task_id": "169_0f64808e-5d44-4820-9fb1-2a03664e3320", "test_setup_code": "", "test_list": ["assert tribonacci(0) == 0", "assert tribonacci(1) == 1", "assert tribonacci(2) == 1", "assert tribonacci(3) == 2", "assert tribonacci(4) == 4", "assert tribonacci(5) == 7", "assert tribonacci(6) == 13", "assert tribonacci(7) == 24", "assert tribonacci(8) == 44", "assert tribonacci(9) == 81", "assert tribonacci(10) == 149", "assert tribonacci(20) == 35890", "assert tribonacci(25) == 1389537", "assert tribonacci(30) == 615693474", "assert tribonacci(35) == 272809183135"], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Lucas number.", "code": "def lucas(n):\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\ta, b = 2, 1\n\tfor _ in range(2, n+1):\n\t\ta, b = b, a + b\n\treturn b", "task_id": "169_c8d5fcb6-01b6-42b4-8550-99dd99ee13a4", "test_setup_code": "", "test_list": ["assert lucas(0) == 2", "assert lucas(1) == 1", "assert lucas(2) == 3", "assert lucas(3) == 4", "assert lucas(4) == 7", "assert lucas(5) == 11", "assert lucas(6) == 18", "assert lucas(7) == 29", "assert lucas(8) == 47", "assert lucas(9) == 76", "assert lucas(10) == 123", "assert lucas(15) == 1364", "assert lucas(20) == 15127", "assert lucas(25) == 167761", "assert lucas(30) == 1860498"], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a number n.", "code": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\tresult = 1\n\tfor i in range(1, n+1):\n\t\tresult *= i\n\treturn result", "task_id": "169_6fde2f3e-efad-4777-a10f-ee0a78f1632e", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(12) == 479001600", "assert factorial(15) == 1307674368000", "assert factorial(20) == 2432902008176640000", "assert factorial(25) == 15511210043330985984000000"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n\treturn sum(i*i for i in range(1, n+1))", "task_id": "169_0e56644c-ccd4-4435-9e33-0f79f36476b8", "test_setup_code": "", "test_list": ["assert sum_of_squares(1) == 1", "assert sum_of_squares(2) == 5", "assert sum_of_squares(3) == 14", "assert sum_of_squares(4) == 30", "assert sum_of_squares(5) == 55", "assert sum_of_squares(10) == 385", "assert sum_of_squares(15) == 1240", "assert sum_of_squares(20) == 2870", "assert sum_of_squares(25) == 5525", "assert sum_of_squares(30) == 9455", "assert sum_of_squares(0) == 0", "assert sum_of_squares(50) == 42925", "assert sum_of_squares(100) == 338350", "assert sum_of_squares(7) == 140", "assert sum_of_squares(12) == 650"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n\treturn sum(i**3 for i in range(1, n+1))", "task_id": "169_5954006d-58a7-4fd3-a119-85c17d0b2166", "test_setup_code": "", "test_list": ["assert sum_of_cubes(1) == 1", "assert sum_of_cubes(2) == 9", "assert sum_of_cubes(3) == 36", "assert sum_of_cubes(4) == 100", "assert sum_of_cubes(5) == 225", "assert sum_of_cubes(6) == 441", "assert sum_of_cubes(7) == 784", "assert sum_of_cubes(8) == 1296", "assert sum_of_cubes(9) == 2025", "assert sum_of_cubes(10) == 3025", "assert sum_of_cubes(0) == 0", "assert sum_of_cubes(15) == 14400", "assert sum_of_cubes(20) == 44100", "assert sum_of_cubes(50) == 1625625", "assert sum_of_cubes(100) == 25502500"], "challenge_test_list": []}
{"text": "Write a function to check if a number n is prime.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True", "task_id": "169_f976f96e-fdfa-425f-bac7-1078b2bf3bf3", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(25) == False", "assert is_prime(29) == True", "assert is_prime(31) == True", "assert is_prime(37) == True"], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a", "task_id": "169_4f0f7656-0e75-4de9-a0b6-7d460b47ea08", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(54, 24) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(1, 1) == 1", "assert gcd(1000000, 2) == 2", "assert gcd(123456, 789012) == 6", "assert gcd(270, 192) == 6", "assert gcd(17, 19) == 1", "assert gcd(20, 30) == 10", "assert gcd(35, 10) == 5", "assert gcd(9999991, 9999991) == 9999991", "assert gcd(56, 98) == 14"], "challenge_test_list": []}
{"text": "Write a function to calculate the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a, b):\n\tdef gcd(a, b):\n\t\twhile b:\n\t\t\ta, b = b, a % b\n\t\treturn a\n\treturn abs(a*b) // gcd(a, b)", "task_id": "169_70eb92a4-e9b1-416b-bbc8-cb0429627d5a", "test_setup_code": "", "test_list": ["assert lcm(1, 1) == 1", "assert lcm(0, 1) == 0", "assert lcm(1, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(2, 3) == 6", "assert lcm(4, 6) == 12", "assert lcm(7, 5) == 35", "assert lcm(21, 6) == 42", "assert lcm(8, 9) == 72", "assert lcm(15, 20) == 60", "assert lcm(100, 25) == 100", "assert lcm(13, 17) == 221", "assert lcm(14, 28) == 28", "assert lcm(9, 12) == 36", "assert lcm(11, 13) == 143"], "challenge_test_list": []}
{"text": "Write a function to generate the Collatz sequence starting from a number n.", "code": "def collatz_sequence(n):\n\tsequence = []\n\twhile n != 1:\n\t\tsequence.append(n)\n\t\tif n % 2 == 0:\n\t\t\tn = n // 2\n\t\telse:\n\t\t\tn = 3 * n + 1\n\tsequence.append(1)\n\treturn sequence", "task_id": "169_2315113c-0c94-4382-a5e7-470256a1a7e0", "test_setup_code": "", "test_list": ["assert collatz_sequence(1) == [1]", "assert collatz_sequence(2) == [2, 1]", "assert collatz_sequence(3) == [3, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(4) == [4, 2, 1]", "assert collatz_sequence(5) == [5, 16, 8, 4, 2, 1]", "assert collatz_sequence(6) == [6, 3, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(7) == [7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(8) == [8, 4, 2, 1]", "assert collatz_sequence(9) == [9, 28, 14, 7, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(10) == [10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(11) == [11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(12) == [12, 6, 3, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(15) == [15, 46, 23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(27) == [27, 82, 41, 124, 62, 31, 94, 47, 142, 71, 214, 107, 322, 161, 484, 242, 121, 364, 182, 91, 274, 137, 412, 206, 103, 310, 155, 466, 233, 700, 350, 175, 526, 263, 790, 395, 1186, 593, 1780, 890, 445, 1336, 668, 334, 167, 502, 251, 754, 377, 1132, 566, 283, 850, 425, 1276, 638, 319, 958, 479, 1438, 719, 2158, 1079, 3238, 1619, 4858, 2429, 7288, 3644, 1822, 911, 2734, 1367, 4102, 2051, 6154, 3077, 9232, 4616, 2308, 1154, 577, 1732, 866, 433, 1300, 650, 325, 976, 488, 244, 122, 61, 184, 92, 46, 23, 70, 35, 106, 53, 160, 80, 40, 20, 10, 5, 16, 8, 4, 2, 1]", "assert collatz_sequence(100) == [100, 50, 25, 76, 38, 19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "171_f3841d70-df3a-4cd0-9d2b-15c619695f50", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 5) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(0, 0) == 0.0", "assert area_triangle(3, 4) == 6.0", "assert area_triangle(1.5, 2.5) == 1.875", "assert area_triangle(100, 200) == 10000.0", "assert area_triangle(0.1, 0.2) == 0.01", "assert area_triangle(123.456, 789.123) == 48718.383", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(1e-10, 1e-10) == 5e-21", "assert area_triangle(1e10, 1e10) == 5e19", "assert area_triangle(1.23456789, 9.87654321) == 6.096631073", "assert area_triangle(50, 50) == 1250.0", "assert area_triangle(7, 3) == 10.5"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circumference_circle(radius: float) -> float:\n    return 2 * math.pi * radius", "task_id": "171_e16d9967-0221-4c1a-9741-ccaf5d18c1c0", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 2 * math.pi", "assert circumference_circle(0) == 0", "assert circumference_circle(2.5) == 2 * math.pi * 2.5", "assert circumference_circle(-1) == -2 * math.pi", "assert circumference_circle(100) == 2 * math.pi * 100", "assert circumference_circle(0.1) == 2 * math.pi * 0.1", "assert circumference_circle(3.14159) == 2 * math.pi * 3.14159", "assert circumference_circle(1e-10) == 2 * math.pi * 1e-10", "assert circumference_circle(1e10) == 2 * math.pi * 1e10", "assert circumference_circle(0.333) == 2 * math.pi * 0.333", "assert circumference_circle(7) == 2 * math.pi * 7", "assert circumference_circle(0.5) == 2 * math.pi * 0.5", "assert circumference_circle(1.23456789) == 2 * math.pi * 1.23456789", "assert circumference_circle(50) == 2 * math.pi * 50", "assert circumference_circle(0.0001) == 2 * math.pi * 0.0001"], "challenge_test_list": []}
{"text": "Write a function to find the area of a square given its side length.", "code": "def area_square(side: float) -> float:\n    return side * side", "task_id": "171_e4bcd30d-f6eb-4ea7-ad14-994020d0ec2d", "test_setup_code": "", "test_list": ["assert area_square(0) == 0", "assert area_square(1) == 1", "assert area_square(2) == 4", "assert area_square(3.5) == 12.25", "assert area_square(-1) == 1", "assert area_square(10) == 100", "assert area_square(100) == 10000", "assert area_square(0.1) == 0.01", "assert area_square(0.01) == 0.0001", "assert area_square(-3.5) == 12.25", "assert area_square(1.5) == 2.25", "assert area_square(12345) == 152399025", "assert area_square(0.5) == 0.25", "assert area_square(-0.5) == 0.25", "assert area_square(999) == 998001"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube given its side length.", "code": "def volume_cube(side: float) -> float:\n    return side ** 3", "task_id": "171_cfe3abf1-ea01-4845-b3f3-f579e40ee475", "test_setup_code": "", "test_list": ["assert volume_cube(1) == 1", "assert volume_cube(0) == 0", "assert volume_cube(2) == 8", "assert volume_cube(3) == 27", "assert volume_cube(0.5) == 0.125", "assert volume_cube(-1) == -1", "assert volume_cube(10) == 1000", "assert volume_cube(100) == 1000000", "assert volume_cube(0.1) == 0.001", "assert volume_cube(-0.5) == -0.125", "assert volume_cube(1.5) == 3.375", "assert volume_cube(2.5) == 15.625", "assert volume_cube(0.25) == 0.015625", "assert volume_cube(-2) == -8", "assert volume_cube(0.01) == 0.000001"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle given its length and width.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "171_ae237798-18ce-4443-b1c3-ec8e3da9d2e7", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(10, 5) == 30", "assert perimeter_rectangle(7.5, 2.5) == 20", "assert perimeter_rectangle(100, 200) == 600", "assert perimeter_rectangle(0, 5) == 10", "assert perimeter_rectangle(5, 0) == 10", "assert perimeter_rectangle(1.5, 2.5) == 8", "assert perimeter_rectangle(3.333, 4.444) == 15.554", "assert perimeter_rectangle(1000, 1000) == 4000", "assert perimeter_rectangle(0.1, 0.2) == 0.6", "assert perimeter_rectangle(123456, 654321) == 1555554", "assert perimeter_rectangle(1e-5, 1e-5) == 4e-5", "assert perimeter_rectangle(1e5, 1e5) == 400000"], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef area_circle(radius: float) -> float:\n    return math.pi * radius ** 2", "task_id": "171_9f7a6c3a-6067-4b36-9c32-836927b72a6e", "test_setup_code": "", "test_list": ["assert area_circle(0) == 0.0", "assert area_circle(1) == 3.141592653589793", "assert area_circle(2) == 12.566370614359172", "assert area_circle(0.5) == 0.7853981633974483", "assert area_circle(10) == 314.1592653589793", "assert area_circle(100) == 31415.926535897932", "assert area_circle(1.5) == 7.0685834705770345", "assert area_circle(3.14159) == 31.006224300558934", "assert area_circle(0.1) == 0.031415926535897934", "assert area_circle(0.01) == 0.0003141592653589793", "assert area_circle(0.001) == 3.141592653589793e-06", "assert area_circle(123.456) == 47882.83183070884", "assert area_circle(1e-10) == 3.1415926535897936e-20", "assert area_circle(1e10) == 3.1415926535897933e+20", "assert area_circle(7.5) == 176.71458676442586"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "import math\ndef volume_sphere(radius: float) -> float:\n    return (4/3) * math.pi * radius ** 3", "task_id": "171_9c3ff05f-f7cf-4fea-ad03-b41adaf7e438", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.1887902047863905", "assert volume_sphere(0) == 0.0", "assert volume_sphere(2) == 33.510321638291124", "assert volume_sphere(0.5) == 0.5235987755982988", "assert volume_sphere(10) == 4188.790204786391", "assert volume_sphere(100) == 4188790.2047863905", "assert volume_sphere(3.5) == 179.59438003021648", "assert volume_sphere(0.1) == 0.004188790204786391", "assert volume_sphere(7.25) == 1593.495437213117", "assert volume_sphere(0.01) == 4.188790204786391e-06", "assert volume_sphere(1.234) == 7.881947554728406", "assert volume_sphere(5.678) == 766.4385564515737", "assert volume_sphere(0.333) == 0.1545400393372926", "assert volume_sphere(2.718) == 84.00984562628784", "assert volume_sphere(4.567) == 398.2203308458799"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given the lengths of its three sides.", "code": "def perimeter_triangle(a: float, b: float, c: float) -> float:\n    return a + b + c", "task_id": "171_90c052e2-61ee-45dd-9eb2-ddca4c9edb2e", "test_setup_code": "", "test_list": ["assert perimeter_triangle(3, 4, 5) == 12", "assert perimeter_triangle(1, 1, 1) == 3", "assert perimeter_triangle(5, 12, 13) == 30", "assert perimeter_triangle(8, 15, 17) == 40", "assert perimeter_triangle(0.5, 0.5, 0.5) == 1.5", "assert perimeter_triangle(1.5, 2.5, 3.5) == 7.5", "assert perimeter_triangle(10, 10, 10) == 30", "assert perimeter_triangle(7, 24, 25) == 56", "assert perimeter_triangle(0.1, 0.2, 0.3) == 0.6", "assert perimeter_triangle(100, 200, 300) == 600", "assert perimeter_triangle(2.5, 3.5, 5.5) == 11.5", "assert perimeter_triangle(9, 40, 41) == 90", "assert perimeter_triangle(6, 8, 10) == 24", "assert perimeter_triangle(3.14, 4.25, 5.67) == 13.06", "assert perimeter_triangle(0.01, 0.02, 0.03) == 0.06"], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base: float, height: float) -> float:\n    return base * height", "task_id": "171_00c8c654-b2b9-4d10-a463-e77e098df03d", "test_setup_code": "", "test_list": ["assert area_parallelogram(5, 10) == 50", "assert area_parallelogram(0, 10) == 0", "assert area_parallelogram(10, 0) == 0", "assert area_parallelogram(7.5, 3.2) == 24.0", "assert area_parallelogram(1, 1) == 1", "assert area_parallelogram(100, 200) == 20000", "assert area_parallelogram(0.5, 0.5) == 0.25", "assert area_parallelogram(123.456, 78.9) == 9741.1584", "assert area_parallelogram(1e-10, 1e10) == 1.0", "assert area_parallelogram(1e10, 1e-10) == 1.0", "assert area_parallelogram(3.14159, 2.71828) == 8.5397212652", "assert area_parallelogram(1, 1000000) == 1000000", "assert area_parallelogram(1000000, 1) == 1000000", "assert area_parallelogram(0.1, 0.2) == 0.02", "assert area_parallelogram(99999, 88888) == 8888711112"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube given its side length.", "code": "def surface_area_cube(side: float) -> float:\n    return 6 * side ** 2", "task_id": "171_6eac4894-ae8d-4015-bc4f-1de038628be2", "test_setup_code": "", "test_list": ["assert surface_area_cube(1) == 6.0", "assert surface_area_cube(0) == 0.0", "assert surface_area_cube(2) == 24.0", "assert surface_area_cube(0.5) == 1.5", "assert surface_area_cube(10) == 600.0", "assert surface_area_cube(3.5) == 73.5", "assert surface_area_cube(100) == 60000.0", "assert surface_area_cube(0.1) == 0.06", "assert surface_area_cube(2.5) == 37.5", "assert surface_area_cube(7) == 294.0", "assert surface_area_cube(0.01) == 0.0006", "assert surface_area_cube(15) == 1350.0", "assert surface_area_cube(0.25) == 0.375", "assert surface_area_cube(20) == 2400.0", "assert surface_area_cube(50) == 15000.0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers at even indices in a list.", "code": "def sum_even_indices(list1):\n    sum_even = 0\n    for i in range(0, len(list1), 2):\n        sum_even += list1[i]\n    return sum_even", "task_id": "170_81169a88-b9f1-4078-9a84-980ec016578b", "test_setup_code": "", "test_list": ["assert sum_even_indices([1, 2, 3, 4, 5]) == 9", "assert sum_even_indices([10, 20, 30, 40, 50]) == 90", "assert sum_even_indices([]) == 0", "assert sum_even_indices([5]) == 5", "assert sum_even_indices([1, 2]) == 1", "assert sum_even_indices([1, 2, 3]) == 4", "assert sum_even_indices([1, 2, 3, 4]) == 4", "assert sum_even_indices([-1, -2, -3, -4, -5]) == -9", "assert sum_even_indices([0, 0, 0, 0, 0]) == 0", "assert sum_even_indices([100]) == 100", "assert sum_even_indices([1, 1, 1, 1, 1, 1]) == 3", "assert sum_even_indices([10, 20]) == 10", "assert sum_even_indices([5, 10, 15, 20, 25, 30]) == 45", "assert sum_even_indices([-10, 20, -30, 40, -50]) == -90", "assert sum_even_indices([0.5, 1.5, 2.5, 3.5]) == 3.0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers at odd indices in a list.", "code": "def sum_odd_indices(list1):\n    sum_odd = 0\n    for i in range(1, len(list1), 2):\n        sum_odd += list1[i]\n    return sum_odd", "task_id": "170_ad3d58ab-5b55-4268-b288-4eb3031a7b5c", "test_setup_code": "", "test_list": ["assert sum_odd_indices([1, 2, 3, 4, 5, 6]) == 12", "assert sum_odd_indices([10, 20, 30, 40, 50, 60, 70]) == 120", "assert sum_odd_indices([0, 1, 0, 1, 0, 1, 0, 1]) == 4", "assert sum_odd_indices([1]) == 0", "assert sum_odd_indices([1, 2]) == 2", "assert sum_odd_indices([-1, -2, -3, -4, -5, -6]) == -12", "assert sum_odd_indices([100, 200, 300, 400, 500, 600]) == 1200", "assert sum_odd_indices([]) == 0", "assert sum_odd_indices([5, 5, 5, 5, 5, 5, 5]) == 15", "assert sum_odd_indices([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert sum_odd_indices([1, -1, 1, -1, 1, -1, 1, -1]) == -4", "assert sum_odd_indices([1, 0, 1, 0, 1, 0, 1, 0]) == 0", "assert sum_odd_indices([1, 100, 1, 100, 1, 100, 1, 100]) == 400", "assert sum_odd_indices([2, 4, 6, 8, 10, 12, 14, 16]) == 40", "assert sum_odd_indices([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers in a list excluding the indices of a specified range.", "code": "def sum_list_excluding_range(list1, m, n):\n    sum_excluding = 0\n    for i in range(len(list1)):\n        if i < m or i > n:\n            sum_excluding += list1[i]\n    return sum_excluding", "task_id": "170_43e44669-7c6e-44c7-8a7d-c5da777f3189", "test_setup_code": "", "test_list": ["assert sum_list_excluding_range([1, 2, 3, 4, 5], 1, 3) == 6", "assert sum_list_excluding_range([10, 20, 30, 40, 50], 0, 2) == 90", "assert sum_list_excluding_range([5, 10, 15, 20, 25], 2, 2) == 60", "assert sum_list_excluding_range([1, 2, 3, 4, 5], 0, 4) == 0", "assert sum_list_excluding_range([1, 2, 3, 4, 5], 4, 4) == 10", "assert sum_list_excluding_range([], 0, 0) == 0", "assert sum_list_excluding_range([100], 0, 0) == 0", "assert sum_list_excluding_range([100], 1, 1) == 100", "assert sum_list_excluding_range([10, 20, 30, 40, 50], 5, 10) == 150", "assert sum_list_excluding_range([-1, -2, -3, -4, -5], 1, 3) == -6", "assert sum_list_excluding_range([0, 0, 0, 0, 0], 1, 3) == 0", "assert sum_list_excluding_range([1, 2, 3, 4, 5], 3, 1) == 15", "assert sum_list_excluding_range([5, 4, 3, 2, 1], 0, 0) == 10", "assert sum_list_excluding_range([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 7) == 18", "assert sum_list_excluding_range([1.5, 2.5, 3.5, 4.5, 5.5], 1, 3) == 7.0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of the numbers in a list.", "code": "def sum_of_squares(list1):\n    sum_squares = 0\n    for num in list1:\n        sum_squares += num ** 2\n    return sum_squares", "task_id": "170_dcceb58a-8258-4558-8987-e105eb84d1c9", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([0, 0, 0]) == 0", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([]) == 0", "assert sum_of_squares([10, 20, 30]) == 1400", "assert sum_of_squares([1, -1, 1, -1]) == 4", "assert sum_of_squares([100, 200, 300]) == 140000", "assert sum_of_squares([1.5, 2.5, 3.5]) == 20.75", "assert sum_of_squares([1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([-10, 10]) == 200", "assert sum_of_squares([0.1, 0.2, 0.3]) == 0.14", "assert sum_of_squares([2, 4, 6, 8, 10]) == 220", "assert sum_of_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_squares([3, 6, 9]) == 126"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of the numbers in a list.", "code": "def sum_of_cubes(list1):\n    sum_cubes = 0\n    for num in list1:\n        sum_cubes += num ** 3\n    return sum_cubes", "task_id": "170_ed65f78c-9387-4f7e-bcad-268796df1d9d", "test_setup_code": "", "test_list": ["assert sum_of_cubes([1, 2, 3]) == 36", "assert sum_of_cubes([0, 0, 0]) == 0", "assert sum_of_cubes([-1, -2, -3]) == -36", "assert sum_of_cubes([5]) == 125", "assert sum_of_cubes([]) == 0", "assert sum_of_cubes([10, 20, 30]) == 27000", "assert sum_of_cubes([1, -1, 1, -1]) == 0", "assert sum_of_cubes([2, 4, 6, 8]) == 936", "assert sum_of_cubes([-5, 5]) == 0", "assert sum_of_cubes([100]) == 1000000", "assert sum_of_cubes([1, 2, 3, 4, 5]) == 225", "assert sum_of_cubes([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_cubes([3, 3, 3]) == 81", "assert sum_of_cubes([7, 7, 7, 7]) == 1372", "assert sum_of_cubes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3025"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the absolute values of the numbers in a list.", "code": "def sum_of_absolute_values(list1):\n    sum_absolute = 0\n    for num in list1:\n        sum_absolute += abs(num)\n    return sum_absolute", "task_id": "170_91af8646-3466-439d-842f-ba640431f33a", "test_setup_code": "", "test_list": ["assert sum_of_absolute_values([1, -2, 3, -4, 5]) == 15", "assert sum_of_absolute_values([-1, -2, -3, -4, -5]) == 15", "assert sum_of_absolute_values([0, 0, 0, 0, 0]) == 0", "assert sum_of_absolute_values([10, -10, 10, -10, 10]) == 50", "assert sum_of_absolute_values([100, -200, 300, -400, 500]) == 1500", "assert sum_of_absolute_values([1]) == 1", "assert sum_of_absolute_values([-1]) == 1", "assert sum_of_absolute_values([]) == 0", "assert sum_of_absolute_values([0, -1, 2, -3, 4, -5]) == 15", "assert sum_of_absolute_values([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_of_absolute_values([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 55", "assert sum_of_absolute_values([0]) == 0", "assert sum_of_absolute_values([999, -999]) == 1998", "assert sum_of_absolute_values([123456789, -123456789]) == 246913578", "assert sum_of_absolute_values([-1000000, 1000000, -1000000, 1000000]) == 4000000"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the positive numbers in a list.", "code": "def sum_of_positive_numbers(list1):\n    sum_positive = 0\n    for num in list1:\n        if num > 0:\n            sum_positive += num\n    return sum_positive", "task_id": "170_6befd08f-c033-47c2-b5d1-b1bb2136a28d", "test_setup_code": "", "test_list": ["assert sum_of_positive_numbers([1, -2, 3, 4, -5]) == 8", "assert sum_of_positive_numbers([-1, -2, -3, -4, -5]) == 0", "assert sum_of_positive_numbers([0, 0, 0, 0, 0]) == 0", "assert sum_of_positive_numbers([10, 20, 30, 40, 50]) == 150", "assert sum_of_positive_numbers([]) == 0", "assert sum_of_positive_numbers([1]) == 1", "assert sum_of_positive_numbers([-1]) == 0", "assert sum_of_positive_numbers([1, 2, 3, 4, 5]) == 15", "assert sum_of_positive_numbers([100, -100, 100, -100, 100]) == 300", "assert sum_of_positive_numbers([-10, -20, -30, -40, -50]) == 0", "assert sum_of_positive_numbers([0, 1, -1, 2, -2, 3, -3]) == 6", "assert sum_of_positive_numbers([5, 5, 5, 5, 5]) == 25", "assert sum_of_positive_numbers([-5, -5, -5, -5, -5]) == 0", "assert sum_of_positive_numbers([1, 2, 3, -1, -2, -3, 4, 5, -4, -5]) == 15", "assert sum_of_positive_numbers([0, 0, 0, 1, 2, 3]) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the negative numbers in a list.", "code": "def sum_of_negative_numbers(list1):\n    sum_negative = 0\n    for num in list1:\n        if num < 0:\n            sum_negative += num\n    return sum_negative", "task_id": "170_cce4f9c8-8f41-4a4a-af5b-791f75428b58", "test_setup_code": "", "test_list": ["assert sum_of_negative_numbers([1, -2, 3, -4, 5]) == -6", "assert sum_of_negative_numbers([-1, -2, -3, -4, -5]) == -15", "assert sum_of_negative_numbers([1, 2, 3, 4, 5]) == 0", "assert sum_of_negative_numbers([]) == 0", "assert sum_of_negative_numbers([0, -1, 0, -2, 0, -3]) == -6", "assert sum_of_negative_numbers([100, -100, 200, -200, 300, -300]) == -600", "assert sum_of_negative_numbers([-1]) == -1", "assert sum_of_negative_numbers([1]) == 0", "assert sum_of_negative_numbers([-1, 1, -1, 1, -1, 1]) == -3", "assert sum_of_negative_numbers([0, 0, 0, 0, 0]) == 0", "assert sum_of_negative_numbers([-1, -1, -1, -1, -1]) == -5", "assert sum_of_negative_numbers([1, 2, 3, 4, -5, -6, -7, -8]) == -26", "assert sum_of_negative_numbers([10, 20, -30, -40, 50, -60]) == -130", "assert sum_of_negative_numbers([-10, 20, -30, 40, -50, 60]) == -90", "assert sum_of_negative_numbers([-0.1, -0.2, -0.3, -0.4, -0.5]) == -1.5"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'abc' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'abc':\n      count += 1\n  return count", "task_id": "172_65a85040-7c3d-42aa-b007-4cc099cb4bef", "test_setup_code": "", "test_list": ["assert count_occurrence('abcabcabc') == 3", "assert count_occurrence('abc') == 1", "assert count_occurrence('ababc') == 1", "assert count_occurrence('aabc') == 0", "assert count_occurrence('') == 0", "assert count_occurrence('ab') == 0", "assert count_occurrence('abcd') == 1", "assert count_occurrence('aabbcc') == 0", "assert count_occurrence('abcabcab') == 2", "assert count_occurrence('xyzabcxyz') == 1", "assert count_occurrence('abcxabcabc') == 3", "assert count_occurrence('abcabcabcabc') == 4", "assert count_occurrence('abccbaabcabc') == 2", "assert count_occurrence('abcabcabcabcabc') == 5", "assert count_occurrence('xyzxyzxyz') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'xyz' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'xyz':\n      count += 1\n  return count", "task_id": "172_a24a4d7a-bb49-4e5d-9d6e-b2074857cb25", "test_setup_code": "", "test_list": ["assert count_occurrence('xyz') == 1", "assert count_occurrence('abcxyz') == 1", "assert count_occurrence('xyzxyzxyz') == 3", "assert count_occurrence('xyxyzxyz') == 2", "assert count_occurrence('xyzxyxyz') == 2", "assert count_occurrence('abcxyzxyzdef') == 2", "assert count_occurrence('xyzxyzxyzxyz') == 4", "assert count_occurrence('') == 0", "assert count_occurrence('abc') == 0", "assert count_occurrence('xy') == 0", "assert count_occurrence('xyzxyz') == 2", "assert count_occurrence('xyxyzxyxyz') == 3", "assert count_occurrence('xyzxyzxyxyzxyz') == 5", "assert count_occurrence('xyzxyzxyzxyzxyz') == 5", "assert count_occurrence('xyzxyzxyzxyzxyzxyz') == 6"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring '123' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == '123':\n      count += 1\n  return count", "task_id": "172_23980e8b-0bcc-4183-bc86-1cf6ecd9b7e6", "test_setup_code": "", "test_list": ["assert count_occurrence('123') == 1", "assert count_occurrence('123123') == 2", "assert count_occurrence('1123123') == 2", "assert count_occurrence('000123000') == 1", "assert count_occurrence('') == 0", "assert count_occurrence('111111') == 0", "assert count_occurrence('123456789') == 1", "assert count_occurrence('456789123') == 1", "assert count_occurrence('123123123') == 3", "assert count_occurrence('123412341234') == 3", "assert count_occurrence('abc123def') == 1", "assert count_occurrence('abc123def123') == 2", "assert count_occurrence('123123123123123') == 5", "assert count_occurrence('123abc123abc123') == 3", "assert count_occurrence('123123123123123123123123') == 8"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'cat' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'cat':\n      count += 1\n  return count", "task_id": "172_6ce91422-eb58-4372-a610-891be2a536ef", "test_setup_code": "", "test_list": ["assert count_occurrence('cat') == 1", "assert count_occurrence('catcat') == 2", "assert count_occurrence('concatenate') == 1", "assert count_occurrence('the cat in the hat') == 1", "assert count_occurrence('catalogue') == 1", "assert count_occurrence('caterpillar') == 1", "assert count_occurrence('catastrophe') == 1", "assert count_occurrence('catch') == 1", "assert count_occurrence('cataclysm') == 1", "assert count_occurrence('') == 0", "assert count_occurrence('dog') == 0", "assert count_occurrence('cattcatcat') == 3", "assert count_occurrence('catcatcatcat') == 4", "assert count_occurrence('cccat') == 1", "assert count_occurrence('catcatdogcat') == 3"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'dog' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'dog':\n      count += 1\n  return count", "task_id": "172_6f383bce-1c5d-4f30-87fb-70483f333274", "test_setup_code": "", "test_list": ["assert count_occurrence('dog') == 1", "assert count_occurrence('dogdog') == 2", "assert count_occurrence('dogdogdog') == 3", "assert count_occurrence('catdogcat') == 1", "assert count_occurrence('dogcatdog') == 2", "assert count_occurrence('') == 0", "assert count_occurrence('cat') == 0", "assert count_occurrence('dogcatdogcatdog') == 3", "assert count_occurrence('dogdogdogdogdog') == 5", "assert count_occurrence('d') == 0", "assert count_occurrence('do') == 0", "assert count_occurrence('dogdogdogd') == 3", "assert count_occurrence('dogdogd') == 2", "assert count_occurrence('dogdogdogdog') == 4", "assert count_occurrence('dogdogdogdogdogdogdogdogdogdog') == 10"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'hello' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 4):\n    if s[i:i+5] == 'hello':\n      count += 1\n  return count", "task_id": "172_9b26f020-4ccb-4d95-885f-aada43644c15", "test_setup_code": "", "test_list": ["assert count_occurrence('hello') == 1", "assert count_occurrence('hellohello') == 2", "assert count_occurrence('ahello') == 1", "assert count_occurrence('ahelloa') == 1", "assert count_occurrence('ahelloahello') == 2", "assert count_occurrence('hell') == 0", "assert count_occurrence('') == 0", "assert count_occurrence('h e l l o') == 0", "assert count_occurrence('hellohellohello') == 3", "assert count_occurrence('HELLO') == 0", "assert count_occurrence('helloHELLOhello') == 2", "assert count_occurrence('hehellohellohello') == 3", "assert count_occurrence('hellohellohell') == 2", "assert count_occurrence('xhellohellox') == 2", "assert count_occurrence('hellohellohellohellohello') == 5"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'world' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 4):\n    if s[i:i+5] == 'world':\n      count += 1\n  return count", "task_id": "172_45cff7b3-9821-446b-bbef-8ee2427fe921", "test_setup_code": "", "test_list": ["assert count_occurrence('hello world') == 1", "assert count_occurrence('worldworld') == 2", "assert count_occurrence('world world world') == 3", "assert count_occurrence('hello') == 0", "assert count_occurrence('world') == 1", "assert count_occurrence('worlworld') == 1", "assert count_occurrence('') == 0", "assert count_occurrence('worl') == 0", "assert count_occurrence('worldworldworld') == 3", "assert count_occurrence('worldworldworldworld') == 4", "assert count_occurrence('worldly world') == 1", "assert count_occurrence('world worldworld') == 2", "assert count_occurrence('world!world') == 2", "assert count_occurrence('worldworldly') == 1", "assert count_occurrence('worldlyworld') == 1"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'java' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'java':\n      count += 1\n  return count", "task_id": "172_3c1328af-11b9-4176-bbdd-f367c3f3f3f7", "test_setup_code": "", "test_list": ["assert count_occurrence('java') == 1", "assert count_occurrence('javajava') == 2", "assert count_occurrence('jav') == 0", "assert count_occurrence('jjava') == 0", "assert count_occurrence('java is a programming language') == 1", "assert count_occurrence('I love java and java is great') == 2", "assert count_occurrence('') == 0", "assert count_occurrence('javajavajava') == 3", "assert count_occurrence('javajavajavajava') == 4", "assert count_occurrence('java is not javascript') == 1", "assert count_occurrence('javascript is different from java') == 1", "assert count_occurrence('Java is not the same as java') == 1", "assert count_occurrence('javajavajavajavajavajava') == 6", "assert count_occurrence('There is no java here') == 1", "assert count_occurrence('javajavajavajavajavajavajavajavajavajava') == 10"], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'code' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'code':\n      count += 1\n  return count", "task_id": "172_1a6285cc-0fad-4844-b5ba-bc97917363ed", "test_setup_code": "", "test_list": ["assert count_occurrence('code') == 1", "assert count_occurrence('codecode') == 2", "assert count_occurrence('codec') == 1", "assert count_occurrence('co') == 0", "assert count_occurrence('') == 0", "assert count_occurrence('coed') == 0", "assert count_occurrence('codecodedecode') == 3", "assert count_occurrence('decodecodecode') == 2", "assert count_occurrence('code code code') == 3", "assert count_occurrence('code1code2code3') == 3", "assert count_occurrence('codecodecodecode') == 4", "assert count_occurrence('abcde') == 0", "assert count_occurrence('codeabcde') == 1", "assert count_occurrence('abcdecode') == 1", "assert count_occurrence('codecodeabcdecode') == 3"], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a string.", "code": "import re\ndef remove_digits(text): \n pattern = re.compile('[0-9]+')\n return (pattern.sub('', text))", "task_id": "173_dfd788bd-3cd6-4bc3-8262-619cbd0cea54", "test_setup_code": "", "test_list": ["assert remove_digits('abc123') == 'abc'", "assert remove_digits('123abc456') == 'abc'", "assert remove_digits('abc') == 'abc'", "assert remove_digits('') == ''", "assert remove_digits('1234567890') == ''", "assert remove_digits('a1b2c3') == 'abc'", "assert remove_digits('no digits here!') == 'no digits here!'", "assert remove_digits('1a2b3c4d5e6f7g8h9i0') == 'abcdefghij'", "assert remove_digits('!@#123$%^456&*()') == '!@#$%^&*()'", "assert remove_digits('The year is 2023.') == 'The year is .'", "assert remove_digits('Room 101 is on the 1st floor.') == 'Room  is on the st floor.'", "assert remove_digits('Pi is approximately 3.14159') == 'Pi is approximately .'", "assert remove_digits('My phone number is 123-456-7890.') == 'My phone number is --.'", "assert remove_digits('0a1b2c3d4e5f6g7h8i9j') == 'abcdefghij'", "assert remove_digits('Digits: 0123456789') == 'Digits: '"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "import re\ndef remove_vowels(text): \n pattern = re.compile('[aeiouAEIOU]+')\n return (pattern.sub('', text))", "task_id": "173_fd64d16a-6406-4592-8c0c-6655c32ff351", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('AEIOUaeiou') == ''", "assert remove_vowels('Python') == 'Pythn'", "assert remove_vowels('') == ''", "assert remove_vowels('bcdfghjklmnpqrstvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('abcdefghijklmnopqrstuvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('1234567890') == '1234567890'", "assert remove_vowels('a1e2i3o4u5') == '12345'", "assert remove_vowels('The quick brown fox jumps over the lazy dog') == 'Th qck brwn fx jmps vr th lzy dg'", "assert remove_vowels('Vowels are AEIOU and sometimes Y') == 'Vwls r  nd smtms Y'", "assert remove_vowels('Why do we need to remove vowels?') == 'Why d w nd t rmv vwls?'", "assert remove_vowels('This is a test string with multiple words.') == 'Ths s  tst strng wth mltpl wrds.'", "assert remove_vowels('No vowels here!') == 'N vwls hr!'"], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a string.", "code": "import re\ndef remove_consonants(text): \n pattern = re.compile('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+')\n return (pattern.sub('', text))", "task_id": "173_5a198a36-0965-42d6-a621-758af8fe28b0", "test_setup_code": "", "test_list": ["assert remove_consonants('hello') == 'eo'", "assert remove_consonants('world') == 'o'", "assert remove_consonants('aeiou') == 'aeiou'", "assert remove_consonants('bcdfghjklmnpqrstvwxyz') == ''", "assert remove_consonants('AEIOU') == 'AEIOU'", "assert remove_consonants('BCDFGHJKLMNPQRSTVWXYZ') == ''", "assert remove_consonants('Hello, World!') == 'eo, o!'", "assert remove_consonants('12345') == '12345'", "assert remove_consonants('') == ''", "assert remove_consonants('a') == 'a'", "assert remove_consonants('b') == ''", "assert remove_consonants('The quick brown fox jumps over the lazy dog') == 'e ui o o u o e a o'", "assert remove_consonants('Python is fun!') == 'o i u!'", "assert remove_consonants('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'AEIOUaeiou'", "assert remove_consonants('Consonants are removed!') == 'ooa ae eoe!'"], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase letters from a string.", "code": "import re\ndef remove_uppercase(text): \n pattern = re.compile('[A-Z]+')\n return (pattern.sub('', text))", "task_id": "173_593f0342-950f-4f07-9c0f-c64bb2c14fea", "test_setup_code": "", "test_list": ["assert remove_uppercase('Hello World') == 'ello orld'", "assert remove_uppercase('PYTHON') == ''", "assert remove_uppercase('python') == 'python'", "assert remove_uppercase('123 ABC def') == '123  def'", "assert remove_uppercase('') == ''", "assert remove_uppercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 'acdefghijklmnopqrstuvwxyz'", "assert remove_uppercase('UPPER lower') == ' lower'", "assert remove_uppercase('MiXeD CaSe') == 'ie ae'", "assert remove_uppercase('NoUpperCase') == 'oUpperase'", "assert remove_uppercase('ALLUPPERCASE') == ''", "assert remove_uppercase('no uppercase') == 'no uppercase'", "assert remove_uppercase('1234567890') == '1234567890'", "assert remove_uppercase('Symbols!@#$%^&*()') == 'ymbols!@#$%^&*()'", "assert remove_uppercase('CamelCaseString') == 'amelasetring'", "assert remove_uppercase('EdgeCASE') == 'dge'"], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase letters from a string.", "code": "import re\ndef remove_lowercase(text): \n pattern = re.compile('[a-z]+')\n return (pattern.sub('', text))", "task_id": "173_eab14839-f0fb-447b-b5b1-2dd1d47dcbfa", "test_setup_code": "", "test_list": ["assert remove_lowercase('Hello World!') == 'H W!'", "assert remove_lowercase('123abc456') == '123456'", "assert remove_lowercase('') == ''", "assert remove_lowercase('ALLUPPERCASE') == 'ALLUPPERCASE'", "assert remove_lowercase('lowercase') == ''", "assert remove_lowercase('MiXeD CaSe') == 'M C'", "assert remove_lowercase('1234567890') == '1234567890'", "assert remove_lowercase('aBcDeFgHiJ') == 'BDFHJ'", "assert remove_lowercase('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_lowercase('a1b2c3d4e5') == '12345'", "assert remove_lowercase('The quick brown fox jumps over the lazy dog') == 'T  F J O  L D'", "assert remove_lowercase('Python3.8') == 'P3.8'", "assert remove_lowercase('') == ''", "assert remove_lowercase('lowerCASE') == 'CASE'", "assert remove_lowercase('UPPERCASElowercase') == 'UPPERCASE'"], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a string.", "code": "import re\ndef remove_whitespace(text): \n pattern = re.compile('\\s+')\n return (pattern.sub('', text))", "task_id": "173_4fa972a3-993c-4950-a336-f3f89dfd2ed5", "test_setup_code": "", "test_list": ["assert remove_whitespace('hello world') == 'helloworld'", "assert remove_whitespace('   leading spaces') == 'leadingspaces'", "assert remove_whitespace('trailing spaces   ') == 'trailingspaces'", "assert remove_whitespace('  both  sides  ') == 'bothsides'", "assert remove_whitespace('multiple   spaces') == 'multiplespaces'", "assert remove_whitespace('tab\tseparated') == 'tabseparated'", "assert remove_whitespace('new\nline') == 'newline'", "assert remove_whitespace('carriage\rreturn') == 'carriagereturn'", "assert remove_whitespace('mixed \t\n\r whitespace') == 'mixedwhitespace'", "assert remove_whitespace('') == ''", "assert remove_whitespace('no_whitespace') == 'no_whitespace'", "assert remove_whitespace('single space ') == 'singlespace'", "assert remove_whitespace('  ') == ''", "assert remove_whitespace(' a b c ') == 'abc'", "assert remove_whitespace('123 456 789') == '123456789'"], "challenge_test_list": []}
{"text": "Write a function to remove all hexadecimal characters from a string.", "code": "import re\ndef remove_hexadecimal(text): \n pattern = re.compile('[0-9a-fA-F]+')\n return (pattern.sub('', text))", "task_id": "173_05aed132-e2ac-4f3a-82b7-319829f51521", "test_setup_code": "", "test_list": ["assert remove_hexadecimal('123abcXYZ') == 'XYZ'", "assert remove_hexadecimal('abcdef') == ''", "assert remove_hexadecimal('ABCDEF') == ''", "assert remove_hexadecimal('1234567890') == ''", "assert remove_hexadecimal('ghijklmnop') == 'ghijklmnop'", "assert remove_hexadecimal('123abcXYZ456def') == 'XYZ'", "assert remove_hexadecimal('') == ''", "assert remove_hexadecimal('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_hexadecimal('123abcXYZ!@#456def') == 'XYZ!@#'", "assert remove_hexadecimal('0x1234') == 'x'", "assert remove_hexadecimal('0x1234ABCD') == 'x'", "assert remove_hexadecimal('0x1234ABCDxyz') == 'xxyz'", "assert remove_hexadecimal('0x1234ABCDxyz5678') == 'xxyz'", "assert remove_hexadecimal('0x1234ABCDxyz5678!@#') == 'xxyz!@#'", "assert remove_hexadecimal('0x1234ABCDxyz5678!@#9aBcDeF') == 'xxyz!@#'"], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphanumeric characters from a string.", "code": "import re\ndef remove_non_alphanumeric(text): \n pattern = re.compile('[^a-zA-Z0-9]+')\n return (pattern.sub('', text))", "task_id": "173_d1da348a-459f-42cd-9ab0-9157bbb4ce5f", "test_setup_code": "", "test_list": ["assert remove_non_alphanumeric('Hello, World!') == 'HelloWorld'", "assert remove_non_alphanumeric('123 ABC $$$') == '123ABC'", "assert remove_non_alphanumeric('') == ''", "assert remove_non_alphanumeric('!@#$%^&*()') == ''", "assert remove_non_alphanumeric('a1b2c3d4') == 'a1b2c3d4'", "assert remove_non_alphanumeric('   ') == ''", "assert remove_non_alphanumeric('abc123') == 'abc123'", "assert remove_non_alphanumeric('abc-123_def') == 'abc123def'", "assert remove_non_alphanumeric('a!b@c#d$e%f^g&h*i(j)k_l+m=n') == 'abcdefghijklm'", "assert remove_non_alphanumeric('A1!B2@C3#D4$E5%F6^G7&H8*I9(J0)') == 'A1B2C3D4E5F6G7H8I9J0'", "assert remove_non_alphanumeric('1234567890') == '1234567890'", "assert remove_non_alphanumeric('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'", "assert remove_non_alphanumeric('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "assert remove_non_alphanumeric('!@#abc123XYZ$%^') == 'abc123XYZ'", "assert remove_non_alphanumeric('a!b@c#1$2%3^d&e*f(g)h_i+j=k') == 'abc123defghijk'"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length, width):\n  area = length * width\n  return area", "task_id": "176_275a14f2-07a5-430e-8bc0-335e3354a3b1", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(10, 0) == 0", "assert area_rectangle(1, 1) == 1", "assert area_rectangle(100, 200) == 20000", "assert area_rectangle(3, 7) == 21", "assert area_rectangle(7, 3) == 21", "assert area_rectangle(123, 456) == 56088", "assert area_rectangle(10, 10) == 100", "assert area_rectangle(1, 1000) == 1000", "assert area_rectangle(1000, 1) == 1000", "assert area_rectangle(2147483647, 1) == 2147483647", "assert area_rectangle(1, 2147483647) == 2147483647", "assert area_rectangle(2147483647, 2147483647) == 4611686014132420609", "assert area_rectangle(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circumference_circle(radius):\n  circumference = 2 * math.pi * radius\n  return circumference", "task_id": "176_c1852974-f314-4b27-9570-c27c0087730a", "test_setup_code": "", "test_list": ["assert circumference_circle(0) == 0", "assert circumference_circle(1) == 2 * math.pi", "assert circumference_circle(2) == 4 * math.pi", "assert circumference_circle(0.5) == math.pi", "assert circumference_circle(10) == 20 * math.pi", "assert circumference_circle(100) == 200 * math.pi", "assert circumference_circle(0.1) == 0.2 * math.pi", "assert circumference_circle(3.14159) == 2 * math.pi * 3.14159", "assert circumference_circle(1e-10) == 2 * math.pi * 1e-10", "assert circumference_circle(1e10) == 2 * math.pi * 1e10", "assert circumference_circle(123456789) == 2 * math.pi * 123456789", "assert circumference_circle(0.3333333333333333) == 2 * math.pi * 0.3333333333333333", "assert circumference_circle(0.9999999999999999) == 2 * math.pi * 0.9999999999999999", "assert circumference_circle(1.23456789) == 2 * math.pi * 1.23456789", "assert circumference_circle(2.718281828459045) == 2 * math.pi * 2.718281828459045"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(length, width, height):\n  volume = length * width * height\n  return volume", "task_id": "176_f1970e0e-19c6-4179-bade-0af1f419c926", "test_setup_code": "", "test_list": ["assert volume_cuboid(1, 1, 1) == 1", "assert volume_cuboid(2, 3, 4) == 24", "assert volume_cuboid(0, 5, 7) == 0", "assert volume_cuboid(10, 10, 10) == 1000", "assert volume_cuboid(1.5, 2.5, 3.5) == 13.125", "assert volume_cuboid(100, 200, 300) == 6000000", "assert volume_cuboid(0.1, 0.2, 0.3) == 0.006", "assert volume_cuboid(1, 0, 1) == 0", "assert volume_cuboid(5, 5, 0) == 0", "assert volume_cuboid(7, 8, 9) == 504", "assert volume_cuboid(3, 4, 5) == 60", "assert volume_cuboid(2.5, 3.5, 4.5) == 39.375", "assert volume_cuboid(0.5, 0.5, 0.5) == 0.125", "assert volume_cuboid(1000, 1000, 1000) == 1000000000", "assert volume_cuboid(1, 2, 3) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  area = 0.5 * base * height\n  return area", "task_id": "176_e9391be5-57a7-4753-8823-500d49397455", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 10) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(3.5, 2) == 3.5", "assert area_triangle(7, 3.5) == 12.25", "assert area_triangle(100, 200) == 10000.0", "assert area_triangle(0.1, 0.2) == 0.01", "assert area_triangle(123456, 654321) == 40329275168.0", "assert area_triangle(1e-10, 1e-10) == 5e-21", "assert area_triangle(1e10, 1e10) == 5e19", "assert area_triangle(5, 5) == 12.5", "assert area_triangle(2, 8) == 8.0", "assert area_triangle(0.5, 0.5) == 0.125", "assert area_triangle(9, 4) == 18.0"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length, width):\n  perimeter = 2 * (length + width)\n  return perimeter", "task_id": "176_adc59351-7067-4631-9b25-864a23dd3f4d", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(10, 5) == 30", "assert perimeter_rectangle(100, 50) == 300", "assert perimeter_rectangle(2, 3) == 10", "assert perimeter_rectangle(7, 8) == 30", "assert perimeter_rectangle(0, 5) == 10", "assert perimeter_rectangle(5, 0) == 10", "assert perimeter_rectangle(123, 456) == 1158", "assert perimeter_rectangle(999, 999) == 3996", "assert perimeter_rectangle(1, 1000) == 2002", "assert perimeter_rectangle(1000, 1) == 2002", "assert perimeter_rectangle(50, 50) == 200", "assert perimeter_rectangle(1, 0) == 2", "assert perimeter_rectangle(0, 1) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube given the length of its side.", "code": "def surface_area_cube(side):\n  surface_area = 6 * (side ** 2)\n  return surface_area", "task_id": "176_4ee3d7e7-5fdd-4aa7-ab4a-96c9c2d6d034", "test_setup_code": "", "test_list": ["assert surface_area_cube(1) == 6", "assert surface_area_cube(2) == 24", "assert surface_area_cube(3) == 54", "assert surface_area_cube(0) == 0", "assert surface_area_cube(10) == 600", "assert surface_area_cube(100) == 60000", "assert surface_area_cube(0.5) == 1.5", "assert surface_area_cube(1.5) == 13.5", "assert surface_area_cube(0.1) == 0.06", "assert surface_area_cube(0.01) == 0.0006", "assert surface_area_cube(1000) == 6000000", "assert surface_area_cube(0.333) == 0.665334", "assert surface_area_cube(4) == 96", "assert surface_area_cube(5) == 150", "assert surface_area_cube(6) == 216"], "challenge_test_list": []}
{"text": "Write a function to find the length of the diagonal of a rectangle.", "code": "import math\ndef diagonal_rectangle(length, width):\n  diagonal = math.sqrt(length**2 + width**2)\n  return diagonal", "task_id": "176_7cd91120-fee7-4093-b053-807eefc1ab80", "test_setup_code": "", "test_list": ["assert diagonal_rectangle(3, 4) == 5.0", "assert diagonal_rectangle(5, 12) == 13.0", "assert diagonal_rectangle(8, 15) == 17.0", "assert diagonal_rectangle(0, 0) == 0.0", "assert diagonal_rectangle(1, 1) == math.sqrt(2)", "assert diagonal_rectangle(0, 5) == 5.0", "assert diagonal_rectangle(7, 0) == 7.0", "assert diagonal_rectangle(6, 8) == 10.0", "assert diagonal_rectangle(9, 12) == 15.0", "assert diagonal_rectangle(10, 24) == 26.0", "assert diagonal_rectangle(1.5, 2.5) == math.sqrt(1.5**2 + 2.5**2)", "assert diagonal_rectangle(0.1, 0.2) == math.sqrt(0.1**2 + 0.2**2)", "assert diagonal_rectangle(1000, 1000) == math.sqrt(1000**2 + 1000**2)", "assert diagonal_rectangle(123, 456) == math.sqrt(123**2 + 456**2)", "assert diagonal_rectangle(0.0001, 0.0001) == math.sqrt(0.0001**2 + 0.0001**2)"], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef area_circle(radius):\n  area = math.pi * (radius ** 2)\n  return area", "task_id": "176_276f9f4d-d694-4e7e-807b-44c61c0220f5", "test_setup_code": "", "test_list": ["assert area_circle(0) == 0.0", "assert area_circle(1) == 3.141592653589793", "assert area_circle(2) == 12.566370614359172", "assert area_circle(0.5) == 0.7853981633974483", "assert area_circle(10) == 314.1592653589793", "assert area_circle(100) == 31415.926535897932", "assert area_circle(0.1) == 0.031415926535897934", "assert area_circle(3.14159) == 31.006224300558934", "assert area_circle(1e-10) == 3.1415926535897936e-20", "assert area_circle(1e10) == 3.1415926535897933e+20", "assert area_circle(123456789) == 4.788283183070884e+16", "assert area_circle(0.000001) == 3.141592653589793e-12", "assert area_circle(7) == 153.93804002589985", "assert area_circle(0.333) == 0.3487163124519652", "assert area_circle(50) == 7853.981633974483"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "import math\ndef volume_sphere(radius):\n  volume = (4/3) * math.pi * (radius ** 3)\n  return volume", "task_id": "176_e38fac45-e71e-4f83-bee7-f718096758cb", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.1887902047863905", "assert volume_sphere(0) == 0.0", "assert volume_sphere(2) == 33.510321638291124", "assert volume_sphere(0.5) == 0.5235987755982988", "assert volume_sphere(10) == 4188.790204786391", "assert volume_sphere(3.5) == 179.59438003021648", "assert volume_sphere(100) == 4188790.2047863905", "assert volume_sphere(0.1) == 0.004188790204786391", "assert volume_sphere(7) == 1436.7550402417319", "assert volume_sphere(0.01) == 4.188790204786391e-06", "assert volume_sphere(5) == 523.5987755982989", "assert volume_sphere(0.001) == 4.188790204786391e-09", "assert volume_sphere(2.5) == 65.44984694978736", "assert volume_sphere(50) == 523598.7755982988", "assert volume_sphere(0.25) == 0.06544984694978735"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square given the length of its side.", "code": "def perimeter_square(side):\n  perimeter = 4 * side\n  return perimeter", "task_id": "176_5b9af1c8-a105-40af-afd2-6abedee2afee", "test_setup_code": "", "test_list": ["assert perimeter_square(1) == 4", "assert perimeter_square(0) == 0", "assert perimeter_square(5) == 20", "assert perimeter_square(10) == 40", "assert perimeter_square(100) == 400", "assert perimeter_square(1000) == 4000", "assert perimeter_square(9999) == 39996", "assert perimeter_square(12345) == 49380", "assert perimeter_square(2) == 8", "assert perimeter_square(3) == 12", "assert perimeter_square(7) == 28", "assert perimeter_square(25) == 100", "assert perimeter_square(50) == 200", "assert perimeter_square(75) == 300", "assert perimeter_square(10000) == 40000"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, initializing each list with a default value.", "code": "def group_keyvalue_with_default(l, default):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = [default]\n        result[k].append(v)\n    return result", "task_id": "174_20c22cc5-343f-423d-882f-c4c0271d38ef", "test_setup_code": "", "test_list": ["assert group_keyvalue_with_default([], 'default') == {}", "assert group_keyvalue_with_default([('a', 1)], 'default') == {'a': ['default', 1]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2)], 'default') == {'a': ['default', 1], 'b': ['default', 2]}", "assert group_keyvalue_with_default([('a', 1), ('a', 2)], 'default') == {'a': ['default', 1, 2]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('a', 3)], 'default') == {'a': ['default', 1, 3], 'b': ['default', 2]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('a', 3), ('b', 4)], 'default') == {'a': ['default', 1, 3], 'b': ['default', 2, 4]}", "assert group_keyvalue_with_default([('a', 1), ('a', 2), ('a', 3)], 'default') == {'a': ['default', 1, 2, 3]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('c', 3)], 'default') == {'a': ['default', 1], 'b': ['default', 2], 'c': ['default', 3]}", "assert group_keyvalue_with_default([('a', 1), ('a', 1), ('a', 1)], 'default') == {'a': ['default', 1, 1, 1]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('c', 3), ('d', 4)], 'default') == {'a': ['default', 1], 'b': ['default', 2], 'c': ['default', 3], 'd': ['default', 4]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5)], 'default') == {'a': ['default', 1, 3], 'b': ['default', 2, 4], 'c': ['default', 5]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('c', 3), ('a', 4), ('b', 5), ('c', 6)], 'default') == {'a': ['default', 1, 4], 'b': ['default', 2, 5], 'c': ['default', 3, 6]}", "assert group_keyvalue_with_default([('a', 1), ('a', 2), ('a', 3), ('a', 4)], 'default') == {'a': ['default', 1, 2, 3, 4]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)], 'default') == {'a': ['default', 1], 'b': ['default', 2], 'c': ['default', 3], 'd': ['default', 4], 'e': ['default', 5]}", "assert group_keyvalue_with_default([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('a', 5), ('b', 6)], 'default') == {'a': ['default', 1, 3, 5], 'b': ['default', 2, 4, 6]}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of sorted lists.", "code": "def group_keyvalue_sorted(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    for k in result:\n        result[k].sort()\n    return result", "task_id": "174_85d41740-b95b-4bc5-b57d-73d18fc43657", "test_setup_code": "", "test_list": ["assert group_keyvalue_sorted([]) == {}", "assert group_keyvalue_sorted([(1, 'a')]) == {1: ['a']}", "assert group_keyvalue_sorted([(1, 'b'), (1, 'a')]) == {1: ['a', 'b']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'b')]) == {1: ['a'], 2: ['b']}", "assert group_keyvalue_sorted([(1, 'b'), (2, 'a'), (1, 'a')]) == {1: ['a', 'b'], 2: ['a']}", "assert group_keyvalue_sorted([(1, 'c'), (1, 'a'), (1, 'b')]) == {1: ['a', 'b', 'c']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'a')]) == {1: ['a', 'c'], 2: ['a', 'b']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'b'), (2, 'a'), (3, 'a')]) == {1: ['a', 'b'], 2: ['a', 'b'], 3: ['a', 'c']}", "assert group_keyvalue_sorted([(1, 'a'), (1, 'a'), (1, 'a')]) == {1: ['a', 'a', 'a']}", "assert group_keyvalue_sorted([(1, 'b'), (2, 'a'), (1, 'a'), (2, 'b'), (3, 'c'), (3, 'a')]) == {1: ['a', 'b'], 2: ['a', 'b'], 3: ['a', 'c']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e')]) == {1: ['a'], 2: ['b'], 3: ['c'], 4: ['d'], 5: ['e']}", "assert group_keyvalue_sorted([(1, 'z'), (1, 'y'), (1, 'x'), (1, 'w')]) == {1: ['w', 'x', 'y', 'z']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'a'), (3, 'a'), (4, 'a'), (5, 'a')]) == {1: ['a'], 2: ['a'], 3: ['a'], 4: ['a'], 5: ['a']}", "assert group_keyvalue_sorted([(1, 'a'), (1, 'b'), (1, 'c'), (2, 'a'), (2, 'b'), (2, 'c')]) == {1: ['a', 'b', 'c'], 2: ['a', 'b', 'c']}", "assert group_keyvalue_sorted([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (1, 'b'), (2, 'c'), (3, 'd'), (4, 'e'), (5, 'f')]) == {1: ['a', 'b'], 2: ['b', 'c'], 3: ['c', 'd'], 4: ['d', 'e'], 5: ['e', 'f']}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, ensuring each list contains only unique values.", "code": "def group_keyvalue_unique(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = []\n        if v not in result[k]:\n            result[k].append(v)\n    return result", "task_id": "174_c0b13741-914e-4c5e-a334-430597b87b4b", "test_setup_code": "", "test_list": ["assert group_keyvalue_unique([]) == {}", "assert group_keyvalue_unique([('a', 1)]) == {'a': [1]}", "assert group_keyvalue_unique([('a', 1), ('a', 2)]) == {'a': [1, 2]}", "assert group_keyvalue_unique([('a', 1), ('b', 2)]) == {'a': [1], 'b': [2]}", "assert group_keyvalue_unique([('a', 1), ('a', 1)]) == {'a': [1]}", "assert group_keyvalue_unique([('a', 1), ('a', 2), ('a', 1)]) == {'a': [1, 2]}", "assert group_keyvalue_unique([('a', 1), ('b', 2), ('a', 3)]) == {'a': [1, 3], 'b': [2]}", "assert group_keyvalue_unique([('a', 1), ('b', 2), ('a', 1), ('b', 3)]) == {'a': [1], 'b': [2, 3]}", "assert group_keyvalue_unique([('a', 'x'), ('b', 'y'), ('a', 'z')]) == {'a': ['x', 'z'], 'b': ['y']}", "assert group_keyvalue_unique([(1, 'a'), (2, 'b'), (1, 'c')]) == {1: ['a', 'c'], 2: ['b']}", "assert group_keyvalue_unique([(None, 1), (None, 2)]) == {None: [1, 2]}", "assert group_keyvalue_unique([('a', None), ('b', None)]) == {'a': [None], 'b': [None]}", "assert group_keyvalue_unique([('a', 1), ('a', 2), ('a', 3), ('a', 1), ('a', 2)]) == {'a': [1, 2, 3]}", "assert group_keyvalue_unique([('x', 10), ('y', 20), ('x', 30), ('y', 10), ('x', 10)]) == {'x': [10, 30], 'y': [20, 10]}", "assert group_keyvalue_unique([('a', True), ('a', False), ('b', True)]) == {'a': [True, False], 'b': [True]}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of counts, where each key maps to the number of times it appears.", "code": "def group_keyvalue_count(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n        result[k] += 1\n    return result", "task_id": "174_0dfa8ce7-79b8-4e0d-85b9-fa8a39b88f51", "test_setup_code": "", "test_list": ["assert group_keyvalue_count([]) == {}", "assert group_keyvalue_count([('a', 1)]) == {'a': 1}", "assert group_keyvalue_count([('a', 1), ('a', 2)]) == {'a': 2}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('a', 3)]) == {'a': 2, 'b': 1}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('c', 3)]) == {'a': 1, 'b': 1, 'c': 1}", "assert group_keyvalue_count([('a', 1), ('a', 2), ('a', 3), ('a', 4)]) == {'a': 4}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('b', 3), ('c', 4), ('c', 5), ('c', 6)]) == {'a': 1, 'b': 2, 'c': 3}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('c', 6), ('c', 7)]) == {'a': 2, 'b': 2, 'c': 3}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('a', 5), ('b', 6), ('a', 7), ('b', 8)]) == {'a': 4, 'b': 4}", "assert group_keyvalue_count([('x', 10), ('y', 20), ('z', 30), ('x', 40), ('y', 50), ('z', 60), ('x', 70), ('y', 80), ('z', 90)]) == {'x': 3, 'y': 3, 'z': 3}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5)]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1}", "assert group_keyvalue_count([('a', 1), ('a', 2), ('a', 3), ('b', 4), ('b', 5), ('c', 6)]) == {'a': 3, 'b': 2, 'c': 1}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('a', 5), ('b', 6), ('c', 7), ('d', 8)]) == {'a': 2, 'b': 2, 'c': 2, 'd': 2}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('a', 3), ('b', 4), ('c', 5), ('d', 6), ('e', 7), ('f', 8), ('g', 9), ('h', 10)]) == {'a': 2, 'b': 2, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1}", "assert group_keyvalue_count([('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6), ('g', 7), ('h', 8), ('i', 9), ('j', 10)]) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of sums, where each key maps to the sum of its values.", "code": "def group_keyvalue_sum(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n        result[k] += v\n    return result", "task_id": "174_1af9199d-176e-44c7-bddf-f10719dc6644", "test_setup_code": "", "test_list": ["assert group_keyvalue_sum([]) == {}", "assert group_keyvalue_sum([(1, 2), (1, 3), (2, 4)]) == {1: 5, 2: 4}", "assert group_keyvalue_sum([(1, 1), (1, 1), (1, 1)]) == {1: 3}", "assert group_keyvalue_sum([(1, 0), (2, 0), (3, 0)]) == {1: 0, 2: 0, 3: 0}", "assert group_keyvalue_sum([(1, -1), (1, -2), (2, -3)]) == {1: -3, 2: -3}", "assert group_keyvalue_sum([(1, 1000000), (2, 2000000), (1, -1000000)]) == {1: 0, 2: 2000000}", "assert group_keyvalue_sum([(1, 1), (2, 2), (3, 3), (1, 1), (2, 2), (3, 3)]) == {1: 2, 2: 4, 3: 6}", "assert group_keyvalue_sum([(1, 1)]) == {1: 1}", "assert group_keyvalue_sum([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}", "assert group_keyvalue_sum([(1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == {1: 5}", "assert group_keyvalue_sum([(1, 1), (2, 2), (1, 1), (2, 2), (1, 1), (2, 2)]) == {1: 3, 2: 6}", "assert group_keyvalue_sum([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6)]) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6}", "assert group_keyvalue_sum([(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]) == {1: 15}", "assert group_keyvalue_sum([(1, 1), (2, 2), (3, 3), (1, 4), (2, 5), (3, 6)]) == {1: 5, 2: 7, 3: 9}", "assert group_keyvalue_sum([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the maximum value among its values.", "code": "def group_keyvalue_max(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = v\n        else:\n            result[k] = max(result[k], v)\n    return result", "task_id": "174_19dedfc2-ae68-4ffd-b94b-f3ff1cb5bd28", "test_setup_code": "", "test_list": ["assert group_keyvalue_max([]) == {}", "assert group_keyvalue_max([(1, 2)]) == {1: 2}", "assert group_keyvalue_max([(1, 2), (1, 3)]) == {1: 3}", "assert group_keyvalue_max([(1, 2), (2, 3)]) == {1: 2, 2: 3}", "assert group_keyvalue_max([(1, 2), (2, 3), (1, 4)]) == {1: 4, 2: 3}", "assert group_keyvalue_max([(1, 2), (2, 3), (1, 1), (2, 4)]) == {1: 2, 2: 4}", "assert group_keyvalue_max([(1, 2), (1, 2), (1, 2)]) == {1: 2}", "assert group_keyvalue_max([(1, -1), (1, -2), (1, -3)]) == {1: -1}", "assert group_keyvalue_max([(1, 0), (1, 0), (1, 0)]) == {1: 0}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5)]) == {1: 2, 2: 3, 3: 4, 4: 5}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5), (1, 6)]) == {1: 6, 2: 3, 3: 4, 4: 5}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5), (1, 6), (2, 7)]) == {1: 6, 2: 7, 3: 4, 4: 5}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5), (1, 6), (2, 7), (3, 8)]) == {1: 6, 2: 7, 3: 8, 4: 5}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5), (1, 6), (2, 7), (3, 8), (4, 9)]) == {1: 6, 2: 7, 3: 8, 4: 9}", "assert group_keyvalue_max([(1, 2), (2, 3), (3, 4), (4, 5), (1, 6), (2, 7), (3, 8), (4, 9), (1, 10)]) == {1: 10, 2: 7, 3: 8, 4: 9}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the minimum value among its values.", "code": "def group_keyvalue_min(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = v\n        else:\n            result[k] = min(result[k], v)\n    return result", "task_id": "174_9aee48a8-95bf-477c-a1c1-6b501de17464", "test_setup_code": "", "test_list": ["assert group_keyvalue_min([(1, 2), (1, 3), (2, 4)]) == {1: 2, 2: 4}", "assert group_keyvalue_min([(1, 5), (1, 3), (2, 4), (2, 1)]) == {1: 3, 2: 1}", "assert group_keyvalue_min([]) == {}", "assert group_keyvalue_min([(1, 1), (1, 1), (1, 1)]) == {1: 1}", "assert group_keyvalue_min([(1, 10), (2, 20), (3, 30)]) == {1: 10, 2: 20, 3: 30}", "assert group_keyvalue_min([(1, -1), (1, -2), (2, -3), (2, -4)]) == {1: -2, 2: -4}", "assert group_keyvalue_min([(1, 0), (1, 0), (2, 0), (2, 0)]) == {1: 0, 2: 0}", "assert group_keyvalue_min([(1, 100), (2, 200), (1, 50), (2, 150)]) == {1: 50, 2: 150}", "assert group_keyvalue_min([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == {1: 1, 2: 2, 3: 3, 4: 4, 5: 5}", "assert group_keyvalue_min([(1, 1), (2, 2), (1, 0), (2, 1)]) == {1: 0, 2: 1}", "assert group_keyvalue_min([(1, 1), (1, 2), (1, 3), (1, 4)]) == {1: 1}", "assert group_keyvalue_min([(1, 5), (2, 6), (3, 7), (2, 5), (1, 4)]) == {1: 4, 2: 5, 3: 7}", "assert group_keyvalue_min([(1, 1), (2, 2), (3, 3), (1, 0), (2, -1), (3, -2)]) == {1: 0, 2: -1, 3: -2}", "assert group_keyvalue_min([(1, 100), (2, 200), (1, 50), (2, 150), (3, 300)]) == {1: 50, 2: 150, 3: 300}", "assert group_keyvalue_min([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (1, -1), (2, -2), (3, -3), (4, -4), (5, -5)]) == {1: -1, 2: -2, 3: -3, 4: -4, 5: -5}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the average of its values.", "code": "def group_keyvalue_avg(l):\n    result = {}\n    count = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n            count[k] = 0\n        result[k] += v\n        count[k] += 1\n    for k in result:\n        result[k] /= count[k]\n    return result", "task_id": "174_872383b0-ac2b-411e-b5ce-b9a1dff6198a", "test_setup_code": "", "test_list": ["assert group_keyvalue_avg([]) == {}", "assert group_keyvalue_avg([(1, 10)]) == {1: 10.0}", "assert group_keyvalue_avg([(1, 10), (1, 20)]) == {1: 15.0}", "assert group_keyvalue_avg([(1, 10), (2, 20)]) == {1: 10.0, 2: 20.0}", "assert group_keyvalue_avg([(1, 10), (2, 20), (1, 30)]) == {1: 20.0, 2: 20.0}", "assert group_keyvalue_avg([(1, 10), (2, 20), (3, 30), (1, 40), (2, 50), (3, 60)]) == {1: 25.0, 2: 35.0, 3: 45.0}", "assert group_keyvalue_avg([(1, 0), (1, 0), (1, 0)]) == {1: 0.0}", "assert group_keyvalue_avg([(1, -10), (1, -20)]) == {1: -15.0}", "assert group_keyvalue_avg([(1, 10), (2, 20), (1, 30), (2, 40), (3, 50)]) == {1: 20.0, 2: 30.0, 3: 50.0}", "assert group_keyvalue_avg([(1, 10), (1, 20), (1, 30), (1, 40), (1, 50)]) == {1: 30.0}", "assert group_keyvalue_avg([(1, 10), (2, 20), (3, 30), (4, 40), (5, 50), (6, 60)]) == {1: 10.0, 2: 20.0, 3: 30.0, 4: 40.0, 5: 50.0, 6: 60.0}", "assert group_keyvalue_avg([(1, 10), (1, 20), (2, 30), (2, 40), (3, 50), (3, 60), (3, 70)]) == {1: 15.0, 2: 35.0, 3: 60.0}", "assert group_keyvalue_avg([(1, 10), (2, 20), (3, 30), (1, 40), (2, 50), (3, 60), (1, 70), (2, 80), (3, 90)]) == {1: 40.0, 2: 50.0, 3: 60.0}", "assert group_keyvalue_avg([(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]) == {1: 3.0}", "assert group_keyvalue_avg([(1, 100), (2, 200), (1, 300), (2, 400), (3, 500), (3, 600)]) == {1: 200.0, 2: 300.0, 3: 550.0}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to a concatenated string of its values.", "code": "def group_keyvalue_concat(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = ''\n        result[k] += str(v)\n    return result", "task_id": "174_8b8cef82-a2c1-4a60-b8fb-c360c3b67a30", "test_setup_code": "", "test_list": ["assert group_keyvalue_concat([]) == {}", "assert group_keyvalue_concat([('a', '1')]) == {'a': '1'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2')]) == {'a': '1', 'b': '2'}", "assert group_keyvalue_concat([('a', '1'), ('a', '2')]) == {'a': '12'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('a', '3')]) == {'a': '13', 'b': '2'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('a', '3'), ('b', '4')]) == {'a': '13', 'b': '24'}", "assert group_keyvalue_concat([('a', '1'), ('a', '2'), ('a', '3')]) == {'a': '123'}", "assert group_keyvalue_concat([('a', ''), ('a', '2')]) == {'a': '2'}", "assert group_keyvalue_concat([('a', '1'), ('a', '')]) == {'a': '1'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('a', '3'), ('b', '4'), ('c', '5')]) == {'a': '13', 'b': '24', 'c': '5'}", "assert group_keyvalue_concat([('a', '1'), ('a', '2'), ('a', '3'), ('a', '4')]) == {'a': '1234'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('c', '3'), ('d', '4')]) == {'a': '1', 'b': '2', 'c': '3', 'd': '4'}", "assert group_keyvalue_concat([('a', '1'), ('a', '2'), ('b', '3'), ('b', '4'), ('c', '5'), ('c', '6')]) == {'a': '12', 'b': '34', 'c': '56'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('a', '3'), ('b', '4'), ('a', '5'), ('b', '6')]) == {'a': '135', 'b': '246'}", "assert group_keyvalue_concat([('a', '1'), ('b', '2'), ('c', '3'), ('d', '4'), ('e', '5'), ('f', '6'), ('g', '7'), ('h', '8')]) == {'a': '1', 'b': '2', 'c': '3', 'd': '4', 'e': '5', 'f': '6', 'g': '7', 'h': '8'}"], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, but the lists should be in reverse order of their appearance.", "code": "def group_keyvalue_reverse(l):\n    result = {}\n    for k, v in l[::-1]:\n        result.setdefault(k, []).append(v)\n    return result", "task_id": "174_0be911a6-3a80-4acc-ac5a-efb7256ee0b8", "test_setup_code": "", "test_list": ["assert group_keyvalue_reverse([]) == {}", "assert group_keyvalue_reverse([(1, 'a')]) == {1: ['a']}", "assert group_keyvalue_reverse([(1, 'a'), (1, 'b')]) == {1: ['b', 'a']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b')]) == {1: ['a'], 2: ['b']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (1, 'c')]) == {1: ['c', 'a'], 2: ['b']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'd')]) == {1: ['c', 'a'], 2: ['d', 'b']}", "assert group_keyvalue_reverse([(1, 'a'), (1, 'b'), (1, 'c')]) == {1: ['c', 'b', 'a']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (3, 'c')]) == {1: ['a'], 2: ['b'], 3: ['c']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (3, 'c'), (1, 'd')]) == {1: ['d', 'a'], 2: ['b'], 3: ['c']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (2, 'c'), (1, 'd')]) == {1: ['d', 'a'], 2: ['c', 'b']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (3, 'c'), (2, 'd'), (1, 'e')]) == {1: ['e', 'a'], 2: ['d', 'b'], 3: ['c']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (1, 'e'), (2, 'f')]) == {1: ['e', 'a'], 2: ['f', 'b'], 3: ['c'], 4: ['d']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (1, 'c'), (2, 'd'), (1, 'e'), (2, 'f')]) == {1: ['e', 'c', 'a'], 2: ['f', 'd', 'b']}", "assert group_keyvalue_reverse([(1, 'a'), (2, 'b'), (3, 'c'), (4, 'd'), (5, 'e'), (1, 'f'), (2, 'g'), (3, 'h'), (4, 'i'), (5, 'j')]) == {1: ['f', 'a'], 2: ['g', 'b'], 3: ['h', 'c'], 4: ['i', 'd'], 5: ['j', 'e']}", "assert group_keyvalue_reverse([(1, 'a'), (1, 'b'), (1, 'c'), (1, 'd'), (1, 'e')]) == {1: ['e', 'd', 'c', 'b', 'a']}"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of HTML tags.", "code": "def is_valid_html_tags(html: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(html):\n        if html[i] == '<':\n            j = i + 1\n            while j < len(html) and html[j] != '>':\n                j += 1\n            if j == len(html):\n                return False\n            tag = html[i+1:j]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_2442c29d-fa7a-4968-84c9-a6a248e11f0c", "test_setup_code": "", "test_list": ["assert is_valid_html_tags('<html><body></body></html>') == True", "assert is_valid_html_tags('<div><p></p></div>') == True", "assert is_valid_html_tags('<div><p></div></p>') == False", "assert is_valid_html_tags('<div><span></span><p></p></div>') == True", "assert is_valid_html_tags('<div><span><p></span></p></div>') == False", "assert is_valid_html_tags('<a><b><c></c></b></a>') == True", "assert is_valid_html_tags('<a><b><c></b></c></a>') == False", "assert is_valid_html_tags('<a><b></a></b>') == False", "assert is_valid_html_tags('<div><span></span>') == False", "assert is_valid_html_tags('<div><span></span></div><p></p>') == True", "assert is_valid_html_tags('<div><span></span></div><p>') == False", "assert is_valid_html_tags('<div><span><p></p></span></div>') == True", "assert is_valid_html_tags('<div><span><p></span></p></div>') == False", "assert is_valid_html_tags('<div></div><span></span>') == True", "assert is_valid_html_tags('<div><span></div></span>') == False"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing only square brackets.", "code": "def is_valid_brackets(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack", "task_id": "175_c5cec0c2-cd5f-426d-a53d-384dc94be430", "test_setup_code": "", "test_list": ["assert is_valid_brackets('') == True", "assert is_valid_brackets('[]') == True", "assert is_valid_brackets('[[]]') == True", "assert is_valid_brackets('[[[]]]') == True", "assert is_valid_brackets('[') == False", "assert is_valid_brackets(']') == False", "assert is_valid_brackets('][') == False", "assert is_valid_brackets('[[[[]]]]') == True", "assert is_valid_brackets('[[[]') == False", "assert is_valid_brackets('[]]') == False", "assert is_valid_brackets('[][') == False", "assert is_valid_brackets('[][]') == True", "assert is_valid_brackets('[[][]]') == True", "assert is_valid_brackets('[[[[]][]]]') == True", "assert is_valid_brackets('[[[[]]][]]') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a mathematical expression containing parentheses.", "code": "def is_valid_math_expression(expr: str) -> bool:\n    stack = []\n    for char in expr:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_61d49fcd-ebe5-4493-bf4c-3268f674e40c", "test_setup_code": "", "test_list": ["assert is_valid_math_expression('()') == True", "assert is_valid_math_expression('(())') == True", "assert is_valid_math_expression('(()') == False", "assert is_valid_math_expression(')(') == False", "assert is_valid_math_expression('') == True", "assert is_valid_math_expression('()()') == True", "assert is_valid_math_expression('((()))') == True", "assert is_valid_math_expression('(()))') == False", "assert is_valid_math_expression('(()())') == True", "assert is_valid_math_expression('((())') == False", "assert is_valid_math_expression('(()(()))') == True", "assert is_valid_math_expression('(()(()))(') == False", "assert is_valid_math_expression('(((())))') == True", "assert is_valid_math_expression('((())())') == True", "assert is_valid_math_expression('((())(()))') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of code blocks delimited by curly braces.", "code": "def is_valid_code_blocks(code: str) -> bool:\n    stack = []\n    for char in code:\n        if char == '{':\n            stack.append(char)\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n    return not stack", "task_id": "175_4689ec97-d390-4b1b-9c5d-7da8b23cab27", "test_setup_code": "", "test_list": ["assert is_valid_code_blocks('') == True", "assert is_valid_code_blocks('{}') == True", "assert is_valid_code_blocks('{{}}') == True", "assert is_valid_code_blocks('{{{}}}') == True", "assert is_valid_code_blocks('{}{}{}') == True", "assert is_valid_code_blocks('{}}') == False", "assert is_valid_code_blocks('{{}') == False", "assert is_valid_code_blocks('{{{{}}}}') == True", "assert is_valid_code_blocks('{{}{}}') == True", "assert is_valid_code_blocks('{{}}{}') == True", "assert is_valid_code_blocks('{{}}{') == False", "assert is_valid_code_blocks('}{') == False", "assert is_valid_code_blocks('}{}}{') == False", "assert is_valid_code_blocks('{a{b}c}') == True", "assert is_valid_code_blocks('{a{b}c}{d{e}f}') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing only angle brackets.", "code": "def is_valid_angle_brackets(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "task_id": "175_7b9013d4-50ae-4f8b-9db7-237268391166", "test_setup_code": "", "test_list": ["assert is_valid_angle_brackets('') == True", "assert is_valid_angle_brackets('<>') == True", "assert is_valid_angle_brackets('<<>>') == True", "assert is_valid_angle_brackets('<><>') == True", "assert is_valid_angle_brackets('<<><>>') == True", "assert is_valid_angle_brackets('>') == False", "assert is_valid_angle_brackets('<') == False", "assert is_valid_angle_brackets('><') == False", "assert is_valid_angle_brackets('<<>') == False", "assert is_valid_angle_brackets('<>>') == False", "assert is_valid_angle_brackets('<<><') == False", "assert is_valid_angle_brackets('<<><><>>') == True", "assert is_valid_angle_brackets('<<><><><>><<>><>') == True", "assert is_valid_angle_brackets('<<><><><>><<>><') == False", "assert is_valid_angle_brackets('<<><><><>><<>><>>') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of nested parentheses.", "code": "def is_valid_nested_parentheses(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_5fc59af0-844f-41ac-ac35-a400e87f688f", "test_setup_code": "", "test_list": ["assert is_valid_nested_parentheses('()') == True", "assert is_valid_nested_parentheses('') == True", "assert is_valid_nested_parentheses('(') == False", "assert is_valid_nested_parentheses(')') == False", "assert is_valid_nested_parentheses('()()') == True", "assert is_valid_nested_parentheses('(())') == True", "assert is_valid_nested_parentheses('(()') == False", "assert is_valid_nested_parentheses('())') == False", "assert is_valid_nested_parentheses('(((())))') == True", "assert is_valid_nested_parentheses('((())') == False", "assert is_valid_nested_parentheses('(()))') == False", "assert is_valid_nested_parentheses('()(()(()))') == True", "assert is_valid_nested_parentheses('(()(()))') == True", "assert is_valid_nested_parentheses('(()())((()))') == True", "assert is_valid_nested_parentheses('(()()(()))') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing mixed types of brackets (parentheses, square brackets, and curly braces).", "code": "def is_valid_mixed_brackets(s: str) -> bool:\n    stack = []\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    for char in s:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack.pop() != matching_bracket[char]:\n                return False\n    return not stack", "task_id": "175_8ada8bc6-18f4-4123-a13e-4dd105f94b63", "test_setup_code": "", "test_list": ["assert is_valid_mixed_brackets('()') == True", "assert is_valid_mixed_brackets('()[]{}') == True", "assert is_valid_mixed_brackets('(]') == False", "assert is_valid_mixed_brackets('([)]') == False", "assert is_valid_mixed_brackets('{[]}') == True", "assert is_valid_mixed_brackets('') == True", "assert is_valid_mixed_brackets('[') == False", "assert is_valid_mixed_brackets(']') == False", "assert is_valid_mixed_brackets('({[()]})') == True", "assert is_valid_mixed_brackets('({[([{}]){}]})') == True", "assert is_valid_mixed_brackets('({[([{}]){}]}}') == False", "assert is_valid_mixed_brackets('({[([{}]){}]])') == False", "assert is_valid_mixed_brackets('((()))') == True", "assert is_valid_mixed_brackets('((())') == False", "assert is_valid_mixed_brackets('(()))') == False"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of XML tags.", "code": "def is_valid_xml_tags(xml: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(xml):\n        if xml[i] == '<':\n            j = i + 1\n            while j < len(xml) and xml[j] != '>':\n                j += 1\n            if j == len(xml):\n                return False\n            tag = xml[i+1:j]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_48d7c879-0ad8-4d04-9b59-f485d87bcf43", "test_setup_code": "", "test_list": ["assert is_valid_xml_tags('<a><b></b></a>') == True", "assert is_valid_xml_tags('<a><b></a></b>') == False", "assert is_valid_xml_tags('<a></a><b></b>') == True", "assert is_valid_xml_tags('<a><b><c></c></b></a>') == True", "assert is_valid_xml_tags('<a><b><c></b></c></a>') == False", "assert is_valid_xml_tags('<a><b></b><c></c></a>') == True", "assert is_valid_xml_tags('<a><b><c></c></b><d></d></a>') == True", "assert is_valid_xml_tags('<a><b><c></c></d></a>') == False", "assert is_valid_xml_tags('<a><b></c></b></a>') == False", "assert is_valid_xml_tags('<a></a>') == True", "assert is_valid_xml_tags('<a>') == False", "assert is_valid_xml_tags('</a>') == False", "assert is_valid_xml_tags('<a><b></b>') == False", "assert is_valid_xml_tags('<a><b></b></a><c></c>') == True", "assert is_valid_xml_tags('<a><b><c></c></b></a><d></d>') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a mathematical expression containing parentheses and operators (+, -, *, /).", "code": "def is_valid_expression_with_operators(expr: str) -> bool:\n    stack = []\n    for char in expr:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_32f6f474-e570-46bc-b82c-b5a1e18db191", "test_setup_code": "", "test_list": ["assert is_valid_expression_with_operators('()') == True", "assert is_valid_expression_with_operators('(())') == True", "assert is_valid_expression_with_operators('(()') == False", "assert is_valid_expression_with_operators('())') == False", "assert is_valid_expression_with_operators('') == True", "assert is_valid_expression_with_operators('((()))') == True", "assert is_valid_expression_with_operators('(()))(') == False", "assert is_valid_expression_with_operators('(a+b)') == True", "assert is_valid_expression_with_operators('(a+b)*(c-d)') == True", "assert is_valid_expression_with_operators('((a+b)*(c-d))') == True", "assert is_valid_expression_with_operators('((a+b)*(c-d)') == False", "assert is_valid_expression_with_operators('a+b') == True", "assert is_valid_expression_with_operators('a+b*(c-d)') == True", "assert is_valid_expression_with_operators('a+b*(c-d))') == False", "assert is_valid_expression_with_operators('a+b*(c-d)(e/f)') == True"], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of HTML tags with attributes.", "code": "def is_valid_html_with_attributes(html: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(html):\n        if html[i] == '<':\n            j = i + 1\n            while j < len(html) and html[j] != '>':\n                j += 1\n            if j == len(html):\n                return False\n            tag = html[i+1:j].split()[0]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_6234a65f-46c1-4cd0-8526-735306560b84", "test_setup_code": "", "test_list": ["assert is_valid_html_with_attributes('<div></div>') == True", "assert is_valid_html_with_attributes('<div><p></p></div>') == True", "assert is_valid_html_with_attributes('<div><p></div></p>') == False", "assert is_valid_html_with_attributes('<div><p></p><span></span></div>') == True", "assert is_valid_html_with_attributes('<div><p><span></span></p></div>') == True", "assert is_valid_html_with_attributes('<div><p><span></span></div>') == False", "assert is_valid_html_with_attributes('<div class=\"test\"></div>') == True", "assert is_valid_html_with_attributes('<div class=\"test\"><p id=\"p1\"></p></div>') == True", "assert is_valid_html_with_attributes('<div class=\"test\"><p id=\"p1\"></div></p>') == False", "assert is_valid_html_with_attributes('<div class=\"test\"><p id=\"p1\"><span></span></p></div>') == True", "assert is_valid_html_with_attributes('<div class=\"test\"><p id=\"p1\"><span></span></div>') == False", "assert is_valid_html_with_attributes('<div><p><span></span></p>') == False", "assert is_valid_html_with_attributes('<div><p><span></span></p><a href=\"#\"></a></div>') == True", "assert is_valid_html_with_attributes('<div><p><span></span></p><a href=\"#\"></div></a>') == False", "assert is_valid_html_with_attributes('<div><p><span></span></p><a href=\"#\" target=\"_blank\"></a></div>') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a substring exists within a given string.", "code": "def find_substring(main_string: str, sub_string: str) -> bool:\n    return sub_string in main_string", "task_id": "178_5ab800be-0d1e-4452-8891-ec73dc234e2e", "test_setup_code": "", "test_list": ["assert find_substring('hello world', 'world') == True", "assert find_substring('hello world', 'hello') == True", "assert find_substring('hello world', 'o w') == True", "assert find_substring('hello world', 'worlds') == False", "assert find_substring('hello world', '') == True", "assert find_substring('', 'hello') == False", "assert find_substring('a', 'a') == True", "assert find_substring('a', 'b') == False", "assert find_substring('abc', 'abc') == True", "assert find_substring('abc', 'abcd') == False", "assert find_substring('abcabcabc', 'abc') == True", "assert find_substring('abcabcabc', 'cab') == True", "assert find_substring('abcabcabc', 'ac') == False", "assert find_substring('mississippi', 'iss') == True", "assert find_substring('mississippi', 'ssi') == True"], "challenge_test_list": []}
{"text": "Write a function to count the number of times a substring appears in a given string.", "code": "def count_occurrences(main_string: str, sub_string: str) -> int:\n    return main_string.count(sub_string)", "task_id": "178_63ccbdf7-5f02-482f-8e79-815b869d1bce", "test_setup_code": "", "test_list": ["assert count_occurrences('hello world', 'o') == 2", "assert count_occurrences('hello world', 'l') == 3", "assert count_occurrences('hello world', 'world') == 1", "assert count_occurrences('hello world', 'hello') == 1", "assert count_occurrences('hello world', ' ') == 1", "assert count_occurrences('hello world', 'z') == 0", "assert count_occurrences('aaaaa', 'aa') == 4", "assert count_occurrences('abcabcabc', 'abc') == 3", "assert count_occurrences('abcabcabc', 'bca') == 2", "assert count_occurrences('mississippi', 'iss') == 2", "assert count_occurrences('mississippi', 'sip') == 1", "assert count_occurrences('mississippi', 'si') == 2", "assert count_occurrences('a', 'a') == 1", "assert count_occurrences('a', 'b') == 0", "assert count_occurrences('', 'a') == 0"], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of a substring with another substring in a given string.", "code": "def replace_substring(main_string: str, old_sub: str, new_sub: str) -> str:\n    return main_string.replace(old_sub, new_sub)", "task_id": "178_7f635d09-285b-45b4-877e-aef9441af629", "test_setup_code": "", "test_list": ["assert replace_substring('hello world', 'world', 'there') == 'hello there'", "assert replace_substring('aaaa', 'a', 'b') == 'bbbb'", "assert replace_substring('abcdabcd', 'abc', 'xyz') == 'xyzdxyd'", "assert replace_substring('hello', 'l', 'L') == 'heLLo'", "assert replace_substring('hello', 'o', 'oo') == 'helloo'", "assert replace_substring('hello', 'x', 'y') == 'hello'", "assert replace_substring('hello', '', 'y') == 'hello'", "assert replace_substring('', 'a', 'b') == ''", "assert replace_substring('a', 'a', 'b') == 'b'", "assert replace_substring('abcabcabc', 'abc', 'a') == 'aaa'", "assert replace_substring('abcabcabc', 'abc', '') == ''", "assert replace_substring('mississippi', 'iss', 'ississ') == 'mississississippi'", "assert replace_substring('mississippi', 'iss', 'i') == 'miippi'", "assert replace_substring('123123123', '123', '321') == '321321321'", "assert replace_substring('abababab', 'ab', 'ba') == 'babababa'"], "challenge_test_list": []}
{"text": "Write a function to find all starting indices of a substring in a given string.", "code": "def find_all_indices(main_string: str, sub_string: str) -> list:\n    indices = []\n    index = main_string.find(sub_string)\n    while index != -1:\n        indices.append(index)\n        index = main_string.find(sub_string, index + 1)\n    return indices", "task_id": "178_8eda80c3-15bd-486a-9d99-44e80d44f443", "test_setup_code": "", "test_list": ["assert find_all_indices('hello world', 'o') == [4, 7]", "assert find_all_indices('aaaaa', 'aa') == [0, 1, 2, 3]", "assert find_all_indices('abcabcabc', 'abc') == [0, 3, 6]", "assert find_all_indices('abcabcabc', 'bca') == [1, 4, 7]", "assert find_all_indices('mississippi', 'iss') == [1, 4]", "assert find_all_indices('mississippi', 'sip') == [6]", "assert find_all_indices('mississippi', 'xyz') == []", "assert find_all_indices('a', 'a') == [0]", "assert find_all_indices('a', 'b') == []", "assert find_all_indices('abc', '') == []", "assert find_all_indices('', 'a') == []", "assert find_all_indices('abc', 'abc') == [0]", "assert find_all_indices('abc', 'abcd') == []", "assert find_all_indices('abababab', 'ab') == [0, 2, 4, 6]", "assert find_all_indices('abababab', 'aba') == [0, 4]"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "178_60ceb2b2-286a-42f8-a3b8-b41528f216a1", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abba') == True", "assert is_palindrome('abcba') == True", "assert is_palindrome('12321') == True", "assert is_palindrome('123321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('!@#@!') == True", "assert is_palindrome('a b c b a') == True", "assert is_palindrome('a b c d e') == False"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "178_08aacb24-c5bd-42f3-ae45-334fdd0f92b3", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('123abcXYZ') == 'ZYXcba321'", "assert reverse_string(' ') == ' '", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('palindromeemordnilap') == 'palindromeemordnilap'"], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "178_b8eed843-ca4f-448c-8c06-833a4f2999f6", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('capitalize every first letter') == 'Capitalize Every First Letter'", "assert capitalize_words('python programming language') == 'Python Programming Language'", "assert capitalize_words('a quick brown fox') == 'A Quick Brown Fox'", "assert capitalize_words('jumps over the lazy dog') == 'Jumps Over The Lazy Dog'", "assert capitalize_words('123 testing 456') == '123 Testing 456'", "assert capitalize_words('multiple   spaces') == 'Multiple   Spaces'", "assert capitalize_words('') == ''", "assert capitalize_words('singleword') == 'Singleword'", "assert capitalize_words('UPPERCASE LETTERS') == 'Uppercase Letters'", "assert capitalize_words('mIxEd CaSe LeTtErS') == 'Mixed Case Letters'", "assert capitalize_words('special characters! @#') == 'Special Characters! @#'", "assert capitalize_words('new\nline') == 'New\nLine'", "assert capitalize_words('tab\tseparated') == 'Tab\tSeparated'"], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "178_12c7866c-ed85-4188-8f4c-74fd3da4fff1", "test_setup_code": "", "test_list": ["assert remove_whitespace('hello world') == 'helloworld'", "assert remove_whitespace('  leading and trailing  ') == 'leadingandtrailing'", "assert remove_whitespace('multiple   spaces') == 'multiplespaces'", "assert remove_whitespace('') == ''", "assert remove_whitespace('no_spaces') == 'no_spaces'", "assert remove_whitespace('a b c d e f g') == 'abcdefg'", "assert remove_whitespace('   ') == ''", "assert remove_whitespace('single space ') == 'singlespace'", "assert remove_whitespace(' space at start') == 'spaceatstart'", "assert remove_whitespace('tab\tseparated') == 'tab\tseparated'", "assert remove_whitespace('new\nline') == 'new\nline'", "assert remove_whitespace('mixed \t whitespace \n types') == 'mixed\twhitespace\ntypes'", "assert remove_whitespace('!@# $%^ &*()_+') == '!@#$%^&*()_+'", "assert remove_whitespace('123 456 789') == '123456789'", "assert remove_whitespace('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'abcdefghijklmnopqrstuvwxyz'"], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "178_c267006a-5ebc-44f9-9e6a-af42ead08bef", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abcd', 'dcba') == True", "assert is_anagram('abcd', 'abcc') == False", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '322') == False", "assert is_anagram('aabbcc', 'ccbbaa') == True", "assert is_anagram('aabbcc', 'aabbc') == False", "assert is_anagram('abc!', '!cba') == True", "assert is_anagram('abc!', 'abc') == False"], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest", "task_id": "178_85cabc29-f661-41e0-8350-d6c3cfb684fc", "test_setup_code": "", "test_list": ["assert longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'", "assert longest_word('A journey of a thousand miles begins with a single step') == 'thousand'", "assert longest_word('To be or not to be that is the question') == 'question'", "assert longest_word('') == ''", "assert longest_word('a') == 'a'", "assert longest_word('abc def ghi jkl mno') == 'abc'", "assert longest_word('one two three four five six seven eight nine ten') == 'three'", "assert longest_word('supercalifragilisticexpialidocious') == 'supercalifragilisticexpialidocious'", "assert longest_word('hello world') == 'hello'", "assert longest_word('Python is awesome') == 'awesome'", "assert longest_word('I love programming') == 'programming'", "assert longest_word('Edge cases are important to test') == 'important'", "assert longest_word('Short and long words') == 'words'", "assert longest_word('Equal length words test case') == 'Equal'", "assert longest_word('Spaces    between    words') == 'between'"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum lies within the given range.", "code": "def find_pair_with_sum(x, y):\n    if x + 1 <= y:\n        return (x, x + 1)\n    else:\n        return (-1, -1)", "task_id": "177_24250ad4-890d-4de4-bd30-10cb5e5de107", "test_setup_code": "", "test_list": ["assert find_pair_with_sum(1, 3) == (1, 2)", "assert find_pair_with_sum(5, 10) == (5, 6)", "assert find_pair_with_sum(0, 1) == (-1, -1)", "assert find_pair_with_sum(-1, 1) == (-1, 0)", "assert find_pair_with_sum(100, 200) == (100, 101)", "assert find_pair_with_sum(50, 51) == (50, 51)", "assert find_pair_with_sum(10, 10) == (-1, -1)", "assert find_pair_with_sum(999, 1000) == (999, 1000)", "assert find_pair_with_sum(-10, -5) == (-10, -9)", "assert find_pair_with_sum(-100, -99) == (-100, -99)", "assert find_pair_with_sum(0, 0) == (-1, -1)", "assert find_pair_with_sum(1, 2) == (1, 2)", "assert find_pair_with_sum(2, 2) == (-1, -1)", "assert find_pair_with_sum(-1, 0) == (-1, 0)", "assert find_pair_with_sum(1000, 1001) == (1000, 1001)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their product lies within the given range.", "code": "def find_pair_with_product(x, y):\n    if x * 2 <= y:\n        return (x, x * 2)\n    else:\n        return (-1, -1)", "task_id": "177_d5e30407-b416-4c64-b5e3-d55d51655d6b", "test_setup_code": "", "test_list": ["assert find_pair_with_product(1, 2) == (1, 2)", "assert find_pair_with_product(2, 5) == (2, 4)", "assert find_pair_with_product(3, 10) == (3, 6)", "assert find_pair_with_product(4, 7) == (4, 8)", "assert find_pair_with_product(5, 20) == (5, 10)", "assert find_pair_with_product(6, 15) == (6, 12)", "assert find_pair_with_product(7, 14) == (7, 14)", "assert find_pair_with_product(8, 16) == (8, 16)", "assert find_pair_with_product(1, 1) == (-1, -1)", "assert find_pair_with_product(10, 19) == (-1, -1)", "assert find_pair_with_product(0, 0) == (-1, -1)", "assert find_pair_with_product(100, 200) == (100, 200)", "assert find_pair_with_product(50, 100) == (50, 100)", "assert find_pair_with_product(25, 50) == (25, 50)", "assert find_pair_with_product(30, 60) == (30, 60)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their difference lies within the given range.", "code": "def find_pair_with_difference(x, y):\n    if x + 1 <= y:\n        return (x + 1, x)\n    else:\n        return (-1, -1)", "task_id": "177_b6a81947-549f-4fd2-a970-9984e07ad898", "test_setup_code": "", "test_list": ["assert find_pair_with_difference(1, 3) == (2, 1)", "assert find_pair_with_difference(5, 10) == (6, 5)", "assert find_pair_with_difference(0, 0) == (-1, -1)", "assert find_pair_with_difference(2, 2) == (-1, -1)", "assert find_pair_with_difference(100, 101) == (101, 100)", "assert find_pair_with_difference(-5, 0) == (-4, -5)", "assert find_pair_with_difference(10, 20) == (11, 10)", "assert find_pair_with_difference(7, 7) == (-1, -1)", "assert find_pair_with_difference(50, 55) == (51, 50)", "assert find_pair_with_difference(-10, -5) == (-9, -10)", "assert find_pair_with_difference(0, 1) == (1, 0)", "assert find_pair_with_difference(3, 4) == (4, 3)", "assert find_pair_with_difference(1000, 1001) == (1001, 1000)", "assert find_pair_with_difference(-1, 1) == (0, -1)", "assert find_pair_with_difference(999, 1000) == (1000, 999)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is an even number within the given range.", "code": "def find_pair_with_sum_even(x, y):\n    if x % 2 == 0 and x + 2 <= y:\n        return (x, x + 2)\n    elif x % 2 != 0 and x + 1 <= y:\n        return (x, x + 1)\n    else:\n        return (-1, -1)", "task_id": "177_0cee319d-a060-4fc6-844d-81c513719124", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_even(1, 10) == (1, 3)", "assert find_pair_with_sum_even(2, 10) == (2, 4)", "assert find_pair_with_sum_even(5, 10) == (5, 7)", "assert find_pair_with_sum_even(8, 10) == (8, 10)", "assert find_pair_with_sum_even(10, 12) == (10, 12)", "assert find_pair_with_sum_even(11, 13) == (11, 13)", "assert find_pair_with_sum_even(2, 3) == (2, 4)", "assert find_pair_with_sum_even(1, 2) == (1, 3)", "assert find_pair_with_sum_even(0, 1) == (0, 2)", "assert find_pair_with_sum_even(0, 0) == (-1, -1)", "assert find_pair_with_sum_even(1, 1) == (-1, -1)", "assert find_pair_with_sum_even(2, 2) == (-1, -1)", "assert find_pair_with_sum_even(100, 102) == (100, 102)", "assert find_pair_with_sum_even(99, 101) == (99, 101)", "assert find_pair_with_sum_even(1000, 1002) == (1000, 1002)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is an odd number within the given range.", "code": "def find_pair_with_sum_odd(x, y):\n    if x % 2 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif x % 2 != 0 and x + 2 <= y:\n        return (x, x + 2)\n    else:\n        return (-1, -1)", "task_id": "177_d26dc5a5-06b5-48db-a077-5399848a796a", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_odd(1, 10) == (1, 3)", "assert find_pair_with_sum_odd(2, 10) == (2, 3)", "assert find_pair_with_sum_odd(5, 5) == (-1, -1)", "assert find_pair_with_sum_odd(0, 1) == (0, 1)", "assert find_pair_with_sum_odd(10, 20) == (10, 11)", "assert find_pair_with_sum_odd(7, 8) == (7, 9)", "assert find_pair_with_sum_odd(8, 8) == (-1, -1)", "assert find_pair_with_sum_odd(3, 4) == (3, 5)", "assert find_pair_with_sum_odd(100, 101) == (100, 101)", "assert find_pair_with_sum_odd(99, 100) == (99, 101)", "assert find_pair_with_sum_odd(0, 0) == (-1, -1)", "assert find_pair_with_sum_odd(1, 1) == (-1, -1)", "assert find_pair_with_sum_odd(2, 2) == (-1, -1)", "assert find_pair_with_sum_odd(50, 51) == (50, 51)", "assert find_pair_with_sum_odd(51, 52) == (51, 53)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a multiple of three within the given range.", "code": "def find_pair_with_sum_multiple_of_three(x, y):\n    if (x + 1) % 3 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif (x + 2) % 3 == 0 and x + 2 <= y:\n        return (x, x + 2)\n    else:\n        return (-1, -1)", "task_id": "177_30627b6d-87b1-4bff-90d0-3ae625e420d6", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_multiple_of_three(1, 4) == (1, 2)", "assert find_pair_with_sum_multiple_of_three(2, 5) == (2, 4)", "assert find_pair_with_sum_multiple_of_three(3, 6) == (3, 4)", "assert find_pair_with_sum_multiple_of_three(10, 15) == (10, 11)", "assert find_pair_with_sum_multiple_of_three(0, 2) == (0, 2)", "assert find_pair_with_sum_multiple_of_three(5, 8) == (5, 7)", "assert find_pair_with_sum_multiple_of_three(7, 10) == (7, 8)", "assert find_pair_with_sum_multiple_of_three(8, 11) == (8, 10)", "assert find_pair_with_sum_multiple_of_three(1, 1) == (-1, -1)", "assert find_pair_with_sum_multiple_of_three(0, 0) == (-1, -1)", "assert find_pair_with_sum_multiple_of_three(0, 1) == (-1, -1)", "assert find_pair_with_sum_multiple_of_three(9, 9) == (-1, -1)", "assert find_pair_with_sum_multiple_of_three(100, 105) == (100, 101)", "assert find_pair_with_sum_multiple_of_three(50, 52) == (50, 51)", "assert find_pair_with_sum_multiple_of_three(20, 23) == (20, 22)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a multiple of five within the given range.", "code": "def find_pair_with_sum_multiple_of_five(x, y):\n    if (x + 1) % 5 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif (x + 4) % 5 == 0 and x + 4 <= y:\n        return (x, x + 4)\n    else:\n        return (-1, -1)", "task_id": "177_4fb5cd75-76ab-45c9-af58-df0843e4f2ac", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_multiple_of_five(1, 10) == (1, 4)", "assert find_pair_with_sum_multiple_of_five(2, 7) == (2, 3)", "assert find_pair_with_sum_multiple_of_five(5, 15) == (5, 9)", "assert find_pair_with_sum_multiple_of_five(0, 4) == (0, 4)", "assert find_pair_with_sum_multiple_of_five(10, 20) == (10, 15)", "assert find_pair_with_sum_multiple_of_five(8, 12) == (8, 12)", "assert find_pair_with_sum_multiple_of_five(3, 8) == (3, 7)", "assert find_pair_with_sum_multiple_of_five(6, 9) == (6, 9)", "assert find_pair_with_sum_multiple_of_five(11, 16) == (11, 14)", "assert find_pair_with_sum_multiple_of_five(13, 18) == (13, 17)", "assert find_pair_with_sum_multiple_of_five(20, 25) == (20, 25)", "assert find_pair_with_sum_multiple_of_five(0, 1) == (-1, -1)", "assert find_pair_with_sum_multiple_of_five(4, 9) == (4, 6)", "assert find_pair_with_sum_multiple_of_five(7, 14) == (7, 8)", "assert find_pair_with_sum_multiple_of_five(19, 23) == (19, 21)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a prime number within the given range.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_pair_with_sum_prime(x, y):\n    for i in range(x, y):\n        if is_prime(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_1bab95de-6ec9-4107-b1cb-3b4326c222f5", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_prime(1, 10) == (2, 3)", "assert find_pair_with_sum_prime(10, 20) == (10, 11)", "assert find_pair_with_sum_prime(20, 30) == (20, 21)", "assert find_pair_with_sum_prime(30, 40) == (30, 31)", "assert find_pair_with_sum_prime(40, 50) == (40, 41)", "assert find_pair_with_sum_prime(50, 60) == (50, 51)", "assert find_pair_with_sum_prime(60, 70) == (60, 61)", "assert find_pair_with_sum_prime(70, 80) == (70, 71)", "assert find_pair_with_sum_prime(80, 90) == (80, 81)", "assert find_pair_with_sum_prime(90, 100) == (90, 91)", "assert find_pair_with_sum_prime(1, 2) == (-1, -1)", "assert find_pair_with_sum_prime(2, 3) == (2, 3)", "assert find_pair_with_sum_prime(5, 6) == (-1, -1)", "assert find_pair_with_sum_prime(14, 15) == (-1, -1)", "assert find_pair_with_sum_prime(100, 110) == (100, 101)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a perfect square within the given range.", "code": "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\n\ndef find_pair_with_sum_square(x, y):\n    for i in range(x, y):\n        if is_perfect_square(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_c9154b3a-ce57-4e00-a798-5e79b90d3a73", "test_setup_code": "", "test_list": ["assert find_pair_with_sum_square(1, 10) == (3, 4)", "assert find_pair_with_sum_square(10, 20) == (15, 16)", "assert find_pair_with_sum_square(20, 30) == (24, 25)", "assert find_pair_with_sum_square(30, 40) == (35, 36)", "assert find_pair_with_sum_square(40, 50) == (48, 49)", "assert find_pair_with_sum_square(50, 60) == (-1, -1)", "assert find_pair_with_sum_square(60, 70) == (63, 64)", "assert find_pair_with_sum_square(70, 80) == (72, 73)", "assert find_pair_with_sum_square(80, 90) == (80, 81)", "assert find_pair_with_sum_square(90, 100) == (96, 97)", "assert find_pair_with_sum_square(1, 2) == (-1, -1)", "assert find_pair_with_sum_square(1, 3) == (-1, -1)", "assert find_pair_with_sum_square(1, 4) == (-1, -1)", "assert find_pair_with_sum_square(1, 5) == (-1, -1)", "assert find_pair_with_sum_square(1, 6) == (-1, -1)"], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a Fibonacci number within the given range.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef find_pair_with_sum_fibonacci(x, y):\n    for i in range(x, y):\n        if is_fibonacci(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_77480857-3ba9-4fa5-82b5-fe304abda160", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == True", "assert is_fibonacci(1) == True", "assert is_fibonacci(2) == True", "assert is_fibonacci(3) == True", "assert is_fibonacci(4) == False", "assert is_fibonacci(5) == True", "assert is_fibonacci(6) == False", "assert is_fibonacci(7) == False", "assert is_fibonacci(8) == True", "assert is_fibonacci(13) == True", "assert is_fibonacci(21) == True", "assert is_fibonacci(34) == True", "assert is_fibonacci(55) == True", "assert is_fibonacci(89) == True", "assert is_fibonacci(144) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a happy number or not.", "code": "def is_happy_number(x):\n    def get_next(n):\n        total_sum = 0\n        while n > 0:\n            n, digit = divmod(n, 10)\n            total_sum += digit ** 2\n        return total_sum\n    seen = set()\n    while x != 1 and x not in seen:\n        seen.add(x)\n        x = get_next(x)\n    return x == 1", "task_id": "179_22cdcede-21af-46b4-b873-3e2e9975bacf", "test_setup_code": "", "test_list": ["assert is_happy_number(19) == True", "assert is_happy_number(2) == False", "assert is_happy_number(7) == True", "assert is_happy_number(1) == True", "assert is_happy_number(0) == False", "assert is_happy_number(100) == True", "assert is_happy_number(4) == False", "assert is_happy_number(10) == True", "assert is_happy_number(13) == True", "assert is_happy_number(20) == False", "assert is_happy_number(23) == True", "assert is_happy_number(28) == True", "assert is_happy_number(31) == True", "assert is_happy_number(32) == False", "assert is_happy_number(44) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is an Armstrong number or not.", "code": "def is_armstrong_number(x):\n    num_str = str(x)\n    num_len = len(num_str)\n    total = sum(int(digit) ** num_len for digit in num_str)\n    return total == x", "task_id": "179_b6a3ef69-8d24-4b8d-8248-dd76b67d5542", "test_setup_code": "", "test_list": ["assert is_armstrong_number(153) == True", "assert is_armstrong_number(370) == True", "assert is_armstrong_number(371) == True", "assert is_armstrong_number(407) == True", "assert is_armstrong_number(0) == True", "assert is_armstrong_number(1) == True", "assert is_armstrong_number(10) == False", "assert is_armstrong_number(100) == False", "assert is_armstrong_number(9474) == True", "assert is_armstrong_number(9475) == False", "assert is_armstrong_number(9473) == False", "assert is_armstrong_number(9475) == False", "assert is_armstrong_number(9926315) == True", "assert is_armstrong_number(9926314) == False", "assert is_armstrong_number(9926316) == False"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a palindrome or not.", "code": "def is_palindrome(x):\n    return str(x) == str(x)[::-1]", "task_id": "179_49580640-a082-469d-840a-a69b626e9db4", "test_setup_code": "", "test_list": ["assert is_palindrome(121) == True", "assert is_palindrome(-121) == False", "assert is_palindrome(10) == False", "assert is_palindrome(0) == True", "assert is_palindrome(1) == True", "assert is_palindrome(12321) == True", "assert is_palindrome(123321) == True", "assert is_palindrome(123456) == False", "assert is_palindrome(1001) == True", "assert is_palindrome(1002) == False", "assert is_palindrome(22) == True", "assert is_palindrome(1234321) == True", "assert is_palindrome(12344321) == True", "assert is_palindrome(123454321) == True", "assert is_palindrome(1234554321) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Fibonacci number or not.", "code": "def is_fibonacci_number(x):\n    a, b = 0, 1\n    while b < x:\n        a, b = b, a + b\n    return b == x or x == 0", "task_id": "179_e3fa6d06-e6e9-460d-bb35-7b0a5ecb890d", "test_setup_code": "", "test_list": ["assert is_fibonacci_number(0) == True", "assert is_fibonacci_number(1) == True", "assert is_fibonacci_number(2) == True", "assert is_fibonacci_number(3) == True", "assert is_fibonacci_number(4) == False", "assert is_fibonacci_number(5) == True", "assert is_fibonacci_number(6) == False", "assert is_fibonacci_number(8) == True", "assert is_fibonacci_number(13) == True", "assert is_fibonacci_number(21) == True", "assert is_fibonacci_number(22) == False", "assert is_fibonacci_number(34) == True", "assert is_fibonacci_number(55) == True", "assert is_fibonacci_number(89) == True", "assert is_fibonacci_number(144) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a prime number or not.", "code": "def is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True", "task_id": "179_daafc0a1-552b-4f1b-831c-7fbdcbcfacbd", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(97) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a perfect number or not.", "code": "def is_perfect_number(x):\n    if x < 2:\n        return False\n    divisors = [1]\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            divisors.extend([i, x // i])\n    return sum(set(divisors)) == x", "task_id": "179_bf9590db-bf13-4c65-9da6-8cdc2a3aaa8c", "test_setup_code": "", "test_list": ["assert is_perfect_number(6) == True", "assert is_perfect_number(28) == True", "assert is_perfect_number(496) == True", "assert is_perfect_number(1) == False", "assert is_perfect_number(0) == False", "assert is_perfect_number(-6) == False", "assert is_perfect_number(12) == False", "assert is_perfect_number(27) == False", "assert is_perfect_number(2) == False", "assert is_perfect_number(3) == False", "assert is_perfect_number(10) == False", "assert is_perfect_number(496) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Harshad number or not.", "code": "def is_harshad_number(x):\n    return x % sum(int(digit) for digit in str(x)) == 0", "task_id": "179_be4fc0ee-ce10-4503-9e3f-18e4011a83d9", "test_setup_code": "", "test_list": ["assert is_harshad_number(18) == True", "assert is_harshad_number(21) == True", "assert is_harshad_number(19) == False", "assert is_harshad_number(1) == True", "assert is_harshad_number(0) == True", "assert is_harshad_number(100) == True", "assert is_harshad_number(101) == False", "assert is_harshad_number(12) == True", "assert is_harshad_number(11) == False", "assert is_harshad_number(999) == True", "assert is_harshad_number(1000) == True", "assert is_harshad_number(1001) == False", "assert is_harshad_number(1729) == True", "assert is_harshad_number(6804) == True", "assert is_harshad_number(6805) == False"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is an automorphic number or not.", "code": "def is_automorphic_number(x):\n    return str(x) == str(x ** 2)[-len(str(x)):]", "task_id": "179_762cd403-d340-42c6-aea3-efc2bb08a071", "test_setup_code": "", "test_list": ["assert is_automorphic_number(5) == True", "assert is_automorphic_number(6) == True", "assert is_automorphic_number(25) == True", "assert is_automorphic_number(76) == True", "assert is_automorphic_number(376) == True", "assert is_automorphic_number(1) == True", "assert is_automorphic_number(0) == True", "assert is_automorphic_number(10) == False", "assert is_automorphic_number(11) == False", "assert is_automorphic_number(100) == False", "assert is_automorphic_number(625) == True", "assert is_automorphic_number(9376) == True", "assert is_automorphic_number(890625) == True", "assert is_automorphic_number(7) == False", "assert is_automorphic_number(13) == False"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Smith number or not.", "code": "def is_smith_number(x):\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    if is_prime(x):\n        return False\n    sum_digits = sum(int(digit) for digit in str(x))\n    sum_factors = sum(int(digit) for factor in prime_factors(x) for digit in str(factor))\n    return sum_digits == sum_factors", "task_id": "179_d1f0e07d-7ce2-4c11-a620-33bfb6f8aeb0", "test_setup_code": "", "test_list": ["assert is_smith_number(4) == True", "assert is_smith_number(22) == True", "assert is_smith_number(27) == True", "assert is_smith_number(58) == True", "assert is_smith_number(85) == True", "assert is_smith_number(94) == True", "assert is_smith_number(121) == False", "assert is_smith_number(166) == True", "assert is_smith_number(202) == True", "assert is_smith_number(200) == False", "assert is_smith_number(666) == True", "assert is_smith_number(1) == False", "assert is_smith_number(2) == False", "assert is_smith_number(7) == False", "assert is_smith_number(378) == True"], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a magic number or not.", "code": "def is_magic_number(x):\n    while x > 9:\n        x = sum(int(digit) for digit in str(x))\n    return x == 1", "task_id": "179_74d6be92-3423-488c-8e91-1874b23c5155", "test_setup_code": "", "test_list": ["assert is_magic_number(1) == True", "assert is_magic_number(10) == True", "assert is_magic_number(19) == True", "assert is_magic_number(28) == True", "assert is_magic_number(37) == True", "assert is_magic_number(46) == True", "assert is_magic_number(55) == True", "assert is_magic_number(64) == True", "assert is_magic_number(73) == True", "assert is_magic_number(82) == True", "assert is_magic_number(91) == True", "assert is_magic_number(100) == True", "assert is_magic_number(123456) == False", "assert is_magic_number(987654) == False", "assert is_magic_number(0) == False"], "challenge_test_list": []}
{"text": "Write a function to find all vowels and consonants in a given string using regex.", "code": "import re\ndef find_vowels_consonants(string):\n  vowels = re.findall(r'[aeiouAEIOU]', string)\n  consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', string)\n  return vowels, consonants", "task_id": "182_262b5a01-6b4f-418d-8931-f138d226be11", "test_setup_code": "", "test_list": ["assert find_vowels_consonants('hello') == (['e', 'o'], ['h', 'l', 'l'])", "assert find_vowels_consonants('HELLO') == (['E', 'O'], ['H', 'L', 'L'])", "assert find_vowels_consonants('aeiou') == (['a', 'e', 'i', 'o', 'u'], [])", "assert find_vowels_consonants('AEIOU') == (['A', 'E', 'I', 'O', 'U'], [])", "assert find_vowels_consonants('bcdfg') == ([], ['b', 'c', 'd', 'f', 'g'])", "assert find_vowels_consonants('BCDFG') == ([], ['B', 'C', 'D', 'F', 'G'])", "assert find_vowels_consonants('') == ([], [])", "assert find_vowels_consonants('a') == (['a'], [])", "assert find_vowels_consonants('b') == ([], ['b'])", "assert find_vowels_consonants('aB') == (['a'], ['B'])", "assert find_vowels_consonants('123') == ([], [])", "assert find_vowels_consonants('a1b2c3') == (['a'], ['b', 'c'])", "assert find_vowels_consonants('Hello, World!') == (['e', 'o', 'o'], ['H', 'l', 'l', 'W', 'r', 'l', 'd'])", "assert find_vowels_consonants('AEIOUaeiou') == (['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'], [])", "assert find_vowels_consonants('!@#$%^&*()') == ([], [])"], "challenge_test_list": []}
{"text": "Write a function to find all words and numbers in a given string using regex.", "code": "import re\ndef find_words_numbers(string):\n  words = re.findall(r'\\b[A-Za-z]+\\b', string)\n  numbers = re.findall(r'\\b[0-9]+\\b', string)\n  return words, numbers", "task_id": "182_5dca5379-3038-4e48-9c64-5c48d74e3b1c", "test_setup_code": "", "test_list": ["assert find_words_numbers('Hello world 123') == (['Hello', 'world'], ['123'])", "assert find_words_numbers('') == ([], [])", "assert find_words_numbers('abc123xyz') == (['abc', 'xyz'], ['123'])", "assert find_words_numbers('No numbers here') == (['No', 'numbers', 'here'], [])", "assert find_words_numbers('12345') == ([], ['12345'])", "assert find_words_numbers('One 1 Two 2 Three 3') == (['One', 'Two', 'Three'], ['1', '2', '3'])", "assert find_words_numbers('Special@characters!') == (['Special', 'characters'], [])", "assert find_words_numbers('123 456 789') == ([], ['123', '456', '789'])", "assert find_words_numbers('Mixed 123 content 456') == (['Mixed', 'content'], ['123', '456'])", "assert find_words_numbers('a b c 1 2 3') == (['a', 'b', 'c'], ['1', '2', '3'])", "assert find_words_numbers('Word123Word 456') == (['Word', 'Word'], ['456'])", "assert find_words_numbers('123Word456 Word789') == (['Word', 'Word'], [])", "assert find_words_numbers('Hello-World 123') == (['Hello', 'World'], ['123'])", "assert find_words_numbers('  Spaces  42  around  ') == (['Spaces', 'around'], ['42'])", "assert find_words_numbers('!@#$%^&*()') == ([], [])"], "challenge_test_list": []}
{"text": "Write a function to find all email addresses and URLs in a given string using regex.", "code": "import re\ndef find_emails_urls(string):\n  emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', string)\n  urls = re.findall(r'https?://[\\w\\.-]+', string)\n  return emails, urls", "task_id": "182_666bbdc1-043c-4ecf-81bf-c9b3f2945930", "test_setup_code": "", "test_list": ["assert find_emails_urls('Contact us at support@example.com or visit our website at https://example.com') == (['support@example.com'], ['https://example.com'])", "assert find_emails_urls('Send an email to john.doe@example.com and jane_doe123@website.org') == (['john.doe@example.com', 'jane_doe123@website.org'], [])", "assert find_emails_urls('Check out http://example.com and http://example.org for more info') == ([], ['http://example.com', 'http://example.org'])", "assert find_emails_urls('Emails: alice@example.com, bob@example.net. URLs: https://example.com, http://example.net') == (['alice@example.com', 'bob@example.net'], ['https://example.com', 'http://example.net'])", "assert find_emails_urls('No emails or URLs here!') == ([], [])", "assert find_emails_urls('Multiple emails: a@a.com, b@b.com, c@c.com') == (['a@a.com', 'b@b.com', 'c@c.com'], [])", "assert find_emails_urls('Visit http://site.com and mail us at contact@site.com') == (['contact@site.com'], ['http://site.com'])", "assert find_emails_urls('Emails: first.last@domain.com, second@sub.domain.org') == (['first.last@domain.com', 'second@sub.domain.org'], [])", "assert find_emails_urls('Secure URLs: https://secure.com, https://safe.org') == ([], ['https://secure.com', 'https://safe.org'])", "assert find_emails_urls('Mixed content: mail@domain.com, http://site.com, https://secure.org') == (['mail@domain.com'], ['http://site.com', 'https://secure.org'])", "assert find_emails_urls('Edge cases: email@domain, http://, https://') == ([], [])", "assert find_emails_urls('Complex: user.name+tag+sorting@example.com, http://example.com/path?query=string') == (['user.name+tag+sorting@example.com'], ['http://example.com/path?query=string'])", "assert find_emails_urls('Subdomains: user@sub.domain.com, https://sub.domain.com/path') == (['user@sub.domain.com'], ['https://sub.domain.com/path'])", "assert find_emails_urls('Emails with dashes: user-name@domain.com, user_name@domain.com') == (['user-name@domain.com', 'user_name@domain.com'], [])", "assert find_emails_urls('URLs with ports: http://example.com:8080, https://example.org:443') == ([], ['http://example.com:8080', 'https://example.org:443'])"], "challenge_test_list": []}
{"text": "Write a function to find all dates (in format YYYY-MM-DD) and times (in format HH:MM) in a given string using regex.", "code": "import re\ndef find_dates_times(string):\n  dates = re.findall(r'\\b\\d{4}-\\d{2}-\\d{2}\\b', string)\n  times = re.findall(r'\\b\\d{2}:\\d{2}\\b', string)\n  return dates, times", "task_id": "182_4c88de24-fcd1-43cb-a1c9-c3d51899f35a", "test_setup_code": "", "test_list": ["assert find_dates_times('The event is on 2023-10-15 at 14:30.') == (['2023-10-15'], ['14:30'])", "assert find_dates_times('No dates or times here.') == ([], [])", "assert find_dates_times('Multiple dates: 2021-01-01, 2022-02-02 and times: 12:00, 23:59.') == (['2021-01-01', '2022-02-02'], ['12:00', '23:59'])", "assert find_dates_times('Edge case with no leading zero: 2023-1-1 1:1.') == ([], [])", "assert find_dates_times('Date at the end 2023-12-31 and time at the end 23:59') == (['2023-12-31'], ['23:59'])", "assert find_dates_times('Mixed content 2023-10-15T14:30:00 and 2023-10-16 15:45.') == (['2023-10-15', '2023-10-16'], ['15:45'])", "assert find_dates_times('Date in text: 2023-10-15 and time in text: 14:30.') == (['2023-10-15'], ['14:30'])", "assert find_dates_times('2023-10-15 14:30 2023-10-16 15:45') == (['2023-10-15', '2023-10-16'], ['14:30', '15:45'])", "assert find_dates_times('Invalid date 2023-13-01 and invalid time 25:00.') == ([], [])", "assert find_dates_times('Date with time 2023-10-15 14:30 and another date 2023-10-16') == (['2023-10-15', '2023-10-16'], ['14:30'])", "assert find_dates_times('2023-10-15 14:30:00 and 2023-10-16 15:45:00') == (['2023-10-15', '2023-10-16'], ['14:30', '15:45'])", "assert find_dates_times('2023-10-15 14:30:00 and 2023-10-16 15:45:00 some text 2023-10-17 16:00') == (['2023-10-15', '2023-10-16', '2023-10-17'], ['14:30', '15:45', '16:00'])", "assert find_dates_times('2023-10-15 14:30:00 some text 2023-10-16 15:45:00') == (['2023-10-15', '2023-10-16'], ['14:30', '15:45'])", "assert find_dates_times('Some text 2023-10-15 14:30:00 some more text 2023-10-16 15:45:00') == (['2023-10-15', '2023-10-16'], ['14:30', '15:45'])", "assert find_dates_times('2023-10-15 14:30 some text 2023-10-16 15:45') == (['2023-10-15', '2023-10-16'], ['14:30', '15:45'])"], "challenge_test_list": []}
{"text": "Write a function to find all hashtags and mentions in a given string using regex.", "code": "import re\ndef find_hashtags_mentions(string):\n  hashtags = re.findall(r'#\\w+', string)\n  mentions = re.findall(r'@\\w+', string)\n  return hashtags, mentions", "task_id": "182_5bedd26e-2302-485b-b403-5777a5cab9dd", "test_setup_code": "", "test_list": ["assert find_hashtags_mentions('Check out #Python and #coding!') == (['#Python', '#coding'], [])", "assert find_hashtags_mentions('Follow @user1 and @user2 for updates.') == ([], ['@user1', '@user2'])", "assert find_hashtags_mentions('No hashtags or mentions here.') == ([], [])", "assert find_hashtags_mentions('#hashtag1 @mention1 #hashtag2 @mention2') == (['#hashtag1', '#hashtag2'], ['@mention1', '@mention2'])", "assert find_hashtags_mentions('Mixed #case @Example #Hashtag @Mention') == (['#case', '#Hashtag'], ['@Example', '@Mention'])", "assert find_hashtags_mentions('#123 @456') == (['#123'], ['@456'])", "assert find_hashtags_mentions('Edge case with # and @ but no words') == ([], [])", "assert find_hashtags_mentions('Special characters #hashtag! @mention?') == (['#hashtag'], ['@mention'])", "assert find_hashtags_mentions('Multiple #hashtags in a #single #sentence') == (['#hashtags', '#single', '#sentence'], [])", "assert find_hashtags_mentions('Multiple @mentions in a @single @sentence') == ([], ['@mentions', '@single', '@sentence'])", "assert find_hashtags_mentions('Hashtags and mentions together #tag1@user1 #tag2@user2') == (['#tag1', '#tag2'], ['@user1', '@user2'])", "assert find_hashtags_mentions('No spaces#hashtag@mention') == (['#hashtag'], ['@mention'])", "assert find_hashtags_mentions('Hashtag at the end #end') == (['#end'], [])", "assert find_hashtags_mentions('Mention at the end @end') == ([], ['@end'])", "assert find_hashtags_mentions('Empty string') == ([], [])"], "challenge_test_list": []}
{"text": "Write a function to find all hexadecimal color codes (e.g., #FFFFFF) in a given string using regex.", "code": "import re\ndef find_hex_colors(string):\n  hex_colors = re.findall(r'#[0-9a-fA-F]{6}', string)\n  return hex_colors", "task_id": "182_d7c42cb7-1dc2-4b22-ae38-f8b53b5d0f18", "test_setup_code": "", "test_list": ["assert find_hex_colors('#FFFFFF') == ['#FFFFFF']", "assert find_hex_colors('Here is a color: #123ABC') == ['#123ABC']", "assert find_hex_colors('Multiple colors: #000000, #FFFFFF, and #123456') == ['#000000', '#FFFFFF', '#123456']", "assert find_hex_colors('No color codes here!') == []", "assert find_hex_colors('#ABCDEF and #123456 are valid, but #12345G is not') == ['#ABCDEF', '#123456']", "assert find_hex_colors('Edge case with lowercase: #abcdef') == ['#abcdef']", "assert find_hex_colors('Mixed case: #aBcDeF and #123AbC') == ['#aBcDeF', '#123AbC']", "assert find_hex_colors('Invalid short code: #FFF') == []", "assert find_hex_colors('Invalid long code: #1234567') == []", "assert find_hex_colors('Adjacent codes: #123456#ABCDEF') == ['#123456', '#ABCDEF']", "assert find_hex_colors('Code with spaces: # 123456') == []", "assert find_hex_colors('Special characters: #123!@#') == []", "assert find_hex_colors('Valid code with text: color#123456') == ['#123456']", "assert find_hex_colors('Empty string: ') == []", "assert find_hex_colors('Multiple valid and invalid: #123456, #GHIJKL, #789ABC') == ['#123456', '#789ABC']"], "challenge_test_list": []}
{"text": "Write a function to find all phone numbers (in format XXX-XXX-XXXX) in a given string using regex.", "code": "import re\ndef find_phone_numbers(string):\n  phone_numbers = re.findall(r'\\b\\d{3}-\\d{3}-\\d{4}\\b', string)\n  return phone_numbers", "task_id": "182_e721a09d-6ff4-4fc4-9747-8657d47d03b4", "test_setup_code": "", "test_list": ["assert find_phone_numbers('Call me at 123-456-7890.') == ['123-456-7890']", "assert find_phone_numbers('My numbers are 123-456-7890 and 987-654-3210.') == ['123-456-7890', '987-654-3210']", "assert find_phone_numbers('No phone number here.') == []", "assert find_phone_numbers('Invalid numbers like 123-45-6789 or 1234-567-890 should not be matched.') == []", "assert find_phone_numbers('Edge case: 000-000-0000.') == ['000-000-0000']", "assert find_phone_numbers('Multiple formats: 123-456-7890, (123) 456-7890, 123.456.7890') == ['123-456-7890']", "assert find_phone_numbers('123-456-7890 is my number.') == ['123-456-7890']", "assert find_phone_numbers('My old number was 123-456-7890, but now it is 987-654-3210.') == ['123-456-7890', '987-654-3210']", "assert find_phone_numbers('Here is a tricky one: 123-456-7890.') == ['123-456-7890']", "assert find_phone_numbers('123-456-7890 987-654-3210') == ['123-456-7890', '987-654-3210']", "assert find_phone_numbers('Numbers in text: abc123-456-7890xyz 987-654-3210abc') == ['987-654-3210']", "assert find_phone_numbers('123-456-7890, 987-654-3210, and 555-555-5555.') == ['123-456-7890', '987-654-3210', '555-555-5555']", "assert find_phone_numbers('123-456-7890.987-654-3210') == ['123-456-7890']", "assert find_phone_numbers('Phone: 123-456-7890, Fax: 987-654-3210.') == ['123-456-7890', '987-654-3210']", "assert find_phone_numbers('No numbers: abc-def-ghij.') == []"], "challenge_test_list": []}
{"text": "Write a function to find all IPv4 addresses in a given string using regex.", "code": "import re\ndef find_ip_addresses(string):\n  ip_addresses = re.findall(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', string)\n  return ip_addresses", "task_id": "182_ae96ff2c-6a3c-47e8-b1f0-a1dfcf6b9b6d", "test_setup_code": "", "test_list": ["assert find_ip_addresses('My IP is 192.168.1.1') == ['192.168.1.1']", "assert find_ip_addresses('No IP here!') == []", "assert find_ip_addresses('Multiple IPs: 10.0.0.1, 172.16.0.1, and 192.168.0.1') == ['10.0.0.1', '172.16.0.1', '192.168.0.1']", "assert find_ip_addresses('Edge case: 0.0.0.0 and 255.255.255.255') == ['0.0.0.0', '255.255.255.255']", "assert find_ip_addresses('Invalid IPs: 999.999.999.999 and 256.256.256.256') == []", "assert find_ip_addresses('IP at the end 123.45.67.89') == ['123.45.67.89']", "assert find_ip_addresses('IP at the start 8.8.8.8 and more text') == ['8.8.8.8']", "assert find_ip_addresses('IP in the middle 192.0.2.1 is here') == ['192.0.2.1']", "assert find_ip_addresses('Mixed content: text 10.10.10.10 text 20.20.20.20') == ['10.10.10.10', '20.20.20.20']", "assert find_ip_addresses('Overlapping IPs: 123.123.123.1234 and 123.123.123.123') == ['123.123.123.123']", "assert find_ip_addresses('IPs with leading zeros: 001.002.003.004 and 192.168.1.1') == ['001.002.003.004', '192.168.1.1']", "assert find_ip_addresses('IP with port: 192.168.1.1:8080') == ['192.168.1.1']", "assert find_ip_addresses('IP with subnet: 192.168.1.1/24') == ['192.168.1.1']", "assert find_ip_addresses('Random text with no IPs') == []", "assert find_ip_addresses('IPs with spaces:  192.168.1.1  10.0.0.1  ') == ['192.168.1.1', '10.0.0.1']"], "challenge_test_list": []}
{"text": "Write a function to find all credit card numbers (in format XXXX-XXXX-XXXX-XXXX) in a given string using regex.", "code": "import re\ndef find_credit_card_numbers(string):\n  credit_card_numbers = re.findall(r'\\b\\d{4}-\\d{4}-\\d{4}-\\d{4}\\b', string)\n  return credit_card_numbers", "task_id": "182_cd525f8f-6c84-4a3a-8491-8ec023a8c6de", "test_setup_code": "", "test_list": ["assert find_credit_card_numbers('My credit card number is 1234-5678-9101-1121.') == ['1234-5678-9101-1121']", "assert find_credit_card_numbers('Here are two numbers: 1234-5678-9101-1121 and 4321-8765-1019-2112.') == ['1234-5678-9101-1121', '4321-8765-1019-2112']", "assert find_credit_card_numbers('No credit card number here.') == []", "assert find_credit_card_numbers('Invalid format 1234-5678-9101-112.') == []", "assert find_credit_card_numbers('Another invalid format 12345-678-9101-1121.') == []", "assert find_credit_card_numbers('Edge case with spaces 1234 - 5678 - 9101 - 1121.') == []", "assert find_credit_card_numbers('1234-5678-9101-1121 is a valid number, but 1234-5678-9101-112 is not.') == ['1234-5678-9101-1121']", "assert find_credit_card_numbers('Multiple valid numbers 1234-5678-9101-1121, 4321-8765-1019-2112, and 5678-1234-4321-8765.') == ['1234-5678-9101-1121', '4321-8765-1019-2112', '5678-1234-4321-8765']", "assert find_credit_card_numbers('1234-5678-9101-1121.') == ['1234-5678-9101-1121']", "assert find_credit_card_numbers('Text with no numbers.') == []", "assert find_credit_card_numbers('1234-5678-9101-1121, 1234-5678-9101-1121, 1234-5678-9101-1121') == ['1234-5678-9101-1121', '1234-5678-9101-1121', '1234-5678-9101-1121']", "assert find_credit_card_numbers('1234-5678-9101-1121-1234-5678-9101-1121') == []", "assert find_credit_card_numbers('Credit card: 1234-5678-9101-1121; another one: 4321-8765-1019-2112.') == ['1234-5678-9101-1121', '4321-8765-1019-2112']", "assert find_credit_card_numbers('Mixed valid and invalid: 1234-5678-9101-1121, 1234-5678-9101-112, 1234-5678-9101-1121.') == ['1234-5678-9101-1121', '1234-5678-9101-1121']", "assert find_credit_card_numbers('Edge case with leading and trailing spaces:  1234-5678-9101-1121  ') == ['1234-5678-9101-1121']"], "challenge_test_list": []}
{"text": "Write a function to find all HTML tags in a given string using regex.", "code": "import re\ndef find_html_tags(string):\n  html_tags = re.findall(r'<[^>]+>', string)\n  return html_tags", "task_id": "182_6c9588b9-b269-4fed-9973-80add74e0bdf", "test_setup_code": "", "test_list": ["assert find_html_tags('<div>Hello</div>') == ['<div>', '</div>']", "assert find_html_tags('<a href=\"http://example.com\">Link</a>') == ['<a href=\"http://example.com\">', '</a>']", "assert find_html_tags('<p>Paragraph</p><br>') == ['<p>', '</p>', '<br>']", "assert find_html_tags('No HTML tags here!') == []", "assert find_html_tags('<img src=\"image.jpg\" alt=\"Image\">') == ['<img src=\"image.jpg\" alt=\"Image\">']", "assert find_html_tags('<ul><li>Item 1</li><li>Item 2</li></ul>') == ['<ul>', '<li>', '</li>', '<li>', '</li>', '</ul>']", "assert find_html_tags('<div class=\"container\"><p>Text</p></div>') == ['<div class=\"container\">', '<p>', '</p>', '</div>']", "assert find_html_tags('<input type=\"text\" value=\"Sample\">') == ['<input type=\"text\" value=\"Sample\">']", "assert find_html_tags('<!DOCTYPE html><html><head><title>Title</title></head><body></body></html>') == ['<!DOCTYPE html>', '<html>', '<head>', '<title>', '</title>', '</head>', '<body>', '</body>', '</html>']", "assert find_html_tags('<a href=\"#\">Link</a><span>Span</span>') == ['<a href=\"#\">', '</a>', '<span>', '</span>']", "assert find_html_tags('<div><div><div>Nested</div></div></div>') == ['<div>', '<div>', '<div>', '</div>', '</div>', '</div>']", "assert find_html_tags('<script>alert(\"Hello\")</script>') == ['<script>', '</script>']", "assert find_html_tags('<style>body {font-size: 12px;}</style>') == ['<style>', '</style>']", "assert find_html_tags('<h1>Header</h1><p>Paragraph</p>') == ['<h1>', '</h1>', '<p>', '</p>']", "assert find_html_tags('<!-- Comment --><div>Content</div>') == ['<!-- Comment -->', '<div>', '</div>']"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a product of k in any array.", "code": "def count_pairs_with_product(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] * arr[j] == k:\n        count += 1\n  return count", "task_id": "183_b37dd62b-a2c4-4208-9a3b-f0370ed41ff9", "test_setup_code": "", "test_list": ["assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 8) == 1", "assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 10) == 1", "assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 15) == 1", "assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 20) == 0", "assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 2) == 1", "assert count_pairs_with_product([1, 2, 3, 4, 5], 5, 1) == 0", "assert count_pairs_with_product([1, 1, 1, 1, 1], 5, 1) == 10", "assert count_pairs_with_product([1, 2, 3, 4, 6], 5, 12) == 1", "assert count_pairs_with_product([2, 4, 6, 8, 10], 5, 16) == 1", "assert count_pairs_with_product([2, 4, 6, 8, 10], 5, 20) == 1", "assert count_pairs_with_product([2, 4, 6, 8, 10], 5, 24) == 1", "assert count_pairs_with_product([2, 4, 6, 8, 10], 5, 30) == 0", "assert count_pairs_with_product([0, 0, 0, 0, 0], 5, 0) == 10", "assert count_pairs_with_product([-1, -2, -3, -4, -5], 5, 6) == 1", "assert count_pairs_with_product([-1, -2, -3, -4, -5], 5, -8) == 1"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a quotient of k in any array.", "code": "def count_pairs_with_quotient(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] / arr[j] == k or arr[j] / arr[i] == k:\n        count += 1\n  return count", "task_id": "183_97350eb5-e5d2-40cb-b0e8-c2304399422b", "test_setup_code": "", "test_list": ["assert count_pairs_with_quotient([1, 2, 4, 8], 4, 2) == 3", "assert count_pairs_with_quotient([1, 3, 9, 27], 4, 3) == 3", "assert count_pairs_with_quotient([10, 5, 2, 1], 4, 2) == 2", "assert count_pairs_with_quotient([1, 2, 3, 4, 6, 8], 6, 2) == 5", "assert count_pairs_with_quotient([1, 2, 3, 4, 5], 5, 1) == 0", "assert count_pairs_with_quotient([1, 2, 3, 4, 5, 6], 6, 3) == 1", "assert count_pairs_with_quotient([1, 2, 3, 6, 9, 18], 6, 3) == 3", "assert count_pairs_with_quotient([1, 2, 3, 4, 5, 10], 6, 5) == 1", "assert count_pairs_with_quotient([1, 2, 3, 4, 5, 20], 6, 4) == 1", "assert count_pairs_with_quotient([1, 2, 4, 8, 16], 5, 4) == 2", "assert count_pairs_with_quotient([1, 2, 4, 8, 16], 5, 8) == 1", "assert count_pairs_with_quotient([1, 2, 4, 8, 16], 5, 16) == 0", "assert count_pairs_with_quotient([1, 2, 4, 8, 16, 32], 6, 16) == 1", "assert count_pairs_with_quotient([1, 2, 4, 8, 16, 32], 6, 32) == 0", "assert count_pairs_with_quotient([1, 2, 4, 8, 16, 32, 64], 7, 32) == 1"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a GCD of k in any array.", "code": "import math\ndef count_pairs_with_gcd(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if math.gcd(arr[i], arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_de757588-d3e3-4051-a3dd-229da2b5caec", "test_setup_code": "", "test_list": ["assert count_pairs_with_gcd([2, 4, 6, 8, 10], 5, 2) == 4", "assert count_pairs_with_gcd([1, 2, 3, 4, 5, 6], 6, 1) == 15", "assert count_pairs_with_gcd([5, 10, 15, 20, 25], 5, 5) == 4", "assert count_pairs_with_gcd([12, 15, 18, 21, 24], 5, 3) == 4", "assert count_pairs_with_gcd([7, 14, 21, 28, 35], 5, 7) == 4", "assert count_pairs_with_gcd([2, 3, 5, 7, 11, 13], 6, 1) == 15", "assert count_pairs_with_gcd([2, 4, 8, 16, 32], 5, 2) == 4", "assert count_pairs_with_gcd([6, 9, 12, 15, 18], 5, 3) == 4", "assert count_pairs_with_gcd([1, 1, 1, 1, 1], 5, 1) == 10", "assert count_pairs_with_gcd([10, 20, 30, 40, 50], 5, 10) == 4", "assert count_pairs_with_gcd([3, 6, 9, 12, 15], 5, 3) == 4", "assert count_pairs_with_gcd([4, 8, 12, 16, 20], 5, 4) == 4", "assert count_pairs_with_gcd([5, 10, 20, 25, 30], 5, 5) == 4", "assert count_pairs_with_gcd([2, 4, 6, 8, 10, 12], 6, 2) == 10", "assert count_pairs_with_gcd([1, 2, 4, 8, 16], 5, 1) == 10"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having an LCM of k in any array.", "code": "import math\ndef lcm(a, b):\n  return abs(a*b) // math.gcd(a, b)\ndef count_pairs_with_lcm(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if lcm(arr[i], arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_a0addd87-cf88-4f31-90fc-cc6248fcc4fb", "test_setup_code": "", "test_list": ["assert count_pairs_with_lcm([2, 3, 4, 6], 4, 12) == 1", "assert count_pairs_with_lcm([2, 3, 4, 6, 8], 5, 24) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11], 5, 30) == 1", "assert count_pairs_with_lcm([1, 2, 3, 4, 5], 5, 10) == 1", "assert count_pairs_with_lcm([1, 2, 3, 4, 5], 5, 20) == 0", "assert count_pairs_with_lcm([2, 4, 8, 16], 4, 8) == 2", "assert count_pairs_with_lcm([2, 3, 6, 12], 4, 6) == 2", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 77) == 1", "assert count_pairs_with_lcm([1, 1, 1, 1], 4, 1) == 6", "assert count_pairs_with_lcm([2, 4, 8, 16, 32], 5, 32) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 14) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 65) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 35) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 55) == 1", "assert count_pairs_with_lcm([2, 3, 5, 7, 11, 13], 6, 91) == 1"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having an XOR of k in any array.", "code": "def count_pairs_with_xor(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] ^ arr[j] == k:\n        count += 1\n  return count", "task_id": "183_6674681a-0a5d-439c-9ffb-927c8ab8a064", "test_setup_code": "", "test_list": ["assert count_pairs_with_xor([1, 2, 3, 4], 4, 1) == 2", "assert count_pairs_with_xor([1, 2, 3, 4], 4, 2) == 2", "assert count_pairs_with_xor([1, 2, 3, 4], 4, 3) == 2", "assert count_pairs_with_xor([1, 2, 3, 4], 4, 4) == 1", "assert count_pairs_with_xor([1, 1, 1, 1], 4, 0) == 6", "assert count_pairs_with_xor([1, 1, 1, 1], 4, 1) == 0", "assert count_pairs_with_xor([0, 0, 0, 0], 4, 0) == 6", "assert count_pairs_with_xor([1, 2, 3, 1, 2, 3], 6, 1) == 4", "assert count_pairs_with_xor([1, 2, 3, 1, 2, 3], 6, 2) == 4", "assert count_pairs_with_xor([1, 2, 3, 1, 2, 3], 6, 3) == 4", "assert count_pairs_with_xor([1, 2, 3, 1, 2, 3], 6, 4) == 0", "assert count_pairs_with_xor([1], 1, 1) == 0", "assert count_pairs_with_xor([], 0, 1) == 0", "assert count_pairs_with_xor([1, 2, 3, 4, 5, 6], 6, 7) == 0", "assert count_pairs_with_xor([5, 9, 7, 6, 3, 2], 6, 10) == 1"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a modulus of k in any array.", "code": "def count_pairs_with_mod(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] % arr[j] == k or arr[j] % arr[i] == k:\n        count += 1\n  return count", "task_id": "183_583282c3-9ab1-4cff-b9a8-4eb0739fc1ac", "test_setup_code": "", "test_list": ["assert count_pairs_with_mod([1, 2, 3, 4, 5], 5, 1) == 4", "assert count_pairs_with_mod([1, 2, 3, 4, 5], 5, 0) == 0", "assert count_pairs_with_mod([5, 10, 15, 20, 25], 5, 5) == 0", "assert count_pairs_with_mod([5, 10, 15, 20, 25], 5, 0) == 10", "assert count_pairs_with_mod([1, 3, 6, 9, 12], 5, 3) == 4", "assert count_pairs_with_mod([2, 4, 6, 8, 10], 5, 2) == 4", "assert count_pairs_with_mod([1, 1, 1, 1, 1], 5, 0) == 10", "assert count_pairs_with_mod([1, 1, 1, 1, 1], 5, 1) == 0", "assert count_pairs_with_mod([10, 20, 30, 40, 50], 5, 10) == 0", "assert count_pairs_with_mod([10, 20, 30, 40, 50], 5, 5) == 0", "assert count_pairs_with_mod([1, 2, 4, 8, 16], 5, 2) == 3", "assert count_pairs_with_mod([1, 2, 4, 8, 16], 5, 1) == 4", "assert count_pairs_with_mod([7, 14, 21, 28, 35], 5, 7) == 0", "assert count_pairs_with_mod([7, 14, 21, 28, 35], 5, 0) == 10", "assert count_pairs_with_mod([0, 0, 0, 0, 0], 5, 0) == 10"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise AND of k in any array.", "code": "def count_pairs_with_bitwise_and(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] & arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_3f6f8cfc-1319-4f95-84c0-7dd7265d4014", "test_setup_code": "", "test_list": ["assert count_pairs_with_bitwise_and([1, 2, 3, 4], 4, 0) == 2", "assert count_pairs_with_bitwise_and([5, 6, 7, 8], 4, 4) == 2", "assert count_pairs_with_bitwise_and([1, 2, 3, 4, 5], 5, 0) == 4", "assert count_pairs_with_bitwise_and([1, 1, 1, 1], 4, 1) == 6", "assert count_pairs_with_bitwise_and([0, 0, 0, 0], 4, 0) == 6", "assert count_pairs_with_bitwise_and([10, 20, 30, 40], 4, 0) == 6", "assert count_pairs_with_bitwise_and([3, 5, 7, 9], 4, 1) == 6", "assert count_pairs_with_bitwise_and([2, 4, 6, 8], 4, 0) == 6", "assert count_pairs_with_bitwise_and([1, 3, 5, 7], 4, 1) == 6", "assert count_pairs_with_bitwise_and([15, 15, 15, 15], 4, 15) == 6", "assert count_pairs_with_bitwise_and([1], 1, 0) == 0", "assert count_pairs_with_bitwise_and([1, 2], 2, 0) == 1", "assert count_pairs_with_bitwise_and([7, 9, 11, 13], 4, 9) == 1", "assert count_pairs_with_bitwise_and([16, 32, 64, 128], 4, 0) == 6", "assert count_pairs_with_bitwise_and([255, 255, 255, 255], 4, 255) == 6"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise OR of k in any array.", "code": "def count_pairs_with_bitwise_or(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] | arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_6d00adde-44a3-480e-aa4a-7b106ecf415b", "test_setup_code": "", "test_list": ["assert count_pairs_with_bitwise_or([1, 2, 3, 4], 4, 3) == 2", "assert count_pairs_with_bitwise_or([1, 2, 4, 8], 4, 15) == 0", "assert count_pairs_with_bitwise_or([5, 5, 5, 5], 4, 5) == 6", "assert count_pairs_with_bitwise_or([0, 0, 0, 0], 4, 0) == 6", "assert count_pairs_with_bitwise_or([1, 2, 3, 4, 5], 5, 7) == 4", "assert count_pairs_with_bitwise_or([10, 20, 30, 40], 4, 50) == 0", "assert count_pairs_with_bitwise_or([1, 1, 1, 1], 4, 1) == 6", "assert count_pairs_with_bitwise_or([1, 2, 3], 3, 3) == 1", "assert count_pairs_with_bitwise_or([7, 8, 9, 10], 4, 15) == 0", "assert count_pairs_with_bitwise_or([2, 3, 6, 7], 4, 7) == 3", "assert count_pairs_with_bitwise_or([1, 2, 4, 8, 16], 5, 31) == 0", "assert count_pairs_with_bitwise_or([1, 2, 4, 8, 16], 5, 17) == 1", "assert count_pairs_with_bitwise_or([], 0, 1) == 0", "assert count_pairs_with_bitwise_or([1], 1, 1) == 0", "assert count_pairs_with_bitwise_or([1, 2, 4, 8, 16, 32], 6, 63) == 0"], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise XOR of k in any array.", "code": "def count_pairs_with_bitwise_xor(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] ^ arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_1f7790d6-4ba1-449f-a6ed-51832d623d92", "test_setup_code": "", "test_list": ["assert count_pairs_with_bitwise_xor([1, 2, 3, 4], 4, 1) == 2", "assert count_pairs_with_bitwise_xor([1, 2, 3, 4], 4, 2) == 2", "assert count_pairs_with_bitwise_xor([1, 2, 3, 4], 4, 3) == 2", "assert count_pairs_with_bitwise_xor([1, 2, 3, 4], 4, 4) == 0", "assert count_pairs_with_bitwise_xor([5, 5, 5, 5], 4, 0) == 6", "assert count_pairs_with_bitwise_xor([0, 0, 0, 0], 4, 0) == 6", "assert count_pairs_with_bitwise_xor([1, 2, 3, 1, 2, 3], 6, 1) == 4", "assert count_pairs_with_bitwise_xor([1, 2, 3, 1, 2, 3], 6, 2) == 4", "assert count_pairs_with_bitwise_xor([1, 2, 3, 1, 2, 3], 6, 3) == 4", "assert count_pairs_with_bitwise_xor([1, 2, 3, 1, 2, 3], 6, 4) == 0", "assert count_pairs_with_bitwise_xor([], 0, 1) == 0", "assert count_pairs_with_bitwise_xor([1], 1, 1) == 0", "assert count_pairs_with_bitwise_xor([1, 2, 3, 4, 5, 6, 7, 8], 8, 7) == 1", "assert count_pairs_with_bitwise_xor([10, 15, 20, 25, 30], 5, 5) == 2", "assert count_pairs_with_bitwise_xor([1, 3, 5, 7, 9], 5, 6) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the longest common suffix in the given set of strings.", "code": "def longest_common_suffix(arr):\n    def common_suffix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = n1 - 1, n2 - 1\n        while i >= 0 and j >= 0:\n            if str1[i] != str2[j]:\n                break\n            result = str1[i] + result\n            i -= 1\n            j -= 1\n        return result\n    suffix = arr[0]\n    for i in range(1, len(arr)):\n        suffix = common_suffix_util(suffix, arr[i])\n    return suffix", "task_id": "181_ade6940c-c7dc-4e6a-a0c1-3223978c90ab", "test_setup_code": "", "test_list": ["assert longest_common_suffix(['introduction', 'reduction', 'production']) == 'duction'", "assert longest_common_suffix(['apple', 'maple', 'purple']) == 'ple'", "assert longest_common_suffix(['test', 'nest', 'rest']) == 'est'", "assert longest_common_suffix(['dog', 'frog', 'log']) == 'og'", "assert longest_common_suffix(['hello', 'world']) == ''", "assert longest_common_suffix(['same', 'same', 'same']) == 'same'", "assert longest_common_suffix(['']) == ''", "assert longest_common_suffix(['a', 'b', 'c']) == ''", "assert longest_common_suffix(['a', 'a', 'a']) == 'a'", "assert longest_common_suffix(['racecar', 'car', 'scar']) == 'car'", "assert longest_common_suffix(['running', 'jogging', 'walking']) == 'ing'", "assert longest_common_suffix(['prefix', 'suffix', 'affix']) == 'fix'", "assert longest_common_suffix(['one', 'two', 'three']) == ''", "assert longest_common_suffix(['']) == ''", "assert longest_common_suffix(['single']) == 'single'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common substring in the given set of strings.", "code": "def longest_common_substring(arr):\n    def common_substring_util(str1, str2):\n        m, n = len(str1), len(str2)\n        max_len = 0\n        ending_index = m\n        length = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    length[i][j] = length[i - 1][j - 1] + 1\n                    if length[i][j] > max_len:\n                        max_len = length[i][j]\n                        ending_index = i\n                else:\n                    length[i][j] = 0\n        return str1[ending_index - max_len: ending_index]\n    substring = arr[0]\n    for i in range(1, len(arr)):\n        substring = common_substring_util(substring, arr[i])\n    return substring", "task_id": "181_21eb86dd-d66c-4020-a561-a5d5a7842407", "test_setup_code": "", "test_list": ["assert longest_common_substring(['abc', 'bcd', 'cde']) == 'c'", "assert longest_common_substring(['abcdef', 'abfghij', 'abxyz']) == 'ab'", "assert longest_common_substring(['hello', 'world']) == 'o'", "assert longest_common_substring(['abcd', 'efgh', 'ijkl']) == ''", "assert longest_common_substring(['abcabc', 'abc']) == 'abc'", "assert longest_common_substring(['a', 'a', 'a']) == 'a'", "assert longest_common_substring(['a', 'b', 'c']) == ''", "assert longest_common_substring(['abcde', 'cdefg', 'efghi']) == 'e'", "assert longest_common_substring(['abcdef', 'defabc', 'efabcd']) == 'def'", "assert longest_common_substring(['12345', '23456', '34567']) == '345'", "assert longest_common_substring(['same', 'same', 'same']) == 'same'", "assert longest_common_substring(['', 'abc', 'def']) == ''", "assert longest_common_substring(['abc', '', 'def']) == ''", "assert longest_common_substring(['abc', 'def', '']) == ''", "assert longest_common_substring(['prefixsuffix', 'suffix']) == 'suffix'"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common prefix in the given set of strings.", "code": "def longest_common_prefix_length(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return len(prefix)", "task_id": "181_63c54f4b-bb53-45fe-8893-1fd24b30edb3", "test_setup_code": "", "test_list": ["assert longest_common_prefix_length(['flower', 'flow', 'flight']) == 2", "assert longest_common_prefix_length(['dog', 'racecar', 'car']) == 0", "assert longest_common_prefix_length(['interspecies', 'interstellar', 'interstate']) == 5", "assert longest_common_prefix_length(['throne', 'throne']) == 6", "assert longest_common_prefix_length(['throne', 'dungeon']) == 0", "assert longest_common_prefix_length(['throne', 'throne', 'throne']) == 6", "assert longest_common_prefix_length(['']) == 0", "assert longest_common_prefix_length(['a']) == 1", "assert longest_common_prefix_length(['ab', 'a']) == 1", "assert longest_common_prefix_length(['abc', 'abc', 'abc']) == 3", "assert longest_common_prefix_length(['prefix', 'pre', 'prefixes']) == 3", "assert longest_common_prefix_length(['', '']) == 0", "assert longest_common_prefix_length(['a', 'b', 'c']) == 0", "assert longest_common_prefix_length(['same', 'same', 'same']) == 4", "assert longest_common_prefix_length(['longest', 'longer', 'long']) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, ignoring case.", "code": "def longest_common_prefix_with_case_insensitivity(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i].lower() != str2[j].lower():\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_4d0cbbce-287d-4698-988d-f80ab1b290b8", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_case_insensitivity(['flower', 'flow', 'flight']) == 'fl'", "assert longest_common_prefix_with_case_insensitivity(['Flower', 'flow', 'Flight']) == 'fl'", "assert longest_common_prefix_with_case_insensitivity(['dog', 'racecar', 'car']) == ''", "assert longest_common_prefix_with_case_insensitivity(['apple']) == 'apple'", "assert longest_common_prefix_with_case_insensitivity(['']) == ''", "assert longest_common_prefix_with_case_insensitivity(['', 'b']) == ''", "assert longest_common_prefix_with_case_insensitivity(['abc', 'abc', 'abc']) == 'abc'", "assert longest_common_prefix_with_case_insensitivity(['ABC', 'abc', 'AbC']) == 'abc'", "assert longest_common_prefix_with_case_insensitivity(['prefix', 'PREFIX', 'PrEfIx']) == 'prefix'", "assert longest_common_prefix_with_case_insensitivity(['Hello', 'helicopter', 'helix']) == 'hel'", "assert longest_common_prefix_with_case_insensitivity(['a', 'b', 'c']) == ''", "assert longest_common_prefix_with_case_insensitivity(['aa', 'aaa', 'aaaa']) == 'aa'", "assert longest_common_prefix_with_case_insensitivity(['Programming', 'Programmer', 'Program']) == 'Program'", "assert longest_common_prefix_with_case_insensitivity(['x', 'x', 'x']) == 'x'", "assert longest_common_prefix_with_case_insensitivity(['TEST', 'test', 'Test']) == 'test'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, but the prefix must be at least a given minimum length.", "code": "def longest_common_prefix_with_min_length(arr, min_length):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix if len(prefix) >= min_length else ''", "task_id": "181_2904d0e6-7ebc-4dd9-90d6-3b775435bad3", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_min_length(['flower', 'flow', 'flight'], 2) == 'fl'", "assert longest_common_prefix_with_min_length(['dog', 'racecar', 'car'], 1) == ''", "assert longest_common_prefix_with_min_length(['interspecies', 'interstellar', 'interstate'], 3) == 'inte'", "assert longest_common_prefix_with_min_length(['throne', 'throne'], 2) == 'throne'", "assert longest_common_prefix_with_min_length(['throne', 'dungeon'], 1) == ''", "assert longest_common_prefix_with_min_length(['apple', 'ape', 'april'], 2) == 'ap'", "assert longest_common_prefix_with_min_length(['prefix', 'pretest', 'preliminary'], 4) == 'pre'", "assert longest_common_prefix_with_min_length(['single'], 1) == 'single'", "assert longest_common_prefix_with_min_length(['', ''], 1) == ''", "assert longest_common_prefix_with_min_length(['a', 'ab', 'abc'], 1) == 'a'", "assert longest_common_prefix_with_min_length(['abc', 'abcd', 'abcde'], 3) == 'abc'", "assert longest_common_prefix_with_min_length(['abc', 'abcd', 'abcde'], 4) == ''", "assert longest_common_prefix_with_min_length(['test', 'testing', 'tester'], 4) == 'test'", "assert longest_common_prefix_with_min_length(['common', 'commute', 'communication'], 3) == 'com'", "assert longest_common_prefix_with_min_length(['short', 'shorter', 'shortest'], 6) == ''"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, but the prefix must be at most a given maximum length.", "code": "def longest_common_prefix_with_max_length(arr, max_length):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix[:max_length]", "task_id": "181_43764d78-33b9-4b89-8f80-355c59e467cc", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_max_length(['flower', 'flow', 'flight'], 3) == 'flo'", "assert longest_common_prefix_with_max_length(['dog', 'racecar', 'car'], 2) == ''", "assert longest_common_prefix_with_max_length(['interspecies', 'interstellar', 'interstate'], 5) == 'inter'", "assert longest_common_prefix_with_max_length(['throne', 'throne'], 6) == 'throne'", "assert longest_common_prefix_with_max_length(['throne', 'dungeon'], 4) == ''", "assert longest_common_prefix_with_max_length(['apple', 'ape', 'april'], 2) == 'ap'", "assert longest_common_prefix_with_max_length(['', ''], 1) == ''", "assert longest_common_prefix_with_max_length(['a'], 1) == 'a'", "assert longest_common_prefix_with_max_length(['prefix', 'pre', 'presentation'], 3) == 'pre'", "assert longest_common_prefix_with_max_length(['prefix', 'pre', 'presentation'], 5) == 'pre'", "assert longest_common_prefix_with_max_length(['same', 'same', 'same'], 4) == 'same'", "assert longest_common_prefix_with_max_length(['same', 'same', 'same'], 2) == 'sa'", "assert longest_common_prefix_with_max_length(['longest', 'longer', 'long'], 6) == 'long'", "assert longest_common_prefix_with_max_length(['longest', 'longer', 'long'], 3) == 'lon'", "assert longest_common_prefix_with_max_length(['short', 'shorter', 'shortest'], 5) == 'short'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering special characters.", "code": "def longest_common_prefix_with_special_characters(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_a92ce9cd-785d-4942-b135-bdcc24cf0fea", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_special_characters(['flower', 'flow', 'flight']) == 'fl'", "assert longest_common_prefix_with_special_characters(['dog', 'racecar', 'car']) == ''", "assert longest_common_prefix_with_special_characters(['interspace', 'interstellar', 'interstate']) == 'inters'", "assert longest_common_prefix_with_special_characters(['', 'b', 'c']) == ''", "assert longest_common_prefix_with_special_characters(['a', 'a', 'a']) == 'a'", "assert longest_common_prefix_with_special_characters(['abc', 'abc', 'abc']) == 'abc'", "assert longest_common_prefix_with_special_characters(['special#char', 'special#case', 'special#']) == 'special#'", "assert longest_common_prefix_with_special_characters(['1234', '123', '12']) == '12'", "assert longest_common_prefix_with_special_characters(['!@#$', '!@#', '!@']) == '!@'", "assert longest_common_prefix_with_special_characters(['prefix', 'pre', '']) == ''", "assert longest_common_prefix_with_special_characters(['prefix', 'prefixes', 'prefixation']) == 'prefix'", "assert longest_common_prefix_with_special_characters(['common', 'comet', 'comb']) == 'com'", "assert longest_common_prefix_with_special_characters(['longest', 'longer', 'long']) == 'long'", "assert longest_common_prefix_with_special_characters(['short', 'shorter', 'shortest']) == 'short'", "assert longest_common_prefix_with_special_characters(['a!b@c', 'a!b@', 'a!b']) == 'a!b'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering numbers.", "code": "def longest_common_prefix_with_numbers(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_261b09a1-5d4a-4135-b286-8207c269be39", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_numbers(['123flower', '123flow', '123flight']) == '123fl'", "assert longest_common_prefix_with_numbers(['dog', 'racecar', 'car']) == ''", "assert longest_common_prefix_with_numbers(['interspecies', 'interstellar', 'interstate']) == 'inters'", "assert longest_common_prefix_with_numbers(['throne', 'dungeon']) == ''", "assert longest_common_prefix_with_numbers(['throne', 'throne']) == 'throne'", "assert longest_common_prefix_with_numbers(['123', '12345', '1234567']) == '123'", "assert longest_common_prefix_with_numbers(['', '']) == ''", "assert longest_common_prefix_with_numbers(['a']) == 'a'", "assert longest_common_prefix_with_numbers(['ab', 'a']) == 'a'", "assert longest_common_prefix_with_numbers(['flower', 'flow', 'flight']) == 'fl'", "assert longest_common_prefix_with_numbers(['123flower', '123flow', '123']) == '123'", "assert longest_common_prefix_with_numbers(['prefix', 'prefixsuffix', 'prefixes']) == 'prefix'", "assert longest_common_prefix_with_numbers(['1234567890', '123456789012345', '123456789012']) == '1234567890'", "assert longest_common_prefix_with_numbers(['abcdef', 'abc', 'abcd']) == 'abc'", "assert longest_common_prefix_with_numbers(['123abc', '123ab', '123a']) == '123a'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering whitespace.", "code": "def longest_common_prefix_with_whitespace(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_dde3b077-036a-4fa1-a4ca-be857519caf4", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_whitespace(['flower', 'flow', 'flight']) == 'fl'", "assert longest_common_prefix_with_whitespace(['dog', 'racecar', 'car']) == ''", "assert longest_common_prefix_with_whitespace(['interspecies', 'interstellar', 'interstate']) == 'inters'", "assert longest_common_prefix_with_whitespace(['throne', 'dungeon']) == ''", "assert longest_common_prefix_with_whitespace(['throne', 'throne']) == 'throne'", "assert longest_common_prefix_with_whitespace(['prefix', 'prefixes', 'prefixed']) == 'prefix'", "assert longest_common_prefix_with_whitespace(['', '']) == ''", "assert longest_common_prefix_with_whitespace(['single']) == 'single'", "assert longest_common_prefix_with_whitespace(['a', 'ab', 'abc']) == 'a'", "assert longest_common_prefix_with_whitespace(['', 'nonempty']) == ''", "assert longest_common_prefix_with_whitespace(['common prefix', 'common pre', 'common']) == 'common'", "assert longest_common_prefix_with_whitespace(['common prefix', 'common pre', 'common ']) == 'common '", "assert longest_common_prefix_with_whitespace(['   leading', '   lead', '   lea']) == '   lea'", "assert longest_common_prefix_with_whitespace(['trailing   ', 'trailing  ', 'trailing ']) == 'trailing '", "assert longest_common_prefix_with_whitespace(['mix of spaces', 'mix of spaces and tabs', 'mix of spaces and']) == 'mix of spaces '"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering punctuation.", "code": "def longest_common_prefix_with_punctuation(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_fe682016-b7aa-4e06-a562-f667aa8281aa", "test_setup_code": "", "test_list": ["assert longest_common_prefix_with_punctuation(['hello', 'helicopter', 'help']) == 'hel'", "assert longest_common_prefix_with_punctuation(['apple', 'ape', 'april']) == 'ap'", "assert longest_common_prefix_with_punctuation(['dog', 'racecar', 'car']) == ''", "assert longest_common_prefix_with_punctuation(['interview', 'internet', 'internal']) == 'inte'", "assert longest_common_prefix_with_punctuation(['', 'empty', '']) == ''", "assert longest_common_prefix_with_punctuation(['same', 'same', 'same']) == 'same'", "assert longest_common_prefix_with_punctuation(['prefix', 'pre', 'prefixes']) == 'pre'", "assert longest_common_prefix_with_punctuation(['punctuation.', 'punctuation,', 'punctuation!']) == 'punctuation'", "assert longest_common_prefix_with_punctuation(['.dot', '.dotdot', '.dotty']) == '.dot'", "assert longest_common_prefix_with_punctuation(['1234', '123', '12']) == '12'", "assert longest_common_prefix_with_punctuation(['', '', '']) == ''", "assert longest_common_prefix_with_punctuation(['a']) == 'a'", "assert longest_common_prefix_with_punctuation(['a', 'b', 'c']) == ''", "assert longest_common_prefix_with_punctuation(['longest', 'long', 'longer']) == 'long'", "assert longest_common_prefix_with_punctuation(['special#char', 'special#case', 'special#']) == 'special#'"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are less than a specified number.", "code": "def less_than_specificnum(lst, num):\n    return [x for x in lst if x < num]", "task_id": "184_9b2ed3bb-000a-4e2e-84e7-a9891a9c8385", "test_setup_code": "", "test_list": ["assert less_than_specificnum([1, 2, 3, 4, 5], 3) == [1, 2]", "assert less_than_specificnum([10, 20, 30, 40, 50], 25) == [10, 20]", "assert less_than_specificnum([-5, -10, 0, 5, 10], 0) == [-5, -10]", "assert less_than_specificnum([100, 200, 300], 150) == [100]", "assert less_than_specificnum([1, 1, 1, 1], 1) == []", "assert less_than_specificnum([2, 4, 6, 8, 10], 7) == [2, 4, 6]", "assert less_than_specificnum([5, 3, 8, 6, 7], 6) == [5, 3]", "assert less_than_specificnum([], 5) == []", "assert less_than_specificnum([1], 1) == []", "assert less_than_specificnum([1], 2) == [1]", "assert less_than_specificnum([5, 10, 15, 20], 10) == [5]", "assert less_than_specificnum([3, 3, 3, 3], 4) == [3, 3, 3, 3]", "assert less_than_specificnum([7, 14, 21, 28], 15) == [7, 14]", "assert less_than_specificnum([0, 0, 0], 1) == [0, 0, 0]", "assert less_than_specificnum([-1, -2, -3], -1) == [-2, -3]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are equal to a specified number.", "code": "def equal_to_specificnum(lst, num):\n    return [x for x in lst if x == num]", "task_id": "184_9934d11e-b16a-4cc7-a771-d20ee7dd09a9", "test_setup_code": "", "test_list": ["assert equal_to_specificnum([1, 2, 3, 4, 5], 3) == [3]", "assert equal_to_specificnum([1, 1, 1, 1, 1], 1) == [1, 1, 1, 1, 1]", "assert equal_to_specificnum([1, 2, 3, 4, 5], 6) == []", "assert equal_to_specificnum([], 1) == []", "assert equal_to_specificnum([1, 2, 3, 4, 5], 0) == []", "assert equal_to_specificnum([1, 2, 3, 2, 1], 2) == [2, 2]", "assert equal_to_specificnum([1, 2, 3, 4, 5], 5) == [5]", "assert equal_to_specificnum([1, 2, 3, 4, 5], 1) == [1]", "assert equal_to_specificnum([10, 20, 30, 40, 50], 30) == [30]", "assert equal_to_specificnum([100, 200, 300, 400, 500], 400) == [400]", "assert equal_to_specificnum([1, 2, 3, 4, 5, 5, 5], 5) == [5, 5, 5]", "assert equal_to_specificnum([1, 2, 3, 4, 5, 5, 5], 4) == [4]", "assert equal_to_specificnum([1, 1, 2, 2, 3, 3], 2) == [2, 2]", "assert equal_to_specificnum([1, 2, 3, 4, 5], -1) == []", "assert equal_to_specificnum([0, 0, 0, 0, 0], 0) == [0, 0, 0, 0, 0]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are not equal to a specified number.", "code": "def not_equal_to_specificnum(lst, num):\n    return [x for x in lst if x != num]", "task_id": "184_0ac254b0-1eb4-4220-98b7-c579bf558064", "test_setup_code": "", "test_list": ["assert not_equal_to_specificnum([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]", "assert not_equal_to_specificnum([1, 1, 1, 1, 1], 1) == []", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]", "assert not_equal_to_specificnum([], 3) == []", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]", "assert not_equal_to_specificnum([1, 2, 2, 2, 3], 2) == [1, 3]", "assert not_equal_to_specificnum([0, 0, 0, 0, 0], 0) == []", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]", "assert not_equal_to_specificnum([-1, -2, -3, -4, -5], -3) == [-1, -2, -4, -5]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5], 2) == [1, 3, 4, 5]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5, 3, 3], 3) == [1, 2, 4, 5]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5, 3, 3], 4) == [1, 2, 3, 5, 3, 3]", "assert not_equal_to_specificnum([1, 2, 3, 4, 5, 3, 3], 5) == [1, 2, 3, 4, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are greater than or equal to a specified number.", "code": "def greater_than_or_equal_specificnum(lst, num):\n    return [x for x in lst if x >= num]", "task_id": "184_00e41759-bd61-47c0-9232-e9dcd23a7ac4", "test_setup_code": "", "test_list": ["assert greater_than_or_equal_specificnum([1, 2, 3, 4, 5], 3) == [3, 4, 5]", "assert greater_than_or_equal_specificnum([10, 20, 30, 40, 50], 25) == [30, 40, 50]", "assert greater_than_or_equal_specificnum([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]", "assert greater_than_or_equal_specificnum([1, 2, 3, 4, 5], 6) == []", "assert greater_than_or_equal_specificnum([], 3) == []", "assert greater_than_or_equal_specificnum([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert greater_than_or_equal_specificnum([-5, -4, -3, -2, -1], -3) == [-3, -2, -1]", "assert greater_than_or_equal_specificnum([1, 2, 3, 4, 5], 5) == [5]", "assert greater_than_or_equal_specificnum([100, 200, 300], 150) == [200, 300]", "assert greater_than_or_equal_specificnum([0, 0, 0, 0], 0) == [0, 0, 0, 0]", "assert greater_than_or_equal_specificnum([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]", "assert greater_than_or_equal_specificnum([10, 9, 8, 7, 6], 8) == [10, 9, 8]", "assert greater_than_or_equal_specificnum([3, 3, 3, 3], 3) == [3, 3, 3, 3]", "assert greater_than_or_equal_specificnum([2, 4, 6, 8, 10], 5) == [6, 8, 10]", "assert greater_than_or_equal_specificnum([1, 3, 5, 7, 9], 4) == [5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are less than or equal to a specified number.", "code": "def less_than_or_equal_specificnum(lst, num):\n    return [x for x in lst if x <= num]", "task_id": "184_21f3566a-cec6-4bda-80eb-1a3c2bfdeaa9", "test_setup_code": "", "test_list": ["assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 3) == [1, 2, 3]", "assert less_than_or_equal_specificnum([10, 20, 30, 40, 50], 25) == [10, 20]", "assert less_than_or_equal_specificnum([5, 5, 5, 5, 5], 5) == [5, 5, 5, 5, 5]", "assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 0) == []", "assert less_than_or_equal_specificnum([], 10) == []", "assert less_than_or_equal_specificnum([-1, -2, -3, -4, -5], -3) == [-4, -5]", "assert less_than_or_equal_specificnum([100, 200, 300], 150) == [100]", "assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert less_than_or_equal_specificnum([1], 1) == [1]", "assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 2) == [1, 2]", "assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 4) == [1, 2, 3, 4]", "assert less_than_or_equal_specificnum([50, 40, 30, 20, 10], 35) == [30, 20, 10]", "assert less_than_or_equal_specificnum([0, 0, 0, 0], 0) == [0, 0, 0, 0]", "assert less_than_or_equal_specificnum([1, 2, 3, 4, 5], 1) == [1]", "assert less_than_or_equal_specificnum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 6) == [6, 5, 4, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are between two specified numbers (inclusive).", "code": "def between_two_numbers(lst, num1, num2):\n    return [x for x in lst if num1 <= x <= num2]", "task_id": "184_bbf89595-f633-4f73-88fb-d9fa8f2c160c", "test_setup_code": "", "test_list": ["assert between_two_numbers([1, 2, 3, 4, 5], 2, 4) == [2, 3, 4]", "assert between_two_numbers([10, 20, 30, 40, 50], 15, 45) == [20, 30, 40]", "assert between_two_numbers([5, 10, 15, 20, 25], 10, 20) == [10, 15, 20]", "assert between_two_numbers([1, 2, 3, 4, 5], 6, 10) == []", "assert between_two_numbers([], 1, 10) == []", "assert between_two_numbers([7, 7, 7, 7], 7, 7) == [7, 7, 7, 7]", "assert between_two_numbers([1, 3, 5, 7, 9], 2, 8) == [3, 5, 7]", "assert between_two_numbers([-5, -3, 0, 3, 5], -4, 4) == [-3, 0, 3]", "assert between_two_numbers([-10, -5, 0, 5, 10], -5, 5) == [-5, 0, 5]", "assert between_two_numbers([1.5, 2.5, 3.5, 4.5], 2, 4) == [2.5, 3.5]", "assert between_two_numbers([1, 2, 3, 4, 5], 3, 3) == [3]", "assert between_two_numbers([1, 2, 3, 4, 5], 0, 10) == [1, 2, 3, 4, 5]", "assert between_two_numbers([10, 20, 30, 40, 50], 20, 20) == [20]", "assert between_two_numbers([1, 2, 3, 2, 1], 1, 2) == [1, 2, 2, 1]", "assert between_two_numbers([-100, 0, 100], -50, 50) == [0]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are outside two specified numbers (exclusive).", "code": "def outside_two_numbers(lst, num1, num2):\n    return [x for x in lst if x < num1 or x > num2]", "task_id": "184_df4afcb6-a023-4121-8556-37b283ba7919", "test_setup_code": "", "test_list": ["assert outside_two_numbers([1, 2, 3, 4, 5], 2, 4) == [1, 5]", "assert outside_two_numbers([10, 20, 30, 40, 50], 15, 35) == [10, 40, 50]", "assert outside_two_numbers([5, 10, 15, 20, 25], 10, 20) == [5, 25]", "assert outside_two_numbers([1, 3, 5, 7, 9], 4, 8) == [1, 3, 9]", "assert outside_two_numbers([-10, -5, 0, 5, 10], -5, 5) == [-10, 10]", "assert outside_two_numbers([100, 200, 300, 400, 500], 150, 350) == [100, 400, 500]", "assert outside_two_numbers([1, 2, 3, 4, 5], 0, 6) == []", "assert outside_two_numbers([1, 2, 3, 4, 5], 1, 5) == [1, 5]", "assert outside_two_numbers([1, 2, 3, 4, 5], 2, 3) == [1, 4, 5]", "assert outside_two_numbers([1, 2, 3, 4, 5], 3, 3) == [1, 2, 4, 5]", "assert outside_two_numbers([], 2, 4) == []", "assert outside_two_numbers([1], 0, 2) == []", "assert outside_two_numbers([1], 2, 3) == [1]", "assert outside_two_numbers([1, 2, 3, 4, 5], 5, 1) == [1, 2, 3, 4, 5]", "assert outside_two_numbers([1, 2, 3, 4, 5], 3, 3) == [1, 2, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are divisible by a specified number.", "code": "def divisible_by_specificnum(lst, num):\n    return [x for x in lst if x % num == 0]", "task_id": "184_ceefbb95-ebab-473b-8789-bfeb552d51d1", "test_setup_code": "", "test_list": ["assert divisible_by_specificnum([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6]", "assert divisible_by_specificnum([10, 15, 20, 25, 30], 5) == [10, 15, 20, 25, 30]", "assert divisible_by_specificnum([7, 14, 21, 28, 35], 7) == [7, 14, 21, 28, 35]", "assert divisible_by_specificnum([1, 3, 5, 7, 9], 2) == []", "assert divisible_by_specificnum([0, 1, 2, 3, 4, 5], 1) == [0, 1, 2, 3, 4, 5]", "assert divisible_by_specificnum([100, 200, 300], 100) == [100, 200, 300]", "assert divisible_by_specificnum([1, 2, 3, 4, 5], 10) == []", "assert divisible_by_specificnum([12, 24, 36, 48], 12) == [12, 24, 36, 48]", "assert divisible_by_specificnum([5, 10, 15, 20, 25], 5) == [5, 10, 15, 20, 25]", "assert divisible_by_specificnum([2, 4, 6, 8, 10], 3) == [6]", "assert divisible_by_specificnum([], 3) == []", "assert divisible_by_specificnum([1, 2, 3, 4, 5], 0) == []", "assert divisible_by_specificnum([0, 0, 0, 0], 1) == [0, 0, 0, 0]", "assert divisible_by_specificnum([1, 2, 3, 4, 5], -1) == [1, 2, 3, 4, 5]", "assert divisible_by_specificnum([1, -2, 3, -4, 5], -2) == [-2, -4]"], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are not divisible by a specified number.", "code": "def not_divisible_by_specificnum(lst, num):\n    return [x for x in lst if x % num != 0]", "task_id": "184_7b67eecc-55f4-4933-9f21-8b0661c812ce", "test_setup_code": "", "test_list": ["assert not_divisible_by_specificnum([1, 2, 3, 4, 5, 6], 2) == [1, 3, 5]", "assert not_divisible_by_specificnum([10, 20, 30, 40, 50], 10) == []", "assert not_divisible_by_specificnum([1, 3, 5, 7, 9], 2) == [1, 3, 5, 7, 9]", "assert not_divisible_by_specificnum([0, 1, 2, 3, 4, 5], 1) == []", "assert not_divisible_by_specificnum([15, 30, 45, 60, 75], 15) == []", "assert not_divisible_by_specificnum([2, 4, 6, 8, 10], 3) == [2, 4, 8, 10]", "assert not_divisible_by_specificnum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4]", "assert not_divisible_by_specificnum([1, 2, 3, 4, 5], 3) == [1, 2, 4, 5]", "assert not_divisible_by_specificnum([12, 18, 24, 30], 6) == []", "assert not_divisible_by_specificnum([7, 14, 21, 28], 7) == []", "assert not_divisible_by_specificnum([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]", "assert not_divisible_by_specificnum([11, 22, 33, 44, 55], 11) == []", "assert not_divisible_by_specificnum([], 3) == []", "assert not_divisible_by_specificnum([1, 1, 1, 1], 1) == []", "assert not_divisible_by_specificnum([2, 3, 5, 7, 11], 2) == [3, 5, 7, 11]"], "challenge_test_list": []}
{"text": "Write a function to find all the even numbers in a list.", "code": "def even_numbers(lst):\n    return [x for x in lst if x % 2 == 0]", "task_id": "184_1ce55b12-54eb-4ff0-bbdc-80d0ec419a57", "test_setup_code": "", "test_list": ["assert even_numbers([1, 2, 3, 4, 5, 6]) == [2, 4, 6]", "assert even_numbers([]) == []", "assert even_numbers([1, 3, 5, 7, 9]) == []", "assert even_numbers([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]", "assert even_numbers([-2, -1, 0, 1, 2]) == [-2, 0, 2]", "assert even_numbers([0]) == [0]", "assert even_numbers([-4, -2, 0, 2, 4]) == [-4, -2, 0, 2, 4]", "assert even_numbers([1000000, 1000001]) == [1000000]", "assert even_numbers([-1, -3, -5, -7, -9]) == []", "assert even_numbers([-2, -4, -6, -8, -10]) == [-2, -4, -6, -8, -10]", "assert even_numbers([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]", "assert even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]", "assert even_numbers([2**10, 2**11]) == [1024, 2048]", "assert even_numbers([i for i in range(1, 11)]) == [2, 4, 6, 8, 10]", "assert even_numbers([i for i in range(0, 21, 2)]) == [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"], "challenge_test_list": []}
{"text": "Write a function to calculate the midpoint between two points using latitude and longitude.", "code": "from math import radians, degrees, atan2, sin, cos\n\ndef midpoint(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlon = elon - slon\n    Bx = cos(elat) * cos(dlon)\n    By = cos(elat) * sin(dlon)\n    mid_lat = atan2(sin(slat) + sin(elat), ((cos(slat) + Bx)**2 + By**2)**0.5)\n    mid_lon = slon + atan2(By, cos(slat) + Bx)\n    return (degrees(mid_lat), degrees(mid_lon))", "task_id": "180_214ee001-6e1d-4a63-b33a-c35c01996fdf", "test_setup_code": "", "test_list": ["assert midpoint(0, 0, 0, 0) == (0.0, 0.0)", "assert midpoint(0, 0, 90, 0) == (45.0, 0.0)", "assert midpoint(0, 0, 0, 90) == (0.0, 45.0)", "assert midpoint(90, 0, -90, 0) == (0.0, 0.0)", "assert midpoint(45, 45, 45, 45) == (45.0, 45.0)", "assert midpoint(-45, -45, -45, -45) == (-45.0, -45.0)", "assert midpoint(0, 0, 45, 45) == (22.5, 22.5)", "assert midpoint(0, 0, -45, -45) == (-22.5, -22.5)", "assert midpoint(30, 30, 60, 60) == (45.0, 45.0)", "assert midpoint(-30, -30, -60, -60) == (-45.0, -45.0)", "assert midpoint(0, 0, 0, 180) == (0.0, 90.0)", "assert midpoint(0, 0, 180, 0) == (90.0, 0.0)", "assert midpoint(0, 0, -180, 0) == (-90.0, 0.0)", "assert midpoint(0, 0, 0, -180) == (0.0, -90.0)", "assert midpoint(45, 45, -45, -45) == (0.0, 0.0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the initial bearing between two points using latitude and longitude.", "code": "from math import radians, degrees, atan2, sin, cos\n\ndef bearing(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlon = elon - slon\n    x = sin(dlon) * cos(elat)\n    y = cos(slat) * sin(elat) - sin(slat) * cos(elat) * cos(dlon)\n    initial_bearing = atan2(x, y)\n    initial_bearing = degrees(initial_bearing)\n    compass_bearing = (initial_bearing + 360) % 360\n    return compass_bearing", "task_id": "180_e63f57ab-016b-4224-bb88-f867e364ee5d", "test_setup_code": "", "test_list": ["assert bearing(0, 0, 0, 1) == 90.0", "assert bearing(0, 0, 1, 0) == 0.0", "assert bearing(0, 0, -1, 0) == 180.0", "assert bearing(0, 0, 0, -1) == 270.0", "assert bearing(37.7749, -122.4194, 34.0522, -118.2437) == 139.692", "assert bearing(34.0522, -118.2437, 37.7749, -122.4194) == 319.492", "assert bearing(51.5074, -0.1278, 40.7128, -74.0060) == 288.788", "assert bearing(40.7128, -74.0060, 51.5074, -0.1278) == 51.214", "assert bearing(90, 0, 0, 0) == 180.0", "assert bearing(-90, 0, 0, 0) == 0.0", "assert bearing(0, 0, 90, 0) == 0.0", "assert bearing(0, 0, -90, 0) == 180.0", "assert bearing(0, 0, 0, 180) == 90.0", "assert bearing(0, 0, 0, -180) == 270.0", "assert bearing(48.8566, 2.3522, 40.7128, -74.0060) == 292.274"], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points using the Haversine formula.", "code": "from math import radians, sin, cos, sqrt, atan2\n\ndef haversine_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance", "task_id": "180_c17aa190-2334-446c-b222-1df2a9d06ab8", "test_setup_code": "", "test_list": ["assert haversine_distance(0, 0, 0, 0) == 0.0", "assert haversine_distance(90, 0, -90, 0) == 20015.086796020572", "assert haversine_distance(0, 0, 0, 180) == 20015.086796020572", "assert haversine_distance(0, 0, 90, 0) == 10007.543398010286", "assert haversine_distance(0, 0, 45, 45) == 6671.700797880776", "assert haversine_distance(36.12, -86.67, 33.94, -118.40) == 2887.2599506071106", "assert haversine_distance(-36.12, 86.67, -33.94, 118.40) == 2887.2599506071106", "assert haversine_distance(51.5074, -0.1278, 40.7128, -74.0060) == 5585.233577856757", "assert haversine_distance(-33.8688, 151.2093, 35.6895, 139.6917) == 7826.615057738554", "assert haversine_distance(34.0522, -118.2437, 55.7558, 37.6173) == 9769.100162526174", "assert haversine_distance(19.4326, -99.1332, 48.8566, 2.3522) == 9186.90168364024", "assert haversine_distance(-22.9068, -43.1729, -34.6037, -58.3816) == 1960.379049622601", "assert haversine_distance(35.6895, 139.6917, 55.7558, 37.6173) == 7478.240784614553", "assert haversine_distance(40.7128, -74.0060, 34.0522, -118.2437) == 3935.746254609723", "assert haversine_distance(37.7749, -122.4194, -33.8688, 151.2093) == 11927.01608105418"], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points using the Vincenty formula.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef vincenty_distance(slat, slon, elat, elon):\n    a = 6378137.0\n    f = 1 / 298.257223563\n    b = 6356752.314245\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    L = elon - slon\n    U1 = atan2((1 - f) * sin(slat), cos(slat))\n    U2 = atan2((1 - f) * sin(elat), cos(elat))\n    sinU1, cosU1 = sin(U1), cos(U1)\n    sinU2, cosU2 = sin(U2), cos(U2)\n    lamb = L\n    for _ in range(1000):\n        sinLambda, cosLambda = sin(lamb), cos(lamb)\n        sinSigma = sqrt((cosU2 * sinLambda) ** 2 + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) ** 2)\n        cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda\n        sigma = atan2(sinSigma, cosSigma)\n        sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma\n        cos2Alpha = 1 - sinAlpha ** 2\n        cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cos2Alpha\n        C = f / 16 * cos2Alpha * (4 + f * (4 - 3 * cos2Alpha))\n        lambPrev = lamb\n        lamb = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM ** 2)))\n        if abs(lamb - lambPrev) < 1e-12:\n            break\n    u2 = cos2Alpha * (a ** 2 - b ** 2) / (b ** 2)\n    A = 1 + u2 / 16384 * (4096 + u2 * (-768 + u2 * (320 - 175 * u2)))\n    B = u2 / 1024 * (256 + u2 * (-128 + u2 * (74 - 47 * u2)))\n    deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM ** 2) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma ** 2) * (-3 + 4 * cos2SigmaM ** 2)))\n    s = b * A * (sigma - deltaSigma)\n    return s / 1000", "task_id": "180_7a76d134-680e-42bd-8d0b-40f19bf56627", "test_setup_code": "", "test_list": ["assert vincenty_distance(0, 0, 0, 0) == 0.0", "assert vincenty_distance(0, 0, 0, 1) == 111.31949079327357", "assert vincenty_distance(0, 0, 1, 0) == 110.57438855779878", "assert vincenty_distance(0, 0, 1, 1) == 157.2496034104515", "assert vincenty_distance(90, 0, -90, 0) == 20015.086796020572", "assert vincenty_distance(45, 45, 45, 45) == 0.0", "assert vincenty_distance(45, 45, 45, 46) == 78.847935824228", "assert vincenty_distance(45, 45, 46, 45) == 111.1320906132779", "assert vincenty_distance(45, 45, 46, 46) == 157.22543203807288", "assert vincenty_distance(-45, -45, -45, -45) == 0.0", "assert vincenty_distance(-45, -45, -45, -46) == 78.847935824228", "assert vincenty_distance(-45, -45, -46, -45) == 111.1320906132779", "assert vincenty_distance(-45, -45, -46, -46) == 157.22543203807288", "assert vincenty_distance(0, 0, 90, 0) == 10007.543398010286", "assert vincenty_distance(0, 0, 0, -1) == 111.31949079327357"], "challenge_test_list": []}
{"text": "Write a function to calculate the great-circle distance between two points using latitude and longitude.", "code": "from math import radians, sin, cos, sqrt, atan2\n\ndef great_circle_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance", "task_id": "180_1f6513eb-8a56-4820-96cd-7deaab5f615e", "test_setup_code": "", "test_list": ["assert great_circle_distance(0, 0, 0, 0) == 0.0", "assert great_circle_distance(0, 0, 90, 0) == 10007.543398010286", "assert great_circle_distance(0, 0, 0, 90) == 10007.543398010286", "assert great_circle_distance(0, 0, 45, 45) == 6671.695598673525", "assert great_circle_distance(37.7749, -122.4194, 34.0522, -118.2437) == 559.2342574797474", "assert great_circle_distance(51.5074, -0.1278, 40.7128, -74.0060) == 5570.222179737958", "assert great_circle_distance(-33.8688, 151.2093, -37.8136, 144.9631) == 713.8304517005593", "assert great_circle_distance(35.6895, 139.6917, 55.7558, 37.6173) == 7478.24078475991", "assert great_circle_distance(48.8566, 2.3522, 52.5200, 13.4050) == 878.6547236889028", "assert great_circle_distance(-90, 0, 90, 0) == 20015.086796020572", "assert great_circle_distance(0, 0, 0, 180) == 20015.086796020572", "assert great_circle_distance(0, 0, -45, -45) == 6671.695598673525", "assert great_circle_distance(0, 0, -90, 0) == 10007.543398010286", "assert great_circle_distance(0, 0, 0, -90) == 10007.543398010286", "assert great_circle_distance(0, 0, 45, -45) == 6671.695598673525"], "challenge_test_list": []}
{"text": "Write a function to calculate the destination point given a starting point, distance, and bearing.", "code": "from math import radians, degrees, sin, cos, atan2\n\ndef destination_point(slat, slon, distance, bearing):\n    R = 6371.0\n    slat, slon, bearing = map(radians, [slat, slon, bearing])\n    lat2 = asin(sin(slat) * cos(distance / R) + cos(slat) * sin(distance / R) * cos(bearing))\n    lon2 = slon + atan2(sin(bearing) * sin(distance / R) * cos(slat), cos(distance / R) - sin(slat) * sin(lat2))\n    return (degrees(lat2), degrees(lon2))", "task_id": "180_3fbfd577-6eaf-4bbf-87e9-08a30f43db19", "test_setup_code": "", "test_list": ["assert destination_point(0, 0, 0, 0) == (0.0, 0.0)", "assert destination_point(0, 0, 100, 0) == (0.8993203637245387, 0.0)", "assert destination_point(0, 0, 100, 90) == (0.0, 0.8993203637245387)", "assert destination_point(0, 0, 100, 180) == (-0.8993203637245387, 0.0)", "assert destination_point(0, 0, 100, 270) == (0.0, -0.8993203637245387)", "assert destination_point(90, 0, 100, 0) == (90.0, 0.0)", "assert destination_point(-90, 0, 100, 0) == (-89.10067963627546, 0.0)", "assert destination_point(0, 180, 100, 0) == (0.8993203637245387, 180.0)", "assert destination_point(0, -180, 100, 0) == (0.8993203637245387, -180.0)", "assert destination_point(45, 45, 100, 45) == (45.63523102095875, 45.63523102095875)", "assert destination_point(-45, -45, 100, 225) == (-45.63523102095875, -45.63523102095875)", "assert destination_point(0, 0, 10000, 0) == (89.93203637245387, 0.0)", "assert destination_point(0, 0, 10000, 90) == (0.0, 89.93203637245387)", "assert destination_point(0, 0, 10000, 180) == (-89.93203637245387, 0.0)", "assert destination_point(0, 0, 10000, 270) == (0.0, -89.93203637245387)"], "challenge_test_list": []}
{"text": "Write a function to calculate the cross-track distance between a point and a great-circle path defined by two other points.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef cross_track_distance(slat, slon, elat, elon, dlat, dlon):\n    R = 6371.0\n    slat, slon, elat, elon, dlat, dlon = map(radians, [slat, slon, elat, elon, dlat, dlon])\n    d13 = great_circle_distance(slat, slon, dlat, dlon) / R\n    theta13 = bearing(slat, slon, dlat, dlon)\n    theta12 = bearing(slat, slon, elat, elon)\n    xtd = asin(sin(d13) * sin(theta13 - theta12)) * R\n    return abs(xtd)", "task_id": "180_f69ada49-282e-4fee-ae31-412904cb639e", "test_setup_code": "", "test_list": ["assert cross_track_distance(0, 0, 1, 1, 0.5, 0.5) == 0.0", "assert cross_track_distance(0, 0, 1, 1, 0, 1) == 78.62618767687455", "assert cross_track_distance(0, 0, 1, 1, 1, 0) == 78.62618767687455", "assert cross_track_distance(0, 0, 90, 0, 45, 0) == 0.0", "assert cross_track_distance(0, 0, 90, 0, 45, 45) == 5003.771699005144", "assert cross_track_distance(0, 0, 90, 0, 90, 90) == 10007.543398010288", "assert cross_track_distance(0, 0, 0, 180, 0, 90) == 10007.543398010288", "assert cross_track_distance(0, 0, 0, 180, 45, 90) == 5003.771699005144", "assert cross_track_distance(0, 0, 0, 180, -45, 90) == 5003.771699005144", "assert cross_track_distance(0, 0, 0, 180, 90, 0) == 10007.543398010288", "assert cross_track_distance(0, 0, 0, 180, -90, 0) == 10007.543398010288", "assert cross_track_distance(0, 0, 0, 180, 0, -90) == 10007.543398010288", "assert cross_track_distance(0, 0, 0, 180, 45, -90) == 5003.771699005144", "assert cross_track_distance(0, 0, 0, 180, -45, -90) == 5003.771699005144", "assert cross_track_distance(0, 0, 0, 180, 0, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to calculate the along-track distance between a point and a great-circle path defined by two other points.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef along_track_distance(slat, slon, elat, elon, dlat, dlon):\n    R = 6371.0\n    slat, slon, elat, elon, dlat, dlon = map(radians, [slat, slon, elat, elon, dlat, dlon])\n    d13 = great_circle_distance(slat, slon, dlat, dlon) / R\n    theta13 = bearing(slat, slon, dlat, dlon)\n    theta12 = bearing(slat, slon, elat, elon)\n    atd = acos(cos(d13) / cos(asin(sin(d13) * sin(theta13 - theta12)))) * R\n    return abs(atd)", "task_id": "180_60a39623-de61-4213-8a63-4f8a8cb64937", "test_setup_code": "", "test_list": ["assert along_track_distance(0, 0, 0, 1, 0, 0.5) == 55.59746332227937", "assert along_track_distance(0, 0, 90, 0, 45, 0) == 5003.771699005144", "assert along_track_distance(0, 0, 0, 180, 0, 90) == 10007.543398010288", "assert along_track_distance(0, 0, 0, 180, 0, -90) == 10007.543398010288", "assert along_track_distance(0, 0, 90, 0, 90, 0) == 0.0", "assert along_track_distance(0, 0, 0, 180, 0, 0) == 0.0", "assert along_track_distance(0, 0, 0, 180, 0, 179) == 10007.543398010288", "assert along_track_distance(0, 0, 0, 180, 0, 1) == 111.19492664455873", "assert along_track_distance(0, 0, 0, 180, 45, 90) == 5003.771699005144", "assert along_track_distance(0, 0, 0, 180, -45, -90) == 5003.771699005144", "assert along_track_distance(0, 0, 0, 180, 60, 120) == 6671.695598006859", "assert along_track_distance(0, 0, 0, 180, -60, -120) == 6671.695598006859", "assert along_track_distance(0, 0, 0, 180, 30, 60) == 3335.8477990034293", "assert along_track_distance(0, 0, 0, 180, -30, -60) == 3335.8477990034293", "assert along_track_distance(0, 0, 0, 180, 0, 0.1) == 11.119492664455874"], "challenge_test_list": []}
{"text": "Write a function to calculate the midpoint along the great-circle path between two points using latitude and longitude.", "code": "from math import radians, degrees, sin, cos, atan2\n\ndef midpoint_along_path(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    Bx = cos(elat) * cos(elon - slon)\n    By = cos(elat) * sin(elon - slon)\n    mid_lat = atan2(sin(slat) + sin(elat), sqrt((cos(slat) + Bx) ** 2 + By ** 2))\n    mid_lon = slon + atan2(By, cos(slat) + Bx)\n    return (degrees(mid_lat), degrees(mid_lon))", "task_id": "180_a8c7c3da-c39d-4c86-993a-77df9108ffda", "test_setup_code": "", "test_list": ["assert midpoint_along_path(0, 0, 0, 0) == (0.0, 0.0)", "assert midpoint_along_path(0, 0, 0, 90) == (0.0, 45.0)", "assert midpoint_along_path(0, 0, 90, 0) == (45.0, 0.0)", "assert midpoint_along_path(0, 0, -90, 0) == (-45.0, 0.0)", "assert midpoint_along_path(0, 0, 45, 45) == (22.5, 22.5)", "assert midpoint_along_path(0, 0, -45, -45) == (-22.5, -22.5)", "assert midpoint_along_path(45, 45, 45, 135) == (45.0, 90.0)", "assert midpoint_along_path(-45, -45, -45, -135) == (-45.0, -90.0)", "assert midpoint_along_path(90, 0, -90, 0) == (0.0, 0.0)", "assert midpoint_along_path(90, 0, 90, 180) == (90.0, 90.0)", "assert midpoint_along_path(-90, 0, -90, 180) == (-90.0, 90.0)", "assert midpoint_along_path(30, 30, 60, 60) == (45.0, 45.0)", "assert midpoint_along_path(-30, -30, -60, -60) == (-45.0, -45.0)", "assert midpoint_along_path(0, 0, 0, 180) == (0.0, 90.0)", "assert midpoint_along_path(0, 0, 90, 90) == (45.0, 45.0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points along a rhumb line using latitude and longitude.", "code": "from math import radians, degrees, sin, cos, log, sqrt, atan2\n\ndef rhumb_line_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = abs(elon - slon)\n    if dlon > 3.141592653589793:\n        dlon = 2 * 3.141592653589793 - dlon\n    dphi = log(tan(elat / 2 + 3.141592653589793 / 4) / tan(slat / 2 + 3.141592653589793 / 4))\n    q = dlat / dphi if dphi != 0 else cos(slat)\n    distance = sqrt(dlat ** 2 + (q * dlon) ** 2) * R\n    return distance", "task_id": "180_2417e63c-bfcc-4fd8-a60d-9baa0e8fe728", "test_setup_code": "", "test_list": ["assert rhumb_line_distance(0, 0, 0, 0) == 0.0", "assert rhumb_line_distance(0, 0, 0, 1) == 111.19492664455873", "assert rhumb_line_distance(0, 0, 1, 0) == 111.19492664455873", "assert rhumb_line_distance(0, 0, 1, 1) == 157.24938127194397", "assert rhumb_line_distance(45, 45, 45, 45) == 0.0", "assert rhumb_line_distance(-45, -45, -45, -45) == 0.0", "assert rhumb_line_distance(90, 0, -90, 0) == 20015.086796020572", "assert rhumb_line_distance(0, 0, 90, 0) == 10007.543398010286", "assert rhumb_line_distance(0, 0, -90, 0) == 10007.543398010286", "assert rhumb_line_distance(34.052235, -118.243683, 40.712776, -74.005974) == 3936.170524009734", "assert rhumb_line_distance(51.507351, -0.127758, 48.856613, 2.352222) == 343.5560603410413", "assert rhumb_line_distance(-33.868820, 151.209290, -37.813629, 144.963058) == 714.5046222690383", "assert rhumb_line_distance(35.689487, 139.691711, 55.755825, 37.617298) == 7478.630274341825", "assert rhumb_line_distance(28.613939, 77.209023, 19.076090, 72.877426) == 1153.1287982623285", "assert rhumb_line_distance(40.712776, -74.005974, 34.052235, -118.243683) == 3936.170524009734"], "challenge_test_list": []}
{"text": "Write a function to find the vertex of a parabola given its coefficients a, b, and c.", "code": "def parabola_vertex(a, b, c):\n  vertex = (-b / (2 * a), (4 * a * c - b * b) / (4 * a))\n  return vertex", "task_id": "185_3febadfe-efe1-40c4-bb96-b5a32132f374", "test_setup_code": "", "test_list": ["assert parabola_vertex(1, -2, 1) == (1.0, 0.0)", "assert parabola_vertex(1, 0, 0) == (0.0, 0.0)", "assert parabola_vertex(2, -4, 2) == (1.0, 0.0)", "assert parabola_vertex(1, 2, 1) == (-1.0, 0.0)", "assert parabola_vertex(1, 4, 4) == (-2.0, 0.0)", "assert parabola_vertex(-1, 2, -1) == (1.0, 0.0)", "assert parabola_vertex(-1, -2, -1) == (-1.0, 0.0)", "assert parabola_vertex(0.5, -3, 2) == (3.0, -2.5)", "assert parabola_vertex(0.5, 3, 2) == (-3.0, -2.5)", "assert parabola_vertex(2, 3, 1) == (-0.75, -0.125)", "assert parabola_vertex(-2, -3, -1) == (-0.75, 0.125)", "assert parabola_vertex(1, -1, -1) == (0.5, -1.25)", "assert parabola_vertex(1, 1, 1) == (-0.5, 0.75)", "assert parabola_vertex(0.1, 0.2, 0.3) == (-1.0, 0.25)", "assert parabola_vertex(0.1, -0.2, 0.3) == (1.0, 0.25)"], "challenge_test_list": []}
{"text": "Write a function to find the directrix of a parabola given its coefficients a, b, and c.", "code": "def parabola_directrix(a, b, c):\n  directrix = (4 * a * c - b * b - 1) / (4 * a)\n  return directrix", "task_id": "185_7e335e4a-b193-4a5a-bc43-f7063407d70c", "test_setup_code": "", "test_list": ["assert parabola_directrix(1, 0, 0) == -0.25", "assert parabola_directrix(1, 0, 1) == 0.75", "assert parabola_directrix(1, 0, -1) == -1.25", "assert parabola_directrix(1, 1, 0) == -0.5", "assert parabola_directrix(1, -1, 0) == 0.5", "assert parabola_directrix(2, 0, 0) == -0.125", "assert parabola_directrix(2, 0, 1) == 0.375", "assert parabola_directrix(2, 1, 1) == -0.0625", "assert parabola_directrix(2, -1, 1) == 0.5625", "assert parabola_directrix(0.5, 0, 0) == -0.5", "assert parabola_directrix(0.5, 1, 1) == -1.75", "assert parabola_directrix(0.5, -1, 1) == -0.25", "assert parabola_directrix(-1, 0, 0) == 0.25", "assert parabola_directrix(-1, 1, 0) == 0.5", "assert parabola_directrix(-1, -1, 0) == -0.5"], "challenge_test_list": []}
{"text": "Write a function to find the axis of symmetry of a parabola given its coefficients a, b, and c.", "code": "def parabola_axis_of_symmetry(a, b, c):\n  axis_of_symmetry = -b / (2 * a)\n  return axis_of_symmetry", "task_id": "185_6844f9b8-d4b8-45f0-b82a-8e6b9cb5fa89", "test_setup_code": "", "test_list": ["assert parabola_axis_of_symmetry(1, -2, 1) == 1.0", "assert parabola_axis_of_symmetry(1, 0, 0) == 0.0", "assert parabola_axis_of_symmetry(2, -4, 2) == 1.0", "assert parabola_axis_of_symmetry(-1, 2, -1) == -1.0", "assert parabola_axis_of_symmetry(0.5, -3, 1) == 3.0", "assert parabola_axis_of_symmetry(1, 1, 1) == -0.5", "assert parabola_axis_of_symmetry(3, -6, 2) == 1.0", "assert parabola_axis_of_symmetry(1, -1, 0) == 0.5", "assert parabola_axis_of_symmetry(2, 4, 2) == -1.0", "assert parabola_axis_of_symmetry(-2, 4, -2) == 1.0", "assert parabola_axis_of_symmetry(1, 2, 1) == -1.0", "assert parabola_axis_of_symmetry(4, -8, 4) == 1.0", "assert parabola_axis_of_symmetry(0.1, -0.2, 0.1) == 1.0", "assert parabola_axis_of_symmetry(10, -20, 10) == 1.0", "assert parabola_axis_of_symmetry(5, 0, -5) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the y-intercept of a parabola given its coefficients a, b, and c.", "code": "def parabola_y_intercept(a, b, c):\n  y_intercept = c\n  return y_intercept", "task_id": "185_2eae5d0a-656b-4b05-aae6-d08d62cfd1c4", "test_setup_code": "", "test_list": ["assert parabola_y_intercept(1, 2, 3) == 3", "assert parabola_y_intercept(0, 0, 0) == 0", "assert parabola_y_intercept(-1, -2, -3) == -3", "assert parabola_y_intercept(1, 0, 0) == 0", "assert parabola_y_intercept(0, 1, 0) == 0", "assert parabola_y_intercept(0, 0, 1) == 1", "assert parabola_y_intercept(1, 1, 1) == 1", "assert parabola_y_intercept(2, 4, 6) == 6", "assert parabola_y_intercept(-2, -4, -6) == -6", "assert parabola_y_intercept(1.5, 2.5, 3.5) == 3.5", "assert parabola_y_intercept(-1.5, -2.5, -3.5) == -3.5", "assert parabola_y_intercept(0.1, 0.2, 0.3) == 0.3", "assert parabola_y_intercept(1000000, 2000000, 3000000) == 3000000", "assert parabola_y_intercept(-1000000, -2000000, -3000000) == -3000000", "assert parabola_y_intercept(1, 1, -1) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the x-intercepts of a parabola given its coefficients a, b, and c.", "code": "import math\n\ndef parabola_x_intercepts(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant < 0:\n    return ()\n  elif discriminant == 0:\n    x = -b / (2 * a)\n    return (x,)\n  else:\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    return (x1, x2)", "task_id": "185_ed4a7d3e-003e-4883-a907-9e165cc9574a", "test_setup_code": "", "test_list": ["assert parabola_x_intercepts(1, -3, 2) == (2.0, 1.0)", "assert parabola_x_intercepts(1, 2, 1) == (-1.0,)", "assert parabola_x_intercepts(1, 0, -4) == (2.0, -2.0)", "assert parabola_x_intercepts(1, 0, 4) == ()", "assert parabola_x_intercepts(0, 2, -4) == (2.0,)", "assert parabola_x_intercepts(0, 0, 0) == ()", "assert parabola_x_intercepts(1, 1, 1) == ()", "assert parabola_x_intercepts(1, -4, 4) == (2.0,)", "assert parabola_x_intercepts(1, -5, 6) == (3.0, 2.0)", "assert parabola_x_intercepts(1, 4, 4) == (-2.0,)", "assert parabola_x_intercepts(1, -2, 1) == (1.0,)", "assert parabola_x_intercepts(1, 1, 0) == (0.0, -1.0)", "assert parabola_x_intercepts(1, -1, 0) == (1.0, 0.0)", "assert parabola_x_intercepts(2, -4, 2) == (1.0,)", "assert parabola_x_intercepts(2, 0, -2) == (1.0, -1.0)"], "challenge_test_list": []}
{"text": "Write a function to determine the opening direction of a parabola given its coefficient a.", "code": "def parabola_opening_direction(a):\n  if a > 0:\n    return 'up'\n  elif a < 0:\n    return 'down'\n  else:\n    return 'not a parabola'", "task_id": "185_e82de2f8-01d1-49c6-9e17-f5169cbdddf5", "test_setup_code": "", "test_list": ["assert parabola_opening_direction(1) == 'up'", "assert parabola_opening_direction(-1) == 'down'", "assert parabola_opening_direction(0) == 'not a parabola'", "assert parabola_opening_direction(0.5) == 'up'", "assert parabola_opening_direction(-0.5) == 'down'", "assert parabola_opening_direction(1000000) == 'up'", "assert parabola_opening_direction(-1000000) == 'down'", "assert parabola_opening_direction(1e-10) == 'up'", "assert parabola_opening_direction(-1e-10) == 'down'", "assert parabola_opening_direction(1e10) == 'up'", "assert parabola_opening_direction(-1e10) == 'down'", "assert parabola_opening_direction(3.14159) == 'up'", "assert parabola_opening_direction(-3.14159) == 'down'", "assert parabola_opening_direction(0.0001) == 'up'", "assert parabola_opening_direction(-0.0001) == 'down'"], "challenge_test_list": []}
{"text": "Write a function to find the distance from the vertex to the focus of a parabola given its coefficient a.", "code": "def parabola_focus_distance(a):\n  focus_distance = 1 / (4 * a)\n  return focus_distance", "task_id": "185_eca69e76-ca2c-41f9-b290-d639c03e8dc3", "test_setup_code": "", "test_list": ["assert parabola_focus_distance(1) == 0.25", "assert parabola_focus_distance(0.5) == 0.5", "assert parabola_focus_distance(2) == 0.125", "assert parabola_focus_distance(0.25) == 1.0", "assert parabola_focus_distance(4) == 0.0625", "assert parabola_focus_distance(0.1) == 2.5", "assert parabola_focus_distance(10) == 0.025", "assert parabola_focus_distance(0.01) == 25.0", "assert parabola_focus_distance(100) == 0.0025", "assert parabola_focus_distance(0.001) == 250.0", "assert parabola_focus_distance(0.0001) == 2500.0", "assert parabola_focus_distance(0.00001) == 25000.0", "assert parabola_focus_distance(0.000001) == 250000.0", "assert parabola_focus_distance(0.0000001) == 2500000.0", "assert parabola_focus_distance(0.00000001) == 25000000.0"], "challenge_test_list": []}
{"text": "Write a function to find the equation of a parabola given its focus and directrix.", "code": "def parabola_equation_from_focus_directrix(focus, directrix):\n  h, k = focus\n  a = 1 / (2 * (k - directrix))\n  return f'y = {a}(x - {h})^2 + {k}'", "task_id": "185_38d58548-b4ec-4a71-9152-41a040489aa4", "test_setup_code": "", "test_list": ["assert parabola_equation_from_focus_directrix((0, 1), 0) == 'y = 0.5(x - 0)^2 + 1'", "assert parabola_equation_from_focus_directrix((2, 3), 1) == 'y = 0.25(x - 2)^2 + 3'", "assert parabola_equation_from_focus_directrix((-1, -2), -3) == 'y = 0.5(x - -1)^2 + -2'", "assert parabola_equation_from_focus_directrix((0, 0), -1) == 'y = 0.5(x - 0)^2 + 0'", "assert parabola_equation_from_focus_directrix((1, 1), 0) == 'y = 0.5(x - 1)^2 + 1'", "assert parabola_equation_from_focus_directrix((3, 4), 2) == 'y = 0.25(x - 3)^2 + 4'", "assert parabola_equation_from_focus_directrix((-2, -1), -2) == 'y = 1.0(x - -2)^2 + -1'", "assert parabola_equation_from_focus_directrix((0, 5), 4) == 'y = 0.5(x - 0)^2 + 5'", "assert parabola_equation_from_focus_directrix((10, 10), 5) == 'y = 0.1(x - 10)^2 + 10'", "assert parabola_equation_from_focus_directrix((5, 5), 0) == 'y = 0.1(x - 5)^2 + 5'", "assert parabola_equation_from_focus_directrix((0, 1), -1) == 'y = 0.25(x - 0)^2 + 1'", "assert parabola_equation_from_focus_directrix((1, 2), 0) == 'y = 0.25(x - 1)^2 + 2'", "assert parabola_equation_from_focus_directrix((2, 2), 1) == 'y = 0.5(x - 2)^2 + 2'", "assert parabola_equation_from_focus_directrix((3, 3), 1) == 'y = 0.25(x - 3)^2 + 3'", "assert parabola_equation_from_focus_directrix((4, 4), 2) == 'y = 0.25(x - 4)^2 + 4'"], "challenge_test_list": []}
{"text": "Write a function to find the focus of a parabola given its vertex and directrix.", "code": "def parabola_focus_from_vertex_directrix(vertex, directrix):\n  h, k = vertex\n  focus_y = (k + directrix) / 2\n  return (h, focus_y)", "task_id": "185_df49955c-4149-4ea5-8d27-078cb077cf9b", "test_setup_code": "", "test_list": ["assert parabola_focus_from_vertex_directrix((0, 0), -1) == (0, -0.5)", "assert parabola_focus_from_vertex_directrix((1, 2), 0) == (1, 1.0)", "assert parabola_focus_from_vertex_directrix((3, 4), 2) == (3, 3.0)", "assert parabola_focus_from_vertex_directrix((-1, -2), -4) == (-1, -3.0)", "assert parabola_focus_from_vertex_directrix((0, 1), 1) == (0, 1.0)", "assert parabola_focus_from_vertex_directrix((5, 5), 0) == (5, 2.5)", "assert parabola_focus_from_vertex_directrix((-3, -3), -1) == (-3, -2.0)", "assert parabola_focus_from_vertex_directrix((2, -2), -6) == (2, -4.0)", "assert parabola_focus_from_vertex_directrix((0, 0), 0) == (0, 0.0)", "assert parabola_focus_from_vertex_directrix((10, 10), 20) == (10, 15.0)", "assert parabola_focus_from_vertex_directrix((-5, -5), -10) == (-5, -7.5)", "assert parabola_focus_from_vertex_directrix((7, 3), -1) == (7, 1.0)", "assert parabola_focus_from_vertex_directrix((0, -5), -10) == (0, -7.5)", "assert parabola_focus_from_vertex_directrix((4, 0), -4) == (4, -2.0)", "assert parabola_focus_from_vertex_directrix((6, 8), 8) == (6, 8.0)"], "challenge_test_list": []}
{"text": "Write a function to convert the standard form of a parabola to its vertex form given its coefficients a, b, and c.", "code": "def parabola_vertex_form(a, b, c):\n  h = -b / (2 * a)\n  k = (4 * a * c - b * b) / (4 * a)\n  return f'y = {a}(x - {h})^2 + {k}'", "task_id": "185_b1299dd4-ac70-4304-937f-89b5d3000913", "test_setup_code": "", "test_list": ["assert parabola_vertex_form(1, -2, 1) == 'y = 1.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 0, 0) == 'y = 1.0(x - 0.0)^2 + 0.0'", "assert parabola_vertex_form(2, -4, 2) == 'y = 2.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 4, 4) == 'y = 1.0(x - -2.0)^2 + 0.0'", "assert parabola_vertex_form(-1, 2, -1) == 'y = -1.0(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(0.5, -1, 0.5) == 'y = 0.5(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, -6, 9) == 'y = 1.0(x - 3.0)^2 + 0.0'", "assert parabola_vertex_form(3, -6, 2) == 'y = 3.0(x - 1.0)^2 + -1.0'", "assert parabola_vertex_form(1, 2, 1) == 'y = 1.0(x - -1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 0, -1) == 'y = 1.0(x - 0.0)^2 + -1.0'", "assert parabola_vertex_form(2, 3, 1) == 'y = 2.0(x - -0.75)^2 + -0.125'", "assert parabola_vertex_form(-2, 4, -1) == 'y = -2.0(x - 1.0)^2 + 1.0'", "assert parabola_vertex_form(0.1, -0.2, 0.1) == 'y = 0.1(x - 1.0)^2 + 0.0'", "assert parabola_vertex_form(1, 1, 1) == 'y = 1.0(x - -0.5)^2 + 0.75'", "assert parabola_vertex_form(-1, -2, -1) == 'y = -1.0(x - -1.0)^2 + 0.0'"], "challenge_test_list": []}
{"text": "Write a function to find all occurrences of literal strings in a string by using regex.", "code": "import re\ndef find_all_literals(text, patterns):\n  matches = []\n  for pattern in patterns:\n    matches.extend(re.findall(pattern, text))\n  return matches", "task_id": "186_8a0f7789-4688-4b36-ba27-be820758983b", "test_setup_code": "", "test_list": ["assert find_all_literals('hello world', ['hello']) == ['hello']", "assert find_all_literals('hello world', ['world']) == ['world']", "assert find_all_literals('hello world', ['hello', 'world']) == ['hello', 'world']", "assert find_all_literals('hello hello hello', ['hello']) == ['hello', 'hello', 'hello']", "assert find_all_literals('hello world', ['hi']) == []", "assert find_all_literals('hello world', ['']) == []", "assert find_all_literals('hello world', ['hello', 'hi']) == ['hello']", "assert find_all_literals('hello world', ['world', 'hi']) == ['world']", "assert find_all_literals('hello world', ['hello', 'world', 'hi']) == ['hello', 'world']", "assert find_all_literals('a quick brown fox jumps over the lazy dog', ['quick', 'fox', 'dog']) == ['quick', 'fox', 'dog']", "assert find_all_literals('a quick brown fox jumps over the lazy dog', ['cat']) == []", "assert find_all_literals('a quick brown fox jumps over the lazy dog', ['a', 'the']) == ['a', 'the']", "assert find_all_literals('a quick brown fox jumps over the lazy dog', ['quick', 'brown', 'jumps']) == ['quick', 'brown', 'jumps']", "assert find_all_literals('123 456 789', ['123', '456']) == ['123', '456']", "assert find_all_literals('special characters !@#$', ['!@#$', 'characters']) == ['!@#$', 'characters']"], "challenge_test_list": []}
{"text": "Write a function to count the number of times any of the literal strings appear in a string by using regex.", "code": "import re\ndef count_literals(text, patterns):\n  count = 0\n  for pattern in patterns:\n    count += len(re.findall(pattern, text))\n  return count", "task_id": "186_5029fd65-6a60-4bf5-8b8a-edd39a405167", "test_setup_code": "", "test_list": ["assert count_literals('hello world', ['hello']) == 1", "assert count_literals('hello world', ['world']) == 1", "assert count_literals('hello world', ['hello', 'world']) == 2", "assert count_literals('hello world hello', ['hello']) == 2", "assert count_literals('hello world hello', ['world']) == 1", "assert count_literals('hello world hello', ['hello', 'world']) == 3", "assert count_literals('hello world', ['hi']) == 0", "assert count_literals('hello world', ['hello', 'hi']) == 1", "assert count_literals('hello world', ['world', 'hi']) == 1", "assert count_literals('hello world', ['hello', 'world', 'hi']) == 2", "assert count_literals('', ['hello']) == 0", "assert count_literals('hello', ['']) == 0", "assert count_literals('hello', ['hello', '']) == 1", "assert count_literals('hellohello', ['hello']) == 2", "assert count_literals('hellohello', ['hello', 'hello']) == 2"], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of literal strings in a string with a given replacement string by using regex.", "code": "import re\ndef replace_literals(text, patterns, replacement):\n  for pattern in patterns:\n    text = re.sub(pattern, replacement, text)\n  return text", "task_id": "186_156269f1-b107-4b76-ba77-36890f09cc54", "test_setup_code": "", "test_list": ["assert replace_literals('hello world', ['world'], 'there') == 'hello there'", "assert replace_literals('hello world', ['hello'], 'hi') == 'hi world'", "assert replace_literals('hello world', ['hello', 'world'], 'hi') == 'hi hi'", "assert replace_literals('hello world', ['o'], 'a') == 'hella warld'", "assert replace_literals('hello world', ['l'], 'x') == 'hexxo worxd'", "assert replace_literals('hello world', ['h', 'e', 'l', 'o', 'w', 'r', 'd'], 'x') == 'xxxxxxxxxx'", "assert replace_literals('hello world', [''], 'x') == 'hello world'", "assert replace_literals('hello world', ['world', 'hello'], 'hi') == 'hi hi'", "assert replace_literals('hello world', ['world', 'planet'], 'earth') == 'hello earth'", "assert replace_literals('hello world', ['world', 'world'], 'earth') == 'hello earth'", "assert replace_literals('hello world', ['world', 'earth'], 'planet') == 'hello planet'", "assert replace_literals('hello world', ['hello', 'earth'], 'planet') == 'planet world'", "assert replace_literals('hello world', ['hello', 'world', 'planet'], 'earth') == 'earth earth'", "assert replace_literals('hello world', ['hello', 'world', 'hello world'], 'earth') == 'earth'", "assert replace_literals('hello world', ['hello', 'world', 'earth'], 'planet') == 'planet planet'"], "challenge_test_list": []}
{"text": "Write a function to find the first occurrence of any literal string in a string by using regex.", "code": "import re\ndef find_first_literal(text, patterns):\n  for pattern in patterns:\n    match = re.search(pattern, text)\n    if match:\n      return match.group(0)\n  return ''", "task_id": "186_4f497be8-d60c-4e46-ae96-ae6073ff21f6", "test_setup_code": "", "test_list": ["assert find_first_literal('hello world', ['world']) == 'world'", "assert find_first_literal('hello world', ['hello', 'world']) == 'hello'", "assert find_first_literal('hello world', ['world', 'hello']) == 'world'", "assert find_first_literal('hello world', ['test', 'world']) == 'world'", "assert find_first_literal('hello world', ['test']) == ''", "assert find_first_literal('hello world', ['']) == ''", "assert find_first_literal('hello world', ['o w']) == 'o w'", "assert find_first_literal('hello world', ['l', 'o']) == 'l'", "assert find_first_literal('hello world', ['o', 'l']) == 'o'", "assert find_first_literal('hello world', ['hello', 'world', 'test']) == 'hello'", "assert find_first_literal('hello world', ['world', 'hello', 'test']) == 'world'", "assert find_first_literal('hello world', ['test', 'hello', 'world']) == 'hello'", "assert find_first_literal('hello world', ['test', 'world', 'hello']) == 'world'", "assert find_first_literal('hello', ['hello', 'world']) == 'hello'", "assert find_first_literal('world', ['hello', 'world']) == 'world'"], "challenge_test_list": []}
{"text": "Write a function to return the starting positions of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_positions(text, patterns):\n  positions = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      positions.append(match.start())\n  return positions", "task_id": "186_40ed307c-38ce-4ace-b257-27dfb1fa82f7", "test_setup_code": "", "test_list": ["assert check_literal_positions('hello world', ['hello']) == [0]", "assert check_literal_positions('hello world', ['world']) == [6]", "assert check_literal_positions('hello world', ['o']) == [4, 7]", "assert check_literal_positions('hello world', ['l']) == [2, 3, 9]", "assert check_literal_positions('hello world', ['z']) == []", "assert check_literal_positions('hello world', ['hello', 'world']) == [0, 6]", "assert check_literal_positions('hello world', ['hello', 'o']) == [0, 4, 7]", "assert check_literal_positions('hello world', ['']) == []", "assert check_literal_positions('', ['hello']) == []", "assert check_literal_positions('aaaaa', ['a']) == [0, 1, 2, 3, 4]", "assert check_literal_positions('aaaaa', ['aa']) == [0, 1, 2, 3]", "assert check_literal_positions('abcabcabc', ['abc']) == [0, 3, 6]", "assert check_literal_positions('abcabcabc', ['a', 'b', 'c']) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert check_literal_positions('123123123', ['123', '23']) == [0, 1, 3, 4, 6, 7]", "assert check_literal_positions('mississippi', ['iss', 'ppi']) == [1, 4, 8]"], "challenge_test_list": []}
{"text": "Write a function to return the ending positions of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_end_positions(text, patterns):\n  positions = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      positions.append(match.end())\n  return positions", "task_id": "186_9ddca844-b9c1-4d02-a049-1c21ac32aed6", "test_setup_code": "", "test_list": ["assert check_literal_end_positions('hello world', ['hello']) == [5]", "assert check_literal_end_positions('hello world', ['world']) == [11]", "assert check_literal_end_positions('hello world', ['o']) == [5, 8]", "assert check_literal_end_positions('hello world', ['l']) == [3, 4, 10]", "assert check_literal_end_positions('hello world', ['z']) == []", "assert check_literal_end_positions('hello world', ['hello', 'world']) == [5, 11]", "assert check_literal_end_positions('hello hello', ['hello']) == [5, 11]", "assert check_literal_end_positions('hello world', ['']) == []", "assert check_literal_end_positions('hello world', ['hello', 'o']) == [5, 5, 8]", "assert check_literal_end_positions('a'*1000 + 'b', ['a', 'b']) == [1000, 1001]", "assert check_literal_end_positions('a'*1000 + 'b'*1000, ['a', 'b']) == [1000, 2000]", "assert check_literal_end_positions('abcabcabc', ['abc']) == [3, 6, 9]", "assert check_literal_end_positions('abcabcabc', ['a', 'b', 'c']) == [1, 4, 7, 2, 5, 8, 3, 6, 9]", "assert check_literal_end_positions('mississippi', ['iss']) == [4, 7]", "assert check_literal_end_positions('mississippi', ['i', 's']) == [1, 4, 7, 10, 2, 3, 5, 6, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to return the span (start and end positions) of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_spans(text, patterns):\n  spans = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      spans.append(match.span())\n  return spans", "task_id": "186_e497a994-ff66-4b4e-a672-dfd78da29a66", "test_setup_code": "", "test_list": ["assert check_literal_spans('hello world', ['hello']) == [(0, 5)]", "assert check_literal_spans('hello world', ['world']) == [(6, 11)]", "assert check_literal_spans('hello world', ['o']) == [(4, 5), (7, 8)]", "assert check_literal_spans('hello world', ['l']) == [(2, 3), (3, 4), (9, 10)]", "assert check_literal_spans('hello world', ['z']) == []", "assert check_literal_spans('hello hello', ['hello']) == [(0, 5), (6, 11)]", "assert check_literal_spans('hello world', ['hello', 'world']) == [(0, 5), (6, 11)]", "assert check_literal_spans('hello world', ['']) == []", "assert check_literal_spans('hello world', [' ', 'o']) == [(5, 6), (4, 5), (7, 8)]", "assert check_literal_spans('a' * 1000, ['a']) == [(i, i+1) for i in range(1000)]", "assert check_literal_spans('abcabcabc', ['abc']) == [(0, 3), (3, 6), (6, 9)]", "assert check_literal_spans('abcabcabc', ['a', 'b', 'c']) == [(0, 1), (3, 4), (6, 7), (1, 2), (4, 5), (7, 8), (2, 3), (5, 6), (8, 9)]", "assert check_literal_spans('1234567890', ['123', '789']) == [(0, 3), (6, 9)]", "assert check_literal_spans('mississippi', ['iss']) == [(1, 4), (4, 7)]", "assert check_literal_spans('mississippi', ['ss', 'pp']) == [(2, 4), (5, 7), (8, 10)]"], "challenge_test_list": []}
{"text": "Write a function to search for literal strings in a string case insensitively by using regex.", "code": "import re\ndef check_literal_case_insensitive(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern, text, re.IGNORECASE):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_a3b13edd-8f56-4533-841f-9413f605f4e5", "test_setup_code": "", "test_list": ["assert check_literal_case_insensitive('Hello World', ['hello']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['HELLO']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['world']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['WORLD']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['Hi']) == 'Not Matched!'", "assert check_literal_case_insensitive('Hello World', ['HELLO', 'WORLD']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['Hi', 'WORLD']) == 'Matched!'", "assert check_literal_case_insensitive('Hello World', ['Hi', 'Bye']) == 'Not Matched!'", "assert check_literal_case_insensitive('Hello World', []) == 'Not Matched!'", "assert check_literal_case_insensitive('', ['hello']) == 'Not Matched!'", "assert check_literal_case_insensitive('A quick brown fox jumps over the lazy dog', ['fox']) == 'Matched!'", "assert check_literal_case_insensitive('A quick brown fox jumps over the lazy dog', ['FOX']) == 'Matched!'", "assert check_literal_case_insensitive('A quick brown fox jumps over the lazy dog', ['cat']) == 'Not Matched!'", "assert check_literal_case_insensitive('Python Programming', ['python']) == 'Matched!'", "assert check_literal_case_insensitive('Python Programming', ['PROGRAMMING']) == 'Matched!'"], "challenge_test_list": []}
{"text": "Write a function to search for literal strings as whole words in a string by using regex.", "code": "import re\ndef check_literal_whole_words(text, patterns):\n  for pattern in patterns:\n    if re.search(r'\\b' + pattern + r'\\b', text):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_216288f7-0960-4c5e-996c-8a893f4ff219", "test_setup_code": "", "test_list": ["assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['fox']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['cat']) == 'Not Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['quick', 'dog']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['turtle']) == 'Not Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['quick', 'turtle']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['lazy', 'dog']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['lazy dog']) == 'Not Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['brown', 'fox']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['brown fox']) == 'Not Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['the']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['The']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['jump']) == 'Not Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['jumps']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['quick', 'brown', 'fox']) == 'Matched!'", "assert check_literal_whole_words('The quick brown fox jumps over the lazy dog', ['quick', 'brown', 'cat']) == 'Matched!'"], "challenge_test_list": []}
{"text": "Write a function to check if any of the literal strings appear at the start of a string by using regex.", "code": "import re\ndef check_literal_at_start(text, patterns):\n  for pattern in patterns:\n    if re.match(pattern, text):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_ba9cbf65-31ae-4228-9552-9d5cf2961ad8", "test_setup_code": "", "test_list": ["assert check_literal_at_start('hello world', ['hello', 'world']) == 'Matched!'", "assert check_literal_at_start('goodbye world', ['hello', 'goodbye']) == 'Matched!'", "assert check_literal_at_start('good morning', ['morning', 'good']) == 'Matched!'", "assert check_literal_at_start('good evening', ['evening', 'night']) == 'Not Matched!'", "assert check_literal_at_start('abc123', ['123', 'abc']) == 'Matched!'", "assert check_literal_at_start('123abc', ['123', 'abc']) == 'Matched!'", "assert check_literal_at_start('abcdef', ['gh', 'ij']) == 'Not Matched!'", "assert check_literal_at_start('abcdef', ['ab', 'cd']) == 'Matched!'", "assert check_literal_at_start('abcdef', ['ef', 'cd']) == 'Not Matched!'", "assert check_literal_at_start('abcdef', ['a', 'b']) == 'Matched!'", "assert check_literal_at_start('abcdef', ['f', 'e']) == 'Not Matched!'", "assert check_literal_at_start('abcdef', ['abcdef', 'ghijkl']) == 'Matched!'", "assert check_literal_at_start('abcdef', ['ghijkl', 'abcdef']) == 'Matched!'", "assert check_literal_at_start('abcdef', ['ghijkl', 'mnopqr']) == 'Not Matched!'", "assert check_literal_at_start('', ['a', 'b']) == 'Not Matched!'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two squares.", "code": "def is_sum_of_squares(n):\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n    return False", "task_id": "188_64d22eb3-00bd-45db-8650-34209904ca2d", "test_setup_code": "", "test_list": ["assert is_sum_of_squares(5) == True", "assert is_sum_of_squares(3) == False", "assert is_sum_of_squares(0) == True", "assert is_sum_of_squares(1) == True", "assert is_sum_of_squares(2) == True", "assert is_sum_of_squares(4) == True", "assert is_sum_of_squares(8) == False", "assert is_sum_of_squares(10) == True", "assert is_sum_of_squares(13) == True", "assert is_sum_of_squares(25) == True", "assert is_sum_of_squares(50) == True", "assert is_sum_of_squares(100) == True", "assert is_sum_of_squares(101) == True", "assert is_sum_of_squares(999) == False", "assert is_sum_of_squares(1000) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two cubes.", "code": "def is_cube_sum(n):\n    for i in range(int(n**(1/3))+1):\n        for j in range(int(n**(1/3))+1):\n            if i**3 + j**3 == n:\n                return True\n    return False", "task_id": "188_6b0ed00c-1588-47ca-8348-e7f6f722b345", "test_setup_code": "", "test_list": ["assert is_cube_sum(1) == True", "assert is_cube_sum(8) == True", "assert is_cube_sum(9) == False", "assert is_cube_sum(27) == True", "assert is_cube_sum(35) == False", "assert is_cube_sum(64) == True", "assert is_cube_sum(16) == False", "assert is_cube_sum(0) == True", "assert is_cube_sum(2) == False", "assert is_cube_sum(17) == True", "assert is_cube_sum(1729) == True", "assert is_cube_sum(4104) == True", "assert is_cube_sum(1000) == True", "assert is_cube_sum(1001) == False", "assert is_cube_sum(729) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a Fibonacci number.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "188_8b2a36a3-3f36-47a9-b192-d73c5a5dd70d", "test_setup_code": "", "test_list": ["assert is_fibonacci(0) == True", "assert is_fibonacci(1) == True", "assert is_fibonacci(2) == True", "assert is_fibonacci(3) == True", "assert is_fibonacci(4) == False", "assert is_fibonacci(5) == True", "assert is_fibonacci(6) == False", "assert is_fibonacci(8) == True", "assert is_fibonacci(13) == True", "assert is_fibonacci(21) == True", "assert is_fibonacci(22) == False", "assert is_fibonacci(34) == True", "assert is_fibonacci(55) == True", "assert is_fibonacci(89) == True", "assert is_fibonacci(144) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "188_91d9eac5-70ed-435d-af7e-5285c8ab3692", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(31) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "188_4c0f2c14-7fbd-4b4f-a2e2-d7e7a0c75af4", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('racecar') == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "188_e5a4205e-1792-4685-a430-341eed134a2e", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abc', 'abcd') == False", "assert is_anagram('aabbcc', 'abcabc') == True", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '1234') == False", "assert is_anagram('!@#', '#@!') == True", "assert is_anagram('!@#', '!@#') == True", "assert is_anagram('!@#', '!@') == False", "assert is_anagram('anagram', 'nagaram') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a power of two.", "code": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "188_cafe9a9b-829a-4a07-9a3d-52defd6be3a4", "test_setup_code": "", "test_list": ["assert is_power_of_two(1) == True", "assert is_power_of_two(2) == True", "assert is_power_of_two(3) == False", "assert is_power_of_two(4) == True", "assert is_power_of_two(5) == False", "assert is_power_of_two(8) == True", "assert is_power_of_two(16) == True", "assert is_power_of_two(31) == False", "assert is_power_of_two(32) == True", "assert is_power_of_two(0) == False", "assert is_power_of_two(-1) == False", "assert is_power_of_two(-2) == False", "assert is_power_of_two(1024) == True", "assert is_power_of_two(1023) == False", "assert is_power_of_two(2048) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is an Armstrong number.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit)**num_len for digit in num_str)", "task_id": "188_348e84e8-035f-43c1-9643-a6e0161132b4", "test_setup_code": "", "test_list": ["assert is_armstrong(153) == True", "assert is_armstrong(370) == True", "assert is_armstrong(371) == True", "assert is_armstrong(407) == True", "assert is_armstrong(0) == True", "assert is_armstrong(1) == True", "assert is_armstrong(2) == True", "assert is_armstrong(10) == False", "assert is_armstrong(100) == False", "assert is_armstrong(9474) == True", "assert is_armstrong(9475) == False", "assert is_armstrong(9473) == False", "assert is_armstrong(9926315) == True", "assert is_armstrong(9926314) == False", "assert is_armstrong(9926316) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a Harshad number.", "code": "def is_harshad(n):\n    return n % sum(int(digit) for digit in str(n)) == 0", "task_id": "188_55def771-08f9-4ce5-8d24-3112bdd82253", "test_setup_code": "", "test_list": ["assert is_harshad(18) == True", "assert is_harshad(21) == True", "assert is_harshad(19) == False", "assert is_harshad(1) == True", "assert is_harshad(10) == True", "assert is_harshad(11) == False", "assert is_harshad(12) == True", "assert is_harshad(100) == True", "assert is_harshad(101) == False", "assert is_harshad(999) == True", "assert is_harshad(1000) == True", "assert is_harshad(1001) == False", "assert is_harshad(200) == True", "assert is_harshad(201) == True", "assert is_harshad(202) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a perfect square.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n", "task_id": "188_f4403303-d36f-432f-8480-92b7ec7bcca4", "test_setup_code": "", "test_list": ["assert is_perfect_square(0) == True", "assert is_perfect_square(1) == True", "assert is_perfect_square(4) == True", "assert is_perfect_square(9) == True", "assert is_perfect_square(16) == True", "assert is_perfect_square(25) == True", "assert is_perfect_square(36) == True", "assert is_perfect_square(49) == True", "assert is_perfect_square(64) == True", "assert is_perfect_square(81) == True", "assert is_perfect_square(100) == True", "assert is_perfect_square(2) == False", "assert is_perfect_square(3) == False", "assert is_perfect_square(10) == False", "assert is_perfect_square(15) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing even number in a given list of integers.", "code": "def find_first_missing_even(arr):\n    arr = [x for x in arr if x % 2 == 0]\n    arr.sort()\n    missing_even = 2\n    for num in arr:\n        if num == missing_even:\n            missing_even += 2\n        elif num > missing_even:\n            break\n    return missing_even", "task_id": "189_6e2e1460-b368-4f63-81d7-908a7698c3bd", "test_setup_code": "", "test_list": ["assert find_first_missing_even([1, 3, 5, 7]) == 2", "assert find_first_missing_even([2, 4, 6, 8]) == 10", "assert find_first_missing_even([2, 3, 4, 7, 8, 10]) == 6", "assert find_first_missing_even([0, 1, 2, 3, 4, 5]) == 6", "assert find_first_missing_even([2, 2, 2, 2]) == 4", "assert find_first_missing_even([1, 2, 3, 4, 6, 8, 10, 12]) == 14", "assert find_first_missing_even([]) == 2", "assert find_first_missing_even([1, 3, 5, 7, 9, 11]) == 2", "assert find_first_missing_even([2]) == 4", "assert find_first_missing_even([4, 6, 8, 10, 12]) == 2", "assert find_first_missing_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 22", "assert find_first_missing_even([2, 4, 6, 8, 10, 12, 14, 18, 20]) == 16", "assert find_first_missing_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 32", "assert find_first_missing_even([1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 32", "assert find_first_missing_even([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31]) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing odd number in a given list of integers.", "code": "def find_first_missing_odd(arr):\n    arr = [x for x in arr if x % 2 != 0]\n    arr.sort()\n    missing_odd = 1\n    for num in arr:\n        if num == missing_odd:\n            missing_odd += 2\n        elif num > missing_odd:\n            break\n    return missing_odd", "task_id": "189_711886a8-37c8-408c-b3a9-cf0ba103bae0", "test_setup_code": "", "test_list": ["assert find_first_missing_odd([1, 3, 5, 7, 9]) == 11", "assert find_first_missing_odd([2, 4, 6, 8, 10]) == 1", "assert find_first_missing_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11", "assert find_first_missing_odd([11, 13, 15, 17, 19]) == 1", "assert find_first_missing_odd([1, 3, 7, 9]) == 5", "assert find_first_missing_odd([3, 5, 7, 9, 11]) == 1", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21]) == 23", "assert find_first_missing_odd([]) == 1", "assert find_first_missing_odd([1]) == 3", "assert find_first_missing_odd([2, 4, 6, 8, 10, 1, 3, 5, 7, 9]) == 11", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49]) == 51", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51]) == 53", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53]) == 55", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55]) == 57", "assert find_first_missing_odd([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57]) == 59"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing multiple of three in a given list of integers.", "code": "def find_first_missing_multiple_of_three(arr):\n    arr = [x for x in arr if x % 3 == 0]\n    arr.sort()\n    missing_multiple = 3\n    for num in arr:\n        if num == missing_multiple:\n            missing_multiple += 3\n        elif num > missing_multiple:\n            break\n    return missing_multiple", "task_id": "189_bef37062-6b99-448e-b2ae-49fedef3b589", "test_setup_code": "", "test_list": ["assert find_first_missing_multiple_of_three([3, 6, 9, 12]) == 15", "assert find_first_missing_multiple_of_three([1, 2, 4, 5, 7, 8, 10]) == 3", "assert find_first_missing_multiple_of_three([3, 6, 9, 15, 18]) == 12", "assert find_first_missing_multiple_of_three([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 12", "assert find_first_missing_multiple_of_three([]) == 3", "assert find_first_missing_multiple_of_three([1, 2, 4, 5, 7, 8, 10, 11]) == 3", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 33", "assert find_first_missing_multiple_of_three([3, 5, 7, 9, 11, 13, 15, 17, 19]) == 6", "assert find_first_missing_multiple_of_three([6, 12, 18, 24, 30]) == 3", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 18, 21, 24, 27]) == 15", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 21, 24, 27]) == 18", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 18, 24, 27]) == 21", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 18, 21, 27]) == 24", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 18, 21, 24]) == 27", "assert find_first_missing_multiple_of_three([3, 6, 9, 12, 15, 18, 21, 24, 27]) == 30"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive square number in a given list of integers.", "code": "def find_first_missing_positive_square(arr):\n    arr = [x for x in arr if x > 0 and (x**0.5).is_integer()]\n    arr.sort()\n    missing_square = 1\n    while missing_square in arr:\n        missing_square += 1\n        missing_square = missing_square**2\n    return missing_square", "task_id": "189_dfa10349-5a8d-4d2a-98ec-20e9bb692408", "test_setup_code": "", "test_list": ["assert find_first_missing_positive_square([1, 4, 9, 16, 25]) == 36", "assert find_first_missing_positive_square([1, 4, 9, 16, 36]) == 25", "assert find_first_missing_positive_square([1, 4, 9, 25, 36]) == 16", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64]) == 81", "assert find_first_missing_positive_square([4, 16, 36, 64]) == 1", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) == 121", "assert find_first_missing_positive_square([]) == 1", "assert find_first_missing_positive_square([2, 3, 5, 7, 11]) == 1", "assert find_first_missing_positive_square([-1, -4, -9, -16, -25]) == 1", "assert find_first_missing_positive_square([0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) == 121", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 121]) == 100", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 144]) == 121", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]) == 169", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]) == 441", "assert find_first_missing_positive_square([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441]) == 484"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing Fibonacci number in a given list of integers.", "code": "def generate_fibonacci(n):\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\ndef find_first_missing_fibonacci(arr):\n    max_val = max(arr) if arr else 0\n    fib_sequence = generate_fibonacci(max_val + 1)\n    for num in fib_sequence:\n        if num not in arr:\n            return num\n    return fib_sequence[-1] + fib_sequence[-2]", "task_id": "189_2b0bc51c-94ed-4c64-bdac-e5e473605dd7", "test_setup_code": "", "test_list": ["assert generate_fibonacci(10) == [0, 1, 1, 2, 3, 5, 8]", "assert generate_fibonacci(0) == [0, 1]", "assert generate_fibonacci(1) == [0, 1, 1]", "assert generate_fibonacci(2) == [0, 1, 1, 2]", "assert generate_fibonacci(5) == [0, 1, 1, 2, 3, 5]", "assert generate_fibonacci(8) == [0, 1, 1, 2, 3, 5, 8]", "assert generate_fibonacci(9) == [0, 1, 1, 2, 3, 5, 8]", "assert generate_fibonacci(13) == [0, 1, 1, 2, 3, 5, 8, 13]", "assert generate_fibonacci(21) == [0, 1, 1, 2, 3, 5, 8, 13, 21]", "assert generate_fibonacci(100) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]", "assert generate_fibonacci(144) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]", "assert generate_fibonacci(233) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233]", "assert generate_fibonacci(377) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]", "assert generate_fibonacci(610) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610]", "assert generate_fibonacci(1000) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing power of two in a given list of integers.", "code": "def find_first_missing_power_of_two(arr):\n    powers_of_two = [2**i for i in range(31)]\n    for power in powers_of_two:\n        if power not in arr:\n            return power\n    return 2**31", "task_id": "189_0357b2b9-a99a-48d7-82a4-1f8c843a444e", "test_setup_code": "", "test_list": ["assert find_first_missing_power_of_two([1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]) == 2048", "assert find_first_missing_power_of_two([]) == 2", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824]) == 2147483648", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912]) == 1073741824", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456]) == 536870912", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432]) == 67108864", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608]) == 16777216", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304]) == 8388608", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152]) == 4194304", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576]) == 2097152", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288]) == 1048576", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144]) == 524288", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072]) == 262144", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536]) == 131072", "assert find_first_missing_power_of_two([2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768]) == 65536"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing factorial number in a given list of integers.", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef find_first_missing_factorial(arr):\n    i = 0\n    while True:\n        fact = factorial(i)\n        if fact not in arr:\n            return fact\n        i += 1", "task_id": "189_567393a6-16f3-4a8c-b3dd-9c345af42f8f", "test_setup_code": "", "test_list": ["assert find_first_missing_factorial([1, 1, 2, 6, 24, 120]) == 720", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720]) == 1", "assert find_first_missing_factorial([1, 1, 2, 6, 24]) == 120", "assert find_first_missing_factorial([]) == 1", "assert find_first_missing_factorial([1, 2, 6, 24, 720]) == 120", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720, 5040]) == 1", "assert find_first_missing_factorial([1, 1, 1, 1, 1]) == 2", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720, 5040, 40320]) == 1", "assert find_first_missing_factorial([2, 6, 24, 120, 720, 5040]) == 1", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720, 5040, 40320, 362880]) == 1", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]) == 1", "assert find_first_missing_factorial([1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800]) == 1", "assert find_first_missing_factorial([1]) == 2", "assert find_first_missing_factorial([1, 2]) == 6", "assert find_first_missing_factorial([1, 2, 6]) == 24"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing integer square root in a given list of integers.", "code": "def find_first_missing_square_root(arr):\n    arr = [int(x**0.5) for x in arr if (x**0.5).is_integer()]\n    arr.sort()\n    missing_root = 1\n    while missing_root in arr:\n        missing_root += 1\n    return missing_root", "task_id": "189_8ab73832-9284-4870-b61b-64ba4c0e6773", "test_setup_code": "", "test_list": ["assert find_first_missing_square_root([1, 4, 9, 16, 25]) == 6", "assert find_first_missing_square_root([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2", "assert find_first_missing_square_root([0, 1, 4, 9, 16, 25, 36, 49, 64, 81]) == 10", "assert find_first_missing_square_root([1, 4, 9, 16, 36, 49, 64, 81]) == 5", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100]) == 11", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121]) == 12", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]) == 13", "assert find_first_missing_square_root([4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144]) == 1", "assert find_first_missing_square_root([2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15]) == 1", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169]) == 14", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196]) == 15", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]) == 16", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256]) == 17", "assert find_first_missing_square_root([1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289]) == 18", "assert find_first_missing_square_root([]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the first missing cubic number in a given list of integers.", "code": "def find_first_missing_cubic(arr):\n    arr = [x for x in arr if round(x**(1/3))**3 == x]\n    arr.sort()\n    missing_cubic = 1\n    while missing_cubic**3 in arr:\n        missing_cubic += 1\n    return missing_cubic**3", "task_id": "189_b141c428-87d9-4aa0-a526-56cef9c38306", "test_setup_code": "", "test_list": ["assert find_first_missing_cubic([1, 8, 27, 64]) == 125", "assert find_first_missing_cubic([1, 8, 27, 64, 125]) == 216", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343]) == 512", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 512]) == 343", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 729]) == 1000", "assert find_first_missing_cubic([8, 27, 64, 125, 216, 343, 512, 729]) == 1", "assert find_first_missing_cubic([1, 27, 64, 125, 216, 343, 512, 729]) == 8", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 343, 512, 729]) == 216", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 1000]) == 729", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]) == 1331", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 729, 1331]) == 1000", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331]) == 1728", "assert find_first_missing_cubic([]) == 1", "assert find_first_missing_cubic([2, 3, 5, 7, 11]) == 1", "assert find_first_missing_cubic([1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728]) == 2197"], "challenge_test_list": []}
{"text": "Write a function to check whether the given day is a weekend or not.", "code": "def is_weekend(day: str) -> bool:\n    return day in ['Saturday', 'Sunday']", "task_id": "191_9dfbe2eb-4f48-4a63-951c-c1ef92e56df1", "test_setup_code": "", "test_list": ["assert is_weekend('Monday') == False", "assert is_weekend('Tuesday') == False", "assert is_weekend('Wednesday') == False", "assert is_weekend('Thursday') == False", "assert is_weekend('Friday') == False", "assert is_weekend('Saturday') == True", "assert is_weekend('Sunday') == True", "assert is_weekend('saturday') == False", "assert is_weekend('SUNDAY') == False", "assert is_weekend('') == False", "assert is_weekend('Funday') == False", "assert is_weekend('Sat') == False", "assert is_weekend('Sun') == False", "assert is_weekend('Saturday ') == False", "assert is_weekend(' Sunday') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(character: str) -> bool:\n    return character.lower() in ['a', 'e', 'i', 'o', 'u']", "task_id": "191_9c5e5e91-fc5d-48c2-b5a2-13cb43adf21f", "test_setup_code": "", "test_list": ["assert is_vowel('a') == True", "assert is_vowel('e') == True", "assert is_vowel('i') == True", "assert is_vowel('o') == True", "assert is_vowel('u') == True", "assert is_vowel('A') == True", "assert is_vowel('E') == True", "assert is_vowel('I') == True", "assert is_vowel('O') == True", "assert is_vowel('U') == True", "assert is_vowel('b') == False", "assert is_vowel('z') == False", "assert is_vowel('Y') == False", "assert is_vowel('1') == False", "assert is_vowel('@') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "191_238e60d6-74a7-418b-866f-d75f6d32f692", "test_setup_code": "", "test_list": ["assert is_leap_year(2000) == True", "assert is_leap_year(1900) == False", "assert is_leap_year(2004) == True", "assert is_leap_year(2001) == False", "assert is_leap_year(2100) == False", "assert is_leap_year(2400) == True", "assert is_leap_year(1996) == True", "assert is_leap_year(1999) == False", "assert is_leap_year(1600) == True", "assert is_leap_year(1700) == False", "assert is_leap_year(1800) == False", "assert is_leap_year(2020) == True", "assert is_leap_year(2021) == False", "assert is_leap_year(2024) == True", "assert is_leap_year(2023) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(number: int) -> bool:\n    if number <= 1:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True", "task_id": "191_cd0ad42a-8795-4727-a2e6-e566dc663a77", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(29) == True", "assert is_prime(97) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given word is a palindrome or not.", "code": "def is_palindrome(word: str) -> bool:\n    return word == word[::-1]", "task_id": "191_9b2bfb04-f46b-4bd7-890c-ce5ee954e43a", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('madam') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abba') == True", "assert is_palindrome('abcba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('Aba') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('!@#$$#@!') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is an uppercase letter or not.", "code": "def is_uppercase(character: str) -> bool:\n    return character.isupper()", "task_id": "191_6bf905e5-6b66-4dd8-b8aa-5658c216ea69", "test_setup_code": "", "test_list": ["assert is_uppercase('A') == True", "assert is_uppercase('Z') == True", "assert is_uppercase('a') == False", "assert is_uppercase('z') == False", "assert is_uppercase('M') == True", "assert is_uppercase('m') == False", "assert is_uppercase('1') == False", "assert is_uppercase('!') == False", "assert is_uppercase(' ') == False", "assert is_uppercase('') == False", "assert is_uppercase('G') == True", "assert is_uppercase('g') == False", "assert is_uppercase('Q') == True", "assert is_uppercase('q') == False", "assert is_uppercase('T') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(number: int) -> bool:\n    return number % 2 == 0", "task_id": "191_cdfde0db-f68c-41f8-a1ef-f13577f29f2b", "test_setup_code": "", "test_list": ["assert is_even(2) == True", "assert is_even(3) == False", "assert is_even(0) == True", "assert is_even(-2) == True", "assert is_even(-3) == False", "assert is_even(100) == True", "assert is_even(101) == False", "assert is_even(999999) == False", "assert is_even(1000000) == True", "assert is_even(-1000000) == True", "assert is_even(-999999) == False", "assert is_even(1) == False", "assert is_even(-1) == False", "assert is_even(2147483646) == True", "assert is_even(2147483647) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a consonant or not.", "code": "def is_consonant(character: str) -> bool:\n    return character.isalpha() and character.lower() not in ['a', 'e', 'i', 'o', 'u']", "task_id": "191_07dbbbbc-d016-4c87-bd4d-38ce62547538", "test_setup_code": "", "test_list": ["assert is_consonant('b') == True", "assert is_consonant('c') == True", "assert is_consonant('d') == True", "assert is_consonant('z') == True", "assert is_consonant('B') == True", "assert is_consonant('a') == False", "assert is_consonant('e') == False", "assert is_consonant('i') == False", "assert is_consonant('o') == False", "assert is_consonant('u') == False", "assert is_consonant('A') == False", "assert is_consonant('1') == False", "assert is_consonant(' ') == False", "assert is_consonant('!') == False", "assert is_consonant('') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square or not.", "code": "def is_square(number: int) -> bool:\n    return int(number ** 0.5) ** 2 == number", "task_id": "191_0fd3b96c-f183-458e-94b8-208ceca8875b", "test_setup_code": "", "test_list": ["assert is_square(0) == True", "assert is_square(1) == True", "assert is_square(4) == True", "assert is_square(9) == True", "assert is_square(16) == True", "assert is_square(25) == True", "assert is_square(36) == True", "assert is_square(49) == True", "assert is_square(64) == True", "assert is_square(81) == True", "assert is_square(100) == True", "assert is_square(2) == False", "assert is_square(3) == False", "assert is_square(10) == False", "assert is_square(15) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 5 or not.", "code": "def is_divisible_by_5(number: int) -> bool:\n    return number % 5 == 0", "task_id": "191_b44c9c0b-7145-498e-a115-20692856fa61", "test_setup_code": "", "test_list": ["assert is_divisible_by_5(10) == true", "assert is_divisible_by_5(0) == true", "assert is_divisible_by_5(5) == true", "assert is_divisible_by_5(1) == false", "assert is_divisible_by_5(15) == true", "assert is_divisible_by_5(20) == true", "assert is_divisible_by_5(-5) == true", "assert is_divisible_by_5(-10) == true", "assert is_divisible_by_5(7) == false", "assert is_divisible_by_5(14) == false", "assert is_divisible_by_5(100) == true", "assert is_divisible_by_5(101) == false", "assert is_divisible_by_5(25) == true", "assert is_divisible_by_5(30) == true", "assert is_divisible_by_5(-1) == false"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a circle centered at the origin with a given radius.", "code": "def count_integral_points_circle(radius: int) -> int:\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 < radius**2:\n                count += 1\n    return count", "task_id": "190_2c82f956-043e-4b53-8071-db34a86b30bd", "test_setup_code": "", "test_list": ["assert count_integral_points_circle(1) == 5", "assert count_integral_points_circle(2) == 13", "assert count_integral_points_circle(3) == 29", "assert count_integral_points_circle(0) == 1", "assert count_integral_points_circle(4) == 49", "assert count_integral_points_circle(5) == 81", "assert count_integral_points_circle(10) == 317", "assert count_integral_points_circle(6) == 113", "assert count_integral_points_circle(7) == 157", "assert count_integral_points_circle(8) == 221", "assert count_integral_points_circle(9) == 293", "assert count_integral_points_circle(11) == 421", "assert count_integral_points_circle(12) == 485", "assert count_integral_points_circle(13) == 565", "assert count_integral_points_circle(14) == 653"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a rectangle with given bottom-left and top-right coordinates.", "code": "def count_integral_points_rectangle(x1: int, y1: int, x2: int, y2: int) -> int:\n    return (x2 - x1 - 1) * (y2 - y1 - 1)", "task_id": "190_218c82ad-c9d1-4177-bf1e-f9f1cb61de29", "test_setup_code": "", "test_list": ["assert count_integral_points_rectangle(0, 0, 2, 2) == 1", "assert count_integral_points_rectangle(0, 0, 3, 3) == 4", "assert count_integral_points_rectangle(1, 1, 4, 4) == 4", "assert count_integral_points_rectangle(0, 0, 1, 1) == 0", "assert count_integral_points_rectangle(0, 0, 5, 5) == 16", "assert count_integral_points_rectangle(-1, -1, 2, 2) == 4", "assert count_integral_points_rectangle(-2, -2, 2, 2) == 9", "assert count_integral_points_rectangle(-3, -3, 3, 3) == 16", "assert count_integral_points_rectangle(0, 0, 0, 0) == 0", "assert count_integral_points_rectangle(1, 1, 1, 1) == 0", "assert count_integral_points_rectangle(0, 0, 10, 10) == 64", "assert count_integral_points_rectangle(5, 5, 10, 10) == 16", "assert count_integral_points_rectangle(2, 2, 5, 5) == 4", "assert count_integral_points_rectangle(-5, -5, 0, 0) == 16", "assert count_integral_points_rectangle(-10, -10, -5, -5) == 16"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a right-angled triangle with given base and height.", "code": "def count_integral_points_triangle(base: int, height: int) -> int:\n    count = 0\n    for x in range(1, base):\n        for y in range(1, height):\n            if y < (height/base) * x:\n                count += 1\n    return count", "task_id": "190_1a90aae0-eca3-4f0d-b8bb-bd32fd1bb938", "test_setup_code": "", "test_list": ["assert count_integral_points_triangle(1, 1) == 0", "assert count_integral_points_triangle(2, 2) == 1", "assert count_integral_points_triangle(3, 3) == 3", "assert count_integral_points_triangle(4, 4) == 6", "assert count_integral_points_triangle(5, 5) == 10", "assert count_integral_points_triangle(6, 6) == 15", "assert count_integral_points_triangle(7, 7) == 21", "assert count_integral_points_triangle(8, 8) == 28", "assert count_integral_points_triangle(10, 10) == 45", "assert count_integral_points_triangle(10, 5) == 20", "assert count_integral_points_triangle(5, 10) == 20", "assert count_integral_points_triangle(2, 3) == 2", "assert count_integral_points_triangle(3, 2) == 2", "assert count_integral_points_triangle(1, 10) == 0", "assert count_integral_points_triangle(10, 1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a parallelogram with given base and height.", "code": "def count_integral_points_parallelogram(base: int, height: int) -> int:\n    return (base - 1) * (height - 1)", "task_id": "190_8ee8de25-67f5-421e-90d3-2c3024c0196d", "test_setup_code": "", "test_list": ["assert count_integral_points_parallelogram(1, 1) == 0", "assert count_integral_points_parallelogram(2, 2) == 1", "assert count_integral_points_parallelogram(3, 3) == 4", "assert count_integral_points_parallelogram(4, 4) == 9", "assert count_integral_points_parallelogram(5, 5) == 16", "assert count_integral_points_parallelogram(10, 10) == 81", "assert count_integral_points_parallelogram(1, 10) == 0", "assert count_integral_points_parallelogram(10, 1) == 0", "assert count_integral_points_parallelogram(2, 10) == 9", "assert count_integral_points_parallelogram(10, 2) == 9", "assert count_integral_points_parallelogram(100, 100) == 9801", "assert count_integral_points_parallelogram(50, 50) == 2401", "assert count_integral_points_parallelogram(3, 7) == 12", "assert count_integral_points_parallelogram(7, 3) == 12", "assert count_integral_points_parallelogram(20, 30) == 551"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a regular hexagon with a given side length.", "code": "def count_integral_points_hexagon(side_length: int) -> int:\n    count = 0\n    for x in range(-side_length, side_length + 1):\n        for y in range(-side_length, side_length + 1):\n            if abs(x - y) <= side_length and abs(x + y) <= side_length:\n                count += 1\n    return count", "task_id": "190_37f9fb36-ffdb-4669-b51d-762a6f135a19", "test_setup_code": "", "test_list": ["assert count_integral_points_hexagon(1) == 7", "assert count_integral_points_hexagon(2) == 19", "assert count_integral_points_hexagon(0) == 1", "assert count_integral_points_hexagon(3) == 37", "assert count_integral_points_hexagon(4) == 61", "assert count_integral_points_hexagon(5) == 91", "assert count_integral_points_hexagon(6) == 127", "assert count_integral_points_hexagon(7) == 169", "assert count_integral_points_hexagon(8) == 217", "assert count_integral_points_hexagon(9) == 271", "assert count_integral_points_hexagon(10) == 331", "assert count_integral_points_hexagon(11) == 397", "assert count_integral_points_hexagon(12) == 469", "assert count_integral_points_hexagon(13) == 547", "assert count_integral_points_hexagon(14) == 631"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside an ellipse centered at the origin with given semi-major axis a and semi-minor axis b.", "code": "def count_integral_points_ellipse(a: int, b: int) -> int:\n    count = 0\n    for x in range(-a, a + 1):\n        for y in range(-b, b + 1):\n            if (x**2 / a**2) + (y**2 / b**2) < 1:\n                count += 1\n    return count", "task_id": "190_9c10d8d2-bb6e-4fe0-a980-6be6824edcaf", "test_setup_code": "", "test_list": ["assert count_integral_points_ellipse(1, 1) == 5", "assert count_integral_points_ellipse(2, 1) == 9", "assert count_integral_points_ellipse(1, 2) == 9", "assert count_integral_points_ellipse(3, 2) == 29", "assert count_integral_points_ellipse(2, 3) == 29", "assert count_integral_points_ellipse(0, 0) == 1", "assert count_integral_points_ellipse(5, 5) == 81", "assert count_integral_points_ellipse(10, 1) == 21", "assert count_integral_points_ellipse(1, 10) == 21", "assert count_integral_points_ellipse(3, 3) == 37", "assert count_integral_points_ellipse(2, 2) == 13", "assert count_integral_points_ellipse(4, 4) == 53", "assert count_integral_points_ellipse(6, 3) == 61", "assert count_integral_points_ellipse(3, 6) == 61", "assert count_integral_points_ellipse(7, 7) == 113"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a diamond centered at the origin with a given diagonal length d.", "code": "def count_integral_points_diamond(d: int) -> int:\n    count = 0\n    for x in range(-d//2, d//2 + 1):\n        for y in range(-d//2, d//2 + 1):\n            if abs(x) + abs(y) < d//2:\n                count += 1\n    return count", "task_id": "190_4aabc086-b786-43de-87dc-ff88f84ec6e7", "test_setup_code": "", "test_list": ["assert count_integral_points_diamond(1) == 1", "assert count_integral_points_diamond(2) == 1", "assert count_integral_points_diamond(3) == 5", "assert count_integral_points_diamond(4) == 5", "assert count_integral_points_diamond(5) == 13", "assert count_integral_points_diamond(6) == 13", "assert count_integral_points_diamond(7) == 25", "assert count_integral_points_diamond(8) == 25", "assert count_integral_points_diamond(9) == 41", "assert count_integral_points_diamond(10) == 41", "assert count_integral_points_diamond(11) == 61", "assert count_integral_points_diamond(12) == 61", "assert count_integral_points_diamond(13) == 85", "assert count_integral_points_diamond(14) == 85", "assert count_integral_points_diamond(15) == 113"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a regular pentagon with a given side length.", "code": "def count_integral_points_pentagon(side_length: int) -> int:\n    count = 0\n    for x in range(-side_length, side_length + 1):\n        for y in range(-side_length, side_length + 1):\n            if abs(x) + abs(y) < side_length:\n                count += 1\n    return count", "task_id": "190_00915aa9-69f5-4429-8ccd-a41d88f171dd", "test_setup_code": "", "test_list": ["assert count_integral_points_pentagon(1) == 1", "assert count_integral_points_pentagon(2) == 5", "assert count_integral_points_pentagon(3) == 13", "assert count_integral_points_pentagon(0) == 0", "assert count_integral_points_pentagon(4) == 25", "assert count_integral_points_pentagon(5) == 41", "assert count_integral_points_pentagon(10) == 145", "assert count_integral_points_pentagon(6) == 61", "assert count_integral_points_pentagon(7) == 85", "assert count_integral_points_pentagon(8) == 113", "assert count_integral_points_pentagon(9) == 145", "assert count_integral_points_pentagon(11) == 221", "assert count_integral_points_pentagon(12) == 265", "assert count_integral_points_pentagon(13) == 313", "assert count_integral_points_pentagon(14) == 365"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a trapezoid with given bases a, b and height.", "code": "def count_integral_points_trapezoid(a: int, b: int, height: int) -> int:\n    count = 0\n    for x in range(min(a, b)):\n        for y in range(height):\n            if y < height:\n                count += 1\n    return count", "task_id": "190_131b99f1-ba5c-4936-be26-eff6cc3c4a5d", "test_setup_code": "", "test_list": ["assert count_integral_points_trapezoid(1, 1, 1) == 1", "assert count_integral_points_trapezoid(2, 2, 2) == 4", "assert count_integral_points_trapezoid(3, 3, 3) == 9", "assert count_integral_points_trapezoid(4, 4, 4) == 16", "assert count_integral_points_trapezoid(5, 5, 5) == 25", "assert count_integral_points_trapezoid(0, 0, 0) == 0", "assert count_integral_points_trapezoid(1, 2, 3) == 3", "assert count_integral_points_trapezoid(2, 1, 3) == 3", "assert count_integral_points_trapezoid(1, 3, 2) == 2", "assert count_integral_points_trapezoid(3, 1, 2) == 2", "assert count_integral_points_trapezoid(2, 2, 1) == 2", "assert count_integral_points_trapezoid(1, 1, 10) == 10", "assert count_integral_points_trapezoid(10, 10, 1) == 10", "assert count_integral_points_trapezoid(100, 100, 1) == 100", "assert count_integral_points_trapezoid(1, 100, 1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a circular sector with a given radius and angle in degrees.", "code": "import math\n\ndef count_integral_points_sector(radius: int, angle: int) -> int:\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 < radius**2 and math.degrees(math.atan2(y, x)) < angle:\n                count += 1\n    return count", "task_id": "190_8d0edb8a-777c-4faa-b1f3-f9cd7a68c80a", "test_setup_code": "", "test_list": ["assert count_integral_points_sector(1, 90) == 2", "assert count_integral_points_sector(2, 90) == 5", "assert count_integral_points_sector(3, 90) == 8", "assert count_integral_points_sector(5, 90) == 21", "assert count_integral_points_sector(5, 180) == 41", "assert count_integral_points_sector(5, 360) == 81", "assert count_integral_points_sector(5, 45) == 11", "assert count_integral_points_sector(0, 90) == 0", "assert count_integral_points_sector(10, 0) == 0", "assert count_integral_points_sector(10, 360) == 317", "assert count_integral_points_sector(7, 120) == 39", "assert count_integral_points_sector(4, 270) == 37", "assert count_integral_points_sector(6, 30) == 10", "assert count_integral_points_sector(8, 60) == 34", "assert count_integral_points_sector(3, 180) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common substring for the given two sequences.", "code": "def longest_common_substring(X: str, Y: str) -> int:\n    m = len(X)\n    n = len(Y)\n    result = 0\n    length = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                length[i][j] = length[i - 1][j - 1] + 1\n                result = max(result, length[i][j])\n            else:\n                length[i][j] = 0\n    return result", "task_id": "187_74e47bfe-012d-4a3d-9bba-50c3df7b194c", "test_setup_code": "", "test_list": ["assert longest_common_substring('abcdef', 'bcdef') == 5", "assert longest_common_substring('abcdef', 'bcdxf') == 2", "assert longest_common_substring('abc', 'def') == 0", "assert longest_common_substring('', '') == 0", "assert longest_common_substring('abc', '') == 0", "assert longest_common_substring('', 'abc') == 0", "assert longest_common_substring('abcdef', 'abcdef') == 6", "assert longest_common_substring('programming', 'gaming') == 6", "assert longest_common_substring('abababab', 'ababab') == 6", "assert longest_common_substring('hello world', 'world hello') == 5", "assert longest_common_substring('aaaa', 'aa') == 2", "assert longest_common_substring('abcxyz', 'xyzabc') == 3", "assert longest_common_substring('a', 'a') == 1", "assert longest_common_substring('abcdefg', 'hijklmn') == 0", "assert longest_common_substring('abcabcabc', 'abcabc') == 6"], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix for the given two sequences.", "code": "def longest_common_prefix(X: str, Y: str) -> str:\n    min_length = min(len(X), len(Y))\n    for i in range(min_length):\n        if X[i] != Y[i]:\n            return X[:i]\n    return X[:min_length]", "task_id": "187_8707a2ff-c291-47bb-b674-0e0a3d2f5b39", "test_setup_code": "", "test_list": ["assert longest_common_prefix('flower', 'flow') == 'flow'", "assert longest_common_prefix('dog', 'racecar') == ''", "assert longest_common_prefix('interspecies', 'interstellar') == 'inters'", "assert longest_common_prefix('throne', 'throne') == 'throne'", "assert longest_common_prefix('throne', 'dungeon') == ''", "assert longest_common_prefix('prefix', 'suffix') == ''", "assert longest_common_prefix('common', 'commute') == 'comm'", "assert longest_common_prefix('abc', 'abcd') == 'abc'", "assert longest_common_prefix('a', 'a') == 'a'", "assert longest_common_prefix('a', 'b') == ''", "assert longest_common_prefix('', '') == ''", "assert longest_common_prefix('longest', '') == ''", "assert longest_common_prefix('', 'prefix') == ''", "assert longest_common_prefix('abcdefgh', 'abcdefg') == 'abcdefg'", "assert longest_common_prefix('12345', '123') == '123'"], "challenge_test_list": []}
{"text": "Write a function to find the longest common suffix for the given two sequences.", "code": "def longest_common_suffix(X: str, Y: str) -> str:\n    min_length = min(len(X), len(Y))\n    for i in range(1, min_length + 1):\n        if X[-i] != Y[-i]:\n            return X[-i+1:]\n    return X[-min_length:]", "task_id": "187_108daa2e-b50f-47bb-a7b2-ab43707a51c0", "test_setup_code": "", "test_list": ["assert longest_common_suffix('running', 'jogging') == 'ing'", "assert longest_common_suffix('apple', 'maple') == 'ple'", "assert longest_common_suffix('hello', 'world') == ''", "assert longest_common_suffix('abc', 'abc') == 'abc'", "assert longest_common_suffix('abcdef', 'def') == 'def'", "assert longest_common_suffix('suffix', 'prefix') == 'fix'", "assert longest_common_suffix('12345', '2345') == '2345'", "assert longest_common_suffix('abcd', 'efgh') == ''", "assert longest_common_suffix('a', 'a') == 'a'", "assert longest_common_suffix('a', 'b') == ''", "assert longest_common_suffix('', '') == ''", "assert longest_common_suffix('longest', '') == ''", "assert longest_common_suffix('', 'common') == ''", "assert longest_common_suffix('abcd', 'bcd') == 'bcd'", "assert longest_common_suffix('xyz', 'zyx') == ''"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given list of integers.", "code": "def longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "187_f4ea3736-2382-4cd8-a09b-d8483f3d7e7b", "test_setup_code": "", "test_list": ["assert longest_increasing_subsequence([]) == 0", "assert longest_increasing_subsequence([10]) == 1", "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4", "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6", "assert longest_increasing_subsequence([2, 2, 2, 2, 2]) == 1", "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9", "assert longest_increasing_subsequence([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 3, 4, 5, 6]) == 6", "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == 6", "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3", "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4", "assert longest_increasing_subsequence([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 10", "assert longest_increasing_subsequence([10, 20, 10, 30, 10, 40, 10, 50]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest palindromic subsequence in a given string.", "code": "def longest_palindromic_subsequence(X: str) -> int:\n    n = len(X)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if X[i] == X[j] and cl == 2:\n                dp[i][j] = 2\n            elif X[i] == X[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "task_id": "187_73d546ac-7f3a-4f07-8fc9-490a9ca9ddf1", "test_setup_code": "", "test_list": ["assert longest_palindromic_subsequence('') == 0", "assert longest_palindromic_subsequence('a') == 1", "assert longest_palindromic_subsequence('aa') == 2", "assert longest_palindromic_subsequence('ab') == 1", "assert longest_palindromic_subsequence('racecar') == 7", "assert longest_palindromic_subsequence('character') == 3", "assert longest_palindromic_subsequence('banana') == 5", "assert longest_palindromic_subsequence('abcba') == 5", "assert longest_palindromic_subsequence('forgeeksskeegfor') == 10", "assert longest_palindromic_subsequence('aabbcc') == 2", "assert longest_palindromic_subsequence('aabbccdd') == 2", "assert longest_palindromic_subsequence('abcdcba') == 7", "assert longest_palindromic_subsequence('abacdfgdcaba') == 5", "assert longest_palindromic_subsequence('bbbab') == 4", "assert longest_palindromic_subsequence('cbbd') == 2"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences.", "code": "def longest_common_subsequence_length(X: str, Y: str) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "187_0898ca61-8138-4b77-9d10-e3a2dbd88883", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_length('abcde', 'ace') == 3", "assert longest_common_subsequence_length('abc', 'abc') == 3", "assert longest_common_subsequence_length('abc', 'def') == 0", "assert longest_common_subsequence_length('', '') == 0", "assert longest_common_subsequence_length('a', 'a') == 1", "assert longest_common_subsequence_length('a', 'b') == 0", "assert longest_common_subsequence_length('abcdef', 'acf') == 3", "assert longest_common_subsequence_length('abcdef', 'azced') == 3", "assert longest_common_subsequence_length('abc', '') == 0", "assert longest_common_subsequence_length('', 'abc') == 0", "assert longest_common_subsequence_length('abc', 'a') == 1", "assert longest_common_subsequence_length('abc', 'b') == 1", "assert longest_common_subsequence_length('abc', 'c') == 1", "assert longest_common_subsequence_length('abcde', 'acebd') == 3", "assert longest_common_subsequence_length('abcdefgh', 'aceg') == 4"], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence string for the given two sequences.", "code": "def longest_common_subsequence_string(X: str, Y: str) -> str:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    index = dp[m][n]\n    lcs = [''] * index\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(lcs)", "task_id": "187_ab3fbfc1-fe05-4a91-8e34-f4d35a152b59", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_string('abcde', 'ace') == 'ace'", "assert longest_common_subsequence_string('abc', 'abc') == 'abc'", "assert longest_common_subsequence_string('abc', 'def') == ''", "assert longest_common_subsequence_string('', 'abc') == ''", "assert longest_common_subsequence_string('abc', '') == ''", "assert longest_common_subsequence_string('abcdef', 'abdf') == 'abdf'", "assert longest_common_subsequence_string('abcdef', 'azced') == 'acd'", "assert longest_common_subsequence_string('a', 'a') == 'a'", "assert longest_common_subsequence_string('a', 'b') == ''", "assert longest_common_subsequence_string('abc', 'a') == 'a'", "assert longest_common_subsequence_string('abc', 'c') == 'c'", "assert longest_common_subsequence_string('abc', 'b') == 'b'", "assert longest_common_subsequence_string('abcdef', 'acef') == 'acef'", "assert longest_common_subsequence_string('abcdef', 'acf') == 'acf'", "assert longest_common_subsequence_string('abcdefgh', 'aceg') == 'aceg'"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences with at most k mismatches allowed.", "code": "def longest_common_subsequence_length_k(X: str, Y: str, k: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[[0] * (k + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for l in range(k + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j][l] = dp[i - 1][j - 1][l] + 1\n                else:\n                    dp[i][j][l] = max(dp[i - 1][j][l], dp[i][j - 1][l])\n                    if l > 0:\n                        dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j - 1][l - 1] + 1)\n    return dp[m][n][k]", "task_id": "187_823ad9d4-477f-4179-9949-58f825a94663", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_length_k('abcde', 'ace', 0) == 3", "assert longest_common_subsequence_length_k('abcde', 'ace', 1) == 3", "assert longest_common_subsequence_length_k('abcde', 'aec', 1) == 3", "assert longest_common_subsequence_length_k('abc', 'def', 3) == 3", "assert longest_common_subsequence_length_k('abc', 'def', 0) == 0", "assert longest_common_subsequence_length_k('abcdef', 'azced', 2) == 4", "assert longest_common_subsequence_length_k('abcdef', 'azced', 1) == 3", "assert longest_common_subsequence_length_k('a', 'a', 0) == 1", "assert longest_common_subsequence_length_k('a', 'b', 1) == 1", "assert longest_common_subsequence_length_k('a', 'b', 0) == 0", "assert longest_common_subsequence_length_k('abc', 'abc', 0) == 3", "assert longest_common_subsequence_length_k('abc', 'abc', 1) == 3", "assert longest_common_subsequence_length_k('abc', 'abx', 1) == 3", "assert longest_common_subsequence_length_k('abc', 'abx', 0) == 2", "assert longest_common_subsequence_length_k('abcd', 'abxy', 2) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can replace one character in X with any character from the replacement string.", "code": "def longest_common_subsequence_with_replacement(X: str, Y: str, replacement: str) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                for r in replacement:\n                    if r == Y[j - 1]:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n    return dp[m][n]", "task_id": "187_c16971c4-1ecb-49f2-8879-20486d897627", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_with_replacement('abc', 'abc', 'x') == 3", "assert longest_common_subsequence_with_replacement('abc', 'def', 'x') == 0", "assert longest_common_subsequence_with_replacement('abc', 'adc', 'b') == 3", "assert longest_common_subsequence_with_replacement('abc', 'adc', 'x') == 2", "assert longest_common_subsequence_with_replacement('abc', 'axc', 'b') == 3", "assert longest_common_subsequence_with_replacement('abc', 'axc', 'x') == 2", "assert longest_common_subsequence_with_replacement('abcdef', 'azced', 'b') == 4", "assert longest_common_subsequence_with_replacement('abcdef', 'azced', 'x') == 3", "assert longest_common_subsequence_with_replacement('abcdef', 'azced', 'bcd') == 5", "assert longest_common_subsequence_with_replacement('', 'abc', 'x') == 0", "assert longest_common_subsequence_with_replacement('abc', '', 'x') == 0", "assert longest_common_subsequence_with_replacement('a', 'a', 'x') == 1", "assert longest_common_subsequence_with_replacement('a', 'b', 'a') == 1", "assert longest_common_subsequence_with_replacement('a', 'b', 'x') == 0", "assert longest_common_subsequence_with_replacement('abac', 'baca', 'x') == 3"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can skip up to 'skip' characters in X.", "code": "def longest_common_subsequence_with_skip(X: str, Y: str, skip: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if skip > 0:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    return dp[m][n]", "task_id": "187_cf0211b1-e657-4f19-9cfc-dc3829c910ba", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_with_skip('abcde', 'ace', 0) == 3", "assert longest_common_subsequence_with_skip('abcde', 'ace', 1) == 3", "assert longest_common_subsequence_with_skip('abc', 'abc', 0) == 3", "assert longest_common_subsequence_with_skip('abc', 'def', 0) == 0", "assert longest_common_subsequence_with_skip('abc', 'def', 3) == 3", "assert longest_common_subsequence_with_skip('abcd', 'abdc', 1) == 3", "assert longest_common_subsequence_with_skip('abcd', 'abdc', 2) == 4", "assert longest_common_subsequence_with_skip('a', 'a', 0) == 1", "assert longest_common_subsequence_with_skip('a', 'b', 0) == 0", "assert longest_common_subsequence_with_skip('a', 'b', 1) == 1", "assert longest_common_subsequence_with_skip('abcdef', 'abdf', 1) == 4", "assert longest_common_subsequence_with_skip('abcdef', 'abdf', 0) == 3", "assert longest_common_subsequence_with_skip('abcdef', 'ghijkl', 6) == 6", "assert longest_common_subsequence_with_skip('abcdef', 'ghijkl', 0) == 0", "assert longest_common_subsequence_with_skip('abc', 'abc', 1) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can delete up to 'deletions' characters in X.", "code": "def longest_common_subsequence_with_deletion(X: str, Y: str, deletions: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[[0] * (deletions + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for d in range(deletions + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j][d] = dp[i - 1][j - 1][d] + 1\n                else:\n                    dp[i][j][d] = max(dp[i - 1][j][d], dp[i][j - 1][d])\n                    if d > 0:\n                        dp[i][j][d] = max(dp[i][j][d], dp[i - 1][j][d - 1])\n    return dp[m][n][deletions]", "task_id": "187_1b42323e-1a1e-43ab-a84c-14754b5706e0", "test_setup_code": "", "test_list": ["assert longest_common_subsequence_with_deletion('abcde', 'ace', 0) == 3", "assert longest_common_subsequence_with_deletion('abcde', 'ace', 1) == 3", "assert longest_common_subsequence_with_deletion('abcde', 'ace', 2) == 3", "assert longest_common_subsequence_with_deletion('abc', 'def', 0) == 0", "assert longest_common_subsequence_with_deletion('abc', 'def', 1) == 0", "assert longest_common_subsequence_with_deletion('abc', 'def', 2) == 0", "assert longest_common_subsequence_with_deletion('abc', 'abc', 0) == 3", "assert longest_common_subsequence_with_deletion('abc', 'abc', 1) == 3", "assert longest_common_subsequence_with_deletion('abc', 'abc', 2) == 3", "assert longest_common_subsequence_with_deletion('abcdef', 'axcyez', 2) == 3", "assert longest_common_subsequence_with_deletion('abcdef', 'axcyez', 3) == 4", "assert longest_common_subsequence_with_deletion('abcdef', 'axcyez', 4) == 4", "assert longest_common_subsequence_with_deletion('', 'abc', 0) == 0", "assert longest_common_subsequence_with_deletion('abc', '', 0) == 0", "assert longest_common_subsequence_with_deletion('', '', 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))", "task_id": "193_236cb11c-a6df-4b0a-9010-d0e08039cc77", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5]", "assert remove_duplicates([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([10, 10, 10, 10, 10, 10, 10, 10, 10, 10]) == [10]"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the sorted list.", "code": "def remove_duplicates_and_sort(lst: list) -> list:\n    return sorted(list(set(lst)))", "task_id": "193_f3b9cfd5-98b5-4114-a0d7-866f423f764d", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_sort([1, 2, 3, 2, 1]) == [1, 2, 3]", "assert remove_duplicates_and_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates_and_sort([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates_and_sort([]) == []", "assert remove_duplicates_and_sort([10]) == [10]", "assert remove_duplicates_and_sort([-1, -2, -3, -2, -1]) == [-3, -2, -1]", "assert remove_duplicates_and_sort([0, 0, 0, 0]) == [0]", "assert remove_duplicates_and_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates_and_sort([5, 5, 4, 4, 3, 3, 2, 2, 1, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates_and_sort([1, -1, 2, -2, 3, -3]) == [-3, -2, -1, 1, 2, 3]", "assert remove_duplicates_and_sort([100, 0, 100, 0, 100]) == [0, 100]", "assert remove_duplicates_and_sort([3, 1, 4, 1, 5, 9, 2, 6, 5]) == [1, 2, 3, 4, 5, 6, 9]", "assert remove_duplicates_and_sort([9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert remove_duplicates_and_sort([2, 2, 2, 1, 1, 1, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates_and_sort([-10, -5, 0, 5, 10, 5, 0, -5, -10]) == [-10, -5, 0, 5, 10]"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the sum of the unique elements.", "code": "def remove_duplicates_and_sum(lst: list) -> int:\n    return sum(set(lst))", "task_id": "193_8502d2a7-20a6-4da3-a6e2-85a6d7a5eded", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_sum([1, 2, 3, 4, 5]) == 15", "assert remove_duplicates_and_sum([1, 1, 1, 1, 1]) == 1", "assert remove_duplicates_and_sum([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 10", "assert remove_duplicates_and_sum([10, 20, 30, 40, 50, 10, 20, 30]) == 150", "assert remove_duplicates_and_sum([]) == 0", "assert remove_duplicates_and_sum([0, 0, 0, 0, 0]) == 0", "assert remove_duplicates_and_sum([-1, -2, -3, -4, -5]) == -15", "assert remove_duplicates_and_sum([-1, -1, -1, -1, -1]) == -1", "assert remove_duplicates_and_sum([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 0", "assert remove_duplicates_and_sum([100, 200, 300, 100, 200, 300]) == 600", "assert remove_duplicates_and_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert remove_duplicates_and_sum([1]) == 1", "assert remove_duplicates_and_sum([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15", "assert remove_duplicates_and_sum([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 15", "assert remove_duplicates_and_sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 550"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the count of unique elements.", "code": "def remove_duplicates_and_count(lst: list) -> int:\n    return len(set(lst))", "task_id": "193_a0017287-3f3b-4f67-8ef5-713422376236", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_count([]) == 0", "assert remove_duplicates_and_count([1]) == 1", "assert remove_duplicates_and_count([1, 1, 1, 1]) == 1", "assert remove_duplicates_and_count([1, 2, 3, 4, 5]) == 5", "assert remove_duplicates_and_count([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4", "assert remove_duplicates_and_count([5, 4, 3, 2, 1]) == 5", "assert remove_duplicates_and_count([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5", "assert remove_duplicates_and_count([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5", "assert remove_duplicates_and_count([10, 20, 30, 40, 50, 10, 20, 30, 40, 50]) == 5", "assert remove_duplicates_and_count([100, 200, 300, 400, 500, 100, 200, 300, 400, 500]) == 5", "assert remove_duplicates_and_count([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 3", "assert remove_duplicates_and_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert remove_duplicates_and_count([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 10", "assert remove_duplicates_and_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert remove_duplicates_and_count([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the maximum of the unique elements.", "code": "def remove_duplicates_and_max(lst: list) -> int:\n    return max(set(lst))", "task_id": "193_cae71987-f5fd-468d-8bce-3a6a94ee84a5", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_max([1, 2, 3, 4, 5]) == 5", "assert remove_duplicates_and_max([5, 5, 5, 5, 5]) == 5", "assert remove_duplicates_and_max([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5", "assert remove_duplicates_and_max([-1, -2, -3, -4, -5]) == -1", "assert remove_duplicates_and_max([100, 200, 300, 400, 500]) == 500", "assert remove_duplicates_and_max([1]) == 1", "assert remove_duplicates_and_max([0, 0, 0, 0, 0]) == 0", "assert remove_duplicates_and_max([1, 1, 2, 2, 3, 3, 4, 4, 100, 100]) == 100", "assert remove_duplicates_and_max([-10, -20, -30, -40, -50]) == -10", "assert remove_duplicates_and_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert remove_duplicates_and_max([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 100", "assert remove_duplicates_and_max([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 20", "assert remove_duplicates_and_max([5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 50", "assert remove_duplicates_and_max([-1, 0, 1, 2, 3, 4, 5]) == 5", "assert remove_duplicates_and_max([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 19"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the minimum of the unique elements.", "code": "def remove_duplicates_and_min(lst: list) -> int:\n    return min(set(lst))", "task_id": "193_1cf7b92c-af9e-4c92-a217-b467778a0d63", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_min([1, 2, 3, 4, 5]) == 1", "assert remove_duplicates_and_min([5, 5, 5, 5, 5]) == 5", "assert remove_duplicates_and_min([2, 2, 1, 1, 3, 3]) == 1", "assert remove_duplicates_and_min([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert remove_duplicates_and_min([100, 50, 50, 100, 25, 25]) == 25", "assert remove_duplicates_and_min([-1, -2, -3, -4, -5]) == -5", "assert remove_duplicates_and_min([-1, -1, -1, -1, -1]) == -1", "assert remove_duplicates_and_min([0, 0, 0, 0, 0]) == 0", "assert remove_duplicates_and_min([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 1", "assert remove_duplicates_and_min([1000, 2000, 3000, 4000, 5000]) == 1000", "assert remove_duplicates_and_min([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1", "assert remove_duplicates_and_min([5, 4, 3, 2, 1, 5, 4, 3, 2, 1]) == 1", "assert remove_duplicates_and_min([7, 7, 7, 7, 3, 3, 3, 3]) == 3", "assert remove_duplicates_and_min([1]) == 1", "assert remove_duplicates_and_min([-10, -20, -30, -40, -50]) == -50"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the list of unique elements in reverse order.", "code": "def remove_duplicates_and_reverse(lst: list) -> list:\n    return list(set(lst))[::-1]", "task_id": "193_e3970df5-db0a-4079-aebf-a9339a2a1f0b", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_reverse([1, 2, 3, 2, 1]) == [3, 2, 1]", "assert remove_duplicates_and_reverse([5, 5, 5, 5, 5]) == [5]", "assert remove_duplicates_and_reverse([]) == []", "assert remove_duplicates_and_reverse([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert remove_duplicates_and_reverse([1, 1, 1, 2, 2, 2, 3, 3, 3]) == [3, 2, 1]", "assert remove_duplicates_and_reverse([10, 20, 30, 20, 10, 40]) == [40, 30, 20, 10]", "assert remove_duplicates_and_reverse([100, 200, 300, 100, 200, 300, 400]) == [400, 300, 200, 100]", "assert remove_duplicates_and_reverse([1]) == [1]", "assert remove_duplicates_and_reverse([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates_and_reverse([7, 8, 9, 7, 8, 9, 10]) == [10, 9, 8, 7]", "assert remove_duplicates_and_reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert remove_duplicates_and_reverse([1, 3, 3, 2, 1, 2, 4, 4, 5, 5]) == [5, 4, 2, 1, 3]", "assert remove_duplicates_and_reverse([0, 0, 0, 0, 0]) == [0]", "assert remove_duplicates_and_reverse([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert remove_duplicates_and_reverse([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the first element of the unique elements.", "code": "def remove_duplicates_and_first(lst: list) -> int:\n    return list(set(lst))[0]", "task_id": "193_daab8e7e-b145-417d-9ee5-9dfdac24f18a", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_first([1, 2, 2, 3, 4, 4, 5]) == 1", "assert remove_duplicates_and_first([5, 5, 5, 5, 5]) == 5", "assert remove_duplicates_and_first([2, 3, 1, 4, 2, 3, 1, 4]) == 1", "assert remove_duplicates_and_first([10, 20, 30, 10, 20, 30]) == 10", "assert remove_duplicates_and_first([100]) == 100", "assert remove_duplicates_and_first([1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert remove_duplicates_and_first([7, 8, 9, 7, 8, 9, 7, 8, 9]) == 7", "assert remove_duplicates_and_first([0, 0, 0, 0, 0]) == 0", "assert remove_duplicates_and_first([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert remove_duplicates_and_first([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == 10", "assert remove_duplicates_and_first([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 1", "assert remove_duplicates_and_first([99, 99, 98, 97, 96, 95, 94, 93, 92, 91]) == 91", "assert remove_duplicates_and_first([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 1", "assert remove_duplicates_and_first([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == 1", "assert remove_duplicates_and_first([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 100"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the last element of the unique elements.", "code": "def remove_duplicates_and_last(lst: list) -> int:\n    return list(set(lst))[-1]", "task_id": "193_522d9cb4-9d1c-45fa-9be0-3676ba72eaef", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_last([1, 2, 3, 2, 1]) == 3", "assert remove_duplicates_and_last([5, 5, 5, 5, 5]) == 5", "assert remove_duplicates_and_last([1, 2, 3, 4, 5]) == 5", "assert remove_duplicates_and_last([10, 20, 30, 20, 10, 40]) == 40", "assert remove_duplicates_and_last([1]) == 1", "assert remove_duplicates_and_last([2, 2, 2, 2, 2, 2]) == 2", "assert remove_duplicates_and_last([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9", "assert remove_duplicates_and_last([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert remove_duplicates_and_last([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5", "assert remove_duplicates_and_last([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == 1000", "assert remove_duplicates_and_last([1, 3, 3, 2, 2, 1, 4, 4, 5, 5, 6, 6]) == 6", "assert remove_duplicates_and_last([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7]) == 7", "assert remove_duplicates_and_last([1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10]) == 10", "assert remove_duplicates_and_last([]) == None", "assert remove_duplicates_and_last([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the product of the unique elements.", "code": "def remove_duplicates_and_multiply(lst: list) -> int:\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, set(lst), 1)", "task_id": "193_f225bae0-012a-42e4-8652-edd23c9283a3", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_multiply([1, 2, 3, 4, 5]) == 120", "assert remove_duplicates_and_multiply([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 120", "assert remove_duplicates_and_multiply([1, 1, 1, 1, 1]) == 1", "assert remove_duplicates_and_multiply([0, 1, 2, 3, 4, 5]) == 0", "assert remove_duplicates_and_multiply([2, 2, 2, 2, 2]) == 2", "assert remove_duplicates_and_multiply([10, 20, 30, 40, 50]) == 12000000", "assert remove_duplicates_and_multiply([-1, -2, -3, -4, -5]) == -120", "assert remove_duplicates_and_multiply([1, -1, 2, -2, 3, -3]) == 6", "assert remove_duplicates_and_multiply([100]) == 100", "assert remove_duplicates_and_multiply([]) == 1", "assert remove_duplicates_and_multiply([1, 2, 3, 0, 4, 5]) == 0", "assert remove_duplicates_and_multiply([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800", "assert remove_duplicates_and_multiply([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 120", "assert remove_duplicates_and_multiply([1, 3, 5, 7, 9]) == 945", "assert remove_duplicates_and_multiply([2, 4, 6, 8, 10]) == 3840"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one letter and one special character.", "code": "def check_special_characters(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.isalpha():\n            flag_l = True\n        if not i.isalnum():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_a152f943-c88a-4be8-bf67-645ef84f947a", "test_setup_code": "", "test_list": ["assert check_special_characters('abc!') == True", "assert check_special_characters('123!') == False", "assert check_special_characters('abc123') == False", "assert check_special_characters('!@#') == False", "assert check_special_characters('a!') == True", "assert check_special_characters('') == False", "assert check_special_characters(' ') == False", "assert check_special_characters('a b!') == True", "assert check_special_characters('a1!') == True", "assert check_special_characters('A!') == True", "assert check_special_characters('abc123!@#') == True", "assert check_special_characters('!abc123') == True", "assert check_special_characters('abc!123') == True", "assert check_special_characters('abc') == False", "assert check_special_characters('!') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one uppercase letter and one lowercase letter.", "code": "def check_upper_lower(s: str) -> bool:\n    flag_u = False\n    flag_l = False\n    for i in s:\n        if i.isupper():\n            flag_u = True\n        if i.islower():\n            flag_l = True\n    return flag_u and flag_l", "task_id": "192_ff21dfe9-7c87-4b36-bb13-94a1d5131e9e", "test_setup_code": "", "test_list": ["assert check_upper_lower('HelloWorld') == True", "assert check_upper_lower('helloworld') == False", "assert check_upper_lower('HELLOWORLD') == False", "assert check_upper_lower('H') == False", "assert check_upper_lower('h') == False", "assert check_upper_lower('Hh') == True", "assert check_upper_lower('') == False", "assert check_upper_lower('12345') == False", "assert check_upper_lower('12345a') == False", "assert check_upper_lower('12345A') == False", "assert check_upper_lower('12345aA') == True", "assert check_upper_lower('aA') == True", "assert check_upper_lower('Aa') == True", "assert check_upper_lower('A1a') == True", "assert check_upper_lower('a1A') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one vowel and one consonant.", "code": "def check_vowel_consonant(s: str) -> bool:\n    vowels = 'aeiouAEIOU'\n    flag_v = False\n    flag_c = False\n    for i in s:\n        if i in vowels:\n            flag_v = True\n        elif i.isalpha():\n            flag_c = True\n    return flag_v and flag_c", "task_id": "192_54faa06d-3968-48ce-9bfd-55ce46c1387a", "test_setup_code": "", "test_list": ["assert check_vowel_consonant('hello') == True", "assert check_vowel_consonant('sky') == False", "assert check_vowel_consonant('AEIOU') == False", "assert check_vowel_consonant('bcdfg') == False", "assert check_vowel_consonant('a') == False", "assert check_vowel_consonant('b') == False", "assert check_vowel_consonant('') == False", "assert check_vowel_consonant('a1b2c3') == True", "assert check_vowel_consonant('12345') == False", "assert check_vowel_consonant('aeioubcdfg') == True", "assert check_vowel_consonant('AEIOUbcdfg') == True", "assert check_vowel_consonant('xyz') == False", "assert check_vowel_consonant('a!b@c#') == True", "assert check_vowel_consonant('A!B@C#') == True", "assert check_vowel_consonant('123abc!') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one even digit and one odd digit.", "code": "def check_even_odd_digits(s: str) -> bool:\n    flag_e = False\n    flag_o = False\n    for i in s:\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                flag_e = True\n            else:\n                flag_o = True\n    return flag_e and flag_o", "task_id": "192_5a74617b-e4e2-41c8-9fa1-56b4360a417e", "test_setup_code": "", "test_list": ["assert check_even_odd_digits('123456') == True", "assert check_even_odd_digits('2468') == False", "assert check_even_odd_digits('13579') == False", "assert check_even_odd_digits('a1b2c3') == True", "assert check_even_odd_digits('abcdef') == False", "assert check_even_odd_digits('') == False", "assert check_even_odd_digits('0') == False", "assert check_even_odd_digits('1') == False", "assert check_even_odd_digits('2') == False", "assert check_even_odd_digits('9') == False", "assert check_even_odd_digits('20') == True", "assert check_even_odd_digits('a2b4c6d8') == False", "assert check_even_odd_digits('a1b3c5d7') == False", "assert check_even_odd_digits('a1b2c3d4e5f6g7h8i9') == True", "assert check_even_odd_digits('1a2b3c4d5e6f7g8h9i0') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one alphanumeric character and one non-alphanumeric character.", "code": "def check_alphanumeric(s: str) -> bool:\n    flag_a = False\n    flag_na = False\n    for i in s:\n        if i.isalnum():\n            flag_a = True\n        else:\n            flag_na = True\n    return flag_a and flag_na", "task_id": "192_31df521b-9b63-409d-bfa5-fb05bbfc51a2", "test_setup_code": "", "test_list": ["assert check_alphanumeric('abc123!') == True", "assert check_alphanumeric('abc123') == False", "assert check_alphanumeric('!@#$%^&*()') == False", "assert check_alphanumeric('a!') == True", "assert check_alphanumeric('1!') == True", "assert check_alphanumeric(' ') == False", "assert check_alphanumeric('a ') == True", "assert check_alphanumeric('1 ') == True", "assert check_alphanumeric('') == False", "assert check_alphanumeric('a'*1000 + '!') == True", "assert check_alphanumeric('!' + 'a'*1000) == True", "assert check_alphanumeric('a' + '!'*1000) == True", "assert check_alphanumeric('!'*1000 + 'a') == True", "assert check_alphanumeric('a'*1000) == False", "assert check_alphanumeric('!'*1000) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one digit and its length is at least 8 characters.", "code": "def check_digit_length(s: str) -> bool:\n    flag_d = False\n    if len(s) >= 8:\n        for i in s:\n            if i.isdigit():\n                flag_d = True\n    return flag_d", "task_id": "192_17bbe983-08db-4d25-8de6-49118c4f03b4", "test_setup_code": "", "test_list": ["assert check_digit_length('password123') == True", "assert check_digit_length('pass123') == False", "assert check_digit_length('12345678') == True", "assert check_digit_length('abcdefgh') == False", "assert check_digit_length('abcd1234') == True", "assert check_digit_length('a1b2c3d4') == True", "assert check_digit_length('1234abcd') == True", "assert check_digit_length('a1b2') == False", "assert check_digit_length('abcdefgh1') == True", "assert check_digit_length('1234567') == False", "assert check_digit_length('a1b2c3d4e5f6g7h8') == True", "assert check_digit_length('') == False", "assert check_digit_length('no_digits_here') == False", "assert check_digit_length('short1') == False", "assert check_digit_length('longenoughbutnodigits') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one letter and one space.", "code": "def check_letter_space(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.isalpha():\n            flag_l = True\n        if i.isspace():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_a5e1c8de-7fff-4d1f-abac-32c46b79293b", "test_setup_code": "", "test_list": ["assert check_letter_space('hello world') == True", "assert check_letter_space('helloworld') == False", "assert check_letter_space(' ') == False", "assert check_letter_space('h e l l o') == True", "assert check_letter_space('123 456') == False", "assert check_letter_space('a b') == True", "assert check_letter_space('a') == False", "assert check_letter_space(' ') == False", "assert check_letter_space('a ') == True", "assert check_letter_space(' a') == True", "assert check_letter_space('') == False", "assert check_letter_space('!@# $%^') == False", "assert check_letter_space('abc def ghi') == True", "assert check_letter_space('abc123 def456') == True", "assert check_letter_space('   ') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one uppercase letter and one digit.", "code": "def check_upper_digit(s: str) -> bool:\n    flag_u = False\n    flag_d = False\n    for i in s:\n        if i.isupper():\n            flag_u = True\n        if i.isdigit():\n            flag_d = True\n    return flag_u and flag_d", "task_id": "192_fee00dbf-492e-4b3e-ac1b-9f2f673028c0", "test_setup_code": "", "test_list": ["assert check_upper_digit('Hello123') == True", "assert check_upper_digit('hello123') == False", "assert check_upper_digit('HELLO') == False", "assert check_upper_digit('12345') == False", "assert check_upper_digit('H1') == True", "assert check_upper_digit('h1') == False", "assert check_upper_digit('H') == False", "assert check_upper_digit('1') == False", "assert check_upper_digit('') == False", "assert check_upper_digit('H3llo') == True", "assert check_upper_digit('h3LLo') == True", "assert check_upper_digit('HELLOworld') == False", "assert check_upper_digit('123world') == False", "assert check_upper_digit('H3') == True", "assert check_upper_digit('h3') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one lowercase letter and one special character.", "code": "def check_lower_special(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.islower():\n            flag_l = True\n        if not i.isalnum():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_052fd52c-53ea-411a-8e4f-2c107ae1d2d9", "test_setup_code": "", "test_list": ["assert check_lower_special('a!') == True", "assert check_lower_special('A!') == False", "assert check_lower_special('abc') == False", "assert check_lower_special('!@#') == False", "assert check_lower_special('a1!') == True", "assert check_lower_special('A1!') == False", "assert check_lower_special('') == False", "assert check_lower_special('a') == False", "assert check_lower_special('!') == False", "assert check_lower_special('a!@#') == True", "assert check_lower_special('A!@#') == False", "assert check_lower_special('a1b2c3!') == True", "assert check_lower_special('ABC123!') == False", "assert check_lower_special('aBcDeFgHiJkLmNoPqRsTuVwXyZ!') == True", "assert check_lower_special('1234567890!') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one digit and one vowel.", "code": "def check_digit_vowel(s: str) -> bool:\n    vowels = 'aeiouAEIOU'\n    flag_d = False\n    flag_v = False\n    for i in s:\n        if i.isdigit():\n            flag_d = True\n        if i in vowels:\n            flag_v = True\n    return flag_d and flag_v", "task_id": "192_dcf8e637-2138-4975-88cb-33aa82c4a171", "test_setup_code": "", "test_list": ["assert check_digit_vowel('a1') == True", "assert check_digit_vowel('1a') == True", "assert check_digit_vowel('abc') == False", "assert check_digit_vowel('123') == False", "assert check_digit_vowel('') == False", "assert check_digit_vowel('aeiou') == False", "assert check_digit_vowel('AEIOU') == False", "assert check_digit_vowel('12345') == False", "assert check_digit_vowel('a12345') == True", "assert check_digit_vowel('A12345') == True", "assert check_digit_vowel('bcdfg1') == False", "assert check_digit_vowel('bcdfgA') == False", "assert check_digit_vowel('bcdfg1A') == True", "assert check_digit_vowel('!@#1a') == True", "assert check_digit_vowel('!@#') == False"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to a decimal number.", "code": "def binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value", "task_id": "194_c327e76b-60ac-490f-9b19-f1fd954bcd83", "test_setup_code": "", "test_list": ["assert binary_to_decimal(0) == 0", "assert binary_to_decimal(1) == 1", "assert binary_to_decimal(10) == 2", "assert binary_to_decimal(11) == 3", "assert binary_to_decimal(101) == 5", "assert binary_to_decimal(110) == 6", "assert binary_to_decimal(111) == 7", "assert binary_to_decimal(1001) == 9", "assert binary_to_decimal(1010) == 10", "assert binary_to_decimal(1111) == 15", "assert binary_to_decimal(10000) == 16", "assert binary_to_decimal(100000) == 32", "assert binary_to_decimal(111111) == 63", "assert binary_to_decimal(1000000) == 64", "assert binary_to_decimal(11011011) == 219"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a decimal number.", "code": "def hexadecimal_to_decimal(s):\n    return int(s, 16)", "task_id": "194_4702d95e-7817-4c96-b36d-5be89123c668", "test_setup_code": "", "test_list": ["assert hexadecimal_to_decimal('0') == 0", "assert hexadecimal_to_decimal('1') == 1", "assert hexadecimal_to_decimal('A') == 10", "assert hexadecimal_to_decimal('F') == 15", "assert hexadecimal_to_decimal('10') == 16", "assert hexadecimal_to_decimal('1A') == 26", "assert hexadecimal_to_decimal('100') == 256", "assert hexadecimal_to_decimal('ABC') == 2748", "assert hexadecimal_to_decimal('FFF') == 4095", "assert hexadecimal_to_decimal('1234') == 4660", "assert hexadecimal_to_decimal('DEAD') == 57005", "assert hexadecimal_to_decimal('BEEF') == 48879", "assert hexadecimal_to_decimal('0F0F') == 3855", "assert hexadecimal_to_decimal('7FFFFFFF') == 2147483647", "assert hexadecimal_to_decimal('FFFFFFFF') == 4294967295"], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to an octal number.", "code": "def decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_71c3608b-2538-4c3f-8e51-72a2f7f96d03", "test_setup_code": "", "test_list": ["assert decimal_to_octal(0) == '0'", "assert decimal_to_octal(1) == '1'", "assert decimal_to_octal(7) == '7'", "assert decimal_to_octal(8) == '10'", "assert decimal_to_octal(10) == '12'", "assert decimal_to_octal(15) == '17'", "assert decimal_to_octal(16) == '20'", "assert decimal_to_octal(64) == '100'", "assert decimal_to_octal(128) == '200'", "assert decimal_to_octal(255) == '377'", "assert decimal_to_octal(256) == '400'", "assert decimal_to_octal(512) == '1000'", "assert decimal_to_octal(1024) == '2000'", "assert decimal_to_octal(2048) == '4000'", "assert decimal_to_octal(4096) == '10000'"], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to a binary number.", "code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_0fa96c71-0f21-421d-9334-fdcc1537ee52", "test_setup_code": "", "test_list": ["assert decimal_to_binary(0) == '0'", "assert decimal_to_binary(1) == '1'", "assert decimal_to_binary(2) == '10'", "assert decimal_to_binary(3) == '11'", "assert decimal_to_binary(4) == '100'", "assert decimal_to_binary(5) == '101'", "assert decimal_to_binary(10) == '1010'", "assert decimal_to_binary(15) == '1111'", "assert decimal_to_binary(16) == '10000'", "assert decimal_to_binary(31) == '11111'", "assert decimal_to_binary(32) == '100000'", "assert decimal_to_binary(63) == '111111'", "assert decimal_to_binary(64) == '1000000'", "assert decimal_to_binary(255) == '11111111'", "assert decimal_to_binary(256) == '100000000'"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to an octal number.", "code": "def binary_to_octal(n):\n    decimal = binary_to_decimal(n)\n    return decimal_to_octal(decimal)\n\ndef binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\ndef decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_7df295d3-20b2-4298-8b3b-64c5bcc4bea6", "test_setup_code": "", "test_list": ["assert binary_to_octal(0) == '0'", "assert binary_to_octal(1) == '1'", "assert binary_to_octal(10) == '2'", "assert binary_to_octal(11) == '3'", "assert binary_to_octal(100) == '4'", "assert binary_to_octal(101) == '5'", "assert binary_to_octal(110) == '6'", "assert binary_to_octal(111) == '7'", "assert binary_to_octal(1000) == '10'", "assert binary_to_octal(1001) == '11'", "assert binary_to_octal(1010) == '12'", "assert binary_to_octal(1100) == '14'", "assert binary_to_octal(1111) == '17'", "assert binary_to_octal(10000) == '20'", "assert binary_to_octal(11111111) == '377'"], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number to a binary number.", "code": "def octal_to_binary(n):\n    decimal = octal_to_decimal(n)\n    return decimal_to_binary(decimal)\n\ndef octal_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_fb50298a-d3c9-4619-b644-5d9eaf2d92d3", "test_setup_code": "", "test_list": ["assert octal_to_binary(0) == '0'", "assert octal_to_binary(1) == '1'", "assert octal_to_binary(7) == '111'", "assert octal_to_binary(10) == '1000'", "assert octal_to_binary(17) == '1111'", "assert octal_to_binary(20) == '10000'", "assert octal_to_binary(77) == '111111'", "assert octal_to_binary(100) == '1000000'", "assert octal_to_binary(123) == '1010011'", "assert octal_to_binary(377) == '11111111'", "assert octal_to_binary(400) == '100000000'", "assert octal_to_binary(777) == '111111111'", "assert octal_to_binary(1000) == '1000000000'", "assert octal_to_binary(1777) == '1111111111'", "assert octal_to_binary(2000) == '10000000000'"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a binary number.", "code": "def hexadecimal_to_binary(s):\n    decimal = int(s, 16)\n    return decimal_to_binary(decimal)\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_97833224-de0d-402f-9b71-5442cfba0b35", "test_setup_code": "", "test_list": ["assert hexadecimal_to_binary('0') == '0'", "assert hexadecimal_to_binary('1') == '1'", "assert hexadecimal_to_binary('A') == '1010'", "assert hexadecimal_to_binary('F') == '1111'", "assert hexadecimal_to_binary('10') == '10000'", "assert hexadecimal_to_binary('1A') == '11010'", "assert hexadecimal_to_binary('FF') == '11111111'", "assert hexadecimal_to_binary('100') == '100000000'", "assert hexadecimal_to_binary('ABC') == '101010111100'", "assert hexadecimal_to_binary('1234') == '1001000110100'", "assert hexadecimal_to_binary('FFFF') == '1111111111111111'", "assert hexadecimal_to_binary('8000') == '1000000000000000'", "assert hexadecimal_to_binary('7FFF') == '111111111111111'", "assert hexadecimal_to_binary('1F4') == '111110100'", "assert hexadecimal_to_binary('DEADBEEF') == '11011110101011011011111011101111'"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to a hexadecimal number.", "code": "def binary_to_hexadecimal(n):\n    decimal = binary_to_decimal(n)\n    return decimal_to_hexadecimal(decimal)\n\ndef binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\ndef decimal_to_hexadecimal(n):\n    return hex(n)[2:]", "task_id": "194_5611dbbc-06b4-43ce-aaba-43b9e2cc14ac", "test_setup_code": "", "test_list": ["assert binary_to_hexadecimal(0) == '0'", "assert binary_to_hexadecimal(1) == '1'", "assert binary_to_hexadecimal(10) == '2'", "assert binary_to_hexadecimal(11) == '3'", "assert binary_to_hexadecimal(1010) == 'a'", "assert binary_to_hexadecimal(1111) == 'f'", "assert binary_to_hexadecimal(10000) == '10'", "assert binary_to_hexadecimal(10101010) == 'aa'", "assert binary_to_hexadecimal(11111111) == 'ff'", "assert binary_to_hexadecimal(1010101010101010) == 'aaaa'", "assert binary_to_hexadecimal(1111111111111111) == 'ffff'", "assert binary_to_hexadecimal(100000000) == '100'", "assert binary_to_hexadecimal(101010101010101010101010) == 'aaaaaa'", "assert binary_to_hexadecimal(1100110011001100) == 'cccc'", "assert binary_to_hexadecimal(1010) == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number to a hexadecimal number.", "code": "def octal_to_hexadecimal(n):\n    decimal = octal_to_decimal(n)\n    return decimal_to_hexadecimal(decimal)\n\ndef octal_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\ndef decimal_to_hexadecimal(n):\n    return hex(n)[2:]", "task_id": "194_6d06bd20-9394-43db-86f1-a1d4abab4882", "test_setup_code": "", "test_list": ["assert octal_to_hexadecimal(10) == '8'", "assert octal_to_hexadecimal(7) == '7'", "assert octal_to_hexadecimal(17) == 'f'", "assert octal_to_hexadecimal(20) == '10'", "assert octal_to_hexadecimal(377) == 'ff'", "assert octal_to_hexadecimal(400) == '100'", "assert octal_to_hexadecimal(1234567) == '29e7'", "assert octal_to_hexadecimal(0) == '0'", "assert octal_to_hexadecimal(1) == '1'", "assert octal_to_hexadecimal(7777777) == '1fffff'", "assert octal_to_hexadecimal(12345670) == '2a3b38'", "assert octal_to_hexadecimal(7654321) == '1f7d71'", "assert octal_to_hexadecimal(10000000) == '200000'", "assert octal_to_hexadecimal(37777777777) == 'ffffffff'", "assert octal_to_hexadecimal(17777777777) == '7fffffff'"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to an octal number.", "code": "def hexadecimal_to_octal(s):\n    decimal = int(s, 16)\n    return decimal_to_octal(decimal)\n\ndef decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_4e97ce8e-9806-410d-8a9d-60715b9be694", "test_setup_code": "", "test_list": ["assert hexadecimal_to_octal('0') == '0'", "assert hexadecimal_to_octal('1') == '1'", "assert hexadecimal_to_octal('7') == '7'", "assert hexadecimal_to_octal('8') == '10'", "assert hexadecimal_to_octal('9') == '11'", "assert hexadecimal_to_octal('A') == '12'", "assert hexadecimal_to_octal('F') == '17'", "assert hexadecimal_to_octal('10') == '20'", "assert hexadecimal_to_octal('1F') == '37'", "assert hexadecimal_to_octal('100') == '400'", "assert hexadecimal_to_octal('ABC') == '5274'", "assert hexadecimal_to_octal('DEF') == '1567'", "assert hexadecimal_to_octal('123456') == '1106426'", "assert hexadecimal_to_octal('FFFFFF') == '77777777'", "assert hexadecimal_to_octal('ABCDEF') == '52746757'"], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an element in a sorted array.", "code": "def find_last(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "task_id": "195_ebcec68f-1222-4e4b-9305-58e4bf2678f6", "test_setup_code": "", "test_list": ["assert find_last([1, 2, 2, 2, 3, 4], 2, 6) == 3", "assert find_last([1, 2, 2, 2, 3, 4], 3, 6) == 4", "assert find_last([1, 2, 2, 2, 3, 4], 4, 6) == 5", "assert find_last([1, 2, 2, 2, 3, 4], 1, 6) == 0", "assert find_last([1, 2, 2, 2, 3, 4], 5, 6) == -1", "assert find_last([1, 1, 1, 1, 1, 1], 1, 6) == 5", "assert find_last([1, 1, 1, 1, 1, 1], 2, 6) == -1", "assert find_last([], 1, 0) == -1", "assert find_last([1], 1, 1) == 0", "assert find_last([1, 2, 3, 4, 5], 3, 5) == 2", "assert find_last([1, 2, 3, 4, 5], 6, 5) == -1", "assert find_last([1, 2, 3, 3, 3, 4, 5], 3, 7) == 4", "assert find_last([1, 2, 3, 3, 3, 4, 5], 2, 7) == 1", "assert find_last([1, 2, 3, 3, 3, 4, 5], 4, 7) == 5", "assert find_last([1, 2, 3, 3, 3, 4, 5], 1, 7) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element greater than a given value in a sorted array.", "code": "def find_first_greater(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_4a1b8509-fc36-4e97-829a-9a87b4264b51", "test_setup_code": "", "test_list": ["assert find_first_greater([1, 2, 3, 4, 5], 3, 5) == 3", "assert find_first_greater([1, 2, 3, 4, 5], 5, 5) == -1", "assert find_first_greater([1, 2, 3, 4, 5], 0, 5) == 0", "assert find_first_greater([1, 2, 3, 4, 5], 4, 5) == 4", "assert find_first_greater([1, 2, 3, 4, 5], 1, 5) == 1", "assert find_first_greater([1, 2, 3, 4, 5], 2, 5) == 2", "assert find_first_greater([1, 3, 5, 7, 9], 4, 5) == 2", "assert find_first_greater([1, 3, 5, 7, 9], 6, 5) == 3", "assert find_first_greater([1, 3, 5, 7, 9], 8, 5) == 4", "assert find_first_greater([1, 3, 5, 7, 9], 10, 5) == -1", "assert find_first_greater([1, 1, 1, 1, 1], 1, 5) == -1", "assert find_first_greater([1, 1, 1, 1, 2], 1, 5) == 4", "assert find_first_greater([1, 2, 2, 2, 2], 1, 5) == 1", "assert find_first_greater([1, 2, 3, 4, 5], 2, 5) == 2", "assert find_first_greater([1, 2, 3, 4, 5], 6, 5) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element not less than a given value in a sorted array.", "code": "def find_first_not_less(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] >= x:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_81eb00fa-9426-4685-90d9-0e303e55cbf3", "test_setup_code": "", "test_list": ["assert find_first_not_less([1, 2, 3, 4, 5], 3, 5) == 2", "assert find_first_not_less([1, 2, 3, 4, 5], 6, 5) == -1", "assert find_first_not_less([1, 2, 3, 4, 5], 0, 5) == 0", "assert find_first_not_less([1, 1, 1, 1, 1], 1, 5) == 0", "assert find_first_not_less([1, 2, 2, 2, 3], 2, 5) == 1", "assert find_first_not_less([1, 2, 3, 4, 5], 5, 5) == 4", "assert find_first_not_less([1, 2, 3, 4, 5], 1, 5) == 0", "assert find_first_not_less([2, 3, 5, 7, 11, 13], 4, 6) == 2", "assert find_first_not_less([2, 3, 5, 7, 11, 13], 7, 6) == 3", "assert find_first_not_less([2, 3, 5, 7, 11, 13], 8, 6) == 4", "assert find_first_not_less([], 1, 0) == -1", "assert find_first_not_less([1], 1, 1) == 0", "assert find_first_not_less([1], 2, 1) == -1", "assert find_first_not_less([1, 3, 5, 7, 9], 4, 5) == 2", "assert find_first_not_less([1, 3, 5, 7, 9], 10, 5) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the element closest to a given value in a sorted array.", "code": "def find_closest(arr, x, n):\n    low = 0\n    high = n - 1\n    closest = -1\n    min_diff = float('inf')\n    while (low <= high):\n        mid = (low + high) // 2\n        diff = abs(arr[mid] - x)\n        if diff < min_diff:\n            min_diff = diff\n            closest = mid\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return closest", "task_id": "195_a2ac5f8f-ef85-4d00-a922-1f1fa8fde25c", "test_setup_code": "", "test_list": ["assert find_closest([1, 2, 3, 4, 5], 3, 5) == 2", "assert find_closest([1, 2, 3, 4, 5], 6, 5) == 4", "assert find_closest([1, 2, 3, 4, 5], 0, 5) == 0", "assert find_closest([1, 3, 5, 7, 9], 4, 5) == 1", "assert find_closest([1, 3, 5, 7, 9], 8, 5) == 3", "assert find_closest([1, 3, 5, 7, 9], 10, 5) == 4", "assert find_closest([1, 3, 5, 7, 9], 2, 5) == 0", "assert find_closest([1, 3, 5, 7, 9], 6, 5) == 2", "assert find_closest([1, 3, 5, 7, 9], 1, 5) == 0", "assert find_closest([1, 3, 5, 7, 9], 9, 5) == 4", "assert find_closest([1, 2, 3, 4, 5], 2.5, 5) == 1", "assert find_closest([1, 2, 3, 4, 5], 3.5, 5) == 2", "assert find_closest([1, 2, 3, 4, 5], 4.5, 5) == 3", "assert find_closest([1, 2, 3, 4, 5], 5.5, 5) == 4", "assert find_closest([1, 2, 3, 4, 5], -1, 5) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an even number in a sorted array.", "code": "def find_first_even(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 == 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_452d052b-ed6b-47e9-9377-016cd3ccea3f", "test_setup_code": "", "test_list": ["assert find_first_even([1, 3, 5, 7, 8, 10], 6) == 4", "assert find_first_even([2, 4, 6, 8, 10], 5) == 0", "assert find_first_even([1, 3, 5, 7, 9], 5) == -1", "assert find_first_even([10, 20, 30, 40, 50], 5) == 0", "assert find_first_even([1, 2, 3, 4, 5], 5) == 1", "assert find_first_even([1, 1, 1, 1, 2], 5) == 4", "assert find_first_even([1, 3, 5, 7, 9, 11, 13, 14], 8) == 7", "assert find_first_even([], 0) == -1", "assert find_first_even([2], 1) == 0", "assert find_first_even([1], 1) == -1", "assert find_first_even([1, 2, 4, 6, 8], 5) == 1", "assert find_first_even([1, 3, 3, 3, 4], 5) == 4", "assert find_first_even([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 20], 11) == 10", "assert find_first_even([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], 11) == -1", "assert find_first_even([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 22], 11) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an odd number in a sorted array.", "code": "def find_first_odd(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 != 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_8fbb9edb-0610-40c5-ad2f-09239df10515", "test_setup_code": "", "test_list": ["assert find_first_odd([2, 4, 6, 8, 10, 11, 12], 7) == 5", "assert find_first_odd([1, 2, 3, 4, 5], 5) == 0", "assert find_first_odd([2, 4, 6, 8, 10], 5) == -1", "assert find_first_odd([2, 4, 6, 7, 8, 10], 6) == 3", "assert find_first_odd([2, 4, 6, 8, 9], 5) == 4", "assert find_first_odd([1], 1) == 0", "assert find_first_odd([2], 1) == -1", "assert find_first_odd([2, 4, 6, 8, 10, 12, 13], 7) == 6", "assert find_first_odd([], 0) == -1", "assert find_first_odd([2, 2, 2, 2, 2, 3], 6) == 5", "assert find_first_odd([2, 2, 2, 2, 2, 2], 6) == -1", "assert find_first_odd([3, 5, 7, 9, 11], 5) == 0", "assert find_first_odd([2, 4, 6, 8, 10, 15, 17], 7) == 5", "assert find_first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 19], 10) == 9", "assert find_first_odd([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a negative number in a sorted array.", "code": "def find_first_negative(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] < 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_5fc27dd0-cf12-43c4-aec6-f9f949a94ab0", "test_setup_code": "", "test_list": ["assert find_first_negative([-10, -5, -1, 0, 1, 2, 3], 7) == 0", "assert find_first_negative([1, 2, 3, 4, 5], 5) == -1", "assert find_first_negative([-3, -2, -1, 0, 1, 2, 3], 7) == 0", "assert find_first_negative([0, 1, 2, 3, 4, 5], 6) == -1", "assert find_first_negative([-5, -4, -3, -2, -1], 5) == 0", "assert find_first_negative([1, 2, 3, -1, -2, -3], 6) == 3", "assert find_first_negative([-1], 1) == 0", "assert find_first_negative([1], 1) == -1", "assert find_first_negative([], 0) == -1", "assert find_first_negative([0, 0, 0, 0, 0], 5) == -1", "assert find_first_negative([-1, -1, -1, -1, -1], 5) == 0", "assert find_first_negative([0, -1, -1, -1, -1], 5) == 1", "assert find_first_negative([1, 2, 3, 4, -5], 5) == 4", "assert find_first_negative([-5, -4, -3, -2, -1, 0], 6) == 0", "assert find_first_negative([1, 2, 3, 4, 5, -1], 6) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a positive number in a sorted array.", "code": "def find_first_positive(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_3bbd19b6-8326-4dc5-af73-4079dd26366e", "test_setup_code": "", "test_list": ["assert find_first_positive([-10, -5, -2, 0, 1, 2, 3], 7) == 4", "assert find_first_positive([-5, -3, -1, 0, 0, 0, 1], 7) == 6", "assert find_first_positive([1, 2, 3, 4, 5], 5) == 0", "assert find_first_positive([-5, -4, -3, -2, -1], 5) == -1", "assert find_first_positive([0, 0, 0, 0, 0, 0, 0], 7) == -1", "assert find_first_positive([0, 0, 0, 0, 1], 5) == 4", "assert find_first_positive([1], 1) == 0", "assert find_first_positive([-1], 1) == -1", "assert find_first_positive([], 0) == -1", "assert find_first_positive([0, 0, 0, 0, 0, 0, 2], 7) == 6", "assert find_first_positive([-10, -5, 0, 0, 1, 1, 1], 7) == 4", "assert find_first_positive([-10, -5, -2, 0, 0, 0, 0], 7) == -1", "assert find_first_positive([0, 1, 1, 1, 1, 1, 1], 7) == 1", "assert find_first_positive([-1, 0, 0, 0, 0, 0, 0], 7) == -1", "assert find_first_positive([0, 0, 0, 0, 0, 0, 0, 1], 8) == 7"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of zero in a sorted array.", "code": "def find_first_zero(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == 0:\n            res = mid\n            high = mid - 1\n        elif arr[mid] < 0:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "195_eb7120c7-7bb5-4b67-9a94-b1289c43af87", "test_setup_code": "", "test_list": ["assert find_first_zero([1, 2, 3, 4, 5], 5) == -1", "assert find_first_zero([0, 1, 2, 3, 4], 5) == 0", "assert find_first_zero([-3, -2, -1, 0, 1, 2, 3], 7) == 3", "assert find_first_zero([-5, -4, -3, -2, -1, 0, 0, 1, 2], 9) == 5", "assert find_first_zero([0, 0, 0, 0, 0], 5) == 0", "assert find_first_zero([-10, -5, -2, 0, 0, 0, 1, 2, 3], 9) == 3", "assert find_first_zero([1, 2, 3, 4, 0], 5) == 4", "assert find_first_zero([0], 1) == 0", "assert find_first_zero([-1, 0], 2) == 1", "assert find_first_zero([0, 0, 0, 1, 2, 3], 6) == 0", "assert find_first_zero([-3, -2, -1, 1, 2, 3], 6) == -1", "assert find_first_zero([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 0", "assert find_first_zero([-5, -4, -3, -2, -1, 0], 6) == 5", "assert find_first_zero([1, 2, 3, 0, 0, 0], 6) == 3", "assert find_first_zero([0, 0, 0, 0, 0, 0, 0, 0, 0, 0], 10) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element that is a multiple of a given number in a sorted array.", "code": "def find_first_multiple_of_k(arr, k, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % k == 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_7bbcb726-0de4-41d1-bfd7-6bcc826823d7", "test_setup_code": "", "test_list": ["assert find_first_multiple_of_k([1, 2, 3, 4, 5, 6], 2, 6) == 1", "assert find_first_multiple_of_k([1, 2, 3, 4, 5, 6], 3, 6) == 2", "assert find_first_multiple_of_k([1, 2, 3, 4, 5, 6], 5, 6) == 4", "assert find_first_multiple_of_k([1, 2, 3, 4, 5, 6], 7, 6) == -1", "assert find_first_multiple_of_k([2, 4, 6, 8, 10], 2, 5) == 0", "assert find_first_multiple_of_k([2, 4, 6, 8, 10], 4, 5) == 1", "assert find_first_multiple_of_k([2, 4, 6, 8, 10], 10, 5) == 4", "assert find_first_multiple_of_k([2, 4, 6, 8, 10], 3, 5) == -1", "assert find_first_multiple_of_k([1], 1, 1) == 0", "assert find_first_multiple_of_k([1], 2, 1) == -1", "assert find_first_multiple_of_k([], 1, 0) == -1", "assert find_first_multiple_of_k([3, 6, 9, 12, 15], 3, 5) == 0", "assert find_first_multiple_of_k([3, 6, 9, 12, 15], 6, 5) == 1", "assert find_first_multiple_of_k([3, 6, 9, 12, 15], 9, 5) == 2", "assert find_first_multiple_of_k([3, 6, 9, 12, 15], 5, 5) == -1"], "challenge_test_list": []}
{"text": "Write a function to add corresponding elements of two tuples.", "code": "def add_tuples(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))", "task_id": "197_56fb3c19-e3f4-4971-8954-bcfd0b0b968d", "test_setup_code": "", "test_list": ["assert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert add_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert add_tuples((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert add_tuples((1,), (2,)) == (3,)", "assert add_tuples((1, 2), (3, 4)) == (4, 6)", "assert add_tuples((100, 200, 300), (400, 500, 600)) == (500, 700, 900)", "assert add_tuples((1, 2, 3, 4), (4, 5, 6, 7)) == (5, 7, 9, 11)", "assert add_tuples((0, 0, 0, 0), (1, 1, 1, 1)) == (1, 1, 1, 1)", "assert add_tuples((1, 2, 3), (1, 2)) == (2, 4)", "assert add_tuples((1, 2), (1, 2, 3)) == (2, 4)", "assert add_tuples((1, 2, 3), (4, 5, 6, 7)) == (5, 7, 9)", "assert add_tuples((1, 2, 3, 4), (4, 5, 6)) == (5, 7, 9)", "assert add_tuples((1, 2, 3), (4, -5, 6)) == (5, -3, 9)", "assert add_tuples((1, -2, 3), (-4, 5, -6)) == (-3, 3, -3)", "assert add_tuples((1.5, 2.5, 3.5), (4.5, 5.5, 6.5)) == (6.0, 8.0, 10.0)"], "challenge_test_list": []}
{"text": "Write a function to multiply corresponding elements of two tuples.", "code": "def multiply_tuples(tuple1, tuple2):\n    return tuple(a * b for a, b in zip(tuple1, tuple2))", "task_id": "197_6c4de4eb-a030-410e-924b-f22df0b90b7d", "test_setup_code": "", "test_list": ["assert multiply_tuples((1, 2, 3), (4, 5, 6)) == (4, 10, 18)", "assert multiply_tuples((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert multiply_tuples((1, 2, 3), (0, 0, 0)) == (0, 0, 0)", "assert multiply_tuples((1, -2, 3), (4, 5, -6)) == (4, -10, -18)", "assert multiply_tuples((1, 2), (3, 4)) == (3, 8)", "assert multiply_tuples((1,), (2,)) == (2,)", "assert multiply_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)", "assert multiply_tuples((1, 2, 3), (1, 2, 3)) == (1, 4, 9)", "assert multiply_tuples((0.5, 1.5, 2.5), (2, 2, 2)) == (1.0, 3.0, 5.0)", "assert multiply_tuples((1, 2, 3), (1.5, 2.5, 3.5)) == (1.5, 5.0, 10.5)", "assert multiply_tuples((), ()) == ()", "assert multiply_tuples((1, 2, 3), (4, 5)) == (4, 10)", "assert multiply_tuples((1, 2), (3, 4, 5)) == (3, 8)", "assert multiply_tuples((1, 2, 3), (1, 0, -1)) == (1, 0, -3)", "assert multiply_tuples((-1, -2, -3), (-4, -5, -6)) == (4, 10, 18)"], "challenge_test_list": []}
{"text": "Write a function to subtract corresponding elements of the second tuple from the first tuple.", "code": "def subtract_tuples(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "task_id": "197_524a76c8-ba43-496c-b2d6-69b0d2f4d561", "test_setup_code": "", "test_list": ["assert subtract_tuples((5, 10, 15), (3, 5, 7)) == (2, 5, 8)", "assert subtract_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert subtract_tuples((1, 2, 3), (1, 2, 3)) == (0, 0, 0)", "assert subtract_tuples((100, 200, 300), (50, 100, 150)) == (50, 100, 150)", "assert subtract_tuples((1, 1, 1), (2, 2, 2)) == (-1, -1, -1)", "assert subtract_tuples((10, 20, 30), (5, 10, 15)) == (5, 10, 15)", "assert subtract_tuples((0, -1, -2), (0, -1, -2)) == (0, 0, 0)", "assert subtract_tuples((-5, -10, -15), (-3, -5, -7)) == (-2, -5, -8)", "assert subtract_tuples((1, 2), (1, 2)) == (0, 0)", "assert subtract_tuples((1000, 2000, 3000), (500, 1000, 1500)) == (500, 1000, 1500)", "assert subtract_tuples((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)", "assert subtract_tuples((10, 20, 30, 40), (5, 10, 15, 20)) == (5, 10, 15, 20)", "assert subtract_tuples((0, 0, 0, 0), (0, 0, 0, 0)) == (0, 0, 0, 0)", "assert subtract_tuples((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (0, 0, 0, 0, 0)", "assert subtract_tuples((100, 200, 300, 400), (50, 100, 150, 200)) == (50, 100, 150, 200)"], "challenge_test_list": []}
{"text": "Write a function to divide corresponding elements of the first tuple by the second tuple.", "code": "def divide_tuples(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))", "task_id": "197_37d0d279-5581-4b0b-af27-2859bf146233", "test_setup_code": "", "test_list": ["assert divide_tuples((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)", "assert divide_tuples((9, 16, 25), (3, 4, 5)) == (3.0, 4.0, 5.0)", "assert divide_tuples((0, 1, 2), (1, 1, 1)) == (0.0, 1.0, 2.0)", "assert divide_tuples((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)", "assert divide_tuples((5, 10, 15), (1, 2, 3)) == (5.0, 5.0, 5.0)", "assert divide_tuples((1, 2, 3), (1, 2, 3)) == (1.0, 1.0, 1.0)", "assert divide_tuples((10, 20, 30), (5, 10, 15)) == (2.0, 2.0, 2.0)", "assert divide_tuples((0, 0, 0), (1, 2, 3)) == (0.0, 0.0, 0.0)", "assert divide_tuples((1, 2, 3), (2, 4, 6)) == (0.5, 0.5, 0.5)", "assert divide_tuples((10, 20, 30), (1, 1, 1)) == (10.0, 20.0, 30.0)", "assert divide_tuples((8, 27, 64), (2, 3, 4)) == (4.0, 9.0, 16.0)", "assert divide_tuples((1000, 2000, 3000), (10, 20, 30)) == (100.0, 100.0, 100.0)", "assert divide_tuples((7, 14, 21), (1, 2, 3)) == (7.0, 7.0, 7.0)", "assert divide_tuples((50, 100, 150), (5, 10, 15)) == (10.0, 10.0, 10.0)", "assert divide_tuples((9, 18, 27), (3, 6, 9)) == (3.0, 3.0, 3.0)"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of corresponding elements of the first tuple by the second tuple.", "code": "def modulus_tuples(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))", "task_id": "197_daa81cd2-53d3-4623-b8dc-b0f53424b919", "test_setup_code": "", "test_list": ["assert modulus_tuples((10, 20, 30), (3, 4, 5)) == (1, 0, 0)", "assert modulus_tuples((5, 7, 9), (2, 3, 4)) == (1, 1, 1)", "assert modulus_tuples((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert modulus_tuples((10, 20, 30), (1, 1, 1)) == (0, 0, 0)", "assert modulus_tuples((10, 20, 30), (10, 20, 30)) == (0, 0, 0)", "assert modulus_tuples((100, 200, 300), (10, 20, 30)) == (0, 0, 0)", "assert modulus_tuples((10, 20, 30), (2, 3, 4)) == (0, 2, 2)", "assert modulus_tuples((1, 1, 1), (2, 2, 2)) == (1, 1, 1)", "assert modulus_tuples((5, 10, 15), (3, 6, 9)) == (2, 4, 6)", "assert modulus_tuples((100, 50, 25), (7, 3, 2)) == (2, 2, 1)", "assert modulus_tuples((123, 456, 789), (10, 20, 30)) == (3, 16, 9)", "assert modulus_tuples((0, 1, 2), (1, 2, 3)) == (0, 1, 2)", "assert modulus_tuples((9, 8, 7), (3, 2, 1)) == (0, 0, 0)", "assert modulus_tuples((1000, 2000, 3000), (100, 200, 300)) == (0, 0, 0)", "assert modulus_tuples((10, 20, 30), (5, 10, 15)) == (0, 0, 0)"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of corresponding elements of two tuples.", "code": "def max_tuples(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))", "task_id": "197_2b7c7271-e918-48b9-9e31-f0b43a1e3347", "test_setup_code": "", "test_list": ["assert max_tuples((1, 2, 3), (4, 1, 2)) == (4, 2, 3)", "assert max_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert max_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (4, 3, 3, 4)", "assert max_tuples((-1, -2, -3), (-4, -1, -2)) == (-1, -1, -2)", "assert max_tuples((100, 200, 300), (50, 250, 150)) == (100, 250, 300)", "assert max_tuples((5,), (10,)) == (10,)", "assert max_tuples((123456789, 987654321), (987654321, 123456789)) == (987654321, 987654321)", "assert max_tuples((1.1, 2.2, 3.3), (3.3, 2.2, 1.1)) == (3.3, 2.2, 3.3)", "assert max_tuples((0.1, 0.2, 0.3), (0.3, 0.2, 0.1)) == (0.3, 0.2, 0.3)", "assert max_tuples((1, 2), (2, 1)) == (2, 2)", "assert max_tuples((1,), (1,)) == (1,)", "assert max_tuples((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (5, 4, 3, 4, 5)", "assert max_tuples((10, 20, 30), (30, 20, 10)) == (30, 20, 30)", "assert max_tuples((0, 1, 2), (2, 1, 0)) == (2, 1, 2)", "assert max_tuples((999, 888, 777), (777, 888, 999)) == (999, 888, 999)"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of corresponding elements of two tuples.", "code": "def min_tuples(tuple1, tuple2):\n    return tuple(min(a, b) for a, b in zip(tuple1, tuple2))", "task_id": "197_3110a8a9-06be-4a2e-bc41-4d5397835c08", "test_setup_code": "", "test_list": ["assert min_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3)", "assert min_tuples((7, 8, 9), (3, 2, 1)) == (3, 2, 1)", "assert min_tuples((0, -1, -2), (-3, -4, -5)) == (-3, -4, -5)", "assert min_tuples((10, 20, 30), (10, 20, 30)) == (10, 20, 30)", "assert min_tuples((1, 2), (1, 2, 3)) == (1, 2)", "assert min_tuples((1, 2, 3), (1, 2)) == (1, 2)", "assert min_tuples((), ()) == ()", "assert min_tuples((100,), (50,)) == (50,)", "assert min_tuples((5, 5, 5), (5, 5, 5)) == (5, 5, 5)", "assert min_tuples((-1, -2, -3), (1, 2, 3)) == (-1, -2, -3)", "assert min_tuples((1.5, 2.5, 3.5), (1.0, 2.0, 3.0)) == (1.0, 2.0, 3.0)", "assert min_tuples((1.1, 2.2, 3.3), (1.1, 2.2, 3.3)) == (1.1, 2.2, 3.3)", "assert min_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 2, 1)", "assert min_tuples((0, 0, 0, 0), (0, 0, 0, 0)) == (0, 0, 0, 0)", "assert min_tuples((1, 2, 3), (3, 2, 1)) == (1, 2, 1)"], "challenge_test_list": []}
{"text": "Write a function to raise each element of a tuple to a given power.", "code": "def power_tuples(tuple1, power):\n    return tuple(a ** power for a in tuple1)", "task_id": "197_b915737c-2a53-4b77-8934-02612b9889c5", "test_setup_code": "", "test_list": ["assert power_tuples((1, 2, 3), 2) == (1, 4, 9)", "assert power_tuples((0, 1, 2), 3) == (0, 1, 8)", "assert power_tuples((2, 3, 4), 0) == (1, 1, 1)", "assert power_tuples((1, -1, 2), 2) == (1, 1, 4)", "assert power_tuples((1, -1, 2), 3) == (1, -1, 8)", "assert power_tuples((0,), 5) == (0,)", "assert power_tuples((5,), 1) == (5,)", "assert power_tuples((10, 100), 2) == (100, 10000)", "assert power_tuples((2, 4, 6, 8), 2) == (4, 16, 36, 64)", "assert power_tuples((1, 2, 3, 4, 5), 3) == (1, 8, 27, 64, 125)", "assert power_tuples((10, 20, 30), 1) == (10, 20, 30)", "assert power_tuples((-1, -2, -3), 2) == (1, 4, 9)", "assert power_tuples((-1, -2, -3), 3) == (-1, -8, -27)", "assert power_tuples((0, 0, 0), 4) == (0, 0, 0)", "assert power_tuples((1, 2, 3, 4, 5, 6), 2) == (1, 4, 9, 16, 25, 36)"], "challenge_test_list": []}
{"text": "Write a function to negate each element of a tuple.", "code": "def negate_tuples(tuple1):\n    return tuple(-a for a in tuple1)", "task_id": "197_0ca56a69-5a90-48e7-9456-2a8728b6b18a", "test_setup_code": "", "test_list": ["assert negate_tuples((1, 2, 3)) == (-1, -2, -3)", "assert negate_tuples((-1, -2, -3)) == (1, 2, 3)", "assert negate_tuples((0,)) == (0,)", "assert negate_tuples((100, -100)) == (-100, 100)", "assert negate_tuples((0, 1, -1)) == (0, -1, 1)", "assert negate_tuples((5, -5, 10, -10)) == (-5, 5, -10, 10)", "assert negate_tuples((999, -999, 0)) == (-999, 999, 0)", "assert negate_tuples((1, 0, -1, 2, -2)) == (-1, 0, 1, -2, 2)", "assert negate_tuples((123456789, -123456789)) == (-123456789, 123456789)", "assert negate_tuples((1, 2, 3, 4, 5)) == (-1, -2, -3, -4, -5)", "assert negate_tuples((10, 20, 30, 40, 50)) == (-10, -20, -30, -40, -50)", "assert negate_tuples((-10, -20, -30, -40, -50)) == (10, 20, 30, 40, 50)", "assert negate_tuples((0, 0, 0)) == (0, 0, 0)", "assert negate_tuples((1, -1, 1, -1)) == (-1, 1, -1, 1)", "assert negate_tuples((2, 4, 6, 8, 10)) == (-2, -4, -6, -8, -10)"], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of each element in a tuple.", "code": "def absolute_tuples(tuple1):\n    return tuple(abs(a) for a in tuple1)", "task_id": "197_fd4c2f1d-9666-4f13-9788-3dd3e409cf4e", "test_setup_code": "", "test_list": ["assert absolute_tuples((1, -2, 3)) == (1, 2, 3)", "assert absolute_tuples((-1, -2, -3)) == (1, 2, 3)", "assert absolute_tuples((0, 0, 0)) == (0, 0, 0)", "assert absolute_tuples((100, -200, 300)) == (100, 200, 300)", "assert absolute_tuples((-1000, 2000, -3000)) == (1000, 2000, 3000)", "assert absolute_tuples((1,)) == (1,)", "assert absolute_tuples((-1,)) == (1,)", "assert absolute_tuples((0,)) == (0,)", "assert absolute_tuples((123456789, -987654321)) == (123456789, 987654321)", "assert absolute_tuples((-999999999, 999999999)) == (999999999, 999999999)", "assert absolute_tuples((1, -1, 1, -1, 1, -1)) == (1, 1, 1, 1, 1, 1)", "assert absolute_tuples((0, -1, 2, -3, 4, -5)) == (0, 1, 2, 3, 4, 5)", "assert absolute_tuples((-1, -1, -1, -1, -1, -1)) == (1, 1, 1, 1, 1, 1)", "assert absolute_tuples((1, 2, 3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)", "assert absolute_tuples((-1, -2, -3, -4, -5, -6)) == (1, 2, 3, 4, 5, 6)"], "challenge_test_list": []}
{"text": "Write a function to remove all strings with length equal to a given number.", "code": "def filter_strings_by_length(strings, length):\n    return [s for s in strings if len(s) != length]", "task_id": "196_8343591a-8fc7-451c-8b63-09485405a1cc", "test_setup_code": "", "test_list": ["assert filter_strings_by_length(['apple', 'banana', 'cherry', 'date'], 5) == ['banana', 'cherry']", "assert filter_strings_by_length(['a', 'bb', 'ccc', 'dddd'], 1) == ['bb', 'ccc', 'dddd']", "assert filter_strings_by_length(['a', 'bb', 'ccc', 'dddd'], 2) == ['a', 'ccc', 'dddd']", "assert filter_strings_by_length(['a', 'bb', 'ccc', 'dddd'], 3) == ['a', 'bb', 'dddd']", "assert filter_strings_by_length(['a', 'bb', 'ccc', 'dddd'], 4) == ['a', 'bb', 'ccc']", "assert filter_strings_by_length([], 3) == []", "assert filter_strings_by_length(['same', 'size', 'test'], 4) == []", "assert filter_strings_by_length(['short', 'longer', 'tiny', 'huge'], 4) == ['longer', 'huge']", "assert filter_strings_by_length(['one', 'two', 'three', 'four', 'five'], 3) == ['three', 'four', 'five']", "assert filter_strings_by_length(['one', 'two', 'three', 'four', 'five'], 5) == ['one', 'two', 'three']", "assert filter_strings_by_length([''], 0) == []", "assert filter_strings_by_length(['', 'a', 'ab', 'abc'], 0) == ['a', 'ab', 'abc']", "assert filter_strings_by_length(['', 'a', 'ab', 'abc'], 1) == ['', 'ab', 'abc']", "assert filter_strings_by_length(['', 'a', 'ab', 'abc'], 2) == ['', 'a', 'abc']", "assert filter_strings_by_length(['', 'a', 'ab', 'abc'], 3) == ['', 'a', 'ab']"], "challenge_test_list": []}
{"text": "Write a function to remove all lists with length equal to a given number.", "code": "def filter_lists_by_length(lists, length):\n    return [lst for lst in lists if len(lst) != length]", "task_id": "196_1c5c030c-fd2d-4a2b-9e49-46aa1ef257dd", "test_setup_code": "", "test_list": ["assert filter_lists_by_length([[1, 2], [3, 4, 5], [6]], 2) == [[3, 4, 5], [6]]", "assert filter_lists_by_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]], 3) == [[4, 5], [6, 7, 8, 9]]", "assert filter_lists_by_length([[1], [2], [3]], 1) == []", "assert filter_lists_by_length([[], [1, 2], [3, 4, 5]], 0) == [[1, 2], [3, 4, 5]]", "assert filter_lists_by_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == []", "assert filter_lists_by_length([[1, 2], [3, 4], [5, 6]], 4) == [[1, 2], [3, 4], [5, 6]]", "assert filter_lists_by_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]], 2) == [[1, 2, 3], [6, 7, 8, 9]]", "assert filter_lists_by_length([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4) == [[1], [2, 3], [4, 5, 6]]", "assert filter_lists_by_length([[1, 2], [3, 4], [5, 6, 7], [8, 9, 10]], 3) == [[1, 2], [3, 4]]", "assert filter_lists_by_length([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10]], 4) == [[9, 10]]", "assert filter_lists_by_length([[1, 2], [3, 4, 5], [6, 7, 8]], 1) == [[1, 2], [3, 4, 5], [6, 7, 8]]", "assert filter_lists_by_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 0) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_length([[1, 2], [3, 4], [5, 6], [7, 8]], 2) == []", "assert filter_lists_by_length([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3) == [[1], [2, 3], [7, 8, 9, 10]]", "assert filter_lists_by_length([[1, 2, 3], [4, 5, 6, 7], [8, 9]], 3) == [[4, 5, 6, 7], [8, 9]]"], "challenge_test_list": []}
{"text": "Write a function to remove all dictionaries with a given number of keys.", "code": "def remove_dicts_with_key_count(dicts, key_count):\n    return [d for d in dicts if len(d.keys()) != key_count]", "task_id": "196_f62b743f-cd11-438c-95c8-9966cdc32741", "test_setup_code": "", "test_list": ["assert remove_dicts_with_key_count([{'a': 1}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3}], 2) == [{'a': 1}, {'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2}, {'a': 1}, {'a': 1, 'b': 2, 'c': 3}], 1) == [{'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1}, {'b': 2}, {'c': 3}], 1) == []", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2}], 2) == []", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}], 3) == []", "assert remove_dicts_with_key_count([{'a': 1}, {'a': 1, 'b': 2}], 0) == [{'a': 1}, {'a': 1, 'b': 2}]", "assert remove_dicts_with_key_count([], 1) == []", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4}], 3) == [{'d': 4}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4}], 2) == [{'a': 1, 'b': 2, 'c': 3}, {'d': 4}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4}], 1) == [{'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}], 2) == [{'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6, 'g': 7}], 4) == [{'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6, 'g': 7}], 3) == [{'d': 4, 'e': 5, 'f': 6, 'g': 7}]", "assert remove_dicts_with_key_count([{'a': 1}, {'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3}], 1) == [{'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3}]", "assert remove_dicts_with_key_count([{'a': 1, 'b': 2}, {'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}], 2) == [{'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}]"], "challenge_test_list": []}
{"text": "Write a function to remove all sets with length equal to a given number.", "code": "def filter_sets_by_length(sets, length):\n    return [s for s in sets if len(s) != length]", "task_id": "196_3209fdf8-fcf3-44dd-879c-d8a06a1d0290", "test_setup_code": "", "test_list": ["assert filter_sets_by_length([{1, 2}, {3, 4, 5}, {6}], 2) == [{3, 4, 5}, {6}]", "assert filter_sets_by_length([{1, 2, 3}, {4, 5}, {6, 7, 8}], 3) == [{4, 5}]", "assert filter_sets_by_length([{1}, {2, 3}, {4, 5, 6}], 1) == [{2, 3}, {4, 5, 6}]", "assert filter_sets_by_length([{1, 2}, {3, 4}, {5, 6}], 2) == []", "assert filter_sets_by_length([{1, 2, 3, 4}, {5, 6, 7}, {8, 9}], 4) == [{5, 6, 7}, {8, 9}]", "assert filter_sets_by_length([{1, 2, 3}, {4, 5, 6}, {7, 8, 9}], 3) == []", "assert filter_sets_by_length([{1, 2}, {3, 4, 5}, {6, 7, 8, 9}], 4) == [{1, 2}, {3, 4, 5}]", "assert filter_sets_by_length([], 2) == []", "assert filter_sets_by_length([{1, 2, 3}], 3) == []", "assert filter_sets_by_length([{1, 2, 3}, {4, 5, 6}, {7, 8, 9, 10}], 3) == [{7, 8, 9, 10}]", "assert filter_sets_by_length([{1, 2, 3, 4, 5}], 5) == []", "assert filter_sets_by_length([{1, 2, 3, 4, 5, 6}], 5) == [{1, 2, 3, 4, 5, 6}]", "assert filter_sets_by_length([{1, 2, 3}, {4, 5, 6, 7}, {8, 9}], 2) == [{1, 2, 3}, {4, 5, 6, 7}, {8, 9}]", "assert filter_sets_by_length([{1, 2}, {3, 4, 5}, {6, 7, 8}], 3) == [{1, 2}]", "assert filter_sets_by_length([{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10}], 4) == [{9, 10}]"], "challenge_test_list": []}
{"text": "Write a function to remove all strings with a given number of vowels.", "code": "def remove_strings_with_vowel_count(strings, vowel_count):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return [s for s in strings if count_vowels(s) != vowel_count]", "task_id": "196_38cb4de9-0ba5-40be-963a-42f70961a4d7", "test_setup_code": "", "test_list": ["assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry'], 2) == ['banana', 'cherry']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry'], 3) == ['apple', 'cherry']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry'], 1) == ['apple', 'banana', 'cherry']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry'], 0) == ['apple', 'banana', 'cherry']", "assert remove_strings_with_vowel_count(['a', 'e', 'i', 'o', 'u'], 1) == []", "assert remove_strings_with_vowel_count(['a', 'e', 'i', 'o', 'u'], 2) == ['a', 'e', 'i', 'o', 'u']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry', 'date'], 2) == ['banana', 'cherry', 'date']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry', 'date'], 4) == ['apple', 'banana', 'cherry']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry', 'date'], 5) == ['apple', 'banana', 'cherry', 'date']", "assert remove_strings_with_vowel_count([''], 0) == []", "assert remove_strings_with_vowel_count(['a', 'b', 'c', 'd'], 1) == ['b', 'c', 'd']", "assert remove_strings_with_vowel_count(['a', 'b', 'c', 'd'], 0) == ['a', 'b', 'c', 'd']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry'], 5) == ['apple', 'banana', 'cherry']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry', 'date'], 3) == ['apple', 'date']", "assert remove_strings_with_vowel_count(['apple', 'banana', 'cherry', 'date'], 1) == ['apple', 'banana', 'cherry', 'date']"], "challenge_test_list": []}
{"text": "Write a function to remove all lists whose elements sum to a given number.", "code": "def remove_lists_with_sum(lists, target_sum):\n    return [lst for lst in lists if sum(lst) != target_sum]", "task_id": "196_1a3d8342-a680-422e-9c3a-7b27336e22e2", "test_setup_code": "", "test_list": ["assert remove_lists_with_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6) == [[4, 5, 6], [7, 8, 9]]", "assert remove_lists_with_sum([[1, 2, 3], [4, 1, 1], [3, 3]], 6) == [[1, 2, 3], [4, 1, 1]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 1, 1, 1, 1, 1]], 6) == [[1, 2, 3], [1, 1, 1, 1, 1, 1]]", "assert remove_lists_with_sum([[1, 2], [3, 3], [4, 2]], 5) == [[3, 3], [4, 2]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 6) == []", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 7) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 0) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[], [1, 2, 3], [3, 3]], 0) == [[1, 2, 3], [3, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 3) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 9) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 5) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 1) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 2) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 4) == [[1, 2, 3], [3, 3], [1, 2, 3]]", "assert remove_lists_with_sum([[1, 2, 3], [3, 3], [1, 2, 3]], 8) == [[1, 2, 3], [3, 3], [1, 2, 3]]"], "challenge_test_list": []}
{"text": "Write a function to remove all tuples whose first element is equal to a given number.", "code": "def filter_tuples_by_first_element(tuples, first_element):\n    return [t for t in tuples if t[0] != first_element]", "task_id": "196_94185527-4e15-4228-8c5a-e13a69ebf46b", "test_setup_code": "", "test_list": ["assert filter_tuples_by_first_element([(1, 2), (3, 4), (1, 5)], 1) == [(3, 4)]", "assert filter_tuples_by_first_element([(1, 2), (3, 4), (5, 6)], 2) == [(1, 2), (3, 4), (5, 6)]", "assert filter_tuples_by_first_element([], 1) == []", "assert filter_tuples_by_first_element([(1, 2), (1, 3), (1, 4)], 1) == []", "assert filter_tuples_by_first_element([(2, 2), (3, 3), (4, 4)], 1) == [(2, 2), (3, 3), (4, 4)]", "assert filter_tuples_by_first_element([(1, 'a'), (2, 'b'), (1, 'c')], 1) == [(2, 'b')]", "assert filter_tuples_by_first_element([(0, 0), (0, 1), (1, 0)], 0) == [(1, 0)]", "assert filter_tuples_by_first_element([(-1, 2), (0, 0), (1, -1)], -1) == [(0, 0), (1, -1)]", "assert filter_tuples_by_first_element([(None, 1), (2, 3)], None) == [(2, 3)]", "assert filter_tuples_by_first_element([(1, 2, 3), (4, 5, 6), (1, 7, 8)], 1) == [(4, 5, 6)]", "assert filter_tuples_by_first_element([('a', 1), ('b', 2), ('c', 3)], 'a') == [('b', 2), ('c', 3)]", "assert filter_tuples_by_first_element([(True, 0), (False, 1)], True) == [(False, 1)]", "assert filter_tuples_by_first_element([(1.5, 2), (2.5, 3), (1.5, 4)], 1.5) == [(2.5, 3)]", "assert filter_tuples_by_first_element([(1, 2), (1, 2), (3, 4), (3, 4)], 1) == [(3, 4), (3, 4)]", "assert filter_tuples_by_first_element([([], 1), ({}, 2), ((), 3)], []) == [({}, 2), ((), 3)]"], "challenge_test_list": []}
{"text": "Write a function to remove all dictionaries that contain a given value.", "code": "def remove_dicts_with_value(dicts, value):\n    return [d for d in dicts if value not in d.values()]", "task_id": "196_1176d0c6-0a56-4d82-b628-07f3646fea91", "test_setup_code": "", "test_list": ["assert remove_dicts_with_value([{'a': 1}, {'b': 2}, {'c': 3}], 2) == [{'a': 1}, {'c': 3}]", "assert remove_dicts_with_value([{'a': 1}, {'b': 2}, {'c': 3}], 4) == [{'a': 1}, {'b': 2}, {'c': 3}]", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'c': 3, 'd': 4}], 2) == [{'c': 3, 'd': 4}]", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'c': 3, 'd': 4}], 5) == [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]", "assert remove_dicts_with_value([{'a': 1}, {'a': 1}, {'a': 1}], 1) == []", "assert remove_dicts_with_value([{'a': 1}, {'a': 1}, {'a': 1}], 2) == [{'a': 1}, {'a': 1}, {'a': 1}]", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'b': 2, 'c': 3}], 2) == []", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'b': 2, 'c': 3}], 3) == [{'a': 1, 'b': 2}]", "assert remove_dicts_with_value([{'a': 1}, {'b': 2}, {'c': 3}], 1) == [{'b': 2}, {'c': 3}]", "assert remove_dicts_with_value([], 1) == []", "assert remove_dicts_with_value([{'a': None}, {'b': None}], None) == []", "assert remove_dicts_with_value([{'a': 0}, {'b': 0}], 0) == []", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'c': 3, 'd': 4}], 0) == [{'a': 1, 'b': 2}, {'c': 3, 'd': 4}]", "assert remove_dicts_with_value([{'a': 1, 'b': 2}, {'c': 3, 'd': 4}], 3) == [{'a': 1, 'b': 2}]", "assert remove_dicts_with_value([{'a': 'apple'}, {'b': 'banana'}, {'c': 'cherry'}], 'banana') == [{'a': 'apple'}, {'c': 'cherry'}]"], "challenge_test_list": []}
{"text": "Write a function to remove all lists whose maximum element is equal to a given number.", "code": "def filter_lists_by_max_element(lists, max_element):\n    return [lst for lst in lists if max(lst) != max_element]", "task_id": "196_f4c40879-fdd4-441b-8a87-5949ae140262", "test_setup_code": "", "test_list": ["assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 6) == [[1, 2, 3], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2], [3, 4], [5, 6]], 4) == [[1, 2], [5, 6]]", "assert filter_lists_by_max_element([[10, 20], [30, 40], [50, 60]], 20) == [[30, 40], [50, 60]]", "assert filter_lists_by_max_element([[1, 1, 1], [2, 2, 2], [3, 3, 3]], 3) == [[1, 1, 1], [2, 2, 2]]", "assert filter_lists_by_max_element([[1]], 1) == []", "assert filter_lists_by_max_element([[1, 2, 3], [3, 2, 1], [4, 5, 6]], 3) == [[4, 5, 6]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 9) == [[1, 2, 3], [4, 5, 6]]", "assert filter_lists_by_max_element([[1, 2], [2, 3], [3, 4]], 2) == [[3, 4]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 7) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 8) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == [[1, 2, 3], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert filter_lists_by_max_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == [[4, 5, 6], [7, 8, 9]]"], "challenge_test_list": []}
{"text": "Write a function to remove all strings that contain a given character.", "code": "def remove_strings_with_char(strings, char):\n    return [s for s in strings if char not in s]", "task_id": "196_04cedd85-947c-434e-8993-7ddcaa78e092", "test_setup_code": "", "test_list": ["assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'a') == ['cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'b') == ['apple', 'cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'c') == ['apple', 'banana']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'd') == ['apple', 'banana', 'cherry']", "assert remove_strings_with_char([], 'a') == []", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], '') == ['apple', 'banana', 'cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'e') == ['banana']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'p') == ['banana', 'cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'n') == ['apple', 'cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry'], 'r') == ['apple', 'banana']", "assert remove_strings_with_char(['apple', 'banana', 'cherry', 'date'], 'a') == ['cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry', 'date'], 't') == ['apple', 'banana', 'cherry']", "assert remove_strings_with_char(['apple', 'banana', 'cherry', 'date'], 'z') == ['apple', 'banana', 'cherry', 'date']", "assert remove_strings_with_char(['apple', 'banana', 'cherry', 'date'], ' ') == ['apple', 'banana', 'cherry', 'date']", "assert remove_strings_with_char(['apple', 'banana', 'cherry', 'date'], 'e') == ['banana']"], "challenge_test_list": []}
{"text": "Write a function to find the largest rectangle that can be inscribed in an ellipse.", "code": "import math\ndef largest_rectangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_62dfb1ac-9773-4410-809a-db6d5f6b10fe", "test_setup_code": "", "test_list": ["assert largest_rectangle(5, 3) == 30", "assert largest_rectangle(0, 0) == 0", "assert largest_rectangle(10, 10) == 200", "assert largest_rectangle(7, 2) == 28", "assert largest_rectangle(1, 1) == 2", "assert largest_rectangle(100, 50) == 10000", "assert largest_rectangle(0, 5) == 0", "assert largest_rectangle(5, 0) == 0", "assert largest_rectangle(-1, 5) == -1", "assert largest_rectangle(5, -1) == -1", "assert largest_rectangle(-1, -1) == -1", "assert largest_rectangle(1.5, 2.5) == 7.5", "assert largest_rectangle(3.3, 4.4) == 29.04", "assert largest_rectangle(1e-10, 1e-10) == 2e-20", "assert largest_rectangle(1e10, 1e10) == 2e20"], "challenge_test_list": []}
{"text": "Write a function to find the largest square that can be inscribed in an ellipse.", "code": "import math\ndef largest_square(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * math.sqrt(2)\n    area = side * side\n    return area", "task_id": "198_48dd431c-c870-49d5-9ab0-f8e49738e4c4", "test_setup_code": "", "test_list": ["assert largest_square(5, 3) == 18.0", "assert largest_square(0, 0) == 0.0", "assert largest_square(1, 1) == 2.0", "assert largest_square(10, 10) == 200.0", "assert largest_square(7, 5) == 50.0", "assert largest_square(2, 8) == 8.0", "assert largest_square(100, 50) == 5000.0", "assert largest_square(3, 3) == 18.0", "assert largest_square(0, 5) == 0.0", "assert largest_square(5, 0) == 0.0", "assert largest_square(-1, 5) == -1", "assert largest_square(5, -1) == -1", "assert largest_square(-5, -5) == -1", "assert largest_square(1.5, 2.5) == 4.5", "assert largest_square(1e-9, 1e-9) == 2e-18"], "challenge_test_list": []}
{"text": "Write a function to find the largest circle that can be inscribed in an ellipse.", "code": "import math\ndef largest_circle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    radius = min(a, b)\n    area = math.pi * radius * radius\n    return area", "task_id": "198_216db27c-9e2a-4a7f-9c28-ee7580c509ff", "test_setup_code": "", "test_list": ["assert largest_circle(5, 3) == 28.274333882308138", "assert largest_circle(10, 10) == 314.1592653589793", "assert largest_circle(0, 5) == 0.0", "assert largest_circle(7, 0) == 0.0", "assert largest_circle(0, 0) == 0.0", "assert largest_circle(-5, 3) == -1", "assert largest_circle(5, -3) == -1", "assert largest_circle(-5, -3) == -1", "assert largest_circle(1, 1) == 3.141592653589793", "assert largest_circle(100, 50) == 7853.981633974483", "assert largest_circle(50, 100) == 7853.981633974483", "assert largest_circle(1.5, 2.5) == 7.0685834705770345", "assert largest_circle(2.5, 1.5) == 7.0685834705770345", "assert largest_circle(1000, 1000) == 3141592.653589793", "assert largest_circle(0.1, 0.2) == 0.031415926535897934"], "challenge_test_list": []}
{"text": "Write a function to find the largest hexagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_hexagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) / math.sqrt(3)\n    area = (3 * math.sqrt(3) * side * side) / 2\n    return area", "task_id": "198_392ad87b-98c0-48a8-8a33-34ec02f54e1b", "test_setup_code": "", "test_list": ["assert largest_hexagon(6, 6) == 31.176914536239792", "assert largest_hexagon(10, 5) == 21.650635094610966", "assert largest_hexagon(0, 0) == 0.0", "assert largest_hexagon(3, 4) == 6.928203230275509", "assert largest_hexagon(7, 7) == 42.69655404831973", "assert largest_hexagon(1, 2) == 0.5773502691896257", "assert largest_hexagon(10, 10) == 86.60254037844386", "assert largest_hexagon(100, 50) == 4330.127018922193", "assert largest_hexagon(5, 10) == 21.650635094610966", "assert largest_hexagon(0, 5) == 0.0", "assert largest_hexagon(5, 0) == 0.0", "assert largest_hexagon(-5, 5) == -1", "assert largest_hexagon(5, -5) == -1", "assert largest_hexagon(-5, -5) == -1", "assert largest_hexagon(1e-9, 1e-9) == 5.773502691896258e-19"], "challenge_test_list": []}
{"text": "Write a function to find the largest pentagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_pentagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * (math.sqrt(5) - 1) / 2\n    area = (5 * side * side) / (4 * math.tan(math.pi / 5))\n    return area", "task_id": "198_1269d97d-4c73-473e-9825-5d8e7ab7d5c3", "test_setup_code": "", "test_list": ["assert largest_pentagon(10, 5) == 15.388417685876266", "assert largest_pentagon(0, 0) == 0.0", "assert largest_pentagon(1, 1) == 0.6180339887498948", "assert largest_pentagon(100, 50) == 1538.8417685876266", "assert largest_pentagon(3, 4) == 3.7082039324993694", "assert largest_pentagon(5, 5) == 9.645738636755232", "assert largest_pentagon(7, 3) == 6.42035623730951", "assert largest_pentagon(2, 2) == 1.2360679774997896", "assert largest_pentagon(10, 10) == 38.54147654702093", "assert largest_pentagon(0.5, 0.5) == 0.1545084971874737", "assert largest_pentagon(1, 0) == 0.0", "assert largest_pentagon(0, 1) == 0.0", "assert largest_pentagon(-1, 5) == -1", "assert largest_pentagon(5, -1) == -1", "assert largest_pentagon(-1, -1) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the largest octagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_octagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * (1 + math.sqrt(2)) / 2\n    area = 2 * (1 + math.sqrt(2)) * side * side\n    return area", "task_id": "198_901ce7b1-b36c-424e-a37e-f4e7c0fe79d8", "test_setup_code": "", "test_list": ["assert largest_octagon(5, 3) == 50.00000000000001", "assert largest_octagon(10, 10) == 200.00000000000003", "assert largest_octagon(0, 0) == 0.0", "assert largest_octagon(1, 1) == 2.0000000000000004", "assert largest_octagon(7, 5) == 98.00000000000001", "assert largest_octagon(100, 50) == 5000.000000000001", "assert largest_octagon(0.5, 0.5) == 0.5000000000000001", "assert largest_octagon(3.5, 2.5) == 17.500000000000004", "assert largest_octagon(1000, 500) == 500000.00000000006", "assert largest_octagon(1, 0) == 0.0", "assert largest_octagon(0, 1) == 0.0", "assert largest_octagon(-1, 5) == -1", "assert largest_octagon(5, -1) == -1", "assert largest_octagon(-1, -1) == -1", "assert largest_octagon(1e-9, 1e-9) == 2.0000000000000004e-18"], "challenge_test_list": []}
{"text": "Write a function to find the largest parallelogram that can be inscribed in an ellipse.", "code": "import math\ndef largest_parallelogram(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_e57ba814-9c9a-4a0b-b932-8c308cb47ff9", "test_setup_code": "", "test_list": ["assert largest_parallelogram(3, 4) == 24", "assert largest_parallelogram(5, 6) == 60", "assert largest_parallelogram(0, 7) == 0", "assert largest_parallelogram(8, 0) == 0", "assert largest_parallelogram(0, 0) == 0", "assert largest_parallelogram(-1, 4) == -1", "assert largest_parallelogram(4, -1) == -1", "assert largest_parallelogram(-3, -4) == -1", "assert largest_parallelogram(1, 1) == 2", "assert largest_parallelogram(10, 10) == 200", "assert largest_parallelogram(100, 200) == 40000", "assert largest_parallelogram(1.5, 2.5) == 7.5", "assert largest_parallelogram(3.3, 4.4) == 29.04", "assert largest_parallelogram(0.1, 0.2) == 0.04", "assert largest_parallelogram(123456, 654321) == 161074708032"], "challenge_test_list": []}
{"text": "Write a function to find the largest rhombus that can be inscribed in an ellipse.", "code": "import math\ndef largest_rhombus(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_edff0eac-297b-4446-a789-4f2027412adc", "test_setup_code": "", "test_list": ["assert largest_rhombus(3, 4) == 24", "assert largest_rhombus(5, 5) == 50", "assert largest_rhombus(0, 0) == 0", "assert largest_rhombus(1, 0) == 0", "assert largest_rhombus(0, 1) == 0", "assert largest_rhombus(-1, 2) == -1", "assert largest_rhombus(2, -1) == -1", "assert largest_rhombus(-1, -1) == -1", "assert largest_rhombus(1, 1) == 2", "assert largest_rhombus(10, 20) == 400", "assert largest_rhombus(100, 200) == 40000", "assert largest_rhombus(0.5, 0.5) == 0.5", "assert largest_rhombus(0.1, 0.2) == 0.04", "assert largest_rhombus(123456, 654321) == 161074380672", "assert largest_rhombus(1e-10, 1e-10) == 2e-20"], "challenge_test_list": []}
{"text": "Write a function to find the largest trapezoid that can be inscribed in an ellipse.", "code": "import math\ndef largest_trapezoid(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_7e8cda14-da44-4cc8-a99b-8014a517c024", "test_setup_code": "", "test_list": ["assert largest_trapezoid(5, 3) == 30", "assert largest_trapezoid(0, 0) == 0", "assert largest_trapezoid(10, 10) == 200", "assert largest_trapezoid(1, 1) == 2", "assert largest_trapezoid(100, 50) == 10000", "assert largest_trapezoid(0, 5) == 0", "assert largest_trapezoid(5, 0) == 0", "assert largest_trapezoid(-1, 5) == -1", "assert largest_trapezoid(5, -1) == -1", "assert largest_trapezoid(-5, -5) == -1", "assert largest_trapezoid(1.5, 2.5) == 7.5", "assert largest_trapezoid(2.5, 1.5) == 7.5", "assert largest_trapezoid(1e-5, 1e-5) == 2e-10", "assert largest_trapezoid(1e5, 1e5) == 2e10", "assert largest_trapezoid(3.14159, 2.71828) == 17.079468"], "challenge_test_list": []}
{"text": "Write a function to find the largest ellipse that can be inscribed in another ellipse.", "code": "import math\ndef largest_ellipse(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = math.pi * a * b\n    return area", "task_id": "198_d6432ca0-9dc5-4cc9-8a27-deb6f6f8c3bd", "test_setup_code": "", "test_list": ["assert largest_ellipse(5, 3) == 47.12388980384689", "assert largest_ellipse(0, 0) == 0.0", "assert largest_ellipse(10, 10) == 314.1592653589793", "assert largest_ellipse(-5, 3) == -1", "assert largest_ellipse(5, -3) == -1", "assert largest_ellipse(-5, -3) == -1", "assert largest_ellipse(1, 1) == 3.141592653589793", "assert largest_ellipse(100, 50) == 15707.963267948966", "assert largest_ellipse(0.5, 0.5) == 0.7853981633974483", "assert largest_ellipse(1e-10, 1e-10) == 3.1415926535897936e-20", "assert largest_ellipse(1e5, 1e5) == 31415926535.89793", "assert largest_ellipse(3.5, 2.5) == 27.48893571891069", "assert largest_ellipse(7, 0) == 0.0", "assert largest_ellipse(0, 7) == 0.0", "assert largest_ellipse(3.14159, 2.71828) == 26.82836629296223"], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are even.", "code": "def is_all_even(lst): \n    return all(x % 2 == 0 for x in lst)", "task_id": "201_0924cf1e-7fa4-43ae-8a19-83ac9fb521e0", "test_setup_code": "", "test_list": ["assert is_all_even([2, 4, 6, 8]) == True", "assert is_all_even([1, 3, 5, 7]) == False", "assert is_all_even([2, 4, 5, 8]) == False", "assert is_all_even([0, 2, 4, 6]) == True", "assert is_all_even([0]) == True", "assert is_all_even([1]) == False", "assert is_all_even([]) == True", "assert is_all_even([100, 200, 300]) == True", "assert is_all_even([100, 201, 300]) == False", "assert is_all_even([-2, -4, -6]) == True", "assert is_all_even([-2, -3, -6]) == False", "assert is_all_even([2, 2, 2, 2]) == True", "assert is_all_even([2, 2, 2, 3]) == False", "assert is_all_even([10**6, 10**8, 10**10]) == True", "assert is_all_even([10**6, 10**8, 10**10 + 1]) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are positive.", "code": "def is_all_positive(lst): \n    return all(x > 0 for x in lst)", "task_id": "201_34292e54-2a0c-404b-afd8-62e7332273a6", "test_setup_code": "", "test_list": ["assert is_all_positive([1, 2, 3, 4, 5]) == True", "assert is_all_positive([-1, 2, 3, 4, 5]) == False", "assert is_all_positive([0, 1, 2, 3, 4, 5]) == False", "assert is_all_positive([1]) == True", "assert is_all_positive([-1]) == False", "assert is_all_positive([]) == True", "assert is_all_positive([1, 2, 3, 4, -5]) == False", "assert is_all_positive([1, 2, 3, 4, 0]) == False", "assert is_all_positive([1000000, 2000000, 3000000]) == True", "assert is_all_positive([1.5, 2.5, 3.5]) == True", "assert is_all_positive([1.5, -2.5, 3.5]) == False", "assert is_all_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "assert is_all_positive([1, 2, 3, 4, 5, -6, 7, 8, 9, 10]) == False", "assert is_all_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == False", "assert is_all_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list have the same length.", "code": "def are_lengths_equal(lst): \n    return len(set(len(x) for x in lst)) == 1", "task_id": "201_76d82c52-efef-4530-bd7e-884a39fb1a44", "test_setup_code": "", "test_list": ["assert are_lengths_equal(['abc', 'def', 'ghi']) == True", "assert are_lengths_equal(['abc', 'de', 'ghi']) == False", "assert are_lengths_equal(['a', 'b', 'c']) == True", "assert are_lengths_equal(['a', 'bb', 'ccc']) == False", "assert are_lengths_equal(['', '', '']) == True", "assert are_lengths_equal(['', 'a', '']) == False", "assert are_lengths_equal(['abcd', 'efgh', 'ijkl']) == True", "assert are_lengths_equal(['abcd', 'efgh', 'ijklm']) == False", "assert are_lengths_equal(['same', 'size', 'test']) == True", "assert are_lengths_equal(['same', 'size', 'tests']) == False", "assert are_lengths_equal(['123', '456', '789']) == True", "assert are_lengths_equal(['123', '45', '789']) == False", "assert are_lengths_equal(['one', 'two', 'six']) == True", "assert are_lengths_equal(['one', 'two', 'seven']) == False", "assert are_lengths_equal([]) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list are uppercase.", "code": "def is_all_uppercase(lst): \n    return all(x.isupper() for x in lst)", "task_id": "201_7d5e357e-6020-4284-a394-a962bdf56446", "test_setup_code": "", "test_list": ["assert is_all_uppercase(['HELLO', 'WORLD']) == True", "assert is_all_uppercase(['HELLO', 'world']) == False", "assert is_all_uppercase(['HELLO', 'WORLD', '123']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', '123abc']) == False", "assert is_all_uppercase(['HELLO', 'WORLD', '']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', ' ']) == False", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO WORLD']) == False", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO-WORLD']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO_WORLD']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO123']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO123abc']) == False", "assert is_all_uppercase(['HELLO', 'WORLD', 'HELLO123!']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', '123!']) == True", "assert is_all_uppercase(['HELLO', 'WORLD', '123!@#']) == True", "assert is_all_uppercase([]) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome.", "code": "def is_palindrome(s): \n    return s == s[::-1]", "task_id": "201_f29303fe-7f9c-4422-929e-743979ad1256", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('racecar ') == False", "assert is_palindrome('A man a plan a canal Panama') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').replace('!', '').replace('.', '').lower()) == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are unique.", "code": "def is_all_unique(lst): \n    return len(lst) == len(set(lst))", "task_id": "201_bd99a792-f24f-4cd0-a2f7-67b39e66dab0", "test_setup_code": "", "test_list": ["assert is_all_unique([]) == True", "assert is_all_unique([1]) == True", "assert is_all_unique([1, 2, 3, 4, 5]) == True", "assert is_all_unique([1, 2, 2, 4, 5]) == False", "assert is_all_unique(['a', 'b', 'c', 'd']) == True", "assert is_all_unique(['a', 'b', 'c', 'a']) == False", "assert is_all_unique([1, '1', 2, '2']) == True", "assert is_all_unique([1, 1.0, 2, 2.0]) == False", "assert is_all_unique([True, False, True]) == False", "assert is_all_unique([True, False]) == True", "assert is_all_unique([None, None]) == False", "assert is_all_unique([None, 1, 'a', True]) == True", "assert is_all_unique([0, 0.0, 1, 1.0]) == False", "assert is_all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "assert is_all_unique(['apple', 'banana', 'cherry', 'apple']) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a list is sorted in ascending order.", "code": "def is_sorted(lst): \n    return lst == sorted(lst)", "task_id": "201_0d5778d0-f33e-464b-9798-8c7c1d630b62", "test_setup_code": "", "test_list": ["assert is_sorted([]) == True", "assert is_sorted([1]) == True", "assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([5, 4, 3, 2, 1]) == False", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([1, 2, 2, 3, 4]) == True", "assert is_sorted([1, 1, 1, 1, 1]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "assert is_sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False", "assert is_sorted([1, 3, 5, 7, 9, 2, 4, 6, 8, 10]) == False", "assert is_sorted([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]) == True", "assert is_sorted([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == True", "assert is_sorted([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9]) == False", "assert is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 10]) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all characters in a string are vowels.", "code": "def is_all_vowels(s): \n    return all(c in 'aeiouAEIOU' for c in s)", "task_id": "201_b639da8e-f85e-40d6-a6b7-3e8972fe78cf", "test_setup_code": "", "test_list": ["assert is_all_vowels('aeiou') == True", "assert is_all_vowels('AEIOU') == True", "assert is_all_vowels('aEiOu') == True", "assert is_all_vowels('aeioub') == False", "assert is_all_vowels('') == True", "assert is_all_vowels('b') == False", "assert is_all_vowels('aeiouAEIOU') == True", "assert is_all_vowels('aeiOuX') == False", "assert is_all_vowels('u') == True", "assert is_all_vowels('U') == True", "assert is_all_vowels('xyz') == False", "assert is_all_vowels('aeiouxyz') == False", "assert is_all_vowels('aeiouaeiouaeiou') == True", "assert is_all_vowels('aeiouAEIOUaeiouAEIOU') == True", "assert is_all_vowels('aeioubAEIOU') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list contain only alphabetic characters.", "code": "def is_all_alpha(lst): \n    return all(x.isalpha() for x in lst)", "task_id": "201_dd3c5eb1-88e8-43b9-aaef-526dd502a99f", "test_setup_code": "", "test_list": ["assert is_all_alpha(['hello', 'world']) == True", "assert is_all_alpha(['hello', 'world123']) == False", "assert is_all_alpha(['Hello', 'World']) == True", "assert is_all_alpha(['Hello', 'World', '123']) == False", "assert is_all_alpha(['']) == False", "assert is_all_alpha(['a', 'b', 'c']) == True", "assert is_all_alpha(['a', 'b', 'c', '1']) == False", "assert is_all_alpha(['abc', 'def', 'ghi']) == True", "assert is_all_alpha(['abc', 'def', 'ghi', 'jkl123']) == False", "assert is_all_alpha(['ABCDEFGHIJKLMNOPQRSTUVWXYZ']) == True", "assert is_all_alpha(['abcdefghijklmnopqrstuvwxyz']) == True", "assert is_all_alpha(['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz']) == True", "assert is_all_alpha(['ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz', '123']) == False", "assert is_all_alpha(['A1', 'B2', 'C3']) == False", "assert is_all_alpha(['']) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list are non-empty.", "code": "def is_all_nonempty(lst): \n    return all(len(x) > 0 for x in lst)", "task_id": "201_a79e8f79-b305-4ec2-acc2-ec3309e40527", "test_setup_code": "", "test_list": ["assert is_all_nonempty(['hello', 'world']) == True", "assert is_all_nonempty(['', 'world']) == False", "assert is_all_nonempty(['hello', '', 'world']) == False", "assert is_all_nonempty(['a', 'b', 'c']) == True", "assert is_all_nonempty(['a', 'b', '']) == False", "assert is_all_nonempty(['', '', '']) == False", "assert is_all_nonempty(['nonempty']) == True", "assert is_all_nonempty(['']) == False", "assert is_all_nonempty([]) == True", "assert is_all_nonempty([' ', 'world']) == True", "assert is_all_nonempty([' ', '']) == False", "assert is_all_nonempty(['a' * 1000, 'b' * 1000]) == True", "assert is_all_nonempty(['a' * 1000, '']) == False", "assert is_all_nonempty(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == True", "assert is_all_nonempty(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', '']) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 3 less than or equal to a given number.", "code": "def highest_power_of_3(n):\n    res = 1\n    while res * 3 <= n:\n        res *= 3\n    return res", "task_id": "199_03b2f2cf-70c2-4e07-a9da-5bfb5cf40998", "test_setup_code": "", "test_list": ["assert highest_power_of_3(1) == 1", "assert highest_power_of_3(2) == 1", "assert highest_power_of_3(3) == 3", "assert highest_power_of_3(4) == 3", "assert highest_power_of_3(8) == 3", "assert highest_power_of_3(9) == 9", "assert highest_power_of_3(10) == 9", "assert highest_power_of_3(26) == 9", "assert highest_power_of_3(27) == 27", "assert highest_power_of_3(28) == 27", "assert highest_power_of_3(80) == 27", "assert highest_power_of_3(81) == 81", "assert highest_power_of_3(82) == 81", "assert highest_power_of_3(242) == 81", "assert highest_power_of_3(243) == 243"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 5 less than or equal to a given number.", "code": "def highest_power_of_5(n):\n    res = 1\n    while res * 5 <= n:\n        res *= 5\n    return res", "task_id": "199_7e5ea645-14ff-4d25-899f-9ca64c8ec326", "test_setup_code": "", "test_list": ["assert highest_power_of_5(1) == 1", "assert highest_power_of_5(5) == 5", "assert highest_power_of_5(6) == 5", "assert highest_power_of_5(24) == 5", "assert highest_power_of_5(25) == 25", "assert highest_power_of_5(30) == 25", "assert highest_power_of_5(124) == 25", "assert highest_power_of_5(125) == 125", "assert highest_power_of_5(150) == 125", "assert highest_power_of_5(624) == 125", "assert highest_power_of_5(625) == 625", "assert highest_power_of_5(700) == 625", "assert highest_power_of_5(3124) == 625", "assert highest_power_of_5(3125) == 3125", "assert highest_power_of_5(10000) == 3125"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 10 less than or equal to a given number.", "code": "def highest_power_of_10(n):\n    res = 1\n    while res * 10 <= n:\n        res *= 10\n    return res", "task_id": "199_762fcd6b-6317-4056-947c-c7a27d0a1860", "test_setup_code": "", "test_list": ["assert highest_power_of_10(1) == 1", "assert highest_power_of_10(9) == 1", "assert highest_power_of_10(10) == 10", "assert highest_power_of_10(11) == 10", "assert highest_power_of_10(50) == 10", "assert highest_power_of_10(99) == 10", "assert highest_power_of_10(100) == 100", "assert highest_power_of_10(101) == 100", "assert highest_power_of_10(500) == 100", "assert highest_power_of_10(999) == 100", "assert highest_power_of_10(1000) == 1000", "assert highest_power_of_10(1001) == 1000", "assert highest_power_of_10(5000) == 1000", "assert highest_power_of_10(9999) == 1000", "assert highest_power_of_10(10000) == 10000"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 strictly less than a given number.", "code": "def highest_power_of_2_less_than(n):\n    res = 1\n    while res * 2 < n:\n        res *= 2\n    return res", "task_id": "199_93ff247f-12ac-4ea3-aa99-e2822022237b", "test_setup_code": "", "test_list": ["assert highest_power_of_2_less_than(10) == 8", "assert highest_power_of_2_less_than(16) == 8", "assert highest_power_of_2_less_than(17) == 16", "assert highest_power_of_2_less_than(32) == 16", "assert highest_power_of_2_less_than(33) == 32", "assert highest_power_of_2_less_than(100) == 64", "assert highest_power_of_2_less_than(127) == 64", "assert highest_power_of_2_less_than(128) == 64", "assert highest_power_of_2_less_than(129) == 128", "assert highest_power_of_2_less_than(1000) == 512", "assert highest_power_of_2_less_than(1024) == 512", "assert highest_power_of_2_less_than(1025) == 1024", "assert highest_power_of_2_less_than(3) == 2", "assert highest_power_of_2_less_than(2) == 1", "assert highest_power_of_2_less_than(1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 3 strictly less than a given number.", "code": "def highest_power_of_3_less_than(n):\n    res = 1\n    while res * 3 < n:\n        res *= 3\n    return res", "task_id": "199_6f5d505b-d035-4a4e-9ab5-e7007532cf03", "test_setup_code": "", "test_list": ["assert highest_power_of_3_less_than(1) == 1", "assert highest_power_of_3_less_than(2) == 1", "assert highest_power_of_3_less_than(3) == 1", "assert highest_power_of_3_less_than(4) == 3", "assert highest_power_of_3_less_than(9) == 3", "assert highest_power_of_3_less_than(10) == 9", "assert highest_power_of_3_less_than(27) == 9", "assert highest_power_of_3_less_than(28) == 27", "assert highest_power_of_3_less_than(81) == 27", "assert highest_power_of_3_less_than(82) == 81", "assert highest_power_of_3_less_than(243) == 81", "assert highest_power_of_3_less_than(244) == 243", "assert highest_power_of_3_less_than(729) == 243", "assert highest_power_of_3_less_than(1000) == 729", "assert highest_power_of_3_less_than(2187) == 729"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 4 less than or equal to a given number.", "code": "def highest_power_of_4(n):\n    res = 1\n    while res * 4 <= n:\n        res *= 4\n    return res", "task_id": "199_a6563213-460c-4528-9d03-fe8898ef5c19", "test_setup_code": "", "test_list": ["assert highest_power_of_4(1) == 1", "assert highest_power_of_4(4) == 4", "assert highest_power_of_4(16) == 16", "assert highest_power_of_4(15) == 4", "assert highest_power_of_4(64) == 64", "assert highest_power_of_4(63) == 16", "assert highest_power_of_4(255) == 64", "assert highest_power_of_4(256) == 256", "assert highest_power_of_4(1023) == 256", "assert highest_power_of_4(1024) == 1024", "assert highest_power_of_4(4096) == 4096", "assert highest_power_of_4(4095) == 1024", "assert highest_power_of_4(0) == 1", "assert highest_power_of_4(5) == 4", "assert highest_power_of_4(17) == 16"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 6 less than or equal to a given number.", "code": "def highest_power_of_6(n):\n    res = 1\n    while res * 6 <= n:\n        res *= 6\n    return res", "task_id": "199_d9c63252-f20c-4219-ad11-57228c22cd33", "test_setup_code": "", "test_list": ["assert highest_power_of_6(1) == 1", "assert highest_power_of_6(6) == 6", "assert highest_power_of_6(7) == 6", "assert highest_power_of_6(35) == 6", "assert highest_power_of_6(36) == 36", "assert highest_power_of_6(37) == 36", "assert highest_power_of_6(215) == 36", "assert highest_power_of_6(216) == 216", "assert highest_power_of_6(217) == 216", "assert highest_power_of_6(1295) == 216", "assert highest_power_of_6(1296) == 1296", "assert highest_power_of_6(1297) == 1296", "assert highest_power_of_6(7775) == 1296", "assert highest_power_of_6(7776) == 7776", "assert highest_power_of_6(7777) == 7776"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 7 less than or equal to a given number.", "code": "def highest_power_of_7(n):\n    res = 1\n    while res * 7 <= n:\n        res *= 7\n    return res", "task_id": "199_f197a11f-6826-4f8c-b650-0a58384b9fdb", "test_setup_code": "", "test_list": ["assert highest_power_of_7(1) == 1", "assert highest_power_of_7(7) == 7", "assert highest_power_of_7(8) == 7", "assert highest_power_of_7(49) == 49", "assert highest_power_of_7(50) == 49", "assert highest_power_of_7(343) == 343", "assert highest_power_of_7(344) == 343", "assert highest_power_of_7(2401) == 2401", "assert highest_power_of_7(2402) == 2401", "assert highest_power_of_7(0) == 1", "assert highest_power_of_7(999999) == 823543", "assert highest_power_of_7(1000000) == 823543", "assert highest_power_of_7(823543) == 823543", "assert highest_power_of_7(1_000_000_000) == 282475249", "assert highest_power_of_7(282475249) == 282475249"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 or 3 less than or equal to a given number.", "code": "def highest_power_of_2_or_3(n):\n    res = 1\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0 or (i % 3 == 0 and (i // 3) % 3 == 0):\n            res = i\n            break\n    return res", "task_id": "199_dd8eb566-17f9-4587-9ff0-304ba64cad85", "test_setup_code": "", "test_list": ["assert highest_power_of_2_or_3(1) == 1", "assert highest_power_of_2_or_3(2) == 2", "assert highest_power_of_2_or_3(3) == 3", "assert highest_power_of_2_or_3(4) == 4", "assert highest_power_of_2_or_3(5) == 4", "assert highest_power_of_2_or_3(6) == 4", "assert highest_power_of_2_or_3(7) == 4", "assert highest_power_of_2_or_3(8) == 8", "assert highest_power_of_2_or_3(9) == 9", "assert highest_power_of_2_or_3(10) == 9", "assert highest_power_of_2_or_3(15) == 9", "assert highest_power_of_2_or_3(16) == 16", "assert highest_power_of_2_or_3(27) == 27", "assert highest_power_of_2_or_3(28) == 27", "assert highest_power_of_2_or_3(32) == 32"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 and 3 (i.e., 6, 12, 24, etc.) less than or equal to a given number.", "code": "def highest_power_of_2_and_3(n):\n    res = 1\n    while res * 6 <= n:\n        res *= 6\n    return res", "task_id": "199_41b18181-bbea-4437-89a7-dc0eb3a860cb", "test_setup_code": "", "test_list": ["assert highest_power_of_2_and_3(1) == 1", "assert highest_power_of_2_and_3(6) == 6", "assert highest_power_of_2_and_3(7) == 6", "assert highest_power_of_2_and_3(12) == 6", "assert highest_power_of_2_and_3(36) == 36", "assert highest_power_of_2_and_3(72) == 36", "assert highest_power_of_2_and_3(144) == 72", "assert highest_power_of_2_and_3(150) == 72", "assert highest_power_of_2_and_3(216) == 216", "assert highest_power_of_2_and_3(432) == 216", "assert highest_power_of_2_and_3(0) == 1", "assert highest_power_of_2_and_3(5) == 1", "assert highest_power_of_2_and_3(18) == 6", "assert highest_power_of_2_and_3(300) == 216", "assert highest_power_of_2_and_3(500) == 216"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the minimum values in a given list.", "code": "def find_min_positions(lst):\n    min_val = min(lst)\n    min_result = [i for i, j in enumerate(lst) if j == min_val]\n    return min_result", "task_id": "200_86e75fdd-5781-42da-87ff-30ce657f1ac6", "test_setup_code": "", "test_list": ["assert find_min_positions([1, 2, 3, 1, 4, 1]) == [0, 3, 5]", "assert find_min_positions([5, 4, 3, 2, 1]) == [4]", "assert find_min_positions([2, 2, 2, 2, 2]) == [0, 1, 2, 3, 4]", "assert find_min_positions([10]) == [0]", "assert find_min_positions([3, 3, 2, 2, 1, 1]) == [4, 5]", "assert find_min_positions([1, 2, 3, 4, 5]) == [0]", "assert find_min_positions([5, 4, 3, 2, 1, 1, 1]) == [4, 5, 6]", "assert find_min_positions([0, -1, -2, -3, -4, -4]) == [4, 5]", "assert find_min_positions([-1, -1, -1, -1]) == [0, 1, 2, 3]", "assert find_min_positions([100, 200, 300, 100, 400, 100]) == [0, 3, 5]", "assert find_min_positions([1, 2, 3, 4, 5, 0]) == [5]", "assert find_min_positions([1, 1, 1, 1, 1, 0]) == [5]", "assert find_min_positions([2, 3, 1, 2, 1, 3]) == [2, 4]", "assert find_min_positions([9, 8, 7, 6, 5, 4, 3, 2, 1, 1]) == [8, 9]", "assert find_min_positions([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the even numbers in a given list.", "code": "def find_even_positions(lst):\n    even_result = [i for i, j in enumerate(lst) if j % 2 == 0]\n    return even_result", "task_id": "200_fdc3b10b-792e-4b2f-8ec4-b6aae1ddb2f2", "test_setup_code": "", "test_list": ["assert find_even_positions([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "assert find_even_positions([2, 4, 6, 8, 10]) == [0, 1, 2, 3, 4]", "assert find_even_positions([1, 3, 5, 7, 9]) == []", "assert find_even_positions([0, 1, 2, 3, 4, 5]) == [0, 2, 4]", "assert find_even_positions([10, 20, 30, 40, 50]) == [0, 1, 2, 3, 4]", "assert find_even_positions([1, 1, 1, 1, 1]) == []", "assert find_even_positions([2, 2, 2, 2, 2]) == [0, 1, 2, 3, 4]", "assert find_even_positions([1, 2, 1, 2, 1, 2]) == [1, 3, 5]", "assert find_even_positions([100, 200, 300, 400, 500]) == [0, 1, 2, 3, 4]", "assert find_even_positions([1, 3, 5, 7, 9, 2]) == [5]", "assert find_even_positions([]) == []", "assert find_even_positions([1]) == []", "assert find_even_positions([2]) == [0]", "assert find_even_positions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]", "assert find_even_positions([11, 22, 33, 44, 55, 66, 77, 88, 99, 110]) == [1, 3, 5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the odd numbers in a given list.", "code": "def find_odd_positions(lst):\n    odd_result = [i for i, j in enumerate(lst) if j % 2 != 0]\n    return odd_result", "task_id": "200_709d905b-f3ac-4cb7-8396-31d9e076ea8c", "test_setup_code": "", "test_list": ["assert find_odd_positions([1, 2, 3, 4, 5]) == [0, 2, 4]", "assert find_odd_positions([2, 4, 6, 8, 10]) == []", "assert find_odd_positions([1, 3, 5, 7, 9]) == [0, 1, 2, 3, 4]", "assert find_odd_positions([0, 1, 0, 1, 0]) == [1, 3]", "assert find_odd_positions([11, 22, 33, 44, 55]) == [0, 2, 4]", "assert find_odd_positions([]) == []", "assert find_odd_positions([1]) == [0]", "assert find_odd_positions([2]) == []", "assert find_odd_positions([1, 2, 1, 2, 1, 2]) == [0, 2, 4]", "assert find_odd_positions([100, 101, 102, 103, 104]) == [1, 3]", "assert find_odd_positions([1, 1, 1, 1, 1]) == [0, 1, 2, 3, 4]", "assert find_odd_positions([2, 2, 2, 2, 2]) == []", "assert find_odd_positions([-1, -2, -3, -4, -5]) == [0, 2, 4]", "assert find_odd_positions([0, 0, 0, 0, 0]) == []", "assert find_odd_positions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 2, 4, 6, 8]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the negative numbers in a given list.", "code": "def find_negative_positions(lst):\n    negative_result = [i for i, j in enumerate(lst) if j < 0]\n    return negative_result", "task_id": "200_57ca299c-48b0-4180-97c5-57681392d802", "test_setup_code": "", "test_list": ["assert find_negative_positions([1, -2, 3, -4, 5]) == [1, 3]", "assert find_negative_positions([-1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4]", "assert find_negative_positions([1, 2, 3, 4, 5]) == []", "assert find_negative_positions([]) == []", "assert find_negative_positions([0, -1, 0, -2, 0]) == [1, 3]", "assert find_negative_positions([1, 2, -3, 4, -5, 6, -7]) == [2, 4, 6]", "assert find_negative_positions([-1]) == [0]", "assert find_negative_positions([1]) == []", "assert find_negative_positions([0, 0, 0, 0, 0]) == []", "assert find_negative_positions([-1, 0, -2, 0, -3, 0]) == [0, 2, 4]", "assert find_negative_positions([1, -1, 1, -1, 1, -1]) == [1, 3, 5]", "assert find_negative_positions([100, -100, 200, -200, 300, -300]) == [1, 3, 5]", "assert find_negative_positions([1, 2, 3, 4, 5, -6, -7, -8, -9, -10]) == [5, 6, 7, 8, 9]", "assert find_negative_positions([-10, -9, -8, -7, -6, 5, 4, 3, 2, 1]) == [0, 1, 2, 3, 4]", "assert find_negative_positions([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == [1, 3, 5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the positive numbers in a given list.", "code": "def find_positive_positions(lst):\n    positive_result = [i for i, j in enumerate(lst) if j > 0]\n    return positive_result", "task_id": "200_3cb8d6d6-47f9-4141-a205-c4ee77405447", "test_setup_code": "", "test_list": ["assert find_positive_positions([1, -2, 3, 4, -5]) == [0, 2, 3]", "assert find_positive_positions([-1, -2, -3, -4, -5]) == []", "assert find_positive_positions([0, 0, 0, 0, 0]) == []", "assert find_positive_positions([1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]", "assert find_positive_positions([]) == []", "assert find_positive_positions([1]) == [0]", "assert find_positive_positions([-1]) == []", "assert find_positive_positions([0]) == []", "assert find_positive_positions([100, -100, 0, 50, -50]) == [0, 3]", "assert find_positive_positions([1, -1, 1, -1, 1, -1]) == [0, 2, 4]", "assert find_positive_positions([1, 1, 1, 1, 1]) == [0, 1, 2, 3, 4]", "assert find_positive_positions([-1, -1, -1, -1, -1]) == []", "assert find_positive_positions([0, 1, 0, 1, 0, 1]) == [1, 3, 5]", "assert find_positive_positions([1, 0, -1, 2, 0, -2, 3, 0, -3]) == [0, 3, 6]", "assert find_positive_positions([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == [0, 2, 4, 6, 8]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the palindrome strings in a given list.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef find_palindrome_positions(lst):\n    palindrome_result = [i for i, j in enumerate(lst) if is_palindrome(j)]\n    return palindrome_result", "task_id": "200_baced3a5-2a85-4cae-a237-bf50a1d31e04", "test_setup_code": "", "test_list": ["assert find_palindrome_positions(['racecar', 'hello', 'level', 'world', 'madam']) == [0, 2, 4]", "assert find_palindrome_positions(['a', 'b', 'c', 'd', 'e']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['abc', 'def', 'ghi']) == []", "assert find_palindrome_positions(['', 'a', 'aa', 'aaa']) == [0, 1, 2, 3]", "assert find_palindrome_positions(['noon', 'civic', 'deified', 'radar', 'level']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['palindrome', 'not', 'a', 'single', 'one']) == []", "assert find_palindrome_positions(['12321', '45654', '789987', '101', '202']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['abccba', 'xyzzyx', '1234321', 'notpalindrome', 'racecar']) == [0, 1, 2, 4]", "assert find_palindrome_positions(['a', 'bb', 'ccc', 'dddd', 'eeeee']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['palindrome', 'madam', 'racecar', 'refer', 'deed']) == [1, 2, 3, 4]", "assert find_palindrome_positions(['wow', 'noon', 'nope', 'yes', 'wow']) == [0, 1, 4]", "assert find_palindrome_positions(['', '', '', '', '']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['not', 'a', 'palindrome', 'in', 'sight']) == [1]", "assert find_palindrome_positions(['aba', 'cdc', 'efe', 'ghg', 'iji']) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions(['palindrome', 'level', 'rotor', 'civic', 'madam']) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the strings that start with a vowel in a given list.", "code": "def find_vowel_start_positions(lst):\n    vowels = 'aeiouAEIOU'\n    vowel_result = [i for i, j in enumerate(lst) if j[0] in vowels]\n    return vowel_result", "task_id": "200_61f7af4e-445e-47d5-a5d6-73348c09f413", "test_setup_code": "", "test_list": ["assert find_vowel_start_positions(['apple', 'banana', 'orange', 'umbrella', 'grape']) == [0, 2, 3]", "assert find_vowel_start_positions(['Apple', 'Banana', 'Orange', 'Umbrella', 'Grape']) == [0, 2, 3]", "assert find_vowel_start_positions(['banana', 'grape', 'kiwi', 'mango']) == []", "assert find_vowel_start_positions(['elephant', 'iguana', 'octopus', 'umbrella']) == [0, 1, 2, 3]", "assert find_vowel_start_positions(['Elephant', 'Iguana', 'Octopus', 'Umbrella']) == [0, 1, 2, 3]", "assert find_vowel_start_positions(['xylophone', 'yacht', 'zebra']) == []", "assert find_vowel_start_positions(['']) == []", "assert find_vowel_start_positions(['apple', 'Apple']) == [0, 1]", "assert find_vowel_start_positions(['banana', 'orange', 'umbrella', 'grape', 'apple']) == [1, 2, 4]", "assert find_vowel_start_positions(['umbrella', 'Orange', 'apple', 'grape', 'Elephant']) == [0, 1, 2, 4]", "assert find_vowel_start_positions(['kiwi', 'kiwi', 'kiwi']) == []", "assert find_vowel_start_positions(['kiwi', 'Apple', 'kiwi', 'Orange']) == [1, 3]", "assert find_vowel_start_positions(['']) == []", "assert find_vowel_start_positions(['A', 'E', 'I', 'O', 'U']) == [0, 1, 2, 3, 4]", "assert find_vowel_start_positions(['a', 'e', 'i', 'o', 'u']) == [0, 1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the numbers that are multiples of a given number k in a given list.", "code": "def find_multiple_of_k_positions(lst, k):\n    multiple_result = [i for i, j in enumerate(lst) if j % k == 0]\n    return multiple_result", "task_id": "200_0d2ec025-b938-41a5-94a7-1205e8f3ff74", "test_setup_code": "", "test_list": ["assert find_multiple_of_k_positions([1, 2, 3, 4, 5, 6], 2) == [1, 3, 5]", "assert find_multiple_of_k_positions([10, 15, 20, 25, 30], 5) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([1, 2, 3, 4, 5, 6], 3) == [2, 5]", "assert find_multiple_of_k_positions([0, 1, 2, 3, 4, 5], 1) == [0, 1, 2, 3, 4, 5]", "assert find_multiple_of_k_positions([10, 20, 30, 40, 50], 10) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([1, 3, 7, 9, 11], 2) == []", "assert find_multiple_of_k_positions([], 3) == []", "assert find_multiple_of_k_positions([1, 2, 3, 4, 5, 6], 7) == []", "assert find_multiple_of_k_positions([1, 2, 3, 4, 5, 6], 6) == [5]", "assert find_multiple_of_k_positions([12, 15, 18, 21, 24], 3) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([1, 4, 7, 10, 13], 4) == [1, 3]", "assert find_multiple_of_k_positions([2, 4, 6, 8, 10], 2) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([5, 10, 15, 20, 25], 5) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([7, 14, 21, 28, 35], 7) == [0, 1, 2, 3, 4]", "assert find_multiple_of_k_positions([1, 2, 3, 4, 5, 6], 5) == [4]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the longest strings in a given list.", "code": "def find_longest_string_positions(lst):\n    max_len = max(len(s) for s in lst)\n    longest_result = [i for i, s in enumerate(lst) if len(s) == max_len]\n    return longest_result", "task_id": "200_cfabb352-2d2c-4633-afe2-9e888023e901", "test_setup_code": "", "test_list": ["assert find_longest_string_positions(['a', 'bb', 'ccc', 'dd', 'eee']) == [2, 4]", "assert find_longest_string_positions(['short', 'longer', 'longest', 'tiny']) == [2]", "assert find_longest_string_positions(['same', 'size', 'test']) == [0, 1, 2]", "assert find_longest_string_positions(['', 'a', 'ab', 'abc', 'abcd']) == [4]", "assert find_longest_string_positions(['one', 'two', 'three', 'four']) == [2]", "assert find_longest_string_positions(['equal', 'equal', 'equal']) == [0, 1, 2]", "assert find_longest_string_positions(['a', 'ab', 'abc', 'abcd', 'abcde']) == [4]", "assert find_longest_string_positions(['', '', '', '']) == [0, 1, 2, 3]", "assert find_longest_string_positions(['a', 'bb', 'ccc', 'dddd', 'eeeee', 'ffffff']) == [5]", "assert find_longest_string_positions(['one', 'two', 'three', 'four', 'five']) == [2]", "assert find_longest_string_positions(['a', 'ab', 'abc', 'abcd', 'abc']) == [3]", "assert find_longest_string_positions(['a', 'ab', 'abc', 'abcd', 'abc', 'abcd']) == [3, 5]", "assert find_longest_string_positions(['single']) == [0]", "assert find_longest_string_positions(['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == [6]", "assert find_longest_string_positions(['short', 'tiny', 'minuscule', 'small', 'big']) == [2]"], "challenge_test_list": []}
{"text": "Write a function to remove odd characters in a string.", "code": "def remove_odd_characters(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "task_id": "202_fe8c0f55-b8ef-48c2-9afd-ad57c468d4ee", "test_setup_code": "", "test_list": ["assert remove_odd_characters('abcdef') == 'bdf'", "assert remove_odd_characters('1234567890') == '24680'", "assert remove_odd_characters('') == ''", "assert remove_odd_characters('a') == ''", "assert remove_odd_characters('ab') == 'b'", "assert remove_odd_characters('abc') == 'b'", "assert remove_odd_characters('abcd') == 'bd'", "assert remove_odd_characters('aabbcc') == 'abbc'", "assert remove_odd_characters('!@#$%^&*()') == '@$^*)'", "assert remove_odd_characters('The quick brown fox') == 'h uc rw o'", "assert remove_odd_characters('Remove odd characters') == 'eoeod hrces'", "assert remove_odd_characters('Python') == 'yhn'", "assert remove_odd_characters('12345') == '24'", "assert remove_odd_characters('A') == ''", "assert remove_odd_characters('AA') == 'A'"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "202_2d915d5a-9ce3-4792-a80a-ff6c4a8ed49d", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('aeiou') == ''", "assert remove_vowels('AEIOU') == ''", "assert remove_vowels('Python') == 'Pythn'", "assert remove_vowels('') == ''", "assert remove_vowels('bcdfg') == 'bcdfg'", "assert remove_vowels('Why do you ask?') == 'Why d y sk?'", "assert remove_vowels('HELLO WORLD') == 'HLL WRLD'", "assert remove_vowels('abcdefghijklmnopqrstuvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('12345') == '12345'", "assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_vowels('The quick brown fox jumps over the lazy dog') == 'Th qck brwn fx jmps vr th lzy dg'", "assert remove_vowels('A man a plan a canal Panama') == ' mn  pln  cnl Pnm'"], "challenge_test_list": []}
{"text": "Write a function to reverse a string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "202_f175249d-bd7a-4f54-bed5-89fe43b3de59", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('abcdefg') == 'gfedcba'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('hello world') == 'dlrow olleh'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('A man, a plan, a canal: Panama') == 'amanaP :lanac a ,nalp a ,nam A'", "assert reverse_string('Python Programming') == 'gnimmargorP nohtyP'", "assert reverse_string('  spaces  ') == '  secaps  '", "assert reverse_string('a\nb\nc') == 'c\nb\na'", "assert reverse_string('\ud83d\ude00\ud83d\ude42\ud83d\ude0e') == '\ud83d\ude0e\ud83d\ude42\ud83d\ude00'"], "challenge_test_list": []}
{"text": "Write a function to capitalize every alternate character in a string.", "code": "def capitalize_alternate(s: str) -> str:\n    return ''.join([char.upper() if i % 2 == 0 else char for i, char in enumerate(s)])", "task_id": "202_e728ff83-36a4-4f1f-bd3a-618c19c7c308", "test_setup_code": "", "test_list": ["assert capitalize_alternate('hello') == 'HeLlO'", "assert capitalize_alternate('abcdef') == 'AbCdEf'", "assert capitalize_alternate('a') == 'A'", "assert capitalize_alternate('') == ''", "assert capitalize_alternate('A') == 'A'", "assert capitalize_alternate('AaBbCc') == 'AaBbCc'", "assert capitalize_alternate('12345') == '12345'", "assert capitalize_alternate('a1b2c3') == 'A1B2C3'", "assert capitalize_alternate('!@#$%^') == '!@#$%^'", "assert capitalize_alternate('hello world') == 'HeLlO WoRlD'", "assert capitalize_alternate('HELLO') == 'HeLlO'", "assert capitalize_alternate('hElLo') == 'HeLlO'", "assert capitalize_alternate('python programming') == 'PyThOn PrOgRaMmInG'", "assert capitalize_alternate('capitalize every alternate character') == 'CaPiTaLiZe EvErY AlTeRnAtE ChArAcTeR'", "assert capitalize_alternate('123 abc DEF') == '123 AbC DeF'"], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char in vowels])", "task_id": "202_434a7cdd-9d7a-4061-9788-6314203b9720", "test_setup_code": "", "test_list": ["assert remove_consonants('hello') == 'eo'", "assert remove_consonants('world') == 'o'", "assert remove_consonants('aeiou') == 'aeiou'", "assert remove_consonants('AEIOU') == 'AEIOU'", "assert remove_consonants('bcdfghjklmnpqrstvwxyz') == ''", "assert remove_consonants('BCDFGHJKLMNPQRSTVWXYZ') == ''", "assert remove_consonants('') == ''", "assert remove_consonants('a') == 'a'", "assert remove_consonants('b') == ''", "assert remove_consonants('AbCdEfGhIjKlMnOpQrStUvWxYz') == 'AEIOU'", "assert remove_consonants('12345') == ''", "assert remove_consonants('a1e2i3o4u5') == 'aeiou'", "assert remove_consonants('The quick brown fox jumps over the lazy dog') == 'euioouoeaeo'", "assert remove_consonants('Python Programming') == 'ooi'", "assert remove_consonants('!@#$%^&*()') == ''"], "challenge_test_list": []}
{"text": "Write a function to double every character in a string.", "code": "def double_characters(s: str) -> str:\n    return ''.join([char * 2 for char in s])", "task_id": "202_d036e1d8-7952-4cec-9674-321e254999ba", "test_setup_code": "", "test_list": ["assert double_characters('hello') == 'hheelllloo'", "assert double_characters('') == ''", "assert double_characters('a') == 'aa'", "assert double_characters('123') == '112233'", "assert double_characters('!@#') == '!!@@##'", "assert double_characters(' ') == '  '", "assert double_characters('abc def') == 'aabbcc  ddeeff'", "assert double_characters('AaBbCc') == 'AAaaBBbbCCcc'", "assert double_characters('123abc!') == '112233aabbcc!!'", "assert double_characters('\ud83d\ude0a') == '\ud83d\ude0a\ud83d\ude0a'", "assert double_characters('\ud83d\ude0a\ud83d\ude0a') == '\ud83d\ude0a\ud83d\ude0a\ud83d\ude0a\ud83d\ude0a'", "assert double_characters('a\nb\tc') == 'aa\n\nbb\t\tcc'", "assert double_characters('a'*100) == 'aa'*100", "assert double_characters('z'*50) == 'zz'*50", "assert double_characters('The quick brown fox!') == 'TThhee  qquuiicckk  bbrroowwnn  ffooxx!!'"], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a string.", "code": "def remove_whitespace(s: str) -> str:\n    return ''.join(s.split())", "task_id": "202_ad258395-c4a6-4bb1-929c-b26bd0c30f40", "test_setup_code": "", "test_list": ["assert remove_whitespace('hello world') == 'helloworld'", "assert remove_whitespace('') == ''", "assert remove_whitespace(' ') == ''", "assert remove_whitespace('   ') == ''", "assert remove_whitespace('a b c') == 'abc'", "assert remove_whitespace('a  b  c') == 'abc'", "assert remove_whitespace('abc') == 'abc'", "assert remove_whitespace('   abc   ') == 'abc'", "assert remove_whitespace('abc\\ndef\\tghi') == 'abcdefghi'", "assert remove_whitespace('\\t\\n\\r\\f\\v') == ''", "assert remove_whitespace('Hello\\nWorld') == 'HelloWorld'", "assert remove_whitespace('  Hello  World  ') == 'HelloWorld'", "assert remove_whitespace('123 456 789') == '123456789'", "assert remove_whitespace('a\\tb\\nc\\rd') == 'abcd'", "assert remove_whitespace('multiple    spaces    between    words') == 'multiplesspacesbetweenwords'"], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "202_f65f8db9-8786-4452-acb3-a2ea960b6bfc", "test_setup_code": "", "test_list": ["assert replace_spaces_with_underscore('hello world') == 'hello_world'", "assert replace_spaces_with_underscore('') == ''", "assert replace_spaces_with_underscore(' ') == '_'", "assert replace_spaces_with_underscore('a b c') == 'a_b_c'", "assert replace_spaces_with_underscore('  leading and trailing  ') == '__leading_and_trailing__'", "assert replace_spaces_with_underscore('multiple   spaces') == 'multiple___spaces'", "assert replace_spaces_with_underscore('no_spaces') == 'no_spaces'", "assert replace_spaces_with_underscore('123 456 789') == '123_456_789'", "assert replace_spaces_with_underscore('special! @#$%^&*()') == 'special!_@#$%^&*()'", "assert replace_spaces_with_underscore('tab\tseparated') == 'tab\tseparated'", "assert replace_spaces_with_underscore('newline\nseparated') == 'newline\nseparated'", "assert replace_spaces_with_underscore('mix of \t spaces \n and tabs') == 'mix_of_\t_spaces_\n_and_tabs'", "assert replace_spaces_with_underscore('singleword') == 'singleword'", "assert replace_spaces_with_underscore('double  space') == 'double__space'", "assert replace_spaces_with_underscore('ends with space ') == 'ends_with_space_'"], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a string.", "code": "def remove_digits(s: str) -> str:\n    return ''.join([char for char in s if not char.isdigit()])", "task_id": "202_97c68be3-341c-4ebc-843d-357eea717155", "test_setup_code": "", "test_list": ["assert remove_digits('abc123') == 'abc'", "assert remove_digits('123abc') == 'abc'", "assert remove_digits('abc') == 'abc'", "assert remove_digits('') == ''", "assert remove_digits('123') == ''", "assert remove_digits('a1b2c3') == 'abc'", "assert remove_digits('!@#123') == '!@#'", "assert remove_digits('abc!@#') == 'abc!@#'", "assert remove_digits('a1b2c3!@#') == 'abc!@#'", "assert remove_digits('a1!2@3#') == 'a!@#'", "assert remove_digits('1a2b3c4d5e') == 'abcde'", "assert remove_digits('a1b2c3d4e5f6g7h8i9j0') == 'abcdefghij'", "assert remove_digits('0123456789') == ''", "assert remove_digits('a0b1c2d3e4f5g6h7i8j9k') == 'abcdefghijk'", "assert remove_digits('a1b2c3d4e5f6g7h8i9j0k!@#') == 'abcdefghijk!@#'"], "challenge_test_list": []}
{"text": "Write a function to remove all special characters from a string, leaving only alphanumeric characters.", "code": "def remove_special_characters(s: str) -> str:\n    return ''.join([char for char in s if char.isalnum()])", "task_id": "202_f0106786-e7ba-479d-afa6-78ea83ebe21c", "test_setup_code": "", "test_list": ["assert remove_special_characters('hello!') == 'hello'", "assert remove_special_characters('123#456') == '123456'", "assert remove_special_characters('abc$def') == 'abcdef'", "assert remove_special_characters('!@#$%^&*()') == ''", "assert remove_special_characters('a1b2c3') == 'a1b2c3'", "assert remove_special_characters('') == ''", "assert remove_special_characters('abc123') == 'abc123'", "assert remove_special_characters('abc 123') == 'abc123'", "assert remove_special_characters('a_b_c') == 'abc'", "assert remove_special_characters('a-b-c') == 'abc'", "assert remove_special_characters('a.b.c') == 'abc'", "assert remove_special_characters('a@b#c$d%e^f&g*h(i)j') == 'abcdefghij'", "assert remove_special_characters('1234567890') == '1234567890'", "assert remove_special_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'", "assert remove_special_characters('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'"], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of the given tuple.", "code": "def reverse_tuple_elements(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "205_f0678a67-e337-4802-a2f2-af8983011e69", "test_setup_code": "", "test_list": ["assert reverse_tuple_elements((1, 2, 3)) == (3, 2, 1)", "assert reverse_tuple_elements(('a', 'b', 'c')) == ('c', 'b', 'a')", "assert reverse_tuple_elements((True, False, True)) == (True, False, True)", "assert reverse_tuple_elements((1,)) == (1,)", "assert reverse_tuple_elements(()) == ()", "assert reverse_tuple_elements((1, 2, 3, 4, 5)) == (5, 4, 3, 2, 1)", "assert reverse_tuple_elements((None,)) == (None,)", "assert reverse_tuple_elements((1, 'a', True, None)) == (None, True, 'a', 1)", "assert reverse_tuple_elements((5, 4, 3, 2, 1)) == (1, 2, 3, 4, 5)", "assert reverse_tuple_elements(('apple', 'banana', 'cherry')) == ('cherry', 'banana', 'apple')", "assert reverse_tuple_elements((1.1, 2.2, 3.3)) == (3.3, 2.2, 1.1)", "assert reverse_tuple_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (10, 9, 8, 7, 6, 5, 4, 3, 2, 1)", "assert reverse_tuple_elements((1, 2, (3, 4), 5)) == (5, (3, 4), 2, 1)", "assert reverse_tuple_elements((1, [2, 3], 4)) == (4, [2, 3], 1)", "assert reverse_tuple_elements(('a', 1, 'b', 2, 'c', 3)) == (3, 'c', 2, 'b', 1, 'a')"], "challenge_test_list": []}
{"text": "Write a function to increment each element of the given tuple by 1.", "code": "def increment_tuple_elements(t: tuple) -> tuple:\n    return tuple(x + 1 for x in t)", "task_id": "205_67de3e70-223f-466f-865e-da519a1cdcc5", "test_setup_code": "", "test_list": ["assert increment_tuple_elements((1, 2, 3)) == (2, 3, 4)", "assert increment_tuple_elements((0, 0, 0)) == (1, 1, 1)", "assert increment_tuple_elements((-1, -2, -3)) == (0, -1, -2)", "assert increment_tuple_elements((100, 200, 300)) == (101, 201, 301)", "assert increment_tuple_elements((1,)) == (2,)", "assert increment_tuple_elements((0,)) == (1,)", "assert increment_tuple_elements((-1,)) == (0,)", "assert increment_tuple_elements((999, 1000, 1001)) == (1000, 1001, 1002)", "assert increment_tuple_elements((1, -1, 0)) == (2, 0, 1)", "assert increment_tuple_elements((1, 2, 3, 4, 5)) == (2, 3, 4, 5, 6)", "assert increment_tuple_elements((0, 1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5, 6)", "assert increment_tuple_elements((-5, -4, -3, -2, -1)) == (-4, -3, -2, -1, 0)", "assert increment_tuple_elements((10, 20, 30, 40, 50)) == (11, 21, 31, 41, 51)", "assert increment_tuple_elements((0, 0, 0, 0, 0)) == (1, 1, 1, 1, 1)", "assert increment_tuple_elements((1, 1, 1, 1, 1)) == (2, 2, 2, 2, 2)"], "challenge_test_list": []}
{"text": "Write a function to square each element of the given tuple.", "code": "def square_tuple_elements(t: tuple) -> tuple:\n    return tuple(x ** 2 for x in t)", "task_id": "205_9d71af48-0885-4d2e-8d46-36101cfa4d4e", "test_setup_code": "", "test_list": ["assert square_tuple_elements((1, 2, 3)) == (1, 4, 9)", "assert square_tuple_elements((0, 0, 0)) == (0, 0, 0)", "assert square_tuple_elements(()) == ()", "assert square_tuple_elements((5,)) == (25,)", "assert square_tuple_elements((-1, -2, -3)) == (1, 4, 9)", "assert square_tuple_elements((1.5, 2.5)) == (2.25, 6.25)", "assert square_tuple_elements((0, 1, 2, 3, 4, 5)) == (0, 1, 4, 9, 16, 25)", "assert square_tuple_elements((-10, 10)) == (100, 100)", "assert square_tuple_elements((0.5, -0.5)) == (0.25, 0.25)", "assert square_tuple_elements((99,)) == (9801,)", "assert square_tuple_elements((2, 0, 2)) == (4, 0, 4)", "assert square_tuple_elements((0.1, 0.2, 0.3)) == (0.010000000000000002, 0.04000000000000001, 0.09000000000000001)", "assert square_tuple_elements((-0, 0)) == (0, 0)", "assert square_tuple_elements((10, 20, 30, 40, 50)) == (100, 400, 900, 1600, 2500)", "assert square_tuple_elements((-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5)) == (25, 16, 9, 4, 1, 0, 1, 4, 9, 16, 25)"], "challenge_test_list": []}
{"text": "Write a function to negate each element of the given tuple.", "code": "def negate_tuple_elements(t: tuple) -> tuple:\n    return tuple(-x for x in t)", "task_id": "205_f05e0e4f-2c7b-40b6-9efd-5f3c35655d49", "test_setup_code": "", "test_list": ["assert negate_tuple_elements((1, 2, 3)) == (-1, -2, -3)", "assert negate_tuple_elements((-1, -2, -3)) == (1, 2, 3)", "assert negate_tuple_elements((0,)) == (0,)", "assert negate_tuple_elements((100, -100)) == (-100, 100)", "assert negate_tuple_elements((1, -1, 0)) == (-1, 1, 0)", "assert negate_tuple_elements((5, 10, 15, 20)) == (-5, -10, -15, -20)", "assert negate_tuple_elements((-5, -10, -15, -20)) == (5, 10, 15, 20)", "assert negate_tuple_elements((0, 0, 0)) == (0, 0, 0)", "assert negate_tuple_elements((1,)) == (-1,)", "assert negate_tuple_elements((-1,)) == (1,)", "assert negate_tuple_elements((999, -999)) == (-999, 999)", "assert negate_tuple_elements((2, 4, 6, 8, 10)) == (-2, -4, -6, -8, -10)", "assert negate_tuple_elements((-2, -4, -6, -8, -10)) == (2, 4, 6, 8, 10)", "assert negate_tuple_elements((0, 1, -1, 2, -2)) == (0, -1, 1, -2, 2)", "assert negate_tuple_elements((3, -3, 3, -3, 3)) == (-3, 3, -3, 3, -3)"], "challenge_test_list": []}
{"text": "Write a function to double each element of the given tuple.", "code": "def double_tuple_elements(t: tuple) -> tuple:\n    return tuple(x * 2 for x in t)", "task_id": "205_a1a612d9-0125-4ab2-923b-5b0b9b2552c6", "test_setup_code": "", "test_list": ["assert double_tuple_elements((1, 2, 3)) == (2, 4, 6)", "assert double_tuple_elements((0, 0, 0)) == (0, 0, 0)", "assert double_tuple_elements((-1, -2, -3)) == (-2, -4, -6)", "assert double_tuple_elements((100, 200, 300)) == (200, 400, 600)", "assert double_tuple_elements((1,)) == (2,)", "assert double_tuple_elements((1, 2, 3, 4, 5)) == (2, 4, 6, 8, 10)", "assert double_tuple_elements(()) == ()", "assert double_tuple_elements((1.5, 2.5, 3.5)) == (3.0, 5.0, 7.0)", "assert double_tuple_elements((1, -1, 1, -1)) == (2, -2, 2, -2)", "assert double_tuple_elements((0.1, 0.2, 0.3)) == (0.2, 0.4, 0.6)", "assert double_tuple_elements((999, -999, 0)) == (1998, -1998, 0)", "assert double_tuple_elements((2, 4, 6, 8, 10)) == (4, 8, 12, 16, 20)", "assert double_tuple_elements((1, 1, 1, 1, 1)) == (2, 2, 2, 2, 2)", "assert double_tuple_elements((-1, 0, 1)) == (-2, 0, 2)", "assert double_tuple_elements((123456, -123456, 0)) == (246912, -246912, 0)"], "challenge_test_list": []}
{"text": "Write a function to get the absolute value of each element in the given tuple.", "code": "def absolute_tuple_elements(t: tuple) -> tuple:\n    return tuple(abs(x) for x in t)", "task_id": "205_4b4aa456-4890-497a-a7a0-0fae818a2965", "test_setup_code": "", "test_list": ["assert absolute_tuple_elements((1, -2, 3, -4, 5)) == (1, 2, 3, 4, 5)", "assert absolute_tuple_elements((-1, -2, -3, -4, -5)) == (1, 2, 3, 4, 5)", "assert absolute_tuple_elements((0, 0, 0, 0, 0)) == (0, 0, 0, 0, 0)", "assert absolute_tuple_elements((100, -200, 300, -400, 500)) == (100, 200, 300, 400, 500)", "assert absolute_tuple_elements((1,)) == (1,)", "assert absolute_tuple_elements((-1,)) == (1,)", "assert absolute_tuple_elements((0,)) == (0,)", "assert absolute_tuple_elements((1, -1, 0, -1, 1)) == (1, 1, 0, 1, 1)", "assert absolute_tuple_elements((999, -999, 0, -999, 999)) == (999, 999, 0, 999, 999)", "assert absolute_tuple_elements((12345, -12345, 67890, -67890, 0)) == (12345, 12345, 67890, 67890, 0)", "assert absolute_tuple_elements((1, -2, 3, -4, 5, -6, 7, -8, 9, -10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)", "assert absolute_tuple_elements((-1000000, 1000000)) == (1000000, 1000000)", "assert absolute_tuple_elements((0, -1, 2, -3, 4, -5, 6, -7, 8, -9)) == (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)", "assert absolute_tuple_elements((1, -1, 1, -1, 1, -1, 1, -1, 1, -1)) == (1, 1, 1, 1, 1, 1, 1, 1, 1, 1)", "assert absolute_tuple_elements((0, -1, 1, -2, 2, -3, 3, -4, 4, -5, 5)) == (0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5)"], "challenge_test_list": []}
{"text": "Write a function to convert each element of the given tuple to a string.", "code": "def convert_tuple_elements_to_string(t: tuple) -> tuple:\n    return tuple(str(x) for x in t)", "task_id": "205_7328f9f6-2b0e-47f3-aabb-99f0b59071f9", "test_setup_code": "", "test_list": ["assert convert_tuple_elements_to_string((1, 2, 3)) == ('1', '2', '3')", "assert convert_tuple_elements_to_string(('a', 'b', 'c')) == ('a', 'b', 'c')", "assert convert_tuple_elements_to_string((True, False, None)) == ('True', 'False', 'None')", "assert convert_tuple_elements_to_string((1.1, 2.2, 3.3)) == ('1.1', '2.2', '3.3')", "assert convert_tuple_elements_to_string((1, 'a', 3.5, True)) == ('1', 'a', '3.5', 'True')", "assert convert_tuple_elements_to_string(()) == ()", "assert convert_tuple_elements_to_string((0,)) == ('0',)", "assert convert_tuple_elements_to_string((123456789,)) == ('123456789',)", "assert convert_tuple_elements_to_string((None,)) == ('None',)", "assert convert_tuple_elements_to_string((1, -2, 3)) == ('1', '-2', '3')", "assert convert_tuple_elements_to_string((1.0, -2.0, 3.0)) == ('1.0', '-2.0', '3.0')", "assert convert_tuple_elements_to_string((complex(1, 2), complex(3, 4))) == ('(1+2j)', '(3+4j)')", "assert convert_tuple_elements_to_string((b'byte',)) == (\"b'byte'\",)", "assert convert_tuple_elements_to_string((1, '1', 1.0, True, None)) == ('1', '1', '1.0', 'True', 'None')", "assert convert_tuple_elements_to_string(([], {}, ())) == ('[]', '{}', '()')"], "challenge_test_list": []}
{"text": "Write a function to halve each element of the given tuple.", "code": "def half_tuple_elements(t: tuple) -> tuple:\n    return tuple(x / 2 for x in t)", "task_id": "205_73e08e0b-63bb-4e34-b811-999543583065", "test_setup_code": "", "test_list": ["assert half_tuple_elements((2, 4, 6)) == (1.0, 2.0, 3.0)", "assert half_tuple_elements((10, 20, 30, 40)) == (5.0, 10.0, 15.0, 20.0)", "assert half_tuple_elements((1,)) == (0.5,)", "assert half_tuple_elements((0, 0, 0)) == (0.0, 0.0, 0.0)", "assert half_tuple_elements((-2, -4, -6)) == (-1.0, -2.0, -3.0)", "assert half_tuple_elements((100, 200, 300)) == (50.0, 100.0, 150.0)", "assert half_tuple_elements((0.5, 1.5, 2.5)) == (0.25, 0.75, 1.25)", "assert half_tuple_elements((1.1, 2.2, 3.3)) == (0.55, 1.1, 1.65)", "assert half_tuple_elements((1000, 2000, 3000)) == (500.0, 1000.0, 1500.0)", "assert half_tuple_elements((0.0, -1.0, 1.0)) == (0.0, -0.5, 0.5)", "assert half_tuple_elements((3, 6, 9, 12)) == (1.5, 3.0, 4.5, 6.0)", "assert half_tuple_elements((7, 14, 21)) == (3.5, 7.0, 10.5)", "assert half_tuple_elements((0,)) == (0.0,)", "assert half_tuple_elements((123456, 654321)) == (61728.0, 327160.5)", "assert half_tuple_elements((1.234, 5.678, 9.1011)) == (0.617, 2.839, 4.55055)"], "challenge_test_list": []}
{"text": "Write a function to cube each element of the given tuple.", "code": "def cube_tuple_elements(t: tuple) -> tuple:\n    return tuple(x ** 3 for x in t)", "task_id": "205_5bf1385f-cbcf-48f2-83fe-1070a88ac24e", "test_setup_code": "", "test_list": ["assert cube_tuple_elements((1, 2, 3)) == (1, 8, 27)", "assert cube_tuple_elements((0, 0, 0)) == (0, 0, 0)", "assert cube_tuple_elements((-1, -2, -3)) == (-1, -8, -27)", "assert cube_tuple_elements((1.5, 2.5)) == (3.375, 15.625)", "assert cube_tuple_elements((10,)) == (1000,)", "assert cube_tuple_elements(()) == ()", "assert cube_tuple_elements((0,)) == (0,)", "assert cube_tuple_elements((-5, 5)) == (-125, 125)", "assert cube_tuple_elements((2, 0, -2)) == (8, 0, -8)", "assert cube_tuple_elements((100, 200)) == (1000000, 8000000)", "assert cube_tuple_elements((0.1, 0.2, 0.3)) == (0.001, 0.008, 0.027)", "assert cube_tuple_elements((-0.5, 0.5)) == (-0.125, 0.125)", "assert cube_tuple_elements((7, 7, 7, 7)) == (343, 343, 343, 343)", "assert cube_tuple_elements((2, -3, 4, -5)) == (8, -27, 64, -125)", "assert cube_tuple_elements((0, 1, -1, 2, -2)) == (0, 1, -1, 8, -8)"], "challenge_test_list": []}
{"text": "Write a function to check if each element of the given tuple is even, returning a tuple of booleans.", "code": "def is_even_tuple_elements(t: tuple) -> tuple:\n    return tuple(x % 2 == 0 for x in t)", "task_id": "205_efe7d58c-c9b8-4709-9ec7-5367a5e46cd1", "test_setup_code": "", "test_list": ["assert is_even_tuple_elements((2, 4, 6)) == (True, True, True)", "assert is_even_tuple_elements((1, 3, 5)) == (False, False, False)", "assert is_even_tuple_elements((2, 3, 4)) == (True, False, True)", "assert is_even_tuple_elements((0, 1, 2)) == (True, False, True)", "assert is_even_tuple_elements((10, 15, 20)) == (True, False, True)", "assert is_even_tuple_elements((7, 8, 9)) == (False, True, False)", "assert is_even_tuple_elements((11, 13, 17)) == (False, False, False)", "assert is_even_tuple_elements((22, 24, 26)) == (True, True, True)", "assert is_even_tuple_elements((1, 2, 3, 4, 5)) == (False, True, False, True, False)", "assert is_even_tuple_elements((100, 200, 300)) == (True, True, True)", "assert is_even_tuple_elements((101, 201, 301)) == (False, False, False)", "assert is_even_tuple_elements((0,)) == (True,)", "assert is_even_tuple_elements((1,)) == (False,)", "assert is_even_tuple_elements(()) == ()", "assert is_even_tuple_elements((2, 4, 6, 8, 10, 12, 14)) == (True, True, True, True, True, True, True)"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "204_fdeb4417-7bd0-41cd-b4c9-7f90a71bf0e7", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('hll') == 0", "assert count_vowels('aeiou') == 5", "assert count_vowels('AEIOU') == 5", "assert count_vowels('') == 0", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 5", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('ThE qUiCk BrOwN fOx JuMpS oVeR tHe LaZy DoG') == 11", "assert count_vowels('1234567890') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('aEiOu12345') == 5", "assert count_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit.') == 20", "assert count_vowels('Python Programming is fun!') == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "204_4c3945f4-009a-4ab4-a849-6acb0a19937a", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test') == 4", "assert count_words('   Leading and trailing spaces   ') == 4", "assert count_words('Multiple   spaces between words') == 4", "assert count_words('Punctuation, should not affect the count!') == 6", "assert count_words('Numbers 123 and symbols #@$ are words too') == 7", "assert count_words('New\nline\ncharacters\nare\nwords') == 5", "assert count_words('Tabs\tare\talso\twords') == 4", "assert count_words('Mix of spaces\nand\ttabs') == 4", "assert count_words('SingleWord') == 1", "assert count_words('Two words') == 2", "assert count_words('A very very very long string with many many words to test the function properly') == 14", "assert count_words('Edge case with a single character: a') == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a given string.", "code": "def count_uppercase(s: str) -> int:\n    return sum(1 for char in s if char.isupper())", "task_id": "204_25e3cb2a-40a8-49fa-b040-8f72d2131512", "test_setup_code": "", "test_list": ["assert count_uppercase('Hello World') == 2", "assert count_uppercase('HELLO') == 5", "assert count_uppercase('hello') == 0", "assert count_uppercase('') == 0", "assert count_uppercase('12345') == 0", "assert count_uppercase('123ABC') == 3", "assert count_uppercase('abcDEF') == 3", "assert count_uppercase('aBcDeFgHiJ') == 5", "assert count_uppercase('A') == 1", "assert count_uppercase('a') == 0", "assert count_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 26", "assert count_uppercase('abcdefghijklmnopqrstuvwxyz') == 0", "assert count_uppercase('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == 26", "assert count_uppercase('This Is A Test String') == 5", "assert count_uppercase('UPPERCASE and lowercase') == 9"], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a given string.", "code": "def count_lowercase(s: str) -> int:\n    return sum(1 for char in s if char.islower())", "task_id": "204_3b30fc57-eebd-448e-b2cb-0a4d81f9e06c", "test_setup_code": "", "test_list": ["assert count_lowercase('Hello World') == 8", "assert count_lowercase('HELLO WORLD') == 0", "assert count_lowercase('hello world') == 10", "assert count_lowercase('12345') == 0", "assert count_lowercase('') == 0", "assert count_lowercase('a') == 1", "assert count_lowercase('A') == 0", "assert count_lowercase('aA') == 1", "assert count_lowercase('Aa') == 1", "assert count_lowercase('The quick brown fox jumps over the lazy dog') == 35", "assert count_lowercase('Python3.8') == 6", "assert count_lowercase('!@#$%^&*()') == 0", "assert count_lowercase('lowerCASE') == 5", "assert count_lowercase('MixedCASE123') == 5", "assert count_lowercase('This is a Test String with 12345 Numbers!') == 25"], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a given string.", "code": "def count_digits(s: str) -> int:\n    return sum(1 for char in s if char.isdigit())", "task_id": "204_c20e02f0-7736-47b8-8a2a-0f38a1ad8e44", "test_setup_code": "", "test_list": ["assert count_digits('123abc') == 3", "assert count_digits('abc') == 0", "assert count_digits('') == 0", "assert count_digits('1a2b3c4d5e') == 5", "assert count_digits('00000') == 5", "assert count_digits('no digits here!') == 0", "assert count_digits('1234567890') == 10", "assert count_digits('a1b2c3d4e5f6g7h8i9j0') == 10", "assert count_digits('!@#$%^&*()') == 0", "assert count_digits('123 456 789') == 9", "assert count_digits('12.34.56') == 6", "assert count_digits('1a2b3c4d5e6f7g8h9i0j') == 10", "assert count_digits('a1!b2@c3#d4$e5%f6^g7&h8*i9(j0)') == 10", "assert count_digits('abcdefghijklmnopqrstuvwxyz') == 0", "assert count_digits('ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890') == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in a given string.", "code": "def count_spaces(s: str) -> int:\n    return sum(1 for char in s if char == ' ')", "task_id": "204_02fde9df-c1cc-44f9-b423-18597b1f6d05", "test_setup_code": "", "test_list": ["assert count_spaces('hello world') == 1", "assert count_spaces('') == 0", "assert count_spaces('no_spaces_here') == 0", "assert count_spaces(' ') == 1", "assert count_spaces('   ') == 3", "assert count_spaces('a b c d e f g') == 6", "assert count_spaces(' leading space') == 1", "assert count_spaces('trailing space ') == 1", "assert count_spaces(' multiple   spaces ') == 4", "assert count_spaces('one space') == 1", "assert count_spaces('two  spaces') == 2", "assert count_spaces('three   spaces') == 3", "assert count_spaces('spaces\twith\ttabs') == 2", "assert count_spaces('new\nline\nspaces') == 2", "assert count_spaces('mix of spaces and\nnew lines') == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of special characters (non-alphanumeric) in a given string.", "code": "def count_special_characters(s: str) -> int:\n    return sum(1 for char in s if not char.isalnum())", "task_id": "204_6d3cc096-7f18-4d20-80e4-77fdb9839add", "test_setup_code": "", "test_list": ["assert count_special_characters('hello!') == 1", "assert count_special_characters('hello world!') == 2", "assert count_special_characters('123456') == 0", "assert count_special_characters('') == 0", "assert count_special_characters('!@#$%^&*()') == 10", "assert count_special_characters('abc123') == 0", "assert count_special_characters('abc123!@#') == 3", "assert count_special_characters(' ') == 1", "assert count_special_characters('a b c') == 2", "assert count_special_characters('a!b@c#d$') == 4", "assert count_special_characters('a! b@ c# d$') == 7", "assert count_special_characters('a!b@c#d$e%f^g&h*i(j)k_l-m+n=o[p]q{r}s|t\\u:v;w\"x<y>z?') == 32", "assert count_special_characters('12345!67890') == 1", "assert count_special_characters('!@#$%^&*()_+{}|:\"<>?') == 20", "assert count_special_characters('The quick brown fox jumps over the lazy dog.') == 2"], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given substring in a string.", "code": "def count_substring(s: str, sub: str) -> int:\n    return s.count(sub)", "task_id": "204_1f09a14a-a26e-4ca3-96f2-1b3b39bc1f97", "test_setup_code": "", "test_list": ["assert count_substring('hello world', 'o') == 2", "assert count_substring('hello world', 'l') == 3", "assert count_substring('hello world', 'hello') == 1", "assert count_substring('hello world', 'world') == 1", "assert count_substring('hello world', ' ') == 1", "assert count_substring('hello world', 'z') == 0", "assert count_substring('aaaaaa', 'aa') == 5", "assert count_substring('aaaaaa', 'aaa') == 4", "assert count_substring('aaaaaa', 'aaaa') == 3", "assert count_substring('aaaaaa', 'aaaaa') == 2", "assert count_substring('aaaaaa', 'aaaaaa') == 1", "assert count_substring('mississippi', 'iss') == 2", "assert count_substring('mississippi', 'issi') == 1", "assert count_substring('mississippi', 'i') == 4", "assert count_substring('', 'a') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)", "task_id": "204_fc3d16e2-2507-49f0-a703-42e23bd2c221", "test_setup_code": "", "test_list": ["assert count_consonants('hello') == 3", "assert count_consonants('world') == 4", "assert count_consonants('AEIOU') == 0", "assert count_consonants('bcdfghjklmnpqrstvwxyz') == 21", "assert count_consonants('') == 0", "assert count_consonants('12345') == 0", "assert count_consonants('a1b2c3d4e5') == 3", "assert count_consonants('The quick brown fox jumps over the lazy dog') == 24", "assert count_consonants('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 21", "assert count_consonants('abcdefghijklmnopqrstuvwxyz') == 21", "assert count_consonants('!@#$%^&*()') == 0", "assert count_consonants('Python is fun!') == 7", "assert count_consonants('Consonants and vowels') == 12", "assert count_consonants('Why do you ask?') == 7", "assert count_consonants('') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given integer in a list.", "code": "def count_occurrences(lst: list, x: int) -> int:\n    return lst.count(x)", "task_id": "204_98c0cd45-bd95-487f-9996-d7d5df7439ef", "test_setup_code": "", "test_list": ["assert count_occurrences([1, 2, 3, 4, 5], 3) == 1", "assert count_occurrences([1, 1, 1, 1, 1], 1) == 5", "assert count_occurrences([1, 2, 3, 4, 5], 6) == 0", "assert count_occurrences([], 1) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 0) == 0", "assert count_occurrences([1, 2, 3, 2, 2, 2, 4, 2], 2) == 5", "assert count_occurrences([1, 2, 3, 4, 5], -1) == 0", "assert count_occurrences([1, 2, 3, 4, 5, 3, 3, 3], 3) == 4", "assert count_occurrences([0, 0, 0, 0, 0], 0) == 5", "assert count_occurrences([1], 1) == 1", "assert count_occurrences([1, 2, 3, 4, 5], 5) == 1", "assert count_occurrences([1, 2, 3, 4, 5], 4) == 1", "assert count_occurrences([1, 2, 3, 4, 5], 2) == 1", "assert count_occurrences([1, 2, 3, 4, 5, 1, 1, 1], 1) == 4", "assert count_occurrences([1, 2, 3, 4, 5, 1, 1, 1], 3) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd-positioned bits set to 1 in the binary representation of a given integer.", "code": "def count_odd_bits(n: int) -> int:\n    count = 0\n    position = 1\n    while n > 0:\n        if position % 2 == 1 and (n & 1) == 1:\n            count += 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "203_7e4e0de9-47c0-4355-9c17-d54631091293", "test_setup_code": "", "test_list": ["assert count_odd_bits(0) == 0", "assert count_odd_bits(1) == 1", "assert count_odd_bits(2) == 0", "assert count_odd_bits(3) == 1", "assert count_odd_bits(4) == 0", "assert count_odd_bits(5) == 1", "assert count_odd_bits(10) == 0", "assert count_odd_bits(15) == 2", "assert count_odd_bits(16) == 0", "assert count_odd_bits(31) == 2", "assert count_odd_bits(32) == 0", "assert count_odd_bits(63) == 3", "assert count_odd_bits(255) == 4", "assert count_odd_bits(1023) == 5", "assert count_odd_bits(2047) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the number of bits set to 1 in the binary representation of a given integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "203_d72e01df-3317-42fb-8086-93ad34930a2e", "test_setup_code": "", "test_list": ["assert count_set_bits(0) == 0", "assert count_set_bits(1) == 1", "assert count_set_bits(2) == 1", "assert count_set_bits(3) == 2", "assert count_set_bits(4) == 1", "assert count_set_bits(5) == 2", "assert count_set_bits(7) == 3", "assert count_set_bits(8) == 1", "assert count_set_bits(15) == 4", "assert count_set_bits(16) == 1", "assert count_set_bits(31) == 5", "assert count_set_bits(32) == 1", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10", "assert count_set_bits(1024) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the XOR of all elements in a given list of integers.", "code": "def xor_sum(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result ^= num\n    return result", "task_id": "203_3e4aa517-6117-4edc-bca2-85fe9b54a48c", "test_setup_code": "", "test_list": ["assert xor_sum([1, 2, 3, 4, 5]) == 1", "assert xor_sum([0, 0, 0, 0]) == 0", "assert xor_sum([1, 1, 1, 1]) == 0", "assert xor_sum([255, 255, 255, 255]) == 255", "assert xor_sum([1, 2, 4, 8, 16, 32, 64, 128]) == 255", "assert xor_sum([10, 20, 30, 40, 50]) == 4", "assert xor_sum([5, 9, 12, 15, 18]) == 11", "assert xor_sum([7, 7, 7, 7, 7, 7, 7]) == 7", "assert xor_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert xor_sum([100, 200, 300, 400, 500]) == 92", "assert xor_sum([1]) == 1", "assert xor_sum([1, 2]) == 3", "assert xor_sum([1, 2, 3]) == 0", "assert xor_sum([1024, 2048, 4096, 8192]) == 15360", "assert xor_sum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given 32-bit unsigned integer.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    for i in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "203_59084173-3a28-4901-bede-046e7154904b", "test_setup_code": "", "test_list": ["assert reverse_bits(0) == 0", "assert reverse_bits(1) == 2147483648", "assert reverse_bits(2) == 1073741824", "assert reverse_bits(3) == 3221225472", "assert reverse_bits(4294967295) == 4294967295", "assert reverse_bits(2147483648) == 1", "assert reverse_bits(123456789) == 365779719", "assert reverse_bits(987654321) == 2835799683", "assert reverse_bits(305419896) == 252579084", "assert reverse_bits(429496729) == 4026531846", "assert reverse_bits(0b10101010101010101010101010101010) == 0b01010101010101010101010101010101", "assert reverse_bits(0b11110000111100001111000011110000) == 0b00001111000011110000111100001111", "assert reverse_bits(0b00001111000011110000111100001111) == 0b11110000111100001111000011110000", "assert reverse_bits(0b10000000000000000000000000000001) == 0b10000000000000000000000000000001", "assert reverse_bits(0b01010101010101010101010101010101) == 0b10101010101010101010101010101010"], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "203_7e3a03c8-cd17-405a-97a6-056fc1905100", "test_setup_code": "", "test_list": ["assert is_power_of_two(1) == True", "assert is_power_of_two(2) == True", "assert is_power_of_two(3) == False", "assert is_power_of_two(4) == True", "assert is_power_of_two(5) == False", "assert is_power_of_two(8) == True", "assert is_power_of_two(16) == True", "assert is_power_of_two(31) == False", "assert is_power_of_two(32) == True", "assert is_power_of_two(0) == False", "assert is_power_of_two(-1) == False", "assert is_power_of_two(-16) == False", "assert is_power_of_two(1024) == True", "assert is_power_of_two(2048) == True", "assert is_power_of_two(2049) == False"], "challenge_test_list": []}
{"text": "Write a python function to swap all odd and even bits in a given integer.", "code": "def swap_odd_even_bits(n: int) -> int:\n    even_bits = n & 0xAAAAAAAA\n    odd_bits = n & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return even_bits | odd_bits", "task_id": "203_ab0bb050-7d95-4546-a058-a489d6a8d7e7", "test_setup_code": "", "test_list": ["assert swap_odd_even_bits(0) == 0", "assert swap_odd_even_bits(1) == 2", "assert swap_odd_even_bits(2) == 1", "assert swap_odd_even_bits(3) == 3", "assert swap_odd_even_bits(4) == 8", "assert swap_odd_even_bits(5) == 10", "assert swap_odd_even_bits(10) == 5", "assert swap_odd_even_bits(15) == 15", "assert swap_odd_even_bits(16) == 32", "assert swap_odd_even_bits(31) == 47", "assert swap_odd_even_bits(255) == 255", "assert swap_odd_even_bits(256) == 512", "assert swap_odd_even_bits(1023) == 2047", "assert swap_odd_even_bits(1024) == 2048", "assert swap_odd_even_bits(4294967295) == 4294967295"], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the binary representation of a given integer.", "code": "def count_trailing_zeros(n: int) -> int:\n    count = 0\n    while (n & 1) == 0 and n != 0:\n        count += 1\n        n >>= 1\n    return count", "task_id": "203_d229b1e3-1690-4dc1-9a4d-1ddacc7f8f50", "test_setup_code": "", "test_list": ["assert count_trailing_zeros(0) == 0", "assert count_trailing_zeros(1) == 0", "assert count_trailing_zeros(2) == 1", "assert count_trailing_zeros(4) == 2", "assert count_trailing_zeros(8) == 3", "assert count_trailing_zeros(16) == 4", "assert count_trailing_zeros(3) == 0", "assert count_trailing_zeros(6) == 1", "assert count_trailing_zeros(12) == 2", "assert count_trailing_zeros(24) == 3", "assert count_trailing_zeros(48) == 4", "assert count_trailing_zeros(1024) == 10", "assert count_trailing_zeros(1023) == 0", "assert count_trailing_zeros(0b1000000000000000) == 15", "assert count_trailing_zeros(0b1000000000000001) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the parity (even or odd) of the number of bits set to 1 in the binary representation of a given integer.", "code": "def parity(n: int) -> int:\n    count = 0\n    while n > 0:\n        count ^= n & 1\n        n >>= 1\n    return count", "task_id": "203_bb5496e0-9f0c-45a2-9b25-1558afa72353", "test_setup_code": "", "test_list": ["assert parity(0) == 0", "assert parity(1) == 1", "assert parity(2) == 1", "assert parity(3) == 0", "assert parity(4) == 1", "assert parity(5) == 0", "assert parity(6) == 0", "assert parity(7) == 1", "assert parity(8) == 1", "assert parity(15) == 0", "assert parity(16) == 1", "assert parity(31) == 0", "assert parity(32) == 1", "assert parity(63) == 0", "assert parity(64) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum distance between two consecutive 1's in the binary representation of a given integer.", "code": "def binary_gap(n: int) -> int:\n    max_gap = 0\n    current_gap = -1\n    while n > 0:\n        if n & 1 == 1:\n            if current_gap > max_gap:\n                max_gap = current_gap\n            current_gap = 0\n        elif current_gap != -1:\n            current_gap += 1\n        n >>= 1\n    return max_gap", "task_id": "203_a144df99-7532-431a-b017-868449ab1d39", "test_setup_code": "", "test_list": ["assert binary_gap(0) == 0", "assert binary_gap(1) == 0", "assert binary_gap(2) == 0", "assert binary_gap(3) == 1", "assert binary_gap(5) == 1", "assert binary_gap(6) == 1", "assert binary_gap(9) == 2", "assert binary_gap(10) == 1", "assert binary_gap(20) == 1", "assert binary_gap(21) == 2", "assert binary_gap(22) == 1", "assert binary_gap(1041) == 5", "assert binary_gap(15) == 1", "assert binary_gap(8) == 0", "assert binary_gap(529) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than or equal to a given integer.", "code": "def next_power_of_two(n: int) -> int:\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1", "task_id": "203_0d2b1404-4114-4006-95bb-05a967de32ce", "test_setup_code": "", "test_list": ["assert next_power_of_two(0) == 1", "assert next_power_of_two(1) == 1", "assert next_power_of_two(2) == 2", "assert next_power_of_two(3) == 4", "assert next_power_of_two(4) == 4", "assert next_power_of_two(5) == 8", "assert next_power_of_two(15) == 16", "assert next_power_of_two(16) == 16", "assert next_power_of_two(17) == 32", "assert next_power_of_two(31) == 32", "assert next_power_of_two(32) == 32", "assert next_power_of_two(33) == 64", "assert next_power_of_two(63) == 64", "assert next_power_of_two(64) == 64", "assert next_power_of_two(65) == 128"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples with a separator between them.", "code": "def concatenate_elements_with_separator(test_tup, sep):\n    res = tuple(i + sep + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_1f0f98e5-5791-426c-91e0-dc3d453cd659", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_separator(('a', 'b', 'c'), '-') == ('a-b', 'b-c')", "assert concatenate_elements_with_separator(('1', '2', '3', '4'), ',') == ('1,2', '2,3', '3,4')", "assert concatenate_elements_with_separator(('hello', 'world'), ' ') == ('hello world')", "assert concatenate_elements_with_separator(('x', 'y', 'z'), '') == ('xy', 'yz')", "assert concatenate_elements_with_separator(('apple', 'banana', 'cherry'), '_') == ('apple_banana', 'banana_cherry')", "assert concatenate_elements_with_separator(('a', 'b'), '-') == ('a-b',)", "assert concatenate_elements_with_separator(('single',), '-') == ()", "assert concatenate_elements_with_separator((), '-') == ()", "assert concatenate_elements_with_separator(('1', '1', '1'), '+') == ('1+1', '1+1')", "assert concatenate_elements_with_separator(('a', 'b', 'c', 'd', 'e'), '*') == ('a*b', 'b*c', 'c*d', 'd*e')", "assert concatenate_elements_with_separator(('123', '456', '789'), '|') == ('123|456', '456|789')", "assert concatenate_elements_with_separator(('a', 'b', 'c', 'd'), ' ') == ('a b', 'b c', 'c d')", "assert concatenate_elements_with_separator(('1', '2'), ' and ') == ('1 and 2',)", "assert concatenate_elements_with_separator(('x', 'y', 'z', 'w'), '-') == ('x-y', 'y-z', 'z-w')", "assert concatenate_elements_with_separator(('start', 'middle', 'end'), ' to ') == ('start to middle', 'middle to end')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include their indices in the result.", "code": "def concatenate_elements_with_indices(test_tup):\n    res = tuple(f'{i}{idx}-{j}{idx+1}' for idx, (i, j) in enumerate(zip(test_tup, test_tup[1:])))\n    return res", "task_id": "206_a0ab81f0-e5ba-427a-9b5e-f961b46c6b10", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_indices(('a', 'b', 'c')) == ('a0-b1', 'b1-c2')", "assert concatenate_elements_with_indices(('1', '2', '3', '4')) == ('10-21', '21-32', '32-43')", "assert concatenate_elements_with_indices(('x', 'y')) == ('x0-y1')", "assert concatenate_elements_with_indices(('single',)) == ()", "assert concatenate_elements_with_indices(('', '')) == ('0-1')", "assert concatenate_elements_with_indices(('a', 'b', 'c', 'd', 'e')) == ('a0-b1', 'b1-c2', 'c2-d3', 'd3-e4')", "assert concatenate_elements_with_indices(('1', '2', '3', '4', '5', '6')) == ('10-21', '21-32', '32-43', '43-54', '54-65')", "assert concatenate_elements_with_indices(('a', 'b', 'a', 'b')) == ('a0-b1', 'b1-a2', 'a2-b3')", "assert concatenate_elements_with_indices(('1', '1', '1', '1')) == ('10-11', '11-12', '12-13')", "assert concatenate_elements_with_indices(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == ('a0-b1', 'b1-c2', 'c2-d3', 'd3-e4', 'e4-f5', 'f5-g6')", "assert concatenate_elements_with_indices(('p', 'q', 'r', 's', 't', 'u')) == ('p0-q1', 'q1-r2', 'r2-s3', 's3-t4', 't4-u5')", "assert concatenate_elements_with_indices(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == ('a0-b1', 'b1-c2', 'c2-d3', 'd3-e4', 'e4-f5', 'f5-g6', 'g6-h7')", "assert concatenate_elements_with_indices(('a', 'a', 'a', 'a', 'a')) == ('a0-a1', 'a1-a2', 'a2-a3', 'a3-a4')", "assert concatenate_elements_with_indices(('1', '2', '3', '4', '5')) == ('10-21', '21-32', '32-43', '43-54')", "assert concatenate_elements_with_indices(('z', 'y', 'x', 'w')) == ('z0-y1', 'y1-x2', 'x2-w3')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but concatenate them in reverse order.", "code": "def concatenate_elements_reverse(test_tup):\n    res = tuple(j + i for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_7e661588-526d-4c57-a21c-7434eeb53fa0", "test_setup_code": "", "test_list": ["assert concatenate_elements_reverse(('a', 'b', 'c')) == ('ba', 'cb')", "assert concatenate_elements_reverse(('1', '2', '3', '4')) == ('21', '32', '43')", "assert concatenate_elements_reverse(('apple', 'banana', 'cherry')) == ('bananaapple', 'cherrybanana')", "assert concatenate_elements_reverse(('x', 'y')) == ('yx',)", "assert concatenate_elements_reverse(('single',)) == ()", "assert concatenate_elements_reverse(('', 'empty', '')) == ('empty', 'empty')", "assert concatenate_elements_reverse(('123', '456', '789')) == ('456123', '789456')", "assert concatenate_elements_reverse(('a', 'b', 'c', 'd', 'e')) == ('ba', 'cb', 'dc', 'ed')", "assert concatenate_elements_reverse(('1', '2', '3', '4', '5', '6')) == ('21', '32', '43', '54', '65')", "assert concatenate_elements_reverse(('cat', 'dog', 'fish')) == ('dogcat', 'fishdog')", "assert concatenate_elements_reverse(('hello', 'world')) == ('worldhello',)", "assert concatenate_elements_reverse(('a', 'b', 'c', 'd')) == ('ba', 'cb', 'dc')", "assert concatenate_elements_reverse(('123', '456', '789', '012')) == ('456123', '789456', '012789')", "assert concatenate_elements_reverse(('a', 'a', 'a', 'a')) == ('aa', 'aa', 'aa')", "assert concatenate_elements_reverse(('1', '2', '3', '4', '5')) == ('21', '32', '43', '54')"], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of every second adjacent element in the given tuples.", "code": "def concatenate_elements_skip_one(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[2:]))\n    return res", "task_id": "206_9156ca99-4a0f-4ce8-b5fd-9d24d895a331", "test_setup_code": "", "test_list": ["assert concatenate_elements_skip_one(()) == ()", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd')) == ('ac', 'bd')", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e', 'f')) == ('ac', 'bd', 'ce')", "assert concatenate_elements_skip_one(('a', 'b')) == ()", "assert concatenate_elements_skip_one(('a', 'b', 'c')) == ('ac',)", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e')) == ('ac', 'bd')", "assert concatenate_elements_skip_one(('1', '2', '3', '4', '5', '6')) == ('13', '24', '35')", "assert concatenate_elements_skip_one(('hello', 'world', 'foo', 'bar')) == ('hellofoo', 'worldbar')", "assert concatenate_elements_skip_one(('x', 'y', 'z', 'w', 'v', 'u')) == ('xz', 'yw', 'zv')", "assert concatenate_elements_skip_one(('apple', 'banana', 'cherry', 'date')) == ('applecherry', 'bananadate')", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == ('ac', 'bd', 'ce', 'df')", "assert concatenate_elements_skip_one(('1', '2', '3', '4', '5')) == ('13', '24')", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == ('ac', 'bd', 'ce')", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i')) == ('ac', 'bd', 'ce', 'df')", "assert concatenate_elements_skip_one(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')) == ('ac', 'bd', 'ce', 'df', 'eg')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include the length of each concatenated string.", "code": "def concatenate_elements_with_length(test_tup):\n    res = tuple(f'{i+j}-{len(i+j)}' for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_3e9e3ea9-212e-4c3d-af3f-5f7fc81a8668", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_length(('a', 'b', 'c')) == ('ab-2', 'bc-2')", "assert concatenate_elements_with_length(('hello', 'world')) == ('helloworld-10')", "assert concatenate_elements_with_length(('', 'a', 'b')) == ('a-1', 'ab-2')", "assert concatenate_elements_with_length(('a', '', 'b')) == ('a-1', 'b-1')", "assert concatenate_elements_with_length(('a', 'b', '')) == ('ab-2', 'b-1')", "assert concatenate_elements_with_length(('a', 'b', 'c', 'd')) == ('ab-2', 'bc-2', 'cd-2')", "assert concatenate_elements_with_length(('1', '2', '3', '4', '5')) == ('12-2', '23-2', '34-2', '45-2')", "assert concatenate_elements_with_length(('a', 'b', 'c', 'd', 'e', 'f')) == ('ab-2', 'bc-2', 'cd-2', 'de-2', 'ef-2')", "assert concatenate_elements_with_length(('abc', 'def', 'ghi')) == ('abcdef-6', 'defghi-6')", "assert concatenate_elements_with_length(('a', 'ab', 'abc')) == ('aab-3', 'ababc-5')", "assert concatenate_elements_with_length(('a', 'ab', 'abc', 'abcd')) == ('aab-3', 'ababc-5', 'abcabcd-7')", "assert concatenate_elements_with_length(('a', 'a', 'a', 'a')) == ('aa-2', 'aa-2', 'aa-2')", "assert concatenate_elements_with_length(('a', 'b', 'c', 'd', 'e')) == ('ab-2', 'bc-2', 'cd-2', 'de-2')", "assert concatenate_elements_with_length(('a',)) == ()", "assert concatenate_elements_with_length(()) == ()"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include the sum of the ASCII values of the concatenated string.", "code": "def concatenate_elements_with_sum(test_tup):\n    res = tuple(f'{i+j}-{sum(ord(c) for c in i+j)}' for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_c93ad580-77c8-4743-b03e-d1b02fac48d9", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_sum(('a', 'b', 'c')) == ('ab-195', 'bc-197')", "assert concatenate_elements_with_sum(('hello', 'world')) == ('helloworld-1116')", "assert concatenate_elements_with_sum(('123', '456', '789')) == ('123456-318', '456789-333')", "assert concatenate_elements_with_sum(('A', 'B', 'C', 'D')) == ('AB-131', 'BC-133', 'CD-135')", "assert concatenate_elements_with_sum(('x', 'y', 'z')) == ('xy-241', 'yz-243')", "assert concatenate_elements_with_sum(('1', '2', '3', '4')) == ('12-99', '23-101', '34-103')", "assert concatenate_elements_with_sum(('abc', 'def', 'ghi')) == ('abcdef-597', 'defghi-609')", "assert concatenate_elements_with_sum(('!', '@', '#', '$')) == ('!@-97', '@#-99', '#$-101')", "assert concatenate_elements_with_sum(('a', 'b')) == ('ab-195')", "assert concatenate_elements_with_sum(('longstring1', 'longstring2', 'longstring3')) == ('longstring1longstring2-2222', 'longstring2longstring3-2224')", "assert concatenate_elements_with_sum(('same', 'same', 'same')) == ('samesame-970', 'samesame-970')", "assert concatenate_elements_with_sum(('a', 'b', 'c', 'd', 'e')) == ('ab-195', 'bc-197', 'cd-199', 'de-201')", "assert concatenate_elements_with_sum(('123', 'abc', '456', 'def')) == ('123abc-597', 'abc456-597', '456def-609')", "assert concatenate_elements_with_sum(('a', 'ab', 'abc', 'abcd')) == ('aab-292', 'ababc-491', 'abcabcd-688')", "assert concatenate_elements_with_sum(('z', 'y', 'x', 'w', 'v')) == ('zy-243', 'yx-241', 'xw-239', 'wv-237')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to uppercase.", "code": "def concatenate_elements_with_upper(test_tup):\n    res = tuple((i + j).upper() for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_b598b55c-2931-4d21-b0fa-203a57115c7e", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_upper(('a', 'b', 'c')) == ('AB', 'BC')", "assert concatenate_elements_with_upper(('hello', 'world')) == ('HELLOWORLD',)", "assert concatenate_elements_with_upper(('python', 'is', 'fun')) == ('PYTHONIS', 'ISFUN')", "assert concatenate_elements_with_upper(('A', 'B', 'C', 'D')) == ('AB', 'BC', 'CD')", "assert concatenate_elements_with_upper(('123', '456', '789')) == ('123456', '456789')", "assert concatenate_elements_with_upper(('a', 'B', 'c', 'D')) == ('AB', 'BC', 'CD')", "assert concatenate_elements_with_upper(('x', 'y')) == ('XY',)", "assert concatenate_elements_with_upper(('single',)) == ()", "assert concatenate_elements_with_upper(('', 'empty', 'string')) == ('EMPTY', 'STRING')", "assert concatenate_elements_with_upper(('UPPER', 'lower')) == ('UPPERLOWER',)", "assert concatenate_elements_with_upper(('123', 'abc', '456', 'def')) == ('123ABC', 'ABC456', '456DEF')", "assert concatenate_elements_with_upper(('mix', 'ED', 'caseS')) == ('MIXED', 'EDCASES')", "assert concatenate_elements_with_upper(('same', 'same', 'same')) == ('SAMESAME', 'SAMESAME')", "assert concatenate_elements_with_upper(('a', 'b', 'c', 'd', 'e')) == ('AB', 'BC', 'CD', 'DE')", "assert concatenate_elements_with_upper(('1', '2', '3', '4', '5', '6')) == ('12', '23', '34', '45', '56')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to lowercase.", "code": "def concatenate_elements_with_lower(test_tup):\n    res = tuple((i + j).lower() for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_d7a7b4f7-1608-459c-aa51-46b582af612e", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_lower(('Hello', 'World')) == ('helloworld',)", "assert concatenate_elements_with_lower(('Python', 'Programming', 'Language')) == ('pythonprogramming', 'programminglanguage')", "assert concatenate_elements_with_lower(('a', 'b', 'c', 'd')) == ('ab', 'bc', 'cd')", "assert concatenate_elements_with_lower(('A', 'B', 'C', 'D')) == ('ab', 'bc', 'cd')", "assert concatenate_elements_with_lower(('123', '456', '789')) == ('123456', '456789')", "assert concatenate_elements_with_lower(('UPPER', 'lower', 'MiXeD')) == ('upperlower', 'lowermixed')", "assert concatenate_elements_with_lower(('same', 'same', 'same')) == ('samesame', 'samesame')", "assert concatenate_elements_with_lower(('one', 'TWO', 'Three')) == ('onetwo', 'twothree')", "assert concatenate_elements_with_lower(('a', 'B', 'c', 'D', 'e')) == ('ab', 'bc', 'cd', 'de')", "assert concatenate_elements_with_lower(('single',)) == ()", "assert concatenate_elements_with_lower(('First', 'Second', 'Third', 'Fourth')) == ('firstsecond', 'secondthird', 'thirdfourth')", "assert concatenate_elements_with_lower(('Mix', '123', '456', '789')) == ('mix123', '123456', '456789')", "assert concatenate_elements_with_lower(('Edge', 'Case', 'Test')) == ('edgecase', 'casetest')", "assert concatenate_elements_with_lower(('Empty', '', 'String')) == ('empty', 'string')", "assert concatenate_elements_with_lower(('a', 'A', 'a', 'A')) == ('aa', 'aa', 'aa')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to have alternating case starting with uppercase.", "code": "def concatenate_elements_with_alternating_case(test_tup):\n    def alternate_case(s):\n        return ''.join(c.upper() if i % 2 == 0 else c.lower() for i, c in enumerate(s))\n    res = tuple(alternate_case(i + j) for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_663db603-3d09-4f3d-9448-c330d82491b0", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_alternating_case(('a', 'b', 'c')) == ('Ab', 'Bc')", "assert concatenate_elements_with_alternating_case(('hello', 'world')) == ('HeLlOwOrLd',)", "assert concatenate_elements_with_alternating_case(('a', 'b', 'c', 'd')) == ('Ab', 'Bc', 'Cd')", "assert concatenate_elements_with_alternating_case(('python', 'is', 'fun')) == ('PyThOnIs', 'IsFuN')", "assert concatenate_elements_with_alternating_case(('a', '')) == ('A',)", "assert concatenate_elements_with_alternating_case(('', 'b')) == ('B',)", "assert concatenate_elements_with_alternating_case(('a', 'b', 'c', 'd', 'e')) == ('Ab', 'Bc', 'Cd', 'De')", "assert concatenate_elements_with_alternating_case(('123', '456')) == ('123456',)", "assert concatenate_elements_with_alternating_case(('UPPER', 'lower')) == ('UpPeRlOwEr',)", "assert concatenate_elements_with_alternating_case(('mix', 'ED', 'CaSe')) == ('MiXeD', 'EdCaSe')", "assert concatenate_elements_with_alternating_case(('a', 'b', 'c', 'd', 'e', 'f')) == ('Ab', 'Bc', 'Cd', 'De', 'Ef')", "assert concatenate_elements_with_alternating_case(('a', 'b', 'c', 'd', 'e', 'f', 'g')) == ('Ab', 'Bc', 'Cd', 'De', 'Ef', 'Fg')", "assert concatenate_elements_with_alternating_case(('x', 'y', 'z')) == ('Xy', 'Yz')", "assert concatenate_elements_with_alternating_case(('same', 'length')) == ('SaMeLeNgTh',)", "assert concatenate_elements_with_alternating_case(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h')) == ('Ab', 'Bc', 'Cd', 'De', 'Ef', 'Fg', 'Gh')"], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but reverse the concatenated string.", "code": "def concatenate_elements_with_reversed(test_tup):\n    res = tuple((i + j)[::-1] for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_4d886f54-fd7a-401e-8829-71f93e8ab9b2", "test_setup_code": "", "test_list": ["assert concatenate_elements_with_reversed(('a', 'b', 'c')) == ('ba', 'cb')", "assert concatenate_elements_with_reversed(('hello', 'world')) == ('dlrowolleh',)", "assert concatenate_elements_with_reversed(('123', '456', '789')) == ('654321', '987654')", "assert concatenate_elements_with_reversed(('ab', 'cd', 'ef', 'gh')) == ('dcba', 'fedc', 'hgfe')", "assert concatenate_elements_with_reversed(('x', 'y', 'z')) == ('yx', 'zy')", "assert concatenate_elements_with_reversed(('abc', 'def', 'ghi', 'jkl')) == ('fedcba', 'ihgfed', 'lkjihg')", "assert concatenate_elements_with_reversed(('1', '2', '3', '4', '5')) == ('21', '32', '43', '54')", "assert concatenate_elements_with_reversed(('a', 'b')) == ('ba',)", "assert concatenate_elements_with_reversed(('a', '')) == ('a',)", "assert concatenate_elements_with_reversed(('a', 'b', 'c', 'd', 'e', 'f')) == ('ba', 'cb', 'dc', 'ed', 'fe')", "assert concatenate_elements_with_reversed(('longstring1', 'longstring2')) == ('2gnirtsgnol1gnirtsgnol',)", "assert concatenate_elements_with_reversed(('same', 'same')) == ('emasemas',)", "assert concatenate_elements_with_reversed(('mix', 'and', 'match')) == ('dnixam', 'hctamdna')", "assert concatenate_elements_with_reversed(('edge', 'case', 'test')) == ('esacedge', 'tsetcase')", "assert concatenate_elements_with_reversed(('one', 'two', 'three', 'four')) == ('owteno', 'eerhtowt', 'ruofeerht')"], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a valid hexadecimal number (contains only 0-9, a-f, A-F).", "code": "import re\ndef check_hexadecimal(s: str) -> bool:\n    pattern = re.compile(r'^[0-9a-fA-F]+$')\n    return bool(pattern.match(s))", "task_id": "210_7d789a8f-89eb-4b83-97bf-17cb76c5705b", "test_setup_code": "", "test_list": ["assert check_hexadecimal('1A3F') == True", "assert check_hexadecimal('abcdef') == True", "assert check_hexadecimal('ABCDEF') == True", "assert check_hexadecimal('1234567890') == True", "assert check_hexadecimal('') == False", "assert check_hexadecimal('GHIJKL') == False", "assert check_hexadecimal('123G') == False", "assert check_hexadecimal('1a2b3c4d5e6f') == True", "assert check_hexadecimal('1A2B3C4D5E6F') == True", "assert check_hexadecimal('0') == True", "assert check_hexadecimal('f') == True", "assert check_hexadecimal('F') == True", "assert check_hexadecimal('1234567890abcdefABCDEF') == True", "assert check_hexadecimal('1234567890abcdefG') == False", "assert check_hexadecimal('1234567890abcdef ') == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a valid binary number (contains only 0 and 1).", "code": "import re\ndef check_binary(s: str) -> bool:\n    pattern = re.compile(r'^[01]+$')\n    return bool(pattern.match(s))", "task_id": "210_bd23d526-ccd8-4aae-9b88-898c1829e5b4", "test_setup_code": "", "test_list": ["assert check_binary('101010') == True", "assert check_binary('1111111') == True", "assert check_binary('0000000') == True", "assert check_binary('1010101010101010') == True", "assert check_binary('2') == False", "assert check_binary('10a010') == False", "assert check_binary('') == False", "assert check_binary(' ') == False", "assert check_binary('1010101010101010101010101010101010101010101010101010101010101010') == True", "assert check_binary('10101010101010101010101010101010101010101010101010101010101010102') == False", "assert check_binary('1010101010101010101010101010101010101010101010101010101010101010a') == False", "assert check_binary('0101010101010101010101010101010101010101010101010101010101010101') == True", "assert check_binary('10101010101010101010101010101010101010101010101010101010101010101') == True", "assert check_binary('101010101010101010101010101010101010101010101010101010101010101010') == True", "assert check_binary('1010101010101010101010101010101010101010101010101010101010101010101') == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only alphanumeric characters or underscores.", "code": "import re\ndef check_alphanumeric_underscore(s: str) -> bool:\n    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n    return bool(pattern.match(s))", "task_id": "210_dbf50805-7cd4-4195-ba57-c8dcc59ba90e", "test_setup_code": "", "test_list": ["assert check_alphanumeric_underscore('abc123') == True", "assert check_alphanumeric_underscore('abc_123') == True", "assert check_alphanumeric_underscore('abc-123') == False", "assert check_alphanumeric_underscore('abc 123') == False", "assert check_alphanumeric_underscore('') == False", "assert check_alphanumeric_underscore('123456') == True", "assert check_alphanumeric_underscore('______') == True", "assert check_alphanumeric_underscore('abc!123') == False", "assert check_alphanumeric_underscore('ABCdef') == True", "assert check_alphanumeric_underscore('abc@123') == False", "assert check_alphanumeric_underscore('a') == True", "assert check_alphanumeric_underscore('_') == True", "assert check_alphanumeric_underscore(' ') == False", "assert check_alphanumeric_underscore('abc_def_ghi') == True", "assert check_alphanumeric_underscore('123_456_789') == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only vowels (a, e, i, o, u).", "code": "import re\ndef check_vowels(s: str) -> bool:\n    pattern = re.compile(r'^[aeiouAEIOU]+$')\n    return bool(pattern.match(s))", "task_id": "210_3cdc8982-2740-48f1-95f8-5f1571741c3a", "test_setup_code": "", "test_list": ["assert check_vowels('aeiou') == True", "assert check_vowels('AEIOU') == True", "assert check_vowels('aei') == True", "assert check_vowels('AEI') == True", "assert check_vowels('aeiouAEIOU') == True", "assert check_vowels('a') == True", "assert check_vowels('e') == True", "assert check_vowels('i') == True", "assert check_vowels('o') == True", "assert check_vowels('u') == True", "assert check_vowels('b') == False", "assert check_vowels('aeioub') == False", "assert check_vowels('aeiou1') == False", "assert check_vowels('aeiou!') == False", "assert check_vowels('') == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only uppercase letters.", "code": "import re\ndef check_uppercase(s: str) -> bool:\n    pattern = re.compile(r'^[A-Z]+$')\n    return bool(pattern.match(s))", "task_id": "210_a5c6fc54-cb8c-49a0-a0e4-52c16fb0cb69", "test_setup_code": "", "test_list": ["assert check_uppercase('HELLO') == True", "assert check_uppercase('hello') == False", "assert check_uppercase('Hello') == False", "assert check_uppercase('HELLO123') == False", "assert check_uppercase('') == False", "assert check_uppercase('A') == True", "assert check_uppercase('a') == False", "assert check_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == True", "assert check_uppercase('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == False", "assert check_uppercase('1234567890') == False", "assert check_uppercase('!@#$%^&*()') == False", "assert check_uppercase('UPPERCASE') == True", "assert check_uppercase('lowercase') == False", "assert check_uppercase('MIXEDcase') == False", "assert check_uppercase('UPPER CASE') == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only lowercase letters.", "code": "import re\ndef check_lowercase(s: str) -> bool:\n    pattern = re.compile(r'^[a-z]+$')\n    return bool(pattern.match(s))", "task_id": "210_5e5e3761-989d-4f5f-8e10-5f76a39d91ef", "test_setup_code": "", "test_list": ["assert check_lowercase('hello') == True", "assert check_lowercase('world') == True", "assert check_lowercase('Hello') == False", "assert check_lowercase('WORLD') == False", "assert check_lowercase('') == False", "assert check_lowercase('123') == False", "assert check_lowercase('hello123') == False", "assert check_lowercase('hello world') == False", "assert check_lowercase('helloworld') == True", "assert check_lowercase('!@#$%^&*()') == False", "assert check_lowercase('lowercase') == True", "assert check_lowercase('lowerCase') == False", "assert check_lowercase('lower_case') == False", "assert check_lowercase('lowercase!') == False", "assert check_lowercase('lowercase123') == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only special characters (e.g., !, @, #, $, %, ^, &, *).", "code": "import re\ndef check_special_characters(s: str) -> bool:\n    pattern = re.compile(r'^[!@#$%^&*]+$')\n    return bool(pattern.match(s))", "task_id": "210_97ffffa7-c457-43f8-8e93-464443979e11", "test_setup_code": "", "test_list": ["assert check_special_characters('!@#$%^&*') == True", "assert check_special_characters('!@#') == True", "assert check_special_characters('abc') == False", "assert check_special_characters('123') == False", "assert check_special_characters('!@#abc') == False", "assert check_special_characters('') == False", "assert check_special_characters(' ') == False", "assert check_special_characters('!@#$%^&*()') == False", "assert check_special_characters('!@#$%^&* ') == False", "assert check_special_characters('!@#$%^&*123') == False", "assert check_special_characters('!') == True", "assert check_special_characters('!@#$%^&*a') == False", "assert check_special_characters('@#$%') == True", "assert check_special_characters('!@#$%^&*') == True", "assert check_special_characters('!@#$%^&* ') == False"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only digits.", "code": "import re\ndef check_digits(s: str) -> bool:\n    pattern = re.compile(r'^[0-9]+$')\n    return bool(pattern.match(s))", "task_id": "210_ea9a77d0-9f2b-4d7c-86c1-ad5b1dced438", "test_setup_code": "", "test_list": ["assert check_digits('123456') == True", "assert check_digits('0000') == True", "assert check_digits('123a456') == False", "assert check_digits('') == False", "assert check_digits(' ') == False", "assert check_digits('123 456') == False", "assert check_digits('1234567890') == True", "assert check_digits('12345678901234567890') == True", "assert check_digits('12345678901234567890a') == False", "assert check_digits('a12345678901234567890') == False", "assert check_digits('12345678901234567890 ') == False", "assert check_digits(' 12345678901234567890') == False", "assert check_digits('1') == True", "assert check_digits('a') == False", "assert check_digits('12345678901234567890123456789012345678901234567890123456789012345678901234567890') == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only whitespace characters (spaces, tabs, newlines).", "code": "import re\ndef check_whitespace(s: str) -> bool:\n    pattern = re.compile(r'^[\\s]+$')\n    return bool(pattern.match(s))", "task_id": "210_c12f1534-fe5e-4cba-b02e-3f99c055d6ba", "test_setup_code": "", "test_list": ["assert check_whitespace('   ') == True", "assert check_whitespace('\\t\\t\\t') == True", "assert check_whitespace('\\n\\n\\n') == True", "assert check_whitespace(' \\t\\n ') == True", "assert check_whitespace('') == False", "assert check_whitespace('a') == False", "assert check_whitespace('abc') == False", "assert check_whitespace(' \\ta\\n ') == False", "assert check_whitespace(' \\t \\n a') == False", "assert check_whitespace(' \\t \\n ') == True", "assert check_whitespace(' \\t\\n\\t ') == True", "assert check_whitespace(' \\t\\n\\t a') == False", "assert check_whitespace(' \\t\\n\\t\\n ') == True", "assert check_whitespace(' \\t\\n\\t\\na') == False", "assert check_whitespace(' \\t\\n\\t\\n ') == True"], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only alphabetic characters (a-z, A-Z).", "code": "import re\ndef check_alphabetic(s: str) -> bool:\n    pattern = re.compile(r'^[a-zA-Z]+$')\n    return bool(pattern.match(s))", "task_id": "210_1072f789-c2a0-4aa1-997c-02796585c50d", "test_setup_code": "", "test_list": ["assert check_alphabetic('Hello') == True", "assert check_alphabetic('world') == True", "assert check_alphabetic('123') == False", "assert check_alphabetic('Hello123') == False", "assert check_alphabetic('') == False", "assert check_alphabetic(' ') == False", "assert check_alphabetic('Hello World') == False", "assert check_alphabetic('!@#$%^&*()') == False", "assert check_alphabetic('abcdefghijklmnopqrstuvwxyz') == True", "assert check_alphabetic('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == True", "assert check_alphabetic('abcDEF') == True", "assert check_alphabetic('abc123def') == False", "assert check_alphabetic('abc def') == False", "assert check_alphabetic('abc_def') == False", "assert check_alphabetic('abc-def') == False"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common substring between two given strings.", "code": "def longest_common_substring(s1: str, s2: str) -> int:\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n    return max_length", "task_id": "207_5148d9e1-a10c-4d68-be13-2bcbfebb812b", "test_setup_code": "", "test_list": ["assert longest_common_substring('abc', 'abc') == 3", "assert longest_common_substring('abc', 'def') == 0", "assert longest_common_substring('abcdef', 'zabcy') == 3", "assert longest_common_substring('abcdef', 'ghijk') == 0", "assert longest_common_substring('abc', 'a') == 1", "assert longest_common_substring('abc', 'b') == 1", "assert longest_common_substring('abc', 'c') == 1", "assert longest_common_substring('abc', 'ab') == 2", "assert longest_common_substring('abc', 'bc') == 2", "assert longest_common_substring('abc', 'abcde') == 3", "assert longest_common_substring('abcde', 'cdeab') == 3", "assert longest_common_substring('', '') == 0", "assert longest_common_substring('a', '') == 0", "assert longest_common_substring('', 'a') == 0", "assert longest_common_substring('a'*100, 'a'*100) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest palindromic subsequence in a given string.", "code": "def longest_palindromic_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "task_id": "207_bbdb674d-ab1b-4cda-944a-f1a5f2aff89e", "test_setup_code": "", "test_list": ["assert longest_palindromic_subsequence('bbbab') == 4", "assert longest_palindromic_subsequence('cbbd') == 2", "assert longest_palindromic_subsequence('a') == 1", "assert longest_palindromic_subsequence('ab') == 1", "assert longest_palindromic_subsequence('racecar') == 7", "assert longest_palindromic_subsequence('character') == 3", "assert longest_palindromic_subsequence('') == 0", "assert longest_palindromic_subsequence('abcdefg') == 1", "assert longest_palindromic_subsequence('aaa') == 3", "assert longest_palindromic_subsequence('abba') == 4", "assert longest_palindromic_subsequence('abcba') == 5", "assert longest_palindromic_subsequence('aabbcc') == 2", "assert longest_palindromic_subsequence('aabbccdd') == 2", "assert longest_palindromic_subsequence('abcdedcba') == 9", "assert longest_palindromic_subsequence('aabbaa') == 6"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given array of integers.", "code": "def longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "207_c8a630f1-8afa-48b3-b48d-de0b0a8ec736", "test_setup_code": "", "test_list": ["assert longest_increasing_subsequence([]) == 0", "assert longest_increasing_subsequence([10]) == 1", "assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4", "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6", "assert longest_increasing_subsequence([2, 2, 2, 2, 2]) == 1", "assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5", "assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 1", "assert longest_increasing_subsequence([1, 2, 3, 1, 2, 3, 4, 5]) == 5", "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == 6", "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3", "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4", "assert longest_increasing_subsequence([10, 20, 30, 1, 2, 3, 4, 5]) == 5", "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two given strings.", "code": "def longest_common_subsequence(s1: str, s2: str) -> int:\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "207_842c4842-b1b7-4b8f-ac88-6d71b955a19d", "test_setup_code": "", "test_list": ["assert longest_common_subsequence('abcde', 'ace') == 3", "assert longest_common_subsequence('abc', 'abc') == 3", "assert longest_common_subsequence('abc', 'def') == 0", "assert longest_common_subsequence('', '') == 0", "assert longest_common_subsequence('a', 'a') == 1", "assert longest_common_subsequence('a', 'b') == 0", "assert longest_common_subsequence('abcdef', 'fbdamn') == 2", "assert longest_common_subsequence('abcdefg', 'gfedcba') == 1", "assert longest_common_subsequence('abc', '') == 0", "assert longest_common_subsequence('', 'abc') == 0", "assert longest_common_subsequence('abcde', 'acebd') == 3", "assert longest_common_subsequence('abc', 'ab') == 2", "assert longest_common_subsequence('abc', 'bc') == 2", "assert longest_common_subsequence('abcd', 'efgh') == 0", "assert longest_common_subsequence('abcdefgh', 'abdfh') == 5"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest repeating substring in a given string.", "code": "def longest_repeating_substring(s: str) -> int:\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    max_length = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n    return max_length", "task_id": "207_0412a26f-1e30-43de-8142-98a5ce1ec240", "test_setup_code": "", "test_list": ["assert longest_repeating_substring('banana') == 1", "assert longest_repeating_substring('abcdef') == 0", "assert longest_repeating_substring('aaaaa') == 4", "assert longest_repeating_substring('abcabcabc') == 3", "assert longest_repeating_substring('ababab') == 2", "assert longest_repeating_substring('a') == 0", "assert longest_repeating_substring('') == 0", "assert longest_repeating_substring('abcdeabcde') == 5", "assert longest_repeating_substring('xyzxyzxyzxyz') == 3", "assert longest_repeating_substring('abcdabcdabcdabcd') == 4", "assert longest_repeating_substring('aabbaabb') == 2", "assert longest_repeating_substring('mississippi') == 2", "assert longest_repeating_substring('123123123') == 3", "assert longest_repeating_substring('abababababab') == 6", "assert longest_repeating_substring('abcdabcabcd') == 3"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with a given sum in a given array of integers.", "code": "def longest_subarray_with_sum(arr: list[int], target: int) -> int:\n    sum_map = {}\n    curr_sum = 0\n    max_len = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum == target:\n            max_len = i + 1\n        if curr_sum - target in sum_map:\n            max_len = max(max_len, i - sum_map[curr_sum - target])\n        if curr_sum not in sum_map:\n            sum_map[curr_sum] = i\n    return max_len", "task_id": "207_3320d78f-2853-427f-8075-4f98058f4456", "test_setup_code": "", "test_list": ["assert longest_subarray_with_sum([1, -1, 5, -2, 3], 3) == 4", "assert longest_subarray_with_sum([-2, -1, 2, 1], 1) == 2", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 15) == 5", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 0) == 0", "assert longest_subarray_with_sum([], 0) == 0", "assert longest_subarray_with_sum([1, 2, 3, -3, 4], 3) == 4", "assert longest_subarray_with_sum([1, 2, 3, -3, 4], 6) == 3", "assert longest_subarray_with_sum([1, 2, 3, -3, 4], 7) == 0", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 5) == 2", "assert longest_subarray_with_sum([1, -1, 1, -1, 1, -1], 0) == 6", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 10) == 4", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 1) == 1", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 3) == 2", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 8) == 3", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 9) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters in a given string.", "code": "def longest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    char_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if s[i] in char_index and char_index[s[i]] >= start:\n            start = char_index[s[i]] + 1\n        char_index[s[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_0a96005f-8a0b-4ffa-a35d-450bb65c4177", "test_setup_code": "", "test_list": ["assert longest_substring_without_repeating_characters('abcabcbb') == 3", "assert longest_substring_without_repeating_characters('bbbbb') == 1", "assert longest_substring_without_repeating_characters('pwwkew') == 3", "assert longest_substring_without_repeating_characters('') == 0", "assert longest_substring_without_repeating_characters('a') == 1", "assert longest_substring_without_repeating_characters('au') == 2", "assert longest_substring_without_repeating_characters('dvdf') == 3", "assert longest_substring_without_repeating_characters('anviaj') == 5", "assert longest_substring_without_repeating_characters('tmmzuxt') == 5", "assert longest_substring_without_repeating_characters('abcbde') == 4", "assert longest_substring_without_repeating_characters('abcdefg') == 7", "assert longest_substring_without_repeating_characters('abac') == 3", "assert longest_substring_without_repeating_characters('aabbcc') == 2", "assert longest_substring_without_repeating_characters('aab') == 2", "assert longest_substring_without_repeating_characters('abba') == 2"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with distinct elements in a given array of integers.", "code": "def longest_subarray_with_distinct_elements(arr: list[int]) -> int:\n    n = len(arr)\n    element_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if arr[i] in element_index and element_index[arr[i]] >= start:\n            start = element_index[arr[i]] + 1\n        element_index[arr[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_a6b0806e-0891-431b-a95a-1140fa56e88f", "test_setup_code": "", "test_list": ["assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5]) == 5", "assert longest_subarray_with_distinct_elements([1, 2, 2, 3, 4, 5]) == 4", "assert longest_subarray_with_distinct_elements([1, 1, 1, 1, 1]) == 1", "assert longest_subarray_with_distinct_elements([1, 2, 3, 1, 2, 3, 4]) == 4", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 9", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 2]) == 8", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 3]) == 7", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 4]) == 6", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 5]) == 5", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 6]) == 4", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 7]) == 3", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 8]) == 2", "assert longest_subarray_with_distinct_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 1", "assert longest_subarray_with_distinct_elements([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence with exactly k distinct characters in a given string.", "code": "def longest_subsequence_with_k_distinct(s: str, k: int) -> int:\n    n = len(s)\n    char_count = {}\n    max_length = 0\n    start = 0\n    distinct_count = 0\n    for i in range(n):\n        if s[i] not in char_count or char_count[s[i]] == 0:\n            distinct_count += 1\n        char_count[s[i]] = char_count.get(s[i], 0) + 1\n        while distinct_count > k:\n            char_count[s[start]] -= 1\n            if char_count[s[start]] == 0:\n                distinct_count -= 1\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_08b5dc55-9a9a-48cc-8868-534a69f0071d", "test_setup_code": "", "test_list": ["assert longest_subsequence_with_k_distinct('abcba', 2) == 3", "assert longest_subsequence_with_k_distinct('aabbcc', 1) == 2", "assert longest_subsequence_with_k_distinct('aabbcc', 2) == 4", "assert longest_subsequence_with_k_distinct('aabbcc', 3) == 6", "assert longest_subsequence_with_k_distinct('abcabcabc', 2) == 2", "assert longest_subsequence_with_k_distinct('abcabcabc', 3) == 9", "assert longest_subsequence_with_k_distinct('aaaa', 1) == 4", "assert longest_subsequence_with_k_distinct('aaaa', 2) == 4", "assert longest_subsequence_with_k_distinct('abcde', 5) == 5", "assert longest_subsequence_with_k_distinct('abcde', 6) == 5", "assert longest_subsequence_with_k_distinct('a', 1) == 1", "assert longest_subsequence_with_k_distinct('a', 0) == 0", "assert longest_subsequence_with_k_distinct('', 1) == 0", "assert longest_subsequence_with_k_distinct('abaccc', 2) == 4", "assert longest_subsequence_with_k_distinct('abaccc', 3) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with at most k distinct elements in a given array of integers.", "code": "def longest_subarray_with_at_most_k_distinct(arr: list[int], k: int) -> int:\n    n = len(arr)\n    element_count = {}\n    max_length = 0\n    start = 0\n    distinct_count = 0\n    for i in range(n):\n        if arr[i] not in element_count or element_count[arr[i]] == 0:\n            distinct_count += 1\n        element_count[arr[i]] = element_count.get(arr[i], 0) + 1\n        while distinct_count > k:\n            element_count[arr[start]] -= 1\n            if element_count[arr[start]] == 0:\n                distinct_count -= 1\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_347a55f0-24b5-4ee8-b941-edb0e819e8c3", "test_setup_code": "", "test_list": ["assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 3], 2) == 4", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 3], 1) == 2", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 3, 4], 2) == 2", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 3, 4], 3) == 4", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 3, 4, 5], 3) == 5", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 3, 4, 5], 4) == 6", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 3, 4, 5], 5) == 7", "assert longest_subarray_with_at_most_k_distinct([1, 2, 2, 2, 3, 3, 4], 2) == 5", "assert longest_subarray_with_at_most_k_distinct([1, 2, 2, 2, 3, 3, 4], 1) == 3", "assert longest_subarray_with_at_most_k_distinct([1, 2, 3, 4, 5], 1) == 1", "assert longest_subarray_with_at_most_k_distinct([1, 1, 1, 1, 1], 1) == 5", "assert longest_subarray_with_at_most_k_distinct([], 1) == 0", "assert longest_subarray_with_at_most_k_distinct([1, 2, 3, 4, 5], 0) == 0", "assert longest_subarray_with_at_most_k_distinct([1, 2, 3, 4, 5], 5) == 5", "assert longest_subarray_with_at_most_k_distinct([1, 2, 1, 2, 1, 2, 1], 2) == 7"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose even bits are set.", "code": "def count_even_bits(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_d0eac248-f0ab-4efb-bc02-0958ad6036e8", "test_setup_code": "", "test_list": ["assert count_even_bits(0) == 0", "assert count_even_bits(1) == 1", "assert count_even_bits(2) == 2", "assert count_even_bits(3) == 2", "assert count_even_bits(4) == 4", "assert count_even_bits(5) == 4", "assert count_even_bits(6) == 8", "assert count_even_bits(7) == 8", "assert count_even_bits(8) == 16", "assert count_even_bits(9) == 16", "assert count_even_bits(10) == 32", "assert count_even_bits(11) == 32", "assert count_even_bits(12) == 64", "assert count_even_bits(13) == 64", "assert count_even_bits(14) == 128"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose odd bits are set.", "code": "def count_odd_bits(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_1859d6f4-d977-41e9-bc5c-cf9b0e9ae280", "test_setup_code": "", "test_list": ["assert count_odd_bits(0) == 0", "assert count_odd_bits(1) == 1", "assert count_odd_bits(2) == 2", "assert count_odd_bits(3) == 2", "assert count_odd_bits(4) == 4", "assert count_odd_bits(5) == 4", "assert count_odd_bits(6) == 8", "assert count_odd_bits(7) == 8", "assert count_odd_bits(8) == 16", "assert count_odd_bits(9) == 16", "assert count_odd_bits(10) == 32", "assert count_odd_bits(15) == 32", "assert count_odd_bits(16) == 64", "assert count_odd_bits(17) == 64", "assert count_odd_bits(20) == 256"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose mth and nth bits are set.", "code": "def count_bits_set(n, m):\n    if n == m:\n        return 1\n    count = pow(2, abs(n - m) - 1)\n    return count", "task_id": "211_9994c4b9-0313-4698-86bf-b38d4372f71b", "test_setup_code": "", "test_list": ["assert count_bits_set(2, 2) == 1", "assert count_bits_set(3, 1) == 2", "assert count_bits_set(1, 3) == 2", "assert count_bits_set(4, 4) == 1", "assert count_bits_set(5, 2) == 8", "assert count_bits_set(2, 5) == 8", "assert count_bits_set(0, 0) == 1", "assert count_bits_set(0, 1) == 1", "assert count_bits_set(1, 0) == 1", "assert count_bits_set(10, 10) == 1", "assert count_bits_set(10, 5) == 32", "assert count_bits_set(5, 10) == 32", "assert count_bits_set(15, 15) == 1", "assert count_bits_set(20, 10) == 512", "assert count_bits_set(10, 20) == 512"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose bits from start to end are set.", "code": "def count_bits_range(n, start, end):\n    if start == end:\n        return 1\n    count = pow(2, end - start - 1)\n    return count", "task_id": "211_5ddfcd3b-2207-48d2-9e3e-efa7036f24f9", "test_setup_code": "", "test_list": ["assert count_bits_range(0, 0, 0) == 1", "assert count_bits_range(1, 0, 1) == 1", "assert count_bits_range(2, 0, 2) == 2", "assert count_bits_range(3, 0, 3) == 4", "assert count_bits_range(4, 1, 3) == 2", "assert count_bits_range(5, 2, 5) == 4", "assert count_bits_range(6, 1, 4) == 4", "assert count_bits_range(7, 0, 4) == 8", "assert count_bits_range(8, 3, 7) == 8", "assert count_bits_range(9, 2, 6) == 8", "assert count_bits_range(10, 4, 8) == 16", "assert count_bits_range(11, 0, 5) == 16", "assert count_bits_range(12, 1, 6) == 16", "assert count_bits_range(13, 2, 7) == 16", "assert count_bits_range(14, 3, 8) == 16"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose alternate bits are set.", "code": "def count_bits_alternate(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_2dbfac9f-c7ea-484e-a0af-63e3f51e32a5", "test_setup_code": "", "test_list": ["assert count_bits_alternate(0) == 0", "assert count_bits_alternate(1) == 1", "assert count_bits_alternate(2) == 2", "assert count_bits_alternate(3) == 2", "assert count_bits_alternate(4) == 4", "assert count_bits_alternate(5) == 4", "assert count_bits_alternate(6) == 8", "assert count_bits_alternate(7) == 8", "assert count_bits_alternate(8) == 16", "assert count_bits_alternate(9) == 16", "assert count_bits_alternate(10) == 32", "assert count_bits_alternate(11) == 32", "assert count_bits_alternate(12) == 64", "assert count_bits_alternate(13) == 64", "assert count_bits_alternate(14) == 128"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose prime indexed bits are set.", "code": "def count_bits_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = sum(1 for i in range(n) if is_prime(i))\n    return pow(2, count)", "task_id": "211_1feaef1d-b2c4-44ca-b571-8f61470280bc", "test_setup_code": "", "test_list": ["assert count_bits_prime(0) == 1", "assert count_bits_prime(1) == 1", "assert count_bits_prime(2) == 2", "assert count_bits_prime(3) == 4", "assert count_bits_prime(4) == 4", "assert count_bits_prime(5) == 8", "assert count_bits_prime(6) == 8", "assert count_bits_prime(7) == 16", "assert count_bits_prime(10) == 32", "assert count_bits_prime(11) == 64", "assert count_bits_prime(13) == 128", "assert count_bits_prime(20) == 2048", "assert count_bits_prime(30) == 32768", "assert count_bits_prime(50) == 2097152", "assert count_bits_prime(100) == 2147483648"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose Fibonacci indexed bits are set.", "code": "def count_bits_fibonacci(n):\n    def fibonacci_sequence(limit):\n        seq = [0, 1]\n        while seq[-1] < limit:\n            seq.append(seq[-1] + seq[-2])\n        return seq[:-1]\n    fib_indices = fibonacci_sequence(n)\n    count = len(fib_indices)\n    return pow(2, count)", "task_id": "211_691eb7ca-cbf5-4806-9d85-456650f173da", "test_setup_code": "", "test_list": ["assert count_bits_fibonacci(1) == 2", "assert count_bits_fibonacci(2) == 4", "assert count_bits_fibonacci(3) == 4", "assert count_bits_fibonacci(4) == 4", "assert count_bits_fibonacci(5) == 8", "assert count_bits_fibonacci(6) == 8", "assert count_bits_fibonacci(7) == 8", "assert count_bits_fibonacci(8) == 16", "assert count_bits_fibonacci(9) == 16", "assert count_bits_fibonacci(10) == 16", "assert count_bits_fibonacci(13) == 32", "assert count_bits_fibonacci(21) == 64", "assert count_bits_fibonacci(34) == 128", "assert count_bits_fibonacci(55) == 256", "assert count_bits_fibonacci(89) == 512"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose power of two indexed bits are set.", "code": "def count_bits_power_of_two(n):\n    count = 0\n    i = 1\n    while i < n:\n        count += 1\n        i *= 2\n    return pow(2, count)", "task_id": "211_f8cab114-0576-4e17-a253-82564536bc19", "test_setup_code": "", "test_list": ["assert count_bits_power_of_two(1) == 2", "assert count_bits_power_of_two(2) == 2", "assert count_bits_power_of_two(3) == 4", "assert count_bits_power_of_two(4) == 4", "assert count_bits_power_of_two(5) == 4", "assert count_bits_power_of_two(7) == 8", "assert count_bits_power_of_two(8) == 8", "assert count_bits_power_of_two(9) == 8", "assert count_bits_power_of_two(15) == 16", "assert count_bits_power_of_two(16) == 16", "assert count_bits_power_of_two(17) == 16", "assert count_bits_power_of_two(31) == 32", "assert count_bits_power_of_two(32) == 32", "assert count_bits_power_of_two(33) == 32", "assert count_bits_power_of_two(63) == 64"], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose palindrome indexed bits are set.", "code": "def count_bits_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    count = sum(1 for i in range(n) if is_palindrome(i))\n    return pow(2, count)", "task_id": "211_b366fec8-4923-43c0-bc22-7951cedbd90e", "test_setup_code": "", "test_list": ["assert count_bits_palindrome(0) == 1", "assert count_bits_palindrome(1) == 2", "assert count_bits_palindrome(2) == 2", "assert count_bits_palindrome(3) == 4", "assert count_bits_palindrome(4) == 4", "assert count_bits_palindrome(5) == 8", "assert count_bits_palindrome(10) == 32", "assert count_bits_palindrome(11) == 64", "assert count_bits_palindrome(12) == 64", "assert count_bits_palindrome(20) == 1024", "assert count_bits_palindrome(21) == 2048", "assert count_bits_palindrome(100) == 32768", "assert count_bits_palindrome(101) == 65536", "assert count_bits_palindrome(200) == 1048576", "assert count_bits_palindrome(201) == 2097152"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition of two integer tuples.", "code": "def add_tuples(tup1, tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_e0f1c006-f53b-466c-bae2-6f60a299c4ca", "test_setup_code": "", "test_list": ["assert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert add_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert add_tuples((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert add_tuples((100, 200), (300, 400)) == (400, 600)", "assert add_tuples((1,), (2,)) == (3,)", "assert add_tuples((1, 2), (3, 4)) == (4, 6)", "assert add_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (5, 5, 5, 5)", "assert add_tuples((0, 0, 0, 0), (1, 1, 1, 1)) == (1, 1, 1, 1)", "assert add_tuples((1, 2, 3), (0, 0, 0)) == (1, 2, 3)", "assert add_tuples((1, 1, 1), (1, 1, 1)) == (2, 2, 2)", "assert add_tuples((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (6, 6, 6, 6, 6)", "assert add_tuples((1, 2, 3), (1, 2, 3)) == (2, 4, 6)", "assert add_tuples((1, -1, 1), (-1, 1, -1)) == (0, 0, 0)", "assert add_tuples((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == (7, 7, 7, 7, 7, 7)", "assert add_tuples((1, 2, 3, 4), (4, 3, 2, 1)) == (5, 5, 5, 5)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication of two integer tuples.", "code": "def multiply_tuples(tup1, tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_3f12f381-2fb1-43d3-8046-63595bad94d7", "test_setup_code": "", "test_list": ["assert multiply_tuples((1, 2, 3), (4, 5, 6)) == (4, 10, 18)", "assert multiply_tuples((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert multiply_tuples((1, 2, 3), (0, 0, 0)) == (0, 0, 0)", "assert multiply_tuples((1, -2, 3), (4, 5, -6)) == (4, -10, -18)", "assert multiply_tuples((1,), (2,)) == (2,)", "assert multiply_tuples((1, 2), (3, 4)) == (3, 8)", "assert multiply_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)", "assert multiply_tuples((1, 2, 3), (1, 2, 3)) == (1, 4, 9)", "assert multiply_tuples((1, 2, 3), (3, 2, 1)) == (3, 4, 3)", "assert multiply_tuples((2, 4, 6), (1, 0, -1)) == (2, 0, -6)", "assert multiply_tuples((1, 2, 3), (1, 2)) == (1, 4)", "assert multiply_tuples((1, 2), (1, 2, 3)) == (1, 4)", "assert multiply_tuples((1, 2, 3), (1, 2, 3, 4)) == (1, 4, 9)", "assert multiply_tuples((1, 2, 3, 4), (1, 2, 3)) == (1, 4, 9)", "assert multiply_tuples((), ()) == ()"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction of two integer tuples.", "code": "def subtract_tuples(tup1, tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_4e91d6be-a2ee-417d-b5c7-8fdebf16b936", "test_setup_code": "", "test_list": ["assert subtract_tuples((1, 2, 3), (1, 1, 1)) == (0, 1, 2)", "assert subtract_tuples((5, 6, 7), (2, 3, 4)) == (3, 3, 3)", "assert subtract_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert subtract_tuples((10, 20, 30), (5, 15, 25)) == (5, 5, 5)", "assert subtract_tuples((1, 1, 1), (2, 2, 2)) == (-1, -1, -1)", "assert subtract_tuples((-1, -2, -3), (-1, -1, -1)) == (0, -1, -2)", "assert subtract_tuples((100, 200, 300), (50, 150, 250)) == (50, 50, 50)", "assert subtract_tuples((1, 2), (1, 2)) == (0, 0)", "assert subtract_tuples((0,), (0,)) == (0,)", "assert subtract_tuples((1000, 2000, 3000), (500, 1500, 2500)) == (500, 500, 500)", "assert subtract_tuples((-10, -20, -30), (-5, -15, -25)) == (-5, -5, -5)", "assert subtract_tuples((1, 2, 3, 4), (1, 1, 1, 1)) == (0, 1, 2, 3)", "assert subtract_tuples((5, 5, 5, 5), (1, 2, 3, 4)) == (4, 3, 2, 1)", "assert subtract_tuples((0, 0, 0, 0), (1, 1, 1, 1)) == (-1, -1, -1, -1)", "assert subtract_tuples((123, 456, 789), (321, 654, 987)) == (-198, -198, -198)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division of two integer tuples.", "code": "def divide_tuples(tup1, tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_d5bcbfde-1688-437f-b790-ce2c6568a8d0", "test_setup_code": "", "test_list": ["assert divide_tuples((10, 20, 30), (2, 5, 10)) == (5.0, 4.0, 3.0)", "assert divide_tuples((0, 1, 2), (1, 1, 1)) == (0.0, 1.0, 2.0)", "assert divide_tuples((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)", "assert divide_tuples((1, 2, 3), (1, 2, 3)) == (1.0, 1.0, 1.0)", "assert divide_tuples((9, 8, 7), (3, 2, 1)) == (3.0, 4.0, 7.0)", "assert divide_tuples((5, 10, 15), (1, 2, 3)) == (5.0, 5.0, 5.0)", "assert divide_tuples((50, 25, 10), (5, 5, 5)) == (10.0, 5.0, 2.0)", "assert divide_tuples((8, 16, 24), (2, 4, 6)) == (4.0, 4.0, 4.0)", "assert divide_tuples((1, 4, 9), (1, 2, 3)) == (1.0, 2.0, 3.0)", "assert divide_tuples((1000, 2000, 3000), (10, 20, 30)) == (100.0, 100.0, 100.0)", "assert divide_tuples((3, 6, 9), (1, 2, 3)) == (3.0, 3.0, 3.0)", "assert divide_tuples((7, 14, 21), (1, 2, 3)) == (7.0, 7.0, 7.0)", "assert divide_tuples((0, 0, 0), (1, 1, 1)) == (0.0, 0.0, 0.0)", "assert divide_tuples((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)", "assert divide_tuples((100, 50, 25), (10, 5, 5)) == (10.0, 10.0, 5.0)"], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of two lists of strings.", "code": "def concatenate_lists(list1, list2):\n  res = [ele1 + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_e0bad365-7066-4256-84ed-05aa589f1d18", "test_setup_code": "", "test_list": ["assert concatenate_lists(['a', 'b'], ['c', 'd']) == ['ac', 'bd']", "assert concatenate_lists(['hello', 'world'], ['python', 'rocks']) == ['hellopython', 'worldrocks']", "assert concatenate_lists([], []) == []", "assert concatenate_lists(['single'], ['entry']) == ['singleentry']", "assert concatenate_lists(['1', '2', '3'], ['4', '5', '6']) == ['14', '25', '36']", "assert concatenate_lists(['', 'empty'], ['string', 'test']) == ['string', 'emptytest']", "assert concatenate_lists(['short'], ['longer']) == ['shortlonger']", "assert concatenate_lists(['same', 'length'], ['list', 'test']) == ['samelist', 'lengthtest']", "assert concatenate_lists(['a', 'b', 'c'], ['x', 'y', 'z']) == ['ax', 'by', 'cz']", "assert concatenate_lists(['prefix'], ['suffix']) == ['prefixsuffix']", "assert concatenate_lists(['123'], ['456']) == ['123456']", "assert concatenate_lists(['a', 'b', 'c'], ['1', '2', '3']) == ['a1', 'b2', 'c3']", "assert concatenate_lists(['mix', 'and'], ['match', 'test']) == ['mixmatch', 'andtest']", "assert concatenate_lists(['first', 'second'], ['third', 'fourth']) == ['firstthird', 'secondfourth']", "assert concatenate_lists(['one', 'two', 'three'], ['four', 'five', 'six']) == ['onefour', 'twofive', 'threesix']"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition of two lists of integers.", "code": "def add_lists(list1, list2):\n  res = [ele1 + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_5606ce30-9666-4e8f-89c0-d3060f139533", "test_setup_code": "", "test_list": ["assert add_lists([1, 2, 3], [4, 5, 6]) == [5, 7, 9]", "assert add_lists([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert add_lists([-1, -2, -3], [-4, -5, -6]) == [-5, -7, -9]", "assert add_lists([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]", "assert add_lists([100, 200, 300], [400, 500, 600]) == [500, 700, 900]", "assert add_lists([1], [2]) == [3]", "assert add_lists([1, 2, 3, 4], [4, 3, 2, 1]) == [5, 5, 5, 5]", "assert add_lists([0], [0]) == [0]", "assert add_lists([1, 2, 3], [1, 2, 3]) == [2, 4, 6]", "assert add_lists([10, 20, 30], [1, 2, 3]) == [11, 22, 33]", "assert add_lists([1, -1, 1], [-1, 1, -1]) == [0, 0, 0]", "assert add_lists([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [6, 6, 6, 6, 6]", "assert add_lists([1, 2], [3, 4]) == [4, 6]", "assert add_lists([1, 2, 3], [0, 0, 0]) == [1, 2, 3]", "assert add_lists([0, 0, 0], [1, 2, 3]) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication of two lists of integers.", "code": "def multiply_lists(list1, list2):\n  res = [ele1 * ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_7a66571a-8f1c-4154-adb8-695855452e8e", "test_setup_code": "", "test_list": ["assert multiply_lists([1, 2, 3], [4, 5, 6]) == [4, 10, 18]", "assert multiply_lists([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert multiply_lists([1, 2, 3], [0, 0, 0]) == [0, 0, 0]", "assert multiply_lists([-1, -2, -3], [4, 5, 6]) == [-4, -10, -18]", "assert multiply_lists([1, 2, 3], [-4, -5, -6]) == [-4, -10, -18]", "assert multiply_lists([1, 2], [1, 2, 3]) == [1, 4]", "assert multiply_lists([1, 2, 3], [1, 2]) == [1, 4]", "assert multiply_lists([], []) == []", "assert multiply_lists([1], [2]) == [2]", "assert multiply_lists([1, 2, 3, 4], [4, 3, 2, 1]) == [4, 6, 6, 4]", "assert multiply_lists([1000, 2000, 3000], [1, 2, 3]) == [1000, 4000, 9000]", "assert multiply_lists([1, 2, 3], [1000, 2000, 3000]) == [1000, 4000, 9000]", "assert multiply_lists([1, -2, 3], [-1, 2, -3]) == [-1, -4, -9]", "assert multiply_lists([1, 2, 3], [1.5, 2.5, 3.5]) == [1.5, 5.0, 10.5]", "assert multiply_lists([1.5, 2.5, 3.5], [1, 2, 3]) == [1.5, 5.0, 10.5]"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction of two lists of integers.", "code": "def subtract_lists(list1, list2):\n  res = [ele1 - ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_a2deb6f9-de3e-4e4d-8dc9-b182ac33d480", "test_setup_code": "", "test_list": ["assert subtract_lists([1, 2, 3], [1, 1, 1]) == [0, 1, 2]", "assert subtract_lists([5, 10, 15], [2, 4, 6]) == [3, 6, 9]", "assert subtract_lists([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert subtract_lists([-1, -2, -3], [-1, -2, -3]) == [0, 0, 0]", "assert subtract_lists([1, 2, 3], [3, 2, 1]) == [-2, 0, 2]", "assert subtract_lists([100, 200, 300], [50, 100, 150]) == [50, 100, 150]", "assert subtract_lists([1], [1]) == [0]", "assert subtract_lists([0], [1]) == [-1]", "assert subtract_lists([1], [0]) == [1]", "assert subtract_lists([10, 20, 30, 40], [5, 10, 15, 20]) == [5, 10, 15, 20]", "assert subtract_lists([1, 2, 3], [1, 2, 3, 4]) == [0, 0, 0]", "assert subtract_lists([10, 20, 30], [10, 20, 30, 40]) == [0, 0, 0]", "assert subtract_lists([1, 2, 3, 4], [1, 2, 3]) == [0, 0, 0]", "assert subtract_lists([0, 0, 0, 0], [0, 0, 0, 0]) == [0, 0, 0, 0]", "assert subtract_lists([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [-4, -2, 0, 2, 4]"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division of two lists of integers.", "code": "def divide_lists(list1, list2):\n  res = [ele1 / ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_6177de57-9f13-4b9e-b95e-d40f419ece5e", "test_setup_code": "", "test_list": ["assert divide_lists([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]", "assert divide_lists([1, 2, 3], [1, 1, 1]) == [1.0, 2.0, 3.0]", "assert divide_lists([0, 0, 0], [1, 2, 3]) == [0.0, 0.0, 0.0]", "assert divide_lists([10, 20, 30], [10, 20, 30]) == [1.0, 1.0, 1.0]", "assert divide_lists([100, 200, 300], [10, 20, 30]) == [10.0, 10.0, 10.0]", "assert divide_lists([1, 2, 3], [3, 2, 1]) == [0.3333333333333333, 1.0, 3.0]", "assert divide_lists([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]", "assert divide_lists([9, 18, 27], [3, 6, 9]) == [3.0, 3.0, 3.0]", "assert divide_lists([8, 16, 24], [2, 4, 8]) == [4.0, 4.0, 3.0]", "assert divide_lists([7, 14, 21], [1, 2, 3]) == [7.0, 7.0, 7.0]", "assert divide_lists([1, 4, 9], [1, 2, 3]) == [1.0, 2.0, 3.0]", "assert divide_lists([0, 1, 2], [1, 2, 3]) == [0.0, 0.5, 0.6666666666666666]", "assert divide_lists([1000, 2000, 3000], [10, 20, 30]) == [100.0, 100.0, 100.0]", "assert divide_lists([50, 100, 150], [5, 10, 15]) == [10.0, 10.0, 10.0]", "assert divide_lists([1, 1, 1], [1, 1, 1]) == [1.0, 1.0, 1.0]"], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of two lists of strings with a space in between.", "code": "def concatenate_string_lists(list1, list2):\n  res = [ele1 + ' ' + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_44bbbce0-61de-4455-8dec-f03df4e9a2cb", "test_setup_code": "", "test_list": ["assert concatenate_string_lists(['hello'], ['world']) == ['hello world']", "assert concatenate_string_lists(['a', 'b'], ['c', 'd']) == ['a c', 'b d']", "assert concatenate_string_lists(['foo'], ['bar']) == ['foo bar']", "assert concatenate_string_lists([], []) == []", "assert concatenate_string_lists(['one', 'two'], ['three', 'four']) == ['one three', 'two four']", "assert concatenate_string_lists([''], ['']) == [' ']", "assert concatenate_string_lists(['hello', 'world'], ['python', 'rocks']) == ['hello python', 'world rocks']", "assert concatenate_string_lists(['a', 'b', 'c'], ['x', 'y', 'z']) == ['a x', 'b y', 'c z']", "assert concatenate_string_lists(['apple', 'banana'], ['orange', 'grape']) == ['apple orange', 'banana grape']", "assert concatenate_string_lists(['short'], ['longer string']) == ['short longer string']", "assert concatenate_string_lists(['first', 'second'], ['third', 'fourth']) == ['first third', 'second fourth']", "assert concatenate_string_lists(['1', '2', '3'], ['4', '5', '6']) == ['1 4', '2 5', '3 6']", "assert concatenate_string_lists(['cat', 'dog'], ['mouse', 'elephant']) == ['cat mouse', 'dog elephant']", "assert concatenate_string_lists(['left'], ['right']) == ['left right']", "assert concatenate_string_lists([''], ['non-empty']) == [' non-empty']"], "challenge_test_list": []}
{"text": "Write a function to delete the largest element from the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef remove_largest_insert(heap, a):\n    hq.heapify(heap)\n    heap.remove(max(heap))\n    hq.heappush(heap, a)\n    return heap", "task_id": "209_178f9fcf-28f1-4394-966a-33359d738d0e", "test_setup_code": "", "test_list": ["assert remove_largest_insert([4, 1, 3, 2], 5) == [1, 2, 3, 5]", "assert remove_largest_insert([10, 20, 15, 30, 40], 25) == [10, 20, 15, 25, 30]", "assert remove_largest_insert([1, 2, 3, 4, 5], 0) == [0, 1, 2, 3, 4]", "assert remove_largest_insert([1], 2) == [2]", "assert remove_largest_insert([5, 7, 9, 1, 3], 6) == [1, 3, 6, 5, 7]", "assert remove_largest_insert([3, 1, 4, 1, 5, 9, 2], 6) == [1, 1, 2, 3, 4, 6]", "assert remove_largest_insert([8, 6, 7, 5, 3, 0, 9], 4) == [0, 3, 4, 5, 6, 7, 8]", "assert remove_largest_insert([2, 3, 4, 5, 6, 7, 8], 1) == [1, 2, 3, 4, 5, 6, 7]", "assert remove_largest_insert([1, 1, 1, 1, 1], 2) == [1, 1, 1, 1, 2]", "assert remove_largest_insert([100, 50, 25, 75, 60], 55) == [25, 50, 55, 60, 75]", "assert remove_largest_insert([9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 10]", "assert remove_largest_insert([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert remove_largest_insert([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [1, 2, 3, 4, 5, 6, 7, 8, 10]", "assert remove_largest_insert([10, 10, 10, 10, 10], 5) == [5, 10, 10, 10, 10]", "assert remove_largest_insert([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11]"], "challenge_test_list": []}
{"text": "Write a function to replace the largest element in the given heap with the sum of all elements in the heap.", "code": "import heapq as hq\n\ndef replace_max_with_sum(heap):\n    hq.heapify(heap)\n    total_sum = sum(heap)\n    heap.remove(max(heap))\n    hq.heappush(heap, total_sum)\n    return heap", "task_id": "209_24f19339-4ae4-47ea-8f0b-759f71fc4e22", "test_setup_code": "", "test_list": ["assert replace_max_with_sum([4, 10, 3, 5, 1]) == [1, 3, 4, 5, 23]", "assert replace_max_with_sum([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 15]", "assert replace_max_with_sum([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 150]", "assert replace_max_with_sum([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 25]", "assert replace_max_with_sum([1]) == [1]", "assert replace_max_with_sum([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert replace_max_with_sum([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -15]", "assert replace_max_with_sum([1, -1, 2, -2, 3, -3]) == [-3, -2, -1, 1, 2, 0]", "assert replace_max_with_sum([100, 200, 300, 400, 500]) == [100, 200, 300, 400, 1500]", "assert replace_max_with_sum([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1, 1, 1, 1, 1, 10]", "assert replace_max_with_sum([1, 2]) == [1, 3]", "assert replace_max_with_sum([2, 1]) == [1, 3]", "assert replace_max_with_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 45]", "assert replace_max_with_sum([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == [1, 3, 5, 7, 9, 11, 13, 15, 17, 100]", "assert replace_max_with_sum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 550]"], "challenge_test_list": []}
{"text": "Write a function to insert a new item into the given heap and return the heap sorted in ascending order.", "code": "import heapq as hq\n\ndef insert_and_sort(heap, a):\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    return sorted(heap)", "task_id": "209_ed8072e2-db14-4eb5-884a-c5862cb01c48", "test_setup_code": "", "test_list": ["assert insert_and_sort([3, 1, 4, 1, 5], 9) == [1, 1, 3, 4, 5, 9]", "assert insert_and_sort([], 1) == [1]", "assert insert_and_sort([2, 3, 5, 7, 11], 1) == [1, 2, 3, 5, 7, 11]", "assert insert_and_sort([10, 20, 30], 25) == [10, 20, 25, 30]", "assert insert_and_sort([1, 2, 3], 0) == [0, 1, 2, 3]", "assert insert_and_sort([5, 3, 8, 4], 6) == [3, 4, 5, 6, 8]", "assert insert_and_sort([1], 2) == [1, 2]", "assert insert_and_sort([2], 1) == [1, 2]", "assert insert_and_sort([3, 3, 3], 3) == [3, 3, 3, 3]", "assert insert_and_sort([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5, 5]", "assert insert_and_sort([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5, 6]", "assert insert_and_sort([1, 2, 3, 4, 5], 0) == [0, 1, 2, 3, 4, 5]", "assert insert_and_sort([10, 9, 8, 7, 6], 5) == [5, 6, 7, 8, 9, 10]", "assert insert_and_sort([1, 1, 1, 1], 2) == [1, 1, 1, 1, 2]", "assert insert_and_sort([1, 1, 1, 1], 0) == [0, 1, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a function to remove and return the smallest element from the given heap.", "code": "import heapq as hq\n\ndef remove_and_return_smallest(heap):\n    hq.heapify(heap)\n    return hq.heappop(heap)", "task_id": "209_d27c9ff1-97f1-451d-9c55-c6d601d62069", "test_setup_code": "", "test_list": ["assert remove_and_return_smallest([3, 2, 1, 5, 4]) == 1", "assert remove_and_return_smallest([10, 20, 30, 40, 50]) == 10", "assert remove_and_return_smallest([5, 4, 3, 2, 1]) == 1", "assert remove_and_return_smallest([1, 1, 1, 1, 1]) == 1", "assert remove_and_return_smallest([2]) == 2", "assert remove_and_return_smallest([0, -1, -2, -3, -4]) == -4", "assert remove_and_return_smallest([100, 50, 25, 75, 10]) == 10", "assert remove_and_return_smallest([8, 6, 7, 5, 3, 0, 9]) == 0", "assert remove_and_return_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert remove_and_return_smallest([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == 0", "assert remove_and_return_smallest([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == -5", "assert remove_and_return_smallest([50, 40, 30, 20, 10, 0, -10, -20, -30, -40, -50]) == -50", "assert remove_and_return_smallest([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 1", "assert remove_and_return_smallest([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5", "assert remove_and_return_smallest([1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000]) == 1000"], "challenge_test_list": []}
{"text": "Write a function to replace the smallest element in the given heap with a new item and return the new smallest element.", "code": "import heapq as hq\n\ndef replace_and_return_smallest(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap[0]", "task_id": "209_70de7a29-8821-47d7-b5f7-9f2ac582a51c", "test_setup_code": "", "test_list": ["assert replace_and_return_smallest([3, 1, 4, 1, 5, 9], 2) == 1", "assert replace_and_return_smallest([10, 20, 30, 40, 50], 5) == 5", "assert replace_and_return_smallest([1, 2, 3, 4, 5], 0) == 0", "assert replace_and_return_smallest([5, 6, 7, 8, 9], 10) == 6", "assert replace_and_return_smallest([2, 3, 4, 5, 6], 1) == 1", "assert replace_and_return_smallest([1], 0) == 0", "assert replace_and_return_smallest([1], 2) == 2", "assert replace_and_return_smallest([100, 200, 300, 400], 50) == 50", "assert replace_and_return_smallest([2, 3, 4, 5, 6, 7], 1) == 1", "assert replace_and_return_smallest([1, 1, 1, 1, 1], 0) == 0", "assert replace_and_return_smallest([1, 1, 1, 1, 1], 2) == 1", "assert replace_and_return_smallest([1, 2, 3, 4, 5], 6) == 2", "assert replace_and_return_smallest([1, 2, 3, 4, 5], 5) == 2", "assert replace_and_return_smallest([5, 4, 3, 2, 1], 0) == 0", "assert replace_and_return_smallest([5, 4, 3, 2, 1], 6) == 2"], "challenge_test_list": []}
{"text": "Write a function to double the smallest element in the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef double_and_insert(heap, a):\n    hq.heapify(heap)\n    smallest = hq.heappop(heap)\n    hq.heappush(heap, smallest * 2)\n    hq.heappush(heap, a)\n    return heap", "task_id": "209_6d35eac9-c48d-4018-91b1-f0587f061025", "test_setup_code": "", "test_list": ["assert double_and_insert([3, 1, 4, 1, 5], 2) == [2, 2, 4, 5, 6]", "assert double_and_insert([10, 20, 30], 5) == [10, 20, 30, 20]", "assert double_and_insert([1], 2) == [2, 2]", "assert double_and_insert([], 3) == [3]", "assert double_and_insert([0, 0, 0], 1) == [0, 0, 0, 0]", "assert double_and_insert([5, 7, 9, 1, 3], 8) == [2, 3, 9, 7, 5, 8]", "assert double_and_insert([2, 2, 2, 2], 1) == [2, 2, 2, 2, 2]", "assert double_and_insert([100, 50, 25], 10) == [25, 100, 50, 50]", "assert double_and_insert([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [0, 1, 3, 2, 5, 6, 7, 8, 9, 2]", "assert double_and_insert([4, 6, 8, 2, 10], 3) == [3, 4, 8, 10, 6, 4]", "assert double_and_insert([1, 1, 1, 1], 1) == [1, 1, 1, 1, 2]", "assert double_and_insert([1, 2, 3], 4) == [2, 2, 3, 4]", "assert double_and_insert([9, 7, 5, 3, 1], 6) == [2, 3, 5, 9, 7, 6]", "assert double_and_insert([2, 4, 6, 8, 10], 1) == [2, 4, 6, 8, 10, 4]", "assert double_and_insert([3, 6, 9, 12], 0) == [0, 3, 9, 12, 6]"], "challenge_test_list": []}
{"text": "Write a function to remove a specified element from the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef remove_and_insert(heap, remove_val, insert_val):\n    hq.heapify(heap)\n    heap.remove(remove_val)\n    hq.heapify(heap)\n    hq.heappush(heap, insert_val)\n    return heap", "task_id": "209_35db985c-b7c8-4407-a29d-5384531a902a", "test_setup_code": "", "test_list": ["assert remove_and_insert([1, 2, 3, 4, 5], 3, 6) == [1, 2, 4, 5, 6]", "assert remove_and_insert([10, 20, 30, 40, 50], 20, 25) == [10, 25, 30, 40, 50]", "assert remove_and_insert([5, 7, 9, 11, 13], 7, 8) == [5, 8, 9, 11, 13]", "assert remove_and_insert([1, 1, 1, 1, 1], 1, 2) == [1, 1, 1, 1, 2]", "assert remove_and_insert([3, 6, 8, 10, 15], 10, 5) == [3, 5, 6, 8, 15]", "assert remove_and_insert([2], 2, 3) == [3]", "assert remove_and_insert([1, 2, 3, 4, 5], 1, 6) == [2, 4, 3, 5, 6]", "assert remove_and_insert([1, 2, 3, 4, 5], 5, 0) == [0, 1, 2, 3, 4]", "assert remove_and_insert([1, 2, 3, 4, 5], 4, 7) == [1, 2, 3, 5, 7]", "assert remove_and_insert([1, 2, 3, 4, 5], 2, 1) == [1, 1, 3, 4, 5]", "assert remove_and_insert([1, 3, 5, 7, 9], 9, 2) == [1, 2, 3, 5, 7]", "assert remove_and_insert([1, 2, 3, 4, 5], 3, 3) == [1, 2, 3, 4, 5]", "assert remove_and_insert([1, 2, 3, 4, 5], 5, 5) == [1, 2, 3, 4, 5]", "assert remove_and_insert([1, 2, 3, 4, 5], 1, 0) == [0, 2, 3, 4, 5]", "assert remove_and_insert([1, 2, 3, 4, 5], 2, 6) == [1, 3, 4, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to replace the second smallest element in the given heap with a new item.", "code": "import heapq as hq\n\ndef replace_second_smallest(heap, a):\n    hq.heapify(heap)\n    smallest = hq.heappop(heap)\n    second_smallest = hq.heappop(heap)\n    hq.heappush(heap, a)\n    hq.heappush(heap, smallest)\n    return heap", "task_id": "209_d9e44163-9b5a-4eff-bb39-357d1bff761f", "test_setup_code": "", "test_list": ["assert replace_second_smallest([3, 1, 4, 1, 5, 9, 2], 6) == [1, 1, 3, 6, 5, 9, 4]", "assert replace_second_smallest([2, 3, 1], 5) == [1, 5, 3]", "assert replace_second_smallest([1, 2], 3) == [1, 3]", "assert replace_second_smallest([1, 2, 3, 4, 5], 0) == [0, 1, 3, 4, 5]", "assert replace_second_smallest([5, 7, 3, 2, 8, 1], 6) == [1, 2, 3, 6, 8, 7]", "assert replace_second_smallest([10, 20, 30, 40, 50], 15) == [10, 15, 30, 40, 50]", "assert replace_second_smallest([1, 1, 1, 1, 1], 2) == [1, 1, 1, 1, 2]", "assert replace_second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == [0, 1, 3, 4, 5, 6, 7, 8, 9]", "assert replace_second_smallest([4, 3, 2, 1], 5) == [1, 3, 4, 5]", "assert replace_second_smallest([1, 2, 3], 4) == [1, 3, 4]", "assert replace_second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == [1, 3, 4, 5, 6, 7, 8, 9, 10, 11]", "assert replace_second_smallest([5, 4, 3, 2, 1], 6) == [1, 3, 4, 5, 6]", "assert replace_second_smallest([1, 3, 5, 7, 9], 2) == [1, 2, 5, 7, 9]", "assert replace_second_smallest([2, 4, 3, 1, 5], 6) == [1, 3, 4, 5, 6]", "assert replace_second_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 0], 10) == [0, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to remove the largest element from the given heap, double it, and then insert it back into the heap.", "code": "import heapq as hq\n\ndef remove_and_double_largest(heap):\n    hq.heapify(heap)\n    largest = max(heap)\n    heap.remove(largest)\n    hq.heappush(heap, largest * 2)\n    return heap", "task_id": "209_61feec02-9d7a-4680-bc22-1127e45905d8", "test_setup_code": "", "test_list": ["assert remove_and_double_largest([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 10]", "assert remove_and_double_largest([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 100]", "assert remove_and_double_largest([5, 7, 9, 11, 13]) == [5, 7, 9, 11, 26]", "assert remove_and_double_largest([1]) == [2]", "assert remove_and_double_largest([2, 4, 6, 8, 10, 12]) == [2, 4, 6, 8, 10, 24]", "assert remove_and_double_largest([3, 6, 9, 12, 15, 18, 21]) == [3, 6, 9, 12, 15, 18, 42]", "assert remove_and_double_largest([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13, 30]", "assert remove_and_double_largest([100, 200, 300, 400, 500]) == [100, 200, 300, 400, 1000]", "assert remove_and_double_largest([10, 20, 30]) == [10, 20, 60]", "assert remove_and_double_largest([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 2]", "assert remove_and_double_largest([-1, -2, -3, -4, -5]) == [-5, -4, -3, -2, -2]", "assert remove_and_double_largest([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert remove_and_double_largest([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 2, 3, 3, 4, 4, 5, 10]", "assert remove_and_double_largest([1000, 2000, 3000]) == [1000, 2000, 6000]", "assert remove_and_double_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 20]"], "challenge_test_list": []}
{"text": "Write a function to remove the smallest element from the given heap, insert a new item, and then insert the sum of all elements in the heap.", "code": "import heapq as hq\n\ndef remove_and_insert_sum(heap, a):\n    hq.heapify(heap)\n    hq.heappop(heap)\n    hq.heappush(heap, a)\n    total_sum = sum(heap)\n    hq.heappush(heap, total_sum)\n    return heap", "task_id": "209_cf6fd722-f45c-4960-b8df-a55f1923e176", "test_setup_code": "", "test_list": ["assert remove_and_insert_sum([1, 2, 3], 4) == [2, 3, 4, 9]", "assert remove_and_insert_sum([5, 7, 9], 6) == [6, 9, 18]", "assert remove_and_insert_sum([10], 5) == [15]", "assert remove_and_insert_sum([2, 4, 6, 8], 1) == [2, 4, 6, 8, 21]", "assert remove_and_insert_sum([0, 0, 0], 0) == [0, 0, 0]", "assert remove_and_insert_sum([1, 1, 1], 1) == [1, 1, 3]", "assert remove_and_insert_sum([100, 200, 300], 50) == [100, 300, 650]", "assert remove_and_insert_sum([-1, -2, -3], 0) == [-2, 0, -3, -5]", "assert remove_and_insert_sum([3, 7, 5, 1], 2) == [2, 3, 7, 5, 17]", "assert remove_and_insert_sum([8, 6, 4, 2], 10) == [4, 6, 8, 10, 28]", "assert remove_and_insert_sum([1, 2, 3, 4, 5], 6) == [2, 3, 4, 5, 6, 20]", "assert remove_and_insert_sum([10, 20, 30, 40], 5) == [10, 20, 30, 40, 105]", "assert remove_and_insert_sum([1, 1, 1, 1], 2) == [1, 1, 1, 2, 5]", "assert remove_and_insert_sum([50, 40, 30, 20, 10], 60) == [20, 30, 50, 60, 160]", "assert remove_and_insert_sum([3, 1, 4, 1, 5, 9, 2, 6, 5], 7) == [2, 3, 4, 5, 5, 9, 6, 7, 41]"], "challenge_test_list": []}
{"text": "Write a function to convert Fahrenheit to Celsius.", "code": "def fahrenheit_to_celsius(fahrenheit: float) -> float:\n    celsius = (fahrenheit - 32) * 5.0/9.0\n    return celsius", "task_id": "214_688a6d27-65ce-4f13-a493-7eb93b8bf4ad", "test_setup_code": "", "test_list": ["assert fahrenheit_to_celsius(32) == 0.0", "assert fahrenheit_to_celsius(212) == 100.0", "assert fahrenheit_to_celsius(98.6) == 37.0", "assert fahrenheit_to_celsius(0) == -17.77777777777778", "assert fahrenheit_to_celsius(-40) == -40.0", "assert fahrenheit_to_celsius(100) == 37.77777777777778", "assert fahrenheit_to_celsius(-459.67) == -273.15", "assert fahrenheit_to_celsius(451) == 232.77777777777777", "assert fahrenheit_to_celsius(32.1) == 0.05555555555555555", "assert fahrenheit_to_celsius(33) == 0.5555555555555556", "assert fahrenheit_to_celsius(50) == 10.0", "assert fahrenheit_to_celsius(77) == 25.0", "assert fahrenheit_to_celsius(68) == 20.0", "assert fahrenheit_to_celsius(104) == 40.0", "assert fahrenheit_to_celsius(14) == -10.0"], "challenge_test_list": []}
{"text": "Write a function to convert Celsius to Kelvin.", "code": "def celsius_to_kelvin(celsius: float) -> float:\n    kelvin = celsius + 273.15\n    return kelvin", "task_id": "214_5dcde70f-ff88-4c4c-9845-1abf6f25bbb4", "test_setup_code": "", "test_list": ["assert celsius_to_kelvin(0) == 273.15", "assert celsius_to_kelvin(-273.15) == 0.0", "assert celsius_to_kelvin(100) == 373.15", "assert celsius_to_kelvin(-100) == 173.15", "assert celsius_to_kelvin(25) == 298.15", "assert celsius_to_kelvin(-50) == 223.15", "assert celsius_to_kelvin(37) == 310.15", "assert celsius_to_kelvin(-273.16) == -0.01", "assert celsius_to_kelvin(273.15) == 546.3", "assert celsius_to_kelvin(1e-10) == 273.1500000001", "assert celsius_to_kelvin(-1e-10) == 273.1499999999", "assert celsius_to_kelvin(1.5) == 274.65", "assert celsius_to_kelvin(-1.5) == 271.65", "assert celsius_to_kelvin(0.0) == 273.15", "assert celsius_to_kelvin(123.456) == 396.606"], "challenge_test_list": []}
{"text": "Write a function to convert miles to kilometers.", "code": "def miles_to_kilometers(miles: float) -> float:\n    kilometers = miles * 1.60934\n    return kilometers", "task_id": "214_9d6410b2-0395-485c-81b9-8009375d3dd0", "test_setup_code": "", "test_list": ["assert miles_to_kilometers(0) == 0", "assert miles_to_kilometers(1) == 1.60934", "assert miles_to_kilometers(-1) == -1.60934", "assert miles_to_kilometers(0.5) == 0.80467", "assert miles_to_kilometers(-0.5) == -0.80467", "assert miles_to_kilometers(100) == 160.934", "assert miles_to_kilometers(1000) == 1609.34", "assert miles_to_kilometers(0.1) == 0.160934", "assert miles_to_kilometers(-0.1) == -0.160934", "assert miles_to_kilometers(123.456) == 198.6827904", "assert miles_to_kilometers(-123.456) == -198.6827904", "assert miles_to_kilometers(1.23456789) == 1.987484185926", "assert miles_to_kilometers(-1.23456789) == -1.987484185926", "assert miles_to_kilometers(999.999) == 1609.33839066", "assert miles_to_kilometers(-999.999) == -1609.33839066"], "challenge_test_list": []}
{"text": "Write a function to convert inches to centimeters.", "code": "def inches_to_centimeters(inches: float) -> float:\n    centimeters = inches * 2.54\n    return centimeters", "task_id": "214_7faa0649-7c45-4f1a-9ef2-2b600d7954f1", "test_setup_code": "", "test_list": ["assert inches_to_centimeters(0) == 0", "assert inches_to_centimeters(1) == 2.54", "assert inches_to_centimeters(10) == 25.4", "assert inches_to_centimeters(100) == 254.0", "assert inches_to_centimeters(0.5) == 1.27", "assert inches_to_centimeters(0.25) == 0.635", "assert inches_to_centimeters(12) == 30.48", "assert inches_to_centimeters(36) == 91.44", "assert inches_to_centimeters(-1) == -2.54", "assert inches_to_centimeters(-10) == -25.4", "assert inches_to_centimeters(2.5) == 6.35", "assert inches_to_centimeters(3.75) == 9.525", "assert round(inches_to_centimeters(1/3), 6) == round(0.846666, 6)", "assert inches_to_centimeters(1000) == 2540.0", "assert inches_to_centimeters(0.01) == 0.0254"], "challenge_test_list": []}
{"text": "Write a function to convert pounds to kilograms.", "code": "def pounds_to_kilograms(pounds: float) -> float:\n    kilograms = pounds * 0.453592\n    return kilograms", "task_id": "214_5e2ef59e-760d-48a6-96b5-606a88913dad", "test_setup_code": "", "test_list": ["assert pounds_to_kilograms(0) == 0.0", "assert pounds_to_kilograms(1) == 0.453592", "assert pounds_to_kilograms(2.2) == 0.9979024", "assert pounds_to_kilograms(10) == 4.53592", "assert pounds_to_kilograms(100) == 45.3592", "assert pounds_to_kilograms(0.5) == 0.226796", "assert pounds_to_kilograms(1000) == 453.592", "assert pounds_to_kilograms(-1) == -0.453592", "assert pounds_to_kilograms(-10) == -4.53592", "assert pounds_to_kilograms(123.45) == 55.9940734", "assert pounds_to_kilograms(0.0001) == 4.53592e-05", "assert pounds_to_kilograms(999.9999) == 453.5919546408", "assert pounds_to_kilograms(0.333) == 0.151852536", "assert pounds_to_kilograms(50.5) == 22.906396", "assert pounds_to_kilograms(7.77) == 3.52442984"], "challenge_test_list": []}
{"text": "Write a function to convert minutes to seconds.", "code": "def minutes_to_seconds(minutes: float) -> float:\n    seconds = minutes * 60\n    return seconds", "task_id": "214_8e9ecdc1-2c6e-41dc-a355-122b7c4643e0", "test_setup_code": "", "test_list": ["assert minutes_to_seconds(1) == 60", "assert minutes_to_seconds(0) == 0", "assert minutes_to_seconds(0.5) == 30", "assert minutes_to_seconds(1.5) == 90", "assert minutes_to_seconds(60) == 3600", "assert minutes_to_seconds(0.1) == 6", "assert minutes_to_seconds(0.01) == 0.6", "assert minutes_to_seconds(100) == 6000", "assert minutes_to_seconds(0.25) == 15", "assert minutes_to_seconds(0.75) == 45", "assert minutes_to_seconds(2.5) == 150", "assert minutes_to_seconds(0.0001) == 0.006", "assert minutes_to_seconds(1000) == 60000", "assert minutes_to_seconds(0.3333) == 19.998", "assert minutes_to_seconds(1.2345) == 74.07"], "challenge_test_list": []}
{"text": "Write a function to convert hours to minutes.", "code": "def hours_to_minutes(hours: float) -> float:\n    minutes = hours * 60\n    return minutes", "task_id": "214_319889aa-93ee-41d8-a738-694e9d756f2a", "test_setup_code": "", "test_list": ["assert hours_to_minutes(1) == 60", "assert hours_to_minutes(0) == 0", "assert hours_to_minutes(1.5) == 90", "assert hours_to_minutes(2.75) == 165", "assert hours_to_minutes(24) == 1440", "assert hours_to_minutes(0.5) == 30", "assert hours_to_minutes(0.25) == 15", "assert hours_to_minutes(100) == 6000", "assert hours_to_minutes(0.1) == 6", "assert hours_to_minutes(0.01) == 0.6", "assert hours_to_minutes(-1) == -60", "assert hours_to_minutes(-0.5) == -30", "assert hours_to_minutes(1.333) == 79.98", "assert hours_to_minutes(0.666) == 39.96", "assert hours_to_minutes(12.5) == 750"], "challenge_test_list": []}
{"text": "Write a function to convert days to hours.", "code": "def days_to_hours(days: float) -> float:\n    hours = days * 24\n    return hours", "task_id": "214_4f0fcec1-9211-4b60-8901-c0466dfffff2", "test_setup_code": "", "test_list": ["assert days_to_hours(1) == 24", "assert days_to_hours(0) == 0", "assert days_to_hours(0.5) == 12", "assert days_to_hours(2.5) == 60", "assert days_to_hours(7) == 168", "assert days_to_hours(-1) == -24", "assert days_to_hours(0.25) == 6", "assert days_to_hours(365) == 8760", "assert days_to_hours(0.1) == 2.4", "assert days_to_hours(100) == 2400", "assert days_to_hours(0.01) == 0.24", "assert days_to_hours(1.25) == 30", "assert days_to_hours(3.75) == 90", "assert days_to_hours(-0.5) == -12", "assert days_to_hours(0.333) == 7.992"], "challenge_test_list": []}
{"text": "Write a function to convert weeks to days.", "code": "def weeks_to_days(weeks: float) -> float:\n    days = weeks * 7\n    return days", "task_id": "214_cd3168a4-fdba-47b2-b1bf-c6066ee2da7b", "test_setup_code": "", "test_list": ["assert weeks_to_days(1) == 7", "assert weeks_to_days(0) == 0", "assert weeks_to_days(2.5) == 17.5", "assert weeks_to_days(-1) == -7", "assert weeks_to_days(0.5) == 3.5", "assert weeks_to_days(52) == 364", "assert weeks_to_days(1.75) == 12.25", "assert weeks_to_days(100) == 700", "assert weeks_to_days(0.1) == 0.7", "assert weeks_to_days(-0.5) == -3.5", "assert weeks_to_days(0.333) == 2.331", "assert weeks_to_days(0.25) == 1.75", "assert weeks_to_days(10) == 70", "assert weeks_to_days(3.14159) == 21.99113", "assert weeks_to_days(0.0001) == 0.0007"], "challenge_test_list": []}
{"text": "Write a function to convert months to days, assuming each month has 30 days.", "code": "def months_to_days(months: float) -> float:\n    days = months * 30\n    return days", "task_id": "214_d81baad7-95fe-44f0-915c-0afac2c97650", "test_setup_code": "", "test_list": ["assert months_to_days(1) == 30", "assert months_to_days(0) == 0", "assert months_to_days(0.5) == 15", "assert months_to_days(2) == 60", "assert months_to_days(12) == 360", "assert months_to_days(1.25) == 37.5", "assert months_to_days(0.1) == 3", "assert months_to_days(10) == 300", "assert months_to_days(100) == 3000", "assert months_to_days(0.33) == 9.9", "assert months_to_days(0.01) == 0.3", "assert months_to_days(-1) == -30", "assert months_to_days(-0.5) == -15", "assert months_to_days(3.333) == 99.99", "assert months_to_days(0.333333) == 9.99999"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of n natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum", "task_id": "212_eb3f5432-68c7-4642-b411-7ea462e9447f", "test_setup_code": "", "test_list": ["assert sum_of_squares(1) == 1", "assert sum_of_squares(2) == 5", "assert sum_of_squares(3) == 14", "assert sum_of_squares(4) == 30", "assert sum_of_squares(5) == 55", "assert sum_of_squares(6) == 91", "assert sum_of_squares(7) == 140", "assert sum_of_squares(8) == 204", "assert sum_of_squares(9) == 285", "assert sum_of_squares(10) == 385", "assert sum_of_squares(0) == 0", "assert sum_of_squares(15) == 1240", "assert sum_of_squares(20) == 2870", "assert sum_of_squares(50) == 42925", "assert sum_of_squares(100) == 338350"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of n natural numbers.", "code": "def sum_of_fifths(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum", "task_id": "212_142b0013-bd85-455a-b49c-1a9bbd2d6614", "test_setup_code": "", "test_list": ["assert sum_of_fifths(1) == 1", "assert sum_of_fifths(2) == 33", "assert sum_of_fifths(3) == 276", "assert sum_of_fifths(4) == 1300", "assert sum_of_fifths(5) == 4425", "assert sum_of_fifths(6) == 12351", "assert sum_of_fifths(7) == 29008", "assert sum_of_fifths(8) == 62336", "assert sum_of_fifths(9) == 115881", "assert sum_of_fifths(10) == 194481", "assert sum_of_fifths(0) == 0", "assert sum_of_fifths(15) == 1448415", "assert sum_of_fifths(20) == 5279250", "assert sum_of_fifths(25) == 15905625", "assert sum_of_fifths(30) == 39690030"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of n natural numbers.", "code": "import math\n\ndef sum_of_factorials(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(i)\n    return sum", "task_id": "212_e5c0567a-ad84-4636-8558-e660e4bf3a22", "test_setup_code": "", "test_list": ["assert sum_of_factorials(1) == 1", "assert sum_of_factorials(2) == 3", "assert sum_of_factorials(3) == 9", "assert sum_of_factorials(4) == 33", "assert sum_of_factorials(5) == 153", "assert sum_of_factorials(6) == 873", "assert sum_of_factorials(7) == 5913", "assert sum_of_factorials(8) == 46233", "assert sum_of_factorials(9) == 409113", "assert sum_of_factorials(10) == 4037913", "assert sum_of_factorials(0) == 0", "assert sum_of_factorials(11) == 43954713", "assert sum_of_factorials(12) == 522956313", "assert sum_of_factorials(13) == 6749977113", "assert sum_of_factorials(14) == 93928268313"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n even natural numbers.", "code": "def sum_of_even_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum", "task_id": "212_24dc45e7-09f2-44da-93c9-480d60b5b77c", "test_setup_code": "", "test_list": ["assert sum_of_even_squares(1) == 4", "assert sum_of_even_squares(2) == 20", "assert sum_of_even_squares(3) == 56", "assert sum_of_even_squares(4) == 120", "assert sum_of_even_squares(5) == 220", "assert sum_of_even_squares(0) == 0", "assert sum_of_even_squares(10) == 1540", "assert sum_of_even_squares(15) == 4960", "assert sum_of_even_squares(20) == 11480", "assert sum_of_even_squares(100) == 3403400", "assert sum_of_even_squares(50) == 171700", "assert sum_of_even_squares(25) == 22100", "assert sum_of_even_squares(1) == 4", "assert sum_of_even_squares(3) == 56", "assert sum_of_even_squares(7) == 784"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n odd natural numbers.", "code": "def sum_of_odd_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i-1)**3\n    return sum", "task_id": "212_001b6a0a-a710-4085-b4b6-1e5b1efa48c7", "test_setup_code": "", "test_list": ["assert sum_of_odd_cubes(1) == 1", "assert sum_of_odd_cubes(2) == 28", "assert sum_of_odd_cubes(3) == 153", "assert sum_of_odd_cubes(4) == 496", "assert sum_of_odd_cubes(5) == 1225", "assert sum_of_odd_cubes(6) == 2592", "assert sum_of_odd_cubes(7) == 4807", "assert sum_of_odd_cubes(8) == 8208", "assert sum_of_odd_cubes(9) == 13041", "assert sum_of_odd_cubes(10) == 20200", "assert sum_of_odd_cubes(0) == 0", "assert sum_of_odd_cubes(15) == 144400", "assert sum_of_odd_cubes(20) == 533200", "assert sum_of_odd_cubes(25) == 1562500", "assert sum_of_odd_cubes(30) == 3783000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the digits of a number n.", "code": "def sum_of_squares_of_digits(n):\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit**2\n        n //= 10\n    return sum", "task_id": "212_198b9bb8-6994-426f-ab06-d1008c86b314", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_digits(0) == 0", "assert sum_of_squares_of_digits(1) == 1", "assert sum_of_squares_of_digits(9) == 81", "assert sum_of_squares_of_digits(10) == 1", "assert sum_of_squares_of_digits(12) == 5", "assert sum_of_squares_of_digits(123) == 14", "assert sum_of_squares_of_digits(999) == 243", "assert sum_of_squares_of_digits(1001) == 2", "assert sum_of_squares_of_digits(1111) == 4", "assert sum_of_squares_of_digits(1234567890) == 285", "assert sum_of_squares_of_digits(987654321) == 285", "assert sum_of_squares_of_digits(1000000000) == 1", "assert sum_of_squares_of_digits(1010101010) == 5", "assert sum_of_squares_of_digits(2020202020) == 8", "assert sum_of_squares_of_digits(3141592653) == 155"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n prime numbers.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_prime_squares(n):\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num**2\n            count += 1\n        num += 1\n    return sum", "task_id": "212_95df0a87-0840-49f1-97cb-b1ecd13e090a", "test_setup_code": "", "test_list": ["assert sum_of_prime_squares(0) == 0", "assert sum_of_prime_squares(1) == 4", "assert sum_of_prime_squares(2) == 13", "assert sum_of_prime_squares(3) == 29", "assert sum_of_prime_squares(4) == 54", "assert sum_of_prime_squares(5) == 83", "assert sum_of_prime_squares(6) == 139", "assert sum_of_prime_squares(7) == 195", "assert sum_of_prime_squares(8) == 273", "assert sum_of_prime_squares(9) == 363", "assert sum_of_prime_squares(10) == 463", "assert sum_of_prime_squares(15) == 1240", "assert sum_of_prime_squares(20) == 2417", "assert sum_of_prime_squares(25) == 4017", "assert sum_of_prime_squares(30) == 6105"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci_squares(n):\n    a, b = 0, 1\n    sum = 0\n    for _ in range(n):\n        sum += a**2\n        a, b = b, a + b\n    return sum", "task_id": "212_292f15a1-c7a0-4ef4-a189-60299ea2a276", "test_setup_code": "", "test_list": ["assert sum_of_fibonacci_squares(0) == 0", "assert sum_of_fibonacci_squares(1) == 0", "assert sum_of_fibonacci_squares(2) == 1", "assert sum_of_fibonacci_squares(3) == 1", "assert sum_of_fibonacci_squares(4) == 2", "assert sum_of_fibonacci_squares(5) == 6", "assert sum_of_fibonacci_squares(6) == 15", "assert sum_of_fibonacci_squares(7) == 40", "assert sum_of_fibonacci_squares(8) == 104", "assert sum_of_fibonacci_squares(9) == 273", "assert sum_of_fibonacci_squares(10) == 714", "assert sum_of_fibonacci_squares(15) == 10424", "assert sum_of_fibonacci_squares(20) == 150051", "assert sum_of_fibonacci_squares(25) == 2165870", "assert sum_of_fibonacci_squares(30) == 312217152"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the square roots of the first n perfect squares.", "code": "def sum_of_perfect_square_roots(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "task_id": "212_e9e1a228-9f64-4cef-9eb8-da55a7f28e4f", "test_setup_code": "", "test_list": ["assert sum_of_perfect_square_roots(1) == 1", "assert sum_of_perfect_square_roots(2) == 3", "assert sum_of_perfect_square_roots(3) == 6", "assert sum_of_perfect_square_roots(4) == 10", "assert sum_of_perfect_square_roots(5) == 15", "assert sum_of_perfect_square_roots(10) == 55", "assert sum_of_perfect_square_roots(0) == 0", "assert sum_of_perfect_square_roots(20) == 210", "assert sum_of_perfect_square_roots(50) == 1275", "assert sum_of_perfect_square_roots(100) == 5050", "assert sum_of_perfect_square_roots(25) == 325", "assert sum_of_perfect_square_roots(15) == 120", "assert sum_of_perfect_square_roots(30) == 465", "assert sum_of_perfect_square_roots(7) == 28", "assert sum_of_perfect_square_roots(12) == 78"], "challenge_test_list": []}
{"text": "Write a function that takes a string and returns the string reversed.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "215_757b67e6-dd28-463a-80eb-1809e5f4fa8b", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string(' ') == ' '", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('palindrome') == 'emordnilap'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'", "assert reverse_string('The quick brown fox jumps over the lazy dog') == 'god yzal eht revo spmuj xof nworb kciuq ehT'"], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and returns the sum of the list.", "code": "def sum_of_list(nums: list) -> int:\n    return sum(nums)", "task_id": "215_eae465fd-fbcf-480f-83a8-38cae4295693", "test_setup_code": "", "test_list": ["assert sum_of_list([1, 2, 3, 4, 5]) == 15", "assert sum_of_list([]) == 0", "assert sum_of_list([0]) == 0", "assert sum_of_list([-1, -2, -3]) == -6", "assert sum_of_list([10, -10]) == 0", "assert sum_of_list([1, 1, 1, 1, 1]) == 5", "assert sum_of_list([-5, 10, -5]) == 0", "assert sum_of_list([999]) == 999", "assert sum_of_list([-999]) == -999", "assert sum_of_list([1, -1, 2, -2, 3, -3]) == 0", "assert sum_of_list([100, 200, 300]) == 600", "assert sum_of_list([-100, -200, -300]) == -600", "assert sum_of_list([0, 0, 0, 0]) == 0", "assert sum_of_list([2147483647]) == 2147483647", "assert sum_of_list([-2147483648]) == -2147483648"], "challenge_test_list": []}
{"text": "Write a function that checks if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "215_2b7e0ddd-aaae-4dd0-a87b-1654a1060822", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('racecars') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a function that returns the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "215_811e53c8-6ea1-4b21-b495-e6f0b7a6e549", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a function that finds the maximum number in a list of integers.", "code": "def find_max(nums: list) -> int:\n    return max(nums)", "task_id": "215_33243d40-a79b-4c4c-93ab-38844c8bd8e4", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([5, 4, 3, 2, 1]) == 5", "assert find_max([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 9", "assert find_max([-1, -2, -3, -4, -5]) == -1", "assert find_max([0]) == 0", "assert find_max([100, 200, 300, 400, 500]) == 500", "assert find_max([1, 2, 3, 3, 2, 1]) == 3", "assert find_max([-10, -20, -30, -40, -50]) == -10", "assert find_max([1, 2, 3, 4, 5, 0]) == 5", "assert find_max([1, 1, 1, 1, 1]) == 1", "assert find_max([0, -1, -2, -3, -4]) == 0", "assert find_max([1000, 2000, 3000, 4000, 5000]) == 5000", "assert find_max([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 5", "assert find_max([99, 88, 77, 66, 55, 44, 33, 22, 11]) == 99", "assert find_max([-100, -200, -300, -400, -500, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function that counts the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "215_9509a7cf-84d6-4fbb-bc86-cbee9370fa63", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('aeiou') == 5", "assert count_vowels('AEIOU') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('') == 0", "assert count_vowels('a') == 1", "assert count_vowels('A') == 1", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 5", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('ThE qUIck brOwn fOx jUmps OvEr thE lAzy dOg') == 11", "assert count_vowels('12345') == 0", "assert count_vowels('!@#$%^&*()') == 0", "assert count_vowels('Lorem ipsum dolor sit amet, consectetur adipiscing elit.') == 18"], "challenge_test_list": []}
{"text": "Write a function that returns the first n numbers in the Fibonacci sequence.", "code": "def fibonacci(n: int) -> list:\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:n]", "task_id": "215_c3897fe4-2e88-48a5-a7bd-a3e822cb3214", "test_setup_code": "", "test_list": ["assert fibonacci(0) == []", "assert fibonacci(1) == [0]", "assert fibonacci(2) == [0, 1]", "assert fibonacci(3) == [0, 1, 1]", "assert fibonacci(4) == [0, 1, 1, 2]", "assert fibonacci(5) == [0, 1, 1, 2, 3]", "assert fibonacci(6) == [0, 1, 1, 2, 3, 5]", "assert fibonacci(7) == [0, 1, 1, 2, 3, 5, 8]", "assert fibonacci(8) == [0, 1, 1, 2, 3, 5, 8, 13]", "assert fibonacci(9) == [0, 1, 1, 2, 3, 5, 8, 13, 21]", "assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]", "assert fibonacci(15) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377]", "assert fibonacci(20) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]", "assert fibonacci(25) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368]", "assert fibonacci(30) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229]"], "challenge_test_list": []}
{"text": "Write a function that checks if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "215_bd4f446a-3184-4974-b941-e61c776ff38c", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False", "assert is_prime(19) == True", "assert is_prime(20) == False", "assert is_prime(23) == True", "assert is_prime(25) == False", "assert is_prime(29) == True", "assert is_prime(31) == True"], "challenge_test_list": []}
{"text": "Write a function that merges two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    return sorted(list1 + list2)", "task_id": "215_3106a70d-0883-41a7-8326-33c12e2de5d9", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([], []) == []", "assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists([], [4, 5, 6]) == [4, 5, 6]", "assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([4, 5, 6], [1, 2, 3]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([-3, -2, -1], [1, 2, 3]) == [-3, -2, -1, 1, 2, 3]", "assert merge_sorted_lists([1, 3, 5], [2, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([1, 3, 5, 7, 9], [2, 4, 6]) == [1, 2, 3, 4, 5, 6, 7, 9]", "assert merge_sorted_lists([1], [2]) == [1, 2]", "assert merge_sorted_lists([2], [1]) == [1, 2]", "assert merge_sorted_lists([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]", "assert merge_sorted_lists([1, 4, 5], [2, 3, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([10, 20, 30], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]"], "challenge_test_list": []}
{"text": "Write a function that removes duplicates from a list of integers.", "code": "def remove_duplicates(nums: list) -> list:\n    return list(set(nums))", "task_id": "215_b35e217f-4bca-4f3f-aa94-9d66762e7c87", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([]) == []", "assert remove_duplicates([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_NonRepeated_Char(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_9f4a1492-40e9-40fa-b1bf-bfe8070878a0", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Char('aabbccddeeffg') == 'g'", "assert first_NonRepeated_Char('aabbccddeeff') == ''", "assert first_NonRepeated_Char('abcabc') == ''", "assert first_NonRepeated_Char('abc') == 'a'", "assert first_NonRepeated_Char('a') == 'a'", "assert first_NonRepeated_Char('') == ''", "assert first_NonRepeated_Char('aabbccddeeffggh') == 'h'", "assert first_NonRepeated_Char('aabbccddeeffgghh') == ''", "assert first_NonRepeated_Char('aabbccdd') == ''", "assert first_NonRepeated_Char('abcdefghijklmnopqrstuvwxyz') == 'a'", "assert first_NonRepeated_Char('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz') == ''", "assert first_NonRepeated_Char('abacabad') == 'c'", "assert first_NonRepeated_Char('abacabaabacaba') == ''", "assert first_NonRepeated_Char('abacabadabacaba') == 'd'", "assert first_NonRepeated_Char('1122334455667788990') == '0'"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_Repeated_Word(s: str) -> str:\n    words = s.split()\n    h = {}\n    for word in words:\n        if word in h:\n            return word\n        else:\n            h[word] = 0\n    return ''", "task_id": "217_5e2fbb29-c798-40f4-931c-81cedf07d74e", "test_setup_code": "", "test_list": ["assert first_Repeated_Word('this is a test this is only a test') == 'this'", "assert first_Repeated_Word('hello world hello') == 'hello'", "assert first_Repeated_Word('no repetition here') == ''", "assert first_Repeated_Word('repeat repeat repeat') == 'repeat'", "assert first_Repeated_Word('a quick brown fox jumps over the lazy dog') == ''", "assert first_Repeated_Word('a a a a a a') == 'a'", "assert first_Repeated_Word('unique words only') == ''", "assert first_Repeated_Word('first second first second') == 'first'", "assert first_Repeated_Word('') == ''", "assert first_Repeated_Word('oneword') == ''", "assert first_Repeated_Word('one two three four five one two three four five') == 'one'", "assert first_Repeated_Word('word1 word2 word3 word1 word2 word3') == 'word1'", "assert first_Repeated_Word('case sensitivity Case sensitivity') == 'sensitivity'", "assert first_Repeated_Word('123 456 123 456') == '123'", "assert first_Repeated_Word('punctuation, punctuation.') == 'punctuation,'"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_NonRepeated_Word(s: str) -> str:\n    words = s.split()\n    h = {}\n    for word in words:\n        if word in h:\n            h[word] += 1\n        else:\n            h[word] = 1\n    for word in words:\n        if h[word] == 1:\n            return word\n    return ''", "task_id": "217_2ba531fe-538b-4006-b58a-42fa9335d2ff", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Word('this is a test this is only a test') == 'only'", "assert first_NonRepeated_Word('hello world hello') == 'world'", "assert first_NonRepeated_Word('one two three one two') == 'three'", "assert first_NonRepeated_Word('repeat repeat repeat') == ''", "assert first_NonRepeated_Word('') == ''", "assert first_NonRepeated_Word('single') == 'single'", "assert first_NonRepeated_Word('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a'", "assert first_NonRepeated_Word('a a a a a a a a a a b') == 'b'", "assert first_NonRepeated_Word('apple banana apple banana cherry') == 'cherry'", "assert first_NonRepeated_Word('dog cat bird dog cat') == 'bird'", "assert first_NonRepeated_Word('red blue green red blue yellow') == 'green'", "assert first_NonRepeated_Word('alpha beta gamma alpha beta delta gamma') == 'delta'", "assert first_NonRepeated_Word('one two three four five six seven eight nine ten') == 'one'", "assert first_NonRepeated_Word('a quick brown fox jumps over the lazy dog') == 'quick'", "assert first_NonRepeated_Word('to be or not to be that is the question') == 'or'"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first repeated character in a given string.", "code": "def first_Repeated_Char_Index(s: str) -> int:\n    h = {}\n    for i, ch in enumerate(s):\n        if ch in h:\n            return i\n        else:\n            h[ch] = 0\n    return -1", "task_id": "217_260a8ca5-4185-4c7c-baaa-96b374ba4dbf", "test_setup_code": "", "test_list": ["assert first_Repeated_Char_Index('hello') == 2", "assert first_Repeated_Char_Index('abcd') == -1", "assert first_Repeated_Char_Index('aabbcc') == 1", "assert first_Repeated_Char_Index('') == -1", "assert first_Repeated_Char_Index('a') == -1", "assert first_Repeated_Char_Index('abac') == 2", "assert first_Repeated_Char_Index('abcabc') == 3", "assert first_Repeated_Char_Index('112233') == 1", "assert first_Repeated_Char_Index('!@#$$%^') == 4", "assert first_Repeated_Char_Index('AaBbCc') == -1", "assert first_Repeated_Char_Index('AaAa') == 2", "assert first_Repeated_Char_Index('1234567890') == -1", "assert first_Repeated_Char_Index('1234512345') == 4", "assert first_Repeated_Char_Index('aabbccddeeffgghhii') == 1", "assert first_Repeated_Char_Index('abc def ghi') == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first non-repeated character in a given string.", "code": "def first_NonRepeated_Char_Index(s: str) -> int:\n    h = {}\n    for i, ch in enumerate(s):\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for i, ch in enumerate(s):\n        if h[ch] == 1:\n            return i\n    return -1", "task_id": "217_fa8d966f-c1e7-4f46-9385-e6789a7125e3", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Char_Index('a') == 0", "assert first_NonRepeated_Char_Index('aa') == -1", "assert first_NonRepeated_Char_Index('abacabad') == 1", "assert first_NonRepeated_Char_Index('aabbcc') == -1", "assert first_NonRepeated_Char_Index('abcabcde') == 6", "assert first_NonRepeated_Char_Index('') == -1", "assert first_NonRepeated_Char_Index('aabbccddeeffg') == 12", "assert first_NonRepeated_Char_Index('aabbccddeeffgg') == -1", "assert first_NonRepeated_Char_Index('aabbccddeeffggh') == 14", "assert first_NonRepeated_Char_Index('abcdefghijklmnopqrstuvwxyz') == 0", "assert first_NonRepeated_Char_Index('aabbccddeeffgghhiijjkkllmmn') == 26", "assert first_NonRepeated_Char_Index('aabbccddeeffgghhiijjkkllmmnno') == 28", "assert first_NonRepeated_Char_Index('aabbccddeeffgghhiijjkkllmmnnoo') == -1", "assert first_NonRepeated_Char_Index('aabbccddeeffgghhiijjkkllmmnnoop') == 30", "assert first_NonRepeated_Char_Index('aabbccddeeffgghhiijjkkllmmnnoopp') == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string, ignoring case.", "code": "def first_Repeated_Char_IgnoreCase(s: str) -> str:\n    h = {}\n    for ch in s.lower():\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return ''", "task_id": "217_5a7b58da-7817-4e85-a8e8-31ac0b2fe0d8", "test_setup_code": "", "test_list": ["assert first_Repeated_Char_IgnoreCase('aAbBcC') == 'a'", "assert first_Repeated_Char_IgnoreCase('abcABC') == 'a'", "assert first_Repeated_Char_IgnoreCase('abcdef') == ''", "assert first_Repeated_Char_IgnoreCase('Aa') == 'a'", "assert first_Repeated_Char_IgnoreCase('') == ''", "assert first_Repeated_Char_IgnoreCase('a') == ''", "assert first_Repeated_Char_IgnoreCase('abac') == 'a'", "assert first_Repeated_Char_IgnoreCase('abBA') == 'b'", "assert first_Repeated_Char_IgnoreCase('aabbcc') == 'a'", "assert first_Repeated_Char_IgnoreCase('aAbBcCdD') == 'a'", "assert first_Repeated_Char_IgnoreCase('123123') == '1'", "assert first_Repeated_Char_IgnoreCase('abc123ABC') == 'a'", "assert first_Repeated_Char_IgnoreCase('!@#$%^&*!') == '!'", "assert first_Repeated_Char_IgnoreCase('AaBbCcDd') == 'a'", "assert first_Repeated_Char_IgnoreCase('noRepeatHere') == ''"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring case.", "code": "def first_NonRepeated_Char_IgnoreCase(s: str) -> str:\n    h = {}\n    for ch in s.lower():\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s.lower():\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_cc57430b-912e-47d6-b03f-df94f0fd9f9b", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Char_IgnoreCase('Swiss') == 'w'", "assert first_NonRepeated_Char_IgnoreCase('Teeter') == 'r'", "assert first_NonRepeated_Char_IgnoreCase('aabbcc') == ''", "assert first_NonRepeated_Char_IgnoreCase('aA') == ''"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string, ignoring spaces.", "code": "def first_Repeated_Char_IgnoreSpaces(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch == ' ':\n            continue\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return ''", "task_id": "217_3aa919ee-2a26-478f-9cb4-e7e85a2edbb0", "test_setup_code": "", "test_list": ["assert first_Repeated_Char_IgnoreSpaces('hello world') == 'l'", "assert first_Repeated_Char_IgnoreSpaces('a quick brown fox') == 'o'", "assert first_Repeated_Char_IgnoreSpaces('the quick brown fox jumps over the lazy dog') == 't'", "assert first_Repeated_Char_IgnoreSpaces('no repeated chars') == ''", "assert first_Repeated_Char_IgnoreSpaces('') == ''", "assert first_Repeated_Char_IgnoreSpaces('aabbcc') == 'a'", "assert first_Repeated_Char_IgnoreSpaces('abacabad') == 'a'", "assert first_Repeated_Char_IgnoreSpaces('abacabadabacaba') == 'a'", "assert first_Repeated_Char_IgnoreSpaces('abc def ghi jkl mno pqr stu vwx yz') == ''", "assert first_Repeated_Char_IgnoreSpaces('aa bb cc dd ee') == 'a'", "assert first_Repeated_Char_IgnoreSpaces('123 456 789 123') == '1'", "assert first_Repeated_Char_IgnoreSpaces('!@# $%^ &*() !@#') == '!'", "assert first_Repeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z a') == 'a'", "assert first_Repeated_Char_IgnoreSpaces('abcdefghijklmnopqrstuvwxyz') == ''", "assert first_Repeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z z') == 'z'"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring spaces.", "code": "def first_NonRepeated_Char_IgnoreSpaces(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch == ' ':\n            continue\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if ch == ' ':\n            continue\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_32f29490-058d-4cfd-abe9-37727cda3ce8", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Char_IgnoreSpaces('a b c d e f g') == 'a'", "assert first_NonRepeated_Char_IgnoreSpaces('aabbccddeeffg') == 'g'", "assert first_NonRepeated_Char_IgnoreSpaces('') == ''", "assert first_NonRepeated_Char_IgnoreSpaces('a a b b c c d d e e f f g g') == ''", "assert first_NonRepeated_Char_IgnoreSpaces('a b c a b c d') == 'd'", "assert first_NonRepeated_Char_IgnoreSpaces('  a b c d e f g  ') == 'a'", "assert first_NonRepeated_Char_IgnoreSpaces('x y z x y z a') == 'a'", "assert first_NonRepeated_Char_IgnoreSpaces('a') == 'a'", "assert first_NonRepeated_Char_IgnoreSpaces('  ') == ''", "assert first_NonRepeated_Char_IgnoreSpaces('abacabad') == 'c'", "assert first_NonRepeated_Char_IgnoreSpaces('aabbccdd') == ''", "assert first_NonRepeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a'", "assert first_NonRepeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z') == ''", "assert first_NonRepeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z a b c d e f g h i j k l m n o p q r s t u v w x y z 1') == '1'", "assert first_NonRepeated_Char_IgnoreSpaces('a b c d e f g h i j k l m n o p q r s t u v w x y z 1 2 3 4 5 6 7 8 9 0') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring punctuation.", "code": "import string\n\ndef first_NonRepeated_Char_IgnorePunctuation(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch in string.punctuation:\n            continue\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if ch in string.punctuation:\n            continue\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_974ff209-5433-42e0-ac6d-5f504919a67a", "test_setup_code": "", "test_list": ["assert first_NonRepeated_Char_IgnorePunctuation('hello, world!') == 'h'", "assert first_NonRepeated_Char_IgnorePunctuation('aabbcc') == ''", "assert first_NonRepeated_Char_IgnorePunctuation('aabbccddeeffg') == 'g'", "assert first_NonRepeated_Char_IgnorePunctuation('') == ''", "assert first_NonRepeated_Char_IgnorePunctuation('a') == 'a'", "assert first_NonRepeated_Char_IgnorePunctuation('abacabad') == 'c'", "assert first_NonRepeated_Char_IgnorePunctuation('abcabcabc') == ''", "assert first_NonRepeated_Char_IgnorePunctuation('a!b@c#d$e%f^g&h*i(j)k_l+m=n-o') == 'a'", "assert first_NonRepeated_Char_IgnorePunctuation('a!a@b#b$c%d^d&e&') == 'c'", "assert first_NonRepeated_Char_IgnorePunctuation('The quick brown fox jumps over the lazy dog.') == 'T'", "assert first_NonRepeated_Char_IgnorePunctuation('11223344556677889900') == ''", "assert first_NonRepeated_Char_IgnorePunctuation('1122334455667788990a') == 'a'", "assert first_NonRepeated_Char_IgnorePunctuation('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz') == ''", "assert first_NonRepeated_Char_IgnorePunctuation('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyz') == 'z'", "assert first_NonRepeated_Char_IgnorePunctuation('aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzzA') == 'A'"], "challenge_test_list": []}
{"text": "Write a function to find the top k largest elements in a given list.", "code": "def find_top_k_elements(arr, k):\n    return sorted(arr, reverse=True)[:k]", "task_id": "219_ffd384a5-8e89-4364-8cd0-46f5a9f57c87", "test_setup_code": "", "test_list": ["assert find_top_k_elements([3, 1, 5, 12, 2, 11], 3) == [12, 11, 5]", "assert find_top_k_elements([10, 20, 30, 40, 50], 2) == [50, 40]", "assert find_top_k_elements([-1, -3, -2, -5, -4], 2) == [-1, -2]", "assert find_top_k_elements([1, 2, 3, 4, 5], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to find the bottom k smallest elements in a given list.", "code": "def find_bottom_k_elements(arr, k):\n    return sorted(arr)[:k]", "task_id": "219_b333ebde-66ab-49f2-8af7-58fe22044fac", "test_setup_code": "", "test_list": ["assert find_bottom_k_elements([4, 1, 7, 3, 8, 5], 3) == [1, 3, 4]", "assert find_bottom_k_elements([10, 9, 8, 7, 6, 5], 2) == [5, 6]", "assert find_bottom_k_elements([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert find_bottom_k_elements([5, 4, 3, 2, 1], 1) == [1]", "assert find_bottom_k_elements([1, 2, 3, 4, 5], 0) == []", "assert find_bottom_k_elements([], 3) == []", "assert find_bottom_k_elements([1], 1) == [1]", "assert find_bottom_k_elements([5, 5, 5, 5, 5], 3) == [5, 5, 5]", "assert find_bottom_k_elements([3, 1, 2, 2, 1], 4) == [1, 1, 2, 2]", "assert find_bottom_k_elements([1, -1, 0, -2, 2], 3) == [-2, -1, 0]", "assert find_bottom_k_elements([100, 50, 25, 75, 0], 2) == [0, 25]", "assert find_bottom_k_elements([10, 20, 30, 40, 50], 3) == [10, 20, 30]", "assert find_bottom_k_elements([7, 3, 9, 2, 6, 1], 4) == [1, 2, 3, 6]", "assert find_bottom_k_elements([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]", "assert find_bottom_k_elements([10, 10, 10, 10], 2) == [10, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in a given list.", "code": "def find_kth_largest(arr, k):\n    return sorted(arr, reverse=True)[k-1]", "task_id": "219_3bd36d98-334c-406a-8d10-028b0fedc8c3", "test_setup_code": "", "test_list": ["assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5", "assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4", "assert find_kth_largest([1], 1) == 1", "assert find_kth_largest([7, 6, 5, 4, 3, 2, 1], 3) == 5", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7], 1) == 7", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7], 7) == 1", "assert find_kth_largest([5, 5, 5, 5, 5], 3) == 5", "assert find_kth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 6", "assert find_kth_largest([3, 2, 1, 5, 6, 4], 1) == 6", "assert find_kth_largest([3, 2, 1, 5, 6, 4], 6) == 1", "assert find_kth_largest([1, 2], 2) == 1", "assert find_kth_largest([2, 1], 1) == 2", "assert find_kth_largest([1, 1, 1, 1], 2) == 1", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert find_kth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element in a given list.", "code": "def find_kth_smallest(arr, k):\n    return sorted(arr)[k-1]", "task_id": "219_01ccd85d-a999-4da3-8ca5-966f15d53f60", "test_setup_code": "", "test_list": ["assert find_kth_smallest([3, 1, 2, 4, 5], 1) == 1", "assert find_kth_smallest([3, 1, 2, 4, 5], 2) == 2", "assert find_kth_smallest([3, 1, 2, 4, 5], 3) == 3", "assert find_kth_smallest([3, 1, 2, 4, 5], 4) == 4", "assert find_kth_smallest([3, 1, 2, 4, 5], 5) == 5", "assert find_kth_smallest([5, 4, 3, 2, 1], 1) == 1", "assert find_kth_smallest([5, 4, 3, 2, 1], 3) == 3", "assert find_kth_smallest([5, 4, 3, 2, 1], 5) == 5", "assert find_kth_smallest([1, 2, 3, 4, 5], 1) == 1", "assert find_kth_smallest([1, 2, 3, 4, 5], 5) == 5", "assert find_kth_smallest([2, 2, 2, 2, 2], 3) == 2", "assert find_kth_smallest([7, 10, 4, 3, 20, 15], 3) == 7", "assert find_kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10", "assert find_kth_smallest([1], 1) == 1", "assert find_kth_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 6) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the median of a given list.", "code": "def find_median(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    if n % 2 == 1:\n        return arr[n//2]\n    else:\n        return (arr[n//2 - 1] + arr[n//2]) / 2", "task_id": "219_637f341e-b2a6-4541-8723-22937d0e8262", "test_setup_code": "", "test_list": ["assert find_median([1, 2, 3, 4, 5]) == 3", "assert find_median([5, 2, 1, 4, 3]) == 3", "assert find_median([1, 3, 5, 7]) == 4.0", "assert find_median([7, 3, 1, 5]) == 4.0", "assert find_median([1]) == 1", "assert find_median([1, 2]) == 1.5", "assert find_median([2, 1]) == 1.5", "assert find_median([-5, -3, -1, 0, 2, 4, 6]) == 0", "assert find_median([10, 10, 10, 10, 10]) == 10", "assert find_median([-10, -5, 0, 5, 10]) == 0", "assert find_median([1.5, 2.5, 3.5]) == 2.5", "assert find_median([3.5, 1.5, 2.5]) == 2.5", "assert find_median([100, 200, 300, 400, 500, 600]) == 350.0", "assert find_median([]) == None or find_median([]) == 0", "assert find_median([-1, -1, -1, -1]) == -1.0"], "challenge_test_list": []}
{"text": "Write a function to find the mode of a given list (the element that appears most frequently).", "code": "from collections import Counter\n\ndef find_mode(arr):\n    count = Counter(arr)\n    return count.most_common(1)[0][0]", "task_id": "219_32869340-f8c6-49c3-9313-4f1c6a4a119b", "test_setup_code": "", "test_list": ["assert find_mode([1, 2, 3, 3, 4, 5]) == 3", "assert find_mode([1, 1, 1, 2, 2, 3]) == 1", "assert find_mode([5, 5, 4, 4, 4, 3, 3, 3]) == 4", "assert find_mode([10, 20, 10, 20, 10]) == 10", "assert find_mode([7, 8, 9, 7, 8, 9, 7]) == 7", "assert find_mode([1]) == 1", "assert find_mode([2, 2, 2, 2, 2]) == 2", "assert find_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert find_mode([1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5]) == 5", "assert find_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10]) == 10", "assert find_mode([1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3]) == 3", "assert find_mode([1, 1, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3]) == 3", "assert find_mode([1, 2, 3, 4, 5, 5, 5, 5, 5]) == 5", "assert find_mode([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4", "assert find_mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 9, 9, 9, 9]) == 9"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given list.", "code": "def find_unique_elements(arr):\n    return list(set(arr))", "task_id": "219_6f7735f7-96df-48eb-9247-135fb0e16d56", "test_setup_code": "", "test_list": ["assert find_unique_elements([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([1, 1, 1, 1, 1]) == [1]", "assert find_unique_elements([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([]) == []", "assert find_unique_elements([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([1]) == [1]", "assert find_unique_elements([2, 2, 2, 3, 3, 3, 4, 4, 4]) == [2, 3, 4]", "assert find_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_unique_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_unique_elements([1, 2, 3, 1, 2, 3, 1, 2, 3]) == [1, 2, 3]", "assert find_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [1, 2, 3, 4]", "assert find_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_unique_elements([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == [5]", "assert find_unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([1, 3, 5, 7, 9, 1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to find all duplicate elements in a given list.", "code": "def find_duplicates(arr):\n    seen = set()\n    duplicates = set()\n    for x in arr:\n        if x in seen:\n            duplicates.add(x)\n        else:\n            seen.add(x)\n    return list(duplicates)", "task_id": "219_5c741cdb-dcd9-4a46-81a4-cd68572ab3c1", "test_setup_code": "", "test_list": ["assert find_duplicates([1, 2, 3, 4, 5, 1, 2]) == [1, 2]", "assert find_duplicates([1, 1, 1, 1, 1]) == [1]", "assert find_duplicates([1, 2, 3, 4, 5]) == []", "assert find_duplicates([]) == []", "assert find_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6]) == [6, 7, 8, 9, 10]", "assert find_duplicates([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [2, 3, 4, 5]", "assert find_duplicates([10, 20, 30, 40, 50, 10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]", "assert find_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == []", "assert find_duplicates([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [0]", "assert find_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_duplicates([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == [100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]", "assert find_duplicates([1]) == []", "assert find_duplicates([1, 1]) == [1]", "assert find_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]", "assert find_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the range of a given list (the difference between the maximum and minimum elements).", "code": "def find_range(arr):\n    return max(arr) - min(arr)", "task_id": "219_2cfe1778-d8ea-43e3-b2f3-75fbca73d0a5", "test_setup_code": "", "test_list": ["assert find_range([1, 2, 3, 4, 5]) == 4", "assert find_range([5, 5, 5, 5, 5]) == 0", "assert find_range([-10, 0, 10, 20, 30]) == 40", "assert find_range([100]) == 0", "assert find_range([1, -1, 1, -1, 1]) == 2", "assert find_range([-5, -4, -3, -2, -1]) == 4", "assert find_range([0, 0, 0, 0, 0]) == 0", "assert find_range([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 8", "assert find_range([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert find_range([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == 9", "assert find_range([100, 200, 300, 400, 500]) == 400", "assert find_range([1, 1000000]) == 999999", "assert find_range([0.1, 0.2, 0.3, 0.4, 0.5]) == 0.4", "assert find_range([-0.1, -0.2, -0.3, -0.4, -0.5]) == 0.4", "assert find_range([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given list.", "code": "def find_sum_of_elements(arr):\n    return sum(arr)", "task_id": "219_eb67a131-9f40-4215-8884-de25e90c95b8", "test_setup_code": "", "test_list": ["assert find_sum_of_elements([1, 2, 3, 4, 5]) == 15", "assert find_sum_of_elements([0, 0, 0, 0, 0]) == 0", "assert find_sum_of_elements([-1, -2, -3, -4, -5]) == -15", "assert find_sum_of_elements([100]) == 100", "assert find_sum_of_elements([]) == 0", "assert find_sum_of_elements([1, -1, 1, -1, 1, -1]) == 0", "assert find_sum_of_elements([1.5, 2.5, 3.5]) == 7.5", "assert find_sum_of_elements([1000000, 2000000, 3000000]) == 6000000", "assert find_sum_of_elements([1, 2, 3, 4, 5, -15]) == 0", "assert find_sum_of_elements([1, 2, 2, 1]) == 6", "assert find_sum_of_elements([0.1, 0.2, 0.3]) == 0.6", "assert find_sum_of_elements([-1, 1, -1, 1]) == 0", "assert find_sum_of_elements([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert find_sum_of_elements([999, -999]) == 0", "assert find_sum_of_elements([50, 50, 50, 50, 50]) == 250"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, but the lists can contain other lists as elements.", "code": "def check_subset_list(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_81618365-c7ef-4f75-a449-7193b8a09882", "test_setup_code": "", "test_list": ["assert check_subset_list([1, 2, [3, 4]], [1, 2]) == True", "assert check_subset_list([1, 2, [3, 4]], [3, 4]) == True", "assert check_subset_list([1, 2, [3, 4]], [1, 2, 3, 4]) == True", "assert check_subset_list([1, 2, [3, 4]], [5]) == False", "assert check_subset_list([1, [2, [3, 4]]], [2, 4]) == True", "assert check_subset_list([1, [2, [3, 4]]], [4, 5]) == False", "assert check_subset_list([[1, 2], [3, 4]], [1, 3]) == True", "assert check_subset_list([[1, 2], [3, 4]], [2, 4, 5]) == False", "assert check_subset_list([[1, 2], [3, 4]], []) == True", "assert check_subset_list([], [1]) == False", "assert check_subset_list([], []) == True", "assert check_subset_list([1, [2, [3, [4, [5]]]]], [5]) == True", "assert check_subset_list([1, [2, [3, [4, [5]]]]], [6]) == False", "assert check_subset_list([1, [2, [3, [4, [5]]]]], [1, 2, 3, 4, 5]) == True", "assert check_subset_list([1, [2, [3, [4, [5]]]]], [1, 2, 3, 4, 6]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering duplicate elements.", "code": "def check_subset_list_with_duplicates(list1, list2):\n    from collections import Counter\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return not (Counter(flat_list2) - Counter(flat_list1))", "task_id": "216_b5894f5e-9134-4853-b934-5ddbbd5010f2", "test_setup_code": "", "test_list": ["assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [3]]) == True", "assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [5]]) == False", "assert check_subset_list_with_duplicates([[1, 2, 2], [3, 4]], [[1, 2], [2, 3]]) == True", "assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [3, 4]]) == True", "assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]]) == False", "assert check_subset_list_with_duplicates([[], [1, 2]], [[1, 2]]) == True", "assert check_subset_list_with_duplicates([[1, 2], [3, [4, 5]]], [[1, 2], [4, 5]]) == True", "assert check_subset_list_with_duplicates([[1, 2], [3, [4, 5]]], [[1, 2], [4, 6]]) == False", "assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [3, 4, 4]]) == False", "assert check_subset_list_with_duplicates([[1, 2], [3, 4]], [[1, 2], [3, 3]]) == False", "assert check_subset_list_with_duplicates([[1, [2, 3]], [4]], [[1, 2], [3, 4]]) == True", "assert check_subset_list_with_duplicates([[1, [2, 3]], [4]], [[1, 2], [3, 5]]) == False", "assert check_subset_list_with_duplicates([[1, 2, 3]], [[1], [2], [3]]) == True", "assert check_subset_list_with_duplicates([[1, 2, 3]], [[1, 2, 3, 4]]) == False", "assert check_subset_list_with_duplicates([[1, 2], [2, 3]], [[2, 2], [3]]) == True"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ignoring case for string elements.", "code": "def check_subset_list_ignore_case(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = [str(item).lower() if isinstance(item, str) else item for item in flatten(list1)]\n    flat_list2 = [str(item).lower() if isinstance(item, str) else item for item in flatten(list2)]\n    return all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_2e8b2bda-d89f-44fc-a605-3f8210eb2a0f", "test_setup_code": "", "test_list": ["assert check_subset_list_ignore_case([[1, 2], [3, 4]], [[1], [3]]) == True", "assert check_subset_list_ignore_case([[1, 2], [3, 4]], [[1], [5]]) == False", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['A'], ['C']]) == True", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['A'], ['E']]) == False", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['a', 'b'], ['c', 'd']]) == True", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['a', 'b'], ['c', 'e']]) == False", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['a', 'b'], ['c']]) == True", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['a', 'b'], ['d']]) == True", "assert check_subset_list_ignore_case([['a', 'b'], ['c', 'd']], [['a', 'b'], ['e']]) == False", "assert check_subset_list_ignore_case([[1, 'A'], [2, 'B']], [[1, 'a'], [2, 'b']]) == True", "assert check_subset_list_ignore_case([[1, 'A'], [2, 'B']], [[1, 'a'], [3, 'b']]) == False", "assert check_subset_list_ignore_case([[1, 2, 3], [4, 5, 6]], [[1, 2], [4, 5]]) == True", "assert check_subset_list_ignore_case([[1, 2, 3], [4, 5, 6]], [[1, 2], [4, 7]]) == False", "assert check_subset_list_ignore_case([[1, [2, 3]], [4, [5, 6]]], [[1, [2]], [4, [5]]]) == True", "assert check_subset_list_ignore_case([[1, [2, 3]], [4, [5, 6]]], [[1, [2]], [4, [7]]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the order of elements.", "code": "def check_subset_list_with_order(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    it = iter(flat_list1)\n    return all(any(elem == x for x in it) for elem in flat_list2)", "task_id": "216_6fd380ed-0ee8-4723-90e4-693c834652e1", "test_setup_code": "", "test_list": ["assert check_subset_list_with_order([[1, 2], [3, 4]], [1, 2, 3, 4]) == True", "assert check_subset_list_with_order([[1, 2], [3, 4]], [2, 3]) == True", "assert check_subset_list_with_order([[1, 2], [3, 4]], [1, 3]) == False", "assert check_subset_list_with_order([[1, [2, 3]], [4]], [2, 3, 4]) == True", "assert check_subset_list_with_order([[1, [2, 3]], [4]], [1, 2, 4]) == False", "assert check_subset_list_with_order([1, [2, [3, 4]], 5], [2, 3, 4]) == True", "assert check_subset_list_with_order([1, [2, [3, 4]], 5], [3, 2, 4]) == False", "assert check_subset_list_with_order([1, [2, [3, 4]], 5], [1, 5]) == True", "assert check_subset_list_with_order([1, [2, [3, 4]], 5], [1, 6]) == False", "assert check_subset_list_with_order([1, [2, [3, 4]], 5], []) == True", "assert check_subset_list_with_order([], [1, 2, 3]) == False", "assert check_subset_list_with_order([1, 2, 3], [1, 2, 3]) == True", "assert check_subset_list_with_order([1, 2, 3], [2, 3, 1]) == False", "assert check_subset_list_with_order([[1, 2], [3, 4]], [1, 2, 4]) == True", "assert check_subset_list_with_order([[1, 2], [3, 4]], [4, 3, 2, 1]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for a certain number of mismatches.", "code": "def check_subset_list_with_tolerance(list1, list2, tolerance):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    mismatches = sum(1 for elem in flat_list2 if elem not in flat_list1)\n    return mismatches <= tolerance", "task_id": "216_7dc5d523-4cba-465d-b003-c15d021c783c", "test_setup_code": "", "test_list": ["assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2], 0) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, 3], 0) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, 5], 1) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, 5], 0) == False", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 5]], 1) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 5]], 0) == False", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 5]], 1) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 5]], 0) == False", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4]], 0) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4]], 1) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 6]], 1) == False", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 6]], 2) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 6, 7]], 2) == False", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 6, 7]], 3) == True", "assert check_subset_list_with_tolerance([1, 2, [3, 4]], [1, 2, [3, 4, 6, 7, 8]], 3) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the types of elements.", "code": "def check_subset_list_with_types(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(any(isinstance(elem, type(x)) and elem == x for x in flat_list1) for elem in flat_list2)", "task_id": "216_0cc63c16-3296-40cc-93f0-20e1412eddd3", "test_setup_code": "", "test_list": ["assert check_subset_list_with_types([1, [2, 3]], [1, 2]) == True", "assert check_subset_list_with_types([1, [2, 3]], [1, 4]) == False", "assert check_subset_list_with_types([1, [2, 3]], [1, [2, 3]]) == True", "assert check_subset_list_with_types([1, [2, 3]], [1, [4, 5]]) == False", "assert check_subset_list_with_types([1, [2, [3, 4]]], [1, 2, 3]) == True", "assert check_subset_list_with_types([1, [2, [3, 4]]], [1, 2, 5]) == False", "assert check_subset_list_with_types([1, [2, [3, 4]]], [1, [2, 3]]) == True", "assert check_subset_list_with_types([1, [2, [3, 4]]], [1, [2, 5]]) == False", "assert check_subset_list_with_types([1, 'a', [2, 'b']], [1, 'a']) == True", "assert check_subset_list_with_types([1, 'a', [2, 'b']], [1, 'c']) == False", "assert check_subset_list_with_types([1, 'a', [2, 'b']], [1, [2, 'b']]) == True", "assert check_subset_list_with_types([1, 'a', [2, 'b']], [1, [2, 'c']]) == False", "assert check_subset_list_with_types([1, [2, [3, [4, 5]]]], [1, 2, 3, 4, 5]) == True", "assert check_subset_list_with_types([1, [2, [3, [4, 5]]]], [1, 2, 3, 4, 6]) == False", "assert check_subset_list_with_types([1, [2, [3, [4, 5]]]], [1, [2, [3, [4, 5]]]]) == True"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for numerical elements to be within a certain threshold.", "code": "def check_subset_list_with_threshold(list1, list2, threshold):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    def is_within_threshold(a, b, threshold):\n        return abs(a - b) <= threshold\n    return all(any(is_within_threshold(elem, x, threshold) if isinstance(elem, (int, float)) and isinstance(x, (int, float)) else elem == x for x in flat_list1) for elem in flat_list2)", "task_id": "216_feba1f36-2b4a-444e-ab9f-564a4847a72a", "test_setup_code": "", "test_list": ["assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 4]], 0) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 5]], 1) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 6]], 1) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]], 0) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3]], 0) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3]], 1) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [5]], 2) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [6]], 2) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]], 1) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [4]], 1) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [5]], 3) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [7]], 3) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 4]], 1) == True", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 5]], 0) == False", "assert check_subset_list_with_threshold([[1, 2], [3, 4]], [[1, 2], [3, 4]], 2) == True"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, using a custom comparator function.", "code": "def check_subset_list_with_custom_comparator(list1, list2, comparator):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(any(comparator(elem, x) for x in flat_list1) for elem in flat_list2)", "task_id": "216_e92293ec-ec57-4be7-8f41-80764dd29d6a", "test_setup_code": "", "test_list": ["assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1], [3]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1], [5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[2], [3]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[2], [5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3, 4]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [4, 5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2, 3]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3, 4]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [4]], lambda x, y: x == y) == True", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3, 5]], lambda x, y: x == y) == False", "assert check_subset_list_with_custom_comparator([[1, 2], [3, 4]], [[1, 2], [3, 4, 5]], lambda x, y: x == y) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ignoring the order of elements.", "code": "def check_subset_list_with_any_order(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return set(flat_list2).issubset(set(flat_list1))", "task_id": "216_de233ddb-db89-4cec-bffb-83e1584bcfc4", "test_setup_code": "", "test_list": ["assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[2], [3]]) == True", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[5], [3]]) == False", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[4], [1]]) == True", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[4, 1], [2]]) == True", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[1, 2, 3, 4]]) == True", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[1, 2, 3, 5]]) == False", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[1, 2], [3, 4], [5]]) == False", "assert check_subset_list_with_any_order([[1, 2], [3, 4]], [[1], [2], [3], [4]]) == True", "assert check_subset_list_with_any_order([[1, 2, [5, 6]], [3, 4]], [[5], [6], [3]]) == True", "assert check_subset_list_with_any_order([[1, 2, [5, 6]], [3, 4]], [[5], [7], [3]]) == False", "assert check_subset_list_with_any_order([[], [1, 2]], [[1], [2]]) == True", "assert check_subset_list_with_any_order([[], [1, 2]], [[]]) == True", "assert check_subset_list_with_any_order([[], [1, 2]], [[3]]) == False", "assert check_subset_list_with_any_order([[1, [2, [3, 4]]]], [[4], [3], [2]]) == True", "assert check_subset_list_with_any_order([[1, [2, [3, 4]]]], [[5], [3], [2]]) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the length of the lists.", "code": "def check_subset_list_with_length(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return len(flat_list2) <= len(flat_list1) and all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_dca744cc-1940-48a5-ae3a-4c0a56538c5a", "test_setup_code": "", "test_list": ["assert check_subset_list_with_length([[1, 2], [3, 4]], [[1, 2]]) == True", "assert check_subset_list_with_length([[1, 2], [3, 4]], [[1, 5]]) == False", "assert check_subset_list_with_length([[1, 2], [3, 4]], [[1, 2], [3, 4]]) == True", "assert check_subset_list_with_length([[1, 2], [3, 4]], [[1, 2], [3, 4], [5]]) == False", "assert check_subset_list_with_length([[1, 2], [3, 4]], [1, 2, 3, 4]) == True", "assert check_subset_list_with_length([[1, 2], [3, 4]], [1, 2, 3, 5]) == False", "assert check_subset_list_with_length([], []) == True", "assert check_subset_list_with_length([], [1]) == False", "assert check_subset_list_with_length([[1, [2, 3]], [4, 5]], [[2, 3]]) == True", "assert check_subset_list_with_length([[1, [2, 3]], [4, 5]], [[2, 6]]) == False", "assert check_subset_list_with_length([[1, [2, 3]], [4, 5]], [[1, 2, 3, 4, 5]]) == True", "assert check_subset_list_with_length([[1, [2, 3]], [4, 5]], [[1, 2, 3, 4, 6]]) == False", "assert check_subset_list_with_length([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 6]]) == True", "assert check_subset_list_with_length([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5, 7]]) == False", "assert check_subset_list_with_length([[1, 2], [3, 4], [5, 6]], [[1, 2], [3, 4], [5]]) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only dividing the larger number by 2.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A //= 2\n        else:\n            B //= 2\n        operations += 1\n    return operations", "task_id": "218_bcb3ef28-c6ba-4568-a9e2-70ddbbb38938", "test_setup_code": "", "test_list": ["assert min_operations_to_make_equal(16, 2) == 3", "assert min_operations_to_make_equal(10, 5) == 1", "assert min_operations_to_make_equal(1, 1) == 0", "assert min_operations_to_make_equal(15, 7) == 4", "assert min_operations_to_make_equal(100, 25) == 2", "assert min_operations_to_make_equal(64, 8) == 3", "assert min_operations_to_make_equal(9, 3) == 2", "assert min_operations_to_make_equal(18, 9) == 1", "assert min_operations_to_make_equal(50, 25) == 1", "assert min_operations_to_make_equal(1000, 125) == 3", "assert min_operations_to_make_equal(32, 4) == 3", "assert min_operations_to_make_equal(128, 16) == 3", "assert min_operations_to_make_equal(200, 25) == 4", "assert min_operations_to_make_equal(512, 64) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only adding 1 to the smaller number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A += 1\n        else:\n            B += 1\n        operations += 1\n    return operations", "task_id": "218_22f3b848-6771-401c-a987-9e93271f9196", "test_setup_code": "", "test_list": ["assert min_operations_to_make_equal(5, 10) == 5", "assert min_operations_to_make_equal(10, 5) == 5", "assert min_operations_to_make_equal(0, 0) == 0", "assert min_operations_to_make_equal(1, 1) == 0", "assert min_operations_to_make_equal(100, 100) == 0", "assert min_operations_to_make_equal(0, 1) == 1", "assert min_operations_to_make_equal(1, 0) == 1", "assert min_operations_to_make_equal(999, 1000) == 1", "assert min_operations_to_make_equal(1000, 999) == 1", "assert min_operations_to_make_equal(50, 75) == 25", "assert min_operations_to_make_equal(75, 50) == 25", "assert min_operations_to_make_equal(0, 100) == 100", "assert min_operations_to_make_equal(100, 0) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only multiplying the smaller number by 3.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A *= 3\n        else:\n            B *= 3\n        operations += 1\n    return operations", "task_id": "218_84ac6b4a-e572-481f-a121-7789cd04052f", "test_setup_code": "", "test_list": ["assert min_operations_to_make_equal(1, 3) == 1", "assert min_operations_to_make_equal(3, 9) == 1", "assert min_operations_to_make_equal(2, 6) == 1", "assert min_operations_to_make_equal(1, 27) == 3", "assert min_operations_to_make_equal(9, 81) == 1", "assert min_operations_to_make_equal(1, 1) == 0", "assert min_operations_to_make_equal(3, 3) == 0", "assert min_operations_to_make_equal(2, 18) == 2", "assert min_operations_to_make_equal(4, 12) == 1", "assert min_operations_to_make_equal(5, 15) == 1", "assert min_operations_to_make_equal(1, 81) == 4", "assert min_operations_to_make_equal(7, 21) == 1", "assert min_operations_to_make_equal(10, 30) == 1", "assert min_operations_to_make_equal(1, 243) == 5", "assert min_operations_to_make_equal(27, 81) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only dividing the larger number by 3.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A //= 3\n        else:\n            B //= 3\n        operations += 1\n    return operations", "task_id": "218_6214645b-aca0-4166-b375-2724370d4971", "test_setup_code": "", "test_list": ["assert min_operations_to_make_equal(9, 3) == 1", "assert min_operations_to_make_equal(27, 3) == 2", "assert min_operations_to_make_equal(81, 9) == 2", "assert min_operations_to_make_equal(1, 1) == 0", "assert min_operations_to_make_equal(3, 3) == 0", "assert min_operations_to_make_equal(10, 3) == 3", "assert min_operations_to_make_equal(100, 1) == 5", "assert min_operations_to_make_equal(243, 27) == 3", "assert min_operations_to_make_equal(729, 9) == 4", "assert min_operations_to_make_equal(1000, 1) == 6", "assert min_operations_to_make_equal(15, 5) == 4", "assert min_operations_to_make_equal(81, 27) == 1", "assert min_operations_to_make_equal(100, 10) == 4", "assert min_operations_to_make_equal(243, 3) == 4", "assert min_operations_to_make_equal(999, 1) == 6"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or semicolons with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,;]', ':', text, n)", "task_id": "220_85dca5af-147e-4e18-8fcb-1544c1ffc298", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world; this is a test', 2) == 'Hello: world: this is a test'", "assert replace_max_specialchar('No special characters here', 3) == 'No special characters here'", "assert replace_max_specialchar('Multiple, spaces; and, commas;', 4) == 'Multiple: spaces: and: commas;'", "assert replace_max_specialchar('Edge case with no replacements needed', 0) == 'Edge case with no replacements needed'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or exclamation marks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,!]', ':', text, n)", "task_id": "220_c65695dd-63e3-4c80-abcc-6bbefaca54f3", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world!', 1) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world!', 2) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world!', 3) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world!', 0) == 'Hello, world!'", "assert replace_max_specialchar('Hello, world! How are you?', 2) == 'Hello: world: How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 5) == 'Hello: world: How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 4) == 'Hello: world: How:are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 1) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 6) == 'Hello: world: How:are:you?'", "assert replace_max_specialchar('Hello, world! How are you?', 7) == 'Hello: world: How:are:you?'", "assert replace_max_specialchar('Hello, world!', 10) == 'Hello: world:'", "assert replace_max_specialchar('Hello world', 1) == 'Hello:world'", "assert replace_max_specialchar('Hello, world!', 1) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world! How are you?', 3) == 'Hello: world: How:are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 0) == 'Hello, world! How are you?'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or question marks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,?]', ':', text, n)", "task_id": "220_675fb2b4-3dfe-449e-bd82-5d4e18f0a479", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world?', 1) == 'Hello: world?'", "assert replace_max_specialchar('Hello, world?', 2) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world?', 3) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world? How are you?', 4) == 'Hello: world: How are you?'", "assert replace_max_specialchar('Hello, world? How are you?', 5) == 'Hello: world: How are you:'", "assert replace_max_specialchar('Hello, world? How are you?', 6) == 'Hello: world: How are you:'", "assert replace_max_specialchar('Hello, world? How are you?', 0) == 'Hello, world? How are you?'", "assert replace_max_specialchar('Hello world', 1) == 'Hello world'", "assert replace_max_specialchar('Hello, world, how are you?', 2) == 'Hello: world: how are you?'", "assert replace_max_specialchar('Hello, world, how are you?', 3) == 'Hello: world: how are you:'", "assert replace_max_specialchar('Hello, world, how are you?', 4) == 'Hello: world: how are you:'", "assert replace_max_specialchar('Hello, world? How, are, you?', 5) == 'Hello: world: How: are: you?'", "assert replace_max_specialchar('Hello, world? How, are, you?', 6) == 'Hello: world: How: are: you:'", "assert replace_max_specialchar('Hello, world? How, are, you?', 7) == 'Hello: world: How: are: you:'", "assert replace_max_specialchar('Hello, world? How, are you?', 3) == 'Hello: world: How: are you?'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or colons with a semicolon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,:]', ';', text, n)", "task_id": "220_28a0326f-746f-4fbe-9365-e87710e840d1", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello World', 1) == 'Hello;World'", "assert replace_max_specialchar('Hello, World', 1) == 'Hello;World'", "assert replace_max_specialchar('Hello: World', 1) == 'Hello;World'", "assert replace_max_specialchar('Hello, World: Test', 2) == 'Hello;World;Test'", "assert replace_max_specialchar('Hello, World: Test', 3) == 'Hello;World;Test'", "assert replace_max_specialchar('Hello, World: Test', 1) == 'Hello;World: Test'", "assert replace_max_specialchar('a,b:c d', 4) == 'a;b;c;d'", "assert replace_max_specialchar('a,b:c d', 2) == 'a;b;c d'", "assert replace_max_specialchar('', 3) == ''", "assert replace_max_specialchar('No special chars here', 0) == 'No special chars here'", "assert replace_max_specialchar('Multiple   spaces', 2) == 'Multiple;;spaces'", "assert replace_max_specialchar('a:b:c:d', 2) == 'a;b;c:d'", "assert replace_max_specialchar('a,b,c,d', 3) == 'a;b;c;d'", "assert replace_max_specialchar('a b c,d:e', 5) == 'a;b;c;d;e'", "assert replace_max_specialchar('a b c,d:e', 10) == 'a;b;c;d;e'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or hyphens with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,-]', ':', text, n)", "task_id": "220_d46eab2a-6b83-46f9-94b9-97b01f34bc18", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('hello world', 1) == 'hello:world'", "assert replace_max_specialchar('hello, world', 2) == 'hello::world'", "assert replace_max_specialchar('hello-world', 1) == 'hello:world'", "assert replace_max_specialchar('hello world, how-are you', 3) == 'hello:world:how:are you'", "assert replace_max_specialchar('hello world, how-are you', 0) == 'hello world, how-are you'", "assert replace_max_specialchar('hello world, how-are you', 5) == 'hello:world:how:are:you'", "assert replace_max_specialchar('no special chars here', 2) == 'no:special chars here'", "assert replace_max_specialchar('multiple, spaces, commas, and-hyphens', 4) == 'multiple:spaces:commas:and-hyphens'", "assert replace_max_specialchar('multiple, spaces, commas, and-hyphens', 10) == 'multiple:spaces:commas:and:hyphens'", "assert replace_max_specialchar('a b c d e', 3) == 'a:b:c:d e'", "assert replace_max_specialchar('a-b-c-d-e', 2) == 'a:b:c-d-e'", "assert replace_max_specialchar('a b-c d-e f', 4) == 'a:b:c:d-e f'", "assert replace_max_specialchar('a b-c d-e f', 1) == 'a:b-c d-e f'", "assert replace_max_specialchar('a b-c d-e f', 0) == 'a b-c d-e f'", "assert replace_max_specialchar('a b-c d-e f', 5) == 'a:b:c:d:e f'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or underscores with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,_]', ':', text, n)", "task_id": "220_0d56a5fa-978c-40b5-9047-76ee648b9ee3", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world!', 1) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world!', 2) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world!', 0) == 'Hello, world!'", "assert replace_max_specialchar('Hello, world! How are you?', 3) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 1) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello_world! How are you?', 1) == 'Hello:world! How are you?'", "assert replace_max_specialchar('Hello_world! How are you?', 2) == 'Hello:world! How are you?'", "assert replace_max_specialchar('Hello_world! How are you?', 3) == 'Hello:world! How are you?'", "assert replace_max_specialchar('Hello_world! How are you?', 0) == 'Hello_world! How are you?'", "assert replace_max_specialchar('Hello, world! How_are you?', 2) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello, world! How_are you?', 3) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello, world! How_are you?', 4) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello, world! How_are you?', 5) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello, world! How_are you?', 10) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello world', 1) == 'Hello:world'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or slashes with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,/]', ':', text, n)", "task_id": "220_d934621d-14b3-41ba-bde6-c3f0b7ff90e4", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('hello, world/ this is a test', 2) == 'hello: world: this is a test'", "assert replace_max_specialchar('hello, world/ this is a test', 0) == 'hello, world/ this is a test'", "assert replace_max_specialchar('hello, world/ this is a test', 5) == 'hello: world: this: is: a: test'", "assert replace_max_specialchar('no special characters here', 3) == 'no special characters here'", "assert replace_max_specialchar(' , / , / , / ', 4) == ': : : : : : : : '", "assert replace_max_specialchar(' , / , / , / ', 2) == ': : / , / , / '", "assert replace_max_specialchar(' , / , / , / ', 6) == ': : : : : : : : '", "assert replace_max_specialchar(' , / , / , / ', 1) == ': / , / , / '", "assert replace_max_specialchar(' , / , / , / ', 0) == ' , / , / , / '", "assert replace_max_specialchar('a,b/c d,e/f g,h/i', 3) == 'a:b:c d,e/f g,h/i'", "assert replace_max_specialchar('a,b/c d,e/f g,h/i', 6) == 'a:b:c d:e:f g,h/i'", "assert replace_max_specialchar('a,b/c d,e/f g,h/i', 9) == 'a:b:c d:e:f g:h:i'", "assert replace_max_specialchar('a,b/c d,e/f g,h/i', 12) == 'a:b:c d:e:f g:h:i'", "assert replace_max_specialchar('a b c d e f', 3) == 'a:b:c d e f'", "assert replace_max_specialchar('a b c d e f', 6) == 'a:b:c:d:e:f'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or backslashes with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,\\\\]', ':', text, n)", "task_id": "220_e8fe760b-caf9-4d7b-ac92-15a049193471", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world', 1) == 'Hello: world'", "assert replace_max_specialchar('Hello, world', 2) == 'Hello: world'", "assert replace_max_specialchar('Hello, world', 0) == 'Hello, world'", "assert replace_max_specialchar('Hello world', 1) == 'Hello:world'", "assert replace_max_specialchar('Hello world', 2) == 'Hello:world'", "assert replace_max_specialchar('Hello\\ world', 1) == 'Hello: world'", "assert replace_max_specialchar('Hello\\ world', 2) == 'Hello: world'", "assert replace_max_specialchar('Hello, world\\', 1) == 'Hello: world\\'", "assert replace_max_specialchar('Hello, world\\', 2) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 3) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 4) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 5) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 6) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 7) == 'Hello: world:'", "assert replace_max_specialchar('Hello, world\\', 8) == 'Hello: world:'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or asterisks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,*]', ':', text, n)", "task_id": "220_37bbada6-a563-4fb1-8948-71e546fc083e", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('hello, world', 1) == 'hello: world'", "assert replace_max_specialchar('hello, world', 2) == 'hello: world'", "assert replace_max_specialchar('hello, world', 0) == 'hello, world'", "assert replace_max_specialchar('hello, world', 5) == 'hello: world'", "assert replace_max_specialchar('hello, world*', 2) == 'hello: world:'", "assert replace_max_specialchar('hello, world*', 1) == 'hello: world*'", "assert replace_max_specialchar('hello, world*', 3) == 'hello: world:'", "assert replace_max_specialchar('hello, world*', 0) == 'hello, world*'", "assert replace_max_specialchar('hello, world*', 10) == 'hello: world:'", "assert replace_max_specialchar('hello world', 1) == 'hello:world'", "assert replace_max_specialchar('hello world', 2) == 'hello:world'", "assert replace_max_specialchar('hello*world', 1) == 'hello:world'", "assert replace_max_specialchar('hello*world', 2) == 'hello:world'", "assert replace_max_specialchar('hello, world, this is a test', 3) == 'hello: world: this is a test'", "assert replace_max_specialchar('hello, world, this is a test', 5) == 'hello: world: this is a test'"], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or plus signs with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,+]', ':', text, n)", "task_id": "220_39aa84fc-a558-48d6-8d4e-51d7311849c1", "test_setup_code": "", "test_list": ["assert replace_max_specialchar('Hello, world!', 1) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world!', 2) == 'Hello: world!'", "assert replace_max_specialchar('Hello, world! How are you?', 1) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 2) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 3) == 'Hello: world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 4) == 'Hello: world! How:are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 5) == 'Hello: world! How:are:you?'", "assert replace_max_specialchar('Hello, world! How are you?', 6) == 'Hello: world! How:are:you?'", "assert replace_max_specialchar('Hello, world! How are you?', 0) == 'Hello, world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', -1) == 'Hello, world! How are you?'", "assert replace_max_specialchar('Hello, world! How are you?', 100) == 'Hello: world! How:are:you?'", "assert replace_max_specialchar('Hello+world+How+are+you', 2) == 'Hello:world:How+are+you'", "assert replace_max_specialchar('Hello+world+How+are+you', 5) == 'Hello:world:How:are:you'", "assert replace_max_specialchar('Hello world, How are you?', 3) == 'Hello:world: How:are you?'", "assert replace_max_specialchar('Hello world, How are you?', 10) == 'Hello:world: How:are:you?'"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are even numbers.", "code": "def all_elements_even(numbers: tuple) -> bool:\n    return all(num % 2 == 0 for num in numbers)", "task_id": "222_1859d79e-6a66-4824-8c94-23217544d944", "test_setup_code": "", "test_list": ["assert all_elements_even((2, 4, 6, 8)) == true", "assert all_elements_even((1, 2, 3, 4)) == false", "assert all_elements_even((0, 2, 4, 6)) == true", "assert all_elements_even((1, 3, 5, 7)) == false", "assert all_elements_even((10, 20, 30, 40)) == true", "assert all_elements_even((2, 4, 6, 7)) == false", "assert all_elements_even((2,)) == true", "assert all_elements_even((1,)) == false", "assert all_elements_even(()) == true", "assert all_elements_even((0,)) == true", "assert all_elements_even((2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) == true", "assert all_elements_even((2, 4, 6, 8, 10, 12, 14, 16, 18, 19)) == false", "assert all_elements_even((100, 200, 300, 400)) == true", "assert all_elements_even((100, 201, 300, 400)) == false", "assert all_elements_even((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)) == true"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are positive numbers.", "code": "def all_elements_positive(numbers: tuple) -> bool:\n    return all(num > 0 for num in numbers)", "task_id": "222_6922cd3d-63c5-408c-a79d-162acd776e9e", "test_setup_code": "", "test_list": ["assert all_elements_positive((1, 2, 3)) == True", "assert all_elements_positive((0, 1, 2)) == False", "assert all_elements_positive((-1, 2, 3)) == False", "assert all_elements_positive((1.5, 2.7, 3.9)) == True", "assert all_elements_positive((-1.5, 2.7, 3.9)) == False", "assert all_elements_positive((0.0, 1.5, 2.7)) == False", "assert all_elements_positive((1,)) == True", "assert all_elements_positive((-1,)) == False", "assert all_elements_positive((0,)) == False", "assert all_elements_positive(()) == True", "assert all_elements_positive((100, 200, 300)) == True", "assert all_elements_positive((1, 0, -1)) == False", "assert all_elements_positive((0.1, 0.2, 0.3)) == True", "assert all_elements_positive((-0.1, -0.2, -0.3)) == False", "assert all_elements_positive((1, -1, 1, -1)) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are unique.", "code": "def all_elements_unique(elements: tuple) -> bool:\n    return len(elements) == len(set(elements))", "task_id": "222_9db6490d-0080-4bd1-b190-25cacbd3bb5e", "test_setup_code": "", "test_list": ["assert all_elements_unique((1, 2, 3, 4, 5)) == True", "assert all_elements_unique((1, 2, 3, 4, 1)) == False", "assert all_elements_unique(()) == True", "assert all_elements_unique((1,)) == True", "assert all_elements_unique((1, 1)) == False", "assert all_elements_unique(('a', 'b', 'c')) == True", "assert all_elements_unique(('a', 'b', 'a')) == False", "assert all_elements_unique((True, False)) == True", "assert all_elements_unique((True, False, True)) == False", "assert all_elements_unique((1, 'a', True)) == True", "assert all_elements_unique((0, False)) == True", "assert all_elements_unique((None, None)) == False", "assert all_elements_unique((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True", "assert all_elements_unique((1, 2, 3, 4, 5, 1, 2, 3, 4, 5)) == False", "assert all_elements_unique((1.0, 2.0, 3.0, 1.0)) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are strings.", "code": "def all_elements_strings(elements: tuple) -> bool:\n    return all(isinstance(ele, str) for ele in elements)", "task_id": "222_ce7151b1-851c-4076-b8ae-5a4415d10d8d", "test_setup_code": "", "test_list": ["assert all_elements_strings(()) == True", "assert all_elements_strings(('hello', 'world')) == True", "assert all_elements_strings(('hello', 123)) == False", "assert all_elements_strings(('one', 'two', 'three')) == True", "assert all_elements_strings(('one', 'two', 3.14)) == False", "assert all_elements_strings(('single',)) == True", "assert all_elements_strings((123,)) == False", "assert all_elements_strings(('string', 'another string', '')) == True", "assert all_elements_strings(('string', '', 0)) == False", "assert all_elements_strings(('a', 'b', 'c', 'd', 'e')) == True", "assert all_elements_strings(('a', 'b', 'c', 'd', 5)) == False", "assert all_elements_strings((' ', ' ', ' ')) == True", "assert all_elements_strings((' ', ' ', 1)) == False", "assert all_elements_strings(('string', None)) == False", "assert all_elements_strings(('string', True)) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are non-empty.", "code": "def all_elements_non_empty(elements: tuple) -> bool:\n    return all(bool(ele) for ele in elements)", "task_id": "222_1209d1a1-99c2-4431-8dba-63392589db18", "test_setup_code": "", "test_list": ["assert all_elements_non_empty((1, 2, 3)) == True", "assert all_elements_non_empty(('a', 'b', 'c')) == True", "assert all_elements_non_empty((True, False, True)) == True", "assert all_elements_non_empty((0, 1, 2)) == False", "assert all_elements_non_empty(('', 'hello', 'world')) == False", "assert all_elements_non_empty((None, 'a', 'b')) == False", "assert all_elements_non_empty(([], [1], [2, 3])) == False", "assert all_elements_non_empty(([1], [2], [3])) == True", "assert all_elements_non_empty(({}, {'a': 1}, {'b': 2})) == False", "assert all_elements_non_empty(({'a': 1}, {'b': 2}, {'c': 3})) == True", "assert all_elements_non_empty(()) == True", "assert all_elements_non_empty((0,)) == False", "assert all_elements_non_empty(('',)) == False", "assert all_elements_non_empty((None,)) == False", "assert all_elements_non_empty(('a', 1, [1], {'a': 1}, True)) == True"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings are in uppercase.", "code": "def all_elements_uppercase(strings: tuple) -> bool:\n    return all(s.isupper() for s in strings)", "task_id": "222_0d63a839-1699-4296-a51a-2b518cebe10a", "test_setup_code": "", "test_list": ["assert all_elements_uppercase(()) == True", "assert all_elements_uppercase(('HELLO', 'WORLD')) == True", "assert all_elements_uppercase(('HELLO', 'world')) == False", "assert all_elements_uppercase(('HELLO', 'WORLD', 'PYTHON')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', 'python')) == False", "assert all_elements_uppercase(('HELLO', 'WORLD', '123')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'python')) == False", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', ' ')) == False", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '!', '@')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '!', '@', 'a')) == False", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '!', '@', 'A')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '!', '@', 'A', 'Z')) == True", "assert all_elements_uppercase(('HELLO', 'WORLD', '123', 'PYTHON', '!', '@', 'A', 'z')) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings start with a vowel.", "code": "def all_elements_start_with_vowel(strings: tuple) -> bool:\n    vowels = 'AEIOUaeiou'\n    return all(s[0] in vowels for s in strings if s)", "task_id": "222_763b8d78-a162-4030-9a0e-d50a4c9551ad", "test_setup_code": "", "test_list": ["assert all_elements_start_with_vowel(('apple', 'orange', 'umbrella')) == True", "assert all_elements_start_with_vowel(('apple', 'banana', 'umbrella')) == False", "assert all_elements_start_with_vowel(('Apple', 'Orange', 'Umbrella')) == True", "assert all_elements_start_with_vowel(('apple', 'Orange', 'umbrella')) == True", "assert all_elements_start_with_vowel(('apple', 'orange', 'banana')) == False", "assert all_elements_start_with_vowel(('elephant', 'iguana', 'octopus')) == True", "assert all_elements_start_with_vowel(('elephant', 'iguana', 'octopus', 'cat')) == False", "assert all_elements_start_with_vowel(('elephant', 'iguana', 'octopus', '')) == True", "assert all_elements_start_with_vowel(('')) == True", "assert all_elements_start_with_vowel(('A', 'E', 'I', 'O', 'U')) == True", "assert all_elements_start_with_vowel(('a', 'e', 'i', 'o', 'u')) == True", "assert all_elements_start_with_vowel(('A', 'b', 'I', 'O', 'U')) == False", "assert all_elements_start_with_vowel(('apple', 'orange', 'umbrella', '')) == True", "assert all_elements_start_with_vowel(('apple', 'Orange', 'umbrella', 'Banana')) == False", "assert all_elements_start_with_vowel(('apple', 'orange', 'umbrella', 'Egg')) == True"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings have a length greater than five.", "code": "def all_elements_length_greater_than_five(strings: tuple) -> bool:\n    return all(len(s) > 5 for s in strings)", "task_id": "222_9d9ab693-2537-4a18-a752-f5f1cbfe1364", "test_setup_code": "", "test_list": ["assert all_elements_length_greater_than_five(()) == True", "assert all_elements_length_greater_than_five(('abcdef',)) == True", "assert all_elements_length_greater_than_five(('abc', 'defghij')) == False", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl')) == True", "assert all_elements_length_greater_than_five(('abcdef', 'ghij', 'klmnop')) == False", "assert all_elements_length_greater_than_five(('a', 'b', 'c', 'd', 'e', 'fghijkl')) == False", "assert all_elements_length_greater_than_five(('123456', 'abcdef')) == True", "assert all_elements_length_greater_than_five(('12345', 'abcdef')) == False", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl', 'mnopqr', 'stuvwx')) == True", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'y')) == False", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yz')) == False", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yzabcd')) == True", "assert all_elements_length_greater_than_five(('abcdef', 'ghijkl', 'mnopqr', 'stuvwx', 'yzabcde')) == True", "assert all_elements_length_greater_than_five(('abcdefg', 'hijklmn', 'opqrstu', 'vwxyzab')) == True", "assert all_elements_length_greater_than_five(('abcdefg', 'hijklmn', 'opqrstu', 'vwxyz', 'ab')) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings are palindromes.", "code": "def all_elements_palindromes(strings: tuple) -> bool:\n    return all(s == s[::-1] for s in strings)", "task_id": "222_df7914b9-0566-4494-bf46-3a8b723f4f02", "test_setup_code": "", "test_list": ["assert all_elements_palindromes(()) == True", "assert all_elements_palindromes(('a',)) == True", "assert all_elements_palindromes(('aba', 'cdc')) == True", "assert all_elements_palindromes(('aba', 'cdc', 'xyz')) == False", "assert all_elements_palindromes(('racecar', 'level', 'radar')) == True", "assert all_elements_palindromes(('racecar', 'level', 'hello')) == False", "assert all_elements_palindromes(('A', 'B', 'C')) == True", "assert all_elements_palindromes(('A', 'B', 'C', 'D')) == True", "assert all_elements_palindromes(('madam', 'noon', 'civic', 'deified')) == True", "assert all_elements_palindromes(('madam', 'noon', 'civic', 'deified', 'world')) == False", "assert all_elements_palindromes(('12321', '45654', '78987')) == True", "assert all_elements_palindromes(('12321', '45654', '78987', '12345')) == False", "assert all_elements_palindromes(('a', 'aa', 'aaa', 'aaaa')) == True", "assert all_elements_palindromes(('a', 'aa', 'aaa', 'aaaa', 'abc')) == False", "assert all_elements_palindromes(('rotor', 'level', 'rotator', 'deed', 'peep')) == True"], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are integers.", "code": "def all_elements_integers(elements: tuple) -> bool:\n    return all(isinstance(ele, int) for ele in elements)", "task_id": "222_effd7586-8206-4039-94a2-f8f68aba9011", "test_setup_code": "", "test_list": ["assert all_elements_integers((1, 2, 3)) == True", "assert all_elements_integers((1, '2', 3)) == False", "assert all_elements_integers((1.0, 2, 3)) == False", "assert all_elements_integers(()) == True", "assert all_elements_integers((0, -1, 2)) == True", "assert all_elements_integers((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True", "assert all_elements_integers((1, 2, 3, 4, 5, '6', 7, 8, 9, 10)) == False", "assert all_elements_integers(('a', 'b', 'c')) == False", "assert all_elements_integers((True, False, 1, 0)) == False", "assert all_elements_integers((1, 2, 3, None)) == False", "assert all_elements_integers((1, 2, 3, 4.5)) == False", "assert all_elements_integers((1, 2, 3, [4])) == False", "assert all_elements_integers((1, 2, 3, (4,))) == False", "assert all_elements_integers((1, 2, 3, {4: 'four'})) == False", "assert all_elements_integers((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the first odd number in a given list of numbers.", "code": "def find_first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 != 0), -1)\n    return first_odd", "task_id": "221_6fd540ee-6829-4a8e-acc7-0e432d5dfcac", "test_setup_code": "", "test_list": ["assert find_first_odd([2, 4, 6, 8, 10, 3, 5]) == 3", "assert find_first_odd([1, 2, 3, 4, 5]) == 1", "assert find_first_odd([2, 4, 6, 8, 10]) == -1", "assert find_first_odd([]) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first positive number in a given list of numbers.", "code": "def find_first_positive(nums):\n    first_positive = next((el for el in nums if el > 0), -1)\n    return first_positive", "task_id": "221_730ae0da-ebb1-4558-a8f6-ba555331c10a", "test_setup_code": "", "test_list": ["assert find_first_positive([1, -2, 3, 4]) == 1", "assert find_first_positive([-1, -2, -3, 4]) == 4", "assert find_first_positive([0, -1, -2, -3]) == -1", "assert find_first_positive([5, 6, 7, 8]) == 5", "assert find_first_positive([-5, -6, -7, -8]) == -1", "assert find_first_positive([0, 0, 0, 1]) == 1", "assert find_first_positive([0, 0, 0, -1]) == -1", "assert find_first_positive([1]) == 1", "assert find_first_positive([-1]) == -1", "assert find_first_positive([]) == -1", "assert find_first_positive([0, 0, 0, 0]) == -1", "assert find_first_positive([1, 2, 3, 4, 5]) == 1", "assert find_first_positive([-1, -2, -3, -4, 0, 6]) == 6", "assert find_first_positive([0, -1, 2, -3, 4]) == 2", "assert find_first_positive([-10, -20, 30, 40, 50]) == 30"], "challenge_test_list": []}
{"text": "Write a python function to find the first negative number in a given list of numbers.", "code": "def find_first_negative(nums):\n    first_negative = next((el for el in nums if el < 0), -1)\n    return first_negative", "task_id": "221_ba415280-5a9b-4d6c-9fd1-7c245291d6b0", "test_setup_code": "", "test_list": ["assert find_first_negative([1, 2, 3, -4, 5]) == -4", "assert find_first_negative([1, 2, 3, 4, 5]) == -1", "assert find_first_negative([-1, 2, 3, 4, 5]) == -1", "assert find_first_negative([0, -1, 2, 3, 4, 5]) == -1", "assert find_first_negative([1, 2, 3, 4, -5, -6]) == -5", "assert find_first_negative([-1, -2, -3, -4, -5]) == -1", "assert find_first_negative([0, 0, 0, 0, 0]) == -1", "assert find_first_negative([1, -2, 3, -4, 5]) == -2", "assert find_first_negative([10, 20, 30, 40, -50, 60, -70]) == -50", "assert find_first_negative([]) == -1", "assert find_first_negative([-100]) == -100", "assert find_first_negative([100, -100]) == -100", "assert find_first_negative([1, 2, 3, 4, 5, -1]) == -1", "assert find_first_negative([1, -1, 2, -2, 3, -3]) == -1", "assert find_first_negative([1, 2, 3, 4, 5, 6, 7, 8, 9, -10]) == -10"], "challenge_test_list": []}
{"text": "Write a python function to find the first number that is a multiple of five in a given list of numbers.", "code": "def find_first_multiple_of_five(nums):\n    first_multiple_of_five = next((el for el in nums if el % 5 == 0), -1)\n    return first_multiple_of_five", "task_id": "221_1f7c3aae-799b-46c8-a268-5eb11a6a19a5", "test_setup_code": "", "test_list": ["assert find_first_multiple_of_five([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert find_first_multiple_of_five([11, 12, 14, 16, 17, 18, 19, 20]) == 20", "assert find_first_multiple_of_five([5, 10, 15, 20, 25]) == 5", "assert find_first_multiple_of_five([1, 2, 3, 4, 6, 7, 8, 9]) == -1", "assert find_first_multiple_of_five([0, 1, 2, 3, 4, 5]) == 0", "assert find_first_multiple_of_five([-5, -10, -15, -20]) == -5", "assert find_first_multiple_of_five([6, 7, 8, 9, 10, 11, 12]) == 10", "assert find_first_multiple_of_five([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14]) == -1", "assert find_first_multiple_of_five([25, 30, 35, 40, 45]) == 25", "assert find_first_multiple_of_five([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20, 25, 30]) == 5", "assert find_first_multiple_of_five([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 25]) == 25", "assert find_first_multiple_of_five([100, 200, 300, 400, 500]) == 100", "assert find_first_multiple_of_five([1, 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 30]) == 30", "assert find_first_multiple_of_five([5]) == 5", "assert find_first_multiple_of_five([]) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first prime number in a given list of numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_prime(nums):\n    first_prime = next((el for el in nums if is_prime(el)), -1)\n    return first_prime", "task_id": "221_49988847-3667-4609-9d6b-42f6c05646cc", "test_setup_code": "", "test_list": ["assert find_first_prime([4, 6, 8, 10, 11]) == 11", "assert find_first_prime([15, 21, 22, 23, 24]) == 23", "assert find_first_prime([1, 2, 3, 4, 5]) == 2", "assert find_first_prime([10, 14, 18, 20]) == -1", "assert find_first_prime([29, 31, 37, 41, 43]) == 29", "assert find_first_prime([4, 6, 8, 9, 10]) == -1", "assert find_first_prime([0, -1, -3, 17, 19]) == 17", "assert find_first_prime([97, 89, 83, 79, 73]) == 97", "assert find_first_prime([4, 6, 7, 8, 9]) == 7", "assert find_first_prime([2, 3, 5, 7, 11]) == 2", "assert find_first_prime([100, 101, 102, 103, 104]) == 101", "assert find_first_prime([49, 51, 53, 55, 57]) == 53", "assert find_first_prime([1, 4, 6, 8, 9, 10, 11]) == 11", "assert find_first_prime([13, 17, 19, 23, 29]) == 13", "assert find_first_prime([4, 6, 8, 10, 12, 14, 16]) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first palindrome number in a given list of numbers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_first_palindrome(nums):\n    first_palindrome = next((el for el in nums if is_palindrome(el)), -1)\n    return first_palindrome", "task_id": "221_aeb99585-5f83-4f5a-942e-61e3e7b86612", "test_setup_code": "", "test_list": ["assert find_first_palindrome([123, 456, 121, 789]) == 121", "assert find_first_palindrome([987, 654, 321]) == -1", "assert find_first_palindrome([11, 22, 33, 44]) == 11", "assert find_first_palindrome([10, 20, 30, 40, 101]) == 101", "assert find_first_palindrome([12321, 45654, 78987]) == 12321", "assert find_first_palindrome([1, 2, 3, 4, 5]) == 1", "assert find_first_palindrome([111, 222, 333, 444]) == 111", "assert find_first_palindrome([123, 456, 789, 101]) == 101", "assert find_first_palindrome([909, 808, 707, 606]) == 909", "assert find_first_palindrome([121, 131, 141, 151]) == 121", "assert find_first_palindrome([1001, 2002, 3003, 4004]) == 1001", "assert find_first_palindrome([999, 888, 777, 666]) == 999", "assert find_first_palindrome([1234321, 2345432, 3456543]) == 1234321", "assert find_first_palindrome([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0", "assert find_first_palindrome([111111, 222222, 333333, 444444]) == 111111"], "challenge_test_list": []}
{"text": "Write a python function to find the first number greater than ten in a given list of numbers.", "code": "def find_first_greater_than_ten(nums):\n    first_greater_than_ten = next((el for el in nums if el > 10), -1)\n    return first_greater_than_ten", "task_id": "221_70be6ba2-eede-418a-980c-2cf9406a6350", "test_setup_code": "", "test_list": ["assert find_first_greater_than_ten([1, 2, 3, 11, 4, 5]) == 11", "assert find_first_greater_than_ten([10, 9, 8, 7, 6, 5]) == -1", "assert find_first_greater_than_ten([15, 20, 25]) == 15", "assert find_first_greater_than_ten([5, 6, 7, 8, 9, 10, 11]) == 11", "assert find_first_greater_than_ten([10, 10, 10, 10, 10, 10, 10, 11]) == 11", "assert find_first_greater_than_ten([]) == -1", "assert find_first_greater_than_ten([10]) == -1", "assert find_first_greater_than_ten([11]) == 11", "assert find_first_greater_than_ten([5, 10, 15, 20]) == 15", "assert find_first_greater_than_ten([0, -1, -2, -3, 12, 14]) == 12", "assert find_first_greater_than_ten([10, 10, 10, 10, 10, 10, 10, 10]) == -1", "assert find_first_greater_than_ten([9, 8, 7, 6, 5, 4, 3, 2, 1]) == -1", "assert find_first_greater_than_ten([11, 11, 11, 11, 11, 11, 11, 11]) == 11", "assert find_first_greater_than_ten([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == 11", "assert find_first_greater_than_ten([100, 200, 300]) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first even number in a given list of numbers.", "code": "def find_first_even_index(nums):\n    first_even_index = next((i for i, el in enumerate(nums) if el % 2 == 0), -1)\n    return first_even_index", "task_id": "221_26142bf3-4bd3-44e9-988b-8a24289dc5db", "test_setup_code": "", "test_list": ["assert find_first_even_index([1, 3, 5, 7, 2, 4, 6]) == 4", "assert find_first_even_index([2, 3, 5, 7, 9]) == 0", "assert find_first_even_index([1, 3, 5, 7, 9]) == -1", "assert find_first_even_index([]) == -1", "assert find_first_even_index([1, 3, 5, 7, 9, 10]) == 5", "assert find_first_even_index([4, 3, 5, 7, 9, 10]) == 0", "assert find_first_even_index([1, 2, 3, 4, 5, 6]) == 1", "assert find_first_even_index([1, 1, 1, 1, 1, 1]) == -1", "assert find_first_even_index([0, 1, 2, 3, 4, 5]) == 0", "assert find_first_even_index([1, 3, 5, 7, 8, 10, 12]) == 4", "assert find_first_even_index([11, 13, 15, 17, 19, 21, 22]) == 6", "assert find_first_even_index([1, 3, 5, 7, 9, 11, 13, 14]) == 7", "assert find_first_even_index([2]) == 0", "assert find_first_even_index([1]) == -1", "assert find_first_even_index([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 20]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first odd number in a given list of numbers.", "code": "def find_first_odd_index(nums):\n    first_odd_index = next((i for i, el in enumerate(nums) if el % 2 != 0), -1)\n    return first_odd_index", "task_id": "221_5166eda3-0ed6-47c4-98c0-309fd33cc3f2", "test_setup_code": "", "test_list": ["assert find_first_odd_index([2, 4, 6, 8, 10, 3, 5]) == 5", "assert find_first_odd_index([1, 2, 3, 4, 5]) == 0", "assert find_first_odd_index([2, 4, 6, 8, 10]) == -1", "assert find_first_odd_index([]) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-zero number in a given list of numbers.", "code": "def find_first_non_zero(nums):\n    first_non_zero = next((el for el in nums if el != 0), -1)\n    return first_non_zero", "task_id": "221_c231c8bb-1f27-4b96-be08-d40ae457a0ce", "test_setup_code": "", "test_list": ["assert find_first_non_zero([0, 0, 3, 0, 5]) == 3", "assert find_first_non_zero([0, 0, 0, 0]) == -1", "assert find_first_non_zero([7, 0, 0, 2, 3]) == 7", "assert find_first_non_zero([0, 0, 0, 1, 0, 2, 0]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the majority element in a given unsorted array. The majority element is the element that appears more than n/2 times.", "code": "def find_majority_element(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > len(arr) // 2:\n            return num\n    return -1", "task_id": "223_f8d51317-7533-4a45-9c5d-2a4f9c56cd73", "test_setup_code": "", "test_list": ["assert find_majority_element([3, 3, 4, 2, 4, 4, 2, 4, 4]) == 4", "assert find_majority_element([2, 2, 1, 1, 1, 2, 2]) == 2", "assert find_majority_element([1, 1, 1, 2, 3, 4, 5]) == 1", "assert find_majority_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a given array.", "code": "def find_second_largest(arr):\n    first, second = float('-inf'), float('-inf')\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second", "task_id": "223_dac0f991-7048-4914-b995-d77f7ef79c2b", "test_setup_code": "", "test_list": ["assert find_second_largest([1, 2, 3, 4, 5]) == 4", "assert find_second_largest([5, 5, 5, 5, 5]) == float('-inf')", "assert find_second_largest([10, 20, 20, 20, 30]) == 20", "assert find_second_largest([2]) == float('-inf')", "assert find_second_largest([3, 3, 3, 2, 2, 1]) == 2", "assert find_second_largest([-1, -2, -3, -4, -5]) == -2", "assert find_second_largest([100, 90, 80, 70, 60]) == 90", "assert find_second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert find_second_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9", "assert find_second_largest([1, 1, 1, 1, 2]) == 1", "assert find_second_largest([1, 2, 3, 4, 4, 4, 5]) == 4", "assert find_second_largest([100, 100, 99, 99, 98, 98]) == 99", "assert find_second_largest([7, 7, 7, 6, 6, 5, 5, 5]) == 6", "assert find_second_largest([1, 2, 3, 4, 5, 5, 5, 6]) == 5", "assert find_second_largest([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == float('-inf')"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given array.", "code": "def find_unique_elements(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "task_id": "223_e28f944d-40d5-421d-9aa7-6637f6cd2768", "test_setup_code": "", "test_list": ["assert find_unique_elements([1, 2, 2, 3, 4, 4, 5]) == [1, 3, 5]", "assert find_unique_elements([1, 1, 1, 1, 1]) == []", "assert find_unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([]) == []", "assert find_unique_elements([1, 2, 2, 3, 3, 4, 4, 5, 5]) == [1]", "assert find_unique_elements([10, 20, 30, 40, 50, 60, 70, 80, 90, 100]) == [10, 20, 30, 40, 50, 60, 70, 80, 90, 100]", "assert find_unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6]) == [6]", "assert find_unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == []", "assert find_unique_elements([1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7, 8]) == [1, 4, 8]", "assert find_unique_elements([1, 2, 3, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [4, 5, 6, 7, 8, 9]", "assert find_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == []", "assert find_unique_elements([1]) == [1]", "assert find_unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 8, 8, 9, 9, 10, 10]) == [7]", "assert find_unique_elements([100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]) == []", "assert find_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]"], "challenge_test_list": []}
{"text": "Write a function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr, n):\n    total = n * (n + 1) // 2\n    return total - sum(arr)", "task_id": "223_d373392f-2c6d-45fb-bb6d-b37e807995b0", "test_setup_code": "", "test_list": ["assert find_missing_number([1, 2, 4, 5], 5) == 3", "assert find_missing_number([2, 3, 4, 5], 5) == 1", "assert find_missing_number([1, 3, 4, 5], 5) == 2", "assert find_missing_number([1, 2, 3, 5], 5) == 4", "assert find_missing_number([1, 2, 3, 4], 5) == 5", "assert find_missing_number([1], 2) == 2", "assert find_missing_number([2], 2) == 1", "assert find_missing_number([1, 2, 3, 4, 6, 7, 8, 9, 10], 10) == 5", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10", "assert find_missing_number([2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert find_missing_number([1, 3], 3) == 2", "assert find_missing_number([1, 2], 3) == 3", "assert find_missing_number([], 1) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 10], 10) == 9", "assert find_missing_number([1, 2, 4], 4) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in an array containing numbers from 1 to n-1.", "code": "def find_duplicate_number(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "223_a938fcce-3e16-4dc7-a1b0-98f8725e009a", "test_setup_code": "", "test_list": ["assert find_duplicate_number([1, 3, 4, 2, 2]) == 2", "assert find_duplicate_number([3, 1, 3, 4, 2]) == 3", "assert find_duplicate_number([1, 1]) == 1", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 5]) == 5", "assert find_duplicate_number([2, 2, 2, 2, 2]) == 2", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9]) == 9", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 8]) == 8", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 7, 8, 9, 10]) == 7", "assert find_duplicate_number([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert find_duplicate_number([1, 2, 3, 3, 4, 5, 6, 7, 8, 9, 10]) == 3", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 7, 8, 9, 9]) == 9", "assert find_duplicate_number([1, 2, 3, 4, 5, 6, 6, 7, 8, 9, 10]) == 6", "assert find_duplicate_number([1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10]) == 5", "assert find_duplicate_number([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10, 11]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 & set2)", "task_id": "223_61247ab2-6e0a-4df6-920e-9c4857dcdead", "test_setup_code": "", "test_list": ["assert find_intersection([1, 2, 3], [3, 4, 5]) == [3]", "assert find_intersection([1, 2, 2, 3], [2, 2, 4]) == [2]", "assert find_intersection([], [1, 2, 3]) == []", "assert find_intersection([1, 2, 3], []) == []", "assert find_intersection([], []) == []", "assert find_intersection([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert find_intersection([1, 2, 3], [4, 5, 6]) == []", "assert find_intersection([1, 1, 1, 1], [1, 1, 1, 1]) == [1]", "assert find_intersection([1, 2, 3], [3, 3, 3]) == [3]", "assert find_intersection([1, 2, 3], [2, 3, 4]) == [2, 3]", "assert find_intersection([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]", "assert find_intersection([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []", "assert find_intersection([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_intersection([1, 2, 3, 4, 5], [0, 0, 0, 0, 0]) == []", "assert find_intersection([1, 2, 3, 4, 5], [5, 5, 5, 5, 5]) == [5]"], "challenge_test_list": []}
{"text": "Write a function to find the union of two arrays.", "code": "def find_union(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 | set2)", "task_id": "223_fe2b381b-80f7-4bed-9956-b79dcde4309e", "test_setup_code": "", "test_list": ["assert find_union([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert find_union([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_union([], [1, 2, 3]) == [1, 2, 3]", "assert find_union([1, 2, 3], []) == [1, 2, 3]", "assert find_union([], []) == []", "assert find_union([1, 2, 2, 3], [3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert find_union([1], [1]) == [1]", "assert find_union([1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert find_union([1, 2, 3], [4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_union([10, 20, 30], [5, 10, 15, 20, 25, 30]) == [5, 10, 15, 20, 25, 30]", "assert find_union([1, 2, 3], [2, 3, 4]) == [1, 2, 3, 4]", "assert find_union([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_union([1, 1, 1, 1], [2, 2, 2, 2]) == [1, 2]", "assert find_union([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_union([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest consecutive elements sequence in an array.", "code": "def find_longest_consecutive_sequence(arr):\n    num_set = set(arr)\n    longest_streak = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak", "task_id": "223_cadf4f5c-30f5-4d0a-b79b-6c0f2dcdd6c8", "test_setup_code": "", "test_list": ["assert find_longest_consecutive_sequence([100, 4, 200, 1, 3, 2]) == 4", "assert find_longest_consecutive_sequence([0, -1, 1, 2, -2, -3, 3, 4]) == 8", "assert find_longest_consecutive_sequence([]) == 0", "assert find_longest_consecutive_sequence([1, 2, 0, 1]) == 3", "assert find_longest_consecutive_sequence([10, 5, 12, 3, 55, 30, 4, 11, 2]) == 4", "assert find_longest_consecutive_sequence([1, 9, 3, 10, 4, 20, 2]) == 4", "assert find_longest_consecutive_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert find_longest_consecutive_sequence([10, 5, 12, 3, 55, 30, 4, 11, 2, 6, 7, 8, 9]) == 8", "assert find_longest_consecutive_sequence([1, 3, 5, 7, 9]) == 1", "assert find_longest_consecutive_sequence([1, 1, 1, 1, 1]) == 1", "assert find_longest_consecutive_sequence([5, 4, 3, 2, 1]) == 5", "assert find_longest_consecutive_sequence([1, 2, 3, 5, 6, 7, 8, 9, 10]) == 6", "assert find_longest_consecutive_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20", "assert find_longest_consecutive_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 30", "assert find_longest_consecutive_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 50"], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in an array.", "code": "def find_kth_largest(arr, k):\n    arr.sort(reverse=True)\n    return arr[k-1]", "task_id": "223_818bf088-9a78-4238-a25d-371001a8c2ea", "test_setup_code": "", "test_list": ["assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5", "assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4", "assert find_kth_largest([1], 1) == 1", "assert find_kth_largest([7, 6, 5, 4, 3, 2, 1], 3) == 5", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7], 1) == 7", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7], 7) == 1", "assert find_kth_largest([5, 5, 5, 5, 5], 3) == 5", "assert find_kth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 6", "assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 1) == 6", "assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 9) == 1", "assert find_kth_largest([3, 3, 3, 3, 3], 2) == 3", "assert find_kth_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert find_kth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 1", "assert find_kth_largest([2, 1], 2) == 1", "assert find_kth_largest([2, 1], 1) == 2"], "challenge_test_list": []}
{"text": "Write a function to find a pair of elements in an array that sum up to a given target.", "code": "def find_pair_with_sum(arr, target):\n    seen = {}\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return (complement, num)\n        seen[num] = True\n    return (-1, -1)", "task_id": "223_c7bf884f-d960-46b0-a810-b420f7e74ce7", "test_setup_code": "", "test_list": ["assert find_pair_with_sum([1, 2, 3, 4, 5], 9) == (4, 5)", "assert find_pair_with_sum([1, 2, 3, 4, 5], 10) == (-1, -1)", "assert find_pair_with_sum([5, 7, 1, 2, 8, 4, 3], 10) == (2, 8)", "assert find_pair_with_sum([5, 7, 1, 2, 8, 4, 3], 6) == (2, 4)", "assert find_pair_with_sum([5, 7, 1, 2, 8, 4, 3], 14) == (-1, -1)", "assert find_pair_with_sum([0, -1, 2, -3, 1], -2) == (-1, -1)", "assert find_pair_with_sum([0, -1, 2, -3, 1], -1) == (-1, 0)", "assert find_pair_with_sum([], 5) == (-1, -1)", "assert find_pair_with_sum([1], 1) == (-1, -1)", "assert find_pair_with_sum([1, 1], 2) == (1, 1)", "assert find_pair_with_sum([1, 2, 3, 4, 5], 3) == (1, 2)", "assert find_pair_with_sum([1, 2, 3, 4, 5], 7) == (2, 5)", "assert find_pair_with_sum([1, 2, 3, 4, 5], 8) == (3, 5)", "assert find_pair_with_sum([1, 2, 3, 4, 5, 6], 11) == (5, 6)", "assert find_pair_with_sum([1, 2, 3, 4, 5, 6], 12) == (-1, -1)"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "227_ba0cb0c7-f5b2-4604-a7d7-17f709fc748e", "test_setup_code": "", "test_list": ["assert min_of_three(1, 2, 3) == 1", "assert min_of_three(3, 2, 1) == 1", "assert min_of_three(2, 3, 1) == 1", "assert min_of_three(-1, -2, -3) == -3", "assert min_of_three(0, 0, 0) == 0", "assert min_of_three(100, 200, 300) == 100", "assert min_of_three(-100, -200, -300) == -300", "assert min_of_three(1, 1, 1) == 1", "assert min_of_three(-1, 0, 1) == -1", "assert min_of_three(0, 1, -1) == -1", "assert min_of_three(1, -1, 0) == -1", "assert min_of_three(2147483647, -2147483648, 0) == -2147483648", "assert min_of_three(999, 999, 1000) == 999", "assert min_of_three(-999, -1000, -999) == -1000", "assert min_of_three(123456, 654321, 1234567) == 123456"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "227_2ab7ebe1-518a-4f38-ac1f-9f60c93c9be6", "test_setup_code": "", "test_list": ["assert max_of_three(1, 2, 3) == 3", "assert max_of_three(3, 2, 1) == 3", "assert max_of_three(-1, -2, -3) == -1", "assert max_of_three(0, 0, 0) == 0", "assert max_of_three(100, 50, 75) == 100", "assert max_of_three(-10, -20, -5) == -5", "assert max_of_three(5, 5, 5) == 5", "assert max_of_three(0, -1, 1) == 1", "assert max_of_three(999, 1000, 998) == 1000", "assert max_of_three(2147483647, -2147483648, 0) == 2147483647", "assert max_of_three(-2147483648, -2147483647, -2147483646) == -2147483646", "assert max_of_three(1, 1, 2) == 2", "assert max_of_three(2, 1, 1) == 2", "assert max_of_three(1, 2, 2) == 2", "assert max_of_three(10, 20, 30) == 30"], "challenge_test_list": []}
{"text": "Write a function to find the sum of three numbers.", "code": "def sum_of_three(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "227_83fb6be7-4656-4cda-8dea-6cad4d96a49c", "test_setup_code": "", "test_list": ["assert sum_of_three(1, 2, 3) == 6", "assert sum_of_three(0, 0, 0) == 0", "assert sum_of_three(-1, -2, -3) == -6", "assert sum_of_three(100, 200, 300) == 600", "assert sum_of_three(-100, 100, 0) == 0", "assert sum_of_three(1, -1, 0) == 0", "assert sum_of_three(2147483647, 0, 0) == 2147483647", "assert sum_of_three(-2147483648, 0, 0) == -2147483648", "assert sum_of_three(123456, 654321, 111111) == 888888", "assert sum_of_three(999999, 1, -1000000) == 0", "assert sum_of_three(0, 123456789, -123456789) == 0", "assert sum_of_three(50, 50, 50) == 150", "assert sum_of_three(-50, -50, -50) == -150", "assert sum_of_three(0, 0, 1) == 1", "assert sum_of_three(1, 2, -3) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the product of three numbers.", "code": "def product_of_three(a: int, b: int, c: int) -> int:\n    return a * b * c", "task_id": "227_129625d6-bbe0-46ce-aee0-b86fa77ad970", "test_setup_code": "", "test_list": ["assert product_of_three(1, 2, 3) == 6", "assert product_of_three(-1, 2, 3) == -6", "assert product_of_three(0, 2, 3) == 0", "assert product_of_three(1, 1, 1) == 1", "assert product_of_three(-1, -1, -1) == -1", "assert product_of_three(100, 200, 300) == 6000000", "assert product_of_three(-100, 200, -300) == 6000000", "assert product_of_three(1, -1, 1) == -1", "assert product_of_three(1, 0, -1) == 0", "assert product_of_three(2, 2, 2) == 8", "assert product_of_three(10, 10, 10) == 1000", "assert product_of_three(-10, -10, 10) == 1000", "assert product_of_three(123, 456, 789) == 44253432", "assert product_of_three(1, 2, 0) == 0", "assert product_of_three(-1, -2, -3) == -6"], "challenge_test_list": []}
{"text": "Write a function to find the average of three numbers.", "code": "def average_of_three(a: int, b: int, c: int) -> float:\n    return (a + b + c) / 3", "task_id": "227_40bfff15-bef0-40fb-a561-5b10bca660ef", "test_setup_code": "", "test_list": ["assert average_of_three(1, 2, 3) == 2.0", "assert average_of_three(0, 0, 0) == 0.0", "assert average_of_three(-1, -2, -3) == -2.0", "assert average_of_three(1000000, 2000000, 3000000) == 2000000.0"], "challenge_test_list": []}
{"text": "Write a function to find the median of three numbers.", "code": "def median_of_three(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "task_id": "227_c927ff21-0ed1-4c31-bb6e-f1e97eedc41a", "test_setup_code": "", "test_list": ["assert median_of_three(1, 2, 3) == 2", "assert median_of_three(3, 2, 1) == 2", "assert median_of_three(2, 1, 3) == 2", "assert median_of_three(2, 3, 1) == 2", "assert median_of_three(1, 3, 2) == 2", "assert median_of_three(3, 1, 2) == 2", "assert median_of_three(5, 5, 5) == 5", "assert median_of_three(5, 5, 10) == 5", "assert median_of_three(10, 5, 5) == 5", "assert median_of_three(5, 10, 5) == 5", "assert median_of_three(-1, -2, -3) == -2", "assert median_of_three(0, -10, 10) == 0", "assert median_of_three(-100, 0, 100) == 0", "assert median_of_three(7, 7, 8) == 7", "assert median_of_three(-5, -5, -6) == -5"], "challenge_test_list": []}
{"text": "Write a function to check if any of the three numbers is negative.", "code": "def is_any_negative(a: int, b: int, c: int) -> bool:\n    return a < 0 or b < 0 or c < 0", "task_id": "227_995e1d0b-158a-413a-86a9-8c95ac646a30", "test_setup_code": "", "test_list": ["assert is_any_negative(1, 2, 3) == False", "assert is_any_negative(-1, 2, 3) == True", "assert is_any_negative(1, -2, 3) == True", "assert is_any_negative(1, 2, -3) == True", "assert is_any_negative(-1, -2, -3) == True", "assert is_any_negative(0, 0, 0) == False", "assert is_any_negative(-1, 0, 0) == True", "assert is_any_negative(0, -2, 0) == True", "assert is_any_negative(0, 0, -3) == True", "assert is_any_negative(0, 0, 3) == False", "assert is_any_negative(1, 0, 0) == False", "assert is_any_negative(0, 2, 0) == False", "assert is_any_negative(0, 0, 0) == False", "assert is_any_negative(-1, -1, 1) == True", "assert is_any_negative(1, 1, 1) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all three numbers are positive.", "code": "def all_positive(a: int, b: int, c: int) -> bool:\n    return a > 0 and b > 0 and c > 0", "task_id": "227_e391cd7c-0212-402c-a5ad-c0fc823812e4", "test_setup_code": "", "test_list": ["assert all_positive(1, 2, 3) == True", "assert all_positive(-1, 2, 3) == False", "assert all_positive(0, 2, 3) == False", "assert all_positive(1, -2, 3) == False"], "challenge_test_list": []}
{"text": "Write a function to check if all three numbers are equal.", "code": "def are_all_equal(a: int, b: int, c: int) -> bool:\n    return a == b == c", "task_id": "227_ea2e8a8b-23b4-4a3a-9c6c-41b0f70e3e79", "test_setup_code": "", "test_list": ["assert are_all_equal(1, 1, 1) == True", "assert are_all_equal(1, 2, 1) == False", "assert are_all_equal(0, 0, 0) == True", "assert are_all_equal(-1, -1, -1) == True"], "challenge_test_list": []}
{"text": "Write a function to check if any of the three numbers is even.", "code": "def is_any_even(a: int, b: int, c: int) -> bool:\n    return a % 2 == 0 or b % 2 == 0 or c % 2 == 0", "task_id": "227_0132dd90-f92f-40db-9fe2-09e6b3ced114", "test_setup_code": "", "test_list": ["assert is_any_even(1, 3, 5) == False", "assert is_any_even(2, 3, 5) == True", "assert is_any_even(1, 4, 5) == True", "assert is_any_even(1, 3, 6) == True", "assert is_any_even(2, 4, 6) == True", "assert is_any_even(0, 0, 0) == True", "assert is_any_even(-2, 3, 5) == True", "assert is_any_even(1, -4, 5) == True", "assert is_any_even(1, 3, -6) == True", "assert is_any_even(-2, -4, -6) == True", "assert is_any_even(1, 1, 1) == False", "assert is_any_even(2, 2, 2) == True", "assert is_any_even(1, 2, 3) == True", "assert is_any_even(1, 1, 2) == True", "assert is_any_even(3, 5, 7) == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd-positioned set bits in a given number.", "code": "def count_odd_bits(n):\n    count = 0\n    position = 1\n    while n:\n        if position % 2 != 0:\n            count += n & 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "224_38140945-72f8-4766-b0a5-6cc4b01afb58", "test_setup_code": "", "test_list": ["assert count_odd_bits(0) == 0", "assert count_odd_bits(1) == 1", "assert count_odd_bits(2) == 0", "assert count_odd_bits(3) == 1", "assert count_odd_bits(5) == 2", "assert count_odd_bits(10) == 1", "assert count_odd_bits(15) == 2", "assert count_odd_bits(42) == 2", "assert count_odd_bits(100) == 2", "assert count_odd_bits(255) == 4", "assert count_odd_bits(256) == 0", "assert count_odd_bits(511) == 5", "assert count_odd_bits(1023) == 5", "assert count_odd_bits(65535) == 8", "assert count_odd_bits(2**20 - 1) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even-positioned set bits in a given number.", "code": "def count_even_bits(n):\n    count = 0\n    position = 1\n    while n:\n        if position % 2 == 0:\n            count += n & 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "224_0945e496-53fd-4f8e-be97-3e596a278fad", "test_setup_code": "", "test_list": ["assert count_even_bits(0) == 0", "assert count_even_bits(1) == 0", "assert count_even_bits(2) == 1", "assert count_even_bits(3) == 1", "assert count_even_bits(4) == 0", "assert count_even_bits(5) == 0", "assert count_even_bits(6) == 1", "assert count_even_bits(7) == 1", "assert count_even_bits(8) == 0", "assert count_even_bits(10) == 1", "assert count_even_bits(15) == 2", "assert count_even_bits(16) == 0", "assert count_even_bits(31) == 2", "assert count_even_bits(255) == 4", "assert count_even_bits(1023) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers within a given range [start, end].", "code": "def count_set_bits_in_range(start, end):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(start, end + 1):\n        total_count += count_set_bits(i)\n    return total_count", "task_id": "224_0ddcbce4-9364-47f3-a83b-eae5bace674e", "test_setup_code": "", "test_list": ["assert count_set_bits_in_range(0, 0) == 0", "assert count_set_bits_in_range(1, 1) == 1", "assert count_set_bits_in_range(0, 3) == 4", "assert count_set_bits_in_range(5, 10) == 17"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers in a given list.", "code": "def count_set_bits_in_list(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for num in nums:\n        total_count += count_set_bits(num)\n    return total_count", "task_id": "224_5e94a395-ac07-401b-b89a-9704b1de15ec", "test_setup_code": "", "test_list": ["assert count_set_bits_in_list([0]) == 0", "assert count_set_bits_in_list([1]) == 1", "assert count_set_bits_in_list([2]) == 1", "assert count_set_bits_in_list([3]) == 2", "assert count_set_bits_in_list([4, 5, 6]) == 6", "assert count_set_bits_in_list([7, 8, 9]) == 6", "assert count_set_bits_in_list([10, 11, 12]) == 7", "assert count_set_bits_in_list([255]) == 8", "assert count_set_bits_in_list([1023]) == 10", "assert count_set_bits_in_list([1024]) == 1", "assert count_set_bits_in_list([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 17", "assert count_set_bits_in_list([15, 31, 63, 127, 255]) == 25", "assert count_set_bits_in_list([1024, 2048, 4096]) == 3", "assert count_set_bits_in_list([1, 2, 4, 8, 16, 32, 64, 128, 256, 512]) == 10", "assert count_set_bits_in_list([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in a given binary string.", "code": "def count_set_bits_in_binary_string(s):\n    return s.count('1')", "task_id": "224_4732acac-263f-42fc-a4cf-eadb469ad240", "test_setup_code": "", "test_list": ["assert count_set_bits_in_binary_string('') == 0", "assert count_set_bits_in_binary_string('0') == 0", "assert count_set_bits_in_binary_string('1') == 1", "assert count_set_bits_in_binary_string('10') == 1", "assert count_set_bits_in_binary_string('01') == 1", "assert count_set_bits_in_binary_string('11') == 2", "assert count_set_bits_in_binary_string('101') == 2", "assert count_set_bits_in_binary_string('111') == 3", "assert count_set_bits_in_binary_string('1001') == 2", "assert count_set_bits_in_binary_string('1101') == 3", "assert count_set_bits_in_binary_string('1110') == 3", "assert count_set_bits_in_binary_string('0000') == 0", "assert count_set_bits_in_binary_string('11111111') == 8", "assert count_set_bits_in_binary_string('00000000') == 0", "assert count_set_bits_in_binary_string('10101010') == 4"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers in a given 2D matrix.", "code": "def count_set_bits_in_matrix(matrix):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for row in matrix:\n        for num in row:\n            total_count += count_set_bits(num)\n    return total_count", "task_id": "224_dc6c2b7d-911a-4d3a-b618-3ac9471ad216", "test_setup_code": "", "test_list": ["assert count_set_bits_in_matrix([[1, 2], [3, 4]]) == 5", "assert count_set_bits_in_matrix([[0, 0], [0, 0]]) == 0", "assert count_set_bits_in_matrix([[255, 255], [255, 255]]) == 32", "assert count_set_bits_in_matrix([[1], [2], [3], [4]]) == 5", "assert count_set_bits_in_matrix([[1023], [1023]]) == 20", "assert count_set_bits_in_matrix([[5, 10], [15, 20]]) == 10", "assert count_set_bits_in_matrix([[7, 8], [9, 10]]) == 8", "assert count_set_bits_in_matrix([[31, 32], [33, 34]]) == 12", "assert count_set_bits_in_matrix([[0]]) == 0", "assert count_set_bits_in_matrix([[1]]) == 1", "assert count_set_bits_in_matrix([[1024, 2048], [4096, 8192]]) == 4", "assert count_set_bits_in_matrix([[3, 3], [3, 3]]) == 8", "assert count_set_bits_in_matrix([[6, 9], [12, 15]]) == 10", "assert count_set_bits_in_matrix([[0, 1], [2, 3]]) == 4", "assert count_set_bits_in_matrix([[123, 456], [789, 101112]]) == 24"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all even numbers in a given list.", "code": "def count_set_bits_in_even_numbers(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            total_count += count_set_bits(num)\n    return total_count", "task_id": "224_3cd1bc28-19be-4609-8e78-b7f17b50afd5", "test_setup_code": "", "test_list": ["assert count_set_bits_in_even_numbers([2, 3, 4, 5, 6]) == 5", "assert count_set_bits_in_even_numbers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert count_set_bits_in_even_numbers([10, 20, 30, 40, 50]) == 12", "assert count_set_bits_in_even_numbers([1, 3, 5, 7, 9]) == 0", "assert count_set_bits_in_even_numbers([1024, 2048, 4096]) == 3", "assert count_set_bits_in_even_numbers([15, 23, 42, 56, 78, 91]) == 8", "assert count_set_bits_in_even_numbers([2, 4, 8, 16, 32, 64, 128]) == 7", "assert count_set_bits_in_even_numbers([0]) == 0", "assert count_set_bits_in_even_numbers([1]) == 0", "assert count_set_bits_in_even_numbers([2]) == 1", "assert count_set_bits_in_even_numbers([1023, 2047, 4095]) == 0", "assert count_set_bits_in_even_numbers([100, 200, 300, 400, 500]) == 13", "assert count_set_bits_in_even_numbers([11, 22, 33, 44, 55, 66, 77, 88, 99]) == 10", "assert count_set_bits_in_even_numbers([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 20", "assert count_set_bits_in_even_numbers([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in numbers that are in odd positions in a given list.", "code": "def count_set_bits_in_odd_positions(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(len(nums)):\n        if i % 2 != 0:\n            total_count += count_set_bits(nums[i])\n    return total_count", "task_id": "224_702df866-fc9c-4f75-8151-1b33ff7b6c8f", "test_setup_code": "", "test_list": ["assert count_set_bits_in_odd_positions([1, 2, 3, 4, 5]) == 3", "assert count_set_bits_in_odd_positions([]) == 0", "assert count_set_bits_in_odd_positions([10]) == 0", "assert count_set_bits_in_odd_positions([10, 15]) == 4", "assert count_set_bits_in_odd_positions([0, 0, 0, 0]) == 0", "assert count_set_bits_in_odd_positions([1, 1, 1, 1]) == 2", "assert count_set_bits_in_odd_positions([255, 255, 255, 255]) == 16", "assert count_set_bits_in_odd_positions([0, 1, 0, 1, 0, 1]) == 2", "assert count_set_bits_in_odd_positions([1, 0, 1, 0, 1, 0]) == 0", "assert count_set_bits_in_odd_positions([7, 8, 9, 10]) == 5", "assert count_set_bits_in_odd_positions([1, 3, 5, 7, 9]) == 7", "assert count_set_bits_in_odd_positions([2, 4, 6, 8, 10]) == 6", "assert count_set_bits_in_odd_positions([128, 64, 32, 16, 8]) == 3", "assert count_set_bits_in_odd_positions([0, 255]) == 8", "assert count_set_bits_in_odd_positions([1, 2, 4, 8, 16, 32]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in numbers that are in even positions in a given list.", "code": "def count_set_bits_in_even_positions(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            total_count += count_set_bits(nums[i])\n    return total_count", "task_id": "224_0d2cb8bd-0ee6-429a-a785-f9c3dc1f4816", "test_setup_code": "", "test_list": ["assert count_set_bits_in_even_positions([1, 2, 3, 4, 5]) == 3", "assert count_set_bits_in_even_positions([0, 0, 0, 0, 0]) == 0", "assert count_set_bits_in_even_positions([255, 255, 255, 255, 255]) == 24", "assert count_set_bits_in_even_positions([1, 3, 5, 7, 9, 11]) == 7", "assert count_set_bits_in_even_positions([10, 20, 30, 40, 50, 60]) == 8", "assert count_set_bits_in_even_positions([1024, 2048, 4096, 8192, 16384, 32768]) == 6", "assert count_set_bits_in_even_positions([1]) == 1", "assert count_set_bits_in_even_positions([2, 4, 8, 16, 32, 64]) == 6", "assert count_set_bits_in_even_positions([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5", "assert count_set_bits_in_even_positions([15, 15, 15, 15, 15]) == 12", "assert count_set_bits_in_even_positions([3, 6, 9, 12, 15, 18]) == 8", "assert count_set_bits_in_even_positions([7, 14, 21, 28, 35, 42]) == 9", "assert count_set_bits_in_even_positions([0, 1, 0, 1, 0, 1]) == 0", "assert count_set_bits_in_even_positions([1, 2, 4, 8, 16, 32, 64, 128]) == 7", "assert count_set_bits_in_even_positions([5, 10, 15, 20, 25, 30]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to remove the characters which have even index values of a given string.", "code": "def remove_even_index_characters(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result", "task_id": "226_4f764bc9-4fcf-4b15-9b44-407aad7e1ac7", "test_setup_code": "", "test_list": ["assert remove_even_index_characters('abcdef') == 'bdf'", "assert remove_even_index_characters('1234567890') == '24680'", "assert remove_even_index_characters('') == ''", "assert remove_even_index_characters('a') == ''", "assert remove_even_index_characters('ab') == 'b'", "assert remove_even_index_characters('abcdefghij') == 'bdfhj'", "assert remove_even_index_characters('aA1!aA1!') == 'A1A1'", "assert remove_even_index_characters('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'BDFHJLNPRTVXZ'", "assert remove_even_index_characters('The quick brown fox') == 'h uc rw o'", "assert remove_even_index_characters('12345678901234567890') == '2468024680'", "assert remove_even_index_characters('!@#$%^&*()') == '@$^&('", "assert remove_even_index_characters('a b c d e f g') == ' b d f '", "assert remove_even_index_characters('aaaaaaa') == 'aaa'", "assert remove_even_index_characters('abababab') == 'bbbb'", "assert remove_even_index_characters('123abc456def') == '2b45f'"], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char not in vowels:\n            result += char\n    return result", "task_id": "226_08930d10-c369-4b32-88c0-1a72e1725912", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('HELLO') == 'HLL'", "assert remove_vowels('abcdefghijklmnopqrstuvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('') == ''", "assert remove_vowels('aeiou') == ''", "assert remove_vowels('AEIOU') == ''", "assert remove_vowels('1234567890') == '1234567890'", "assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_vowels('The quick brown fox jumps over the lazy dog') == 'Th qck brwn fx jmps vr th lzy dg'", "assert remove_vowels('Python is fun!') == 'Pythn s fn!'", "assert remove_vowels('Why do we need vowels?') == 'Why d w nd vwls?'", "assert remove_vowels('A quick brown fox.') == ' qck brwn fx.'", "assert remove_vowels('This is a test.') == 'Ths s  tst.'", "assert remove_vowels('Remove ALL vowels from THIS string!') == 'Rmv LL vwls frm THS strng!'"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "226_bd87460e-a5e1-4be4-912d-716e18b2aa0e", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('A man, a plan, a canal, Panama') == 'amanaP ,lanac a ,nalp a ,nam A'", "assert reverse_string('!@#$%^&*()') == ')(*&^%$#@!'", "assert reverse_string('The quick brown fox') == 'xof nworb kciuq ehT'", "assert reverse_string('Python 3.8') == '8.3 nohtyP'", "assert reverse_string(' ') == ' '", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('123 abc 456') == '654 cba 321'", "assert reverse_string('palindromeemordnilap') == 'palindromeemordnilap'", "assert reverse_string('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'ZYXWVUTSRQPONMLKJIHGFEDCBA'"], "challenge_test_list": []}
{"text": "Write a python function to capitalize the characters which have odd index values of a given string.", "code": "def capitalize_odd_index_characters(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i].upper()\n        else:\n            result += s[i]\n    return result", "task_id": "226_c3f2af5a-a82f-4c69-b2ef-4bf99c47a297", "test_setup_code": "", "test_list": ["assert capitalize_odd_index_characters('hello') == 'hElLo'", "assert capitalize_odd_index_characters('abcdef') == 'aBcDeF'", "assert capitalize_odd_index_characters('a') == 'a'", "assert capitalize_odd_index_characters('') == ''", "assert capitalize_odd_index_characters('ab') == 'aB'", "assert capitalize_odd_index_characters('1234567890') == '1234567890'", "assert capitalize_odd_index_characters('!@#$%^&*()') == '!@#$%^&*()'", "assert capitalize_odd_index_characters('AaBbCc') == 'AaBbCc'", "assert capitalize_odd_index_characters('The quick brown fox') == 'THe qUiCk bRoWn fOx'", "assert capitalize_odd_index_characters('Python3.8') == 'PyThOn3.8'", "assert capitalize_odd_index_characters('CAPITALIZE') == 'CaPiTaLiZe'", "assert capitalize_odd_index_characters('lowercase') == 'lOwErCaSe'", "assert capitalize_odd_index_characters('MiXeD CaSe') == 'MiXeD CaSe'", "assert capitalize_odd_index_characters('12345abcde') == '12345AbCdE'", "assert capitalize_odd_index_characters('spaces in between') == 'sPaCeS iN BeTwEeN'"], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in a given string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "226_6c133aae-b1c2-4b68-ba0b-0feabedb82f8", "test_setup_code": "", "test_list": ["assert replace_spaces_with_underscore('hello world') == 'hello_world'", "assert replace_spaces_with_underscore('') == ''", "assert replace_spaces_with_underscore(' ') == '_'", "assert replace_spaces_with_underscore('  ') == '__'", "assert replace_spaces_with_underscore('hello') == 'hello'", "assert replace_spaces_with_underscore('hello world python') == 'hello_world_python'", "assert replace_spaces_with_underscore('   leading spaces') == '___leading_spaces'", "assert replace_spaces_with_underscore('trailing spaces   ') == 'trailing_spaces___'", "assert replace_spaces_with_underscore(' spaces everywhere ') == '_spaces_everywhere_'", "assert replace_spaces_with_underscore('multiple   spaces  between words') == 'multiple___spaces__between_words'", "assert replace_spaces_with_underscore('special!@#$%^&*()characters') == 'special!@#$%^&*()characters'", "assert replace_spaces_with_underscore('special !@#$%^ &*() characters') == 'special_!@#$%^_&*()_characters'", "assert replace_spaces_with_underscore('123 456 789') == '123_456_789'", "assert replace_spaces_with_underscore('a b c d e f g') == 'a_b_c_d_e_f_g'", "assert replace_spaces_with_underscore('  multiple  spaces  ') == '__multiple__spaces__'"], "challenge_test_list": []}
{"text": "Write a python function to double each character in a given string.", "code": "def double_characters(s: str) -> str:\n    result = \"\"\n    for char in s:\n        result += char * 2\n    return result", "task_id": "226_2c7b3a6b-80a0-4596-a4be-163fa7b13ee5", "test_setup_code": "", "test_list": ["assert double_characters('hello') == 'hheelllloo'", "assert double_characters('') == ''", "assert double_characters('a') == 'aa'", "assert double_characters('abc') == 'aabbcc'", "assert double_characters('123') == '112233'", "assert double_characters('!@#') == '!!@@##'", "assert double_characters(' ') == '  '", "assert double_characters('AaBbCc') == 'AAaaBBbbCCcc'", "assert double_characters('Hello World!') == 'HHeelllloo  WWoorrlldd!!'", "assert double_characters('Python3.8') == 'PPyytthhoonn33..88'", "assert double_characters('double_characters') == 'ddoouubbllee__cchhaarraacctteerrss'", "assert double_characters('1234567890') == '11223344556677889900'", "assert double_characters('a b c') == 'aa  bb  cc'", "assert double_characters('! ! !') == '!! !! !!'", "assert double_characters('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char in vowels:\n            result += char\n    return result", "task_id": "226_05276585-7ff5-4fe4-8a4b-55df17f4ccbb", "test_setup_code": "", "test_list": ["assert remove_consonants('hello') == 'eo'", "assert remove_consonants('world') == 'o'", "assert remove_consonants('aeiou') == 'aeiou'", "assert remove_consonants('AEIOU') == 'AEIOU'", "assert remove_consonants('') == ''", "assert remove_consonants('bcdfghjklmnpqrstvwxyz') == ''", "assert remove_consonants('BCDFGHJKLMNPQRSTVWXYZ') == ''", "assert remove_consonants('Python Programming') == 'o oai'", "assert remove_consonants('12345') == ''", "assert remove_consonants('a1e2i3o4u5') == 'aeiou'", "assert remove_consonants('A1E2I3O4U5') == 'AEIOU'", "assert remove_consonants('ThIs Is A tEsT') == 'I I A E'", "assert remove_consonants('The quick brown fox jumps over the lazy dog') == 'e ui o o u oe e a o'", "assert remove_consonants('!@#$%^&*()') == ''", "assert remove_consonants('Consonants and vowels') == 'ooa a oe'"], "challenge_test_list": []}
{"text": "Write a python function to remove all digits from a given string.", "code": "def remove_digits(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if not char.isdigit():\n            result += char\n    return result", "task_id": "226_cea2ee6c-f3ef-4739-a08c-e04de5c1b133", "test_setup_code": "", "test_list": ["assert remove_digits('abc123') == 'abc'", "assert remove_digits('123456') == ''", "assert remove_digits('Hello World!') == 'Hello World!'", "assert remove_digits('a1b2c3d4e5f6g7h8i9j0') == 'abcdefghij'"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "226_c32a0e66-4479-49ef-92e9-f65c84f3dff6", "test_setup_code": "", "test_list": ["assert count_vowels('hello world') == 3", "assert count_vowels('AEIOUaeiou') == 10", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('') == 0"], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return s.replace(' ', '').replace('\\t', '').replace('\\n', '')", "task_id": "226_53928e02-aab3-4f17-9359-aee135a5e7bf", "test_setup_code": "", "test_list": ["assert remove_whitespace('hello world') == 'helloworld'", "assert remove_whitespace('   leading and trailing spaces   ') == 'leadingandtrailingspaces'", "assert remove_whitespace('multiple   spaces') == 'multiplespaces'", "assert remove_whitespace('tabs\\tand\\tspaces') == 'tabsandspaces'", "assert remove_whitespace('new\\nline\\ncharacters') == 'newlinecharacters'", "assert remove_whitespace('mixed\\t \\nwhitespace') == 'mixedwhitespace'", "assert remove_whitespace('') == ''", "assert remove_whitespace('no_whitespace') == 'no_whitespace'", "assert remove_whitespace('single_space ') == 'single_space'", "assert remove_whitespace(' \\tsingle_tab') == 'single_tab'", "assert remove_whitespace('new\\nline') == 'newline'", "assert remove_whitespace(' \\t\\nall_types_of_whitespace\\t \\n') == 'all_types_of_whitespace'", "assert remove_whitespace('a\\tb\\nc\\td') == 'abcd'", "assert remove_whitespace('  \\t  \\n  ') == ''", "assert remove_whitespace('  a  b  c  ') == 'abc'"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array.", "code": "def find_max(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_16039ab2-0e99-49f9-839d-6c06fbbd37ae", "test_setup_code": "", "test_list": ["assert find_max([3, 4, 5, 1, 2], 0, 4) == 5", "assert find_max([1, 2, 3, 4, 5], 0, 4) == 5", "assert find_max([2, 3, 4, 5, 1], 0, 4) == 5", "assert find_max([5, 1, 2, 3, 4], 0, 4) == 5", "assert find_max([4, 5, 1, 2, 3], 0, 4) == 5", "assert find_max([1], 0, 0) == 1", "assert find_max([2, 1], 0, 1) == 2", "assert find_max([1, 2], 0, 1) == 2", "assert find_max([3, 1, 2], 0, 2) == 3", "assert find_max([1, 3, 2], 0, 2) == 3", "assert find_max([2, 1, 3], 0, 2) == 3", "assert find_max([4, 5, 6, 7, 0, 1, 2], 0, 6) == 7", "assert find_max([6, 7, 0, 1, 2, 3, 4, 5], 0, 7) == 7", "assert find_max([1, 2, 3, 4, 5, 6, 7], 0, 6) == 7", "assert find_max([7, 1, 2, 3, 4, 5, 6], 0, 6) == 7"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the minimum element in a sorted and rotated array.", "code": "def find_min_index(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return low;", "task_id": "225_a5e06101-545d-4aed-986f-4905e685a5f0", "test_setup_code": "", "test_list": ["assert find_min_index([4, 5, 6, 7, 0, 1, 2], 0, 6) == 4", "assert find_min_index([1, 2, 3, 4, 5, 6, 7], 0, 6) == 0", "assert find_min_index([2, 3, 4, 5, 6, 7, 1], 0, 6) == 6", "assert find_min_index([1], 0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the index of the maximum element in a sorted and rotated array.", "code": "def find_max_index(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return low;", "task_id": "225_9de9dfb1-e2b5-491b-9bca-6c88e2a32ec4", "test_setup_code": "", "test_list": ["assert find_max_index([4, 5, 6, 7, 0, 1, 2], 0, 6) == 3", "assert find_max_index([10, 20, 30, 40, 50, 5, 7], 0, 6) == 4", "assert find_max_index([1, 2, 3, 4, 5, 6, 7], 0, 6) == 6", "assert find_max_index([7, 1, 2, 3, 4, 5, 6], 0, 6) == 0", "assert find_max_index([2, 3, 4, 5, 6, 7, 1], 0, 6) == 5", "assert find_max_index([5, 6, 7, 1, 2, 3, 4], 0, 6) == 2", "assert find_max_index([1, 2, 3, 4, 5, 6, 0], 0, 6) == 5", "assert find_max_index([3, 4, 5, 6, 7, 1, 2], 0, 6) == 4", "assert find_max_index([6, 7, 1, 2, 3, 4, 5], 0, 6) == 1", "assert find_max_index([5, 6, 7, 8, 9, 1, 2, 3, 4], 0, 8) == 4", "assert find_max_index([1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 8) == 8", "assert find_max_index([9, 1, 2, 3, 4, 5, 6, 7, 8], 0, 8) == 0", "assert find_max_index([4, 5, 6, 7, 8, 9, 1, 2, 3], 0, 8) == 5", "assert find_max_index([2, 3, 4, 5, 6, 7, 8, 9, 1], 0, 8) == 7", "assert find_max_index([7, 8, 9, 1, 2, 3, 4, 5, 6], 0, 8) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array without using recursion.", "code": "def find_min_in_rotated(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_3c347bd2-f9c6-453b-b599-1d62cb5e8cc4", "test_setup_code": "", "test_list": ["assert find_min_in_rotated([3, 4, 5, 1, 2]) == 1", "assert find_min_in_rotated([4, 5, 6, 7, 0, 1, 2]) == 0", "assert find_min_in_rotated([11, 13, 15, 17]) == 11", "assert find_min_in_rotated([2, 2, 2, 0, 1]) == 0", "assert find_min_in_rotated([1, 2, 3, 4, 5, 6, 7]) == 1", "assert find_min_in_rotated([1]) == 1", "assert find_min_in_rotated([2, 1]) == 1", "assert find_min_in_rotated([5, 6, 7, 8, 9, 1, 2, 3, 4]) == 1", "assert find_min_in_rotated([10, 10, 10, 10, 10, 1, 10]) == 1", "assert find_min_in_rotated([2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1", "assert find_min_in_rotated([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert find_min_in_rotated([3, 3, 1, 3]) == 1", "assert find_min_in_rotated([5, 6, 7, 8, 9, 2, 3, 4]) == 2", "assert find_min_in_rotated([4, 5, 6, 7, 8, 9, 1, 2, 3]) == 1", "assert find_min_in_rotated([2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array without using recursion.", "code": "def find_max_in_rotated(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_929fe7aa-c17b-4f8e-805b-0af1dae8c634", "test_setup_code": "", "test_list": ["assert find_max_in_rotated([4, 5, 6, 7, 0, 1, 2]) == 7", "assert find_max_in_rotated([10, 20, 30, 40, 50, 5, 7]) == 50", "assert find_max_in_rotated([1, 2, 3, 4, 5, 6, 7]) == 7", "assert find_max_in_rotated([7, 1, 2, 3, 4, 5, 6]) == 7", "assert find_max_in_rotated([2, 3, 4, 5, 6, 7, 1]) == 7", "assert find_max_in_rotated([1]) == 1", "assert find_max_in_rotated([2, 1]) == 2", "assert find_max_in_rotated([1, 2]) == 2", "assert find_max_in_rotated([3, 4, 5, 1, 2]) == 5", "assert find_max_in_rotated([5, 6, 7, 8, 9, 10, 1, 2, 3]) == 10", "assert find_max_in_rotated([30, 40, 50, 10, 20]) == 50", "assert find_max_in_rotated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert find_max_in_rotated([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert find_max_in_rotated([2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 10", "assert find_max_in_rotated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1]) == 1000"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that may contain duplicates.", "code": "def find_min_with_duplicates(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_6e6e5b5a-43eb-48a6-bae0-6270f5187863", "test_setup_code": "", "test_list": ["assert find_min_with_duplicates([3, 4, 5, 1, 2], 0, 4) == 1", "assert find_min_with_duplicates([2, 2, 2, 0, 1], 0, 4) == 0", "assert find_min_with_duplicates([1, 1, 1, 1, 1], 0, 4) == 1", "assert find_min_with_duplicates([1, 2, 3, 4, 5], 0, 4) == 1", "assert find_min_with_duplicates([5, 6, 1, 2, 3, 4], 0, 5) == 1", "assert find_min_with_duplicates([2, 3, 4, 5, 6, 1], 0, 5) == 1", "assert find_min_with_duplicates([1], 0, 0) == 1", "assert find_min_with_duplicates([2, 2, 2, 2, 2], 0, 4) == 2", "assert find_min_with_duplicates([10, 10, 10, 1, 10], 0, 4) == 1", "assert find_min_with_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 9) == 1", "assert find_min_with_duplicates([4, 5, 6, 7, 0, 1, 2], 0, 6) == 0", "assert find_min_with_duplicates([2, 2, 2, 2, 2, 2, 2], 0, 6) == 2", "assert find_min_with_duplicates([3, 3, 3, 3, 3, 3, 1], 0, 6) == 1", "assert find_min_with_duplicates([1, 1, 1, 1, 1, 1, 1], 0, 6) == 1", "assert find_min_with_duplicates([2, 3, 4, 5, 6, 7, 1], 0, 6) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array that may contain duplicates.", "code": "def find_max_with_duplicates(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_c7410623-5811-4f02-8a87-e3b35ec596e3", "test_setup_code": "", "test_list": ["assert find_max_with_duplicates([4, 5, 6, 7, 0, 1, 2], 0, 6) == 7", "assert find_max_with_duplicates([6, 7, 8, 1, 2, 3, 4, 5], 0, 7) == 8", "assert find_max_with_duplicates([1, 2, 3, 4, 5, 6, 7], 0, 6) == 7", "assert find_max_with_duplicates([2, 2, 2, 3, 4, 2], 0, 5) == 4", "assert find_max_with_duplicates([10, 10, 10, 1, 2, 3, 4], 0, 6) == 10", "assert find_max_with_duplicates([1, 1, 1, 1], 0, 3) == 1", "assert find_max_with_duplicates([3, 4, 5, 1, 2], 0, 4) == 5", "assert find_max_with_duplicates([1, 2, 3, 4, 5], 0, 4) == 5", "assert find_max_with_duplicates([5, 6, 7, 8, 9, 1, 2, 3], 0, 7) == 9", "assert find_max_with_duplicates([2, 3, 4, 5, 6, 7, 8, 1], 0, 7) == 8", "assert find_max_with_duplicates([2, 2, 2, 2, 2, 2, 2], 0, 6) == 2", "assert find_max_with_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0, 9) == 10", "assert find_max_with_duplicates([10, 1, 2, 3, 4, 5, 6, 7, 8, 9], 0, 9) == 10", "assert find_max_with_duplicates([4, 5, 6, 7, 7, 0, 1, 2], 0, 7) == 7", "assert find_max_with_duplicates([1, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3], 0, 10) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that may contain duplicates without using recursion.", "code": "def find_min_in_rotated_with_duplicates(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_691d86f1-1cdb-475f-96f5-b651c9c6e0fa", "test_setup_code": "", "test_list": ["assert find_min_in_rotated_with_duplicates([3, 4, 5, 1, 2]) == 1", "assert find_min_in_rotated_with_duplicates([2, 2, 2, 0, 1]) == 0", "assert find_min_in_rotated_with_duplicates([1, 1, 1, 1, 1]) == 1", "assert find_min_in_rotated_with_duplicates([1]) == 1", "assert find_min_in_rotated_with_duplicates([2, 3, 4, 5, 1]) == 1", "assert find_min_in_rotated_with_duplicates([10, 1, 10, 10, 10]) == 1", "assert find_min_in_rotated_with_duplicates([4, 5, 6, 7, 0, 1, 2]) == 0", "assert find_min_in_rotated_with_duplicates([1, 2, 3, 4, 5, 6, 7]) == 1", "assert find_min_in_rotated_with_duplicates([2, 2, 2, 2, 2, 2, 2]) == 2", "assert find_min_in_rotated_with_duplicates([5, 6, 7, 8, 9, 1, 2, 3, 4]) == 1", "assert find_min_in_rotated_with_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_min_in_rotated_with_duplicates([2, 2, 2, 2, 2, 1, 2]) == 1", "assert find_min_in_rotated_with_duplicates([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 1", "assert find_min_in_rotated_with_duplicates([5, 5, 5, 1, 5, 5, 5]) == 1", "assert find_min_in_rotated_with_duplicates([10, 10, 10, 10, 10, 10, 10, 1, 10]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array that may contain duplicates without using recursion.", "code": "def find_max_in_rotated_with_duplicates(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_6a09b5bd-4750-4b0c-8abb-6ba4892ce1d7", "test_setup_code": "", "test_list": ["assert find_max_in_rotated_with_duplicates([4, 5, 6, 7, 0, 1, 2]) == 7", "assert find_max_in_rotated_with_duplicates([6, 7, 8, 1, 2, 3, 4, 5]) == 8", "assert find_max_in_rotated_with_duplicates([1, 2, 3, 4, 5, 6, 7]) == 7", "assert find_max_in_rotated_with_duplicates([2, 2, 2, 3, 4, 2, 2]) == 4", "assert find_max_in_rotated_with_duplicates([1, 1, 1, 1, 1, 1, 1]) == 1", "assert find_max_in_rotated_with_duplicates([3, 4, 5, 1, 2]) == 5", "assert find_max_in_rotated_with_duplicates([7, 8, 9, 1, 2, 3, 4, 5, 6]) == 9", "assert find_max_in_rotated_with_duplicates([2, 3, 4, 5, 6, 7, 8, 1]) == 8", "assert find_max_in_rotated_with_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9", "assert find_max_in_rotated_with_duplicates([4, 4, 4, 4, 4, 4, 4, 4]) == 4", "assert find_max_in_rotated_with_duplicates([2, 2, 2, 2, 3, 2, 2, 2]) == 3", "assert find_max_in_rotated_with_duplicates([5, 6, 7, 8, 9, 1, 2, 3, 4]) == 9", "assert find_max_in_rotated_with_duplicates([10, 1, 10, 10, 10]) == 10", "assert find_max_in_rotated_with_duplicates([1, 1, 1, 2, 1, 1, 1]) == 2", "assert find_max_in_rotated_with_duplicates([3, 4, 5, 6, 7, 8, 9, 1, 2]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that has been rotated k times.", "code": "def find_min_rotated_k(arr, k): \n    n = len(arr) \n    low, high = 0, n - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_bc5ab068-cf55-47bf-97af-1766e726feb2", "test_setup_code": "", "test_list": ["assert find_min_rotated_k([4, 5, 6, 7, 0, 1, 2], 4) == 0", "assert find_min_rotated_k([7, 8, 9, 1, 2, 3, 4, 5, 6], 3) == 1", "assert find_min_rotated_k([1, 2, 3, 4, 5, 6, 7], 0) == 1", "assert find_min_rotated_k([3, 4, 5, 1, 2], 2) == 1", "assert find_min_rotated_k([2, 3, 4, 5, 6, 7, 1], 6) == 1", "assert find_min_rotated_k([5, 6, 7, 8, 9, 1, 2, 3, 4], 5) == 1", "assert find_min_rotated_k([1], 0) == 1", "assert find_min_rotated_k([2, 1], 1) == 1", "assert find_min_rotated_k([3, 4, 5, 6, 7, 8, 9, 1, 2], 7) == 1", "assert find_min_rotated_k([1, 2, 3, 4, 5, 6, 7, 8, 9], 0) == 1", "assert find_min_rotated_k([2, 3, 4, 5, 6, 7, 8, 9, 1], 8) == 1", "assert find_min_rotated_k([4, 5, 6, 7, 8, 9, 1, 2, 3], 6) == 1", "assert find_min_rotated_k([6, 7, 8, 9, 1, 2, 3, 4, 5], 4) == 1", "assert find_min_rotated_k([9, 1, 2, 3, 4, 5, 6, 7, 8], 1) == 1", "assert find_min_rotated_k([5, 6, 7, 8, 9, 1, 2, 3, 4], 5) == 1"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "230_d0868762-2020-4922-9b44-e606fa2a414b", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string('The quick brown fox') == 'xof nworb kciuq ehT'", "assert reverse_string(' ') == ' '", "assert reverse_string('!@# $%^ &*()') == ')(*& ^%$ #@!'"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "230_6ceac1cf-b5f9-456b-b64b-1e0ace7d5e35", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "230_7fb6eb6c-679f-4979-921e-aa8f6a856a55", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('aeiou') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('12345') == 0", "assert count_vowels('a1e2i3o4u5') == 5", "assert count_vowels('A1E2I3O4U5') == 5", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG') == 11", "assert count_vowels('tHe QuIcK BrOwN FoX JuMpS OvEr ThE LaZy DoG') == 11", "assert count_vowels('') == 0", "assert count_vowels('a') == 1"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "230_175cada2-065a-4dba-9343-5a4b3c1627ec", "test_setup_code": "", "test_list": ["assert remove_vowels('hello') == 'hll'", "assert remove_vowels('world') == 'wrld'", "assert remove_vowels('AEIOU') == ''", "assert remove_vowels('aeiou') == ''", "assert remove_vowels('Python') == 'Pythn'", "assert remove_vowels('') == ''", "assert remove_vowels('bcdfghjklmnpqrstvwxyz') == 'bcdfghjklmnpqrstvwxyz'", "assert remove_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 'BCDFGHJKLMNPQRSTVWXYZ'", "assert remove_vowels('12345') == '12345'", "assert remove_vowels('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_vowels('This is a test.') == 'Ths s  tst.'", "assert remove_vowels('Remove ALL vowels!') == 'Rmv LL vwls!'", "assert remove_vowels('aEiOu') == ''", "assert remove_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 'BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz'", "assert remove_vowels('The quick brown fox jumps over the lazy dog.') == 'Th qck brwn fx jmps vr th lzy dg.'"], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "230_7044a7de-fe75-4e09-a9e4-84a8b00e9ebf", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('capitalize every first letter') == 'Capitalize Every First Letter'", "assert capitalize_words('python programming') == 'Python Programming'", "assert capitalize_words('a quick brown fox') == 'A Quick Brown Fox'", "assert capitalize_words('jumps over the lazy dog') == 'Jumps Over The Lazy Dog'", "assert capitalize_words('') == ''", "assert capitalize_words('single') == 'Single'", "assert capitalize_words('  leading and trailing spaces  ') == 'Leading And Trailing Spaces'", "assert capitalize_words('multiple   spaces') == 'Multiple Spaces'", "assert capitalize_words('123 numbers and symbols #!') == '123 Numbers And Symbols #!'", "assert capitalize_words('mixedCASE words') == 'Mixedcase Words'", "assert capitalize_words('ALL CAPS') == 'All Caps'", "assert capitalize_words('lowercase') == 'Lowercase'", "assert capitalize_words('Title Case') == 'Title Case'"], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "230_fea6f069-9d76-45e0-a6c3-a9a89e2918f9", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test string') == 5", "assert count_words('   Leading and trailing spaces   ') == 4", "assert count_words('Multiple   spaces   between   words') == 4", "assert count_words('Punctuation, should not affect the count!') == 6", "assert count_words('New\nline\ncharacters\nshould\nbe\ncounted\nas\nspaces') == 8", "assert count_words('Tabs\tshould\talso\tbe\tcounted\tas\tspaces') == 7", "assert count_words('Mixing spaces, tabs\tand\nnewlines') == 5", "assert count_words('123 456 789') == 3", "assert count_words('Special characters #$%^&* should be treated as part of words') == 10", "assert count_words('') == 0", "assert count_words('a') == 1", "assert count_words('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 26"], "challenge_test_list": []}
{"text": "Write a function to replace all vowels in a given string with a specified character.", "code": "def replace_vowels(s: str, char: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char if c in vowels else c for c in s)", "task_id": "230_d931fba3-db05-472a-9723-52ba872a9014", "test_setup_code": "", "test_list": ["assert replace_vowels('hello', '*') == 'h*ll*'", "assert replace_vowels('HELLO', '#') == 'H#LL#'", "assert replace_vowels('aEiOu', '!') == '!E!O!'", "assert replace_vowels('bcdfg', '?') == 'bcdfg'", "assert replace_vowels('AEIOUaeiou', '@') == '@@@@@@@@'", "assert replace_vowels('Python Programming', '-') == 'Pyth-n Pr-gr-mm-ng'", "assert replace_vowels('Replace Vowels', '1') == 'R1pl1c1 V1w1ls'", "assert replace_vowels('', '%') == ''", "assert replace_vowels('12345', '&') == '12345'", "assert replace_vowels('!@#$%', '^') == '!@#$%'", "assert replace_vowels('a', 'z') == 'z'", "assert replace_vowels('A', 'z') == 'z'", "assert replace_vowels('quick brown fox', 'o') == 'qoock broomn fox'", "assert replace_vowels('JUMP OVER', 'x') == 'JxMP xVxR'", "assert replace_vowels('The quick brown fox jumps over the lazy dog', '*') == 'Th* q**ck br*wn f*x j*mps *v*r th* l*zy d*g'"], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char in vowels or not char.isalpha())", "task_id": "230_00762e4c-cc40-4f35-930e-8f40b985273d", "test_setup_code": "", "test_list": ["assert remove_consonants('hello') == 'eo'", "assert remove_consonants('world') == 'o'", "assert remove_consonants('Python') == 'o'", "assert remove_consonants('AEIOU') == 'AEIOU'", "assert remove_consonants('bcdfghjklmnpqrstvwxyz') == ''", "assert remove_consonants('') == ''", "assert remove_consonants('12345') == '12345'", "assert remove_consonants('a1b2c3d4e5') == 'a1e5'", "assert remove_consonants('!@#$%^&*()') == '!@#$%^&*()'", "assert remove_consonants('The quick brown fox jumps over the lazy dog') == 'e ui o o u o e a o'", "assert remove_consonants('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 'AEIOU'", "assert remove_consonants('abcdefghijklmnopqrstuvwxyz') == 'aeiou'", "assert remove_consonants('Consonants and vowels') == 'ooa a oe'", "assert remove_consonants('Remove123 consonants!') == 'eoe123 ooa!'", "assert remove_consonants('') == ''"], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a given string with a specified character.", "code": "def replace_digits(s: str, char: str) -> str:\n    return ''.join(char if c.isdigit() else c for c in s)", "task_id": "230_491d97b1-0c9a-4be4-82ec-0ff62f5e11af", "test_setup_code": "", "test_list": ["assert replace_digits('abc123', '*') == 'abc***'", "assert replace_digits('1234567890', '#') == '##########'", "assert replace_digits('no digits here', '!') == 'no digits here'", "assert replace_digits('1a2b3c4d', '?') == '?a?b?c?d'", "assert replace_digits('', '@') == ''", "assert replace_digits('0', 'X') == 'X'", "assert replace_digits('a1b2c3', 'Z') == 'aZbZcZ'", "assert replace_digits('123abc456', '9') == '999abc999'", "assert replace_digits('a1b2c3d4e5f6g7h8i9j0', '*') == 'a*b*c*d*e*f*g*h*i*j*'", "assert replace_digits('!@#123$%^', '&') == '!@#&&&$%^'", "assert replace_digits('12345', '0') == '00000'", "assert replace_digits('a1!b2@c3#', '+') == 'a+!b+@c+#'", "assert replace_digits('9876543210', 'A') == 'AAAAAAAAAA'", "assert replace_digits('a1b2c3d4e5f6g7h8i9j0k', 'B') == 'aBbBcBdBeBfBgBhBiBjBk'", "assert replace_digits('1a2b3c4d5e6f7g8h9i0j', 'C') == 'CaCbCcCdCeCfCgChCiCj'"], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation from a given string.", "code": "import string\n\ndef remove_punctuation(s: str) -> str:\n    return ''.join(char for char in s if char not in string.punctuation)", "task_id": "230_ffb24955-2369-4e7f-8847-f3e4449d2432", "test_setup_code": "", "test_list": ["assert remove_punctuation('Hello, world!') == 'Hello world'", "assert remove_punctuation('Good morning, Mr. Smith.') == 'Good morning Mr Smith'", "assert remove_punctuation('No punctuation here') == 'No punctuation here'", "assert remove_punctuation('1234!@#$') == '1234'", "assert remove_punctuation('') == ''", "assert remove_punctuation('.,?!;:') == ''", "assert remove_punctuation('Hello... How are you?') == 'Hello How are you'", "assert remove_punctuation('Python is fun!!!') == 'Python is fun'", "assert remove_punctuation('Remove: all; punctuation.') == 'Remove all punctuation'", "assert remove_punctuation('Edge-case: with-hyphens!') == 'Edgecase withhyphens'", "assert remove_punctuation('Multiple...dots...here...') == 'Multipledotsheredots'", "assert remove_punctuation('Special characters: @#&*()') == 'Special characters '", "assert remove_punctuation('Quotes: \"Hello\"') == 'Quotes Hello'", "assert remove_punctuation('Mixed: 123, abc!') == 'Mixed 123 abc'", "assert remove_punctuation('End with punctuation!') == 'End with punctuation'"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the bits are unset in the given range or not.", "code": "def all_bits_unset(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == 0", "task_id": "228_5f9b2821-1747-4d2c-9f85-19fb7a3f34ab", "test_setup_code": "", "test_list": ["assert all_bits_unset(0b00000000, 1, 8) == True", "assert all_bits_unset(0b11111111, 1, 8) == False", "assert all_bits_unset(0b00001111, 1, 4) == False", "assert all_bits_unset(0b00001111, 5, 8) == True", "assert all_bits_unset(0b10101010, 2, 3) == False", "assert all_bits_unset(0b10101010, 1, 1) == False", "assert all_bits_unset(0b10101010, 2, 2) == True", "assert all_bits_unset(0b00000001, 1, 1) == False", "assert all_bits_unset(0b00000001, 2, 8) == True", "assert all_bits_unset(0b10000000, 8, 8) == False", "assert all_bits_unset(0b10000000, 1, 7) == True", "assert all_bits_unset(0b11110000, 5, 8) == False", "assert all_bits_unset(0b11110000, 1, 4) == True", "assert all_bits_unset(0b00000000, 3, 5) == True", "assert all_bits_unset(0b11111111, 4, 6) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the bits are set in the given range or not.", "code": "def all_bits_set(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == num", "task_id": "228_ce0f96e1-d608-49d2-b60a-2b44c26c82c1", "test_setup_code": "", "test_list": ["assert all_bits_set(15, 1, 4) == True", "assert all_bits_set(7, 1, 3) == True", "assert all_bits_set(8, 1, 3) == False", "assert all_bits_set(31, 1, 5) == True", "assert all_bits_set(30, 1, 5) == False", "assert all_bits_set(255, 1, 8) == True", "assert all_bits_set(254, 1, 8) == False", "assert all_bits_set(1023, 1, 10) == True", "assert all_bits_set(1022, 1, 10) == False", "assert all_bits_set(1, 1, 1) == True", "assert all_bits_set(0, 1, 1) == False", "assert all_bits_set(3, 2, 3) == True", "assert all_bits_set(2, 2, 3) == False", "assert all_bits_set(15, 2, 4) == True", "assert all_bits_set(14, 2, 4) == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in the given range.", "code": "def count_set_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    count = 0\n    while new_num:\n        count += new_num & 1\n        new_num >>= 1\n    return count", "task_id": "228_6ada3456-0663-4587-9664-6ddb6770f81e", "test_setup_code": "", "test_list": ["assert count_set_bits(29, 1, 5) == 4", "assert count_set_bits(0, 1, 5) == 0", "assert count_set_bits(255, 1, 8) == 8", "assert count_set_bits(255, 4, 8) == 5", "assert count_set_bits(1023, 1, 10) == 10", "assert count_set_bits(1023, 5, 10) == 6", "assert count_set_bits(1, 1, 1) == 1", "assert count_set_bits(2, 1, 2) == 1", "assert count_set_bits(3, 1, 2) == 2", "assert count_set_bits(15, 1, 4) == 4", "assert count_set_bits(15, 2, 4) == 3", "assert count_set_bits(16, 1, 5) == 1", "assert count_set_bits(31, 1, 5) == 5", "assert count_set_bits(63, 1, 6) == 6", "assert count_set_bits(127, 1, 7) == 7"], "challenge_test_list": []}
{"text": "Write a python function to toggle the bits in the given range.", "code": "def toggle_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n ^ num", "task_id": "228_04a4b1ec-2813-4343-9198-d2799541fce9", "test_setup_code": "", "test_list": ["assert toggle_bits(10, 2, 4) == 5", "assert toggle_bits(0, 1, 1) == 1", "assert toggle_bits(15, 1, 4) == 0", "assert toggle_bits(8, 2, 3) == 12", "assert toggle_bits(7, 1, 3) == 0", "assert toggle_bits(5, 1, 2) == 6", "assert toggle_bits(1, 1, 1) == 0", "assert toggle_bits(0, 2, 2) == 2", "assert toggle_bits(1023, 5, 10) == 31", "assert toggle_bits(1024, 1, 10) == 1023", "assert toggle_bits(255, 1, 8) == 0", "assert toggle_bits(255, 4, 6) == 207", "assert toggle_bits(170, 2, 7) == 85", "assert toggle_bits(85, 3, 5) == 117", "assert toggle_bits(12345, 5, 10) == 12297"], "challenge_test_list": []}
{"text": "Write a python function to set the bits in the given range.", "code": "def set_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n | num", "task_id": "228_8f5022be-21ce-4a61-bebf-152c3e53e900", "test_setup_code": "", "test_list": ["assert set_bits(0, 1, 1) == 1", "assert set_bits(0, 1, 2) == 3", "assert set_bits(0, 1, 3) == 7", "assert set_bits(0, 2, 3) == 6", "assert set_bits(0, 3, 5) == 28", "assert set_bits(8, 1, 1) == 9", "assert set_bits(8, 1, 2) == 11", "assert set_bits(8, 2, 3) == 14", "assert set_bits(8, 3, 5) == 28", "assert set_bits(15, 1, 4) == 15", "assert set_bits(15, 2, 4) == 15", "assert set_bits(15, 3, 4) == 15", "assert set_bits(15, 4, 4) == 15", "assert set_bits(31, 1, 5) == 31", "assert set_bits(31, 2, 4) == 31"], "challenge_test_list": []}
{"text": "Write a python function to clear the bits in the given range.", "code": "def clear_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n & ~num", "task_id": "228_5df501a5-db6c-4d7b-815a-fedca05c15e6", "test_setup_code": "", "test_list": ["assert clear_bits(15, 2, 3) == 9", "assert clear_bits(0, 1, 5) == 0", "assert clear_bits(255, 1, 8) == 0", "assert clear_bits(42, 3, 5) == 34", "assert clear_bits(100, 2, 4) == 88", "assert clear_bits(1023, 5, 8) == 31", "assert clear_bits(1, 1, 1) == 0", "assert clear_bits(128, 8, 8) == 0", "assert clear_bits(255, 4, 6) == 207", "assert clear_bits(170, 1, 8) == 0", "assert clear_bits(123456, 3, 10) == 122880", "assert clear_bits(2147483647, 1, 31) == 0", "assert clear_bits(65535, 9, 16) == 255", "assert clear_bits(9999, 5, 10) == 9727", "assert clear_bits(0b10101010, 2, 6) == 0b10000010"], "challenge_test_list": []}
{"text": "Write a python function to invert the bits in the given range.", "code": "def invert_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n ^ num", "task_id": "228_261e1274-68c5-4063-8095-ace61410565f", "test_setup_code": "", "test_list": ["assert invert_bits(0b101010, 2, 4) == 0b100001", "assert invert_bits(0b111111, 1, 6) == 0b000000", "assert invert_bits(0b000000, 1, 6) == 0b111111", "assert invert_bits(0b100000, 1, 1) == 0b100001", "assert invert_bits(0b100000, 6, 6) == 0b000000", "assert invert_bits(0b111111, 3, 5) == 0b110001", "assert invert_bits(0b101010, 1, 1) == 0b101011", "assert invert_bits(0b101010, 6, 6) == 0b001010", "assert invert_bits(0b101010, 1, 6) == 0b010101", "assert invert_bits(0b111000, 2, 4) == 0b110011", "assert invert_bits(0b000111, 1, 3) == 0b000000", "assert invert_bits(0b100100, 3, 5) == 0b101011", "assert invert_bits(0b110110, 2, 3) == 0b111010", "assert invert_bits(0b111000, 1, 2) == 0b110011", "assert invert_bits(0b000111, 4, 6) == 0b111111"], "challenge_test_list": []}
{"text": "Write a python function to check if the number formed by the bits in the given range is a power of two.", "code": "def is_power_of_two(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num != 0 and (new_num & (new_num - 1)) == 0", "task_id": "228_93510805-45bb-42c6-b9a9-c777cbf30fe5", "test_setup_code": "", "test_list": ["assert is_power_of_two(8, 1, 4) == True", "assert is_power_of_two(10, 1, 4) == False", "assert is_power_of_two(16, 1, 5) == True", "assert is_power_of_two(18, 2, 5) == True", "assert is_power_of_two(32, 1, 6) == True", "assert is_power_of_two(31, 1, 5) == False", "assert is_power_of_two(1, 1, 1) == True", "assert is_power_of_two(0, 1, 1) == False", "assert is_power_of_two(1024, 1, 11) == True", "assert is_power_of_two(1023, 1, 10) == False", "assert is_power_of_two(64, 1, 7) == True", "assert is_power_of_two(63, 1, 6) == False", "assert is_power_of_two(128, 1, 8) == True", "assert is_power_of_two(255, 1, 8) == False", "assert is_power_of_two(512, 1, 10) == True"], "challenge_test_list": []}
{"text": "Write a python function to count the number of unset bits in the given range.", "code": "def count_unset_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    count = 0\n    while num:\n        if not (new_num & 1):\n            count += 1\n        num >>= 1\n        new_num >>= 1\n    return count", "task_id": "228_a30ea4a7-0594-4e8b-8a0d-b8935d2fa87d", "test_setup_code": "", "test_list": ["assert count_unset_bits(5, 1, 3) == 1", "assert count_unset_bits(15, 1, 4) == 0", "assert count_unset_bits(0, 1, 5) == 5", "assert count_unset_bits(1, 1, 1) == 0", "assert count_unset_bits(1, 1, 2) == 1", "assert count_unset_bits(8, 1, 4) == 3", "assert count_unset_bits(255, 1, 8) == 0", "assert count_unset_bits(255, 4, 8) == 0", "assert count_unset_bits(128, 1, 8) == 7", "assert count_unset_bits(1023, 1, 10) == 0", "assert count_unset_bits(1024, 1, 11) == 10", "assert count_unset_bits(1024, 10, 11) == 1", "assert count_unset_bits(7, 2, 4) == 1", "assert count_unset_bits(12345, 1, 14) == 8", "assert count_unset_bits(12345, 5, 10) == 3"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all even elements appear before odd ones.", "code": "def separate_even_odd(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_aa88b39c-dced-4af5-b823-932d45aba46a", "test_setup_code": "", "test_list": ["assert separate_even_odd([1, 2, 3, 4, 5, 6]) == [2, 4, 6, 1, 3, 5]", "assert separate_even_odd([2, 4, 6, 8]) == [2, 4, 6, 8]", "assert separate_even_odd([1, 3, 5, 7]) == [1, 3, 5, 7]", "assert separate_even_odd([]) == []", "assert separate_even_odd([0, 1, 2, 3, 4, 5]) == [0, 2, 4, 1, 3, 5]", "assert separate_even_odd([1]) == [1]", "assert separate_even_odd([2]) == [2]", "assert separate_even_odd([1, 2]) == [2, 1]", "assert separate_even_odd([2, 1]) == [2, 1]", "assert separate_even_odd([1, 2, 1, 2]) == [2, 2, 1, 1]", "assert separate_even_odd([2, 1, 2, 1]) == [2, 2, 1, 1]", "assert separate_even_odd([1, 3, 5, 2, 4, 6]) == [2, 4, 6, 1, 3, 5]", "assert separate_even_odd([2, 4, 6, 1, 3, 5]) == [2, 4, 6, 1, 3, 5]", "assert separate_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10, 1, 3, 5, 7, 9]", "assert separate_even_odd([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [10, 8, 6, 4, 2, 9, 7, 5, 3, 1]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all zeros appear at the end.", "code": "def move_zeros_to_end(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_6f5d33ce-989e-4b45-ab0d-c8536e1e1da0", "test_setup_code": "", "test_list": ["assert move_zeros_to_end([0, 1, 0, 3, 12]) == [1, 3, 12, 0, 0]", "assert move_zeros_to_end([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert move_zeros_to_end([0, 1, 0, 0, 2, 0, 3]) == [1, 2, 3, 0, 0, 0, 0]", "assert move_zeros_to_end([]) == []", "assert move_zeros_to_end([0]) == [0]", "assert move_zeros_to_end([1]) == [1]", "assert move_zeros_to_end([0, 0, 1, 0, 2, 0, 3, 0, 4]) == [1, 2, 3, 4, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 0, 0, 2, 0, 3, 0, 4, 0, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 0, 2, 0, 3, 0, 4, 0, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 2, 0, 0, 0, 3, 4, 0, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([0, 0, 0, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 0, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([0, 1, 0, 2, 0, 3, 0, 4, 0, 5, 0]) == [1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0]", "assert move_zeros_to_end([1, 0, 2, 0, 3, 0, 4, 0, 5, 0, 6, 0, 7, 0, 8, 0, 9, 0, 10, 0]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all vowels appear before consonants.", "code": "def separate_vowels_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_part = ''.join([char for char in s if char in vowels])\n    consonant_part = ''.join([char for char in s if char not in vowels])\n    return vowel_part + consonant_part", "task_id": "229_6a2ee619-e5d4-4b1e-b91c-3e85181cf131", "test_setup_code": "", "test_list": ["assert separate_vowels_consonants('hello') == 'eohll'", "assert separate_vowels_consonants('world') == 'oworld'", "assert separate_vowels_consonants('AEIOU') == 'AEIOU'", "assert separate_vowels_consonants('bcdfg') == 'bcdfg'", "assert separate_vowels_consonants('a') == 'a'", "assert separate_vowels_consonants('b') == 'b'", "assert separate_vowels_consonants('aeiou') == 'aeiou'", "assert separate_vowels_consonants('xyz') == 'xyz'", "assert separate_vowels_consonants('') == ''", "assert separate_vowels_consonants('aAeEiIoOuU') == 'aAeEiIoOuU'", "assert separate_vowels_consonants('AbCdEfGhIj') == 'AeiobCdFhGj'", "assert separate_vowels_consonants('The quick brown fox') == 'euioThe qck brwn fx'", "assert separate_vowels_consonants('12345') == '12345'", "assert separate_vowels_consonants('a1b2c3d4e5') == 'ae1b2c3d45'", "assert separate_vowels_consonants('!@#$%^&*()') == '!@#$%^&*()'"], "challenge_test_list": []}
{"text": "Write a function to sort the elements of the given array by their absolute values.", "code": "def sort_by_absolute_value(arr: list[int]) -> list[int]:\n    return sorted(arr, key=abs)", "task_id": "229_5eacaef9-ec60-4783-8cfd-99cf967d5c53", "test_setup_code": "", "test_list": ["assert sort_by_absolute_value([3, -1, -4, 2, 0]) == [0, -1, 2, 3, -4]", "assert sort_by_absolute_value([-10, 5, -3, 1, -1]) == [1, -1, -3, 5, -10]", "assert sort_by_absolute_value([0, 0, 0]) == [0, 0, 0]", "assert sort_by_absolute_value([1, -1, 1, -1]) == [1, -1, 1, -1]", "assert sort_by_absolute_value([100, -50, 25, -12, 6]) == [6, -12, 25, -50, 100]", "assert sort_by_absolute_value([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert sort_by_absolute_value([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sort_by_absolute_value([]) == []", "assert sort_by_absolute_value([0]) == [0]", "assert sort_by_absolute_value([-1, 1, -2, 2, -3, 3]) == [-1, 1, -2, 2, -3, 3]", "assert sort_by_absolute_value([2, -2, 3, -3, 4, -4]) == [2, -2, 3, -3, 4, -4]", "assert sort_by_absolute_value([1000, -999, 500, -250, 125]) == [125, -250, 500, -999, 1000]", "assert sort_by_absolute_value([-100, 50, -25, 12, -6]) == [-6, 12, -25, 50, -100]", "assert sort_by_absolute_value([1, -1, 0]) == [0, 1, -1]", "assert sort_by_absolute_value([-5, 4, -3, 2, -1]) == [-1, 2, -3, 4, -5]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all uppercase letters appear before lowercase ones.", "code": "def separate_upper_lower(s: str) -> str:\n    upper_part = ''.join([char for char in s if char.isupper()])\n    lower_part = ''.join([char for char in s if char.islower()])\n    return upper_part + lower_part", "task_id": "229_dd020e31-a9bd-470a-912e-f857d271e9d3", "test_setup_code": "", "test_list": ["assert separate_upper_lower('aAbBcC') == 'ABCabc'", "assert separate_upper_lower('HelloWorld') == 'HWelloorld'", "assert separate_upper_lower('PYTHONpython') == 'PYTHONpython'", "assert separate_upper_lower('123ABCabc') == 'ABCabc'", "assert separate_upper_lower('') == ''", "assert separate_upper_lower('a') == 'a'", "assert separate_upper_lower('A') == 'A'", "assert separate_upper_lower('aA') == 'Aa'", "assert separate_upper_lower('AaBbCcDdEeFfGg') == 'ABCDEFGabcdefg'", "assert separate_upper_lower('ZzYyXxWwVvUu') == 'ZYXWVUzyxwvu'", "assert separate_upper_lower('lowercase') == 'lowercase'", "assert separate_upper_lower('UPPERCASE') == 'UPPERCASE'", "assert separate_upper_lower('MiXeDcAsE') == 'MDECiase'", "assert separate_upper_lower('1234') == ''", "assert separate_upper_lower('1234aA') == 'Aa'"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all prime numbers appear before non-prime ones.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef move_primes_to_front(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if is_prime(arr[i]):\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_f486f4dc-1eea-4392-87ec-19f45b553525", "test_setup_code": "", "test_list": ["assert move_primes_to_front([2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7, 4, 6, 8, 9, 10]", "assert move_primes_to_front([11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == [11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "assert move_primes_to_front([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]) == [4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]", "assert move_primes_to_front([2, 2, 2, 2, 2]) == [2, 2, 2, 2, 2]", "assert move_primes_to_front([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert move_primes_to_front([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]", "assert move_primes_to_front([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]", "assert move_primes_to_front([100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110]) == [101, 103, 107, 109, 100, 102, 104, 105, 106, 108, 110]", "assert move_primes_to_front([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 3, 5, 7, 1, 4, 6, 8, 9, 10]", "assert move_primes_to_front([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [7, 5, 3, 2, 10, 9, 8, 6, 4, 1]", "assert move_primes_to_front([29, 18, 17, 16, 15, 14, 13, 12, 11, 10]) == [29, 17, 13, 11, 18, 16, 15, 14, 12, 10]", "assert move_primes_to_front([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 4, 6, 8, 9, 10]) == [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 4, 6, 8, 9, 10]", "assert move_primes_to_front([1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 1]", "assert move_primes_to_front([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]", "assert move_primes_to_front([3, 3, 3, 3, 3, 3, 3, 3, 3, 3]) == [3, 3, 3, 3, 3, 3, 3, 3, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all multiples of three appear before non-multiples.", "code": "def separate_multiples_of_three(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % 3 == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_1963f975-f191-40c3-a1e9-c20262777555", "test_setup_code": "", "test_list": ["assert separate_multiples_of_three([]) == []", "assert separate_multiples_of_three([1, 2, 4, 5, 7]) == [1, 2, 4, 5, 7]", "assert separate_multiples_of_three([3, 6, 9, 12, 15]) == [3, 6, 9, 12, 15]", "assert separate_multiples_of_three([1, 3, 2, 6, 4]) == [3, 6, 2, 1, 4]", "assert separate_multiples_of_three([3, 1, 6, 2, 9, 4]) == [3, 6, 9, 2, 1, 4]", "assert separate_multiples_of_three([1, 2, 3, 4, 5, 6]) == [3, 6, 1, 4, 5, 2]", "assert separate_multiples_of_three([7, 8, 9]) == [9, 8, 7]", "assert separate_multiples_of_three([9, 8, 7]) == [9, 8, 7]", "assert separate_multiples_of_three([1, 2, 3]) == [3, 2, 1]", "assert separate_multiples_of_three([3, 2, 1]) == [3, 2, 1]", "assert separate_multiples_of_three([0, 1, 2]) == [0, 1, 2]", "assert separate_multiples_of_three([1, 0, 2]) == [0, 1, 2]", "assert separate_multiples_of_three([1, 2, 0]) == [0, 2, 1]", "assert separate_multiples_of_three([-3, -6, 1, 2]) == [-3, -6, 1, 2]", "assert separate_multiples_of_three([1, 2, -3, 4, -6]) == [-3, -6, 2, 4, 1]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all palindromic strings appear before non-palindromic ones.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef move_palindromes_to_front(arr: list[str]) -> list[str]:\n    j = 0\n    for i in range(len(arr)):\n        if is_palindrome(arr[i]):\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_86bc1eba-367a-4d11-82a0-26f62f791f50", "test_setup_code": "", "test_list": ["assert move_palindromes_to_front(['racecar', 'apple', 'level', 'banana']) == ['racecar', 'level', 'apple', 'banana']", "assert move_palindromes_to_front(['madam', 'noon', 'civic', 'deified', 'radar']) == ['madam', 'noon', 'civic', 'deified', 'radar']", "assert move_palindromes_to_front(['hello', 'world']) == ['hello', 'world']", "assert move_palindromes_to_front(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']", "assert move_palindromes_to_front(['']) == ['']", "assert move_palindromes_to_front(['a', 'aa', 'aaa', 'aaaa']) == ['a', 'aa', 'aaa', 'aaaa']", "assert move_palindromes_to_front(['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']", "assert move_palindromes_to_front(['radar', 'apple', 'banana', 'level']) == ['radar', 'level', 'apple', 'banana']", "assert move_palindromes_to_front(['step on no pets', 'was it a car or a cat I saw', 'not a palindrome']) == ['step on no pets', 'was it a car or a cat I saw', 'not a palindrome']", "assert move_palindromes_to_front(['12321', '45654', '78987', '101']) == ['12321', '45654', '78987', '101']", "assert move_palindromes_to_front(['palindrome', 'notapalindrome', 'racecar', 'civic']) == ['racecar', 'civic', 'palindrome', 'notapalindrome']", "assert move_palindromes_to_front(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']", "assert move_palindromes_to_front(['level', 'deified', 'civic', 'radar', 'apple']) == ['level', 'deified', 'civic', 'radar', 'apple']", "assert move_palindromes_to_front(['noon', 'madam', 'refer', 'apple', 'banana']) == ['noon', 'madam', 'refer', 'apple', 'banana']", "assert move_palindromes_to_front(['']) == ['']"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all digits appear before non-digits.", "code": "def separate_digits_non_digits(s: str) -> str:\n    digits = ''.join([char for char in s if char.isdigit()])\n    non_digits = ''.join([char for char in s if not char.isdigit()])\n    return digits + non_digits", "task_id": "229_006fbfc7-0b8e-48f8-9b11-dc29c7bcd2e2", "test_setup_code": "", "test_list": ["assert separate_digits_non_digits('a1b2c3') == '123abc'", "assert separate_digits_non_digits('123abc') == '123abc'", "assert separate_digits_non_digits('abc123') == '123abc'", "assert separate_digits_non_digits('a1b2c3d4e5f6g7h8i9j0') == '1234567890abcdefghij'", "assert separate_digits_non_digits('') == ''", "assert separate_digits_non_digits('abcdef') == 'abcdef'", "assert separate_digits_non_digits('123456') == '123456'", "assert separate_digits_non_digits('a1') == '1a'", "assert separate_digits_non_digits('1a') == '1a'", "assert separate_digits_non_digits('a') == 'a'", "assert separate_digits_non_digits('1') == '1'", "assert separate_digits_non_digits('a1b2c3d4e5f6g7h8i9j0k') == '1234567890abcdefghijk'", "assert separate_digits_non_digits('!@#123abc') == '123!@#abc'", "assert separate_digits_non_digits('123!@#abc') == '123!@#abc'", "assert separate_digits_non_digits('a1!b2@c3#') == '123a!b@c#'"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all elements divisible by a given number k appear before non-divisibles.", "code": "def move_divisibles_to_front(arr: list[int], k: int) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % k == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_7a187340-92cc-46d7-8e93-68448ebbf669", "test_setup_code": "", "test_list": ["assert move_divisibles_to_front([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6, 1, 3, 5]", "assert move_divisibles_to_front([1, 2, 3, 4, 5, 6], 3) == [3, 6, 1, 2, 4, 5]", "assert move_divisibles_to_front([10, 5, 15, 20, 25], 5) == [10, 5, 15, 20, 25]", "assert move_divisibles_to_front([7, 14, 21, 28, 35], 7) == [7, 14, 21, 28, 35]", "assert move_divisibles_to_front([1, 3, 5, 7, 9], 2) == [1, 3, 5, 7, 9]", "assert move_divisibles_to_front([2, 4, 6, 8, 10], 2) == [2, 4, 6, 8, 10]", "assert move_divisibles_to_front([], 5) == []", "assert move_divisibles_to_front([1], 5) == [1]", "assert move_divisibles_to_front([5], 5) == [5]", "assert move_divisibles_to_front([1, 2, 3, 4, 5], 1) == [1, 2, 3, 4, 5]", "assert move_divisibles_to_front([12, 5, 7, 9, 15], 3) == [12, 15, 7, 9, 5]", "assert move_divisibles_to_front([10, 20, 30, 40, 50], 10) == [10, 20, 30, 40, 50]", "assert move_divisibles_to_front([11, 22, 33, 44, 55], 11) == [11, 22, 33, 44, 55]", "assert move_divisibles_to_front([7, 8, 9, 10, 11], 20) == [7, 8, 9, 10, 11]", "assert move_divisibles_to_front([-4, -3, -2, -1, 0, 1, 2, 3, 4], 2) == [-4, -2, 0, 2, 4, -3, -1, 1, 3]"], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n largest items from a dataset.", "code": "import heapq\ndef sum_of_largest(nums: list[int], n: int) -> int:\n    return sum(heapq.nlargest(n, nums))", "task_id": "232_ef2cc1c5-232f-4eae-9cff-4f4c3f6a6ce0", "test_setup_code": "", "test_list": ["assert sum_of_largest([1, 2, 3, 4, 5], 2) == 9", "assert sum_of_largest([5, 5, 5, 5, 5], 3) == 15", "assert sum_of_largest([10, 20, 30, 40, 50], 5) == 150", "assert sum_of_largest([1, 2, 3, 4, 5], 0) == 0", "assert sum_of_largest([1, 2, 3, 4, 5], 1) == 5", "assert sum_of_largest([1], 1) == 1", "assert sum_of_largest([1, 2, 3, 4, 5], 3) == 12", "assert sum_of_largest([10, 9, 8, 7, 6], 3) == 27", "assert sum_of_largest([1, 2, 3, 4, 5], 5) == 15", "assert sum_of_largest([5, 4, 3, 2, 1], 2) == 9", "assert sum_of_largest([100, 200, 300, 400, 500], 3) == 1200", "assert sum_of_largest([-1, -2, -3, -4, -5], 2) == -3", "assert sum_of_largest([0, 0, 0, 0, 0], 3) == 0", "assert sum_of_largest([1, 2, 3], 4) == 6", "assert sum_of_largest([1, 3, 5, 7, 9], 2) == 16"], "challenge_test_list": []}
{"text": "Write a function to get the n smallest items from a dataset.", "code": "import heapq\ndef smallest_nnum(nums: list[int], n: int) -> list[int]:\n    return heapq.nsmallest(n, nums)", "task_id": "232_948bb162-2363-4760-9f3b-cdf708bf9e8b", "test_setup_code": "", "test_list": ["assert smallest_nnum([5, 3, 8, 1, 2], 3) == [1, 2, 3]", "assert smallest_nnum([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [1, 2, 3, 4, 5]", "assert smallest_nnum([1, 2, 3, 4, 5], 0) == []", "assert smallest_nnum([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert smallest_nnum([1, 2, 3, 4, 5], 10) == [1, 2, 3, 4, 5]", "assert smallest_nnum([], 3) == []", "assert smallest_nnum([5, 5, 5, 5, 5], 3) == [5, 5, 5]", "assert smallest_nnum([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 7) == [1, 1, 2, 3, 3, 4, 5]", "assert smallest_nnum([100, 200, 300, 400, 500], 1) == [100]", "assert smallest_nnum([1], 1) == [1]", "assert smallest_nnum([2, 2, 2, 2, 2], 2) == [2, 2]", "assert smallest_nnum([-1, -2, -3, -4, -5], 3) == [-5, -4, -3]", "assert smallest_nnum([0, 0, 0, 0, 0], 3) == [0, 0, 0]", "assert smallest_nnum([1, 2, 3, 4, 5], 1) == [1]", "assert smallest_nnum([9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == [1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n smallest items from a dataset.", "code": "import heapq\ndef sum_of_smallest(nums: list[int], n: int) -> int:\n    return sum(heapq.nsmallest(n, nums))", "task_id": "232_7d0372ad-507c-4f73-b2f0-9b8b67f769ea", "test_setup_code": "", "test_list": ["assert sum_of_smallest([1, 2, 3, 4, 5], 2) == 3", "assert sum_of_smallest([5, 4, 3, 2, 1], 3) == 6", "assert sum_of_smallest([10, 20, 30, 40, 50], 1) == 10", "assert sum_of_smallest([5, 5, 5, 5, 5], 5) == 25", "assert sum_of_smallest([1, 2, 3, 4, 5], 0) == 0", "assert sum_of_smallest([1, 2, 3, 4, 5], 5) == 15", "assert sum_of_smallest([-1, -2, -3, -4, -5], 3) == -12", "assert sum_of_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5], 4) == 5", "assert sum_of_smallest([100, 200, 300, 400, 500], 2) == 300", "assert sum_of_smallest([1], 1) == 1", "assert sum_of_smallest([1, 2, 3, 4, 5], 6) == 15", "assert sum_of_smallest([1, 2, 3, 4, 5], -1) == 0", "assert sum_of_smallest([1, 2, 3, 4, 5], 3) == 6", "assert sum_of_smallest([0, 0, 0, 0, 0], 3) == 0", "assert sum_of_smallest([1, 2, 2, 3, 3], 3) == 5"], "challenge_test_list": []}
{"text": "Write a function to get the nth largest item from a dataset.", "code": "import heapq\ndef nth_largest(nums: list[int], n: int) -> int:\n    return heapq.nlargest(n, nums)[-1]", "task_id": "232_8f129359-9a12-47fb-bd15-c1a1b56f9811", "test_setup_code": "", "test_list": ["assert nth_largest([3, 1, 2, 4, 5], 1) == 5", "assert nth_largest([3, 1, 2, 4, 5], 2) == 4", "assert nth_largest([3, 1, 2, 4, 5], 3) == 3", "assert nth_largest([3, 1, 2, 4, 5], 4) == 2", "assert nth_largest([3, 1, 2, 4, 5], 5) == 1", "assert nth_largest([5, 5, 5, 5, 5], 3) == 5", "assert nth_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert nth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 10", "assert nth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == 6", "assert nth_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 1", "assert nth_largest([1], 1) == 1", "assert nth_largest([2, 2, 2, 2, 2], 1) == 2", "assert nth_largest([1, 3, 3, 3, 5], 2) == 3", "assert nth_largest([1, 2, 3, 4, 5], 0) == None", "assert nth_largest([], 1) == None"], "challenge_test_list": []}
{"text": "Write a function to get the nth smallest item from a dataset.", "code": "import heapq\ndef nth_smallest(nums: list[int], n: int) -> int:\n    return heapq.nsmallest(n, nums)[-1]", "task_id": "232_955df25a-4fc7-4ad9-b43c-3cc2c93e2440", "test_setup_code": "", "test_list": ["assert nth_smallest([3, 1, 2], 1) == 1", "assert nth_smallest([3, 1, 2], 2) == 2", "assert nth_smallest([3, 1, 2], 3) == 3", "assert nth_smallest([5, 3, 4, 1, 2], 4) == 4", "assert nth_smallest([5, 3, 4, 1, 2], 5) == 5", "assert nth_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 1) == 1", "assert nth_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 10) == 10", "assert nth_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 5", "assert nth_smallest([1, 1, 1, 1, 1], 3) == 1", "assert nth_smallest([2, 2, 2, 1, 1], 2) == 1", "assert nth_smallest([2, 2, 2, 1, 1], 4) == 2", "assert nth_smallest([100, 200, 300, 400, 500], 1) == 100", "assert nth_smallest([100, 200, 300, 400, 500], 3) == 300", "assert nth_smallest([-1, -2, -3, -4, -5], 2) == -4", "assert nth_smallest([-1, -2, -3, -4, -5], 5) == -1"], "challenge_test_list": []}
{"text": "Write a function to get the median of a dataset.", "code": "def median_of_list(nums: list[int]) -> float:\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 1:\n        return float(nums[n // 2])\n    else:\n        return (nums[n // 2 - 1] + nums[n // 2]) / 2", "task_id": "232_af47259a-e5a3-48b0-820b-f37f60cc1169", "test_setup_code": "", "test_list": ["assert median_of_list([1, 2, 3]) == 2.0", "assert median_of_list([1, 2, 3, 4]) == 2.5", "assert median_of_list([7, 1, 3, 2]) == 2.5", "assert median_of_list([5]) == 5.0", "assert median_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5", "assert median_of_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 5.5", "assert median_of_list([1, 2, 2, 2, 3, 3, 3, 4]) == 2.5", "assert median_of_list([1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1.0", "assert median_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5.0", "assert median_of_list([-5, -1, 0, 1, 5]) == 0.0", "assert median_of_list([100, 200, 300, 400, 500]) == 300.0", "assert median_of_list([1.1, 2.2, 3.3, 4.4, 5.5]) == 3.3", "assert median_of_list([1.1, 2.2, 3.3, 4.4]) == 2.75", "assert median_of_list([1, 3, 3, 6, 7, 8, 9]) == 6.0", "assert median_of_list([1, 2, 3, 4, 5, 6, 8, 9, 10]) == 5.0"], "challenge_test_list": []}
{"text": "Write a function to get the average of the n largest items from a dataset.", "code": "import heapq\ndef average_of_largest(nums: list[int], n: int) -> float:\n    return sum(heapq.nlargest(n, nums)) / n", "task_id": "232_b4c2dca2-74f1-4f66-921d-087134b3368b", "test_setup_code": "", "test_list": ["assert average_of_largest([1, 2, 3, 4, 5], 2) == 4.5", "assert average_of_largest([10, 20, 30, 40, 50], 3) == 40.0", "assert average_of_largest([5, 5, 5, 5, 5], 5) == 5.0", "assert average_of_largest([1, 2, 3, 4, 5], 1) == 5.0", "assert average_of_largest([1, 2, 3, 4, 5], 5) == 3.0", "assert average_of_largest([100, 200, 300, 400, 500], 2) == 450.0", "assert average_of_largest([-1, -2, -3, -4, -5], 2) == -1.5", "assert average_of_largest([1], 1) == 1.0", "assert average_of_largest([1, 2, 3, 4, 5], 0) == 0.0", "assert average_of_largest([1, 1, 1, 1, 1], 3) == 1.0", "assert average_of_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 8.5", "assert average_of_largest([0, 0, 0, 0, 0], 3) == 0.0", "assert average_of_largest([1, 2, 2, 2, 3], 2) == 2.5", "assert average_of_largest([1, 2, 3, 4, 5], 6) == 3.0", "assert average_of_largest([1, 2, 3, 4, 5], 4) == 4.0"], "challenge_test_list": []}
{"text": "Write a function to get the average of the n smallest items from a dataset.", "code": "import heapq\ndef average_of_smallest(nums: list[int], n: int) -> float:\n    return sum(heapq.nsmallest(n, nums)) / n", "task_id": "232_e2179dd5-5c86-4bae-8282-a44d8d261a01", "test_setup_code": "", "test_list": ["assert average_of_smallest([1, 2, 3, 4, 5], 3) == 2.0", "assert average_of_smallest([5, 4, 3, 2, 1], 2) == 1.5", "assert average_of_smallest([10, 20, 30, 40, 50], 5) == 30.0", "assert average_of_smallest([1, 1, 1, 1, 1], 3) == 1.0", "assert average_of_smallest([5, 5, 5, 5, 5], 1) == 5.0", "assert average_of_smallest([1, 2, 3, 4, 5], 1) == 1.0", "assert average_of_smallest([0, 0, 0, 0, 0], 3) == 0.0", "assert average_of_smallest([-1, -2, -3, -4, -5], 2) == -4.5", "assert average_of_smallest([-10, 0, 10, 20, 30], 4) == 5.0", "assert average_of_smallest([100, 200, 300, 400, 500], 2) == 150.0", "assert average_of_smallest([1], 1) == 1.0", "assert average_of_smallest([1, 2, 3, 4, 5], 5) == 3.0", "assert average_of_smallest([1, 2, 3, 4, 5], 0) == 0.0", "assert average_of_smallest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 4) == 2.5", "assert average_of_smallest([1.1, 2.2, 3.3, 4.4, 5.5], 3) == 2.2"], "challenge_test_list": []}
{"text": "Write a function to get the top n percent of items from a dataset.", "code": "import heapq\ndef top_n_percent(nums: list[int], percent: float) -> list[int]:\n    n = int(len(nums) * percent / 100)\n    return heapq.nlargest(n, nums)", "task_id": "232_a5774f79-df97-4e3a-aa27-59c8ed464272", "test_setup_code": "", "test_list": ["assert top_n_percent([1, 2, 3, 4, 5], 20) == [5]", "assert top_n_percent([1, 2, 3, 4, 5], 40) == [5, 4]", "assert top_n_percent([1, 2, 3, 4, 5], 60) == [5, 4, 3]", "assert top_n_percent([1, 2, 3, 4, 5], 80) == [5, 4, 3, 2]", "assert top_n_percent([1, 2, 3, 4, 5], 100) == [5, 4, 3, 2, 1]", "assert top_n_percent([5, 4, 3, 2, 1], 20) == [5]", "assert top_n_percent([5, 4, 3, 2, 1], 40) == [5, 4]", "assert top_n_percent([5, 4, 3, 2, 1], 60) == [5, 4, 3]", "assert top_n_percent([5, 4, 3, 2, 1], 80) == [5, 4, 3, 2]", "assert top_n_percent([5, 4, 3, 2, 1], 100) == [5, 4, 3, 2, 1]", "assert top_n_percent([1, 1, 1, 1, 1], 20) == [1]", "assert top_n_percent([1, 1, 1, 1, 1], 100) == [1, 1, 1, 1, 1]", "assert top_n_percent([1], 100) == [1]", "assert top_n_percent([], 50) == []", "assert top_n_percent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30) == [10, 9, 8]"], "challenge_test_list": []}
{"text": "Write a function to get the bottom n percent of items from a dataset.", "code": "import heapq\ndef bottom_n_percent(nums: list[int], percent: float) -> list[int]:\n    n = int(len(nums) * percent / 100)\n    return heapq.nsmallest(n, nums)", "task_id": "232_d18a77ff-8aae-4575-8e67-f3be194ac83a", "test_setup_code": "", "test_list": ["assert bottom_n_percent([1, 2, 3, 4, 5], 20) == [1]", "assert bottom_n_percent([5, 4, 3, 2, 1], 40) == [1, 2]", "assert bottom_n_percent([10, 20, 30, 40, 50], 60) == [10, 20, 30]", "assert bottom_n_percent([5, 5, 5, 5, 5], 100) == [5, 5, 5, 5, 5]", "assert bottom_n_percent([5, 5, 5, 5, 5], 0) == []", "assert bottom_n_percent([1, 2, 3, 4, 5], 50) == [1, 2]", "assert bottom_n_percent([1, 2, 3, 4, 5], 100) == [1, 2, 3, 4, 5]", "assert bottom_n_percent([1, 2, 3, 4, 5], 10) == [1]", "assert bottom_n_percent([-1, -2, -3, -4, -5], 40) == [-5, -4]", "assert bottom_n_percent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 30) == [1, 2, 3]", "assert bottom_n_percent([1], 100) == [1]", "assert bottom_n_percent([1], 0) == []", "assert bottom_n_percent([3, 1, 2], 50) == [1]", "assert bottom_n_percent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 0) == []", "assert bottom_n_percent([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 50) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r**2 * h\n    return volume", "task_id": "233_bf201d10-0d06-44c9-8684-449544c1ad1d", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.1415", "assert volume_cylinder(0, 10) == 0.0", "assert volume_cylinder(10, 0) == 0.0", "assert volume_cylinder(2, 5) == 62.83", "assert volume_cylinder(3.5, 7.2) == 276.4602", "assert volume_cylinder(1, 0.5) == 1.57075", "assert volume_cylinder(0.1, 0.1) == 0.0031415", "assert volume_cylinder(100, 100) == 3141500.0", "assert volume_cylinder(0.001, 1000) == 0.0031415", "assert volume_cylinder(123, 456) == 21546936.54", "assert volume_cylinder(5, 5) == 392.6875", "assert volume_cylinder(10, 10) == 3141.5", "assert volume_cylinder(0.5, 0.5) == 0.3926875", "assert volume_cylinder(1.5, 3.5) == 24.734625", "assert volume_cylinder(2.2, 4.4) == 67.97368"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r):\n    surface_area = 4 * 3.1415 * r**2\n    return surface_area", "task_id": "233_9bc473b1-594b-477e-9bec-1bf2d9ec8f74", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2) == 50.264", "assert surface_area_sphere(0.5) == 3.1415", "assert surface_area_sphere(10) == 1256.6", "assert surface_area_sphere(100) == 125660.0", "assert surface_area_sphere(0.1) == 0.12566", "assert surface_area_sphere(3.5) == 153.9375", "assert surface_area_sphere(7) == 615.752", "assert surface_area_sphere(0.01) == 0.0012566", "assert surface_area_sphere(50) == 31415.0", "assert surface_area_sphere(0.25) == 0.785375", "assert surface_area_sphere(4) == 201.056", "assert surface_area_sphere(0.75) == 7.068375", "assert surface_area_sphere(20) == 5026.4"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n    volume = (4/3) * 3.1415 * r**3\n    return volume", "task_id": "233_2f58a576-eaf5-48e9-917c-af4999e9bbac", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.188666666666666", "assert volume_sphere(0) == 0.0", "assert volume_sphere(2) == 33.512", "assert volume_sphere(3.5) == 179.59479166666666", "assert volume_sphere(10) == 4188.666666666666", "assert volume_sphere(0.1) == 0.004188666666666666", "assert volume_sphere(100) == 4188666.6666666665", "assert volume_sphere(0.5) == 0.5235833333333333", "assert volume_sphere(1.5) == 14.13075", "assert volume_sphere(7) == 1436.0266666666666", "assert volume_sphere(0.01) == 4.188666666666667e-06", "assert volume_sphere(50) == 523583.3333333333", "assert volume_sphere(0.25) == 0.06544999999999999", "assert volume_sphere(5.5) == 696.9079166666666", "assert volume_sphere(20) == 33510.666666666664"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(l, w):\n    area = l * w\n    return area", "task_id": "233_e357d44e-0260-42ad-a96c-2d0a6902a11e", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(10, 0) == 0", "assert area_rectangle(1, 1) == 1", "assert area_rectangle(123, 456) == 56088", "assert area_rectangle(7, 3) == 21", "assert area_rectangle(100, 200) == 20000", "assert area_rectangle(50, 50) == 2500", "assert area_rectangle(999, 1) == 999", "assert area_rectangle(1, 999) == 999", "assert area_rectangle(0, 0) == 0", "assert area_rectangle(1000000, 1) == 1000000", "assert area_rectangle(1, 1000000) == 1000000", "assert area_rectangle(2147483647, 1) == 2147483647", "assert area_rectangle(1, 2147483647) == 2147483647"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n    perimeter = 2 * (l + w)\n    return perimeter", "task_id": "233_48622dc7-f8e5-400c-b9c4-b553469e436c", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(10, 5) == 30", "assert perimeter_rectangle(100, 200) == 600", "assert perimeter_rectangle(1, 0) == 2", "assert perimeter_rectangle(0, 1) == 2", "assert perimeter_rectangle(3, 3) == 12", "assert perimeter_rectangle(7, 2) == 18", "assert perimeter_rectangle(50, 50) == 200", "assert perimeter_rectangle(123, 456) == 1158", "assert perimeter_rectangle(2, 2) == 8", "assert perimeter_rectangle(4, 5) == 18", "assert perimeter_rectangle(6, 7) == 26", "assert perimeter_rectangle(8, 9) == 34", "assert perimeter_rectangle(1000, 2000) == 6000"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(b, h):\n    area = 0.5 * b * h\n    return area", "task_id": "233_024c19ec-beeb-4c39-892d-cce2915164aa", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 5) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(0, 0) == 0.0", "assert area_triangle(3, 4) == 6.0", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(100, 50) == 2500.0", "assert area_triangle(7, 3) == 10.5", "assert area_triangle(2.5, 4) == 5.0", "assert area_triangle(5, 2.5) == 6.25", "assert area_triangle(0.1, 0.2) == 0.01", "assert area_triangle(123, 456) == 28044.0", "assert area_triangle(1e-10, 1e-10) == 5e-21", "assert area_triangle(1e10, 1e10) == 5e19", "assert area_triangle(3.5, 2.2) == 3.85"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(r):\n    circumference = 2 * 3.1415 * r\n    return circumference", "task_id": "233_317a0107-3526-483d-a952-73e293e52583", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 6.283", "assert circumference_circle(0) == 0.0", "assert circumference_circle(2.5) == 15.7075", "assert circumference_circle(-1) == -6.283", "assert circumference_circle(100) == 628.3", "assert circumference_circle(0.1) == 0.6283", "assert circumference_circle(3.1415) == 19.739175", "assert circumference_circle(1e-10) == 6.283e-10", "assert circumference_circle(1e10) == 62830000000.0", "assert circumference_circle(1.23456789) == 7.757018326", "assert circumference_circle(1.0) == 6.283", "assert circumference_circle(50) == 314.15", "assert circumference_circle(0.5) == 3.1415", "assert circumference_circle(10) == 62.83", "assert circumference_circle(7.5) == 47.1225"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a):\n    volume = a**3\n    return volume", "task_id": "233_00a181b8-abfc-4930-b448-f4749d977b75", "test_setup_code": "", "test_list": ["assert volume_cube(1) == 1", "assert volume_cube(0) == 0", "assert volume_cube(2) == 8", "assert volume_cube(3) == 27", "assert volume_cube(10) == 1000", "assert volume_cube(5) == 125", "assert volume_cube(7) == 343", "assert volume_cube(100) == 1000000", "assert volume_cube(15) == 3375", "assert volume_cube(20) == 8000", "assert volume_cube(50) == 125000", "assert volume_cube(25) == 15625", "assert volume_cube(8) == 512", "assert volume_cube(12) == 1728", "assert volume_cube(30) == 27000"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(a):\n    surface_area = 6 * a**2\n    return surface_area", "task_id": "233_21d2b39b-a66a-481e-857e-58f01ca5b557", "test_setup_code": "", "test_list": ["assert surface_area_cube(1) == 6", "assert surface_area_cube(2) == 24", "assert surface_area_cube(0) == 0", "assert surface_area_cube(10) == 600", "assert surface_area_cube(3) == 54", "assert surface_area_cube(5) == 150", "assert surface_area_cube(7) == 294", "assert surface_area_cube(100) == 60000", "assert surface_area_cube(0.5) == 1.5", "assert surface_area_cube(1.5) == 13.5", "assert surface_area_cube(0.1) == 0.06", "assert surface_area_cube(4) == 96", "assert surface_area_cube(6) == 216", "assert surface_area_cube(8) == 384", "assert surface_area_cube(9) == 486"], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(b, h):\n    area = b * h\n    return area", "task_id": "233_a27570cb-3a42-4ec7-b7b9-2c310c3bdf71", "test_setup_code": "", "test_list": ["assert area_parallelogram(5, 10) == 50", "assert area_parallelogram(0, 10) == 0", "assert area_parallelogram(10, 0) == 0", "assert area_parallelogram(1, 1) == 1", "assert area_parallelogram(7, 3) == 21", "assert area_parallelogram(100, 200) == 20000", "assert area_parallelogram(123, 456) == 56088", "assert area_parallelogram(0.5, 0.5) == 0.25", "assert area_parallelogram(0.1, 0.2) == 0.02", "assert area_parallelogram(3.5, 2.5) == 8.75", "assert area_parallelogram(10, 10) == 100", "assert area_parallelogram(2, 3) == 6", "assert area_parallelogram(8, 8) == 64", "assert area_parallelogram(9, 9) == 81", "assert area_parallelogram(15, 20) == 300"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers.", "code": "def find_max_sum_path(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_bbe2ba82-afca-4072-8fef-3677d75eb61e", "test_setup_code": "", "test_list": ["assert find_max_sum_path([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]) == 23", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 20", "assert find_max_sum_path([[1]]) == 1", "assert find_max_sum_path([[1], [2, 3], [1, 5, 1], [4, 1, 8, 3]]) == 15", "assert find_max_sum_path([[1], [2, 3], [4, 1, 6], [7, 8, 9, 10]]) == 21", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 35", "assert find_max_sum_path([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]]) == 27", "assert find_max_sum_path([[1], [2, 3], [3, 4, 5], [6, 7, 8, 9]]) == 19", "assert find_max_sum_path([[10], [9, 8], [7, 6, 5], [4, 3, 2, 1]]) == 28", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]) == 56", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]]) == 84", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36]]) == 120", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45]]) == 165", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55]]) == 220", "assert find_max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45], [46, 47, 48, 49, 50, 51, 52, 53, 54, 55], [56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66]]) == 286"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, avoiding certain obstacle positions.", "code": "def max_sum_path_with_obstacles(triangle: List[List[int]], obstacles: List[Tuple[int, int]]) -> int:\n    n = len(triangle)\n    for i, j in obstacles:\n        triangle[i][j] = float('-inf')\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            if triangle[i][j] != float('-inf'):\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_53bac53f-4980-482a-bcb4-7bcb97a48a57", "test_setup_code": "", "test_list": ["assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], []) == 23", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(1, 1)]) == 18", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(2, 1)]) == 20", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(3, 2)]) == 19", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(1, 0), (2, 0)]) == 14", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(0, 0)]) == float('-inf')", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(3, 0), (3, 1), (3, 2), (3, 3)]) == float('-inf')", "assert max_sum_path_with_obstacles([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [(2, 0), (2, 1), (2, 2)]) == float('-inf')", "assert max_sum_path_with_obstacles([[1]], []) == 1", "assert max_sum_path_with_obstacles([[1]], [(0, 0)]) == float('-inf')", "assert max_sum_path_with_obstacles([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], []) == 27", "assert max_sum_path_with_obstacles([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], [(1, 1)]) == 20", "assert max_sum_path_with_obstacles([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], [(2, 2)]) == 22", "assert max_sum_path_with_obstacles([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], [(3, 1)]) == 18", "assert max_sum_path_with_obstacles([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], [(1, 0), (2, 0)]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where some numbers can be negative.", "code": "def max_sum_path_with_negative(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_efe5ce0a-8801-4eb7-bc55-cbf3acaee68b", "test_setup_code": "", "test_list": ["assert max_sum_path_with_negative([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]) == 23", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 20", "assert max_sum_path_with_negative([[1], [-2, 3], [4, -5, 6], [7, 8, -9, 10]]) == 17", "assert max_sum_path_with_negative([[1], [2, 3], [4, 1, 6], [7, 8, 9, 10]]) == 20", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, -10]]) == 18", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 0]]) == 19", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, -9, -10]]) == 15", "assert max_sum_path_with_negative([[1], [2, -3], [4, 5, 6], [7, 8, 9, 10]]) == 20", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 35", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, -15]]) == 20", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, -13, 14, 15]]) == 30", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]) == 56", "assert max_sum_path_with_negative([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [-16, 17, 18, 19, 20, 21]]) == 41", "assert max_sum_path_with_negative([[-1], [-2, -3], [-4, -5, -6], [-7, -8, -9, -10]]) == -14", "assert max_sum_path_with_negative([[5]]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can only move down to the next row but within k columns.", "code": "def max_sum_path_with_restriction(triangle: List[List[int]], k: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            max_sum = float('-inf')\n            for m in range(1, k+1):\n                if j+m < len(triangle[i+1]):\n                    max_sum = max(max_sum, triangle[i+1][j+m])\n            triangle[i][j] += max_sum\n    return triangle[0][0]", "task_id": "231_60fadd2b-99c8-4007-b1af-6a4b4e11d733", "test_setup_code": "", "test_list": ["assert max_sum_path_with_restriction([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 1) == 11", "assert max_sum_path_with_restriction([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 2) == 13", "assert max_sum_path_with_restriction([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 3) == 15", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 1) == 19", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 2) == 21", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3) == 22", "assert max_sum_path_with_restriction([[1]], 1) == 1", "assert max_sum_path_with_restriction([[1], [2, 3]], 1) == 4", "assert max_sum_path_with_restriction([[1], [2, 3]], 2) == 4", "assert max_sum_path_with_restriction([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 1) == 18", "assert max_sum_path_with_restriction([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 2) == 23", "assert max_sum_path_with_restriction([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 3) == 24", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 1) == 30", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 2) == 33", "assert max_sum_path_with_restriction([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 3) == 35"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can skip at most one row.", "code": "def max_sum_path_with_skip(triangle: List[List[int]], skip: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            if i+2 < n:\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1], triangle[i+2][j], triangle[i+2][j+1])\n            else:\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_30f6cc8d-629b-41e0-aae1-f688794658ad", "test_setup_code": "", "test_list": ["assert max_sum_path_with_skip([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 1) == 15", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 1) == 19", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 0) == 18", "assert max_sum_path_with_skip([[10]], 1) == 10", "assert max_sum_path_with_skip([[1], [2, 3]], 1) == 4", "assert max_sum_path_with_skip([[1], [2, 3]], 0) == 4", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6]], 1) == 10", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6]], 0) == 9", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 1) == 30", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 0) == 29", "assert max_sum_path_with_skip([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 1) == 23", "assert max_sum_path_with_skip([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 0) == 22", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]], 1) == 45", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]], 0) == 44", "assert max_sum_path_with_skip([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]], 1) == 73"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where moving to the next row incurs a penalty.", "code": "def max_sum_path_with_penalty(triangle: List[List[int]], penalty: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] - penalty, triangle[i+1][j+1] - penalty)\n    return triangle[0][0]", "task_id": "231_10d50e98-9828-4274-84b8-fbc98e7d7839", "test_setup_code": "", "test_list": ["assert max_sum_path_with_penalty([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 1) == 11", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 2) == 14", "assert max_sum_path_with_penalty([[1]], 1) == 1", "assert max_sum_path_with_penalty([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 3) == 15", "assert max_sum_path_with_penalty([[1], [2, 3], [1, 5, 1], [4, 1, 8, 3]], 2) == 8", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 1, 6], [7, 8, 9, 10]], 0) == 21", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 10) == -5", "assert max_sum_path_with_penalty([[10], [9, 8], [7, 6, 5], [4, 3, 2, 1]], 1) == 27", "assert max_sum_path_with_penalty([[10], [9, 8], [7, 6, 5], [4, 3, 2, 1]], 5) == 15", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 1) == 18", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 0) == 21", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3) == 12", "assert max_sum_path_with_penalty([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 4) == 9", "assert max_sum_path_with_penalty([[5], [4, 3], [2, 1, 0]], 1) == 8", "assert max_sum_path_with_penalty([[5], [4, 3], [2, 1, 0]], 2) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where moving to the next row gives a bonus.", "code": "def max_sum_path_with_bonus(triangle: List[List[int]], bonus: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] + bonus, triangle[i+1][j+1] + bonus)\n    return triangle[0][0]", "task_id": "231_f30c7ffe-8655-4e7c-854d-25a7de4e2aae", "test_setup_code": "", "test_list": ["assert max_sum_path_with_bonus([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 0) == 11", "assert max_sum_path_with_bonus([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 1) == 14", "assert max_sum_path_with_bonus([[1]], 0) == 1", "assert max_sum_path_with_bonus([[1]], 10) == 1", "assert max_sum_path_with_bonus([[1], [2, 3]], 0) == 4", "assert max_sum_path_with_bonus([[1], [2, 3]], 1) == 6", "assert max_sum_path_with_bonus([[1], [2, 3], [4, 5, 6]], 0) == 10", "assert max_sum_path_with_bonus([[1], [2, 3], [4, 5, 6]], 2) == 16", "assert max_sum_path_with_bonus([[1], [2, 3], [4, 5, 6]], 5) == 25", "assert max_sum_path_with_bonus([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 0) == 23", "assert max_sum_path_with_bonus([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 2) == 29", "assert max_sum_path_with_bonus([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 3) == 32", "assert max_sum_path_with_bonus([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], 10) == 53", "assert max_sum_path_with_bonus([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 1) == 22", "assert max_sum_path_with_bonus([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 0) == 20"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where each row has a multiplier.", "code": "def max_sum_path_with_multipliers(triangle: List[List[int]], multipliers: List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] * multipliers[i+1], triangle[i+1][j+1] * multipliers[i+1])\n    return triangle[0][0]", "task_id": "231_f0b752cc-c5d4-4c84-95ab-5f3fe4690a3b", "test_setup_code": "", "test_list": ["assert max_sum_path_with_multipliers([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], [1, 2, 3, 4]) == 23", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6]], [1, 1, 1]) == 10", "assert max_sum_path_with_multipliers([[1]], [1]) == 1", "assert max_sum_path_with_multipliers([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]], [1, 2, 3, 4]) == 30", "assert max_sum_path_with_multipliers([[1], [2, 3], [1, 5, 1]], [1, 2, 3]) == 16", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 2, 3, 4]) == 48", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 1, 1, 1]) == 20", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [2, 2, 2, 2]) == 40", "assert max_sum_path_with_multipliers([[10], [10, 10], [10, 10, 10]], [1, 1, 1]) == 30", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 2, 1, 2]) == 40", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [2, 1, 2, 1]) == 32", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [3, 2, 1, 2]) == 48", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [2, 3, 2, 1]) == 36", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 3, 2, 1]) == 34", "assert max_sum_path_with_multipliers([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], [1, 2, 3, 1]) == 38"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can only move to the minimum of the next row.", "code": "def max_sum_path_with_minimum(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_cb0247e8-7e54-4a04-96c2-a420f28efe0c", "test_setup_code": "", "test_list": ["assert max_sum_path_with_minimum([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]) == 11", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 14", "assert max_sum_path_with_minimum([[1]]) == 1", "assert max_sum_path_with_minimum([[1], [2, 3], [1, 5, 1], [1, 1, 1, 1]]) == 4", "assert max_sum_path_with_minimum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]]) == 4", "assert max_sum_path_with_minimum([[10], [10, 10], [10, 10, 10], [10, 10, 10, 10]]) == 40", "assert max_sum_path_with_minimum([[1], [2, 3], [3, 2, 1], [4, 3, 2, 1]]) == 7", "assert max_sum_path_with_minimum([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]]) == 15", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 1, 6], [7, 8, 9, 1]]) == 5", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 21", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [1, 1, 1, 1, 1]]) == 14", "assert max_sum_path_with_minimum([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1], [1, 1, 1, 1, 1]]) == 5", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]) == 36", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [1, 1, 1, 1, 1, 1]]) == 16", "assert max_sum_path_with_minimum([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [1, 1, 1, 1, 1, 1], [2, 2, 2, 2, 2, 2, 2]]) == 18"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from a fixed starting point to the bottom of a given triangle of numbers.", "code": "def max_sum_path_with_fixed_start(triangle: List[List[int]], start: int) -> int:\n    n = len(triangle)\n    for i in range(start, n-1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[start][0]", "task_id": "231_8b79f4bd-ac54-4d96-a81f-09f1f5ffda5f", "test_setup_code": "", "test_list": ["assert max_sum_path_with_fixed_start([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]], 0) == 11", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 0) == 20", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 1) == 18", "assert max_sum_path_with_fixed_start([[10]], 0) == 10", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 2) == 15", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]], 3) == 10", "assert max_sum_path_with_fixed_start([[2], [3, 4], [5, 6, 7]], 0) == 10", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6]], 1) == 9", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6]], 2) == 6", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6]], 0) == 10", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 0) == 34", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 1) == 33", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 2) == 31", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 3) == 28", "assert max_sum_path_with_fixed_start([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]], 4) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def area_square(side: int) -> int:\n  return side * side", "task_id": "234_1861a83f-d824-4b78-aec4-9756bfdb4903", "test_setup_code": "", "test_list": ["assert area_square(0) == 0", "assert area_square(1) == 1", "assert area_square(2) == 4", "assert area_square(3) == 9", "assert area_square(4) == 16", "assert area_square(5) == 25", "assert area_square(10) == 100", "assert area_square(15) == 225", "assert area_square(20) == 400", "assert area_square(50) == 2500", "assert area_square(100) == 10000", "assert area_square(123) == 15129", "assert area_square(999) == 998001", "assert area_square(1000) == 1000000", "assert area_square(2147483647) == 4611686014132420609"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side: int) -> int:\n  return 4 * side", "task_id": "234_2eab3a63-8931-4e93-a35e-9cc868a1ebc1", "test_setup_code": "", "test_list": ["assert perimeter_square(1) == 4", "assert perimeter_square(0) == 0", "assert perimeter_square(10) == 40", "assert perimeter_square(100) == 400", "assert perimeter_square(25) == 100", "assert perimeter_square(50) == 200", "assert perimeter_square(7) == 28", "assert perimeter_square(8) == 32", "assert perimeter_square(15) == 60", "assert perimeter_square(20) == 80", "assert perimeter_square(5) == 20", "assert perimeter_square(3) == 12", "assert perimeter_square(2) == 8", "assert perimeter_square(4) == 16", "assert perimeter_square(6) == 24"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(radius: int) -> float:\n  return (4/3) * math.pi * (radius ** 3)", "task_id": "234_7dda50ee-1591-452d-8593-26f1eb17d3a6", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.1887902047863905", "assert volume_sphere(0) == 0.0", "assert volume_sphere(2) == 33.510321638291124", "assert volume_sphere(10) == 4188.790204786391", "assert volume_sphere(5) == 523.5987755982989", "assert volume_sphere(3) == 113.09733552923254", "assert volume_sphere(100) == 4188790.2047863905", "assert volume_sphere(50) == 523598.7755982988", "assert volume_sphere(0.5) == 0.5235987755982988", "assert volume_sphere(0.1) == 0.004188790204786391", "assert volume_sphere(0.01) == 4.188790204786391e-06", "assert volume_sphere(7) == 1436.7550402417319", "assert volume_sphere(15) == 14137.166941154068", "assert volume_sphere(20) == 33510.32163829113", "assert volume_sphere(25) == 65449.84694978735"], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "import math\ndef area_circle(radius: int) -> float:\n  return math.pi * (radius ** 2)", "task_id": "234_4241a19d-f80c-41f4-93a5-bccc96983d59", "test_setup_code": "", "test_list": ["assert area_circle(0) == 0.0", "assert area_circle(1) == 3.141592653589793", "assert area_circle(2) == 12.566370614359172", "assert area_circle(10) == 314.1592653589793", "assert area_circle(100) == 31415.926535897932", "assert area_circle(0.5) == 0.7853981633974483", "assert area_circle(1.5) == 7.0685834705770345", "assert area_circle(3.14) == 30.974846927333925", "assert area_circle(2.718) == 23.213404357363384", "assert area_circle(1000) == 3141592.653589793", "assert area_circle(0.1) == 0.031415926535897934", "assert area_circle(0.01) == 0.0003141592653589793", "assert area_circle(123) == 47529.15525615998", "assert area_circle(50) == 7853.981633974483", "assert area_circle(25) == 1963.4954084936207"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(radius: int, height: int) -> float:\n  return math.pi * (radius ** 2) * height", "task_id": "234_31ac406c-d9ae-4dcf-804c-f4c858e87842", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.141592653589793", "assert volume_cylinder(0, 10) == 0.0", "assert volume_cylinder(5, 0) == 0.0", "assert volume_cylinder(2, 3) == 37.69911184307752", "assert volume_cylinder(10, 10) == 3141.592653589793", "assert volume_cylinder(3, 7) == 197.92033717615698", "assert volume_cylinder(7, 3) == 461.8141200776996", "assert volume_cylinder(100, 1) == 31415.926535897932", "assert volume_cylinder(1, 100) == 314.1592653589793", "assert volume_cylinder(10, 0.5) == 157.07963267948966", "assert volume_cylinder(0.5, 10) == 7.853981633974483", "assert volume_cylinder(1.5, 2.5) == 17.671458676442587", "assert volume_cylinder(2.5, 1.5) == 29.452431257505416", "assert volume_cylinder(3.14159, 2.71828) == 84.28379846823243", "assert volume_cylinder(50, 50) == 392699.0816987241"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length: int, width: int) -> int:\n  return length * width", "task_id": "234_84ec6439-7399-4098-9a3f-055a6add77dc", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(10, 0) == 0", "assert area_rectangle(1, 1) == 1", "assert area_rectangle(100, 200) == 20000", "assert area_rectangle(7, 3) == 21", "assert area_rectangle(6, 6) == 36", "assert area_rectangle(15, 15) == 225", "assert area_rectangle(2, 8) == 16", "assert area_rectangle(9, 9) == 81", "assert area_rectangle(0, 0) == 0", "assert area_rectangle(123, 456) == 56088", "assert area_rectangle(999, 999) == 998001", "assert area_rectangle(1, 1000) == 1000", "assert area_rectangle(1000, 1) == 1000"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: int, width: int) -> int:\n  return 2 * (length + width)", "task_id": "234_ff8abb77-5401-494e-898f-89b1870e9286", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(2, 3) == 10", "assert perimeter_rectangle(5, 5) == 20", "assert perimeter_rectangle(10, 20) == 60", "assert perimeter_rectangle(100, 200) == 600", "assert perimeter_rectangle(1, 0) == 2", "assert perimeter_rectangle(0, 1) == 2", "assert perimeter_rectangle(999, 1) == 2000", "assert perimeter_rectangle(1, 999) == 2000", "assert perimeter_rectangle(123, 456) == 1158", "assert perimeter_rectangle(2147483647, 0) == 4294967294", "assert perimeter_rectangle(0, 2147483647) == 4294967294", "assert perimeter_rectangle(2147483647, 2147483647) == 8589934588", "assert perimeter_rectangle(50, 75) == 250"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(length: int, width: int, height: int) -> int:\n  return length * width * height", "task_id": "234_6d4d3334-dbf4-4624-ab3b-adcf6c685edb", "test_setup_code": "", "test_list": ["assert volume_rectangular_prism(1, 1, 1) == 1", "assert volume_rectangular_prism(2, 3, 4) == 24", "assert volume_rectangular_prism(5, 5, 5) == 125", "assert volume_rectangular_prism(0, 10, 10) == 0", "assert volume_rectangular_prism(10, 0, 10) == 0", "assert volume_rectangular_prism(10, 10, 0) == 0", "assert volume_rectangular_prism(100, 100, 100) == 1000000", "assert volume_rectangular_prism(1, 1000, 1000) == 1000000", "assert volume_rectangular_prism(1000, 1, 1000) == 1000000", "assert volume_rectangular_prism(1000, 1000, 1) == 1000000", "assert volume_rectangular_prism(3, 7, 2) == 42", "assert volume_rectangular_prism(8, 6, 2) == 96", "assert volume_rectangular_prism(7, 7, 7) == 343", "assert volume_rectangular_prism(12, 15, 10) == 1800", "assert volume_rectangular_prism(9, 8, 7) == 504"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(side: int) -> int:\n  return 6 * (side ** 2)", "task_id": "234_b31e9a4c-7f25-4ad8-bb5e-abb5074a6cc4", "test_setup_code": "", "test_list": ["assert surface_area_cube(1) == 6", "assert surface_area_cube(2) == 24", "assert surface_area_cube(3) == 54", "assert surface_area_cube(0) == 0", "assert surface_area_cube(10) == 600", "assert surface_area_cube(5) == 150", "assert surface_area_cube(100) == 60000", "assert surface_area_cube(50) == 15000", "assert surface_area_cube(7) == 294", "assert surface_area_cube(20) == 2400", "assert surface_area_cube(15) == 1350", "assert surface_area_cube(25) == 3750", "assert surface_area_cube(30) == 5400", "assert surface_area_cube(12) == 864", "assert surface_area_cube(8) == 384"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(radius: int) -> float:\n  return 4 * math.pi * (radius ** 2)", "task_id": "234_b31d8682-ee26-4c99-bd3a-53b0f82f35fc", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566370614359172", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2) == 50.26548245743669", "assert surface_area_sphere(10) == 1256.6370614359173", "assert surface_area_sphere(5) == 314.1592653589793", "assert surface_area_sphere(3) == 113.09733552923255", "assert surface_area_sphere(7) == 615.7521601035994", "assert surface_area_sphere(100) == 125663.70614359173", "assert surface_area_sphere(0.5) == 3.141592653589793", "assert surface_area_sphere(0.1) == 0.12566370614359174", "assert surface_area_sphere(50) == 31415.926535897932", "assert surface_area_sphere(20) == 5026.548245743669", "assert surface_area_sphere(0.01) == 0.0012566370614359173", "assert surface_area_sphere(0.001) == 0.000012566370614359172", "assert surface_area_sphere(0.0001) == 0.0000012566370614359173"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of squares that can be formed within a given square grid of size n x n.", "code": "def count_squares(n: int) -> int:\n    return sum((n - i) ** 2 for i in range(n))", "task_id": "236_4fee176d-a78a-4466-b3f4-89e8a0228b0c", "test_setup_code": "", "test_list": ["assert count_squares(1) == 1", "assert count_squares(2) == 5", "assert count_squares(3) == 14", "assert count_squares(4) == 30", "assert count_squares(5) == 55", "assert count_squares(6) == 91", "assert count_squares(7) == 140", "assert count_squares(8) == 204", "assert count_squares(9) == 285", "assert count_squares(10) == 385", "assert count_squares(0) == 0", "assert count_squares(15) == 1240", "assert count_squares(20) == 2870", "assert count_squares(50) == 42925", "assert count_squares(100) == 338350"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of rectangles that can be formed within a given rectangle grid of size n x m.", "code": "def count_rectangles(n: int, m: int) -> int:\n    return (n * (n + 1) * m * (m + 1)) // 4", "task_id": "236_edb81a23-d10e-4552-a2da-8286dd9c0b2e", "test_setup_code": "", "test_list": ["assert count_rectangles(1, 1) == 1", "assert count_rectangles(2, 2) == 9", "assert count_rectangles(3, 3) == 36", "assert count_rectangles(4, 4) == 100", "assert count_rectangles(5, 5) == 225", "assert count_rectangles(1, 5) == 15", "assert count_rectangles(5, 1) == 15", "assert count_rectangles(2, 3) == 18", "assert count_rectangles(3, 2) == 18", "assert count_rectangles(3, 4) == 60", "assert count_rectangles(4, 3) == 60", "assert count_rectangles(0, 0) == 0", "assert count_rectangles(0, 5) == 0", "assert count_rectangles(5, 0) == 0", "assert count_rectangles(10, 10) == 3025"], "challenge_test_list": []}
{"text": "Write a function to count the number of squares that can be formed along the diagonal of a given square grid of size n x n.", "code": "def count_diagonal_squares(n: int) -> int:\n    return n", "task_id": "236_b9865479-8620-432d-a390-e134cf6c0934", "test_setup_code": "", "test_list": ["assert count_diagonal_squares(1) == 1", "assert count_diagonal_squares(2) == 2", "assert count_diagonal_squares(3) == 3", "assert count_diagonal_squares(4) == 4", "assert count_diagonal_squares(5) == 5", "assert count_diagonal_squares(10) == 10", "assert count_diagonal_squares(100) == 100", "assert count_diagonal_squares(0) == 0", "assert count_diagonal_squares(50) == 50", "assert count_diagonal_squares(99) == 99", "assert count_diagonal_squares(1000) == 1000", "assert count_diagonal_squares(500) == 500", "assert count_diagonal_squares(10000) == 10000", "assert count_diagonal_squares(12345) == 12345", "assert count_diagonal_squares(999) == 999"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of L-shaped figures that can be formed within a given square grid of size n x n.", "code": "def count_l_shapes(n: int) -> int:\n    return (n - 1) * (n - 1) * 2", "task_id": "236_56593347-b828-4b1b-bd4d-b6835b7fb4de", "test_setup_code": "", "test_list": ["assert count_l_shapes(1) == 0", "assert count_l_shapes(2) == 2", "assert count_l_shapes(3) == 8", "assert count_l_shapes(4) == 18", "assert count_l_shapes(5) == 32", "assert count_l_shapes(6) == 50", "assert count_l_shapes(7) == 72", "assert count_l_shapes(8) == 98", "assert count_l_shapes(9) == 128", "assert count_l_shapes(10) == 162", "assert count_l_shapes(11) == 200", "assert count_l_shapes(12) == 242", "assert count_l_shapes(13) == 288", "assert count_l_shapes(14) == 338", "assert count_l_shapes(15) == 392"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of right-angled triangles that can be formed within a given square grid of size n x n.", "code": "def count_triangles(n: int) -> int:\n    return (n * (n + 1) * (2 * n + 1)) // 6", "task_id": "236_b86b7b53-82c8-4443-8ae8-235e5c5d2445", "test_setup_code": "", "test_list": ["assert count_triangles(1) == 1", "assert count_triangles(2) == 5", "assert count_triangles(3) == 14", "assert count_triangles(4) == 30", "assert count_triangles(5) == 55", "assert count_triangles(6) == 91", "assert count_triangles(7) == 140", "assert count_triangles(8) == 204", "assert count_triangles(9) == 285", "assert count_triangles(10) == 385", "assert count_triangles(0) == 0", "assert count_triangles(11) == 506", "assert count_triangles(12) == 650", "assert count_triangles(13) == 819", "assert count_triangles(14) == 1015"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of hexagons that can be formed within a given hexagonal grid of size n.", "code": "def count_hexagons(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_e3043ed6-df01-4628-9e4f-a55b36ec648e", "test_setup_code": "", "test_list": ["assert count_hexagons(1) == 0", "assert count_hexagons(2) == 2", "assert count_hexagons(3) == 10", "assert count_hexagons(4) == 28", "assert count_hexagons(5) == 60", "assert count_hexagons(6) == 110", "assert count_hexagons(7) == 182", "assert count_hexagons(8) == 280", "assert count_hexagons(9) == 408", "assert count_hexagons(10) == 570", "assert count_hexagons(0) == 0", "assert count_hexagons(11) == 770", "assert count_hexagons(12) == 1012", "assert count_hexagons(15) == 1890", "assert count_hexagons(20) == 3990"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of pyramids that can be formed within a given square grid of size n x n.", "code": "def count_pyramids(n: int) -> int:\n    return (n * (n + 1) * (2 * n + 1)) // 6", "task_id": "236_7ca77c9b-ff47-4216-990f-c02afedf4c44", "test_setup_code": "", "test_list": ["assert count_pyramids(1) == 1", "assert count_pyramids(2) == 5", "assert count_pyramids(3) == 14", "assert count_pyramids(4) == 30", "assert count_pyramids(5) == 55", "assert count_pyramids(6) == 91", "assert count_pyramids(7) == 140", "assert count_pyramids(8) == 204", "assert count_pyramids(9) == 285", "assert count_pyramids(10) == 385", "assert count_pyramids(0) == 0", "assert count_pyramids(11) == 506", "assert count_pyramids(12) == 650", "assert count_pyramids(13) == 819", "assert count_pyramids(14) == 1015"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of diamond shapes that can be formed within a given square grid of size n x n.", "code": "def count_diamonds(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_1bf04aa6-998c-4f9f-a242-9fe90c43b3a9", "test_setup_code": "", "test_list": ["assert count_diamonds(1) == 0", "assert count_diamonds(2) == 2", "assert count_diamonds(3) == 10", "assert count_diamonds(4) == 28", "assert count_diamonds(5) == 60", "assert count_diamonds(6) == 110", "assert count_diamonds(7) == 182", "assert count_diamonds(8) == 280", "assert count_diamonds(9) == 408", "assert count_diamonds(10) == 570", "assert count_diamonds(0) == 0", "assert count_diamonds(11) == 770", "assert count_diamonds(12) == 1012", "assert count_diamonds(13) == 1300", "assert count_diamonds(14) == 1640"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of octagons that can be formed within a given square grid of size n x n.", "code": "def count_octagons(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_22bdd55c-8d1b-45d5-b5d8-9da11ed2d27e", "test_setup_code": "", "test_list": ["assert count_octagons(1) == 0", "assert count_octagons(2) == 2", "assert count_octagons(3) == 10", "assert count_octagons(4) == 28", "assert count_octagons(5) == 60", "assert count_octagons(6) == 110", "assert count_octagons(7) == 182", "assert count_octagons(8) == 280", "assert count_octagons(9) == 408", "assert count_octagons(10) == 570", "assert count_octagons(0) == 0", "assert count_octagons(11) == 770", "assert count_octagons(12) == 1012", "assert count_octagons(13) == 1300", "assert count_octagons(14) == 1638"], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of parallelograms that can be formed within a given rectangle grid of size n x m.", "code": "def count_parallelograms(n: int, m: int) -> int:\n    return (n * (n + 1) * m * (m + 1)) // 4", "task_id": "236_bb1ccbd1-72ff-493e-8173-91142f310ea3", "test_setup_code": "", "test_list": ["assert count_parallelograms(1, 1) == 1", "assert count_parallelograms(2, 2) == 9", "assert count_parallelograms(3, 3) == 36", "assert count_parallelograms(4, 4) == 100", "assert count_parallelograms(5, 5) == 225", "assert count_parallelograms(1, 2) == 3", "assert count_parallelograms(2, 1) == 3", "assert count_parallelograms(2, 3) == 18", "assert count_parallelograms(3, 2) == 18", "assert count_parallelograms(10, 10) == 3025", "assert count_parallelograms(0, 0) == 0", "assert count_parallelograms(1, 0) == 0", "assert count_parallelograms(0, 1) == 0", "assert count_parallelograms(100, 100) == 25502500", "assert count_parallelograms(50, 75) == 11400125"], "challenge_test_list": []}
{"text": "Write a python function to set all odd bits of a given number.", "code": "def odd_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 0): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res)", "task_id": "235_d3885811-2ff7-422d-94a7-25bf57f3325d", "test_setup_code": "", "test_list": ["assert odd_bit_set_number(0) == 1", "assert odd_bit_set_number(1) == 1", "assert odd_bit_set_number(2) == 3", "assert odd_bit_set_number(3) == 3", "assert odd_bit_set_number(4) == 5", "assert odd_bit_set_number(5) == 5", "assert odd_bit_set_number(8) == 13", "assert odd_bit_set_number(15) == 15", "assert odd_bit_set_number(16) == 21", "assert odd_bit_set_number(31) == 31", "assert odd_bit_set_number(32) == 37", "assert odd_bit_set_number(64) == 85", "assert odd_bit_set_number(127) == 127", "assert odd_bit_set_number(128) == 149", "assert odd_bit_set_number(255) == 255"], "challenge_test_list": []}
{"text": "Write a python function to clear all even bits of a given number.", "code": "def clear_even_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n & res)", "task_id": "235_9c563d17-e5a8-40a3-9b83-a7660acc8a26", "test_setup_code": "", "test_list": ["assert clear_even_bits(0) == 0", "assert clear_even_bits(1) == 1", "assert clear_even_bits(2) == 0", "assert clear_even_bits(3) == 1", "assert clear_even_bits(4) == 0", "assert clear_even_bits(5) == 1", "assert clear_even_bits(10) == 0", "assert clear_even_bits(15) == 5", "assert clear_even_bits(16) == 0", "assert clear_even_bits(31) == 5", "assert clear_even_bits(32) == 0", "assert clear_even_bits(63) == 21", "assert clear_even_bits(64) == 0", "assert clear_even_bits(127) == 85", "assert clear_even_bits(255) == 85"], "challenge_test_list": []}
{"text": "Write a python function to clear all odd bits of a given number.", "code": "def clear_odd_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n & ~res)", "task_id": "235_5a5c4d2a-bf8e-46f6-9955-29214525b8d9", "test_setup_code": "", "test_list": ["assert clear_odd_bits(0) == 0", "assert clear_odd_bits(1) == 0", "assert clear_odd_bits(2) == 2", "assert clear_odd_bits(3) == 2", "assert clear_odd_bits(4) == 4", "assert clear_odd_bits(5) == 4", "assert clear_odd_bits(10) == 10", "assert clear_odd_bits(15) == 10", "assert clear_odd_bits(255) == 170", "assert clear_odd_bits(1023) == 682", "assert clear_odd_bits(1024) == 1024", "assert clear_odd_bits(2047) == 1364", "assert clear_odd_bits(4095) == 2730", "assert clear_odd_bits(65535) == 43690", "assert clear_odd_bits(1048575) == 699050"], "challenge_test_list": []}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def toggle_even_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n ^ res)", "task_id": "235_a7a9a476-7b7e-4587-8be0-0396535eefa7", "test_setup_code": "", "test_list": ["assert toggle_even_bits(0) == 0", "assert toggle_even_bits(1) == 1", "assert toggle_even_bits(2) == 0", "assert toggle_even_bits(3) == 1", "assert toggle_even_bits(4) == 6", "assert toggle_even_bits(5) == 7", "assert toggle_even_bits(10) == 8", "assert toggle_even_bits(15) == 9", "assert toggle_even_bits(16) == 18", "assert toggle_even_bits(31) == 23", "assert toggle_even_bits(32) == 34", "assert toggle_even_bits(63) == 47", "assert toggle_even_bits(64) == 66", "assert toggle_even_bits(127) == 95", "assert toggle_even_bits(255) == 191"], "challenge_test_list": []}
{"text": "Write a python function to toggle all odd bits of a given number.", "code": "def toggle_odd_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 0): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n ^ res)", "task_id": "235_160675de-45f1-4631-995e-65cdf649aa5e", "test_setup_code": "", "test_list": ["assert toggle_odd_bits(0) == 1", "assert toggle_odd_bits(1) == 0", "assert toggle_odd_bits(2) == 3", "assert toggle_odd_bits(3) == 2", "assert toggle_odd_bits(4) == 5", "assert toggle_odd_bits(5) == 4", "assert toggle_odd_bits(10) == 11", "assert toggle_odd_bits(15) == 14", "assert toggle_odd_bits(16) == 17", "assert toggle_odd_bits(31) == 30", "assert toggle_odd_bits(32) == 33", "assert toggle_odd_bits(63) == 62", "assert toggle_odd_bits(64) == 65", "assert toggle_odd_bits(127) == 126", "assert toggle_odd_bits(128) == 129"], "challenge_test_list": []}
{"text": "Write a python function to set all bits in a given range [start, end] of a number.", "code": "def set_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n |= (1 << i) \n    return n", "task_id": "235_82218a56-1fb9-45c7-97ff-d2eb6c824580", "test_setup_code": "", "test_list": ["assert set_bits_in_range(0, 0, 0) == 1", "assert set_bits_in_range(0, 1, 1) == 2", "assert set_bits_in_range(0, 0, 1) == 3", "assert set_bits_in_range(0, 0, 2) == 7", "assert set_bits_in_range(1, 1, 1) == 3", "assert set_bits_in_range(1, 0, 2) == 7", "assert set_bits_in_range(5, 1, 3) == 15", "assert set_bits_in_range(8, 0, 3) == 15", "assert set_bits_in_range(15, 2, 4) == 31", "assert set_bits_in_range(1024, 0, 10) == 2047", "assert set_bits_in_range(0, 5, 5) == 32", "assert set_bits_in_range(255, 8, 10) == 1791", "assert set_bits_in_range(1023, 5, 9) == 2047", "assert set_bits_in_range(0, 31, 31) == 2147483648", "assert set_bits_in_range(2147483647, 30, 31) == 4294967295"], "challenge_test_list": []}
{"text": "Write a python function to clear all bits in a given range [start, end] of a number.", "code": "def clear_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n &= ~(1 << i) \n    return n", "task_id": "235_3d9396d0-1bf5-4093-bef6-2a685354a6c7", "test_setup_code": "", "test_list": ["assert clear_bits_in_range(15, 1, 3) == 1", "assert clear_bits_in_range(31, 0, 4) == 0", "assert clear_bits_in_range(255, 4, 7) == 15", "assert clear_bits_in_range(1023, 5, 9) == 31", "assert clear_bits_in_range(0, 0, 0) == 0", "assert clear_bits_in_range(1, 0, 0) == 0", "assert clear_bits_in_range(2, 1, 1) == 0", "assert clear_bits_in_range(3, 0, 1) == 0", "assert clear_bits_in_range(255, 0, 7) == 0", "assert clear_bits_in_range(255, 0, 0) == 254", "assert clear_bits_in_range(255, 7, 7) == 127", "assert clear_bits_in_range(255, 1, 6) == 129", "assert clear_bits_in_range(1023, 0, 9) == 0", "assert clear_bits_in_range(1023, 3, 6) == 959", "assert clear_bits_in_range(1023, 2, 5) == 959"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits in a given range [start, end] of a number.", "code": "def toggle_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n ^= (1 << i) \n    return n", "task_id": "235_78deda5a-e153-4bd5-87c9-8140cf7c504d", "test_setup_code": "", "test_list": ["assert toggle_bits_in_range(0b1010, 1, 2) == 0b1110", "assert toggle_bits_in_range(0b1111, 0, 3) == 0b0000", "assert toggle_bits_in_range(0b0000, 0, 3) == 0b1111", "assert toggle_bits_in_range(0b1001, 0, 0) == 0b1000", "assert toggle_bits_in_range(0b1001, 3, 3) == 0b0001", "assert toggle_bits_in_range(0b1110, 1, 2) == 0b1010", "assert toggle_bits_in_range(0b101010, 1, 4) == 0b110100", "assert toggle_bits_in_range(0b110011, 0, 5) == 0b001100", "assert toggle_bits_in_range(0b11110000, 4, 7) == 0b00001111", "assert toggle_bits_in_range(0b10000001, 0, 7) == 0b01111110", "assert toggle_bits_in_range(0b11111111, 2, 5) == 0b11000011", "assert toggle_bits_in_range(0b10101010, 0, 7) == 0b01010101", "assert toggle_bits_in_range(0b10000000, 0, 0) == 0b10000001", "assert toggle_bits_in_range(0b10000000, 7, 7) == 0b00000000", "assert toggle_bits_in_range(0b0, 0, 31) == 0b11111111111111111111111111111111"], "challenge_test_list": []}
{"text": "Write a python function to set the nth bit of a given number.", "code": "def set_nth_bit(n, k): \n    return n | (1 << k)", "task_id": "235_e8e88f6a-6c8f-4497-b023-99cedf33ada8", "test_setup_code": "", "test_list": ["assert set_nth_bit(0, 0) == 1", "assert set_nth_bit(0, 1) == 2", "assert set_nth_bit(0, 2) == 4", "assert set_nth_bit(1, 0) == 1", "assert set_nth_bit(1, 1) == 3", "assert set_nth_bit(1, 2) == 5", "assert set_nth_bit(2, 0) == 3", "assert set_nth_bit(2, 1) == 2", "assert set_nth_bit(2, 2) == 6", "assert set_nth_bit(255, 0) == 255", "assert set_nth_bit(255, 1) == 255", "assert set_nth_bit(255, 8) == 511", "assert set_nth_bit(1024, 10) == 1024", "assert set_nth_bit(1024, 0) == 1025", "assert set_nth_bit(1024, 5) == 1056"], "challenge_test_list": []}
{"text": "Write a python function to clear the nth bit of a given number.", "code": "def clear_nth_bit(n, k): \n    return n & ~(1 << k)", "task_id": "235_3aec09eb-9e58-4634-93f2-cd373d0d659a", "test_setup_code": "", "test_list": ["assert clear_nth_bit(5, 0) == 4", "assert clear_nth_bit(5, 1) == 5", "assert clear_nth_bit(5, 2) == 1", "assert clear_nth_bit(8, 3) == 0", "assert clear_nth_bit(15, 0) == 14", "assert clear_nth_bit(15, 1) == 13", "assert clear_nth_bit(15, 2) == 11", "assert clear_nth_bit(15, 3) == 7", "assert clear_nth_bit(0, 0) == 0", "assert clear_nth_bit(1, 0) == 0", "assert clear_nth_bit(2, 1) == 0", "assert clear_nth_bit(255, 7) == 127", "assert clear_nth_bit(1024, 10) == 0", "assert clear_nth_bit(1023, 9) == 511", "assert clear_nth_bit(1023, 0) == 1022"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a list of tuples.", "code": "def find_unique_elements(lst):\n    unique_elements = set()\n    for tup in lst:\n        unique_elements.update(tup)\n    return list(unique_elements)", "task_id": "237_97ea176d-7c0d-4d24-beeb-08838f77ec92", "test_setup_code": "", "test_list": ["assert find_unique_elements([(1, 2), (3, 4), (1, 4)]) == [1, 2, 3, 4]", "assert find_unique_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_unique_elements([(1,), (2,), (3,), (4,)]) == [1, 2, 3, 4]", "assert find_unique_elements([(1, 1), (2, 2), (3, 3)]) == [1, 2, 3]", "assert find_unique_elements([(1, 2), (2, 3), (3, 4), (4, 5)]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == [1, 2, 3]", "assert find_unique_elements([]) == []", "assert find_unique_elements([(1, 2), (2, 3), (3, 4), (4, 1)]) == [1, 2, 3, 4]", "assert find_unique_elements([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert find_unique_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert find_unique_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert find_unique_elements([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert find_unique_elements([(1,), (2,), (3,), (4,), (5,)]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]", "assert find_unique_elements([(1, 2, 3), (3, 4, 5), (5, 6, 7), (7, 8, 9)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of each element in a list of tuples.", "code": "from collections import Counter\n\ndef count_element_occurrences(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return dict(Counter(flat_list))", "task_id": "237_407934f9-9c13-4308-9af7-265fa981e60f", "test_setup_code": "", "test_list": ["assert count_element_occurrences([(1, 2), (2, 3), (3, 4)]) == {1: 1, 2: 2, 3: 2, 4: 1}", "assert count_element_occurrences([(1, 1), (1, 1), (1, 1)]) == {1: 6}", "assert count_element_occurrences([(1, 2), (2, 2), (2, 3)]) == {1: 1, 2: 4, 3: 1}", "assert count_element_occurrences([(1,), (2,), (3,)]) == {1: 1, 2: 1, 3: 1}", "assert count_element_occurrences([]) == {}", "assert count_element_occurrences([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1}", "assert count_element_occurrences([(1, 2), (1, 2), (1, 2)]) == {1: 3, 2: 3}", "assert count_element_occurrences([(1, 2, 2), (3, 3, 3), (4, 4, 4)]) == {1: 1, 2: 2, 3: 3, 4: 3}", "assert count_element_occurrences([(1, 2), (3, 4), (5, 6)]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1}", "assert count_element_occurrences([(0, 0), (0, 0), (0, 0)]) == {0: 6}", "assert count_element_occurrences([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == {1: 3, 2: 3, 3: 3}", "assert count_element_occurrences([(1, 2), (2, 3), (3, 1)]) == {1: 2, 2: 2, 3: 2}", "assert count_element_occurrences([(1, 2), (3, 4), (5, 6), (1, 2)]) == {1: 2, 2: 2, 3: 1, 4: 1, 5: 1, 6: 1}", "assert count_element_occurrences([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}", "assert count_element_occurrences([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == {1: 3, 2: 3, 3: 3}"], "challenge_test_list": []}
{"text": "Write a function to find common elements across all tuples in a list.", "code": "def find_common_elements(lst):\n    if not lst:\n        return set()\n    common_elements = set(lst[0])\n    for tup in lst[1:]:\n        common_elements.intersection_update(tup)\n    return common_elements", "task_id": "237_1b55fa6f-53fc-43bf-88af-549ef96aaa31", "test_setup_code": "", "test_list": ["assert find_common_elements([(1, 2, 3), (2, 3, 4), (2, 5, 6)]) == {2, 3}", "assert find_common_elements([(1, 2), (2, 3), (4, 5)]) == set()", "assert find_common_elements([(1, 2, 3), (1, 2, 3), (1, 2, 3)]) == {1, 2, 3}", "assert find_common_elements([(1,), (1,), (1,)]) == {1}", "assert find_common_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == set()", "assert find_common_elements([(1, 2, 3), (2, 3, 4), (3, 4, 5)]) == {3}", "assert find_common_elements([(1, 2), (2, 3), (2, 4)]) == {2}", "assert find_common_elements([(1, 2, 3, 4), (2, 3, 4, 5), (3, 4, 5, 6)]) == {3, 4}", "assert find_common_elements([(1, 2, 3), (1, 2, 4), (1, 2, 5)]) == {1, 2}", "assert find_common_elements([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 5)]) == {1, 2, 3}", "assert find_common_elements([(1, 2, 3), (1, 2, 3, 4), (1, 2, 5, 6)]) == {1, 2}", "assert find_common_elements([]) == set()", "assert find_common_elements([(1, 2, 3)]) == {1, 2, 3}", "assert find_common_elements([(1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]) == {1, 2, 3}", "assert find_common_elements([(1, 2, 3), (2, 3, 4), (3, 4, 5), (4, 5, 6)]) == set()"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of elements in each tuple in a list of tuples.", "code": "def sum_of_tuples(lst):\n    return [sum(tup) for tup in lst]", "task_id": "237_30320c57-d107-46ef-8a95-7bccf156a65e", "test_setup_code": "", "test_list": ["assert sum_of_tuples([(1, 2, 3), (4, 5, 6)]) == [6, 15]", "assert sum_of_tuples([(10, 20), (30, 40), (50, 60)]) == [30, 70, 110]", "assert sum_of_tuples([(1,), (2,), (3,)]) == [1, 2, 3]", "assert sum_of_tuples([]) == []", "assert sum_of_tuples([(0, 0, 0), (0, 0, 0)]) == [0, 0]", "assert sum_of_tuples([(-1, -2), (-3, -4)]) == [-3, -7]", "assert sum_of_tuples([(1, -1), (2, -2)]) == [0, 0]", "assert sum_of_tuples([(1.5, 2.5), (3.5, 4.5)]) == [4.0, 8.0]", "assert sum_of_tuples([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == [15, 40]", "assert sum_of_tuples([(999, 1)]) == [1000]", "assert sum_of_tuples([(0,)]) == [0]", "assert sum_of_tuples([(0, 0), (1, 1), (2, 2)]) == [0, 2, 4]", "assert sum_of_tuples([(-10, 10), (20, -20), (30, -30)]) == [0, 0, 0]", "assert sum_of_tuples([(2**10, 2**5), (2**8, 2**3)]) == [1056, 264]", "assert sum_of_tuples([(0.1, 0.2, 0.3), (0.4, 0.5, 0.6)]) == [0.6000000000000001, 1.5]"], "challenge_test_list": []}
{"text": "Write a function to filter out tuples in a list that have a length less than a given value.", "code": "def filter_tuples_by_length(lst, length):\n    return [tup for tup in lst if len(tup) >= length]", "task_id": "237_5d66e292-c014-4fb9-83e2-fbaf212bea39", "test_setup_code": "", "test_list": ["assert filter_tuples_by_length([(1, 2), (3, 4, 5), (6,)], 2) == [(1, 2), (3, 4, 5)]", "assert filter_tuples_by_length([(1, 2, 3), (4, 5), (6, 7, 8, 9)], 3) == [(1, 2, 3), (6, 7, 8, 9)]", "assert filter_tuples_by_length([(1,), (2,), (3,)], 1) == [(1,), (2,), (3,)]", "assert filter_tuples_by_length([(1,), (2, 3), (4, 5, 6)], 4) == []", "assert filter_tuples_by_length([], 2) == []", "assert filter_tuples_by_length([(1, 2, 3), (4, 5, 6)], 2) == [(1, 2, 3), (4, 5, 6)]", "assert filter_tuples_by_length([(1, 2), (3, 4), (5, 6)], 3) == []", "assert filter_tuples_by_length([(1, 2), (3, 4, 5)], 1) == [(1, 2), (3, 4, 5)]", "assert filter_tuples_by_length([(1, 2), (3, 4, 5), (6, 7, 8, 9)], 3) == [(3, 4, 5), (6, 7, 8, 9)]", "assert filter_tuples_by_length([(1, 2, 3), (4,)], 2) == [(1, 2, 3)]", "assert filter_tuples_by_length([(1, 2, 3), (4, 5, 6), (7, 8)], 3) == [(1, 2, 3), (4, 5, 6)]", "assert filter_tuples_by_length([(1, 2), (3, 4), (5, 6)], 0) == [(1, 2), (3, 4), (5, 6)]", "assert filter_tuples_by_length([(1,), (2,), (3,)], 2) == []", "assert filter_tuples_by_length([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3), (4, 5, 6), (7, 8, 9)]", "assert filter_tuples_by_length([(1, 2, 3, 4), (5, 6)], 4) == [(1, 2, 3, 4)]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples by the sum of their elements.", "code": "def sort_tuples_by_sum(lst):\n    return sorted(lst, key=sum)", "task_id": "237_75f8d448-2b91-4b66-96ea-cd211b576728", "test_setup_code": "", "test_list": ["assert sort_tuples_by_sum([(1, 2), (3, 4), (5, 0)]) == [(1, 2), (3, 4), (5, 0)]", "assert sort_tuples_by_sum([(5, 2), (1, 3), (4, 1)]) == [(1, 3), (4, 1), (5, 2)]", "assert sort_tuples_by_sum([]) == []", "assert sort_tuples_by_sum([(1, 1)]) == [(1, 1)]", "assert sort_tuples_by_sum([(10, 20), (5, 5), (1, 29)]) == [(5, 5), (1, 29), (10, 20)]", "assert sort_tuples_by_sum([(0, 0), (0, 0), (0, 0)]) == [(0, 0), (0, 0), (0, 0)]", "assert sort_tuples_by_sum([(-1, 5), (2, 1), (0, 0)]) == [(0, 0), (2, 1), (-1, 5)]", "assert sort_tuples_by_sum([(1, 2, 3), (4, 5), (1,)]) == [(1,), (1, 2, 3), (4, 5)]", "assert sort_tuples_by_sum([(10,), (5, 2), (3, 3, 1)]) == [(10,), (5, 2), (3, 3, 1)]", "assert sort_tuples_by_sum([(-5, -3), (-1, -2), (-10, 5)]) == [(-5, -3), (-10, 5), (-1, -2)]", "assert sort_tuples_by_sum([(1.5, 2.5), (0.5, 3.0), (2.0, 2.0)]) == [(0.5, 3.0), (2.0, 2.0), (1.5, 2.5)]", "assert sort_tuples_by_sum([(100, -100), (50, -50), (25, -25)]) == [(100, -100), (50, -50), (25, -25)]", "assert sort_tuples_by_sum([(1, 1, 1, 1, 1), (0, 5), (2, 3)]) == [(0, 5), (2, 3), (1, 1, 1, 1, 1)]", "assert sort_tuples_by_sum([(9, 9, 9), (9, 9), (9,)]) == [(9,), (9, 9), (9, 9, 9)]", "assert sort_tuples_by_sum([(0,), (0, 0), (0, 0, 0)]) == [(0,), (0, 0), (0, 0, 0)]"], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of each tuple in a list of tuples.", "code": "def reverse_each_tuple(lst):\n    return [tup[::-1] for tup in lst]", "task_id": "237_b4581b88-92dd-4fc9-b0ba-fb9513709168", "test_setup_code": "", "test_list": ["assert reverse_each_tuple([(1, 2), (3, 4), (5, 6)]) == [(2, 1), (4, 3), (6, 5)]", "assert reverse_each_tuple([(7, 8, 9), (10, 11, 12)]) == [(9, 8, 7), (12, 11, 10)]", "assert reverse_each_tuple([(1,)]) == [(1,)]", "assert reverse_each_tuple([]) == []", "assert reverse_each_tuple([(1, 2, 3, 4), (5, 6, 7, 8)]) == [(4, 3, 2, 1), (8, 7, 6, 5)]", "assert reverse_each_tuple([(0, 0), (0, 0)]) == [(0, 0), (0, 0)]", "assert reverse_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(3, 2, 1), (6, 5, 4), (9, 8, 7)]", "assert reverse_each_tuple([(1, -1), (-2, 2)]) == [(-1, 1), (2, -2)]", "assert reverse_each_tuple([(1.1, 2.2), (3.3, 4.4)]) == [(2.2, 1.1), (4.4, 3.3)]", "assert reverse_each_tuple([(1, 'a'), ('b', 2)]) == [('a', 1), (2, 'b')]", "assert reverse_each_tuple([(None, 1), (2, None)]) == [(1, None), (None, 2)]", "assert reverse_each_tuple([(True, False), (False, True)]) == [(False, True), (True, False)]", "assert reverse_each_tuple([(1, 2, 3, 4, 5)]) == [(5, 4, 3, 2, 1)]", "assert reverse_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(2, 1), (4, 3), (6, 5), (8, 7)]", "assert reverse_each_tuple([(1, 2, 3), (4,), (5, 6)]) == [(3, 2, 1), (4,), (6, 5)]"], "challenge_test_list": []}
{"text": "Write a function to flatten a list of tuples into a single list.", "code": "def flatten_list_of_tuples(lst):\n    return [item for tup in lst for item in tup]", "task_id": "237_351043d4-a646-4ce5-bf9e-4769a76ff7ad", "test_setup_code": "", "test_list": ["assert flatten_list_of_tuples([(1, 2), (3, 4), (5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_tuples([(1,), (2,), (3,)]) == [1, 2, 3]", "assert flatten_list_of_tuples([(1, 2, 3), (4, 5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_tuples([]) == []", "assert flatten_list_of_tuples([(1, 2), (3, 4), ()]) == [1, 2, 3, 4]", "assert flatten_list_of_tuples([(), (), ()]) == []", "assert flatten_list_of_tuples([(1, 2, 3), (4,), (5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list_of_tuples([(1, 2), (3, 4), (5, 6, 7, 8)]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list_of_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list_of_tuples([(1, 2), (3, 4), (5, 6), (7,)]) == [1, 2, 3, 4, 5, 6, 7]", "assert flatten_list_of_tuples([(1, 2, 3, 4), (5, 6, 7, 8)]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list_of_tuples([(1, 2), (3, 4, 5, 6), (7, 8)]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert flatten_list_of_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert flatten_list_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert flatten_list_of_tuples([(1,), (2,), (3,), (4,), (5,)]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in each tuple in a list of tuples.", "code": "def find_max_in_each_tuple(lst):\n    return [max(tup) for tup in lst]", "task_id": "237_9a47241f-6a5f-46f1-80ae-1a8ed630e47d", "test_setup_code": "", "test_list": ["assert find_max_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]", "assert find_max_in_each_tuple([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]", "assert find_max_in_each_tuple([(1,), (2,), (3,)]) == [1, 2, 3]", "assert find_max_in_each_tuple([(-1, -2, -3), (-4, -5, -6), (-7, -8, -9)]) == [-1, -4, -7]", "assert find_max_in_each_tuple([(0, 0, 0), (0, 0, 0), (0, 0, 0)]) == [0, 0, 0]", "assert find_max_in_each_tuple([(1, 2, 3), (3, 2, 1), (2, 3, 1)]) == [3, 3, 3]", "assert find_max_in_each_tuple([(100, 200, 300), (400, 500, 600), (700, 800, 900)]) == [300, 600, 900]", "assert find_max_in_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [2, 4, 6, 8]", "assert find_max_in_each_tuple([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == [1, 2, 3]", "assert find_max_in_each_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [4, 8, 12]", "assert find_max_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == [3, 6, 9, 12]", "assert find_max_in_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [2, 4, 6, 8, 10]", "assert find_max_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15)]) == [3, 6, 9, 12, 15]", "assert find_max_in_each_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == [5, 10]", "assert find_max_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12), (13, 14, 15), (16, 17, 18)]) == [3, 6, 9, 12, 15, 18]"], "challenge_test_list": []}
{"text": "Write a function to concatenate all tuples in a list into a single tuple.", "code": "def concatenate_tuples(lst):\n    result = ()\n    for tup in lst:\n        result += tup\n    return result", "task_id": "237_75b3e2c8-b31d-4dae-8684-c5ae9fbb0c62", "test_setup_code": "", "test_list": ["assert concatenate_tuples([]) == ()", "assert concatenate_tuples([(1, 2), (3, 4)]) == (1, 2, 3, 4)", "assert concatenate_tuples([(1,), (2,), (3,)]) == (1, 2, 3)", "assert concatenate_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9)", "assert concatenate_tuples([(1, 2), (), (3, 4)]) == (1, 2, 3, 4)", "assert concatenate_tuples([(), (), ()]) == ()", "assert concatenate_tuples([(1, 2), (3,), (4, 5, 6)]) == (1, 2, 3, 4, 5, 6)", "assert concatenate_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]) == (1, 2, 3, 4, 5, 6, 7, 8)", "assert concatenate_tuples([(1, 2), (3, 4), (5, 6), ()]) == (1, 2, 3, 4, 5, 6)", "assert concatenate_tuples([(1,), (2,), (3,), (4,)]) == (1, 2, 3, 4)", "assert concatenate_tuples([(1, 2, 3, 4), (5, 6, 7, 8)]) == (1, 2, 3, 4, 5, 6, 7, 8)", "assert concatenate_tuples([(1,), (2, 3), (4, 5, 6)]) == (1, 2, 3, 4, 5, 6)", "assert concatenate_tuples([(1, 2, 3), (4,), (5, 6)]) == (1, 2, 3, 4, 5, 6)", "assert concatenate_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)", "assert concatenate_tuples([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), ()]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "238_d2ebc05e-2f2f-49ed-b2ee-8d43a0cbb617", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('aeiou') == 5", "assert count_vowels('AEIOU') == 5", "assert count_vowels('AeIoU') == 5", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('BCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python Programming') == 4", "assert count_vowels('aAeEiIoOuU') == 10", "assert count_vowels('12345!@#$%') == 0", "assert count_vowels('a e i o u') == 5", "assert count_vowels('Rhythm') == 0", "assert count_vowels('aeiouAEIOU12345') == 10"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "238_7d1a1cc3-8fd9-4d4b-a063-79631cac5fb3", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('The quick brown fox jumps over the lazy dog') == 'god yzal eht revo spmuj xof nworb kciuq ehT'", "assert reverse_string('1234567890') == '0987654321'", "assert reverse_string(' ') == ' '", "assert reverse_string('Palindrome') == 'emordnilaP'", "assert reverse_string('Was it a car or a cat I saw') == 'was I tac a ro rac a ti saW'", "assert reverse_string('No lemon, no melon') == 'nolem on ,nomel oN'"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "238_f0b0edb7-c854-4c5a-95f1-db16116aab49", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('raceecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "238_170f36ba-1001-4f8e-bc2d-08bb429ecd81", "test_setup_code": "", "test_list": ["assert count_words('Hello world') == 2", "assert count_words('') == 0", "assert count_words('One') == 1", "assert count_words('This is a test string') == 5", "assert count_words('   Leading and trailing spaces   ') == 4", "assert count_words('Multiple   spaces   between   words') == 4", "assert count_words('Punctuation, should not affect: count!') == 5", "assert count_words('New\nline\ncharacters\nshould\nbe\ncounted\nas\nspaces') == 8", "assert count_words('Tabs\tshould\talso\tbe\tcounted\tas\tspaces') == 7", "assert count_words('Mix of spaces, tabs\tand\nnewlines') == 6", "assert count_words('123 456 789') == 3", "assert count_words('Special characters #$%^&* should be counted as part of words') == 10", "assert count_words('SingleWord') == 1", "assert count_words('Hyphenated-words should be counted as separate words') == 6", "assert count_words('Words with numbers like word1 and word2 should be counted correctly') == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s: str) -> str:\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return ''", "task_id": "238_e699144c-a3f3-445e-b661-53cdcd8c1bfd", "test_setup_code": "", "test_list": ["assert first_non_repeating_char('aabbccddeeffg') == 'g'", "assert first_non_repeating_char('') == ''", "assert first_non_repeating_char('aabbcc') == ''", "assert first_non_repeating_char('abacabad') == 'c'"], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "238_2aac52b4-0358-4f5a-96d6-4ab9832df38f", "test_setup_code": "", "test_list": ["assert remove_duplicates('aabbcc') == 'abc'", "assert remove_duplicates('abcabc') == 'abc'", "assert remove_duplicates('') == ''", "assert remove_duplicates('a') == 'a'", "assert remove_duplicates('aa') == 'a'", "assert remove_duplicates('ab') == 'ab'", "assert remove_duplicates('aabbccddeeff') == 'abcdef'", "assert remove_duplicates('abcde') == 'abcde'", "assert remove_duplicates('aabbccddeeffgghhii') == 'abcdefghi'", "assert remove_duplicates('1122334455') == '12345'", "assert remove_duplicates('!@#!!@@##$$') == '!@#$'", "assert remove_duplicates('The quick brown fox jumps over the lazy dog') == 'The quickbrownfxjmpsvlazydg'", "assert remove_duplicates('AaBbCc') == 'AaBbCc'", "assert remove_duplicates('aAaAaA') == 'aA'", "assert remove_duplicates('12345678901234567890') == '1234567890'"], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "238_0881054f-2f43-477d-819a-770a97a5dfab", "test_setup_code": "", "test_list": ["assert longest_word('The quick brown fox jumps over the lazy dog') == 'jumps'", "assert longest_word('Hello world') == 'Hello'", "assert longest_word('A journey of a thousand miles begins with a single step') == 'thousand'", "assert longest_word('To be or not to be that is the question') == 'question'", "assert longest_word('') == ''", "assert longest_word('a') == 'a'", "assert longest_word('ab abc abcd abcde') == 'abcde'", "assert longest_word('Python is awesome') == 'awesome'", "assert longest_word('One two three four five six seven eight nine ten') == 'three'", "assert longest_word('Supercalifragilisticexpialidocious') == 'Supercalifragilisticexpialidocious'", "assert longest_word('short longest shorter') == 'longest'", "assert longest_word('equal equal equal') == 'equal'", "assert longest_word('Mix of UPPER and lower CASE') == 'upper'", "assert longest_word('123 1234 12345 123456') == '123456'", "assert longest_word('Special characters !@# $%^ &*()') == 'characters'"], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "238_e1d08c8b-c72a-4179-9729-58c66ad97383", "test_setup_code": "", "test_list": ["assert capitalize_words('hello world') == 'Hello World'", "assert capitalize_words('this is a test') == 'This Is A Test'", "assert capitalize_words('capitalize every first letter') == 'Capitalize Every First Letter'", "assert capitalize_words('python is great') == 'Python Is Great'", "assert capitalize_words('') == ''", "assert capitalize_words('a') == 'A'", "assert capitalize_words('a b c') == 'A B C'", "assert capitalize_words('multiple   spaces') == 'Multiple   Spaces'", "assert capitalize_words('  leading and trailing spaces  ') == '  Leading And Trailing Spaces  '", "assert capitalize_words('123 numbers') == '123 Numbers'", "assert capitalize_words('special characters !@#') == 'Special Characters !@#'", "assert capitalize_words('MiXeD CaSe') == 'Mixed Case'", "assert capitalize_words('ALL CAPS') == 'All Caps'", "assert capitalize_words('camelCase') == 'Camelcase'", "assert capitalize_words('hyphenated-words should be capitalized') == 'Hyphenated-words Should Be Capitalized'"], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)", "task_id": "238_eced4aae-9ba7-4ca9-a380-cc810488b083", "test_setup_code": "", "test_list": ["assert count_consonants('hello') == 3", "assert count_consonants('world') == 4", "assert count_consonants('aeiou') == 0", "assert count_consonants('AEIOU') == 0", "assert count_consonants('Python') == 5", "assert count_consonants('') == 0", "assert count_consonants('12345') == 0", "assert count_consonants('bcdfghjklmnpqrstvwxyz') == 21", "assert count_consonants('BCDFGHJKLMNPQRSTVWXYZ') == 21", "assert count_consonants('The quick brown fox jumps over the lazy dog') == 24", "assert count_consonants('Sphinx of black quartz, judge my vow') == 23", "assert count_consonants('Pack my box with five dozen liquor jugs') == 27", "assert count_consonants('How razorback-jumping frogs can level six piqued gymnasts!') == 36", "assert count_consonants('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz') == 42", "assert count_consonants('!@#$%^&*()_+') == 0"], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "238_33f8d1e6-3729-45f3-a7ad-4ca2bf1caa51", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('aabbcc', 'abcabc') == True"], "challenge_test_list": []}
{"text": "Write a function to replace the first element of the list with another list.", "code": "def replace_first_element(list1, list2):\n    list1[:1] = list2\n    return list1", "task_id": "240_d659810e-1fae-4699-b346-aa26043e8580", "test_setup_code": "", "test_list": ["assert replace_first_element([1, 2, 3], [4, 5]) == [4, 5, 2, 3]", "assert replace_first_element([1, 2, 3], []) == [2, 3]", "assert replace_first_element([], [4, 5]) == [4, 5]", "assert replace_first_element([1], [2, 3, 4]) == [2, 3, 4]", "assert replace_first_element([1, 2, 3], [4]) == [4, 2, 3]", "assert replace_first_element([1, 2, 3], [1, 2, 3]) == [1, 2, 3, 2, 3]", "assert replace_first_element([1, 2, 3], [0]) == [0, 2, 3]", "assert replace_first_element([1, 2, 3], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 2, 3]", "assert replace_first_element([1, 2, 3], [1]) == [1, 2, 3]", "assert replace_first_element([1, 2, 3], [2]) == [2, 2, 3]", "assert replace_first_element([1, 2, 3], [3]) == [3, 2, 3]", "assert replace_first_element([1, 2, 3], [4, 5, 6]) == [4, 5, 6, 2, 3]", "assert replace_first_element([1, 2, 3], [7, 8, 9]) == [7, 8, 9, 2, 3]", "assert replace_first_element([1, 2, 3], [10, 11]) == [10, 11, 2, 3]", "assert replace_first_element([1, 2, 3], [12, 13, 14, 15]) == [12, 13, 14, 15, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to replace the middle element of the list with another list. If the list has an even number of elements, replace the element just before the middle.", "code": "def replace_middle_element(list1, list2):\n    mid_index = (len(list1) - 1) // 2\n    list1[mid_index:mid_index+1] = list2\n    return list1", "task_id": "240_7ddb9a4d-547b-417d-b9b2-6b853c6dbeda", "test_setup_code": "", "test_list": ["assert replace_middle_element([1, 2, 3], [4, 5]) == [1, 4, 5, 3]", "assert replace_middle_element([1, 2, 3, 4], [5, 6]) == [1, 5, 6, 3, 4]", "assert replace_middle_element([1], [2, 3]) == [2, 3]", "assert replace_middle_element([], [1, 2]) == [1, 2]", "assert replace_middle_element([1, 2, 3, 4, 5], [6]) == [1, 2, 6, 4, 5]", "assert replace_middle_element([1, 2, 3, 4, 5, 6], [7, 8]) == [1, 2, 7, 8, 4, 5, 6]", "assert replace_middle_element([1, 2, 3], []) == [1, 3]", "assert replace_middle_element([1, 2, 3, 4], []) == [1, 3, 4]", "assert replace_middle_element([1, 2, 3, 4, 5], [6, 7, 8]) == [1, 2, 6, 7, 8, 4, 5]", "assert replace_middle_element([1, 2, 3, 4, 5, 6], [7, 8, 9]) == [1, 2, 7, 8, 9, 4, 5, 6]", "assert replace_middle_element([1, 2], [3]) == [3, 2]", "assert replace_middle_element([1, 2], [3, 4]) == [3, 4, 2]", "assert replace_middle_element([1, 2, 3, 4, 5, 6, 7], [8, 9]) == [1, 2, 3, 8, 9, 5, 6, 7]", "assert replace_middle_element([1, 2, 3, 4, 5, 6, 7, 8], [9, 10]) == [1, 2, 3, 9, 10, 5, 6, 7, 8]", "assert replace_middle_element([1, 2, 3, 4, 5, 6, 7, 8, 9], [10]) == [1, 2, 3, 4, 10, 6, 7, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to replace the second element of the list with another list.", "code": "def replace_second_element(list1, list2):\n    list1[1:2] = list2\n    return list1", "task_id": "240_d50a4ed5-115e-4554-bfa9-1a633a8cc00c", "test_setup_code": "", "test_list": ["assert replace_second_element([1, 2, 3], [4, 5]) == [1, 4, 5, 3]", "assert replace_second_element(['a', 'b', 'c'], ['x', 'y']) == ['a', 'x', 'y', 'c']", "assert replace_second_element([1, 2], [3, 4, 5]) == [1, 3, 4, 5]", "assert replace_second_element([1], [2, 3]) == [1, 2, 3]", "assert replace_second_element([1, 2, 3], []) == [1, 3]", "assert replace_second_element([], [1, 2]) == []", "assert replace_second_element([1, 2, 3, 4], [5]) == [1, 5, 3, 4]", "assert replace_second_element([1, 2, 3], [4]) == [1, 4, 3]", "assert replace_second_element([1, 2, 3], [4, 5, 6]) == [1, 4, 5, 6, 3]", "assert replace_second_element(['a', 'b', 'c'], ['d']) == ['a', 'd', 'c']", "assert replace_second_element([1, 2, 3], [4, 5, 6, 7]) == [1, 4, 5, 6, 7, 3]", "assert replace_second_element([1, 2, 3, 4, 5], [6, 7]) == [1, 6, 7, 3, 4, 5]", "assert replace_second_element([1, 2, 3], [0]) == [1, 0, 3]", "assert replace_second_element([1, 2], [3]) == [1, 3]", "assert replace_second_element([1, 2, 3, 4], ['a', 'b', 'c']) == [1, 'a', 'b', 'c', 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to replace the last two elements of the list with another list.", "code": "def replace_last_two_elements(list1, list2):\n    list1[-2:] = list2\n    return list1", "task_id": "240_e3b2dd0d-c064-48fb-a079-d2a1d91d4410", "test_setup_code": "", "test_list": ["assert replace_last_two_elements([1, 2, 3, 4], [5, 6]) == [1, 2, 5, 6]", "assert replace_last_two_elements([1, 2], [3, 4, 5]) == [3, 4, 5]", "assert replace_last_two_elements([1, 2, 3], []) == [1]", "assert replace_last_two_elements([1, 2, 3, 4, 5], [6]) == [1, 2, 3, 6]", "assert replace_last_two_elements([1, 2, 3], [4, 5, 6, 7]) == [1, 4, 5, 6, 7]", "assert replace_last_two_elements([], [1, 2]) == [1, 2]", "assert replace_last_two_elements([1], [2, 3]) == [2, 3]", "assert replace_last_two_elements([1, 2, 3, 4], []) == [1, 2]", "assert replace_last_two_elements([1, 2, 3, 4, 5], [5, 5, 5]) == [1, 2, 3, 5, 5, 5]", "assert replace_last_two_elements(['a', 'b', 'c'], [1, 2]) == ['a', 1, 2]", "assert replace_last_two_elements([True, False], ['a', 'b', 'c']) == ['a', 'b', 'c']", "assert replace_last_two_elements([1, 2, 3, 4], [4, 3, 2, 1]) == [1, 2, 4, 3, 2, 1]", "assert replace_last_two_elements([None, None], [1]) == [1]", "assert replace_last_two_elements([1, 2, 3, 4, 5], [5]) == [1, 2, 3, 5]", "assert replace_last_two_elements([0, 0, 0], [1, 1, 1]) == [0, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a function to replace the first two elements of the list with another list.", "code": "def replace_first_two_elements(list1, list2):\n    list1[:2] = list2\n    return list1", "task_id": "240_804c9a9d-0f0b-453e-91d5-e9cfb06ca171", "test_setup_code": "", "test_list": ["assert replace_first_two_elements([1, 2, 3], [4, 5]) == [4, 5, 3]", "assert replace_first_two_elements([1, 2, 3], [4]) == [4, 3]", "assert replace_first_two_elements([1, 2, 3], []) == [3]", "assert replace_first_two_elements([1, 2], [4, 5, 6]) == [4, 5, 6]", "assert replace_first_two_elements([], [4, 5]) == [4, 5]", "assert replace_first_two_elements([1], [4, 5]) == [4, 5]", "assert replace_first_two_elements([1, 2, 3, 4], [5, 6]) == [5, 6, 3, 4]", "assert replace_first_two_elements([1, 2, 3, 4], [5, 6, 7, 8]) == [5, 6, 7, 8, 3, 4]", "assert replace_first_two_elements([1, 2], [3]) == [3]", "assert replace_first_two_elements([1, 2], []) == []", "assert replace_first_two_elements([1, 2, 3], [4, 5, 6, 7]) == [4, 5, 6, 7, 3]", "assert replace_first_two_elements([1, 2, 3], [4, 5, 6]) == [4, 5, 6, 3]", "assert replace_first_two_elements([1, 2, 3, 4, 5], [6, 7]) == [6, 7, 3, 4, 5]", "assert replace_first_two_elements([1, 2, 3, 4, 5], [6]) == [6, 3, 4, 5]", "assert replace_first_two_elements([1, 2, 3, 4, 5], []) == [3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to replace all elements of the list with another list.", "code": "def replace_all_elements(list1, list2):\n    list1[:] = list2\n    return list1", "task_id": "240_c8b00203-e222-46e7-8a2b-e81777f2a7b1", "test_setup_code": "", "test_list": ["assert replace_all_elements([1, 2, 3], [4, 5, 6]) == [4, 5, 6]", "assert replace_all_elements([], [1, 2, 3]) == [1, 2, 3]", "assert replace_all_elements([1, 2, 3], []) == []", "assert replace_all_elements([1], [2]) == [2]", "assert replace_all_elements([1, 2, 3], [4, 5]) == [4, 5]", "assert replace_all_elements([1, 2], [3, 4, 5]) == [3, 4, 5]", "assert replace_all_elements([1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert replace_all_elements([1, 2, 3], [1, 1, 1]) == [1, 1, 1]", "assert replace_all_elements([1, 2, 3], [0, 0, 0]) == [0, 0, 0]", "assert replace_all_elements([1, 2, 3], [1]) == [1]", "assert replace_all_elements([1, 2, 3], [4, 5, 6, 7]) == [4, 5, 6, 7]", "assert replace_all_elements([1, 2, 3, 4], [5, 6]) == [5, 6]", "assert replace_all_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [6, 7, 8, 9, 10]", "assert replace_all_elements([1, 2, 3], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert replace_all_elements([1, 2, 3, 4, 5, 6], [7, 8, 9]) == [7, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to replace all elements at even indices of the list with another list.", "code": "def replace_even_index_elements(list1, list2):\n    list1[::2] = list2\n    return list1", "task_id": "240_94b0b2e5-6a3c-4129-af49-7dbc16bf0693", "test_setup_code": "", "test_list": ["assert replace_even_index_elements([1, 2, 3, 4, 5, 6], [10, 20, 30]) == [10, 2, 20, 4, 30, 6]", "assert replace_even_index_elements([1, 2, 3], [10]) == [10, 2, 3]", "assert replace_even_index_elements([1, 2, 3, 4], [10, 20]) == [10, 2, 20, 4]", "assert replace_even_index_elements([], [10, 20]) == []", "assert replace_even_index_elements([1, 2, 3, 4, 5], [10, 20, 30, 40]) == [10, 2, 20, 4, 30]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40]) == [10, 2, 20, 4, 30, 6, 40]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6], []) == [1, 2, 3, 4, 5, 6]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6], [10, 20, 30, 40, 50, 60]) == [10, 2, 20, 4, 30, 6]", "assert replace_even_index_elements([1], [10]) == [10]", "assert replace_even_index_elements([1, 2], [10, 20]) == [10, 2]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7, 8], [10, 20, 30, 40]) == [10, 2, 20, 4, 30, 6, 40, 8]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 20, 30, 40, 50]) == [10, 2, 20, 4, 30, 6, 40, 8, 50]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [10, 20, 30, 40, 50, 60]) == [10, 2, 20, 4, 30, 6, 40, 8, 50, 10]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], [10, 20, 30, 40, 50, 60]) == [10, 2, 20, 4, 30, 6, 40, 8, 50, 10, 60]", "assert replace_even_index_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], [10, 20, 30, 40, 50, 60]) == [10, 2, 20, 4, 30, 6, 40, 8, 50, 10, 60, 12]"], "challenge_test_list": []}
{"text": "Write a function to replace all elements at odd indices of the list with another list.", "code": "def replace_odd_index_elements(list1, list2):\n    list1[1::2] = list2\n    return list1", "task_id": "240_1d4aa1ee-70e2-458d-bf64-24cff71ba03a", "test_setup_code": "", "test_list": ["assert replace_odd_index_elements([1, 2, 3, 4, 5], [9, 8]) == [1, 9, 3, 8, 5]", "assert replace_odd_index_elements([10, 20, 30, 40, 50, 60], [99, 88, 77]) == [10, 99, 30, 88, 50, 77]", "assert replace_odd_index_elements([1, 2, 3], [7]) == [1, 7, 3]", "assert replace_odd_index_elements([], [1, 2, 3]) == []"], "challenge_test_list": []}
{"text": "Write a function to replace the elements of the list with the sum of corresponding elements from another list. If the lists are of different lengths, use the length of the shorter list.", "code": "def replace_elements_with_sum(list1, list2):\n    length = min(len(list1), len(list2))\n    for i in range(length):\n        list1[i] = list1[i] + list2[i]\n    return list1", "task_id": "240_c9258f0c-6bb1-4d66-aa5d-58a0f4c98479", "test_setup_code": "", "test_list": ["assert replace_elements_with_sum([1, 2, 3], [4, 5, 6]) == [5, 7, 9]", "assert replace_elements_with_sum([1, 2, 3], [4, 5]) == [5, 7, 3]", "assert replace_elements_with_sum([1, 2], [4, 5, 6]) == [5, 7]", "assert replace_elements_with_sum([], [1, 2, 3]) == []", "assert replace_elements_with_sum([1, 2, 3], []) == [1, 2, 3]", "assert replace_elements_with_sum([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert replace_elements_with_sum([1, -2, 3], [-1, 2, -3]) == [0, 0, 0]", "assert replace_elements_with_sum([1, 2, 3], [1, 2, 3, 4, 5]) == [2, 4, 6]", "assert replace_elements_with_sum([1, 2, 3, 4, 5], [1, 2, 3]) == [2, 4, 6, 4, 5]", "assert replace_elements_with_sum([100, 200, 300], [1, 2, 3]) == [101, 202, 303]", "assert replace_elements_with_sum([1], [2]) == [3]", "assert replace_elements_with_sum([1, 2, 3], [0, 0, 0]) == [1, 2, 3]", "assert replace_elements_with_sum([1, 2, 3], [1, 2, 3]) == [2, 4, 6]", "assert replace_elements_with_sum([1, 2, 3, 4], [4, 3, 2, 1]) == [5, 5, 5, 5]", "assert replace_elements_with_sum([1, 2, 3], [10, 20, 30, 40]) == [11, 22, 33]"], "challenge_test_list": []}
{"text": "Write a function to replace the elements of the list with the product of corresponding elements from another list. If the lists are of different lengths, use the length of the shorter list.", "code": "def replace_elements_with_product(list1, list2):\n    length = min(len(list1), len(list2))\n    for i in range(length):\n        list1[i] = list1[i] * list2[i]\n    return list1", "task_id": "240_1e06c928-be7c-41ae-9f7c-a57eb517c54c", "test_setup_code": "", "test_list": ["assert replace_elements_with_product([1, 2, 3], [4, 5, 6]) == [4, 10, 18]", "assert replace_elements_with_product([1, 2], [3, 4, 5]) == [3, 8]", "assert replace_elements_with_product([1, 2, 3], [4, 5]) == [4, 10, 3]", "assert replace_elements_with_product([], [1, 2, 3]) == []", "assert replace_elements_with_product([1, 2, 3], []) == [1, 2, 3]", "assert replace_elements_with_product([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert replace_elements_with_product([1, 2, 3], [0, 0, 0]) == [0, 0, 0]", "assert replace_elements_with_product([1, -2, 3], [4, 5, -6]) == [4, -10, -18]", "assert replace_elements_with_product([1], [2]) == [2]", "assert replace_elements_with_product([1, 2, 3, 4], [2, 3]) == [2, 6, 3, 4]", "assert replace_elements_with_product([1, 2], [2, 3, 4, 5]) == [2, 6]", "assert replace_elements_with_product([1, 2, 3], [1, 1, 1]) == [1, 2, 3]", "assert replace_elements_with_product([1, 2, 3], [2, 2, 2]) == [2, 4, 6]", "assert replace_elements_with_product([1, 2, 3, 4, 5], [1, 2, 3]) == [1, 4, 9, 4, 5]", "assert replace_elements_with_product([5, 6, 7], [1, 2, 3, 4]) == [5, 12, 21]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array having each element as the specified value.", "code": "def array_3d_with_value(m, n, o, value):\n    return [[[value for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_41d2eafa-df49-41dc-84c0-685b51b6efb9", "test_setup_code": "", "test_list": ["assert array_3d_with_value(2, 2, 2, 5) == [[[5, 5], [5, 5]], [[5, 5], [5, 5]]]", "assert array_3d_with_value(1, 1, 1, 'a') == [[['a']]]", "assert array_3d_with_value(0, 3, 3, 0) == []", "assert array_3d_with_value(3, 2, 1, None) == [[[None, None, None], [None, None, None]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is an incremental integer starting from 0.", "code": "def array_3d_incremental(m, n, o):\n    counter = 0\n    result = []\n    for i in range(o):\n        layer = []\n        for j in range(n):\n            row = []\n            for k in range(m):\n                row.append(counter)\n                counter += 1\n            layer.append(row)\n        result.append(layer)\n    return result", "task_id": "241_20ab2d63-b1e7-4000-98b8-dfe87ead63c2", "test_setup_code": "", "test_list": ["assert array_3d_incremental(1, 1, 1) == [[[0]]]", "assert array_3d_incremental(2, 2, 2) == [[[0, 1], [2, 3]], [[4, 5], [6, 7]]]", "assert array_3d_incremental(3, 1, 1) == [[[0, 1, 2]]]", "assert array_3d_incremental(1, 3, 1) == [[[0], [1], [2]]]", "assert array_3d_incremental(1, 1, 3) == [[[0]], [[1]], [[2]]]", "assert array_3d_incremental(2, 3, 1) == [[[0, 1], [2, 3], [4, 5]]]", "assert array_3d_incremental(3, 2, 2) == [[[0, 1, 2], [3, 4, 5]], [[6, 7, 8], [9, 10, 11]]]", "assert array_3d_incremental(0, 0, 0) == []", "assert array_3d_incremental(0, 1, 1) == [[]]", "assert array_3d_incremental(1, 0, 1) == [[]]", "assert array_3d_incremental(1, 1, 0) == []", "assert array_3d_incremental(2, 2, 1) == [[[0, 1], [2, 3]]]", "assert array_3d_incremental(1, 2, 2) == [[[0], [1]], [[2], [3]]]", "assert array_3d_incremental(2, 1, 2) == [[[0, 1]], [[2, 3]]]", "assert array_3d_incremental(2, 2, 3) == [[[0, 1], [2, 3]], [[4, 5], [6, 7]], [[8, 9], [10, 11]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice has a diagonal of 1s and the rest are 0s.", "code": "def array_3d_diagonal(m, n, o):\n    return [[[1 if i == j else 0 for j in range(n)] for i in range(m)] for _ in range(o)]", "task_id": "241_b2aba10a-7403-4b0e-8005-3bddaccdd6b5", "test_setup_code": "", "test_list": ["assert array_3d_diagonal(1, 1, 1) == [[[1]]]", "assert array_3d_diagonal(2, 2, 1) == [[[1, 0], [0, 1]]]", "assert array_3d_diagonal(2, 2, 2) == [[[1, 0], [0, 1]], [[1, 0], [0, 1]]]", "assert array_3d_diagonal(3, 3, 1) == [[[1, 0, 0], [0, 1, 0], [0, 0, 1]]]", "assert array_3d_diagonal(3, 3, 2) == [[[1, 0, 0], [0, 1, 0], [0, 0, 1]], [[1, 0, 0], [0, 1, 0], [0, 0, 1]]]", "assert array_3d_diagonal(4, 4, 1) == [[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]]", "assert array_3d_diagonal(4, 4, 3) == [[[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]], [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]]", "assert array_3d_diagonal(0, 0, 0) == []", "assert array_3d_diagonal(1, 1, 3) == [[[1]], [[1]], [[1]]]", "assert array_3d_diagonal(2, 3, 1) == [[[1, 0, 0], [0, 1, 0]]]", "assert array_3d_diagonal(3, 2, 2) == [[[1, 0], [0, 1], [0, 0]], [[1, 0], [0, 1], [0, 0]]]", "assert array_3d_diagonal(1, 2, 1) == [[[1, 0]]]", "assert array_3d_diagonal(2, 1, 2) == [[[1], [0]], [[1], [0]]]", "assert array_3d_diagonal(3, 3, 0) == []", "assert array_3d_diagonal(2, 2, 0) == []"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array having each element as 0.", "code": "def array_3d_zeros(m, n, o):\n    return [[[0 for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_67183753-fc9b-4c2c-9a8b-8f5cd784fd6c", "test_setup_code": "", "test_list": ["assert array_3d_zeros(1, 1, 1) == [[[0]]]", "assert array_3d_zeros(2, 2, 2) == [[[0, 0], [0, 0]], [[0, 0], [0, 0]]]", "assert array_3d_zeros(3, 3, 3) == [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[0, 0, 0], [0, 0, 0], [0, 0, 0]]]", "assert array_3d_zeros(0, 0, 0) == []", "assert array_3d_zeros(1, 0, 0) == [[]]", "assert array_3d_zeros(0, 1, 0) == [[]]", "assert array_3d_zeros(0, 0, 1) == [[]]", "assert array_3d_zeros(1, 1, 0) == [[]]", "assert array_3d_zeros(1, 0, 1) == [[]]", "assert array_3d_zeros(0, 1, 1) == [[]]", "assert array_3d_zeros(2, 1, 1) == [[[0, 0]]]", "assert array_3d_zeros(1, 2, 1) == [[[0], [0]]]", "assert array_3d_zeros(1, 1, 2) == [[[0]], [[0]]]", "assert array_3d_zeros(2, 2, 1) == [[[0, 0], [0, 0]]]", "assert array_3d_zeros(2, 1, 2) == [[[0, 0]], [[0, 0]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is a random integer between 0 and 9.", "code": "import random\n\ndef array_3d_random(m, n, o):\n    return [[[random.randint(0, 9) for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_981dace4-b2aa-44a9-ae0a-96861728977c", "test_setup_code": "", "test_list": ["assert len(array_3d_random(1, 1, 1)) == 1", "assert len(array_3d_random(1, 1, 1)[0]) == 1", "assert len(array_3d_random(1, 1, 1)[0][0]) == 1", "assert all(0 <= elem <= 9 for sublist in array_3d_random(1, 1, 1) for subsublist in sublist for elem in subsublist)", "assert len(array_3d_random(2, 2, 2)) == 2", "assert len(array_3d_random(2, 2, 2)[0]) == 2", "assert len(array_3d_random(2, 2, 2)[0][0]) == 2", "assert all(0 <= elem <= 9 for sublist in array_3d_random(2, 2, 2) for subsublist in sublist for elem in subsublist)", "assert len(array_3d_random(3, 3, 3)) == 3", "assert len(array_3d_random(3, 3, 3)[0]) == 3", "assert len(array_3d_random(3, 3, 3)[0][0]) == 3", "assert all(0 <= elem <= 9 for sublist in array_3d_random(3, 3, 3) for subsublist in sublist for elem in subsublist)", "assert len(array_3d_random(0, 0, 0)) == 0", "assert len(array_3d_random(1, 0, 0)) == 0", "assert len(array_3d_random(0, 1, 1)) == 0"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element alternates between 0 and 1.", "code": "def array_3d_alternating(m, n, o):\n    return [[[((i+j+k) % 2) for i in range(m)] for j in range(n)] for k in range(o)]", "task_id": "241_71587fab-62c3-442c-8bab-1e5fc38d239e", "test_setup_code": "", "test_list": ["assert array_3d_alternating(1, 1, 1) == [[[0]]]", "assert array_3d_alternating(2, 2, 2) == [[[0, 1], [1, 0]], [[1, 0], [0, 1]]]", "assert array_3d_alternating(3, 3, 3) == [[[0, 1, 0], [1, 0, 1], [0, 1, 0]], [[1, 0, 1], [0, 1, 0], [1, 0, 1]], [[0, 1, 0], [1, 0, 1], [0, 1, 0]]]", "assert array_3d_alternating(0, 0, 0) == []", "assert array_3d_alternating(1, 2, 3) == [[[0], [1]], [[1], [0]], [[0], [1]]]", "assert array_3d_alternating(2, 1, 2) == [[[0, 1]], [[1, 0]]]", "assert array_3d_alternating(2, 2, 1) == [[[0, 1], [1, 0]]]", "assert array_3d_alternating(1, 1, 2) == [[[0]], [[1]]]", "assert array_3d_alternating(3, 1, 1) == [[[0, 1, 0]]]", "assert array_3d_alternating(1, 3, 1) == [[[0], [1], [0]]]", "assert array_3d_alternating(1, 1, 0) == []", "assert array_3d_alternating(2, 0, 2) == [[], []]", "assert array_3d_alternating(0, 2, 2) == [[], []]", "assert array_3d_alternating(2, 2, 0) == []", "assert array_3d_alternating(4, 4, 4) == [[[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]], [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]], [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]], [[1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is a tuple of its coordinates (i, j, k).", "code": "def array_3d_coordinates(m, n, o):\n    return [[[(i, j, k) for i in range(m)] for j in range(n)] for k in range(o)]", "task_id": "241_c9abeec8-6ebb-4fc9-9c80-9d036d88332a", "test_setup_code": "", "test_list": ["assert array_3d_coordinates(1, 1, 1) == [[[(0, 0, 0)]]]", "assert array_3d_coordinates(2, 2, 2) == [[[(0, 0, 0), (1, 0, 0)], [(0, 1, 0), (1, 1, 0)]], [[(0, 0, 1), (1, 0, 1)], [(0, 1, 1), (1, 1, 1)]]]", "assert array_3d_coordinates(0, 0, 0) == []", "assert array_3d_coordinates(3, 1, 1) == [[[(0, 0, 0), (1, 0, 0), (2, 0, 0)]]]", "assert array_3d_coordinates(1, 3, 1) == [[[(0, 0, 0)], [(0, 1, 0)], [(0, 2, 0)]]]", "assert array_3d_coordinates(1, 1, 3) == [[[(0, 0, 0)]], [[(0, 0, 1)]], [[(0, 0, 2)]]]", "assert array_3d_coordinates(2, 3, 1) == [[[(0, 0, 0), (1, 0, 0)], [(0, 1, 0), (1, 1, 0)], [(0, 2, 0), (1, 2, 0)]]]", "assert array_3d_coordinates(3, 2, 1) == [[[(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 1, 0), (1, 1, 0), (2, 1, 0)]]]", "assert array_3d_coordinates(2, 1, 3) == [[[(0, 0, 0), (1, 0, 0)]], [[(0, 0, 1), (1, 0, 1)]], [[(0, 0, 2), (1, 0, 2)]]]", "assert array_3d_coordinates(1, 2, 3) == [[[(0, 0, 0)], [(0, 1, 0)]], [[(0, 0, 1)], [(0, 1, 1)]], [[(0, 0, 2)], [(0, 1, 2)]]]", "assert array_3d_coordinates(3, 3, 1) == [[[(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 1, 0), (1, 1, 0), (2, 1, 0)], [(0, 2, 0), (1, 2, 0), (2, 2, 0)]]]", "assert array_3d_coordinates(1, 3, 3) == [[[(0, 0, 0)], [(0, 1, 0)], [(0, 2, 0)]], [[(0, 0, 1)], [(0, 1, 1)], [(0, 2, 1)]], [[(0, 0, 2)], [(0, 1, 2)], [(0, 2, 2)]]]", "assert array_3d_coordinates(2, 2, 3) == [[[(0, 0, 0), (1, 0, 0)], [(0, 1, 0), (1, 1, 0)]], [[(0, 0, 1), (1, 0, 1)], [(0, 1, 1), (1, 1, 1)]], [[(0, 0, 2), (1, 0, 2)], [(0, 1, 2), (1, 1, 2)]]]", "assert array_3d_coordinates(3, 2, 2) == [[[(0, 0, 0), (1, 0, 0), (2, 0, 0)], [(0, 1, 0), (1, 1, 0), (2, 1, 0)]], [[(0, 0, 1), (1, 0, 1), (2, 0, 1)], [(0, 1, 1), (1, 1, 1), (2, 1, 1)]]]", "assert array_3d_coordinates(2, 3, 2) == [[[(0, 0, 0), (1, 0, 0)], [(0, 1, 0), (1, 1, 0)], [(0, 2, 0), (1, 2, 0)]], [[(0, 0, 1), (1, 0, 1)], [(0, 1, 1), (1, 1, 1)], [(0, 2, 1), (1, 2, 1)]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice is a checkerboard pattern of 0s and 1s.", "code": "def array_3d_checkerboard(m, n, o):\n    return [[[((i+j) % 2) for i in range(m)] for j in range(n)] for _ in range(o)]", "task_id": "241_9f4b01ca-ce4f-41c9-9cfe-20fb2a61a4da", "test_setup_code": "", "test_list": ["assert array_3d_checkerboard(2, 2, 2) == [[[0, 1], [1, 0]], [[0, 1], [1, 0]]]", "assert array_3d_checkerboard(3, 3, 1) == [[[0, 1, 0], [1, 0, 1], [0, 1, 0]]]", "assert array_3d_checkerboard(1, 1, 1) == [[[0]]]", "assert array_3d_checkerboard(2, 3, 2) == [[[0, 1], [1, 0], [0, 1]], [[0, 1], [1, 0], [0, 1]]]", "assert array_3d_checkerboard(3, 2, 1) == [[[0, 1, 0], [1, 0, 1]]]", "assert array_3d_checkerboard(4, 4, 1) == [[[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]]]", "assert array_3d_checkerboard(2, 2, 1) == [[[0, 1], [1, 0]]]", "assert array_3d_checkerboard(3, 3, 2) == [[[0, 1, 0], [1, 0, 1], [0, 1, 0]], [[0, 1, 0], [1, 0, 1], [0, 1, 0]]]", "assert array_3d_checkerboard(1, 2, 1) == [[[0], [1]]]", "assert array_3d_checkerboard(2, 1, 1) == [[[0, 1]]]", "assert array_3d_checkerboard(2, 2, 3) == [[[0, 1], [1, 0]], [[0, 1], [1, 0]], [[0, 1], [1, 0]]]", "assert array_3d_checkerboard(1, 3, 1) == [[[0], [1], [0]]]", "assert array_3d_checkerboard(3, 1, 1) == [[[0, 1, 0]]]", "assert array_3d_checkerboard(4, 2, 2) == [[[0, 1, 0, 1], [1, 0, 1, 0]], [[0, 1, 0, 1], [1, 0, 1, 0]]]", "assert array_3d_checkerboard(1, 1, 3) == [[[0]], [[0]], [[0]]]"], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice is filled with the slice index.", "code": "def array_3d_layers(m, n, o):\n    return [[[k for _ in range(m)] for _ in range(n)] for k in range(o)]", "task_id": "241_0453f4aa-aa0b-4d17-bc3a-8b48ad385624", "test_setup_code": "", "test_list": ["assert array_3d_layers(1, 1, 1) == [[[0]]]", "assert array_3d_layers(2, 2, 2) == [[[0, 0], [0, 0]], [[1, 1], [1, 1]]]", "assert array_3d_layers(3, 3, 3) == [[[0, 0, 0], [0, 0, 0], [0, 0, 0]], [[1, 1, 1], [1, 1, 1], [1, 1, 1]], [[2, 2, 2], [2, 2, 2], [2, 2, 2]]]", "assert array_3d_layers(0, 0, 0) == []", "assert array_3d_layers(1, 1, 0) == []", "assert array_3d_layers(1, 0, 1) == [[]]", "assert array_3d_layers(0, 1, 1) == [[]]", "assert array_3d_layers(1, 2, 3) == [[[0, 0]], [[1, 1]], [[2, 2]]]", "assert array_3d_layers(2, 1, 3) == [[[0], [0]], [[1], [1]], [[2], [2]]]", "assert array_3d_layers(2, 2, 1) == [[[0, 0], [0, 0]]]", "assert array_3d_layers(3, 1, 2) == [[[0, 0, 0]], [[1, 1, 1]]]", "assert array_3d_layers(2, 3, 1) == [[[0, 0], [0, 0], [0, 0]]]", "assert array_3d_layers(3, 2, 2) == [[[0, 0, 0], [0, 0, 0]], [[1, 1, 1], [1, 1, 1]]]", "assert array_3d_layers(1, 3, 2) == [[[0], [0], [0]], [[1], [1], [1]]]", "assert array_3d_layers(2, 3, 3) == [[[0, 0], [0, 0], [0, 0]], [[1, 1], [1, 1], [1, 1]], [[2, 2], [2, 2], [2, 2]]]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the second element of each tuple.", "code": "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])", "task_id": "243_44d63286-d9ad-4d1f-8c12-53e13a0cd17f", "test_setup_code": "", "test_list": ["assert sort_by_second_element([(1, 3), (2, 2), (3, 1)]) == [(3, 1), (2, 2), (1, 3)]", "assert sort_by_second_element([(1, 1), (2, 2), (3, 3)]) == [(1, 1), (2, 2), (3, 3)]", "assert sort_by_second_element([(1, 2), (2, 2), (3, 2)]) == [(1, 2), (2, 2), (3, 2)]", "assert sort_by_second_element([(1, 3), (2, 3), (3, 1), (4, 2)]) == [(3, 1), (4, 2), (1, 3), (2, 3)]", "assert sort_by_second_element([(1, -1), (2, -2), (3, -3)]) == [(3, -3), (2, -2), (1, -1)]", "assert sort_by_second_element([(1, 0), (2, 0), (3, 0)]) == [(1, 0), (2, 0), (3, 0)]", "assert sort_by_second_element([(1, 5), (2, 3), (3, 4)]) == [(2, 3), (3, 4), (1, 5)]", "assert sort_by_second_element([(1, 1)]) == [(1, 1)]", "assert sort_by_second_element([]) == []", "assert sort_by_second_element([(1, 2), (2, 1), (3, 3), (4, 0)]) == [(4, 0), (2, 1), (1, 2), (3, 3)]", "assert sort_by_second_element([(1, 1), (2, 1), (3, 1), (4, 1)]) == [(1, 1), (2, 1), (3, 1), (4, 1)]", "assert sort_by_second_element([(1, 1), (2, 3), (3, 2), (4, 4)]) == [(1, 1), (3, 2), (2, 3), (4, 4)]", "assert sort_by_second_element([(1, 10), (2, 5), (3, 7), (4, 3)]) == [(4, 3), (2, 5), (3, 7), (1, 10)]", "assert sort_by_second_element([(1, 100), (2, 50), (3, 75), (4, 25), (5, 0)]) == [(5, 0), (4, 25), (2, 50), (3, 75), (1, 100)]", "assert sort_by_second_element([(1, 1), (2, -1), (3, 0), (4, -2)]) == [(4, -2), (2, -1), (3, 0), (1, 1)]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the sum of the elements in each tuple.", "code": "def sort_by_sum_of_elements(lst):\n    return sorted(lst, key=lambda x: x[0] + x[1])", "task_id": "243_779b3f86-86ba-4f78-9f00-22388acd863a", "test_setup_code": "", "test_list": ["assert sort_by_sum_of_elements([(1, 2), (3, 4), (0, 1)]) == [(0, 1), (1, 2), (3, 4)]", "assert sort_by_sum_of_elements([(5, 5), (1, 2), (3, 3)]) == [(1, 2), (3, 3), (5, 5)]", "assert sort_by_sum_of_elements([(0, 0), (0, 0), (0, 0)]) == [(0, 0), (0, 0), (0, 0)]", "assert sort_by_sum_of_elements([(10, -10), (-5, 5), (0, 0)]) == [(10, -10), (0, 0), (-5, 5)]", "assert sort_by_sum_of_elements([(-1, -1), (-2, -2), (-3, -3)]) == [(-3, -3), (-2, -2), (-1, -1)]", "assert sort_by_sum_of_elements([(100, 200), (50, 50), (1, 1)]) == [(1, 1), (50, 50), (100, 200)]", "assert sort_by_sum_of_elements([(1, 1), (1, 1), (1, 1)]) == [(1, 1), (1, 1), (1, 1)]", "assert sort_by_sum_of_elements([(1, 2), (2, 1), (3, 0)]) == [(1, 2), (2, 1), (3, 0)]", "assert sort_by_sum_of_elements([(0, 1), (1, 0), (0, 0)]) == [(0, 0), (1, 0), (0, 1)]", "assert sort_by_sum_of_elements([(1, 2), (2, 1), (1, 1)]) == [(1, 1), (1, 2), (2, 1)]", "assert sort_by_sum_of_elements([(0, 0), (1, 1), (2, 2), (3, 3)]) == [(0, 0), (1, 1), (2, 2), (3, 3)]", "assert sort_by_sum_of_elements([(1, 2), (2, 3), (3, 4), (4, 5)]) == [(1, 2), (2, 3), (3, 4), (4, 5)]", "assert sort_by_sum_of_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]", "assert sort_by_sum_of_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)]", "assert sort_by_sum_of_elements([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]) == [(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8)]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the length of the string in each tuple.", "code": "def sort_by_length_of_string(lst):\n    return sorted(lst, key=lambda x: len(x[1]))", "task_id": "243_3ae3fadb-c4bc-4e18-9f57-de914665f4fe", "test_setup_code": "", "test_list": ["assert sort_by_length_of_string([(1, 'apple'), (2, 'banana'), (3, 'pear')]) == [(3, 'pear'), (1, 'apple'), (2, 'banana')]", "assert sort_by_length_of_string([(1, 'a'), (2, 'ab'), (3, 'abc')]) == [(1, 'a'), (2, 'ab'), (3, 'abc')]", "assert sort_by_length_of_string([(1, ''), (2, 'a'), (3, 'ab'), (4, 'abc')]) == [(1, ''), (2, 'a'), (3, 'ab'), (4, 'abc')]", "assert sort_by_length_of_string([(1, 'same'), (2, 'size'), (3, 'test')]) == [(1, 'same'), (2, 'size'), (3, 'test')]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on their absolute values.", "code": "def sort_by_absolute_value(lst):\n    return sorted(lst, key=abs)", "task_id": "243_6573f0a6-355b-4396-a56b-5e78fdb9652e", "test_setup_code": "", "test_list": ["assert sort_by_absolute_value([3, -1, -4, 2, 0]) == [0, -1, 2, 3, -4]", "assert sort_by_absolute_value([-10, 5, -3, 2, 1]) == [1, 2, -3, 5, -10]", "assert sort_by_absolute_value([0, 0, 0]) == [0, 0, 0]", "assert sort_by_absolute_value([1, -1, 1, -1]) == [1, -1, 1, -1]", "assert sort_by_absolute_value([100, -50, 50, -100]) == [50, -50, 100, -100]", "assert sort_by_absolute_value([1]) == [1]", "assert sort_by_absolute_value([-1]) == [-1]", "assert sort_by_absolute_value([]) == []", "assert sort_by_absolute_value([0, -1, 1, -2, 2]) == [0, -1, 1, -2, 2]", "assert sort_by_absolute_value([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert sort_by_absolute_value([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sort_by_absolute_value([3, -3, 2, -2, 1, -1]) == [1, -1, 2, -2, 3, -3]", "assert sort_by_absolute_value([1000, -999, 500, -500, 0]) == [0, 500, -500, -999, 1000]", "assert sort_by_absolute_value([7, -7, 5, -5, 3, -3, 1, -1]) == [1, -1, 3, -3, 5, -5, 7, -7]", "assert sort_by_absolute_value([10, -20, 30, -40, 50, -60]) == [10, -20, 30, -40, 50, -60]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on their last digit.", "code": "def sort_by_last_digit(lst):\n    return sorted(lst, key=lambda x: x % 10)", "task_id": "243_2ee66751-4245-4c32-88e2-1368e46bb3e8", "test_setup_code": "", "test_list": ["assert sort_by_last_digit([12, 23, 34, 45, 56]) == [50, 21, 12, 23, 34]", "assert sort_by_last_digit([5, 12, 87, 43, 90]) == [90, 40, 41, 12, 5]", "assert sort_by_last_digit([]) == []", "assert sort_by_last_digit([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the first character of each string.", "code": "def sort_by_first_char(lst):\n    return sorted(lst, key=lambda x: x[0])", "task_id": "243_f5e5e31a-0083-4616-94d6-b5aa1848b4ae", "test_setup_code": "", "test_list": ["assert sort_by_first_char(['banana', 'apple', 'cherry']) == ['apple', 'banana', 'cherry']", "assert sort_by_first_char(['dog', 'cat', 'elephant', 'antelope']) == ['antelope', 'cat', 'dog', 'elephant']", "assert sort_by_first_char(['zebra', 'yak', 'xenon']) == ['xenon', 'yak', 'zebra']", "assert sort_by_first_char(['apple', 'Apple', 'banana']) == ['Apple', 'apple', 'banana']", "assert sort_by_first_char(['123', 'abc', '456', 'def']) == ['123', '456', 'abc', 'def']", "assert sort_by_first_char(['', 'a', 'b']) == ['', 'a', 'b']", "assert sort_by_first_char(['same', 'same', 'same']) == ['same', 'same', 'same']", "assert sort_by_first_char(['one', 'two', 'three', 'four']) == ['four', 'one', 'three', 'two']", "assert sort_by_first_char(['A', 'a', 'B', 'b']) == ['A', 'B', 'a', 'b']", "assert sort_by_first_char(['z', 'y', 'x', 'w']) == ['w', 'x', 'y', 'z']", "assert sort_by_first_char(['', '', '']) == ['', '', '']", "assert sort_by_first_char(['a']) == ['a']", "assert sort_by_first_char(['apple', 'banana', 'cherry', 'date', 'elderberry']) == ['apple', 'banana', 'cherry', 'date', 'elderberry']", "assert sort_by_first_char(['zebra', 'Zebra', 'yak', 'Yak']) == ['Yak', 'Zebra', 'yak', 'zebra']", "assert sort_by_first_char(['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']) == ['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape']"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of vowels in each string.", "code": "def sort_by_vowel_count(lst):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return sorted(lst, key=count_vowels)", "task_id": "243_cce89e29-77cf-41ae-8ccb-605ec2392a89", "test_setup_code": "", "test_list": ["assert sort_by_vowel_count(['apple', 'banana', 'cherry']) == ['cherry', 'apple', 'banana']", "assert sort_by_vowel_count(['dog', 'cat', 'elephant']) == ['dog', 'cat', 'elephant']", "assert sort_by_vowel_count(['a', 'e', 'i', 'o', 'u']) == ['a', 'e', 'i', 'o', 'u']", "assert sort_by_vowel_count(['sky', 'try', 'cry']) == ['sky', 'try', 'cry']", "assert sort_by_vowel_count(['aeiou', 'bcdfg', 'hijkl']) == ['bcdfg', 'hijkl', 'aeiou']", "assert sort_by_vowel_count(['', 'a', 'aa', 'aaa']) == ['', 'a', 'aa', 'aaa']", "assert sort_by_vowel_count(['hello', 'world', 'python']) == ['world', 'hello', 'python']", "assert sort_by_vowel_count(['one', 'two', 'three']) == ['two', 'one', 'three']", "assert sort_by_vowel_count(['abc', 'def', 'ghi']) == ['def', 'ghi', 'abc']", "assert sort_by_vowel_count(['xyz', 'uvw', 'rst']) == ['xyz', 'uvw', 'rst']", "assert sort_by_vowel_count(['a', 'b', 'c']) == ['b', 'c', 'a']", "assert sort_by_vowel_count(['a', 'aa', 'aaa', 'aaaa']) == ['a', 'aa', 'aaa', 'aaaa']", "assert sort_by_vowel_count(['']) == ['']", "assert sort_by_vowel_count(['ae', 'io', 'ou']) == ['ae', 'io', 'ou']", "assert sort_by_vowel_count(['apple', 'banana', 'grape', 'kiwi']) == ['kiwi', 'grape', 'apple', 'banana']"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on the sum of their digits.", "code": "def sort_by_digit_sum(lst):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return sorted(lst, key=digit_sum)", "task_id": "243_5317f101-dbb7-4658-9fec-8ce0d6559ac4", "test_setup_code": "", "test_list": ["assert sort_by_digit_sum([56, 23, 89, 12]) == [12, 23, 56, 89]", "assert sort_by_digit_sum([99, 11, 22, 33]) == [11, 22, 33, 99]", "assert sort_by_digit_sum([5, 50, 500, 5000]) == [5, 50, 500, 5000]", "assert sort_by_digit_sum([123, 234, 345, 456]) == [123, 234, 345, 456]", "assert sort_by_digit_sum([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sort_by_digit_sum([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]", "assert sort_by_digit_sum([111, 222, 333, 444]) == [111, 222, 333, 444]", "assert sort_by_digit_sum([321, 432, 543, 654]) == [321, 432, 543, 654]", "assert sort_by_digit_sum([1, 10, 100, 1000]) == [1, 10, 100, 1000]", "assert sort_by_digit_sum([987, 876, 765, 654]) == [654, 765, 876, 987]", "assert sort_by_digit_sum([12, 21, 13, 31]) == [12, 21, 13, 31]", "assert sort_by_digit_sum([1111, 2222, 3333, 4444]) == [1111, 2222, 3333, 4444]", "assert sort_by_digit_sum([9, 99, 999, 9999]) == [9, 99, 999, 9999]", "assert sort_by_digit_sum([0, 100, 200, 300]) == [0, 100, 200, 300]", "assert sort_by_digit_sum([1234, 2345, 3456, 4567]) == [1234, 2345, 3456, 4567]"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of words in each string.", "code": "def sort_by_word_count(lst):\n    return sorted(lst, key=lambda x: len(x.split()))", "task_id": "243_5411c3c0-6c59-4893-933a-49d9bf3a5535", "test_setup_code": "", "test_list": ["assert sort_by_word_count(['a b c', 'a b', 'a']) == ['a', 'a b', 'a b c']", "assert sort_by_word_count(['one two', 'one', 'one two three']) == ['one', 'one two', 'one two three']", "assert sort_by_word_count(['apple', 'banana apple', 'cherry banana apple']) == ['apple', 'banana apple', 'cherry banana apple']", "assert sort_by_word_count(['', 'a', 'a b']) == ['', 'a', 'a b']", "assert sort_by_word_count(['a b c d', 'a b', 'a b c']) == ['a b', 'a b c', 'a b c d']", "assert sort_by_word_count(['a b', 'a b c', 'a']) == ['a', 'a b', 'a b c']", "assert sort_by_word_count(['one', 'one two', 'one two three', 'one two three four']) == ['one', 'one two', 'one two three', 'one two three four']", "assert sort_by_word_count(['a a a', 'a', 'a a']) == ['a', 'a a', 'a a a']", "assert sort_by_word_count(['z y x', 'w v', 'u']) == ['u', 'w v', 'z y x']", "assert sort_by_word_count(['a b c', 'a b c d e', 'a b']) == ['a b', 'a b c', 'a b c d e']", "assert sort_by_word_count(['one two three', 'one', 'one two three four five']) == ['one', 'one two three', 'one two three four five']", "assert sort_by_word_count(['a', 'b', 'c']) == ['a', 'b', 'c']", "assert sort_by_word_count(['a b c d e', 'a b c d', 'a b c']) == ['a b c', 'a b c d', 'a b c d e']", "assert sort_by_word_count(['one two', 'one two three', 'one']) == ['one', 'one two', 'one two three']", "assert sort_by_word_count(['a b c d e f', 'a b c d e', 'a b c d']) == ['a b c d', 'a b c d e', 'a b c d e f']"], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of unique characters in each string.", "code": "def sort_by_unique_char_count(lst):\n    return sorted(lst, key=lambda x: len(set(x)))", "task_id": "243_11b48c47-12a9-4129-978c-594518fe9b82", "test_setup_code": "", "test_list": ["assert sort_by_unique_char_count(['apple', 'banana', 'pear']) == ['banana', 'apple', 'pear']", "assert sort_by_unique_char_count(['a', 'aa', 'aaa']) == ['a', 'aa', 'aaa']", "assert sort_by_unique_char_count(['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']", "assert sort_by_unique_char_count(['abcd', 'aabb', 'ab']) == ['ab', 'aabb', 'abcd']", "assert sort_by_unique_char_count(['', 'a', 'aa', 'aaa']) == ['', 'a', 'aa', 'aaa']", "assert sort_by_unique_char_count(['a', 'b', 'c', 'd']) == ['a', 'b', 'c', 'd']", "assert sort_by_unique_char_count(['abc', 'aabbcc', 'aabb']) == ['abc', 'aabb', 'aabbcc']", "assert sort_by_unique_char_count(['xyz', 'xy', 'x']) == ['x', 'xy', 'xyz']", "assert sort_by_unique_char_count(['a', 'ab', 'abc', 'abcd']) == ['a', 'ab', 'abc', 'abcd']", "assert sort_by_unique_char_count(['abcd', 'abc', 'ab', 'a']) == ['a', 'ab', 'abc', 'abcd']", "assert sort_by_unique_char_count(['a', 'aa', 'aaa', 'aaaa']) == ['a', 'aa', 'aaa', 'aaaa']", "assert sort_by_unique_char_count(['hello', 'world', 'python']) == ['world', 'hello', 'python']", "assert sort_by_unique_char_count(['123', '112233', '111222']) == ['123', '111222', '112233']", "assert sort_by_unique_char_count(['z', 'zz', 'zzz', 'zzzz']) == ['z', 'zz', 'zzz', 'zzzz']", "assert sort_by_unique_char_count(['same', 'same', 'same']) == ['same', 'same', 'same']"], "challenge_test_list": []}
{"text": "Write a python function to find the next perfect cube greater than a given number.", "code": "import math\n\ndef next_cube(N):\n    nextN = math.floor(N ** (1/3)) + 1\n    return nextN ** 3", "task_id": "244_f04cdd90-3ce5-4e25-8155-51b20fb1e559", "test_setup_code": "", "test_list": ["assert next_cube(7) == 8", "assert next_cube(8) == 27", "assert next_cube(26) == 27", "assert next_cube(27) == 64", "assert next_cube(63) == 64", "assert next_cube(64) == 125", "assert next_cube(124) == 125", "assert next_cube(125) == 216", "assert next_cube(215) == 216", "assert next_cube(216) == 343", "assert next_cube(342) == 343", "assert next_cube(343) == 512", "assert next_cube(511) == 512", "assert next_cube(512) == 729", "assert next_cube(728) == 729"], "challenge_test_list": []}
{"text": "Write a python function to find the next Fibonacci number greater than a given number.", "code": "def next_fibonacci(N):\n    a, b = 0, 1\n    while b <= N:\n        a, b = b, a + b\n    return b", "task_id": "244_504b85be-1092-4258-a617-6bb0594aca9c", "test_setup_code": "", "test_list": ["assert next_fibonacci(0) == 1", "assert next_fibonacci(1) == 2", "assert next_fibonacci(2) == 3", "assert next_fibonacci(3) == 5", "assert next_fibonacci(5) == 8", "assert next_fibonacci(8) == 13", "assert next_fibonacci(13) == 21", "assert next_fibonacci(21) == 34", "assert next_fibonacci(34) == 55", "assert next_fibonacci(55) == 89", "assert next_fibonacci(89) == 144", "assert next_fibonacci(144) == 233", "assert next_fibonacci(233) == 377", "assert next_fibonacci(987) == 1597", "assert next_fibonacci(1597) == 2584"], "challenge_test_list": []}
{"text": "Write a python function to find the next prime number greater than a given number.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef next_prime(N):\n    N += 1\n    while not is_prime(N):\n        N += 1\n    return N", "task_id": "244_a60c22c6-d1eb-4e96-ab88-be85dbdf826e", "test_setup_code": "", "test_list": ["assert next_prime(0) == 2", "assert next_prime(1) == 2", "assert next_prime(2) == 3", "assert next_prime(3) == 5", "assert next_prime(10) == 11", "assert next_prime(11) == 13", "assert next_prime(17) == 19", "assert next_prime(19) == 23", "assert next_prime(23) == 29", "assert next_prime(29) == 31", "assert next_prime(89) == 97", "assert next_prime(97) == 101", "assert next_prime(100) == 101", "assert next_prime(1000) == 1009", "assert next_prime(104729) == 104743"], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than a given number.", "code": "def next_power_of_two(N):\n    power = 1\n    while power <= N:\n        power *= 2\n    return power", "task_id": "244_06cd89c4-cc1c-4cff-85c6-45a3d3b5bf9d", "test_setup_code": "", "test_list": ["assert next_power_of_two(0) == 1", "assert next_power_of_two(1) == 2", "assert next_power_of_two(2) == 4", "assert next_power_of_two(3) == 4", "assert next_power_of_two(4) == 8", "assert next_power_of_two(5) == 8", "assert next_power_of_two(15) == 16", "assert next_power_of_two(16) == 32", "assert next_power_of_two(31) == 32", "assert next_power_of_two(32) == 64", "assert next_power_of_two(63) == 64", "assert next_power_of_two(64) == 128", "assert next_power_of_two(127) == 128", "assert next_power_of_two(128) == 256", "assert next_power_of_two(255) == 256"], "challenge_test_list": []}
{"text": "Write a python function to find the next even number greater than a given number.", "code": "def next_even(N):\n    return N + 2 if N % 2 == 0 else N + 1", "task_id": "244_8804a263-9572-4c59-8656-611dbe1ea3e9", "test_setup_code": "", "test_list": ["assert next_even(1) == 2", "assert next_even(2) == 4", "assert next_even(0) == 2", "assert next_even(-1) == 0", "assert next_even(-2) == 0", "assert next_even(100) == 102", "assert next_even(101) == 102", "assert next_even(999) == 1000", "assert next_even(1000) == 1002", "assert next_even(-100) == -98", "assert next_even(-101) == -100", "assert next_even(2147483646) == 2147483648", "assert next_even(2147483647) == 2147483648", "assert next_even(-2147483648) == -2147483646", "assert next_even(-2147483647) == -2147483646"], "challenge_test_list": []}
{"text": "Write a python function to find the next odd number greater than a given number.", "code": "def next_odd(N):\n    return N + 1 if N % 2 == 0 else N + 2", "task_id": "244_485afb3f-814e-498a-95e6-0d6b025f0ff6", "test_setup_code": "", "test_list": ["assert next_odd(2) == 3", "assert next_odd(3) == 5", "assert next_odd(0) == 1", "assert next_odd(-1) == 1", "assert next_odd(-2) == -1", "assert next_odd(100) == 101", "assert next_odd(101) == 103", "assert next_odd(999) == 1001", "assert next_odd(1000) == 1001", "assert next_odd(-1000) == -999", "assert next_odd(-999) == -997", "assert next_odd(1) == 3", "assert next_odd(50) == 51", "assert next_odd(51) == 53", "assert next_odd(123456) == 123457"], "challenge_test_list": []}
{"text": "Write a python function to find the next multiple of five greater than a given number.", "code": "def next_multiple_of_five(N):\n    return (N // 5 + 1) * 5", "task_id": "244_93505729-c951-4faf-ad6b-3f01869a9716", "test_setup_code": "", "test_list": ["assert next_multiple_of_five(0) == 5", "assert next_multiple_of_five(1) == 5", "assert next_multiple_of_five(4) == 5", "assert next_multiple_of_five(5) == 10", "assert next_multiple_of_five(6) == 10", "assert next_multiple_of_five(9) == 10", "assert next_multiple_of_five(10) == 15", "assert next_multiple_of_five(14) == 15", "assert next_multiple_of_five(15) == 20", "assert next_multiple_of_five(20) == 25", "assert next_multiple_of_five(21) == 25", "assert next_multiple_of_five(25) == 30", "assert next_multiple_of_five(99) == 100", "assert next_multiple_of_five(100) == 105", "assert next_multiple_of_five(101) == 105"], "challenge_test_list": []}
{"text": "Write a python function to find the next palindrome number greater than a given number.", "code": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef next_palindrome(N):\n    N += 1\n    while not is_palindrome(N):\n        N += 1\n    return N", "task_id": "244_4247436b-b1a9-41cc-b501-17363c78e15e", "test_setup_code": "", "test_list": ["assert next_palindrome(123) == 131", "assert next_palindrome(1) == 2", "assert next_palindrome(9) == 11", "assert next_palindrome(11) == 22", "assert next_palindrome(12321) == 12421", "assert next_palindrome(999) == 1001", "assert next_palindrome(10) == 11", "assert next_palindrome(88) == 99", "assert next_palindrome(808) == 818", "assert next_palindrome(100) == 101", "assert next_palindrome(2002) == 2112", "assert next_palindrome(1234) == 1331", "assert next_palindrome(0) == 1", "assert next_palindrome(444) == 454", "assert next_palindrome(1221) == 1331"], "challenge_test_list": []}
{"text": "Write a python function to find the next number that is either a perfect square or a perfect cube greater than a given number.", "code": "import math\n\ndef is_perfect_square(num):\n    return int(math.sqrt(num)) ** 2 == num\n\n\ndef is_perfect_cube(num):\n    return int(num ** (1/3)) ** 3 == num\n\n\ndef next_perfect_square_or_cube(N):\n    N += 1\n    while not (is_perfect_square(N) or is_perfect_cube(N)):\n        N += 1\n    return N", "task_id": "244_6fcb4bd7-3e09-4b1c-9c1f-420c510a6ba0", "test_setup_code": "", "test_list": ["assert next_perfect_square_or_cube(0) == 1", "assert next_perfect_square_or_cube(1) == 4", "assert next_perfect_square_or_cube(2) == 4", "assert next_perfect_square_or_cube(3) == 4", "assert next_perfect_square_or_cube(4) == 8", "assert next_perfect_square_or_cube(7) == 8", "assert next_perfect_square_or_cube(8) == 9", "assert next_perfect_square_or_cube(9) == 16", "assert next_perfect_square_or_cube(15) == 16", "assert next_perfect_square_or_cube(16) == 25", "assert next_perfect_square_or_cube(24) == 25", "assert next_perfect_square_or_cube(25) == 27", "assert next_perfect_square_or_cube(26) == 27", "assert next_perfect_square_or_cube(27) == 36", "assert next_perfect_square_or_cube(35) == 36"], "challenge_test_list": []}
{"text": "Write a python function to find the next happy number greater than a given number.", "code": "def is_happy_number(num):\n    seen = set()\n    while num != 1 and num not in seen:\n        seen.add(num)\n        num = sum(int(digit) ** 2 for digit in str(num))\n    return num == 1\n\n\ndef next_happy_number(N):\n    N += 1\n    while not is_happy_number(N):\n        N += 1\n    return N", "task_id": "244_7a6861dc-b446-4858-8f3c-a764e72d6e62", "test_setup_code": "", "test_list": ["assert next_happy_number(1) == 7", "assert next_happy_number(7) == 10", "assert next_happy_number(10) == 13", "assert next_happy_number(19) == 23", "assert next_happy_number(23) == 28", "assert next_happy_number(28) == 31", "assert next_happy_number(31) == 32", "assert next_happy_number(32) == 44", "assert next_happy_number(44) == 49", "assert next_happy_number(49) == 68", "assert next_happy_number(68) == 70", "assert next_happy_number(70) == 79", "assert next_happy_number(79) == 82", "assert next_happy_number(82) == 86", "assert next_happy_number(86) == 91"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to k times the previous element but less than or equal to m.", "code": "def count_sequences(m, n, k):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i // k][j - 1]\n\treturn T[m][n]", "task_id": "239_fb5695d7-69c3-41c0-b5cd-7e783a84b647", "test_setup_code": "", "test_list": ["assert count_sequences(5, 3, 2) == 5", "assert count_sequences(10, 2, 3) == 10", "assert count_sequences(1, 1, 1) == 1", "assert count_sequences(0, 1, 1) == 0", "assert count_sequences(10, 3, 1) == 220", "assert count_sequences(7, 4, 2) == 3", "assert count_sequences(5, 5, 2) == 0", "assert count_sequences(15, 3, 3) == 15", "assert count_sequences(20, 4, 2) == 35", "assert count_sequences(50, 5, 3) == 0", "assert count_sequences(100, 6, 4) == 0", "assert count_sequences(25, 3, 5) == 25", "assert count_sequences(30, 4, 2) == 105", "assert count_sequences(8, 2, 4) == 8", "assert count_sequences(12, 3, 2) == 12"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is strictly greater than the previous element but less than or equal to m.", "code": "def count_increasing_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[m][n]", "task_id": "239_e0702ad9-45c4-423a-978a-077eed93b7ff", "test_setup_code": "", "test_list": ["assert count_increasing_sequences(5, 3) == 10", "assert count_increasing_sequences(3, 2) == 3", "assert count_increasing_sequences(10, 1) == 10", "assert count_increasing_sequences(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is strictly less than the previous element but greater than or equal to 1.", "code": "def count_decreasing_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[m][n]", "task_id": "239_66aaed55-5bce-4360-b380-ea02569e2051", "test_setup_code": "", "test_list": ["assert count_decreasing_sequences(5, 3) == 10", "assert count_decreasing_sequences(4, 2) == 6", "assert count_decreasing_sequences(3, 1) == 3", "assert count_decreasing_sequences(3, 3) == 1", "assert count_decreasing_sequences(2, 2) == 1", "assert count_decreasing_sequences(1, 1) == 1", "assert count_decreasing_sequences(0, 0) == 0", "assert count_decreasing_sequences(5, 0) == 0", "assert count_decreasing_sequences(0, 5) == 0", "assert count_decreasing_sequences(10, 3) == 120", "assert count_decreasing_sequences(6, 4) == 15", "assert count_decreasing_sequences(7, 2) == 21", "assert count_decreasing_sequences(8, 5) == 56", "assert count_decreasing_sequences(9, 6) == 84", "assert count_decreasing_sequences(10, 1) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is an even number and less than or equal to m.", "code": "def count_even_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(0, m + 1, 2):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i // 2 + 1\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 2][j] + T[i // 2][j - 1]\n\treturn T[m][n]", "task_id": "239_ace4fd90-9e5c-46dd-bd05-de99db31cc37", "test_setup_code": "", "test_list": ["assert count_even_sequences(2, 1) == 2", "assert count_even_sequences(4, 2) == 3", "assert count_even_sequences(6, 3) == 4", "assert count_even_sequences(0, 0) == 0", "assert count_even_sequences(10, 5) == 6", "assert count_even_sequences(8, 4) == 5", "assert count_even_sequences(1, 1) == 1", "assert count_even_sequences(2, 2) == 1", "assert count_even_sequences(4, 1) == 3", "assert count_even_sequences(6, 2) == 4", "assert count_even_sequences(8, 3) == 5", "assert count_even_sequences(10, 4) == 6", "assert count_even_sequences(12, 5) == 7", "assert count_even_sequences(14, 6) == 8", "assert count_even_sequences(16, 7) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is an odd number and less than or equal to m.", "code": "def count_odd_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(1, m + 1, 2):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = (i + 1) // 2\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 2][j] + T[i // 2][j - 1]\n\treturn T[m][n]", "task_id": "239_046baed6-a716-4147-b5e3-93c917e4d139", "test_setup_code": "", "test_list": ["assert count_odd_sequences(5, 1) == 3", "assert count_odd_sequences(5, 2) == 4", "assert count_odd_sequences(5, 3) == 1", "assert count_odd_sequences(1, 1) == 1", "assert count_odd_sequences(1, 2) == 0", "assert count_odd_sequences(3, 1) == 2", "assert count_odd_sequences(3, 2) == 1", "assert count_odd_sequences(7, 2) == 9", "assert count_odd_sequences(7, 3) == 10", "assert count_odd_sequences(0, 1) == 0", "assert count_odd_sequences(9, 1) == 5", "assert count_odd_sequences(9, 2) == 16", "assert count_odd_sequences(9, 3) == 25", "assert count_odd_sequences(9, 4) == 10", "assert count_odd_sequences(11, 3) == 36"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a prime number and less than or equal to m.", "code": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef count_prime_sequences(m, n):\n\tprimes = [i for i in range(2, m + 1) if is_prime(i)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(primes) + 1)]\n\tfor i in range(len(primes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(primes)][n]", "task_id": "239_c3ea2465-d178-48ca-8198-1aef3a1add0f", "test_setup_code": "", "test_list": ["assert count_prime_sequences(10, 1) == 4", "assert count_prime_sequences(10, 2) == 6", "assert count_prime_sequences(10, 3) == 4", "assert count_prime_sequences(10, 4) == 1", "assert count_prime_sequences(5, 1) == 3", "assert count_prime_sequences(5, 2) == 3", "assert count_prime_sequences(5, 3) == 1", "assert count_prime_sequences(2, 1) == 1", "assert count_prime_sequences(2, 2) == 0", "assert count_prime_sequences(20, 1) == 8", "assert count_prime_sequences(20, 2) == 28", "assert count_prime_sequences(20, 3) == 56", "assert count_prime_sequences(1, 1) == 0", "assert count_prime_sequences(11, 2) == 10", "assert count_prime_sequences(30, 3) == 120"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a Fibonacci number and less than or equal to m.", "code": "def generate_fibonacci_up_to(m):\n\tfib = [0, 1]\n\twhile True:\n\t\tnext_fib = fib[-1] + fib[-2]\n\t\tif next_fib > m:\n\t\t\tbreak\n\t\tfib.append(next_fib)\n\treturn fib[1:] # Exclude 0\n\ndef count_fibonacci_sequences(m, n):\n\tfibs = generate_fibonacci_up_to(m)\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(fibs) + 1)]\n\tfor i in range(len(fibs) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(fibs)][n]", "task_id": "239_df5fd3b0-362e-491a-b408-6c2e990fe214", "test_setup_code": "", "test_list": ["assert count_fibonacci_sequences(10, 1) == 5", "assert count_fibonacci_sequences(10, 2) == 10", "assert count_fibonacci_sequences(10, 3) == 10", "assert count_fibonacci_sequences(21, 2) == 15", "assert count_fibonacci_sequences(21, 3) == 35", "assert count_fibonacci_sequences(21, 4) == 35", "assert count_fibonacci_sequences(34, 2) == 21", "assert count_fibonacci_sequences(34, 3) == 56", "assert count_fibonacci_sequences(34, 4) == 126", "assert count_fibonacci_sequences(55, 3) == 84", "assert count_fibonacci_sequences(55, 4) == 210", "assert count_fibonacci_sequences(1, 1) == 1", "assert count_fibonacci_sequences(1, 2) == 0", "assert count_fibonacci_sequences(0, 1) == 0", "assert count_fibonacci_sequences(144, 5) == 792"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a palindromic number and less than or equal to m.", "code": "def is_palindrome(num):\n\treturn str(num) == str(num)[::-1]\n\ndef count_palindromic_sequences(m, n):\n\tpalindromes = [i for i in range(1, m + 1) if is_palindrome(i)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(palindromes) + 1)]\n\tfor i in range(len(palindromes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(palindromes)][n]", "task_id": "239_664c7115-cb8b-4dca-8144-966a1a5281bd", "test_setup_code": "", "test_list": ["assert count_palindromic_sequences(1, 1) == 1", "assert count_palindromic_sequences(10, 1) == 9", "assert count_palindromic_sequences(10, 2) == 36", "assert count_palindromic_sequences(100, 1) == 18", "assert count_palindromic_sequences(100, 2) == 153", "assert count_palindromic_sequences(100, 3) == 816", "assert count_palindromic_sequences(9, 1) == 9", "assert count_palindromic_sequences(9, 2) == 36", "assert count_palindromic_sequences(11, 2) == 45", "assert count_palindromic_sequences(22, 2) == 105", "assert count_palindromic_sequences(22, 3) == 560", "assert count_palindromic_sequences(101, 1) == 19", "assert count_palindromic_sequences(101, 2) == 171", "assert count_palindromic_sequences(101, 3) == 969", "assert count_palindromic_sequences(50, 2) == 78"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a perfect square and less than or equal to m.", "code": "def count_square_sequences(m, n):\n\tsquares = [i * i for i in range(1, int(m ** 0.5) + 1)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(squares) + 1)]\n\tfor i in range(len(squares) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(squares)][n]", "task_id": "239_9f564d2c-c0d9-473b-9688-f24320728999", "test_setup_code": "", "test_list": ["assert count_square_sequences(1, 1) == 1", "assert count_square_sequences(4, 1) == 2", "assert count_square_sequences(9, 1) == 3", "assert count_square_sequences(16, 2) == 6", "assert count_square_sequences(25, 2) == 10", "assert count_square_sequences(36, 3) == 20", "assert count_square_sequences(49, 3) == 35", "assert count_square_sequences(64, 4) == 70", "assert count_square_sequences(81, 4) == 126", "assert count_square_sequences(100, 5) == 252", "assert count_square_sequences(1, 0) == 0", "assert count_square_sequences(0, 1) == 0", "assert count_square_sequences(100, 0) == 0", "assert count_square_sequences(4, 2) == 1", "assert count_square_sequences(9, 2) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a perfect cube and less than or equal to m.", "code": "def count_cube_sequences(m, n):\n\tcubes = [i * i * i for i in range(1, int(m ** (1/3)) + 1)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(cubes) + 1)]\n\tfor i in range(len(cubes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(cubes)][n]", "task_id": "239_ad5f1a13-3d9f-4604-816b-76f5117dee9d", "test_setup_code": "", "test_list": ["assert count_cube_sequences(1, 1) == 1", "assert count_cube_sequences(8, 1) == 2", "assert count_cube_sequences(27, 1) == 3", "assert count_cube_sequences(64, 1) == 4", "assert count_cube_sequences(64, 2) == 10", "assert count_cube_sequences(125, 2) == 15", "assert count_cube_sequences(125, 3) == 35", "assert count_cube_sequences(216, 2) == 21", "assert count_cube_sequences(216, 3) == 56", "assert count_cube_sequences(1000, 3) == 84", "assert count_cube_sequences(1000, 4) == 210", "assert count_cube_sequences(27, 0) == 0", "assert count_cube_sequences(0, 1) == 0", "assert count_cube_sequences(1, 2) == 0", "assert count_cube_sequences(8, 3) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray for the given array.", "code": "def find_max_sum_subarray(arr: list[int]) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "245_489a74ef-d3a2-4c46-8512-76cd2f194fd3", "test_setup_code": "", "test_list": ["assert find_max_sum_subarray([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9", "assert find_max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7", "assert find_max_sum_subarray([1, 2, 3, 4, 5]) == 15", "assert find_max_sum_subarray([-1, -2, -3, -4]) == -1", "assert find_max_sum_subarray([5, -1, -2, 6, -1, 4]) == 11", "assert find_max_sum_subarray([0, 0, 0, 0, 0]) == 0", "assert find_max_sum_subarray([1]) == 1", "assert find_max_sum_subarray([-1]) == -1", "assert find_max_sum_subarray([2, -1, 2, 3, 4, -5]) == 10", "assert find_max_sum_subarray([-2, -1, -3, -4, -1, -2, -1, -5, -4]) == -1", "assert find_max_sum_subarray([3, -2, 5, -1]) == 6", "assert find_max_sum_subarray([1, 2, -1, 2, -3, 2, -5, 2]) == 4", "assert find_max_sum_subarray([10, -3, 1, -2, 20, -1]) == 25", "assert find_max_sum_subarray([1, -1, 1, -1, 1, -1, 1, -1]) == 1", "assert find_max_sum_subarray([100, -90, 80, -70, 60, -50, 40, -30, 20, -10]) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of any contiguous subarray for the given array.", "code": "def find_max_product_subarray(arr: list[int]) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            continue\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "task_id": "245_88ea6ce1-b831-45cd-ac2d-e2a743fd5194", "test_setup_code": "", "test_list": ["assert find_max_product_subarray([2, 3, -2, 4]) == 6", "assert find_max_product_subarray([-2, 0, -1]) == 0", "assert find_max_product_subarray([-2, -3, 0, -2, -40]) == 80", "assert find_max_product_subarray([0, 2, -1, 1, -3, 4, -2]) == 48"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence for the given array.", "code": "def find_longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "245_059a2cae-af84-4912-aaf0-d544288c292b", "test_setup_code": "", "test_list": ["assert find_longest_increasing_subsequence([]) == 0", "assert find_longest_increasing_subsequence([10]) == 1", "assert find_longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4", "assert find_longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert find_longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert find_longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6", "assert find_longest_increasing_subsequence([2, 2, 2, 2, 2]) == 1", "assert find_longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9", "assert find_longest_increasing_subsequence([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert find_longest_increasing_subsequence([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5", "assert find_longest_increasing_subsequence([1, 3, 2, 4, 3, 5]) == 4", "assert find_longest_increasing_subsequence([1, 2, 4, 3, 5, 4, 6, 5, 7]) == 6", "assert find_longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert find_longest_increasing_subsequence([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1", "assert find_longest_increasing_subsequence([1, 100, 2, 99, 3, 98, 4, 97, 5, 96]) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of non-adjacent elements in the given array.", "code": "def find_max_sum_non_adjacent_subsequence(arr: list[int]) -> int:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)", "task_id": "245_3e971c74-edb3-4bdc-bdc9-df78ad079bfb", "test_setup_code": "", "test_list": ["assert find_max_sum_non_adjacent_subsequence([3, 2, 5, 10, 7]) == 15", "assert find_max_sum_non_adjacent_subsequence([3, 2, 7, 10]) == 13", "assert find_max_sum_non_adjacent_subsequence([5, 5, 10, 100, 10, 5]) == 110", "assert find_max_sum_non_adjacent_subsequence([3, 2, 5, 10, 7, 8, 6, 4]) == 27", "assert find_max_sum_non_adjacent_subsequence([3, 2, 5, 10, 7, 8, 6, 4, 1]) == 27", "assert find_max_sum_non_adjacent_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert find_max_sum_non_adjacent_subsequence([1, 20, 3]) == 20", "assert find_max_sum_non_adjacent_subsequence([5, 1, 1, 5]) == 10", "assert find_max_sum_non_adjacent_subsequence([1, 2, 3, 1]) == 4", "assert find_max_sum_non_adjacent_subsequence([2, 1, 4, 9, 2]) == 11", "assert find_max_sum_non_adjacent_subsequence([1, 0, 3, 9, 2]) == 10", "assert find_max_sum_non_adjacent_subsequence([0, 0, 0, 0, 0]) == 0", "assert find_max_sum_non_adjacent_subsequence([1, 2, 3, 0, 2, 3, 0, 2, 3]) == 10", "assert find_max_sum_non_adjacent_subsequence([10, 5, 15, 20, 2, 30]) == 55", "assert find_max_sum_non_adjacent_subsequence([5, 10, 10, 100, 5, 6]) == 116"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any circular subarray for the given array.", "code": "def find_max_sum_circular_subarray(arr: list[int]) -> int:\n    def kadane(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    max_kadane = kadane(arr)\n    max_wrap = sum(arr) - kadane([-x for x in arr])\n    return max(max_kadane, max_wrap)", "task_id": "245_0ff13ef5-f61f-4016-8a8d-9daba39d52cb", "test_setup_code": "", "test_list": ["assert find_max_sum_circular_subarray([1, -2, 3, -2]) == 3", "assert find_max_sum_circular_subarray([5, -3, 5]) == 10", "assert find_max_sum_circular_subarray([3, -1, 2, -1]) == 4", "assert find_max_sum_circular_subarray([3, -2, 2, -3]) == 3", "assert find_max_sum_circular_subarray([-2, -3, -1]) == -1", "assert find_max_sum_circular_subarray([1, 2, 3, 4, 5]) == 15", "assert find_max_sum_circular_subarray([-1, -2, -3, -4, -5]) == -1", "assert find_max_sum_circular_subarray([0, 0, 0, 0]) == 0", "assert find_max_sum_circular_subarray([8, -1, -3, 8]) == 16", "assert find_max_sum_circular_subarray([10, -12, 11, -5, 6]) == 17", "assert find_max_sum_circular_subarray([1, -1, 1, -1, 1, -1, 1]) == 2", "assert find_max_sum_circular_subarray([100, -1, -1, -1, -1, -1, -1, 100]) == 194", "assert find_max_sum_circular_subarray([1, 2, 3, -2, 5]) == 9", "assert find_max_sum_circular_subarray([1, 2, 3, -2, 5, -3, 4]) == 10", "assert find_max_sum_circular_subarray([9, -4, -7, 9]) == 18"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any subsequence for the given array.", "code": "def find_max_sum_subsequence(arr: list[int]) -> int:\n    max_sum = 0\n    for num in arr:\n        if num > 0:\n            max_sum += num\n    return max_sum", "task_id": "245_31f857cb-ff24-4cb1-bea4-2d14b47c5ed9", "test_setup_code": "", "test_list": ["assert find_max_sum_subsequence([1, 2, 3, 4, 5]) == 15", "assert find_max_sum_subsequence([-1, -2, -3, -4, -5]) == 0", "assert find_max_sum_subsequence([0, 0, 0, 0, 0]) == 0", "assert find_max_sum_subsequence([1, -2, 3, -4, 5]) == 9", "assert find_max_sum_subsequence([-1, 2, -3, 4, -5]) == 6", "assert find_max_sum_subsequence([100, -1, 200, -2, 300]) == 600", "assert find_max_sum_subsequence([1]) == 1", "assert find_max_sum_subsequence([-1]) == 0", "assert find_max_sum_subsequence([0]) == 0", "assert find_max_sum_subsequence([1, 2, 3, -1, -2, -3, 4, 5, 6]) == 21", "assert find_max_sum_subsequence([-1, -2, -3, 0, 1, 2, 3]) == 6", "assert find_max_sum_subsequence([-1, -2, -3, -4, 5]) == 5", "assert find_max_sum_subsequence([10, -20, 30, -40, 50]) == 90", "assert find_max_sum_subsequence([0, 1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 15", "assert find_max_sum_subsequence([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of any contiguous subarray for the given array.", "code": "def find_min_sum_subarray(arr: list[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "task_id": "245_cd306f98-5314-4b28-b92c-343264bdee60", "test_setup_code": "", "test_list": ["assert find_min_sum_subarray([3, -4, 2, -3, -1, 7, -5]) == -6", "assert find_min_sum_subarray([1, 2, 3, 4, 5]) == 1", "assert find_min_sum_subarray([-1, -2, -3, -4, -5]) == -15", "assert find_min_sum_subarray([0, 0, 0, 0, 0]) == 0", "assert find_min_sum_subarray([1, -1, 1, -1, 1, -1]) == -1", "assert find_min_sum_subarray([10, -3, -4, 7, -1, 2, -5]) == -5", "assert find_min_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == -6", "assert find_min_sum_subarray([1, -2, 3, 10, -4, 7, 2, -5]) == -5", "assert find_min_sum_subarray([2, 3, 4, 5, -10, 6, 7, 8]) == -10", "assert find_min_sum_subarray([-1, -1, -1, -1, -1]) == -5", "assert find_min_sum_subarray([1]) == 1", "assert find_min_sum_subarray([-1]) == -1", "assert find_min_sum_subarray([0]) == 0", "assert find_min_sum_subarray([100, -100, 100, -100, 100, -100]) == -100", "assert find_min_sum_subarray([1, 2, -8, 3, 4]) == -8"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of two non-overlapping subarrays for the given array.", "code": "def find_max_sum_of_two_non_overlapping_subarrays(arr: list[int]) -> int:\n    def max_subarray(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    max_sum = float('-inf')\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, max_subarray(arr[:i]) + max_subarray(arr[i:]))\n    return max_sum", "task_id": "245_2185ba03-97ad-4c47-ad67-3b3c7f321321", "test_setup_code": "", "test_list": ["assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, 3, 4, 5]) == 14", "assert find_max_sum_of_two_non_overlapping_subarrays([-1, -2, -3, -4, -5]) == -3", "assert find_max_sum_of_two_non_overlapping_subarrays([1, -2, 3, -4, 5]) == 8", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, -1, 2, 3, -1, 2]) == 10", "assert find_max_sum_of_two_non_overlapping_subarrays([5, -2, 3, -1, 2, -1, 4]) == 13", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2]) == 3", "assert find_max_sum_of_two_non_overlapping_subarrays([1, -1, 1, -1, 1, -1, 1]) == 2", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, 3, -2, 5]) == 11", "assert find_max_sum_of_two_non_overlapping_subarrays([-1, 3, 4, -2, 5, -3, 2]) == 12", "assert find_max_sum_of_two_non_overlapping_subarrays([0, 0, 0, 0, 0]) == 0", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, 3, 4, -10, 5, 6]) == 16", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, -1, 2, -1, 2, -1, 2]) == 8", "assert find_max_sum_of_two_non_overlapping_subarrays([5, 5, 5, 5, 5, 5, 5]) == 20", "assert find_max_sum_of_two_non_overlapping_subarrays([1, 2, 3, 4, 5, -15, 6, 7, 8, 9]) == 30", "assert find_max_sum_of_two_non_overlapping_subarrays([10, -1, 2, 3, -4, 5, 6, -7, 8, 9]) == 29"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray with at most one deletion for the given array.", "code": "def find_max_sum_subarray_with_one_deletion(arr: list[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_end_here = [0] * n\n    max_start_here = [0] * n\n    max_end_here[0] = arr[0]\n    for i in range(1, n):\n        max_end_here[i] = max(arr[i], max_end_here[i - 1] + arr[i])\n    max_start_here[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        max_start_here[i] = max(arr[i], max_start_here[i + 1] + arr[i])\n    max_sum = max(max_end_here)\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, max_end_here[i - 1] + max_start_here[i + 1])\n    return max_sum", "task_id": "245_1e4ae13f-0952-484d-8fc0-f40d74a41860", "test_setup_code": "", "test_list": ["assert find_max_sum_subarray_with_one_deletion([1, -2, 0, 3]) == 4", "assert find_max_sum_subarray_with_one_deletion([1, -2, -2, 3]) == 3", "assert find_max_sum_subarray_with_one_deletion([-1, -1, -1, -1]) == -1", "assert find_max_sum_subarray_with_one_deletion([1, 2, 3, 4, 5]) == 15", "assert find_max_sum_subarray_with_one_deletion([5, -1, 5, -1, 5]) == 14", "assert find_max_sum_subarray_with_one_deletion([1, -2, 3, -4, 5, -6, 7]) == 10", "assert find_max_sum_subarray_with_one_deletion([1, -2, 3, -4, 5, -6, 7, -8, 9]) == 11", "assert find_max_sum_subarray_with_one_deletion([-1, -2, -3, -4, -5]) == -1", "assert find_max_sum_subarray_with_one_deletion([1, -1, 1, -1, 1, -1, 1]) == 2", "assert find_max_sum_subarray_with_one_deletion([1]) == 1", "assert find_max_sum_subarray_with_one_deletion([1, -1, 1, -1, 1, -1, 1, -1, 1]) == 2", "assert find_max_sum_subarray_with_one_deletion([1, 2, -1, 2, -1, 2, -1, 2]) == 7", "assert find_max_sum_subarray_with_one_deletion([1, 2, 3, -1, -2, 3, 4]) == 10", "assert find_max_sum_subarray_with_one_deletion([1, 2, 3, -1, -2, 3, 4, -5, 6]) == 12", "assert find_max_sum_subarray_with_one_deletion([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray with at most k deletions for the given array.", "code": "def find_max_sum_subarray_with_k_deletions(arr: list[int], k: int) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[float('-inf')] * (k + 1) for _ in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        for j in range(k + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + arr[i])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])\n    return max(dp[-1])", "task_id": "245_6efa4f90-8308-4301-9d3a-d10a3ffe9635", "test_setup_code": "", "test_list": ["assert find_max_sum_subarray_with_k_deletions([1, -2, 3, 4, -5, 6], 1) == 10", "assert find_max_sum_subarray_with_k_deletions([1, -2, 3, 4, -5, 6], 2) == 12", "assert find_max_sum_subarray_with_k_deletions([-1, -2, -3, -4], 2) == 0", "assert find_max_sum_subarray_with_k_deletions([1, 2, 3, 4], 0) == 10", "assert find_max_sum_subarray_with_k_deletions([1, 2, 3, 4], 1) == 10", "assert find_max_sum_subarray_with_k_deletions([1, 2, 3, 4], 4) == 10", "assert find_max_sum_subarray_with_k_deletions([5, -2, 3, -1, 2], 1) == 9", "assert find_max_sum_subarray_with_k_deletions([5, -2, 3, -1, 2], 2) == 10", "assert find_max_sum_subarray_with_k_deletions([5, -2, 3, -1, 2], 0) == 7", "assert find_max_sum_subarray_with_k_deletions([], 1) == 0", "assert find_max_sum_subarray_with_k_deletions([1], 0) == 1", "assert find_max_sum_subarray_with_k_deletions([1], 1) == 1", "assert find_max_sum_subarray_with_k_deletions([-1, -2, -3, 4], 1) == 4", "assert find_max_sum_subarray_with_k_deletions([-1, -2, -3, 4], 2) == 4", "assert find_max_sum_subarray_with_k_deletions([1, -2, 3, -4, 5, -6, 7], 3) == 14"], "challenge_test_list": []}
{"text": "Write a function for computing cube roots using the babylonian method.", "code": "def babylonian_cuberoot(number):\n    if number == 0:\n        return 0\n    g = number / 3.0\n    g2 = g + 1\n    while g != g2:\n        n = number / (g * g)\n        g2 = g\n        g = (2 * g + n) / 3\n    return g", "task_id": "246_e660db87-69d1-498f-8fef-07f22b7df42d", "test_setup_code": "", "test_list": ["assert babylonian_cuberoot(0) == 0", "assert abs(babylonian_cuberoot(1) - 1) < 1e-6", "assert abs(babylonian_cuberoot(8) - 2) < 1e-6", "assert abs(babylonian_cuberoot(27) - 3) < 1e-6", "assert abs(babylonian_cuberoot(64) - 4) < 1e-6", "assert abs(babylonian_cuberoot(125) - 5) < 1e-6", "assert abs(babylonian_cuberoot(1000) - 10) < 1e-6", "assert abs(babylonian_cuberoot(0.001) - 0.1) < 1e-6", "assert abs(babylonian_cuberoot(0.000001) - 0.01) < 1e-6", "assert abs(babylonian_cuberoot(-1) + 1) < 1e-6", "assert abs(babylonian_cuberoot(-8) + 2) < 1e-6", "assert abs(babylonian_cuberoot(-27) + 3) < 1e-6", "assert abs(babylonian_cuberoot(-64) + 4) < 1e-6", "assert abs(babylonian_cuberoot(2) - 1.259921) < 1e-6", "assert abs(babylonian_cuberoot(1000000) - 100) < 1e-6"], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method with a specified precision.", "code": "def babylonian_squareroot_with_precision(number, precision):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    while True:\n        n = number / g\n        g2 = (g + n) / 2\n        if abs(g - g2) < precision:\n            return g2\n        g = g2", "task_id": "246_ec87649d-ad63-479b-a634-0aebd1082a5c", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_with_precision(0, 0.0001) == 0", "assert babylonian_squareroot_with_precision(1, 0.0001) == 1", "assert babylonian_squareroot_with_precision(4, 0.0001) == 2", "assert babylonian_squareroot_with_precision(9, 0.0001) == 3", "assert babylonian_squareroot_with_precision(16, 0.0001) == 4", "assert babylonian_squareroot_with_precision(25, 0.0001) == 5", "assert babylonian_squareroot_with_precision(0.25, 0.0001) == 0.5", "assert babylonian_squareroot_with_precision(2, 0.0001) == 1.414213562373095", "assert babylonian_squareroot_with_precision(0.01, 0.0001) == 0.1", "assert babylonian_squareroot_with_precision(100, 0.0001) == 10", "assert babylonian_squareroot_with_precision(0.0001, 0.0001) == 0.01", "assert babylonian_squareroot_with_precision(123456789, 0.0001) == 11111.111060555555", "assert babylonian_squareroot_with_precision(50, 0.0001) == 7.0710678118654755", "assert babylonian_squareroot_with_precision(0.000001, 0.0001) == 0.001", "assert babylonian_squareroot_with_precision(1e-10, 0.0001) == 1e-05"], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method with a specified number of iterations.", "code": "def babylonian_squareroot_iter(number, iterations):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    for _ in range(iterations):\n        n = number / g\n        g = (g + n) / 2\n    return g", "task_id": "246_d5a80ff8-b17a-4083-a9c3-7bcb2fea9005", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_iter(4, 10) == 2.0", "assert babylonian_squareroot_iter(16, 5) == 4.0", "assert babylonian_squareroot_iter(0, 10) == 0", "assert babylonian_squareroot_iter(2, 10) == 1.414213562373095"], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method that can handle negative inputs by returning complex numbers.", "code": "def babylonian_squareroot_negative(number):\n    if number == 0:\n        return 0\n    if number < 0:\n        return complex(0, babylonian_squareroot(-number))\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_aa2da53d-a620-4fef-95bc-d919cff6c0e7", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_negative(0) == 0", "assert babylonian_squareroot_negative(1) == 1", "assert babylonian_squareroot_negative(4) == 2", "assert babylonian_squareroot_negative(9) == 3", "assert babylonian_squareroot_negative(16) == 4", "assert babylonian_squareroot_negative(25) == 5", "assert babylonian_squareroot_negative(-1) == complex(0, 1)", "assert babylonian_squareroot_negative(-4) == complex(0, 2)", "assert babylonian_squareroot_negative(-9) == complex(0, 3)", "assert babylonian_squareroot_negative(-16) == complex(0, 4)", "assert babylonian_squareroot_negative(-25) == complex(0, 5)", "assert babylonian_squareroot_negative(2) == 1.414213562373095", "assert babylonian_squareroot_negative(0.25) == 0.5", "assert babylonian_squareroot_negative(-0.25) == complex(0, 0.5)", "assert babylonian_squareroot_negative(1000000) == 1000"], "challenge_test_list": []}
{"text": "Write a function for computing square roots of a list of numbers using the babylonian method.", "code": "def babylonian_squareroot_list(numbers):\n    def babylonian_squareroot(number):\n        if number == 0:\n            return 0\n        g = number / 2.0\n        g2 = g + 1\n        while g != g2:\n            n = number / g\n            g2 = g\n            g = (g + n) / 2\n        return g\n    return [babylonian_squareroot(num) for num in numbers]", "task_id": "246_5cd0d3f6-6637-48bf-aebb-1eaf94019211", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_list([4, 9, 16]) == [2.0, 3.0, 4.0]", "assert babylonian_squareroot_list([1, 25, 36]) == [1.0, 5.0, 6.0]", "assert babylonian_squareroot_list([0, 49, 64]) == [0.0, 7.0, 8.0]", "assert babylonian_squareroot_list([0.25, 0.01, 0.0001]) == [0.5, 0.1, 0.01]", "assert babylonian_squareroot_list([100, 121, 144]) == [10.0, 11.0, 12.0]", "assert babylonian_squareroot_list([2, 3, 5]) == [1.414213562373095, 1.7320508075688772, 2.23606797749979]", "assert babylonian_squareroot_list([10, 15, 20]) == [3.1622776601683795, 3.872983346207417, 4.47213595499958]", "assert babylonian_squareroot_list([0.5, 0.75, 0.9]) == [0.7071067811865476, 0.8660254037844386, 0.9486832980505138]", "assert babylonian_squareroot_list([1000, 10000, 100000]) == [31.622776601683793, 100.0, 316.22776601683796]", "assert babylonian_squareroot_list([0.000001, 0.00000001, 0.0000000001]) == [0.001, 0.0001, 1e-05]", "assert babylonian_squareroot_list([81, 121, 169]) == [9.0, 11.0, 13.0]", "assert babylonian_squareroot_list([0.04, 0.09, 0.16]) == [0.2, 0.3, 0.4]", "assert babylonian_squareroot_list([0.0004, 0.0009, 0.0016]) == [0.02, 0.03, 0.04]", "assert babylonian_squareroot_list([0.00000004, 0.00000009, 0.00000016]) == [0.0002, 0.0003, 0.0004]", "assert babylonian_squareroot_list([0.0000000004, 0.0000000009, 0.0000000016]) == [2e-05, 3e-05, 4e-05]"], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the sum of two numbers using the babylonian method.", "code": "def babylonian_squareroot_sum(number1, number2):\n    number = number1 + number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_19d478e2-176e-4632-8a3c-8ccd795d13bf", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_sum(4, 5) == 3.0", "assert babylonian_squareroot_sum(0, 0) == 0.0", "assert babylonian_squareroot_sum(1, 3) == 2.0", "assert babylonian_squareroot_sum(2, 8) == 3.1622776601683795"], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the difference of two numbers using the babylonian method.", "code": "def babylonian_squareroot_diff(number1, number2):\n    number = abs(number1 - number2)\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_204206f7-f822-4658-a340-88bb666b13a7", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_diff(9, 4) == 2.23606797749979", "assert babylonian_squareroot_diff(16, 9) == 2.6457513110645907", "assert babylonian_squareroot_diff(25, 0) == 5.0", "assert babylonian_squareroot_diff(0, 25) == 5.0", "assert babylonian_squareroot_diff(100, 36) == 8.0", "assert babylonian_squareroot_diff(1, 1) == 0", "assert babylonian_squareroot_diff(0, 0) == 0", "assert babylonian_squareroot_diff(10, 10) == 0", "assert babylonian_squareroot_diff(50, 25) == 5.0", "assert babylonian_squareroot_diff(81, 64) == 4.123105625617661", "assert babylonian_squareroot_diff(1000, 1) == 31.622776601683793", "assert babylonian_squareroot_diff(12345, 12340) == 2.23606797749979", "assert babylonian_squareroot_diff(123456789, 123456780) == 3.0", "assert babylonian_squareroot_diff(1e-10, 0) == 1e-05", "assert babylonian_squareroot_diff(1e10, 1e10 - 1) == 1.0"], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the product of two numbers using the babylonian method.", "code": "def babylonian_squareroot_product(number1, number2):\n    number = number1 * number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_c42ff2d6-5d08-4ce8-aac1-6de7261cd3ce", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_product(0, 0) == 0", "assert babylonian_squareroot_product(1, 1) == 1", "assert babylonian_squareroot_product(2, 8) == 4", "assert babylonian_squareroot_product(3, 12) == 6", "assert babylonian_squareroot_product(4, 9) == 6", "assert babylonian_squareroot_product(5, 5) == 5", "assert babylonian_squareroot_product(6, 6) == 6", "assert babylonian_squareroot_product(7, 7) == 7", "assert babylonian_squareroot_product(8, 2) == 4", "assert babylonian_squareroot_product(9, 4) == 6", "assert babylonian_squareroot_product(10, 10) == 10", "assert babylonian_squareroot_product(0.5, 0.5) == 0.5", "assert babylonian_squareroot_product(0.1, 0.1) == 0.1", "assert babylonian_squareroot_product(100, 100) == 100", "assert babylonian_squareroot_product(1000, 1000) == 1000"], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the division of two numbers using the babylonian method.", "code": "def babylonian_squareroot_division(number1, number2):\n    if number2 == 0:\n        raise ValueError('Division by zero is not allowed')\n    number = number1 / number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_2a88f11a-5a0f-496a-a931-f9bfe085e955", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_division(4, 1) == 2.0", "assert babylonian_squareroot_division(9, 1) == 3.0", "assert babylonian_squareroot_division(16, 4) == 2.0", "assert babylonian_squareroot_division(25, 5) == 2.0", "assert babylonian_squareroot_division(1, 1) == 1.0", "assert babylonian_squareroot_division(0, 1) == 0.0", "assert babylonian_squareroot_division(1, 4) == 0.5", "assert babylonian_squareroot_division(100, 4) == 5.0", "assert babylonian_squareroot_division(81, 9) == 3.0", "assert babylonian_squareroot_division(49, 7) == 2.0", "assert babylonian_squareroot_division(2, 2) == 1.0", "assert babylonian_squareroot_division(2, 1) == 1.414213562373095", "assert babylonian_squareroot_division(0, 5) == 0.0", "assert babylonian_squareroot_division(1000000, 1000) == 31.622776601683793", "assert babylonian_squareroot_division(1, 1000000) == 0.001"], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the average of a list of numbers using the babylonian method.", "code": "def babylonian_squareroot_average(numbers):\n    if not numbers:\n        return 0\n    average = sum(numbers) / len(numbers)\n    if average == 0:\n        return 0\n    g = average / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = average / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_7891bcc5-1631-4b69-a3a7-e2e36877592d", "test_setup_code": "", "test_list": ["assert babylonian_squareroot_average([4, 4, 4, 4]) == 2.0", "assert babylonian_squareroot_average([1, 2, 3, 4, 5]) == 1.7320508075688772", "assert babylonian_squareroot_average([0, 0, 0, 0]) == 0", "assert babylonian_squareroot_average([]) == 0", "assert babylonian_squareroot_average([100]) == 10.0", "assert babylonian_squareroot_average([1, 1, 1, 1, 1]) == 1.0", "assert babylonian_squareroot_average([0, 100]) == 7.0710678118654755", "assert babylonian_squareroot_average([0.25, 0.25, 0.25, 0.25]) == 0.5", "assert babylonian_squareroot_average([-1, 1]) == 0", "assert babylonian_squareroot_average([-1, -1, 4, 4, 4]) == 2.0", "assert babylonian_squareroot_average([0.01, 0.01, 0.01, 0.01]) == 0.1", "assert babylonian_squareroot_average([9, 16, 25, 36, 49]) == 5.0", "assert babylonian_squareroot_average([10000, 10000]) == 100.0", "assert babylonian_squareroot_average([0.1, 0.2, 0.3, 0.4]) == 0.5477225575051661", "assert babylonian_squareroot_average([1, 4, 9, 16, 25]) == 3.3166247903554"], "challenge_test_list": []}
{"text": "Write a function to calculate the geometric sum of n-1.", "code": "def geometric_sum(n):\n  if n < 1:\n    return 1\n  else:\n    return 1 / (2 ** n) + geometric_sum(n - 1)", "task_id": "248_7306f5ec-9511-4b2d-a3b1-c18dc5282e34", "test_setup_code": "", "test_list": ["assert geometric_sum(0) == 1", "assert geometric_sum(1) == 1.5", "assert geometric_sum(2) == 1.75", "assert geometric_sum(3) == 1.875", "assert geometric_sum(4) == 1.9375", "assert geometric_sum(5) == 1.96875", "assert geometric_sum(10) == 1.9990234375", "assert geometric_sum(15) == 1.999969482421875", "assert geometric_sum(20) == 1.9999980926513672", "assert geometric_sum(25) == 1.9999999403953552", "assert geometric_sum(30) == 1.9999999990686774", "assert geometric_sum(50) == 1.9999999999999991", "assert geometric_sum(100) == 2.0", "assert geometric_sum(-1) == 1", "assert geometric_sum(1.5) == 1.5"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of factorials up to n-1.", "code": "def factorial_sum(n):\n  def factorial(x):\n    if x == 0:\n      return 1\n    else:\n      return x * factorial(x - 1)\n  if n < 1:\n    return 1\n  else:\n    return factorial(n) + factorial_sum(n - 1)", "task_id": "248_3a424b0b-411a-4876-99bf-22752b1cc733", "test_setup_code": "", "test_list": ["assert factorial_sum(0) == 1", "assert factorial_sum(1) == 1", "assert factorial_sum(2) == 3", "assert factorial_sum(3) == 9", "assert factorial_sum(4) == 33", "assert factorial_sum(5) == 153", "assert factorial_sum(6) == 873", "assert factorial_sum(7) == 5913", "assert factorial_sum(8) == 46233", "assert factorial_sum(9) == 409113", "assert factorial_sum(10) == 4037913", "assert factorial_sum(11) == 43954713", "assert factorial_sum(12) == 522956313", "assert factorial_sum(13) == 6749977113", "assert factorial_sum(14) == 93928268313"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 Fibonacci numbers.", "code": "def fibonacci_sum(n):\n  def fibonacci(x):\n    if x <= 1:\n      return x\n    else:\n      return fibonacci(x - 1) + fibonacci(x - 2)\n  if n < 1:\n    return 0\n  else:\n    return fibonacci(n - 1) + fibonacci_sum(n - 1)", "task_id": "248_c746da34-51fa-4940-b9a6-be1f28743823", "test_setup_code": "", "test_list": ["assert fibonacci_sum(0) == 0", "assert fibonacci_sum(1) == 0", "assert fibonacci_sum(2) == 0", "assert fibonacci_sum(3) == 1", "assert fibonacci_sum(4) == 2", "assert fibonacci_sum(5) == 4", "assert fibonacci_sum(6) == 7", "assert fibonacci_sum(7) == 12", "assert fibonacci_sum(8) == 20", "assert fibonacci_sum(9) == 33", "assert fibonacci_sum(10) == 54", "assert fibonacci_sum(11) == 88", "assert fibonacci_sum(12) == 143", "assert fibonacci_sum(13) == 232", "assert fibonacci_sum(14) == 376"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 natural numbers.", "code": "def arithmetic_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n + arithmetic_sum(n - 1)", "task_id": "248_6d974ade-d46b-46d1-a5a9-67267644a281", "test_setup_code": "", "test_list": ["assert arithmetic_sum(1) == 1", "assert arithmetic_sum(2) == 3", "assert arithmetic_sum(3) == 6", "assert arithmetic_sum(4) == 10", "assert arithmetic_sum(5) == 15", "assert arithmetic_sum(10) == 55", "assert arithmetic_sum(0) == 0", "assert arithmetic_sum(-1) == 0", "assert arithmetic_sum(20) == 210", "assert arithmetic_sum(50) == 1275", "assert arithmetic_sum(100) == 5050", "assert arithmetic_sum(500) == 125250", "assert arithmetic_sum(1000) == 500500", "assert arithmetic_sum(10000) == 50005000", "assert arithmetic_sum(100000) == 5000050000"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n-1 natural numbers.", "code": "def square_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n ** 2 + square_sum(n - 1)", "task_id": "248_a4ff516d-fc52-427e-8c4c-5afe83d1c733", "test_setup_code": "", "test_list": ["assert square_sum(1) == 0", "assert square_sum(2) == 1", "assert square_sum(3) == 5", "assert square_sum(4) == 14", "assert square_sum(5) == 30", "assert square_sum(0) == 0", "assert square_sum(-1) == 0", "assert square_sum(10) == 285", "assert square_sum(15) == 1015", "assert square_sum(20) == 2470", "assert square_sum(50) == 40425", "assert square_sum(100) == 328350", "assert square_sum(101) == 338350", "assert square_sum(500) == 41666750", "assert square_sum(1000) == 333833500"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the first n-1 natural numbers.", "code": "def cube_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n ** 3 + cube_sum(n - 1)", "task_id": "248_6988f235-621a-4b41-a464-6655753eb614", "test_setup_code": "", "test_list": ["assert cube_sum(0) == 0", "assert cube_sum(1) == 1", "assert cube_sum(2) == 9", "assert cube_sum(3) == 36", "assert cube_sum(4) == 100", "assert cube_sum(5) == 225", "assert cube_sum(6) == 441", "assert cube_sum(7) == 784", "assert cube_sum(8) == 1296", "assert cube_sum(9) == 2025", "assert cube_sum(10) == 3025", "assert cube_sum(11) == 4356", "assert cube_sum(12) == 6084", "assert cube_sum(13) == 8281", "assert cube_sum(14) == 11025"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the inverses of the first n-1 natural numbers.", "code": "def inverse_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return 1 / n + inverse_sum(n - 1)", "task_id": "248_e2954daf-d28d-4347-a50a-734edb9e0026", "test_setup_code": "", "test_list": ["assert inverse_sum(1) == 0", "assert inverse_sum(2) == 1.0", "assert inverse_sum(3) == 1.5", "assert inverse_sum(4) == 1.8333333333333333", "assert inverse_sum(5) == 2.083333333333333", "assert inverse_sum(6) == 2.283333333333333", "assert inverse_sum(7) == 2.45", "assert inverse_sum(8) == 2.5928571428571425", "assert inverse_sum(9) == 2.7178571428571425", "assert inverse_sum(10) == 2.828968253968254", "assert inverse_sum(0) == 0", "assert inverse_sum(-1) == 0", "assert inverse_sum(100) == 5.187377517639621", "assert inverse_sum(50) == 4.499205338329425", "assert inverse_sum(20) == 3.597739657143682"], "challenge_test_list": []}
{"text": "Write a function to calculate the alternating sum of the first n-1 natural numbers.", "code": "def alternating_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n if n % 2 == 1 else -n + alternating_sum(n - 1)", "task_id": "248_21d3a0db-1aa2-48a9-afb3-f8519c60028b", "test_setup_code": "", "test_list": ["assert alternating_sum(1) == 1", "assert alternating_sum(2) == -1", "assert alternating_sum(5) == 3", "assert alternating_sum(10) == -5"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of double factorials up to n-1.", "code": "def double_factorial_sum(n):\n  def double_factorial(x):\n    if x <= 0:\n      return 1\n    else:\n      return x * double_factorial(x - 2)\n  if n < 1:\n    return 0\n  else:\n    return double_factorial(n) + double_factorial_sum(n - 1)", "task_id": "248_cd0400a4-3806-4e6e-b7dc-4769a215fe71", "test_setup_code": "", "test_list": ["assert double_factorial_sum(0) == 0", "assert double_factorial_sum(1) == 1", "assert double_factorial_sum(2) == 2", "assert double_factorial_sum(3) == 4", "assert double_factorial_sum(4) == 6", "assert double_factorial_sum(5) == 10", "assert double_factorial_sum(6) == 16", "assert double_factorial_sum(7) == 24", "assert double_factorial_sum(8) == 36", "assert double_factorial_sum(9) == 52", "assert double_factorial_sum(10) == 76", "assert double_factorial_sum(11) == 110", "assert double_factorial_sum(12) == 162", "assert double_factorial_sum(13) == 232", "assert double_factorial_sum(14) == 342"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 triangular numbers.", "code": "def triangular_sum(n):\n  def triangular(x):\n    return x * (x + 1) // 2\n  if n < 1:\n    return 0\n  else:\n    return triangular(n) + triangular_sum(n - 1)", "task_id": "248_b2ee8288-f7d7-448f-8e3c-03dd9dfac55d", "test_setup_code": "", "test_list": ["assert triangular_sum(0) == 0", "assert triangular_sum(1) == 0", "assert triangular_sum(2) == 1", "assert triangular_sum(3) == 4", "assert triangular_sum(4) == 10", "assert triangular_sum(5) == 20", "assert triangular_sum(6) == 35", "assert triangular_sum(7) == 56", "assert triangular_sum(10) == 165", "assert triangular_sum(-1) == 0", "assert triangular_sum(20) == 1330", "assert triangular_sum(15) == 560", "assert triangular_sum(25) == 2925", "assert triangular_sum(50) == 20425", "assert triangular_sum(100) == 166650"], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two lists of strings using a lambda function.", "code": "def intersection_strings(list1, list2):\n    result = list(filter(lambda x: x in list1, list2))\n    return result", "task_id": "249_51cb2185-4e52-48ac-9f53-c4ff7d852c9d", "test_setup_code": "", "test_list": ["assert intersection_strings(['a', 'b', 'c'], ['b', 'c', 'd']) == ['b', 'c']", "assert intersection_strings(['apple', 'banana', 'cherry'], ['banana', 'cherry', 'date']) == ['banana', 'cherry']", "assert intersection_strings(['dog', 'cat', 'mouse'], ['elephant', 'cat', 'dog']) == ['cat', 'dog']", "assert intersection_strings(['x', 'y', 'z'], ['a', 'b', 'c']) == []", "assert intersection_strings([], ['a', 'b', 'c']) == []", "assert intersection_strings(['a', 'b', 'c'], []) == []", "assert intersection_strings([], []) == []", "assert intersection_strings(['a', 'a', 'b'], ['a', 'b', 'b']) == ['a', 'b']", "assert intersection_strings(['hello', 'world'], ['world', 'hello']) == ['world', 'hello']", "assert intersection_strings(['one', 'two', 'three'], ['three', 'four', 'five']) == ['three']", "assert intersection_strings(['a', 'b', 'c', 'd'], ['d', 'e', 'f', 'g']) == ['d']", "assert intersection_strings(['a', 'b', 'c'], ['A', 'B', 'C']) == []", "assert intersection_strings(['123', '456'], ['123', '789']) == ['123']", "assert intersection_strings(['a', 'b', 'c'], ['c', 'b', 'a']) == ['c', 'b', 'a']", "assert intersection_strings(['apple', 'banana', 'cherry'], ['cherry', 'banana', 'apple']) == ['cherry', 'banana', 'apple']"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers using a lambda function.", "code": "def common_elements(list1, list2):\n    result = list(filter(lambda x: x in list1, list2))\n    return result", "task_id": "249_e7311158-2c4c-42f6-b85c-22a8c1c6c5ab", "test_setup_code": "", "test_list": ["assert common_elements([1, 2, 3], [3, 4, 5]) == [3]", "assert common_elements([1, 2, 3], [4, 5, 6]) == []", "assert common_elements([1, 2, 3, 4, 5], [2, 4, 6, 8]) == [2, 4]", "assert common_elements([], [1, 2, 3]) == []", "assert common_elements([1, 2, 3], []) == []", "assert common_elements([1, 1, 1], [1, 1, 1]) == [1, 1, 1]", "assert common_elements([1, 2, 3, 4], [4, 3, 2, 1]) == [4, 3, 2, 1]", "assert common_elements([1, 2, 3], [3, 2, 1]) == [3, 2, 1]", "assert common_elements([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert common_elements([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []", "assert common_elements([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]) == [1, 3, 5]", "assert common_elements([1, 2, 3, 4, 5], [2, 4, 6, 8, 10]) == [2, 4]", "assert common_elements([1, 2, 3, 4, 5], [0, 2, 4, 6, 8]) == [2, 4]", "assert common_elements([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert common_elements([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers using set intersection and a lambda function.", "code": "def common_elements_set(list1, list2):\n    result = list(filter(lambda x: x in set(list1), list2))\n    return result", "task_id": "249_185d9e29-6776-40e4-a33f-c056e9a0367e", "test_setup_code": "", "test_list": ["assert common_elements_set([1, 2, 3], [3, 4, 5]) == [3]", "assert common_elements_set([1, 2, 3, 4], [4, 5, 6, 7]) == [4]", "assert common_elements_set([10, 20, 30], [30, 40, 50]) == [30]", "assert common_elements_set([1, 2, 3], [4, 5, 6]) == []", "assert common_elements_set([], [1, 2, 3]) == []", "assert common_elements_set([1, 2, 3], []) == []", "assert common_elements_set([], []) == []", "assert common_elements_set([1, 1, 1], [1, 1, 1]) == [1, 1, 1]", "assert common_elements_set([1, 2, 2, 3], [2, 2, 4, 5]) == [2, 2]", "assert common_elements_set([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]", "assert common_elements_set([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == []", "assert common_elements_set([1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert common_elements_set([1, 2, 3, 4, 5], [2, 3, 4]) == [2, 3, 4]", "assert common_elements_set([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == [5]", "assert common_elements_set([1, 2, 3, 4, 5], [1, 3, 5, 7, 9]) == [1, 3, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the common characters between two strings using a lambda function.", "code": "def common_chars(str1, str2):\n    result = list(filter(lambda x: x in str1, str2))\n    return result", "task_id": "249_81575cf7-cb3c-419f-9fd1-cde2ff64e6fe", "test_setup_code": "", "test_list": ["assert common_chars('hello', 'world') == ['o', 'l']", "assert common_chars('abc', 'def') == []", "assert common_chars('a', 'a') == ['a']", "assert common_chars('abcdef', 'fedcba') == ['f', 'e', 'd', 'c', 'b', 'a']", "assert common_chars('', 'abc') == []", "assert common_chars('abc', '') == []", "assert common_chars('12345', '54321') == ['5', '4', '3', '2', '1']", "assert common_chars('!@#$', '%^&*') == []", "assert common_chars('test', 'testing') == ['t', 'e', 's', 't']", "assert common_chars('common', 'characters') == ['c', 'o', 'm', 'm', 'o', 'n']", "assert common_chars('python', 'java') == ['a']", "assert common_chars('123abc', 'abc123') == ['1', '2', '3', 'a', 'b', 'c']", "assert common_chars('racecar', 'carrace') == ['r', 'a', 'c', 'e', 'c', 'a', 'r']", "assert common_chars('longstringwithmanycharacters', 'shortstring') == ['s', 't', 'r', 'i', 'n', 'g']", "assert common_chars('uppercase', 'UPPERCASE') == []"], "challenge_test_list": []}
{"text": "Write a function to find the common words between two sentences using a lambda function.", "code": "def common_words(sentence1, sentence2):\n    words1 = sentence1.split()\n    words2 = sentence2.split()\n    result = list(filter(lambda x: x in words1, words2))\n    return result", "task_id": "249_569b393e-514e-4f1e-9779-b0f79307d220", "test_setup_code": "", "test_list": ["assert common_words('hello world', 'hello') == ['hello']", "assert common_words('hello world', 'world') == ['world']", "assert common_words('hello world', 'hello world') == ['hello', 'world']", "assert common_words('hello', 'world') == []", "assert common_words('the quick brown fox', 'the quick') == ['the', 'quick']", "assert common_words('jumped over the lazy dog', 'the lazy dog') == ['the', 'lazy', 'dog']", "assert common_words('a b c d e', 'e d c b a') == ['e', 'd', 'c', 'b', 'a']", "assert common_words('Python is great', 'Python is awesome') == ['Python', 'is']", "assert common_words('one two three', 'four five six') == []", "assert common_words('repeat repeat repeat', 'repeat') == ['repeat']", "assert common_words('case insensitive', 'Case Insensitive') == []", "assert common_words('common words', 'common words words') == ['common', 'words']", "assert common_words('a b c', 'a b c d e f g') == ['a', 'b', 'c']", "assert common_words('testing edge cases', 'edge cases testing') == ['edge', 'cases', 'testing']", "assert common_words('', 'empty input') == []"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers that are greater than a given condition using a lambda function.", "code": "def common_elements_with_condition(list1, list2, condition):\n    result = list(filter(lambda x: x in list1 and x > condition, list2))\n    return result", "task_id": "249_67fc40b5-8087-48bc-be34-63171cc874ec", "test_setup_code": "", "test_list": ["assert common_elements_with_condition([1, 2, 3, 4], [3, 4, 5, 6], 2) == [3, 4]", "assert common_elements_with_condition([10, 20, 30], [5, 10, 15, 20], 10) == [20]", "assert common_elements_with_condition([1, 2, 3], [4, 5, 6], 0) == []", "assert common_elements_with_condition([1, 2, 3], [1, 2, 3], 3) == []", "assert common_elements_with_condition([1, 2, 3], [1, 2, 3], 1) == [2, 3]", "assert common_elements_with_condition([5, 10, 15], [5, 10, 15], 5) == [10, 15]", "assert common_elements_with_condition([], [1, 2, 3], 1) == []", "assert common_elements_with_condition([1, 2, 3], [], 1) == []", "assert common_elements_with_condition([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 4) == [5]", "assert common_elements_with_condition([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 5) == []", "assert common_elements_with_condition([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], -1) == [3, 4, 5]", "assert common_elements_with_condition([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 0) == [3, 4, 5]", "assert common_elements_with_condition([1, 2, 3, 4, 5], [3, 4, 5, 6, 7], 3) == [4, 5]", "assert common_elements_with_condition([10, 20, 30, 40], [15, 20, 25, 30], 15) == [20, 30]", "assert common_elements_with_condition([100, 200, 300], [100, 200, 300], 100) == [200, 300]"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers after transforming each element by adding 1 using a lambda function.", "code": "def common_elements_with_transform(list1, list2):\n    transformed_list1 = list(map(lambda x: x + 1, list1))\n    result = list(filter(lambda x: x in transformed_list1, list2))\n    return result", "task_id": "249_37e6fb78-c080-4a0b-b867-7c29126a9794", "test_setup_code": "", "test_list": ["assert common_elements_with_transform([1, 2, 3], [2, 3, 4]) == [2, 3]", "assert common_elements_with_transform([0, 1, 2], [1, 2, 3]) == [1, 2]", "assert common_elements_with_transform([], [1, 2, 3]) == []", "assert common_elements_with_transform([1, 2, 3], []) == []", "assert common_elements_with_transform([1, 1, 1], [2, 2, 2]) == [2, 2, 2]", "assert common_elements_with_transform([1, 2, 3], [5, 6, 7]) == []", "assert common_elements_with_transform([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]", "assert common_elements_with_transform([10, 20, 30], [11, 21, 31]) == [11, 21, 31]", "assert common_elements_with_transform([1, 2, 3], [4, 5, 6]) == []", "assert common_elements_with_transform([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == [3, 4, 5]", "assert common_elements_with_transform([1, 2, 3, 4, 5], [2, 3, 4, 5, 6]) == [2, 3, 4, 5]", "assert common_elements_with_transform([-1, 0, 1], [0, 1, 2]) == [0, 1]", "assert common_elements_with_transform([1, 2, 3], [1, 2, 3]) == [2, 3]", "assert common_elements_with_transform([1, 2, 3], [3, 4, 5]) == [3]", "assert common_elements_with_transform([100, 200, 300], [101, 201, 301]) == [101, 201, 301]"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers where the elements in the first list are squared using a lambda function.", "code": "def common_elements_with_square(list1, list2):\n    squared_list1 = list(map(lambda x: x**2, list1))\n    result = list(filter(lambda x: x in squared_list1, list2))\n    return result", "task_id": "249_35246129-6667-404d-8c9f-9250db566452", "test_setup_code": "", "test_list": ["assert common_elements_with_square([1, 2, 3], [1, 4, 9]) == [1, 4, 9]", "assert common_elements_with_square([1, 2, 3], [1, 4, 8]) == [1, 4]", "assert common_elements_with_square([0, -1, -2], [0, 1, 4]) == [0, 1, 4]", "assert common_elements_with_square([2, 3, 4], [4, 9, 16]) == [4, 9, 16]", "assert common_elements_with_square([2, 3, 4], [1, 2, 3]) == []", "assert common_elements_with_square([], [1, 4, 9]) == []", "assert common_elements_with_square([1, 2, 3], []) == []", "assert common_elements_with_square([1, 2, 3], [10, 20, 30]) == []", "assert common_elements_with_square([1, 2, 3], [1, 4, 9, 16]) == [1, 4, 9]", "assert common_elements_with_square([1, 2, 3, 4], [16, 25, 36]) == [16]", "assert common_elements_with_square([1, 2, 3, 4], [1, 9, 16, 25]) == [1, 9, 16]", "assert common_elements_with_square([1, 2, 3, 4, 5], [1, 4, 9, 16, 25]) == [1, 4, 9, 16, 25]", "assert common_elements_with_square([1, 2, 3, 4, 5], [1, 4, 9, 16, 24]) == [1, 4, 9, 16]", "assert common_elements_with_square([1, 2, 3, 4, 5], [1, 4, 8, 16, 25]) == [1, 4, 16, 25]", "assert common_elements_with_square([1, 2, 3, 4, 5], [0, 1, 4, 9, 16, 25, 36]) == [1, 4, 9, 16, 25]"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers that satisfy a given filter function using a lambda function.", "code": "def common_elements_with_filter(list1, list2, filter_func):\n    filtered_list1 = list(filter(filter_func, list1))\n    result = list(filter(lambda x: x in filtered_list1, list2))\n    return result", "task_id": "249_730cd083-fdc7-403f-a47e-2abff3c1a77e", "test_setup_code": "", "test_list": ["assert common_elements_with_filter([1, 2, 3], [3, 4, 5], lambda x: x > 2) == [3]", "assert common_elements_with_filter([1, 2, 3, 4], [2, 4, 6, 8], lambda x: x % 2 == 0) == [2, 4]", "assert common_elements_with_filter([10, 20, 30], [5, 10, 15, 20], lambda x: x >= 20) == [20]", "assert common_elements_with_filter([], [1, 2, 3], lambda x: x > 0) == []", "assert common_elements_with_filter([1, 2, 3], [], lambda x: x > 0) == []", "assert common_elements_with_filter([1, 2, 3], [1, 2, 3], lambda x: x < 0) == []", "assert common_elements_with_filter([1, 2, 3], [1, 2, 3], lambda x: x >= 1) == [1, 2, 3]", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 4, 3, 2, 1], lambda x: x % 2 == 1) == [5, 3, 1]", "assert common_elements_with_filter([1, 2, 3, 4, 5], [10, 20, 30], lambda x: x > 0) == []", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x == 5) == [5]", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x > 5) == []", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x < 5) == []", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x % 5 == 0) == [5]", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x % 3 == 0) == []", "assert common_elements_with_filter([1, 2, 3, 4, 5], [5, 6, 7, 8], lambda x: x % 2 == 0) == []"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers after applying a custom transformation function to each element in the first list using a lambda function.", "code": "def common_elements_with_custom_transform(list1, list2, transform_func):\n    transformed_list1 = list(map(transform_func, list1))\n    result = list(filter(lambda x: x in transformed_list1, list2))\n    return result", "task_id": "249_3a5636bd-4c3b-422e-81ae-c30b52e8e7ed", "test_setup_code": "", "test_list": ["assert common_elements_with_custom_transform([1, 2, 3], [2, 3, 4], lambda x: x * 2) == [4, 6]", "assert common_elements_with_custom_transform([1, 2, 3], [2, 3, 4], lambda x: x + 1) == [2, 3]", "assert common_elements_with_custom_transform([1, 2, 3], [4, 5, 6], lambda x: x * 2) == []", "assert common_elements_with_custom_transform([], [1, 2, 3], lambda x: x + 1) == []", "assert common_elements_with_custom_transform([1, 2, 3], [], lambda x: x + 1) == []", "assert common_elements_with_custom_transform([1, 2, 3], [2, 3, 4], lambda x: x) == [2, 3]", "assert common_elements_with_custom_transform([1, 2, 3, 4, 5], [3, 6, 9], lambda x: x * 3) == [3, 6, 9]", "assert common_elements_with_custom_transform([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], lambda x: x * 2) == [2, 4, 6, 8, 10]", "assert common_elements_with_custom_transform([1, 2, 3, 4, 5], [1, 4, 9, 16, 25], lambda x: x * x) == [1, 4, 9, 16, 25]", "assert common_elements_with_custom_transform([1, 2, 3], [2, 3, 4], lambda x: x - 1) == [1, 2]", "assert common_elements_with_custom_transform([10, 20, 30], [5, 10, 15], lambda x: x // 2) == [5, 10, 15]", "assert common_elements_with_custom_transform([1, 2, 3], [2, 4, 6], lambda x: x * 2) == [2, 4, 6]", "assert common_elements_with_custom_transform([1, 2, 3], [1, 2, 3], lambda x: x) == [1, 2, 3]", "assert common_elements_with_custom_transform([1, 2, 3], [0, 1, 2], lambda x: x - 1) == [0, 1, 2]", "assert common_elements_with_custom_transform([1, 2, 3], [3, 6, 9], lambda x: x * 3) == [3, 6, 9]"], "challenge_test_list": []}
{"text": "Write a function to find the longest palindromic substring in the given string.", "code": "def longest_palindromic_substring(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return ''\n    dp = [[False] * n for _ in range(n)]\n    start, max_length = 0, 1\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = True\n            start = i\n            max_length = 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n    return s[start:start+max_length]", "task_id": "247_5b0c2749-f80c-48f8-914b-7f8a99d759c5", "test_setup_code": "", "test_list": ["assert longest_palindromic_substring('babad') == 'bab'", "assert longest_palindromic_substring('cbbd') == 'bb'", "assert longest_palindromic_substring('a') == 'a'", "assert longest_palindromic_substring('ac') == 'a'", "assert longest_palindromic_substring('racecar') == 'racecar'", "assert longest_palindromic_substring('') == ''", "assert longest_palindromic_substring('abacdfgdcaba') == 'aba'", "assert longest_palindromic_substring('aabbccddccbb') == 'bccddccb'", "assert longest_palindromic_substring('abcba') == 'abcba'", "assert longest_palindromic_substring('forgeeksskeegfor') == 'geeksskeeg'", "assert longest_palindromic_substring('abccba') == 'abccba'", "assert longest_palindromic_substring('abacdfgdcabba') == 'abba'", "assert longest_palindromic_substring('noon') == 'noon'", "assert longest_palindromic_substring('a'*1000) == 'a'*1000", "assert longest_palindromic_substring('abaxyzzyxf') == 'xyzzyx'"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest repeating subsequence in the given string.", "code": "def longest_repeating_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]", "task_id": "247_ff7ad77b-256e-4462-8a76-47f1ec1066e3", "test_setup_code": "", "test_list": ["assert longest_repeating_subsequence('aabb') == 2", "assert longest_repeating_subsequence('aab') == 1", "assert longest_repeating_subsequence('abc') == 0", "assert longest_repeating_subsequence('aabbcc') == 3"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two given strings.", "code": "def longest_common_subsequence(x: str, y: str) -> int:\n    m, n = len(x), len(y)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if x[i-1] == y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]", "task_id": "247_9e496900-0ff7-4c85-9a2c-ddc5246d4af3", "test_setup_code": "", "test_list": ["assert longest_common_subsequence('abcde', 'ace') == 3", "assert longest_common_subsequence('abc', 'abc') == 3", "assert longest_common_subsequence('abc', 'def') == 0", "assert longest_common_subsequence('', 'abc') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in the given array.", "code": "def longest_increasing_subsequence(arr: list) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)", "task_id": "247_97ba91df-8bab-458b-b465-3a158a27a56e", "test_setup_code": "", "test_list": ["assert longest_increasing_subsequence([10, 9, 2, 5, 3, 7, 101, 18]) == 4", "assert longest_increasing_subsequence([0, 1, 0, 3, 2, 3]) == 4", "assert longest_increasing_subsequence([7, 7, 7, 7, 7, 7, 7]) == 1", "assert longest_increasing_subsequence([1, 3, 6, 7, 9, 4, 10, 5, 6]) == 6", "assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5", "assert longest_increasing_subsequence([5, 4, 3, 2, 1]) == 1", "assert longest_increasing_subsequence([1]) == 1", "assert longest_increasing_subsequence([]) == 0", "assert longest_increasing_subsequence([2, 2, 2, 2, 2]) == 1", "assert longest_increasing_subsequence([10, 20, 10, 30, 40, 50]) == 4", "assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3", "assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4", "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60, 80]) == 6", "assert longest_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert longest_increasing_subsequence([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest consecutive elements sequence in the given array.", "code": "def longest_consecutive_subsequence(arr: list) -> int:\n    if not arr:\n        return 0\n    num_set = set(arr)\n    longest_streak = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak", "task_id": "247_e56e2ebc-a1b0-4b15-bcdb-5e5e6ee2e8d2", "test_setup_code": "", "test_list": ["assert longest_consecutive_subsequence([]) == 0", "assert longest_consecutive_subsequence([1]) == 1", "assert longest_consecutive_subsequence([1, 2, 3, 4, 5]) == 5", "assert longest_consecutive_subsequence([5, 4, 3, 2, 1]) == 5", "assert longest_consecutive_subsequence([100, 4, 200, 1, 3, 2]) == 4", "assert longest_consecutive_subsequence([0, 3, 7, 2, 5, 8, 4, 6, 0, 1]) == 9", "assert longest_consecutive_subsequence([1, 3, 5, 7, 9]) == 1", "assert longest_consecutive_subsequence([1, 1, 2, 2, 3, 3]) == 3", "assert longest_consecutive_subsequence([-1, -2, -3, -4, -5]) == 5", "assert longest_consecutive_subsequence([-1, 0, 1, 2, 3]) == 5", "assert longest_consecutive_subsequence([1, 2, 3, 10, 11, 12, 13]) == 4", "assert longest_consecutive_subsequence([1, 2, 4, 5, 6]) == 3", "assert longest_consecutive_subsequence([1, 2, 3, 5, 6, 7, 9, 10]) == 3", "assert longest_consecutive_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 12", "assert longest_consecutive_subsequence([10, 5, 12, 3, 55, 30, 4, 11, 2]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters in the given string.", "code": "def longest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    char_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if s[i] in char_index and char_index[s[i]] >= start:\n            start = char_index[s[i]] + 1\n        char_index[s[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "247_29fabe61-105c-40dd-b159-7bf9fef6b3cf", "test_setup_code": "", "test_list": ["assert longest_substring_without_repeating_characters('abcabcbb') == 3", "assert longest_substring_without_repeating_characters('bbbbb') == 1", "assert longest_substring_without_repeating_characters('pwwkew') == 3", "assert longest_substring_without_repeating_characters('') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with a given sum in the given array.", "code": "def longest_subarray_with_sum(arr: list, target: int) -> int:\n    sum_map = {}\n    curr_sum = 0\n    max_length = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum == target:\n            max_length = i + 1\n        if curr_sum - target in sum_map:\n            max_length = max(max_length, i - sum_map[curr_sum - target])\n        if curr_sum not in sum_map:\n            sum_map[curr_sum] = i\n    return max_length", "task_id": "247_d13fc73a-3fb8-43ce-b471-801102e609ef", "test_setup_code": "", "test_list": ["assert longest_subarray_with_sum([1, 2, 3, 4, 5], 9) == 3", "assert longest_subarray_with_sum([5, 6, -5, 5, 3, 5, 3, -2, 0], 8) == 4", "assert longest_subarray_with_sum([2, 3, 5, -5, 10], 5) == 3", "assert longest_subarray_with_sum([1, 1, 1, 1, 1], 3) == 3", "assert longest_subarray_with_sum([-1, -2, -3, -4, -5], -9) == 3", "assert longest_subarray_with_sum([0, 0, 0, 0, 0], 0) == 5", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 15) == 5", "assert longest_subarray_with_sum([1, 2, 3, 4, 5], 0) == 0", "assert longest_subarray_with_sum([], 5) == 0", "assert longest_subarray_with_sum([8], 8) == 1", "assert longest_subarray_with_sum([1, -1, 1, -1, 1, -1], 0) == 6", "assert longest_subarray_with_sum([3, -1, -1, -1, 5, 1], 5) == 4", "assert longest_subarray_with_sum([1, 2, 1, 0, 1], 4) == 4", "assert longest_subarray_with_sum([-5, 8, -14, 2, 4, 12], -5) == 3", "assert longest_subarray_with_sum([10, 5, 2, 7, 1, 9], 15) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest balanced parentheses substring in the given string.", "code": "def longest_balanced_parentheses(s: str) -> int:\n    stack = [-1]\n    max_length = 0\n    for i, char in enumerate(s):\n        if char == '(': \n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                stack.append(i)\n            else:\n                max_length = max(max_length, i - stack[-1])\n    return max_length", "task_id": "247_a4f15443-52df-4305-b80e-8294baccd7dd", "test_setup_code": "", "test_list": ["assert longest_balanced_parentheses('') == 0", "assert longest_balanced_parentheses('()') == 2", "assert longest_balanced_parentheses('(()') == 2", "assert longest_balanced_parentheses(')()())') == 4", "assert longest_balanced_parentheses('()(()))()') == 6"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring with at most k distinct characters in the given string.", "code": "def longest_substring_k_distinct(s: str, k: int) -> int:\n    n = len(s)\n    if n == 0 or k == 0:\n        return 0\n    left, right = 0, 0\n    char_map = {}\n    max_length = 1\n    while right < n:\n        char_map[s[right]] = char_map.get(s[right], 0) + 1\n        while len(char_map) > k:\n            char_map[s[left]] -= 1\n            if char_map[s[left]] == 0:\n                del char_map[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n        right += 1\n    return max_length", "task_id": "247_8af31db2-6157-4002-8cbd-9d6ed67ff559", "test_setup_code": "", "test_list": ["assert longest_substring_k_distinct('eceba', 2) == 3", "assert longest_substring_k_distinct('aa', 1) == 2", "assert longest_substring_k_distinct('a', 1) == 1", "assert longest_substring_k_distinct('', 1) == 0", "assert longest_substring_k_distinct('abc', 0) == 0", "assert longest_substring_k_distinct('abcabcabc', 2) == 2", "assert longest_substring_k_distinct('abaccc', 2) == 4", "assert longest_substring_k_distinct('aabbcc', 1) == 2", "assert longest_substring_k_distinct('aabbcc', 2) == 4", "assert longest_substring_k_distinct('aabbcc', 3) == 6", "assert longest_substring_k_distinct('aabbcc', 4) == 6", "assert longest_substring_k_distinct('aabacbebebe', 3) == 7", "assert longest_substring_k_distinct('aaaaaaa', 1) == 7", "assert longest_substring_k_distinct('abcdef', 6) == 6", "assert longest_substring_k_distinct('abcdef', 5) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with at most k odd numbers in the given array.", "code": "def longest_subarray_with_at_most_k_odd_numbers(arr: list, k: int) -> int:\n    left, right = 0, 0\n    odd_count = 0\n    max_length = 0\n    while right < len(arr):\n        if arr[right] % 2 != 0:\n            odd_count += 1\n        while odd_count > k:\n            if arr[left] % 2 != 0:\n                odd_count -= 1\n            left += 1\n        max_length = max(max_length, right - left + 1)\n        right += 1\n    return max_length", "task_id": "247_b3ba97eb-1a7d-4e54-ae17-f5fb7faa6bda", "test_setup_code": "", "test_list": ["assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 3, 4, 5], 1) == 2", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 3, 4, 5], 2) == 4", "assert longest_subarray_with_at_most_k_odd_numbers([1, 3, 5, 7, 9], 1) == 1", "assert longest_subarray_with_at_most_k_odd_numbers([2, 4, 6, 8], 1) == 4", "assert longest_subarray_with_at_most_k_odd_numbers([2, 4, 6, 8], 0) == 4", "assert longest_subarray_with_at_most_k_odd_numbers([1, 1, 1, 1, 1], 3) == 3", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 1, 2, 1], 2) == 5", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 1, 2, 1], 1) == 3", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 1, 2, 1], 0) == 1", "assert longest_subarray_with_at_most_k_odd_numbers([], 1) == 0", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 3, 4, 5], 5) == 5", "assert longest_subarray_with_at_most_k_odd_numbers([1, 2, 3, 4, 5], 0) == 1", "assert longest_subarray_with_at_most_k_odd_numbers([1, 3, 5, 7, 9], 0) == 0", "assert longest_subarray_with_at_most_k_odd_numbers([2, 2, 2, 2, 2], 1) == 5", "assert longest_subarray_with_at_most_k_odd_numbers([2, 2, 2, 2, 2], 0) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of elements in a tuple that are greater than a given value.", "code": "def count_greater_than(tup, x): \n    count = 0\n    for ele in tup: \n        if ele > x: \n            count += 1\n    return count", "task_id": "250_ee3738e9-407d-4815-bc5a-aa1b97235173", "test_setup_code": "", "test_list": ["assert count_greater_than((1, 2, 3, 4, 5), 3) == 2", "assert count_greater_than((10, 20, 30, 40, 50), 25) == 3", "assert count_greater_than((5, 5, 5, 5, 5), 5) == 0", "assert count_greater_than((5, 5, 5, 5, 5), 4) == 5", "assert count_greater_than((), 1) == 0", "assert count_greater_than((1,), 0) == 1", "assert count_greater_than((1,), 2) == 0", "assert count_greater_than((-1, -2, -3, -4, -5), -3) == 2", "assert count_greater_than((-1, -2, -3, -4, -5), -6) == 5", "assert count_greater_than((1.1, 2.2, 3.3, 4.4, 5.5), 3.3) == 2", "assert count_greater_than((1.1, 2.2, 3.3, 4.4, 5.5), 5.5) == 0", "assert count_greater_than((100, 200, 300, 400, 500), 100) == 4", "assert count_greater_than((100, 200, 300, 400, 500), 500) == 0", "assert count_greater_than((0, 0, 0, 0, 0), 0) == 0", "assert count_greater_than((0, 0, 0, 0, 1), 0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count the number of elements in a tuple that are less than a given value.", "code": "def count_less_than(tup, x): \n    count = 0\n    for ele in tup: \n        if ele < x: \n            count += 1\n    return count", "task_id": "250_14996cad-434e-430c-b60c-80748e5ad6a2", "test_setup_code": "", "test_list": ["assert count_less_than((1, 2, 3, 4, 5), 3) == 2", "assert count_less_than((10, 20, 30, 40, 50), 25) == 2", "assert count_less_than((5, 5, 5, 5, 5), 5) == 0", "assert count_less_than((1, 2, 3, 4, 5), 6) == 5", "assert count_less_than((1, 2, 3, 4, 5), 0) == 0", "assert count_less_than((), 10) == 0", "assert count_less_than((100,), 50) == 0", "assert count_less_than((100,), 150) == 1", "assert count_less_than((-1, -2, -3, -4, -5), 0) == 5", "assert count_less_than((-1, -2, -3, -4, -5), -3) == 2", "assert count_less_than((1, 2, 3, 4, 5), 5) == 4", "assert count_less_than((1, 2, 3, 4, 5), 1) == 0", "assert count_less_than((1, 2, 3, 4, 5, 5, 5), 5) == 4", "assert count_less_than((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 5) == 4", "assert count_less_than((10, 9, 8, 7, 6, 5, 4, 3, 2, 1), 5) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even elements in a tuple.", "code": "def count_even(tup): \n    count = 0\n    for ele in tup: \n        if ele % 2 == 0: \n            count += 1\n    return count", "task_id": "250_1fe118c3-98b5-4945-bcf8-aaac497d81c6", "test_setup_code": "", "test_list": ["assert count_even((1, 2, 3, 4, 5)) == 2", "assert count_even((2, 4, 6, 8, 10)) == 5", "assert count_even((1, 3, 5, 7, 9)) == 0", "assert count_even((0, 2, 4, 6, 8)) == 5", "assert count_even((1, 1, 1, 1, 1)) == 0", "assert count_even((2, 2, 2, 2, 2)) == 5", "assert count_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 5", "assert count_even((100, 200, 300, 400, 500)) == 5", "assert count_even((101, 201, 301, 401, 501)) == 0", "assert count_even((0,)) == 1", "assert count_even((1,)) == 0", "assert count_even(()) == 0", "assert count_even((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 10", "assert count_even((-2, -4, -6, -8, -10)) == 5", "assert count_even((1, 2, 3, 4, 5, 0)) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a tuple.", "code": "def count_odd(tup): \n    count = 0\n    for ele in tup: \n        if ele % 2 != 0: \n            count += 1\n    return count", "task_id": "250_5fefd81f-7b60-4f03-9ad8-4768ac8ad9c9", "test_setup_code": "", "test_list": ["assert count_odd((1, 2, 3, 4, 5)) == 3", "assert count_odd((2, 4, 6, 8, 10)) == 0", "assert count_odd((1, 3, 5, 7, 9)) == 5", "assert count_odd((0, 1, 2, 3, 4, 5)) == 3", "assert count_odd((0, 0, 0, 0, 0)) == 0", "assert count_odd((1, 1, 1, 1, 1)) == 5", "assert count_odd((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 5", "assert count_odd((11, 13, 15, 17, 19, 21, 23, 25, 27, 29)) == 10", "assert count_odd((2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) == 0", "assert count_odd((1, 2, 1, 2, 1, 2, 1, 2, 1, 2)) == 5", "assert count_odd((1,)) == 1", "assert count_odd((2,)) == 0", "assert count_odd(()) == 0", "assert count_odd((1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39)) == 20", "assert count_odd((1000001, 1000003, 1000005, 1000007, 1000009)) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a tuple of characters.", "code": "def count_vowels(tup): \n    vowels = 'aeiouAEIOU'\n    count = 0\n    for ele in tup: \n        if ele in vowels: \n            count += 1\n    return count", "task_id": "250_a6e33c2b-e46f-4adc-ab14-8a2ba0ef2813", "test_setup_code": "", "test_list": ["assert count_vowels(('a', 'b', 'c', 'd', 'e')) == 2", "assert count_vowels(('A', 'E', 'I', 'O', 'U')) == 5", "assert count_vowels(('x', 'y', 'z')) == 0", "assert count_vowels(('a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U')) == 10", "assert count_vowels(('b', 'c', 'd', 'f', 'g')) == 0", "assert count_vowels(('a', 'A', 'b', 'B', 'c', 'C')) == 2", "assert count_vowels(()) == 0", "assert count_vowels(('a', 'e', 'i', 'o', 'u', 'x', 'y', 'z')) == 5", "assert count_vowels(('A', 'b', 'C', 'd', 'E', 'f', 'G')) == 2", "assert count_vowels(('a', 'a', 'a', 'a', 'a')) == 5", "assert count_vowels(('A', 'A', 'A', 'A', 'A')) == 5", "assert count_vowels(('a', 'e', 'i', 'o', 'u', 'a', 'e', 'i', 'o', 'u')) == 10", "assert count_vowels(('A', 'E', 'I', 'O', 'U', 'A', 'E', 'I', 'O', 'U')) == 10", "assert count_vowels(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 5", "assert count_vowels(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == 5"], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a tuple of characters.", "code": "def count_uppercase(tup): \n    count = 0\n    for ele in tup: \n        if ele.isupper(): \n            count += 1\n    return count", "task_id": "250_ef08dacd-3645-4457-851c-799fc89cf7f8", "test_setup_code": "", "test_list": ["assert count_uppercase(('A', 'b', 'C', 'd', 'E')) == 3", "assert count_uppercase(('a', 'b', 'c', 'd', 'e')) == 0", "assert count_uppercase(('A', 'B', 'C', 'D', 'E')) == 5", "assert count_uppercase(('a', 'B', 'c', 'D', 'e')) == 2", "assert count_uppercase(('Z', 'y', 'X', 'w', 'V', 'u', 'T', 's', 'R', 'q')) == 5", "assert count_uppercase(('A', 'A', 'A', 'A', 'A')) == 5", "assert count_uppercase(('a', 'a', 'a', 'a', 'a')) == 0", "assert count_uppercase(()) == 0", "assert count_uppercase(('a', 'B', 'C', 'd', 'E', 'f', 'G', 'h', 'I', 'j')) == 5", "assert count_uppercase(('M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == 14", "assert count_uppercase(('A', 'b', 'C', 'd', 'E', 'f', 'G', 'h', 'I', 'j', 'K', 'l', 'M', 'n', 'O', 'p', 'Q', 'r', 'S', 't', 'U', 'v', 'W', 'x', 'Y', 'z')) == 13", "assert count_uppercase(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 0", "assert count_uppercase(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == 26", "assert count_uppercase(('a', 'B', 'c', 'D', 'e', 'F', 'g', 'H', 'i', 'J', 'k', 'L', 'm', 'N', 'o', 'P', 'q', 'R', 's', 'T', 'u', 'V', 'w', 'X', 'y', 'Z')) == 13", "assert count_uppercase(('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a tuple of characters.", "code": "def count_lowercase(tup): \n    count = 0\n    for ele in tup: \n        if ele.islower(): \n            count += 1\n    return count", "task_id": "250_91241b4a-ce5f-45cb-b466-9ec3b067d9ae", "test_setup_code": "", "test_list": ["assert count_lowercase(('a', 'b', 'c')) == 3", "assert count_lowercase(('A', 'B', 'C')) == 0", "assert count_lowercase(('a', 'B', 'c', 'D', 'e')) == 3", "assert count_lowercase(('a', 'a', 'a', 'a', 'a')) == 5", "assert count_lowercase(('A', 'A', 'A', 'A', 'A')) == 0", "assert count_lowercase(('a', 'A', 'a', 'A', 'a')) == 3", "assert count_lowercase(('a', '1', 'b', '2', 'c', '3')) == 3", "assert count_lowercase(('1', '2', '3', '4', '5')) == 0", "assert count_lowercase(('a', '!', 'b', '@', 'c', '#')) == 3", "assert count_lowercase(('!', '@', '#', '$', '%')) == 0", "assert count_lowercase(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 26", "assert count_lowercase(('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')) == 0", "assert count_lowercase(('a', 'A', 'b', 'B', 'c', 'C', 'd', 'D', 'e', 'E', 'f', 'F', 'g', 'G', 'h', 'H', 'i', 'I', 'j', 'J', 'k', 'K', 'l', 'L', 'm', 'M', 'n', 'N', 'o', 'O', 'p', 'P', 'q', 'Q', 'r', 'R', 's', 'S', 't', 'T', 'u', 'U', 'v', 'V', 'w', 'W', 'x', 'X', 'y', 'Y', 'z', 'Z')) == 26", "assert count_lowercase(()) == 0", "assert count_lowercase(('a',)) == 1", "assert count_lowercase(('A',)) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of strings in a tuple that have a specific length.", "code": "def count_strings_with_length(tup, length): \n    count = 0\n    for ele in tup: \n        if isinstance(ele, str) and len(ele) == length: \n            count += 1\n    return count", "task_id": "250_61eb3fc0-0a37-4fe1-9208-f570aabcdc29", "test_setup_code": "", "test_list": ["assert count_strings_with_length((), 3) == 0", "assert count_strings_with_length(('a', 'bb', 'ccc', 'dddd'), 3) == 1", "assert count_strings_with_length(('hello', 'world', 'python', 'code'), 5) == 2", "assert count_strings_with_length(('short', 'tiny', 'minuscule', 'big', 'huge'), 4) == 1", "assert count_strings_with_length(('one', 'two', 'three', 'four', 'five'), 3) == 2", "assert count_strings_with_length(('apple', 'banana', 'cherry', 'date'), 6) == 1", "assert count_strings_with_length(('a', 'b', 'c', 'd', 'e'), 1) == 5", "assert count_strings_with_length(('a', 'ab', 'abc', 'abcd', 'abcde'), 2) == 1", "assert count_strings_with_length(('same', 'same', 'same', 'same'), 4) == 4", "assert count_strings_with_length(('different', 'lengths', 'here'), 8) == 1", "assert count_strings_with_length(('123', '4567', '89', '0', '12345'), 2) == 1", "assert count_strings_with_length(('mix', 'of', 'numbers', 'and', 'letters123'), 3) == 2", "assert count_strings_with_length(('spaces', 'in', 'the', 'middle'), 2) == 1", "assert count_strings_with_length(('case', 'sensitive', 'TEST', 'test'), 4) == 2", "assert count_strings_with_length(('empty', '', 'strings', ''), 0) == 2"], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic strings in a tuple.", "code": "def count_palindromes(tup): \n    count = 0\n    for ele in tup: \n        if isinstance(ele, str) and ele == ele[::-1]: \n            count += 1\n    return count", "task_id": "250_57fdbf82-d980-4629-bde7-8924b2e7de79", "test_setup_code": "", "test_list": ["assert count_palindromes(('madam', 'racecar', 'apple', 'level')) == 3", "assert count_palindromes(('hello', 'world', 'python', 'code')) == 0", "assert count_palindromes(('a', 'b', 'c', 'd')) == 4", "assert count_palindromes(('abcba', 'abcd', 'dcba', 'abccba')) == 2", "assert count_palindromes(('12321', '12345', '54321', '11111')) == 2", "assert count_palindromes(('noon', 'civic', 'deified', 'radar')) == 4", "assert count_palindromes(('not', 'a', 'single', 'palindrome')) == 0", "assert count_palindromes(('wow', 'mom', 'dad', 'sis')) == 4", "assert count_palindromes(('refer', 'rotor', 'kayak', 'reviver')) == 4", "assert count_palindromes(('palindrome', 'notapalindrome', 'almost', 'butnotquite')) == 0", "assert count_palindromes(('a', 'aa', 'aaa', 'aaaa')) == 4", "assert count_palindromes(('madam', 'racecar', 'apple', 'level', 'madam')) == 4", "assert count_palindromes(('step', 'on', 'no', 'pets')) == 1", "assert count_palindromes(('was', 'it', 'a', 'car', 'or', 'a', 'cat', 'i', 'saw')) == 0", "assert count_palindromes(('a', 'man', 'a', 'plan', 'a', 'canal', 'panama')) == 0"], "challenge_test_list": []}
{"text": "Write a function to insert an element before each even element of a list.", "code": "def insert_element_before_even(lst, element):\n    result = []\n    for elt in lst:\n        if elt % 2 == 0:\n            result.append(element)\n        result.append(elt)\n    return result", "task_id": "251_546f4a6f-cbaf-4a68-9228-8f9da2e82d00", "test_setup_code": "", "test_list": ["assert insert_element_before_even([1, 2, 3, 4, 5], 0) == [1, 0, 2, 3, 0, 4, 5]", "assert insert_element_before_even([], 0) == []", "assert insert_element_before_even([2, 4, 6], 1) == [1, 2, 1, 4, 1, 6]", "assert insert_element_before_even([1, 3, 5], 9) == [1, 3, 5]", "assert insert_element_before_even([2, 4, 6, 8, 10], -1) == [-1, 2, -1, 4, -1, 6, -1, 8, -1, 10]", "assert insert_element_before_even([1, 2, 2, 3], 7) == [1, 7, 2, 7, 2, 3]", "assert insert_element_before_even([10], 5) == [5, 10]", "assert insert_element_before_even([1], 3) == [1]", "assert insert_element_before_even([0, 1, 2, 3, 4], 2) == [2, 0, 1, 2, 2, 3, 2, 4]", "assert insert_element_before_even([1, 2, 3, 4, 5, 6], 0) == [1, 0, 2, 3, 0, 4, 5, 0, 6]", "assert insert_element_before_even([2, 4, 6, 8], 0) == [0, 2, 0, 4, 0, 6, 0, 8]", "assert insert_element_before_even([1, 1, 1, 1], 2) == [1, 1, 1, 1]", "assert insert_element_before_even([2, 3, 4, 5, 6], 1) == [1, 2, 3, 1, 4, 5, 1, 6]", "assert insert_element_before_even([1, 2, 3, 4, 5, 6, 7, 8], 3) == [1, 3, 2, 3, 3, 4, 5, 3, 6, 7, 3, 8]", "assert insert_element_before_even([4, 4, 4, 4], 2) == [2, 4, 2, 4, 2, 4, 2, 4]"], "challenge_test_list": []}
{"text": "Write a function to insert an element after each odd element of a list.", "code": "def insert_element_after_odd(lst, element):\n    result = []\n    for elt in lst:\n        result.append(elt)\n        if elt % 2 != 0:\n            result.append(element)\n    return result", "task_id": "251_39990570-6c11-4664-a4a1-71ce240a7394", "test_setup_code": "", "test_list": ["assert insert_element_after_odd([1, 2, 3, 4, 5], 9) == [1, 9, 2, 3, 9, 4, 5, 9]", "assert insert_element_after_odd([2, 4, 6], 7) == [2, 4, 6]", "assert insert_element_after_odd([1, 3, 5], 0) == [1, 0, 3, 0, 5, 0]", "assert insert_element_after_odd([], 5) == []", "assert insert_element_after_odd([1], 2) == [1, 2]", "assert insert_element_after_odd([2], 3) == [2]", "assert insert_element_after_odd([1, 1, 1], 1) == [1, 1, 1, 1, 1, 1]", "assert insert_element_after_odd([0, -1, -2, -3], 4) == [0, -1, 4, -2, -3, 4]", "assert insert_element_after_odd([7, 14, 21, 28], 3) == [7, 3, 14, 21, 3, 28]", "assert insert_element_after_odd([11, 22, 33], 5) == [11, 5, 22, 33, 5]", "assert insert_element_after_odd([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [1, 10, 2, 3, 10, 4, 5, 10, 6, 7, 10, 8, 9, 10]", "assert insert_element_after_odd([1, 2, 3, 4, 5], -1) == [1, -1, 2, 3, -1, 4, 5, -1]", "assert insert_element_after_odd([1, 3, 5, 7, 9], 0) == [1, 0, 3, 0, 5, 0, 7, 0, 9, 0]", "assert insert_element_after_odd([10, 20, 30], 1) == [10, 20, 30]", "assert insert_element_after_odd([1, 2, 3, 4, 5], 5) == [1, 5, 2, 3, 5, 4, 5, 5]"], "challenge_test_list": []}
{"text": "Write a function to insert an element before the first element of a list.", "code": "def insert_element_before_first(lst, element):\n    return [element] + lst", "task_id": "251_576722c0-8901-4555-9e76-6ed178a345a9", "test_setup_code": "", "test_list": ["assert insert_element_before_first([1, 2, 3], 0) == [0, 1, 2, 3]", "assert insert_element_before_first([], 5) == [5]", "assert insert_element_before_first(['b', 'c'], 'a') == ['a', 'b', 'c']", "assert insert_element_before_first([True, False], None) == [None, True, False]", "assert insert_element_before_first([1.1, 2.2, 3.3], 4.4) == [4.4, 1.1, 2.2, 3.3]", "assert insert_element_before_first([1], 2) == [2, 1]", "assert insert_element_before_first(['only'], 'first') == ['first', 'only']", "assert insert_element_before_first([None], 'test') == ['test', None]", "assert insert_element_before_first([1, 'a', 3.0], 'start') == ['start', 1, 'a', 3.0]", "assert insert_element_before_first([1, 2, 3, 4, 5], 0) == [0, 1, 2, 3, 4, 5]", "assert insert_element_before_first(['x', 'y', 'z'], 'w') == ['w', 'x', 'y', 'z']", "assert insert_element_before_first([1], 0) == [0, 1]", "assert insert_element_before_first([False], True) == [True, False]", "assert insert_element_before_first(['a', 'b', 'c', 'd'], 'z') == ['z', 'a', 'b', 'c', 'd']", "assert insert_element_before_first([], 'empty') == ['empty']"], "challenge_test_list": []}
{"text": "Write a function to insert an element after the last element of a list.", "code": "def insert_element_after_last(lst, element):\n    return lst + [element]", "task_id": "251_e08d8a54-3c9a-40b4-9eb7-44c2fea26cf9", "test_setup_code": "", "test_list": ["assert insert_element_after_last([1, 2, 3], 4) == [1, 2, 3, 4]", "assert insert_element_after_last([], 1) == [1]", "assert insert_element_after_last(['a', 'b', 'c'], 'd') == ['a', 'b', 'c', 'd']", "assert insert_element_after_last([None], 'test') == [None, 'test']", "assert insert_element_after_last([1.1, 2.2, 3.3], 4.4) == [1.1, 2.2, 3.3, 4.4]", "assert insert_element_after_last([True, False], True) == [True, False, True]", "assert insert_element_after_last([1, 'a', None], 2) == [1, 'a', None, 2]", "assert insert_element_after_last([1], 2) == [1, 2]", "assert insert_element_after_last(['only'], 'one') == ['only', 'one']", "assert insert_element_after_last([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5, 6]", "assert insert_element_after_last(['start', 'middle'], 'end') == ['start', 'middle', 'end']", "assert insert_element_after_last([0], 0) == [0, 0]", "assert insert_element_after_last([1, 2, 3], [4, 5]) == [1, 2, 3, [4, 5]]", "assert insert_element_after_last([1, 2, 3], None) == [1, 2, 3, None]", "assert insert_element_after_last(['a', 'b'], 'c') == ['a', 'b', 'c']"], "challenge_test_list": []}
{"text": "Write a function to insert a character before each vowel in a string.", "code": "def insert_element_before_each_vowel(s, element):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char in vowels:\n            result += element\n        result += char\n    return result", "task_id": "251_ffaa21dc-745b-4f6d-beda-5d3738ac5900", "test_setup_code": "", "test_list": ["assert insert_element_before_each_vowel('hello', '*') == 'h*ell*o'", "assert insert_element_before_each_vowel('world', '#') == 'world'", "assert insert_element_before_each_vowel('AEIOU', '!') == '!A!E!I!O!U'", "assert insert_element_before_each_vowel('aeiou', '?') == '?a?e?i?o?u'", "assert insert_element_before_each_vowel('Python', '@') == 'Pyth@on'", "assert insert_element_before_each_vowel('bcd', '$') == 'bcd'", "assert insert_element_before_each_vowel('', '%') == ''", "assert insert_element_before_each_vowel('a', '&') == '&a'", "assert insert_element_before_each_vowel('bcdfghjklmnpqrstvwxyz', '^') == 'bcdfghjklmnpqrstvwxyz'", "assert insert_element_before_each_vowel('A quick brown fox jumps over the lazy dog', '~') == '~A qu~i~ck br~o~wn f~o~x j~u~mps ~o~v~e~r th~e l~a~zy d~o~g'", "assert insert_element_before_each_vowel('12345', '+') == '12345'", "assert insert_element_before_each_vowel('!@#$%', '-') == '!@#$%'", "assert insert_element_before_each_vowel('aeiouAEIOU', '*') == '*a*e*i*o*u*A*E*I*O*U'", "assert insert_element_before_each_vowel('vowel', '1') == 'v1o1w1e1l'", "assert insert_element_before_each_vowel('VOWEL', '2') == 'V2O2W2E2L'"], "challenge_test_list": []}
{"text": "Write a function to insert a character after each consonant in a string.", "code": "def insert_element_after_each_consonant(s, element):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        result += char\n        if char not in vowels and char.isalpha():\n            result += element\n    return result", "task_id": "251_5e5fbe77-5121-41fc-a702-d894d571b22c", "test_setup_code": "", "test_list": ["assert insert_element_after_each_consonant('hello', 'x') == 'hxexlxlox'", "assert insert_element_after_each_consonant('world', 'y') == 'wyoryldy'", "assert insert_element_after_each_consonant('Python', 'z') == 'Pzytzhoznyz'", "assert insert_element_after_each_consonant('aeiou', 'k') == 'aeiou'", "assert insert_element_after_each_consonant('bcdfghjklmnpqrstvwxyz', 'a') == 'bacadfafgahajakalamapanaraqastavawaxayaz'", "assert insert_element_after_each_consonant('AEIOU', 'b') == 'AEIOU'", "assert insert_element_after_each_consonant('Consonants', 'c') == 'Ccocnscocncacnctsc'", "assert insert_element_after_each_consonant('12345', 'd') == '12345'", "assert insert_element_after_each_consonant('!@#$%', 'e') == '!@#$%'", "assert insert_element_after_each_consonant('MixedCASE', 'f') == 'MfixfedfCfAfSfEf'", "assert insert_element_after_each_consonant('', 'g') == ''", "assert insert_element_after_each_consonant('a', 'h') == 'a'", "assert insert_element_after_each_consonant('b', 'i') == 'bi'", "assert insert_element_after_each_consonant('This is a test.', 'j') == 'Tjhijss ijss aj tjest.'", "assert insert_element_after_each_consonant('UPPERlower', 'k') == 'UkPPEkRklokwekRk'"], "challenge_test_list": []}
{"text": "Write a function to insert an element before each multiple of a given number in a list.", "code": "def insert_element_before_each_multiple_of_n(lst, n, element):\n    result = []\n    for elt in lst:\n        if elt % n == 0:\n            result.append(element)\n        result.append(elt)\n    return result", "task_id": "251_17e6a843-bb0f-4eab-b925-274466f62536", "test_setup_code": "", "test_list": ["assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5, 6], 2, 0) == [1, 0, 2, 3, 0, 4, 5, 0, 6]", "assert insert_element_before_each_multiple_of_n([10, 20, 30, 40], 10, -1) == [-1, 10, -1, 20, -1, 30, -1, 40]", "assert insert_element_before_each_multiple_of_n([1, 3, 5, 7], 2, 100) == [1, 3, 5, 7]", "assert insert_element_before_each_multiple_of_n([2, 4, 6, 8], 2, 1) == [1, 2, 1, 4, 1, 6, 1, 8]", "assert insert_element_before_each_multiple_of_n([], 3, 0) == []", "assert insert_element_before_each_multiple_of_n([5, 10, 15], 5, 99) == [99, 5, 99, 10, 99, 15]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, -3) == [1, 2, -3, 3, 4, 5, -3, 6, 7, 8, -3, 9, 10]", "assert insert_element_before_each_multiple_of_n([0, 1, 2, 3], 1, 9) == [9, 0, 9, 1, 9, 2, 9, 3]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5], 5, 5) == [1, 2, 3, 4, 5, 5]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5], 1, 0) == [0, 1, 0, 2, 0, 3, 0, 4, 0, 5]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5], 10, 100) == [1, 2, 3, 4, 5]", "assert insert_element_before_each_multiple_of_n([12, 15, 18, 21], 3, 3) == [3, 12, 3, 15, 3, 18, 3, 21]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5], 2, 2) == [1, 2, 2, 3, 2, 4, 5]", "assert insert_element_before_each_multiple_of_n([1, 2, 3, 4, 5, 6], 6, 0) == [1, 2, 3, 4, 5, 0, 6]", "assert insert_element_before_each_multiple_of_n([100, 200, 300], 100, 0) == [0, 100, 0, 200, 0, 300]"], "challenge_test_list": []}
{"text": "Write a function to insert an element after each multiple of a given number in a list.", "code": "def insert_element_after_each_multiple_of_n(lst, n, element):\n    result = []\n    for elt in lst:\n        result.append(elt)\n        if elt % n == 0:\n            result.append(element)\n    return result", "task_id": "251_c5ab83b6-e7ab-450e-a5e2-a2dc373df2ce", "test_setup_code": "", "test_list": ["assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 2, 'a') == [1, 2, 'a', 3, 4, 'a', 5, 6]", "assert insert_element_after_each_multiple_of_n([10, 20, 30], 10, 0) == [10, 0, 20, 0, 30, 0]", "assert insert_element_after_each_multiple_of_n([1, 3, 5, 7], 2, 'x') == [1, 3, 5, 7]", "assert insert_element_after_each_multiple_of_n([2, 4, 6, 8], 2, 'b') == [2, 'b', 4, 'b', 6, 'b', 8, 'b']", "assert insert_element_after_each_multiple_of_n([], 3, 'y') == []", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 1, 'z') == [1, 'z', 2, 'z', 3, 'z', 4, 'z', 5, 'z', 6, 'z']", "assert insert_element_after_each_multiple_of_n([0, 1, 2, 3], 1, 'c') == [0, 'c', 1, 'c', 2, 'c', 3, 'c']", "assert insert_element_after_each_multiple_of_n([0, 1, 2, 3], 0, 'd') == [0, 1, 2, 3]", "assert insert_element_after_each_multiple_of_n([5, 10, 15, 20], 5, 'e') == [5, 'e', 10, 'e', 15, 'e', 20, 'e']", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 3, 'f') == [1, 2, 3, 'f', 4, 5, 6, 'f']", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 4, 'g') == [1, 2, 3, 4, 'g', 5, 6]", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 6, 'h') == [1, 2, 3, 4, 5, 6, 'h']", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 7, 'i') == [1, 2, 3, 4, 5, 6]", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 5, 'j') == [1, 2, 3, 4, 5, 'j', 6]", "assert insert_element_after_each_multiple_of_n([1, 2, 3, 4, 5, 6], 2, 3) == [1, 2, 3, 3, 4, 3, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to insert a character before each word in a string.", "code": "def insert_element_before_each_word(s, element):\n    words = s.split()\n    result = ' '.join([element + word for word in words])\n    return result", "task_id": "251_5e843ddb-fa0d-4c2c-94d0-dcc94c2405b7", "test_setup_code": "", "test_list": ["assert insert_element_before_each_word('hello world', '*') == '*hello *world'", "assert insert_element_before_each_word('a b c', '#') == '#a #b #c'", "assert insert_element_before_each_word('', '!') == ''", "assert insert_element_before_each_word('single', '@') == '@single'", "assert insert_element_before_each_word('multiple words here', '$') == '$multiple $words $here'", "assert insert_element_before_each_word('  leading spaces', '&') == '&&leading &spaces'", "assert insert_element_before_each_word('trailing spaces  ', '%') == '%trailing %spaces'", "assert insert_element_before_each_word('  both sides  ', '^') == '^^both ^sides'", "assert insert_element_before_each_word('special characters !@#', '*') == '*special *characters *!@#'", "assert insert_element_before_each_word('numbers 123 456', '+') == '+numbers +123 +456'", "assert insert_element_before_each_word('mixed CASE words', '~') == '~mixed ~CASE ~words'", "assert insert_element_before_each_word('newline\ncharacter', '-') == '-newline -character'", "assert insert_element_before_each_word('tab\tcharacter', '=') == '=tab =character'", "assert insert_element_before_each_word('punctuation, marks.', '?') == '?punctuation, ?marks.'", "assert insert_element_before_each_word('multiple   spaces', '|') == '|multiple |||spaces'"], "challenge_test_list": []}
{"text": "Write a function to insert a character after each word in a string.", "code": "def insert_element_after_each_word(s, element):\n    words = s.split()\n    result = ' '.join([word + element for word in words])\n    return result", "task_id": "251_b2522fcb-487f-4756-9c16-2d193b4c8bf6", "test_setup_code": "", "test_list": ["assert insert_element_after_each_word('hello world', '!') == 'hello! world!'", "assert insert_element_after_each_word('a b c', '*') == 'a* b* c*'", "assert insert_element_after_each_word('', '#') == ''", "assert insert_element_after_each_word('singleword', '?') == 'singleword?'", "assert insert_element_after_each_word('multiple words in a sentence', '.') == 'multiple. words. in. a. sentence.'", "assert insert_element_after_each_word('  leading and trailing spaces  ', '+') == 'leading+ and+ trailing+ spaces+'", "assert insert_element_after_each_word('new\nline\ncharacters', '~') == 'new~ line~ characters~'", "assert insert_element_after_each_word('tabs\tbetween\twords', '&') == 'tabs& between& words&'", "assert insert_element_after_each_word('punctuation! marks, everywhere.', ':') == 'punctuation!: marks,: everywhere.: '", "assert insert_element_after_each_word('123 456 789', '$') == '123$ 456$ 789$'", "assert insert_element_after_each_word('UPPER lower MIXED', '%') == 'UPPER% lower% MIXED%'", "assert insert_element_after_each_word('special@characters#in$string', '^') == 'special@characters#in$string^'", "assert insert_element_after_each_word('double  spaces', '=') == 'double= spaces='", "assert insert_element_after_each_word('word', ' ') == 'word '", "assert insert_element_after_each_word('a', 'b') == 'ab'"], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to polar coordinates.", "code": "import math\ndef convert_to_polar(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta)", "task_id": "252_a2edf988-14e1-427a-97aa-1140173f88ab", "test_setup_code": "", "test_list": ["assert convert_to_polar(0, 0) == (0.0, 0.0)", "assert convert_to_polar(1, 0) == (1.0, 0.0)", "assert convert_to_polar(0, 1) == (1.0, 1.5707963267948966)", "assert convert_to_polar(1, 1) == (1.4142135623730951, 0.7853981633974483)", "assert convert_to_polar(-1, 0) == (1.0, 3.141592653589793)", "assert convert_to_polar(0, -1) == (1.0, -1.5707963267948966)", "assert convert_to_polar(-1, -1) == (1.4142135623730951, -2.356194490192345)", "assert convert_to_polar(3, 4) == (5.0, 0.9272952180016122)", "assert convert_to_polar(-3, 4) == (5.0, 2.214297435588181)", "assert convert_to_polar(3, -4) == (5.0, -0.9272952180016122)", "assert convert_to_polar(-3, -4) == (5.0, -2.214297435588181)", "assert convert_to_polar(1e-10, 1e-10) == (1.414213562373095e-10, 0.7853981633974483)", "assert convert_to_polar(1e10, 1e10) == (1.4142135623730951e10, 0.7853981633974483)", "assert convert_to_polar(1, 1e-10) == (1.0, 1e-10)", "assert convert_to_polar(1e-10, 1) == (1.0, 1.5707963267948966)"], "challenge_test_list": []}
{"text": "Write a python function to convert polar coordinates to Cartesian coordinates.", "code": "import math\ndef convert_to_cartesian(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "task_id": "252_12a4cc77-4c77-4920-bc75-f488165e6d99", "test_setup_code": "", "test_list": ["assert convert_to_cartesian(1, 0) == (1.0, 0.0)", "assert convert_to_cartesian(0, 0) == (0.0, 0.0)", "assert convert_to_cartesian(1, math.pi/2) == (0.0, 1.0)", "assert convert_to_cartesian(1, math.pi) == (-1.0, 0.0)", "assert convert_to_cartesian(1, 3*math.pi/2) == (0.0, -1.0)", "assert convert_to_cartesian(2, 0) == (2.0, 0.0)", "assert convert_to_cartesian(2, math.pi/4) == (math.sqrt(2), math.sqrt(2))", "assert convert_to_cartesian(2, 3*math.pi/4) == (-math.sqrt(2), math.sqrt(2))", "assert convert_to_cartesian(2, 5*math.pi/4) == (-math.sqrt(2), -math.sqrt(2))", "assert convert_to_cartesian(2, 7*math.pi/4) == (math.sqrt(2), -math.sqrt(2))", "assert convert_to_cartesian(3, math.pi/3) == (1.5, 1.5*math.sqrt(3))", "assert convert_to_cartesian(3, 2*math.pi/3) == (-1.5, 1.5*math.sqrt(3))", "assert convert_to_cartesian(3, 4*math.pi/3) == (-1.5, -1.5*math.sqrt(3))", "assert convert_to_cartesian(3, 5*math.pi/3) == (1.5, -1.5*math.sqrt(3))", "assert convert_to_cartesian(5, math.pi/6) == (5*math.sqrt(3)/2, 2.5)"], "challenge_test_list": []}
{"text": "Write a python function to convert 3D Cartesian coordinates to cylindrical coordinates.", "code": "import math\ndef rectangular_to_polar(x, y, z):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta, z)", "task_id": "252_8a376727-9349-4753-866a-e24a22c37fd2", "test_setup_code": "", "test_list": ["assert rectangular_to_polar(1, 0, 0) == (1.0, 0.0, 0)", "assert rectangular_to_polar(0, 1, 0) == (1.0, 1.5707963267948966, 0)", "assert rectangular_to_polar(1, 1, 1) == (1.4142135623730951, 0.7853981633974483, 1)", "assert rectangular_to_polar(-1, -1, -1) == (1.4142135623730951, -2.356194490192345, -1)", "assert rectangular_to_polar(0, 0, 0) == (0.0, 0.0, 0)", "assert rectangular_to_polar(3, 4, 5) == (5.0, 0.9272952180016122, 5)", "assert rectangular_to_polar(-3, -4, -5) == (5.0, -2.214297435588181, -5)", "assert rectangular_to_polar(0, 0, 1) == (0.0, 0.0, 1)", "assert rectangular_to_polar(0, 0, -1) == (0.0, 0.0, -1)", "assert rectangular_to_polar(1, 1, 0) == (1.4142135623730951, 0.7853981633974483, 0)", "assert rectangular_to_polar(-1, 1, 0) == (1.4142135623730951, 2.356194490192345, 0)", "assert rectangular_to_polar(1, -1, 0) == (1.4142135623730951, -0.7853981633974483, 0)", "assert rectangular_to_polar(-1, -1, 0) == (1.4142135623730951, -2.356194490192345, 0)", "assert rectangular_to_polar(2, 2, 2) == (2.8284271247461903, 0.7853981633974483, 2)", "assert rectangular_to_polar(2, -2, -2) == (2.8284271247461903, -0.7853981633974483, -2)"], "challenge_test_list": []}
{"text": "Write a python function to convert cylindrical coordinates to 3D Cartesian coordinates.", "code": "import math\ndef polar_to_rectangular(r, theta, z):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y, z)", "task_id": "252_c2acebdf-81cc-473d-b8f5-07e3e8943d57", "test_setup_code": "", "test_list": ["assert polar_to_rectangular(1, 0, 0) == (1, 0, 0)", "assert polar_to_rectangular(0, 0, 5) == (0, 0, 5)", "assert polar_to_rectangular(1, math.pi/2, 3) == (0, 1, 3)", "assert polar_to_rectangular(1, math.pi, 2) == (-1, 0, 2)", "assert polar_to_rectangular(1, 3*math.pi/2, 1) == (0, -1, 1)", "assert polar_to_rectangular(2, 0, 0) == (2, 0, 0)", "assert polar_to_rectangular(2, math.pi/4, 1) == (2*math.cos(math.pi/4), 2*math.sin(math.pi/4), 1)", "assert polar_to_rectangular(3, math.pi/6, 4) == (3*math.cos(math.pi/6), 3*math.sin(math.pi/6), 4)", "assert polar_to_rectangular(5, 2*math.pi, 7) == (5, 0, 7)", "assert polar_to_rectangular(0, math.pi, 0) == (0, 0, 0)", "assert abs(polar_to_rectangular(10, math.pi/3, 5)[0] - 10*math.cos(math.pi/3)) < 1e-10", "assert abs(polar_to_rectangular(10, math.pi/3, 5)[1] - 10*math.sin(math.pi/3)) < 1e-10", "assert polar_to_rectangular(10, math.pi/3, 5)[2] == 5", "assert abs(polar_to_rectangular(2.5, 2.1, 3.7)[0] - 2.5*math.cos(2.1)) < 1e-10", "assert abs(polar_to_rectangular(2.5, 2.1, 3.7)[1] - 2.5*math.sin(2.1)) < 1e-10"], "challenge_test_list": []}
{"text": "Write a python function to convert 3D Cartesian coordinates to spherical coordinates.", "code": "import math\ndef convert_to_spherical(x, y, z):\n    r = math.sqrt(x**2 + y**2 + z**2)\n    theta = math.atan2(y, x)\n    phi = math.acos(z / r)\n    return (r, theta, phi)", "task_id": "252_16358968-e9be-4285-8206-5793c71ce8e3", "test_setup_code": "", "test_list": ["assert convert_to_spherical(1, 0, 0) == (1.0, 0.0, 1.5707963267948966)", "assert convert_to_spherical(0, 1, 0) == (1.0, 1.5707963267948966, 1.5707963267948966)", "assert convert_to_spherical(0, 0, 1) == (1.0, 0.0, 0.0)", "assert convert_to_spherical(1, 1, 1) == (1.7320508075688772, 0.7853981633974483, 0.9553166181245093)", "assert convert_to_spherical(-1, -1, -1) == (1.7320508075688772, -2.356194490192345, 2.186276035465284)", "assert convert_to_spherical(0, 0, 0) == (0.0, 0.0, 0.0)", "assert convert_to_spherical(2, 2, 2) == (3.4641016151377544, 0.7853981633974483, 0.9553166181245093)", "assert convert_to_spherical(-2, -2, -2) == (3.4641016151377544, -2.356194490192345, 2.186276035465284)", "assert convert_to_spherical(1, 2, 3) == (3.7416573867739413, 1.1071487177940904, 0.6405223126794245)", "assert convert_to_spherical(-1, -2, -3) == (3.7416573867739413, -2.0344439357957027, 2.5010703409103687)", "assert convert_to_spherical(1, 1, 0) == (1.4142135623730951, 0.7853981633974483, 1.5707963267948966)", "assert convert_to_spherical(0, 1, 1) == (1.4142135623730951, 1.5707963267948966, 0.9553166181245093)", "assert convert_to_spherical(1, 0, 1) == (1.4142135623730951, 0.0, 0.9553166181245093)", "assert convert_to_spherical(3, 4, 5) == (7.0710678118654755, 0.9272952180016122, 0.7853981633974483)", "assert convert_to_spherical(-3, -4, -5) == (7.0710678118654755, -2.214297435588181, 2.356194490192345)"], "challenge_test_list": []}
{"text": "Write a python function to convert spherical coordinates to 3D Cartesian coordinates.", "code": "import math\ndef spherical_to_cartesian(r, theta, phi):\n    x = r * math.sin(phi) * math.cos(theta)\n    y = r * math.sin(phi) * math.sin(theta)\n    z = r * math.cos(phi)\n    return (x, y, z)", "task_id": "252_d0971f03-7fe3-4976-9fe4-bc53105cc8d6", "test_setup_code": "", "test_list": ["assert spherical_to_cartesian(1, 0, 0) == (0.0, 0.0, 1.0)", "assert spherical_to_cartesian(1, math.pi/2, 0) == (0.0, 0.0, 1.0)", "assert spherical_to_cartesian(1, 0, math.pi/2) == (1.0, 0.0, 0.0)", "assert spherical_to_cartesian(1, math.pi/2, math.pi/2) == (0.0, 1.0, 0.0)", "assert spherical_to_cartesian(1, math.pi, math.pi/2) == (-1.0, 0.0, 0.0)", "assert spherical_to_cartesian(1, 3*math.pi/2, math.pi/2) == (0.0, -1.0, 0.0)", "assert spherical_to_cartesian(2, 0, 0) == (0.0, 0.0, 2.0)", "assert spherical_to_cartesian(2, math.pi/2, 0) == (0.0, 0.0, 2.0)", "assert spherical_to_cartesian(2, 0, math.pi/2) == (2.0, 0.0, 0.0)", "assert spherical_to_cartesian(2, math.pi/2, math.pi/2) == (0.0, 2.0, 0.0)", "assert spherical_to_cartesian(2, math.pi, math.pi/2) == (-2.0, 0.0, 0.0)", "assert spherical_to_cartesian(2, 3*math.pi/2, math.pi/2) == (0.0, -2.0, 0.0)", "assert spherical_to_cartesian(0, 0, 0) == (0.0, 0.0, 0.0)", "assert spherical_to_cartesian(1, 0, math.pi) == (0.0, 0.0, -1.0)", "assert spherical_to_cartesian(1, math.pi/4, math.pi/4) == (0.5, 0.5, 0.7071067811865476)"], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to polar coordinates with the angle in degrees.", "code": "import math\ndef convert_to_polar_degrees(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.degrees(math.atan2(y, x))\n    return (r, theta)", "task_id": "252_ba543e1c-9867-4014-b96f-79573ed6b5e4", "test_setup_code": "", "test_list": ["assert convert_to_polar_degrees(0, 0) == (0.0, 0.0)", "assert convert_to_polar_degrees(1, 0) == (1.0, 0.0)", "assert convert_to_polar_degrees(0, 1) == (1.0, 90.0)", "assert convert_to_polar_degrees(-1, 0) == (1.0, 180.0)", "assert convert_to_polar_degrees(0, -1) == (1.0, -90.0)", "assert convert_to_polar_degrees(1, 1) == (math.sqrt(2), 45.0)", "assert convert_to_polar_degrees(-1, -1) == (math.sqrt(2), -135.0)", "assert convert_to_polar_degrees(3, 4) == (5.0, 53.13010235415599)", "assert convert_to_polar_degrees(-3, 4) == (5.0, 126.86989764584402)", "assert convert_to_polar_degrees(3, -4) == (5.0, -53.13010235415599)", "assert convert_to_polar_degrees(-3, -4) == (5.0, -126.86989764584402)", "assert convert_to_polar_degrees(2, 2*math.sqrt(3)) == (4.0, 60.0)", "assert convert_to_polar_degrees(2*math.sqrt(3), 2) == (4.0, 30.0)", "assert convert_to_polar_degrees(5, 5) == (math.sqrt(50), 45.0)", "assert convert_to_polar_degrees(-5, -5) == (math.sqrt(50), -135.0)"], "challenge_test_list": []}
{"text": "Write a python function to convert polar coordinates with the angle in degrees to Cartesian coordinates.", "code": "import math\ndef polar_degrees_to_cartesian(r, theta):\n    theta = math.radians(theta)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "task_id": "252_34c54f61-d754-41f4-a17c-e6bf4636853c", "test_setup_code": "", "test_list": ["assert polar_degrees_to_cartesian(1, 0) == (1.0, 0.0)", "assert polar_degrees_to_cartesian(1, 90) == (0.0, 1.0)", "assert polar_degrees_to_cartesian(1, 180) == (-1.0, 0.0)", "assert polar_degrees_to_cartesian(1, 270) == (0.0, -1.0)", "assert polar_degrees_to_cartesian(0, 45) == (0.0, 0.0)", "assert polar_degrees_to_cartesian(2, 45) == (math.sqrt(2), math.sqrt(2))", "assert polar_degrees_to_cartesian(2, 135) == (-math.sqrt(2), math.sqrt(2))", "assert polar_degrees_to_cartesian(2, 225) == (-math.sqrt(2), -math.sqrt(2))", "assert polar_degrees_to_cartesian(2, 315) == (math.sqrt(2), -math.sqrt(2))", "assert polar_degrees_to_cartesian(3, 30) == (3 * math.cos(math.radians(30)), 3 * math.sin(math.radians(30)))", "assert polar_degrees_to_cartesian(3, 60) == (3 * math.cos(math.radians(60)), 3 * math.sin(math.radians(60)))", "assert polar_degrees_to_cartesian(3, 120) == (3 * math.cos(math.radians(120)), 3 * math.sin(math.radians(120)))", "assert polar_degrees_to_cartesian(3, 150) == (3 * math.cos(math.radians(150)), 3 * math.sin(math.radians(150)))", "assert polar_degrees_to_cartesian(3, 210) == (3 * math.cos(math.radians(210)), 3 * math.sin(math.radians(210)))", "assert polar_degrees_to_cartesian(3, 330) == (3 * math.cos(math.radians(330)), 3 * math.sin(math.radians(330)))"], "challenge_test_list": []}
{"text": "Write a python function to convert a complex number to Cartesian coordinates.", "code": "def complex_to_cartesian(z):\n    return (z.real, z.imag)", "task_id": "252_e68e4204-8393-49a3-9599-c1360d560f15", "test_setup_code": "", "test_list": ["assert complex_to_cartesian(complex(0, 0)) == (0.0, 0.0)", "assert complex_to_cartesian(complex(1, 0)) == (1.0, 0.0)", "assert complex_to_cartesian(complex(0, 1)) == (0.0, 1.0)", "assert complex_to_cartesian(complex(1, 1)) == (1.0, 1.0)", "assert complex_to_cartesian(complex(-1, -1)) == (-1.0, -1.0)", "assert complex_to_cartesian(complex(1.5, 2.5)) == (1.5, 2.5)", "assert complex_to_cartesian(complex(-1.5, -2.5)) == (-1.5, -2.5)", "assert complex_to_cartesian(complex(0.0001, 0.0001)) == (0.0001, 0.0001)", "assert complex_to_cartesian(complex(-0.0001, -0.0001)) == (-0.0001, -0.0001)", "assert complex_to_cartesian(complex(123456789, 987654321)) == (123456789.0, 987654321.0)", "assert complex_to_cartesian(complex(-123456789, -987654321)) == (-123456789.0, -987654321.0)", "assert complex_to_cartesian(complex(0, -1)) == (0.0, -1.0)", "assert complex_to_cartesian(complex(-1, 0)) == (-1.0, 0.0)", "assert complex_to_cartesian(complex(3.14159, 2.71828)) == (3.14159, 2.71828)", "assert complex_to_cartesian(complex(-3.14159, -2.71828)) == (-3.14159, -2.71828)"], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to a complex number.", "code": "def cartesian_to_complex(x, y):\n    return complex(x, y)", "task_id": "252_befc9991-1913-4298-bfca-8c5403216374", "test_setup_code": "", "test_list": ["assert cartesian_to_complex(0, 0) == 0j", "assert cartesian_to_complex(1, 0) == 1+0j", "assert cartesian_to_complex(0, 1) == 0+1j", "assert cartesian_to_complex(1, 1) == 1+1j", "assert cartesian_to_complex(-1, -1) == -1-1j", "assert cartesian_to_complex(123, 456) == 123+456j", "assert cartesian_to_complex(-123, -456) == -123-456j", "assert cartesian_to_complex(1.5, 2.5) == 1.5+2.5j", "assert cartesian_to_complex(-1.5, -2.5) == -1.5-2.5j", "assert cartesian_to_complex(0.0001, 0.0002) == 0.0001+0.0002j", "assert cartesian_to_complex(-0.0001, -0.0002) == -0.0001-0.0002j", "assert cartesian_to_complex(1e10, 1e10) == 10000000000+10000000000j", "assert cartesian_to_complex(-1e10, -1e10) == -10000000000-10000000000j", "assert cartesian_to_complex(float('inf'), float('inf')) == complex(float('inf'), float('inf'))", "assert cartesian_to_complex(float('-inf'), float('-inf')) == complex(float('-inf'), float('-inf'))"], "challenge_test_list": []}
{"text": "Write a python function to count even numbers from a given list.", "code": "def count_even_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2 == 0:\n            ctr += 1\n    return ctr", "task_id": "253_e2c20b9f-d91d-46c9-a009-d60ff1bd0ac3", "test_setup_code": "", "test_list": ["assert count_even_numbers([1, 2, 3, 4, 5, 6]) == 3", "assert count_even_numbers([2, 4, 6, 8, 10]) == 5", "assert count_even_numbers([1, 3, 5, 7, 9]) == 0", "assert count_even_numbers([]) == 0", "assert count_even_numbers([0, -2, -4, -6]) == 4", "assert count_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_even_numbers([11, 13, 15, 17, 19]) == 0", "assert count_even_numbers([12, 14, 16, 18, 20]) == 5", "assert count_even_numbers([1, 2, 3, 4, 'a', 'b', 6]) == 3", "assert count_even_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 10", "assert count_even_numbers([2]) == 1", "assert count_even_numbers([1]) == 0", "assert count_even_numbers([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 15", "assert count_even_numbers([100, 200, 300, 400, 500]) == 5", "assert count_even_numbers([101, 201, 301, 401, 501]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count strings from a given list.", "code": "def count_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str):\n            ctr += 1\n    return ctr", "task_id": "253_87c53605-f4f8-46b9-977e-4d48c9685d2d", "test_setup_code": "", "test_list": ["assert count_strings(['hello', 'world', 123, 456]) == 2", "assert count_strings([]) == 0", "assert count_strings(['one', 'two', 'three']) == 3", "assert count_strings([1, 2, 3, 4, 5]) == 0", "assert count_strings(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == 7", "assert count_strings(['', ' ', '   ', 'test']) == 4", "assert count_strings([None, True, False, 'yes', 'no']) == 2", "assert count_strings(['123', 123, '456', 456]) == 2", "assert count_strings(['string', 1.23, 4.56, 'another string']) == 2", "assert count_strings(['', '', '', '']) == 4", "assert count_strings(['string', '', 'another string', '']) == 4", "assert count_strings(['a', 1, 'b', 2, 'c', 3]) == 3", "assert count_strings(['one', 'two', 3, 4, 'five', 6]) == 3", "assert count_strings(['', 0, False, 'False', '0']) == 3", "assert count_strings(['a', 'b', 'c', 1, 2, 3, 'd', 'e', 'f']) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count positive integers from a given list.", "code": "def count_positive_integers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i > 0:\n            ctr += 1\n    return ctr", "task_id": "253_431e8a20-c7fb-4088-b68a-6be4e2c98b5f", "test_setup_code": "", "test_list": ["assert count_positive_integers([1, -2, 3, 4, -5]) == 3", "assert count_positive_integers([0, -1, -2, -3]) == 0", "assert count_positive_integers([1, 2, 3, 4, 5]) == 5", "assert count_positive_integers([]) == 0", "assert count_positive_integers([100, 200, 300]) == 3", "assert count_positive_integers([-100, -200, -300]) == 0", "assert count_positive_integers([0, 0, 0, 0]) == 0", "assert count_positive_integers([1]) == 1", "assert count_positive_integers([-1]) == 0", "assert count_positive_integers([1, -1, 1, -1, 1]) == 3", "assert count_positive_integers([1.5, 2.5, 3.5]) == 0", "assert count_positive_integers([1, '2', 3, '4']) == 2", "assert count_positive_integers([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 5", "assert count_positive_integers([1000000, -1000000, 0]) == 1", "assert count_positive_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count negative numbers from a given list.", "code": "def count_negative_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, (int, float)) and i < 0:\n            ctr += 1\n    return ctr", "task_id": "253_8251c5ea-4b5d-43ed-92b6-110598027e0a", "test_setup_code": "", "test_list": ["assert count_negative_numbers([]) == 0", "assert count_negative_numbers([0, 1, 2, 3, 4, 5]) == 0", "assert count_negative_numbers([-1, -2, -3, -4, -5]) == 5", "assert count_negative_numbers([-1, 2, -3, 4, -5]) == 3", "assert count_negative_numbers([1, -1, 2, -2, 3, -3]) == 3", "assert count_negative_numbers([0, -1, 0, -2, 0, -3]) == 3", "assert count_negative_numbers([0, 0, 0, 0, 0]) == 0", "assert count_negative_numbers([-0.1, -2.5, -3.7, 4.8, 5.9]) == 3", "assert count_negative_numbers([1.1, 2.2, 3.3, 4.4, 5.5]) == 0", "assert count_negative_numbers([-1.1, -2.2, -3.3, -4.4, -5.5]) == 5", "assert count_negative_numbers([1, 'a', -2, 'b', -3]) == 2", "assert count_negative_numbers([None, -1, True, -2, False, -3]) == 3", "assert count_negative_numbers([float('-inf'), -1, -2, -3]) == 4", "assert count_negative_numbers([float('inf'), 1, 2, 3]) == 0", "assert count_negative_numbers([1, -1, 2, -2, 3, -3, 0, -0]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count float numbers from a given list.", "code": "def count_floats(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, float):\n            ctr += 1\n    return ctr", "task_id": "253_76e70cf2-1d22-4ab4-a4a0-173587bc10e9", "test_setup_code": "", "test_list": ["assert count_floats([1, 2, 3.5, 4.0, 5]) == 2", "assert count_floats([]) == 0", "assert count_floats([1.1, 2.2, 3.3, 4.4, 5.5]) == 5", "assert count_floats([1, 2, 3, 4, 5]) == 0", "assert count_floats([1.0, 2.0, 3.0, 4.0, 5.0]) == 5", "assert count_floats([1, 2, 3, 4, '5.5']) == 0", "assert count_floats([1.1, '2.2', 3.3, '4.4', 5.5]) == 3", "assert count_floats([1.1, 2.2, 3.3, 4.4, 5.5, '6.6']) == 5", "assert count_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 6", "assert count_floats([1, 2, 3, 4, 5, 6.6]) == 1", "assert count_floats([1.1, 2, 3.3, 4, 5.5, 6]) == 3", "assert count_floats([1, 2, 3, 4, 5, 6]) == 0", "assert count_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == 9", "assert count_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9, 10.10]) == 10", "assert count_floats([1, '2.2', 3, '4.4', 5, '6.6', 7, '8.8', 9, '10.10']) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count odd numbers from a given list.", "code": "def count_odd_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2 != 0:\n            ctr += 1\n    return ctr", "task_id": "253_fed7c79c-5b3d-4c43-89f2-94805f5e98d8", "test_setup_code": "", "test_list": ["assert count_odd_numbers([1, 2, 3, 4, 5]) == 3", "assert count_odd_numbers([2, 4, 6, 8, 10]) == 0", "assert count_odd_numbers([1, 3, 5, 7, 9]) == 5", "assert count_odd_numbers([]) == 0", "assert count_odd_numbers([0, 1, -1, -2, -3]) == 3", "assert count_odd_numbers([1]) == 1", "assert count_odd_numbers([2]) == 0", "assert count_odd_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5", "assert count_odd_numbers([100, 101, 102, 103, 104]) == 2", "assert count_odd_numbers([-1, -3, -5, -7, -9]) == 5", "assert count_odd_numbers([1, 2, '3', 4, 5]) == 2", "assert count_odd_numbers([1.1, 2.2, 3.3, 4.4, 5.5]) == 0", "assert count_odd_numbers([1, 3, 5, 7, 9, 11, 13, 15, 17, 19]) == 10", "assert count_odd_numbers([0, 2, 4, 6, 8, 10, 12, 14, 16, 18]) == 0", "assert count_odd_numbers([1, 'a', 3, 'b', 5]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count boolean values from a given list.", "code": "def count_booleans(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, bool):\n            ctr += 1\n    return ctr", "task_id": "253_af68db9d-a348-4803-97ed-605cba6b4994", "test_setup_code": "", "test_list": ["assert count_booleans([True, False, True, False]) == 4", "assert count_booleans([True, 1, 'True', False, 0, None]) == 2", "assert count_booleans([]) == 0", "assert count_booleans([1, 2, 3, 4, 5]) == 0", "assert count_booleans([True, True, True, True]) == 4", "assert count_booleans([False, False, False, False]) == 4", "assert count_booleans([True, 'False', False, 'True']) == 2", "assert count_booleans([True, False, 1, 0, 'True', 'False']) == 2", "assert count_booleans([None, True, False, None]) == 2", "assert count_booleans([True, True, False, False, True, False, True]) == 7", "assert count_booleans(['True', 'False', 1, 0, None]) == 0", "assert count_booleans([True, False, True, 1, 2, 3, 4, 5, False]) == 3", "assert count_booleans([False, 0, False, 1, False, 'False']) == 3", "assert count_booleans([True, False, True, False, True, False, True, False]) == 8", "assert count_booleans([1, 2, 3, 4, 5, 'True', 'False']) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count non-integer values from a given list.", "code": "def count_non_integers(lst):\n    ctr = 0\n    for i in lst:\n        if not isinstance(i, int):\n            ctr += 1\n    return ctr", "task_id": "253_fa540220-edcf-4964-a69b-91d5f8898fa4", "test_setup_code": "", "test_list": ["assert count_non_integers([1, 2, 3, 4.5, 'a', 6]) == 2", "assert count_non_integers([1, 2, 3, 4, 5, 6]) == 0", "assert count_non_integers(['a', 'b', 'c', 1.1, 2.2, 3.3]) == 6", "assert count_non_integers([]) == 0", "assert count_non_integers([1.1, 2.2, 3.3, 4.4, 5.5]) == 5", "assert count_non_integers([1, 2, 3, 4, 5, 'string']) == 1", "assert count_non_integers([1, 2, 3, 4, 5, None]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, True, False]) == 2", "assert count_non_integers([1, 2, 3, 4, 5, 6.0]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, [1, 2, 3]]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, {1: 'a', 2: 'b'}]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, (1, 2, 3)]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, set([1, 2, 3])]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, frozenset([1, 2, 3])]) == 1", "assert count_non_integers([1, 2, 3, 4, 5, b'bytes']) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count strings that are fully uppercase from a given list.", "code": "def count_uppercase_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str) and i.isupper():\n            ctr += 1\n    return ctr", "task_id": "253_5421f90b-d4dc-4aa7-afc7-de53c5493c1b", "test_setup_code": "", "test_list": ["assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON']) == 3", "assert count_uppercase_strings(['hello', 'WORLD', 'PYTHON']) == 2", "assert count_uppercase_strings(['HELLO', 'world', 'python']) == 1", "assert count_uppercase_strings(['hello', 'world', 'python']) == 0", "assert count_uppercase_strings(['HELLO', 'WORLD', 123, 'PYTHON']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', '', 'PYTHON']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', None, 'PYTHON']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', '']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', '123']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', '123abc']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', 'ABC123']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', 'ABC DEF']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', 'abc DEF']) == 3", "assert count_uppercase_strings(['HELLO', 'WORLD', 'PYTHON', 'ABC DEF GHI']) == 3", "assert count_uppercase_strings([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count non-empty strings from a given list.", "code": "def count_non_empty_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str) and i:\n            ctr += 1\n    return ctr", "task_id": "253_21bd4fa8-139a-41ef-885e-2d16cd79c09c", "test_setup_code": "", "test_list": ["assert count_non_empty_strings(['hello', 'world', '']) == 2", "assert count_non_empty_strings(['', '', '', '']) == 0", "assert count_non_empty_strings(['a', 'b', 'c']) == 3", "assert count_non_empty_strings(['123', '456', '789']) == 3", "assert count_non_empty_strings(['', ' ', 'a', 'b']) == 3", "assert count_non_empty_strings(['', ' ', '']) == 1", "assert count_non_empty_strings(['', 123, 'abc', None, 'def']) == 2", "assert count_non_empty_strings([]) == 0", "assert count_non_empty_strings(['', '']) == 0", "assert count_non_empty_strings(['a', 'b', '', 'c', 'd']) == 4", "assert count_non_empty_strings(['', ' ', '   ', 'a']) == 2", "assert count_non_empty_strings(['test', 'test', 'test']) == 3", "assert count_non_empty_strings(['', None, False, 'True', '']) == 1", "assert count_non_empty_strings(['one', 'two', 'three', '', 'four']) == 4", "assert count_non_empty_strings(['string', 123, 'another string', '', '']) == 2"], "challenge_test_list": []}
{"text": "Write a function to find all words starting with any vowel in a given string.", "code": "import re\ndef find_words_with_vowels(text):\n    return re.findall(r'\\b[aeiouAEIOU]\\w*', text)", "task_id": "254_14287e52-da77-48a3-8c94-535f476bce2d", "test_setup_code": "", "test_list": ["assert find_words_with_vowels('An apple a day keeps the doctor away.') == ['An', 'apple', 'a', 'away']", "assert find_words_with_vowels('Elephants are enormous animals.') == ['Elephants', 'are', 'enormous', 'animals']", "assert find_words_with_vowels('I am an engineer.') == ['I', 'am', 'an', 'engineer']", "assert find_words_with_vowels('Umbrellas are useful during rain.') == ['Umbrellas', 'are', 'useful']", "assert find_words_with_vowels('') == []", "assert find_words_with_vowels('No vowels here.') == []", "assert find_words_with_vowels('Only one word starts with a vowel.') == ['Only', 'one']", "assert find_words_with_vowels('Under the umbrella, it is dry.') == ['Under', 'umbrella']", "assert find_words_with_vowels('An eagle and an owl.') == ['An', 'eagle', 'and', 'an', 'owl']", "assert find_words_with_vowels('A quick brown fox jumps over the lazy dog.') == ['A', 'over']", "assert find_words_with_vowels('Ostriches are the largest birds.') == ['Ostriches', 'are']", "assert find_words_with_vowels('Is it going to rain today?') == ['Is', 'it']", "assert find_words_with_vowels('An igloo is a type of shelter.') == ['An', 'igloo', 'is']", "assert find_words_with_vowels('Apples, oranges, and bananas are fruits.') == ['Apples', 'oranges', 'and', 'are']", "assert find_words_with_vowels('An umbrella is essential in the rain.') == ['An', 'umbrella', 'is', 'essential']"], "challenge_test_list": []}
{"text": "Write a function to find all words starting with any consonant in a given string.", "code": "import re\ndef find_words_with_consonants(text):\n    return re.findall(r'\\b[^aeiouAEIOU\\W]\\w*', text)", "task_id": "254_205e940f-bdba-4135-b047-0e037c71ec9b", "test_setup_code": "", "test_list": ["assert find_words_with_consonants('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'the', 'lazy', 'dog']", "assert find_words_with_consonants('An apple a day keeps the doctor away') == ['day', 'keeps', 'the', 'doctor', 'away']", "assert find_words_with_consonants('') == []", "assert find_words_with_consonants('123 456 789') == []", "assert find_words_with_consonants('!@# $%^ &*()') == []", "assert find_words_with_consonants('Python is fun') == ['Python', 'fun']", "assert find_words_with_consonants('JavaScript and Java are different') == ['JavaScript', 'Java', 'different']", "assert find_words_with_consonants('C++ is a powerful language') == ['C++', 'powerful', 'language']", "assert find_words_with_consonants('HTML and CSS are used for web development') == ['HTML', 'CSS', 'used', 'for', 'web', 'development']", "assert find_words_with_consonants('SQL is used for database management') == ['SQL', 'used', 'for', 'database', 'management']", "assert find_words_with_consonants('Go is a statically typed language') == ['Go', 'statically', 'typed', 'language']", "assert find_words_with_consonants('Rust is gaining popularity') == ['Rust', 'gaining', 'popularity']", "assert find_words_with_consonants('Swift is used for iOS development') == ['Swift', 'used', 'for', 'development']", "assert find_words_with_consonants('Kotlin is used for Android development') == ['Kotlin', 'used', 'for', 'development']", "assert find_words_with_consonants('PHP is a server-side scripting language') == ['PHP', 'server-side', 'scripting', 'language']"], "challenge_test_list": []}
{"text": "Write a function to find all words of a given length in a string.", "code": "import re\ndef find_words_with_length(text, length):\n    return re.findall(r'\\b\\w{' + str(length) + r'}\\b', text)", "task_id": "254_c3cb15fa-a137-430c-9f4d-0f1cb848521d", "test_setup_code": "", "test_list": ["assert find_words_with_length('The quick brown fox jumps over the lazy dog', 3) == ['The', 'fox', 'the', 'dog']", "assert find_words_with_length('The quick brown fox jumps over the lazy dog', 4) == ['over', 'lazy']", "assert find_words_with_length('The quick brown fox jumps over the lazy dog', 5) == ['quick', 'brown', 'jumps']", "assert find_words_with_length('The quick brown fox jumps over the lazy dog', 6) == []", "assert find_words_with_length('A big black bear sat on a big black rug', 3) == ['big', 'sat', 'big', 'rug']", "assert find_words_with_length('A big black bear sat on a big black rug', 4) == ['bear', 'black', 'black']", "assert find_words_with_length('A big black bear sat on a big black rug', 5) == []", "assert find_words_with_length('Hello world', 5) == ['Hello', 'world']", "assert find_words_with_length('Hello world', 4) == []", "assert find_words_with_length('Python is fun', 2) == ['is']", "assert find_words_with_length('Python is fun', 3) == ['fun']", "assert find_words_with_length('Python is fun', 6) == ['Python']", "assert find_words_with_length('123 4567 89', 3) == ['123', '456']", "assert find_words_with_length('123 4567 89', 4) == ['4567']", "assert find_words_with_length('123 4567 89', 2) == ['89']"], "challenge_test_list": []}
{"text": "Write a function to find all words ending with a given suffix in a string.", "code": "import re\ndef find_words_with_suffix(text, suffix):\n    return re.findall(r'\\b\\w*' + re.escape(suffix) + r'\\b', text)", "task_id": "254_cc6d6536-dc6a-426d-87f7-260f3fdb92bb", "test_setup_code": "", "test_list": ["assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'ox') == ['fox']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'dog') == ['dog']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'quick') == ['quick']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'the') == []", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 's') == []", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'z') == []", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'y') == ['lazy']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'own') == ['brown']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'umps') == ['jumps']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'ver') == ['over']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', ' ') == []", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', '') == ['The', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'o') == ['fox', 'dog']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'e') == ['The']", "assert find_words_with_suffix('The quick brown fox jumps over the lazy dog', 'g') == ['dog']"], "challenge_test_list": []}
{"text": "Write a function to find all words starting with a given prefix in a string.", "code": "import re\ndef find_words_with_prefix(text, prefix):\n    return re.findall(r'\\b' + re.escape(prefix) + r'\\w*', text)", "task_id": "254_0e720e47-0833-49c6-a7d1-7a9793e9fc82", "test_setup_code": "", "test_list": ["assert find_words_with_prefix('apple apricot banana', 'ap') == ['apple', 'apricot']", "assert find_words_with_prefix('apple apricot banana', 'ba') == ['banana']", "assert find_words_with_prefix('apple apricot banana', 'ca') == []", "assert find_words_with_prefix('apple apricot banana', '') == ['apple', 'apricot', 'banana']", "assert find_words_with_prefix('apple apricot banana', 'a') == ['apple', 'apricot']", "assert find_words_with_prefix('apple apricot banana', 'b') == ['banana']", "assert find_words_with_prefix('apple apricot banana', 'banana') == ['banana']", "assert find_words_with_prefix('apple apricot banana', 'apple') == ['apple']", "assert find_words_with_prefix('apple apricot banana', 'apri') == ['apricot']", "assert find_words_with_prefix('apple apricot banana', 'ban') == ['banana']", "assert find_words_with_prefix('apple apricot banana', 'banan') == ['banana']", "assert find_words_with_prefix('apple apricot banana', 'bananas') == []", "assert find_words_with_prefix('apple apricot banana', 'apples') == []", "assert find_words_with_prefix('apple apricot banana', 'apric') == ['apricot']", "assert find_words_with_prefix('apple apricot banana', 'apricot') == ['apricot']"], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one digit in a string.", "code": "import re\ndef find_words_with_digit(text):\n    return re.findall(r'\\b\\w*\\d\\w*\\b', text)", "task_id": "254_b325bb91-1149-4438-b52f-ef24fd622cf5", "test_setup_code": "", "test_list": ["assert find_words_with_digit('hello world 123') == ['123']", "assert find_words_with_digit('abc1 def2 ghi3') == ['abc1', 'def2', 'ghi3']", "assert find_words_with_digit('no digits here') == []", "assert find_words_with_digit('123abc 456def 789ghi') == ['123abc', '456def', '789ghi']", "assert find_words_with_digit('one1 two2 three3 four4') == ['one1', 'two2', 'three3', 'four4']", "assert find_words_with_digit('1a 2b 3c 4d') == ['1a', '2b', '3c', '4d']", "assert find_words_with_digit('a1b c2d e3f g4h') == ['a1b', 'c2d', 'e3f', 'g4h']", "assert find_words_with_digit('') == []", "assert find_words_with_digit('123 456 789') == ['123', '456', '789']", "assert find_words_with_digit('a1 b2 c3 d4 e5 f6 g7 h8 i9 j0') == ['a1', 'b2', 'c3', 'd4', 'e5', 'f6', 'g7', 'h8', 'i9', 'j0']", "assert find_words_with_digit('no1digits2here3') == ['no1digits2here3']", "assert find_words_with_digit('1 2 3 4 5 6 7 8 9 0') == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0']", "assert find_words_with_digit('abc def ghi') == []", "assert find_words_with_digit('a1b2c3 d4e5f6 g7h8i9') == ['a1b2c3', 'd4e5f6', 'g7h8i9']", "assert find_words_with_digit('word1 another2word yet3another') == ['word1', 'another2word', 'yet3another']"], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one special character in a string.", "code": "import re\ndef find_words_with_special_char(text):\n    return re.findall(r'\\b\\w*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+\\w*\\b', text)", "task_id": "254_9f24def3-61ff-4750-a342-6a5c9163426b", "test_setup_code": "", "test_list": ["assert find_words_with_special_char('Hello! How are you?') == ['Hello!']", "assert find_words_with_special_char('No special characters here') == []", "assert find_words_with_special_char('Special@characters#are$fun%') == ['Special@characters#are$fun%']", "assert find_words_with_special_char('Mix of words and symbols: word1, word2, word3!') == ['word3!']", "assert find_words_with_special_char('Symbols in the middle of a word: mid@dle') == ['mid@dle']", "assert find_words_with_special_char('Multiple! special@ characters# in$ one% sentence^') == ['Multiple!', 'special@', 'characters#', 'in$', 'one%']", "assert find_words_with_special_char('Edge-case: symbols at the end!') == ['end!']", "assert find_words_with_special_char('Edge-case: symbols at the beginning!@start') == ['beginning!@start']", "assert find_words_with_special_char('Only symbols: !@#$%^&*()') == ['!@#$%^&*()']", "assert find_words_with_special_char('Empty string') == []", "assert find_words_with_special_char('Special characters with numbers: 123! 456@ 789#') == ['123!', '456@', '789#']", "assert find_words_with_special_char('Special characters with underscores: under_score_@') == ['under_score_@']", "assert find_words_with_special_char('Special characters with hyphens: hyphen-ated!') == ['hyphen-ated!']", "assert find_words_with_special_char('Special characters with spaces: spaced out! word') == ['out!']", "assert find_words_with_special_char('Special characters with quotes: \"quoted!\"') == ['quoted!']"], "challenge_test_list": []}
{"text": "Write a function to find all words starting with a capital letter in a string.", "code": "import re\ndef find_words_with_capital(text):\n    return re.findall(r'\\b[A-Z]\\w*', text)", "task_id": "254_00c50a14-75a5-45cd-a127-c21cf78f512a", "test_setup_code": "", "test_list": ["assert find_words_with_capital('Hello World') == ['Hello', 'World']", "assert find_words_with_capital('This is a Test') == ['This', 'Test']", "assert find_words_with_capital('no Capital letters here') == []", "assert find_words_with_capital('A quick Brown Fox') == ['A', 'Brown', 'Fox']", "assert find_words_with_capital('Multiple CAPITALS In A Sentence') == ['Multiple', 'CAPITALS', 'In', 'A', 'Sentence']", "assert find_words_with_capital('EdgeCaseWithNoSpaces') == ['EdgeCaseWithNoSpaces']", "assert find_words_with_capital('AnotherEdgeCASE') == ['AnotherEdgeCASE']", "assert find_words_with_capital('') == []", "assert find_words_with_capital('123 Numbers 456') == []", "assert find_words_with_capital('SpecialCharacters! @#$%^&*()') == []", "assert find_words_with_capital('Mixed 123 and Words') == ['Mixed', 'Words']", "assert find_words_with_capital('CamelCaseWordsLikeThis') == ['CamelCaseWordsLikeThis']", "assert find_words_with_capital('lowercase and UPPERCASE') == ['UPPERCASE']", "assert find_words_with_capital('Single') == ['Single']", "assert find_words_with_capital('Two Words') == ['Two', 'Words']"], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one repeated character in a string.", "code": "import re\ndef find_words_with_repeated_chars(text):\n    return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "254_ba3f4ba2-1b16-4bab-a1ac-c774023f4aff", "test_setup_code": "", "test_list": ["assert find_words_with_repeated_chars('This is a test sentence with no repeated characters') == []", "assert find_words_with_repeated_chars('Look at that balloon') == ['balloon']", "assert find_words_with_repeated_chars('I see a bee') == ['see', 'bee']", "assert find_words_with_repeated_chars('The address is 1234 Elm St') == ['address']", "assert find_words_with_repeated_chars('Mississippi river') == ['Mississippi']", "assert find_words_with_repeated_chars('Happy birthday to you') == ['Happy']", "assert find_words_with_repeated_chars('No repeated characters here') == []", "assert find_words_with_repeated_chars('Good food is good') == ['Good', 'food', 'good']", "assert find_words_with_repeated_chars('She sells seashells by the seashore') == ['sells', 'seashells', 'seashore']", "assert find_words_with_repeated_chars('This is a simple example') == []", "assert find_words_with_repeated_chars('A quick brown fox jumps over the lazy dog') == []", "assert find_words_with_repeated_chars('Programming is fun') == ['Programming']", "assert find_words_with_repeated_chars('I love to eat apples and bananas') == ['apples', 'bananas']", "assert find_words_with_repeated_chars('The committee will meet tomorrow') == ['committee']", "assert find_words_with_repeated_chars('Success is not final, failure is not fatal') == ['Success', 'failure']"], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words in a string.", "code": "import re\ndef find_words_with_palindromes(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if word == word[::-1]]", "task_id": "254_9acdc07a-2d2e-40f9-9e3f-cf3ba3e9870d", "test_setup_code": "", "test_list": ["assert find_words_with_palindromes('madam racecar level') == ['madam', 'racecar', 'level']", "assert find_words_with_palindromes('hello world') == []", "assert find_words_with_palindromes('A man a plan a canal Panama') == []", "assert find_words_with_palindromes('') == []", "assert find_words_with_palindromes('noon civic kayak') == ['noon', 'civic', 'kayak']", "assert find_words_with_palindromes('Was it a car or a cat I saw') == []", "assert find_words_with_palindromes('refer deified rotator') == ['refer', 'deified', 'rotator']", "assert find_words_with_palindromes('step on no pets') == []", "assert find_words_with_palindromes('madam in Eden Im Adam') == []", "assert find_words_with_palindromes('Eva can I see bees in a cave') == []", "assert find_words_with_palindromes('aibohphobia') == ['aibohphobia']", "assert find_words_with_palindromes('repaper') == ['repaper']", "assert find_words_with_palindromes('detartrated') == ['detartrated']", "assert find_words_with_palindromes('Malayalam') == []", "assert find_words_with_palindromes('Able was I ere I saw Elba') == []"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of numbers from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_numbers(nums, k):\n    return list(combinations_with_replacement(nums, k))", "task_id": "255_5e9e74d4-3647-45cb-8f8b-5b69fadec8a4", "test_setup_code": "", "test_list": ["assert choose_numbers([1, 2, 3], 2) == [(1, 1), (1, 2), (1, 3), (2, 2), (2, 3), (3, 3)]", "assert choose_numbers([1], 1) == [(1,)]", "assert choose_numbers([1, 2], 3) == [(1, 1, 1), (1, 1, 2), (1, 2, 2), (2, 2, 2)]", "assert choose_numbers([], 2) == []", "assert choose_numbers([1, 2, 3, 4], 1) == [(1,), (2,), (3,), (4,)]", "assert choose_numbers([5, 6], 0) == [()]", "assert choose_numbers([1, 2, 3], 3) == [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 2), (1, 2, 3), (1, 3, 3), (2, 2, 2), (2, 2, 3), (2, 3, 3), (3, 3, 3)]", "assert choose_numbers([1, 2, 3, 4], 2) == [(1, 1), (1, 2), (1, 3), (1, 4), (2, 2), (2, 3), (2, 4), (3, 3), (3, 4), (4, 4)]", "assert choose_numbers([1, 2], 1) == [(1,), (2,)]", "assert choose_numbers([1, 2, 3, 4, 5], 3) == [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 1, 5), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 3, 3), (1, 3, 4), (1, 3, 5), (1, 4, 4), (1, 4, 5), (1, 5, 5), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 2, 5), (2, 3, 3), (2, 3, 4), (2, 3, 5), (2, 4, 4), (2, 4, 5), (2, 5, 5), (3, 3, 3), (3, 3, 4), (3, 3, 5), (3, 4, 4), (3, 4, 5), (3, 5, 5), (4, 4, 4), (4, 4, 5), (4, 5, 5), (5, 5, 5)]", "assert choose_numbers([1, 2, 3], 0) == [()]", "assert choose_numbers([1, 2, 3, 4, 5, 6], 2) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 2), (2, 3), (2, 4), (2, 5), (2, 6), (3, 3), (3, 4), (3, 5), (3, 6), (4, 4), (4, 5), (4, 6), (5, 5), (5, 6), (6, 6)]", "assert choose_numbers([1, 2, 3, 4, 5], 1) == [(1,), (2,), (3,), (4,), (5,)]", "assert choose_numbers([1, 2, 3], 4) == [(1, 1, 1, 1), (1, 1, 1, 2), (1, 1, 1, 3), (1, 1, 2, 2), (1, 1, 2, 3), (1, 1, 3, 3), (1, 2, 2, 2), (1, 2, 2, 3), (1, 2, 3, 3), (1, 3, 3, 3), (2, 2, 2, 2), (2, 2, 2, 3), (2, 2, 3, 3), (2, 3, 3, 3), (3, 3, 3, 3)]", "assert choose_numbers([1, 2, 3, 4], 3) == [(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 1, 4), (1, 2, 2), (1, 2, 3), (1, 2, 4), (1, 3, 3), (1, 3, 4), (1, 4, 4), (2, 2, 2), (2, 2, 3), (2, 2, 4), (2, 3, 3), (2, 3, 4), (2, 4, 4), (3, 3, 3), (3, 3, 4), (3, 4, 4), (4, 4, 4)]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of letters from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_letters(letters, k):\n    return list(combinations_with_replacement(letters, k))", "task_id": "255_46dbefe5-a33a-4a25-9984-fd8f36cb8437", "test_setup_code": "", "test_list": ["assert choose_letters(['a', 'b', 'c'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('b', 'b'), ('b', 'c'), ('c', 'c')]", "assert choose_letters(['x', 'y'], 1) == [('x',), ('y',)]", "assert choose_letters(['p', 'q', 'r'], 3) == [('p', 'p', 'p'), ('p', 'p', 'q'), ('p', 'p', 'r'), ('p', 'q', 'q'), ('p', 'q', 'r'), ('p', 'r', 'r'), ('q', 'q', 'q'), ('q', 'q', 'r'), ('q', 'r', 'r'), ('r', 'r', 'r')]", "assert choose_letters(['a'], 2) == [('a', 'a')]", "assert choose_letters([], 2) == []", "assert choose_letters(['a', 'b'], 0) == [()]", "assert choose_letters(['a', 'b', 'c'], 1) == [('a',), ('b',), ('c',)]", "assert choose_letters(['a', 'b', 'c'], 4) == [('a', 'a', 'a', 'a'), ('a', 'a', 'a', 'b'), ('a', 'a', 'a', 'c'), ('a', 'a', 'b', 'b'), ('a', 'a', 'b', 'c'), ('a', 'a', 'c', 'c'), ('a', 'b', 'b', 'b'), ('a', 'b', 'b', 'c'), ('a', 'b', 'c', 'c'), ('a', 'c', 'c', 'c'), ('b', 'b', 'b', 'b'), ('b', 'b', 'b', 'c'), ('b', 'b', 'c', 'c'), ('b', 'c', 'c', 'c'), ('c', 'c', 'c', 'c')]", "assert choose_letters(['x', 'y', 'z'], 2) == [('x', 'x'), ('x', 'y'), ('x', 'z'), ('y', 'y'), ('y', 'z'), ('z', 'z')]", "assert choose_letters(['a', 'b', 'c', 'd'], 2) == [('a', 'a'), ('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'b'), ('b', 'c'), ('b', 'd'), ('c', 'c'), ('c', 'd'), ('d', 'd')]", "assert choose_letters(['a', 'b', 'c', 'd'], 3) == [('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'a', 'c'), ('a', 'a', 'd'), ('a', 'b', 'b'), ('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'c'), ('a', 'c', 'd'), ('a', 'd', 'd'), ('b', 'b', 'b'), ('b', 'b', 'c'), ('b', 'b', 'd'), ('b', 'c', 'c'), ('b', 'c', 'd'), ('b', 'd', 'd'), ('c', 'c', 'c'), ('c', 'c', 'd'), ('c', 'd', 'd'), ('d', 'd', 'd')]", "assert choose_letters(['a', 'b'], 3) == [('a', 'a', 'a'), ('a', 'a', 'b'), ('a', 'b', 'b'), ('b', 'b', 'b')]", "assert choose_letters(['x', 'y', 'z'], 1) == [('x',), ('y',), ('z',)]", "assert choose_letters(['m', 'n'], 2) == [('m', 'm'), ('m', 'n'), ('n', 'n')]", "assert choose_letters(['a', 'b', 'c', 'd'], 1) == [('a',), ('b',), ('c',), ('d',)]", "assert choose_letters(['a', 'b', 'c'], 0) == [()]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of fruits from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_fruits(fruits, k):\n    return list(combinations_with_replacement(fruits, k))", "task_id": "255_71d5f610-01b9-4782-8f6c-ece6f8daf553", "test_setup_code": "", "test_list": ["assert choose_fruits(['apple', 'banana', 'cherry'], 2) == [('apple', 'apple'), ('apple', 'banana'), ('apple', 'cherry'), ('banana', 'banana'), ('banana', 'cherry'), ('cherry', 'cherry')]", "assert choose_fruits(['apple', 'banana'], 1) == [('apple'), ('banana')]", "assert choose_fruits(['apple', 'banana', 'cherry'], 3) == [('apple', 'apple', 'apple'), ('apple', 'apple', 'banana'), ('apple', 'apple', 'cherry'), ('apple', 'banana', 'banana'), ('apple', 'banana', 'cherry'), ('apple', 'cherry', 'cherry'), ('banana', 'banana', 'banana'), ('banana', 'banana', 'cherry'), ('banana', 'cherry', 'cherry'), ('cherry', 'cherry', 'cherry')]", "assert choose_fruits([], 2) == []", "assert choose_fruits(['apple'], 2) == [('apple', 'apple')]", "assert choose_fruits(['apple', 'banana'], 0) == [()]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date'], 1) == [('apple'), ('banana'), ('cherry'), ('date')]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date'], 2) == [('apple', 'apple'), ('apple', 'banana'), ('apple', 'cherry'), ('apple', 'date'), ('banana', 'banana'), ('banana', 'cherry'), ('banana', 'date'), ('cherry', 'cherry'), ('cherry', 'date'), ('date', 'date')]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date'], 3) == [('apple', 'apple', 'apple'), ('apple', 'apple', 'banana'), ('apple', 'apple', 'cherry'), ('apple', 'apple', 'date'), ('apple', 'banana', 'banana'), ('apple', 'banana', 'cherry'), ('apple', 'banana', 'date'), ('apple', 'cherry', 'cherry'), ('apple', 'cherry', 'date'), ('apple', 'date', 'date'), ('banana', 'banana', 'banana'), ('banana', 'banana', 'cherry'), ('banana', 'banana', 'date'), ('banana', 'cherry', 'cherry'), ('banana', 'cherry', 'date'), ('banana', 'date', 'date'), ('cherry', 'cherry', 'cherry'), ('cherry', 'cherry', 'date'), ('cherry', 'date', 'date'), ('date', 'date', 'date')]", "assert choose_fruits(['apple', 'banana'], 3) == [('apple', 'apple', 'apple'), ('apple', 'apple', 'banana'), ('apple', 'banana', 'banana'), ('banana', 'banana', 'banana')]", "assert choose_fruits(['apple', 'banana', 'cherry'], 1) == [('apple'), ('banana'), ('cherry')]", "assert choose_fruits(['apple', 'banana', 'cherry'], 0) == [()]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date', 'elderberry'], 2) == [('apple', 'apple'), ('apple', 'banana'), ('apple', 'cherry'), ('apple', 'date'), ('apple', 'elderberry'), ('banana', 'banana'), ('banana', 'cherry'), ('banana', 'date'), ('banana', 'elderberry'), ('cherry', 'cherry'), ('cherry', 'date'), ('cherry', 'elderberry'), ('date', 'date'), ('date', 'elderberry'), ('elderberry', 'elderberry')]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date', 'elderberry'], 1) == [('apple'), ('banana'), ('cherry'), ('date'), ('elderberry')]", "assert choose_fruits(['apple', 'banana', 'cherry', 'date', 'elderberry'], 3) == [('apple', 'apple', 'apple'), ('apple', 'apple', 'banana'), ('apple', 'apple', 'cherry'), ('apple', 'apple', 'date'), ('apple', 'apple', 'elderberry'), ('apple', 'banana', 'banana'), ('apple', 'banana', 'cherry'), ('apple', 'banana', 'date'), ('apple', 'banana', 'elderberry'), ('apple', 'cherry', 'cherry'), ('apple', 'cherry', 'date'), ('apple', 'cherry', 'elderberry'), ('apple', 'date', 'date'), ('apple', 'date', 'elderberry'), ('apple', 'elderberry', 'elderberry'), ('banana', 'banana', 'banana'), ('banana', 'banana', 'cherry'), ('banana', 'banana', 'date'), ('banana', 'banana', 'elderberry'), ('banana', 'cherry', 'cherry'), ('banana', 'cherry', 'date'), ('banana', 'cherry', 'elderberry'), ('banana', 'date', 'date'), ('banana', 'date', 'elderberry'), ('banana', 'elderberry', 'elderberry'), ('cherry', 'cherry', 'cherry'), ('cherry', 'cherry', 'date'), ('cherry', 'cherry', 'elderberry'), ('cherry', 'date', 'date'), ('cherry', 'date', 'elderberry'), ('cherry', 'elderberry', 'elderberry'), ('date', 'date', 'date'), ('date', 'date', 'elderberry'), ('date', 'elderberry', 'elderberry'), ('elderberry', 'elderberry', 'elderberry')]", "assert choose_fruits(['apple', 'banana', 'cherry'], 4) == [('apple', 'apple', 'apple', 'apple'), ('apple', 'apple', 'apple', 'banana'), ('apple', 'apple', 'apple', 'cherry'), ('apple', 'apple', 'banana', 'banana'), ('apple', 'apple', 'banana', 'cherry'), ('apple', 'apple', 'cherry', 'cherry'), ('apple', 'banana', 'banana', 'banana'), ('apple', 'banana', 'banana', 'cherry'), ('apple', 'banana', 'cherry', 'cherry'), ('apple', 'cherry', 'cherry', 'cherry'), ('banana', 'banana', 'banana', 'banana'), ('banana', 'banana', 'banana', 'cherry'), ('banana', 'banana', 'cherry', 'cherry'), ('banana', 'cherry', 'cherry', 'cherry'), ('cherry', 'cherry', 'cherry', 'cherry')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of animals from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_animals(animals, k):\n    return list(combinations_with_replacement(animals, k))", "task_id": "255_6f1c31c8-7e64-4385-bc78-fbdb5c733dc8", "test_setup_code": "", "test_list": ["assert choose_animals(['cat', 'dog', 'fish'], 2) == [('cat', 'cat'), ('cat', 'dog'), ('cat', 'fish'), ('dog', 'dog'), ('dog', 'fish'), ('fish', 'fish')]", "assert choose_animals(['cat', 'dog'], 1) == [('cat',), ('dog',)]", "assert choose_animals(['cat'], 3) == [('cat', 'cat', 'cat')]", "assert choose_animals(['cat', 'dog', 'fish'], 0) == [()]", "assert choose_animals([], 2) == []", "assert choose_animals(['cat', 'dog', 'fish'], 1) == [('cat',), ('dog',), ('fish',)]", "assert choose_animals(['cat', 'dog', 'fish'], 3) == [('cat', 'cat', 'cat'), ('cat', 'cat', 'dog'), ('cat', 'cat', 'fish'), ('cat', 'dog', 'dog'), ('cat', 'dog', 'fish'), ('cat', 'fish', 'fish'), ('dog', 'dog', 'dog'), ('dog', 'dog', 'fish'), ('dog', 'fish', 'fish'), ('fish', 'fish', 'fish')]", "assert choose_animals(['cat', 'dog', 'fish', 'bird'], 2) == [('cat', 'cat'), ('cat', 'dog'), ('cat', 'fish'), ('cat', 'bird'), ('dog', 'dog'), ('dog', 'fish'), ('dog', 'bird'), ('fish', 'fish'), ('fish', 'bird'), ('bird', 'bird')]", "assert choose_animals(['cat', 'dog'], 3) == [('cat', 'cat', 'cat'), ('cat', 'cat', 'dog'), ('cat', 'dog', 'dog'), ('dog', 'dog', 'dog')]", "assert choose_animals(['cat', 'dog', 'fish', 'bird'], 1) == [('cat',), ('dog',), ('fish',), ('bird',)]", "assert choose_animals(['cat', 'dog', 'fish', 'bird'], 4) == [('cat', 'cat', 'cat', 'cat'), ('cat', 'cat', 'cat', 'dog'), ('cat', 'cat', 'cat', 'fish'), ('cat', 'cat', 'cat', 'bird'), ('cat', 'cat', 'dog', 'dog'), ('cat', 'cat', 'dog', 'fish'), ('cat', 'cat', 'dog', 'bird'), ('cat', 'cat', 'fish', 'fish'), ('cat', 'cat', 'fish', 'bird'), ('cat', 'cat', 'bird', 'bird'), ('cat', 'dog', 'dog', 'dog'), ('cat', 'dog', 'dog', 'fish'), ('cat', 'dog', 'dog', 'bird'), ('cat', 'dog', 'fish', 'fish'), ('cat', 'dog', 'fish', 'bird'), ('cat', 'dog', 'bird', 'bird'), ('cat', 'fish', 'fish', 'fish'), ('cat', 'fish', 'fish', 'bird'), ('cat', 'fish', 'bird', 'bird'), ('cat', 'bird', 'bird', 'bird'), ('dog', 'dog', 'dog', 'dog'), ('dog', 'dog', 'dog', 'fish'), ('dog', 'dog', 'dog', 'bird'), ('dog', 'dog', 'fish', 'fish'), ('dog', 'dog', 'fish', 'bird'), ('dog', 'dog', 'bird', 'bird'), ('dog', 'fish', 'fish', 'fish'), ('dog', 'fish', 'fish', 'bird'), ('dog', 'fish', 'bird', 'bird'), ('dog', 'bird', 'bird', 'bird'), ('fish', 'fish', 'fish', 'fish'), ('fish', 'fish', 'fish', 'bird'), ('fish', 'fish', 'bird', 'bird'), ('fish', 'bird', 'bird', 'bird'), ('bird', 'bird', 'bird', 'bird')]", "assert choose_animals(['cat', 'dog', 'fish'], 4) == [('cat', 'cat', 'cat', 'cat'), ('cat', 'cat', 'cat', 'dog'), ('cat', 'cat', 'cat', 'fish'), ('cat', 'cat', 'dog', 'dog'), ('cat', 'cat', 'dog', 'fish'), ('cat', 'cat', 'fish', 'fish'), ('cat', 'dog', 'dog', 'dog'), ('cat', 'dog', 'dog', 'fish'), ('cat', 'dog', 'fish', 'fish'), ('cat', 'fish', 'fish', 'fish'), ('dog', 'dog', 'dog', 'dog'), ('dog', 'dog', 'dog', 'fish'), ('dog', 'dog', 'fish', 'fish'), ('dog', 'fish', 'fish', 'fish'), ('fish', 'fish', 'fish', 'fish')]", "assert choose_animals(['cat', 'dog', 'fish', 'bird'], 3) == [('cat', 'cat', 'cat'), ('cat', 'cat', 'dog'), ('cat', 'cat', 'fish'), ('cat', 'cat', 'bird'), ('cat', 'dog', 'dog'), ('cat', 'dog', 'fish'), ('cat', 'dog', 'bird'), ('cat', 'fish', 'fish'), ('cat', 'fish', 'bird'), ('cat', 'bird', 'bird'), ('dog', 'dog', 'dog'), ('dog', 'dog', 'fish'), ('dog', 'dog', 'bird'), ('dog', 'fish', 'fish'), ('dog', 'fish', 'bird'), ('dog', 'bird', 'bird'), ('fish', 'fish', 'fish'), ('fish', 'fish', 'bird'), ('fish', 'bird', 'bird'), ('bird', 'bird', 'bird')]", "assert choose_animals(['cat', 'dog', 'fish'], 5) == [('cat', 'cat', 'cat', 'cat', 'cat'), ('cat', 'cat', 'cat', 'cat', 'dog'), ('cat', 'cat', 'cat', 'cat', 'fish'), ('cat', 'cat', 'cat', 'dog', 'dog'), ('cat', 'cat', 'cat', 'dog', 'fish'), ('cat', 'cat', 'cat', 'fish', 'fish'), ('cat', 'cat', 'dog', 'dog', 'dog'), ('cat', 'cat', 'dog', 'dog', 'fish'), ('cat', 'cat', 'dog', 'fish', 'fish'), ('cat', 'cat', 'fish', 'fish', 'fish'), ('cat', 'dog', 'dog', 'dog', 'dog'), ('cat', 'dog', 'dog', 'dog', 'fish'), ('cat', 'dog', 'dog', 'fish', 'fish'), ('cat', 'dog', 'fish', 'fish', 'fish'), ('cat', 'fish', 'fish', 'fish', 'fish'), ('dog', 'dog', 'dog', 'dog', 'dog'), ('dog', 'dog', 'dog', 'dog', 'fish'), ('dog', 'dog', 'dog', 'fish', 'fish'), ('dog', 'dog', 'fish', 'fish', 'fish'), ('dog', 'fish', 'fish', 'fish', 'fish'), ('fish', 'fish', 'fish', 'fish', 'fish')]", "assert choose_animals(['cat', 'dog', 'fish', 'bird', 'rabbit'], 2) == [('cat', 'cat'), ('cat', 'dog'), ('cat', 'fish'), ('cat', 'bird'), ('cat', 'rabbit'), ('dog', 'dog'), ('dog', 'fish'), ('dog', 'bird'), ('dog', 'rabbit'), ('fish', 'fish'), ('fish', 'bird'), ('fish', 'rabbit'), ('bird', 'bird'), ('bird', 'rabbit'), ('rabbit', 'rabbit')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of flowers from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_flowers(flowers, k):\n    return list(combinations_with_replacement(flowers, k))", "task_id": "255_63ab828b-0ded-475f-a634-470abc9bec4f", "test_setup_code": "", "test_list": ["assert choose_flowers(['rose', 'tulip', 'daisy'], 2) == [('rose', 'rose'), ('rose', 'tulip'), ('rose', 'daisy'), ('tulip', 'tulip'), ('tulip', 'daisy'), ('daisy', 'daisy')]", "assert choose_flowers(['rose', 'tulip'], 1) == [('rose'), ('tulip')]", "assert choose_flowers(['rose', 'tulip'], 0) == [()]", "assert choose_flowers([], 2) == []", "assert choose_flowers(['rose'], 3) == [('rose', 'rose', 'rose')]", "assert choose_flowers(['rose', 'tulip', 'daisy', 'lily'], 2) == [('rose', 'rose'), ('rose', 'tulip'), ('rose', 'daisy'), ('rose', 'lily'), ('tulip', 'tulip'), ('tulip', 'daisy'), ('tulip', 'lily'), ('daisy', 'daisy'), ('daisy', 'lily'), ('lily', 'lily')]", "assert choose_flowers(['rose', 'tulip', 'daisy'], 3) == [('rose', 'rose', 'rose'), ('rose', 'rose', 'tulip'), ('rose', 'rose', 'daisy'), ('rose', 'tulip', 'tulip'), ('rose', 'tulip', 'daisy'), ('rose', 'daisy', 'daisy'), ('tulip', 'tulip', 'tulip'), ('tulip', 'tulip', 'daisy'), ('tulip', 'daisy', 'daisy'), ('daisy', 'daisy', 'daisy')]", "assert choose_flowers(['rose', 'tulip', 'daisy'], 1) == [('rose'), ('tulip'), ('daisy')]", "assert choose_flowers(['rose', 'tulip', 'daisy', 'lily'], 1) == [('rose'), ('tulip'), ('daisy'), ('lily')]", "assert choose_flowers(['rose', 'tulip'], 3) == [('rose', 'rose', 'rose'), ('rose', 'rose', 'tulip'), ('rose', 'tulip', 'tulip'), ('tulip', 'tulip', 'tulip')]", "assert choose_flowers(['rose', 'tulip', 'daisy', 'lily'], 0) == [()]", "assert choose_flowers(['rose', 'tulip', 'daisy', 'lily'], 4) == [('rose', 'rose', 'rose', 'rose'), ('rose', 'rose', 'rose', 'tulip'), ('rose', 'rose', 'rose', 'daisy'), ('rose', 'rose', 'rose', 'lily'), ('rose', 'rose', 'tulip', 'tulip'), ('rose', 'rose', 'tulip', 'daisy'), ('rose', 'rose', 'tulip', 'lily'), ('rose', 'rose', 'daisy', 'daisy'), ('rose', 'rose', 'daisy', 'lily'), ('rose', 'rose', 'lily', 'lily'), ('rose', 'tulip', 'tulip', 'tulip'), ('rose', 'tulip', 'tulip', 'daisy'), ('rose', 'tulip', 'tulip', 'lily'), ('rose', 'tulip', 'daisy', 'daisy'), ('rose', 'tulip', 'daisy', 'lily'), ('rose', 'tulip', 'lily', 'lily'), ('rose', 'daisy', 'daisy', 'daisy'), ('rose', 'daisy', 'daisy', 'lily'), ('rose', 'daisy', 'lily', 'lily'), ('rose', 'lily', 'lily', 'lily'), ('tulip', 'tulip', 'tulip', 'tulip'), ('tulip', 'tulip', 'tulip', 'daisy'), ('tulip', 'tulip', 'tulip', 'lily'), ('tulip', 'tulip', 'daisy', 'daisy'), ('tulip', 'tulip', 'daisy', 'lily'), ('tulip', 'tulip', 'lily', 'lily'), ('tulip', 'daisy', 'daisy', 'daisy'), ('tulip', 'daisy', 'daisy', 'lily'), ('tulip', 'daisy', 'lily', 'lily'), ('tulip', 'lily', 'lily', 'lily'), ('daisy', 'daisy', 'daisy', 'daisy'), ('daisy', 'daisy', 'daisy', 'lily'), ('daisy', 'daisy', 'lily', 'lily'), ('daisy', 'lily', 'lily', 'lily'), ('lily', 'lily', 'lily', 'lily')]", "assert choose_flowers(['rose', 'tulip'], 2) == [('rose', 'rose'), ('rose', 'tulip'), ('tulip', 'tulip')]", "assert choose_flowers(['rose'], 1) == [('rose')]", "assert choose_flowers(['rose', 'tulip', 'daisy', 'lily'], 3) == [('rose', 'rose', 'rose'), ('rose', 'rose', 'tulip'), ('rose', 'rose', 'daisy'), ('rose', 'rose', 'lily'), ('rose', 'tulip', 'tulip'), ('rose', 'tulip', 'daisy'), ('rose', 'tulip', 'lily'), ('rose', 'daisy', 'daisy'), ('rose', 'daisy', 'lily'), ('rose', 'lily', 'lily'), ('tulip', 'tulip', 'tulip'), ('tulip', 'tulip', 'daisy'), ('tulip', 'tulip', 'lily'), ('tulip', 'daisy', 'daisy'), ('tulip', 'daisy', 'lily'), ('tulip', 'lily', 'lily'), ('daisy', 'daisy', 'daisy'), ('daisy', 'daisy', 'lily'), ('daisy', 'lily', 'lily'), ('lily', 'lily', 'lily')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of shapes from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_shapes(shapes, k):\n    return list(combinations_with_replacement(shapes, k))", "task_id": "255_931880a4-0904-42e5-9c83-45822ab1967d", "test_setup_code": "", "test_list": ["assert choose_shapes(['circle', 'square', 'triangle'], 2) == [('circle', 'circle'), ('circle', 'square'), ('circle', 'triangle'), ('square', 'square'), ('square', 'triangle'), ('triangle', 'triangle')]", "assert choose_shapes(['circle', 'square'], 3) == [('circle', 'circle', 'circle'), ('circle', 'circle', 'square'), ('circle', 'square', 'square'), ('square', 'square', 'square')]", "assert choose_shapes(['circle'], 1) == [('circle',)]", "assert choose_shapes(['circle', 'square', 'triangle'], 0) == [()]", "assert choose_shapes([], 2) == []", "assert choose_shapes(['circle', 'square', 'triangle'], 1) == [('circle',), ('square',), ('triangle',)]", "assert choose_shapes(['circle', 'square', 'triangle'], 3) == [('circle', 'circle', 'circle'), ('circle', 'circle', 'square'), ('circle', 'circle', 'triangle'), ('circle', 'square', 'square'), ('circle', 'square', 'triangle'), ('circle', 'triangle', 'triangle'), ('square', 'square', 'square'), ('square', 'square', 'triangle'), ('square', 'triangle', 'triangle'), ('triangle', 'triangle', 'triangle')]", "assert choose_shapes(['circle', 'square'], 0) == [()]", "assert choose_shapes(['circle', 'square'], 1) == [('circle',), ('square',)]", "assert choose_shapes(['circle'], 2) == [('circle', 'circle')]", "assert choose_shapes(['circle', 'square', 'triangle', 'hexagon'], 2) == [('circle', 'circle'), ('circle', 'square'), ('circle', 'triangle'), ('circle', 'hexagon'), ('square', 'square'), ('square', 'triangle'), ('square', 'hexagon'), ('triangle', 'triangle'), ('triangle', 'hexagon'), ('hexagon', 'hexagon')]", "assert choose_shapes(['circle', 'square', 'triangle', 'hexagon'], 1) == [('circle',), ('square',), ('triangle',), ('hexagon',)]", "assert choose_shapes(['circle', 'square', 'triangle', 'hexagon'], 3) == [('circle', 'circle', 'circle'), ('circle', 'circle', 'square'), ('circle', 'circle', 'triangle'), ('circle', 'circle', 'hexagon'), ('circle', 'square', 'square'), ('circle', 'square', 'triangle'), ('circle', 'square', 'hexagon'), ('circle', 'triangle', 'triangle'), ('circle', 'triangle', 'hexagon'), ('circle', 'hexagon', 'hexagon'), ('square', 'square', 'square'), ('square', 'square', 'triangle'), ('square', 'square', 'hexagon'), ('square', 'triangle', 'triangle'), ('square', 'triangle', 'hexagon'), ('square', 'hexagon', 'hexagon'), ('triangle', 'triangle', 'triangle'), ('triangle', 'triangle', 'hexagon'), ('triangle', 'hexagon', 'hexagon'), ('hexagon', 'hexagon', 'hexagon')]", "assert choose_shapes(['circle', 'square', 'triangle', 'hexagon'], 4) == [('circle', 'circle', 'circle', 'circle'), ('circle', 'circle', 'circle', 'square'), ('circle', 'circle', 'circle', 'triangle'), ('circle', 'circle', 'circle', 'hexagon'), ('circle', 'circle', 'square', 'square'), ('circle', 'circle', 'square', 'triangle'), ('circle', 'circle', 'square', 'hexagon'), ('circle', 'circle', 'triangle', 'triangle'), ('circle', 'circle', 'triangle', 'hexagon'), ('circle', 'circle', 'hexagon', 'hexagon'), ('circle', 'square', 'square', 'square'), ('circle', 'square', 'square', 'triangle'), ('circle', 'square', 'square', 'hexagon'), ('circle', 'square', 'triangle', 'triangle'), ('circle', 'square', 'triangle', 'hexagon'), ('circle', 'square', 'hexagon', 'hexagon'), ('circle', 'triangle', 'triangle', 'triangle'), ('circle', 'triangle', 'triangle', 'hexagon'), ('circle', 'triangle', 'hexagon', 'hexagon'), ('circle', 'hexagon', 'hexagon', 'hexagon'), ('square', 'square', 'square', 'square'), ('square', 'square', 'square', 'triangle'), ('square', 'square', 'square', 'hexagon'), ('square', 'square', 'triangle', 'triangle'), ('square', 'square', 'triangle', 'hexagon'), ('square', 'square', 'hexagon', 'hexagon'), ('square', 'triangle', 'triangle', 'triangle'), ('square', 'triangle', 'triangle', 'hexagon'), ('square', 'triangle', 'hexagon', 'hexagon'), ('square', 'hexagon', 'hexagon', 'hexagon'), ('triangle', 'triangle', 'triangle', 'triangle'), ('triangle', 'triangle', 'triangle', 'hexagon'), ('triangle', 'triangle', 'hexagon', 'hexagon'), ('triangle', 'hexagon', 'hexagon', 'hexagon'), ('hexagon', 'hexagon', 'hexagon', 'hexagon')]", "assert choose_shapes(['circle', 'square'], 4) == [('circle', 'circle', 'circle', 'circle'), ('circle', 'circle', 'circle', 'square'), ('circle', 'circle', 'square', 'square'), ('circle', 'square', 'square', 'square'), ('square', 'square', 'square', 'square')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of cities from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_cities(cities, k):\n    return list(combinations_with_replacement(cities, k))", "task_id": "255_7c2446e5-d987-4ed8-8957-fbfccc08438a", "test_setup_code": "", "test_list": ["assert choose_cities(['New York', 'Los Angeles', 'Chicago'], 2) == [('New York', 'New York'), ('New York', 'Los Angeles'), ('New York', 'Chicago'), ('Los Angeles', 'Los Angeles'), ('Los Angeles', 'Chicago'), ('Chicago', 'Chicago')]", "assert choose_cities(['Paris', 'Berlin'], 1) == [('Paris',), ('Berlin',)]", "assert choose_cities(['Tokyo', 'Kyoto', 'Osaka'], 3) == [('Tokyo', 'Tokyo', 'Tokyo'), ('Tokyo', 'Tokyo', 'Kyoto'), ('Tokyo', 'Tokyo', 'Osaka'), ('Tokyo', 'Kyoto', 'Kyoto'), ('Tokyo', 'Kyoto', 'Osaka'), ('Tokyo', 'Osaka', 'Osaka'), ('Kyoto', 'Kyoto', 'Kyoto'), ('Kyoto', 'Kyoto', 'Osaka'), ('Kyoto', 'Osaka', 'Osaka'), ('Osaka', 'Osaka', 'Osaka')]", "assert choose_cities(['A'], 2) == [('A', 'A')]", "assert choose_cities([], 0) == [()]", "assert choose_cities(['London', 'Manchester'], 0) == [()]", "assert choose_cities(['Rome', 'Milan', 'Naples'], 1) == [('Rome',), ('Milan',), ('Naples',)]", "assert choose_cities(['Seoul', 'Busan'], 3) == [('Seoul', 'Seoul', 'Seoul'), ('Seoul', 'Seoul', 'Busan'), ('Seoul', 'Busan', 'Busan'), ('Busan', 'Busan', 'Busan')]", "assert choose_cities(['Sydney', 'Melbourne', 'Brisbane'], 2) == [('Sydney', 'Sydney'), ('Sydney', 'Melbourne'), ('Sydney', 'Brisbane'), ('Melbourne', 'Melbourne'), ('Melbourne', 'Brisbane'), ('Brisbane', 'Brisbane')]", "assert choose_cities(['Toronto'], 3) == [('Toronto', 'Toronto', 'Toronto')]", "assert choose_cities(['Amsterdam', 'Rotterdam', 'The Hague'], 0) == [()]", "assert choose_cities(['Beijing', 'Shanghai'], 2) == [('Beijing', 'Beijing'), ('Beijing', 'Shanghai'), ('Shanghai', 'Shanghai')]", "assert choose_cities(['Lisbon', 'Porto'], 1) == [('Lisbon',), ('Porto',)]", "assert choose_cities(['Vienna', 'Salzburg', 'Innsbruck'], 4) == [('Vienna', 'Vienna', 'Vienna', 'Vienna'), ('Vienna', 'Vienna', 'Vienna', 'Salzburg'), ('Vienna', 'Vienna', 'Vienna', 'Innsbruck'), ('Vienna', 'Vienna', 'Salzburg', 'Salzburg'), ('Vienna', 'Vienna', 'Salzburg', 'Innsbruck'), ('Vienna', 'Vienna', 'Innsbruck', 'Innsbruck'), ('Vienna', 'Salzburg', 'Salzburg', 'Salzburg'), ('Vienna', 'Salzburg', 'Salzburg', 'Innsbruck'), ('Vienna', 'Salzburg', 'Innsbruck', 'Innsbruck'), ('Vienna', 'Innsbruck', 'Innsbruck', 'Innsbruck'), ('Salzburg', 'Salzburg', 'Salzburg', 'Salzburg'), ('Salzburg', 'Salzburg', 'Salzburg', 'Innsbruck'), ('Salzburg', 'Salzburg', 'Innsbruck', 'Innsbruck'), ('Salzburg', 'Innsbruck', 'Innsbruck', 'Innsbruck'), ('Innsbruck', 'Innsbruck', 'Innsbruck', 'Innsbruck')]", "assert choose_cities(['Athens', 'Thessaloniki'], 3) == [('Athens', 'Athens', 'Athens'), ('Athens', 'Athens', 'Thessaloniki'), ('Athens', 'Thessaloniki', 'Thessaloniki'), ('Thessaloniki', 'Thessaloniki', 'Thessaloniki')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of numbers from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_numbers_no_repetition(nums, k):\n    return list(combinations(nums, k))", "task_id": "255_d631a543-68b3-490a-b51a-25fdcd4776a2", "test_setup_code": "", "test_list": ["assert choose_numbers_no_repetition([1, 2, 3], 2) == [(1, 2), (1, 3), (2, 3)]", "assert choose_numbers_no_repetition([1, 2, 3, 4], 3) == [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]", "assert choose_numbers_no_repetition([1, 2, 3, 4, 5], 1) == [(1,), (2,), (3,), (4,), (5,)]", "assert choose_numbers_no_repetition([1, 2, 3, 4, 5], 0) == [()]", "assert choose_numbers_no_repetition([], 0) == [()]", "assert choose_numbers_no_repetition([1, 2, 3], 3) == [(1, 2, 3)]", "assert choose_numbers_no_repetition([1, 2, 3], 1) == [(1,), (2,), (3,)]", "assert choose_numbers_no_repetition([1, 2, 3, 4, 5], 5) == [(1, 2, 3, 4, 5)]", "assert choose_numbers_no_repetition([1, 2], 2) == [(1, 2)]", "assert choose_numbers_no_repetition([1, 2], 3) == []", "assert choose_numbers_no_repetition([1], 1) == [(1,)]", "assert choose_numbers_no_repetition([1, 2, 3, 4], 4) == [(1, 2, 3, 4)]", "assert choose_numbers_no_repetition([1, 2, 3, 4, 5, 6], 3) == [(1, 2, 3), (1, 2, 4), (1, 2, 5), (1, 2, 6), (1, 3, 4), (1, 3, 5), (1, 3, 6), (1, 4, 5), (1, 4, 6), (1, 5, 6), (2, 3, 4), (2, 3, 5), (2, 3, 6), (2, 4, 5), (2, 4, 6), (2, 5, 6), (3, 4, 5), (3, 4, 6), (3, 5, 6), (4, 5, 6)]", "assert choose_numbers_no_repetition([1, 1, 1], 2) == [(1, 1), (1, 1), (1, 1)]", "assert choose_numbers_no_repetition([1, 2, 2], 2) == [(1, 2), (1, 2), (2, 2)]", "assert choose_numbers_no_repetition([1, 2, 3, 4, 5, 6], 2) == [(1, 2), (1, 3), (1, 4), (1, 5), (1, 6), (2, 3), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6), (4, 5), (4, 6), (5, 6)]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of letters from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_letters_no_repetition(letters, k):\n    return list(combinations(letters, k))", "task_id": "255_a1337766-6ce0-40e4-ace9-f1f095f6c34f", "test_setup_code": "", "test_list": ["assert choose_letters_no_repetition(['a', 'b', 'c'], 2) == [('a', 'b'), ('a', 'c'), ('b', 'c')]", "assert choose_letters_no_repetition(['a', 'b', 'c', 'd'], 3) == [('a', 'b', 'c'), ('a', 'b', 'd'), ('a', 'c', 'd'), ('b', 'c', 'd')]", "assert choose_letters_no_repetition(['a', 'b', 'c'], 1) == [('a',), ('b',), ('c',)]", "assert choose_letters_no_repetition(['a', 'b', 'c'], 0) == [()]", "assert choose_letters_no_repetition(['a'], 1) == [('a',)]", "assert choose_letters_no_repetition(['a', 'b', 'c', 'd', 'e'], 2) == [('a', 'b'), ('a', 'c'), ('a', 'd'), ('a', 'e'), ('b', 'c'), ('b', 'd'), ('b', 'e'), ('c', 'd'), ('c', 'e'), ('d', 'e')]", "assert choose_letters_no_repetition(['a', 'b', 'c', 'd', 'e'], 5) == [('a', 'b', 'c', 'd', 'e')]", "assert choose_letters_no_repetition(['a', 'b', 'c', 'd', 'e'], 4) == [('a', 'b', 'c', 'd'), ('a', 'b', 'c', 'e'), ('a', 'b', 'd', 'e'), ('a', 'c', 'd', 'e'), ('b', 'c', 'd', 'e')]", "assert choose_letters_no_repetition(['x', 'y', 'z'], 2) == [('x', 'y'), ('x', 'z'), ('y', 'z')]", "assert choose_letters_no_repetition(['x', 'y', 'z'], 3) == [('x', 'y', 'z')]", "assert choose_letters_no_repetition(['p', 'q', 'r', 's'], 2) == [('p', 'q'), ('p', 'r'), ('p', 's'), ('q', 'r'), ('q', 's'), ('r', 's')]", "assert choose_letters_no_repetition(['p', 'q', 'r', 's'], 1) == [('p',), ('q',), ('r',), ('s',)]", "assert choose_letters_no_repetition(['p', 'q', 'r', 's'], 0) == [()]", "assert choose_letters_no_repetition(['a', 'b', 'c', 'd'], 2) == [('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd')]", "assert choose_letters_no_repetition(['a', 'b'], 2) == [('a', 'b')]"], "challenge_test_list": []}
{"text": "Write a function to choose specified number of fruits from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_fruits_no_repetition(fruits, k):\n    return list(combinations(fruits, k))", "task_id": "255_cb7c68cd-c104-4bfa-80b8-a09bb6621442", "test_setup_code": "", "test_list": ["assert choose_fruits_no_repetition(['apple', 'banana', 'cherry'], 2) == [('apple', 'banana'), ('apple', 'cherry'), ('banana', 'cherry')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry'], 1) == [('apple',), ('banana',), ('cherry',)]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry'], 3) == [('apple', 'banana', 'cherry')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry'], 0) == [()]", "assert choose_fruits_no_repetition([], 0) == [()]", "assert choose_fruits_no_repetition(['apple'], 1) == [('apple',)]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date'], 2) == [('apple', 'banana'), ('apple', 'cherry'), ('apple', 'date'), ('banana', 'cherry'), ('banana', 'date'), ('cherry', 'date')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date'], 3) == [('apple', 'banana', 'cherry'), ('apple', 'banana', 'date'), ('apple', 'cherry', 'date'), ('banana', 'cherry', 'date')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date'], 4) == [('apple', 'banana', 'cherry', 'date')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date'], 1) == [('apple',), ('banana',), ('cherry',), ('date',)]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date'], 0) == [()]", "assert choose_fruits_no_repetition(['apple', 'banana'], 2) == [('apple', 'banana')]", "assert choose_fruits_no_repetition(['apple', 'banana'], 1) == [('apple',), ('banana',)]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date', 'elderberry'], 3) == [('apple', 'banana', 'cherry'), ('apple', 'banana', 'date'), ('apple', 'banana', 'elderberry'), ('apple', 'cherry', 'date'), ('apple', 'cherry', 'elderberry'), ('apple', 'date', 'elderberry'), ('banana', 'cherry', 'date'), ('banana', 'cherry', 'elderberry'), ('banana', 'date', 'elderberry'), ('cherry', 'date', 'elderberry')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date', 'elderberry'], 2) == [('apple', 'banana'), ('apple', 'cherry'), ('apple', 'date'), ('apple', 'elderberry'), ('banana', 'cherry'), ('banana', 'date'), ('banana', 'elderberry'), ('cherry', 'date'), ('cherry', 'elderberry'), ('date', 'elderberry')]", "assert choose_fruits_no_repetition(['apple', 'banana', 'cherry', 'date', 'elderberry'], 1) == [('apple',), ('banana',), ('cherry',), ('date',), ('elderberry',)]"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers less than a given non-negative number.", "code": "def count_even_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if num % 2 == 0:\n            ctr += 1\n    return ctr", "task_id": "256_cb3b1a64-e711-4dd2-a735-be1e936743cb", "test_setup_code": "", "test_list": ["assert count_even_numbers(0) == 0", "assert count_even_numbers(1) == 1", "assert count_even_numbers(2) == 1", "assert count_even_numbers(3) == 2", "assert count_even_numbers(4) == 2", "assert count_even_numbers(5) == 3", "assert count_even_numbers(10) == 5", "assert count_even_numbers(20) == 10", "assert count_even_numbers(50) == 25", "assert count_even_numbers(100) == 50", "assert count_even_numbers(101) == 51", "assert count_even_numbers(999) == 499", "assert count_even_numbers(1000) == 500", "assert count_even_numbers(100000) == 50000", "assert count_even_numbers(1000000) == 500000"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of squares of all numbers less than a given non-negative number.", "code": "def sum_of_squares(n):\n    total = 0\n    for num in range(n):\n        total += num ** 2\n    return total", "task_id": "256_281b3e27-942f-4042-847a-9d15b39a82c7", "test_setup_code": "", "test_list": ["assert sum_of_squares(0) == 0", "assert sum_of_squares(1) == 0", "assert sum_of_squares(2) == 1", "assert sum_of_squares(3) == 5", "assert sum_of_squares(4) == 14", "assert sum_of_squares(5) == 30", "assert sum_of_squares(10) == 285", "assert sum_of_squares(15) == 1015", "assert sum_of_squares(20) == 2470", "assert sum_of_squares(100) == 328350", "assert sum_of_squares(50) == 40425", "assert sum_of_squares(25) == 4900", "assert sum_of_squares(30) == 8555", "assert sum_of_squares(0) == 0", "assert sum_of_squares(1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers less than a given non-negative number.", "code": "def count_odd_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if num % 2 != 0:\n            ctr += 1\n    return ctr", "task_id": "256_4d4ac4f1-8ee3-4d2d-9aff-52fed452a4c1", "test_setup_code": "", "test_list": ["assert count_odd_numbers(0) == 0", "assert count_odd_numbers(1) == 0", "assert count_odd_numbers(2) == 1", "assert count_odd_numbers(3) == 1", "assert count_odd_numbers(4) == 2", "assert count_odd_numbers(5) == 2", "assert count_odd_numbers(10) == 5", "assert count_odd_numbers(15) == 7", "assert count_odd_numbers(20) == 10", "assert count_odd_numbers(100) == 50", "assert count_odd_numbers(101) == 50", "assert count_odd_numbers(999) == 499", "assert count_odd_numbers(1000) == 500", "assert count_odd_numbers(1000000) == 500000", "assert count_odd_numbers(1000001) == 500000"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of cubes of all numbers less than a given non-negative number.", "code": "def sum_of_cubes(n):\n    total = 0\n    for num in range(n):\n        total += num ** 3\n    return total", "task_id": "256_89143ace-252b-4dfd-b3dd-a45d21d6e5be", "test_setup_code": "", "test_list": ["assert sum_of_cubes(0) == 0", "assert sum_of_cubes(1) == 0", "assert sum_of_cubes(2) == 0", "assert sum_of_cubes(3) == 1", "assert sum_of_cubes(4) == 9", "assert sum_of_cubes(5) == 36", "assert sum_of_cubes(6) == 100", "assert sum_of_cubes(10) == 2025", "assert sum_of_cubes(15) == 7840", "assert sum_of_cubes(20) == 19900", "assert sum_of_cubes(25) == 44100", "assert sum_of_cubes(50) == 153125", "assert sum_of_cubes(100) == 2450250", "assert sum_of_cubes(101) == 2450250", "assert sum_of_cubes(150) == 12751275"], "challenge_test_list": []}
{"text": "Write a python function to count the number of multiples of three less than a given non-negative number.", "code": "def count_multiples_of_three(n):\n    ctr = 0\n    for num in range(n):\n        if num % 3 == 0:\n            ctr += 1\n    return ctr", "task_id": "256_1c14b90f-bbe7-4309-98f1-27fdc2da5e2f", "test_setup_code": "", "test_list": ["assert count_multiples_of_three(0) == 1", "assert count_multiples_of_three(1) == 1", "assert count_multiples_of_three(2) == 1", "assert count_multiples_of_three(3) == 2", "assert count_multiples_of_three(4) == 2", "assert count_multiples_of_three(5) == 2", "assert count_multiples_of_three(6) == 3", "assert count_multiples_of_three(10) == 4", "assert count_multiples_of_three(15) == 6", "assert count_multiples_of_three(20) == 7", "assert count_multiples_of_three(30) == 11", "assert count_multiples_of_three(50) == 17", "assert count_multiples_of_three(100) == 34", "assert count_multiples_of_three(101) == 34", "assert count_multiples_of_three(1000) == 334"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of multiples of five less than a given non-negative number.", "code": "def sum_of_multiples_of_five(n):\n    total = 0\n    for num in range(n):\n        if num % 5 == 0:\n            total += num\n    return total", "task_id": "256_4beaae4c-9181-4c52-bf1d-228e2ad37d18", "test_setup_code": "", "test_list": ["assert sum_of_multiples_of_five(0) == 0", "assert sum_of_multiples_of_five(5) == 0", "assert sum_of_multiples_of_five(10) == 5", "assert sum_of_multiples_of_five(15) == 15", "assert sum_of_multiples_of_five(20) == 30", "assert sum_of_multiples_of_five(25) == 30", "assert sum_of_multiples_of_five(1) == 0", "assert sum_of_multiples_of_five(6) == 5", "assert sum_of_multiples_of_five(50) == 275", "assert sum_of_multiples_of_five(100) == 950", "assert sum_of_multiples_of_five(101) == 950", "assert sum_of_multiples_of_five(99) == 945", "assert sum_of_multiples_of_five(2) == 0", "assert sum_of_multiples_of_five(3) == 0", "assert sum_of_multiples_of_five(4) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of perfect squares less than a given non-negative number.", "code": "def count_perfect_squares(n):\n    ctr = 0\n    for num in range(n):\n        if (num ** 0.5).is_integer():\n            ctr += 1\n    return ctr", "task_id": "256_299f3c35-219e-4dff-92b3-4cb342b344c9", "test_setup_code": "", "test_list": ["assert count_perfect_squares(0) == 0", "assert count_perfect_squares(1) == 0", "assert count_perfect_squares(2) == 1", "assert count_perfect_squares(4) == 1", "assert count_perfect_squares(5) == 2", "assert count_perfect_squares(10) == 3", "assert count_perfect_squares(16) == 3", "assert count_perfect_squares(17) == 4", "assert count_perfect_squares(25) == 4", "assert count_perfect_squares(26) == 5", "assert count_perfect_squares(50) == 7", "assert count_perfect_squares(100) == 9", "assert count_perfect_squares(101) == 10", "assert count_perfect_squares(144) == 11", "assert count_perfect_squares(200) == 14"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of even numbers less than a given non-negative number.", "code": "def sum_of_even_numbers(n):\n    total = 0\n    for num in range(n):\n        if num % 2 == 0:\n            total += num\n    return total", "task_id": "256_8d1d7191-c6ed-47d2-8ca4-0112466bfac8", "test_setup_code": "", "test_list": ["assert sum_of_even_numbers(0) == 0", "assert sum_of_even_numbers(1) == 0", "assert sum_of_even_numbers(2) == 0", "assert sum_of_even_numbers(3) == 2", "assert sum_of_even_numbers(4) == 2", "assert sum_of_even_numbers(5) == 6", "assert sum_of_even_numbers(6) == 6", "assert sum_of_even_numbers(7) == 12", "assert sum_of_even_numbers(10) == 20", "assert sum_of_even_numbers(11) == 30", "assert sum_of_even_numbers(20) == 90", "assert sum_of_even_numbers(50) == 600", "assert sum_of_even_numbers(100) == 2450", "assert sum_of_even_numbers(101) == 2550", "assert sum_of_even_numbers(1000) == 249500"], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic numbers less than a given non-negative number.", "code": "def count_palindromic_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if str(num) == str(num)[::-1]:\n            ctr += 1\n    return ctr", "task_id": "256_84bbe607-7723-413a-a7de-49b18faa7467", "test_setup_code": "", "test_list": ["assert count_palindromic_numbers(10) == 9", "assert count_palindromic_numbers(100) == 18", "assert count_palindromic_numbers(1) == 1", "assert count_palindromic_numbers(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of odd numbers less than a given non-negative number.", "code": "def sum_of_odd_numbers(n):\n    total = 0\n    for num in range(n):\n        if num % 2 != 0:\n            total += num\n    return total", "task_id": "256_fa10ec40-dea3-4d9e-889c-1f8f27122d96", "test_setup_code": "", "test_list": ["assert sum_of_odd_numbers(0) == 0", "assert sum_of_odd_numbers(1) == 0", "assert sum_of_odd_numbers(2) == 1", "assert sum_of_odd_numbers(3) == 1", "assert sum_of_odd_numbers(4) == 4", "assert sum_of_odd_numbers(5) == 4", "assert sum_of_odd_numbers(6) == 9", "assert sum_of_odd_numbers(7) == 9", "assert sum_of_odd_numbers(10) == 25", "assert sum_of_odd_numbers(11) == 25", "assert sum_of_odd_numbers(15) == 49", "assert sum_of_odd_numbers(20) == 81", "assert sum_of_odd_numbers(50) == 625", "assert sum_of_odd_numbers(100) == 2500", "assert sum_of_odd_numbers(101) == 2500"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "257_68e7c488-0e5b-42af-80d2-2be0061b7ec9", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Was it a car or a cat I saw') == 'was I tac a ro rac a ti saW'", "assert reverse_string('No lemon, no melon') == 'nolem on ,nomel oN'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('Madam, in Eden, I\u2019m Adam') == 'madA m\u2019I ,nedE ni ,madaM'", "assert reverse_string('Step on no pets') == 'step on no petS'", "assert reverse_string('') == ''", "assert reverse_string('abcdefghijklmnopqrstuvwxyz') == 'zyxwvutsrqponmlkjihgfedcba'"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "257_b7844371-aae2-45e3-991d-d1cad06ad107", "test_setup_code": "", "test_list": ["assert is_even(2) == true", "assert is_even(3) == false", "assert is_even(0) == true", "assert is_even(-2) == true", "assert is_even(-3) == false", "assert is_even(100) == true", "assert is_even(101) == false", "assert is_even(999999) == false", "assert is_even(1000000) == true", "assert is_even(-1000000) == true", "assert is_even(-999999) == false", "assert is_even(1) == false", "assert is_even(-1) == false", "assert is_even(2147483646) == true", "assert is_even(2147483647) == false"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in a list.", "code": "def sum_of_list(lst: list) -> int:\n    return sum(lst)", "task_id": "257_45cf87a1-9201-4e96-843c-0b096b976de1", "test_setup_code": "", "test_list": ["assert sum_of_list([1, 2, 3, 4, 5]) == 15", "assert sum_of_list([0, 0, 0, 0, 0]) == 0", "assert sum_of_list([-1, -2, -3, -4, -5]) == -15", "assert sum_of_list([100, 200, 300]) == 600", "assert sum_of_list([]) == 0", "assert sum_of_list([1]) == 1", "assert sum_of_list([1, -1, 1, -1]) == 0", "assert sum_of_list([999999, 1]) == 1000000", "assert sum_of_list([-1000000, 1000000]) == 0", "assert sum_of_list([3.5, 2.5, -1.0]) == 5.0", "assert sum_of_list([1, 2, 3, 4, 5, -15]) == 0", "assert sum_of_list([10**6, 10**6, 10**6]) == 3000000", "assert sum_of_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_of_list([1.1, 2.2, 3.3]) == 6.6", "assert sum_of_list([-1, 1, -1, 1, -1, 1, -1, 1]) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "257_66040e1f-3434-477b-a4a2-c4e1235fe017", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('aeiou') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python is fun!') == 3", "assert count_vowels('1234567890') == 0", "assert count_vowels('Why do we use vowels?') == 7", "assert count_vowels('A quick movement of the enemy will jeopardize five gunboats') == 16", "assert count_vowels('') == 0", "assert count_vowels('Supercalifragilisticexpialidocious') == 16", "assert count_vowels('Rhythm') == 0", "assert count_vowels('AeiouAEIOU') == 10"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "257_3b2d5379-126f-4250-9d3d-d22bf1f02c72", "test_setup_code": "", "test_list": ["assert max_of_three(1, 2, 3) == 3", "assert max_of_three(3, 2, 1) == 3", "assert max_of_three(1, 3, 2) == 3", "assert max_of_three(3, 3, 3) == 3", "assert max_of_three(-1, -2, -3) == -1", "assert max_of_three(-3, -2, -1) == -1", "assert max_of_three(0, 0, 0) == 0", "assert max_of_three(100, 200, 300) == 300", "assert max_of_three(300, 200, 100) == 300", "assert max_of_three(100, 300, 200) == 300", "assert max_of_three(0, -1, 1) == 1", "assert max_of_three(-1, 0, 1) == 1", "assert max_of_three(1, 0, -1) == 1", "assert max_of_three(2147483647, -2147483648, 0) == 2147483647", "assert max_of_three(-2147483648, 2147483647, 2147483646) == 2147483647"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "257_2741ba5f-54ef-4715-8ea2-e4e97792ab40", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').lower()) == True", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False", "assert is_palindrome('Able was I ere I saw Elba'.replace(' ', '').lower()) == True"], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "257_bb81aef6-821e-4e90-b1a3-3cc8b010f604", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "257_f524df66-04d6-4a45-b19a-5dda1d177bfd", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(25) == 75025", "assert fibonacci(30) == 832040"], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))", "task_id": "257_7f381ee5-a8f2-4e5e-87df-16c315171c07", "test_setup_code": "", "test_list": ["assert remove_duplicates([]) == []", "assert remove_duplicates([1, 2, 3]) == [1, 2, 3]", "assert remove_duplicates([1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 2, 3, 3, 3]) == [1, 2, 3]", "assert remove_duplicates([4, 5, 6, 4, 5, 6]) == [4, 5, 6]", "assert remove_duplicates(['a', 'b', 'b', 'c']) == ['a', 'b', 'c']", "assert remove_duplicates(['x', 'y', 'x', 'y', 'z']) == ['x', 'y', 'z']", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([2, 2, 2, 2, 2]) == [2]", "assert remove_duplicates([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 'a', 1, 'a', 2, 'b', 2, 'b']) == [1, 'a', 2, 'b']", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates([True, False, True, False]) == [False, True]", "assert remove_duplicates([1.1, 2.2, 3.3, 1.1, 2.2, 3.3]) == [1.1, 2.2, 3.3]", "assert remove_duplicates(['apple', 'banana', 'apple', 'cherry']) == ['apple', 'banana', 'cherry']"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def find_gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "257_5871b3e5-404a-488a-a514-236134fabf4b", "test_setup_code": "", "test_list": ["assert find_gcd(48, 18) == 6", "assert find_gcd(101, 103) == 1", "assert find_gcd(0, 5) == 5", "assert find_gcd(7, 0) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the number of even elements in the given list using a lambda function.", "code": "def count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even", "task_id": "258_f5c2f442-59b1-4f52-85b6-46d8af84d78c", "test_setup_code": "", "test_list": ["assert count_even([1, 2, 3, 4, 5, 6]) == 3", "assert count_even([2, 4, 6, 8, 10]) == 5", "assert count_even([1, 3, 5, 7, 9]) == 0", "assert count_even([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of odd elements in the given list using a lambda function.", "code": "def sum_odd(array_nums):\n   sum_odd = sum(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return sum_odd", "task_id": "258_99effd12-5d29-4c8a-b13f-cddd366bf80d", "test_setup_code": "", "test_list": ["assert sum_odd([1, 2, 3, 4, 5]) == 9", "assert sum_odd([2, 4, 6, 8, 10]) == 0", "assert sum_odd([1, 3, 5, 7, 9]) == 25", "assert sum_odd([]) == 0", "assert sum_odd([0, 0, 0, 0]) == 0", "assert sum_odd([-1, -2, -3, -4, -5]) == -9", "assert sum_odd([1]) == 1", "assert sum_odd([2]) == 0", "assert sum_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 25", "assert sum_odd([10, 20, 30, 40, 50]) == 0", "assert sum_odd([11, 22, 33, 44, 55]) == 99", "assert sum_odd([1, -1, 2, -2, 3, -3]) == 0", "assert sum_odd([1000001, 1000003, 1000005]) == 3000009", "assert sum_odd([999999, 1000000, 1000001]) == 2000000", "assert sum_odd([1, 1, 1, 1, 1]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the sum of even elements in the given list using a lambda function.", "code": "def sum_even(array_nums):\n   sum_even = sum(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return sum_even", "task_id": "258_e3bcaf08-9d2d-4e85-8020-4d61f8df2f27", "test_setup_code": "", "test_list": ["assert sum_even([1, 2, 3, 4, 5, 6]) == 12", "assert sum_even([0, 2, 4, 6, 8, 10]) == 30", "assert sum_even([1, 3, 5, 7, 9]) == 0", "assert sum_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 110", "assert sum_even([-2, -4, -6, -8, -10]) == -30", "assert sum_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert sum_even([100, 200, 300, 400, 500]) == 1500", "assert sum_even([11, 22, 33, 44, 55, 66]) == 132", "assert sum_even([0]) == 0", "assert sum_even([1]) == 0", "assert sum_even([2]) == 2", "assert sum_even([]) == 0", "assert sum_even([1, -2, 3, -4, 5, -6]) == -12", "assert sum_even([1000000, 2000000, 3000000]) == 6000000", "assert sum_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 110"], "challenge_test_list": []}
{"text": "Write a function to find the number of positive elements in the given list using a lambda function.", "code": "def count_positive(array_nums):\n   count_positive = len(list(filter(lambda x: (x > 0) , array_nums)))\n   return count_positive", "task_id": "258_58b59456-fc54-4f6f-9464-bc0c6be7db76", "test_setup_code": "", "test_list": ["assert count_positive([1, -2, 3, 4, -5]) == 3", "assert count_positive([0, -1, -2, -3, -4]) == 0", "assert count_positive([1, 2, 3, 4, 5]) == 5", "assert count_positive([]) == 0", "assert count_positive([-1, -2, -3, -4, -5]) == 0", "assert count_positive([0, 0, 0, 0, 0]) == 0", "assert count_positive([1]) == 1", "assert count_positive([-1]) == 0", "assert count_positive([100, 200, 300, 400, 500]) == 5", "assert count_positive([-100, -200, -300, -400, -500]) == 0", "assert count_positive([1, -1, 1, -1, 1]) == 3", "assert count_positive([1, 2, -2, -3, 3, 0]) == 3", "assert count_positive([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert count_positive([-1, -1, -1, -1, -1, -1, -1, -1, -1, -1]) == 0", "assert count_positive([1, 0, -1, 0, 1, 0, -1, 0, 1, 0]) == 3"], "challenge_test_list": []}
{"text": "Write a function to find the number of negative elements in the given list using a lambda function.", "code": "def count_negative(array_nums):\n   count_negative = len(list(filter(lambda x: (x < 0) , array_nums)))\n   return count_negative", "task_id": "258_958f4254-7189-40bc-8c09-0817a3e0225b", "test_setup_code": "", "test_list": ["assert count_negative([1, -2, 3, -4, 5]) == 2", "assert count_negative([0, -1, -2, -3, -4, -5]) == 5", "assert count_negative([1, 2, 3, 4, 5]) == 0", "assert count_negative([-1, -2, -3, -4, -5]) == 5", "assert count_negative([]) == 0", "assert count_negative([0]) == 0", "assert count_negative([-1]) == 1", "assert count_negative([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 5", "assert count_negative([100, -100, 200, -200, 300, -300]) == 3", "assert count_negative([0, 0, 0, 0, 0]) == 0", "assert count_negative([-1, 0, 1, -2, 2, -3, 3]) == 3", "assert count_negative([1, -1, 1, -1, 1, -1, 1, -1]) == 4", "assert count_negative([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 5", "assert count_negative([-10, -20, -30, -40, -50]) == 5", "assert count_negative([10, 20, 30, 40, 50]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of positive elements in the given list using a lambda function.", "code": "def sum_positive(array_nums):\n   sum_positive = sum(list(filter(lambda x: (x > 0) , array_nums)))\n   return sum_positive", "task_id": "258_3652f457-49ab-4dc1-8a8a-b902c50f9800", "test_setup_code": "", "test_list": ["assert sum_positive([1, -2, 3, 4, -5]) == 8", "assert sum_positive([-1, -2, -3, -4, -5]) == 0", "assert sum_positive([0, 0, 0, 0, 0]) == 0", "assert sum_positive([10, 20, 30, 40, 50]) == 150", "assert sum_positive([1]) == 1", "assert sum_positive([-1]) == 0", "assert sum_positive([0]) == 0", "assert sum_positive([1, -1, 1, -1, 1, -1]) == 3", "assert sum_positive([100, -100, 200, -200, 300, -300]) == 600", "assert sum_positive([0, -1, 2, -3, 4, -5, 6, -7, 8, -9]) == 20", "assert sum_positive([]) == 0", "assert sum_positive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_positive([-10, -20, -30, -40, -50]) == 0", "assert sum_positive([0, 1, 0, 1, 0, 1]) == 3", "assert sum_positive([1, 2, 3, -1, -2, -3, 4, 5, 6]) == 21"], "challenge_test_list": []}
{"text": "Write a function to find the sum of negative elements in the given list using a lambda function.", "code": "def sum_negative(array_nums):\n   sum_negative = sum(list(filter(lambda x: (x < 0) , array_nums)))\n   return sum_negative", "task_id": "258_a6dcedee-d8b4-46aa-8632-4d15bb2b5689", "test_setup_code": "", "test_list": ["assert sum_negative([-1, -2, -3, -4, -5]) == -15", "assert sum_negative([1, 2, 3, 4, 5]) == 0", "assert sum_negative([-1, 2, -3, 4, -5]) == -9", "assert sum_negative([0, 0, 0, 0, 0]) == 0", "assert sum_negative([-1, 0, 1, -2, 2]) == -3", "assert sum_negative([]) == 0", "assert sum_negative([-10, -20, -30, -40, -50]) == -150", "assert sum_negative([10, 20, 30, 40, 50]) == 0", "assert sum_negative([-1, -1, -1, -1, -1]) == -5", "assert sum_negative([1, -1, 1, -1, 1, -1]) == -3", "assert sum_negative([100, -100, 200, -200, 300, -300]) == -600", "assert sum_negative([-1, -2, -3, 0, 1, 2, 3]) == -6", "assert sum_negative([-0.5, -1.5, -2.5]) == -4.5", "assert sum_negative([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == -15", "assert sum_negative([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]) == -55"], "challenge_test_list": []}
{"text": "Write a function to find the number of elements divisible by 3 in the given list using a lambda function.", "code": "def count_divisible_by_3(array_nums):\n   count_divisible_by_3 = len(list(filter(lambda x: (x % 3 == 0) , array_nums)))\n   return count_divisible_by_3", "task_id": "258_ac2f8874-603d-4d3a-a8da-7a37a54757e5", "test_setup_code": "", "test_list": ["assert count_divisible_by_3([3, 6, 9, 12, 15]) == 5", "assert count_divisible_by_3([1, 2, 4, 5, 7]) == 0", "assert count_divisible_by_3([3, 6, 9, 10, 11, 12]) == 4", "assert count_divisible_by_3([0, 3, 6, 9]) == 4", "assert count_divisible_by_3([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 4", "assert count_divisible_by_3([]) == 0", "assert count_divisible_by_3([3]) == 1", "assert count_divisible_by_3([1, 2, 3]) == 1", "assert count_divisible_by_3([1, 2, 4, 5, 7, 8, 10, 11]) == 0", "assert count_divisible_by_3([3, 6, 9, 12, 15, 18, 21, 24, 27, 30]) == 10", "assert count_divisible_by_3([2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 28, 29]) == 0", "assert count_divisible_by_3([-3, -6, -9, -12]) == 4", "assert count_divisible_by_3([-1, -2, -4, -5]) == 0", "assert count_divisible_by_3([3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42, 45, 48, 51, 54, 57, 60]) == 20", "assert count_divisible_by_3([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the sum of elements divisible by 5 in the given list using a lambda function.", "code": "def sum_divisible_by_5(array_nums):\n   sum_divisible_by_5 = sum(list(filter(lambda x: (x % 5 == 0) , array_nums)))\n   return sum_divisible_by_5", "task_id": "258_0032c9ff-d83d-487c-b99e-ed1227be86ff", "test_setup_code": "", "test_list": ["assert sum_divisible_by_5([5, 10, 15, 20, 25]) == 75", "assert sum_divisible_by_5([1, 2, 3, 4, 6, 7, 8, 9]) == 0", "assert sum_divisible_by_5([0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50]) == 275", "assert sum_divisible_by_5([-5, -10, -15, -20, -25]) == -75", "assert sum_divisible_by_5([5, 3, 10, 7, 15, 8, 20, 1, 25, 6]) == 75", "assert sum_divisible_by_5([5]) == 5", "assert sum_divisible_by_5([]) == 0", "assert sum_divisible_by_5([5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100]) == 1050", "assert sum_divisible_by_5([1, 2, 3, 4, 5]) == 5", "assert sum_divisible_by_5([6, 7, 8, 9, 10]) == 10", "assert sum_divisible_by_5([100, 200, 300, 400, 500]) == 1500", "assert sum_divisible_by_5([0]) == 0", "assert sum_divisible_by_5([25, 50, 75, 100, 125]) == 375", "assert sum_divisible_by_5([11, 22, 33, 44, 55]) == 55", "assert sum_divisible_by_5([-5, 5, -10, 10, -15, 15]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of prime elements in the given list using a lambda function.", "code": "def count_prime(array_nums):\n   is_prime = lambda x: x > 1 and all(x % i != 0 for i in range(2, int(x**0.5) + 1))\n   count_prime = len(list(filter(is_prime, array_nums)))\n   return count_prime", "task_id": "258_66b85d1a-a8df-4da6-8c81-0a9a9f876808", "test_setup_code": "", "test_list": ["assert count_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 10", "assert count_prime([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20]) == 0", "assert count_prime([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert count_prime([0, 1, 4, 6, 8, 9, 10, 12, 14, 15]) == 0", "assert count_prime([29, 31, 37, 41, 43, 47, 53, 59, 61, 67]) == 10", "assert count_prime([2]) == 1", "assert count_prime([1]) == 0", "assert count_prime([0]) == 0", "assert count_prime([]) == 0", "assert count_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 25", "assert count_prime([100, 101, 102, 103, 104, 105, 106, 107, 108, 109]) == 3", "assert count_prime([97, 98, 99, 100, 101, 102, 103, 104, 105, 106]) == 3", "assert count_prime([11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109]) == 25", "assert count_prime([89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 23", "assert count_prime([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)", "task_id": "260_b4d896ce-dac0-4135-8b99-ae4893f44904", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(5) == 5", "assert fibonacci(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)", "task_id": "260_a7d22fb4-6afd-4239-b74b-ae2de0dc0b7c", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(2) == 2", "assert factorial(3) == 6", "assert factorial(4) == 24", "assert factorial(5) == 120", "assert factorial(6) == 720", "assert factorial(7) == 5040", "assert factorial(8) == 40320", "assert factorial(9) == 362880", "assert factorial(10) == 3628800", "assert factorial(11) == 39916800", "assert factorial(12) == 479001600", "assert factorial(13) == 6227020800", "assert factorial(14) == 87178291200"], "challenge_test_list": []}
{"text": "Write a function to find the nth Tribonacci number, where each number is the sum of the three preceding ones, starting from 0, 1, 1.", "code": "def tribonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)", "task_id": "260_d0614b37-fe43-4e36-83de-68d393b71f45", "test_setup_code": "", "test_list": ["assert tribonacci(0) == 0", "assert tribonacci(1) == 1", "assert tribonacci(2) == 1", "assert tribonacci(3) == 2", "assert tribonacci(4) == 4", "assert tribonacci(5) == 7", "assert tribonacci(6) == 13", "assert tribonacci(7) == 24", "assert tribonacci(8) == 44", "assert tribonacci(9) == 81", "assert tribonacci(10) == 149", "assert tribonacci(11) == 274", "assert tribonacci(12) == 504", "assert tribonacci(13) == 927", "assert tribonacci(14) == 1705"], "challenge_test_list": []}
{"text": "Write a function to find the nth Pell number.", "code": "def pell_number(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 * pell_number(n-1) + pell_number(n-2)", "task_id": "260_c9f998c7-ac4b-45aa-a89b-0dd9c28e5a0e", "test_setup_code": "", "test_list": ["assert pell_number(0) == 0", "assert pell_number(1) == 1", "assert pell_number(2) == 2", "assert pell_number(3) == 5", "assert pell_number(4) == 12", "assert pell_number(5) == 29", "assert pell_number(6) == 70", "assert pell_number(7) == 169", "assert pell_number(8) == 408", "assert pell_number(9) == 985", "assert pell_number(10) == 2378", "assert pell_number(11) == 5741", "assert pell_number(12) == 13860", "assert pell_number(13) == 33461", "assert pell_number(14) == 80782"], "challenge_test_list": []}
{"text": "Write a function to find the nth Lucas number.", "code": "def lucas_number(n):\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn lucas_number(n-1) + lucas_number(n-2)", "task_id": "260_4fac1ff3-d146-40cb-b8cf-0586b9c6e1b7", "test_setup_code": "", "test_list": ["assert lucas_number(0) == 2", "assert lucas_number(1) == 1", "assert lucas_number(2) == 3", "assert lucas_number(3) == 4", "assert lucas_number(4) == 7", "assert lucas_number(5) == 11", "assert lucas_number(6) == 18", "assert lucas_number(7) == 29", "assert lucas_number(8) == 47", "assert lucas_number(9) == 76", "assert lucas_number(10) == 123", "assert lucas_number(15) == 1364", "assert lucas_number(20) == 15127", "assert lucas_number(25) == 167761", "assert lucas_number(30) == 1860498"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a number n.", "code": "def sum_of_digits(n):\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn n % 10 + sum_of_digits(n // 10)", "task_id": "260_ef909e32-2b39-453f-8d02-916ae5aef686", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(9) == 9", "assert sum_of_digits(10) == 1", "assert sum_of_digits(99) == 18", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(12345) == 15", "assert sum_of_digits(11111) == 5", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(55555) == 25", "assert sum_of_digits(2020202020) == 10", "assert sum_of_digits(314159265) == 36", "assert sum_of_digits(24680) == 20", "assert sum_of_digits(13579) == 25"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s):\n\tif len(s) == 0:\n\t\treturn s\n\telse:\n\t\treturn reverse_string(s[1:]) + s[0]", "task_id": "260_8885b972-7c0d-42b6-8693-3784d71235e8", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man, a plan, a canal, Panama') == 'amanaP ,lanac a ,nalp a ,nam A'", "assert reverse_string('  leading spaces') == 'secaps gnidael  '", "assert reverse_string('trailing spaces  ') == '  secaps gniliart'", "assert reverse_string('  multiple   spaces  ') == '  secaps   elpitlum  '", "assert reverse_string('palindromeemordnilap') == 'palindromeemordnilap'", "assert reverse_string('Python3.8') == '8.3nohtyP'", "assert reverse_string('UPPERlower') == 'rewolREPPU'", "assert reverse_string('123abcABC') == 'CBAcba321'"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)", "task_id": "260_ce50e0f1-2ed1-453e-876e-d03bf4462670", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(7, 1) == 1", "assert gcd(1, 7) == 1", "assert gcd(100, 25) == 25", "assert gcd(25, 100) == 25", "assert gcd(13, 13) == 13", "assert gcd(270, 192) == 6", "assert gcd(192, 270) == 6", "assert gcd(15, 5) == 5", "assert gcd(5, 15) == 5", "assert gcd(101, 103) == 1", "assert gcd(56, 98) == 14", "assert gcd(98, 56) == 14"], "challenge_test_list": []}
{"text": "Write a function to find x raised to the power n.", "code": "def power(x, n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn x * power(x, n-1)", "task_id": "260_fe3fa7b7-def2-4f1b-953f-77a345903fb9", "test_setup_code": "", "test_list": ["assert power(2, 3) == 8", "assert power(5, 0) == 1", "assert power(1, 100) == 1", "assert power(0, 5) == 0", "assert power(3, 3) == 27", "assert power(2, 10) == 1024", "assert power(10, 2) == 100", "assert power(-2, 3) == -8", "assert power(-2, 2) == 4", "assert power(2, -3) == 0.125", "assert power(2, 1) == 2", "assert power(2, 0) == 1", "assert power(0, 0) == 1", "assert power(1.5, 2) == 2.25", "assert power(2, 4) == 16"], "challenge_test_list": []}
{"text": "Write a function to sum the corresponding elements of two tuples.", "code": "def sum_elements(test_tup1, test_tup2):\n  res = tuple(a + b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_abd1538c-f0ef-4586-960e-04d257be06f2", "test_setup_code": "", "test_list": ["assert sum_elements((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert sum_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert sum_elements((1, 2), (3, 4)) == (4, 6)", "assert sum_elements((1,), (2,)) == (3,)", "assert sum_elements((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert sum_elements((100, 200, 300), (400, 500, 600)) == (500, 700, 900)", "assert sum_elements((1.5, 2.5, 3.5), (4.5, 5.5, 6.5)) == (6.0, 8.0, 10.0)", "assert sum_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (5, 5, 5, 5)", "assert sum_elements((1, 2, 3), (4, 5, 6, 7)) == (5, 7, 9)", "assert sum_elements((1, 2, 3, 4), (4, 5, 6)) == (5, 7, 9)", "assert sum_elements((), ()) == ()", "assert sum_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3)", "assert sum_elements((0, 0, 0), (1, 2, 3)) == (1, 2, 3)", "assert sum_elements((1, -1), (-1, 1)) == (0, 0)", "assert sum_elements((1000000, 2000000), (3000000, 4000000)) == (4000000, 6000000)"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the corresponding elements of two tuples.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(min(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_f1572555-1bba-42d7-81e5-c1c6abd86654", "test_setup_code": "", "test_list": ["assert min_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)", "assert min_elements((7, 8, 9), (3, 6, 9)) == (3, 6, 9)", "assert min_elements((0, -1, -2), (1, -2, -3)) == (0, -2, -3)", "assert min_elements((100, 200, 300), (50, 250, 350)) == (50, 200, 300)", "assert min_elements((1, 1, 1), (1, 1, 1)) == (1, 1, 1)", "assert min_elements((5, 10, 15), (15, 10, 5)) == (5, 10, 5)", "assert min_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert min_elements((-5, -10, -15), (-15, -10, -5)) == (-15, -10, -15)", "assert min_elements((1, 2), (3, 4)) == (1, 2)", "assert min_elements((1,), (2,)) == (1,)", "assert min_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 2, 1)", "assert min_elements((10, 20, 30), (5, 25, 35)) == (5, 20, 30)", "assert min_elements((0, 1, 2), (3, 2, 1)) == (0, 1, 1)", "assert min_elements((1, 3, 5, 7), (2, 4, 6, 8)) == (1, 3, 5, 7)", "assert min_elements((9, 8, 7, 6), (6, 7, 8, 9)) == (6, 7, 7, 6)"], "challenge_test_list": []}
{"text": "Write a function to multiply the corresponding elements of two tuples.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_ff913cce-64bd-4fd3-b388-0e4d73f27d76", "test_setup_code": "", "test_list": ["assert multiply_elements((1, 2, 3), (4, 5, 6)) == (4, 10, 18)", "assert multiply_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert multiply_elements((1, 2, 3), (0, 0, 0)) == (0, 0, 0)", "assert multiply_elements((1, -2, 3), (4, 5, -6)) == (4, -10, -18)", "assert multiply_elements((1, 2), (3, 4)) == (3, 8)", "assert multiply_elements((1,), (2,)) == (2,)", "assert multiply_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (4, 6, 6, 4)", "assert multiply_elements((1, 2, 3), (1, 1, 1)) == (1, 2, 3)", "assert multiply_elements((1, 2, 3), (3, 2, 1)) == (3, 4, 3)", "assert multiply_elements((1, 2, 3), (0.5, 0.5, 0.5)) == (0.5, 1.0, 1.5)", "assert multiply_elements((1.5, 2.5, 3.5), (2, 2, 2)) == (3.0, 5.0, 7.0)", "assert multiply_elements((1, 2, 3), (1.5, 2.5, 3.5)) == (1.5, 5.0, 10.5)", "assert multiply_elements((0, 1, 2), (2, 1, 0)) == (0, 1, 0)", "assert multiply_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (5, 8, 9, 8, 5)", "assert multiply_elements((10, 20, 30), (1, 0, -1)) == (10, 0, -30)"], "challenge_test_list": []}
{"text": "Write a function to divide the corresponding elements of two tuples. Assume no division by zero.", "code": "def divide_elements(test_tup1, test_tup2):\n  res = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_8c75de82-1439-4b77-99cb-384775f8b6c7", "test_setup_code": "", "test_list": ["assert divide_elements((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)", "assert divide_elements((1, 2, 3), (1, 1, 1)) == (1.0, 2.0, 3.0)", "assert divide_elements((0, 0, 0), (1, 1, 1)) == (0.0, 0.0, 0.0)", "assert divide_elements((5, 10, 15), (1, 2, 3)) == (5.0, 5.0, 5.0)", "assert divide_elements((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)", "assert divide_elements((7, 14, 21), (1, 2, 3)) == (7.0, 7.0, 7.0)", "assert divide_elements((9, 18, 27), (3, 6, 9)) == (3.0, 3.0, 3.0)", "assert divide_elements((8, 16, 24), (2, 4, 8)) == (4.0, 4.0, 3.0)", "assert divide_elements((1, 4, 9), (1, 2, 3)) == (1.0, 2.0, 3.0)", "assert divide_elements((50, 100, 150), (5, 10, 15)) == (10.0, 10.0, 10.0)", "assert divide_elements((2, 4, 6), (1, 2, 3)) == (2.0, 2.0, 2.0)", "assert divide_elements((3, 6, 9), (1, 2, 3)) == (3.0, 3.0, 3.0)", "assert divide_elements((10, 20, 30), (5, 5, 5)) == (2.0, 4.0, 6.0)", "assert divide_elements((15, 30, 45), (3, 6, 9)) == (5.0, 5.0, 5.0)", "assert divide_elements((1000, 2000, 3000), (10, 20, 30)) == (100.0, 100.0, 100.0)"], "challenge_test_list": []}
{"text": "Write a function to subtract the corresponding elements of the second tuple from the first tuple.", "code": "def subtract_elements(test_tup1, test_tup2):\n  res = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_8e684e2d-da88-4cd8-9b2b-da2e533b8272", "test_setup_code": "", "test_list": ["assert subtract_elements((5, 10, 15), (3, 6, 9)) == (2, 4, 6)", "assert subtract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert subtract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)", "assert subtract_elements((-5, -10, -15), (-3, -6, -9)) == (-2, -4, -6)", "assert subtract_elements((1, 2, 3), (3, 2, 1)) == (-2, 0, 2)", "assert subtract_elements((5,), (3,)) == (2,)", "assert subtract_elements((0,), (0,)) == (0,)", "assert subtract_elements((1000, 2000, 3000), (500, 1000, 1500)) == (500, 1000, 1500)", "assert subtract_elements((1, 1, 1), (1, 1, 1)) == (0, 0, 0)", "assert subtract_elements((-1, -2, -3), (-1, -2, -3)) == (0, 0, 0)", "assert subtract_elements((10, 20, 30), (5, 10, 15)) == (5, 10, 15)", "assert subtract_elements((100, 200), (50, 100)) == (50, 100)", "assert subtract_elements((0, 0, 0, 0), (0, 0, 0, 0)) == (0, 0, 0, 0)", "assert subtract_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)", "assert subtract_elements((5, 10, 15, 20), (1, 2, 3, 4)) == (4, 8, 12, 16)"], "challenge_test_list": []}
{"text": "Write a function to concatenate the corresponding elements of two tuples.", "code": "def concatenate_elements(test_tup1, test_tup2):\n  res = tuple(str(a) + str(b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_e74145e4-a791-4ea4-aae2-47854b9fa857", "test_setup_code": "", "test_list": ["assert concatenate_elements((1, 2, 3), ('a', 'b', 'c')) == ('1a', '2b', '3c')", "assert concatenate_elements((), ()) == ()", "assert concatenate_elements((1,), ('a',)) == ('1a')", "assert concatenate_elements((1, 2), ('a', 'b', 'c')) == ('1a', '2b')", "assert concatenate_elements((1, 2, 3), ('a',)) == ('1a',)", "assert concatenate_elements((1, 2, 3), (4, 5, 6)) == ('14', '25', '36')", "assert concatenate_elements(('x', 'y', 'z'), ('a', 'b', 'c')) == ('xa', 'yb', 'zc')", "assert concatenate_elements((None, None), ('a', 'b')) == ('Nonea', 'Noneb')", "assert concatenate_elements((1.1, 2.2), ('a', 'b')) == ('1.1a', '2.2b')", "assert concatenate_elements((True, False), ('yes', 'no')) == ('Trueyes', 'Falseno')", "assert concatenate_elements(('longstring',), ('short',)) == ('longstringshort',)", "assert concatenate_elements((1, 2, 3), (1, 2, 3)) == ('11', '22', '33')", "assert concatenate_elements((1, 2, 'three'), ('a', 'b', 'c')) == ('1a', '2b', 'threec')", "assert concatenate_elements(('a', 'b', 'c'), ('x', 'y', 'z')) == ('ax', 'by', 'cz')", "assert concatenate_elements((1, 2, 3), ('', '', '')) == ('1', '2', '3')"], "challenge_test_list": []}
{"text": "Write a function to raise the elements of the first tuple to the power of the corresponding elements of the second tuple.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_e7d744a1-ec0c-43cf-8a64-175b5c6bd5a1", "test_setup_code": "", "test_list": ["assert power_elements((2, 3), (2, 3)) == (4, 27)", "assert power_elements((1, 0, 2), (0, 1, 2)) == (1, 0, 4)", "assert power_elements((5, 6, 7), (1, 2, 3)) == (5, 36, 343)", "assert power_elements((0, 1, 2), (3, 2, 1)) == (0, 1, 2)", "assert power_elements((2, 2, 2), (3, 2, 1)) == (8, 4, 2)", "assert power_elements((10, 100), (0, 1)) == (1, 100)", "assert power_elements((3, 4, 5), (2, 2, 2)) == (9, 16, 25)", "assert power_elements((2, 3, 4), (3, 2, 1)) == (8, 9, 4)", "assert power_elements((1, 1, 1), (1, 1, 1)) == (1, 1, 1)", "assert power_elements((0, 0, 0), (0, 0, 0)) == (1, 1, 1)", "assert power_elements((2, 3, 4), (0, 0, 0)) == (1, 1, 1)", "assert power_elements((1, 2, 3), (1, 2, 3)) == (1, 4, 27)", "assert power_elements((2, 2, 2), (2, 2, 2)) == (4, 4, 4)", "assert power_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 8, 9, 4)", "assert power_elements((9, 8, 7), (0, 1, 2)) == (1, 8, 49)"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the corresponding elements of two tuples.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_2f401e7d-a063-4689-8e60-c99c48e9f774", "test_setup_code": "", "test_list": ["assert mod_elements((10, 20, 30), (3, 7, 5)) == (1, 6, 0)", "assert mod_elements((15, 25, 35), (4, 6, 9)) == (3, 1, 8)", "assert mod_elements((0, 1, 2), (1, 1, 1)) == (0, 0, 0)", "assert mod_elements((100, 200, 300), (10, 20, 30)) == (0, 0, 0)", "assert mod_elements((5, 10, 15), (2, 3, 4)) == (1, 1, 3)", "assert mod_elements((9, 8, 7), (2, 2, 2)) == (1, 0, 1)", "assert mod_elements((11, 22, 33), (5, 5, 5)) == (1, 2, 3)", "assert mod_elements((13, 26, 39), (7, 7, 7)) == (6, 5, 4)", "assert mod_elements((14, 28, 42), (3, 6, 9)) == (2, 4, 6)", "assert mod_elements((17, 34, 51), (4, 8, 12)) == (1, 2, 3)", "assert mod_elements((19, 38, 57), (5, 10, 15)) == (4, 8, 12)", "assert mod_elements((21, 42, 63), (6, 7, 8)) == (3, 0, 7)", "assert mod_elements((23, 46, 69), (7, 8, 9)) == (2, 6, 6)", "assert mod_elements((25, 50, 75), (8, 9, 10)) == (1, 5, 5)", "assert mod_elements((27, 54, 81), (9, 10, 11)) == (0, 4, 4)"], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of the corresponding elements of two tuples.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(abs(a - b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_b3ad731d-d865-4fe1-a513-96dfff6563f0", "test_setup_code": "", "test_list": ["assert abs_diff_elements((1, 2, 3), (4, 5, 6)) == (3, 3, 3)", "assert abs_diff_elements((10, 20, 30), (5, 15, 25)) == (5, 5, 5)", "assert abs_diff_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert abs_diff_elements((1, 2, 3), (3, 2, 1)) == (2, 0, 2)", "assert abs_diff_elements((-1, -2, -3), (1, 2, 3)) == (2, 4, 6)", "assert abs_diff_elements((1, 2), (1, 2)) == (0, 0)", "assert abs_diff_elements((100, 200, 300), (50, 150, 250)) == (50, 50, 50)", "assert abs_diff_elements((5, 10, 15), (10, 5, 0)) == (5, 5, 15)", "assert abs_diff_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (3, 1, 1, 3)", "assert abs_diff_elements((1,), (2,)) == (1,)", "assert abs_diff_elements((0,), (0,)) == (0,)", "assert abs_diff_elements((123456,), (654321,)) == (530865,)", "assert abs_diff_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (4, 2, 0, 2, 4)", "assert abs_diff_elements((10, 20, 30, 40), (40, 30, 20, 10)) == (30, 10, 10, 30)", "assert abs_diff_elements((-10, -20, -30), (-30, -20, -10)) == (20, 0, 20)"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the corresponding elements of two tuples. If an element is missing in one of the tuples, use the default value.", "code": "def max_elements_with_default(test_tup1, test_tup2, default):\n  len1, len2 = len(test_tup1), len(test_tup2)\n  if len1 < len2:\n    test_tup1 += (default,) * (len2 - len1)\n  elif len2 < len1:\n    test_tup2 += (default,) * (len1 - len2)\n  res = tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_f0d9482e-45a6-4922-8277-891ff1940752", "test_setup_code": "", "test_list": ["assert max_elements_with_default((1, 2, 3), (4, 1, 2), 0) == (4, 2, 3)", "assert max_elements_with_default((1, 2), (4, 1, 2), 0) == (4, 2, 2)", "assert max_elements_with_default((1, 2, 3), (4, 1), 0) == (4, 2, 3)", "assert max_elements_with_default((1,), (4, 1, 2), 0) == (4, 1, 2)", "assert max_elements_with_default((1, 2, 3), (4,), 0) == (4, 2, 3)", "assert max_elements_with_default((), (4, 1, 2), 0) == (4, 1, 2)", "assert max_elements_with_default((1, 2, 3), (), 0) == (1, 2, 3)", "assert max_elements_with_default((1, 2, 3), (4, 5, 6), 0) == (4, 5, 6)", "assert max_elements_with_default((1, 2, 3), (4, 5), 5) == (4, 5, 5)", "assert max_elements_with_default((1, 2), (4, 5, 6), 5) == (4, 5, 6)", "assert max_elements_with_default((1, 2, 3), (4, 5, 6, 7), 0) == (4, 5, 6, 7)", "assert max_elements_with_default((1, 2, 3, 8), (4, 5, 6), 0) == (4, 5, 6, 8)", "assert max_elements_with_default((1, 2, 3, 8), (4, 5, 6), 9) == (4, 5, 6, 9)", "assert max_elements_with_default((1, 2, 3), (4, 5, 6, 7), 9) == (4, 5, 6, 7)", "assert max_elements_with_default((1,), (), 10) == (10,)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition operation across the given tuples.", "code": "def add_elements(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_f578b648-d871-4436-b63b-687a8946bee5", "test_setup_code": "", "test_list": ["assert add_elements((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert add_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert add_elements((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert add_elements((100, 200, 300), (400, 500, 600)) == (500, 700, 900)", "assert add_elements((1,), (2,)) == (3,)", "assert add_elements((1, 2), (3, 4)) == (4, 6)", "assert add_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (6, 8, 10, 12)", "assert add_elements((0,), (0,)) == (0,)", "assert add_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3)", "assert add_elements((1, 2, 3), (-1, -2, -3)) == (0, 0, 0)", "assert add_elements((1, 2, 3), (1, 2, 3)) == (2, 4, 6)", "assert add_elements((0, 0, 0), (1, 1, 1)) == (1, 1, 1)", "assert add_elements((10, 20, 30), (5, 15, 25)) == (15, 35, 55)", "assert add_elements((1, 1, 1, 1), (2, 2, 2, 2)) == (3, 3, 3, 3)", "assert add_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (6, 6, 6, 6, 6)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction operation across the given tuples.", "code": "def subtract_elements(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_498c92a8-157c-4224-94d7-c8942ba0a166", "test_setup_code": "", "test_list": ["assert subtract_elements((5, 10, 15), (2, 3, 4)) == (3, 7, 11)", "assert subtract_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert subtract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)", "assert subtract_elements((100, 200, 300), (50, 100, 150)) == (50, 100, 150)", "assert subtract_elements((-1, -2, -3), (-1, -2, -3)) == (0, 0, 0)", "assert subtract_elements((1, 2, 3), (-1, -2, -3)) == (2, 4, 6)", "assert subtract_elements((0, 0, 0), (1, 2, 3)) == (-1, -2, -3)", "assert subtract_elements((1,), (1,)) == (0,)", "assert subtract_elements((1000000, 2000000), (999999, 1999999)) == (1, 1)", "assert subtract_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (0, 0, 0, 0)", "assert subtract_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (-3, -1, 1, 3)", "assert subtract_elements((1, 2), (1, 2)) == (0, 0)", "assert subtract_elements((1,), (0,)) == (1,)", "assert subtract_elements((0,), (1,)) == (-1,)", "assert subtract_elements((5, 10, 15, 20), (1, 2, 3, 4)) == (4, 8, 12, 16)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication operation across the given tuples.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_e056843f-ecb6-466b-9c43-f2d444c08aa2", "test_setup_code": "", "test_list": ["assert multiply_elements((1, 2, 3), (4, 5, 6)) == (4, 10, 18)", "assert multiply_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert multiply_elements((1, -2, 3), (4, 5, -6)) == (4, -10, -18)", "assert multiply_elements((1,), (2,)) == (2,)", "assert multiply_elements((1, 2), (3, 4)) == (3, 8)", "assert multiply_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert multiply_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)", "assert multiply_elements((1, 2, 3), (1, 2, 3)) == (1, 4, 9)", "assert multiply_elements((-1, -2, -3), (-4, -5, -6)) == (4, 10, 18)", "assert multiply_elements((1, 2, 3), (0, 0, 0)) == (0, 0, 0)", "assert multiply_elements((1, 2, 3), (1, 2, 3, 4)) == (1, 4, 9)", "assert multiply_elements((1, 2, 3, 4), (1, 2, 3)) == (1, 4, 9)", "assert multiply_elements((1000, 2000, 3000), (1, 2, 3)) == (1000, 4000, 9000)", "assert multiply_elements((1.5, 2.5, 3.5), (2, 3, 4)) == (3.0, 7.5, 14.0)", "assert multiply_elements((1, 2, 3), (1.5, 2.5, 3.5)) == (1.5, 5.0, 10.5)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise modulo operation across the given tuples.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_4202829c-1205-4e51-9cfa-c569b9d8f866", "test_setup_code": "", "test_list": ["assert mod_elements((10, 4, 6, 9), (3, 2, 4, 3)) == (1, 0, 2, 0)", "assert mod_elements((100, 200, 300), (7, 5, 3)) == (2, 0, 0)", "assert mod_elements((1, 2, 3, 4, 5), (1, 2, 3, 4, 5)) == (0, 0, 0, 0, 0)", "assert mod_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert mod_elements((17, 23, 31), (5, 7, 11)) == (2, 2, 9)", "assert mod_elements((99, 88, 77, 66), (9, 8, 7, 6)) == (0, 0, 0, 0)", "assert mod_elements((1, 1, 1, 1), (2, 2, 2, 2)) == (1, 1, 1, 1)", "assert mod_elements((10,), (3,)) == (1,)", "assert mod_elements((100, 200), (50, 50)) == (0, 0)", "assert mod_elements((7, 11, 13, 17, 19), (2, 3, 5, 7, 11)) == (1, 2, 3, 3, 8)", "assert mod_elements((999, 888, 777), (10, 20, 30)) == (9, 8, 27)", "assert mod_elements((5, 10, 15, 20), (5, 5, 5, 5)) == (0, 0, 0, 0)", "assert mod_elements((123, 456, 789), (100, 400, 700)) == (23, 56, 89)", "assert mod_elements((2, 4, 6, 8, 10), (3, 5, 7, 9, 11)) == (2, 4, 6, 8, 10)", "assert mod_elements((1000, 2000, 3000, 4000), (999, 1999, 2999, 3999)) == (1, 1, 1, 1)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise power operation across the given tuples.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_1a1dff8f-45dc-4064-ae60-26bdeffe99ee", "test_setup_code": "", "test_list": ["assert power_elements((2, 3), (3, 2)) == (8, 9)", "assert power_elements((1, 2, 3), (0, 1, 2)) == (1, 2, 9)", "assert power_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert power_elements((2, 3, 4), (2, 2, 2)) == (4, 9, 16)", "assert power_elements((5,), (3,)) == (125,)", "assert power_elements((10, 20), (1, 0)) == (10, 1)", "assert power_elements((2, 4, 6), (3, 2, 1)) == (8, 16, 6)", "assert power_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 8, 9, 4)", "assert power_elements((3, 2, 1), (3, 2, 1)) == (27, 4, 1)", "assert power_elements((0, 1, 2), (0, 0, 0)) == (1, 1, 1)", "assert power_elements((2, 3, 4), (1, 1, 1)) == (2, 3, 4)", "assert power_elements((9, 8, 7), (2, 2, 2)) == (81, 64, 49)", "assert power_elements((2, 3), (3, 2)) == (8, 9)", "assert power_elements((4, 5, 6), (2, 1, 0)) == (16, 5, 1)", "assert power_elements((2, 3, 4), (0, 0, 0)) == (1, 1, 1)"], "challenge_test_list": []}
{"text": "Write a function to find the element-wise maximum across the given tuples.", "code": "def max_elements(test_tup1, test_tup2):\n  res = tuple(max(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_aa00fe21-3739-48ed-817e-b0e3796b223b", "test_setup_code": "", "test_list": ["assert max_elements((1, 2, 3), (3, 2, 1)) == (3, 2, 3)", "assert max_elements((5, 6, 7), (1, 8, 2)) == (5, 8, 7)", "assert max_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert max_elements((-1, -2, -3), (-3, -2, -1)) == (-1, -2, -1)"], "challenge_test_list": []}
{"text": "Write a function to find the element-wise minimum across the given tuples.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(min(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_ca603a2c-bf1c-467d-89a1-41a0e88e0818", "test_setup_code": "", "test_list": ["assert min_elements((1, 2, 3), (4, 1, 5)) == (1, 1, 3)", "assert min_elements((10, 20, 30), (5, 15, 25)) == (5, 15, 25)", "assert min_elements((7, 8, 9), (7, 8, 9)) == (7, 8, 9)", "assert min_elements((100, 200), (50, 300)) == (50, 200)", "assert min_elements((5, 5, 5), (10, 10, 10)) == (5, 5, 5)", "assert min_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert min_elements((-1, -2, -3), (-4, -1, -5)) == (-4, -2, -5)", "assert min_elements((1, 2), (3, 4)) == (1, 2)", "assert min_elements((5,), (3,)) == (3,)", "assert min_elements((100, 200, 300, 400), (400, 300, 200, 100)) == (100, 200, 200, 100)", "assert min_elements((1.5, 2.5, 3.5), (1.0, 3.0, 3.0)) == (1.0, 2.5, 3.0)", "assert min_elements((float('inf'), 10), (20, float('inf'))) == (20, 10)", "assert min_elements((0, -1, 2), (1, -2, 0)) == (0, -2, 0)", "assert min_elements((99, 88, 77, 66, 55), (55, 66, 77, 88, 99)) == (55, 66, 77, 66, 55)", "assert min_elements((-10, -20, -30), (-30, -20, -10)) == (-30, -20, -30)"], "challenge_test_list": []}
{"text": "Write a function to find the element-wise absolute difference across the given tuples.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(abs(ele1 - ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_0bb9d11d-8e52-4af7-8b62-6d69c23c6082", "test_setup_code": "", "test_list": ["assert abs_diff_elements((1, 2, 3), (4, 5, 6)) == (3, 3, 3)", "assert abs_diff_elements((10, 20, 30), (5, 15, 25)) == (5, 5, 5)", "assert abs_diff_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert abs_diff_elements((-1, -2, -3), (1, 2, 3)) == (2, 4, 6)", "assert abs_diff_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)", "assert abs_diff_elements((100, 200, 300), (50, 150, 250)) == (50, 50, 50)", "assert abs_diff_elements((1, 2), (3, 4)) == (2, 2)", "assert abs_diff_elements((5,), (10,)) == (5,)", "assert abs_diff_elements((0,), (0,)) == (0,)", "assert abs_diff_elements((123, 456, 789), (321, 654, 987)) == (198, 198, 198)", "assert abs_diff_elements((-10, -20, -30), (-5, -15, -25)) == (5, 5, 5)", "assert abs_diff_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (3, 1, 1, 3)", "assert abs_diff_elements((1, 1, 1, 1), (2, 2, 2, 2)) == (1, 1, 1, 1)", "assert abs_diff_elements((0, 1, 2), (2, 1, 0)) == (2, 0, 2)", "assert abs_diff_elements((-1, 0, 1), (1, 0, -1)) == (2, 0, 2)"], "challenge_test_list": []}
{"text": "Write a function to concatenate the corresponding elements of the given tuples as strings.", "code": "def concat_elements(test_tup1, test_tup2):\n  res = tuple(str(ele1) + str(ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_66b3da3b-ada6-41e4-8e14-8a8036e47e55", "test_setup_code": "", "test_list": ["assert concat_elements((1, 2, 3), (4, 5, 6)) == ('14', '25', '36')", "assert concat_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('ad', 'be', 'cf')", "assert concat_elements((1, 'b', 3.5), ('a', 2, 4.5)) == ('1a', 'b2', '3.54.5')", "assert concat_elements((), ()) == ()", "assert concat_elements((1,), (2,)) == ('12',)", "assert concat_elements(('x', 'y'), ('z', 'w')) == ('xz', 'yw')", "assert concat_elements((None, 'test'), ('case', None)) == ('Nonecase', 'testNone')", "assert concat_elements((True, False), (False, True)) == ('TrueFalse', 'FalseTrue')", "assert concat_elements((1, 2, 3), ('a', 'b', 'c')) == ('1a', '2b', '3c')", "assert concat_elements((0, 0, 0), (1, 2, 3)) == ('01', '02', '03')", "assert concat_elements((1, 2), (3, 4, 5)) == ('13', '24')", "assert concat_elements((1, 2, 3), (4,)) == ('14',)", "assert concat_elements(('hello', 'world'), ('!', '?')) == ('hello!', 'world?')", "assert concat_elements(('a', 'b', 'c'), ('1', '2', '3')) == ('a1', 'b2', 'c3')", "assert concat_elements((1.1, 2.2), (3.3, 4.4)) == ('1.13.3', '2.24.4')"], "challenge_test_list": []}
{"text": "Write a function to compare the corresponding elements of the given tuples and return a tuple of booleans indicating if elements in the first tuple are greater than those in the second tuple.", "code": "def compare_elements(test_tup1, test_tup2):\n  res = tuple(ele1 > ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_6c8c89f0-06fa-4153-9a58-54679b4f70e9", "test_setup_code": "", "test_list": ["assert compare_elements((1, 2, 3), (3, 2, 1)) == (False, False, True)", "assert compare_elements((5, 6, 7), (5, 6, 7)) == (False, False, False)", "assert compare_elements((10, 20, 30), (5, 15, 25)) == (True, True, True)", "assert compare_elements((0, 0, 0), (0, 0, 0)) == (False, False, False)", "assert compare_elements((-1, -2, -3), (-3, -2, -1)) == (True, False, False)", "assert compare_elements((100, 200, 300), (100, 200, 300)) == (False, False, False)", "assert compare_elements((1.5, 2.5, 3.5), (1.4, 2.6, 3.4)) == (True, False, True)", "assert compare_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (False, False, False, False)", "assert compare_elements((1, 2, 3, 4), (0, 1, 2, 3)) == (True, True, True, True)", "assert compare_elements((1, 2, 3), (1, 2)) == (False, False)", "assert compare_elements((1, 2), (1, 2, 3)) == (False, False)", "assert compare_elements((1, 2, 3), (0, 0, 0)) == (True, True, True)", "assert compare_elements((0, 0, 0), (1, 1, 1)) == (False, False, False)", "assert compare_elements((1, 2, 3), (3, 2, 1, 0)) == (False, False, True)", "assert compare_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (False, False, False, True, True)"], "challenge_test_list": []}
{"text": "Write a function to calculate a turtle's age in turtle's years.", "code": "def turtle_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 5:\n  t_age = h_age * 2\n else:\n  t_age = 10 + (h_age - 5) * 1.5\n return t_age", "task_id": "264_4c50df41-3dc7-433b-a85d-a56aa36430ed", "test_setup_code": "", "test_list": ["assert turtle_age(0) == 0", "assert turtle_age(1) == 2", "assert turtle_age(2) == 4", "assert turtle_age(3) == 6", "assert turtle_age(4) == 8", "assert turtle_age(5) == 10", "assert turtle_age(6) == 11.5", "assert turtle_age(7) == 13.0", "assert turtle_age(8) == 14.5", "assert turtle_age(9) == 16.0", "assert turtle_age(10) == 17.5", "assert turtle_age(15) == 25.0", "assert turtle_age(20) == 32.5", "assert turtle_age(25) == 40.0", "assert turtle_age(30) == 47.5"], "challenge_test_list": []}
{"text": "Write a function to calculate a rabbit's age in rabbit's years.", "code": "def rabbit_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 1:\n  r_age = h_age * 12\n else:\n  r_age = 12 + (h_age - 1) * 6\n return r_age", "task_id": "264_3fc9ed84-6f0f-47a7-9d27-60d823fced51", "test_setup_code": "", "test_list": ["assert rabbit_age(0) == 0", "assert rabbit_age(0.5) == 6", "assert rabbit_age(1) == 12", "assert rabbit_age(2) == 18", "assert rabbit_age(3) == 24", "assert rabbit_age(4) == 30", "assert rabbit_age(10) == 66", "assert rabbit_age(0.1) == 1.2", "assert rabbit_age(0.9) == 10.8", "assert rabbit_age(1.5) == 15", "assert rabbit_age(2.5) == 21", "assert rabbit_age(0.25) == 3", "assert rabbit_age(1.25) == 13.5", "assert rabbit_age(5) == 36", "assert rabbit_age(100) == 606"], "challenge_test_list": []}
{"text": "Write a function to calculate a parrot's age in parrot's years.", "code": "def parrot_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 3:\n  p_age = h_age * 5\n else:\n  p_age = 15 + (h_age - 3) * 2\n return p_age", "task_id": "264_5f8787dd-2cc2-4f61-83b6-8889e7b2a214", "test_setup_code": "", "test_list": ["assert parrot_age(1) == 5", "assert parrot_age(3) == 15", "assert parrot_age(5) == 19", "assert parrot_age(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate a hamster's age in hamster's years.", "code": "def hamster_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 1:\n  h_age = h_age * 25\n else:\n  h_age = 25 + (h_age - 1) * 12.5\n return h_age", "task_id": "264_016d97ba-a117-4428-970d-31a69469fecf", "test_setup_code": "", "test_list": ["assert hamster_age(0) == 0", "assert hamster_age(0.5) == 12.5", "assert hamster_age(1) == 25", "assert hamster_age(1.5) == 31.25", "assert hamster_age(2) == 37.5", "assert hamster_age(3) == 50", "assert hamster_age(10) == 137.5", "assert hamster_age(0.1) == 2.5", "assert hamster_age(0.9) == 22.5", "assert hamster_age(1.1) == 26.25", "assert hamster_age(2.5) == 43.75", "assert hamster_age(5) == 87.5", "assert hamster_age(0.25) == 6.25", "assert hamster_age(4) == 62.5", "assert hamster_age(0.75) == 18.75"], "challenge_test_list": []}
{"text": "Write a function to calculate a goldfish's age in goldfish's years.", "code": "def goldfish_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 2:\n  g_age = h_age * 5\n else:\n  g_age = 10 + (h_age - 2) * 1.5\n return g_age", "task_id": "264_0b4ab259-77eb-446c-88e1-bc3a55e0d256", "test_setup_code": "", "test_list": ["assert goldfish_age(0) == 0", "assert goldfish_age(1) == 5", "assert goldfish_age(2) == 10", "assert goldfish_age(3) == 11.5", "assert goldfish_age(4) == 13", "assert goldfish_age(5) == 14.5", "assert goldfish_age(10) == 22", "assert goldfish_age(20) == 37", "assert goldfish_age(0.5) == 2.5", "assert goldfish_age(1.5) == 7.5", "assert goldfish_age(2.5) == 11.75", "assert goldfish_age(3.5) == 13", "assert goldfish_age(0.1) == 0.5", "assert goldfish_age(2.1) == 10.15", "assert goldfish_age(100) == 157"], "challenge_test_list": []}
{"text": "Write a function to calculate a horse's age in horse's years.", "code": "def horse_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 3:\n  ho_age = h_age * 6.5\n else:\n  ho_age = 19.5 + (h_age - 3) * 2.5\n return ho_age", "task_id": "264_4bbebccd-a9c7-40c0-9297-5c7692fd002e", "test_setup_code": "", "test_list": ["assert horse_age(0) == 0.0", "assert horse_age(3) == 19.5", "assert horse_age(5) == 24.5", "assert horse_age(10) == 42.0"], "challenge_test_list": []}
{"text": "Write a function to calculate a frog's age in frog's years.", "code": "def frog_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 2:\n  f_age = h_age * 4\n else:\n  f_age = 8 + (h_age - 2) * 2\n return f_age", "task_id": "264_e2d734c1-c655-4b52-bb39-523767a8a2fb", "test_setup_code": "", "test_list": ["assert frog_age(0) == 0", "assert frog_age(1) == 4", "assert frog_age(2) == 8", "assert frog_age(3) == 10", "assert frog_age(4) == 12", "assert frog_age(5) == 14", "assert frog_age(10) == 24", "assert frog_age(20) == 44", "assert frog_age(100) == 208", "assert frog_age(2.5) == 9.0", "assert frog_age(3.5) == 11.0", "assert frog_age(0.5) == 2.0", "assert frog_age(1.5) == 6.0", "assert frog_age(2.1) == 8.2", "assert frog_age(3.9) == 11.8"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements less than or equal to a given value.", "code": "def split_by_value(list1, value):\n    part1 = [x for x in list1 if x <= value]\n    part2 = [x for x in list1 if x > value]\n    return part1, part2", "task_id": "262_93b5c1ba-9a9c-40c6-8981-33eb5191dceb", "test_setup_code": "", "test_list": ["assert split_by_value([1, 2, 3, 4, 5], 3) == ([1, 2, 3], [4, 5])", "assert split_by_value([10, 20, 30, 40, 50], 25) == ([10, 20], [30, 40, 50])", "assert split_by_value([5, 5, 5, 5, 5], 5) == ([5, 5, 5, 5, 5], [])", "assert split_by_value([1, 2, 3, 4, 5], 0) == ([], [1, 2, 3, 4, 5])", "assert split_by_value([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])", "assert split_by_value([], 3) == ([], [])", "assert split_by_value([3, 3, 3, 3], 3) == ([3, 3, 3, 3], [])", "assert split_by_value([1, 2, 3, 4, 5], 2) == ([1, 2], [3, 4, 5])", "assert split_by_value([10, 9, 8, 7, 6], 8) == ([8, 7, 6], [10, 9])", "assert split_by_value([1, 3, 5, 7, 9], 6) == ([1, 3, 5], [7, 9])", "assert split_by_value([2, 4, 6, 8, 10], 7) == ([2, 4, 6], [8, 10])", "assert split_by_value([-1, -2, -3, 0, 1, 2, 3], 0) == ([-1, -2, -3, 0], [1, 2, 3])", "assert split_by_value([100, 200, 300, 400], 250) == ([100, 200], [300, 400])", "assert split_by_value([1], 1) == ([1], [])", "assert split_by_value([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4], [5])"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements up to a given index.", "code": "def split_by_index(list1, index):\n    return list1[:index+1], list1[index+1:]", "task_id": "262_5cd22e37-7538-4664-9fe6-0091170df632", "test_setup_code": "", "test_list": ["assert split_by_index([1, 2, 3, 4, 5], 2) == ([1, 2, 3], [4, 5])", "assert split_by_index([1, 2, 3, 4, 5], 0) == ([1], [2, 3, 4, 5])", "assert split_by_index([1, 2, 3, 4, 5], 4) == ([1, 2, 3, 4, 5], [])", "assert split_by_index([1, 2, 3, 4, 5], -1) == ([], [1, 2, 3, 4, 5])", "assert split_by_index([], 0) == ([], [])", "assert split_by_index([1], 0) == ([1], [])", "assert split_by_index([1, 2], 1) == ([1, 2], [])", "assert split_by_index([1, 2, 3], 3) == ([1, 2, 3], [])", "assert split_by_index([1, 2, 3, 4, 5], 3) == ([1, 2, 3, 4], [5])", "assert split_by_index(['a', 'b', 'c', 'd'], 1) == (['a', 'b'], ['c', 'd'])", "assert split_by_index(['a', 'b', 'c', 'd'], 0) == (['a'], ['b', 'c', 'd'])", "assert split_by_index(['a', 'b', 'c', 'd'], 3) == (['a', 'b', 'c', 'd'], [])", "assert split_by_index([1, 'a', 2, 'b'], 2) == ([1, 'a', 2], ['b'])", "assert split_by_index([1, 2, 3, 4, 5], 5) == ([1, 2, 3, 4, 5], [])", "assert split_by_index([1, 2, 3, 4, 5], -2) == ([], [1, 2, 3, 4, 5])"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all even numbers and the second part contains all odd numbers.", "code": "def split_by_even_odd(list1):\n    evens = [x for x in list1 if x % 2 == 0]\n    odds = [x for x in list1 if x % 2 != 0]\n    return evens, odds", "task_id": "262_63402b7c-c500-4d9f-b6e5-e4dcd19fe0a5", "test_setup_code": "", "test_list": ["assert split_by_even_odd([1, 2, 3, 4, 5, 6]) == ([2, 4, 6], [1, 3, 5])", "assert split_by_even_odd([10, 21, 32, 43, 54]) == ([10, 32, 54], [21, 43])", "assert split_by_even_odd([]) == ([], [])", "assert split_by_even_odd([7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == ([8, 10, 12, 14, 16], [7, 9, 11, 13, 15])"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all non-negative numbers and the second part contains all negative numbers.", "code": "def split_by_sign(list1):\n    non_negatives = [x for x in list1 if x >= 0]\n    negatives = [x for x in list1 if x < 0]\n    return non_negatives, negatives", "task_id": "262_559d5169-c676-4f12-b2d5-13cc18e87ba6", "test_setup_code": "", "test_list": ["assert split_by_sign([1, -1, 2, -2, 3, -3]) == ([1, 2, 3], [-1, -2, -3])", "assert split_by_sign([0, -1, -2, -3, 4, 5]) == ([0, 4, 5], [-1, -2, -3])", "assert split_by_sign([-1, -2, -3, -4]) == ([], [-1, -2, -3, -4])", "assert split_by_sign([1, 2, 3, 4]) == ([1, 2, 3, 4], [])", "assert split_by_sign([0, 0, 0, -1, -1, -1]) == ([0, 0, 0], [-1, -1, -1])", "assert split_by_sign([]) == ([], [])", "assert split_by_sign([0]) == ([0], [])", "assert split_by_sign([-1]) == ([], [-1])", "assert split_by_sign([100, -100, 0, -50, 50]) == ([100, 0, 50], [-100, -50])", "assert split_by_sign([1, -1, 1, -1, 1, -1]) == ([1, 1, 1], [-1, -1, -1])", "assert split_by_sign([1, -1, 0, -1, 1, 0]) == ([1, 0, 1, 0], [-1, -1])", "assert split_by_sign([0, 0, 0, 0, 0]) == ([0, 0, 0, 0, 0], [])", "assert split_by_sign([-1, -1, -1, -1, -1]) == ([], [-1, -1, -1, -1, -1])", "assert split_by_sign([1, 1, 1, 1, 1]) == ([1, 1, 1, 1, 1], [])", "assert split_by_sign([0, -1, 1, -2, 2, -3, 3]) == ([0, 1, 2, 3], [-1, -2, -3])"], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings of length less than or equal to a given length.", "code": "def split_by_length(strings, length):\n    short_strings = [s for s in strings if len(s) <= length]\n    long_strings = [s for s in strings if len(s) > length]\n    return short_strings, long_strings", "task_id": "262_e293f699-7e51-4e58-af71-26fbf6bb6282", "test_setup_code": "", "test_list": ["assert split_by_length(['apple', 'banana', 'cherry', 'date'], 5) == (['apple', 'date'], ['banana', 'cherry'])", "assert split_by_length(['a', 'bb', 'ccc', 'dddd', 'eeeee'], 3) == (['a', 'bb', 'ccc'], ['dddd', 'eeeee'])", "assert split_by_length(['short', 'tiny', 'minuscule', 'small'], 4) == (['tiny'], ['short', 'minuscule', 'small'])", "assert split_by_length(['one', 'two', 'three', 'four'], 3) == (['one', 'two'], ['three', 'four'])", "assert split_by_length(['', 'a', 'ab', 'abc', 'abcd'], 2) == (['', 'a', 'ab'], ['abc', 'abcd'])", "assert split_by_length(['longword', 'short', 'tiny'], 6) == (['short', 'tiny'], ['longword'])", "assert split_by_length(['equal', 'length', 'words'], 5) == (['equal'], ['length', 'words'])", "assert split_by_length(['same', 'length', 'test'], 4) == (['same', 'test'], ['length'])", "assert split_by_length(['', '', '', ''], 0) == (['', '', '', ''], [])", "assert split_by_length(['one', 'two', 'three', 'four'], 0) == ([], ['one', 'two', 'three', 'four'])", "assert split_by_length(['a', 'b', 'c', 'd'], 1) == (['a', 'b', 'c', 'd'], [])", "assert split_by_length(['abcd', 'efgh', 'ijkl', 'mnop'], 4) == (['abcd', 'efgh', 'ijkl', 'mnop'], [])", "assert split_by_length(['apple', 'banana', 'cherry', 'date'], 6) == (['apple', 'banana', 'cherry', 'date'], [])", "assert split_by_length(['apple', 'banana', 'cherry', 'date'], 0) == ([], ['apple', 'banana', 'cherry', 'date'])", "assert split_by_length(['apple', 'banana', 'cherry', 'date'], 10) == (['apple', 'banana', 'cherry', 'date'], [])"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements that are multiples of a given number.", "code": "def split_by_multiple_of(list1, n):\n    multiples = [x for x in list1 if x % n == 0]\n    non_multiples = [x for x in list1 if x % n != 0]\n    return multiples, non_multiples", "task_id": "262_5e2c454d-eb40-471c-aeef-d08773d01840", "test_setup_code": "", "test_list": ["assert split_by_multiple_of([1, 2, 3, 4, 5, 6], 2) == ([2, 4, 6], [1, 3, 5])", "assert split_by_multiple_of([10, 15, 20, 25, 30], 5) == ([10, 15, 20, 25, 30], [])", "assert split_by_multiple_of([7, 14, 21, 28], 7) == ([7, 14, 21, 28], [])", "assert split_by_multiple_of([1, 2, 3, 4, 5], 10) == ([], [1, 2, 3, 4, 5])", "assert split_by_multiple_of([], 3) == ([], [])", "assert split_by_multiple_of([0, 1, 2, 3, 4], 1) == ([0, 1, 2, 3, 4], [])", "assert split_by_multiple_of([1, 2, 3, 4, 5], 3) == ([3], [1, 2, 4, 5])", "assert split_by_multiple_of([6, 7, 8, 9, 10], 2) == ([6, 8, 10], [7, 9])", "assert split_by_multiple_of([12, 18, 24, 30], 6) == ([12, 18, 24, 30], [])", "assert split_by_multiple_of([5, 10, 15, 20, 25], 5) == ([5, 10, 15, 20, 25], [])", "assert split_by_multiple_of([1, 3, 5, 7, 9], 2) == ([], [1, 3, 5, 7, 9])", "assert split_by_multiple_of([2, 4, 6, 8, 10], 2) == ([2, 4, 6, 8, 10], [])", "assert split_by_multiple_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == ([3, 6, 9], [1, 2, 4, 5, 7, 8, 10])", "assert split_by_multiple_of([10, 20, 30, 40, 50], 10) == ([10, 20, 30, 40, 50], [])", "assert split_by_multiple_of([11, 22, 33, 44, 55], 11) == ([11, 22, 33, 44, 55], [])"], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all palindrome strings.", "code": "def split_by_palindrome(strings):\n    palindromes = [s for s in strings if s == s[::-1]]\n    non_palindromes = [s for s in strings if s != s[::-1]]\n    return palindromes, non_palindromes", "task_id": "262_5761fc20-e1fc-4ae3-9368-dfbb37836d05", "test_setup_code": "", "test_list": ["assert split_by_palindrome(['racecar', 'apple', 'level', 'banana']) == (['racecar', 'level'], ['apple', 'banana'])", "assert split_by_palindrome(['madam', 'noon', 'civic', 'radar', 'deified']) == (['madam', 'noon', 'civic', 'radar', 'deified'], [])", "assert split_by_palindrome(['hello', 'world', 'python']) == ([], ['hello', 'world', 'python'])", "assert split_by_palindrome(['a', 'bb', 'ccc', 'dddd']) == (['a', 'bb', 'ccc', 'dddd'], [])", "assert split_by_palindrome(['', 'a', 'aa', 'aaa', 'aaaa']) == (['', 'a', 'aa', 'aaa', 'aaaa'], [])", "assert split_by_palindrome(['ab', 'ba', 'abc', 'cba']) == ([], ['ab', 'ba', 'abc', 'cba'])", "assert split_by_palindrome(['rotor', 'motor', 'level', 'lever']) == (['rotor', 'level'], ['motor', 'lever'])", "assert split_by_palindrome(['kayak', 'racecar', 'refer', 'deed']) == (['kayak', 'racecar', 'refer', 'deed'], [])", "assert split_by_palindrome(['palindrome', 'notapalindrome', 'radar', 'stats']) == (['radar', 'stats'], ['palindrome', 'notapalindrome'])", "assert split_by_palindrome(['wow', 'mom', 'dad', 'sis']) == (['wow', 'mom', 'dad', 'sis'], [])", "assert split_by_palindrome(['step', 'on', 'no', 'pets']) == ([], ['step', 'on', 'no', 'pets'])", "assert split_by_palindrome(['']) == ([''], [])", "assert split_by_palindrome(['a']) == (['a'], [])", "assert split_by_palindrome(['ab']) == ([], ['ab'])", "assert split_by_palindrome(['aa', 'bb', 'cc']) == (['aa', 'bb', 'cc'], [])"], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings that start with a vowel.", "code": "def split_by_vowel_start(strings):\n    vowels = 'AEIOUaeiou'\n    vowel_start = [s for s in strings if s[0] in vowels]\n    non_vowel_start = [s for s in strings if s[0] not in vowels]\n    return vowel_start, non_vowel_start", "task_id": "262_2a6d5627-3074-4b3c-b220-20c4d85a5942", "test_setup_code": "", "test_list": ["assert split_by_vowel_start(['apple', 'banana', 'orange', 'grape']) == (['apple', 'orange'], ['banana', 'grape'])", "assert split_by_vowel_start(['Elephant', 'tiger', 'Ostrich', 'lion']) == (['Elephant', 'Ostrich'], ['tiger', 'lion'])", "assert split_by_vowel_start(['umbrella', 'cat', 'dog', 'iguana']) == (['umbrella', 'iguana'], ['cat', 'dog'])", "assert split_by_vowel_start(['Ant', 'bat', 'Eagle', 'fish']) == (['Ant', 'Eagle'], ['bat', 'fish'])", "assert split_by_vowel_start(['Ice', 'cream', 'Egg', 'yolk']) == (['Ice', 'Egg'], ['cream', 'yolk'])", "assert split_by_vowel_start(['owl', 'bat', 'octopus', 'rat']) == (['owl', 'octopus'], ['bat', 'rat'])", "assert split_by_vowel_start(['']) == ([], [''])", "assert split_by_vowel_start(['A', 'b', 'E', 'f']) == (['A', 'E'], ['b', 'f'])", "assert split_by_vowel_start(['apple', 'Apple', 'banana', 'Banana']) == (['apple', 'Apple'], ['banana', 'Banana'])", "assert split_by_vowel_start(['ice', 'Ice', 'cream', 'Cream']) == (['ice', 'Ice'], ['cream', 'Cream'])", "assert split_by_vowel_start(['umbrella', 'Umbrella', 'cat', 'Cat']) == (['umbrella', 'Umbrella'], ['cat', 'Cat'])", "assert split_by_vowel_start(['owl', 'Owl', 'bat', 'Bat']) == (['owl', 'Owl'], ['bat', 'Bat'])", "assert split_by_vowel_start(['iguana', 'Iguana', 'dog', 'Dog']) == (['iguana', 'Iguana'], ['dog', 'Dog'])", "assert split_by_vowel_start(['Ant', 'ant', 'bat', 'Bat']) == (['Ant', 'ant'], ['bat', 'Bat'])", "assert split_by_vowel_start(['']) == ([], [''])"], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings that are in uppercase.", "code": "def split_by_uppercase(strings):\n    uppercase = [s for s in strings if s.isupper()]\n    non_uppercase = [s for s in strings if not s.isupper()]\n    return uppercase, non_uppercase", "task_id": "262_92273911-0ca5-4a43-8295-8810a147d16f", "test_setup_code": "", "test_list": ["assert split_by_uppercase(['HELLO', 'world', 'PYTHON', 'java']) == (['HELLO', 'PYTHON'], ['world', 'java'])", "assert split_by_uppercase(['UPPER', 'lower', 'MIXED', 'Case']) == (['UPPER', 'MIXED'], ['lower', 'Case'])", "assert split_by_uppercase(['ALLUPPER', 'ALLUPPER2', 'alllower']) == (['ALLUPPER', 'ALLUPPER2'], ['alllower'])", "assert split_by_uppercase(['']) == ([], [''])", "assert split_by_uppercase(['UPPERCASE', 'lowercase']) == (['UPPERCASE'], ['lowercase'])", "assert split_by_uppercase(['123', '456', '789']) == ([], ['123', '456', '789'])", "assert split_by_uppercase(['UPPER1', 'lower1', 'UPPER2', 'lower2']) == (['UPPER1', 'UPPER2'], ['lower1', 'lower2'])", "assert split_by_uppercase(['MIXEDcase', 'CASEmixed']) == ([], ['MIXEDcase', 'CASEmixed'])", "assert split_by_uppercase(['UPPERCASE', 'UPPERCASE2', 'UPPERCASE3']) == (['UPPERCASE', 'UPPERCASE2', 'UPPERCASE3'], [])", "assert split_by_uppercase(['lowercase', 'lowercase2', 'lowercase3']) == ([], ['lowercase', 'lowercase2', 'lowercase3'])", "assert split_by_uppercase(['UPPERCASE', 'lowercase', 'MixedCase']) == (['UPPERCASE'], ['lowercase', 'MixedCase'])", "assert split_by_uppercase(['UPPERCASE', 'lowercase', '123', '456']) == (['UPPERCASE'], ['lowercase', '123', '456'])", "assert split_by_uppercase(['UPPERCASE', 'lowercase', 'UPPERCASE2', 'lowercase2', 'MixedCase']) == (['UPPERCASE', 'UPPERCASE2'], ['lowercase', 'lowercase2', 'MixedCase'])", "assert split_by_uppercase(['UPPERCASE', 'lowercase', 'UPPERCASE2', 'lowercase2', 'MixedCase', '']) == (['UPPERCASE', 'UPPERCASE2'], ['lowercase', 'lowercase2', 'MixedCase', ''])", "assert split_by_uppercase([]) == ([], [])"], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements that are divisible by a given divisor.", "code": "def split_by_divisibility(list1, divisor):\n    divisible = [x for x in list1 if x % divisor == 0]\n    non_divisible = [x for x in list1 if x % divisor != 0]\n    return divisible, non_divisible", "task_id": "262_0f9b0b94-b44e-4f1b-be3d-e35cb6d45e4d", "test_setup_code": "", "test_list": ["assert split_by_divisibility([1, 2, 3, 4, 5, 6], 2) == ([2, 4, 6], [1, 3, 5])", "assert split_by_divisibility([10, 15, 20, 25, 30], 5) == ([10, 15, 20, 25, 30], [])", "assert split_by_divisibility([7, 14, 21, 28, 35], 7) == ([7, 14, 21, 28, 35], [])", "assert split_by_divisibility([3, 6, 9, 12, 15], 3) == ([3, 6, 9, 12, 15], [])", "assert split_by_divisibility([1, 2, 3, 4, 5], 10) == ([], [1, 2, 3, 4, 5])", "assert split_by_divisibility([], 1) == ([], [])", "assert split_by_divisibility([0, 1, 2, 3, 4, 5], 1) == ([0, 1, 2, 3, 4, 5], [])", "assert split_by_divisibility([0, 1, 2, 3, 4, 5], 0) == ([], [0, 1, 2, 3, 4, 5])", "assert split_by_divisibility([10, 20, 30, 40, 50], 10) == ([10, 20, 30, 40, 50], [])", "assert split_by_divisibility([8, 16, 24, 32, 40], 8) == ([8, 16, 24, 32, 40], [])", "assert split_by_divisibility([1, 3, 5, 7, 9], 2) == ([], [1, 3, 5, 7, 9])", "assert split_by_divisibility([2, 4, 6, 8, 10], 2) == ([2, 4, 6, 8, 10], [])", "assert split_by_divisibility([1, 2, 3, 4, 5, 6], 3) == ([3, 6], [1, 2, 4, 5])", "assert split_by_divisibility([1, 4, 7, 10, 13], 3) == ([], [1, 4, 7, 10, 13])", "assert split_by_divisibility([1, 1, 1, 1, 1], 1) == ([1, 1, 1, 1, 1], [])"], "challenge_test_list": []}
{"text": "Write a function to merge two lists.", "code": "def merge_lists(l1, l2):\n    return l1 + l2", "task_id": "263_f36ad821-730e-42fc-bb08-e765e939d91e", "test_setup_code": "", "test_list": ["assert merge_lists([], []) == []", "assert merge_lists([1], []) == [1]", "assert merge_lists([], [1]) == [1]", "assert merge_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists([1, 2, 3], [3, 2, 1]) == [1, 2, 3, 3, 2, 1]", "assert merge_lists(['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']", "assert merge_lists([1, 'a'], [2, 'b']) == [1, 'a', 2, 'b']", "assert merge_lists([None], [None]) == [None, None]", "assert merge_lists([1.1, 2.2], [3.3, 4.4]) == [1.1, 2.2, 3.3, 4.4]", "assert merge_lists([True, False], [False, True]) == [True, False, False, True]", "assert merge_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists([], [4, 5, 6]) == [4, 5, 6]", "assert merge_lists(['x', 'y'], ['z']) == ['x', 'y', 'z']", "assert merge_lists([1, [2, 3]], [[4, 5], 6]) == [1, [2, 3], [4, 5], 6]", "assert merge_lists(['a', 1, None], [2, 'b', True]) == ['a', 1, None, 2, 'b', True]"], "challenge_test_list": []}
{"text": "Write a function to merge two sets.", "code": "def merge_sets(s1, s2):\n    return s1.union(s2)", "task_id": "263_9dbffd69-1abc-422b-bfe2-22c8a4e0427b", "test_setup_code": "", "test_list": ["assert merge_sets({1, 2, 3}, {4, 5, 6}) == {1, 2, 3, 4, 5, 6}", "assert merge_sets({1, 2, 3}, {3, 4, 5}) == {1, 2, 3, 4, 5}", "assert merge_sets(set(), {1, 2, 3}) == {1, 2, 3}", "assert merge_sets({1, 2, 3}, set()) == {1, 2, 3}", "assert merge_sets(set(), set()) == set()", "assert merge_sets({-1, -2, -3}, {-4, -5, -6}) == {-1, -2, -3, -4, -5, -6}", "assert merge_sets({1, 2, 3}, {1, 2, 3}) == {1, 2, 3}", "assert merge_sets({1}, {2}) == {1, 2}", "assert merge_sets({1, 2, 3}, {4}) == {1, 2, 3, 4}", "assert merge_sets({1, 2, 3}, {2, 3, 4}) == {1, 2, 3, 4}", "assert merge_sets({1, 2, 3, 4, 5}, {3, 4, 5, 6, 7}) == {1, 2, 3, 4, 5, 6, 7}", "assert merge_sets({'a', 'b', 'c'}, {'d', 'e', 'f'}) == {'a', 'b', 'c', 'd', 'e', 'f'}", "assert merge_sets({'apple', 'banana'}, {'banana', 'cherry'}) == {'apple', 'banana', 'cherry'}", "assert merge_sets({1.1, 2.2, 3.3}, {4.4, 5.5, 6.6}) == {1.1, 2.2, 3.3, 4.4, 5.5, 6.6}", "assert merge_sets({1, 'a'}, {2, 'b'}) == {1, 2, 'a', 'b'}"], "challenge_test_list": []}
{"text": "Write a function to merge two strings.", "code": "def merge_strings(s1, s2):\n    return s1 + s2", "task_id": "263_bfed1d9a-b21f-4eab-a984-dd44e26f19e3", "test_setup_code": "", "test_list": ["assert merge_strings('hello', 'world') == 'helloworld'", "assert merge_strings('', '') == ''", "assert merge_strings('abc', '') == 'abc'", "assert merge_strings('', 'xyz') == 'xyz'", "assert merge_strings('123', '456') == '123456'", "assert merge_strings('foo', 'bar') == 'foobar'", "assert merge_strings('a', 'b') == 'ab'", "assert merge_strings('longstring', 'short') == 'longstringshort'", "assert merge_strings('short', 'longstring') == 'shortlongstring'", "assert merge_strings('same', 'same') == 'samesame'", "assert merge_strings('UPPER', 'lower') == 'UPPERlower'", "assert merge_strings('special!', '@chars') == 'special!@chars'", "assert merge_strings('123', 'abc') == '123abc'", "assert merge_strings(' ', 'space') == ' space'", "assert merge_strings('edge', 'case') == 'edgecase'"], "challenge_test_list": []}
{"text": "Write a function to merge two tuples.", "code": "def merge_tuples(t1, t2):\n    return t1 + t2", "task_id": "263_68cd7584-917e-4278-96ff-f1a4f29afad9", "test_setup_code": "", "test_list": ["assert merge_tuples((1, 2), (3, 4)) == (1, 2, 3, 4)", "assert merge_tuples((), ()) == ()", "assert merge_tuples((1,), (2,)) == (1, 2)", "assert merge_tuples((1, 2, 3), ()) == (1, 2, 3)", "assert merge_tuples((), (4, 5, 6)) == (4, 5, 6)", "assert merge_tuples((1, 2), (3, 4, 5, 6)) == (1, 2, 3, 4, 5, 6)", "assert merge_tuples((1, 2, 3, 4), (5, 6)) == (1, 2, 3, 4, 5, 6)", "assert merge_tuples((1, 2, 3), (3, 2, 1)) == (1, 2, 3, 3, 2, 1)", "assert merge_tuples((1, 'a'), ('b', 2)) == (1, 'a', 'b', 2)", "assert merge_tuples((None,), (None,)) == (None, None)", "assert merge_tuples((1.1, 2.2), (3.3, 4.4)) == (1.1, 2.2, 3.3, 4.4)", "assert merge_tuples((True,), (False,)) == (True, False)", "assert merge_tuples((1, 2, 3), (4, 5, 6, 7, 8, 9)) == (1, 2, 3, 4, 5, 6, 7, 8, 9)", "assert merge_tuples((1, 2, 3, 4, 5), (6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)", "assert merge_tuples(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')"], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, summing values of common keys.", "code": "def merge_dicts_with_sum(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result", "task_id": "263_c64b6b1b-a5a2-4272-a1e8-12713afac051", "test_setup_code": "", "test_list": ["assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 5, 'c': 4}", "assert merge_dicts_with_sum({}, {'a': 1}) == {'a': 1}", "assert merge_dicts_with_sum({'a': 1}, {}) == {'a': 1}", "assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) == {'a': 4, 'b': 6}", "assert merge_dicts_with_sum({'a': 1}, {'a': -1}) == {'a': 0}", "assert merge_dicts_with_sum({'a': 1, 'b': 2, 'c': 3}, {'b': 3, 'c': 4, 'd': 5}) == {'a': 1, 'b': 5, 'c': 7, 'd': 5}", "assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert merge_dicts_with_sum({'a': 0}, {'a': 0}) == {'a': 0}", "assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == {'a': 2, 'b': 4}", "assert merge_dicts_with_sum({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3}) == {'a': 2, 'b': 4, 'c': 6}", "assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'b': 2, 'c': 3}) == {'a': 1, 'b': 4, 'c': 3}", "assert merge_dicts_with_sum({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}", "assert merge_dicts_with_sum({'a': 1, 'b': 2}, {'a': 2, 'b': 3, 'c': 4}) == {'a': 3, 'b': 5, 'c': 4}", "assert merge_dicts_with_sum({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "assert merge_dicts_with_sum({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3, 'd': 4}) == {'a': 2, 'b': 4, 'c': 6, 'd': 4}"], "challenge_test_list": []}
{"text": "Write a function to merge two lists by alternating their elements.", "code": "def merge_lists_alternating(l1, l2):\n    result = []\n    for a, b in zip(l1, l2):\n        result.extend([a, b])\n    result.extend(l1[len(l2):])\n    result.extend(l2[len(l1):])\n    return result", "task_id": "263_7d61ec48-0391-4c9a-a4a6-5a0108bc1da7", "test_setup_code": "", "test_list": ["assert merge_lists_alternating([1, 2, 3], [4, 5, 6]) == [1, 4, 2, 5, 3, 6]", "assert merge_lists_alternating([1], [2, 3, 4]) == [1, 2, 3, 4]", "assert merge_lists_alternating([1, 2, 3], [4]) == [1, 4, 2, 3]", "assert merge_lists_alternating([], [1, 2, 3]) == [1, 2, 3]", "assert merge_lists_alternating([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists_alternating([], []) == []", "assert merge_lists_alternating([1, 2], [3, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]", "assert merge_lists_alternating([1, 2, 3, 4], [5, 6]) == [1, 5, 2, 6, 3, 4]", "assert merge_lists_alternating(['a', 'b', 'c'], ['d', 'e', 'f']) == ['a', 'd', 'b', 'e', 'c', 'f']", "assert merge_lists_alternating(['a'], ['b', 'c', 'd']) == ['a', 'b', 'c', 'd']", "assert merge_lists_alternating(['a', 'b', 'c'], ['d']) == ['a', 'd', 'b', 'c']", "assert merge_lists_alternating([1, 2, 3], [4, 5, 6, 7, 8]) == [1, 4, 2, 5, 3, 6, 7, 8]", "assert merge_lists_alternating([1, 2, 3, 4, 5], [6, 7]) == [1, 6, 2, 7, 3, 4, 5]", "assert merge_lists_alternating([1.1, 2.2, 3.3], [4.4, 5.5, 6.6]) == [1.1, 4.4, 2.2, 5.5, 3.3, 6.6]", "assert merge_lists_alternating([True, False], [False, True]) == [True, False, False, True]"], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, combining values of common keys into lists.", "code": "def merge_dicts_with_list_values(d1, d2):\n    result = {key: [value] for key, value in d1.items()}\n    for key, value in d2.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result", "task_id": "263_6cc20cd2-f83d-46fc-82c5-d1d02e58f98f", "test_setup_code": "", "test_list": ["assert merge_dicts_with_list_values({'a': 1}, {'a': 2}) == {'a': [1, 2]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': [1], 'b': [2, 3], 'c': [4]}", "assert merge_dicts_with_list_values({}, {'a': 1}) == {'a': [1]}", "assert merge_dicts_with_list_values({'a': 1}, {}) == {'a': [1]}", "assert merge_dicts_with_list_values({}, {}) == {}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'a': 3, 'b': 4}) == {'a': [1, 3], 'b': [2, 4]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'c': 3, 'd': 4}) == {'a': [1], 'b': [2], 'c': [3], 'd': [4]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'a': 1, 'b': 2}) == {'a': [1, 1], 'b': [2, 2]}", "assert merge_dicts_with_list_values({'a': 1}, {'a': 1, 'b': 2}) == {'a': [1, 1], 'b': [2]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5, 'c': 6}) == {'a': [1, 4], 'b': [2, 5], 'c': [3, 6]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'c': 3, 'd': 4, 'e': 5}) == {'a': [1], 'b': [2], 'c': [3], 'd': [4], 'e': [5]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}) == {'a': [1], 'b': [2], 'c': [3], 'd': [4], 'e': [5], 'f': [6]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == {'a': [1, 3], 'b': [2], 'c': [4]}", "assert merge_dicts_with_list_values({'a': 1, 'b': 2, 'c': 3}, {'a': 4, 'b': 5}) == {'a': [1, 4], 'b': [2, 5], 'c': [3]}", "assert merge_dicts_with_list_values({'a': 1}, {'b': 2}) == {'a': [1], 'b': [2]}"], "challenge_test_list": []}
{"text": "Write a function to merge two lists and remove duplicates.", "code": "def merge_lists_remove_duplicates(l1, l2):\n    return list(set(l1 + l2))", "task_id": "263_5471a520-2c2c-4b13-b9e7-3805b815f5dd", "test_setup_code": "", "test_list": ["assert merge_lists_remove_duplicates([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 4, 5]", "assert merge_lists_remove_duplicates([], []) == []", "assert merge_lists_remove_duplicates([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists_remove_duplicates([], [4, 5, 6]) == [4, 5, 6]", "assert merge_lists_remove_duplicates([1, 1, 1], [1, 1, 1]) == [1]", "assert merge_lists_remove_duplicates([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists_remove_duplicates([1, 2, 3], [2, 3, 4]) == [1, 2, 3, 4]", "assert merge_lists_remove_duplicates([1, 2, 3, 4], [2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert merge_lists_remove_duplicates([1], [1]) == [1]", "assert merge_lists_remove_duplicates([1, 2, 3], [1, 2, 3]) == [1, 2, 3]", "assert merge_lists_remove_duplicates([1, 2, 3], [3, 2, 1]) == [1, 2, 3]", "assert merge_lists_remove_duplicates([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists_remove_duplicates([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert merge_lists_remove_duplicates([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert merge_lists_remove_duplicates([1, 2, 3, 4, 5], [6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, keeping the maximum value for common keys.", "code": "def merge_dicts_with_max_values(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = max(result[key], value)\n        else:\n            result[key] = value\n    return result", "task_id": "263_354e9901-ab9d-4499-8461-e6887820a439", "test_setup_code": "", "test_list": ["assert merge_dicts_with_max_values({}, {}) == {}", "assert merge_dicts_with_max_values({'a': 1}, {}) == {'a': 1}", "assert merge_dicts_with_max_values({}, {'b': 2}) == {'b': 2}", "assert merge_dicts_with_max_values({'a': 1}, {'b': 2}) == {'a': 1, 'b': 2}", "assert merge_dicts_with_max_values({'a': 1, 'b': 2}, {'a': 3, 'c': 4}) == {'a': 3, 'b': 2, 'c': 4}", "assert merge_dicts_with_max_values({'a': 5, 'b': 2}, {'a': 3, 'c': 4}) == {'a': 5, 'b': 2, 'c': 4}", "assert merge_dicts_with_max_values({'a': 1, 'b': 2, 'c': 3}, {'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}", "assert merge_dicts_with_max_values({'a': -1, 'b': -2}, {'a': -3, 'c': -4}) == {'a': -1, 'b': -2, 'c': -4}", "assert merge_dicts_with_max_values({'a': 0}, {'a': 0}) == {'a': 0}", "assert merge_dicts_with_max_values({'a': 1, 'b': 2, 'c': 3}, {'d': 4, 'e': 5, 'f': 6}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}", "assert merge_dicts_with_max_values({'x': 10, 'y': 20}, {'x': 5, 'y': 25}) == {'x': 10, 'y': 25}", "assert merge_dicts_with_max_values({'a': 1.5, 'b': 2.5}, {'a': 1.7, 'c': 3.5}) == {'a': 1.7, 'b': 2.5, 'c': 3.5}", "assert merge_dicts_with_max_values({'a': 'apple', 'b': 'banana'}, {'a': 'avocado', 'c': 'cherry'}) == {'a': 'avocado', 'b': 'banana', 'c': 'cherry'}", "assert merge_dicts_with_max_values({'a': True, 'b': False}, {'a': False, 'c': True}) == {'a': True, 'b': False, 'c': True}", "assert merge_dicts_with_max_values({'a': [1, 2], 'b': [3, 4]}, {'a': [5, 6], 'c': [7, 8]}) == {'a': [5, 6], 'b': [3, 4], 'c': [7, 8]}"], "challenge_test_list": []}
{"text": "Write a function to merge two lists and return a sorted list.", "code": "def merge_lists_sorted(l1, l2):\n    return sorted(l1 + l2)", "task_id": "263_63353299-15b7-4f75-8615-f0e22bf618ac", "test_setup_code": "", "test_list": ["assert merge_lists_sorted([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists_sorted([], []) == []", "assert merge_lists_sorted([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists_sorted([], [4, 5, 6]) == [4, 5, 6]", "assert merge_lists_sorted([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_lists_sorted([3, 2, 1], [6, 5, 4]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists_sorted([1, 4, 7], [2, 5, 8]) == [1, 2, 4, 5, 7, 8]", "assert merge_lists_sorted([-1, -3, -5], [-2, -4, -6]) == [-6, -5, -4, -3, -2, -1]", "assert merge_lists_sorted([0, 2, 4], [1, 3, 5]) == [0, 1, 2, 3, 4, 5]", "assert merge_lists_sorted([100, 200, 300], [50, 150, 250]) == [50, 100, 150, 200, 250, 300]", "assert merge_lists_sorted([1], [2]) == [1, 2]", "assert merge_lists_sorted([2], [1]) == [1, 2]", "assert merge_lists_sorted([1, 3, 5], [2, 4, 6, 7, 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_lists_sorted([10, 20, 30], [5, 15, 25, 35]) == [5, 10, 15, 20, 25, 30, 35]", "assert merge_lists_sorted([1, 2, 3], [3, 4, 5]) == [1, 2, 3, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to reverse every nth element in a list.", "code": "def reverse_every_nth(S, step):\n    return [S[i:i+step][::-1] for i in range(0, len(S), step)]", "task_id": "265_bf4c50b9-98e7-4471-ae38-3837d1e01a34", "test_setup_code": "", "test_list": ["assert reverse_every_nth([1, 2, 3, 4, 5, 6], 2) == [2, 1, 4, 3, 6, 5]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6], 3) == [3, 2, 1, 6, 5, 4]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 5, 6]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6], 6) == [6, 5, 4, 3, 2, 1]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7], 3) == [3, 2, 1, 6, 5, 4, 7]", "assert reverse_every_nth([], 3) == []", "assert reverse_every_nth([1], 1) == [1]", "assert reverse_every_nth([1, 2, 3, 4, 5], 2) == [2, 1, 4, 3, 5]", "assert reverse_every_nth([1, 2, 3, 4, 5], 5) == [5, 4, 3, 2, 1]", "assert reverse_every_nth([1, 2, 3, 4, 5], 4) == [4, 3, 2, 1, 5]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [3, 2, 1, 6, 5, 4, 9, 8, 7]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [4, 3, 2, 1, 8, 7, 6, 5, 10, 9]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 5) == [5, 4, 3, 2, 1, 10, 9, 8, 7, 6, 11]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 6) == [6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7]", "assert reverse_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 7) == [7, 6, 5, 4, 3, 2, 1, 13, 12, 11, 10, 9, 8]"], "challenge_test_list": []}
{"text": "Write a function to sum every nth element in a list.", "code": "def sum_every_nth(S, step):\n    return [sum(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_a37febff-9c7c-47ac-a0ae-cbdf3887ccd0", "test_setup_code": "", "test_list": ["assert sum_every_nth([1, 2, 3, 4, 5, 6], 2) == [3, 7, 11]", "assert sum_every_nth([1, 2, 3, 4, 5, 6], 3) == [6, 15]", "assert sum_every_nth([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 5, 6]", "assert sum_every_nth([1, 2, 3, 4, 5, 6], 6) == [21]", "assert sum_every_nth([1, 2, 3, 4, 5, 6], 7) == [21]", "assert sum_every_nth([], 3) == []", "assert sum_every_nth([1], 1) == [1]", "assert sum_every_nth([1, 2, 3], 2) == [3, 3]", "assert sum_every_nth([1, 2, 3, 4, 5], 2) == [3, 7, 5]", "assert sum_every_nth([5, 10, 15, 20, 25, 30], 3) == [30, 75]", "assert sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [10, 26, 9]", "assert sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [15, 40]", "assert sum_every_nth([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 2) == [30, 70, 110, 150, 190]", "assert sum_every_nth([1, -1, 1, -1, 1, -1], 2) == [0, 0, 0]", "assert sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4) == [10, 26, 42]"], "challenge_test_list": []}
{"text": "Write a function to multiply every nth element in a list.", "code": "def multiply_every_nth(S, step):\n    from functools import reduce\n    return [reduce(lambda x, y: x * y, S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_03d9e5dd-2b54-4ccc-922d-3b534cae79e4", "test_setup_code": "", "test_list": ["assert multiply_every_nth([1, 2, 3, 4, 5, 6], 2) == [2, 12, 30]", "assert multiply_every_nth([1, 2, 3, 4, 5, 6], 3) == [6, 120]", "assert multiply_every_nth([1, 2, 3, 4, 5], 2) == [2, 12, 5]", "assert multiply_every_nth([10, 20, 30, 40, 50], 1) == [10, 20, 30, 40, 50]", "assert multiply_every_nth([2, 3, 4], 3) == [24]", "assert multiply_every_nth([], 2) == []", "assert multiply_every_nth([5], 1) == [5]", "assert multiply_every_nth([5], 2) == [5]", "assert multiply_every_nth([1, 2, 3, 4], 4) == [24]", "assert multiply_every_nth([1, 2, 3, 4, 5], 5) == [120]", "assert multiply_every_nth([1, 2, 3, 4, 5, 6], 6) == [720]", "assert multiply_every_nth([1, 2, 3, 4, 5, 6, 7], 3) == [6, 120, 7]", "assert multiply_every_nth([0, 1, 2, 3, 4, 5], 2) == [0, 6, 20]", "assert multiply_every_nth([-1, 2, -3, 4], 2) == [-2, -12]", "assert multiply_every_nth([10, 10, 10, 10], 2) == [100, 100]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of every nth element in a list.", "code": "def max_every_nth(S, step):\n    return [max(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_49fd08bf-fa75-4457-93af-662ef3370429", "test_setup_code": "", "test_list": ["assert max_every_nth([1, 2, 3, 4, 5, 6], 2) == [2, 4, 6]", "assert max_every_nth([1, 2, 3, 4, 5, 6], 3) == [3, 6]", "assert max_every_nth([1, 2, 3, 4, 5, 6], 1) == [1, 2, 3, 4, 5, 6]", "assert max_every_nth([6, 5, 4, 3, 2, 1], 2) == [6, 4, 2]", "assert max_every_nth([6, 5, 4, 3, 2, 1], 3) == [6, 3]", "assert max_every_nth([1, 3, 5, 7, 9], 2) == [3, 7]", "assert max_every_nth([1, 3, 5, 7, 9], 3) == [5, 9]", "assert max_every_nth([1, 3, 5, 7, 9], 5) == [9]", "assert max_every_nth([1], 1) == [1]", "assert max_every_nth([], 1) == []", "assert max_every_nth([1, 2, 3, 4, 5], 10) == [5]", "assert max_every_nth([1, 2, 3, 4, 5], 5) == [5]", "assert max_every_nth([1, 2, 3, 4, 5], 4) == [4, 5]", "assert max_every_nth([5, 4, 3, 2, 1], 2) == [5, 3, 1]", "assert max_every_nth([5, 4, 3, 2, 1], 3) == [5, 2]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of every nth element in a list.", "code": "def min_every_nth(S, step):\n    return [min(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_c1831ffd-4771-42c9-b0c3-ea7b59670d3d", "test_setup_code": "", "test_list": ["assert min_every_nth([1, 3, 5, 7, 9, 2, 4, 6, 8, 0], 2) == [1, 5, 2, 6, 0]", "assert min_every_nth([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 3) == [10, 40, 70, 100]", "assert min_every_nth([5, 4, 3, 2, 1], 1) == [5, 4, 3, 2, 1]", "assert min_every_nth([1, 2, 3, 4, 5], 10) == [1]"], "challenge_test_list": []}
{"text": "Write a function to find the average of every nth element in a list.", "code": "def avg_every_nth(S, step):\n    return [sum(S[i:i+step])/len(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_949a6467-efa4-4853-bf11-235894ee529b", "test_setup_code": "", "test_list": ["assert avg_every_nth([1, 2, 3, 4, 5, 6], 2) == [1.5, 3.5, 5.5]", "assert avg_every_nth([1, 2, 3, 4, 5, 6], 3) == [2.0, 5.0]", "assert avg_every_nth([1, 2, 3, 4, 5, 6], 1) == [1.0, 2.0, 3.0, 4.0, 5.0, 6.0]", "assert avg_every_nth([1, 2, 3, 4, 5, 6], 6) == [3.5]", "assert avg_every_nth([1, 2, 3, 4, 5, 6], 7) == [3.5]", "assert avg_every_nth([10, 20, 30, 40, 50, 60], 2) == [15.0, 35.0, 55.0]", "assert avg_every_nth([10, 20, 30, 40, 50, 60], 3) == [20.0, 50.0]", "assert avg_every_nth([1], 1) == [1.0]", "assert avg_every_nth([1, 2, 3], 4) == [2.0]", "assert avg_every_nth([], 1) == []", "assert avg_every_nth([1, 2, 3, 4, 5], 2) == [1.5, 3.5, 5.0]", "assert avg_every_nth([1, 2, 3, 4, 5], 5) == [3.0]", "assert avg_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [2.0, 5.0, 8.0, 10.0]", "assert avg_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [2.5, 6.5, 9.5]", "assert avg_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [5.5]"], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in every nth segment of a list.", "code": "def count_every_nth(S, step):\n    return [len(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_d2649cbe-059e-42d9-8d07-3e41f11581d7", "test_setup_code": "", "test_list": ["assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [3, 3, 3]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [3, 3, 3, 1]", "assert count_every_nth([1, 2, 3, 4, 5], 2) == [2, 2, 1]", "assert count_every_nth([1, 2, 3, 4, 5], 1) == [1, 1, 1, 1, 1]", "assert count_every_nth([1, 2, 3, 4, 5], 5) == [5]", "assert count_every_nth([], 3) == []", "assert count_every_nth([1, 2, 3], 4) == [3]", "assert count_every_nth([1], 1) == [1]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 4) == [4, 4, 4]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 4) == [4, 4, 3]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 2) == [2, 2, 2, 2, 2, 1]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 6) == [6, 5]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 5) == [5, 5, 5]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 7) == [7, 7]", "assert count_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 10) == [10, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of every nth element in a list.", "code": "def sum_of_squares_every_nth(S, step):\n    return [sum(x**2 for x in S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_174b2f0d-15c7-4513-a8c6-e32523b27224", "test_setup_code": "", "test_list": ["assert sum_of_squares_every_nth([1, 2, 3, 4, 5, 6], 2) == [1+4, 9+16, 25+36]", "assert sum_of_squares_every_nth([1, 2, 3, 4, 5], 1) == [1, 4, 9, 16, 25]", "assert sum_of_squares_every_nth([1, 2, 3, 4, 5], 3) == [1+4+9, 16+25]", "assert sum_of_squares_every_nth([1, 2, 3, 4, 5], 5) == [1+4+9+16+25]", "assert sum_of_squares_every_nth([1, 2, 3, 4, 5], 6) == [1+4+9+16+25]", "assert sum_of_squares_every_nth([1, 2, 3], 2) == [1+4, 9]", "assert sum_of_squares_every_nth([1, 2, 3], 1) == [1, 4, 9]", "assert sum_of_squares_every_nth([1, 2, 3], 3) == [1+4+9]", "assert sum_of_squares_every_nth([], 1) == []", "assert sum_of_squares_every_nth([], 3) == []", "assert sum_of_squares_every_nth([1], 1) == [1]", "assert sum_of_squares_every_nth([1], 2) == [1]", "assert sum_of_squares_every_nth([1, -2, 3, -4, 5], 2) == [1+4, 9+16, 25]", "assert sum_of_squares_every_nth([1, -2, 3, -4, 5], 3) == [1+4+9, 16+25]", "assert sum_of_squares_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9], 4) == [1+4+9+16, 25+36+49+64, 81]"], "challenge_test_list": []}
{"text": "Write a function to concatenate every nth element in a list of strings.", "code": "def concatenate_every_nth(S, step):\n    return [''.join(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_21948780-6818-439a-bf47-6c189eff9cf3", "test_setup_code": "", "test_list": ["assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f'], 2) == ['ab', 'cd', 'ef']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f'], 3) == ['abc', 'def']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f'], 1) == ['a', 'b', 'c', 'd', 'e', 'f']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f'], 4) == ['abcd', 'ef']", "assert concatenate_every_nth(['a', 'b', 'c'], 2) == ['ab', 'c']", "assert concatenate_every_nth(['a', 'b', 'c'], 3) == ['abc']", "assert concatenate_every_nth(['a', 'b', 'c'], 4) == ['abc']", "assert concatenate_every_nth([], 2) == []", "assert concatenate_every_nth(['a'], 1) == ['a']", "assert concatenate_every_nth(['a'], 2) == ['a']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 3) == ['abc', 'def', 'ghi']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 5) == ['abcde', 'fghi']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 9) == ['abcdefghi']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'], 10) == ['abcdefghi']", "assert concatenate_every_nth(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'], 3) == ['abc', 'def', 'ghi', 'j']"], "challenge_test_list": []}
{"text": "Write a function to find the alternating sum of every nth element in a list.", "code": "def alternating_sum_every_nth(S, step):\n    return [sum(S[i:i+step][::2]) - sum(S[i:i+step][1::2]) for i in range(0, len(S), step)]", "task_id": "265_cd603192-fdcb-4d05-8d38-f2aa58ffd63f", "test_setup_code": "", "test_list": ["assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 2, 3, 4, 5]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [2, 5, 8, 10]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == [2, 6, 10]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [3, 8]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == [5]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == [5]", "assert alternating_sum_every_nth([1, -1, 1, -1, 1, -1, 1, -1, 1, -1], 2) == [2, -2, 2, -2, 2]", "assert alternating_sum_every_nth([1, -1, 1, -1, 1, -1, 1, -1, 1, -1], 3) == [3, -3, 3, -1]", "assert alternating_sum_every_nth([1, -1, 1, -1, 1, -1, 1, -1, 1, -1], 4) == [4, -4, 2]", "assert alternating_sum_every_nth([1, -1, 1, -1, 1, -1, 1, -1, 1, -1], 5) == [5, -5]", "assert alternating_sum_every_nth([], 3) == []", "assert alternating_sum_every_nth([1], 1) == [1]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5], 2) == [1, 2, 3]", "assert alternating_sum_every_nth([1, 2, 3, 4, 5], 3) == [2, 5]"], "challenge_test_list": []}
{"text": "Write a function to convert a character to its ASCII value.", "code": "def char_to_ascii(c: str) -> int:\n    return ord(c)", "task_id": "269_02d33976-a310-42d1-9c3c-30977cb86f46", "test_setup_code": "", "test_list": ["assert char_to_ascii('A') == 65", "assert char_to_ascii('a') == 97", "assert char_to_ascii('0') == 48", "assert char_to_ascii(' ') == 32", "assert char_to_ascii('!') == 33", "assert char_to_ascii('~') == 126", "assert char_to_ascii('Z') == 90", "assert char_to_ascii('z') == 122", "assert char_to_ascii('@') == 64", "assert char_to_ascii('#') == 35", "assert char_to_ascii('[') == 91", "assert char_to_ascii(']') == 93", "assert char_to_ascii('{') == 123", "assert char_to_ascii('}') == 125", "assert char_to_ascii('\n') == 10"], "challenge_test_list": []}
{"text": "Write a function to convert an ASCII value to its corresponding character.", "code": "def ascii_to_char(n: int) -> str:\n    return chr(n)", "task_id": "269_c642f90b-60da-4dc5-9eaf-6239c9918b63", "test_setup_code": "", "test_list": ["assert ascii_to_char(65) == 'A'", "assert ascii_to_char(97) == 'a'", "assert ascii_to_char(48) == '0'", "assert ascii_to_char(32) == ' '", "assert ascii_to_char(33) == '!'", "assert ascii_to_char(126) == '~'", "assert ascii_to_char(90) == 'Z'", "assert ascii_to_char(122) == 'z'", "assert ascii_to_char(49) == '1'", "assert ascii_to_char(10) == '\\n'", "assert ascii_to_char(13) == '\\r'", "assert ascii_to_char(9) == '\\t'", "assert ascii_to_char(64) == '@'", "assert ascii_to_char(35) == '#'", "assert ascii_to_char(123) == '{'"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of ASCII values of all characters in a string.", "code": "def sum_ascii_values(s: str) -> int:\n    return sum(ord(c) for c in s)", "task_id": "269_914034b1-653e-4a1a-a570-12aacbae52dc", "test_setup_code": "", "test_list": ["assert sum_ascii_values('') == 0", "assert sum_ascii_values('a') == 97", "assert sum_ascii_values('A') == 65", "assert sum_ascii_values('hello') == 532", "assert sum_ascii_values('HELLO') == 372", "assert sum_ascii_values('Hello, World!') == 1085", "assert sum_ascii_values('123') == 150", "assert sum_ascii_values(' ') == 32", "assert sum_ascii_values('!@#$%^&*()') == 470", "assert sum_ascii_values('abcdefghijklmnopqrstuvwxyz') == 2847", "assert sum_ascii_values('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == 2015", "assert sum_ascii_values('aA') == 162", "assert sum_ascii_values('\\n\\t') == 21", "assert sum_ascii_values('Python Programming') == 1613", "assert sum_ascii_values('0123456789') == 525"], "challenge_test_list": []}
{"text": "Write a function to convert a character to its hexadecimal ASCII value.", "code": "def char_to_hex(c: str) -> str:\n    return hex(ord(c))", "task_id": "269_5b8573e6-a328-41ab-ba5f-230b7fc64703", "test_setup_code": "", "test_list": ["assert char_to_hex('A') == '0x41'", "assert char_to_hex('a') == '0x61'", "assert char_to_hex('0') == '0x30'", "assert char_to_hex(' ') == '0x20'", "assert char_to_hex('!') == '0x21'", "assert char_to_hex('@') == '0x40'", "assert char_to_hex('~') == '0x7e'", "assert char_to_hex('\\n') == '0xa'", "assert char_to_hex('\\t') == '0x9'", "assert char_to_hex('Z') == '0x5a'", "assert char_to_hex('z') == '0x7a'", "assert char_to_hex('1') == '0x31'", "assert char_to_hex('9') == '0x39'", "assert char_to_hex('%') == '0x25'", "assert char_to_hex('\\\\') == '0x5c'"], "challenge_test_list": []}
{"text": "Write a function to convert a hexadecimal ASCII value to its corresponding character.", "code": "def hex_to_char(h: str) -> str:\n    return chr(int(h, 16))", "task_id": "269_9e84ba31-38b5-4ce0-945d-d706b9a2fc6e", "test_setup_code": "", "test_list": ["assert hex_to_char('41') == 'A'", "assert hex_to_char('7A') == 'z'", "assert hex_to_char('30') == '0'", "assert hex_to_char('20') == ' '"], "challenge_test_list": []}
{"text": "Write a function to check if a character is a printable ASCII character.", "code": "def is_ascii_printable(c: str) -> bool:\n    return 32 <= ord(c) <= 126", "task_id": "269_7dbbfbe1-6f12-499f-8263-e96d3a309aed", "test_setup_code": "", "test_list": ["assert is_ascii_printable('A') == True", "assert is_ascii_printable(' ') == True", "assert is_ascii_printable('~') == True", "assert is_ascii_printable('\n') == False"], "challenge_test_list": []}
{"text": "Write a function to find the difference between the ASCII values of two characters.", "code": "def ascii_difference(c1: str, c2: str) -> int:\n    return abs(ord(c1) - ord(c2))", "task_id": "269_9e09c270-8400-464c-908f-0a3209b635f6", "test_setup_code": "", "test_list": ["assert ascii_difference('a', 'b') == 1", "assert ascii_difference('A', 'a') == 32", "assert ascii_difference('z', 'a') == 25", "assert ascii_difference('a', 'a') == 0", "assert ascii_difference('A', 'Z') == 25", "assert ascii_difference('0', '9') == 9", "assert ascii_difference('!', '@') == 31", "assert ascii_difference(' ', ' ') == 0", "assert ascii_difference('~', '`') == 2", "assert ascii_difference('1', '2') == 1", "assert ascii_difference('a', 'A') == 32", "assert ascii_difference('A', 'a') == 32", "assert ascii_difference('m', 'M') == 32", "assert ascii_difference('p', 'P') == 32", "assert ascii_difference('x', 'X') == 32"], "challenge_test_list": []}
{"text": "Write a function to convert a character to its binary ASCII value.", "code": "def ascii_to_binary(c: str) -> str:\n    return bin(ord(c))[2:]", "task_id": "269_596c842a-6860-41fc-9848-3dd55f234519", "test_setup_code": "", "test_list": ["assert ascii_to_binary('A') == '1000001'", "assert ascii_to_binary('a') == '1100001'", "assert ascii_to_binary('0') == '110000'", "assert ascii_to_binary(' ') == '100000'", "assert ascii_to_binary('!') == '100001'", "assert ascii_to_binary('~') == '1111110'", "assert ascii_to_binary('z') == '1111010'", "assert ascii_to_binary('Z') == '1011010'", "assert ascii_to_binary('9') == '110001'", "assert ascii_to_binary('@') == '1000000'", "assert ascii_to_binary('#') == '100011'", "assert ascii_to_binary('$') == '100100'", "assert ascii_to_binary('%') == '100101'", "assert ascii_to_binary('^') == '1011110'", "assert ascii_to_binary('&') == '100110'"], "challenge_test_list": []}
{"text": "Write a function to convert a binary ASCII value to its corresponding character.", "code": "def binary_to_char(b: str) -> str:\n    return chr(int(b, 2))", "task_id": "269_1b4d5d05-be1c-47e5-a0eb-e68aa8f3bddd", "test_setup_code": "", "test_list": ["assert binary_to_char('01000001') == 'A'", "assert binary_to_char('01100001') == 'a'", "assert binary_to_char('00110001') == '1'", "assert binary_to_char('00110000') == '0'", "assert binary_to_char('00101110') == '.'", "assert binary_to_char('00100001') == '!'", "assert binary_to_char('00100000') == ' '", "assert binary_to_char('01111010') == 'z'", "assert binary_to_char('01011010') == 'Z'", "assert binary_to_char('00101010') == '*'", "assert binary_to_char('01001110') == 'N'", "assert binary_to_char('01101110') == 'n'", "assert binary_to_char('00111111') == '?'", "assert binary_to_char('01001000') == 'H'", "assert binary_to_char('01101000') == 'h'"], "challenge_test_list": []}
{"text": "Write a function to check if a character is an uppercase ASCII letter.", "code": "def is_ascii_uppercase(c: str) -> bool:\n    return 'A' <= c <= 'Z'", "task_id": "269_102ba37c-1da9-401e-8868-ea33361e0c07", "test_setup_code": "", "test_list": ["assert is_ascii_uppercase('A') == True", "assert is_ascii_uppercase('Z') == True", "assert is_ascii_uppercase('M') == True", "assert is_ascii_uppercase('a') == False", "assert is_ascii_uppercase('z') == False", "assert is_ascii_uppercase('m') == False", "assert is_ascii_uppercase('1') == False", "assert is_ascii_uppercase('!') == False", "assert is_ascii_uppercase(' ') == False", "assert is_ascii_uppercase('') == False", "assert is_ascii_uppercase('[') == False", "assert is_ascii_uppercase('`') == False", "assert is_ascii_uppercase('0') == False", "assert is_ascii_uppercase('9') == False", "assert is_ascii_uppercase('G') == True"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side_length: float) -> float:\n    return 4 * side_length", "task_id": "266_8f838d23-0460-48f9-8e67-9d93ad6ba288", "test_setup_code": "", "test_list": ["assert perimeter_square(1) == 4", "assert perimeter_square(0) == 0", "assert perimeter_square(2.5) == 10.0", "assert perimeter_square(-1) == -4", "assert perimeter_square(1000000) == 4000000", "assert perimeter_square(3.14) == 12.56", "assert perimeter_square(0.1) == 0.4", "assert perimeter_square(0.0001) == 0.0004", "assert perimeter_square(50) == 200", "assert perimeter_square(123456.789) == 493827.156", "assert perimeter_square(1e-10) == 4e-10", "assert perimeter_square(1e10) == 4e10", "assert perimeter_square(7) == 28", "assert perimeter_square(9.99) == 39.96", "assert perimeter_square(0.333) == 1.332"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(side_length: float) -> float:\n    return side_length ** 3", "task_id": "266_15b96e74-eac0-4934-ab5d-abd7eabf57d4", "test_setup_code": "", "test_list": ["assert volume_cube(1) == 1", "assert volume_cube(0) == 0", "assert volume_cube(2) == 8", "assert volume_cube(3.5) == 42.875", "assert volume_cube(-1) == -1", "assert volume_cube(10) == 1000", "assert volume_cube(0.5) == 0.125", "assert volume_cube(100) == 1000000", "assert volume_cube(1.1) == 1.331", "assert volume_cube(-2) == -8", "assert volume_cube(2.5) == 15.625", "assert volume_cube(-0.5) == -0.125", "assert volume_cube(0.1) == 0.001", "assert volume_cube(50) == 125000", "assert volume_cube(0.01) == 0.000001"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length: float, width: float) -> float:\n    return length * width", "task_id": "266_205c8877-8ed4-436e-869b-dedb7da97e21", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(10, 0) == 0", "assert area_rectangle(0, 0) == 0", "assert area_rectangle(1, 1) == 1", "assert area_rectangle(3.5, 2) == 7.0", "assert area_rectangle(2, 3.5) == 7.0", "assert area_rectangle(1.5, 4.5) == 6.75", "assert area_rectangle(100, 200) == 20000", "assert area_rectangle(1e-10, 1e10) == 1.0", "assert area_rectangle(1e10, 1e-10) == 1.0", "assert area_rectangle(123456789, 987654321) == 121932631112635269", "assert area_rectangle(0.1, 0.2) == 0.02", "assert area_rectangle(-5, 10) == -50", "assert area_rectangle(5, -10) == -50"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(radius: float) -> float:\n    import math\n    return 2 * math.pi * radius", "task_id": "266_3c323bf6-b1e2-4810-9ab4-93b39dca6d1f", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 6.283185307179586", "assert circumference_circle(0) == 0.0", "assert circumference_circle(2.5) == 15.707963267948966", "assert circumference_circle(100) == 628.3185307179586"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(radius: float) -> float:\n    import math\n    return 4 * math.pi * radius ** 2", "task_id": "266_91b0872c-eac5-4b69-adf3-01a91dd15fd3", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566370614359172", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2.5) == 78.53981633974483", "assert surface_area_sphere(10) == 1256.6370614359173", "assert surface_area_sphere(0.1) == 0.12566370614359174", "assert surface_area_sphere(100) == 125663.70614359173", "assert surface_area_sphere(0.0001) == 1.2566370614359173e-07", "assert surface_area_sphere(3.14159) == 124.02489720223573", "assert surface_area_sphere(1e-10) == 1.2566370614359174e-19", "assert surface_area_sphere(1e10) == 1.2566370614359173e+21", "assert surface_area_sphere(5) == 314.1592653589793", "assert surface_area_sphere(7.5) == 706.8583470577034", "assert surface_area_sphere(0.5) == 3.141592653589793", "assert surface_area_sphere(20) == 5026.548245743669", "assert surface_area_sphere(0.333) == 1.392920065876976"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(radius: float, height: float) -> float:\n    import math\n    return math.pi * radius ** 2 * height", "task_id": "266_34b44912-5009-40fa-88eb-5aa1e366dda7", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.141592653589793", "assert volume_cylinder(0, 10) == 0.0", "assert volume_cylinder(10, 0) == 0.0", "assert volume_cylinder(2.5, 4) == 78.53981633974483", "assert volume_cylinder(3, 3) == 84.82300164692441", "assert volume_cylinder(1, 10) == 31.41592653589793", "assert volume_cylinder(5, 5) == 392.69908169872417", "assert volume_cylinder(0.1, 0.1) == 0.0031415926535897933", "assert volume_cylinder(100, 100) == 3141592.653589793", "assert volume_cylinder(1.5, 2.5) == 17.671458676442587", "assert volume_cylinder(2, 3) == 37.69911184307752", "assert volume_cylinder(7, 1) == 153.93804002589985", "assert volume_cylinder(0.5, 0.5) == 0.39269908169872414", "assert volume_cylinder(10, 10) == 3141.592653589793", "assert volume_cylinder(3.14159, 2.71828) == 84.28379846823243"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "266_2850692f-f30a-4581-89cb-724dc661173d", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 5) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(0, 0) == 0.0", "assert area_triangle(3, 4) == 6.0", "assert area_triangle(7.5, 2.3) == 8.625", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(100, 200) == 10000.0", "assert area_triangle(0.1, 0.2) == 0.01", "assert area_triangle(5, 5) == 12.5", "assert area_triangle(2.5, 4.5) == 5.625", "assert area_triangle(123456, 654321) == 40329252048.0", "assert area_triangle(1e-10, 1e-10) == 5e-21", "assert area_triangle(1e10, 1e10) == 5e19", "assert area_triangle(3.14159, 2.71828) == 4.269860632"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "266_276f548d-c52a-4262-8a2b-13ce4a78c74d", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(10, 10) == 40", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(2.5, 4.5) == 14", "assert perimeter_rectangle(100, 200) == 600", "assert perimeter_rectangle(0.1, 0.1) == 0.4", "assert perimeter_rectangle(1e-5, 1e-5) == 4e-5", "assert perimeter_rectangle(1e5, 1e5) == 4e5", "assert perimeter_rectangle(123.456, 789.012) == 1824.936", "assert perimeter_rectangle(1, 0) == 2", "assert perimeter_rectangle(0, 1) == 2", "assert perimeter_rectangle(1.5, 2.5) == 8", "assert perimeter_rectangle(3.333, 4.444) == 15.554", "assert perimeter_rectangle(9999, 8888) == 37774"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(radius: float, height: float) -> float:\n    import math\n    return (1/3) * math.pi * radius ** 2 * height", "task_id": "266_4f307af2-4b5e-4a4f-9eec-78f94293ceee", "test_setup_code": "", "test_list": ["assert volume_cone(1, 1) == 1.0471975511965976", "assert volume_cone(0, 5) == 0.0", "assert volume_cone(5, 0) == 0.0", "assert volume_cone(3, 7) == 65.97344572538566", "assert volume_cone(2.5, 4.5) == 29.45243112536668", "assert volume_cone(10, 10) == 1047.1975511965977", "assert volume_cone(0.1, 0.1) == 0.0010471975511965976", "assert volume_cone(100, 100) == 1047197.5511965977", "assert volume_cone(1.123, 2.234) == 2.960796999637771", "assert volume_cone(50, 20) == 52359.87755982988", "assert volume_cone(7, 3.5) == 179.59438003021648", "assert volume_cone(0.5, 0.5) == 0.1308996938995747", "assert volume_cone(4, 5.5) == 92.39978392911156", "assert volume_cone(2, 3) == 12.566370614359172", "assert volume_cone(6, 8) == 301.59289474462014"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "def surface_area_cylinder(radius: float, height: float) -> float:\n    import math\n    return 2 * math.pi * radius * (radius + height)", "task_id": "266_b433c277-e235-4983-aa27-66517f2f1624", "test_setup_code": "", "test_list": ["assert surface_area_cylinder(1, 1) == 12.566370614359172", "assert surface_area_cylinder(0, 0) == 0.0", "assert surface_area_cylinder(2.5, 4) == 103.67255756846318", "assert surface_area_cylinder(10, 10) == 1256.6370614359173", "assert surface_area_cylinder(0.5, 1.5) == 15.707963267948966", "assert surface_area_cylinder(3, 7) == 188.49555921538757", "assert surface_area_cylinder(5, 5) == 314.1592653589793", "assert surface_area_cylinder(1, 0) == 6.283185307179586", "assert surface_area_cylinder(0, 1) == 0.0", "assert surface_area_cylinder(2, 2) == 50.26548245743669", "assert surface_area_cylinder(1.1, 2.2) == 22.902210444669432", "assert surface_area_cylinder(4.4, 5.5) == 273.6185098826469", "assert surface_area_cylinder(6.6, 7.7) == 588.048009413971", "assert surface_area_cylinder(8.8, 9.9) == 1042.0325366940738", "assert surface_area_cylinder(10.1, 11.2) == 1350.888380644266"], "challenge_test_list": []}
{"text": "Write a function to find the n'th triangular number.", "code": "def find_triangular_num(n: int) -> int:\n    return n * (n + 1) // 2", "task_id": "268_1bc45bb4-76f0-4491-aedb-3e907d9e119f", "test_setup_code": "", "test_list": ["assert find_triangular_num(1) == 1", "assert find_triangular_num(5) == 15", "assert find_triangular_num(0) == 0", "assert find_triangular_num(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the n'th square number.", "code": "def find_square_num(n: int) -> int:\n    return n * n", "task_id": "268_4ce08a4e-44c3-4168-88a2-fe003cd9da10", "test_setup_code": "", "test_list": ["assert find_square_num(0) == 0", "assert find_square_num(1) == 1", "assert find_square_num(2) == 4", "assert find_square_num(3) == 9", "assert find_square_num(4) == 16", "assert find_square_num(5) == 25", "assert find_square_num(10) == 100", "assert find_square_num(15) == 225", "assert find_square_num(20) == 400", "assert find_square_num(100) == 10000", "assert find_square_num(999) == 998001", "assert find_square_num(1000) == 1000000", "assert find_square_num(-1) == 1", "assert find_square_num(-10) == 100", "assert find_square_num(-100) == 10000"], "challenge_test_list": []}
{"text": "Write a function to find the n'th cube number.", "code": "def find_cube_num(n: int) -> int:\n    return n * n * n", "task_id": "268_0c6f353b-ebac-44da-90d2-c79d66952205", "test_setup_code": "", "test_list": ["assert find_cube_num(0) == 0", "assert find_cube_num(1) == 1", "assert find_cube_num(2) == 8", "assert find_cube_num(3) == 27", "assert find_cube_num(4) == 64", "assert find_cube_num(5) == 125", "assert find_cube_num(10) == 1000", "assert find_cube_num(20) == 8000", "assert find_cube_num(50) == 125000", "assert find_cube_num(100) == 1000000", "assert find_cube_num(-1) == -1", "assert find_cube_num(-2) == -8", "assert find_cube_num(-3) == -27", "assert find_cube_num(7) == 343", "assert find_cube_num(15) == 3375"], "challenge_test_list": []}
{"text": "Write a function to find the n'th tetrahedral number.", "code": "def find_tetrahedral_num(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6", "task_id": "268_c485217e-0a53-4ae8-9e6f-1c585c6efa30", "test_setup_code": "", "test_list": ["assert find_tetrahedral_num(1) == 1", "assert find_tetrahedral_num(2) == 4", "assert find_tetrahedral_num(3) == 10", "assert find_tetrahedral_num(4) == 20", "assert find_tetrahedral_num(5) == 35", "assert find_tetrahedral_num(6) == 56", "assert find_tetrahedral_num(7) == 84", "assert find_tetrahedral_num(8) == 120", "assert find_tetrahedral_num(9) == 165", "assert find_tetrahedral_num(10) == 220", "assert find_tetrahedral_num(0) == 0", "assert find_tetrahedral_num(11) == 286", "assert find_tetrahedral_num(12) == 364", "assert find_tetrahedral_num(15) == 680", "assert find_tetrahedral_num(20) == 1540"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fibonacci number.", "code": "def find_fibonacci_num(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "268_6d780cc1-3455-4052-86b9-407e49758910", "test_setup_code": "", "test_list": ["assert find_fibonacci_num(0) == 0", "assert find_fibonacci_num(1) == 1", "assert find_fibonacci_num(2) == 1", "assert find_fibonacci_num(3) == 2", "assert find_fibonacci_num(4) == 3", "assert find_fibonacci_num(5) == 5", "assert find_fibonacci_num(6) == 8", "assert find_fibonacci_num(7) == 13", "assert find_fibonacci_num(8) == 21", "assert find_fibonacci_num(9) == 34", "assert find_fibonacci_num(10) == 55", "assert find_fibonacci_num(20) == 6765", "assert find_fibonacci_num(30) == 832040", "assert find_fibonacci_num(50) == 12586269025", "assert find_fibonacci_num(100) == 354224848179261915075"], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def find_factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * find_factorial(n - 1)", "task_id": "268_414858dc-5254-4fe8-834e-556707eaa224", "test_setup_code": "", "test_list": ["assert find_factorial(0) == 1", "assert find_factorial(1) == 1", "assert find_factorial(5) == 120", "assert find_factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a function to find the double factorial of a number n.", "code": "def find_double_factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * find_double_factorial(n - 2)", "task_id": "268_a1d9a600-8066-4bb0-9ac2-8cc2978e70d9", "test_setup_code": "", "test_list": ["assert find_double_factorial(0) == 1", "assert find_double_factorial(1) == 1", "assert find_double_factorial(2) == 2", "assert find_double_factorial(3) == 3", "assert find_double_factorial(4) == 8", "assert find_double_factorial(5) == 15", "assert find_double_factorial(6) == 48", "assert find_double_factorial(7) == 105", "assert find_double_factorial(8) == 384", "assert find_double_factorial(9) == 945", "assert find_double_factorial(10) == 3840", "assert find_double_factorial(11) == 10395", "assert find_double_factorial(12) == 46080", "assert find_double_factorial(13) == 135135", "assert find_double_factorial(14) == 645120"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Catalan number.", "code": "def find_catalan_num(n: int) -> int:\n    if n == 0:\n        return 1\n    catalan = 1\n    for i in range(2, n + 1):\n        catalan = catalan * (n + i) // i\n    return catalan", "task_id": "268_4d73d623-dff5-4256-8ad4-349f28cca07a", "test_setup_code": "", "test_list": ["assert find_catalan_num(0) == 1", "assert find_catalan_num(1) == 1", "assert find_catalan_num(2) == 2", "assert find_catalan_num(3) == 5", "assert find_catalan_num(4) == 14", "assert find_catalan_num(5) == 42", "assert find_catalan_num(6) == 132", "assert find_catalan_num(7) == 429", "assert find_catalan_num(8) == 1430", "assert find_catalan_num(9) == 4862", "assert find_catalan_num(10) == 16796", "assert find_catalan_num(11) == 58786", "assert find_catalan_num(12) == 208012", "assert find_catalan_num(13) == 742900", "assert find_catalan_num(14) == 2674440"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Lucas number.", "code": "def find_lucas_num(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "268_93fb95d5-1ca0-4c09-8c37-972d64d38111", "test_setup_code": "", "test_list": ["assert find_lucas_num(0) == 2", "assert find_lucas_num(1) == 1", "assert find_lucas_num(5) == 11", "assert find_lucas_num(10) == 123"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n even natural numbers.", "code": "def sum_of_squares_even(n):\n    return n * (n + 1) * (2 * n + 1) // 3", "task_id": "267_7e2e20d9-e8cf-46e9-9419-75dd2da96cf4", "test_setup_code": "", "test_list": ["assert sum_of_squares_even(1) == 4", "assert sum_of_squares_even(2) == 20", "assert sum_of_squares_even(3) == 56", "assert sum_of_squares_even(4) == 120", "assert sum_of_squares_even(5) == 220", "assert sum_of_squares_even(0) == 0", "assert sum_of_squares_even(10) == 1540", "assert sum_of_squares_even(15) == 4960", "assert sum_of_squares_even(20) == 11480", "assert sum_of_squares_even(25) == 22420", "assert sum_of_squares_even(30) == 38760", "assert sum_of_squares_even(50) == 171700", "assert sum_of_squares_even(100) == 671700", "assert sum_of_squares_even(500) == 16716700", "assert sum_of_squares_even(1000) == 667167000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n odd natural numbers.", "code": "def sum_of_cubes_odd(n):\n    return (n * (2 * n - 1) * (2 * n + 1) * (2 * n - 1)) // 3", "task_id": "267_175546a6-fdec-404d-a8ff-e7348915b096", "test_setup_code": "", "test_list": ["assert sum_of_cubes_odd(1) == 1", "assert sum_of_cubes_odd(2) == 28", "assert sum_of_cubes_odd(3) == 153", "assert sum_of_cubes_odd(4) == 496", "assert sum_of_cubes_odd(5) == 1225", "assert sum_of_cubes_odd(0) == 0", "assert sum_of_cubes_odd(6) == 2604", "assert sum_of_cubes_odd(7) == 4913", "assert sum_of_cubes_odd(8) == 8352", "assert sum_of_cubes_odd(9) == 13365", "assert sum_of_cubes_odd(10) == 20200", "assert sum_of_cubes_odd(15) == 84375", "assert sum_of_cubes_odd(20) == 256000", "assert sum_of_cubes_odd(25) == 625625", "assert sum_of_cubes_odd(30) == 1331000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n even natural numbers.", "code": "def sum_of_cubes_even(n):\n    return (n * (n + 1) * (2 * n + 1) * (n + 1)) // 3", "task_id": "267_a10f3fd8-8ad0-41cc-a1b1-da858f3f6187", "test_setup_code": "", "test_list": ["assert sum_of_cubes_even(0) == 0", "assert sum_of_cubes_even(1) == 8", "assert sum_of_cubes_even(2) == 72", "assert sum_of_cubes_even(3) == 288", "assert sum_of_cubes_even(4) == 800", "assert sum_of_cubes_even(5) == 1870", "assert sum_of_cubes_even(6) == 3888", "assert sum_of_cubes_even(7) == 7524", "assert sum_of_cubes_even(8) == 13600", "assert sum_of_cubes_even(9) == 23472", "assert sum_of_cubes_even(10) == 38720", "assert sum_of_cubes_even(15) == 155760", "assert sum_of_cubes_even(20) == 496800", "assert sum_of_cubes_even(50) == 15625200", "assert sum_of_cubes_even(100) == 126502400"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n prime numbers.", "code": "def sum_of_first_n_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum_primes, count, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            sum_primes += num\n            count += 1\n        num += 1\n    return sum_primes", "task_id": "267_d77afa02-fac1-4d26-a502-590ae5b9bf5f", "test_setup_code": "", "test_list": ["assert sum_of_first_n_primes(0) == 0", "assert sum_of_first_n_primes(1) == 2", "assert sum_of_first_n_primes(2) == 5", "assert sum_of_first_n_primes(3) == 10", "assert sum_of_first_n_primes(4) == 17", "assert sum_of_first_n_primes(5) == 28", "assert sum_of_first_n_primes(6) == 41", "assert sum_of_first_n_primes(10) == 129", "assert sum_of_first_n_primes(20) == 639", "assert sum_of_first_n_primes(50) == 3286", "assert sum_of_first_n_primes(100) == 24133", "assert sum_of_first_n_primes(200) == 42208", "assert sum_of_first_n_primes(500) == 21536", "assert sum_of_first_n_primes(1000) == 3682913", "assert sum_of_first_n_primes(1500) == 12273697"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n prime numbers.", "code": "def sum_of_squares_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum_squares, count, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            sum_squares += num ** 2\n            count += 1\n        num += 1\n    return sum_squares", "task_id": "267_94d8840b-4e32-4429-baf8-2e6fcd6e2335", "test_setup_code": "", "test_list": ["assert sum_of_squares_primes(0) == 0", "assert sum_of_squares_primes(1) == 4", "assert sum_of_squares_primes(2) == 13", "assert sum_of_squares_primes(3) == 29", "assert sum_of_squares_primes(4) == 54", "assert sum_of_squares_primes(5) == 83", "assert sum_of_squares_primes(6) == 139", "assert sum_of_squares_primes(7) == 195", "assert sum_of_squares_primes(8) == 268", "assert sum_of_squares_primes(9) == 365", "assert sum_of_squares_primes(10) == 490", "assert sum_of_squares_primes(15) == 1240", "assert sum_of_squares_primes(20) == 2415", "assert sum_of_squares_primes(25) == 4175", "assert sum_of_squares_primes(30) == 6545"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n Fibonacci numbers.", "code": "def sum_of_squares_fibonacci(n):\n    a, b = 0, 1\n    sum_squares = 0\n    for _ in range(n):\n        sum_squares += a ** 2\n        a, b = b, a + b\n    return sum_squares", "task_id": "267_997e0564-d647-4093-b558-d2abf7a76d26", "test_setup_code": "", "test_list": ["assert sum_of_squares_fibonacci(0) == 0", "assert sum_of_squares_fibonacci(1) == 0", "assert sum_of_squares_fibonacci(2) == 1", "assert sum_of_squares_fibonacci(3) == 1", "assert sum_of_squares_fibonacci(4) == 2", "assert sum_of_squares_fibonacci(5) == 6", "assert sum_of_squares_fibonacci(6) == 15", "assert sum_of_squares_fibonacci(7) == 40", "assert sum_of_squares_fibonacci(8) == 104", "assert sum_of_squares_fibonacci(9) == 273", "assert sum_of_squares_fibonacci(10) == 714", "assert sum_of_squares_fibonacci(15) == 10424", "assert sum_of_squares_fibonacci(20) == 150050", "assert sum_of_squares_fibonacci(25) == 2165870", "assert sum_of_squares_fibonacci(30) == 31221726"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n Fibonacci numbers.", "code": "def sum_of_cubes_fibonacci(n):\n    a, b = 0, 1\n    sum_cubes = 0\n    for _ in range(n):\n        sum_cubes += a ** 3\n        a, b = b, a + b\n    return sum_cubes", "task_id": "267_bf985a62-25b4-4aa3-93c9-7bde04a58b11", "test_setup_code": "", "test_list": ["assert sum_of_cubes_fibonacci(0) == 0", "assert sum_of_cubes_fibonacci(1) == 0", "assert sum_of_cubes_fibonacci(2) == 1", "assert sum_of_cubes_fibonacci(3) == 1", "assert sum_of_cubes_fibonacci(4) == 9", "assert sum_of_cubes_fibonacci(5) == 36", "assert sum_of_cubes_fibonacci(6) == 244", "assert sum_of_cubes_fibonacci(7) == 1109", "assert sum_of_cubes_fibonacci(8) == 8552", "assert sum_of_cubes_fibonacci(9) == 77461", "assert sum_of_cubes_fibonacci(10) == 723149", "assert sum_of_cubes_fibonacci(11) == 7049156", "assert sum_of_cubes_fibonacci(12) == 70278421", "assert sum_of_cubes_fibonacci(13) == 710636250", "assert sum_of_cubes_fibonacci(14) == 7256311336"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n triangular numbers.", "code": "def sum_of_squares_triangular(n):\n    sum_squares = 0\n    for i in range(1, n + 1):\n        T_i = i * (i + 1) // 2\n        sum_squares += T_i ** 2\n    return sum_squares", "task_id": "267_52407b23-8add-45a0-9b79-f72ff9cf55e5", "test_setup_code": "", "test_list": ["assert sum_of_squares_triangular(1) == 1", "assert sum_of_squares_triangular(2) == 5", "assert sum_of_squares_triangular(3) == 14", "assert sum_of_squares_triangular(4) == 30", "assert sum_of_squares_triangular(5) == 55", "assert sum_of_squares_triangular(6) == 91", "assert sum_of_squares_triangular(7) == 140", "assert sum_of_squares_triangular(8) == 204", "assert sum_of_squares_triangular(9) == 285", "assert sum_of_squares_triangular(10) == 385", "assert sum_of_squares_triangular(0) == 0", "assert sum_of_squares_triangular(15) == 1240", "assert sum_of_squares_triangular(20) == 2870", "assert sum_of_squares_triangular(50) == 22100", "assert sum_of_squares_triangular(100) == 338350"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n triangular numbers.", "code": "def sum_of_cubes_triangular(n):\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        T_i = i * (i + 1) // 2\n        sum_cubes += T_i ** 3\n    return sum_cubes", "task_id": "267_85c394e6-6ef1-432e-84de-ea0afd823263", "test_setup_code": "", "test_list": ["assert sum_of_cubes_triangular(1) == 1", "assert sum_of_cubes_triangular(2) == 10", "assert sum_of_cubes_triangular(3) == 100", "assert sum_of_cubes_triangular(4) == 354", "assert sum_of_cubes_triangular(5) == 979", "assert sum_of_cubes_triangular(6) == 2275", "assert sum_of_cubes_triangular(7) == 4684", "assert sum_of_cubes_triangular(8) == 8910", "assert sum_of_cubes_triangular(9) == 15985", "assert sum_of_cubes_triangular(10) == 27170", "assert sum_of_cubes_triangular(0) == 0", "assert sum_of_cubes_triangular(11) == 44411", "assert sum_of_cubes_triangular(12) == 70137", "assert sum_of_cubes_triangular(13) == 108784", "assert sum_of_cubes_triangular(14) == 164694"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n powers of 2.", "code": "def sum_of_squares_powers_of_two(n):\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += (2 ** i) ** 2\n    return sum_squares", "task_id": "267_2399c67b-d703-486b-960e-a444cafc6208", "test_setup_code": "", "test_list": ["assert sum_of_squares_powers_of_two(0) == 0", "assert sum_of_squares_powers_of_two(1) == 1", "assert sum_of_squares_powers_of_two(2) == 5", "assert sum_of_squares_powers_of_two(3) == 21", "assert sum_of_squares_powers_of_two(4) == 85", "assert sum_of_squares_powers_of_two(5) == 341", "assert sum_of_squares_powers_of_two(6) == 1365", "assert sum_of_squares_powers_of_two(7) == 5461", "assert sum_of_squares_powers_of_two(8) == 21845", "assert sum_of_squares_powers_of_two(9) == 87381", "assert sum_of_squares_powers_of_two(10) == 349525", "assert sum_of_squares_powers_of_two(15) == 1145324613", "assert sum_of_squares_powers_of_two(20) == 7340032765", "assert sum_of_squares_powers_of_two(25) == 46976204805", "assert sum_of_squares_powers_of_two(30) == 300647710725"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n odd natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(n):\n        sum += (2*i + 1) ** 2\n    return sum", "task_id": "271_71cfdbe3-6f6d-4594-a2c2-ec81f05ef803", "test_setup_code": "", "test_list": ["assert sum_of_squares(0) == 0", "assert sum_of_squares(1) == 1", "assert sum_of_squares(2) == 10", "assert sum_of_squares(3) == 35", "assert sum_of_squares(4) == 84", "assert sum_of_squares(5) == 165", "assert sum_of_squares(10) == 1330", "assert sum_of_squares(15) == 5275", "assert sum_of_squares(20) == 15400", "assert sum_of_squares(50) == 208250", "assert sum_of_squares(100) == 833250", "assert sum_of_squares(200) == 3333250", "assert sum_of_squares(500) == 208333750", "assert sum_of_squares(1000) == 833333250", "assert sum_of_squares(10000) == 833333332500"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum", "task_id": "271_f7014376-a99f-4af8-a92d-2d2880ef5183", "test_setup_code": "", "test_list": ["assert sum_of_cubes(1) == 1", "assert sum_of_cubes(2) == 9", "assert sum_of_cubes(3) == 36", "assert sum_of_cubes(4) == 100", "assert sum_of_cubes(5) == 225", "assert sum_of_cubes(6) == 441", "assert sum_of_cubes(7) == 784", "assert sum_of_cubes(8) == 1296", "assert sum_of_cubes(9) == 2025", "assert sum_of_cubes(10) == 3025", "assert sum_of_cubes(0) == 0", "assert sum_of_cubes(15) == 14400", "assert sum_of_cubes(20) == 44100", "assert sum_of_cubes(50) == 1625625", "assert sum_of_cubes(100) == 25502500"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fourth power of the first n multiples of 3.", "code": "def sum_of_fourth_powers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (3*i) ** 4\n    return sum", "task_id": "271_d0de88f9-c8f5-48ee-9596-6c4d6680476f", "test_setup_code": "", "test_list": ["assert sum_of_fourth_powers(0) == 0", "assert sum_of_fourth_powers(1) == 81", "assert sum_of_fourth_powers(2) == 1296", "assert sum_of_fourth_powers(3) == 6561", "assert sum_of_fourth_powers(4) == 20736", "assert sum_of_fourth_powers(5) == 51030", "assert sum_of_fourth_powers(6) == 111456", "assert sum_of_fourth_powers(7) == 218295", "assert sum_of_fourth_powers(8) == 396576", "assert sum_of_fourth_powers(9) == 681498", "assert sum_of_fourth_powers(10) == 1116285", "assert sum_of_fourth_powers(15) == 4745520", "assert sum_of_fourth_powers(20) == 12700800", "assert sum_of_fourth_powers(25) == 28343550", "assert sum_of_fourth_powers(30) == 57024000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fifth power of the first n multiples of 5.", "code": "def sum_of_fifth_powers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (5*i) ** 5\n    return sum", "task_id": "271_6abcff96-d1ad-49c9-ba26-e4941d2cd278", "test_setup_code": "", "test_list": ["assert sum_of_fifth_powers(1) == 3125", "assert sum_of_fifth_powers(2) == 3125 + 10**5", "assert sum_of_fifth_powers(3) == 3125 + 10**5 + 15**5", "assert sum_of_fifth_powers(5) == 3125 + 10**5 + 15**5 + 20**5 + 25**5", "assert sum_of_fifth_powers(0) == 0", "assert sum_of_fifth_powers(10) == 9765625", "assert sum_of_fifth_powers(4) == 3125 + 10**5 + 15**5 + 20**5", "assert sum_of_fifth_powers(6) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5", "assert sum_of_fifth_powers(7) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5 + 35**5", "assert sum_of_fifth_powers(8) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5 + 35**5 + 40**5", "assert sum_of_fifth_powers(9) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5 + 35**5 + 40**5 + 45**5", "assert sum_of_fifth_powers(15) == 170859375", "assert sum_of_fifth_powers(20) == 638671875", "assert sum_of_fifth_powers(12) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5 + 35**5 + 40**5 + 45**5 + 50**5 + 55**5 + 60**5", "assert sum_of_fifth_powers(11) == 3125 + 10**5 + 15**5 + 20**5 + 25**5 + 30**5 + 35**5 + 40**5 + 45**5 + 50**5 + 55**5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n prime numbers.", "code": "def sum_of_squares_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num ** 2\n            count += 1\n        num += 1\n    return sum", "task_id": "271_d468004d-ffa7-4e25-a184-61aa6ab96be6", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_primes(0) == 0", "assert sum_of_squares_of_primes(1) == 4", "assert sum_of_squares_of_primes(2) == 13", "assert sum_of_squares_of_primes(3) == 38", "assert sum_of_squares_of_primes(4) == 87", "assert sum_of_squares_of_primes(5) == 174", "assert sum_of_squares_of_primes(6) == 303", "assert sum_of_squares_of_primes(7) == 488", "assert sum_of_squares_of_primes(8) == 749", "assert sum_of_squares_of_primes(9) == 1110", "assert sum_of_squares_of_primes(10) == 1609", "assert sum_of_squares_of_primes(15) == 5353", "assert sum_of_squares_of_primes(20) == 11527", "assert sum_of_squares_of_primes(25) == 20783", "assert sum_of_squares_of_primes(30) == 33583"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n even natural numbers.", "code": "def sum_of_cubes_of_evens(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i) ** 3\n    return sum", "task_id": "271_924adafc-02ac-4cc4-be0e-8fd2f3cf285a", "test_setup_code": "", "test_list": ["assert sum_of_cubes_of_evens(1) == 8", "assert sum_of_cubes_of_evens(2) == 72", "assert sum_of_cubes_of_evens(3) == 288", "assert sum_of_cubes_of_evens(4) == 800", "assert sum_of_cubes_of_evens(5) == 1800", "assert sum_of_cubes_of_evens(0) == 0", "assert sum_of_cubes_of_evens(10) == 44000", "assert sum_of_cubes_of_evens(15) == 216000", "assert sum_of_cubes_of_evens(20) == 640000", "assert sum_of_cubes_of_evens(25) == 1562500", "assert sum_of_cubes_of_evens(50) == 15625000", "assert sum_of_cubes_of_evens(100) == 125000000", "assert sum_of_cubes_of_evens(200) == 1000000000", "assert sum_of_cubes_of_evens(500) == 15625000000", "assert sum_of_cubes_of_evens(1000) == 125000000000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n multiples of 4.", "code": "def sum_of_squares_of_multiples_of_4(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (4*i) ** 2\n    return sum", "task_id": "271_fb8aedfe-9f04-41cd-8c93-c48e4d37f8ac", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_multiples_of_4(0) == 0", "assert sum_of_squares_of_multiples_of_4(1) == 16", "assert sum_of_squares_of_multiples_of_4(2) == 80", "assert sum_of_squares_of_multiples_of_4(3) == 240", "assert sum_of_squares_of_multiples_of_4(4) == 560", "assert sum_of_squares_of_multiples_of_4(5) == 1120", "assert sum_of_squares_of_multiples_of_4(10) == 6160", "assert sum_of_squares_of_multiples_of_4(15) == 20400", "assert sum_of_squares_of_multiples_of_4(20) == 49600", "assert sum_of_squares_of_multiples_of_4(50) == 416000", "assert sum_of_squares_of_multiples_of_4(100) == 3320000", "assert sum_of_squares_of_multiples_of_4(1) == (4*1)**2", "assert sum_of_squares_of_multiples_of_4(2) == (4*1)**2 + (4*2)**2", "assert sum_of_squares_of_multiples_of_4(3) == (4*1)**2 + (4*2)**2 + (4*3)**2", "assert sum_of_squares_of_multiples_of_4(4) == (4*1)**2 + (4*2)**2 + (4*3)**2 + (4*4)**2"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fourth power of the first n odd natural numbers.", "code": "def sum_of_fourth_powers_of_odds(n):\n    sum = 0\n    for i in range(n):\n        sum += (2*i + 1) ** 4\n    return sum", "task_id": "271_24f8f8af-64ab-4238-ad2e-125d1e2e1e58", "test_setup_code": "", "test_list": ["assert sum_of_fourth_powers_of_odds(0) == 0", "assert sum_of_fourth_powers_of_odds(1) == 1", "assert sum_of_fourth_powers_of_odds(2) == 82", "assert sum_of_fourth_powers_of_odds(3) == 1300", "assert sum_of_fourth_powers_of_odds(4) == 10450", "assert sum_of_fourth_powers_of_odds(5) == 55205", "assert sum_of_fourth_powers_of_odds(10) == 2533300", "assert sum_of_fourth_powers_of_odds(15) == 14414425", "assert sum_of_fourth_powers_of_odds(20) == 49280450", "assert sum_of_fourth_powers_of_odds(25) == 128687725", "assert sum_of_fourth_powers_of_odds(30) == 285310300", "assert sum_of_fourth_powers_of_odds(50) == 3906250000", "assert sum_of_fourth_powers_of_odds(100) == 255025000000", "assert sum_of_fourth_powers_of_odds(1) == 1", "assert sum_of_fourth_powers_of_odds(3) == 1300"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fifth power of the first n prime numbers.", "code": "def sum_of_fifth_powers_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num ** 5\n            count += 1\n        num += 1\n    return sum", "task_id": "271_864600ed-b506-47a8-a436-f5471d4098dd", "test_setup_code": "", "test_list": ["assert sum_of_fifth_powers_of_primes(0) == 0", "assert sum_of_fifth_powers_of_primes(1) == 32", "assert sum_of_fifth_powers_of_primes(2) == 275", "assert sum_of_fifth_powers_of_primes(3) == 3412", "assert sum_of_fifth_powers_of_primes(4) == 47493", "assert sum_of_fifth_powers_of_primes(5) == 443793", "assert sum_of_fifth_powers_of_primes(6) == 3455034", "assert sum_of_fifth_powers_of_primes(7) == 25676899", "assert sum_of_fifth_powers_of_primes(8) == 174281032", "assert sum_of_fifth_powers_of_primes(9) == 1125047787", "assert sum_of_fifth_powers_of_primes(10) == 6989609672", "assert sum_of_fifth_powers_of_primes(15) == 141848859612", "assert sum_of_fifth_powers_of_primes(20) == 2076318760082", "assert sum_of_fifth_powers_of_primes(25) == 26916944518432", "assert sum_of_fifth_powers_of_primes(30) == 326983287304672"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n multiples of 7.", "code": "def sum_of_cubes_of_multiples_of_7(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (7*i) ** 3\n    return sum", "task_id": "271_c045aea3-157b-4362-b271-62cc577d0d11", "test_setup_code": "", "test_list": ["assert sum_of_cubes_of_multiples_of_7(1) == 343", "assert sum_of_cubes_of_multiples_of_7(2) == 4095", "assert sum_of_cubes_of_multiples_of_7(3) == 16632", "assert sum_of_cubes_of_multiples_of_7(4) == 46656", "assert sum_of_cubes_of_multiples_of_7(5) == 103823", "assert sum_of_cubes_of_multiples_of_7(0) == 0", "assert sum_of_cubes_of_multiples_of_7(10) == 2053790", "assert sum_of_cubes_of_multiples_of_7(15) == 10612065", "assert sum_of_cubes_of_multiples_of_7(20) == 33614000", "assert sum_of_cubes_of_multiples_of_7(25) == 82354375", "assert sum_of_cubes_of_multiples_of_7(30) == 178506840", "assert sum_of_cubes_of_multiples_of_7(50) == 552500625", "assert sum_of_cubes_of_multiples_of_7(100) == 4096575000", "assert sum_of_cubes_of_multiples_of_7(200) == 32772550000", "assert sum_of_cubes_of_multiples_of_7(500) == 1025003750000"], "challenge_test_list": []}
{"text": "Write a function to perform the first element extraction from a list of tuple records.", "code": "def first_element_extract(test_list):\n  res = [lis[0] for lis in test_list]\n  return res", "task_id": "272_8c233886-a4fb-406c-a1e8-af09f7ab2682", "test_setup_code": "", "test_list": ["assert first_element_extract([(1, 2), (3, 4), (5, 6)]) == [1, 3, 5]", "assert first_element_extract([('a', 'b'), ('c', 'd'), ('e', 'f')]) == ['a', 'c', 'e']", "assert first_element_extract([(1.1, 2.2), (3.3, 4.4), (5.5, 6.6)]) == [1.1, 3.3, 5.5]", "assert first_element_extract([(True, False), (False, True), (True, True)]) == [True, False, True]", "assert first_element_extract([(None, 1), (2, None), (None, None)]) == [None, 2, None]", "assert first_element_extract([(1, 'a'), ('b', 2), (3, 'c')]) == [1, 'b', 3]", "assert first_element_extract([('apple', 'banana'), ('cherry', 'date'), ('fig', 'grape')]) == ['apple', 'cherry', 'fig']", "assert first_element_extract([(1,), (2,), (3,)]) == [1, 2, 3]", "assert first_element_extract([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 4, 7]", "assert first_element_extract([('x', 'y', 'z'), ('a', 'b', 'c'), ('m', 'n', 'o')]) == ['x', 'a', 'm']", "assert first_element_extract([]) == []", "assert first_element_extract([(1, 2), (1, 2), (1, 2)]) == [1, 1, 1]", "assert first_element_extract([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0]", "assert first_element_extract([(1, -1), (-2, 2), (3, -3)]) == [1, -2, 3]", "assert first_element_extract([(1, 2.2), (3.3, 4), (5, 6.6)]) == [1, 3.3, 5]"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of elements in each tuple from a list of tuple records.", "code": "def sum_of_elements(test_list):\n  res = [sum(lis) for lis in test_list]\n  return res", "task_id": "272_f9e4c94f-7069-498e-8372-2ad10c88554f", "test_setup_code": "", "test_list": ["assert sum_of_elements([(1, 2, 3), (4, 5, 6)]) == [6, 15]", "assert sum_of_elements([(0, 0, 0), (0, 0, 0)]) == [0, 0]", "assert sum_of_elements([(1,), (2,), (3,)]) == [1, 2, 3]", "assert sum_of_elements([(-1, -2, -3), (-4, -5, -6)]) == [-6, -15]", "assert sum_of_elements([(100, 200, 300), (400, 500, 600)]) == [600, 1500]", "assert sum_of_elements([(1, 2), (3, 4), (5, 6)]) == [3, 7, 11]", "assert sum_of_elements([(1, 1, 1, 1), (2, 2, 2, 2)]) == [4, 8]", "assert sum_of_elements([(1, -1), (2, -2), (3, -3)]) == [0, 0, 0]", "assert sum_of_elements([(0, 1, 2), (3, 4, 5), (6, 7, 8)]) == [3, 12, 21]", "assert sum_of_elements([(0,), (0,), (0,)]) == [0, 0, 0]", "assert sum_of_elements([(10**6, 10**6), (10**6, 10**6)]) == [2000000, 2000000]", "assert sum_of_elements([(1.5, 2.5), (3.5, 4.5)]) == [4.0, 8.0]", "assert sum_of_elements([(1, 2, 3, 4, 5)]) == [15]", "assert sum_of_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [6, 15, 24]", "assert sum_of_elements([(1, -1, 1, -1), (2, -2, 2, -2)]) == [0, 0]"], "challenge_test_list": []}
{"text": "Write a function to perform the second element extraction from a list of tuple records.", "code": "def second_element_extract(test_list):\n  res = [lis[1] for lis in test_list]\n  return res", "task_id": "272_d317b23a-3329-400e-ae05-1c9a5cf41b43", "test_setup_code": "", "test_list": ["assert second_element_extract([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]", "assert second_element_extract([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]", "assert second_element_extract([(1, 'a'), (2, 'b'), (3, 'c')]) == ['a', 'b', 'c']", "assert second_element_extract([(1, 2.5), (3, 4.5), (5, 6.5)]) == [2.5, 4.5, 6.5]", "assert second_element_extract([('x', 'y'), ('a', 'b'), ('m', 'n')]) == ['y', 'b', 'n']", "assert second_element_extract([(1, [2, 3]), (4, [5, 6]), (7, [8, 9])]) == [[2, 3], [5, 6], [8, 9]]", "assert second_element_extract([(1, {2: 'a'}), (3, {4: 'b'}), (5, {6: 'c'})]) == [{2: 'a'}, {4: 'b'}, {6: 'c'}]", "assert second_element_extract([(1, (2, 3)), (4, (5, 6)), (7, (8, 9))]) == [(2, 3), (5, 6), (8, 9)]", "assert second_element_extract([(1, None), (2, None), (3, None)]) == [None, None, None]", "assert second_element_extract([(1, True), (2, False), (3, True)]) == [True, False, True]", "assert second_element_extract([(1, 2)]) == [2]", "assert second_element_extract([]) == []", "assert second_element_extract([(1, 'a'), (2, 3.5), (3, [4, 5])]) == ['a', 3.5, [4, 5]]", "assert second_element_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [2, 4, 6, 8, 10]", "assert second_element_extract([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12), (13, 14), (15, 16), (17, 18), (19, 20)]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"], "challenge_test_list": []}
{"text": "Write a function to calculate the length of each tuple in a list of tuple records.", "code": "def length_of_tuples(test_list):\n  res = [len(lis) for lis in test_list]\n  return res", "task_id": "272_60836faa-ffa6-41e4-b5e0-536cd9ab0d65", "test_setup_code": "", "test_list": ["assert length_of_tuples([]) == []", "assert length_of_tuples([(1, 2), (3, 4, 5)]) == [2, 3]", "assert length_of_tuples([(1,), (2, 3), (4, 5, 6), (7, 8, 9, 10)]) == [1, 2, 3, 4]", "assert length_of_tuples([(1, 2, 3, 4, 5)]) == [5]", "assert length_of_tuples([(1, 2), (3, 4), (5, 6)]) == [2, 2, 2]", "assert length_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 3, 3]", "assert length_of_tuples([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [4, 4, 4]", "assert length_of_tuples([(1,), (2,), (3,), (4,)]) == [1, 1, 1, 1]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == [10]", "assert length_of_tuples([(1, 2, 3), (4, 5), (6,)]) == [3, 2, 1]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6, 7, 8, 9), (10, 11, 12, 13, 14, 15, 16, 17, 18, 19)]) == [9, 10]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12, 13, 14, 15)]) == [6, 9]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6, 7, 8), (9, 10, 11, 12, 13, 14, 15, 16, 17)]) == [8, 9]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6, 7), (8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18)]) == [7, 11]", "assert length_of_tuples([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)]) == [20]"], "challenge_test_list": []}
{"text": "Write a function to calculate the product of elements in each tuple from a list of tuple records.", "code": "def product_of_elements(test_list):\n  res = [eval('*'.join(map(str, lis))) for lis in test_list]\n  return res", "task_id": "272_fd7089e5-9509-4249-af37-cbafb0db75df", "test_setup_code": "", "test_list": ["assert product_of_elements([(1, 2), (3, 4)]) == [2, 12]", "assert product_of_elements([(0, 1), (2, 3)]) == [0, 6]", "assert product_of_elements([(1, 2, 3), (4, 5, 6)]) == [6, 120]", "assert product_of_elements([(1,), (2,)]) == [1, 2]", "assert product_of_elements([(1, 0, 3), (4, 5, 0)]) == [0, 0]", "assert product_of_elements([(1, 2, 3, 4), (5, 6, 7, 8)]) == [24, 1680]", "assert product_of_elements([(1, -2), (-3, 4)]) == [-2, -12]", "assert product_of_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [6, 120, 504]", "assert product_of_elements([(1, 1, 1), (2, 2, 2)]) == [1, 8]", "assert product_of_elements([(10, 20), (30, 40)]) == [200, 1200]", "assert product_of_elements([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == [120, 30240]", "assert product_of_elements([(1, 2), (3, 4), (5, 6)]) == [2, 12, 30]", "assert product_of_elements([(0, 0), (0, 0)]) == [0, 0]", "assert product_of_elements([(1, 2, 3, 0), (4, 5, 6, 0)]) == [0, 0]", "assert product_of_elements([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == [3628800]"], "challenge_test_list": []}
{"text": "Write a function to reverse each tuple in a list of tuple records.", "code": "def reverse_each_tuple(test_list):\n  res = [lis[::-1] for lis in test_list]\n  return res", "task_id": "272_9d6bd2fa-a464-49a4-ab22-9bc379f49c06", "test_setup_code": "", "test_list": ["assert reverse_each_tuple([(1, 2), (3, 4), (5, 6)]) == [(2, 1), (4, 3), (6, 5)]", "assert reverse_each_tuple([(1, )]) == [(1, )]", "assert reverse_each_tuple([]) == []", "assert reverse_each_tuple([(1, 2, 3), (4, 5, 6)]) == [(3, 2, 1), (6, 5, 4)]", "assert reverse_each_tuple([(1, 2), (1, 2)]) == [(2, 1), (2, 1)]", "assert reverse_each_tuple([(0, 0), (0, 0)]) == [(0, 0), (0, 0)]", "assert reverse_each_tuple([(1, 2, 3, 4), (5, 6, 7, 8)]) == [(4, 3, 2, 1), (8, 7, 6, 5)]", "assert reverse_each_tuple([(1, 2, 3, 4, 5)]) == [(5, 4, 3, 2, 1)]", "assert reverse_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(2, 1), (4, 3), (6, 5), (8, 7)]", "assert reverse_each_tuple([(1, 2), (3, 4, 5), (6, 7, 8, 9)]) == [(2, 1), (5, 4, 3), (9, 8, 7, 6)]", "assert reverse_each_tuple([(1, 2, 3), (4, 5)]) == [(3, 2, 1), (5, 4)]", "assert reverse_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [(3, 2, 1), (6, 5, 4), (9, 8, 7)]", "assert reverse_each_tuple([(1, 2, 3, 4, 5, 6)]) == [(6, 5, 4, 3, 2, 1)]", "assert reverse_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [(2, 1), (4, 3), (6, 5), (8, 7), (10, 9)]", "assert reverse_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10), (11, 12)]) == [(2, 1), (4, 3), (6, 5), (8, 7), (10, 9), (12, 11)]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in each tuple from a list of tuple records.", "code": "def max_element_in_each_tuple(test_list):\n  res = [max(lis) for lis in test_list]\n  return res", "task_id": "272_e67cf394-b1ce-452f-80c6-5403f6d94ac9", "test_setup_code": "", "test_list": ["assert max_element_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [3, 6, 9]", "assert max_element_in_each_tuple([(10, 20), (30, 40), (50, 60)]) == [20, 40, 60]", "assert max_element_in_each_tuple([(1,), (2,), (3,)]) == [1, 2, 3]", "assert max_element_in_each_tuple([(1, 2), (3, 4), (5, 6), (7, 8)]) == [2, 4, 6, 8]", "assert max_element_in_each_tuple([(1, 2, 3), (3, 2, 1), (2, 3, 1)]) == [3, 3, 3]", "assert max_element_in_each_tuple([(0, 0, 0), (0, 0, 0), (0, 0, 0)]) == [0, 0, 0]", "assert max_element_in_each_tuple([(-1, -2, -3), (-4, -5, -6), (-7, -8, -9)]) == [-1, -4, -7]", "assert max_element_in_each_tuple([(100, 200, 300), (400, 500, 600), (700, 800, 900)]) == [300, 600, 900]", "assert max_element_in_each_tuple([(1, 2), (2, 1), (1, 1)]) == [2, 2, 1]", "assert max_element_in_each_tuple([(1, 2, 3, 4), (4, 3, 2, 1), (2, 3, 4, 1)]) == [4, 4, 4]", "assert max_element_in_each_tuple([(1, 2, 3), (4, 5), (6,)]) == [3, 5, 6]", "assert max_element_in_each_tuple([(1, 2, 3, 4, 5), (5, 4, 3, 2, 1)]) == [5, 5]", "assert max_element_in_each_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == [10]", "assert max_element_in_each_tuple([(1, 2, 3), (3, 2, 1), (1, 3, 2)]) == [3, 3, 3]", "assert max_element_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12)]) == [3, 6, 9, 12]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in each tuple from a list of tuple records.", "code": "def min_element_in_each_tuple(test_list):\n  res = [min(lis) for lis in test_list]\n  return res", "task_id": "272_81544321-1ad5-461b-81a2-e86265f8717d", "test_setup_code": "", "test_list": ["assert min_element_in_each_tuple([(1, 2), (3, 4), (5, 6)]) == [1, 3, 5]", "assert min_element_in_each_tuple([(10, 20, 30), (5, 15, 25), (1, 2, 3)]) == [10, 5, 1]", "assert min_element_in_each_tuple([(0, -1, -2), (-3, -4, -5), (6, 7, 8)]) == [-2, -5, 6]", "assert min_element_in_each_tuple([(100,), (200,), (300,)]) == [100, 200, 300]", "assert min_element_in_each_tuple([(1, 1, 1), (2, 2, 2), (3, 3, 3)]) == [1, 2, 3]", "assert min_element_in_each_tuple([(0, 0, 0), (0, 0, 0), (0, 0, 0)]) == [0, 0, 0]", "assert min_element_in_each_tuple([(1, -1, 0), (-1, 1, 0), (0, 1, -1)]) == [-1, -1, -1]", "assert min_element_in_each_tuple([(1, 2, 3, 4), (4, 3, 2, 1), (2, 4, 1, 3)]) == [1, 1, 1]", "assert min_element_in_each_tuple([(0, 1), (1, 0), (0, 0)]) == [0, 0, 0]", "assert min_element_in_each_tuple([(5, 10, 15), (10, 5, 15), (15, 10, 5)]) == [5, 5, 5]", "assert min_element_in_each_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == [1, 4, 7]", "assert min_element_in_each_tuple([(-1, -2, -3), (-4, -5, -6), (-7, -8, -9)]) == [-3, -6, -9]", "assert min_element_in_each_tuple([(1, 2, 3, 4, 5), (5, 4, 3, 2, 1), (2, 3, 4, 5, 1)]) == [1, 1, 1]", "assert min_element_in_each_tuple([(10, 20, 30, 40), (40, 30, 20, 10), (20, 40, 10, 30)]) == [10, 10, 10]", "assert min_element_in_each_tuple([(0, 0, 0, 0), (1, 1, 1, 1), (2, 2, 2, 2)]) == [0, 1, 2]"], "challenge_test_list": []}
{"text": "Write a function to extract even elements from each tuple in a list of tuple records.", "code": "def even_elements_in_each_tuple(test_list):\n  res = [[x for x in lis if x % 2 == 0] for lis in test_list]\n  return res", "task_id": "272_dff002b5-a98d-45e1-990e-95ac93d0c968", "test_setup_code": "", "test_list": ["assert even_elements_in_each_tuple([(1, 2, 3, 4), (5, 6, 7, 8)]) == [[2, 4], [6, 8]]", "assert even_elements_in_each_tuple([(2, 4, 6), (8, 10, 12)]) == [[2, 4, 6], [8, 10, 12]]", "assert even_elements_in_each_tuple([(1, 3, 5), (7, 9, 11)]) == [[], []]", "assert even_elements_in_each_tuple([]) == []", "assert even_elements_in_each_tuple([(0,)]) == [[0]]", "assert even_elements_in_each_tuple([(1,)]) == [[]]", "assert even_elements_in_each_tuple([(1, 2), (3, 4), (5, 6)]) == [[2], [4], [6]]", "assert even_elements_in_each_tuple([(100, 99, 98), (97, 96, 95)]) == [[100, 98], [96]]", "assert even_elements_in_each_tuple([(-2, -1, 0), (1, 2, 3)]) == [[-2, 0], [2]]", "assert even_elements_in_each_tuple([(2,), (4,), (6,)]) == [[2], [4], [6]]", "assert even_elements_in_each_tuple([(), ()]) == [[], []]", "assert even_elements_in_each_tuple([(10, 20, 30, 40, 50)]) == [[10, 20, 30, 40, 50]]", "assert even_elements_in_each_tuple([(1, 2, 3), ()]) == [[2], []]", "assert even_elements_in_each_tuple([(-4, -2, 0, 2, 4), (-3, -1, 1, 3)]) == [[-4, -2, 0, 2, 4], []]", "assert even_elements_in_each_tuple([(2**10, 3**5, 4**3)]) == [[1024, 64]]"], "challenge_test_list": []}
{"text": "Write a function to extract odd elements from each tuple in a list of tuple records.", "code": "def odd_elements_in_each_tuple(test_list):\n  res = [[x for x in lis if x % 2 != 0] for lis in test_list]\n  return res", "task_id": "272_25e32872-615e-4628-9c82-70d61a9b7fd0", "test_setup_code": "", "test_list": ["assert odd_elements_in_each_tuple([(1, 2, 3), (4, 5, 6)]) == [[1, 3], [5]]", "assert odd_elements_in_each_tuple([(2, 4, 6), (8, 10, 12)]) == [[], []]", "assert odd_elements_in_each_tuple([(1, 3, 5), (7, 9, 11)]) == [[1, 3, 5], [7, 9, 11]]", "assert odd_elements_in_each_tuple([(1,), (2,)]) == [[1], []]", "assert odd_elements_in_each_tuple([(0, 1, 2), (3, 4, 5)]) == [[1], [3, 5]]", "assert odd_elements_in_each_tuple([(1, 2, 3, 4, 5), (6, 7, 8, 9, 10)]) == [[1, 3, 5], [7, 9]]", "assert odd_elements_in_each_tuple([(11, 13, 15), (17, 19, 21)]) == [[11, 13, 15], [17, 19, 21]]", "assert odd_elements_in_each_tuple([(2, 4, 6, 8), (10, 12, 14, 16)]) == [[], []]", "assert odd_elements_in_each_tuple([(1, 2), (3, 4), (5, 6)]) == [[1], [3], [5]]", "assert odd_elements_in_each_tuple([(1, 3, 5, 7, 9), (2, 4, 6, 8, 10)]) == [[1, 3, 5, 7, 9], []]", "assert odd_elements_in_each_tuple([(1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12)]) == [[1, 3, 5], [7, 9, 11]]", "assert odd_elements_in_each_tuple([(1, 1, 1, 1), (2, 2, 2, 2)]) == [[1, 1, 1, 1], []]", "assert odd_elements_in_each_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == [[1, 3], [5, 7], [9, 11]]", "assert odd_elements_in_each_tuple([(0,), (1,), (2,), (3,)]) == [[], [1], [], [3]]", "assert odd_elements_in_each_tuple([(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)]) == [[1, 3, 5, 7, 9]]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd numbers at odd positions.", "code": "def sum_odd_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum", "task_id": "270_4a36f860-c60c-4b11-9ed4-93bc77ee2829", "test_setup_code": "", "test_list": ["assert sum_odd_and_odd_index([1, 2, 3, 4, 5], 5) == 2", "assert sum_odd_and_odd_index([1, 3, 5, 7, 9], 5) == 10", "assert sum_odd_and_odd_index([2, 4, 6, 8, 10], 5) == 0", "assert sum_odd_and_odd_index([1, 1, 1, 1, 1], 5) == 2", "assert sum_odd_and_odd_index([10, 11, 12, 13, 14, 15], 6) == 24", "assert sum_odd_and_odd_index([1], 1) == 0", "assert sum_odd_and_odd_index([1, 3], 2) == 3", "assert sum_odd_and_odd_index([2, 3, 4, 5, 6, 7], 6) == 8", "assert sum_odd_and_odd_index([0, 1, 0, 1, 0, 1], 6) == 2", "assert sum_odd_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 10", "assert sum_odd_and_odd_index([1, 3, 5, 7, 9, 11, 13, 15, 17], 9) == 36", "assert sum_odd_and_odd_index([10, 21, 32, 43, 54, 65, 76, 87, 98], 9) == 196", "assert sum_odd_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10", "assert sum_odd_and_odd_index([1, 3, 5, 7, 9, 11, 13, 15, 17, 19], 10) == 40", "assert sum_odd_and_odd_index([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the product of even numbers at odd positions.", "code": "def product_even_and_odd_index(arr, n):\n    i = 1\n    product = 1\n    for i in range(1, n, 2):\n        if arr[i] % 2 == 0:\n            product *= arr[i]\n    return product", "task_id": "270_d29f7981-ee92-40aa-ab4e-28730bd908df", "test_setup_code": "", "test_list": ["assert product_even_and_odd_index([1, 2, 3, 4, 5, 6], 6) == 8", "assert product_even_and_odd_index([2, 4, 6, 8, 10, 12], 6) == 32", "assert product_even_and_odd_index([1, 3, 5, 7, 9], 5) == 1", "assert product_even_and_odd_index([2, 3, 4, 5, 6, 7, 8, 9], 8) == 45", "assert product_even_and_odd_index([1, 1, 1, 1, 1, 1], 6) == 1", "assert product_even_and_odd_index([0, 2, 0, 4, 0, 6], 6) == 48", "assert product_even_and_odd_index([1, 2, 3, 4], 4) == 8", "assert product_even_and_odd_index([1, 3, 5, 7, 9, 11], 6) == 1", "assert product_even_and_odd_index([2, 4, 6, 8, 10, 12, 14], 7) == 32", "assert product_even_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 320", "assert product_even_and_odd_index([10, 20, 30, 40, 50, 60], 6) == 800", "assert product_even_and_odd_index([1, 2], 2) == 2", "assert product_even_and_odd_index([1], 1) == 1", "assert product_even_and_odd_index([], 0) == 1", "assert product_even_and_odd_index([2, 2, 2, 2, 2, 2, 2, 2], 8) == 16"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers at even positions.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_prime_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if is_prime(arr[i]):\n            sum += arr[i]\n    return sum", "task_id": "270_ebebad33-ce82-4e75-a8f6-3768d20ac8ba", "test_setup_code": "", "test_list": ["assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13], 6) == 18", "assert sum_prime_and_even_index([1, 2, 3, 4, 5, 6], 6) == 8", "assert sum_prime_and_even_index([0, 1, 4, 6, 8, 10], 6) == 0", "assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13, 17], 7) == 34", "assert sum_prime_and_even_index([1, 3, 5, 7, 11, 13, 17, 19], 8) == 28", "assert sum_prime_and_even_index([2, 4, 6, 8, 10, 12], 6) == 2", "assert sum_prime_and_even_index([2], 1) == 2", "assert sum_prime_and_even_index([4, 6, 8, 10, 12, 14], 6) == 0", "assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 10) == 58", "assert sum_prime_and_even_index([3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 10) == 71", "assert sum_prime_and_even_index([], 0) == 0", "assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 11) == 89", "assert sum_prime_and_even_index([1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 12) == 89", "assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37], 12) == 126", "assert sum_prime_and_even_index([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41], 13) == 126"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of numbers divisible by 3 at odd positions.", "code": "def sum_divisible_by_three_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] % 3 == 0:\n            sum += arr[i]\n    return sum", "task_id": "270_1147a54c-71bd-49b4-9d77-f73eec84c940", "test_setup_code": "", "test_list": ["assert sum_divisible_by_three_and_odd_index([1, 3, 5, 6, 7, 9], 6) == 18", "assert sum_divisible_by_three_and_odd_index([3, 6, 9, 12, 15, 18], 6) == 36", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6], 6) == 6", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6], 0) == 0", "assert sum_divisible_by_three_and_odd_index([], 0) == 0", "assert sum_divisible_by_three_and_odd_index([1, 3, 5, 7, 9, 11], 6) == 0", "assert sum_divisible_by_three_and_odd_index([1, 3, 5, 6, 7, 8, 9, 12], 8) == 18", "assert sum_divisible_by_three_and_odd_index([1, 3, 5, 6, 7, 9, 11, 12, 13, 15], 10) == 30", "assert sum_divisible_by_three_and_odd_index([3, 3, 3, 3, 3, 3, 3, 3, 3, 3], 10) == 15", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 6", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 12) == 18", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 15) == 18", "assert sum_divisible_by_three_and_odd_index([3, 6, 9], 3) == 6", "assert sum_divisible_by_three_and_odd_index([1, 3, 5, 6, 7, 9, 11, 12, 13, 15, 17, 18], 12) == 36", "assert sum_divisible_by_three_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 18) == 36"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers at even positions.", "code": "def count_even_and_even_index(arr, n):\n    i = 0\n    count = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            count += 1\n    return count", "task_id": "270_c51c1c56-c928-4c7e-81d9-59ed44836627", "test_setup_code": "", "test_list": ["assert count_even_and_even_index([2, 3, 4, 5, 6, 7], 6) == 2", "assert count_even_and_even_index([1, 2, 3, 4, 5, 6], 6) == 0", "assert count_even_and_even_index([2, 4, 6, 8, 10, 12], 6) == 3", "assert count_even_and_even_index([1, 3, 5, 7, 9, 11], 6) == 0", "assert count_even_and_even_index([0, 1, 2, 3, 4, 5], 6) == 3", "assert count_even_and_even_index([2, 2, 2, 2, 2, 2], 6) == 3", "assert count_even_and_even_index([], 0) == 0", "assert count_even_and_even_index([2], 1) == 1", "assert count_even_and_even_index([1], 1) == 0", "assert count_even_and_even_index([2, 3, 4, 5, 6], 5) == 2", "assert count_even_and_even_index([1, 2, 3, 4, 5], 5) == 0", "assert count_even_and_even_index([2, 4, 6, 8, 10], 5) == 3", "assert count_even_and_even_index([1, 3, 5, 7, 9], 5) == 0", "assert count_even_and_even_index([0, 2, 4, 6, 8], 5) == 3", "assert count_even_and_even_index([2, 2, 2, 2, 2], 5) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of negative numbers at odd positions.", "code": "def sum_negative_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] < 0:\n            sum += arr[i]\n    return sum", "task_id": "270_ae4dd841-dd79-47ca-b8d3-e35bdcd48eab", "test_setup_code": "", "test_list": ["assert sum_negative_and_odd_index([1, -2, 3, -4, 5, -6], 6) == -12", "assert sum_negative_and_odd_index([-1, -2, -3, -4, -5, -6], 6) == -12", "assert sum_negative_and_odd_index([1, 2, 3, 4, 5, 6], 6) == 0", "assert sum_negative_and_odd_index([0, -1, 0, -2, 0, -3], 6) == -6", "assert sum_negative_and_odd_index([1, -1, 2, -2, 3, -3], 6) == -6", "assert sum_negative_and_odd_index([1, -1], 2) == -1", "assert sum_negative_and_odd_index([-1, -1], 2) == -1", "assert sum_negative_and_odd_index([1, 1], 2) == 0", "assert sum_negative_and_odd_index([1, -2, 3, 4, 5, 6], 6) == -2", "assert sum_negative_and_odd_index([1, 2, 3, -4, 5, -6], 6) == -10", "assert sum_negative_and_odd_index([], 0) == 0", "assert sum_negative_and_odd_index([1], 1) == 0", "assert sum_negative_and_odd_index([-1], 1) == 0", "assert sum_negative_and_odd_index([1, -2, -3, -4, -5, -6], 6) == -12", "assert sum_negative_and_odd_index([1, -2, 3, -4, 5, -6, 7, -8], 8) == -20"], "challenge_test_list": []}
{"text": "Write a python function to find the product of positive numbers at even positions.", "code": "def product_positive_and_even_index(arr, n):\n    i = 0\n    product = 1\n    for i in range(0, n, 2):\n        if arr[i] > 0:\n            product *= arr[i]\n    return product", "task_id": "270_2245815e-4a83-47de-9071-5a9a7fb31836", "test_setup_code": "", "test_list": ["assert product_positive_and_even_index([1, 2, 3, 4, 5, 6], 6) == 15", "assert product_positive_and_even_index([2, -3, 4, -5, 6, -7], 6) == 48", "assert product_positive_and_even_index([-1, -2, -3, -4, -5, -6], 6) == 1", "assert product_positive_and_even_index([0, 1, 0, 1, 0, 1], 6) == 1", "assert product_positive_and_even_index([1, 2, 3, 4, 5], 5) == 15", "assert product_positive_and_even_index([1, 2], 2) == 1", "assert product_positive_and_even_index([1], 1) == 1", "assert product_positive_and_even_index([], 0) == 1", "assert product_positive_and_even_index([10, 20, 30, 40, 50, 60], 6) == 15000", "assert product_positive_and_even_index([1, 1, 1, 1, 1, 1], 6) == 1", "assert product_positive_and_even_index([1, 2, 3, 4, 0, 6], 6) == 3", "assert product_positive_and_even_index([1, 2, -3, 4, 5, 6], 6) == 5", "assert product_positive_and_even_index([1, 2, 3, 4, -5, 6], 6) == 3", "assert product_positive_and_even_index([1, 2, 3, 4, 5, -6], 6) == 15", "assert product_positive_and_even_index([1, 2, 3, 4, 5, 6, 7, 8], 8) == 105"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of numbers greater than 5 at odd positions.", "code": "def sum_greater_than_five_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] > 5:\n            sum += arr[i]\n    return sum", "task_id": "270_2e61562b-b0d5-4b08-b03d-da0ade5480a3", "test_setup_code": "", "test_list": ["assert sum_greater_than_five_and_odd_index([1, 6, 3, 7, 5, 8], 6) == 15", "assert sum_greater_than_five_and_odd_index([1, 2, 3, 4, 5, 6], 6) == 0", "assert sum_greater_than_five_and_odd_index([10, 20, 30, 40, 50, 60], 6) == 120", "assert sum_greater_than_five_and_odd_index([5, 5, 5, 5, 5, 5], 6) == 0", "assert sum_greater_than_five_and_odd_index([6, 7, 8, 9, 10, 11], 6) == 18", "assert sum_greater_than_five_and_odd_index([], 0) == 0", "assert sum_greater_than_five_and_odd_index([1], 1) == 0", "assert sum_greater_than_five_and_odd_index([1, 6], 2) == 6", "assert sum_greater_than_five_and_odd_index([1, 6, 3], 3) == 6", "assert sum_greater_than_five_and_odd_index([1, 6, 3, 7], 4) == 13", "assert sum_greater_than_five_and_odd_index([1, 6, 3, 7, 5, 8, 9], 7) == 15", "assert sum_greater_than_five_and_odd_index([1, 6, 3, 7, 5, 8, 9, 10], 8) == 23", "assert sum_greater_than_five_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8], 8) == 8", "assert sum_greater_than_five_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 8", "assert sum_greater_than_five_and_odd_index([5, 6, 7, 8, 9, 10, 11, 12, 13], 9) == 30"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers at even positions.", "code": "def count_odd_and_even_index(arr, n):\n    i = 0\n    count = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 != 0:\n            count += 1\n    return count", "task_id": "270_6ec52861-6f8f-4012-aefe-221e4a989f21", "test_setup_code": "", "test_list": ["assert count_odd_and_even_index([1, 2, 3, 4, 5, 6], 6) == 2", "assert count_odd_and_even_index([2, 4, 6, 8, 10, 12], 6) == 0", "assert count_odd_and_even_index([1, 3, 5, 7, 9, 11], 6) == 3", "assert count_odd_and_even_index([1], 1) == 1", "assert count_odd_and_even_index([2], 1) == 0", "assert count_odd_and_even_index([], 0) == 0", "assert count_odd_and_even_index([1, 2, 3, 4, 5], 5) == 2", "assert count_odd_and_even_index([1, 2, 3, 4, 5, 6, 7, 8], 8) == 2", "assert count_odd_and_even_index([0, 0, 0, 0, 0, 0], 6) == 0", "assert count_odd_and_even_index([1, 1, 1, 1, 1, 1], 6) == 3", "assert count_odd_and_even_index([1, 2, 3, 4, 5, 6, 7], 7) == 2", "assert count_odd_and_even_index([2, 3, 4, 5, 6, 7, 8], 7) == 0", "assert count_odd_and_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 3", "assert count_odd_and_even_index([1, 3, 5, 7, 9, 11, 13, 15], 8) == 4", "assert count_odd_and_even_index([2, 4, 6, 8, 10, 12, 14, 16], 8) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of numbers at odd positions.", "code": "def sum_square_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        sum += arr[i] ** 2\n    return sum", "task_id": "270_f26d03a8-3bf9-456c-a6f7-38b0ea077896", "test_setup_code": "", "test_list": ["assert sum_square_and_odd_index([1, 2, 3, 4, 5], 5) == 20", "assert sum_square_and_odd_index([10, 20, 30, 40, 50], 5) == 2000", "assert sum_square_and_odd_index([0, 1, 0, 1, 0], 5) == 2", "assert sum_square_and_odd_index([1, 2, 3, 4, 5, 6], 6) == 20", "assert sum_square_and_odd_index([2, 4, 6, 8, 10, 12], 6) == 224", "assert sum_square_and_odd_index([1], 1) == 0", "assert sum_square_and_odd_index([], 0) == 0", "assert sum_square_and_odd_index([1, 1, 1, 1, 1, 1], 6) == 3", "assert sum_square_and_odd_index([1, 3, 5, 7, 9], 5) == 58", "assert sum_square_and_odd_index([1, -2, 3, -4, 5], 5) == 20", "assert sum_square_and_odd_index([-1, -2, -3, -4, -5], 5) == 20", "assert sum_square_and_odd_index([100, 200, 300, 400, 500], 5) == 200000", "assert sum_square_and_odd_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 120", "assert sum_square_and_odd_index([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 10) == 5", "assert sum_square_and_odd_index([2, 3, 5, 7, 11, 13, 17, 19, 23, 29], 10) == 1033"], "challenge_test_list": []}
{"text": "Write a function to add the contents of one tuple with corresponding index of another tuple.", "code": "def add_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i + j, test_tup1, test_tup2))\n  return res", "task_id": "273_3850e623-fda1-4f2b-a471-abfd21ca4688", "test_setup_code": "", "test_list": ["assert add_elements((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert add_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert add_elements((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert add_elements((1,), (2,)) == (3,)", "assert add_elements((100, 200, 300), (400, 500, 600)) == (500, 700, 900)", "assert add_elements((1, 2), (3, 4)) == (4, 6)", "assert add_elements((1.5, 2.5), (3.5, 4.5)) == (5.0, 7.0)", "assert add_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (5, 5, 5, 5)", "assert add_elements((1, 2, 3), (4, 5, 6, 7)) == (5, 7, 9)", "assert add_elements((1, 2, 3, 4), (4, 5, 6)) == (5, 7, 9)", "assert add_elements((0,), (0,)) == (0,)", "assert add_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3)", "assert add_elements((1, 2, 3), (-1, -2, -3)) == (0, 0, 0)", "assert add_elements((1, 2, 3), (1, 1, 1)) == (2, 3, 4)", "assert add_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (6, 6, 6, 6, 6)"], "challenge_test_list": []}
{"text": "Write a function to multiply the contents of one tuple with corresponding index of another tuple.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i * j, test_tup1, test_tup2))\n  return res", "task_id": "273_7c020a8d-7aa9-4b61-bf04-065663a2377f", "test_setup_code": "", "test_list": ["assert multiply_elements((1, 2, 3), (4, 5, 6)) == (4, 10, 18)", "assert multiply_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert multiply_elements((-1, -2, -3), (1, 2, 3)) == (-1, -4, -9)", "assert multiply_elements((1, 2), (3, 4)) == (3, 8)", "assert multiply_elements((1,), (2,)) == (2,)", "assert multiply_elements((1, 2, 3, 4), (5, 6, 7, 8)) == (5, 12, 21, 32)", "assert multiply_elements((100, 200, 300), (1, 2, 3)) == (100, 400, 900)", "assert multiply_elements((1, 2, 3), (0, 0, 0)) == (0, 0, 0)", "assert multiply_elements((1, 0, 3), (4, 5, 6)) == (4, 0, 18)", "assert multiply_elements((1, 2, 3), (4, -5, 6)) == (4, -10, 18)", "assert multiply_elements((1, 2, 3), (4, 5, 0)) == (4, 10, 0)", "assert multiply_elements((1, 2, 3), (4, 5, 6, 7)) == (4, 10, 18)", "assert multiply_elements((1, 2, 3, 4), (4, 5, 6)) == (4, 10, 18)", "assert multiply_elements((1, 2, 3), (4, 5, 6, 7)) == (4, 10, 18)", "assert multiply_elements((1, 2, 3, 4), (4, 5, 6, 7, 8)) == (4, 10, 18, 28)"], "challenge_test_list": []}
{"text": "Write a function to divide the contents of one tuple by the corresponding index of another tuple.", "code": "def divide_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i / j if j != 0 else None, test_tup1, test_tup2))\n  return res", "task_id": "273_d5ff1e4d-b1eb-409f-a240-29ec123ec2a0", "test_setup_code": "", "test_list": ["assert divide_elements((10, 20, 30), (2, 4, 5)) == (5.0, 5.0, 6.0)", "assert divide_elements((1, 2, 3), (1, 1, 1)) == (1.0, 2.0, 3.0)", "assert divide_elements((0, 0, 0), (1, 2, 3)) == (0.0, 0.0, 0.0)", "assert divide_elements((10, 20, 30), (0, 5, 10)) == (None, 4.0, 3.0)", "assert divide_elements((1, 2, 3), (0, 0, 0)) == (None, None, None)", "assert divide_elements((1, -2, 3), (1, -1, 1)) == (1.0, 2.0, 3.0)", "assert divide_elements((10, 20, 30), (1, 2, 0)) == (10.0, 10.0, None)", "assert divide_elements((5, 10, 15), (5, 5, 5)) == (1.0, 2.0, 3.0)", "assert divide_elements((100, 200, 300), (10, 20, 30)) == (10.0, 10.0, 10.0)", "assert divide_elements((1, 1, 1), (1, 1, 1)) == (1.0, 1.0, 1.0)", "assert divide_elements((10, 20, 30), (3, 4, 5)) == (3.3333333333333335, 5.0, 6.0)", "assert divide_elements((1, 2, 3), (3, 2, 1)) == (0.3333333333333333, 1.0, 3.0)", "assert divide_elements((0, 1, 2), (1, 0, 2)) == (0.0, None, 1.0)", "assert divide_elements((1, 2), (1, 2, 3)) == (1.0, 1.0)", "assert divide_elements((1, 2, 3), (1, 2)) == (1.0, 1.0)"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the contents of one tuple with corresponding index of another tuple.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i % j if j != 0 else None, test_tup1, test_tup2))\n  return res", "task_id": "273_d419edc4-edc0-4d27-8189-e7e0acc88e69", "test_setup_code": "", "test_list": ["assert mod_elements((10, 20, 30), (3, 5, 7)) == (1, 0, 2)", "assert mod_elements((15, 25, 35), (4, 6, 8)) == (3, 1, 3)", "assert mod_elements((0, 1, 2), (1, 2, 3)) == (0, 1, 2)", "assert mod_elements((10, 20, 30), (0, 5, 7)) == (None, 0, 2)", "assert mod_elements((100, 200, 300), (10, 20, 30)) == (0, 0, 0)", "assert mod_elements((1, 2, 3), (1, 1, 1)) == (0, 0, 0)", "assert mod_elements((10, 20, 30), (3, 0, 7)) == (1, None, 2)", "assert mod_elements((10, 20), (3, 5, 7)) == (1, 0)", "assert mod_elements((10, 20, 30), (3, 5)) == (1, 0)", "assert mod_elements((10, 20, 30), (3, 5, 0)) == (1, 0, None)", "assert mod_elements((10,), (3,)) == (1,)", "assert mod_elements((10,), (0,)) == (None,)", "assert mod_elements((), ()) == ()", "assert mod_elements((10, 20, 30, 40), (3, 5, 7, 0)) == (1, 0, 2, None)", "assert mod_elements((10, 20, 30, 40), (3, 5, 7, 8)) == (1, 0, 2, 0)"], "challenge_test_list": []}
{"text": "Write a function to raise the contents of one tuple to the power of the corresponding index of another tuple.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i ** j, test_tup1, test_tup2))\n  return res", "task_id": "273_b57e4cd5-90d0-4481-a9af-70cb22cdd0c4", "test_setup_code": "", "test_list": ["assert power_elements((2, 3, 4), (1, 2, 3)) == (2, 9, 64)", "assert power_elements((1, 2, 3), (0, 0, 0)) == (1, 1, 1)", "assert power_elements((0, 0, 0), (1, 2, 3)) == (0, 0, 0)", "assert power_elements((2, 3, 4), (3, 2, 1)) == (8, 9, 4)", "assert power_elements((5, 6, 7), (2, 1, 0)) == (25, 6, 1)", "assert power_elements((10, 20, 30), (1, 1, 1)) == (10, 20, 30)", "assert power_elements((2, 3, 4), (0, 1, 2)) == (1, 3, 16)", "assert power_elements((1, 2, 3), (3, 2, 1)) == (1, 4, 3)", "assert power_elements((2, 3), (2, 3)) == (4, 27)", "assert power_elements((2, 3, 4, 5), (1, 2, 3, 4)) == (2, 9, 64, 625)", "assert power_elements((3, 4, 5), (2, 2, 2)) == (9, 16, 25)", "assert power_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 8, 9, 4)", "assert power_elements((0, 1, 2), (3, 2, 1)) == (0, 1, 2)", "assert power_elements((2, 2, 2), (2, 2, 2)) == (4, 4, 4)", "assert power_elements((5, 5, 5), (0, 1, 2)) == (1, 5, 25)"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the contents of one tuple with corresponding index of another tuple.", "code": "def max_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: max(i, j), test_tup1, test_tup2))\n  return res", "task_id": "273_6e73cd22-eabe-4474-b7f5-fec5e75fd59f", "test_setup_code": "", "test_list": ["assert max_elements((1, 2, 3), (4, 5, 6)) == (4, 5, 6)", "assert max_elements((7, 8, 9), (3, 6, 10)) == (7, 8, 10)", "assert max_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert max_elements((-1, -2, -3), (-4, -5, -6)) == (-1, -2, -3)", "assert max_elements((1, 2, 3), (1, 2, 3)) == (1, 2, 3)", "assert max_elements((10, 20, 30), (5, 25, 15)) == (10, 25, 30)", "assert max_elements((1,), (2,)) == (2,)", "assert max_elements((100, 200, 300, 400), (50, 250, 150, 450)) == (100, 250, 300, 450)", "assert max_elements((1, 2), (3, 4)) == (3, 4)", "assert max_elements((5, 6, 7), (5, 6, 7)) == (5, 6, 7)", "assert max_elements((0, -1, -2), (-3, -4, -5)) == (0, -1, -2)", "assert max_elements((10, 20), (30, 40)) == (30, 40)", "assert max_elements((1, 3, 5, 7, 9), (2, 4, 6, 8, 10)) == (2, 4, 6, 8, 10)", "assert max_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (5, 4, 3, 4, 5)", "assert max_elements((0, 0, 0, 0), (1, 1, 1, 1)) == (1, 1, 1, 1)"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the contents of one tuple with corresponding index of another tuple.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: min(i, j), test_tup1, test_tup2))\n  return res", "task_id": "273_436b26e4-cf30-4d26-9289-ed67205a74ce", "test_setup_code": "", "test_list": ["assert min_elements((1, 2, 3), (3, 2, 1)) == (1, 2, 1)", "assert min_elements((5, 6, 7), (7, 6, 5)) == (5, 6, 5)", "assert min_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert min_elements((-1, -2, -3), (-3, -2, -1)) == (-3, -2, -3)", "assert min_elements((100, 200, 300), (300, 200, 100)) == (100, 200, 100)", "assert min_elements((1,), (2,)) == (1,)", "assert min_elements((1, 2), (2, 1)) == (1, 1)", "assert min_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (1, 2, 2, 1)", "assert min_elements((10, 20, 30), (5, 25, 35)) == (5, 20, 30)", "assert min_elements((0, 1, 2), (2, 1, 0)) == (0, 1, 0)", "assert min_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (1, 2, 3, 2, 1)", "assert min_elements((1, 1, 1), (2, 2, 2)) == (1, 1, 1)", "assert min_elements((0,), (1,)) == (0,)", "assert min_elements((1, 2, 3, 4, 5, 6), (6, 5, 4, 3, 2, 1)) == (1, 2, 3, 3, 2, 1)", "assert min_elements((1, 2, 3), (3, 3, 3)) == (1, 2, 3)"], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of the contents of one tuple with corresponding index of another tuple.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: abs(i - j), test_tup1, test_tup2))\n  return res", "task_id": "273_f740432b-315b-41c7-aaa5-a8fb31ea9b48", "test_setup_code": "", "test_list": ["assert abs_diff_elements((1, 2, 3), (4, 5, 6)) == (3, 3, 3)", "assert abs_diff_elements((10, 20, 30), (5, 15, 25)) == (5, 5, 5)", "assert abs_diff_elements((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert abs_diff_elements((-1, -2, -3), (-4, -5, -6)) == (3, 3, 3)", "assert abs_diff_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)", "assert abs_diff_elements((100, 200, 300), (50, 150, 250)) == (50, 50, 50)", "assert abs_diff_elements((0, 0, 0), (1, 2, 3)) == (1, 2, 3)", "assert abs_diff_elements((1, 2, 3), (0, 0, 0)) == (1, 2, 3)", "assert abs_diff_elements((-1, -2, -3), (1, 2, 3)) == (2, 4, 6)", "assert abs_diff_elements((1, 2), (3, 4)) == (2, 2)", "assert abs_diff_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (3, 1, 1, 3)", "assert abs_diff_elements((0,), (0,)) == (0,)", "assert abs_diff_elements((1,), (2,)) == (1,)", "assert abs_diff_elements((123, 456, 789), (321, 654, 987)) == (198, 198, 198)", "assert abs_diff_elements((1, 2, 3, 4, 5), (5, 4, 3, 2, 1)) == (4, 2, 0, 2, 4)"], "challenge_test_list": []}
{"text": "Write a function to concatenate the string representations of the contents of one tuple with corresponding index of another tuple.", "code": "def concat_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: str(i) + str(j), test_tup1, test_tup2))\n  return res", "task_id": "273_a2880546-a8ae-4caf-ac9b-087515b25562", "test_setup_code": "", "test_list": ["assert concat_elements((1, 2, 3), ('a', 'b', 'c')) == ('1a', '2b', '3c')", "assert concat_elements((4, 5), ('x', 'y')) == ('4x', '5y')", "assert concat_elements((), ()) == ()", "assert concat_elements((1,), ('a',)) == ('1a')", "assert concat_elements((None, True), ('None', 'True')) == ('NoneNone', 'TrueTrue')", "assert concat_elements((1, 2.5, 'test'), ('a', 'b', 'c')) == ('1a', '2.5b', 'testc')", "assert concat_elements((1, 2), ('a', 'b', 'c')) == ('1a', '2b')", "assert concat_elements((1, 2, 3), ('a',)) == ('1a',)", "assert concat_elements(('x', 'y', 'z'), ('1', '2', '3')) == ('x1', 'y2', 'z3')", "assert concat_elements((0, -1, -2), ('zero', 'minus one', 'minus two')) == ('0zero', '-1minus one', '-2minus two')", "assert concat_elements((1, 2, 3), ('', '', '')) == ('1', '2', '3')", "assert concat_elements((True, False), ('T', 'F')) == ('TrueT', 'FalseF')", "assert concat_elements((1, 2, 3), (None, None, None)) == ('1None', '2None', '3None')", "assert concat_elements((1.1, 2.2, 3.3), ('a', 'b', 'c')) == ('1.1a', '2.2b', '3.3c')", "assert concat_elements(('a', 'b', 'c'), ('x', 'y', 'z')) == ('ax', 'by', 'cz')"], "challenge_test_list": []}
{"text": "Write a function to compare the contents of one tuple with corresponding index of another tuple and return a tuple of booleans indicating if the elements are equal.", "code": "def compare_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i == j, test_tup1, test_tup2))\n  return res", "task_id": "273_e4e927f8-798d-4d47-bc97-cd4594b67adf", "test_setup_code": "", "test_list": ["assert compare_elements((1, 2, 3), (1, 2, 3)) == (True, True, True)", "assert compare_elements((1, 2, 3), (3, 2, 1)) == (False, True, False)", "assert compare_elements((1, 2), (1, 2, 3)) == (True, True)", "assert compare_elements((1, 2, 3), (1, 2)) == (True, True)", "assert compare_elements((), ()) == ()", "assert compare_elements((1,), (1,)) == (True,)", "assert compare_elements((1,), (2,)) == (False,)", "assert compare_elements((1, 2, 3, 4), (1, 2, 3, 4)) == (True, True, True, True)", "assert compare_elements((1, 2, 3, 4), (4, 3, 2, 1)) == (False, False, False, False)", "assert compare_elements((1, 2, 3, 4), (1, 2, 3, 5)) == (True, True, True, False)", "assert compare_elements((1, 2, 3, 4), (1, 2, 3, 4, 5)) == (True, True, True, True)", "assert compare_elements((1, 2, 3, 4, 5), (1, 2, 3, 4)) == (True, True, True, True)", "assert compare_elements((1, 2, None), (1, 2, None)) == (True, True, True)", "assert compare_elements((1, 2, None), (1, 2, 3)) == (True, True, False)", "assert compare_elements((None, None, None), (None, None, None)) == (True, True, True)"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd index binomial coefficients.", "code": "import math\n\ndef sum_of_odd_index_binomial_coefficients(n: int) -> int:\n    return (1 << (n - 1))", "task_id": "274_3c640d16-4133-48b1-9c09-619b423f2d0c", "test_setup_code": "", "test_list": ["assert sum_of_odd_index_binomial_coefficients(0) == 0", "assert sum_of_odd_index_binomial_coefficients(1) == 1", "assert sum_of_odd_index_binomial_coefficients(2) == 1", "assert sum_of_odd_index_binomial_coefficients(3) == 2", "assert sum_of_odd_index_binomial_coefficients(4) == 4", "assert sum_of_odd_index_binomial_coefficients(5) == 8", "assert sum_of_odd_index_binomial_coefficients(6) == 16", "assert sum_of_odd_index_binomial_coefficients(7) == 32", "assert sum_of_odd_index_binomial_coefficients(8) == 64", "assert sum_of_odd_index_binomial_coefficients(9) == 128", "assert sum_of_odd_index_binomial_coefficients(10) == 256", "assert sum_of_odd_index_binomial_coefficients(11) == 512", "assert sum_of_odd_index_binomial_coefficients(12) == 1024", "assert sum_of_odd_index_binomial_coefficients(13) == 2048", "assert sum_of_odd_index_binomial_coefficients(14) == 4096"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients(n: int) -> int:\n    return (1 << n)", "task_id": "274_14c3fa9e-7fc8-40c2-befe-74cc27fa75be", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients(0) == 1", "assert sum_of_binomial_coefficients(1) == 2", "assert sum_of_binomial_coefficients(5) == 32", "assert sum_of_binomial_coefficients(10) == 1024"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of binomial coefficients for a given n.", "code": "import math\n\ndef sum_of_square_of_binomial_coefficients(n: int) -> int:\n    return math.comb(2 * n, n)", "task_id": "274_e8d16ef5-5ecf-42e7-a910-1962cb929ac0", "test_setup_code": "", "test_list": ["assert sum_of_square_of_binomial_coefficients(0) == 1", "assert sum_of_square_of_binomial_coefficients(1) == 2", "assert sum_of_square_of_binomial_coefficients(2) == 6", "assert sum_of_square_of_binomial_coefficients(3) == 20", "assert sum_of_square_of_binomial_coefficients(4) == 70", "assert sum_of_square_of_binomial_coefficients(5) == 252", "assert sum_of_square_of_binomial_coefficients(6) == 924", "assert sum_of_square_of_binomial_coefficients(7) == 3432", "assert sum_of_square_of_binomial_coefficients(8) == 12870", "assert sum_of_square_of_binomial_coefficients(9) == 48620", "assert sum_of_square_of_binomial_coefficients(10) == 184756", "assert sum_of_square_of_binomial_coefficients(15) == 155117520", "assert sum_of_square_of_binomial_coefficients(20) == 137846528820", "assert sum_of_square_of_binomial_coefficients(25) == 126410606437752", "assert sum_of_square_of_binomial_coefficients(30) == 119877472320527040"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are divisible by a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_divisible_by_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) % k == 0)", "task_id": "274_3bf77e1c-1c15-43d8-9589-292aaad127fc", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_divisible_by_k(5, 2) == 16", "assert sum_of_binomial_coefficients_divisible_by_k(5, 3) == 6", "assert sum_of_binomial_coefficients_divisible_by_k(10, 2) == 512", "assert sum_of_binomial_coefficients_divisible_by_k(10, 5) == 252", "assert sum_of_binomial_coefficients_divisible_by_k(0, 1) == 1", "assert sum_of_binomial_coefficients_divisible_by_k(1, 1) == 2", "assert sum_of_binomial_coefficients_divisible_by_k(1, 2) == 1", "assert sum_of_binomial_coefficients_divisible_by_k(7, 3) == 35", "assert sum_of_binomial_coefficients_divisible_by_k(7, 4) == 35", "assert sum_of_binomial_coefficients_divisible_by_k(8, 3) == 93", "assert sum_of_binomial_coefficients_divisible_by_k(8, 5) == 93", "assert sum_of_binomial_coefficients_divisible_by_k(6, 2) == 32", "assert sum_of_binomial_coefficients_divisible_by_k(6, 3) == 20", "assert sum_of_binomial_coefficients_divisible_by_k(4, 2) == 8", "assert sum_of_binomial_coefficients_divisible_by_k(4, 3) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at prime indices for a given n.", "code": "import math\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_prime_index_binomial_coefficients(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if is_prime(i))", "task_id": "274_226d1183-f6d0-41d6-bccc-bb08dfa4305c", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(5) == True", "assert is_prime(7) == True", "assert is_prime(11) == True", "assert is_prime(13) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-5) == False", "assert is_prime(4) == False", "assert is_prime(6) == False", "assert is_prime(9) == False", "assert is_prime(15) == False", "assert is_prime(25) == False", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are greater than a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_greater_than_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) > k)", "task_id": "274_71db754e-69f3-4af3-8029-b00f23f25b90", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_greater_than_k(5, 3) == 16", "assert sum_of_binomial_coefficients_greater_than_k(4, 1) == 14", "assert sum_of_binomial_coefficients_greater_than_k(6, 10) == 22", "assert sum_of_binomial_coefficients_greater_than_k(3, 0) == 8", "assert sum_of_binomial_coefficients_greater_than_k(7, 20) == 64", "assert sum_of_binomial_coefficients_greater_than_k(0, 0) == 0", "assert sum_of_binomial_coefficients_greater_than_k(1, 0) == 2", "assert sum_of_binomial_coefficients_greater_than_k(10, 100) == 252", "assert sum_of_binomial_coefficients_greater_than_k(8, 30) == 70", "assert sum_of_binomial_coefficients_greater_than_k(9, 50) == 126", "assert sum_of_binomial_coefficients_greater_than_k(2, 1) == 2", "assert sum_of_binomial_coefficients_greater_than_k(5, 10) == 11", "assert sum_of_binomial_coefficients_greater_than_k(3, 2) == 3", "assert sum_of_binomial_coefficients_greater_than_k(4, 5) == 7", "assert sum_of_binomial_coefficients_greater_than_k(6, 15) == 20"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are less than a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_less_than_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) < k)", "task_id": "274_7cc5d8d7-5313-4299-b6f2-4644cc7f8d1a", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_less_than_k(5, 10) == 16", "assert sum_of_binomial_coefficients_less_than_k(4, 5) == 10", "assert sum_of_binomial_coefficients_less_than_k(6, 20) == 32", "assert sum_of_binomial_coefficients_less_than_k(3, 3) == 3", "assert sum_of_binomial_coefficients_less_than_k(10, 50) == 102", "assert sum_of_binomial_coefficients_less_than_k(0, 1) == 1", "assert sum_of_binomial_coefficients_less_than_k(1, 2) == 2", "assert sum_of_binomial_coefficients_less_than_k(2, 4) == 4", "assert sum_of_binomial_coefficients_less_than_k(7, 15) == 29", "assert sum_of_binomial_coefficients_less_than_k(8, 30) == 64", "assert sum_of_binomial_coefficients_less_than_k(9, 100) == 256", "assert sum_of_binomial_coefficients_less_than_k(5, 1) == 1", "assert sum_of_binomial_coefficients_less_than_k(3, 10) == 8", "assert sum_of_binomial_coefficients_less_than_k(4, 1) == 1", "assert sum_of_binomial_coefficients_less_than_k(6, 50) == 64"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at Fibonacci indices for a given n.", "code": "import math\n\ndef fibonacci_sequence(limit: int) -> list:\n    fibs = [0, 1]\n    while fibs[-1] + fibs[-2] <= limit:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs\n\ndef sum_of_binomial_coefficients_at_fibonacci_indices(n: int) -> int:\n    fib_indices = fibonacci_sequence(n)\n    return sum(math.comb(n, i) for i in fib_indices)", "task_id": "274_3998ba21-06c9-4e80-8749-eba97a8a000a", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_at_fibonacci_indices(0) == 1", "assert sum_of_binomial_coefficients_at_fibonacci_indices(1) == 2", "assert sum_of_binomial_coefficients_at_fibonacci_indices(2) == 3", "assert sum_of_binomial_coefficients_at_fibonacci_indices(3) == 5", "assert sum_of_binomial_coefficients_at_fibonacci_indices(4) == 9", "assert sum_of_binomial_coefficients_at_fibonacci_indices(5) == 15", "assert sum_of_binomial_coefficients_at_fibonacci_indices(6) == 26", "assert sum_of_binomial_coefficients_at_fibonacci_indices(7) == 42", "assert sum_of_binomial_coefficients_at_fibonacci_indices(8) == 70", "assert sum_of_binomial_coefficients_at_fibonacci_indices(9) == 116", "assert sum_of_binomial_coefficients_at_fibonacci_indices(10) == 188", "assert sum_of_binomial_coefficients_at_fibonacci_indices(15) == 1597", "assert sum_of_binomial_coefficients_at_fibonacci_indices(20) == 6765", "assert sum_of_binomial_coefficients_at_fibonacci_indices(25) == 28657", "assert sum_of_binomial_coefficients_at_fibonacci_indices(30) == 121393"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at even indices for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients_at_even_indices(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if i % 2 == 0)", "task_id": "274_537343b3-8c12-44d1-839c-84eaa6e2c80c", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_at_even_indices(0) == 1", "assert sum_of_binomial_coefficients_at_even_indices(1) == 1", "assert sum_of_binomial_coefficients_at_even_indices(2) == 2", "assert sum_of_binomial_coefficients_at_even_indices(3) == 2", "assert sum_of_binomial_coefficients_at_even_indices(4) == 8", "assert sum_of_binomial_coefficients_at_even_indices(5) == 8", "assert sum_of_binomial_coefficients_at_even_indices(6) == 32", "assert sum_of_binomial_coefficients_at_even_indices(7) == 32", "assert sum_of_binomial_coefficients_at_even_indices(8) == 128", "assert sum_of_binomial_coefficients_at_even_indices(9) == 128", "assert sum_of_binomial_coefficients_at_even_indices(10) == 512", "assert sum_of_binomial_coefficients_at_even_indices(15) == 16384", "assert sum_of_binomial_coefficients_at_even_indices(20) == 524288", "assert sum_of_binomial_coefficients_at_even_indices(25) == 16777216", "assert sum_of_binomial_coefficients_at_even_indices(30) == 536870912"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at odd indices for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients_at_odd_indices(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if i % 2 != 0)", "task_id": "274_5b57520d-12ac-4e67-8e68-0414ab1dbd26", "test_setup_code": "", "test_list": ["assert sum_of_binomial_coefficients_at_odd_indices(0) == 0", "assert sum_of_binomial_coefficients_at_odd_indices(1) == 1", "assert sum_of_binomial_coefficients_at_odd_indices(2) == 1", "assert sum_of_binomial_coefficients_at_odd_indices(3) == 4", "assert sum_of_binomial_coefficients_at_odd_indices(4) == 5", "assert sum_of_binomial_coefficients_at_odd_indices(5) == 16", "assert sum_of_binomial_coefficients_at_odd_indices(6) == 22", "assert sum_of_binomial_coefficients_at_odd_indices(7) == 64", "assert sum_of_binomial_coefficients_at_odd_indices(8) == 85", "assert sum_of_binomial_coefficients_at_odd_indices(9) == 256", "assert sum_of_binomial_coefficients_at_odd_indices(10) == 341", "assert sum_of_binomial_coefficients_at_odd_indices(11) == 1024", "assert sum_of_binomial_coefficients_at_odd_indices(12) == 1365", "assert sum_of_binomial_coefficients_at_odd_indices(13) == 4096", "assert sum_of_binomial_coefficients_at_odd_indices(14) == 5461"], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def area_circle(r: float) -> float:\n  area = 3.1415 * r * r\n  return area", "task_id": "276_08b879e1-631a-40e3-a630-8a94ee9cfdc7", "test_setup_code": "", "test_list": ["assert area_circle(0) == 0.0", "assert area_circle(1) == 3.1415", "assert area_circle(2) == 12.566", "assert area_circle(0.5) == 0.785375", "assert area_circle(10) == 314.15", "assert area_circle(3.5) == 38.484375", "assert area_circle(100) == 31415.0", "assert area_circle(0.1) == 0.031415", "assert area_circle(1e-5) == 3.1415e-10", "assert area_circle(1e5) == 31415000000.0", "assert area_circle(123.456) == 47882.2511424", "assert area_circle(999.999) == 3141490.8585005", "assert area_circle(1.23456789) == 4.7882250812721", "assert area_circle(50) == 7853.75", "assert area_circle(7.89) == 195.561505"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n  perimeter = 2 * (length + width)\n  return perimeter", "task_id": "276_5a064c2d-2736-4799-b592-f5d9036769ad", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(10, 7) == 34", "assert perimeter_rectangle(2.5, 3.5) == 12", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(100, 50) == 300", "assert perimeter_rectangle(0.5, 0.5) == 2", "assert perimeter_rectangle(1.75, 2.25) == 8", "assert perimeter_rectangle(0, 10) == 20", "assert perimeter_rectangle(10, 0) == 20", "assert perimeter_rectangle(0.1, 0.2) == 0.6", "assert perimeter_rectangle(999, 1) == 2000", "assert perimeter_rectangle(123.45, 67.89) == 382.68", "assert perimeter_rectangle(3.14159, 2.71828) == 11.71974", "assert perimeter_rectangle(1e-5, 1e-5) == 4e-5"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r: float) -> float:\n  surface_area = 4 * 3.1415 * r * r\n  return surface_area", "task_id": "276_ce1465ec-69a5-4fe5-a4e7-7021d76818b8", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2.5) == 78.5375", "assert surface_area_sphere(10) == 1256.6", "assert surface_area_sphere(0.1) == 0.12566", "assert surface_area_sphere(100) == 125660.0", "assert surface_area_sphere(0.01) == 0.0012566", "assert surface_area_sphere(3.1415) == 124.0248975", "assert surface_area_sphere(1e-10) == 1.2566e-19", "assert surface_area_sphere(1e10) == 1.2566e+21", "assert surface_area_sphere(5) == 314.15", "assert surface_area_sphere(7.5) == 706.8575", "assert surface_area_sphere(0.5) == 3.1415", "assert surface_area_sphere(20) == 5026.4", "assert surface_area_sphere(0.25) == 0.785375"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base: float, height: float) -> float:\n  area = 0.5 * base * height\n  return area", "task_id": "276_c20db5cc-4c15-4782-985d-58fdf2091e42", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 10) == 0.0", "assert area_triangle(10, 0) == 0.0", "assert area_triangle(0, 0) == 0.0", "assert area_triangle(3.5, 2.0) == 3.5", "assert area_triangle(7, 8) == 28.0", "assert area_triangle(1, 1) == 0.5", "assert area_triangle(100, 200) == 10000.0", "assert area_triangle(0.1, 0.1) == 0.005", "assert area_triangle(123456.789, 98765.4321) == 6096631557.395", "assert area_triangle(2, 3) == 3.0", "assert area_triangle(5, 5) == 12.5", "assert area_triangle(6, 7) == 21.0", "assert area_triangle(9.5, 4.2) == 19.95", "assert area_triangle(1000, 1000) == 500000.0"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(length: float, width: float, height: float) -> float:\n  volume = length * width * height\n  return volume", "task_id": "276_16c5312e-8482-415e-bb61-ec751eecadc0", "test_setup_code": "", "test_list": ["assert volume_rectangular_prism(1, 1, 1) == 1", "assert volume_rectangular_prism(0, 5, 10) == 0", "assert volume_rectangular_prism(5, 0, 10) == 0", "assert volume_rectangular_prism(5, 10, 0) == 0", "assert volume_rectangular_prism(2.5, 3.5, 4.5) == 39.375", "assert volume_rectangular_prism(100, 200, 300) == 6000000", "assert volume_rectangular_prism(1.1, 2.2, 3.3) == 7.986", "assert volume_rectangular_prism(-1, 2, 3) == -6", "assert volume_rectangular_prism(1, -2, 3) == -6", "assert volume_rectangular_prism(1, 2, -3) == -6", "assert volume_rectangular_prism(0.1, 0.2, 0.3) == 0.006", "assert volume_rectangular_prism(1000, 2000, 3000) == 6000000000", "assert volume_rectangular_prism(1e-3, 1e-3, 1e-3) == 1e-9", "assert volume_rectangular_prism(1e3, 1e3, 1e3) == 1e9", "assert volume_rectangular_prism(1.234, 2.345, 3.456) == 10.0004544"], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(base: float, height: float) -> float:\n  area = base * height\n  return area", "task_id": "276_3f6a50d3-d1a4-414c-bdf7-71d57bec5d8f", "test_setup_code": "", "test_list": ["assert area_parallelogram(5, 10) == 50", "assert area_parallelogram(0, 10) == 0", "assert area_parallelogram(10, 0) == 0", "assert area_parallelogram(7.5, 3.2) == 24", "assert area_parallelogram(1, 1) == 1", "assert area_parallelogram(100, 200) == 20000", "assert area_parallelogram(0.5, 0.5) == 0.25", "assert area_parallelogram(3.3, 4.4) == 14.52", "assert area_parallelogram(1e-10, 1e-10) == 1e-20", "assert area_parallelogram(1e10, 1e10) == 1e20", "assert area_parallelogram(123456789, 987654321) == 121932631112635269", "assert area_parallelogram(3, 7.5) == 22.5", "assert area_parallelogram(2.5, 4) == 10", "assert area_parallelogram(6, 3.5) == 21", "assert area_parallelogram(9.9, 8.8) == 87.12"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(r: float) -> float:\n  circumference = 2 * 3.1415 * r\n  return circumference", "task_id": "276_4bfc69b8-1665-4178-b9a7-1f3bc00bd380", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 6.283", "assert circumference_circle(0) == 0.0", "assert circumference_circle(2.5) == 15.7075", "assert circumference_circle(-1) == -6.283", "assert circumference_circle(100) == 628.3", "assert circumference_circle(0.1) == 0.6283", "assert circumference_circle(3.1415) == 19.739175", "assert circumference_circle(10) == 62.83", "assert circumference_circle(50) == 314.15", "assert circumference_circle(0.0001) == 0.0006283", "assert circumference_circle(123456) == 775701.024", "assert circumference_circle(7.89) == 49.55835", "assert circumference_circle(1e-10) == 6.283e-10", "assert circumference_circle(1e10) == 62830000000.0", "assert circumference_circle(0.333) == 2.094639"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(side: float) -> float:\n  surface_area = 6 * side * side\n  return surface_area", "task_id": "276_806fd677-48f5-4647-bf92-741248610e57", "test_setup_code": "", "test_list": ["assert surface_area_cube(1) == 6", "assert surface_area_cube(2) == 24", "assert surface_area_cube(0) == 0", "assert surface_area_cube(3.5) == 73.5", "assert surface_area_cube(10) == 600", "assert surface_area_cube(0.1) == 0.06", "assert surface_area_cube(100) == 60000", "assert surface_area_cube(0.5) == 1.5", "assert surface_area_cube(1.1) == 7.26", "assert surface_area_cube(2.25) == 30.375", "assert surface_area_cube(0.01) == 0.0006", "assert surface_area_cube(50) == 15000", "assert surface_area_cube(0.333) == 0.665334", "assert surface_area_cube(5.5) == 181.5", "assert surface_area_cube(7.77) == 362.6898"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r: float) -> float:\n  volume = (4/3) * 3.1415 * r * r * r\n  return volume", "task_id": "276_b531a44c-0720-4b62-801d-379c3ca88379", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.188666666666666", "assert volume_sphere(0) == 0.0", "assert volume_sphere(2.5) == 65.4375", "assert volume_sphere(10) == 4188.666666666667", "assert volume_sphere(0.1) == 0.004188666666666666", "assert volume_sphere(100) == 4188666.666666667", "assert volume_sphere(3.14) == 129.68150333333332", "assert volume_sphere(1e-5) == 4.188666666666667e-15", "assert volume_sphere(1e5) == 4.188666666666667e+15", "assert volume_sphere(7.5) == 1767.1875", "assert volume_sphere(0.333) == 0.15438037037037035", "assert volume_sphere(50) == 523583.3333333334", "assert volume_sphere(0.0001) == 4.188666666666667e-12", "assert volume_sphere(123.456) == 7881231.18399136", "assert volume_sphere(0.5) == 0.5235833333333333"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last even number in the given array.", "code": "def find_last_even_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 == 0:\n            return i\n    return -1", "task_id": "275_906306af-2532-4e50-aec6-c79ced70276e", "test_setup_code": "", "test_list": ["assert find_last_even_position([1, 2, 3, 4, 5]) == 3", "assert find_last_even_position([1, 3, 5, 7, 9]) == -1", "assert find_last_even_position([2, 4, 6, 8, 10]) == 4", "assert find_last_even_position([1, 3, 5, 7, 8]) == 4", "assert find_last_even_position([]) == -1", "assert find_last_even_position([2]) == 0", "assert find_last_even_position([1]) == -1", "assert find_last_even_position([1, 2, 3, 4, 6, 5, 7, 8]) == 7", "assert find_last_even_position([1, 2, 3, 4, 6, 5, 7, 9]) == 4", "assert find_last_even_position([10, 20, 30, 40, 50]) == 4", "assert find_last_even_position([11, 13, 15, 17, 19]) == -1", "assert find_last_even_position([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 8", "assert find_last_even_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert find_last_even_position([1, 3, 5, 7, 9, 2]) == 5", "assert find_last_even_position([1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 87, 89, 91, 93, 95, 97, 99, 100]) == 50"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last prime number in the given array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_last_prime_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if is_prime(arr[i]):\n            return i\n    return -1", "task_id": "275_d0223264-c241-4279-a5b1-b04149b5a0bd", "test_setup_code": "", "test_list": ["assert find_last_prime_position([2, 3, 5, 7, 11]) == 4", "assert find_last_prime_position([4, 6, 8, 10, 12]) == -1", "assert find_last_prime_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6", "assert find_last_prime_position([29, 23, 19, 17, 13, 11, 7, 5, 3, 2]) == 0", "assert find_last_prime_position([0, 1, 4, 6, 8, 9, 10]) == -1", "assert find_last_prime_position([2]) == 0", "assert find_last_prime_position([4, 6, 8, 9, 10, 11]) == 5", "assert find_last_prime_position([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31]) == 10", "assert find_last_prime_position([15, 21, 27, 33, 39, 45, 51, 57, 63, 69]) == -1", "assert find_last_prime_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == 0", "assert find_last_prime_position([3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]) == 10", "assert find_last_prime_position([1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]) == 25", "assert find_last_prime_position([]) == -1", "assert find_last_prime_position([4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30]) == -1", "assert find_last_prime_position([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]) == 45"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last negative number in the given array.", "code": "def find_last_negative_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < 0:\n            return i\n    return -1", "task_id": "275_e6700644-2900-408d-8cbe-ca02e5f5ed32", "test_setup_code": "", "test_list": ["assert find_last_negative_position([1, 2, 3, -4, 5, -6]) == 5", "assert find_last_negative_position([1, 2, 3, 4, 5]) == -1", "assert find_last_negative_position([-1, -2, -3, -4, -5]) == 4", "assert find_last_negative_position([0, 0, 0, 0, 0]) == -1", "assert find_last_negative_position([-1, 2, -3, 4, -5]) == 4", "assert find_last_negative_position([-1]) == 0", "assert find_last_negative_position([1, -1]) == 1", "assert find_last_negative_position([1, 2, 3, 4, -1]) == 4", "assert find_last_negative_position([-1, 2, 3, 4, 5]) == 0", "assert find_last_negative_position([]) == -1", "assert find_last_negative_position([1, -2, 3, -4, 5, -6, 7, -8]) == 7", "assert find_last_negative_position([0, -1, 0, -2, 0, -3, 0, -4]) == 7", "assert find_last_negative_position([1, 2, -3, 4, 5, -6, 7, 8, -9]) == 8", "assert find_last_negative_position([1, 2, 3, 4, 5, 6, 7, 8, 9]) == -1", "assert find_last_negative_position([-1, -2, -3, -4, -5, -6, -7, -8, -9]) == 8"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last element that is a multiple of k in the given array.", "code": "def find_last_multiple_of_k_position(arr, k):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % k == 0:\n            return i\n    return -1", "task_id": "275_69baf13c-bde6-4257-8909-5d6d5eba04e0", "test_setup_code": "", "test_list": ["assert find_last_multiple_of_k_position([1, 2, 3, 4, 5, 6], 2) == 5", "assert find_last_multiple_of_k_position([1, 2, 3, 4, 5, 6], 3) == 5", "assert find_last_multiple_of_k_position([1, 2, 3, 4, 5, 6], 7) == -1", "assert find_last_multiple_of_k_position([10, 20, 30, 40, 50], 10) == 4", "assert find_last_multiple_of_k_position([10, 20, 30, 40, 50], 5) == 4", "assert find_last_multiple_of_k_position([10, 20, 30, 40, 50], 25) == -1", "assert find_last_multiple_of_k_position([1, 3, 5, 7, 9], 2) == -1", "assert find_last_multiple_of_k_position([0, 0, 0, 0, 0], 1) == 4", "assert find_last_multiple_of_k_position([1, 2, 3, 4, 5], 1) == 4", "assert find_last_multiple_of_k_position([1, 2, 3, 4, 5], 5) == 4", "assert find_last_multiple_of_k_position([1], 1) == 0", "assert find_last_multiple_of_k_position([1], 2) == -1", "assert find_last_multiple_of_k_position([], 1) == -1", "assert find_last_multiple_of_k_position([2, 4, 6, 8, 10, 12], 2) == 5", "assert find_last_multiple_of_k_position([2, 4, 6, 8, 10, 12], 3) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last element that is greater than x in the given array.", "code": "def find_last_greater_than_x_position(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > x:\n            return i\n    return -1", "task_id": "275_f5b1b1a5-995e-46cf-9cbe-d1f7207a3215", "test_setup_code": "", "test_list": ["assert find_last_greater_than_x_position([1, 2, 3, 4, 5], 3) == 4", "assert find_last_greater_than_x_position([1, 2, 3, 4, 5], 5) == -1", "assert find_last_greater_than_x_position([5, 4, 3, 2, 1], 3) == 1", "assert find_last_greater_than_x_position([1, 1, 1, 1, 1], 0) == 4", "assert find_last_greater_than_x_position([1, 1, 1, 1, 1], 1) == -1", "assert find_last_greater_than_x_position([], 3) == -1", "assert find_last_greater_than_x_position([3, 3, 3, 3, 3], 2) == 4", "assert find_last_greater_than_x_position([3, 3, 3, 3, 3], 3) == -1", "assert find_last_greater_than_x_position([1, 2, 3, 4, 5], 0) == 4", "assert find_last_greater_than_x_position([5, 4, 3, 2, 1], 0) == 4", "assert find_last_greater_than_x_position([1, 2, 3, 4, 5], 4) == 4", "assert find_last_greater_than_x_position([1, 2, 3, 4, 5], 2) == 4", "assert find_last_greater_than_x_position([2, 2, 2, 2, 2], 1) == 4", "assert find_last_greater_than_x_position([2, 2, 2, 2, 2], 2) == -1", "assert find_last_greater_than_x_position([1, 3, 5, 7, 9], 6) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last odd number in the given array.", "code": "def find_last_odd_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 != 0:\n            return i\n    return -1", "task_id": "275_d1a9b342-ae52-44ca-8845-a488801bab5a", "test_setup_code": "", "test_list": ["assert find_last_odd_position([1, 2, 3, 4, 5]) == 4", "assert find_last_odd_position([2, 4, 6, 8, 10]) == -1", "assert find_last_odd_position([1, 3, 5, 7, 9]) == 4", "assert find_last_odd_position([10, 20, 30, 40, 50, 51]) == 5", "assert find_last_odd_position([11, 22, 33, 44, 55, 66, 77]) == 6", "assert find_last_odd_position([2, 4, 6, 8, 1]) == 4", "assert find_last_odd_position([7]) == 0", "assert find_last_odd_position([2]) == -1", "assert find_last_odd_position([]) == -1", "assert find_last_odd_position([2, 4, 6, 8, 10, 3, 5, 7, 9]) == 8", "assert find_last_odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8", "assert find_last_odd_position([100, 200, 300, 400, 500, 501]) == 5", "assert find_last_odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 11]) == 9", "assert find_last_odd_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == -1", "assert find_last_odd_position([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last palindrome string in the given array.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef find_last_palindrome_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if is_palindrome(arr[i]):\n            return i\n    return -1", "task_id": "275_da65c54b-e2c5-4ebe-86cc-e576a9b7cbd2", "test_setup_code": "", "test_list": ["assert find_last_palindrome_position(['racecar', 'hello', 'world', 'level']) == 3", "assert find_last_palindrome_position(['abc', 'def', 'ghi']) == -1", "assert find_last_palindrome_position(['madam', 'noon', 'refer', 'civic']) == 3", "assert find_last_palindrome_position(['a', 'b', 'c', 'd', 'e']) == 4", "assert find_last_palindrome_position(['palindrome', 'not', 'a', 'racecar']) == 3", "assert find_last_palindrome_position(['12321', '45654', '78987']) == 2", "assert find_last_palindrome_position(['', 'a', '']) == 2", "assert find_last_palindrome_position(['', '']) == 1", "assert find_last_palindrome_position(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 25", "assert find_last_palindrome_position(['wow', 'noon', 'deified', 'civic', 'radar', 'level', 'rotor', 'kayak', 'reviver', 'racecar']) == 9", "assert find_last_palindrome_position(['not', 'a', 'single', 'palindrome']) == -1", "assert find_last_palindrome_position(['abba', 'racecar', 'madam', 'refer', 'noon']) == 4", "assert find_last_palindrome_position(['step', 'on', 'no', 'pets']) == 3", "assert find_last_palindrome_position(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a']) == 26", "assert find_last_palindrome_position(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '']) == 26"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that starts with a vowel in the given array.", "code": "def find_last_vowel_start_position(arr):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i][0] in vowels:\n            return i\n    return -1", "task_id": "275_66b922f2-fb76-42db-bfc7-3542d0cfb3a3", "test_setup_code": "", "test_list": ["assert find_last_vowel_start_position(['apple', 'banana', 'orange', 'umbrella']) == 3", "assert find_last_vowel_start_position(['banana', 'grape', 'kiwi', 'lemon']) == -1", "assert find_last_vowel_start_position(['Elephant', 'iguana', 'octopus', 'umbrella']) == 3", "assert find_last_vowel_start_position(['Apple', 'Banana', 'Orange', 'Umbrella']) == 3", "assert find_last_vowel_start_position(['apple', 'banana', 'orange', 'umbrella', 'iguana']) == 4", "assert find_last_vowel_start_position(['xylophone', 'yarn', 'zebra']) == -1", "assert find_last_vowel_start_position(['umbrella', 'elephant', 'iguana', 'octopus']) == 3", "assert find_last_vowel_start_position(['umbrella', 'elephant', 'iguana', 'octopus', 'apple']) == 4", "assert find_last_vowel_start_position(['']) == -1", "assert find_last_vowel_start_position(['a', 'e', 'i', 'o', 'u']) == 4", "assert find_last_vowel_start_position(['A', 'E', 'I', 'O', 'U']) == 4", "assert find_last_vowel_start_position(['banana', 'Apple', 'grape', 'Orange']) == 3", "assert find_last_vowel_start_position(['apple']) == 0", "assert find_last_vowel_start_position(['banana', 'grape', 'kiwi', 'Apple']) == 3", "assert find_last_vowel_start_position(['banana', 'grape', 'kiwi', 'lemon', '']) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that is longer than x characters in the given array.", "code": "def find_last_longer_than_x_position(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if len(arr[i]) > x:\n            return i\n    return -1", "task_id": "275_a7fa2da6-591f-480b-a928-0eac197e8d4f", "test_setup_code": "", "test_list": ["assert find_last_longer_than_x_position(['apple', 'banana', 'cherry'], 5) == 2", "assert find_last_longer_than_x_position(['apple', 'banana', 'cherry'], 6) == 1", "assert find_last_longer_than_x_position(['apple', 'banana', 'cherry'], 7) == -1", "assert find_last_longer_than_x_position(['a', 'bb', 'ccc', 'dddd'], 2) == 3", "assert find_last_longer_than_x_position(['a', 'bb', 'ccc', 'dddd'], 3) == 3", "assert find_last_longer_than_x_position(['a', 'bb', 'ccc', 'dddd'], 4) == -1", "assert find_last_longer_than_x_position([], 1) == -1", "assert find_last_longer_than_x_position(['short', 'tiny', 'minuscule'], 4) == 2", "assert find_last_longer_than_x_position(['short', 'tiny', 'minuscule'], 8) == 2", "assert find_last_longer_than_x_position(['short', 'tiny', 'minuscule'], 9) == -1", "assert find_last_longer_than_x_position(['one', 'two', 'three', 'four', 'five'], 3) == 4", "assert find_last_longer_than_x_position(['one', 'two', 'three', 'four', 'five'], 4) == 2", "assert find_last_longer_than_x_position(['one', 'two', 'three', 'four', 'five'], 5) == -1", "assert find_last_longer_than_x_position(['a', 'ab', 'abc', 'abcd', 'abcde'], 3) == 4", "assert find_last_longer_than_x_position(['a', 'ab', 'abc', 'abcd', 'abcde'], 4) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that is in uppercase in the given array.", "code": "def find_last_uppercase_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i].isupper():\n            return i\n    return -1", "task_id": "275_1e617a72-652e-4536-8e13-c68aacc19b89", "test_setup_code": "", "test_list": ["assert find_last_uppercase_position(['a', 'B', 'c', 'D']) == 3", "assert find_last_uppercase_position(['a', 'b', 'c', 'd']) == -1", "assert find_last_uppercase_position(['A', 'B', 'C', 'D']) == 3", "assert find_last_uppercase_position(['a', 'B', 'c', 'd', 'E', 'f']) == 4", "assert find_last_uppercase_position(['A']) == 0", "assert find_last_uppercase_position(['a']) == -1", "assert find_last_uppercase_position([]) == -1", "assert find_last_uppercase_position(['a', 'b', 'C', 'd', 'E']) == 4", "assert find_last_uppercase_position(['A', 'B', 'C', 'd', 'e']) == 2", "assert find_last_uppercase_position(['a', 'b', 'c', 'D', 'E']) == 4", "assert find_last_uppercase_position(['a', 'B', 'C', 'd', 'e', 'F']) == 5", "assert find_last_uppercase_position(['a', 'b', 'c', 'd', 'e']) == -1", "assert find_last_uppercase_position(['A', 'b', 'C', 'd', 'E', 'F']) == 5", "assert find_last_uppercase_position(['a', 'b', 'C', 'd', 'E', 'f', 'G']) == 6", "assert find_last_uppercase_position(['a', 'B', 'c', 'D', 'e', 'F', 'g', 'H']) == 7"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the length of the keys.", "code": "def filter_by_key_length(d, length):\n    result = {key: value for key, value in d.items() if len(key) >= length}\n    return result", "task_id": "277_b927dbfe-3a04-4f7d-ba52-ec3df4452be1", "test_setup_code": "", "test_list": ["assert filter_by_key_length({'a': 1, 'ab': 2, 'abc': 3}, 2) == {'ab': 2, 'abc': 3}", "assert filter_by_key_length({'a': 1, 'ab': 2, 'abc': 3}, 3) == {'abc': 3}", "assert filter_by_key_length({'a': 1, 'ab': 2, 'abc': 3}, 1) == {'a': 1, 'ab': 2, 'abc': 3}", "assert filter_by_key_length({'a': 1, 'ab': 2, 'abc': 3}, 4) == {}", "assert filter_by_key_length({}, 1) == {}", "assert filter_by_key_length({'a': 1, 'ab': 2, 'abc': 3}, 0) == {'a': 1, 'ab': 2, 'abc': 3}", "assert filter_by_key_length({'key1': 1, 'key2': 2, 'key3': 3}, 4) == {'key1': 1, 'key2': 2, 'key3': 3}", "assert filter_by_key_length({'key1': 1, 'key2': 2, 'key3': 3}, 5) == {}", "assert filter_by_key_length({'longkey': 1, 'short': 2}, 6) == {'longkey': 1}", "assert filter_by_key_length({'longkey': 1, 'short': 2}, 7) == {'longkey': 1}", "assert filter_by_key_length({'longkey': 1, 'short': 2}, 8) == {}", "assert filter_by_key_length({'': 1, 'a': 2, 'ab': 3}, 1) == {'a': 2, 'ab': 3}", "assert filter_by_key_length({'': 1, 'a': 2, 'ab': 3}, 2) == {'ab': 3}", "assert filter_by_key_length({'': 1, 'a': 2, 'ab': 3}, 0) == {'': 1, 'a': 2, 'ab': 3}", "assert filter_by_key_length({'key': 1, 'longerkey': 2}, 4) == {'key': 1, 'longerkey': 2}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the type of the values.", "code": "def filter_by_value_type(d, t):\n    result = {key: value for key, value in d.items() if isinstance(value, t)}\n    return result", "task_id": "277_e9839f7a-2622-4254-91bd-b983c6898e43", "test_setup_code": "", "test_list": ["assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0}, int) == {'a': 1}", "assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0}, str) == {'b': '2'}", "assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0}, float) == {'c': 3.0}", "assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0}, list) == {}", "assert filter_by_value_type({'a': [1, 2], 'b': '2', 'c': [3.0]}, list) == {'a': [1, 2], 'c': [3.0]}", "assert filter_by_value_type({}, int) == {}", "assert filter_by_value_type({'a': None, 'b': '2', 'c': 3.0}, type(None)) == {'a': None}", "assert filter_by_value_type({'a': True, 'b': False, 'c': 3.0}, bool) == {'a': True, 'b': False}", "assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0, 'd': 4}, int) == {'a': 1, 'd': 4}", "assert filter_by_value_type({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, str) == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_type({'a': 1, 'b': 2, 'c': 3}, int) == {'a': 1, 'b': 2, 'c': 3}", "assert filter_by_value_type({'a': 1.1, 'b': 2.2, 'c': 3.3}, float) == {'a': 1.1, 'b': 2.2, 'c': 3.3}", "assert filter_by_value_type({'a': '1', 'b': '2', 'c': '3'}, int) == {}", "assert filter_by_value_type({'a': [1, 2], 'b': (3, 4), 'c': {5, 6}}, tuple) == {'b': (3, 4)}", "assert filter_by_value_type({'a': 1, 'b': '2', 'c': 3.0, 'd': [4]}, (int, float)) == {'a': 1, 'c': 3.0}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a prefix of the keys.", "code": "def filter_by_key_prefix(d, prefix):\n    result = {key: value for key, value in d.items() if key.startswith(prefix)}\n    return result", "task_id": "277_fe7e32c2-bd63-4441-862d-438b6c53a167", "test_setup_code": "", "test_list": ["assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, 'ap') == {'apple': 1, 'apricot': 2}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, 'ba') == {'banana': 3}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, 'c') == {}", "assert filter_by_key_prefix({}, 'a') == {}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, '') == {'apple': 1, 'apricot': 2, 'banana': 3}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, 'apple') == {'apple': 1}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3}, 'banana') == {'banana': 3}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'ap') == {'apple': 1, 'apricot': 2, 'ap': 4}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'apri') == {'apricot': 2}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'ban') == {'banana': 3}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'bana') == {'banana': 3}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'a') == {'apple': 1, 'apricot': 2, 'ap': 4}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'appl') == {'apple': 1}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'apric') == {'apricot': 2}", "assert filter_by_key_prefix({'apple': 1, 'apricot': 2, 'banana': 3, 'ap': 4}, 'banan') == {'banana': 3}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a range of values.", "code": "def filter_by_value_range(d, min_val, max_val):\n    result = {key: value for key, value in d.items() if min_val <= value <= max_val}\n    return result", "task_id": "277_fd188a62-a1b4-438e-ad5f-023f74a7b719", "test_setup_code": "", "test_list": ["assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3}, 1, 2) == {'a': 1, 'b': 2}", "assert filter_by_value_range({'a': 10, 'b': 20, 'c': 30}, 15, 25) == {'b': 20}", "assert filter_by_value_range({'a': -5, 'b': 0, 'c': 5}, -10, 0) == {'a': -5, 'b': 0}", "assert filter_by_value_range({'a': 100, 'b': 200, 'c': 300}, 150, 350) == {'b': 200, 'c': 300}", "assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3}, 4, 5) == {}", "assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3}, 0, 3) == {'a': 1, 'b': 2, 'c': 3}", "assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3}, 2, 2) == {'b': 2}", "assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3}, 3, 3) == {'c': 3}", "assert filter_by_value_range({'a': -1, 'b': -2, 'c': -3}, -3, -1) == {'a': -1, 'b': -2, 'c': -3}", "assert filter_by_value_range({'a': 0, 'b': 0, 'c': 0}, 0, 0) == {'a': 0, 'b': 0, 'c': 0}", "assert filter_by_value_range({'a': 1}, 1, 1) == {'a': 1}", "assert filter_by_value_range({}, 1, 10) == {}", "assert filter_by_value_range({'a': 5, 'b': 10, 'c': 15}, 5, 10) == {'a': 5, 'b': 10}", "assert filter_by_value_range({'a': 5, 'b': 10, 'c': 15}, 0, 20) == {'a': 5, 'b': 10, 'c': 15}", "assert filter_by_value_range({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 2, 4) == {'b': 2, 'c': 3, 'd': 4}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a suffix of the keys.", "code": "def filter_by_key_suffix(d, suffix):\n    result = {key: value for key, value in d.items() if key.endswith(suffix)}\n    return result", "task_id": "277_a5959ce3-e149-48ba-9787-f60b4b727f05", "test_setup_code": "", "test_list": ["assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3}, 'e') == {'apple': 1, 'grape': 3}", "assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3}, 'a') == {'banana': 2}", "assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3}, 'x') == {}", "assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3}, '') == {'apple': 1, 'banana': 2, 'grape': 3}", "assert filter_by_key_suffix({}, 'e') == {}", "assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3}, 'le') == {'apple': 1}", "assert filter_by_key_suffix({'applepie': 1, 'bananapie': 2, 'grapepie': 3}, 'pie') == {'applepie': 1, 'bananapie': 2, 'grapepie': 3}", "assert filter_by_key_suffix({'applepie': 1, 'bananapie': 2, 'grapepie': 3}, 'applepie') == {'applepie': 1}", "assert filter_by_key_suffix({'applepie': 1, 'bananapie': 2, 'grapepie': 3}, 'grapepie') == {'grapepie': 3}", "assert filter_by_key_suffix({'applepie': 1, 'bananapie': 2, 'grapepie': 3}, 'piepie') == {}", "assert filter_by_key_suffix({'a': 1, 'b': 2, 'c': 3}, 'a') == {'a': 1}", "assert filter_by_key_suffix({'a': 1, 'b': 2, 'c': 3}, 'b') == {'b': 2}", "assert filter_by_key_suffix({'a': 1, 'b': 2, 'c': 3}, 'c') == {'c': 3}", "assert filter_by_key_suffix({'a': 1, 'b': 2, 'c': 3}, 'd') == {}", "assert filter_by_key_suffix({'apple': 1, 'banana': 2, 'grape': 3, 'pineapple': 4}, 'apple') == {'apple': 1, 'pineapple': 4}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of a substring in the keys.", "code": "def filter_by_key_inclusion(d, substring):\n    result = {key: value for key, value in d.items() if substring in key}\n    return result", "task_id": "277_2c26a7f9-0d6b-42a4-aade-bf18a40abd57", "test_setup_code": "", "test_list": ["assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, 'a') == {'apple': 1, 'banana': 2}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, 'z') == {}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, '') == {'apple': 1, 'banana': 2, 'cherry': 3}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, 'apple') == {'apple': 1}", "assert filter_by_key_inclusion({}, 'a') == {}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, 'e') == {'apple': 1, 'cherry': 3}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3}, 'cherry') == {'cherry': 3}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'gr') == {'grape': 4}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'p') == {'apple': 1, 'grape': 4}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'an') == {'banana': 2}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'ap') == {'apple': 1, 'grape': 4}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'rr') == {'cherry': 3}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'na') == {'banana': 2}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'le') == {'apple': 1}", "assert filter_by_key_inclusion({'apple': 1, 'banana': 2, 'cherry': 3, 'grape': 4}, 'ra') == {'grape': 4}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of a substring in the values (assuming values are strings).", "code": "def filter_by_value_inclusion(d, substring):\n    result = {key: value for key, value in d.items() if substring in value}\n    return result", "task_id": "277_6df00415-6341-47fd-b3b8-0c1eb11a3b87", "test_setup_code": "", "test_list": ["assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 'a') == {'a': 'apple', 'b': 'banana'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 'e') == {'a': 'apple', 'c': 'cherry'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 'z') == {}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, '') == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 'apple') == {'a': 'apple'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 'berry') == {}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'a') == {'a': 'apple', 'b': 'banana', 'd': 'date'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'ch') == {'c': 'cherry'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'date') == {'d': 'date'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'an') == {'b': 'banana'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'pp') == {'a': 'apple'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'rry') == {'c': 'cherry'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'te') == {'d': 'date'}", "assert filter_by_value_inclusion({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 'na') == {'b': 'banana'}", "assert filter_by_value_inclusion({}, 'a') == {}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the case of the keys ('upper' or 'lower').", "code": "def filter_by_key_case(d, case):\n    if case == 'upper':\n        result = {key: value for key, value in d.items() if key.isupper()}\n    elif case == 'lower':\n        result = {key: value for key, value in d.items() if key.islower()}\n    else:\n        result = {}\n    return result", "task_id": "277_8929548d-8a8a-491f-a122-069fb80dcb6c", "test_setup_code": "", "test_list": ["assert filter_by_key_case({'A': 1, 'b': 2, 'C': 3}, 'upper') == {'A': 1, 'C': 3}", "assert filter_by_key_case({'A': 1, 'b': 2, 'C': 3}, 'lower') == {'b': 2}", "assert filter_by_key_case({'a': 1, 'b': 2, 'c': 3}, 'upper') == {}", "assert filter_by_key_case({'A': 1, 'B': 2, 'C': 3}, 'lower') == {}", "assert filter_by_key_case({}, 'upper') == {}", "assert filter_by_key_case({}, 'lower') == {}", "assert filter_by_key_case({'a': 1, 'B': 2, 'c': 3, 'D': 4}, 'upper') == {'B': 2, 'D': 4}", "assert filter_by_key_case({'a': 1, 'B': 2, 'c': 3, 'D': 4}, 'lower') == {'a': 1, 'c': 3}", "assert filter_by_key_case({'A': 1, 'B': 2, 'C': 3, 'd': 4, 'e': 5}, 'upper') == {'A': 1, 'B': 2, 'C': 3}", "assert filter_by_key_case({'A': 1, 'B': 2, 'C': 3, 'd': 4, 'e': 5}, 'lower') == {'d': 4, 'e': 5}", "assert filter_by_key_case({'a': 1, 'b': 2, 'c': 3, 'D': 4, 'E': 5}, 'upper') == {'D': 4, 'E': 5}", "assert filter_by_key_case({'a': 1, 'b': 2, 'c': 3, 'D': 4, 'E': 5}, 'lower') == {'a': 1, 'b': 2, 'c': 3}", "assert filter_by_key_case({'A': 1, 'b': 2, 'C': 3, 'd': 4, 'E': 5, 'f': 6}, 'upper') == {'A': 1, 'C': 3, 'E': 5}", "assert filter_by_key_case({'A': 1, 'b': 2, 'C': 3, 'd': 4, 'E': 5, 'f': 6}, 'lower') == {'b': 2, 'd': 4, 'f': 6}", "assert filter_by_key_case({'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6}, 'upper') == {'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5, 'F': 6}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the length of the values (assuming values are strings).", "code": "def filter_by_value_length(d, length):\n    result = {key: value for key, value in d.items() if len(value) >= length}\n    return result", "task_id": "277_b7430c7f-522c-4002-8d6c-120e9fe00862", "test_setup_code": "", "test_list": ["assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 6) == {'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 5) == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 7) == {}", "assert filter_by_value_length({}, 3) == {}", "assert filter_by_value_length({'a': 'a', 'b': 'bb', 'c': 'ccc'}, 2) == {'b': 'bb', 'c': 'ccc'}", "assert filter_by_value_length({'a': 'a', 'b': 'bb', 'c': 'ccc'}, 1) == {'a': 'a', 'b': 'bb', 'c': 'ccc'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 4) == {'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 5) == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 6) == {'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 10) == {}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}, 3) == {'a': 'apple', 'b': 'banana', 'c': 'cherry', 'd': 'date'}", "assert filter_by_value_length({'a': 'apple'}, 5) == {'a': 'apple'}", "assert filter_by_value_length({'a': 'apple'}, 6) == {}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 0) == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}", "assert filter_by_value_length({'a': 'apple', 'b': 'banana', 'c': 'cherry'}, 1) == {'a': 'apple', 'b': 'banana', 'c': 'cherry'}"], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of substrings in both keys and values.", "code": "def filter_by_key_value_match(d, key_substring, value_substring):\n    result = {key: value for key, value in d.items() if key_substring in key and value_substring in value}\n    return result", "task_id": "277_0f7115b7-1309-4ecb-8faf-4a75fe23769e", "test_setup_code": "", "test_list": ["assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'a', 'fruit') == {'banana': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'a', 'vegetable') == {}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'c', 'vegetable') == {'carrot': 'vegetable'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'p', 'fruit') == {'apple': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'b', 'fruit') == {'banana': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'x', 'fruit') == {}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'a', 'x') == {}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, '', 'fruit') == {'apple': 'fruit', 'banana': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'a', '') == {'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, '', '') == {'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'apple', 'fruit') == {'apple': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'carrot', 'vegetable') == {'carrot': 'vegetable'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'banana', 'fruit') == {'banana': 'fruit'}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'carrot', 'fruit') == {}", "assert filter_by_key_value_match({'apple': 'fruit', 'banana': 'fruit', 'carrot': 'vegetable'}, 'apple', 'vegetable') == {}"], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def find_triangular_number(n):\n\treturn n * (n + 1) // 2", "task_id": "279_e3d9df55-ba97-405d-a698-6c28d6089ce3", "test_setup_code": "", "test_list": ["assert find_triangular_number(1) == 1", "assert find_triangular_number(2) == 3", "assert find_triangular_number(3) == 6", "assert find_triangular_number(4) == 10", "assert find_triangular_number(5) == 15", "assert find_triangular_number(10) == 55", "assert find_triangular_number(0) == 0", "assert find_triangular_number(50) == 1275", "assert find_triangular_number(100) == 5050", "assert find_triangular_number(500) == 125250", "assert find_triangular_number(1000) == 500500", "assert find_triangular_number(999) == 499500", "assert find_triangular_number(1234) == 761995", "assert find_triangular_number(12345) == 76205685", "assert find_triangular_number(2147483647) == 2305843008139952128"], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def find_square_number(n):\n\treturn n * n", "task_id": "279_519a18e2-634f-458a-8fc1-c43f3242c233", "test_setup_code": "", "test_list": ["assert find_square_number(0) == 0", "assert find_square_number(1) == 1", "assert find_square_number(2) == 4", "assert find_square_number(3) == 9", "assert find_square_number(4) == 16", "assert find_square_number(5) == 25", "assert find_square_number(10) == 100", "assert find_square_number(15) == 225", "assert find_square_number(20) == 400", "assert find_square_number(50) == 2500", "assert find_square_number(100) == 10000", "assert find_square_number(123) == 15129", "assert find_square_number(999) == 998001", "assert find_square_number(1000) == 1000000", "assert find_square_number(10000) == 100000000"], "challenge_test_list": []}
{"text": "Write a function to find the nth octagonal number.", "code": "def find_octagonal_number(n):\n\treturn n * (3 * n - 2)", "task_id": "279_864641e6-85f7-47c3-b0b3-5fb625d247e4", "test_setup_code": "", "test_list": ["assert find_octagonal_number(1) == 1", "assert find_octagonal_number(2) == 10", "assert find_octagonal_number(3) == 27", "assert find_octagonal_number(4) == 52", "assert find_octagonal_number(5) == 85", "assert find_octagonal_number(6) == 126", "assert find_octagonal_number(7) == 175", "assert find_octagonal_number(8) == 232", "assert find_octagonal_number(9) == 297", "assert find_octagonal_number(10) == 370", "assert find_octagonal_number(0) == 0", "assert find_octagonal_number(-1) == -5", "assert find_octagonal_number(20) == 1140", "assert find_octagonal_number(50) == 7350", "assert find_octagonal_number(100) == 29900"], "challenge_test_list": []}
{"text": "Write a function to find the nth dodecagonal number.", "code": "def find_dodecagonal_number(n):\n\treturn n * (5 * n - 4)", "task_id": "279_2053e091-703a-41ef-b499-d7f3d7a64bdb", "test_setup_code": "", "test_list": ["assert find_dodecagonal_number(1) == 1", "assert find_dodecagonal_number(2) == 12", "assert find_dodecagonal_number(3) == 33", "assert find_dodecagonal_number(4) == 64", "assert find_dodecagonal_number(5) == 105", "assert find_dodecagonal_number(10) == 460", "assert find_dodecagonal_number(20) == 1860", "assert find_dodecagonal_number(0) == 0", "assert find_dodecagonal_number(-1) == -9", "assert find_dodecagonal_number(100) == 49500", "assert find_dodecagonal_number(50) == 12250", "assert find_dodecagonal_number(15) == 975", "assert find_dodecagonal_number(25) == 2475", "assert find_dodecagonal_number(30) == 3570", "assert find_dodecagonal_number(7) == 231"], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def find_tetrahedral_number(n):\n\treturn n * (n + 1) * (n + 2) // 6", "task_id": "279_a4f729c6-b5a3-4753-a64c-d8f32b683218", "test_setup_code": "", "test_list": ["assert find_tetrahedral_number(0) == 0", "assert find_tetrahedral_number(1) == 1", "assert find_tetrahedral_number(2) == 4", "assert find_tetrahedral_number(3) == 10", "assert find_tetrahedral_number(4) == 20", "assert find_tetrahedral_number(5) == 35", "assert find_tetrahedral_number(6) == 56", "assert find_tetrahedral_number(7) == 84", "assert find_tetrahedral_number(8) == 120", "assert find_tetrahedral_number(9) == 165", "assert find_tetrahedral_number(10) == 220", "assert find_tetrahedral_number(15) == 680", "assert find_tetrahedral_number(20) == 1540", "assert find_tetrahedral_number(50) == 22100", "assert find_tetrahedral_number(100) == 171700"], "challenge_test_list": []}
{"text": "Write a function to find the nth cubic number.", "code": "def find_cubic_number(n):\n\treturn n * n * n", "task_id": "279_8096c383-3a36-4918-89f4-d3a577b4c6c1", "test_setup_code": "", "test_list": ["assert find_cubic_number(0) == 0", "assert find_cubic_number(1) == 1", "assert find_cubic_number(2) == 8", "assert find_cubic_number(3) == 27", "assert find_cubic_number(4) == 64", "assert find_cubic_number(5) == 125", "assert find_cubic_number(10) == 1000", "assert find_cubic_number(11) == 1331", "assert find_cubic_number(12) == 1728", "assert find_cubic_number(20) == 8000", "assert find_cubic_number(50) == 125000", "assert find_cubic_number(100) == 1000000", "assert find_cubic_number(-1) == -1", "assert find_cubic_number(-2) == -8", "assert find_cubic_number(-3) == -27"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first string in the given tuple.", "code": "def count_before_string(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, str):\n            break\n    return count", "task_id": "278_30516ae8-eb64-40ac-aa5a-d3231ebcf0c9", "test_setup_code": "", "test_list": ["assert count_before_string((1, 2, 3, 'hello', 5)) == 3", "assert count_before_string(('hello', 2, 3, 4, 5)) == 0", "assert count_before_string((1, 2, 3, 4, 5)) == 5", "assert count_before_string(()) == 0", "assert count_before_string(('a',)) == 0", "assert count_before_string((1, 2, 'a', 'b', 'c')) == 2", "assert count_before_string((1, 2, 3, 4, '')) == 4", "assert count_before_string((None, False, 0, 'text')) == 3", "assert count_before_string((1.5, 2.7, 'string', 4)) == 2", "assert count_before_string(([], {}, (), 'string')) == 3", "assert count_before_string((True, False, 'True')) == 2", "assert count_before_string((0, '', 2, 3)) == 1", "assert count_before_string(([1, 2], (3, 4), {'a': 1}, 'dict')) == 3", "assert count_before_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 'ten')) == 9", "assert count_before_string((object(), int, float, str, 'class')) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first float in the given tuple.", "code": "def count_before_float(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, float):\n            break\n    return count", "task_id": "278_8fba0ce8-388e-45ab-9e45-970d30228fd5", "test_setup_code": "", "test_list": ["assert count_before_float((1, 2, 3, 4.0, 5)) == 3", "assert count_before_float((1.0, 2, 3, 4)) == 0", "assert count_before_float((1, 2, 3, 4, 5)) == 5", "assert count_before_float((1, 'a', 3.5, 4, 5)) == 2", "assert count_before_float((1, 2, 3, 4, 5.5, 6.0)) == 5", "assert count_before_float((1, 2, 3.0, 4, 5)) == 2", "assert count_before_float((1, 2, 3, '4.0', 5)) == 5", "assert count_before_float((1, 2, 3, 4, 5, 6.0)) == 5", "assert count_before_float((1, 2, 3, 4, 5, 6)) == 6", "assert count_before_float((1, 2, 3, 4, 5, 6, 7.0)) == 6", "assert count_before_float((1.1, 2.2, 3.3, 4.4)) == 0", "assert count_before_float((1, 2, 3, 4, 5, 6, 7, 8, 9.0)) == 8", "assert count_before_float((1, 2, 3, 4, 5, 6, 7, 8, 9)) == 9", "assert count_before_float((1, 2, 3.0, 4.0, 5.0)) == 2", "assert count_before_float(()) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first negative number in the given tuple.", "code": "def count_before_negative(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, (int, float)) and ele < 0:\n            break\n    return count", "task_id": "278_2a24de90-263d-4eb2-8c27-518231aa6c0d", "test_setup_code": "", "test_list": ["assert count_before_negative((1, 2, 3, -1, 4, 5)) == 3", "assert count_before_negative((0, -1, 2, 3)) == 1", "assert count_before_negative((10, 20, 30, 40)) == 4", "assert count_before_negative((-1, 2, 3, 4)) == 0", "assert count_before_negative((1, 2, 3, 4, -5, -6)) == 4", "assert count_before_negative((1, 2, 3, 4, 5)) == 5", "assert count_before_negative((1, 2, 3, -1, -2, -3)) == 3", "assert count_before_negative((1.1, 2.2, 3.3, -4.4, 5.5)) == 3", "assert count_before_negative((0, 0, 0, -1)) == 3", "assert count_before_negative((100, 200, 300, -400, 500)) == 3", "assert count_before_negative((1, -1, 1, -1)) == 1", "assert count_before_negative((1, 2, 3, 4, 5, -1)) == 5", "assert count_before_negative(()) == 0", "assert count_before_negative((0, 0, 0, 0, 0, 0)) == 6", "assert count_before_negative((1, -1, -2, -3, -4)) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first list in the given tuple.", "code": "def count_before_list(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, list):\n            break\n    return count", "task_id": "278_83f15c98-1474-4993-a27f-fb49a3ffa2f5", "test_setup_code": "", "test_list": ["assert count_before_list((1, 2, 3, [4, 5], 6)) == 3", "assert count_before_list((1, [2, 3], 4, 5)) == 1", "assert count_before_list((1, 2, 3, 4, 5)) == 5", "assert count_before_list(([], 1, 2, 3)) == 0", "assert count_before_list((1, 2, 3, [], 4, 5)) == 3", "assert count_before_list((1, 'a', 3.14, [4, 5], 6)) == 3", "assert count_before_list((1, 2, 3, (4, 5), [6, 7])) == 4", "assert count_before_list((1, 2, [3, 4], [5, 6])) == 2", "assert count_before_list((1, 2, 3, 4, [5, 6], 7, 8)) == 4", "assert count_before_list((1, 2, 3, (4, 5), 6, [7, 8])) == 5", "assert count_before_list((1, 2, 3, 'abc', [4, 5])) == 4", "assert count_before_list((1, 2, 3, {'a': 1}, [4, 5])) == 4", "assert count_before_list((1, 2, 3, None, [4, 5])) == 4", "assert count_before_list((1, 2, 3, [4, 5], [6, 7])) == 3", "assert count_before_list((1, 2, [3, 4], 5, 6)) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first dictionary in the given tuple.", "code": "def count_before_dict(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, dict):\n            break\n    return count", "task_id": "278_82838335-6879-4791-b2a1-bbae54973461", "test_setup_code": "", "test_list": ["assert count_before_dict((1, 2, 3, {'a': 1}, 4)) == 3", "assert count_before_dict(({'a': 1}, 2, 3, 4)) == 0", "assert count_before_dict((1, 2, 3, 4)) == 4", "assert count_before_dict(()) == 0", "assert count_before_dict((1, 2, {'a': 1}, {'b': 2})) == 2", "assert count_before_dict((1, 'a', 3.14, {'key': 'value'}, [5, 6])) == 3", "assert count_before_dict((1, 2, 3, [4, 5], {'a': 1})) == 4", "assert count_before_dict(({'a': 1}, {'b': 2}, 3, 4)) == 0", "assert count_before_dict((1, 2, 3, 4, 5, {'a': 1})) == 5", "assert count_before_dict((1, {'a': 1}, 3, 4, 5)) == 1", "assert count_before_dict((1, 2, 3, 'string', {'a': 1})) == 4", "assert count_before_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, {'a': 1})) == 9", "assert count_before_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert count_before_dict(({'a': 1},)) == 0", "assert count_before_dict((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, {'a': 1})) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first odd number in the given tuple.", "code": "def count_before_odd(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, int) and ele % 2 != 0:\n            break\n    return count", "task_id": "278_777defa2-716b-4ee7-b23e-c431679ddb88", "test_setup_code": "", "test_list": ["assert count_before_odd((2, 4, 6, 8, 10, 3, 5)) == 5", "assert count_before_odd((1, 2, 3, 4, 5)) == 0", "assert count_before_odd((2, 4, 6, 8, 10)) == 5", "assert count_before_odd((2, 4, 6, 8, 11, 13, 15)) == 4", "assert count_before_odd((0, 0, 0, 0, 1)) == 4", "assert count_before_odd((2, 4, 6, 8, 10, 12)) == 6", "assert count_before_odd((2, 4, 6, 8, 10, 12, 13, 14)) == 6", "assert count_before_odd((2, 4, 6, 8, 10, 12, 14, 16)) == 8", "assert count_before_odd((3, 5, 7, 9, 11)) == 0", "assert count_before_odd((2, 4, 6, 8, 10, 12, 14, 1)) == 7", "assert count_before_odd((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 21)) == 10", "assert count_before_odd((2, 4, 6, 8, 10, 12, 14, 16, 18, 20)) == 10", "assert count_before_odd((0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 1)) == 14", "assert count_before_odd((2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30)) == 15", "assert count_before_odd(()) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first None value in the given tuple.", "code": "def count_before_none(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is None:\n            break\n    return count", "task_id": "278_fd1afb73-03f5-419b-b65c-49c40c3f7531", "test_setup_code": "", "test_list": ["assert count_before_none((1, 2, 3, None, 4, 5)) == 3", "assert count_before_none((None, 1, 2, 3)) == 0", "assert count_before_none((1, 2, 3, 4, 5)) == 5", "assert count_before_none(()) == 0", "assert count_before_none((None,)) == 0", "assert count_before_none((1, None, 2, 3, 4)) == 1", "assert count_before_none((1, 2, 3, None, None, 4)) == 3", "assert count_before_none((1, 2, 3, 4, None)) == 4", "assert count_before_none((1, 2, 3, 4, 5, None)) == 5", "assert count_before_none((None, None, None)) == 0", "assert count_before_none((1, 2, None, 3, 4, None)) == 2", "assert count_before_none((1, 2, 3, 4, 5, 6, None)) == 6", "assert count_before_none((1, 'a', None, 'b', 2)) == 2", "assert count_before_none((None, 1, None, 2, None)) == 0", "assert count_before_none((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, None)) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first True value in the given tuple.", "code": "def count_before_true(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is True:\n            break\n    return count", "task_id": "278_df1c1c4c-4b7e-412d-9731-d0ecb8c8947f", "test_setup_code": "", "test_list": ["assert count_before_true((False, False, True, False)) == 2", "assert count_before_true((True, False, False, True)) == 0", "assert count_before_true((False, False, False, False)) == 4", "assert count_before_true((False, True, True, True)) == 1", "assert count_before_true((True,)) == 0", "assert count_before_true((False,)) == 1", "assert count_before_true(()) == 0", "assert count_before_true((False, False, False, True, False, True)) == 3", "assert count_before_true((False, True, False, True)) == 1", "assert count_before_true((False, False, False, False, True)) == 4", "assert count_before_true((True, True, True, True)) == 0", "assert count_before_true((False, False, False, False, False, True)) == 5", "assert count_before_true((False, False, False, False, False, False)) == 6", "assert count_before_true((False, False, False, False, False, False, True)) == 6", "assert count_before_true((False, False, False, False, False, False, False, True)) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first False value in the given tuple.", "code": "def count_before_false(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is False:\n            break\n    return count", "task_id": "278_de618bd9-68c0-4ac2-8cc3-b45dfb2f9e34", "test_setup_code": "", "test_list": ["assert count_before_false((True, True, False, True)) == 2", "assert count_before_false((False, True, True, True)) == 0", "assert count_before_false((True, True, True, True)) == 4", "assert count_before_false((True, False, False, True)) == 1", "assert count_before_false((False, False, False, False)) == 0", "assert count_before_false((True, True, True, False, True, True)) == 3", "assert count_before_false((True, True, True, True, True, False)) == 5", "assert count_before_false((True,)) == 1", "assert count_before_false((False,)) == 0", "assert count_before_false(()) == 0", "assert count_before_false((True, False)) == 1", "assert count_before_false((True, True, True, True, True)) == 5", "assert count_before_false((True, False, True, False)) == 1", "assert count_before_false((True, True, True, False, False, True, True)) == 3", "assert count_before_false((True, True, False, False, False, False)) == 2"], "challenge_test_list": []}
{"text": "Write a python function to check if there are any duplicate elements in a given list.", "code": "def has_duplicates(test_list):\n    return len(test_list) != len(set(test_list))", "task_id": "281_21d8a8f9-c114-46be-adea-d3e1fc2a1158", "test_setup_code": "", "test_list": ["assert has_duplicates([1, 2, 3, 4, 5]) == False", "assert has_duplicates([1, 2, 3, 4, 5, 5]) == True", "assert has_duplicates([]) == False", "assert has_duplicates([1]) == False", "assert has_duplicates([1, 1]) == True", "assert has_duplicates([1, 2, 3, 4, 4, 5, 6, 7, 8, 9, 10]) == True", "assert has_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False", "assert has_duplicates([1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "assert has_duplicates(['a', 'b', 'c', 'd', 'e']) == False", "assert has_duplicates(['a', 'b', 'c', 'd', 'a']) == True", "assert has_duplicates([1, 'a', 2, 'b', 3, 'c']) == False", "assert has_duplicates([1, 'a', 2, 'b', 3, 'c', 1]) == True", "assert has_duplicates([None, None]) == True", "assert has_duplicates([None, 1, 2, 3]) == False", "assert has_duplicates([True, False, True]) == True"], "challenge_test_list": []}
{"text": "Write a python function to return the number of unique elements in a given list.", "code": "def unique_elements_count(test_list):\n    return len(set(test_list))", "task_id": "281_810ebbaa-4731-416a-b431-cf9bc081a5d5", "test_setup_code": "", "test_list": ["assert unique_elements_count([]) == 0", "assert unique_elements_count([1]) == 1", "assert unique_elements_count([1, 1, 1, 1]) == 1", "assert unique_elements_count([1, 2, 3, 4, 5]) == 5", "assert unique_elements_count([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == 4", "assert unique_elements_count([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == 5", "assert unique_elements_count(['a', 'b', 'c', 'a', 'b', 'c']) == 3", "assert unique_elements_count(['apple', 'banana', 'apple', 'cherry', 'banana']) == 3", "assert unique_elements_count([True, False, True, False]) == 2", "assert unique_elements_count([None, None, None]) == 1", "assert unique_elements_count([1, '1', 1.0, '1.0']) == 4", "assert unique_elements_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert unique_elements_count([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 5", "assert unique_elements_count(['a', 'A', 'b', 'B']) == 4", "assert unique_elements_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to return the first duplicate element in a given list. If no duplicates are found, return -1.", "code": "def first_duplicate(test_list):\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return item\n        seen.add(item)\n    return -1", "task_id": "281_58a71d90-3c8a-4725-8c46-23ecb7ce8004", "test_setup_code": "", "test_list": ["assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 1", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == -1", "assert first_duplicate([1, 1, 1, 1, 1]) == 1", "assert first_duplicate([5, 3, 4, 2, 3, 5, 6]) == 3", "assert first_duplicate([]) == -1", "assert first_duplicate([1]) == -1", "assert first_duplicate([2, 3, 4, 5, 6, 7, 8, 9, 10, 2]) == 2", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == 10", "assert first_duplicate([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 90]) == 90", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0]) == 0", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2]) == 1", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 2, 1]) == 2", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 3, 3]) == 3", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 4]) == 4", "assert first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 5, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to check if all elements in a given list are even numbers.", "code": "def all_elements_even(test_list):\n    return all(x % 2 == 0 for x in test_list)", "task_id": "281_8815e70b-c98b-4860-8bb9-37ef1ed4f1e4", "test_setup_code": "", "test_list": ["assert all_elements_even([2, 4, 6, 8]) == True", "assert all_elements_even([1, 2, 3, 4]) == False", "assert all_elements_even([0, 2, 4, 6]) == True", "assert all_elements_even([2, 4, 6, 7]) == False", "assert all_elements_even([]) == True", "assert all_elements_even([2]) == True", "assert all_elements_even([1]) == False", "assert all_elements_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == True", "assert all_elements_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 19]) == False", "assert all_elements_even([-2, -4, -6, -8]) == True", "assert all_elements_even([-2, -4, -6, -7]) == False", "assert all_elements_even([0]) == True", "assert all_elements_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == True", "assert all_elements_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 31]) == False", "assert all_elements_even([1000000, 2000000, 3000000]) == True"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a given list.", "code": "def count_odd_elements(test_list):\n    return sum(1 for x in test_list if x % 2 != 0)", "task_id": "281_6ed9aef1-a4a1-4266-b2f8-767f77ddfb48", "test_setup_code": "", "test_list": ["assert count_odd_elements([]) == 0", "assert count_odd_elements([1, 2, 3, 4, 5]) == 3", "assert count_odd_elements([2, 4, 6, 8, 10]) == 0", "assert count_odd_elements([1, 3, 5, 7, 9]) == 5", "assert count_odd_elements([0, 1, 2, 3, 4]) == 2", "assert count_odd_elements([-1, -2, -3, -4, -5]) == 3", "assert count_odd_elements([1001, 1002, 1003, 1004, 1005]) == 3", "assert count_odd_elements([0]) == 0", "assert count_odd_elements([1]) == 1", "assert count_odd_elements([2]) == 0", "assert count_odd_elements([-1]) == 1", "assert count_odd_elements([-2]) == 0", "assert count_odd_elements([1, 1, 1, 1, 1]) == 5", "assert count_odd_elements([2, 2, 2, 2, 2]) == 0", "assert count_odd_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all unique elements in a given list.", "code": "def sum_of_unique_elements(test_list):\n    return sum(set(test_list))", "task_id": "281_fafffa49-38a3-43df-8934-7f623612a01d", "test_setup_code": "", "test_list": ["assert sum_of_unique_elements([1, 2, 3, 4, 5]) == 15", "assert sum_of_unique_elements([1, 1, 1, 1, 1]) == 1", "assert sum_of_unique_elements([1, 2, 2, 3, 3, 4, 4, 5, 5]) == 15", "assert sum_of_unique_elements([]) == 0", "assert sum_of_unique_elements([0, 0, 0, 0]) == 0", "assert sum_of_unique_elements([1, -1, 2, -2, 3, -3]) == 0", "assert sum_of_unique_elements([10, 20, 30, 40, 50]) == 150", "assert sum_of_unique_elements([5, 5, 5, 5, 10, 10, 10, 10]) == 15", "assert sum_of_unique_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_of_unique_elements([100, 200, 300, 400, 500]) == 1500", "assert sum_of_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_of_unique_elements([1, 2, 3, 4, 5, 1, 2, 3, 4, 5]) == 15", "assert sum_of_unique_elements([1]) == 1", "assert sum_of_unique_elements([1000, 2000, 3000, 1000, 2000, 3000]) == 6000", "assert sum_of_unique_elements([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a list containing numbers from 1 to n.", "code": "def find_missing_number(test_list, n):\n    return sum(range(1, n+1)) - sum(test_list)", "task_id": "281_bbd0e714-6adc-4244-808b-22697e5a4e84", "test_setup_code": "", "test_list": ["assert find_missing_number([1, 2, 4, 5], 5) == 3", "assert find_missing_number([2, 3, 4, 5], 5) == 1", "assert find_missing_number([1, 2, 3, 4], 5) == 5", "assert find_missing_number([1, 3, 4, 5], 5) == 2", "assert find_missing_number([1, 2, 3, 5], 5) == 4", "assert find_missing_number([1], 2) == 2", "assert find_missing_number([2], 2) == 1", "assert find_missing_number([], 1) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 10], 10) == 9", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 9, 10], 10) == 8", "assert find_missing_number([2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 1", "assert find_missing_number([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 10", "assert find_missing_number([1, 2, 3, 4, 5, 6, 8, 9, 10], 10) == 7", "assert find_missing_number([1, 2, 4, 5, 6, 7, 8, 9, 10], 10) == 3"], "challenge_test_list": []}
{"text": "Write a python function to return a new list that is the reverse of the given list.", "code": "def reverse_list(test_list):\n    return test_list[::-1]", "task_id": "281_da631abf-8bd2-4bd3-8370-621e9b27cce0", "test_setup_code": "", "test_list": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([]) == []", "assert reverse_list([1]) == [1]", "assert reverse_list(['a', 'b', 'c']) == ['c', 'b', 'a']", "assert reverse_list([1, 'a', 3.5, True]) == [True, 3.5, 'a', 1]", "assert reverse_list([1, 2, 2, 3, 3, 3]) == [3, 3, 3, 2, 2, 1]", "assert reverse_list([None, True, False]) == [False, True, None]", "assert reverse_list([0, -1, -2, -3]) == [-3, -2, -1, 0]", "assert reverse_list([1, [2, 3], [4, 5]]) == [[4, 5], [2, 3], 1]", "assert reverse_list(['apple', 'banana', 'cherry']) == ['cherry', 'banana', 'apple']", "assert reverse_list(['']) == ['']", "assert reverse_list([1, 2, [3, 4], 5]) == [5, [3, 4], 2, 1]", "assert reverse_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_list([True, False, True, False]) == [False, True, False, True]", "assert reverse_list(['a', 1, 'b', 2, 'c', 3]) == [3, 'c', 2, 'b', 1, 'a']"], "challenge_test_list": []}
{"text": "Write a python function to check if a given list is a palindrome.", "code": "def is_palindrome(test_list):\n    return test_list == test_list[::-1]", "task_id": "281_b139db4d-bfcd-4be2-8389-4dfc067ff046", "test_setup_code": "", "test_list": ["assert is_palindrome([]) == True", "assert is_palindrome([1]) == True", "assert is_palindrome([1, 2, 1]) == True", "assert is_palindrome([1, 2, 2, 1]) == True", "assert is_palindrome([1, 2, 3, 2, 1]) == True", "assert is_palindrome([1, 2, 3, 4, 5]) == False", "assert is_palindrome([1, 2, 3, 4, 3, 2, 1]) == True", "assert is_palindrome([1, 2, 3, 4, 4, 3, 2, 1]) == True", "assert is_palindrome(['a', 'b', 'a']) == True", "assert is_palindrome(['a', 'b', 'c', 'b', 'a']) == True", "assert is_palindrome(['a', 'b', 'c', 'd']) == False", "assert is_palindrome(['a', 'a', 'a', 'a']) == True", "assert is_palindrome([1, 'a', 1]) == True", "assert is_palindrome([1, 'a', 'a', 1]) == True", "assert is_palindrome([1, 'a', 'b', 1]) == False"], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a given list and return the new list.", "code": "def remove_duplicates(test_list):\n    return list(set(test_list))", "task_id": "281_730f40ad-f4dc-4264-90ec-7d9f13dc87f7", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([5, 4, 3, 2, 1, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert remove_duplicates([1, 2, 3, 4, 5, 5, 5, 5, 5, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert remove_duplicates(['a', 'b', 'b', 'c', 'd', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']", "assert remove_duplicates(['a', 'a', 'a', 'a']) == ['a']", "assert remove_duplicates(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']", "assert remove_duplicates(['a', 'b', 'c', 'd', 'e', 'e', 'd', 'c', 'b', 'a']) == ['a', 'b', 'c', 'd', 'e']", "assert remove_duplicates([1, 'a', 1, 'a']) == [1, 'a']", "assert remove_duplicates([1, 1.0, '1', '1']) == [1, '1']"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list.", "code": "def find_max_element(arr: list) -> int:\n    max_element = arr[0]\n    for element in arr:\n        if element > max_element:\n            max_element = element\n    return max_element", "task_id": "280_e2f9b6cd-a623-4e2e-8be2-fc03a6c7a4f0", "test_setup_code": "", "test_list": ["assert find_max_element([1, 2, 3, 4, 5]) == 5", "assert find_max_element([-1, -2, -3, -4, -5]) == -1", "assert find_max_element([0, 0, 0, 0, 0]) == 0", "assert find_max_element([1]) == 1", "assert find_max_element([100, 200, 300, 400, 500]) == 500", "assert find_max_element([-10, -20, -30, -40, -50]) == -10", "assert find_max_element([5, 4, 3, 2, 1]) == 5", "assert find_max_element([1, 3, 2, 5, 4]) == 5", "assert find_max_element([2, 2, 2, 2, 2]) == 2", "assert find_max_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert find_max_element([-1, 0, 1]) == 1", "assert find_max_element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 1", "assert find_max_element([1000, 2000, 3000, 4000, 5000]) == 5000", "assert find_max_element([-100, -200, -300, -400, -500]) == -100", "assert find_max_element([1, 2, 3, 4, 5, 0, -1, -2, -3, -4, -5]) == 5"], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a given element in a list.", "code": "def count_occurrences(arr: list, item: int) -> int:\n    count = 0\n    for element in arr:\n        if element == item:\n            count += 1\n    return count", "task_id": "280_249b3bfa-e625-44a0-9021-df0f6c5dac75", "test_setup_code": "", "test_list": ["assert count_occurrences([1, 2, 3, 4, 5], 3) == 1", "assert count_occurrences([1, 2, 3, 3, 3, 4, 5], 3) == 3", "assert count_occurrences([1, 1, 1, 1, 1], 1) == 5", "assert count_occurrences([1, 2, 3, 4, 5], 6) == 0", "assert count_occurrences([], 1) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 0) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 5) == 1", "assert count_occurrences([1, 2, 2, 2, 2, 2, 3], 2) == 5", "assert count_occurrences([1, 2, 3, 4, 5, 1, 1, 1], 1) == 4", "assert count_occurrences([1], 1) == 1", "assert count_occurrences([1], 0) == 0", "assert count_occurrences([1, 2, 3, 4, 5], 4) == 1", "assert count_occurrences([1, 2, 3, 4, 5, 4, 4, 4], 4) == 4", "assert count_occurrences([1, 2, 3, 4, 5, 3, 3, 3], 3) == 4", "assert count_occurrences([1, 2, 3, 4, 5, 2, 2, 2], 2) == 4"], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(arr: list) -> list:\n    return arr[::-1]", "task_id": "280_c640b1b6-bdaa-4c31-9670-4f5795a5572a", "test_setup_code": "", "test_list": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([]) == []", "assert reverse_list([1]) == [1]", "assert reverse_list([1, 2]) == [2, 1]", "assert reverse_list(['a', 'b', 'c']) == ['c', 'b', 'a']", "assert reverse_list([True, False, True]) == [True, False, True]", "assert reverse_list([None, 'test', 123, 45.6]) == [45.6, 123, 'test', None]", "assert reverse_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_list([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert reverse_list(['a']) == ['a']", "assert reverse_list([1, 2, 3, 'a', 'b', 'c']) == ['c', 'b', 'a', 3, 2, 1]", "assert reverse_list([0, -1, -2, -3, -4]) == [-4, -3, -2, -1, 0]", "assert reverse_list([1.1, 2.2, 3.3]) == [3.3, 2.2, 1.1]", "assert reverse_list(['apple', 'banana', 'cherry']) == ['cherry', 'banana', 'apple']", "assert reverse_list([[], [1, 2], [3, 4, 5]]) == [[3, 4, 5], [1, 2], []]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a given list.", "code": "def find_min_element(arr: list) -> int:\n    min_element = arr[0]\n    for element in arr:\n        if element < min_element:\n            min_element = element\n    return min_element", "task_id": "280_b87e73f6-3a50-4d54-bbe6-c6ba02bd167c", "test_setup_code": "", "test_list": ["assert find_min_element([3, 1, 4, 1, 5, 9, 2, 6, 5]) == 1", "assert find_min_element([10, 20, 30, 40, 50]) == 10", "assert find_min_element([-1, -2, -3, -4, -5]) == -5", "assert find_min_element([0, 0, 0, 0, 0]) == 0", "assert find_min_element([100]) == 100", "assert find_min_element([2, 3, 1, 2, 3, 4, 5]) == 1", "assert find_min_element([5, 4, 3, 2, 1]) == 1", "assert find_min_element([-10, 0, 10, -20, 20]) == -20", "assert find_min_element([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == -5", "assert find_min_element([1.5, 2.5, 0.5, 3.5, 4.5]) == 0.5", "assert find_min_element([1, 1, 1, 1, 1, 1]) == 1", "assert find_min_element([100, 200, 300, 400, 500, -100]) == -100", "assert find_min_element([-1, 0, 1, -1, 0, 1]) == -1", "assert find_min_element([float('inf'), float('-inf'), 0]) == float('-inf')", "assert find_min_element([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == -5"], "challenge_test_list": []}
{"text": "Write a function to check if a given list is sorted in ascending order.", "code": "def is_sorted(arr: list) -> bool:\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True", "task_id": "280_564929f9-96c7-44cf-b0a6-280a2cc64af8", "test_setup_code": "", "test_list": ["assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([5, 4, 3, 2, 1]) == False", "assert is_sorted([1, 1, 2, 3, 3]) == True", "assert is_sorted([]) == True", "assert is_sorted([1]) == True", "assert is_sorted([1, 2]) == True", "assert is_sorted([2, 1]) == False", "assert is_sorted([1, 2, 3, 2, 4]) == False", "assert is_sorted([0, 0, 0, 0]) == True", "assert is_sorted([-5, -4, -3, -2, -1]) == True", "assert is_sorted([-1, -2, -3, -4, -5]) == False", "assert is_sorted([-10, -5, 0, 5, 10]) == True", "assert is_sorted([10, 5, 0, -5, -10]) == False", "assert is_sorted([1.1, 1.2, 1.3, 1.4]) == True", "assert is_sorted([1.4, 1.3, 1.2, 1.1]) == False"], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a given list.", "code": "def find_second_largest(arr: list) -> int:\n    first, second = float('-inf'), float('-inf')\n    for element in arr:\n        if element > first:\n            second = first\n            first = element\n        elif element > second and element != first:\n            second = element\n    return second", "task_id": "280_b5d975c8-f197-4cda-a947-da9e63fc8eab", "test_setup_code": "", "test_list": ["assert find_second_largest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 6", "assert find_second_largest([10, 20, 4, 45, 99, 99]) == 45", "assert find_second_largest([1, 2]) == 1", "assert find_second_largest([5, 5, 5, 5, 5]) == float('-inf')"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a given list.", "code": "def remove_duplicates(arr: list) -> list:\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return unique_elements", "task_id": "280_40c313ca-8d12-42e3-9a57-a9bf0cc2b0c1", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([]) == []", "assert remove_duplicates([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]", "assert remove_duplicates([1, 2, 3, 4, 5, 5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert remove_duplicates(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 'c']", "assert remove_duplicates([1.1, 2.2, 1.1, 3.3, 2.2]) == [1.1, 2.2, 3.3]", "assert remove_duplicates([True, False, True, False]) == [True, False]", "assert remove_duplicates([None, None, None]) == [None]", "assert remove_duplicates(['apple', 'banana', 'apple', 'cherry']) == ['apple', 'banana', 'cherry']", "assert remove_duplicates([1, '1', 2, '2', 1, '1']) == [1, '1', 2, '2']", "assert remove_duplicates([1, 2, 3, 1, 2, 3, 4, 5, 6, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert remove_duplicates([100, 200, 300, 100, 200, 300, 400]) == [100, 200, 300, 400]", "assert remove_duplicates(['x', 'y', 'z', 'x', 'y', 'z']) == ['x', 'y', 'z']", "assert remove_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to find the index of a given element in a list. If the element is not found, return -1.", "code": "def find_element_index(arr: list, item: int) -> int:\n    for index, element in enumerate(arr):\n        if element == item:\n            return index\n    return -1", "task_id": "280_ed985495-cdc2-47cc-9f3e-9b414fab4688", "test_setup_code": "", "test_list": ["assert find_element_index([1, 2, 3, 4, 5], 3) == 2", "assert find_element_index([10, 20, 30, 40, 50], 25) == -1", "assert find_element_index([], 1) == -1", "assert find_element_index([1, 1, 1, 1, 1], 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a given list.", "code": "def sum_of_elements(arr: list) -> int:\n    total = 0\n    for element in arr:\n        total += element\n    return total", "task_id": "280_77905c6a-a832-4daa-8948-43e9836b03eb", "test_setup_code": "", "test_list": ["assert sum_of_elements([1, 2, 3, 4, 5]) == 15", "assert sum_of_elements([]) == 0", "assert sum_of_elements([0, 0, 0, 0]) == 0", "assert sum_of_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_of_elements([100, 200, 300]) == 600", "assert sum_of_elements([1]) == 1", "assert sum_of_elements([-1, 1, -1, 1]) == 0", "assert sum_of_elements([1, -1, 1, -1, 1, -1]) == 0", "assert sum_of_elements([1000000, 2000000, 3000000]) == 6000000", "assert sum_of_elements([1.5, 2.5, 3.5]) == 7.5", "assert sum_of_elements([1, 2, 3, 4, 5, -15]) == 0", "assert sum_of_elements([10**6, 10**6, 10**6]) == 3000000", "assert sum_of_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert sum_of_elements([-10, 20, -30, 40, -50]) == -30", "assert sum_of_elements([0.1, 0.2, 0.3, 0.4, 0.5]) == 1.5"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    return merged_list", "task_id": "280_acd7604e-87d8-411e-9409-6d086e728d5c", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([], []) == []", "assert merge_sorted_lists([1], []) == [1]", "assert merge_sorted_lists([], [1]) == [1]", "assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([4, 5, 6], [1, 2, 3]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_lists([1, 3, 5], [2, 4, 6, 8, 10]) == [1, 2, 3, 4, 5, 6, 8, 10]", "assert merge_sorted_lists([2, 4, 6, 8, 10], [1, 3, 5]) == [1, 2, 3, 4, 5, 6, 8, 10]", "assert merge_sorted_lists([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]", "assert merge_sorted_lists([1, 4, 7], [2, 5, 8]) == [1, 2, 4, 5, 7, 8]", "assert merge_sorted_lists([1, 2, 3], [4, 5, 6, 7, 8, 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists([4, 5, 6, 7, 8, 9], [1, 2, 3]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_lists([-3, -2, -1], [0, 1, 2]) == [-3, -2, -1, 0, 1, 2]", "assert merge_sorted_lists([0, 0, 0], [0, 0, 0]) == [0, 0, 0, 0, 0, 0]"], "challenge_test_list": []}
{"text": "Write a python function to check whether the frequency of each digit is less than or equal to twice the digit itself.", "code": "def validate_frequency(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > 2 * i): \n                return False\n            temp //= 10; \n    return True", "task_id": "283_25b5dcb5-d4d1-48f3-85f7-f190044ebd47", "test_setup_code": "", "test_list": ["assert validate_frequency(1234567890) == True", "assert validate_frequency(11223344556677889900) == True", "assert validate_frequency(111222333444555666777888999000) == False", "assert validate_frequency(0) == True", "assert validate_frequency(1) == True", "assert validate_frequency(22) == True", "assert validate_frequency(222) == False", "assert validate_frequency(12345678901234567890) == True", "assert validate_frequency(98765432109876543210) == True", "assert validate_frequency(9999999999) == False", "assert validate_frequency(88888888) == False", "assert validate_frequency(7777777) == False", "assert validate_frequency(666666) == False", "assert validate_frequency(55555) == False", "assert validate_frequency(4444) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the digits is less than or equal to 20.", "code": "def validate_sum(n): \n    total = 0 \n    while n: \n        total += n % 10 \n        n //= 10 \n    return total <= 20", "task_id": "283_b64957c5-ac3e-4e7c-a2bd-661110be96db", "test_setup_code": "", "test_list": ["assert validate_sum(1234) == True", "assert validate_sum(9999) == False", "assert validate_sum(0) == True", "assert validate_sum(199) == True", "assert validate_sum(200) == True", "assert validate_sum(5555) == False", "assert validate_sum(123456) == False", "assert validate_sum(111111) == True", "assert validate_sum(222222) == False", "assert validate_sum(987) == False", "assert validate_sum(876) == True", "assert validate_sum(100000) == True", "assert validate_sum(100001) == False", "assert validate_sum(123456789) == False", "assert validate_sum(111119) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are even.", "code": "def validate_even_digits(n): \n    while n: \n        if (n % 10) % 2 != 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_e8bca920-1792-4f9b-bcfe-ea005b9fcbf8", "test_setup_code": "", "test_list": ["assert validate_even_digits(2468) == True", "assert validate_even_digits(1357) == False", "assert validate_even_digits(0) == True", "assert validate_even_digits(2222) == True", "assert validate_even_digits(1234) == False", "assert validate_even_digits(8642) == True", "assert validate_even_digits(24680) == True", "assert validate_even_digits(13579) == False", "assert validate_even_digits(2486) == True", "assert validate_even_digits(1111) == False", "assert validate_even_digits(8888) == True", "assert validate_even_digits(2220) == True", "assert validate_even_digits(246802) == True", "assert validate_even_digits(135791) == False", "assert validate_even_digits(2048) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are odd.", "code": "def validate_odd_digits(n): \n    while n: \n        if (n % 10) % 2 == 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_cee0d410-9fed-4c63-9c29-ef6cf8b996b2", "test_setup_code": "", "test_list": ["assert validate_odd_digits(13579) == True", "assert validate_odd_digits(24680) == False", "assert validate_odd_digits(0) == False", "assert validate_odd_digits(1) == True", "assert validate_odd_digits(2) == False", "assert validate_odd_digits(11111) == True", "assert validate_odd_digits(22222) == False", "assert validate_odd_digits(12345) == False", "assert validate_odd_digits(97531) == True", "assert validate_odd_digits(86420) == False", "assert validate_odd_digits(3579) == True", "assert validate_odd_digits(4444) == False", "assert validate_odd_digits(135) == True", "assert validate_odd_digits(246) == False", "assert validate_odd_digits(99999) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are prime numbers (2, 3, 5, 7).", "code": "def validate_prime_digits(n): \n    prime_digits = {2, 3, 5, 7} \n    while n: \n        if n % 10 not in prime_digits: \n            return False \n        n //= 10 \n    return True", "task_id": "283_b532bdf3-b05a-4f01-967c-ab38ffdff8c4", "test_setup_code": "", "test_list": ["assert validate_prime_digits(2357) == True", "assert validate_prime_digits(1234) == False", "assert validate_prime_digits(0) == False", "assert validate_prime_digits(2) == True", "assert validate_prime_digits(3) == True", "assert validate_prime_digits(5) == True", "assert validate_prime_digits(7) == True", "assert validate_prime_digits(8) == False", "assert validate_prime_digits(10) == False", "assert validate_prime_digits(2222) == True", "assert validate_prime_digits(5555) == True", "assert validate_prime_digits(7777) == True", "assert validate_prime_digits(357) == True", "assert validate_prime_digits(23570) == False", "assert validate_prime_digits(23572357) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the number is a palindrome.", "code": "def validate_palindrome(n): \n    return str(n) == str(n)[::-1]", "task_id": "283_190cedd3-ca21-447a-b6f3-ff90b5197344", "test_setup_code": "", "test_list": ["assert validate_palindrome(121) == True", "assert validate_palindrome(-121) == False", "assert validate_palindrome(10) == False", "assert validate_palindrome(0) == True", "assert validate_palindrome(12321) == True", "assert validate_palindrome(123321) == True", "assert validate_palindrome(123456) == False", "assert validate_palindrome(1) == True", "assert validate_palindrome(22) == True", "assert validate_palindrome(1234321) == True", "assert validate_palindrome(12344321) == True", "assert validate_palindrome(1001) == True", "assert validate_palindrome(10001) == True", "assert validate_palindrome(10010) == False", "assert validate_palindrome(999999999) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the digits of the number are in strictly increasing order.", "code": "def validate_increasing_digits(n): \n    prev = 10 \n    while n: \n        curr = n % 10 \n        if curr >= prev: \n            return False \n        prev = curr \n        n //= 10 \n    return True", "task_id": "283_d9e3caef-60d5-4993-be46-5cb036598074", "test_setup_code": "", "test_list": ["assert validate_increasing_digits(123) == True", "assert validate_increasing_digits(321) == False", "assert validate_increasing_digits(13579) == True", "assert validate_increasing_digits(987654321) == False", "assert validate_increasing_digits(1) == True", "assert validate_increasing_digits(21) == False", "assert validate_increasing_digits(12) == True", "assert validate_increasing_digits(0) == True", "assert validate_increasing_digits(111) == False", "assert validate_increasing_digits(123456789) == True", "assert validate_increasing_digits(987654320) == False", "assert validate_increasing_digits(10) == False", "assert validate_increasing_digits(100) == False", "assert validate_increasing_digits(101) == False", "assert validate_increasing_digits(2468) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether the digits of the number are in strictly decreasing order.", "code": "def validate_decreasing_digits(n): \n    prev = -1 \n    while n: \n        curr = n % 10 \n        if curr <= prev: \n            return False \n        prev = curr \n        n //= 10 \n    return True", "task_id": "283_9f0443ea-7ff4-43d6-90a1-9db20a69e13b", "test_setup_code": "", "test_list": ["assert validate_decreasing_digits(321) == True", "assert validate_decreasing_digits(54321) == True", "assert validate_decreasing_digits(987654321) == True", "assert validate_decreasing_digits(21) == True", "assert validate_decreasing_digits(10) == True", "assert validate_decreasing_digits(123) == False", "assert validate_decreasing_digits(4321) == True", "assert validate_decreasing_digits(43210) == True", "assert validate_decreasing_digits(987654320) == True", "assert validate_decreasing_digits(111) == False", "assert validate_decreasing_digits(0) == True", "assert validate_decreasing_digits(9) == True", "assert validate_decreasing_digits(98) == True", "assert validate_decreasing_digits(21) == True", "assert validate_decreasing_digits(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are unique.", "code": "def validate_unique_digits(n): \n    seen = set() \n    while n: \n        digit = n % 10 \n        if digit in seen: \n            return False \n        seen.add(digit) \n        n //= 10 \n    return True", "task_id": "283_3836d15e-6ece-4d46-a7a9-3b2a1c2a39d7", "test_setup_code": "", "test_list": ["assert validate_unique_digits(1234567890) == True", "assert validate_unique_digits(1123456789) == False", "assert validate_unique_digits(9876543210) == True", "assert validate_unique_digits(9876543211) == False", "assert validate_unique_digits(0) == True", "assert validate_unique_digits(1) == True", "assert validate_unique_digits(11) == False", "assert validate_unique_digits(123456789) == True", "assert validate_unique_digits(987654321) == True", "assert validate_unique_digits(12345678901234567890) == False", "assert validate_unique_digits(1023456789) == True", "assert validate_unique_digits(10234567890) == False", "assert validate_unique_digits(1000000000) == False", "assert validate_unique_digits(1234567809) == True", "assert validate_unique_digits(12345678909876543210) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether the number contains no zero digits.", "code": "def validate_no_zero(n): \n    while n: \n        if n % 10 == 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_6415f594-4deb-49d2-916e-b636b9ad3229", "test_setup_code": "", "test_list": ["assert validate_no_zero(123) == True", "assert validate_no_zero(102) == False", "assert validate_no_zero(1) == True", "assert validate_no_zero(0) == False", "assert validate_no_zero(999) == True", "assert validate_no_zero(1001) == False", "assert validate_no_zero(987654321) == True", "assert validate_no_zero(908) == False", "assert validate_no_zero(111111111) == True", "assert validate_no_zero(100000000) == False", "assert validate_no_zero(123456789) == True", "assert validate_no_zero(120304050) == False", "assert validate_no_zero(333333333) == True", "assert validate_no_zero(400000004) == False", "assert validate_no_zero(56789) == True"], "challenge_test_list": []}
{"text": "Write a function to add two lists element-wise using map and lambda function.", "code": "def add_list(nums1, nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "task_id": "282_05160d70-3f04-4057-aac1-b408e08a82a1", "test_setup_code": "", "test_list": ["assert add_list([1, 2, 3], [4, 5, 6]) == [5, 7, 9]", "assert add_list([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert add_list([-1, -2, -3], [1, 2, 3]) == [0, 0, 0]", "assert add_list([1], [2]) == [3]", "assert add_list([100, 200, 300], [400, 500, 600]) == [500, 700, 900]", "assert add_list([1, 2], [1, 2, 3]) == [2, 4]", "assert add_list([], []) == []", "assert add_list([1, 2, 3], [1, 2]) == [2, 4]", "assert add_list([1.5, 2.5, 3.5], [4.5, 5.5, 6.5]) == [6.0, 8.0, 10.0]", "assert add_list([1, 2, 3], [-1, -2, -3]) == [0, 0, 0]", "assert add_list([1, 2, 3, 4], [1, 2, 3]) == [2, 4, 6]", "assert add_list([1, 2], [1, 2, 3, 4]) == [2, 4]", "assert add_list([1, 2, 3], [0, 0, 0]) == [1, 2, 3]", "assert add_list([1, -2, 3], [-1, 2, -3]) == [0, 0, 0]", "assert add_list([1, 2, 3], [4, 5, 6, 7]) == [5, 7, 9]"], "challenge_test_list": []}
{"text": "Write a function to multiply two lists element-wise using map and lambda function.", "code": "def multiply_list(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "282_70384eed-2495-4c08-95b1-c284d3e440a3", "test_setup_code": "", "test_list": ["assert multiply_list([1, 2, 3], [4, 5, 6]) == [4, 10, 18]", "assert multiply_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert multiply_list([1, -2, 3], [-4, 5, -6]) == [-4, -10, -18]", "assert multiply_list([1], [10]) == [10]", "assert multiply_list([1, 2], [3, 4]) == [3, 8]", "assert multiply_list([], []) == []", "assert multiply_list([1, 2, 3, 4], [5, 6, 7, 8]) == [5, 12, 21, 32]", "assert multiply_list([1, 2, 3], [0, 0, 0]) == [0, 0, 0]", "assert multiply_list([100, 200, 300], [1, 2, 3]) == [100, 400, 900]", "assert multiply_list([1.5, 2.5, 3.5], [2, 2, 2]) == [3.0, 5.0, 7.0]", "assert multiply_list([1, 2, 3], [1, 2]) == [1, 4]", "assert multiply_list([1, 2], [1, 2, 3]) == [1, 4]", "assert multiply_list([1, 2, 3], [1, 2, 3, 4]) == [1, 4, 9]", "assert multiply_list([1, 2, 3, 4], [1, 2, 3]) == [1, 4, 9]", "assert multiply_list([1, 2, 0], [1, 2, 3]) == [1, 4, 0]"], "challenge_test_list": []}
{"text": "Write a function to divide two lists element-wise using map and lambda function.", "code": "def divide_list(nums1, nums2):\n  result = map(lambda x, y: x / y if y != 0 else None, nums1, nums2)\n  return list(result)", "task_id": "282_fe51dc72-7bcd-43dc-ac66-32de6a87c70f", "test_setup_code": "", "test_list": ["assert divide_list([10, 20, 30], [2, 4, 5]) == [5.0, 5.0, 6.0]", "assert divide_list([1, 2, 3], [0, 1, 0]) == [None, 2.0, None]", "assert divide_list([], []) == []", "assert divide_list([5, 10, 15], [1, 2, 3]) == [5.0, 5.0, 5.0]"], "challenge_test_list": []}
{"text": "Write a function to find the modulus of two lists element-wise using map and lambda function.", "code": "def mod_list(nums1, nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "task_id": "282_f874e116-bf43-4c85-8ee7-5d1f7bd25d5c", "test_setup_code": "", "test_list": ["assert mod_list([10, 20, 30], [3, 7, 11]) == [1, 6, 8]", "assert mod_list([5, 15, 25], [2, 4, 6]) == [1, 3, 1]", "assert mod_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert mod_list([1, 2, 3], [1, 2, 3]) == [0, 0, 0]", "assert mod_list([10, 20, 30], [1, 1, 1]) == [0, 0, 0]", "assert mod_list([10, 20, 30], [10, 20, 30]) == [0, 0, 0]", "assert mod_list([10, 20, 30], [2, 5, 7]) == [0, 0, 2]", "assert mod_list([100, 200, 300], [10, 20, 30]) == [0, 0, 0]", "assert mod_list([7, 14, 21], [3, 5, 7]) == [1, 4, 0]", "assert mod_list([8, 16, 24], [2, 4, 6]) == [0, 0, 0]", "assert mod_list([9, 18, 27], [2, 3, 4]) == [1, 0, 3]", "assert mod_list([11, 22, 33], [2, 3, 4]) == [1, 1, 1]", "assert mod_list([50, 100, 150], [7, 11, 13]) == [1, 1, 7]", "assert mod_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]", "assert mod_list([123, 456, 789], [10, 20, 30]) == [3, 16, 9]"], "challenge_test_list": []}
{"text": "Write a function to raise elements of one list to the power of elements of another list element-wise using map and lambda function.", "code": "def power_list(nums1, nums2):\n  result = map(lambda x, y: x ** y, nums1, nums2)\n  return list(result)", "task_id": "282_ec845c2c-77e3-4331-a500-24f6abb53016", "test_setup_code": "", "test_list": ["assert power_list([2, 3, 4], [1, 2, 3]) == [2, 9, 64]", "assert power_list([1, 2, 3], [0, 0, 0]) == [1, 1, 1]", "assert power_list([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert power_list([1, 2, 3], [1, 1, 1]) == [1, 2, 3]", "assert power_list([2, 3, 4], [2, 2, 2]) == [4, 9, 16]", "assert power_list([2, 3, 4], [3, 2, 1]) == [8, 9, 4]", "assert power_list([10, 100, 1000], [1, 2, 3]) == [10, 10000, 1000000000]", "assert power_list([5, 6, 7], [0, 1, 2]) == [1, 6, 49]", "assert power_list([2, 3], [3, 2]) == [8, 9]", "assert power_list([1], [10]) == [1]", "assert power_list([2, 2, 2], [3, 3, 3]) == [8, 8, 8]", "assert power_list([3, 3, 3], [2, 2, 2]) == [9, 9, 9]", "assert power_list([0], [0]) == [1]", "assert power_list([4, 5, 6], [2, 1, 0]) == [16, 5, 1]", "assert power_list([7, 8, 9], [0, 1, 2]) == [1, 8, 81]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two lists element-wise using map and lambda function.", "code": "def max_list(nums1, nums2):\n  result = map(lambda x, y: max(x, y), nums1, nums2)\n  return list(result)", "task_id": "282_1adf8d17-4319-426c-aeb4-4dd7809b4087", "test_setup_code": "", "test_list": ["assert max_list([1, 2, 3], [4, 5, 6]) == [4, 5, 6]", "assert max_list([10, 20, 30], [5, 25, 15]) == [10, 25, 30]", "assert max_list([-1, -2, -3], [-4, -5, -6]) == [-1, -2, -3]", "assert max_list([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert max_list([100, 200, 300], [300, 200, 100]) == [300, 200, 300]", "assert max_list([1, 2, 3, 4], [4, 3, 2, 1]) == [4, 3, 3, 4]", "assert max_list([1], [2]) == [2]", "assert max_list([5, 6, 7], [7, 6, 5]) == [7, 6, 7]", "assert max_list([1, 2], [2, 1]) == [2, 2]", "assert max_list([0, -1, -2], [-2, -1, 0]) == [0, -1, 0]", "assert max_list([1, 3, 5, 7], [2, 4, 6, 8]) == [2, 4, 6, 8]", "assert max_list([1, 1, 1], [1, 1, 1]) == [1, 1, 1]", "assert max_list([1, 2, 3], [3, 2, 1]) == [3, 2, 3]", "assert max_list([9, 8, 7], [7, 8, 9]) == [9, 8, 9]", "assert max_list([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [5, 4, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two lists element-wise using map and lambda function.", "code": "def min_list(nums1, nums2):\n  result = map(lambda x, y: min(x, y), nums1, nums2)\n  return list(result)", "task_id": "282_2692b8ef-3fcc-47a3-b02e-52c7f3cf0ce1", "test_setup_code": "", "test_list": ["assert min_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]", "assert min_list([7, 8, 9], [3, 2, 1]) == [3, 2, 1]", "assert min_list([0, -1, -2], [1, -2, -3]) == [0, -2, -3]", "assert min_list([10, 20, 30], [5, 25, 35]) == [5, 20, 30]", "assert min_list([1, 1, 1], [1, 1, 1]) == [1, 1, 1]", "assert min_list([100, 200, 300], [50, 250, 350]) == [50, 200, 300]", "assert min_list([1, 2, 3], [3, 2, 1]) == [1, 2, 1]", "assert min_list([-1, -2, -3], [-3, -2, -1]) == [-3, -2, -3]", "assert min_list([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert min_list([1, 2, 3], [1, 2]) == [1, 2]", "assert min_list([1, 2], [1, 2, 3]) == [1, 2]", "assert min_list([1], [2]) == [1]", "assert min_list([2], [1]) == [1]", "assert min_list([1, 2, 3, 4], [4, 3, 2, 1]) == [1, 2, 2, 1]", "assert min_list([1, 3, 5, 7], [2, 4, 6, 8]) == [1, 3, 5, 7]"], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of two lists element-wise using map and lambda function.", "code": "def abs_diff_list(nums1, nums2):\n  result = map(lambda x, y: abs(x - y), nums1, nums2)\n  return list(result)", "task_id": "282_d8ba80c4-21b1-4998-9d81-0dacb198f431", "test_setup_code": "", "test_list": ["assert abs_diff_list([1, 2, 3], [4, 5, 6]) == [3, 3, 3]", "assert abs_diff_list([10, 20, 30], [5, 15, 25]) == [5, 5, 5]", "assert abs_diff_list([-1, -2, -3], [1, 2, 3]) == [2, 4, 6]", "assert abs_diff_list([0, 0, 0], [0, 0, 0]) == [0, 0, 0]", "assert abs_diff_list([5, 10, 15], [-5, -10, -15]) == [10, 20, 30]", "assert abs_diff_list([100, 200], [50, 150]) == [50, 50]", "assert abs_diff_list([-10, -20, -30], [-5, -15, -25]) == [5, 5, 5]", "assert abs_diff_list([1.5, 2.5, 3.5], [1, 2, 3]) == [0.5, 0.5, 0.5]", "assert abs_diff_list([], []) == []", "assert abs_diff_list([1], [10]) == [9]", "assert abs_diff_list([999, -999], [0, 0]) == [999, 999]", "assert abs_diff_list([0.1, 0.2, 0.3], [0.4, 0.5, 0.6]) == [0.3, 0.3, 0.3]", "assert abs_diff_list([-1.5, -2.5], [-1, -2]) == [0.5, 0.5]", "assert abs_diff_list([10, 20, 30, 40, 50], [5, 15, 25, 35, 45]) == [5, 5, 5, 5, 5]", "assert abs_diff_list([2, 4, 6, 8, 10], [1, 3, 5, 7, 9]) == [1, 1, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a function to concatenate two lists of strings element-wise using map and lambda function.", "code": "def concat_list(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "282_ad78d5a6-7715-468f-aae2-bce2c77ff792", "test_setup_code": "", "test_list": ["assert concat_list(['a', 'b'], ['c', 'd']) == ['ac', 'bd']", "assert concat_list(['hello', 'world'], ['python', 'rocks']) == ['hellopython', 'worldrocks']", "assert concat_list(['1', '2', '3'], ['4', '5', '6']) == ['14', '25', '36']", "assert concat_list([''], ['']) == ['']", "assert concat_list(['a'], ['b']) == ['ab']", "assert concat_list(['a', 'b', 'c'], ['x', 'y', 'z']) == ['ax', 'by', 'cz']", "assert concat_list(['foo'], ['bar']) == ['foobar']", "assert concat_list(['123'], ['456']) == ['123456']", "assert concat_list(['a', 'b'], ['c']) == ['ac']", "assert concat_list([''], ['nonempty']) == ['nonempty']", "assert concat_list(['nonempty'], ['']) == ['nonempty']", "assert concat_list(['a', 'b', 'c'], ['1', '2', '3']) == ['a1', 'b2', 'c3']", "assert concat_list(['x', 'y'], ['1', '2', '3']) == ['x1', 'y2']", "assert concat_list([], []) == []", "assert concat_list(['single'], ['element']) == ['singleelement']"], "challenge_test_list": []}
{"text": "Write a function to perform logical AND on two lists of booleans element-wise using map and lambda function.", "code": "def bool_and_list(bools1, bools2):\n  result = map(lambda x, y: x and y, bools1, bools2)\n  return list(result)", "task_id": "282_47837788-16fb-4222-b750-aef765f85fe5", "test_setup_code": "", "test_list": ["assert bool_and_list([True, False, True], [True, True, False]) == [True, False, False]", "assert bool_and_list([True, True, True], [True, True, True]) == [True, True, True]", "assert bool_and_list([False, False, False], [False, False, False]) == [False, False, False]", "assert bool_and_list([True], [False]) == [False]", "assert bool_and_list([False], [True]) == [False]", "assert bool_and_list([True, False], [True, True]) == [True, False]", "assert bool_and_list([False, True], [False, False]) == [False, False]", "assert bool_and_list([True, True, False, False], [False, True, True, False]) == [False, True, False, False]", "assert bool_and_list([True, False, True, False], [True, False, True, False]) == [True, False, True, False]", "assert bool_and_list([], []) == []", "assert bool_and_list([True, False, True], [False, False, False]) == [False, False, False]", "assert bool_and_list([True, True, False], [False, True, True]) == [False, True, False]", "assert bool_and_list([False, False, True], [True, False, True]) == [False, False, True]", "assert bool_and_list([True, True, True, False, False], [True, False, True, True, False]) == [True, False, True, False, False]", "assert bool_and_list([False, False, False, True, True], [False, True, False, True, False]) == [False, False, False, True, False]"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by two to three 'c'.", "code": "import re\ndef match_a_then_c(text):\n    patterns = 'ac{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_0d934a66-463c-410e-9656-a185b61768f7", "test_setup_code": "", "test_list": ["assert match_a_then_c('accc') == 'Found a match!'", "assert match_a_then_c('acccc') == 'Not matched!'", "assert match_a_then_c('abcc') == 'Not matched!'", "assert match_a_then_c('a') == 'Not matched!'", "assert match_a_then_c('acc') == 'Found a match!'", "assert match_a_then_c('ac') == 'Not matched!'", "assert match_a_then_c('aacc') == 'Found a match!'", "assert match_a_then_c('aaccc') == 'Found a match!'", "assert match_a_then_c('aaccaccc') == 'Found a match!'", "assert match_a_then_c('baccc') == 'Found a match!'", "assert match_a_then_c('ccca') == 'Not matched!'", "assert match_a_then_c('') == 'Not matched!'", "assert match_a_then_c('acccaccc') == 'Found a match!'", "assert match_a_then_c('acacac') == 'Not matched!'", "assert match_a_then_c('accaccc') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'd' followed by one or more 'e'.", "code": "import re\ndef match_d_then_e(text):\n    patterns = 'de+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_ac2d38df-52b7-4b00-b08a-fad1cb46769c", "test_setup_code": "", "test_list": ["assert match_d_then_e('de') == 'Found a match!'", "assert match_d_then_e('dee') == 'Found a match!'", "assert match_d_then_e('deeeeee') == 'Found a match!'", "assert match_d_then_e('d') == 'Not matched!'", "assert match_d_then_e('e') == 'Not matched!'", "assert match_d_then_e('abcde') == 'Found a match!'", "assert match_d_then_e('abcdee') == 'Found a match!'", "assert match_d_then_e('abcdeee') == 'Found a match!'", "assert match_d_then_e('abc') == 'Not matched!'", "assert match_d_then_e('dabc') == 'Not matched!'", "assert match_d_then_e('ed') == 'Not matched!'", "assert match_d_then_e('deed') == 'Found a match!'", "assert match_d_then_e('deeeed') == 'Found a match!'", "assert match_d_then_e('dede') == 'Found a match!'", "assert match_d_then_e('') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'h' followed by zero or one 'i'.", "code": "import re\ndef match_h_then_i(text):\n    patterns = 'hi?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_cc4df0e4-0dde-4513-b29c-0ae59b4a4d31", "test_setup_code": "", "test_list": ["assert match_h_then_i('hi') == 'Found a match!'", "assert match_h_then_i('h') == 'Found a match!'", "assert match_h_then_i('hello') == 'Found a match!'", "assert match_h_then_i('hii') == 'Found a match!'", "assert match_h_then_i('hiii') == 'Found a match!'", "assert match_h_then_i('i') == 'Not matched!'", "assert match_h_then_i('ih') == 'Not matched!'", "assert match_h_then_i('he') == 'Found a match!'", "assert match_h_then_i('hi there') == 'Found a match!'", "assert match_h_then_i('ah') == 'Found a match!'", "assert match_h_then_i('ahoy') == 'Found a match!'", "assert match_h_then_i('hip') == 'Found a match!'", "assert match_h_then_i('ship') == 'Found a match!'", "assert match_h_then_i('h i') == 'Found a match!'", "assert match_h_then_i('') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'j' followed by exactly two 'k'.", "code": "import re\ndef match_j_then_k(text):\n    patterns = 'jk{2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_62152d0c-c9ea-4752-be14-1fae036d61ea", "test_setup_code": "", "test_list": ["assert match_j_then_k('ajkkb') == 'Found a match!'", "assert match_j_then_k('jkk') == 'Found a match!'", "assert match_j_then_k('ajkbb') == 'Not matched!'", "assert match_j_then_k('ajkkkbb') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'l' followed by two to four 'm'.", "code": "import re\ndef match_l_then_m(text):\n    patterns = 'lm{2,4}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_c8ead7f6-bced-4eec-8338-7810e1529a03", "test_setup_code": "", "test_list": ["assert match_l_then_m('lmm') == 'Found a match!'", "assert match_l_then_m('lmmm') == 'Found a match!'", "assert match_l_then_m('lmmmm') == 'Found a match!'", "assert match_l_then_m('lm') == 'Not matched!'", "assert match_l_then_m('lmmmmm') == 'Not matched!'", "assert match_l_then_m('hello lmm world') == 'Found a match!'", "assert match_l_then_m('lmm lmmm lmmmm') == 'Found a match!'", "assert match_l_then_m('l mmm') == 'Not matched!'", "assert match_l_then_m('lmmlmmm') == 'Found a match!'", "assert match_l_then_m('lmm lmm') == 'Found a match!'", "assert match_l_then_m('') == 'Not matched!'", "assert match_l_then_m('l') == 'Not matched!'", "assert match_l_then_m('lmmlm') == 'Found a match!'", "assert match_l_then_m('lmmmmmm') == 'Not matched!'", "assert match_l_then_m('abc lmm xyz') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'n' followed by three to five 'o'.", "code": "import re\ndef match_n_then_o(text):\n    patterns = 'no{3,5}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_a3e955f5-abcb-4e82-b587-89f14aa01fe8", "test_setup_code": "", "test_list": ["assert match_n_then_o('nooo') == 'Found a match!'", "assert match_n_then_o('noooo') == 'Found a match!'", "assert match_n_then_o('nooooo') == 'Found a match!'", "assert match_n_then_o('noooooo') == 'Not matched!'", "assert match_n_then_o('no') == 'Not matched!'", "assert match_n_then_o('n') == 'Not matched!'", "assert match_n_then_o('nnooo') == 'Not matched!'", "assert match_n_then_o('noooonooo') == 'Found a match!'", "assert match_n_then_o('noooonooooo') == 'Found a match!'", "assert match_n_then_o('noooonoooooo') == 'Found a match!'", "assert match_n_then_o('noooonooooooo') == 'Found a match!'", "assert match_n_then_o('noooonooooooonoo') == 'Found a match!'", "assert match_n_then_o('noooonooooooonooooo') == 'Found a match!'", "assert match_n_then_o('noooonooooooonoooooo') == 'Found a match!'", "assert match_n_then_o('noooonooooooonooooooo') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'p' followed by one to two 'q'.", "code": "import re\ndef match_p_then_q(text):\n    patterns = 'pq{1,2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_52cef50b-3004-4835-b30a-697e3b0b60dc", "test_setup_code": "", "test_list": ["assert match_p_then_q('pq') == 'Found a match!'", "assert match_p_then_q('pqq') == 'Found a match!'", "assert match_p_then_q('p') == 'Not matched!'", "assert match_p_then_q('pqqq') == 'Not matched!'", "assert match_p_then_q('ppq') == 'Not matched!'", "assert match_p_then_q('pq pq') == 'Found a match!'", "assert match_p_then_q('pqq pqq') == 'Found a match!'", "assert match_p_then_q('pqx') == 'Found a match!'", "assert match_p_then_q('x pq') == 'Found a match!'", "assert match_p_then_q('x pqq') == 'Found a match!'", "assert match_p_then_q('x pqqx') == 'Found a match!'", "assert match_p_then_q('x pqqq') == 'Not matched!'", "assert match_p_then_q('') == 'Not matched!'", "assert match_p_then_q('p pqq') == 'Found a match!'", "assert match_p_then_q('pqqp') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'r' followed by zero or more 's'.", "code": "import re\ndef match_r_then_s(text):\n    patterns = 'rs*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_9cd4eed8-03ac-438e-a8e7-b9d96e34678b", "test_setup_code": "", "test_list": ["assert match_r_then_s('r') == 'Found a match!'", "assert match_r_then_s('rs') == 'Found a match!'", "assert match_r_then_s('rss') == 'Found a match!'", "assert match_r_then_s('rsss') == 'Found a match!'", "assert match_r_then_s('ar') == 'Found a match!'", "assert match_r_then_s('ars') == 'Found a match!'", "assert match_r_then_s('arss') == 'Found a match!'", "assert match_r_then_s('br') == 'Found a match!'", "assert match_r_then_s('brs') == 'Found a match!'", "assert match_r_then_s('brss') == 'Found a match!'", "assert match_r_then_s('rxyz') == 'Found a match!'", "assert match_r_then_s('rsxyz') == 'Found a match!'", "assert match_r_then_s('rssxyz') == 'Found a match!'", "assert match_r_then_s('rsssxyz') == 'Found a match!'", "assert match_r_then_s('xyz') == 'Not matched!'"], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 't' followed by exactly one 'u'.", "code": "import re\ndef match_t_then_u(text):\n    patterns = 'tu{1}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_e7b99ce1-0f63-4041-a9c4-40262499f426", "test_setup_code": "", "test_list": ["assert match_t_then_u('tu') == 'Found a match!'", "assert match_t_then_u('tuu') == 'Not matched!'", "assert match_t_then_u('t') == 'Not matched!'", "assert match_t_then_u('u') == 'Not matched!'", "assert match_t_then_u('tux') == 'Found a match!'", "assert match_t_then_u('xtu') == 'Found a match!'", "assert match_t_then_u('xtux') == 'Found a match!'", "assert match_t_then_u('tut') == 'Found a match!'", "assert match_t_then_u('tutux') == 'Found a match!'", "assert match_t_then_u('tuuux') == 'Not matched!'", "assert match_t_then_u('abc') == 'Not matched!'", "assert match_t_then_u('tututu') == 'Found a match!'", "assert match_t_then_u('') == 'Not matched!'", "assert match_t_then_u('tu tu') == 'Found a match!'", "assert match_t_then_u('tu\n') == 'Found a match!'"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def sum_of_squares_odd(n):\n    return n * (2*n - 1) * (2*n + 1) // 3", "task_id": "287_c3b4b07e-1bfb-435e-ae9c-ee8c53b0ae1a", "test_setup_code": "", "test_list": ["assert sum_of_squares_odd(1) == 1", "assert sum_of_squares_odd(2) == 10", "assert sum_of_squares_odd(3) == 35", "assert sum_of_squares_odd(4) == 84", "assert sum_of_squares_odd(5) == 165", "assert sum_of_squares_odd(6) == 286", "assert sum_of_squares_odd(7) == 455", "assert sum_of_squares_odd(8) == 680", "assert sum_of_squares_odd(9) == 969", "assert sum_of_squares_odd(10) == 1330", "assert sum_of_squares_odd(0) == 0", "assert sum_of_squares_odd(15) == 12400", "assert sum_of_squares_odd(20) == 28700", "assert sum_of_squares_odd(50) == 416250", "assert sum_of_squares_odd(100) == 3333500"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n even natural numbers.", "code": "def sum_of_cubes_even(n):\n    return (2*n*(n+1))**2", "task_id": "287_8987cbf3-c8f2-472f-9604-956a10024d0e", "test_setup_code": "", "test_list": ["assert sum_of_cubes_even(0) == 0", "assert sum_of_cubes_even(1) == 8", "assert sum_of_cubes_even(2) == 64", "assert sum_of_cubes_even(3) == 216", "assert sum_of_cubes_even(4) == 512", "assert sum_of_cubes_even(5) == 1000", "assert sum_of_cubes_even(10) == 8000", "assert sum_of_cubes_even(15) == 27000", "assert sum_of_cubes_even(20) == 64000", "assert sum_of_cubes_even(25) == 125000", "assert sum_of_cubes_even(50) == 1000000", "assert sum_of_cubes_even(100) == 8000000", "assert sum_of_cubes_even(200) == 64000000", "assert sum_of_cubes_even(500) == 1250000000", "assert sum_of_cubes_even(1000) == 8000000000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n odd natural numbers.", "code": "def sum_of_cubes_odd(n):\n    return (n*(2*n-1)*(2*n+1))//3", "task_id": "287_214ab8e9-a01a-427c-a910-ae0da826209f", "test_setup_code": "", "test_list": ["assert sum_of_cubes_odd(1) == 1", "assert sum_of_cubes_odd(2) == 28", "assert sum_of_cubes_odd(3) == 153", "assert sum_of_cubes_odd(4) == 496", "assert sum_of_cubes_odd(5) == 1225", "assert sum_of_cubes_odd(0) == 0", "assert sum_of_cubes_odd(10) == 3025", "assert sum_of_cubes_odd(20) == 23000", "assert sum_of_cubes_odd(50) == 650625", "assert sum_of_cubes_odd(100) == 2550250", "assert sum_of_cubes_odd(15) == 14400", "assert sum_of_cubes_odd(25) == 81250", "assert sum_of_cubes_odd(30) == 182700", "assert sum_of_cubes_odd(7) == 1855", "assert sum_of_cubes_odd(8) == 2912"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n multiples of 3.", "code": "def sum_of_squares_multiples_of_three(n):\n    return 3**2 * n * (n + 1) * (2*n + 1) // 6", "task_id": "287_e8ad0e49-7ffd-4d97-bf99-67f1090f6f9c", "test_setup_code": "", "test_list": ["assert sum_of_squares_multiples_of_three(1) == 9", "assert sum_of_squares_multiples_of_three(2) == 45", "assert sum_of_squares_multiples_of_three(3) == 126", "assert sum_of_squares_multiples_of_three(4) == 270", "assert sum_of_squares_multiples_of_three(5) == 495", "assert sum_of_squares_multiples_of_three(10) == 3465", "assert sum_of_squares_multiples_of_three(0) == 0", "assert sum_of_squares_multiples_of_three(15) == 10530", "assert sum_of_squares_multiples_of_three(20) == 24390", "assert sum_of_squares_multiples_of_three(25) == 47250", "assert sum_of_squares_multiples_of_three(30) == 81405", "assert sum_of_squares_multiples_of_three(50) == 379350", "assert sum_of_squares_multiples_of_three(100) == 3029250", "assert sum_of_squares_multiples_of_three(7) == 1134", "assert sum_of_squares_multiples_of_three(12) == 5148"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n multiples of 5.", "code": "def sum_of_squares_multiples_of_five(n):\n    return 5**2 * n * (n + 1) * (2*n + 1) // 6", "task_id": "287_c9dbca93-d332-49b3-b602-fc6cb8ff8862", "test_setup_code": "", "test_list": ["assert sum_of_squares_multiples_of_five(0) == 0", "assert sum_of_squares_multiples_of_five(1) == 25", "assert sum_of_squares_multiples_of_five(2) == 125", "assert sum_of_squares_multiples_of_five(3) == 350", "assert sum_of_squares_multiples_of_five(4) == 750", "assert sum_of_squares_multiples_of_five(5) == 1375", "assert sum_of_squares_multiples_of_five(10) == 9625", "assert sum_of_squares_multiples_of_five(15) == 34125", "assert sum_of_squares_multiples_of_five(20) == 91000", "assert sum_of_squares_multiples_of_five(50) == 650625", "assert sum_of_squares_multiples_of_five(100) == 2531250", "assert sum_of_squares_multiples_of_five(500) == 31640625", "assert sum_of_squares_multiples_of_five(1000) == 126562500", "assert sum_of_squares_multiples_of_five(10000) == 12500625000", "assert sum_of_squares_multiples_of_five(100000) == 1250006250000"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n Fibonacci numbers.", "code": "def sum_of_squares_fibonacci(n):\n    a, b = 0, 1\n    sum_squares = 0\n    for _ in range(n):\n        sum_squares += a**2\n        a, b = b, a + b\n    return sum_squares", "task_id": "287_7cbb03d7-abdd-4c5c-a3f3-aa1474847805", "test_setup_code": "", "test_list": ["assert sum_of_squares_fibonacci(0) == 0", "assert sum_of_squares_fibonacci(1) == 0", "assert sum_of_squares_fibonacci(2) == 1", "assert sum_of_squares_fibonacci(3) == 1", "assert sum_of_squares_fibonacci(4) == 2", "assert sum_of_squares_fibonacci(5) == 6", "assert sum_of_squares_fibonacci(6) == 15", "assert sum_of_squares_fibonacci(7) == 40", "assert sum_of_squares_fibonacci(8) == 104", "assert sum_of_squares_fibonacci(9) == 273", "assert sum_of_squares_fibonacci(10) == 714", "assert sum_of_squares_fibonacci(15) == 10424", "assert sum_of_squares_fibonacci(20) == 17710", "assert sum_of_squares_fibonacci(25) == 196417", "assert sum_of_squares_fibonacci(30) == 2178309"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n prime numbers.", "code": "def sum_of_squares_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count, num, sum_squares = 0, 2, 0\n    while count < n:\n        if is_prime(num):\n            sum_squares += num**2\n            count += 1\n        num += 1\n    return sum_squares", "task_id": "287_00948640-ab95-4778-a478-6d812dd8d2af", "test_setup_code": "", "test_list": ["assert sum_of_squares_prime(0) == 0", "assert sum_of_squares_prime(1) == 4", "assert sum_of_squares_prime(2) == 13", "assert sum_of_squares_prime(3) == 29", "assert sum_of_squares_prime(4) == 54", "assert sum_of_squares_prime(5) == 83", "assert sum_of_squares_prime(6) == 133", "assert sum_of_squares_prime(7) == 195", "assert sum_of_squares_prime(8) == 276", "assert sum_of_squares_prime(9) == 365", "assert sum_of_squares_prime(10) == 481", "assert sum_of_squares_prime(15) == 1240", "assert sum_of_squares_prime(20) == 2415", "assert sum_of_squares_prime(25) == 4219", "assert sum_of_squares_prime(30) == 6547"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n terms of an arithmetic progression with first term a and common difference d.", "code": "def sum_of_squares_arithmetic_progression(n, a, d):\n    sum_squares = 0\n    for i in range(n):\n        term = a + i * d\n        sum_squares += term**2\n    return sum_squares", "task_id": "287_18630391-f3d8-4669-a0cf-2b6834bc957e", "test_setup_code": "", "test_list": ["assert sum_of_squares_arithmetic_progression(3, 1, 1) == 14", "assert sum_of_squares_arithmetic_progression(5, 2, 2) == 220", "assert sum_of_squares_arithmetic_progression(0, 1, 1) == 0", "assert sum_of_squares_arithmetic_progression(4, -1, 3) == 134"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n terms of a geometric progression with first term a and common ratio r.", "code": "def sum_of_squares_geometric_progression(n, a, r):\n    sum_squares = 0\n    for i in range(n):\n        term = a * (r**i)\n        sum_squares += term**2\n    return sum_squares", "task_id": "287_ad83b212-1045-4c87-8c52-8b496d3696cd", "test_setup_code": "", "test_list": ["assert sum_of_squares_geometric_progression(1, 1, 1) == 1", "assert sum_of_squares_geometric_progression(2, 1, 1) == 2", "assert sum_of_squares_geometric_progression(3, 1, 1) == 3", "assert sum_of_squares_geometric_progression(3, 2, 1) == 12", "assert sum_of_squares_geometric_progression(3, 1, 2) == 21", "assert sum_of_squares_geometric_progression(4, 1, 2) == 341", "assert sum_of_squares_geometric_progression(4, 2, 2) == 1364", "assert sum_of_squares_geometric_progression(5, 1, 3) == 10921", "assert sum_of_squares_geometric_progression(5, 2, 3) == 43684", "assert sum_of_squares_geometric_progression(0, 1, 1) == 0", "assert sum_of_squares_geometric_progression(1, 0, 1) == 0", "assert sum_of_squares_geometric_progression(2, 1, 0) == 1", "assert sum_of_squares_geometric_progression(3, 1, -1) == 3", "assert sum_of_squares_geometric_progression(3, -1, 1) == 3", "assert sum_of_squares_geometric_progression(3, -1, -1) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n triangular numbers.", "code": "def sum_of_squares_triangular_numbers(n):\n    sum_squares = 0\n    for i in range(1, n + 1):\n        triangular_number = i * (i + 1) // 2\n        sum_squares += triangular_number**2\n    return sum_squares", "task_id": "287_47146672-a15a-4c06-adbc-282bcb74132f", "test_setup_code": "", "test_list": ["assert sum_of_squares_triangular_numbers(1) == 1", "assert sum_of_squares_triangular_numbers(2) == 11", "assert sum_of_squares_triangular_numbers(3) == 56", "assert sum_of_squares_triangular_numbers(4) == 176", "assert sum_of_squares_triangular_numbers(5) == 441", "assert sum_of_squares_triangular_numbers(6) == 966", "assert sum_of_squares_triangular_numbers(7) == 1946", "assert sum_of_squares_triangular_numbers(8) == 3641", "assert sum_of_squares_triangular_numbers(9) == 6426", "assert sum_of_squares_triangular_numbers(10) == 10756", "assert sum_of_squares_triangular_numbers(0) == 0", "assert sum_of_squares_triangular_numbers(15) == 61206", "assert sum_of_squares_triangular_numbers(20) == 291011", "assert sum_of_squares_triangular_numbers(25) == 979351", "assert sum_of_squares_triangular_numbers(30) == 2598156"], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are greater than a given threshold.", "code": "def check_all_greater_than(nums, threshold):\n  return all(num > threshold for num in nums)", "task_id": "284_b226bcc8-113d-4009-a3d0-2be422f4c627", "test_setup_code": "", "test_list": ["assert check_all_greater_than([10, 20, 30], 5) == True", "assert check_all_greater_than([10, 20, 30], 25) == False", "assert check_all_greater_than([1, 2, 3, 4, 5], 0) == True", "assert check_all_greater_than([1, 2, 3, 4, 5], 5) == False", "assert check_all_greater_than([], 10) == True", "assert check_all_greater_than([100], 99) == True", "assert check_all_greater_than([100], 100) == False", "assert check_all_greater_than([0, 0, 0], -1) == True", "assert check_all_greater_than([0, 0, 0], 0) == False", "assert check_all_greater_than([-1, -2, -3], -4) == True", "assert check_all_greater_than([-1, -2, -3], -2) == False", "assert check_all_greater_than([1.5, 2.5, 3.5], 1.0) == True", "assert check_all_greater_than([1.5, 2.5, 3.5], 2.5) == False", "assert check_all_greater_than([float('inf'), float('inf')], 1000000) == True", "assert check_all_greater_than([float('-inf'), float('-inf')], -1000000) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are even numbers.", "code": "def check_all_even(nums):\n  return all(num % 2 == 0 for num in nums)", "task_id": "284_4f6ce55a-ad79-42c7-ac34-29ab2006d1cf", "test_setup_code": "", "test_list": ["assert check_all_even([2, 4, 6, 8]) == True", "assert check_all_even([1, 2, 3, 4]) == False", "assert check_all_even([0, 2, 4, 6]) == True", "assert check_all_even([2, 4, 6, 7]) == False", "assert check_all_even([10, 20, 30, 40]) == True", "assert check_all_even([11, 22, 33, 44]) == False", "assert check_all_even([]) == True", "assert check_all_even([2]) == True", "assert check_all_even([3]) == False", "assert check_all_even([-2, -4, -6]) == True", "assert check_all_even([-2, -3, -4]) == False", "assert check_all_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == True", "assert check_all_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 21]) == False", "assert check_all_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == True", "assert check_all_even([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 31]) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are positive numbers.", "code": "def check_all_positive(nums):\n  return all(num > 0 for num in nums)", "task_id": "284_870a8f2e-0fc7-4aee-8855-0f9aeb5e4f4b", "test_setup_code": "", "test_list": ["assert check_all_positive([1, 2, 3, 4, 5]) == True", "assert check_all_positive([0, 1, 2, 3, 4]) == False", "assert check_all_positive([-1, 2, 3, 4, 5]) == False", "assert check_all_positive([1, -2, 3, 4, 5]) == False", "assert check_all_positive([1, 2, 3, 4, -5]) == False", "assert check_all_positive([100, 200, 300, 400, 500]) == True", "assert check_all_positive([0]) == False", "assert check_all_positive([1]) == True", "assert check_all_positive([-1]) == False", "assert check_all_positive([]) == True", "assert check_all_positive([1.5, 2.5, 3.5, 4.5, 5.5]) == True", "assert check_all_positive([1.5, -2.5, 3.5, 4.5, 5.5]) == False", "assert check_all_positive([1, 2, 3, 4, 0.5]) == True", "assert check_all_positive([1, 2, 3, 4, -0.5]) == False", "assert check_all_positive([float('inf'), 1, 2, 3]) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list have a length equal to a given number.", "code": "def check_all_strings_length(strings, length):\n  return all(len(s) == length for s in strings)", "task_id": "284_7d0bde8b-b727-4652-88da-bac2fbcbb1c9", "test_setup_code": "", "test_list": ["assert check_all_strings_length(['apple', 'peach', 'grape'], 5) == True", "assert check_all_strings_length(['apple', 'peach', 'banana'], 5) == False", "assert check_all_strings_length(['', '', ''], 0) == True", "assert check_all_strings_length(['a', 'b', 'c'], 1) == True", "assert check_all_strings_length(['a', 'b', 'cd'], 1) == False", "assert check_all_strings_length(['hello', 'world'], 5) == True", "assert check_all_strings_length(['hello', 'world!'], 5) == False", "assert check_all_strings_length(['test', 'case', 'list'], 4) == True", "assert check_all_strings_length(['test', 'case', 'lists'], 4) == False", "assert check_all_strings_length(['12345', '67890'], 5) == True", "assert check_all_strings_length(['12345', '678901'], 5) == False", "assert check_all_strings_length(['', 'a', 'ab'], 1) == False", "assert check_all_strings_length(['', 'a', 'ab'], 0) == False", "assert check_all_strings_length(['same', 'size', 'test'], 4) == True", "assert check_all_strings_length(['same', 'size', 'tests'], 4) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list start with a given character.", "code": "def check_all_start_with(strings, char):\n  return all(s.startswith(char) for s in strings)", "task_id": "284_32f01d22-de25-4500-a585-442e0eaebfbb", "test_setup_code": "", "test_list": ["assert check_all_start_with(['apple', 'apricot', 'avocado'], 'a') == True", "assert check_all_start_with(['banana', 'blueberry', 'blackberry'], 'b') == True", "assert check_all_start_with(['cherry', 'citrus', 'cranberry'], 'c') == True", "assert check_all_start_with(['apple', 'banana', 'cherry'], 'a') == False", "assert check_all_start_with(['apple', 'apricot', 'banana'], 'a') == False", "assert check_all_start_with(['', 'apple', 'apricot'], 'a') == False", "assert check_all_start_with(['apple', 'apricot', 'avocado'], 'b') == False", "assert check_all_start_with(['apple', 'apricot', 'avocado'], '') == False", "assert check_all_start_with([], 'a') == True", "assert check_all_start_with(['apple', 'apple', 'apple'], 'a') == True", "assert check_all_start_with(['apple', 'Apple', 'apricot'], 'a') == False", "assert check_all_start_with(['apple', 'apricot', 'avocado'], 'A') == False", "assert check_all_start_with(['Apple', 'Apricot', 'Avocado'], 'A') == True", "assert check_all_start_with(['apple', 'apricot', 'avocado'], 'ap') == False", "assert check_all_start_with(['apple', 'apricot', 'avocado'], 'a') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are divisible by a given number.", "code": "def check_all_divisible_by(nums, divisor):\n  return all(num % divisor == 0 for num in nums)", "task_id": "284_af333480-8c93-4dac-a7f5-b37662e10705", "test_setup_code": "", "test_list": ["assert check_all_divisible_by([2, 4, 6, 8], 2) == True", "assert check_all_divisible_by([2, 4, 6, 7], 2) == False", "assert check_all_divisible_by([10, 20, 30], 5) == True", "assert check_all_divisible_by([10, 21, 30], 5) == False", "assert check_all_divisible_by([0, 0, 0], 1) == True", "assert check_all_divisible_by([0, 0, 0], 5) == True", "assert check_all_divisible_by([1, 2, 3], 1) == True", "assert check_all_divisible_by([1, 2, 3], 2) == False", "assert check_all_divisible_by([], 3) == True", "assert check_all_divisible_by([1000000, 2000000, 3000000], 1000000) == True", "assert check_all_divisible_by([1000000, 2000001, 3000000], 1000000) == False", "assert check_all_divisible_by([1], 1) == True", "assert check_all_divisible_by([1], 2) == False", "assert check_all_divisible_by([2, 4, 8, 16], 2) == True", "assert check_all_divisible_by([2, 4, 8, 15], 2) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are uppercase.", "code": "def check_all_uppercase(strings):\n  return all(s.isupper() for s in strings)", "task_id": "284_63021b97-7771-478c-81e4-1090cd9af763", "test_setup_code": "", "test_list": ["assert check_all_uppercase(['HELLO', 'WORLD']) == True", "assert check_all_uppercase(['HELLO', 'world']) == False", "assert check_all_uppercase(['HELLO', 'WORLD', 'PYTHON']) == True", "assert check_all_uppercase(['HELLO', 'WORLD', 'python']) == False", "assert check_all_uppercase(['HELLO', 'WORLD', '123']) == True", "assert check_all_uppercase(['HELLO', 'WORLD', '123abc']) == False", "assert check_all_uppercase(['HELLO', 'WORLD', '']) == True", "assert check_all_uppercase(['HELLO', 'WORLD', ' ']) == False", "assert check_all_uppercase(['HELLO', 'WORLD', '!@#']) == True", "assert check_all_uppercase(['HELLO', 'WORLD', 'hello']) == False", "assert check_all_uppercase(['HELLO']) == True", "assert check_all_uppercase(['hello']) == False", "assert check_all_uppercase(['']) == True", "assert check_all_uppercase([]) == True", "assert check_all_uppercase(['HELLO', 'WORLD', 'UPPERCASE']) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are palindromes.", "code": "def check_all_palindromes(strings):\n  return all(s == s[::-1] for s in strings)", "task_id": "284_6c1c514f-c3ff-481d-aacf-45d330cc1c25", "test_setup_code": "", "test_list": ["assert check_all_palindromes(['racecar', 'level', 'radar']) == True", "assert check_all_palindromes(['hello', 'world']) == False", "assert check_all_palindromes(['a', 'b', 'c']) == True", "assert check_all_palindromes(['']) == True", "assert check_all_palindromes(['', '']) == True", "assert check_all_palindromes(['madam', 'noon', 'civic']) == True", "assert check_all_palindromes(['palindrome', 'not', 'a']) == False", "assert check_all_palindromes(['abba', 'deed', 'rotor']) == True", "assert check_all_palindromes(['step on no pets', 'was it a car or a cat I saw']) == False", "assert check_all_palindromes(['A man a plan a canal Panama'.lower().replace(' ', '')]) == True", "assert check_all_palindromes(['12321', '45654', '78987']) == True", "assert check_all_palindromes(['12321', '45654', '78987', '123456']) == False", "assert check_all_palindromes(['Able was I ere I saw Elba'.lower().replace(' ', '')]) == True", "assert check_all_palindromes(['']) == True", "assert check_all_palindromes(['a', '']) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list have the same length.", "code": "def check_all_same_length(strings):\n  if not strings: return True\n  length = len(strings[0])\n  return all(len(s) == length for s in strings)", "task_id": "284_7cbea614-460d-4d87-92f7-753d8c2c307a", "test_setup_code": "", "test_list": ["assert check_all_same_length(['test', 'code', 'abcd']) == True", "assert check_all_same_length(['test', 'code', 'abc']) == False", "assert check_all_same_length(['a', 'b', 'c']) == True", "assert check_all_same_length(['a', 'ab', 'abc']) == False", "assert check_all_same_length(['']) == True", "assert check_all_same_length(['', '', '']) == True", "assert check_all_same_length(['', 'a']) == False", "assert check_all_same_length([]) == True", "assert check_all_same_length(['same', 'same', 'same']) == True", "assert check_all_same_length(['same', 'same', 'different']) == False", "assert check_all_same_length(['123', '456', '789']) == True", "assert check_all_same_length(['123', '4567', '89']) == False", "assert check_all_same_length(['longer', 'longer', 'longer']) == True", "assert check_all_same_length(['longer', 'longest', 'longer']) == False", "assert check_all_same_length(['same length', 'same length', 'same length']) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list contain a given substring.", "code": "def check_all_contain_substring(strings, substring):\n  return all(substring in s for s in strings)", "task_id": "284_d4b695cb-5967-48de-88ec-dcb5fb03694b", "test_setup_code": "", "test_list": ["assert check_all_contain_substring(['hello', 'world'], 'o') == True", "assert check_all_contain_substring(['hello', 'world'], 'l') == True", "assert check_all_contain_substring(['hello', 'world'], 'z') == False", "assert check_all_contain_substring(['hello', 'world', ''], 'o') == False", "assert check_all_contain_substring(['hello', 'world'], '') == True", "assert check_all_contain_substring(['', ''], '') == True", "assert check_all_contain_substring(['hello', 'world'], 'hello') == False", "assert check_all_contain_substring(['hello', 'hello'], 'hello') == True", "assert check_all_contain_substring(['hello', 'world', 'python'], 'o') == True", "assert check_all_contain_substring(['hello', 'world', 'python'], 'p') == False", "assert check_all_contain_substring(['apple', 'banana', 'cherry'], 'a') == True", "assert check_all_contain_substring(['apple', 'banana', 'cherry'], 'e') == False", "assert check_all_contain_substring(['apple', 'banana', 'cherry'], 'apple') == False", "assert check_all_contain_substring(['apple', 'banana', 'cherry'], 'an') == True", "assert check_all_contain_substring(['apple', 'banana', 'cherry'], 'ch') == False"], "challenge_test_list": []}
{"text": "Write a function to count the number of prime numbers in an array.", "code": "def count_primes(arr, N):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(N):\n        if is_prime(arr[i]):\n            count += 1\n    return count", "task_id": "288_149396c7-c606-426f-8cec-6cf154a78ef2", "test_setup_code": "", "test_list": ["assert count_primes([2, 3, 5, 7, 11], 5) == 5", "assert count_primes([4, 6, 8, 10, 12], 5) == 0", "assert count_primes([1, 2, 3, 4, 5], 5) == 3", "assert count_primes([17, 19, 23, 29, 31], 5) == 5", "assert count_primes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 4", "assert count_primes([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47], 15) == 15", "assert count_primes([14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 10) == 3", "assert count_primes([2], 1) == 1", "assert count_primes([1], 1) == 0", "assert count_primes([], 0) == 0", "assert count_primes([2, 4, 6, 8, 10, 12, 14, 16, 18, 20], 10) == 1", "assert count_primes([3, 5, 7, 11, 13, 17, 19, 23, 29, 31], 10) == 10", "assert count_primes([25, 27, 29, 31, 33, 35, 37, 39, 41, 43], 10) == 5", "assert count_primes([101, 103, 107, 109, 113, 127, 131, 137, 139, 149], 10) == 10", "assert count_primes([100, 102, 104, 106, 108, 110, 112, 114, 116, 118], 10) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in an array.", "code": "def count_even(arr, N):\n    count = 0\n    for i in range(N):\n        if arr[i] % 2 == 0:\n            count += 1\n    return count", "task_id": "288_d98df0c2-ddab-4b9e-a6ad-aab49ae99ee3", "test_setup_code": "", "test_list": ["assert count_even([1, 2, 3, 4, 5], 5) == 2", "assert count_even([2, 4, 6, 8, 10], 5) == 5", "assert count_even([1, 3, 5, 7, 9], 5) == 0", "assert count_even([0, 2, 4, 6, 8], 5) == 5", "assert count_even([1, 2, 3, 4, 5, 6], 6) == 3", "assert count_even([], 0) == 0", "assert count_even([1], 1) == 0", "assert count_even([2], 1) == 1", "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 5", "assert count_even([11, 13, 15, 17, 19], 5) == 0", "assert count_even([12, 14, 16, 18, 20], 5) == 5", "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 20) == 10", "assert count_even([-2, -4, -6, -8, -10], 5) == 5", "assert count_even([-1, -3, -5, -7, -9], 5) == 0", "assert count_even([1000000, 1000002, 1000004, 1000006, 1000008], 5) == 5"], "challenge_test_list": []}
{"text": "Write a function to count the number of odd numbers in an array.", "code": "def count_odd(arr, N):\n    count = 0\n    for i in range(N):\n        if arr[i] % 2 != 0:\n            count += 1\n    return count", "task_id": "288_155a7394-3214-4af8-92af-db76a62da174", "test_setup_code": "", "test_list": ["assert count_odd([1, 2, 3, 4, 5], 5) == 3", "assert count_odd([2, 4, 6, 8, 10], 5) == 0", "assert count_odd([1, 3, 5, 7, 9], 5) == 5", "assert count_odd([], 0) == 0", "assert count_odd([1], 1) == 1", "assert count_odd([2], 1) == 0", "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 5", "assert count_odd([11, 13, 15, 17, 19, 21], 6) == 6", "assert count_odd([10, 20, 30, 40, 50], 5) == 0", "assert count_odd([1, 2, 1, 2, 1, 2, 1, 2], 8) == 4", "assert count_odd([0, 0, 0, 0, 0], 5) == 0", "assert count_odd([-1, -2, -3, -4, -5], 5) == 3", "assert count_odd([1000001, 1000002, 1000003], 3) == 2", "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 15) == 8", "assert count_odd([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 15) == 15"], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are divisible by a given number K.", "code": "def count_divisible_by_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] % K == 0:\n            count += 1\n    return count", "task_id": "288_32570e13-9ae5-4c1a-8482-f286df292c82", "test_setup_code": "", "test_list": ["assert count_divisible_by_k([1, 2, 3, 4, 5], 5, 1) == 5", "assert count_divisible_by_k([1, 2, 3, 4, 5], 5, 2) == 2", "assert count_divisible_by_k([1, 2, 3, 4, 5], 5, 3) == 1", "assert count_divisible_by_k([1, 2, 3, 4, 5], 5, 5) == 1", "assert count_divisible_by_k([1, 2, 3, 4, 5], 5, 10) == 0", "assert count_divisible_by_k([0, 0, 0, 0, 0], 5, 1) == 5", "assert count_divisible_by_k([0, 0, 0, 0, 0], 5, 0) == 0", "assert count_divisible_by_k([10, 20, 30, 40, 50], 5, 10) == 5", "assert count_divisible_by_k([10, 20, 30, 40, 50], 5, 20) == 2", "assert count_divisible_by_k([1, 3, 5, 7, 9], 5, 2) == 0", "assert count_divisible_by_k([2, 4, 6, 8, 10], 5, 2) == 5", "assert count_divisible_by_k([2, 4, 6, 8, 10], 5, 3) == 1", "assert count_divisible_by_k([], 0, 1) == 0", "assert count_divisible_by_k([1], 1, 1) == 1", "assert count_divisible_by_k([1], 1, 2) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are greater than a given number K.", "code": "def count_greater_than_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] > K:\n            count += 1\n    return count", "task_id": "288_46f8e04e-16fa-4062-997d-863ebdf7fcf1", "test_setup_code": "", "test_list": ["assert count_greater_than_k([1, 2, 3, 4, 5], 5, 3) == 2", "assert count_greater_than_k([10, 20, 30, 40, 50], 5, 25) == 3", "assert count_greater_than_k([5, 5, 5, 5, 5], 5, 5) == 0", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 0) == 5", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 5) == 0", "assert count_greater_than_k([], 0, 3) == 0", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 10) == 0", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 1) == 4", "assert count_greater_than_k([-1, -2, -3, -4, -5], 5, -3) == 2", "assert count_greater_than_k([100, 200, 300, 400, 500], 5, 250) == 3", "assert count_greater_than_k([1], 1, 0) == 1", "assert count_greater_than_k([1], 1, 1) == 0", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 2) == 3", "assert count_greater_than_k([1, 2, 3, 4, 5], 5, 4) == 1", "assert count_greater_than_k([0, 0, 0, 0, 0], 5, -1) == 5"], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are less than a given number K.", "code": "def count_less_than_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] < K:\n            count += 1\n    return count", "task_id": "288_826fa846-e5bf-452c-a0e4-bd55489e908b", "test_setup_code": "", "test_list": ["assert count_less_than_k([1, 2, 3, 4, 5], 5, 3) == 2", "assert count_less_than_k([10, 20, 30, 40, 50], 5, 25) == 2", "assert count_less_than_k([5, 5, 5, 5, 5], 5, 5) == 0", "assert count_less_than_k([], 0, 10) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic numbers in an array.", "code": "def count_palindromes(arr, N):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    count = 0\n    for i in range(N):\n        if is_palindrome(arr[i]):\n            count += 1\n    return count", "task_id": "288_d62dae16-53e4-41ab-9ed5-2ebb3a1df1f4", "test_setup_code": "", "test_list": ["assert count_palindromes([121, 131, 20, 33, 44], 5) == 4", "assert count_palindromes([123, 456, 789, 101, 202], 5) == 2", "assert count_palindromes([1, 2, 3, 4, 5], 5) == 5", "assert count_palindromes([10, 20, 30, 40, 50], 5) == 0", "assert count_palindromes([11, 22, 33, 44, 55, 66, 77, 88, 99], 9) == 9", "assert count_palindromes([12321, 45654, 78987, 10101, 20202], 5) == 5", "assert count_palindromes([123, 321, 456, 654, 789, 987], 6) == 0", "assert count_palindromes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 10", "assert count_palindromes([121, 1221, 12321, 123321, 1234321], 5) == 5", "assert count_palindromes([10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 10) == 1", "assert count_palindromes([], 0) == 0", "assert count_palindromes([1234321, 12321, 1221, 121, 1], 5) == 5", "assert count_palindromes([123, 456, 789, 101, 202, 303, 404, 505], 8) == 5", "assert count_palindromes([111, 222, 333, 444, 555, 666, 777, 888, 999, 1001], 10) == 10", "assert count_palindromes([123, 456, 789, 987, 654, 321], 6) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of perfect squares in an array.", "code": "def count_perfect_squares(arr, N):\n    def is_perfect_square(num):\n        return int(num**0.5)**2 == num\n    count = 0\n    for i in range(N):\n        if is_perfect_square(arr[i]):\n            count += 1\n    return count", "task_id": "288_544b1863-7afa-43a6-8b0a-1aa61532190b", "test_setup_code": "", "test_list": ["assert count_perfect_squares([1, 2, 3, 4, 5, 6, 7, 8, 9], 9) == 3", "assert count_perfect_squares([16, 25, 36, 49, 50, 51, 52, 53, 54], 9) == 4", "assert count_perfect_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11) == 4", "assert count_perfect_squares([2, 3, 5, 6, 7, 8, 10, 11, 13, 14, 15], 11) == 0"], "challenge_test_list": []}
{"text": "Write a function to count the number of Fibonacci numbers in an array.", "code": "def count_fibonacci_numbers(arr, N):\n    def is_fibonacci(num):\n        x, y = 0, 1\n        while y < num:\n            x, y = y, x + y\n        return y == num\n    count = 0\n    for i in range(N):\n        if is_fibonacci(arr[i]):\n            count += 1\n    return count", "task_id": "288_f00772ca-75bc-47d7-9d5e-a507f4775ae2", "test_setup_code": "", "test_list": ["assert count_fibonacci_numbers([0, 1, 1, 2, 3, 5, 8, 13, 21], 9) == 9", "assert count_fibonacci_numbers([4, 6, 7, 10, 11, 14, 15, 16], 8) == 0", "assert count_fibonacci_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 6", "assert count_fibonacci_numbers([13, 21, 34, 55, 89, 144], 6) == 6", "assert count_fibonacci_numbers([0, 1, 1, 2, 3, 5, 8], 7) == 7", "assert count_fibonacci_numbers([], 0) == 0", "assert count_fibonacci_numbers([0], 1) == 1", "assert count_fibonacci_numbers([4, 6, 7, 10, 11, 14, 15, 16, 18, 20, 22, 24, 25], 13) == 0", "assert count_fibonacci_numbers([1, 4, 6, 7, 8, 13, 21], 7) == 4", "assert count_fibonacci_numbers([34, 55, 89, 144, 233, 377, 610], 7) == 7", "assert count_fibonacci_numbers([2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 15) == 15", "assert count_fibonacci_numbers([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17) == 17", "assert count_fibonacci_numbers([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765], 21) == 21", "assert count_fibonacci_numbers([1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711], 21) == 21", "assert count_fibonacci_numbers([0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040], 31) == 31"], "challenge_test_list": []}
{"text": "Write a function to count the number of unique elements in an array.", "code": "def count_unique_elements(arr, N):\n    return len(set(arr))", "task_id": "288_01c4773c-d3bb-4d41-8f5a-8cfe7dd33263", "test_setup_code": "", "test_list": ["assert count_unique_elements([1, 2, 3, 4, 5], 5) == 5", "assert count_unique_elements([1, 1, 1, 1, 1], 5) == 1", "assert count_unique_elements([], 0) == 0", "assert count_unique_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 10) == 4", "assert count_unique_elements([5, 5, 5, 5, 5, 5, 5, 5, 5, 5], 10) == 1", "assert count_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 10", "assert count_unique_elements([1, 2, 3, 1, 2, 3, 1, 2, 3], 9) == 3", "assert count_unique_elements([1], 1) == 1", "assert count_unique_elements([1, 2, 3, 4, 5, 5, 4, 3, 2, 1], 10) == 5", "assert count_unique_elements([0, 0, 0, 0, 0], 5) == 1", "assert count_unique_elements([-1, -2, -3, -4, -5], 5) == 5", "assert count_unique_elements([-1, -1, -1, -1, -1], 5) == 1", "assert count_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5], 15) == 10", "assert count_unique_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 15) == 15", "assert count_unique_elements([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], 10) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should not exceed a given limit.", "code": "def max_sub_array_sum_with_limit(a, n, k, limit):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here > limit:\n\t\t\tmax_ending_here = limit\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_b001d129-7e32-4642-860b-e1f4a533a383", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_limit([1, 2, 3], 3, 2, 10) == 10", "assert max_sub_array_sum_with_limit([-1, -2, -3], 3, 3, 5) == 0", "assert max_sub_array_sum_with_limit([4, -1, 2, 1], 4, 1, 6) == 6", "assert max_sub_array_sum_with_limit([1, 2, 3, 4], 4, 3, 15) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should be at least a given minimum sum.", "code": "def max_sub_array_sum_with_min(a, n, k, min_sum):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here < min_sum:\n\t\t\tmax_ending_here = min_sum\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_af811419-79cb-4944-88b5-d70cf7da9f20", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_min([1, 2, 3], 3, 1, 5) == 6", "assert max_sub_array_sum_with_min([1, -2, 3, 4], 4, 2, 0) == 10", "assert max_sub_array_sum_with_min([-1, -2, -3], 3, 3, -1) == -1", "assert max_sub_array_sum_with_min([1, 2, 3], 3, 2, 4) == 12", "assert max_sub_array_sum_with_min([5, -2, 3, 4], 4, 3, 6) == 15", "assert max_sub_array_sum_with_min([1, -2, 3, -1, 2], 5, 2, 3) == 8", "assert max_sub_array_sum_with_min([1, 2, 3, -2, 5], 5, 1, 10) == 10", "assert max_sub_array_sum_with_min([-1, -2, -3, -4], 4, 1, -2) == -2", "assert max_sub_array_sum_with_min([1, 2, 3, 4, 5], 5, 1, 15) == 15", "assert max_sub_array_sum_with_min([1, 2, 3, 4, 5], 5, 2, 20) == 20", "assert max_sub_array_sum_with_min([1, 2, 3, 4, 5], 5, 3, 25) == 25", "assert max_sub_array_sum_with_min([1, -1, 1, -1, 1], 5, 3, 2) == 2", "assert max_sub_array_sum_with_min([1, 2, 3, -2, 5], 5, 2, 15) == 15", "assert max_sub_array_sum_with_min([1, 2, 3, -2, 5], 5, 3, 20) == 20", "assert max_sub_array_sum_with_min([1, 2, 3, -2, 5], 5, 4, 25) == 25"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the array may contain negative numbers.", "code": "def max_sub_array_sum_with_negative(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_c85e324f-50f5-48c1-8b5a-8eb914d8c848", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_negative([1, -2, 3, 4, -1, 2, 1, -5, 4], 9, 1) == 10", "assert max_sub_array_sum_with_negative([-1, -2, -3, -4], 4, 3) == 0", "assert max_sub_array_sum_with_negative([2, 1, -3, 4, -1, 2, 1, -5, 4], 9, 2) == 10", "assert max_sub_array_sum_with_negative([1, 2, 3, -2, 5], 5, 3) == 18"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the given array, considering that the array is circular (i.e., it wraps around).", "code": "def max_sub_array_sum_with_wraparound(a, n):\n\tdef kadane(arr):\n\t\tmax_so_far = -2147483648\n\t\tmax_ending_here = 0\n\t\tfor x in arr:\n\t\t\tmax_ending_here = max_ending_here + x\n\t\t\tif max_so_far < max_ending_here:\n\t\t\t\tmax_so_far = max_ending_here\n\t\t\tif max_ending_here < 0:\n\t\t\t\tmax_ending_here = 0\n\t\treturn max_so_far\n\tmax_kadane = kadane(a)\n\ttotal_sum = sum(a)\n\tfor i in range(n):\n\t\ta[i] = -a[i]\n\tmax_wrap = total_sum + kadane(a)\n\treturn max(max_kadane, max_wrap)", "task_id": "286_7c6e3822-2074-4d5d-afe9-b5cff5353b5b", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_wraparound([1, -2, 3, -2], 4) == 3", "assert max_sub_array_sum_with_wraparound([5, -3, 5], 3) == 10", "assert max_sub_array_sum_with_wraparound([3, -1, 2, -1], 4) == 4", "assert max_sub_array_sum_with_wraparound([3, -2, 2, -3], 4) == 3", "assert max_sub_array_sum_with_wraparound([-2, -3, -1], 3) == -1", "assert max_sub_array_sum_with_wraparound([8, -1, 3, 4], 4) == 15", "assert max_sub_array_sum_with_wraparound([2, 1, -5, 4, -3, 1, 2, 3], 8) == 10", "assert max_sub_array_sum_with_wraparound([1, 2, 3, 4, 5], 5) == 15", "assert max_sub_array_sum_with_wraparound([1, -1, 1, -1, 1, -1, 1, -1], 8) == 1", "assert max_sub_array_sum_with_wraparound([1, 2, 3, -2, -3, 4, 5, -1], 8) == 14", "assert max_sub_array_sum_with_wraparound([-1, -2, -3, -4], 4) == -1", "assert max_sub_array_sum_with_wraparound([10, -3, -4, 7, 6, 5, -4, -1], 8) == 23", "assert max_sub_array_sum_with_wraparound([1, 2, 3, -2, 5], 5) == 9", "assert max_sub_array_sum_with_wraparound([1, 2, 3, 4, -10, 10], 6) == 20", "assert max_sub_array_sum_with_wraparound([1, 2, -1, 2, -1, 2, -1, 2], 8) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you can skip at most 'skip' elements.", "code": "def max_sub_array_sum_with_skip(a, n, k, skip):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tskips = 0\n\tfor i in range(n*k):\n\t\tif skips < skip and a[i%n] < 0:\n\t\t\tskips += 1\n\t\t\tcontinue\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_4d374529-77fb-4e8d-ad23-bd16844e8eb7", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 1, 1) == 7", "assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 2, 1) == 10", "assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 3, 1) == 13", "assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 1, 2) == 8", "assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 2, 2) == 11", "assert max_sub_array_sum_with_skip([1, -2, 3, 4, -5], 5, 3, 2) == 14", "assert max_sub_array_sum_with_skip([1, 2, 3, 4, 5], 5, 1, 0) == 15", "assert max_sub_array_sum_with_skip([-1, -2, -3, -4, -5], 5, 1, 5) == 0", "assert max_sub_array_sum_with_skip([-1, -2, -3, -4, -5], 5, 2, 5) == 0", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 1, 1) == 9", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 2, 1) == 14", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 3, 1) == 19", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 1, 0) == 9", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 2, 0) == 14", "assert max_sub_array_sum_with_skip([1, 2, 3, -2, 5], 5, 3, 0) == 19"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you can replace at most one element with a given replacement value.", "code": "def max_sub_array_sum_with_replacement(a, n, k, replacement):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\treplaced = False\n\tfor i in range(n*k):\n\t\tif not replaced and a[i%n] < replacement:\n\t\t\tmax_ending_here = max_ending_here + replacement\n\t\t\treplaced = True\n\t\telse:\n\t\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_89f79621-6b51-4e63-976c-4a9bb8313493", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_replacement([1, 2, 3], 3, 1, 5) == 10", "assert max_sub_array_sum_with_replacement([1, -2, 3, -1, 2], 5, 2, 4) == 11", "assert max_sub_array_sum_with_replacement([-1, -2, -3], 3, 3, 5) == 5", "assert max_sub_array_sum_with_replacement([1, 2, 3], 3, 2, 0) == 12", "assert max_sub_array_sum_with_replacement([1, 2, 3, -2, 5], 5, 1, 4) == 13", "assert max_sub_array_sum_with_replacement([1], 1, 5, 10) == 10", "assert max_sub_array_sum_with_replacement([-1, -2, -3, -4], 4, 1, 0) == 0", "assert max_sub_array_sum_with_replacement([1, 2, 3, 4], 4, 3, 10) == 34", "assert max_sub_array_sum_with_replacement([1, 2, 3, 4], 4, 3, -1) == 30", "assert max_sub_array_sum_with_replacement([1, 2, 3, -4, 5], 5, 2, 6) == 21", "assert max_sub_array_sum_with_replacement([1, -2, 3, -4, 5], 5, 3, 7) == 23", "assert max_sub_array_sum_with_replacement([1, 2, 3, -4, 5], 5, 1, -10) == 11", "assert max_sub_array_sum_with_replacement([1, -2, 3, -4, 5], 5, 1, 0) == 7", "assert max_sub_array_sum_with_replacement([1, 2, 3, 4, 5], 5, 1, 10) == 24", "assert max_sub_array_sum_with_replacement([1, 2, 3, 4, 5], 5, 2, 10) == 39"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you must exclude a given element from the sum.", "code": "def max_sub_array_sum_with_exclusion(a, n, k, exclude):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tif a[i%n] == exclude:\n\t\t\tcontinue\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_4c95b207-5847-4d59-a036-600c60ad8856", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_exclusion([1, 2, 3], 3, 1, 2) == 4", "assert max_sub_array_sum_with_exclusion([1, -2, 3, 4, -1], 5, 2, -2) == 12", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4, 5], 5, 3, 3) == 24", "assert max_sub_array_sum_with_exclusion([-1, -2, -3, -4], 4, 2, -3) == -1", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4, 5], 5, 1, 6) == 15", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4, 5], 5, 0, 3) == 0", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4, 5], 5, 1, 1) == 14", "assert max_sub_array_sum_with_exclusion([1, 1, 1, 1, 1], 5, 5, 1) == 0", "assert max_sub_array_sum_with_exclusion([1, -1, 1, -1, 1], 5, 3, -1) == 3", "assert max_sub_array_sum_with_exclusion([1, 2, 3, -2, 5], 5, 2, -2) == 16", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4], 4, 2, 4) == 9", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4], 4, 2, 2) == 12", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4], 4, 2, 1) == 12", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4], 4, 2, 0) == 20", "assert max_sub_array_sum_with_exclusion([1, 2, 3, 4], 4, 2, 5) == 20"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should not exceed a given threshold.", "code": "def max_sub_array_sum_with_threshold(a, n, k, threshold):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here > threshold:\n\t\t\tmax_ending_here = threshold\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_31034d73-f704-42d6-ba64-d7b5ffd563e6", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_threshold([1, 2, 3], 3, 2, 10) == 10", "assert max_sub_array_sum_with_threshold([-1, -2, -3], 3, 3, 0) == 0", "assert max_sub_array_sum_with_threshold([4, -1, 2, 1], 4, 1, 6) == 6", "assert max_sub_array_sum_with_threshold([1, 2, 3, 4, 5], 5, 3, 15) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray of a fixed length in the modified array which is formed by repeating the given array k times.", "code": "def max_sub_array_sum_with_fixed_length(a, n, k, length):\n\tmax_so_far = -2147483648\n\tfor i in range((n*k) - length + 1):\n\t\tcurrent_sum = sum(a[j%n] for j in range(i, i + length))\n\t\tif max_so_far < current_sum:\n\t\t\tmax_so_far = current_sum\n\treturn max_so_far", "task_id": "286_630acebf-ac87-4ee4-8582-4f43ed0ce169", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_fixed_length([1, 2, 3], 3, 2, 2) == 5", "assert max_sub_array_sum_with_fixed_length([4, -1, 2, 1], 4, 3, 3) == 7", "assert max_sub_array_sum_with_fixed_length([-2, -3, 4, -1, -2, 1, 5, -3], 8, 1, 4) == 7", "assert max_sub_array_sum_with_fixed_length([1, 2, 3, 4, 5], 5, 1, 5) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the subarray must have alternating positive and negative signs.", "code": "def max_sub_array_sum_with_alternating_signs(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tif i > 0 and (a[i%n] > 0) == (a[(i-1)%n] > 0):\n\t\t\tmax_ending_here = 0\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_e94a4444-2142-4bce-92a9-dd7133e5c339", "test_setup_code": "", "test_list": ["assert max_sub_array_sum_with_alternating_signs([1, -2, 3, -4, 5], 5, 2) == 9", "assert max_sub_array_sum_with_alternating_signs([-1, 2, -3, 4, -5], 5, 3) == 6", "assert max_sub_array_sum_with_alternating_signs([1, 2, 3, 4, 5], 5, 1) == 5", "assert max_sub_array_sum_with_alternating_signs([-1, -2, -3, -4, -5], 5, 2) == 0"], "challenge_test_list": []}
{"text": "Write a python function to determine if a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "289_ce858787-1532-46ec-9805-b3e9e8bd870c", "test_setup_code": "", "test_list": ["assert is_leap_year(2000) == True", "assert is_leap_year(1900) == False", "assert is_leap_year(2004) == True", "assert is_leap_year(2001) == False", "assert is_leap_year(1600) == True", "assert is_leap_year(1700) == False", "assert is_leap_year(2020) == True", "assert is_leap_year(2021) == False", "assert is_leap_year(2400) == True", "assert is_leap_year(1800) == False", "assert is_leap_year(2100) == False", "assert is_leap_year(2008) == True", "assert is_leap_year(2012) == True", "assert is_leap_year(2010) == False", "assert is_leap_year(2200) == False"], "challenge_test_list": []}
{"text": "Write a python function to determine the number of days in a given month of a given year.", "code": "def days_in_month(month: int, year: int) -> int:\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 0", "task_id": "289_c3705823-278d-4d20-adaf-1f6048a4f11e", "test_setup_code": "", "test_list": ["assert days_in_month(1, 2023) == 31", "assert days_in_month(2, 2020) == 29", "assert days_in_month(2, 2021) == 28", "assert days_in_month(4, 2023) == 30", "assert days_in_month(6, 2023) == 30", "assert days_in_month(9, 2023) == 30", "assert days_in_month(11, 2023) == 30", "assert days_in_month(12, 2023) == 31", "assert days_in_month(2, 1900) == 28", "assert days_in_month(2, 2000) == 29", "assert days_in_month(3, 2023) == 31", "assert days_in_month(5, 2023) == 31", "assert days_in_month(7, 2023) == 31", "assert days_in_month(8, 2023) == 31", "assert days_in_month(0, 2023) == 0"], "challenge_test_list": []}
{"text": "Write a python function to determine the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day: int, month: int, year: int) -> str:\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return days[datetime.date(year, month, day).weekday()]", "task_id": "289_9e2ef985-8dfb-4553-a1ba-be7818d39eff", "test_setup_code": "", "test_list": ["assert day_of_week(1, 1, 2020) == 'Wednesday'", "assert day_of_week(29, 2, 2020) == 'Saturday'", "assert day_of_week(31, 12, 1999) == 'Friday'", "assert day_of_week(1, 1, 2000) == 'Saturday'", "assert day_of_week(4, 7, 1776) == 'Thursday'", "assert day_of_week(25, 12, 2021) == 'Saturday'", "assert day_of_week(1, 1, 1900) == 'Monday'", "assert day_of_week(31, 12, 2099) == 'Thursday'", "assert day_of_week(29, 2, 1904) == 'Monday'", "assert day_of_week(28, 2, 1900) == 'Wednesday'", "assert day_of_week(1, 3, 2000) == 'Wednesday'", "assert day_of_week(15, 8, 1947) == 'Friday'", "assert day_of_week(31, 10, 2022) == 'Monday'", "assert day_of_week(1, 1, 2100) == 'Friday'", "assert day_of_week(1, 1, 1970) == 'Thursday'"], "challenge_test_list": []}
{"text": "Write a python function to calculate the number of days between two given dates.", "code": "from datetime import date\n\ndef days_between_dates(day1: int, month1: int, year1: int, day2: int, month2: int, year2: int) -> int:\n    d1 = date(year1, month1, day1)\n    d2 = date(year2, month2, day2)\n    return abs((d2 - d1).days)", "task_id": "289_0843cb43-c14c-4395-a370-4a86e6b00bf5", "test_setup_code": "", "test_list": ["assert days_between_dates(1, 1, 2020, 1, 1, 2020) == 0", "assert days_between_dates(1, 1, 2020, 2, 1, 2020) == 1", "assert days_between_dates(1, 1, 2020, 1, 2, 2020) == 31", "assert days_between_dates(1, 1, 2020, 1, 1, 2021) == 366", "assert days_between_dates(29, 2, 2020, 1, 3, 2020) == 1", "assert days_between_dates(1, 1, 2020, 1, 1, 2019) == 365", "assert days_between_dates(1, 1, 2020, 31, 12, 2020) == 365", "assert days_between_dates(1, 1, 2020, 1, 1, 2022) == 731", "assert days_between_dates(1, 1, 2020, 1, 1, 2023) == 1096", "assert days_between_dates(1, 1, 2020, 1, 1, 2024) == 1461", "assert days_between_dates(1, 1, 2020, 1, 1, 2100) == 29400", "assert days_between_dates(1, 1, 2020, 1, 1, 2000) == 7305", "assert days_between_dates(1, 1, 2020, 1, 1, 1900) == 43829", "assert days_between_dates(1, 1, 2020, 1, 1, 1800) == 80355", "assert days_between_dates(1, 1, 2020, 1, 1, 1700) == 116881"], "challenge_test_list": []}
{"text": "Write a python function to add a given number of days to a date and return the new date.", "code": "from datetime import date, timedelta\n\ndef add_days_to_date(day: int, month: int, year: int, days_to_add: int) -> tuple:\n    initial_date = date(year, month, day)\n    new_date = initial_date + timedelta(days=days_to_add)\n    return (new_date.day, new_date.month, new_date.year)", "task_id": "289_098e15a9-85bf-4698-8c74-623a24361bfb", "test_setup_code": "", "test_list": ["assert add_days_to_date(1, 1, 2020, 1) == (2, 1, 2020)", "assert add_days_to_date(31, 12, 2020, 1) == (1, 1, 2021)", "assert add_days_to_date(28, 2, 2020, 1) == (29, 2, 2020)", "assert add_days_to_date(28, 2, 2021, 1) == (1, 3, 2021)", "assert add_days_to_date(31, 1, 2021, 1) == (1, 2, 2021)", "assert add_days_to_date(30, 4, 2021, 1) == (1, 5, 2021)", "assert add_days_to_date(1, 1, 2021, 365) == (1, 1, 2022)", "assert add_days_to_date(1, 1, 2020, 366) == (1, 1, 2021)", "assert add_days_to_date(1, 3, 2020, -1) == (29, 2, 2020)", "assert add_days_to_date(1, 3, 2021, -1) == (28, 2, 2021)", "assert add_days_to_date(1, 1, 2021, -1) == (31, 12, 2020)", "assert add_days_to_date(1, 1, 2021, 30) == (31, 1, 2021)", "assert add_days_to_date(1, 1, 2021, 60) == (2, 3, 2021)", "assert add_days_to_date(1, 1, 2021, 3650) == (30, 12, 2030)", "assert add_days_to_date(1, 1, 2021, -3650) == (3, 1, 2011)"], "challenge_test_list": []}
{"text": "Write a python function to calculate the number of days in a given year.", "code": "def days_in_year(year: int) -> int:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return 366\n    return 365", "task_id": "289_a8bd941b-81c2-41d7-b1a1-39ef4eab474e", "test_setup_code": "", "test_list": ["assert days_in_year(2020) == 366", "assert days_in_year(2019) == 365", "assert days_in_year(2000) == 366", "assert days_in_year(1900) == 365", "assert days_in_year(2100) == 365", "assert days_in_year(2400) == 366", "assert days_in_year(2021) == 365", "assert days_in_year(2024) == 366", "assert days_in_year(1996) == 366", "assert days_in_year(1999) == 365", "assert days_in_year(1600) == 366", "assert days_in_year(1700) == 365", "assert days_in_year(1800) == 365", "assert days_in_year(2200) == 365", "assert days_in_year(2004) == 366"], "challenge_test_list": []}
{"text": "Write a python function to determine the week number of the year for a given date.", "code": "import datetime\n\ndef week_of_year(day: int, month: int, year: int) -> int:\n    return datetime.date(year, month, day).isocalendar()[1]", "task_id": "289_2d951e8e-29f8-499f-a17f-9cbdefaa046e", "test_setup_code": "", "test_list": ["assert week_of_year(1, 1, 2023) == 52", "assert week_of_year(2, 1, 2023) == 1", "assert week_of_year(31, 12, 2023) == 52", "assert week_of_year(1, 1, 2020) == 1", "assert week_of_year(29, 2, 2020) == 9", "assert week_of_year(31, 12, 2020) == 53", "assert week_of_year(1, 3, 2021) == 9", "assert week_of_year(1, 1, 2022) == 52", "assert week_of_year(1, 1, 2021) == 53", "assert week_of_year(31, 12, 2021) == 52", "assert week_of_year(1, 1, 2019) == 1", "assert week_of_year(31, 12, 2019) == 1", "assert week_of_year(1, 1, 2000) == 52", "assert week_of_year(31, 12, 2000) == 52", "assert week_of_year(1, 1, 1900) == 1"], "challenge_test_list": []}
{"text": "Write a python function to validate if a given date is valid.", "code": "import datetime\n\ndef is_valid_date(day: int, month: int, year: int) -> bool:\n    try:\n        datetime.date(year, month, day)\n        return True\n    except ValueError:\n        return False", "task_id": "289_085d8d91-9c6e-4592-9b70-677167ad7032", "test_setup_code": "", "test_list": ["assert is_valid_date(29, 2, 2020) == True", "assert is_valid_date(29, 2, 2019) == False", "assert is_valid_date(31, 4, 2021) == False", "assert is_valid_date(30, 4, 2021) == True", "assert is_valid_date(31, 12, 2021) == True", "assert is_valid_date(1, 1, 2021) == True", "assert is_valid_date(0, 1, 2021) == False", "assert is_valid_date(1, 0, 2021) == False", "assert is_valid_date(1, 13, 2021) == False", "assert is_valid_date(32, 1, 2021) == False", "assert is_valid_date(31, 1, 2021) == True", "assert is_valid_date(29, 2, 2000) == True", "assert is_valid_date(29, 2, 1900) == False", "assert is_valid_date(28, 2, 1900) == True", "assert is_valid_date(31, 11, 2021) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the next leap year after a given year.", "code": "def next_leap_year(year: int) -> int:\n    while True:\n        year += 1\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return year", "task_id": "289_eaeb63db-090f-4353-89c3-59eac813f0c4", "test_setup_code": "", "test_list": ["assert next_leap_year(2021) == 2024", "assert next_leap_year(2020) == 2024", "assert next_leap_year(1900) == 1904", "assert next_leap_year(2000) == 2004", "assert next_leap_year(1999) == 2000", "assert next_leap_year(2100) == 2104", "assert next_leap_year(2096) == 2104", "assert next_leap_year(1600) == 1604", "assert next_leap_year(1582) == 1584", "assert next_leap_year(1700) == 1704", "assert next_leap_year(1800) == 1804", "assert next_leap_year(1899) == 1904", "assert next_leap_year(2019) == 2020", "assert next_leap_year(2023) == 2024", "assert next_leap_year(2024) == 2028"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum sum of its elements.", "code": "def max_sum_list(list1):\n    max_sum = max(sum(x) for x in list1)\n    max_list = max(list1, key=sum)\n    return (max_sum, max_list)", "task_id": "290_22a3fefd-0e24-450b-beed-838052b93aab", "test_setup_code": "", "test_list": ["assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (24, [7, 8, 9])", "assert max_sum_list([[10, 20], [30, 40], [50, 60]]) == (110, [50, 60])", "assert max_sum_list([[1], [2], [3]]) == (3, [3])", "assert max_sum_list([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == (0, [0, 0, 0])", "assert max_sum_list([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == (-6, [-1, -2, -3])", "assert max_sum_list([[1, 2, 3, 4], [4, 5, 6], [7, 8]]) == (10, [1, 2, 3, 4])", "assert max_sum_list([[5, 5, 5], [5, 5, 5], [5, 5, 5]]) == (15, [5, 5, 5])", "assert max_sum_list([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == (9, [3, 3, 3])", "assert max_sum_list([[1, 2], [3, 4], [5, 6]]) == (11, [5, 6])", "assert max_sum_list([[1, -1], [2, -2], [3, -3]]) == (0, [1, -1])", "assert max_sum_list([[100], [200], [300]]) == (300, [300])", "assert max_sum_list([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == (6, [1, 2, 3])", "assert max_sum_list([[1, 2, 3], [3, 2, 1], [2, 3, 1]]) == (6, [1, 2, 3])", "assert max_sum_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3]]) == (15, [1, 2, 3, 4, 5])", "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == (34, [7, 8, 9, 10])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the minimum length.", "code": "def min_length_list(list1):\n    min_length = min(len(x) for x in list1)\n    min_list = min(list1, key=len)\n    return (min_length, min_list)", "task_id": "290_8f6d4d35-0c40-45b4-aa9c-5d4297fbc7b3", "test_setup_code": "", "test_list": ["assert min_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == (2, [4, 5])", "assert min_length_list([[], [1, 2], [3, 4, 5]]) == (0, [])", "assert min_length_list([[1], [2], [3]]) == (1, [1])", "assert min_length_list([[1, 2], [3, 4], [5]]) == (1, [5])", "assert min_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, [1, 2, 3])", "assert min_length_list([[], [], []]) == (0, [])", "assert min_length_list([[1, 2, 3], [4, 5], [6, 7], [8]]) == (1, [8])", "assert min_length_list([[1, 2], [3], [4, 5, 6], [7, 8, 9, 10]]) == (1, [3])", "assert min_length_list([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == (1, [1])", "assert min_length_list([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]]) == (4, [1, 2, 3, 4])", "assert min_length_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == (3, [1, 2, 3])", "assert min_length_list([[1, 2, 3, 4, 5], [6, 7, 8], [9, 10]]) == (2, [9, 10])", "assert min_length_list([[1, 2, 3], [4, 5], [6, 7, 8], [9]]) == (1, [9])", "assert min_length_list([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == (2, [1, 2])", "assert min_length_list([[1, 2, 3, 4, 5, 6], [7, 8], [9, 10, 11, 12, 13]]) == (2, [7, 8])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum average of its elements.", "code": "def max_avg_list(list1):\n    max_avg = max(sum(x)/len(x) for x in list1 if len(x) > 0)\n    max_list = max(list1, key=lambda x: sum(x)/len(x) if len(x) > 0 else float('-inf'))\n    return (max_avg, max_list)", "task_id": "290_c55e2949-7a9e-4bee-9ec4-f97217a35529", "test_setup_code": "", "test_list": ["assert max_avg_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (8.0, [7, 8, 9])", "assert max_avg_list([[1, 2], [3, 4], [5, 6]]) == (5.5, [5, 6])", "assert max_avg_list([[10, 20, 30], [5, 5, 5], [1, 2, 3]]) == (20.0, [10, 20, 30])", "assert max_avg_list([[1], [2], [3], [4], [5]]) == (5.0, [5])", "assert max_avg_list([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == (4.5, [3, 4, 5, 6])", "assert max_avg_list([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == (3.0, [3, 3, 3])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], [7, 8]]) == (5.5, [4, 5, 6])", "assert max_avg_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == (7.5, [6, 7, 8, 9])", "assert max_avg_list([[1, 2], [3, 4], [5, 6, 7]]) == (6.0, [5, 6, 7])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10]]) == (8.5, [7, 8, 9, 10])", "assert max_avg_list([[0, 0, 0], [0, 0], [0]]) == (0.0, [0, 0, 0])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], [10, 10, 10]]) == (10.0, [10, 10, 10])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], [0, 0, 0]]) == (5.0, [4, 5, 6])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], []]) == (5.0, [4, 5, 6])", "assert max_avg_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == (9.0, [7, 8, 9, 10, 11])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum product of its elements.", "code": "from functools import reduce\nimport operator\n\ndef max_product_list(list1):\n    max_product = max(reduce(operator.mul, x, 1) for x in list1)\n    max_list = max(list1, key=lambda x: reduce(operator.mul, x, 1))\n    return (max_product, max_list)", "task_id": "290_8db8077f-c943-4431-b5a1-6daa558edfd8", "test_setup_code": "", "test_list": ["assert max_product_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (504, [7, 8, 9])", "assert max_product_list([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == (8, [2, 2, 2])", "assert max_product_list([[1, -2, 3], [-4, 5, -6], [7, -8, 9]]) == (504, [7, -8, 9])", "assert max_product_list([[1], [2], [3]]) == (3, [3])", "assert max_product_list([[1, 2], [3, 4], [5, 6]]) == (30, [5, 6])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == (120, [1, 2, 3, 4, 5])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 0], [1, 2, 3, 4]]) == (24, [1, 2, 3, 4])", "assert max_product_list([[1, 2, 3], [1, 2, 3, -1], [1, 2, 3, 4]]) == (24, [1, 2, 3, 4])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 0], [1, 2, 3, 4, 0]]) == (6, [1, 2, 3])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, -5]]) == (24, [1, 2, 3, 4])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6]]) == (720, [1, 2, 3, 4, 5, 6])", "assert max_product_list([[-1, -2, -3], [-1, -2, -3, -4], [-1, -2, -3, -4, -5]]) == (-6, [-1, -2, -3])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 0]]) == (24, [1, 2, 3, 4])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7]]) == (5040, [1, 2, 3, 4, 5, 6, 7])", "assert max_product_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5, 6, 7, 8]]) == (40320, [1, 2, 3, 4, 5, 6, 7, 8])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are even.", "code": "def max_length_even_list(list1):\n    even_lists = [x for x in list1 if all(e % 2 == 0 for e in x)]\n    max_length = max(len(x) for x in even_lists)\n    max_list = max(even_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_a4700553-6b0b-407c-a14f-1808c7e10ed3", "test_setup_code": "", "test_list": ["assert max_length_even_list([[2, 4, 6], [1, 3, 5], [8, 10, 12, 14]]) == (4, [8, 10, 12, 14])", "assert max_length_even_list([[2, 4], [6, 8, 10], [12, 14, 16, 18]]) == (4, [12, 14, 16, 18])", "assert max_length_even_list([[1, 3, 5], [7, 9, 11], [13, 15, 17]]) == (0, [])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12], [14, 16, 18, 20, 22]]) == (5, [14, 16, 18, 20, 22])", "assert max_length_even_list([[2], [4, 6], [8, 10, 12], [14, 16, 18, 20]]) == (4, [14, 16, 18, 20])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24, 26, 28]]) == (6, [18, 20, 22, 24, 26, 28])", "assert max_length_even_list([[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24]]) == (3, [2, 4, 6])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24]]) == (4, [2, 4, 6, 8])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12, 14], [16, 18, 20, 22, 24]]) == (5, [16, 18, 20, 22, 24])", "assert max_length_even_list([[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24, 26, 28, 30]]) == (6, [20, 22, 24, 26, 28, 30])", "assert max_length_even_list([[], [2, 4, 6], [8, 10, 12, 14, 16], [18, 20, 22, 24, 26, 28, 30]]) == (7, [18, 20, 22, 24, 26, 28, 30])", "assert max_length_even_list([[2, 4, 6], [8, 10, 12], [14, 16, 18], [20, 22, 24], [26, 28, 30, 32, 34, 36]]) == (6, [26, 28, 30, 32, 34, 36])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24], [26, 28, 30, 32, 34, 36, 38]]) == (7, [26, 28, 30, 32, 34, 36, 38])", "assert max_length_even_list([[2, 4, 6, 8, 10], [12, 14, 16, 18], [20, 22, 24, 26, 28, 30]]) == (6, [20, 22, 24, 26, 28, 30])", "assert max_length_even_list([[2, 4, 6, 8], [10, 12, 14, 16], [18, 20, 22, 24, 26, 28, 30, 32]]) == (8, [18, 20, 22, 24, 26, 28, 30, 32])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are odd.", "code": "def max_length_odd_list(list1):\n    odd_lists = [x for x in list1 if all(e % 2 != 0 for e in x)]\n    max_length = max(len(x) for x in odd_lists)\n    max_list = max(odd_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_54482e4f-3099-4395-9774-5200a679bf49", "test_setup_code": "", "test_list": ["assert max_length_odd_list([[1, 3, 5], [2, 4, 6], [7, 9, 11, 13]]) == (4, [7, 9, 11, 13])", "assert max_length_odd_list([[1], [3, 5], [7, 9, 11]]) == (3, [7, 9, 11])", "assert max_length_odd_list([[2, 4], [6, 8], [10, 12]]) == (0, [])", "assert max_length_odd_list([[1, 3, 5], [7, 9], [11, 13, 15, 17]]) == (4, [11, 13, 15, 17])", "assert max_length_odd_list([[1, 3, 5, 7], [9, 11, 13], [15, 17, 19, 21, 23]]) == (5, [15, 17, 19, 21, 23])", "assert max_length_odd_list([[1, 2, 3], [5, 7, 9], [11, 13, 15], [17, 19, 21, 23]]) == (4, [17, 19, 21, 23])", "assert max_length_odd_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])", "assert max_length_odd_list([[1, 3, 5], [7, 9, 11], [13, 15, 17], [19, 21, 23, 25]]) == (4, [19, 21, 23, 25])", "assert max_length_odd_list([[1, 3, 5, 7, 9], [11, 13, 15], [17, 19, 21, 23, 25, 27]]) == (6, [17, 19, 21, 23, 25, 27])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11], [13, 15, 17], [19, 21, 23, 25, 27, 29]]) == (6, [19, 21, 23, 25, 27, 29])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11, 13], [15, 17, 19], [21, 23, 25, 27, 29, 31]]) == (6, [21, 23, 25, 27, 29, 31])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11, 13, 15], [17, 19, 21], [23, 25, 27, 29, 31, 33]]) == (6, [23, 25, 27, 29, 31, 33])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11, 13, 15, 17], [19, 21, 23], [25, 27, 29, 31, 33, 35]]) == (6, [25, 27, 29, 31, 33, 35])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11, 13, 15, 17, 19], [21, 23, 25], [27, 29, 31, 33, 35, 37]]) == (6, [27, 29, 31, 33, 35, 37])", "assert max_length_odd_list([[1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21], [23, 25, 27], [29, 31, 33, 35, 37, 39]]) == (6, [29, 31, 33, 35, 37, 39])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are prime numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_length_prime_list(list1):\n    prime_lists = [x for x in list1 if all(is_prime(e) for e in x)]\n    max_length = max(len(x) for x in prime_lists)\n    max_list = max(prime_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_e50580ef-054d-446c-8753-5b25fea5e3ae", "test_setup_code": "", "test_list": ["assert max_length_prime_list([[2, 3], [5, 7, 11], [13, 17, 19, 23]]) == (4, [13, 17, 19, 23])", "assert max_length_prime_list([[2], [3, 5], [7, 11, 13], [17, 19, 23, 29, 31]]) == (5, [17, 19, 23, 29, 31])", "assert max_length_prime_list([[4, 6, 8], [9, 10, 12], [14, 15, 16]]) == (0, [])", "assert max_length_prime_list([[2, 3, 5], [7, 11], [13, 17, 19], [23, 29, 31, 37, 41]]) == (5, [23, 29, 31, 37, 41])", "assert max_length_prime_list([[2, 3, 5, 7], [11, 13, 17, 19], [23, 29, 31, 37]]) == (4, [2, 3, 5, 7])", "assert max_length_prime_list([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37, 41, 43, 47]]) == (6, [29, 31, 37, 41, 43, 47])", "assert max_length_prime_list([[2, 3], [5, 7], [11, 13], [17, 19], [23, 29, 31]]) == (3, [23, 29, 31])", "assert max_length_prime_list([[2], [3], [5], [7], [11], [13], [17], [19], [23], [29], [31], [37], [41], [43], [47]]) == (1, [2])", "assert max_length_prime_list([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47]]) == (15, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47])", "assert max_length_prime_list([[4, 6, 8, 10], [12, 14, 16, 18], [20, 22, 24, 26]]) == (0, [])", "assert max_length_prime_list([[2, 3, 5, 7], [11, 13, 17, 19], [23, 29, 31, 37], [41, 43, 47, 53]]) == (4, [2, 3, 5, 7])", "assert max_length_prime_list([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37, 41, 43, 47, 53]]) == (7, [29, 31, 37, 41, 43, 47, 53])", "assert max_length_prime_list([[2, 3, 5], [7, 11, 13], [17, 19, 23], [29, 31, 37, 41, 43, 47, 53, 59]]) == (8, [29, 31, 37, 41, 43, 47, 53, 59])", "assert max_length_prime_list([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]]) == (25, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97])", "assert max_length_prime_list([[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97], [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]]) == (21, [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are unique.", "code": "def max_length_unique_list(list1):\n    unique_lists = [x for x in list1 if len(x) == len(set(x))]\n    max_length = max(len(x) for x in unique_lists)\n    max_list = max(unique_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_acee3c39-afad-4424-b00a-414f73739cb1", "test_setup_code": "", "test_list": ["assert max_length_unique_list([[1, 2, 3], [4, 4, 4], [5, 6, 7, 8]]) == (4, [5, 6, 7, 8])", "assert max_length_unique_list([[1, 2], [3, 4, 5], [6, 6, 6], [7, 8, 9, 10]]) == (4, [7, 8, 9, 10])", "assert max_length_unique_list([[1], [2, 2], [3, 3, 3], [4, 5, 6, 7]]) == (4, [4, 5, 6, 7])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 5], [6, 7, 8, 9, 10]]) == (5, [6, 7, 8, 9, 10])", "assert max_length_unique_list([[1, 1], [2, 3], [4, 5, 6], [7, 8, 9, 10, 11]]) == (5, [7, 8, 9, 10, 11])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13]]) == (4, [10, 11, 12, 13])", "assert max_length_unique_list([[1, 2, 2], [3, 4, 5], [6, 7, 8, 8], [9, 10, 11, 12]]) == (4, [9, 10, 11, 12])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11, 12]]) == (5, [8, 9, 10, 11, 12])", "assert max_length_unique_list([[1, 2, 3, 4], [5, 5, 5, 5], [6, 7, 8, 9, 10]]) == (5, [6, 7, 8, 9, 10])", "assert max_length_unique_list([[1, 2], [3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]) == (6, [7, 8, 9, 10, 11, 12])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12, 13, 14]]) == (5, [10, 11, 12, 13, 14])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14]]) == (6, [9, 10, 11, 12, 13, 14])", "assert max_length_unique_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10, 11, 12, 13]]) == (7, [7, 8, 9, 10, 11, 12, 13])", "assert max_length_unique_list([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17, 18]]) == (7, [12, 13, 14, 15, 16, 17, 18])", "assert max_length_unique_list([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12, 13, 14]]) == (8, [7, 8, 9, 10, 11, 12, 13, 14])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are sorted in non-decreasing order.", "code": "def max_length_sorted_list(list1):\n    sorted_lists = [x for x in list1 if all(x[i] <= x[i+1] for i in range(len(x)-1))]\n    max_length = max(len(x) for x in sorted_lists)\n    max_list = max(sorted_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_5f5a341b-3437-4931-92db-2ce804cf86fe", "test_setup_code": "", "test_list": ["assert max_length_sorted_list([[1, 2, 3], [4, 5], [1, 3, 5, 7, 9]]) == (5, [1, 3, 5, 7, 9])", "assert max_length_sorted_list([[1, 3, 2], [4, 5, 6], [7, 8]]) == (3, [4, 5, 6])", "assert max_length_sorted_list([[5, 4, 3], [1, 2, 3, 4], [9, 8, 7]]) == (4, [1, 2, 3, 4])", "assert max_length_sorted_list([[1, 1, 1], [2, 2], [3, 3, 3, 3]]) == (4, [3, 3, 3, 3])", "assert max_length_sorted_list([[1, 2], [3, 4], [5, 6]]) == (2, [1, 2])", "assert max_length_sorted_list([[1], [2], [3]]) == (1, [1])", "assert max_length_sorted_list([[5, 5, 5], [1, 1, 1, 1], [3, 3]]) == (4, [1, 1, 1, 1])", "assert max_length_sorted_list([[9, 8, 7], [6, 5, 4], [3, 2, 1]]) == (0, [])", "assert max_length_sorted_list([]) == (0, [])", "assert max_length_sorted_list([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]]) == (5, [1, 2, 3, 4, 5])", "assert max_length_sorted_list([[1, 2, 3], [3, 2, 1], []]) == (3, [1, 2, 3])", "assert max_length_sorted_list([[], [1], [1, 2]]) == (2, [1, 2])", "assert max_length_sorted_list([[1, 1, 2, 3, 3], [5, 6, 7, 8], [9, 9, 9]]) == (5, [1, 1, 2, 3, 3])", "assert max_length_sorted_list([[10, 20, 30], [5, 15, 25, 35], [1, 2, 3, 4, 5, 6]]) == (6, [1, 2, 3, 4, 5, 6])", "assert max_length_sorted_list([[100], [100, 100], [100, 100, 100]]) == (3, [100, 100, 100])"], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are vowels.", "code": "def max_length_vowel_list(list1):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowel_lists = [x for x in list1 if all(e in vowels for e in x)]\n    max_length = max(len(x) for x in vowel_lists)\n    max_list = max(vowel_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_c5ebc72e-d150-4427-b312-0948df8b0715", "test_setup_code": "", "test_list": ["assert max_length_vowel_list([['a', 'e', 'i'], ['o', 'u'], ['a', 'e', 'i', 'o', 'u']]) == (5, ['a', 'e', 'i', 'o', 'u'])", "assert max_length_vowel_list([['a', 'e'], ['i', 'o'], ['u']]) == (2, ['a', 'e'])", "assert max_length_vowel_list([['b', 'c', 'd'], ['e', 'i'], ['o', 'u', 'a']]) == (3, ['o', 'u', 'a'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i'], ['o', 'u']]) == (5, ['a', 'e', 'i', 'o', 'u'])", "assert max_length_vowel_list([['a'], ['e'], ['i'], ['o'], ['u']]) == (1, ['a'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o'], ['u', 'a', 'e'], ['i', 'o', 'u']]) == (4, ['a', 'e', 'i', 'o'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o'], ['a', 'e']]) == (5, ['a', 'e', 'i', 'o', 'u'])", "assert max_length_vowel_list([['b', 'c'], ['d', 'e'], ['f', 'g']]) == (2, ['d', 'e'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u', 'a'], ['a', 'e', 'i']]) == (6, ['a', 'e', 'i', 'o', 'u', 'a'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u']]) == (5, ['a', 'e', 'i', 'o', 'u'])", "assert max_length_vowel_list([['a', 'e'], ['i', 'o'], ['u', 'a', 'e', 'i', 'o']]) == (5, ['u', 'a', 'e', 'i', 'o'])", "assert max_length_vowel_list([['a'], ['e'], ['i'], ['o'], ['u'], ['a', 'e', 'i', 'o', 'u']]) == (5, ['a', 'e', 'i', 'o', 'u'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u', 'a']]) == (6, ['a', 'e', 'i', 'o', 'u', 'a'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u', 'a', 'e']]) == (7, ['a', 'e', 'i', 'o', 'u', 'a', 'e'])", "assert max_length_vowel_list([['a', 'e', 'i', 'o', 'u'], ['a', 'e', 'i', 'o', 'u', 'a', 'e', 'i']]) == (8, ['a', 'e', 'i', 'o', 'u', 'a', 'e', 'i'])"], "challenge_test_list": []}
{"text": "Write a python function to find the remainder when one number is divided by another.", "code": "def find_remainder(n: int, m: int) -> int:\n    return n % m", "task_id": "292_cb07d9b0-8445-475a-8902-8bf25d168218", "test_setup_code": "", "test_list": ["assert find_remainder(10, 3) == 1", "assert find_remainder(25, 5) == 0", "assert find_remainder(7, 1) == 0", "assert find_remainder(0, 5) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def find_sum(n: int, m: int) -> int:\n    return n + m", "task_id": "292_2ddf6118-a183-48d8-b5e3-60a8b41ff6fb", "test_setup_code": "", "test_list": ["assert find_sum(1, 2) == 3", "assert find_sum(0, 0) == 0", "assert find_sum(-1, -1) == -2", "assert find_sum(-5, 5) == 0", "assert find_sum(100, 200) == 300", "assert find_sum(-100, 100) == 0", "assert find_sum(123456, 654321) == 777777", "assert find_sum(-123456, -654321) == -777777", "assert find_sum(0, 999999) == 999999", "assert find_sum(999999, 0) == 999999", "assert find_sum(2147483647, 1) == 2147483648", "assert find_sum(-2147483648, -1) == -2147483649", "assert find_sum(2147483647, -2147483647) == 0", "assert find_sum(-2147483648, 2147483648) == 0", "assert find_sum(500, -1000) == -500"], "challenge_test_list": []}
{"text": "Write a python function to find the difference between two numbers.", "code": "def find_difference(n: int, m: int) -> int:\n    return n - m", "task_id": "292_d5641fb1-871c-46e1-a9f0-d0798914e50a", "test_setup_code": "", "test_list": ["assert find_difference(10, 5) == 5", "assert find_difference(5, 10) == -5", "assert find_difference(0, 0) == 0", "assert find_difference(100, 50) == 50", "assert find_difference(50, 100) == -50", "assert find_difference(-10, -5) == -5", "assert find_difference(-5, -10) == 5", "assert find_difference(-10, 10) == -20", "assert find_difference(10, -10) == 20", "assert find_difference(0, 10) == -10", "assert find_difference(10, 0) == 10", "assert find_difference(1, 1) == 0", "assert find_difference(-1, -1) == 0", "assert find_difference(123456, 654321) == -530865", "assert find_difference(654321, 123456) == 530865"], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def find_product(n: int, m: int) -> int:\n    return n * m", "task_id": "292_d0dfeca6-08ab-4a96-b442-31c74a8f6d77", "test_setup_code": "", "test_list": ["assert find_product(0, 0) == 0", "assert find_product(0, 5) == 0", "assert find_product(5, 0) == 0", "assert find_product(1, 1) == 1", "assert find_product(-1, 1) == -1", "assert find_product(1, -1) == -1", "assert find_product(-1, -1) == 1", "assert find_product(2, 3) == 6", "assert find_product(-2, 3) == -6", "assert find_product(2, -3) == -6", "assert find_product(12345, 6789) == 83810205", "assert find_product(-12345, 6789) == -83810205", "assert find_product(12345, -6789) == -83810205", "assert find_product(-12345, -6789) == 83810205", "assert find_product(999, 999) == 998001"], "challenge_test_list": []}
{"text": "Write a python function to find the power of one number raised to another.", "code": "def find_power(n: int, m: int) -> int:\n    return n ** m", "task_id": "292_1de08b9e-3b72-43ae-9d13-e73fed065de4", "test_setup_code": "", "test_list": ["assert find_power(2, 3) == 8", "assert find_power(5, 0) == 1", "assert find_power(0, 5) == 0", "assert find_power(1, 100) == 1", "assert find_power(10, 2) == 100", "assert find_power(3, 3) == 27", "assert find_power(2, 10) == 1024", "assert find_power(7, 1) == 7", "assert find_power(9, 2) == 81", "assert find_power(4, 4) == 256", "assert find_power(2, -3) == 0.125", "assert find_power(-2, 3) == -8", "assert find_power(-2, 2) == 4", "assert find_power(0, 0) == 1", "assert find_power(100, 1) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find both the quotient and remainder when one number is divided by another.", "code": "def find_quotient_and_remainder(n: int, m: int) -> tuple:\n    return (n // m, n % m)", "task_id": "292_0f90652b-aa1b-43ad-b35c-90e0f42757c5", "test_setup_code": "", "test_list": ["assert find_quotient_and_remainder(10, 3) == (3, 1)", "assert find_quotient_and_remainder(20, 5) == (4, 0)", "assert find_quotient_and_remainder(7, 2) == (3, 1)", "assert find_quotient_and_remainder(0, 1) == (0, 0)", "assert find_quotient_and_remainder(1, 1) == (1, 0)", "assert find_quotient_and_remainder(100, 10) == (10, 0)", "assert find_quotient_and_remainder(99, 10) == (9, 9)", "assert find_quotient_and_remainder(12345, 123) == (100, 45)", "assert find_quotient_and_remainder(1, 2) == (0, 1)", "assert find_quotient_and_remainder(10, 10) == (1, 0)", "assert find_quotient_and_remainder(-10, 3) == (-4, 2)", "assert find_quotient_and_remainder(10, -3) == (-4, -2)", "assert find_quotient_and_remainder(-10, -3) == (3, -1)", "assert find_quotient_and_remainder(0, 5) == (0, 0)", "assert find_quotient_and_remainder(100, 1) == (100, 0)"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of two numbers.", "code": "def find_max(n: int, m: int) -> int:\n    return max(n, m)", "task_id": "292_7802b3a7-c962-40ee-bc7a-91b988522544", "test_setup_code": "", "test_list": ["assert find_max(1, 2) == 2", "assert find_max(2, 1) == 2", "assert find_max(-1, -2) == -1", "assert find_max(-2, -1) == -1", "assert find_max(0, 0) == 0", "assert find_max(100, 100) == 100", "assert find_max(0, 1) == 1", "assert find_max(1, 0) == 1", "assert find_max(-100, 100) == 100", "assert find_max(100, -100) == 100", "assert find_max(123456789, 987654321) == 987654321", "assert find_max(987654321, 123456789) == 987654321", "assert find_max(-123456789, -987654321) == -123456789", "assert find_max(-987654321, -123456789) == -123456789", "assert find_max(0, -1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of two numbers.", "code": "def find_min(n: int, m: int) -> int:\n    return min(n, m)", "task_id": "292_dd207dcb-3d26-4771-bdc3-1571018c0b63", "test_setup_code": "", "test_list": ["assert find_min(1, 2) == 1", "assert find_min(2, 1) == 1", "assert find_min(-1, 1) == -1", "assert find_min(1, -1) == -1", "assert find_min(0, 0) == 0", "assert find_min(100, 100) == 100", "assert find_min(-100, -100) == -100", "assert find_min(0, 100) == 0", "assert find_min(100, 0) == 0", "assert find_min(-100, 100) == -100", "assert find_min(100, -100) == -100", "assert find_min(123456, 123456) == 123456", "assert find_min(-123456, 123456) == -123456", "assert find_min(123456, -123456) == -123456", "assert find_min(-123456, -654321) == -654321"], "challenge_test_list": []}
{"text": "Write a python function to find the average of two numbers.", "code": "def find_average(n: int, m: int) -> float:\n    return (n + m) / 2", "task_id": "292_0d810f51-c3bf-406e-91e4-3c72241e3bb0", "test_setup_code": "", "test_list": ["assert find_average(4, 6) == 5.0", "assert find_average(0, 0) == 0.0", "assert find_average(-5, 5) == 0.0", "assert find_average(100, 200) == 150.0", "assert find_average(-10, -20) == -15.0", "assert find_average(1, 1) == 1.0", "assert find_average(123456, 654321) == 388888.5", "assert find_average(0, 100) == 50.0", "assert find_average(-100, 100) == 0.0", "assert find_average(3, 7) == 5.0", "assert find_average(2, 8) == 5.0", "assert find_average(-1, 1) == 0.0", "assert find_average(999, 1001) == 1000.0", "assert find_average(-999, -1001) == -1000.0", "assert find_average(2147483647, -2147483648) == -0.5"], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def find_absolute_difference(n: int, m: int) -> int:\n    return abs(n - m)", "task_id": "292_b40eea7f-edb4-4f27-8a12-915088e09a93", "test_setup_code": "", "test_list": ["assert find_absolute_difference(10, 5) == 5", "assert find_absolute_difference(5, 10) == 5", "assert find_absolute_difference(0, 0) == 0", "assert find_absolute_difference(-5, 5) == 10", "assert find_absolute_difference(5, -5) == 10", "assert find_absolute_difference(-10, -5) == 5", "assert find_absolute_difference(-5, -10) == 5", "assert find_absolute_difference(1000000, 1) == 999999", "assert find_absolute_difference(1, 1000000) == 999999", "assert find_absolute_difference(123456, 654321) == 530865", "assert find_absolute_difference(654321, 123456) == 530865", "assert find_absolute_difference(0, 100) == 100", "assert find_absolute_difference(100, 0) == 100", "assert find_absolute_difference(0, -100) == 100", "assert find_absolute_difference(-100, 0) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the hypotenuse of a right-angled triangle given the other two sides.", "code": "import math\ndef find_hypotenuse(a: float, b: float) -> float:\n    return math.sqrt(a**2 + b**2)", "task_id": "293_86c4a373-d9ba-4c69-a4c9-162ae5caf8c4", "test_setup_code": "", "test_list": ["assert find_hypotenuse(3, 4) == 5.0", "assert find_hypotenuse(5, 12) == 13.0", "assert find_hypotenuse(8, 15) == 17.0", "assert find_hypotenuse(7, 24) == 25.0", "assert find_hypotenuse(0, 0) == 0.0", "assert find_hypotenuse(1, 1) == math.sqrt(2)", "assert find_hypotenuse(0.5, 0.5) == math.sqrt(0.5**2 + 0.5**2)", "assert find_hypotenuse(0, 1) == 1.0", "assert find_hypotenuse(1, 0) == 1.0", "assert find_hypotenuse(0.3, 0.4) == 0.5", "assert find_hypotenuse(1e-10, 1e-10) == math.sqrt(2e-20)", "assert find_hypotenuse(1e10, 1e10) == math.sqrt(2e20)", "assert find_hypotenuse(1.5, 2.5) == math.sqrt(1.5**2 + 2.5**2)", "assert find_hypotenuse(123456, 654321) == math.sqrt(123456**2 + 654321**2)", "assert find_hypotenuse(1, 1e-10) == math.sqrt(1 + 1e-20)"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a right-angled triangle given the two shorter sides.", "code": "import math\ndef find_perimeter(a: float, b: float) -> float:\n    c = math.sqrt(a**2 + b**2)\n    return a + b + c", "task_id": "293_8eaa423f-4c04-474a-9634-5a9b941e1d51", "test_setup_code": "", "test_list": ["assert find_perimeter(3, 4) == 12.0", "assert find_perimeter(5, 12) == 30.0", "assert find_perimeter(8, 15) == 40.0", "assert find_perimeter(1, 1) == 3.414213562373095", "assert find_perimeter(0.5, 0.5) == 1.9142135623730951", "assert find_perimeter(0, 0) == 0.0", "assert find_perimeter(0, 5) == 10.0", "assert find_perimeter(5, 0) == 10.0", "assert find_perimeter(0.1, 0.1) == 0.3414213562373095", "assert find_perimeter(100, 100) == 341.4213562373095", "assert find_perimeter(0.3, 0.4) == 1.2", "assert find_perimeter(7, 24) == 62.0", "assert find_perimeter(9, 40) == 98.0", "assert find_perimeter(0.6, 0.8) == 2.6", "assert find_perimeter(1.5, 2.5) == 7.0"], "challenge_test_list": []}
{"text": "Write a function to find the area of a right-angled triangle given the two shorter sides.", "code": "def find_area(a: float, b: float) -> float:\n    return 0.5 * a * b", "task_id": "293_033d161a-d2f8-495f-9ec1-98cbe26fd4f8", "test_setup_code": "", "test_list": ["assert find_area(3, 4) == 6.0", "assert find_area(5, 12) == 30.0", "assert find_area(0, 0) == 0.0", "assert find_area(1, 1) == 0.5", "assert find_area(10, 10) == 50.0", "assert find_area(0.5, 0.5) == 0.125", "assert find_area(100, 200) == 10000.0", "assert find_area(0.1, 0.2) == 0.01", "assert find_area(1e-10, 1e-10) == 5e-21", "assert find_area(1e10, 1e10) == 5e19", "assert find_area(3.5, 4.5) == 7.875", "assert find_area(7, 8) == 28.0", "assert find_area(2.5, 3.5) == 4.375", "assert find_area(6, 9) == 27.0", "assert find_area(0, 5) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the third side of a right-angled triangle given two sides and a boolean indicating if the given sides include the hypotenuse.", "code": "import math\ndef find_third_side(a: float, b: float, hypotenuse: bool) -> float:\n    if hypotenuse:\n        return math.sqrt(a**2 - b**2)\n    else:\n        return math.sqrt(a**2 + b**2)", "task_id": "293_454da493-93ee-43ca-a1bf-0875f9f8a37a", "test_setup_code": "", "test_list": ["assert find_third_side(5, 3, True) == 4.0", "assert find_third_side(5, 4, True) == 3.0", "assert find_third_side(3, 4, False) == 5.0", "assert find_third_side(6, 8, False) == 10.0", "assert find_third_side(13, 12, True) == 5.0", "assert find_third_side(10, 6, True) == 8.0", "assert find_third_side(7, 24, False) == 25.0", "assert find_third_side(15, 9, True) == 12.0", "assert find_third_side(9, 12, False) == 15.0", "assert find_third_side(8, 15, False) == 17.0", "assert find_third_side(17, 8, True) == 15.0", "assert find_third_side(1, 1, False) == math.sqrt(2)", "assert find_third_side(1, math.sqrt(2), True) == 1.0", "assert find_third_side(10, 10, False) == math.sqrt(200)", "assert find_third_side(10, math.sqrt(200), True) == 10.0"], "challenge_test_list": []}
{"text": "Write a function to find one of the non-right angles of a right-angled triangle given the two shorter sides.", "code": "import math\ndef find_angle(a: float, b: float) -> float:\n    return math.degrees(math.atan(a / b))", "task_id": "293_16a53e64-3234-4e36-870b-ab44138a4d40", "test_setup_code": "", "test_list": ["assert find_angle(3, 4) == 36.86989764584402", "assert find_angle(4, 3) == 53.13010235415599", "assert find_angle(1, 1) == 45.0", "assert find_angle(0, 1) == 0.0", "assert find_angle(1, 0) == 90.0", "assert find_angle(5, 12) == 22.619864948040426", "assert find_angle(12, 5) == 67.38013505195957", "assert find_angle(7, 24) == 16.26020470831196", "assert find_angle(24, 7) == 73.73979529168804", "assert find_angle(8, 15) == 28.072486935852957", "assert find_angle(15, 8) == 61.92751306414704", "assert find_angle(0.5, 0.5) == 45.0", "assert find_angle(1e-10, 1) == 5.729577951308233e-09", "assert find_angle(1, 1e-10) == 90.0", "assert find_angle(1e-10, 1e-10) == 45.0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the side opposite to a given angle in a right-angled triangle given the hypotenuse.", "code": "import math\ndef find_opposite_side(angle: float, hypotenuse: float) -> float:\n    return hypotenuse * math.sin(math.radians(angle))", "task_id": "293_b903a955-dad9-477d-a603-d0fdd4891ff7", "test_setup_code": "", "test_list": ["assert round(find_opposite_side(30, 10), 6) == 5.0", "assert round(find_opposite_side(45, 10), 6) == 7.071068", "assert round(find_opposite_side(60, 10), 6) == 8.660254", "assert round(find_opposite_side(90, 10), 6) == 10.0", "assert round(find_opposite_side(0, 10), 6) == 0.0", "assert round(find_opposite_side(30, 0), 6) == 0.0", "assert round(find_opposite_side(45, 1), 6) == 0.707107", "assert round(find_opposite_side(60, 2), 6) == 1.732051", "assert round(find_opposite_side(10, 5), 6) == 0.868241", "assert round(find_opposite_side(80, 5), 6) == 4.924039", "assert round(find_opposite_side(15, 20), 6) == 5.176381", "assert round(find_opposite_side(75, 20), 6) == 19.318517", "assert round(find_opposite_side(37.5, 12.5), 6) == 7.612701", "assert round(find_opposite_side(22.5, 15), 6) == 5.739601", "assert round(find_opposite_side(67.5, 15), 6) == 13.858125"], "challenge_test_list": []}
{"text": "Write a function to find the length of the side adjacent to a given angle in a right-angled triangle given the hypotenuse.", "code": "import math\ndef find_adjacent_side(angle: float, hypotenuse: float) -> float:\n    return hypotenuse * math.cos(math.radians(angle))", "task_id": "293_424098bd-f39d-4559-b1ff-0e0505435208", "test_setup_code": "", "test_list": ["assert find_adjacent_side(0, 10) == 10.0", "assert find_adjacent_side(90, 10) == 0.0", "assert find_adjacent_side(45, 10) == 7.0710678118654755", "assert find_adjacent_side(30, 5) == 4.330127018922194"], "challenge_test_list": []}
{"text": "Write a function to find the angle in a right-angled triangle given the lengths of the opposite and adjacent sides.", "code": "import math\ndef find_angle_from_sides(opposite: float, adjacent: float) -> float:\n    return math.degrees(math.atan(opposite / adjacent))", "task_id": "293_fde4b575-5ae8-422d-bfbe-200413199d7b", "test_setup_code": "", "test_list": ["assert find_angle_from_sides(1, 1) == 45.0", "assert find_angle_from_sides(0, 1) == 0.0", "assert find_angle_from_sides(1, 0) == 90.0", "assert find_angle_from_sides(3, 4) == 36.86989764584402", "assert find_angle_from_sides(4, 3) == 53.13010235415599", "assert find_angle_from_sides(5, 12) == 22.619864948040426", "assert find_angle_from_sides(12, 5) == 67.38013505195957", "assert find_angle_from_sides(1, 2) == 26.56505117707799", "assert find_angle_from_sides(2, 1) == 63.43494882292201", "assert find_angle_from_sides(10, 10) == 45.0", "assert find_angle_from_sides(0.5, 0.5) == 45.0", "assert find_angle_from_sides(0.1, 0.1) == 45.0", "assert find_angle_from_sides(0.1, 0.2) == 26.56505117707799", "assert find_angle_from_sides(0.2, 0.1) == 63.43494882292201", "assert find_angle_from_sides(0, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the third angle in a triangle given the other two angles.", "code": "def find_third_angle(angle1: float, angle2: float) -> float:\n    return 180 - angle1 - angle2", "task_id": "293_6f22bbb6-aaf7-4424-9a48-4c4d427bff9a", "test_setup_code": "", "test_list": ["assert find_third_angle(60, 60) == 60", "assert find_third_angle(45, 45) == 90", "assert find_third_angle(0, 180) == 0", "assert find_third_angle(179.5, 0.5) == 0"], "challenge_test_list": []}
{"text": "Write a function to determine if a triangle is right-angled given the lengths of its three sides.", "code": "def is_right_angled(a: float, b: float, c: float) -> bool:\n    sides = sorted([a, b, c])\n    return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)", "task_id": "293_eac8661b-4726-426f-a95e-e2eb0a5b9c0f", "test_setup_code": "", "test_list": ["assert is_right_angled(3, 4, 5) == True", "assert is_right_angled(5, 12, 13) == True", "assert is_right_angled(1, 1, 1) == False", "assert is_right_angled(0.3, 0.4, 0.5) == True"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no three adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    dp[3] = k * k * (k - 1)\n    for i in range(4, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2] - dp[i - 3])\n    return dp[n]", "task_id": "291_a2c9d21a-7ae3-4092-90e0-f6cb1204fbfc", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence(0, 3) == 0", "assert ways_to_paint_fence(1, 3) == 3", "assert ways_to_paint_fence(2, 3) == 9", "assert ways_to_paint_fence(3, 3) == 18", "assert ways_to_paint_fence(4, 3) == 24", "assert ways_to_paint_fence(5, 3) == 30", "assert ways_to_paint_fence(1, 1) == 1", "assert ways_to_paint_fence(2, 1) == 1", "assert ways_to_paint_fence(3, 1) == 0", "assert ways_to_paint_fence(3, 2) == 2", "assert ways_to_paint_fence(4, 2) == 2", "assert ways_to_paint_fence(5, 2) == 4", "assert ways_to_paint_fence(6, 2) == 6", "assert ways_to_paint_fence(4, 4) == 144", "assert ways_to_paint_fence(5, 4) == 288"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most m adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_restrictions(n, k, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    for i in range(2, n + 1):\n        dp[i] = k * (dp[i - 1] - dp[i - m - 1] if i - m - 1 >= 0 else 0)\n    return dp[n]", "task_id": "291_7073c8b4-de99-4871-8a60-bda50a0c7931", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_restrictions(0, 3, 2) == 0", "assert ways_to_paint_fence_with_restrictions(1, 3, 2) == 3", "assert ways_to_paint_fence_with_restrictions(2, 3, 2) == 9", "assert ways_to_paint_fence_with_restrictions(3, 3, 2) == 24", "assert ways_to_paint_fence_with_restrictions(4, 3, 2) == 51", "assert ways_to_paint_fence_with_restrictions(5, 3, 2) == 105", "assert ways_to_paint_fence_with_restrictions(3, 2, 2) == 4", "assert ways_to_paint_fence_with_restrictions(4, 2, 2) == 8", "assert ways_to_paint_fence_with_restrictions(5, 2, 2) == 16", "assert ways_to_paint_fence_with_restrictions(3, 3, 1) == 6", "assert ways_to_paint_fence_with_restrictions(4, 3, 1) == 6", "assert ways_to_paint_fence_with_restrictions(5, 3, 1) == 6", "assert ways_to_paint_fence_with_restrictions(6, 3, 2) == 222", "assert ways_to_paint_fence_with_restrictions(7, 3, 3) == 726", "assert ways_to_paint_fence_with_restrictions(8, 4, 3) == 4096"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors, and return the minimum cost of painting the fence. The costs of each color are given in a list.", "code": "def ways_to_paint_fence_with_cost(n, k, costs):\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(costs)\n    dp = [[0] * k for _ in range(n)]\n    for i in range(k):\n        dp[0][i] = costs[i]\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = costs[j] + min(dp[i - 1][l] for l in range(k) if l != j)\n    return min(dp[-1])", "task_id": "291_1316c801-7aab-4cda-917c-d78d697dc39c", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_cost(0, 3, [1, 2, 3]) == 0", "assert ways_to_paint_fence_with_cost(1, 3, [1, 2, 3]) == 1", "assert ways_to_paint_fence_with_cost(2, 3, [1, 2, 3]) == 3", "assert ways_to_paint_fence_with_cost(3, 3, [1, 2, 3]) == 4", "assert ways_to_paint_fence_with_cost(2, 2, [5, 10]) == 15", "assert ways_to_paint_fence_with_cost(3, 2, [5, 10]) == 20", "assert ways_to_paint_fence_with_cost(4, 2, [5, 10]) == 25", "assert ways_to_paint_fence_with_cost(3, 4, [1, 2, 3, 4]) == 4", "assert ways_to_paint_fence_with_cost(4, 4, [1, 2, 3, 4]) == 5", "assert ways_to_paint_fence_with_cost(2, 3, [10, 20, 30]) == 30", "assert ways_to_paint_fence_with_cost(3, 3, [10, 20, 30]) == 40", "assert ways_to_paint_fence_with_cost(4, 3, [10, 20, 30]) == 50", "assert ways_to_paint_fence_with_cost(5, 3, [10, 20, 30]) == 60", "assert ways_to_paint_fence_with_cost(3, 5, [1, 2, 3, 4, 5]) == 4", "assert ways_to_paint_fence_with_cost(4, 5, [1, 2, 3, 4, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_no_adjacent_same(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1)\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1]\n    return dp[n]", "task_id": "291_811fdb76-788c-4fe3-b48e-9878bd6a48d0", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_no_adjacent_same(0, 3) == 0", "assert ways_to_paint_fence_with_no_adjacent_same(1, 3) == 3", "assert ways_to_paint_fence_with_no_adjacent_same(2, 3) == 6", "assert ways_to_paint_fence_with_no_adjacent_same(3, 3) == 12", "assert ways_to_paint_fence_with_no_adjacent_same(4, 3) == 24", "assert ways_to_paint_fence_with_no_adjacent_same(5, 3) == 48", "assert ways_to_paint_fence_with_no_adjacent_same(1, 1) == 1", "assert ways_to_paint_fence_with_no_adjacent_same(2, 1) == 0", "assert ways_to_paint_fence_with_no_adjacent_same(3, 1) == 0", "assert ways_to_paint_fence_with_no_adjacent_same(2, 2) == 2", "assert ways_to_paint_fence_with_no_adjacent_same(3, 2) == 2", "assert ways_to_paint_fence_with_no_adjacent_same(4, 2) == 4", "assert ways_to_paint_fence_with_no_adjacent_same(3, 4) == 36", "assert ways_to_paint_fence_with_no_adjacent_same(4, 4) == 108", "assert ways_to_paint_fence_with_no_adjacent_same(5, 4) == 324"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at least one adjacent post pair has a different color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_at_least_one_diff(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    total_ways = k ** n\n    same_color_ways = k\n    for i in range(1, n):\n        same_color_ways *= (k - 1)\n    return total_ways - same_color_ways", "task_id": "291_2079646e-390c-4255-bf3c-67ae2975d927", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_at_least_one_diff(0, 3) == 0", "assert ways_to_paint_fence_with_at_least_one_diff(1, 3) == 3", "assert ways_to_paint_fence_with_at_least_one_diff(2, 3) == 6", "assert ways_to_paint_fence_with_at_least_one_diff(3, 3) == 18", "assert ways_to_paint_fence_with_at_least_one_diff(4, 3) == 45", "assert ways_to_paint_fence_with_at_least_one_diff(2, 2) == 2", "assert ways_to_paint_fence_with_at_least_one_diff(3, 2) == 4", "assert ways_to_paint_fence_with_at_least_one_diff(4, 2) == 8", "assert ways_to_paint_fence_with_at_least_one_diff(5, 2) == 16", "assert ways_to_paint_fence_with_at_least_one_diff(3, 4) == 48", "assert ways_to_paint_fence_with_at_least_one_diff(4, 4) == 180", "assert ways_to_paint_fence_with_at_least_one_diff(5, 4) == 624", "assert ways_to_paint_fence_with_at_least_one_diff(3, 1) == 0", "assert ways_to_paint_fence_with_at_least_one_diff(2, 1) == 0", "assert ways_to_paint_fence_with_at_least_one_diff(1, 1) == 1"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_no_two_same(n, k):\n    if n > k:\n        return 0\n    result = 1\n    for i in range(n):\n        result *= (k - i)\n    return result", "task_id": "291_75f757a9-9249-43c1-a094-79f09b3389a7", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_no_two_same(1, 1) == 1", "assert ways_to_paint_fence_with_no_two_same(2, 2) == 2", "assert ways_to_paint_fence_with_no_two_same(3, 3) == 6", "assert ways_to_paint_fence_with_no_two_same(4, 4) == 24", "assert ways_to_paint_fence_with_no_two_same(5, 5) == 120", "assert ways_to_paint_fence_with_no_two_same(3, 4) == 24", "assert ways_to_paint_fence_with_no_two_same(2, 3) == 6", "assert ways_to_paint_fence_with_no_two_same(3, 2) == 0", "assert ways_to_paint_fence_with_no_two_same(4, 3) == 0", "assert ways_to_paint_fence_with_no_two_same(0, 5) == 1", "assert ways_to_paint_fence_with_no_two_same(1, 0) == 0", "assert ways_to_paint_fence_with_no_two_same(2, 1) == 0", "assert ways_to_paint_fence_with_no_two_same(10, 10) == 3628800", "assert ways_to_paint_fence_with_no_two_same(5, 6) == 720", "assert ways_to_paint_fence_with_no_two_same(6, 7) == 5040"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at least one pair of adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_at_least_one_same(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    total_ways = k ** n\n    no_adjacent_same_ways = k * (k - 1) ** (n - 1)\n    return total_ways - no_adjacent_same_ways", "task_id": "291_8f114d30-75f0-48f0-a96e-5ee616ae8772", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_at_least_one_same(0, 3) == 0", "assert ways_to_paint_fence_with_at_least_one_same(1, 3) == 3", "assert ways_to_paint_fence_with_at_least_one_same(2, 3) == 6", "assert ways_to_paint_fence_with_at_least_one_same(3, 3) == 18", "assert ways_to_paint_fence_with_at_least_one_same(4, 3) == 48", "assert ways_to_paint_fence_with_at_least_one_same(2, 2) == 2", "assert ways_to_paint_fence_with_at_least_one_same(3, 2) == 4", "assert ways_to_paint_fence_with_at_least_one_same(4, 2) == 8", "assert ways_to_paint_fence_with_at_least_one_same(5, 2) == 16", "assert ways_to_paint_fence_with_at_least_one_same(3, 4) == 48", "assert ways_to_paint_fence_with_at_least_one_same(4, 4) == 192", "assert ways_to_paint_fence_with_at_least_one_same(5, 4) == 768", "assert ways_to_paint_fence_with_at_least_one_same(3, 1) == 1", "assert ways_to_paint_fence_with_at_least_one_same(4, 1) == 1", "assert ways_to_paint_fence_with_at_least_one_same(5, 1) == 1"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most m adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_max_adjacent_same(n, k, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    for i in range(2, n + 1):\n        dp[i] = k * (dp[i - 1] - dp[i - m - 1] if i - m - 1 >= 0 else 0)\n    return dp[n]", "task_id": "291_bb7e713c-6237-42d3-a8fa-e9a28767cc5c", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_max_adjacent_same(0, 3, 2) == 0", "assert ways_to_paint_fence_with_max_adjacent_same(1, 3, 2) == 3", "assert ways_to_paint_fence_with_max_adjacent_same(2, 3, 2) == 9", "assert ways_to_paint_fence_with_max_adjacent_same(3, 2, 2) == 4", "assert ways_to_paint_fence_with_max_adjacent_same(3, 3, 2) == 18", "assert ways_to_paint_fence_with_max_adjacent_same(4, 3, 2) == 54", "assert ways_to_paint_fence_with_max_adjacent_same(5, 3, 2) == 162", "assert ways_to_paint_fence_with_max_adjacent_same(3, 2, 1) == 0", "assert ways_to_paint_fence_with_max_adjacent_same(4, 2, 2) == 4", "assert ways_to_paint_fence_with_max_adjacent_same(5, 2, 2) == 8", "assert ways_to_paint_fence_with_max_adjacent_same(6, 2, 2) == 16", "assert ways_to_paint_fence_with_max_adjacent_same(3, 4, 2) == 48", "assert ways_to_paint_fence_with_max_adjacent_same(4, 4, 2) == 192", "assert ways_to_paint_fence_with_max_adjacent_same(5, 4, 2) == 768", "assert ways_to_paint_fence_with_max_adjacent_same(6, 3, 3) == 243"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors, and return the number of ways modulo 1000000007.", "code": "def ways_to_paint_fence_with_no_adjacent_same_color(n, k):\n    mod = 1000000007\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1) % mod\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1] % mod\n    return dp[n]", "task_id": "291_0ff421f2-780e-4e86-995a-e29a0b70d2df", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_no_adjacent_same_color(0, 3) == 0", "assert ways_to_paint_fence_with_no_adjacent_same_color(1, 3) == 3", "assert ways_to_paint_fence_with_no_adjacent_same_color(2, 3) == 6", "assert ways_to_paint_fence_with_no_adjacent_same_color(3, 3) == 6", "assert ways_to_paint_fence_with_no_adjacent_same_color(4, 3) == 12", "assert ways_to_paint_fence_with_no_adjacent_same_color(5, 3) == 24", "assert ways_to_paint_fence_with_no_adjacent_same_color(2, 2) == 2", "assert ways_to_paint_fence_with_no_adjacent_same_color(3, 2) == 2", "assert ways_to_paint_fence_with_no_adjacent_same_color(4, 2) == 4", "assert ways_to_paint_fence_with_no_adjacent_same_color(5, 2) == 8", "assert ways_to_paint_fence_with_no_adjacent_same_color(1, 1) == 1", "assert ways_to_paint_fence_with_no_adjacent_same_color(2, 1) == 0", "assert ways_to_paint_fence_with_no_adjacent_same_color(3, 1) == 0", "assert ways_to_paint_fence_with_no_adjacent_same_color(10, 5) == 5120", "assert ways_to_paint_fence_with_no_adjacent_same_color(100, 100) == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors, and return the number of ways modulo 1000000007.", "code": "def ways_to_paint_fence_with_no_two_adjacent_same_color(n, k):\n    mod = 1000000007\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1) % mod\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1] % mod\n    return dp[n]", "task_id": "291_03efdb4a-29f0-4bef-a3b4-b10663e1989b", "test_setup_code": "", "test_list": ["assert ways_to_paint_fence_with_no_two_adjacent_same_color(0, 3) == 0", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(1, 3) == 3", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(2, 3) == 6", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(3, 3) == 6", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(4, 3) == 6", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(2, 2) == 2", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(3, 2) == 2", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(4, 2) == 2", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(5, 2) == 2", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(3, 4) == 12", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(4, 4) == 36", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(5, 4) == 108", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(10, 3) == 6", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(10, 4) == 108", "assert ways_to_paint_fence_with_no_two_adjacent_same_color(100, 3) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def min_val(listval):\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val", "task_id": "294_1e45eb03-57f9-4d42-bb01-1399e1ecabe8", "test_setup_code": "", "test_list": ["assert min_val([1, 2, 3, 4, 5]) == 1", "assert min_val([10, 'a', 3, 'b', 5]) == 3", "assert min_val([100, 200, 300, 'x', 'y', 50]) == 50", "assert min_val(['a', 'b', 'c', 0, -1, -2]) == -2", "assert min_val([10, 20, 30, 40, 50, 0]) == 0", "assert min_val([-10, -20, -30, 'a', 'b', -5]) == -30", "assert min_val([1, 2, 'a', 'b', 3, 4, 5]) == 1", "assert min_val([0, 0, 0, 0, 0, 0]) == 0", "assert min_val([1, 2, 3, 4, 5, -1, -2, -3]) == -3", "assert min_val([1, 'a', 2, 'b', 3, 'c', 4, 'd', 5]) == 1", "assert min_val([1000, 2000, 3000, 'x', 'y', 500]) == 500", "assert min_val([1, 2, 3, 4, 5, -10, -20, -30]) == -30", "assert min_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1", "assert min_val(['a', 'b', 'c', 'd', 'e', 1, 2, 3]) == 1", "assert min_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a given heterogeneous list.", "code": "def sum_vals(listval):\n    sum_val = sum(i for i in listval if isinstance(i, int))\n    return sum_val", "task_id": "294_8dd0e633-a2e4-4014-81d9-f473ea0d1016", "test_setup_code": "", "test_list": ["assert sum_vals([1, 2, 3, 4, 5]) == 15", "assert sum_vals([1, 'a', 2, 'b', 3]) == 6", "assert sum_vals([1, 2.5, 3, 4.5, 5]) == 9", "assert sum_vals([]) == 0", "assert sum_vals(['a', 'b', 'c']) == 0", "assert sum_vals([1, -1, 2, -2, 3, -3]) == 0", "assert sum_vals([100, 200, 300, 'x', 'y', 'z']) == 600", "assert sum_vals([1, 2, [3, 4], 5]) == 8", "assert sum_vals([1, 2, None, 3, None, 4]) == 10", "assert sum_vals([1, True, False, 2, 3]) == 6", "assert sum_vals([1, '1', 2, '2', 3, '3']) == 6", "assert sum_vals([0, 0, 0, 0, 0]) == 0", "assert sum_vals([-1, -2, -3, -4, -5]) == -15", "assert sum_vals([1, 2, 3, 4, '5', '6', '7']) == 10", "assert sum_vals([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55"], "challenge_test_list": []}
{"text": "Write a function to count the number of integer values in a given heterogeneous list.", "code": "def count_ints(listval):\n    count = sum(1 for i in listval if isinstance(i, int))\n    return count", "task_id": "294_c3906f34-66ee-4bd4-b344-c171df077036", "test_setup_code": "", "test_list": ["assert count_ints([1, 2, 3, 4, 5]) == 5", "assert count_ints(['a', 'b', 'c', 1, 2, 3]) == 3", "assert count_ints([1.1, 2.2, 3.3, 4.4, 5.5]) == 0", "assert count_ints([1, '1', 2, '2', 3, '3']) == 3", "assert count_ints([]) == 0", "assert count_ints([None, True, False, 0, 1]) == 2", "assert count_ints([1, 2, [3, 4], (5, 6)]) == 2", "assert count_ints(['string', {}, [], (), 42]) == 1", "assert count_ints([1, 2, 3, 4, 5, 'a', 'b', 'c', 6.7, 8.9]) == 5", "assert count_ints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10", "assert count_ints([1, '2', 3.0, '4.0', 5]) == 2", "assert count_ints([0, -1, -2, -3, -4, -5]) == 6", "assert count_ints([1, 2, 3, 'a', 'b', 'c', 4, 5, 6]) == 6", "assert count_ints(['a', 'b', 'c', 'd', 'e']) == 0", "assert count_ints([1, 2, 3, '4', '5', '6', 7, 8, 9, 10]) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the average of all integer values in a given heterogeneous list.", "code": "def avg_val(listval):\n    int_vals = [i for i in listval if isinstance(i, int)]\n    avg = sum(int_vals) / len(int_vals) if int_vals else 0\n    return avg", "task_id": "294_0fac8980-5a77-486c-b51f-de7dffe0be07", "test_setup_code": "", "test_list": ["assert avg_val([1, 2, 3, 4, 5]) == 3.0", "assert avg_val([1, 'a', 2, 'b', 3]) == 2.0", "assert avg_val([1.5, 2.5, 3.5]) == 0", "assert avg_val([1, 2, 3, 4, '5', '6']) == 2.5", "assert avg_val([]) == 0", "assert avg_val([0, 0, 0, 0]) == 0.0", "assert avg_val([100, 200, 300, 'a', 'b', 'c']) == 200.0", "assert avg_val([-1, -2, -3, -4, -5]) == -3.0", "assert avg_val(['a', 'b', 'c']) == 0", "assert avg_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5.5", "assert avg_val([1, 2, 3, 4, 5, None, True, False]) == 2.5", "assert avg_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 'a', 'b', 'c', 11, 12, 13, 14, 15]) == 8.0", "assert avg_val([1, '2', 3, '4', 5, '6', 7, '8', 9, '10']) == 5.0", "assert avg_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0]) == 5.0", "assert avg_val([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -10]) == 3.0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum length of string values in a given heterogeneous list.", "code": "def max_str_len(listval):\n    max_len = max(len(i) for i in listval if isinstance(i, str))\n    return max_len", "task_id": "294_def36e75-3931-4e34-893d-78901326800a", "test_setup_code": "", "test_list": ["assert max_str_len(['apple', 'banana', 'cherry']) == 6", "assert max_str_len(['a', 'ab', 'abc', 'abcd']) == 4", "assert max_str_len(['', 'short', 'longer', 'longest']) == 7", "assert max_str_len(['one', 2, 'three', 4.0, 'five']) == 5", "assert max_str_len([1, 2, 3, 4, 5]) == 0", "assert max_str_len(['single']) == 6", "assert max_str_len([]) == 0", "assert max_str_len(['mix', 'of', 'strings', 123, 'and', 456.789, 'numbers']) == 7", "assert max_str_len(['a' * 100, 'b' * 200, 'c' * 300]) == 300", "assert max_str_len(['short', 'medium', 'a' * 1000]) == 1000", "assert max_str_len(['same', 'length', 'test']) == 6", "assert max_str_len(['', '', '']) == 0", "assert max_str_len(['a', 'ab', 'abc', 'abcd', 'abcde']) == 5", "assert max_str_len(['a', 1, 'ab', 2.2, 'abc', True, 'abcd', None, 'abcde']) == 5", "assert max_str_len(['', 'a', 'ab', 'abc', 'abcd', 'abcde', 'abcdef']) == 6"], "challenge_test_list": []}
{"text": "Write a function to concatenate all string values in a given heterogeneous list.", "code": "def concat_strs(listval):\n    concatenated = ''.join(i for i in listval if isinstance(i, str))\n    return concatenated", "task_id": "294_099e251f-b97c-430b-95ea-2ed631fd8bd1", "test_setup_code": "", "test_list": ["assert concat_strs(['hello', 123, 'world', 456]) == 'helloworld'", "assert concat_strs(['a', 'b', 'c', 1, 2, 3]) == 'abc'", "assert concat_strs([1, 2, 3, 4, 5]) == ''", "assert concat_strs(['only', 'strings', 'here']) == 'onlystringshere'", "assert concat_strs(['', 'empty', '', 'strings']) == 'emptystrings'", "assert concat_strs([None, 'null', None, 'values']) == 'nullvalues'", "assert concat_strs(['mixed', 1.5, 'types', True, 'in', False, 'list']) == 'mixedtypesinlist'", "assert concat_strs([]) == ''", "assert concat_strs(['single']) == 'single'", "assert concat_strs(['multiple', ' ', 'spaces', ' ', 'between']) == 'multiple spaces between'", "assert concat_strs(['special', '@', '#', '$', '%', '^', '&', '*', 'characters']) == 'special@#$%^&*characters'", "assert concat_strs(['unicode', ' ', '\ud83d\ude0a', ' ', 'characters']) == 'unicode \ud83d\ude0a characters'", "assert concat_strs(['123', '456', '789']) == '123456789'", "assert concat_strs(['', '', '', '']) == ''", "assert concat_strs(['a', 1, 'b', 2, 'c', 3, 'd', 4]) == 'abcd'"], "challenge_test_list": []}
{"text": "Write a function to find the maximum float value in a given heterogeneous list.", "code": "def max_float(listval):\n    max_val = max(i for i in listval if isinstance(i, float))\n    return max_val", "task_id": "294_e70af14a-265c-4c58-8543-6a964f8c6777", "test_setup_code": "", "test_list": ["assert max_float([1, 2.5, 'a', 3.7, 4.6]) == 4.6", "assert max_float([1.1, 2, 3.3, 4.4, 5.5]) == 5.5", "assert max_float([1, 2, 3, 4, 5]) == None", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 6.6", "assert max_float([1.1, '2.2', 3.3, '4.4', 5.5]) == 5.5", "assert max_float([1.1, 2.2, 3.3, 3.3, 2.2, 1.1]) == 3.3", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 5.5]) == 5.5", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 0.0]) == 5.5", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, -1.1]) == 5.5", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, -5.5]) == 5.5", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 5.499999]) == 5.5", "assert max_float([]) == None", "assert max_float([1.1]) == 1.1", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 5.500001]) == 5.500001", "assert max_float([1.1, 2.2, 3.3, 4.4, 5.5, 'string', True, None]) == 5.5"], "challenge_test_list": []}
{"text": "Write a function to find the minimum float value in a given heterogeneous list.", "code": "def min_float(listval):\n    min_val = min(i for i in listval if isinstance(i, float))\n    return min_val", "task_id": "294_0010c61f-1da2-4dc6-91fc-a6ab5612f302", "test_setup_code": "", "test_list": ["assert min_float([1, 2.5, 3.1, 'a', 4.2, 5]) == 2.5", "assert min_float([3.5, 2.4, 5.6, 1.1, 4.9]) == 1.1", "assert min_float(['abc', 1.2, 3, 4.5, 6.7, 'xyz']) == 1.2", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5]) == 1.1", "assert min_float([10, 20, 30, 40, 50.5]) == 50.5", "assert min_float([1.1, 'string', 2.2, 3.3, 4.4]) == 1.1", "assert min_float([100.1, 200.2, 300.3, 400.4, 500.5]) == 100.1", "assert min_float([1, 2, 3, 4, 5.0]) == 5.0", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, 'test']) == 1.1", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, 0.9]) == 0.9", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, -0.1]) == -0.1", "assert min_float([3.3, 2.2, 1.1, 0.0, -1.1]) == -1.1", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, 0.0]) == 0.0", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, '0.0']) == 1.1", "assert min_float([1.1, 2.2, 3.3, 4.4, 5.5, '']) == 1.1"], "challenge_test_list": []}
{"text": "Write a function to count the number of string values in a given heterogeneous list.", "code": "def count_strs(listval):\n    count = sum(1 for i in listval if isinstance(i, str))\n    return count", "task_id": "294_d69c7240-981d-4277-981a-61d17407eaed", "test_setup_code": "", "test_list": ["assert count_strs([]) == 0", "assert count_strs(['hello', 'world']) == 2", "assert count_strs([1, 2, 3, 4, 5]) == 0", "assert count_strs(['a', 1, 'b', 2, 'c', 3]) == 3", "assert count_strs(['', ' ', '   ']) == 3", "assert count_strs(['string', 100, True, None, 'another string']) == 2", "assert count_strs([None, False, 0, 1.1, 'yes']) == 1", "assert count_strs(['one', 'two', 'three', 'four', 'five']) == 5", "assert count_strs([[], {}, (), 'tuple', 'list', 'dict']) == 3", "assert count_strs(['123', 123, '456', 456]) == 2", "assert count_strs(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 10", "assert count_strs(['mixed', 1.1, 2.2, 'types', 3.3, 'in', 4.4, 'list']) == 4", "assert count_strs([True, False, 'True', 'False']) == 2", "assert count_strs(['nested', ['list'], 'inside', 'another']) == 3", "assert count_strs(['edge', 'case', '', 'with', 'empty', 'string']) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all float values in a given heterogeneous list.", "code": "def sum_floats(listval):\n    sum_val = sum(i for i in listval if isinstance(i, float))\n    return sum_val", "task_id": "294_77e3af2d-2e02-45c8-8c09-bc304a2577d1", "test_setup_code": "", "test_list": ["assert sum_floats([1.1, 2.2, 3.3]) == 6.6", "assert sum_floats([1, 2, 3, 4.4]) == 4.4", "assert sum_floats([1.1, 'a', 2.2, 'b', 3.3]) == 6.6", "assert sum_floats([]) == 0", "assert sum_floats([1, 2, 3]) == 0", "assert sum_floats([1.0, 2.0, 3.0]) == 6.0", "assert sum_floats([1.1, -2.2, 3.3]) == 2.2", "assert sum_floats([1.1, 2, 3, 4.4, 5.5]) == 11.0", "assert sum_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 23.1", "assert sum_floats([1.1, 2.2, '3.3', 4.4, '5.5']) == 7.7", "assert sum_floats([1.1, 2.2, None, 3.3]) == 6.6", "assert sum_floats([1.1, 2.2, 3.3, True, False]) == 6.6", "assert sum_floats([1.1, 2.2, 3.3, [4.4], {5.5}]) == 6.6", "assert sum_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9]) == 49.5", "assert sum_floats([1.1, 2.2, 3.3, '4.4', '5.5', 6.6, 7.7, '8.8', 9.9]) == 31.8"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the sum of the digits of a number.", "code": "def sum_divisors_of_sum(number):\n    digit_sum = sum(int(digit) for digit in str(number))\n    divisors = [1]\n    for i in range(2, digit_sum):\n        if digit_sum % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_06715ed8-6cc8-4878-8c93-1a87a4cddb53", "test_setup_code": "", "test_list": ["assert sum_divisors_of_sum(123) == 3", "assert sum_divisors_of_sum(49) == 1", "assert sum_divisors_of_sum(999) == 15", "assert sum_divisors_of_sum(5) == 1"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the product of the digits of a number.", "code": "def sum_divisors_of_product(number):\n    digit_product = 1\n    for digit in str(number):\n        digit_product *= int(digit)\n    divisors = [1]\n    for i in range(2, digit_product):\n        if digit_product % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_d27acd17-9e00-45e9-8114-2cac8d1be65e", "test_setup_code": "", "test_list": ["assert sum_divisors_of_product(123) == 4", "assert sum_divisors_of_product(111) == 1", "assert sum_divisors_of_product(999) == 1", "assert sum_divisors_of_product(10) == 1"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the square of a number.", "code": "def sum_divisors_of_square(number):\n    square = number ** 2\n    divisors = [1]\n    for i in range(2, square):\n        if square % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_5be6f2bd-b030-4fe4-93e3-504d62d642ea", "test_setup_code": "", "test_list": ["assert sum_divisors_of_square(1) == 1", "assert sum_divisors_of_square(2) == 5", "assert sum_divisors_of_square(3) == 10", "assert sum_divisors_of_square(4) == 21", "assert sum_divisors_of_square(5) == 26", "assert sum_divisors_of_square(6) == 50", "assert sum_divisors_of_square(7) == 50", "assert sum_divisors_of_square(8) == 85", "assert sum_divisors_of_square(9) == 91", "assert sum_divisors_of_square(10) == 117", "assert sum_divisors_of_square(11) == 122", "assert sum_divisors_of_square(12) == 210", "assert sum_divisors_of_square(13) == 170", "assert sum_divisors_of_square(14) == 250", "assert sum_divisors_of_square(15) == 186"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the cube of a number.", "code": "def sum_divisors_of_cube(number):\n    cube = number ** 3\n    divisors = [1]\n    for i in range(2, cube):\n        if cube % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_2d2fd1e7-410c-478b-9541-d5d5dcefbe3c", "test_setup_code": "", "test_list": ["assert sum_divisors_of_cube(1) == 1", "assert sum_divisors_of_cube(2) == 9", "assert sum_divisors_of_cube(3) == 40", "assert sum_divisors_of_cube(4) == 84", "assert sum_divisors_of_cube(5) == 156", "assert sum_divisors_of_cube(6) == 252", "assert sum_divisors_of_cube(7) == 400", "assert sum_divisors_of_cube(8) == 585", "assert sum_divisors_of_cube(9) == 820", "assert sum_divisors_of_cube(10) == 1116", "assert sum_divisors_of_cube(11) == 1480", "assert sum_divisors_of_cube(12) == 1924", "assert sum_divisors_of_cube(13) == 2456", "assert sum_divisors_of_cube(14) == 3084", "assert sum_divisors_of_cube(15) == 3816"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of double the number.", "code": "def sum_divisors_of_double(number):\n    double_number = number * 2\n    divisors = [1]\n    for i in range(2, double_number):\n        if double_number % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_80f97d16-a303-4253-a475-0644d6e5a2b1", "test_setup_code": "", "test_list": ["assert sum_divisors_of_double(1) == 1", "assert sum_divisors_of_double(2) == 3", "assert sum_divisors_of_double(3) == 4", "assert sum_divisors_of_double(4) == 7", "assert sum_divisors_of_double(5) == 6", "assert sum_divisors_of_double(6) == 12", "assert sum_divisors_of_double(7) == 8", "assert sum_divisors_of_double(8) == 15", "assert sum_divisors_of_double(9) == 13", "assert sum_divisors_of_double(10) == 18", "assert sum_divisors_of_double(11) == 12", "assert sum_divisors_of_double(12) == 28", "assert sum_divisors_of_double(13) == 14", "assert sum_divisors_of_double(14) == 24", "assert sum_divisors_of_double(15) == 24"], "challenge_test_list": []}
{"text": "Write a python function to count pairs of even and odd numbers in an array.", "code": "def count_even_odd_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] % 2 == 0 and arr[j] % 2 != 0) or (arr[i] % 2 != 0 and arr[j] % 2 == 0):\n                count += 1\n    return count", "task_id": "296_862188f1-cebf-4226-8815-7cd0c4db4098", "test_setup_code": "", "test_list": ["assert count_even_odd_pairs([1, 2, 3, 4]) == 4", "assert count_even_odd_pairs([1, 3, 5, 7]) == 0", "assert count_even_odd_pairs([2, 4, 6, 8]) == 0", "assert count_even_odd_pairs([]) == 0", "assert count_even_odd_pairs([1]) == 0", "assert count_even_odd_pairs([2]) == 0", "assert count_even_odd_pairs([1, 2]) == 1", "assert count_even_odd_pairs([2, 1]) == 1", "assert count_even_odd_pairs([1, 2, 3]) == 2", "assert count_even_odd_pairs([2, 4, 1]) == 2", "assert count_even_odd_pairs([1, 3, 2, 4, 6]) == 6", "assert count_even_odd_pairs([1, 3, 5, 2, 4, 6]) == 9", "assert count_even_odd_pairs([0, 1, 2, 3]) == 4", "assert count_even_odd_pairs([-1, -2, 3, 4]) == 4", "assert count_even_odd_pairs([-1, -3, -5, -2, -4, -6]) == 9"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is greater than the second element in an array.", "code": "def count_greater_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "task_id": "296_a699bcbe-e43b-4e16-8c3a-85947577eee7", "test_setup_code": "", "test_list": ["assert count_greater_pairs([1, 2, 3, 4, 5]) == 0", "assert count_greater_pairs([5, 4, 3, 2, 1]) == 10", "assert count_greater_pairs([1, 3, 2, 4, 5]) == 1", "assert count_greater_pairs([3, 1, 4, 2, 5]) == 3", "assert count_greater_pairs([5, 1, 2, 3, 4]) == 4", "assert count_greater_pairs([1, 1, 1, 1, 1]) == 0", "assert count_greater_pairs([5, 5, 5, 5, 5]) == 0", "assert count_greater_pairs([5, 4, 3, 3, 2, 1]) == 14", "assert count_greater_pairs([2, 3, 1, 5, 4]) == 4", "assert count_greater_pairs([1, 2, 3, 1, 2, 3]) == 3", "assert count_greater_pairs([10, 20, 30, 40, 50]) == 0", "assert count_greater_pairs([50, 40, 30, 20, 10]) == 10", "assert count_greater_pairs([10, 30, 20, 50, 40]) == 3", "assert count_greater_pairs([]) == 0", "assert count_greater_pairs([1]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is smaller than the second element in an array.", "code": "def count_smaller_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                count += 1\n    return count", "task_id": "296_e179fc8f-07e5-49f4-aa4b-d0149e60b977", "test_setup_code": "", "test_list": ["assert count_smaller_pairs([1, 2, 3, 4]) == 6", "assert count_smaller_pairs([4, 3, 2, 1]) == 0", "assert count_smaller_pairs([1, 1, 1, 1]) == 0", "assert count_smaller_pairs([1, 2, 1, 2]) == 4", "assert count_smaller_pairs([5, 1, 2, 6, 3]) == 6", "assert count_smaller_pairs([1]) == 0", "assert count_smaller_pairs([]) == 0", "assert count_smaller_pairs([3, 3, 3, 2, 2, 1]) == 0", "assert count_smaller_pairs([1, 2, 3, 1, 2, 3]) == 9", "assert count_smaller_pairs([10, 20, 30, 40, 50]) == 10", "assert count_smaller_pairs([50, 40, 30, 20, 10]) == 0", "assert count_smaller_pairs([1, 3, 2, 4, 5]) == 7", "assert count_smaller_pairs([2, 2, 2, 2, 2]) == 0", "assert count_smaller_pairs([1, 5, 2, 6, 3, 7]) == 11", "assert count_smaller_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 45"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is equal to the second element in an array.", "code": "def count_equal_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count", "task_id": "296_5c9908a0-a9fc-4c00-8535-ecbae86afff8", "test_setup_code": "", "test_list": ["assert count_equal_pairs([1, 2, 3, 1, 2, 3]) == 3", "assert count_equal_pairs([1, 1, 1, 1]) == 6", "assert count_equal_pairs([1, 2, 3, 4, 5]) == 0", "assert count_equal_pairs([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where both elements are prime numbers in an array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_prime(arr[i]) and is_prime(arr[j]):\n                count += 1\n    return count", "task_id": "296_2369f9d1-041e-460d-8d1e-9131065ad715", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(7) == True", "assert is_prime(11) == True", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-5) == False", "assert is_prime(4) == False", "assert is_prime(9) == False", "assert is_prime(15) == False", "assert is_prime(25) == False", "assert is_prime(97) == True", "assert is_prime(100) == False", "assert is_prime(29) == True", "assert is_prime(91) == False"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is divisible by the second element in an array.", "code": "def count_divisible_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % arr[j] == 0:\n                count += 1\n    return count", "task_id": "296_ad8371ca-6064-480e-8675-d9ef095d7b13", "test_setup_code": "", "test_list": ["assert count_divisible_pairs([2, 4, 6, 8], 2) == 3", "assert count_divisible_pairs([1, 3, 6, 9], 3) == 2", "assert count_divisible_pairs([10, 5, 2, 1], 1) == 6", "assert count_divisible_pairs([7, 14, 21, 28], 7) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the sum of the elements is equal to a given target in an array.", "code": "def count_sum_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count", "task_id": "296_8194db03-c572-479f-8266-df89d7655a4a", "test_setup_code": "", "test_list": ["assert count_sum_pairs([1, 2, 3, 4, 5], 5) == 2", "assert count_sum_pairs([1, 1, 1, 1], 2) == 6", "assert count_sum_pairs([1, 2, 3, 4, 5], 10) == 0", "assert count_sum_pairs([0, 0, 0, 0], 0) == 6", "assert count_sum_pairs([-1, -2, -3, -4, -5], -8) == 1", "assert count_sum_pairs([1, 2, 3, 4, 5], 9) == 1", "assert count_sum_pairs([1, 2, 3, 4, 5], 1) == 0", "assert count_sum_pairs([5, 5, 5, 5], 10) == 6", "assert count_sum_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 4", "assert count_sum_pairs([], 5) == 0", "assert count_sum_pairs([1], 1) == 0", "assert count_sum_pairs([1, 2, 3, 2, 1], 4) == 4", "assert count_sum_pairs([1, -1, 2, -2, 3, -3], 0) == 3", "assert count_sum_pairs([1, 2, 3, 4, 5, 6], 7) == 3", "assert count_sum_pairs([10, 20, 30, 40, 50], 50) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the absolute difference of the elements is equal to a given target in an array.", "code": "def count_diff_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target:\n                count += 1\n    return count", "task_id": "296_b0a28c25-3899-43b1-b7aa-e8a544baa91b", "test_setup_code": "", "test_list": ["assert count_diff_pairs([1, 5, 3, 4, 2], 2) == 3", "assert count_diff_pairs([1, 1, 1, 1], 0) == 6", "assert count_diff_pairs([1, 2, 3, 4, 5], 10) == 0", "assert count_diff_pairs([], 1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the product of the elements is equal to a given target in an array.", "code": "def count_product_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                count += 1\n    return count", "task_id": "296_7ec900ca-3be9-4a55-9686-d1dde7055d02", "test_setup_code": "", "test_list": ["assert count_product_pairs([1, 2, 3, 4, 6], 6) == 2", "assert count_product_pairs([0, 0, 0, 0], 0) == 6", "assert count_product_pairs([1, -1, 2, -2, 3, -3], -6) == 2", "assert count_product_pairs([10, 5, 2, 1], 20) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the concatenation of the elements forms a palindrome in an array of strings.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef count_palindrome_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_palindrome(arr[i] + arr[j]):\n                count += 1\n    return count", "task_id": "296_fb0a8483-cd66-46ca-ac10-e3ee28b7a799", "test_setup_code": "", "test_list": ["assert count_palindrome_pairs(['a', 'b', 'c', 'd']) == 0", "assert count_palindrome_pairs(['ab', 'ba', 'abc', 'cba']) == 2", "assert count_palindrome_pairs(['race', 'car', 'ecar', 'rac']) == 2", "assert count_palindrome_pairs(['', 'a', 'b', '']) == 2", "assert count_palindrome_pairs(['aa', 'bb', 'cc', 'dd']) == 0", "assert count_palindrome_pairs(['a', 'a', 'a', 'a']) == 6", "assert count_palindrome_pairs(['ab', 'cd', 'dc', 'ba']) == 2", "assert count_palindrome_pairs(['abc', 'cba', 'bca', 'acb']) == 2", "assert count_palindrome_pairs(['a', 'b', 'c', 'a']) == 1", "assert count_palindrome_pairs(['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd']) == 0", "assert count_palindrome_pairs(['madam', 'racecar', 'level', 'noon']) == 0", "assert count_palindrome_pairs(['mad', 'dam', 'ada', 'ma']) == 1", "assert count_palindrome_pairs(['abc', 'def', 'fed', 'cba']) == 2", "assert count_palindrome_pairs(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j']) == 0", "assert count_palindrome_pairs(['xy', 'yx', 'zz', 'yy', 'xx']) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between each sublist of a nested list and another list.", "code": "def common_elements_in_sublists(l1, l2):\n    result = [[n for n in lst if n in l2] for lst in l1]\n    return result", "task_id": "298_eb875a6f-69dc-42ad-8447-14e63a3ce3e2", "test_setup_code": "", "test_list": ["assert common_elements_in_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [2, 4, 6, 8]) == [[2], [4, 6], [8]]", "assert common_elements_in_sublists([[10, 20, 30], [40, 50, 60], [70, 80, 90]], [15, 25, 35]) == [[], [], []]", "assert common_elements_in_sublists([[1, 2], [2, 3], [3, 4]], [2, 3]) == [[2], [2, 3], [3]]", "assert common_elements_in_sublists([[], [1, 2, 3], [4, 5, 6]], [1, 4, 7]) == [[], [1], [4]]"], "challenge_test_list": []}
{"text": "Write a function to find the unique elements in each sublist of a nested list that are not present in another list.", "code": "def unique_elements_in_sublists(l1, l2):\n    result = [[n for n in lst if n not in l2] for lst in l1]\n    return result", "task_id": "298_0145b60c-f908-4d80-8f7d-e09c2cf926ce", "test_setup_code": "", "test_list": ["assert unique_elements_in_sublists([[1, 2, 3], [4, 5, 6]], [2, 5]) == [[1, 3], [4, 6]]", "assert unique_elements_in_sublists([[1, 1, 1], [2, 2, 2]], [1]) == [[], [2, 2, 2]]", "assert unique_elements_in_sublists([[1, 2, 3], [4, 5, 6]], []) == [[1, 2, 3], [4, 5, 6]]", "assert unique_elements_in_sublists([[], [1, 2, 3]], [1, 2, 3]) == [[], []]"], "challenge_test_list": []}
{"text": "Write a function to find the elements in a list that are not present in any of the sublists of a nested list.", "code": "def elements_not_in_sublists(l1, l2):\n    result = [n for n in l1 if all(n not in lst for lst in l2)]\n    return result", "task_id": "298_434a47bb-41ed-41a4-a20f-30f97689ba97", "test_setup_code": "", "test_list": ["assert elements_not_in_sublists([1, 2, 3], [[2], [3]]) == [1]", "assert elements_not_in_sublists([1, 2, 3, 4], [[1, 2], [3]]) == [4]", "assert elements_not_in_sublists([1, 2, 3, 4], [[1, 2, 3, 4]]) == []", "assert elements_not_in_sublists([1, 2, 3, 4], [[], []]) == [1, 2, 3, 4]", "assert elements_not_in_sublists([], [[1, 2, 3]]) == []", "assert elements_not_in_sublists([1, 2, 3], []) == [1, 2, 3]", "assert elements_not_in_sublists([1, 2, 3], [[4, 5, 6]]) == [1, 2, 3]", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1], [2], [3], [4]]) == [5]", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1, 2], [3, 4]]) == [5]", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1, 2, 3, 4, 5]]) == []", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[6, 7, 8, 9, 10]]) == [1, 2, 3, 4, 5]", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1, 3, 5], [2, 4]]) == []", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1, 3], [2, 4]]) == [5]", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1], [2], [3], [4], [5]]) == []", "assert elements_not_in_sublists([1, 2, 3, 4, 5], [[1, 2], [3, 4], [5]]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the elements that are common in all sublists of a nested list and another list.", "code": "def common_elements_in_all_sublists(l1, l2):\n    common_elements = set(l2)\n    for lst in l1:\n        common_elements &= set(lst)\n    return list(common_elements)", "task_id": "298_011cdd95-37a8-461c-a3b6-e0dc3aab1237", "test_setup_code": "", "test_list": ["assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [2, 5]], [2, 3]) == [2]", "assert common_elements_in_all_sublists([[1, 2], [2, 3], [2, 4]], [2]) == [2]", "assert common_elements_in_all_sublists([[1, 2], [2, 3], [4, 5]], [2, 3]) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [3, 4]) == [3]", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [1, 2, 3, 4]) == [3]", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [6, 7, 8]) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [5]) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [2, 3, 4]) == [3]", "assert common_elements_in_all_sublists([[1, 2], [2, 3], [2, 4]], [1, 2, 3, 4]) == [2]", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [1, 2, 3, 4, 5]) == [3]", "assert common_elements_in_all_sublists([[], [2, 3, 4], [3, 4, 5]], [2, 3, 4]) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], []) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [3]) == [3]", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [4]) == []", "assert common_elements_in_all_sublists([[1, 2, 3], [2, 3, 4], [3, 4, 5]], [1, 2, 3, 4, 5, 6]) == [3]"], "challenge_test_list": []}
{"text": "Write a function to find the elements in a list that are present in any of the sublists of a nested list.", "code": "def elements_in_any_sublists(l1, l2):\n    result = [n for n in l1 if any(n in lst for lst in l2)]\n    return result", "task_id": "298_d48ef1e6-2d31-4091-9c84-be5f8eaafe38", "test_setup_code": "", "test_list": ["assert elements_in_any_sublists([1, 2, 3, 4, 5], [[1, 2], [3], [7, 8]]) == [1, 2, 3]", "assert elements_in_any_sublists([10, 20, 30, 40], []) == []", "assert elements_in_any_sublists([], [[1, 2], [3, 4]]) == []", "assert elements_in_any_sublists([1, 2, 3, 4, 5], [[6, 7], [8, 9], [10]]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the sublists in a nested list that have any common elements with another list.", "code": "def sublists_with_common_elements(l1, l2):\n    result = [lst for lst in l1 if any(n in l2 for n in lst)]\n    return result", "task_id": "298_f76caf7c-dd1d-45f1-9bbb-b301f428c23f", "test_setup_code": "", "test_list": ["assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [5, 9]) == [[4, 5, 6], [7, 8, 9]]", "assert sublists_with_common_elements([[1, 2], [3, 4], [5, 6]], [7, 8]) == []", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6]], [1, 4]) == [[1, 2, 3], [4, 5, 6]]", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6]], []) == []", "assert sublists_with_common_elements([[], [1, 2, 3], [4, 5, 6]], [2, 4]) == [[1, 2, 3], [4, 5, 6]]", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6]], [3]) == [[1, 2, 3]]", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6]], [6]) == [[4, 5, 6]]", "assert sublists_with_common_elements([[1, 2], [2, 3], [3, 4]], [2, 3]) == [[1, 2], [2, 3], [3, 4]]", "assert sublists_with_common_elements([[1, 2], [3, 4], [5, 6]], [1, 6]) == [[1, 2], [5, 6]]", "assert sublists_with_common_elements([[1, 2], [3, 4], [5, 6]], [0]) == []", "assert sublists_with_common_elements([[1, 2, 3, 4], [5, 6, 7, 8]], [4, 8]) == [[1, 2, 3, 4], [5, 6, 7, 8]]", "assert sublists_with_common_elements([[1], [2], [3]], [1, 2, 3]) == [[1], [2], [3]]", "assert sublists_with_common_elements([[1, 2], [3, 4]], [2, 3]) == [[1, 2], [3, 4]]", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6]], [7, 8, 9]) == []", "assert sublists_with_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [2, 5, 8]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"], "challenge_test_list": []}
{"text": "Write a function to find the sublists in a nested list that have unique elements not present in another list.", "code": "def sublists_with_unique_elements(l1, l2):\n    result = [lst for lst in l1 if all(n not in l2 for n in lst)]\n    return result", "task_id": "298_6480dcbf-66c6-4e2a-a423-1b9845ead5c5", "test_setup_code": "", "test_list": ["assert sublists_with_unique_elements([[1, 2], [3, 4], [5, 6]], [2, 4, 6]) == [[1, 2], [3, 4]]", "assert sublists_with_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 4, 7]) == [[1, 2, 3], [4, 5, 6]]", "assert sublists_with_unique_elements([[1, 1], [2, 2], [3, 3]], [1, 2, 3]) == []", "assert sublists_with_unique_elements([[1, 2], [3, 4], [5, 6]], []) == [[1, 2], [3, 4], [5, 6]]", "assert sublists_with_unique_elements([[], [1], [2, 3]], [1, 2]) == [[]]", "assert sublists_with_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [10, 11, 12]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sublists_with_unique_elements([[1, 2], [3, 4], [5, 6]], [1, 3, 5]) == [[3, 4], [5, 6]]", "assert sublists_with_unique_elements([[1], [2], [3]], [1, 2, 3]) == []", "assert sublists_with_unique_elements([[1, 2], [2, 3], [3, 4]], [2]) == [[1, 2], [2, 3]]", "assert sublists_with_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []", "assert sublists_with_unique_elements([[1, 2], [3, 4], [5, 6]], [7, 8, 9]) == [[1, 2], [3, 4], [5, 6]]", "assert sublists_with_unique_elements([[1, 2, 3], [4, 5], [6, 7, 8]], [3, 5, 8]) == [[1, 2, 3], [4, 5], [6, 7, 8]]", "assert sublists_with_unique_elements([[1, 2], [2, 3], [3, 4]], [4]) == [[1, 2], [2, 3], [3, 4]]", "assert sublists_with_unique_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [2, 5, 8]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]", "assert sublists_with_unique_elements([[1, 2], [3, 4], [5, 6]], [1, 2, 3, 4, 5, 6]) == []"], "challenge_test_list": []}
{"text": "Write a function to count the common elements between each sublist of a nested list and another list.", "code": "def common_elements_count(l1, l2):\n    result = [sum(1 for n in lst if n in l2) for lst in l1]\n    return result", "task_id": "298_46e39c19-74c6-4219-b874-949dec301512", "test_setup_code": "", "test_list": ["assert common_elements_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 4, 7]) == [1, 1, 1]", "assert common_elements_count([[1, 2, 2], [2, 3, 3], [4, 4, 4]], [2, 3, 4]) == [2, 2, 3]", "assert common_elements_count([[], [1, 2], [3, 4]], [2, 3]) == [0, 1, 1]", "assert common_elements_count([[1, 1, 1], [2, 2, 2], [3, 3, 3]], [1, 2, 3]) == [3, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to count the unique elements in each sublist of a nested list that are not present in another list.", "code": "def unique_elements_count(l1, l2):\n    result = [sum(1 for n in lst if n not in l2) for lst in l1]\n    return result", "task_id": "298_5f2f3584-ae72-4437-bf25-64c90c9d21f1", "test_setup_code": "", "test_list": ["assert unique_elements_count([[1, 2, 3], [4, 5, 6]], [2, 5]) == [2, 2]", "assert unique_elements_count([[1, 1, 1], [2, 2, 2]], [1, 2]) == [0, 0]", "assert unique_elements_count([[1, 2, 3], [3, 4, 5], [5, 6, 7]], [3, 5]) == [2, 1, 2]", "assert unique_elements_count([[], [1, 2, 3]], [1, 2, 3]) == [0, 0]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6]], []) == [3, 3]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6]], [1, 2, 3, 4, 5, 6]) == [0, 0]", "assert unique_elements_count([[1, 2, 3], [1, 2, 3]], [1]) == [2, 2]", "assert unique_elements_count([[1, 2, 3], [1, 2, 3]], [4]) == [3, 3]", "assert unique_elements_count([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], [5, 10]) == [4, 4]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6]], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6]], [0, 7, 8, 9]) == [3, 3]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 4, 7]) == [2, 2, 2]", "assert unique_elements_count([[1, 2, 3], [1, 2, 3], [1, 2, 3]], [2]) == [2, 2, 2]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == [0, 0, 0]", "assert unique_elements_count([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [0]) == [3, 3, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between each sublist of a nested list and another list, along with their indices in the sublist.", "code": "def common_elements_in_sublists_with_indices(l1, l2):\n    result = [[(i, n) for i, n in enumerate(lst) if n in l2] for lst in l1]\n    return result", "task_id": "298_8102c9f0-d8eb-4f68-9a4e-a5a8c4fa8abb", "test_setup_code": "", "test_list": ["assert common_elements_in_sublists_with_indices([[1, 2, 3], [4, 5, 6], [7, 8, 9]], [2, 4, 6, 8]) == [[(1, 2)], [(0, 4), (2, 6)], [(1, 8)]]", "assert common_elements_in_sublists_with_indices([[10, 20, 30], [40, 50, 60], [70, 80, 90]], [15, 25, 35]) == [[], [], []]", "assert common_elements_in_sublists_with_indices([[], [1, 2, 3], [4, 5, 6]], [1, 5]) == [[], [(0, 1)], [(1, 5)]]", "assert common_elements_in_sublists_with_indices([[1, 2, 3], [1, 2, 3], [1, 2, 3]], [1, 2, 3]) == [[(0, 1), (1, 2), (2, 3)], [(0, 1), (1, 2), (2, 3)], [(0, 1), (1, 2), (2, 3)]]"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of a list of integers.", "code": "def sum_of_squares(numbers: list[int]) -> int:\n    return sum(x**2 for x in numbers)", "task_id": "299_7219fb74-7613-46f4-b7e3-9b770a55e585", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3]) == 14", "assert sum_of_squares([0, 0, 0]) == 0", "assert sum_of_squares([-1, -2, -3]) == 14", "assert sum_of_squares([5]) == 25", "assert sum_of_squares([]) == 0", "assert sum_of_squares([10, 20, 30]) == 1400", "assert sum_of_squares([1, -1, 1, -1]) == 4", "assert sum_of_squares([100, 200, 300]) == 140000", "assert sum_of_squares([1, 2, 3, 4, 5]) == 55", "assert sum_of_squares([-10, 10, -10, 10]) == 400", "assert sum_of_squares([2, 4, 6, 8, 10]) == 220", "assert sum_of_squares([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert sum_of_squares([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 285", "assert sum_of_squares([-5, -4, -3, -2, -1]) == 55", "assert sum_of_squares([1, 3, 5, 7, 9]) == 165"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "299_3bfa5e43-fdc3-4664-a2da-45d819a5e400", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('world') == 1", "assert count_vowels('') == 0", "assert count_vowels('AEIOU') == 5", "assert count_vowels('aeiou') == 5", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('12345') == 0", "assert count_vowels('HELLO world') == 3", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11", "assert count_vowels('Python Programming') == 4", "assert count_vowels('A quick brown fox jumps over the lazy dog') == 12", "assert count_vowels('Why do you ask?') == 4", "assert count_vowels('This is a test case.') == 6", "assert count_vowels('') == 0", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5"], "challenge_test_list": []}
{"text": "Write a function to reverse the words in a given sentence.", "code": "def reverse_words(sentence: str) -> str:\n    return ' '.join(sentence.split()[::-1])", "task_id": "299_be20dc76-378c-4c53-8071-7d3e124134e4", "test_setup_code": "", "test_list": ["assert reverse_words('hello world') == 'world hello'", "assert reverse_words('The quick brown fox') == 'fox brown quick The'", "assert reverse_words('a b c d e') == 'e d c b a'", "assert reverse_words('') == ''", "assert reverse_words('singleword') == 'singleword'", "assert reverse_words('  leading spaces') == 'spaces leading'", "assert reverse_words('trailing spaces  ') == 'spaces trailing'", "assert reverse_words('  multiple   spaces  ') == 'spaces multiple'", "assert reverse_words('punctuation, should! be? handled.') == 'handled. be? should! punctuation,'", "assert reverse_words('123 456 789') == '789 456 123'", "assert reverse_words('UPPER lower MIXED') == 'MIXED lower UPPER'", "assert reverse_words('a') == 'a'", "assert reverse_words('  a  b  ') == 'b a'", "assert reverse_words('word1 word2 word3 word4') == 'word4 word3 word2 word1'", "assert reverse_words('This is a test sentence.') == 'sentence. test a is This'"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "299_7944575f-beda-49bd-ac25-836347deb470", "test_setup_code": "", "test_list": ["assert is_palindrome('') == True", "assert is_palindrome('a') == True", "assert is_palindrome('aa') == True", "assert is_palindrome('ab') == False", "assert is_palindrome('aba') == True", "assert is_palindrome('abc') == False", "assert is_palindrome('abba') == True", "assert is_palindrome('abcd') == False", "assert is_palindrome('racecar') == True", "assert is_palindrome('raceecar') == True", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('No lemon, no melon'.replace(' ', '').replace(',', '').lower()) == True", "assert is_palindrome('Was it a car or a cat I saw'.replace(' ', '').replace('?', '').lower()) == False", "assert is_palindrome('12321') == True", "assert is_palindrome('12345') == False"], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both, sum their values.", "code": "def merge_dictionaries(dict1: dict, dict2: dict) -> dict:\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result", "task_id": "299_57fe66fb-097d-4e14-8c71-707ffad5fa73", "test_setup_code": "", "test_list": ["assert merge_dictionaries({'a': 1, 'b': 2}, {'b': 3, 'c': 4}) == {'a': 1, 'b': 5, 'c': 4}", "assert merge_dictionaries({}, {'a': 1, 'b': 2}) == {'a': 1, 'b': 2}", "assert merge_dictionaries({'a': 1, 'b': 2}, {}) == {'a': 1, 'b': 2}", "assert merge_dictionaries({'a': 1, 'b': 2}, {'a': -1, 'b': -2, 'c': 3}) == {'a': 0, 'b': 0, 'c': 3}"], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b", "task_id": "299_2303caf8-5518-4832-ab09-09fd4559a89b", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(30) == 832040", "assert fibonacci(50) == 12586269025"], "challenge_test_list": []}
{"text": "Write a function to flatten a list of lists.", "code": "def flatten_list(nested_list: list[list[int]]) -> list[int]:\n    return [item for sublist in nested_list for item in sublist]", "task_id": "299_9225a96b-2740-489e-8df6-ea681aa05725", "test_setup_code": "", "test_list": ["assert flatten_list([[1, 2, 3], [4, 5], [6]]) == [1, 2, 3, 4, 5, 6]", "assert flatten_list([[], [1, 2], [], [3, 4], []]) == [1, 2, 3, 4]", "assert flatten_list([[1], [2], [3], [4], [5]]) == [1, 2, 3, 4, 5]", "assert flatten_list([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists.", "code": "def common_elements(list1: list[int], list2: list[int]) -> list[int]:\n    return list(set(list1) & set(list2))", "task_id": "299_5b954348-c6d4-4422-a7e9-4006c77b901d", "test_setup_code": "", "test_list": ["assert common_elements([1, 2, 3], [3, 4, 5]) == [3]", "assert common_elements([1, 2, 3], [4, 5, 6]) == []", "assert common_elements([1, 2, 3, 4], [4, 3, 2, 1]) == [1, 2, 3, 4]", "assert common_elements([], [1, 2, 3]) == []", "assert common_elements([1, 2, 3], []) == []", "assert common_elements([], []) == []", "assert common_elements([1, 1, 2, 2], [2, 2, 3, 3]) == [2]", "assert common_elements([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]", "assert common_elements([1, 2, 3], [3, 3, 3]) == [3]", "assert common_elements([1, 2, 3, 4], [5, 6, 7, 8]) == []", "assert common_elements([1, 2, 3, 4], [4, 5, 6, 7]) == [4]", "assert common_elements([1, 2, 3, 4], [1, 2, 3, 4]) == [1, 2, 3, 4]", "assert common_elements([1, 2, 3, 4], [2, 3, 4, 5]) == [2, 3, 4]", "assert common_elements([1, 2, 3, 4], [0, 1, 2, 3]) == [1, 2, 3]", "assert common_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 10, 15, 20]) == [10, 5]"], "challenge_test_list": []}
{"text": "Write a function to count the occurrence of each word in a given sentence.", "code": "def count_words(sentence: str) -> dict:\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count", "task_id": "299_d0967924-7a3d-45ac-85fd-05f5c7a2b664", "test_setup_code": "", "test_list": ["assert count_words('hello world') == {'hello': 1, 'world': 1}", "assert count_words('hello hello world') == {'hello': 2, 'world': 1}", "assert count_words('') == {}", "assert count_words('a a a a a') == {'a': 5}", "assert count_words('test test test test test') == {'test': 5}", "assert count_words('one two three four five') == {'one': 1, 'two': 1, 'three': 1, 'four': 1, 'five': 1}", "assert count_words('Python is great and Python is fun') == {'Python': 2, 'is': 2, 'great': 1, 'and': 1, 'fun': 1}", "assert count_words('Case CASE case') == {'Case': 1, 'CASE': 1, 'case': 1}", "assert count_words('123 123 456 123') == {'123': 3, '456': 1}", "assert count_words('!@# $%^ &*()') == {'!@#': 1, '$%^': 1, '&*()': 1}", "assert count_words('repeat repeat repeat') == {'repeat': 3}", "assert count_words('mix of words and numbers 123 456') == {'mix': 1, 'of': 1, 'words': 1, 'and': 1, 'numbers': 1, '123': 1, '456': 1}", "assert count_words('punctuation, should; be: counted! correctly?') == {'punctuation,': 1, 'should;': 1, 'be:': 1, 'counted!': 1, 'correctly?': 1}", "assert count_words('new\nline\ncharacters\nshould\nbe\nhandled') == {'new': 1, 'line': 1, 'characters': 1, 'should': 1, 'be': 1, 'handled': 1}", "assert count_words('tab\tseparated\twords') == {'tab': 1, 'separated': 1, 'words': 1}"], "challenge_test_list": []}
{"text": "Write a function to find the second largest number in a list of integers.", "code": "def second_largest(numbers: list[int]) -> int:\n    first, second = float('-inf'), float('-inf')\n    for number in numbers:\n        if number > first:\n            first, second = number, first\n        elif number > second and number != first:\n            second = number\n    return second", "task_id": "299_f1502941-d936-49e6-9855-dbefeb457b23", "test_setup_code": "", "test_list": ["assert second_largest([1, 2, 3, 4, 5]) == 4", "assert second_largest([5, 4, 3, 2, 1]) == 4", "assert second_largest([1, 1, 1, 1, 1]) == float('-inf')", "assert second_largest([2, 2, 3, 3, 4, 4]) == 3", "assert second_largest([10, 20, 20, 30, 30, 40]) == 30", "assert second_largest([100]) == float('-inf')", "assert second_largest([100, 100, 100, 99]) == 99", "assert second_largest([-1, -2, -3, -4, -5]) == -2", "assert second_largest([-5, -4, -3, -2, -1]) == -2", "assert second_largest([1, 2, 3, 4, 5, 5, 5, 5]) == 4", "assert second_largest([1, 3, 3, 2, 2, 4, 4, 5, 5]) == 4", "assert second_largest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert second_largest([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 9", "assert second_largest([1, 2]) == 1", "assert second_largest([2, 1]) == 1"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and reverse the order of elements.", "code": "def reverse_flatten_list(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return result_list", "task_id": "297_851f8e81-289a-4af8-904a-542a58184c61", "test_setup_code": "", "test_list": ["assert reverse_flatten_list([1, [2, 3], [4, [5, 6]], 7]) == [7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([]) == []", "assert reverse_flatten_list([1, 2, 3]) == [3, 2, 1]", "assert reverse_flatten_list([[1, 2], [3, 4], [5, 6]]) == [6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([[[1, 2], 3], 4, [5, [6, 7]]]) == [7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, [3, [4, [5]]]]]) == [5, 4, 3, 2, 1]", "assert reverse_flatten_list([[[[[1]]]]]) == [1]", "assert reverse_flatten_list([1, [], [2, [3, []]], 4]) == [4, 3, 2, 1]", "assert reverse_flatten_list([[], [], []]) == []", "assert reverse_flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, 3], [], [4, [5, 6]], 7, []]) == [7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15]]]]]]]]]]]]]]]) == [15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]) == [20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21, [22, [23, [24, [25]]]]]]]]]]]]]]]]]]]]]]]]) == [25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]", "assert reverse_flatten_list([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20, [21, [22, [23, [24, [25, [26, [27, [28, [29, [30]]]]]]]]]]]]]]]]]]]]]]]]]]]]) == [30, 29, 28, 27, 26, 25, 24, 23, 22, 21, 20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the sum of all elements.", "code": "def flatten_and_sum(nested_list):\n    result_list = []\n    if not nested_list: return 0\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return sum(result_list)", "task_id": "297_ae9d408a-e862-40cf-a511-1685f5a74d58", "test_setup_code": "", "test_list": ["assert flatten_and_sum([1, [2, [3, 4], 5], 6]) == 21", "assert flatten_and_sum([]) == 0", "assert flatten_and_sum([[[[1]]], 2, [[3]], 4]) == 10", "assert flatten_and_sum([1, [2, [3, [4, [5]]]]]) == 15"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a list of only the even elements.", "code": "def flatten_and_filter_even(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else:\n            if next_item % 2 == 0:\n                result_list.append(next_item)\n    return result_list", "task_id": "297_31ad1f45-dfb1-40f9-96e9-8a5e175d5af1", "test_setup_code": "", "test_list": ["assert flatten_and_filter_even([1, 2, [3, 4], [5, [6, 7]], 8]) == [8, 6, 4, 2]", "assert flatten_and_filter_even([[2, 4, [6, 8]], [10, [12, 14]], 16]) == [16, 14, 12, 10, 8, 6, 4, 2]", "assert flatten_and_filter_even([1, 3, [5, 7], [9, [11, 13]], 15]) == []", "assert flatten_and_filter_even([]) == []", "assert flatten_and_filter_even([2, [4, [6, [8, [10]]]]]) == [10, 8, 6, 4, 2]", "assert flatten_and_filter_even([1, [2], 3, [4], 5, [6]]) == [6, 4, 2]", "assert flatten_and_filter_even([[1, 2], [3, 4], [5, 6], [7, 8]]) == [8, 6, 4, 2]", "assert flatten_and_filter_even([[[[[2]]]], [[[[4]]]], [[[[6]]]], [[[[8]]]]]) == [8, 6, 4, 2]", "assert flatten_and_filter_even([0, [0, [0, [0, [0]]]]]) == [0, 0, 0, 0, 0]", "assert flatten_and_filter_even([2, [4, [6, [8, [10, [12]]]]]]) == [12, 10, 8, 6, 4, 2]", "assert flatten_and_filter_even([[], [], []]) == []", "assert flatten_and_filter_even([1, [2, [3, [4, [5, [6]]]]]]) == [6, 4, 2]", "assert flatten_and_filter_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 8, 6, 4, 2]", "assert flatten_and_filter_even([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == [10, 8, 6, 4, 2]", "assert flatten_and_filter_even([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15, [16, [17, [18, [19, [20]]]]]]]]]]]]]]]]]]]]) == [20, 18, 16, 14, 12, 10, 8, 6, 4, 2]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the count of all elements.", "code": "def flatten_and_count(nested_list):\n    result_list = []\n    if not nested_list: return 0\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return len(result_list)", "task_id": "297_babda3d2-9aa6-41e5-9694-8257bce108f4", "test_setup_code": "", "test_list": ["assert flatten_and_count([1, [2, 3], [4, [5, 6]], 7]) == 7", "assert flatten_and_count([]) == 0", "assert flatten_and_count([1, 2, 3, 4, 5]) == 5", "assert flatten_and_count([[1, 2, [3, 4]], 5, [6, [7, 8]]]) == 8", "assert flatten_and_count([[[[[1]]]]]) == 1", "assert flatten_and_count([[], [[], []], []]) == 0", "assert flatten_and_count([1, [2, [3, [4, [5]]]]]) == 5", "assert flatten_and_count([1, [2, [3, [4, []]]]]) == 4", "assert flatten_and_count([1, [2, []], 3, [4, [5, [6, [7, [8, [9]]]]]]]) == 9", "assert flatten_and_count([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == 10", "assert flatten_and_count([1, [2, [3, [4, [5, [], 6, [7, [8, [9, [10]]]]]]]]]) == 10", "assert flatten_and_count([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12]]]]]]]]]]]) == 12", "assert flatten_and_count([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13]]]]]]]]]]]]) == 13", "assert flatten_and_count([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]]]]) == 14", "assert flatten_and_count([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15]]]]]]]]]]]]]]) == 15"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the maximum element.", "code": "def flatten_and_max(nested_list):\n    result_list = []\n    if not nested_list: return float('-inf')\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return max(result_list)", "task_id": "297_80133fa3-a58e-4071-b234-353cf4341004", "test_setup_code": "", "test_list": ["assert flatten_and_max([1, 2, [3, 4], [5, [6, 7]], 8]) == 8", "assert flatten_and_max([]) == float('-inf')", "assert flatten_and_max([1, [2, [3, [4, [5]]]]]) == 5", "assert flatten_and_max([1, [2, [3, [4, [5, [6]]]]]]) == 6", "assert flatten_and_max([[[[1]]], 2, [[3]], 4, [[[[5]]]], 6]) == 6", "assert flatten_and_max([1, 2, 3, 4, 5]) == 5", "assert flatten_and_max([[[[[[10]]]]]]) == 10", "assert flatten_and_max([0, [0, [0, [0, [0]]]]]) == 0", "assert flatten_and_max([-1, [-2, [-3, [-4, [-5]]]]]) == -1", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == 10", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11]]]]]]]]]]]) == 11", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12]]]]]]]]]]]]) == 12", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13]]]]]]]]]]]]]) == 13", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14]]]]]]]]]]]]]]) == 14", "assert flatten_and_max([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13, [14, [15]]]]]]]]]]]]]]]) == 15"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the minimum element.", "code": "def flatten_and_min(nested_list):\n    result_list = []\n    if not nested_list: return float('inf')\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return min(result_list)", "task_id": "297_1348905a-ef8b-4555-9ae2-7b0acd093067", "test_setup_code": "", "test_list": ["assert flatten_and_min([1, 2, 3, 4, 5]) == 1", "assert flatten_and_min([5, 4, 3, 2, 1]) == 1", "assert flatten_and_min([1, [2, 3], 4]) == 1", "assert flatten_and_min([[1, 2], [3, 4]]) == 1", "assert flatten_and_min([[[1]], [[2]], [[3]]]) == 1", "assert flatten_and_min([10, [5, [3]], [20]]) == 3", "assert flatten_and_min([100, 200, [300, [400, [500]]]]) == 100", "assert flatten_and_min([[[-5, 10], 3], 2, 1]) == -5", "assert flatten_and_min([0, [0], [[0]]]) == 0", "assert flatten_and_min([-1, [-2, [-3, [-4]]]]) == -4", "assert flatten_and_min([[-10, -5], [-20, -15]]) == -20", "assert flatten_and_min([1, [], [2], []]) == 1", "assert flatten_and_min([[[[]]], 5]) == 5", "assert flatten_and_min([7]) == 7", "assert flatten_and_min([]) == float('inf')"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the product of all elements.", "code": "def flatten_and_product(nested_list):\n    result_list = []\n    if not nested_list: return 1\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    product = 1\n    for num in result_list:\n        product *= num\n    return product", "task_id": "297_33ae8060-3d52-4e37-b668-18c183a8c1cf", "test_setup_code": "", "test_list": ["assert flatten_and_product([1, [2, [3, 4], 5], 6]) == 720", "assert flatten_and_product([]) == 1", "assert flatten_and_product([1, [2, [3, [4, [5]]]]]) == 120", "assert flatten_and_product([1, [2, [3, [4, [0]]]]]) == 0"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a list of unique elements.", "code": "def flatten_and_unique(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return list(set(result_list))", "task_id": "297_47665d44-12c4-4c2c-94b0-8add19aaecbd", "test_setup_code": "", "test_list": ["assert flatten_and_unique([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert sorted(flatten_and_unique([1, 2, 3, 3, 4, 5])) == [1, 2, 3, 4, 5]", "assert sorted(flatten_and_unique([1, [2, 3], 4, 5])) == [1, 2, 3, 4, 5]", "assert sorted(flatten_and_unique([1, [2, [3, 4]], 5])) == [1, 2, 3, 4, 5]", "assert sorted(flatten_and_unique([[1, 2], [3, 4], [5]])) == [1, 2, 3, 4, 5]", "assert flatten_and_unique([]) == []", "assert flatten_and_unique([[]]) == []", "assert flatten_and_unique([[], []]) == []", "assert flatten_and_unique([1, 1, 1, 1]) == [1]", "assert sorted(flatten_and_unique([[1, 2], [2, 3], [3, 4]])) == [1, 2, 3, 4]", "assert sorted(flatten_and_unique([1, [2, [3, [4, [5]]]], 1, 2])) == [1, 2, 3, 4, 5]", "assert sorted(flatten_and_unique(['a', ['b', 'c'], 'd'])) == ['a', 'b', 'c', 'd']", "assert sorted(flatten_and_unique([True, [False], [True, False]])) == [False, True]", "assert sorted(flatten_and_unique([1, 2, [3, [4, [5, [6, [7]]]]], 8, 9])) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert sorted(flatten_and_unique([[[[1]]], [[[2]]], [[[3]]]])) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a sorted list of elements.", "code": "def flatten_and_sort(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return sorted(result_list)", "task_id": "297_a3e2500a-e849-4168-8f21-790915f351ca", "test_setup_code": "", "test_list": ["assert flatten_and_sort([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]", "assert flatten_and_sort([]) == []", "assert flatten_and_sort([[], [[], []], []]) == []", "assert flatten_and_sort([[3, 2, 1], [4, 6, 5], [], 7, [8, [9, 10]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return True if a target element is found, otherwise False.", "code": "def flatten_and_find(nested_list, target):\n    result_list = []\n    if not nested_list: return False\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return target in result_list", "task_id": "297_b17775b0-49d4-49ce-9c59-4bf8907fd86b", "test_setup_code": "", "test_list": ["assert flatten_and_find([1, [2, [3, 4], 5], 6], 4) == True", "assert flatten_and_find([1, [2, [3, 4], 5], 6], 7) == False", "assert flatten_and_find([], 1) == False", "assert flatten_and_find([1, [2, [3, [4, [5]]]]], 5) == True"], "challenge_test_list": []}
{"text": "Write a function to find the count of all ternary sequences of length 2n such that sum of first n digits is same as sum of last n digits.", "code": "def count_balanced_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_fea737dd-3249-481d-9018-88cbd57d44cd", "test_setup_code": "", "test_list": ["assert count_balanced_sequences(1) == 1", "assert count_balanced_sequences(2) == 6", "assert count_balanced_sequences(3) == 100", "assert count_balanced_sequences(0) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the count of all binary sequences of length 2n that are palindromic.", "code": "def count_palindromic_sequences(n): \n    return 2 ** n", "task_id": "300_dcd18517-07a6-41a9-959f-142bce08d68f", "test_setup_code": "", "test_list": ["assert count_palindromic_sequences(0) == 1", "assert count_palindromic_sequences(1) == 2", "assert count_palindromic_sequences(2) == 4", "assert count_palindromic_sequences(3) == 8", "assert count_palindromic_sequences(4) == 16", "assert count_palindromic_sequences(5) == 32", "assert count_palindromic_sequences(6) == 64", "assert count_palindromic_sequences(7) == 128", "assert count_palindromic_sequences(8) == 256", "assert count_palindromic_sequences(9) == 512", "assert count_palindromic_sequences(10) == 1024", "assert count_palindromic_sequences(11) == 2048", "assert count_palindromic_sequences(12) == 4096", "assert count_palindromic_sequences(13) == 8192", "assert count_palindromic_sequences(14) == 16384"], "challenge_test_list": []}
{"text": "Write a function to find the count of all subarrays of an array where the sum of the first half is equal to the sum of the second half.", "code": "def count_equal_sum_subarrays(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i + 1, n, 2): \n            mid = (i + j + 1) // 2 \n            if sum(arr[i:mid]) == sum(arr[mid:j + 1]): \n                count += 1 \n    return count", "task_id": "300_9e1e7b1b-f437-4201-a2a8-2fadf06827ea", "test_setup_code": "", "test_list": ["assert count_equal_sum_subarrays([1, 2, 1, 2]) == 1", "assert count_equal_sum_subarrays([1, 2, 3, 4, 5, 6]) == 0", "assert count_equal_sum_subarrays([1, 1, 1, 1, 1, 1]) == 3", "assert count_equal_sum_subarrays([1, 3, 2, 1, 1, 2, 3, 1]) == 2", "assert count_equal_sum_subarrays([1, 2, 3, 3, 2, 1]) == 1", "assert count_equal_sum_subarrays([1, 2, 3, 1, 2, 3]) == 0", "assert count_equal_sum_subarrays([1, 2, 2, 1, 2, 2, 1, 2, 2, 1]) == 4", "assert count_equal_sum_subarrays([1, 2, 1, 2, 1, 2, 1, 2]) == 6", "assert count_equal_sum_subarrays([1, 2, 3, 4, 5, 6, 7, 8]) == 0", "assert count_equal_sum_subarrays([1, 1, 1, 1, 1, 1, 1, 1]) == 10", "assert count_equal_sum_subarrays([0, 0, 0, 0]) == 3", "assert count_equal_sum_subarrays([1, -1, 1, -1]) == 1", "assert count_equal_sum_subarrays([1, 2, 1, 2, 1, 2]) == 3", "assert count_equal_sum_subarrays([1, 2, 3, 4, 3, 2, 1]) == 0", "assert count_equal_sum_subarrays([1, 2, 3, 3, 2, 1, 1, 2, 3, 3, 2, 1]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the count of all balanced parentheses sequences of length 2n.", "code": "def count_balanced_parentheses(n): \n    from math import comb\n    return comb(2*n, n) // (n + 1)", "task_id": "300_b173eb9d-909f-42c7-900a-5902a7fe9107", "test_setup_code": "", "test_list": ["assert count_balanced_parentheses(0) == 1", "assert count_balanced_parentheses(1) == 1", "assert count_balanced_parentheses(2) == 2", "assert count_balanced_parentheses(3) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the count of all decimal sequences of length 2n such that the sum of the first n digits is equal to the sum of the last n digits.", "code": "def count_equal_digit_sum_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_4e2c2fae-9178-46a9-a992-e9b0b76562f4", "test_setup_code": "", "test_list": ["assert count_equal_digit_sum_sequences(1) == 1", "assert count_equal_digit_sum_sequences(2) == 6", "assert count_equal_digit_sum_sequences(3) == 400", "assert count_equal_digit_sum_sequences(4) == 63504"], "challenge_test_list": []}
{"text": "Write a function to find the count of all symmetric sequences of length 2n where the sequence is the same when read forwards and backwards.", "code": "def count_symmetric_sequences(n): \n    return 2 ** n", "task_id": "300_34a31fbf-44e9-47b8-bb51-790cc613857c", "test_setup_code": "", "test_list": ["assert count_symmetric_sequences(0) == 1", "assert count_symmetric_sequences(1) == 2", "assert count_symmetric_sequences(2) == 4", "assert count_symmetric_sequences(3) == 8", "assert count_symmetric_sequences(4) == 16", "assert count_symmetric_sequences(5) == 32", "assert count_symmetric_sequences(6) == 64", "assert count_symmetric_sequences(7) == 128", "assert count_symmetric_sequences(8) == 256", "assert count_symmetric_sequences(9) == 512", "assert count_symmetric_sequences(10) == 1024", "assert count_symmetric_sequences(11) == 2048", "assert count_symmetric_sequences(12) == 4096", "assert count_symmetric_sequences(13) == 8192", "assert count_symmetric_sequences(14) == 16384"], "challenge_test_list": []}
{"text": "Write a function to find the count of all binary sequences of length 2n such that the number of 1s in the first half is equal to the number of 0s in the second half.", "code": "def count_even_odd_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_79a55620-40a1-4d40-90ca-a3498212df24", "test_setup_code": "", "test_list": ["assert count_even_odd_sequences(0) == 1", "assert count_even_odd_sequences(1) == 1", "assert count_even_odd_sequences(2) == 6", "assert count_even_odd_sequences(3) == 400", "assert count_even_odd_sequences(4) == 63504", "assert count_even_odd_sequences(5) == 2646278400", "assert count_even_odd_sequences(6) == 28989675", "assert count_even_odd_sequences(7) == 1182645815640", "assert count_even_odd_sequences(8) == 1382958545", "assert count_even_odd_sequences(9) == 3646146800", "assert count_even_odd_sequences(10) == 184756", "assert count_even_odd_sequences(11) == 705432", "assert count_even_odd_sequences(12) == 2704156", "assert count_even_odd_sequences(13) == 10400600", "assert count_even_odd_sequences(14) == 40116600"], "challenge_test_list": []}
{"text": "Write a function to find the count of all pairs of subarrays where the sum of the first subarray is equal to the sum of the second subarray.", "code": "def count_equal_sum_pairs(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i + 1, n): \n            for k in range(j + 1, n): \n                for l in range(k + 1, n + 1): \n                    if sum(arr[i:j]) == sum(arr[k:l]): \n                        count += 1 \n    return count", "task_id": "300_67a7b84b-fcb9-4285-81fb-d84a66ba944f", "test_setup_code": "", "test_list": ["assert count_equal_sum_pairs([1, 2, 3, 4, 5]) == 0", "assert count_equal_sum_pairs([1, 1, 1, 1]) == 6", "assert count_equal_sum_pairs([1, 2, 1, 2, 1, 2]) == 4", "assert count_equal_sum_pairs([0, 0, 0, 0]) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the count of all palindromic substrings in a given string.", "code": "def count_palindromic_substrings(s): \n    n = len(s) \n    count = 0 \n    for i in range(n): \n        for j in range(i, n): \n            if s[i:j + 1] == s[i:j + 1][::-1]: \n                count += 1 \n    return count", "task_id": "300_7ef53861-2884-4dab-8499-be83e1ed2347", "test_setup_code": "", "test_list": ["assert count_palindromic_substrings('') == 0", "assert count_palindromic_substrings('a') == 1", "assert count_palindromic_substrings('aa') == 3", "assert count_palindromic_substrings('ab') == 2", "assert count_palindromic_substrings('aba') == 4", "assert count_palindromic_substrings('abc') == 3", "assert count_palindromic_substrings('aaa') == 6", "assert count_palindromic_substrings('racecar') == 10", "assert count_palindromic_substrings('abcd') == 4", "assert count_palindromic_substrings('abba') == 6", "assert count_palindromic_substrings('aabb') == 6", "assert count_palindromic_substrings('abcba') == 7", "assert count_palindromic_substrings('madam') == 7", "assert count_palindromic_substrings('aabbaa') == 11", "assert count_palindromic_substrings('noon') == 6"], "challenge_test_list": []}
{"text": "Write a function to find the count of all pairs of submatrices in a given matrix where the sum of the elements in the first submatrix is equal to the sum of the elements in the second submatrix.", "code": "def count_equal_sum_pairs_in_matrix(matrix): \n    n = len(matrix) \n    m = len(matrix[0]) \n    count = 0 \n    for i in range(n): \n        for j in range(m): \n            for k in range(i, n): \n                for l in range(j, m): \n                    for p in range(i, k + 1): \n                        for q in range(j, l + 1): \n                            if sum(matrix[x][y] for x in range(i, k + 1) for y in range(j, l + 1)) == sum(matrix[x][y] for x in range(p, k + 1) for y in range(q, l + 1)): \n                                count += 1 \n    return count", "task_id": "300_aef5e0ee-ff98-4d60-b359-9082fbf4b407", "test_setup_code": "", "test_list": ["assert count_equal_sum_pairs_in_matrix([[1, 2], [3, 4]]) == 4", "assert count_equal_sum_pairs_in_matrix([[1, 1], [1, 1]]) == 16", "assert count_equal_sum_pairs_in_matrix([[0, 0], [0, 0]]) == 16", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9", "assert count_equal_sum_pairs_in_matrix([[1]]) == 1", "assert count_equal_sum_pairs_in_matrix([[1, 2], [2, 1]]) == 8", "assert count_equal_sum_pairs_in_matrix([[1, 2, 1], [2, 1, 2], [1, 2, 1]]) == 36", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3], [3, 2, 1], [1, 2, 3]]) == 12", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == 16", "assert count_equal_sum_pairs_in_matrix([[1, 1, 1], [1, 1, 1], [1, 1, 1]]) == 81", "assert count_equal_sum_pairs_in_matrix([[2, 2], [2, 2]]) == 16", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 16", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]) == 25", "assert count_equal_sum_pairs_in_matrix([[1, 2], [3, 4], [5, 6]]) == 9", "assert count_equal_sum_pairs_in_matrix([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20], [21, 22, 23, 24, 25]]) == 25"], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in an integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "302_bb3cc0b0-ed0e-4c4e-9160-7aab0d39e626", "test_setup_code": "", "test_list": ["assert count_set_bits(0) == 0", "assert count_set_bits(1) == 1", "assert count_set_bits(2) == 1", "assert count_set_bits(3) == 2", "assert count_set_bits(4) == 1", "assert count_set_bits(7) == 3", "assert count_set_bits(8) == 1", "assert count_set_bits(15) == 4", "assert count_set_bits(16) == 1", "assert count_set_bits(31) == 5", "assert count_set_bits(32) == 1", "assert count_set_bits(63) == 6", "assert count_set_bits(64) == 1", "assert count_set_bits(127) == 7", "assert count_set_bits(128) == 1"], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "302_bf25271f-4122-4e68-9d3a-5586111289b6", "test_setup_code": "", "test_list": ["assert is_power_of_two(1) == true", "assert is_power_of_two(2) == true", "assert is_power_of_two(3) == false", "assert is_power_of_two(4) == true", "assert is_power_of_two(5) == false", "assert is_power_of_two(8) == true", "assert is_power_of_two(16) == true", "assert is_power_of_two(31) == false", "assert is_power_of_two(32) == true", "assert is_power_of_two(0) == false", "assert is_power_of_two(-1) == false", "assert is_power_of_two(1024) == true", "assert is_power_of_two(2048) == true", "assert is_power_of_two(2047) == false", "assert is_power_of_two(-1024) == false"], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than or equal to a given integer.", "code": "def next_power_of_two(n: int) -> int:\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1", "task_id": "302_4370753d-3121-4637-b634-14abb7dade71", "test_setup_code": "", "test_list": ["assert next_power_of_two(0) == 1", "assert next_power_of_two(1) == 1", "assert next_power_of_two(2) == 2", "assert next_power_of_two(3) == 4", "assert next_power_of_two(4) == 4", "assert next_power_of_two(5) == 8", "assert next_power_of_two(6) == 8", "assert next_power_of_two(7) == 8", "assert next_power_of_two(8) == 8", "assert next_power_of_two(9) == 16", "assert next_power_of_two(15) == 16", "assert next_power_of_two(16) == 16", "assert next_power_of_two(17) == 32", "assert next_power_of_two(31) == 32", "assert next_power_of_two(32) == 32"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of two less than a given integer.", "code": "def highest_power_of_two_less_than(n: int) -> int:\n    if n < 1:\n        return 0\n    p = 1\n    while p * 2 < n:\n        p *= 2\n    return p", "task_id": "302_0fd3f4cd-fe5b-4dc6-84ef-047096f7e64d", "test_setup_code": "", "test_list": ["assert highest_power_of_two_less_than(10) == 8", "assert highest_power_of_two_less_than(16) == 8", "assert highest_power_of_two_less_than(1) == 0", "assert highest_power_of_two_less_than(1024) == 512"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given integer.", "code": "def toggle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    all_ones = (1 << num_bits) - 1\n    return n ^ all_ones", "task_id": "302_4c23defa-bc1c-4377-b79a-cb8db86ab346", "test_setup_code": "", "test_list": ["assert toggle_bits(0) == 1", "assert toggle_bits(1) == 0", "assert toggle_bits(2) == 1", "assert toggle_bits(3) == 0", "assert toggle_bits(4) == 3", "assert toggle_bits(5) == 2", "assert toggle_bits(6) == 1", "assert toggle_bits(7) == 0", "assert toggle_bits(8) == 7", "assert toggle_bits(15) == 0", "assert toggle_bits(16) == 15", "assert toggle_bits(31) == 0", "assert toggle_bits(32) == 31", "assert toggle_bits(255) == 0", "assert toggle_bits(256) == 255"], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in the binary representation of a given integer.", "code": "def count_leading_zeros(n: int) -> int:\n    if n == 0:\n        return 32\n    count = 0\n    while (n & (1 << 31)) == 0:\n        n <<= 1\n        count += 1\n    return count", "task_id": "302_ccd3a91b-2e40-47eb-bf35-55d5b5953aac", "test_setup_code": "", "test_list": ["assert count_leading_zeros(0) == 32", "assert count_leading_zeros(1) == 31", "assert count_leading_zeros(2) == 30", "assert count_leading_zeros(3) == 30", "assert count_leading_zeros(4) == 29", "assert count_leading_zeros(7) == 29", "assert count_leading_zeros(8) == 28", "assert count_leading_zeros(15) == 28", "assert count_leading_zeros(16) == 27", "assert count_leading_zeros(255) == 24", "assert count_leading_zeros(256) == 23", "assert count_leading_zeros(65535) == 16", "assert count_leading_zeros(65536) == 15", "assert count_leading_zeros(2147483647) == 1", "assert count_leading_zeros(2147483648) == 0"], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given integer.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    for i in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "302_1c50402e-24e7-4251-b14b-d08c02f7426f", "test_setup_code": "", "test_list": ["assert reverse_bits(43261596) == 964176192", "assert reverse_bits(0) == 0", "assert reverse_bits(1) == 2147483648", "assert reverse_bits(4294967295) == 4294967295"], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is even.", "code": "def is_even(n: int) -> bool:\n    return (n & 1) == 0", "task_id": "302_aab153bf-e712-4164-a374-67da0daba3e0", "test_setup_code": "", "test_list": ["assert is_even(2) == True", "assert is_even(3) == False", "assert is_even(0) == True", "assert is_even(-2) == True", "assert is_even(-3) == False", "assert is_even(1000000) == True", "assert is_even(1000001) == False", "assert is_even(-1000000) == True", "assert is_even(-1000001) == False", "assert is_even(1) == False", "assert is_even(-1) == False", "assert is_even(999999) == False", "assert is_even(999998) == True", "assert is_even(-999999) == False", "assert is_even(-999998) == True"], "challenge_test_list": []}
{"text": "Write a python function to convert a binary string to a decimal integer.", "code": "def binary_to_decimal(binary: str) -> int:\n    return int(binary, 2)", "task_id": "302_af4aecc4-00e9-48f0-b94a-820cda6a5061", "test_setup_code": "", "test_list": ["assert binary_to_decimal('0') == 0", "assert binary_to_decimal('1') == 1", "assert binary_to_decimal('10') == 2", "assert binary_to_decimal('11') == 3", "assert binary_to_decimal('101') == 5", "assert binary_to_decimal('110') == 6", "assert binary_to_decimal('111') == 7", "assert binary_to_decimal('1000') == 8", "assert binary_to_decimal('1001') == 9", "assert binary_to_decimal('1111') == 15", "assert binary_to_decimal('10000') == 16", "assert binary_to_decimal('101010') == 42", "assert binary_to_decimal('11111111') == 255", "assert binary_to_decimal('100000000') == 256", "assert binary_to_decimal('110110110110') == 3510"], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal integer to a binary string.", "code": "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "task_id": "302_6dfc71bb-237a-4f77-9c80-384e40c73599", "test_setup_code": "", "test_list": ["assert decimal_to_binary(0) == '0'", "assert decimal_to_binary(1) == '1'", "assert decimal_to_binary(2) == '10'", "assert decimal_to_binary(5) == '101'", "assert decimal_to_binary(10) == '1010'", "assert decimal_to_binary(15) == '1111'", "assert decimal_to_binary(16) == '10000'", "assert decimal_to_binary(42) == '101010'", "assert decimal_to_binary(100) == '1100100'", "assert decimal_to_binary(255) == '11111111'", "assert decimal_to_binary(256) == '100000000'", "assert decimal_to_binary(1023) == '1111111111'", "assert decimal_to_binary(1024) == '10000000000'", "assert decimal_to_binary(9999) == '10011100001111'", "assert decimal_to_binary(65535) == '1111111111111111'"], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested list.", "code": "def list_depth(lst):\n    if isinstance(lst, list):\n        return 1 + (max(map(list_depth, lst)) if lst else 0)\n    return 0", "task_id": "301_e196cf4b-b5a7-4a6c-9048-728ac2db4d68", "test_setup_code": "", "test_list": ["assert list_depth([]) == 1", "assert list_depth([1, 2, 3]) == 1", "assert list_depth([1, [2, 3], 4]) == 2", "assert list_depth([1, [2, [3, 4]], 5]) == 3", "assert list_depth([[[[]]]]) == 4", "assert list_depth([1, [2, [3, [4, [5]]]]]) == 5", "assert list_depth([1, [2], [3], [4, [5, [6]]]]) == 3", "assert list_depth([1, [2, [3, [4, [5, [6, [7]]]]]]]) == 7", "assert list_depth([[[1], 2], 3, [4, [5, [6]]]]) == 4", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8]]]]]]]]) == 8", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8, [9]]]]]]]]]) == 9", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8, [9, [10]]]]]]]]]]) == 10", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11]]]]]]]]]]) == 11", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12]]]]]]]]]]) == 12", "assert list_depth([1, [2, [3, [4, [5, [6, [7, [8, [9, [10, [11, [12, [13]]]]]]]]]]) == 13"], "challenge_test_list": []}
{"text": "Write a function to count the total number of keys in a nested dictionary.", "code": "def dict_keys_count(d):\n    if isinstance(d, dict):\n        return len(d) + sum(dict_keys_count(v) for v in d.values())\n    return 0", "task_id": "301_3f04374e-88e9-4c89-aaae-a4942fb894c4", "test_setup_code": "", "test_list": ["assert dict_keys_count({}) == 0", "assert dict_keys_count({'a': 1}) == 1", "assert dict_keys_count({'a': 1, 'b': 2}) == 2", "assert dict_keys_count({'a': {'b': 2}}) == 2", "assert dict_keys_count({'a': {'b': {'c': 3}}}) == 3", "assert dict_keys_count({'a': {'b': {'c': {'d': 4}}}}) == 4", "assert dict_keys_count({'a': 1, 'b': {'c': 2, 'd': 3}}) == 4", "assert dict_keys_count({'a': {'b': 2}, 'c': {'d': 4}}) == 4", "assert dict_keys_count({'a': {'b': 2, 'c': {'d': 4}}}) == 4", "assert dict_keys_count({'a': {'b': {'c': {'d': {'e': 5}}}}}) == 5", "assert dict_keys_count({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 5", "assert dict_keys_count({'a': 1, 'b': {'c': 2, 'd': {'e': 3, 'f': 4}}}) == 6", "assert dict_keys_count({'a': {'b': {'c': {'d': {'e': {'f': 6}}}}}}) == 6", "assert dict_keys_count({'a': {'b': 2}, 'c': {'d': 4, 'e': {'f': 6}}}) == 6", "assert dict_keys_count({'a': 1, 'b': {'c': 2, 'd': {'e': 3, 'f': {'g': 4}}}}) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integers in a nested list.", "code": "def list_sum(lst):\n    if isinstance(lst, list):\n        return sum(map(list_sum, lst))\n    elif isinstance(lst, int):\n        return lst\n    return 0", "task_id": "301_569ef8db-d49a-4b96-bd0d-b82a4d499ef3", "test_setup_code": "", "test_list": ["assert list_sum([1, 2, [3, 4], 5]) == 15", "assert list_sum([1, [2, [3, [4, [5]]]]]) == 15", "assert list_sum([[], [[], []], []]) == 0", "assert list_sum([10, [20, [30, [40, [50]]]], 60]) == 210"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a nested dictionary.", "code": "def dict_values_sum(d):\n    if isinstance(d, dict):\n        return sum(dict_values_sum(v) for v in d.values())\n    elif isinstance(d, int):\n        return d\n    return 0", "task_id": "301_3a3e3d10-5606-483e-baef-e9cb0ab06a91", "test_setup_code": "", "test_list": ["assert dict_values_sum({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 6", "assert dict_values_sum({'x': {'y': {'z': 10}}, 'w': 5}) == 15", "assert dict_values_sum({'key1': 0, 'key2': {'key3': 0, 'key4': {'key5': 0}}}) == 0", "assert dict_values_sum({'outer': {'inner': {'innermost': 100}}, 'another_outer': {'another_inner': -50}}) == 50"], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def list_flatten(lst):\n    if isinstance(lst, list):\n        result = []\n        for item in lst:\n            result.extend(list_flatten(item))\n        return result\n    return [lst]", "task_id": "301_f367440c-76e0-451d-b66b-de11646b5e7d", "test_setup_code": "", "test_list": ["assert list_flatten([1, [2, [3, 4], 5], 6]) == [1, 2, 3, 4, 5, 6]", "assert list_flatten([1, 2, 3]) == [1, 2, 3]", "assert list_flatten([]) == []", "assert list_flatten([[], []]) == []", "assert list_flatten([1, [2, [3, [4, [5]]]]]) == [1, 2, 3, 4, 5]", "assert list_flatten([[[[[]]]]]) == []", "assert list_flatten([1, [2, 3], [4, 5], 6]) == [1, 2, 3, 4, 5, 6]", "assert list_flatten([1, [2, [3, [4, [5, [6]]]]], 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert list_flatten([1, [2, [3, [4, [5, [6, [7]]]]]], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert list_flatten([1, [2, [3, [4, [5, [6, [7, [8]]]]]]], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert list_flatten([1, [2], 3, [4], 5]) == [1, 2, 3, 4, 5]", "assert list_flatten([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert list_flatten([1, [2, [3, 4], 5], [6, 7], 8]) == [1, 2, 3, 4, 5, 6, 7, 8]", "assert list_flatten([[[1], 2], 3, [4, [5, 6]], 7]) == [1, 2, 3, 4, 5, 6, 7]", "assert list_flatten([1, [2, [3, [4, [5, [6, [7, [8, [9]]]]]]]]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]"], "challenge_test_list": []}
{"text": "Write a function to return a dictionary where the keys are the original keys and the values are their depths in the original nested dictionary.", "code": "def dict_depth_keys(d, depth=1):\n    result = {}\n    if isinstance(d, dict):\n        for k, v in d.items():\n            result[k] = depth\n            if isinstance(v, dict):\n                result.update(dict_depth_keys(v, depth + 1))\n    return result", "task_id": "301_c5ed573a-2634-451a-b109-9b295e2ea6d8", "test_setup_code": "", "test_list": ["assert dict_depth_keys({}) == {}", "assert dict_depth_keys({'a': 1}) == {'a': 1}", "assert dict_depth_keys({'a': {'b': 2}}) == {'a': 1, 'b': 2}", "assert dict_depth_keys({'a': {'b': {'c': 3}}}) == {'a': 1, 'b': 2, 'c': 3}", "assert dict_depth_keys({'a': {'b': 2}, 'c': 3}) == {'a': 1, 'b': 2, 'c': 1}", "assert dict_depth_keys({'a': {'b': {'c': {'d': 4}}}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}", "assert dict_depth_keys({'a': {'b': {'c': 3}}, 'd': 4}) == {'a': 1, 'b': 2, 'c': 3, 'd': 1}", "assert dict_depth_keys({'a': {'b': {'c': {'d': {'e': 5}}}}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}", "assert dict_depth_keys({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == {'a': 1, 'b': 1, 'c': 2, 'd': 2, 'e': 3}", "assert dict_depth_keys({'a': {'b': {'c': 3}}, 'd': {'e': 4}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2}", "assert dict_depth_keys({'a': {'b': 2}, 'c': {'d': {'e': 3}}}) == {'a': 1, 'b': 2, 'c': 1, 'd': 2, 'e': 3}", "assert dict_depth_keys({'a': {'b': {'c': 3}}, 'd': {'e': {'f': 4}}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 1, 'e': 2, 'f': 3}", "assert dict_depth_keys({'a': 1, 'b': {'c': 2}, 'd': {'e': {'f': 3}}}) == {'a': 1, 'b': 1, 'c': 2, 'd': 1, 'e': 2, 'f': 3}", "assert dict_depth_keys({'a': {'b': 2, 'c': {'d': 3}}, 'e': 4}) == {'a': 1, 'b': 2, 'c': 2, 'd': 3, 'e': 1}", "assert dict_depth_keys({'a': {'b': {'c': {'d': 4}}}, 'e': {'f': 5}}) == {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 1, 'f': 2}"], "challenge_test_list": []}
{"text": "Write a function to check if a nested list contains a specific integer value.", "code": "def list_contains(lst, value):\n    if isinstance(lst, list):\n        return any(list_contains(item, value) for item in lst)\n    return lst == value", "task_id": "301_0ac3387e-2705-4b23-b8c6-eb1ac93b26d9", "test_setup_code": "", "test_list": ["assert list_contains([1, 2, 3, 4], 3) == True", "assert list_contains([1, 2, 3, 4], 5) == False", "assert list_contains([], 1) == False", "assert list_contains([[1, 2], [3, 4]], 3) == True", "assert list_contains([[1, 2], [3, 4]], 5) == False", "assert list_contains([1, [2, [3, [4]]]], 4) == True", "assert list_contains([1, [2, [3, [4]]]], 5) == False", "assert list_contains([1, 2, [3, 4, [5, 6]]], 6) == True", "assert list_contains([1, 2, [3, 4, [5, 6]]], 7) == False", "assert list_contains([[[]]], 1) == False", "assert list_contains([0], 0) == True", "assert list_contains([-1, -2, -3], -2) == True", "assert list_contains([1, [2, 3], [[4]]], 4) == True", "assert list_contains([1, [2, 3], [[]]], 4) == False", "assert list_contains([1, 2, 3, [4, [5, [6, [7]]]]], 7) == True"], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested list, counting only lists that contain integers.", "code": "def list_max_depth(lst):\n    if isinstance(lst, list):\n        if any(isinstance(i, int) for i in lst):\n            return 1 + (max(map(list_max_depth, lst)) if lst else 0)\n        else:\n            return max(map(list_max_depth, lst)) if lst else 0\n    return 0", "task_id": "301_8a263467-4a7a-4194-9bed-cefd2095e214", "test_setup_code": "", "test_list": ["assert list_max_depth([1, [2, [3, [4]]]]) == 4", "assert list_max_depth([[], [1, [2, []]], 3]) == 3", "assert list_max_depth([[], [[], []], []]) == 0", "assert list_max_depth([1, [2, [3, [4, [5]]]], 6, [7, 8]]) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested dictionary, counting only dictionaries that contain integer values.", "code": "def dict_max_depth(d):\n    if isinstance(d, dict):\n        if any(isinstance(v, int) for v in d.values()):\n            return 1 + (max(map(dict_max_depth, d.values())) if d else 0)\n        else:\n            return max(map(dict_max_depth, d.values())) if d else 0\n    return 0", "task_id": "301_6099e441-d0a7-4261-bd77-eceeb9aee97c", "test_setup_code": "", "test_list": ["assert dict_max_depth({'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}) == 3", "assert dict_max_depth({'a': {'b': {'c': {}}}}) == 0", "assert dict_max_depth({'a': {'b': {'c': 1}}, 'd': 2}) == 3", "assert dict_max_depth({'a': {'b': {'c': {'d': {'e': 5}}}}, 'f': {'g': 3}}) == 5"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "303_b25ed252-fc38-4ad9-8083-faff6c277f84", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "303_2a3b0e91-730b-40bd-9ec4-4760bb07d92c", "test_setup_code": "", "test_list": ["assert is_anagram('listen', 'silent') == True", "assert is_anagram('triangle', 'integral') == True", "assert is_anagram('apple', 'pale') == False", "assert is_anagram('a', 'a') == True", "assert is_anagram('a', 'b') == False", "assert is_anagram('', '') == True", "assert is_anagram('abc', 'cba') == True", "assert is_anagram('abc', 'abcd') == False", "assert is_anagram('123', '321') == True", "assert is_anagram('123', '2314') == False", "assert is_anagram('!@#', '#@!') == True", "assert is_anagram('!@#', '##!') == False", "assert is_anagram('anagram', 'nagaram') == True", "assert is_anagram('rat', 'car') == False", "assert is_anagram('aabbcc', 'abcabc') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is prime or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "303_c564bead-8a5f-4089-be55-ac965dbd7317", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(3) == True", "assert is_prime(4) == False", "assert is_prime(5) == True", "assert is_prime(10) == False", "assert is_prime(13) == True", "assert is_prime(17) == True", "assert is_prime(19) == True", "assert is_prime(23) == True", "assert is_prime(24) == False", "assert is_prime(1) == False", "assert is_prime(0) == False", "assert is_prime(-1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "303_48f6e9af-86c6-44b6-91e2-803ccb90e36c", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(2) == 1", "assert fibonacci(3) == 2", "assert fibonacci(4) == 3", "assert fibonacci(5) == 5", "assert fibonacci(6) == 8", "assert fibonacci(7) == 13", "assert fibonacci(8) == 21", "assert fibonacci(9) == 34", "assert fibonacci(10) == 55", "assert fibonacci(15) == 610", "assert fibonacci(20) == 6765", "assert fibonacci(-1) == 0", "assert fibonacci(-5) == 0"], "challenge_test_list": []}
{"text": "Write a python function to check whether a given list is sorted in ascending order.", "code": "def is_sorted(arr: list) -> bool:\n    return arr == sorted(arr)", "task_id": "303_1576b076-9602-4eae-a9a1-336af073fea3", "test_setup_code": "", "test_list": ["assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([5, 4, 3, 2, 1]) == False", "assert is_sorted([1, 1, 1, 1, 1]) == True", "assert is_sorted([1, 2, 2, 3, 4]) == True", "assert is_sorted([1, 3, 2, 4, 5]) == False", "assert is_sorted([]) == True", "assert is_sorted([1]) == True", "assert is_sorted([2, 2, 2, 2, 2, 2, 2]) == True", "assert is_sorted([1, 2, 3, 4, 3, 5]) == False", "assert is_sorted([-5, -4, -3, -2, -1]) == True", "assert is_sorted([-1, -2, -3, -4, -5]) == False", "assert is_sorted([0, 0, 0, 0, 0]) == True", "assert is_sorted([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True", "assert is_sorted([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False", "assert is_sorted([1.1, 2.2, 3.3, 4.4, 5.5]) == True"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "303_8bf17dfa-c84e-4be8-bbc1-3771d4a39f02", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('world') == 'dlrow'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('ab') == 'ba'", "assert reverse_string('racecar') == 'racecar'", "assert reverse_string('12345') == '54321'", "assert reverse_string('!@#$%') == '%$#@!'", "assert reverse_string('A man a plan a canal Panama') == 'amanaP lanac a nalp a nam A'", "assert reverse_string('Python') == 'nohtyP'", "assert reverse_string('Able was I ere I saw Elba') == 'ablE was I ere I saw elbA'", "assert reverse_string('123abcABC') == 'CBAcba321'", "assert reverse_string(' ') == ' '", "assert reverse_string('  leading and trailing spaces  ') == '  secaps gniliart dna gnidael  '", "assert reverse_string('Palindrome') == 'emordnilaP'"], "challenge_test_list": []}
{"text": "Write a python function to compute the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "303_7f6e6889-a9b7-424c-ab2a-5c85af7b629c", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(999) == 27", "assert sum_of_digits(1001) == 2", "assert sum_of_digits(4567) == 22", "assert sum_of_digits(1) == 1", "assert sum_of_digits(10) == 1", "assert sum_of_digits(11111) == 5", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1234567890) == 45", "assert sum_of_digits(1000000000) == 1", "assert sum_of_digits(2147483647) == 46", "assert sum_of_digits(999999999) == 81", "assert sum_of_digits(2020202020) == 10", "assert sum_of_digits(13579) == 25"], "challenge_test_list": []}
{"text": "Write a python function to compute the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "303_630af3fe-4efc-44a4-bd27-9be7df6d37a5", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(56, 98) == 14", "assert gcd(0, 5) == 5", "assert gcd(5, 0) == 5", "assert gcd(0, 0) == 0", "assert gcd(1, 1) == 1", "assert gcd(123456, 789012) == 12", "assert gcd(1000000, 500000) == 500000", "assert gcd(7, 3) == 1", "assert gcd(36, 60) == 12", "assert gcd(20, 30) == 10", "assert gcd(17, 19) == 1", "assert gcd(270, 192) == 6", "assert gcd(81, 27) == 27"], "challenge_test_list": []}
{"text": "Write a python function to compute the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "303_e64a9cc4-9dc0-4aaa-adb8-f3340e8a6888", "test_setup_code": "", "test_list": ["assert lcm(2, 3) == 6", "assert lcm(4, 6) == 12", "assert lcm(15, 20) == 60", "assert lcm(8, 12) == 24", "assert lcm(7, 13) == 91", "assert lcm(0, 5) == 0", "assert lcm(5, 0) == 0", "assert lcm(0, 0) == 0", "assert lcm(1, 1) == 1", "assert lcm(1, 5) == 5", "assert lcm(5, 1) == 5", "assert lcm(-2, 3) == 6", "assert lcm(2, -3) == 6", "assert lcm(-2, -3) == 6", "assert lcm(17, 23) == 391"], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of a tuple.", "code": "def reverse_tuple(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "307_1d462002-4724-4bd9-9ef0-57dad9b8b998", "test_setup_code": "", "test_list": ["assert reverse_tuple((1, 2, 3)) == (3, 2, 1)", "assert reverse_tuple(('a', 'b', 'c', 'd')) == ('d', 'c', 'b', 'a')", "assert reverse_tuple(()) == ()", "assert reverse_tuple((True, False, True)) == (True, False, True)"], "challenge_test_list": []}
{"text": "Write a function to sum all the elements of a tuple.", "code": "def sum_tuple_elements(t: tuple) -> int:\n    return sum(t)", "task_id": "307_1cebaf80-78d7-43f9-b46a-7f41c1b0ce05", "test_setup_code": "", "test_list": ["assert sum_tuple_elements((1, 2, 3)) == 6", "assert sum_tuple_elements((0, 0, 0)) == 0", "assert sum_tuple_elements((-1, -2, -3)) == -6", "assert sum_tuple_elements((100, 200, 300)) == 600", "assert sum_tuple_elements((1,)) == 1", "assert sum_tuple_elements(()) == 0", "assert sum_tuple_elements((1, -1, 1, -1)) == 0", "assert sum_tuple_elements((10, 20, 30, 40, 50)) == 150", "assert sum_tuple_elements((-10, 20, -30, 40, -50)) == -30", "assert sum_tuple_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 55", "assert sum_tuple_elements((999, 1)) == 1000", "assert sum_tuple_elements((1, 2, 3, 4, 5, -15)) == 0", "assert sum_tuple_elements((1, 2, 3, 4, 5, 0)) == 15", "assert sum_tuple_elements((1000, -1000, 2000, -2000)) == 0", "assert sum_tuple_elements((1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)) == 20"], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a list.", "code": "def tuple_to_list(t: tuple) -> list:\n    return list(t)", "task_id": "307_0624e1e0-8550-43ad-8f00-dc35091c4cd1", "test_setup_code": "", "test_list": ["assert tuple_to_list((1, 2, 3)) == [1, 2, 3]", "assert tuple_to_list(('a', 'b', 'c')) == ['a', 'b', 'c']", "assert tuple_to_list((True, False, True)) == [True, False, True]", "assert tuple_to_list((1.1, 2.2, 3.3)) == [1.1, 2.2, 3.3]", "assert tuple_to_list(()) == []", "assert tuple_to_list((None,)) == [None]", "assert tuple_to_list((1, 'a', 3.5, True)) == [1, 'a', 3.5, True]", "assert tuple_to_list((('a', 'b'), ('c', 'd'))) == [('a', 'b'), ('c', 'd')]", "assert tuple_to_list(((1, 2), (3, 4))) == [(1, 2), (3, 4)]", "assert tuple_to_list((1, [2, 3], (4, 5))) == [1, [2, 3], (4, 5)]", "assert tuple_to_list((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]", "assert tuple_to_list((0, -1, -2, -3)) == [0, -1, -2, -3]", "assert tuple_to_list((1, 2, 2, 3, 3, 3)) == [1, 2, 2, 3, 3, 3]", "assert tuple_to_list((1,)) == [1]", "assert tuple_to_list((1, 'a', 3.5, True, None, (1, 2), [3, 4])) == [1, 'a', 3.5, True, None, (1, 2), [3, 4]]"], "challenge_test_list": []}
{"text": "Write a function to convert a list to a tuple.", "code": "def list_to_tuple(lst: list) -> tuple:\n    return tuple(lst)", "task_id": "307_5399c261-5d3f-4046-814c-cbde681ea3f1", "test_setup_code": "", "test_list": ["assert list_to_tuple([1, 2, 3]) == (1, 2, 3)", "assert list_to_tuple([]) == ()", "assert list_to_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')", "assert list_to_tuple([True, False, True]) == (True, False, True)", "assert list_to_tuple([None, None, None]) == (None, None, None)", "assert list_to_tuple([1.1, 2.2, 3.3]) == (1.1, 2.2, 3.3)", "assert list_to_tuple([1, 'a', True, None]) == (1, 'a', True, None)", "assert list_to_tuple([[], [1, 2], [3, 4]]) == ([], [1, 2], [3, 4])", "assert list_to_tuple([{'a': 1}, {'b': 2}]) == ({'a': 1}, {'b': 2})", "assert list_to_tuple([(1, 2), (3, 4)]) == ((1, 2), (3, 4))", "assert list_to_tuple([1]) == (1,)", "assert list_to_tuple(['single']) == ('single',)", "assert list_to_tuple([1, [2, 3], (4, 5)]) == (1, [2, 3], (4, 5))", "assert list_to_tuple(['mixed', 1, 2.2, True, None]) == ('mixed', 1, 2.2, True, None)", "assert list_to_tuple([complex(1, 2), complex(3, 4)]) == (complex(1, 2), complex(3, 4))"], "challenge_test_list": []}
{"text": "Write a function to check if an element is present in a tuple.", "code": "def tuple_contains(t: tuple, element) -> bool:\n    return element in t", "task_id": "307_49762d64-1b31-42a8-a65f-e6a8bf03c956", "test_setup_code": "", "test_list": ["assert tuple_contains((1, 2, 3, 4, 5), 3) == True", "assert tuple_contains(('a', 'b', 'c'), 'd') == False", "assert tuple_contains((), 'x') == False", "assert tuple_contains((None, True, False), None) == True"], "challenge_test_list": []}
{"text": "Write a function to find the index of an element in a tuple.", "code": "def tuple_index(t: tuple, element) -> int:\n    return t.index(element)", "task_id": "307_549ea0c7-e1a1-496b-b8ab-202da7c4362f", "test_setup_code": "", "test_list": ["assert tuple_index((1, 2, 3, 4, 5), 3) == 2", "assert tuple_index(('a', 'b', 'c', 'd'), 'b') == 1", "assert tuple_index((10, 20, 30, 40), 40) == 3", "assert tuple_index((True, False, True), False) == 1", "assert tuple_index((None, 'test', 3.14), 'test') == 1", "assert tuple_index((1, 2, 3, 4, 5), 1) == 0", "assert tuple_index(('apple', 'banana', 'cherry'), 'cherry') == 2", "assert tuple_index((0, 0, 0, 0), 0) == 0", "assert tuple_index((1,), 1) == 0", "assert tuple_index((1, 2, 3, 4, 5), 5) == 4", "assert tuple_index((1, 2, 3, 4, 5), 6) == -1", "assert tuple_index((1, 2, 3, 4, 5), 2) == 1", "assert tuple_index(('a', 'b', 'c', 'd', 'e'), 'e') == 4", "assert tuple_index((1, 2, 3, 4, 5, 3), 3) == 2", "assert tuple_index((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the length of a tuple.", "code": "def tuple_length(t: tuple) -> int:\n    return len(t)", "task_id": "307_f0114029-c427-4d14-ac1f-c86350340363", "test_setup_code": "", "test_list": ["assert tuple_length(()) == 0", "assert tuple_length((1,)) == 1", "assert tuple_length((1, 2, 3)) == 3", "assert tuple_length((None,)) == 1", "assert tuple_length((1, 2, 3, 4, 5)) == 5", "assert tuple_length(('a', 'b', 'c')) == 3", "assert tuple_length((1, 2, (3, 4))) == 3", "assert tuple_length((1, 'a', None, 3.14)) == 4", "assert tuple_length((True, False, True)) == 3", "assert tuple_length(((1, 2), (3, 4), (5, 6))) == 3", "assert tuple_length(([], {}, set())) == 3", "assert tuple_length((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert tuple_length((1, (2, (3, (4, (5,)))))) == 2", "assert tuple_length((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)) == 20", "assert tuple_length(((1,), (2,), (3,), (4,), (5,))) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a tuple.", "code": "def tuple_max(t: tuple) -> int:\n    return max(t)", "task_id": "307_34af1a85-fcc9-45ed-a450-a2201befea49", "test_setup_code": "", "test_list": ["assert tuple_max((1, 2, 3, 4, 5)) == 5", "assert tuple_max((5, 4, 3, 2, 1)) == 5", "assert tuple_max((0, -1, -2, -3, -4)) == 0", "assert tuple_max((-1, -2, -3, -4, -5)) == -1", "assert tuple_max((100, 200, 300, 400, 500)) == 500", "assert tuple_max((1, 1, 1, 1, 1)) == 1", "assert tuple_max((1, 2, 2, 3, 3)) == 3", "assert tuple_max((-10, -20, -30, -40, -50)) == -10", "assert tuple_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10", "assert tuple_max((1000, 2000, 3000, 4000, 5000)) == 5000", "assert tuple_max((0, 0, 0, 0, 0)) == 0", "assert tuple_max((1, 2, 3, 4, 5, 6, 7, 8, 9, 0)) == 9", "assert tuple_max((1, 3, 5, 7, 9, 2, 4, 6, 8, 0)) == 9", "assert tuple_max((1, 2, 3, 4, 5, 0, -1, -2, -3, -4)) == 5", "assert tuple_max((100, 99, 98, 97, 96, 95, 94, 93, 92, 91)) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a tuple.", "code": "def tuple_min(t: tuple) -> int:\n    return min(t)", "task_id": "307_4ce7eda6-43ef-490f-9679-d8f4055bf411", "test_setup_code": "", "test_list": ["assert tuple_min((1, 2, 3, 4, 5)) == 1", "assert tuple_min((5, 4, 3, 2, 1)) == 1", "assert tuple_min((0, -1, -2, -3, -4)) == -4", "assert tuple_min((100, 200, 300, 400, 500)) == 100", "assert tuple_min((-100, -200, -300, -400, -500)) == -500", "assert tuple_min((1, 1, 1, 1, 1)) == 1", "assert tuple_min((5, 5, 5, 5, 5)) == 5", "assert tuple_min((0, 0, 0, 0, 0)) == 0", "assert tuple_min((1, 2, 3, -1, -2, -3)) == -3", "assert tuple_min((1000, 2000, 3000, 4000, 5000)) == 1000", "assert tuple_min((1,)) == 1", "assert tuple_min((-1,)) == -1", "assert tuple_min((0,)) == 0", "assert tuple_min((1, 0, -1, 0, 1)) == -1", "assert tuple_min((10, 20, 30, 40, 50, 60, 70, 80, 90, 100)) == 10"], "challenge_test_list": []}
{"text": "Write a function to concatenate two tuples.", "code": "def tuple_concat(t1: tuple, t2: tuple) -> tuple:\n    return t1 + t2", "task_id": "307_7f5cc22c-d2c9-4a76-a74f-b5ba7cc8fcfd", "test_setup_code": "", "test_list": ["assert tuple_concat((1, 2), (3, 4)) == (1, 2, 3, 4)", "assert tuple_concat((), ()) == ()", "assert tuple_concat(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')", "assert tuple_concat((1,), (2,)) == (1, 2)", "assert tuple_concat((1, 2, 3), ()) == (1, 2, 3)", "assert tuple_concat((), (4, 5, 6)) == (4, 5, 6)", "assert tuple_concat((None,), (None,)) == (None, None)", "assert tuple_concat((True, False), (False, True)) == (True, False, False, True)", "assert tuple_concat((1.1, 2.2), (3.3, 4.4)) == (1.1, 2.2, 3.3, 4.4)", "assert tuple_concat((1, 'a'), (2, 'b')) == (1, 'a', 2, 'b')", "assert tuple_concat((1, 2, 3), (4, 5, 6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)", "assert tuple_concat((1, 2, 3, 4, 5), (6, 7, 8)) == (1, 2, 3, 4, 5, 6, 7, 8)", "assert tuple_concat((1, 2), ('a', 'b', 'c')) == (1, 2, 'a', 'b', 'c')", "assert tuple_concat(('x', 'y', 'z'), ('a', 'b', 'c')) == ('x', 'y', 'z', 'a', 'b', 'c')", "assert tuple_concat((1, 2, 3), (3, 2, 1)) == (1, 2, 3, 3, 2, 1)"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words starting with any vowel.", "code": "import re\ndef find_words_with_vowel(words):\n    for w in words:\n        m = re.match(r'([aeiouAEIOU]\\w+)\\W([aeiouAEIOU]\\w+)', w)\n        if m:\n            return m.groups()", "task_id": "305_daa049e7-04d2-4f1d-951c-a90184ad7ab4", "test_setup_code": "", "test_list": ["assert find_words_with_vowel(['apple orange', 'banana grape']) == ('apple', 'orange')", "assert find_words_with_vowel(['umbrella elephant', 'iguana octopus']) == ('umbrella', 'elephant')", "assert find_words_with_vowel(['cat dog', 'fish bird']) == None", "assert find_words_with_vowel(['apple orange', 'umbrella elephant']) == ('apple', 'orange')", "assert find_words_with_vowel(['Apple Orange', 'Banana Grape']) == ('Apple', 'Orange')", "assert find_words_with_vowel(['Umbrella Elephant', 'Iguana Octopus']) == ('Umbrella', 'Elephant')", "assert find_words_with_vowel(['cat dog', 'fish bird', 'iguana octopus']) == ('iguana', 'octopus')", "assert find_words_with_vowel(['apple', 'orange']) == None", "assert find_words_with_vowel(['apple orange', 'banana']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'banana grape', 'iguana octopus']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'iguana octopus']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'iguana']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'umbrella']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'umbrella elephant', 'iguana octopus']) == ('apple', 'orange')", "assert find_words_with_vowel(['apple orange', 'umbrella elephant', 'iguana']) == ('apple', 'orange')"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a digit.", "code": "import re\ndef find_words_with_digit(words):\n    for w in words:\n        m = re.match(r'(\\w*\\d\\w*)\\W(\\w*\\d\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_4ed6de7e-dad2-4923-9a5c-aa9552532f56", "test_setup_code": "", "test_list": ["assert find_words_with_digit(['hello1 world2']) == ('hello1', 'world2')", "assert find_words_with_digit(['abc123 def456']) == ('abc123', 'def456')", "assert find_words_with_digit(['no1digit here']) == None", "assert find_words_with_digit(['123abc 456def']) == ('123abc', '456def')", "assert find_words_with_digit(['one1word two2words']) == ('one1word', 'two2words')", "assert find_words_with_digit(['digit1 and digit2']) == ('digit1', 'digit2')", "assert find_words_with_digit(['1number 2numbers']) == ('1number', '2numbers')", "assert find_words_with_digit(['word1 with2digit']) == ('word1', 'with2digit')", "assert find_words_with_digit(['no digits here']) == None", "assert find_words_with_digit(['123 456']) == ('123', '456')", "assert find_words_with_digit(['digit1, digit2']) == ('digit1', 'digit2')", "assert find_words_with_digit(['word1.word2']) == ('word1', 'word2')", "assert find_words_with_digit(['word1-word2']) == ('word1', 'word2')", "assert find_words_with_digit(['word1_word2']) == ('word1', 'word2')", "assert find_words_with_digit(['word1word2']) == None"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that have a specific length.", "code": "import re\ndef find_words_with_length(words, length):\n    for w in words:\n        m = re.match(r'(\\b\\w{' + str(length) + '}\\b)\\W(\\b\\w{' + str(length) + '}\\b)', w)\n        if m:\n            return m.groups()", "task_id": "305_4c53b340-b37a-4bc3-9a76-2e68469f9b6b", "test_setup_code": "", "test_list": ["assert find_words_with_length(['hello world', 'test case', 'python code'], 5) == ('hello', 'world')", "assert find_words_with_length(['short long', 'tiny huge', 'small big'], 4) == ('tiny', 'huge')", "assert find_words_with_length(['one two', 'three four', 'five six'], 3) == ('one', 'two')", "assert find_words_with_length(['apple banana', 'grape orange', 'kiwi lemon'], 5) == ('apple', 'grape')", "assert find_words_with_length(['cat dog', 'fish bird', 'lion tiger'], 3) == ('cat', 'dog')", "assert find_words_with_length(['', 'empty string', 'no match'], 4) == None", "assert find_words_with_length(['same same', 'match match', 'equal equal'], 4) == ('same', 'same')", "assert find_words_with_length(['one two three', 'four five six', 'seven eight nine'], 5) == None", "assert find_words_with_length(['a b', 'c d', 'e f'], 1) == ('a', 'b')", "assert find_words_with_length(['longer words', 'shorter words', 'equal length'], 6) == ('longer', 'words')", "assert find_words_with_length(['mix match', 'random words', 'varied lengths'], 5) == ('random', 'words')", "assert find_words_with_length(['no match here', 'none at all', 'still nothing'], 4) == None", "assert find_words_with_length(['one two', 'three four', 'five six'], 4) == None", "assert find_words_with_length(['one two', 'three four', 'five six'], 5) == ('three', 'four')", "assert find_words_with_length(['first second', 'third fourth', 'fifth sixth'], 6) == ('second', 'third')"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words starting with any consonant.", "code": "import re\ndef find_words_with_consonant(words):\n    for w in words:\n        m = re.match(r'([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\\w+)\\W([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\\w+)', w)\n        if m:\n            return m.groups()", "task_id": "305_decf9106-52cc-45c8-bf2a-fad31b1c5e5c", "test_setup_code": "", "test_list": ["assert find_words_with_consonant(['bat', 'cat', 'dog']) == ('bat', 'cat')", "assert find_words_with_consonant(['apple', 'banana', 'cherry']) == ('banana', 'cherry')", "assert find_words_with_consonant(['elephant', 'iguana', 'octopus']) == None", "assert find_words_with_consonant(['tree', 'bush', 'flower']) == ('tree', 'bush')", "assert find_words_with_consonant(['xylophone', 'yarn', 'zebra']) == ('xylophone', 'yarn')", "assert find_words_with_consonant(['giraffe', 'hippo', 'kangaroo']) == ('giraffe', 'hippo')", "assert find_words_with_consonant(['umbrella', 'eagle', 'owl']) == None", "assert find_words_with_consonant(['frog', 'fish', 'fox']) == ('frog', 'fish')", "assert find_words_with_consonant(['lion', 'tiger', 'bear']) == ('lion', 'tiger')", "assert find_words_with_consonant(['ant', 'bee', 'cat']) == ('bee', 'cat')", "assert find_words_with_consonant(['dog', 'duck', 'dolphin']) == ('dog', 'duck')", "assert find_words_with_consonant(['whale', 'shark', 'dolphin']) == ('whale', 'shark')", "assert find_words_with_consonant(['parrot', 'penguin', 'pigeon']) == ('parrot', 'penguin')", "assert find_words_with_consonant(['mouse', 'rat', 'bat']) == ('mouse', 'rat')", "assert find_words_with_consonant(['apple', 'orange', 'grape']) == None"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a special character.", "code": "import re\ndef find_words_with_special_char(words):\n    for w in words:\n        m = re.match(r'(\\w*[^\\w\\s]\\w*)\\W(\\w*[^\\w\\s]\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_ec486714-9709-4a19-99ab-e29c906d8f85", "test_setup_code": "", "test_list": ["assert find_words_with_special_char(['hello@world', 'test#case']) == ('hello@world', 'test#case')", "assert find_words_with_special_char(['noSpecialChar', 'anotherOne']) == None", "assert find_words_with_special_char(['one@word', 'two#words']) == ('one@word', 'two#words')", "assert find_words_with_special_char(['special!char', 'another$special']) == ('special!char', 'another$special')", "assert find_words_with_special_char(['noSpecial', 'stillNoSpecial']) == None", "assert find_words_with_special_char(['@start', 'end!']) == ('@start', 'end!')", "assert find_words_with_special_char(['middle@char', 'char#middle']) == ('middle@char', 'char#middle')", "assert find_words_with_special_char(['special@char', 'special@char']) == ('special@char', 'special@char')", "assert find_words_with_special_char(['special@char', 'noSpecial']) == None", "assert find_words_with_special_char(['noSpecial', 'special@char']) == None", "assert find_words_with_special_char(['special@char', 'another@special']) == ('special@char', 'another@special')", "assert find_words_with_special_char(['special@char', 'special@char']) == ('special@char', 'special@char')", "assert find_words_with_special_char(['special@char1', 'special@char2']) == ('special@char1', 'special@char2')", "assert find_words_with_special_char(['special@char!', 'special@char#']) == ('special@char!', 'special@char#')", "assert find_words_with_special_char(['special@char', 'special@char', 'another@special']) == ('special@char', 'special@char')"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain an uppercase letter.", "code": "import re\ndef find_words_with_uppercase(words):\n    for w in words:\n        m = re.match(r'(\\w*[A-Z]\\w*)\\W(\\w*[A-Z]\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_62d7ddea-1045-4ccd-b104-dc2198aaaf2b", "test_setup_code": "", "test_list": ["assert find_words_with_uppercase(['Hello', 'world']) == ('Hello', 'world')", "assert find_words_with_uppercase(['hello', 'World']) == ('hello', 'World')", "assert find_words_with_uppercase(['HELLO', 'WORLD']) == ('HELLO', 'WORLD')", "assert find_words_with_uppercase(['hello', 'world']) == None", "assert find_words_with_uppercase(['HelloWorld']) == None", "assert find_words_with_uppercase(['Hello', 'World', 'Python']) == ('Hello', 'World')", "assert find_words_with_uppercase(['Python', 'is', 'Fun']) == ('Python', 'is')", "assert find_words_with_uppercase(['This', 'is', 'a', 'Test']) == ('This', 'is')", "assert find_words_with_uppercase(['Test', 'case', 'with', 'Uppercase']) == ('Test', 'case')", "assert find_words_with_uppercase(['No', 'Uppercase', 'Here']) == ('No', 'Uppercase')", "assert find_words_with_uppercase(['SingleUppercase']) == None", "assert find_words_with_uppercase(['']) == None", "assert find_words_with_uppercase(['a', 'B']) == ('a', 'B')", "assert find_words_with_uppercase(['A', 'b']) == ('A', 'b')", "assert find_words_with_uppercase(['a', 'b', 'C', 'd']) == ('a', 'b')"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a repeated character.", "code": "import re\ndef find_words_with_repeated_char(words):\n    for w in words:\n        m = re.match(r'(\\w*(\\w)\\2\\w*)\\W(\\w*(\\w)\\4\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_ed388b47-73a3-48a2-945f-34098616cadf", "test_setup_code": "", "test_list": ["assert find_words_with_repeated_char(['hello', 'book', 'apple']) == ('book', 'apple')", "assert find_words_with_repeated_char(['test', 'moon', 'soon']) == ('moon', 'soon')", "assert find_words_with_repeated_char(['noon', 'good', 'food']) == ('noon', 'good')", "assert find_words_with_repeated_char(['tree', 'free', 'bee']) == ('tree', 'free')", "assert find_words_with_repeated_char(['loop', 'pool', 'cool']) == ('loop', 'pool')", "assert find_words_with_repeated_char(['aabb', 'ccdd', 'eeff']) == ('aabb', 'ccdd')", "assert find_words_with_repeated_char(['a', 'b', 'c']) == None", "assert find_words_with_repeated_char(['aa', 'bb', 'cc']) == ('aa', 'bb')", "assert find_words_with_repeated_char(['abc', 'def', 'ghi']) == None", "assert find_words_with_repeated_char(['aabbcc', 'ddeeff', 'gghhii']) == ('aabbcc', 'ddeeff')", "assert find_words_with_repeated_char(['repeat', 'letter', 'better']) == ('letter', 'better')", "assert find_words_with_repeated_char(['mississippi', 'tennessee', 'alabama']) == ('mississippi', 'tennessee')", "assert find_words_with_repeated_char(['bookkeeper', 'committee', 'successful']) == ('bookkeeper', 'committee')", "assert find_words_with_repeated_char(['balloon', 'banana', 'apple']) == ('balloon', 'banana')", "assert find_words_with_repeated_char(['programming', 'debugging', 'testing']) == ('programming', 'debugging')"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that are palindromes.", "code": "import re\ndef find_words_with_palindrome(words):\n    for w in words:\n        m = re.match(r'((\\w)\\w*\\2)\\W((\\w)\\w*\\4)', w)\n        if m:\n            return m.groups()", "task_id": "305_2f16b54b-c4a6-46ec-9551-39eb8fc5d02f", "test_setup_code": "", "test_list": ["assert find_words_with_palindrome(['madam', 'racecar', 'level', 'deified']) == ('madam', 'racecar')", "assert find_words_with_palindrome(['hello', 'world', 'python', 'noon']) == ('noon',)", "assert find_words_with_palindrome(['abba', 'civic', 'radar', 'refer']) == ('abba', 'civic')", "assert find_words_with_palindrome(['apple', 'banana', 'cherry', 'date']) == None"], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a specific substring.", "code": "import re\ndef find_words_with_substring(words, substring):\n    for w in words:\n        m = re.match(r'(\\w*' + re.escape(substring) + '\\w*)\\W(\\w*' + re.escape(substring) + '\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_7fcee440-1ac3-45f8-8165-8f2e0687c57f", "test_setup_code": "", "test_list": ["assert find_words_with_substring(['hello', 'world', 'helloworld'], 'hello') == ('hello', 'helloworld')", "assert find_words_with_substring(['test', 'testing', 'contest'], 'test') == ('test', 'testing')", "assert find_words_with_substring(['apple', 'banana', 'grape'], 'ap') == ('apple', 'grape')", "assert find_words_with_substring(['cat', 'dog', 'catalog'], 'cat') == ('cat', 'catalog')", "assert find_words_with_substring(['sun', 'moon', 'sunshine'], 'sun') == ('sun', 'sunshine')", "assert find_words_with_substring(['alpha', 'beta', 'alphabet'], 'alpha') == ('alpha', 'alphabet')", "assert find_words_with_substring(['blue', 'blues', 'red'], 'blue') == ('blue', 'blues')", "assert find_words_with_substring(['one', 'two', 'three'], 'four') == None", "assert find_words_with_substring(['jump', 'jumps', 'jumper'], 'jump') == ('jump', 'jumps')", "assert find_words_with_substring(['quick', 'brown', 'fox'], 'qu') == ('quick', 'quick')", "assert find_words_with_substring(['a', 'b', 'c'], 'a') == None", "assert find_words_with_substring(['match', 'matching', 'matched'], 'match') == ('match', 'matching')", "assert find_words_with_substring(['repeat', 'repeated', 'repeating'], 'repeat') == ('repeat', 'repeated')", "assert find_words_with_substring(['find', 'finder', 'finding'], 'find') == ('find', 'finder')", "assert find_words_with_substring(['substring', 'sub', 'string'], 'sub') == ('substring', 'sub')"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of left rotations on subarrays.", "code": "def find_element_after_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == right:\n                index = left\n            else:\n                index += 1\n    return arr[index]", "task_id": "304_a7bcdae9-65c3-4421-a2a2-43305331535f", "test_setup_code": "", "test_list": ["assert find_element_after_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 2) == 4", "assert find_element_after_rotations([10, 20, 30, 40, 50], [(0, 4)], 1, 0) == 20", "assert find_element_after_rotations([5, 6, 7, 8, 9], [(0, 1), (1, 2), (2, 3)], 3, 1) == 8", "assert find_element_after_rotations([100, 200, 300, 400], [(0, 1), (2, 3)], 2, 3) == 300"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of reverse rotations on subarrays.", "code": "def find_element_after_reverse_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            index = right - (index - left)\n    return arr[index]", "task_id": "304_14fef9fd-fbda-40a1-95d2-d09200131cd9", "test_setup_code": "", "test_list": ["assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 0) == 5", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 4) == 1", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(1, 3)], 1, 2) == 3", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(1, 3)], 1, 1) == 4", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(1, 3)], 1, 3) == 2", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 2) == 2", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 1) == 4", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 3) == 3", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 0) == 5", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 4) == 1", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 0) == 2", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 1) == 1", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 2) == 4", "assert find_element_after_reverse_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 3) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of circular rotations on subarrays.", "code": "def find_element_after_circular_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            index = (index + 1) % (right - left + 1) + left\n    return arr[index]", "task_id": "304_c6827f5d-8462-40e1-a0fa-cadacf710503", "test_setup_code": "", "test_list": ["assert find_element_after_circular_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 3", "assert find_element_after_circular_rotations([10, 20, 30, 40, 50], [(0, 4)], 1, 3) == 50", "assert find_element_after_circular_rotations([5, 10, 15, 20, 25], [(0, 1), (1, 3)], 2, 2) == 20", "assert find_element_after_circular_rotations([7, 14, 21, 28, 35], [(0, 4), (2, 4)], 1, 0) == 14"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of mixed left and right rotations on subarrays.", "code": "def find_element_after_mixed_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right, direction = ranges[i]\n        if left <= index <= right:\n            if direction == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_7f19abb9-9ffc-49ef-ad42-31d0276bc9f7", "test_setup_code": "", "test_list": ["assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'left')], 1, 2) == 4", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'right')], 1, 2) == 2", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 2, 'left'), (2, 4, 'right')], 2, 1) == 3", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 2, 'right'), (2, 4, 'left')], 2, 1) == 2", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 1, 'left'), (1, 3, 'right'), (3, 4, 'left')], 3, 3) == 5", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 1, 'right'), (1, 3, 'left'), (3, 4, 'right')], 3, 3) == 4", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'left')], 1, 4) == 1", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'right')], 1, 0) == 5", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 2, 'left'), (2, 4, 'right')], 2, 0) == 2", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 2, 'right'), (2, 4, 'left')], 2, 0) == 1", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 1, 'left'), (1, 3, 'right'), (3, 4, 'left')], 3, 0) == 2", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 1, 'right'), (1, 3, 'left'), (3, 4, 'right')], 3, 0) == 1", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'left')], 1, 1) == 2", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 4, 'right')], 1, 1) == 1", "assert find_element_after_mixed_rotations([1, 2, 3, 4, 5], [(0, 2, 'left'), (2, 4, 'right')], 2, 2) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of double rotations (left then right) on subarrays.", "code": "def find_element_after_double_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == right:\n                index = left\n            else:\n                index += 1\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]", "task_id": "304_4575db91-1c51-40a5-b32c-227440c671bd", "test_setup_code": "", "test_list": ["assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 2)], 1, 1) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 2)], 1, 2) == 1", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 4", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 2", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 0) == 2", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 4) == 1", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 2) == 4", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 3) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 1) == 1", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 3)], 2, 0) == 2", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 4)], 0, 2) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 4)], 2, 4) == 3", "assert find_element_after_double_rotations([1, 2, 3, 4, 5], [(0, 1), (2, 4)], 2, 3) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of random rotations on subarrays.", "code": "import random\n\ndef find_element_after_random_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if random.choice(['left', 'right']) == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_4384d786-0eea-48c9-b16f-baa1c920323d", "test_setup_code": "", "test_list": ["assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 0, 2) == 3", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 1), (1, 3)], 2, 1) == 2", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 1), (1, 3)], 2, 0) == 1", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 3) == 4", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 4) == 5", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 0) == 1", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 4) == 5", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 1) == 2", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 3) == 4", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 2) == 3", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 0) == 1", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 1) == 2", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 2) == 3", "assert find_element_after_random_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 3) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of partial rotations on subarrays.", "code": "def find_element_after_partial_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = (index + (right - left) // 2) % (right - left + 1) + left\n            else:\n                index -= 1\n    return arr[index]", "task_id": "304_8223a359-4c65-4cc4-9366-53d27e575ac9", "test_setup_code": "", "test_list": ["assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2)], 1, 1) == 1", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 2) == 2", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 3) == 4", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 0) == 3", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 4) == 5", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 0) == 1", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 2", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 1, 1) == 1", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 1, 2) == 3", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 1, 3) == 4", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 1, 0) == 1", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 0, 2) == 3", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 0, 1) == 2", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 0, 3) == 4", "assert find_element_after_partial_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 0, 0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of alternating left and right rotations on subarrays.", "code": "def find_element_after_alternating_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if i % 2 == 0:\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_4e0e9f98-8e6e-42ba-8cfd-bfddad39207d", "test_setup_code": "", "test_list": ["assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 1) == 3", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 2), (1, 3)], 2, 0) == 2", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 1), (1, 4)], 2, 4) == 3", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2) == 3", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 0) == 2", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 4) == 1", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (0, 4)], 2, 0) == 1", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (0, 4)], 2, 4) == 5", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (0, 4)], 2, 2) == 3", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 1) == 4", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 3) == 2", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 2) == 3", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 4), (1, 3)], 2, 0) == 2", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 0), (1, 1)], 2, 0) == 1", "assert find_element_after_alternating_rotations([1, 2, 3, 4, 5], [(0, 0), (1, 1)], 2, 1) == 2"], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of custom rotations on subarrays, where the rotation direction is determined by a custom function.", "code": "def find_element_after_custom_rotations(arr, ranges, rotations, index, custom_func):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            direction = custom_func(left, right, index)\n            if direction == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_62d8d184-ed11-4b43-81f0-d6caf238027c", "test_setup_code": "", "test_list": ["assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2, lambda l, r, i: 'left') == 4", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 2, lambda l, r, i: 'right') == 2", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 2, lambda l, r, i: 'left') == 5", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 2, lambda l, r, i: 'right') == 1", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(1, 3)], 1, 3, lambda l, r, i: 'left') == 2", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(1, 3)], 1, 1, lambda l, r, i: 'right') == 4", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 1), (3, 4)], 2, 0, lambda l, r, i: 'left') == 2", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 1), (3, 4)], 2, 4, lambda l, r, i: 'right') == 3", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 0, lambda l, r, i: 'left') == 3", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 4, lambda l, r, i: 'right') == 2", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 0, lambda l, r, i: 'left') == 2", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 1, 4, lambda l, r, i: 'right') == 4", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 2, lambda l, r, i: 'left') == 1", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 4)], 3, 2, lambda l, r, i: 'right') == 5", "assert find_element_after_custom_rotations([1, 2, 3, 4, 5], [(0, 2), (2, 4)], 2, 3, lambda l, r, i: 'left') == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of two numbers.", "code": "def minimum(a: int, b: int) -> int:\n    if a <= b:\n        return a\n    else:\n        return b", "task_id": "309_83fe4a95-5d02-42ae-8157-1571cff403d0", "test_setup_code": "", "test_list": ["assert minimum(1, 2) == 1", "assert minimum(2, 1) == 1", "assert minimum(0, 0) == 0", "assert minimum(-1, 1) == -1", "assert minimum(1, -1) == -1", "assert minimum(-1, -1) == -1", "assert minimum(100, 1000) == 100", "assert minimum(1000, 100) == 100", "assert minimum(-100, -1000) == -1000", "assert minimum(-1000, -100) == -1000", "assert minimum(999999, 1000000) == 999999", "assert minimum(1000000, 999999) == 999999", "assert minimum(0, 100) == 0", "assert minimum(100, 0) == 0", "assert minimum(0, -100) == -100"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of three numbers.", "code": "def maximum_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "309_ddfb8b68-b079-4d5c-ba92-c1755f834db3", "test_setup_code": "", "test_list": ["assert maximum_of_three(1, 2, 3) == 3", "assert maximum_of_three(10, 5, 7) == 10", "assert maximum_of_three(-1, -2, -3) == -1", "assert maximum_of_three(0, 0, 0) == 0", "assert maximum_of_three(100, 200, 300) == 300", "assert maximum_of_three(5, 5, 5) == 5", "assert maximum_of_three(-10, 0, 10) == 10", "assert maximum_of_three(3, 3, 2) == 3", "assert maximum_of_three(2, 3, 3) == 3", "assert maximum_of_three(3, 2, 3) == 3", "assert maximum_of_three(-5, -10, -15) == -5", "assert maximum_of_three(1, 100, 50) == 100", "assert maximum_of_three(1000, 1000, 999) == 1000", "assert maximum_of_three(0, -1, 1) == 1", "assert maximum_of_three(2147483647, -2147483648, 0) == 2147483647"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of three numbers.", "code": "def minimum_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "309_8885a375-efd1-4b06-b5d8-6f0377a9044a", "test_setup_code": "", "test_list": ["assert minimum_of_three(1, 2, 3) == 1", "assert minimum_of_three(3, 2, 1) == 1", "assert minimum_of_three(2, 1, 3) == 1", "assert minimum_of_three(5, 5, 10) == 5", "assert minimum_of_three(10, 5, 5) == 5", "assert minimum_of_three(5, 10, 5) == 5", "assert minimum_of_three(7, 7, 7) == 7", "assert minimum_of_three(-1, 0, 1) == -1", "assert minimum_of_three(0, -1, 1) == -1", "assert minimum_of_three(0, 1, -1) == -1", "assert minimum_of_three(-5, -10, -15) == -15", "assert minimum_of_three(0, 0, 0) == 0", "assert minimum_of_three(-100, 100, 0) == -100", "assert minimum_of_three(999, 1000, 998) == 998", "assert minimum_of_three(2**10, 2**9, 2**11) == 2**9"], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def absolute_difference(a: int, b: int) -> int:\n    return abs(a - b)", "task_id": "309_d48e0ce1-9e95-4e4b-83de-1f2b0b152422", "test_setup_code": "", "test_list": ["assert absolute_difference(5, 3) == 2", "assert absolute_difference(3, 5) == 2", "assert absolute_difference(0, 0) == 0", "assert absolute_difference(-5, -3) == 2", "assert absolute_difference(-3, -5) == 2", "assert absolute_difference(100, 50) == 50", "assert absolute_difference(50, 100) == 50", "assert absolute_difference(0, 100) == 100", "assert absolute_difference(100, 0) == 100", "assert absolute_difference(-100, 100) == 200", "assert absolute_difference(100, -100) == 200", "assert absolute_difference(-100, -50) == 50", "assert absolute_difference(-50, -100) == 50", "assert absolute_difference(1, 1) == 0", "assert absolute_difference(999999, 1) == 999998"], "challenge_test_list": []}
{"text": "Write a python function to check if a number is odd.", "code": "def is_odd(n: int) -> bool:\n    return n % 2 != 0", "task_id": "309_9aef8ccd-699a-43c4-942e-6d724b6ce47b", "test_setup_code": "", "test_list": ["assert is_odd(1) == True", "assert is_odd(2) == False", "assert is_odd(0) == False", "assert is_odd(-1) == True", "assert is_odd(-2) == False", "assert is_odd(999999) == True", "assert is_odd(1000000) == False", "assert is_odd(2147483647) == True", "assert is_odd(-2147483648) == False", "assert is_odd(123456789) == True", "assert is_odd(987654320) == False", "assert is_odd(3) == True", "assert is_odd(4) == False", "assert is_odd(-3) == True", "assert is_odd(-4) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def sum_of_two(a: int, b: int) -> int:\n    return a + b", "task_id": "309_33903f43-d8bb-4866-b796-f4647f502ef0", "test_setup_code": "", "test_list": ["assert sum_of_two(1, 2) == 3", "assert sum_of_two(0, 0) == 0", "assert sum_of_two(-1, 1) == 0", "assert sum_of_two(-5, -3) == -8", "assert sum_of_two(123456, 654321) == 777777", "assert sum_of_two(999999, 1) == 1000000", "assert sum_of_two(-1000000, 1000000) == 0", "assert sum_of_two(2147483647, 1) == 2147483648", "assert sum_of_two(-2147483648, -1) == -2147483649", "assert sum_of_two(0, 999999999) == 999999999", "assert sum_of_two(500, -500) == 0", "assert sum_of_two(0, -999999999) == -999999999", "assert sum_of_two(123, 456) == 579", "assert sum_of_two(-123, -456) == -579", "assert sum_of_two(1000000000, 1000000000) == 2000000000"], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def product_of_two(a: int, b: int) -> int:\n    return a * b", "task_id": "309_8847e26e-ce5e-4035-9de8-63799227d1b7", "test_setup_code": "", "test_list": ["assert product_of_two(2, 3) == 6", "assert product_of_two(-1, 5) == -5", "assert product_of_two(0, 100) == 0", "assert product_of_two(7, -8) == -56", "assert product_of_two(123, 456) == 56088", "assert product_of_two(-10, -20) == 200", "assert product_of_two(1, 1) == 1", "assert product_of_two(999, 0) == 0", "assert product_of_two(0, 0) == 0", "assert product_of_two(100000, 100000) == 10000000000", "assert product_of_two(2147483647, 1) == 2147483647", "assert product_of_two(-2147483648, 1) == -2147483648", "assert product_of_two(50, -50) == -2500", "assert product_of_two(123456789, 987654321) == 121932631112635269", "assert product_of_two(-123456789, -987654321) == 121932631112635269"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of largest products from two given lists.", "code": "def sum_of_products(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return sum(result)", "task_id": "308_7370ffb7-3def-402e-8010-bfe610a9def3", "test_setup_code": "", "test_list": ["assert sum_of_products([1, 2, 3], [4, 5, 6], 3) == 47", "assert sum_of_products([1, 2], [3, 4], 2) == 14", "assert sum_of_products([1, 2, 3], [4, 5, 6], 1) == 18", "assert sum_of_products([1, 2, 3], [4, 5, 6], 6) == 91", "assert sum_of_products([1], [1], 1) == 1", "assert sum_of_products([1, 2, 3], [4, 5, 6], 0) == 0", "assert sum_of_products([], [], 1) == 0", "assert sum_of_products([1, 2, 3], [4, 5, 6], 10) == 91", "assert sum_of_products([0, 0, 0], [0, 0, 0], 3) == 0", "assert sum_of_products([-1, -2, -3], [-4, -5, -6], 3) == 47", "assert sum_of_products([1, 2, 3], [-4, -5, -6], 3) == 0", "assert sum_of_products([1, 2, 3], [4, 5, 6], 5) == 85", "assert sum_of_products([1, 2, 3], [4, 5, 6], 4) == 67", "assert sum_of_products([1, 2, 3, 4], [5, 6, 7, 8], 5) == 120", "assert sum_of_products([1, 2, 3], [4, 5, 6], 2) == 33"], "challenge_test_list": []}
{"text": "Write a function to find the specified number of smallest products from two given lists.", "code": "def smallest_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2])[:N]\n    return result", "task_id": "308_909a2039-b5a8-4c28-a219-5f0ca131122d", "test_setup_code": "", "test_list": ["assert smallest_product([1, 2, 3], [4, 5, 6], 2) == [4, 5]", "assert smallest_product([1, 2], [3, 4], 3) == [3, 4, 6]", "assert smallest_product([1, 2, 3], [1, 2, 3], 4) == [1, 2, 2, 3]", "assert smallest_product([1, 1, 1], [1, 1, 1], 1) == [1]", "assert smallest_product([-1, -2], [-3, -4], 2) == [2, 3]", "assert smallest_product([0, 1], [0, 1], 2) == [0, 0]", "assert smallest_product([1, 2, 3], [4, 5, 6], 6) == [4, 5, 6, 8, 9, 10]", "assert smallest_product([1, 2, 3], [4, 5, 6], 0) == []", "assert smallest_product([1, 2, 3], [4, 5, 6], 9) == [4, 5, 6, 8, 9, 10, 12, 15, 18]", "assert smallest_product([1], [1], 1) == [1]", "assert smallest_product([2, 3], [4, 5], 3) == [8, 10, 12]", "assert smallest_product([1, 2, 3], [1, 2, 3], 9) == [1, 2, 2, 3, 3, 4, 6, 6, 9]", "assert smallest_product([1, 2, 3], [4, 5, 6], 1) == [4]", "assert smallest_product([1, 2, 3], [4, 5, 6], 5) == [4, 5, 6, 8, 9]", "assert smallest_product([1, 2, 3], [4, 5, 6], 7) == [4, 5, 6, 8, 9, 10, 12]"], "challenge_test_list": []}
{"text": "Write a function to find the specified number of unique largest products from two given lists.", "code": "def unique_largest_product(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]), reverse=True)[:N]\n    return result", "task_id": "308_60f6b628-aa7f-4237-8760-465dd27242c7", "test_setup_code": "", "test_list": ["assert unique_largest_product([1, 2, 3], [4, 5, 6], 3) == [18, 15, 12]", "assert unique_largest_product([1, 2], [3, 4], 2) == [8, 6]", "assert unique_largest_product([1, 2, 3], [4, 5, 6], 10) == [18, 15, 12, 10, 9, 8, 6, 5, 4, 3]", "assert unique_largest_product([0, 0, 0], [0, 0, 0], 1) == [0]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique largest products from two given lists.", "code": "def sum_of_unique_products(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]), reverse=True)[:N]\n    return sum(result)", "task_id": "308_fedfb2e6-5fc2-42bf-b4bd-9d00f52e041a", "test_setup_code": "", "test_list": ["assert sum_of_unique_products([1, 2, 3], [4, 5, 6], 3) == 44", "assert sum_of_unique_products([1, 2, 3], [4, 5, 6], 1) == 18", "assert sum_of_unique_products([1, 2, 3], [4, 5, 6], 0) == 0", "assert sum_of_unique_products([1, 2, 3], [4, 5, 6], 10) == 77", "assert sum_of_unique_products([1, 1, 1], [1, 1, 1], 1) == 1", "assert sum_of_unique_products([1, 1, 1], [1, 1, 1], 3) == 1", "assert sum_of_unique_products([0, 0, 0], [0, 0, 0], 1) == 0", "assert sum_of_unique_products([1, 2, 3], [0, 0, 0], 2) == 0", "assert sum_of_unique_products([1, 2], [3, 4], 2) == 11", "assert sum_of_unique_products([1, 2], [3, 4], 3) == 11", "assert sum_of_unique_products([1, 2, 3], [1, 2, 3], 5) == 19", "assert sum_of_unique_products([-1, -2, -3], [-4, -5, -6], 3) == 44", "assert sum_of_unique_products([-1, -2, -3], [4, 5, 6], 3) == 18", "assert sum_of_unique_products([1, 2, 3], [-4, -5, -6], 3) == 18", "assert sum_of_unique_products([1, 2, 3, 4], [5, 6, 7, 8], 5) == 110"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of smallest products from two given lists.", "code": "def sum_of_smallest_products(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2])[:N]\n    return sum(result)", "task_id": "308_065dc2a0-25db-4da0-9cdb-aef3029d9944", "test_setup_code": "", "test_list": ["assert sum_of_smallest_products([1, 2], [3, 4], 2) == 10", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 3) == 22", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 1) == 4", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 6) == 56", "assert sum_of_smallest_products([1, 2], [3, 4], 1) == 3", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 0) == 0", "assert sum_of_smallest_products([1, -2, 3], [4, -5, 6], 3) == -10", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 9) == 56", "assert sum_of_smallest_products([0, 2, 3], [4, 5, 6], 2) == 0", "assert sum_of_smallest_products([1, 2, 3], [0, 5, 6], 2) == 0", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 5) == 40", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 4) == 28", "assert sum_of_smallest_products([-1, -2, -3], [-4, -5, -6], 3) == 32", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 7) == 56", "assert sum_of_smallest_products([1, 2, 3], [4, 5, 6], 8) == 56"], "challenge_test_list": []}
{"text": "Write a function to find the specified number of unique smallest products from two given lists.", "code": "def unique_smallest_product(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]))[:N]\n    return result", "task_id": "308_c7ad5781-3951-4436-840c-0e5865ac6c51", "test_setup_code": "", "test_list": ["assert unique_smallest_product([1, 2, 3], [4, 5, 6], 3) == [4, 5, 6]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 5) == [4, 5, 6, 8, 9]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 10) == [4, 5, 6, 8, 9, 10, 12, 15, 18]", "assert unique_smallest_product([1, 2], [3, 4], 2) == [3, 4]", "assert unique_smallest_product([1, 2], [3, 4], 4) == [3, 4, 6, 8]", "assert unique_smallest_product([1], [1], 1) == [1]", "assert unique_smallest_product([1, 2, 3], [1, 2, 3], 5) == [1, 2, 3, 4, 6]", "assert unique_smallest_product([0, 1, 2], [0, 1, 2], 3) == [0, 0, 0]", "assert unique_smallest_product([-1, -2, 3], [4, -5, 6], 3) == [-12, -10, -6]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 0) == []", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 1) == [4]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 2) == [4, 5]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 9) == [4, 5, 6, 8, 9, 10, 12, 15, 18]", "assert unique_smallest_product([1, 2, 3], [4, 5, 6], 15) == [4, 5, 6, 8, 9, 10, 12, 15, 18]", "assert unique_smallest_product([1, 2, 3, 4], [1, 2, 3, 4], 10) == [1, 2, 3, 4, 6, 8, 9, 12, 16]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique smallest products from two given lists.", "code": "def sum_of_unique_smallest_products(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]))[:N]\n    return sum(result)", "task_id": "308_ed277d38-303a-4c7e-9b21-3aa1af46cc54", "test_setup_code": "", "test_list": ["assert sum_of_unique_smallest_products([1, 2, 3], [4, 5, 6], 2) == 14", "assert sum_of_unique_smallest_products([1, 2], [3, 4], 3) == 11", "assert sum_of_unique_smallest_products([1, 2, 3], [1, 2, 3], 4) == 10", "assert sum_of_unique_smallest_products([1, 2, 3], [1, 2, 3], 9) == 36", "assert sum_of_unique_smallest_products([1, 2, 3], [4, 5, 6], 1) == 4", "assert sum_of_unique_smallest_products([1, 1, 1], [1, 1, 1], 1) == 1", "assert sum_of_unique_smallest_products([1, 2], [3, 4], 1) == 3", "assert sum_of_unique_smallest_products([1, 2], [3, 4], 4) == 14", "assert sum_of_unique_smallest_products([1, 2, 3], [1, 2, 3], 0) == 0", "assert sum_of_unique_smallest_products([1, 2, 3], [1, 2, 3], 10) == 36", "assert sum_of_unique_smallest_products([1, 2, 3, 4], [1, 2, 3, 4], 5) == 20", "assert sum_of_unique_smallest_products([1, 2, 3, 4], [1, 2, 3, 4], 6) == 26", "assert sum_of_unique_smallest_products([1, 2, 3, 4], [1, 2, 3, 4], 7) == 34", "assert sum_of_unique_smallest_products([1, 2, 3, 4], [1, 2, 3, 4], 8) == 44", "assert sum_of_unique_smallest_products([1, 2, 3, 4], [1, 2, 3, 4], 9) == 56"], "challenge_test_list": []}
{"text": "Write a function to find the specified number of largest products and return the indices of the pairs that produce these products from two given lists.", "code": "def largest_product_with_indices(nums1, nums2, N):\n    products = [(i, j, x*y) for i, x in enumerate(nums1) for j, y in enumerate(nums2)]\n    products.sort(key=lambda x: x[2], reverse=True)\n    return [(i, j) for i, j, _ in products[:N]]", "task_id": "308_3f28feb6-4f5f-4d7c-b1ae-00147b186e34", "test_setup_code": "", "test_list": ["assert largest_product_with_indices([1, 2, 3], [4, 5, 6], 2) == [(2, 2), (2, 1)]", "assert largest_product_with_indices([1, 2], [3, 4], 1) == [(1, 1)]", "assert largest_product_with_indices([0, 0], [0, 0], 1) == [(0, 0)]", "assert largest_product_with_indices([1, 2, 3], [4, 5, 6], 5) == [(2, 2), (2, 1), (1, 2), (2, 0), (1, 1)]", "assert largest_product_with_indices([1], [1], 1) == [(0, 0)]", "assert largest_product_with_indices([1, 2, 3], [4, 5, 6], 0) == []", "assert largest_product_with_indices([1, 2, 3], [4, 5, 6], 10) == [(2, 2), (2, 1), (1, 2), (2, 0), (1, 1), (0, 2), (1, 0), (0, 1), (0, 0)]", "assert largest_product_with_indices([], [4, 5, 6], 1) == []", "assert largest_product_with_indices([1, 2, 3], [], 1) == []", "assert largest_product_with_indices([], [], 1) == []", "assert largest_product_with_indices([1, 2, 3, 4], [1, 2, 3, 4], 3) == [(3, 3), (3, 2), (2, 3)]", "assert largest_product_with_indices([-1, -2, -3], [-4, -5, -6], 2) == [(0, 0), (0, 1)]", "assert largest_product_with_indices([1, 2, 3], [-4, -5, -6], 2) == [(2, 0), (2, 1)]", "assert largest_product_with_indices([1, 2, 3], [4, 5, 6], 6) == [(2, 2), (2, 1), (1, 2), (2, 0), (1, 1), (0, 2)]", "assert largest_product_with_indices([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 7) == [(4, 4), (4, 3), (3, 4), (4, 2), (3, 3), (2, 4), (4, 1)]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique largest products from two given lists, but only if the product is even.", "code": "def unique_largest_product_sum(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2 if (x*y) % 2 == 0]), reverse=True)[:N]\n    return sum(result)", "task_id": "308_2a84b1b9-618b-463a-8957-bccc2290cf38", "test_setup_code": "", "test_list": ["assert unique_largest_product_sum([1, 2, 3], [4, 5, 6], 2) == 36", "assert unique_largest_product_sum([1, 3, 5], [2, 4, 6], 3) == 44", "assert unique_largest_product_sum([2, 4, 6], [1, 3, 5], 1) == 30", "assert unique_largest_product_sum([1, 2, 3], [1, 2, 3], 2) == 12", "assert unique_largest_product_sum([1, 2, 3], [1, 2, 3], 0) == 0", "assert unique_largest_product_sum([1, 1, 1], [2, 2, 2], 1) == 2", "assert unique_largest_product_sum([2, 4, 6], [2, 4, 6], 3) == 96", "assert unique_largest_product_sum([1, 3, 5], [7, 9, 11], 2) == 0", "assert unique_largest_product_sum([], [1, 2, 3], 1) == 0", "assert unique_largest_product_sum([1, 2, 3], [], 1) == 0", "assert unique_largest_product_sum([1, 2, 3, 4], [2, 3, 4, 5], 3) == 40", "assert unique_largest_product_sum([10, 20, 30], [1, 2, 3], 2) == 120", "assert unique_largest_product_sum([1, 2, 3], [1, 2, 3], 5) == 12", "assert unique_largest_product_sum([0, 2, 4], [0, 1, 3], 2) == 8", "assert unique_largest_product_sum([1, 2, 3, 4, 5], [2, 4, 6, 8, 10], 4) == 120"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and reverse the order of elements.", "code": "def reverse_string_tuple(s: str):\n    result = tuple(x for x in s[::-1] if not x.isspace())\n    return result", "task_id": "310_8521a118-edda-4ba2-ad60-598c33d54494", "test_setup_code": "", "test_list": ["assert reverse_string_tuple('hello') == ('o', 'l', 'l', 'e', 'h')", "assert reverse_string_tuple('world') == ('d', 'l', 'r', 'o', 'w')", "assert reverse_string_tuple('') == ()", "assert reverse_string_tuple('a') == ('a',)", "assert reverse_string_tuple('ab') == ('b', 'a')", "assert reverse_string_tuple('abc') == ('c', 'b', 'a')", "assert reverse_string_tuple('a b c') == ('c', 'b', 'a')", "assert reverse_string_tuple('  a  ') == ('a',)", "assert reverse_string_tuple('12345') == ('5', '4', '3', '2', '1')", "assert reverse_string_tuple('!@#') == ('#', '@', '!')", "assert reverse_string_tuple('racecar') == ('r', 'a', 'c', 'e', 'c', 'a', 'r')", "assert reverse_string_tuple('  ') == ()", "assert reverse_string_tuple('a b c d e f g') == ('g', 'f', 'e', 'd', 'c', 'b', 'a')", "assert reverse_string_tuple('Python 3.8') == ('8', '.', '3', 'n', 'o', 'h', 't', 'y', 'P')", "assert reverse_string_tuple('Reverse this string!') == ('!', 'g', 'n', 'i', 'r', 't', 's', 's', 'i', 'h', 't', 'e', 's', 'r', 'e', 'v', 'e', 'R')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and convert all characters to uppercase.", "code": "def string_to_tuple_upper(s: str):\n    result = tuple(x.upper() for x in s if not x.isspace())\n    return result", "task_id": "310_cad397a1-cf46-4171-8c3c-bcf5245c0dea", "test_setup_code": "", "test_list": ["assert string_to_tuple_upper('hello world') == ('H', 'E', 'L', 'L', 'O', 'W', 'O', 'R', 'L', 'D')", "assert string_to_tuple_upper('Python3.8') == ('P', 'Y', 'T', 'H', 'O', 'N', '3', '.', '8')", "assert string_to_tuple_upper('') == ()", "assert string_to_tuple_upper('a b c d e f g') == ('A', 'B', 'C', 'D', 'E', 'F', 'G')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all vowels.", "code": "def string_to_tuple_no_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    result = tuple(x for x in s if x not in vowels and not x.isspace())\n    return result", "task_id": "310_0ded5b4e-72e6-4bfb-a66d-b495709ae4c1", "test_setup_code": "", "test_list": ["assert string_to_tuple_no_vowels('hello world') == ('h', 'l', 'l', 'w', 'r', 'l', 'd')", "assert string_to_tuple_no_vowels('AEIOUaeiou') == ()", "assert string_to_tuple_no_vowels('Python Programming') == ('P', 'y', 't', 'h', 'n', 'P', 'r', 'g', 'r', 'm', 'm', 'n', 'g')", "assert string_to_tuple_no_vowels('') == ()", "assert string_to_tuple_no_vowels('1234567890') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_no_vowels('!@#$%^&*()') == ('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')", "assert string_to_tuple_no_vowels('a quick brown fox') == ('q', 'c', 'k', 'b', 'r', 'w', 'n', 'f', 'x')", "assert string_to_tuple_no_vowels('The quick brown fox jumps over the lazy dog') == ('T', 'h', 'q', 'c', 'k', 'b', 'r', 'w', 'n', 'f', 'x', 'j', 'm', 'p', 's', 'v', 'r', 't', 'h', 'l', 'z', 'y', 'd', 'g')", "assert string_to_tuple_no_vowels('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == ('B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z')", "assert string_to_tuple_no_vowels('abcdefghijklmnopqrstuvwxyz') == ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z')", "assert string_to_tuple_no_vowels('aeiouAEIOU') == ()", "assert string_to_tuple_no_vowels('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ') == ('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z')", "assert string_to_tuple_no_vowels('123 abc 456 def') == ('1', '2', '3', 'b', 'c', '4', '5', '6', 'd', 'f')", "assert string_to_tuple_no_vowels('Hello, World!') == ('H', 'l', 'l', ',', 'W', 'r', 'l', 'd', '!')", "assert string_to_tuple_no_vowels('Spaces should be removed') == ('S', 'p', 'c', 's', 's', 'h', 'l', 'd', 'b', 'r', 'm', 'v', 'd')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple containing only the digits.", "code": "def string_to_tuple_digits(s: str):\n    result = tuple(x for x in s if x.isdigit())\n    return result", "task_id": "310_b2f5ee54-484b-4fd1-bb71-1f1a98a0cc9b", "test_setup_code": "", "test_list": ["assert string_to_tuple_digits('abc123') == ('1', '2', '3')", "assert string_to_tuple_digits('') == ()", "assert string_to_tuple_digits('no digits here!') == ()", "assert string_to_tuple_digits('1234567890') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_digits('a1b2c3d4e5f6g7h8i9j0') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_digits('!@#$%^&*()') == ()", "assert string_to_tuple_digits('a1!b2@c3#d4$e5%f6^g7&h8*i9(j0)') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_digits('0') == ('0')", "assert string_to_tuple_digits('a') == ()", "assert string_to_tuple_digits('1') == ('1')", "assert string_to_tuple_digits('a1') == ('1')", "assert string_to_tuple_digits('1a') == ('1')", "assert string_to_tuple_digits('123abc456def789ghi0') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_digits('a1b2c3d4e5f6g7h8i9j0k') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_digits('!1@2#3$4%5^6&7*8(9)0') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple containing only the alphabetic characters.", "code": "def string_to_tuple_alpha(s: str):\n    result = tuple(x for x in s if x.isalpha())\n    return result", "task_id": "310_0e8a9488-00c5-46cf-9b9f-8e2e8ae85b5c", "test_setup_code": "", "test_list": ["assert string_to_tuple_alpha('abc123') == ('a', 'b', 'c')", "assert string_to_tuple_alpha('') == ()", "assert string_to_tuple_alpha('1234567890') == ()", "assert string_to_tuple_alpha('a1b2c3d4') == ('a', 'b', 'c', 'd')", "assert string_to_tuple_alpha('!@#$%^&*()') == ()", "assert string_to_tuple_alpha('Hello, World!') == ('H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd')", "assert string_to_tuple_alpha('Python3.8') == ('P', 'y', 't', 'h', 'o', 'n')", "assert string_to_tuple_alpha('a') == ('a')", "assert string_to_tuple_alpha('A') == ('A')", "assert string_to_tuple_alpha('aA') == ('a', 'A')", "assert string_to_tuple_alpha('123abc456') == ('a', 'b', 'c')", "assert string_to_tuple_alpha('abc!@#def') == ('a', 'b', 'c', 'd', 'e', 'f')", "assert string_to_tuple_alpha('abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')", "assert string_to_tuple_alpha('ABCDEFGHIJKLMNOPQRSTUVWXYZ') == ('A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z')", "assert string_to_tuple_alpha('a1!b2@c3#d4$') == ('a', 'b', 'c', 'd')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all punctuation.", "code": "import string\n\ndef string_to_tuple_no_punctuation(s: str):\n    result = tuple(x for x in s if x not in string.punctuation and not x.isspace())\n    return result", "task_id": "310_b29dc3d0-2e48-44e6-9b65-9e7c1fd81d3e", "test_setup_code": "", "test_list": ["assert string_to_tuple_no_punctuation('Hello, World!') == ('H', 'e', 'l', 'l', 'o', 'W', 'o', 'r', 'l', 'd')", "assert string_to_tuple_no_punctuation('Python 3.8 is awesome!') == ('P', 'y', 't', 'h', 'o', 'n', '3', '8', 'i', 's', 'a', 'w', 'e', 's', 'o', 'm', 'e')", "assert string_to_tuple_no_punctuation('No punctuation here') == ('N', 'o', 'p', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', 'h', 'e', 'r', 'e')", "assert string_to_tuple_no_punctuation('') == ()", "assert string_to_tuple_no_punctuation('!@#$%^&*()') == ()", "assert string_to_tuple_no_punctuation('1234567890') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')", "assert string_to_tuple_no_punctuation('a.b,c:d;e!f?g') == ('a', 'b', 'c', 'd', 'e', 'f', 'g')", "assert string_to_tuple_no_punctuation('Spaces should be removed') == ('S', 'p', 'a', 'c', 'e', 's', 's', 'h', 'o', 'u', 'l', 'd', 'b', 'e', 'r', 'e', 'm', 'o', 'v', 'e', 'd')", "assert string_to_tuple_no_punctuation('Mixed CASE and numbers 123') == ('M', 'i', 'x', 'e', 'd', 'C', 'A', 'S', 'E', 'a', 'n', 'd', 'n', 'u', 'm', 'b', 'e', 'r', 's', '1', '2', '3')", "assert string_to_tuple_no_punctuation('!@#Hello*&^%') == ('H', 'e', 'l', 'l', 'o')", "assert string_to_tuple_no_punctuation('Punctuation: should, be; removed!') == ('P', 'u', 'n', 'c', 't', 'u', 'a', 't', 'i', 'o', 'n', 's', 'h', 'o', 'u', 'l', 'd', 'b', 'e', 'r', 'e', 'm', 'o', 'v', 'e', 'd')", "assert string_to_tuple_no_punctuation('EdgeCase!@#123') == ('E', 'd', 'g', 'e', 'C', 'a', 's', 'e', '1', '2', '3')", "assert string_to_tuple_no_punctuation('A quick brown fox jumps over the lazy dog.') == ('A', 'q', 'u', 'i', 'c', 'k', 'b', 'r', 'o', 'w', 'n', 'f', 'o', 'x', 'j', 'u', 'm', 'p', 's', 'o', 'v', 'e', 'r', 't', 'h', 'e', 'l', 'a', 'z', 'y', 'd', 'o', 'g')", "assert string_to_tuple_no_punctuation('Special characters: @#$%^&*() should be removed') == ('S', 'p', 'e', 'c', 'i', 'a', 'l', 'c', 'h', 'a', 'r', 'a', 'c', 't', 'e', 'r', 's', 's', 'h', 'o', 'u', 'l', 'd', 'b', 'e', 'r', 'e', 'm', 'o', 'v', 'e', 'd')", "assert string_to_tuple_no_punctuation('1234567890!@#$%^&*()') == ('1', '2', '3', '4', '5', '6', '7', '8', '9', '0')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and convert all characters to lowercase.", "code": "def string_to_tuple_lower(s: str):\n    result = tuple(x.lower() for x in s if not x.isspace())\n    return result", "task_id": "310_fd9ec28a-1b84-4f57-801b-2b06e5d03b4d", "test_setup_code": "", "test_list": ["assert string_to_tuple_lower('Hello World') == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')", "assert string_to_tuple_lower('Python3.8') == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '8')", "assert string_to_tuple_lower('') == ()", "assert string_to_tuple_lower('A B C') == ('a', 'b', 'c')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all digits.", "code": "def string_to_tuple_no_digits(s: str):\n    result = tuple(x for x in s if not x.isdigit() and not x.isspace())\n    return result", "task_id": "310_b7e1a910-1f0f-4bfe-93e5-5950e78f7e0b", "test_setup_code": "", "test_list": ["assert string_to_tuple_no_digits('hello123') == ('h', 'e', 'l', 'l', 'o')", "assert string_to_tuple_no_digits('abc123xyz') == ('a', 'b', 'c', 'x', 'y', 'z')", "assert string_to_tuple_no_digits('') == ()", "assert string_to_tuple_no_digits('1234567890') == ()", "assert string_to_tuple_no_digits('a1b2c3') == ('a', 'b', 'c')", "assert string_to_tuple_no_digits('no digits here!') == ('n', 'o', 'd', 'i', 'g', 'i', 't', 's', 'h', 'e', 'r', 'e', '!')", "assert string_to_tuple_no_digits('spaces and 123 numbers') == ('s', 'p', 'a', 'c', 'e', 's', 'a', 'n', 'd', 'n', 'u', 'm', 'b', 'e', 'r', 's')", "assert string_to_tuple_no_digits('!@#$%^&*()') == ('!', '@', '#', '$', '%', '^', '&', '*', '(', ')')", "assert string_to_tuple_no_digits('a b c 1 2 3') == ('a', 'b', 'c')", "assert string_to_tuple_no_digits('123 abc 456 def 789') == ('a', 'b', 'c', 'd', 'e', 'f')", "assert string_to_tuple_no_digits('a1!b2@c3#') == ('a', '!', 'b', '@', 'c', '#')", "assert string_to_tuple_no_digits('longstringwithnospacesbut123numbers') == ('l', 'o', 'n', 'g', 's', 't', 'r', 'i', 'n', 'g', 'w', 'i', 't', 'h', 'n', 'o', 's', 'p', 'a', 'c', 'e', 's', 'b', 'u', 't', 'n', 'u', 'm', 'b', 'e', 'r', 's')", "assert string_to_tuple_no_digits('UPPERCASE123lowercase') == ('U', 'P', 'P', 'E', 'R', 'C', 'A', 'S', 'E', 'l', 'o', 'w', 'e', 'r', 'c', 'a', 's', 'e')", "assert string_to_tuple_no_digits('1234567890abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')", "assert string_to_tuple_no_digits('!@#123abc$%^456def&*()789ghi') == ('!', '@', '#', 'a', 'b', 'c', '$', '%', '^', 'd', 'e', 'f', '&', '*', '(', ')', 'g', 'h', 'i')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all consonants.", "code": "def string_to_tuple_no_consonants(s: str):\n    vowels = 'aeiouAEIOU'\n    result = tuple(x for x in s if x in vowels and not x.isspace())\n    return result", "task_id": "310_a2de2baf-2ae1-4db4-a516-7c6e793e998a", "test_setup_code": "", "test_list": ["assert string_to_tuple_no_consonants('hello world') == ('e', 'o', 'o')", "assert string_to_tuple_no_consonants('AEIOU') == ('A', 'E', 'I', 'O', 'U')", "assert string_to_tuple_no_consonants('bcdfghjklmnpqrstvwxyz') == ()", "assert string_to_tuple_no_consonants('') == ()", "assert string_to_tuple_no_consonants('a') == ('a')", "assert string_to_tuple_no_consonants('e') == ('e')", "assert string_to_tuple_no_consonants('i') == ('i')", "assert string_to_tuple_no_consonants('o') == ('o')", "assert string_to_tuple_no_consonants('u') == ('u')", "assert string_to_tuple_no_consonants('AEIOUaeiou') == ('A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u')", "assert string_to_tuple_no_consonants('The quick brown fox jumps over the lazy dog') == ('e', 'u', 'i', 'o', 'o', 'u', 'o', 'e', 'e', 'a', 'o')", "assert string_to_tuple_no_consonants('12345') == ()", "assert string_to_tuple_no_consonants('!@#$%^&*()') == ()", "assert string_to_tuple_no_consonants('A quick brown fox') == ('A', 'u', 'i', 'o', 'o')", "assert string_to_tuple_no_consonants('Lorem Ipsum') == ('o', 'e', 'I', 'u')"], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all spaces.", "code": "def string_to_tuple_no_spaces(s: str):\n    result = tuple(x for x in s if not x.isspace())\n    return result", "task_id": "310_4d96afd9-cef9-4bd7-b31d-6004720198cf", "test_setup_code": "", "test_list": ["assert string_to_tuple_no_spaces('hello world') == ('h', 'e', 'l', 'l', 'o', 'w', 'o', 'r', 'l', 'd')", "assert string_to_tuple_no_spaces('  leading and trailing  ') == ('l', 'e', 'a', 'd', 'i', 'n', 'g', 'a', 'n', 'd', 't', 'r', 'a', 'i', 'l', 'i', 'n', 'g')", "assert string_to_tuple_no_spaces('multiple   spaces') == ('m', 'u', 'l', 't', 'i', 'p', 'l', 'e', 's', 'p', 'a', 'c', 'e', 's')", "assert string_to_tuple_no_spaces('') == ()", "assert string_to_tuple_no_spaces('no_spaces') == ('n', 'o', '_', 's', 'p', 'a', 'c', 'e', 's')", "assert string_to_tuple_no_spaces('a b c d e f g') == ('a', 'b', 'c', 'd', 'e', 'f', 'g')", "assert string_to_tuple_no_spaces('123 456 789') == ('1', '2', '3', '4', '5', '6', '7', '8', '9')", "assert string_to_tuple_no_spaces('special!@# chars') == ('s', 'p', 'e', 'c', 'i', 'a', 'l', '!', '@', '#', 'c', 'h', 'a', 'r', 's')", "assert string_to_tuple_no_spaces('UPPER lower') == ('U', 'P', 'P', 'E', 'R', 'l', 'o', 'w', 'e', 'r')", "assert string_to_tuple_no_spaces('MiXeD CaSe') == ('M', 'i', 'X', 'e', 'D', 'C', 'a', 'S', 'e')", "assert string_to_tuple_no_spaces('   ') == ()", "assert string_to_tuple_no_spaces('singleword') == ('s', 'i', 'n', 'g', 'l', 'e', 'w', 'o', 'r', 'd')", "assert string_to_tuple_no_spaces('tab\tseparated') == ('t', 'a', 'b', 's', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'd')", "assert string_to_tuple_no_spaces('newline\nseparated') == ('n', 'e', 'w', 'l', 'i', 'n', 'e', 's', 'e', 'p', 'a', 'r', 'a', 't', 'e', 'd')", "assert string_to_tuple_no_spaces('mix of spaces\tand\nnewlines') == ('m', 'i', 'x', 'o', 'f', 's', 'p', 'a', 'c', 'e', 's', 'a', 'n', 'd', 'n', 'e', 'w', 'l', 'i', 'n', 'e', 's')"], "challenge_test_list": []}
{"text": "Write a python function to set the right most unset bit.", "code": "def set_right_most_unset_bit(n):\n    if not (~n):\n        return n\n    pos = 0\n    while (n & (1 << pos)) != 0:\n        pos += 1\n    return n | (1 << pos)", "task_id": "311_182ba928-1053-49ce-af62-0ae22c4bee32", "test_setup_code": "", "test_list": ["assert set_right_most_unset_bit(0) == 1", "assert set_right_most_unset_bit(1) == 3", "assert set_right_most_unset_bit(2) == 3", "assert set_right_most_unset_bit(7) == 15"], "challenge_test_list": []}
{"text": "Write a python function to clear the left most set bit.", "code": "def clear_left_most_set_bit(n):\n    if n == 0:\n        return 0\n    pos = 0\n    temp = n\n    while temp:\n        pos = temp.bit_length() - 1\n        temp &= ~(1 << pos)\n    return n & ~(1 << pos)", "task_id": "311_696f8035-7e7e-4869-bd77-ee95025933d9", "test_setup_code": "", "test_list": ["assert clear_left_most_set_bit(0) == 0", "assert clear_left_most_set_bit(1) == 0", "assert clear_left_most_set_bit(2) == 0", "assert clear_left_most_set_bit(3) == 1", "assert clear_left_most_set_bit(4) == 0", "assert clear_left_most_set_bit(5) == 1", "assert clear_left_most_set_bit(6) == 2", "assert clear_left_most_set_bit(7) == 3", "assert clear_left_most_set_bit(8) == 0", "assert clear_left_most_set_bit(15) == 7", "assert clear_left_most_set_bit(16) == 0", "assert clear_left_most_set_bit(31) == 15", "assert clear_left_most_set_bit(32) == 0", "assert clear_left_most_set_bit(63) == 31", "assert clear_left_most_set_bit(64) == 0"], "challenge_test_list": []}
{"text": "Write a python function to clear the right most set bit.", "code": "def clear_right_most_set_bit(n):\n    if n == 0:\n        return 0\n    return n & (n - 1)", "task_id": "311_33733193-2a5e-4791-b773-b76475756e8c", "test_setup_code": "", "test_list": ["assert clear_right_most_set_bit(0) == 0", "assert clear_right_most_set_bit(1) == 0", "assert clear_right_most_set_bit(2) == 0", "assert clear_right_most_set_bit(3) == 2", "assert clear_right_most_set_bit(4) == 0", "assert clear_right_most_set_bit(5) == 4", "assert clear_right_most_set_bit(6) == 4", "assert clear_right_most_set_bit(7) == 6", "assert clear_right_most_set_bit(8) == 0", "assert clear_right_most_set_bit(15) == 14", "assert clear_right_most_set_bit(16) == 0", "assert clear_right_most_set_bit(31) == 30", "assert clear_right_most_set_bit(32) == 0", "assert clear_right_most_set_bit(63) == 62", "assert clear_right_most_set_bit(64) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle the left most set bit.", "code": "def toggle_left_most_set_bit(n):\n    if n == 0:\n        return 0\n    pos = n.bit_length() - 1\n    return n ^ (1 << pos)", "task_id": "311_923555ae-2464-471f-878d-59f8e07516eb", "test_setup_code": "", "test_list": ["assert toggle_left_most_set_bit(0) == 0", "assert toggle_left_most_set_bit(1) == 0", "assert toggle_left_most_set_bit(2) == 0", "assert toggle_left_most_set_bit(3) == 1", "assert toggle_left_most_set_bit(4) == 0", "assert toggle_left_most_set_bit(5) == 1", "assert toggle_left_most_set_bit(6) == 2", "assert toggle_left_most_set_bit(7) == 3", "assert toggle_left_most_set_bit(8) == 0", "assert toggle_left_most_set_bit(15) == 7", "assert toggle_left_most_set_bit(16) == 0", "assert toggle_left_most_set_bit(31) == 15", "assert toggle_left_most_set_bit(32) == 0", "assert toggle_left_most_set_bit(63) == 31", "assert toggle_left_most_set_bit(64) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle the right most set bit.", "code": "def toggle_right_most_set_bit(n):\n    if n == 0:\n        return 0\n    return n ^ (n & -n)", "task_id": "311_fe0491ed-fe80-4dd4-8e6c-1e1786f281ff", "test_setup_code": "", "test_list": ["assert toggle_right_most_set_bit(0) == 0", "assert toggle_right_most_set_bit(1) == 0", "assert toggle_right_most_set_bit(2) == 0", "assert toggle_right_most_set_bit(3) == 2", "assert toggle_right_most_set_bit(4) == 0", "assert toggle_right_most_set_bit(5) == 4", "assert toggle_right_most_set_bit(6) == 4", "assert toggle_right_most_set_bit(7) == 6", "assert toggle_right_most_set_bit(8) == 0", "assert toggle_right_most_set_bit(9) == 8", "assert toggle_right_most_set_bit(10) == 8", "assert toggle_right_most_set_bit(15) == 14", "assert toggle_right_most_set_bit(16) == 0", "assert toggle_right_most_set_bit(1023) == 1022", "assert toggle_right_most_set_bit(1024) == 0"], "challenge_test_list": []}
{"text": "Write a python function to set the left most unset bit within a given range.", "code": "def set_left_most_unset_bit_in_range(n, start, end):\n    for i in range(start, end + 1):\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    return n", "task_id": "311_4dce8f15-7897-4abb-a83f-c2170395f004", "test_setup_code": "", "test_list": ["assert set_left_most_unset_bit_in_range(0b1010, 0, 3) == 0b1011", "assert set_left_most_unset_bit_in_range(0b1111, 0, 3) == 0b1111", "assert set_left_most_unset_bit_in_range(0b1000, 0, 3) == 0b1001", "assert set_left_most_unset_bit_in_range(0b0, 0, 3) == 0b1"], "challenge_test_list": []}
{"text": "Write a python function to clear the left most set bit within a given range.", "code": "def clear_left_most_set_bit_in_range(n, start, end):\n    for i in range(end, start - 1, -1):\n        if n & (1 << i):\n            return n & ~(1 << i)\n    return n", "task_id": "311_acd34255-a304-48a0-a803-eadf8331fe12", "test_setup_code": "", "test_list": ["assert clear_left_most_set_bit_in_range(0b101010, 0, 5) == 0b001010", "assert clear_left_most_set_bit_in_range(0b1111, 0, 3) == 0b0111", "assert clear_left_most_set_bit_in_range(0b1000, 0, 3) == 0b0000", "assert clear_left_most_set_bit_in_range(0b1110, 1, 3) == 0b1010", "assert clear_left_most_set_bit_in_range(0b1110, 2, 3) == 0b0110", "assert clear_left_most_set_bit_in_range(0b1110, 0, 1) == 0b1110", "assert clear_left_most_set_bit_in_range(0b100000, 0, 5) == 0b000000", "assert clear_left_most_set_bit_in_range(0b100000, 1, 4) == 0b100000", "assert clear_left_most_set_bit_in_range(0b101010, 2, 4) == 0b100010", "assert clear_left_most_set_bit_in_range(0b111111, 0, 5) == 0b011111", "assert clear_left_most_set_bit_in_range(0b0, 0, 5) == 0b0", "assert clear_left_most_set_bit_in_range(0b111111, 3, 5) == 0b101111", "assert clear_left_most_set_bit_in_range(0b111111, 4, 5) == 0b011111", "assert clear_left_most_set_bit_in_range(0b111111, 1, 2) == 0b111101", "assert clear_left_most_set_bit_in_range(0b111111, 0, 0) == 0b111110"], "challenge_test_list": []}
{"text": "Write a python function to clear the right most set bit within a given range.", "code": "def clear_right_most_set_bit_in_range(n, start, end):\n    for i in range(start, end + 1):\n        if n & (1 << i):\n            return n & ~(1 << i)\n    return n", "task_id": "311_d2a5bbb1-0695-4c21-a20d-466296bbab3a", "test_setup_code": "", "test_list": ["assert clear_right_most_set_bit_in_range(29, 0, 4) == 28", "assert clear_right_most_set_bit_in_range(50, 1, 5) == 48", "assert clear_right_most_set_bit_in_range(7, 0, 2) == 6", "assert clear_right_most_set_bit_in_range(1024, 0, 10) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle the left most unset bit.", "code": "def toggle_left_most_unset_bit(n):\n    if n == -1:\n        return n\n    pos = 0\n    temp = n\n    while temp & (1 << pos):\n        pos += 1\n    return n ^ (1 << pos)", "task_id": "311_1210167a-4a55-4783-b8be-b4bffd3b5183", "test_setup_code": "", "test_list": ["assert toggle_left_most_unset_bit(0) == 1", "assert toggle_left_most_unset_bit(1) == 3", "assert toggle_left_most_unset_bit(7) == 15", "assert toggle_left_most_unset_bit(14) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r, h):\n  volume = math.pi * r * r * h\n  return volume", "task_id": "312_bb8d236b-5395-4f88-9141-245c9344333f", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.141592653589793", "assert volume_cylinder(0, 1) == 0.0", "assert volume_cylinder(1, 0) == 0.0", "assert volume_cylinder(2, 3) == 37.69911184307752", "assert volume_cylinder(5, 10) == 785.3981633974483", "assert volume_cylinder(3.5, 7.2) == 276.46015351590177", "assert volume_cylinder(10, 10) == 3141.592653589793", "assert volume_cylinder(0.1, 0.1) == 0.0031415926535897933", "assert volume_cylinder(100, 1) == 31415.926535897932", "assert volume_cylinder(1, 100) == 314.1592653589793", "assert volume_cylinder(0.5, 0.5) == 0.39269908169872414", "assert volume_cylinder(2.5, 4.5) == 88.35729338221293", "assert volume_cylinder(1.1, 2.2) == 8.382838051143204", "assert volume_cylinder(3, 3) == 84.82300164692441", "assert volume_cylinder(4.4, 5.5) == 333.0088216129201"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surface_area_cone(r, h):\n  l = math.sqrt(r * r + h * h)\n  surface_area = math.pi * r * (r + l)\n  return surface_area", "task_id": "312_05c89dd3-0434-4f46-bc35-9b265e1080d2", "test_setup_code": "", "test_list": ["assert surface_area_cone(3, 4) == 75.39822368615503", "assert surface_area_cone(0, 5) == 0.0", "assert surface_area_cone(1, 1) == 7.584475591748159", "assert surface_area_cone(5, 12) == 282.7433388230814"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  volume = (4.0/3) * math.pi * r * r * r\n  return volume", "task_id": "312_03cea334-76ee-46ea-9e47-ae819c5ae0a8", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.1887902047863905", "assert volume_sphere(0) == 0.0", "assert volume_sphere(3) == 113.09733552923254", "assert volume_sphere(-2) == -33.510321638291124"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(r):\n  surface_area = 4 * math.pi * r * r\n  return surface_area", "task_id": "312_3de47575-83e7-4251-a1d1-79fa6b34be7d", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.566370614359172", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2) == 50.26548245743669", "assert surface_area_sphere(3.5) == 153.93804002589985", "assert surface_area_sphere(-1) == 12.566370614359172", "assert surface_area_sphere(10) == 1256.6370614359173", "assert surface_area_sphere(0.5) == 3.141592653589793", "assert surface_area_sphere(100) == 125663.70614359173", "assert surface_area_sphere(1e-10) == 1.2566370614359173e-19", "assert surface_area_sphere(1e10) == 1.2566370614359173e+21", "assert surface_area_sphere(1.234) == 19.15238357644592", "assert surface_area_sphere(7) == 615.7521601035994", "assert surface_area_sphere(0.01) == 0.0012566370614359173", "assert surface_area_sphere(4.567) == 262.3822528529306", "assert surface_area_sphere(2.71828) == 92.85361742945354"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n  volume = l * w * h\n  return volume", "task_id": "312_d7bbe299-698b-4d47-9a50-52148e6a0b64", "test_setup_code": "", "test_list": ["assert volume_cuboid(1, 1, 1) == 1", "assert volume_cuboid(2, 3, 4) == 24", "assert volume_cuboid(0, 5, 6) == 0", "assert volume_cuboid(7, 0, 9) == 0", "assert volume_cuboid(10, 10, 10) == 1000", "assert volume_cuboid(1.5, 2.5, 3.5) == 13.125", "assert volume_cuboid(100, 200, 300) == 6000000", "assert volume_cuboid(0.1, 0.2, 0.3) == 0.006", "assert volume_cuboid(1, 1, 0) == 0", "assert volume_cuboid(1, 2, 3) == 6", "assert volume_cuboid(5, 5, 5) == 125", "assert volume_cuboid(2, 2, 2) == 8", "assert volume_cuboid(3, 3, 3) == 27", "assert volume_cuboid(4, 4, 4) == 64", "assert volume_cuboid(6, 7, 8) == 336"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cuboid.", "code": "def surface_area_cuboid(l, w, h):\n  surface_area = 2 * (l * w + l * h + w * h)\n  return surface_area", "task_id": "312_fb5966f1-0754-4a20-918a-7bcbad495d32", "test_setup_code": "", "test_list": ["assert surface_area_cuboid(1, 1, 1) == 6", "assert surface_area_cuboid(2, 3, 4) == 52", "assert surface_area_cuboid(0, 0, 0) == 0", "assert surface_area_cuboid(1, 2, 3) == 22", "assert surface_area_cuboid(10, 10, 10) == 600", "assert surface_area_cuboid(5, 5, 1) == 70", "assert surface_area_cuboid(7, 8, 9) == 382", "assert surface_area_cuboid(1, 1, 10) == 42", "assert surface_area_cuboid(2, 2, 2) == 24", "assert surface_area_cuboid(3, 3, 3) == 54", "assert surface_area_cuboid(4, 5, 6) == 148", "assert surface_area_cuboid(1, 2, 2) == 16", "assert surface_area_cuboid(2, 3, 3) == 42", "assert surface_area_cuboid(100, 200, 300) == 220000", "assert surface_area_cuboid(1, 100, 100) == 20200"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular pyramid.", "code": "def volume_pyramid(l, w, h):\n  volume = (1.0/3) * l * w * h\n  return volume", "task_id": "312_09e60f4d-23be-47e2-8ccf-271dbe63e128", "test_setup_code": "", "test_list": ["assert volume_pyramid(3, 4, 5) == 20.0", "assert volume_pyramid(1, 1, 1) == 0.3333333333333333", "assert volume_pyramid(0, 4, 5) == 0.0", "assert volume_pyramid(3, 0, 5) == 0.0", "assert volume_pyramid(3, 4, 0) == 0.0", "assert volume_pyramid(10, 10, 10) == 333.3333333333333", "assert volume_pyramid(2.5, 4.5, 6.5) == 24.375", "assert volume_pyramid(100, 200, 300) == 2000000.0", "assert volume_pyramid(0.1, 0.2, 0.3) == 0.002", "assert volume_pyramid(1, 2, 3) == 2.0", "assert volume_pyramid(5, 5, 5) == 41.666666666666664", "assert volume_pyramid(7, 8, 9) == 168.0", "assert volume_pyramid(0.5, 0.5, 0.5) == 0.041666666666666664", "assert volume_pyramid(1.1, 2.2, 3.3) == 2.662", "assert volume_pyramid(15, 25, 35) == 4375.0"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surface_area_cylinder(r, h):\n  surface_area = 2 * math.pi * r * (r + h)\n  return surface_area", "task_id": "312_9a2dcfd6-a675-4757-9311-92354a82dba1", "test_setup_code": "", "test_list": ["assert surface_area_cylinder(1, 1) == 12.566370614359172", "assert surface_area_cylinder(0, 0) == 0.0", "assert surface_area_cylinder(2, 3) == 62.83185307179586", "assert surface_area_cylinder(5, 10) == 471.23889803846896", "assert surface_area_cylinder(3, 0) == 56.548667764616276", "assert surface_area_cylinder(0, 5) == 0.0", "assert surface_area_cylinder(1.5, 2.5) == 37.69911184307752", "assert surface_area_cylinder(2.5, 1.5) == 63.61725123519331", "assert surface_area_cylinder(10, 10) == 1256.6370614359173", "assert surface_area_cylinder(0.1, 0.1) == 0.12566370614359174", "assert surface_area_cylinder(100, 100) == 1256637.0614359173", "assert surface_area_cylinder(1, 0) == 6.283185307179586", "assert surface_area_cylinder(0, 1) == 0.0", "assert surface_area_cylinder(2, 0) == 25.132741228718345", "assert surface_area_cylinder(0.5, 0.5) == 4.71238898038469"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a triangular prism given the base area and height of the triangle and the length of the prism.", "code": "def volume_prism(b, h, l):\n  volume = b * h * l\n  return volume", "task_id": "312_44378e2f-d260-4445-9e76-9d05da453d87", "test_setup_code": "", "test_list": ["assert volume_prism(1, 1, 1) == 1", "assert volume_prism(0, 10, 10) == 0", "assert volume_prism(10, 0, 10) == 0", "assert volume_prism(10, 10, 0) == 0", "assert volume_prism(2, 3, 4) == 24", "assert volume_prism(5, 5, 5) == 125", "assert volume_prism(1.5, 2.5, 3.5) == 13.125", "assert volume_prism(100, 200, 300) == 6000000", "assert volume_prism(0.1, 0.2, 0.3) == 0.006", "assert volume_prism(1, 1, 1000) == 1000", "assert volume_prism(1, 1000, 1) == 1000", "assert volume_prism(1000, 1, 1) == 1000", "assert volume_prism(123, 456, 789) == 44253432", "assert volume_prism(3.14, 2.71, 1.61) == 13.72034", "assert volume_prism(0.001, 0.002, 0.003) == 6e-09"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a triangular prism given the base area and height of the triangle and the length of the prism.", "code": "def surface_area_prism(b, h, l):\n  surface_area = 2 * b + l * h\n  return surface_area", "task_id": "312_2fa4798d-5abc-4a8c-88f9-323154935576", "test_setup_code": "", "test_list": ["assert surface_area_prism(10, 5, 7) == 65", "assert surface_area_prism(0, 5, 7) == 35", "assert surface_area_prism(10, 0, 7) == 20", "assert surface_area_prism(10, 5, 0) == 20", "assert surface_area_prism(1, 1, 1) == 3", "assert surface_area_prism(100, 50, 30) == 1600", "assert surface_area_prism(0, 0, 0) == 0", "assert surface_area_prism(10.5, 5.5, 7.5) == 81.25", "assert surface_area_prism(10, 5, -7) == -15", "assert surface_area_prism(-10, 5, 7) == -15", "assert surface_area_prism(10, -5, 7) == -15", "assert surface_area_prism(10, 5, 7.5) == 67.5", "assert surface_area_prism(10.5, 5, 7) == 82", "assert surface_area_prism(10, 5.5, 7) == 68.5", "assert surface_area_prism(10, 5, 7.5) == 67.5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.", "code": "def find_max_sum_subseq(arr, i, k):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_3acf796d-159c-4e8e-a230-d644dedd3629", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq([1, 2, 3, 4, 5], 2, 4) == 9", "assert find_max_sum_subseq([5, 4, 3, 2, 1], 1, 3) == 4", "assert find_max_sum_subseq([10, 5, 4, 3, 2, 1], 0, 5) == 11", "assert find_max_sum_subseq([1, 101, 2, 3, 100, 4, 5], 3, 6) == 106"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The array may contain negative numbers.", "code": "def find_max_sum_subseq_with_negatives(arr, i, k):\n    n = len(arr)\n    dp = [[float('-inf') for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_371f7a08-2fe2-4cfb-bc7c-17216cdf889a", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 2, 4) == 10", "assert find_max_sum_subseq_with_negatives([-1, -2, -3, -4, -5], 2, 4) == -5", "assert find_max_sum_subseq_with_negatives([1, -2, 3, -4, 5], 2, 4) == 4", "assert find_max_sum_subseq_with_negatives([5, 4, 3, 2, 1], 2, 4) == 1", "assert find_max_sum_subseq_with_negatives([1, 3, 2, 5, 4], 2, 4) == 6", "assert find_max_sum_subseq_with_negatives([1, 2, 3, -1, 5], 2, 4) == 7", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, -5], 2, 4) == -1", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 1, 3) == 6", "assert find_max_sum_subseq_with_negatives([1, -1, 2, -2, 3], 2, 4) == 3", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 0, 4) == 5", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 3, 4) == 9", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 2, 3) == 6", "assert find_max_sum_subseq_with_negatives([5, 1, 2, 3, 4], 1, 4) == 6", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 1, 2) == 3", "assert find_max_sum_subseq_with_negatives([1, 2, 3, 4, 5], 4, 4) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a minimum length of min_length.", "code": "def find_max_sum_subseq_with_length(arr, i, k, min_length):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    max_sum = 0\n    for x in range(min_length - 1, i + 1):\n        max_sum = max(max_sum, dp[x][k])\n    return max_sum", "task_id": "306_13e23b5e-2229-45f1-ac3d-0f68069907d7", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_length([1, 2, 3, 4, 5], 2, 4, 2) == 9", "assert find_max_sum_subseq_with_length([5, 4, 3, 2, 1], 2, 4, 2) == 1", "assert find_max_sum_subseq_with_length([1, 101, 2, 3, 100, 4, 5], 4, 6, 3) == 106", "assert find_max_sum_subseq_with_length([3, 4, 5, 10], 2, 3, 2) == 15", "assert find_max_sum_subseq_with_length([10, 5, 4, 3], 1, 3, 2) == 3", "assert find_max_sum_subseq_with_length([1, 2, 3, 4, 5], 4, 4, 1) == 5", "assert find_max_sum_subseq_with_length([1, 2, 3, 4, 5], 4, 4, 5) == 0", "assert find_max_sum_subseq_with_length([10, 20, 30, 40, 50], 3, 4, 2) == 90", "assert find_max_sum_subseq_with_length([10, 20, 30, 40, 50], 3, 4, 3) == 90", "assert find_max_sum_subseq_with_length([10, 20, 30, 40, 50], 3, 4, 4) == 0", "assert find_max_sum_subseq_with_length([1, 3, 2, 4, 6], 3, 4, 2) == 10", "assert find_max_sum_subseq_with_length([1, 3, 2, 4, 6], 3, 4, 3) == 10", "assert find_max_sum_subseq_with_length([1, 3, 2, 4, 6], 3, 4, 4) == 0", "assert find_max_sum_subseq_with_length([1, 2, 3, 4, 5], 0, 4, 1) == 5", "assert find_max_sum_subseq_with_length([1, 2, 3, 4, 5], 1, 4, 2) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must not include the element at the exclude index.", "code": "def find_max_sum_subseq_with_exclusion(arr, i, k, exclude):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0] and x != exclude:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x and y != exclude:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_8bf426c8-5d32-4309-95b4-8eed92034911", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 2, 4, 3) == 9", "assert find_max_sum_subseq_with_exclusion([5, 4, 3, 2, 1], 1, 4, 2) == 6", "assert find_max_sum_subseq_with_exclusion([10, 20, 30, 40, 50], 3, 4, 2) == 90", "assert find_max_sum_subseq_with_exclusion([1, 3, 2, 5, 4], 2, 4, 1) == 8", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 1, 3, 2) == 7", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 0, 2, 1) == 4", "assert find_max_sum_subseq_with_exclusion([1, 3, 5, 7, 9], 2, 4, 3) == 15", "assert find_max_sum_subseq_with_exclusion([9, 7, 5, 3, 1], 1, 4, 2) == 10", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 4, 4, 3) == 5", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 3, 4, 2) == 9", "assert find_max_sum_subseq_with_exclusion([1, 3, 2, 5, 4], 1, 3, 2) == 8", "assert find_max_sum_subseq_with_exclusion([10, 1, 2, 3, 4], 2, 4, 1) == 17", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 2, 3, 1) == 8", "assert find_max_sum_subseq_with_exclusion([1, 2, 3, 4, 5], 1, 4, 3) == 7", "assert find_max_sum_subseq_with_exclusion([1, 3, 2, 5, 4], 3, 4, 2) == 12"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must start with the element at the start index.", "code": "def find_max_sum_subseq_with_fixed_start(arr, i, k, start):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[start]:\n            dp[start][x] = arr[x] + arr[start]\n        else:\n            dp[start][x] = arr[x]\n    for x in range(start + 1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_928aec27-d2cf-4f74-90de-74ae0e688f73", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 2, 4, 0) == 10", "assert find_max_sum_subseq_with_fixed_start([5, 4, 3, 2, 1], 2, 4, 0) == 5", "assert find_max_sum_subseq_with_fixed_start([10, 20, 30, 40, 50], 3, 4, 1) == 90", "assert find_max_sum_subseq_with_fixed_start([1, 3, 2, 4, 6], 2, 4, 0) == 10", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 1, 3, 0) == 6", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 0, 2, 0) == 3", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 2, 3, 1) == 9", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 3, 4, 2) == 12", "assert find_max_sum_subseq_with_fixed_start([5, 1, 2, 3, 4], 2, 4, 0) == 9", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 4, 4, 0) == 15", "assert find_max_sum_subseq_with_fixed_start([1, 2, 3, 4, 5], 3, 4, 1) == 14", "assert find_max_sum_subseq_with_fixed_start([1, 3, 2, 5, 4], 2, 4, 0) == 8", "assert find_max_sum_subseq_with_fixed_start([1, 3, 2, 5, 4], 2, 3, 0) == 9", "assert find_max_sum_subseq_with_fixed_start([1, 3, 2, 5, 4], 1, 3, 0) == 8", "assert find_max_sum_subseq_with_fixed_start([1, 3, 2, 5, 4], 1, 4, 0) == 8"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must end with the element at the end index.", "code": "def find_max_sum_subseq_with_fixed_end(arr, i, k, end):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k] + arr[end]", "task_id": "306_dc1610ad-d947-4e09-b447-6146350b48df", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_fixed_end([1, 2, 3, 4, 5], 2, 4, 4) == 15", "assert find_max_sum_subseq_with_fixed_end([5, 4, 3, 2, 1], 1, 3, 4) == 6", "assert find_max_sum_subseq_with_fixed_end([1, 101, 2, 3, 100, 4, 5], 3, 5, 6) == 106", "assert find_max_sum_subseq_with_fixed_end([10, 5, 4, 3, 2, 1], 0, 5, 5) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a sum equal to fixed_sum.", "code": "def find_max_sum_subseq_with_fixed_sum(arr, i, k, fixed_sum):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k] if dp[i][k] == fixed_sum else -1", "task_id": "306_a111ad68-f3ea-4a29-8870-8bfc37fc1370", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 2, 4, 6) == 6", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 1, 3, 5) == 5", "assert find_max_sum_subseq_with_fixed_sum([5, 4, 3, 2, 1], 2, 4, 6) == -1", "assert find_max_sum_subseq_with_fixed_sum([1, 3, 2, 4, 5], 2, 4, 7) == 7", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 0, 2, 3) == 3", "assert find_max_sum_subseq_with_fixed_sum([10, 20, 30, 40, 50], 2, 4, 90) == 90", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 3, 4, 10) == 10", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 1, 3, 4) == 4", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 2, 3, 6) == 6", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 1, 4, 7) == 7", "assert find_max_sum_subseq_with_fixed_sum([1, 1, 1, 1, 1], 2, 4, 3) == -1", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 0, 4, 6) == 6", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 3, 2, 9) == -1", "assert find_max_sum_subseq_with_fixed_sum([5, 10, 15, 20, 25], 2, 4, 60) == 60", "assert find_max_sum_subseq_with_fixed_sum([1, 2, 3, 4, 5], 2, 3, 5) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a product equal to fixed_product.", "code": "def find_max_sum_subseq_with_fixed_product(arr, i, k, fixed_product):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    product = 1\n    for x in range(i + 1):\n        product *= arr[x]\n    return dp[i][k] if product == fixed_product else -1", "task_id": "306_29f229ed-c200-4c0f-9125-a4770e4e6afa", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 2, 4, 6) == 9", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 1, 3, 2) == 7", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 3, 4, 24) == 12", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 2, 4, 10) == -1", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 0, 4, 1) == 5", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 1, 4, 2) == 9", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 2, 3, 6) == 7", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 1, 2, 2) == 5", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 3, 4, 24) == 12", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 2, 4, 6) == 9", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 1, 3, 2) == 7", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 3, 4, 24) == 12", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 2, 4, 10) == -1", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 0, 4, 1) == 5", "assert find_max_sum_subseq_with_fixed_product([1, 2, 3, 4, 5], 1, 4, 2) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have an average equal to fixed_avg.", "code": "def find_max_sum_subseq_with_fixed_avg(arr, i, k, fixed_avg):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    total_sum = dp[i][k]\n    avg = total_sum / (i + 1)\n    return total_sum if avg == fixed_avg else -1", "task_id": "306_f7460169-745b-4033-926b-57368ab45884", "test_setup_code": "", "test_list": ["assert find_max_sum_subseq_with_fixed_avg([1, 2, 3, 4, 5], 2, 4, 3.0) == 9", "assert find_max_sum_subseq_with_fixed_avg([10, 20, 30, 40, 50], 1, 3, 25.0) == 60", "assert find_max_sum_subseq_with_fixed_avg([5, 1, 2, 3, 4], 2, 4, 3.0) == -1", "assert find_max_sum_subseq_with_fixed_avg([1, 3, 2, 6, 4, 5], 3, 5, 4.0) == 16"], "challenge_test_list": []}
{"text": "Write a python function to return even numbers in a list.", "code": "def even_nos(list1):\n    return [num for num in list1 if num % 2 == 0]", "task_id": "313_3746baf0-da07-42d3-a2dc-5810a705216d", "test_setup_code": "", "test_list": ["assert even_nos([1, 2, 3, 4, 5, 6]) == [2, 4, 6]", "assert even_nos([10, 15, 20, 25, 30]) == [10, 20, 30]", "assert even_nos([1, 3, 5, 7, 9]) == []", "assert even_nos([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]", "assert even_nos([]) == []", "assert even_nos([0, 1, 2, 3, 4, 5]) == [0, 2, 4]", "assert even_nos([-2, -4, -6, -8]) == [-2, -4, -6, -8]", "assert even_nos([-1, -3, -5, -7]) == []", "assert even_nos([1000000, 1000001, 1000002]) == [1000000, 1000002]", "assert even_nos([11, 22, 33, 44, 55]) == [22, 44]", "assert even_nos([101, 202, 303, 404, 505]) == [202, 404]", "assert even_nos([2]) == [2]", "assert even_nos([1]) == []", "assert even_nos([0]) == [0]", "assert even_nos([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]"], "challenge_test_list": []}
{"text": "Write a python function to return odd numbers in a list.", "code": "def odd_nos(list1):\n    return [num for num in list1 if num % 2 != 0]", "task_id": "313_e2908ec3-91cd-42e4-8b38-6e43a48b89bf", "test_setup_code": "", "test_list": ["assert odd_nos([1, 2, 3, 4, 5]) == [1, 3, 5]", "assert odd_nos([2, 4, 6, 8, 10]) == []", "assert odd_nos([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert odd_nos([]) == []"], "challenge_test_list": []}
{"text": "Write a python function to return the sum of positive numbers in a list.", "code": "def positive_sum(list1):\n    return sum(num for num in list1 if num > 0)", "task_id": "313_d5885e5a-b140-477b-b3d2-e9ee2f34ad1a", "test_setup_code": "", "test_list": ["assert positive_sum([1, 2, 3, 4, 5]) == 15", "assert positive_sum([-1, -2, -3, -4, -5]) == 0", "assert positive_sum([0, 1, -1, 2, -2, 3, -3]) == 6", "assert positive_sum([10, -10, 20, -20, 30, -30]) == 60", "assert positive_sum([]) == 0", "assert positive_sum([100]) == 100", "assert positive_sum([-100]) == 0", "assert positive_sum([1, 2, 3, 4, -5, -6, -7, -8, 9, 10]) == 29", "assert positive_sum([0, 0, 0, 0, 0]) == 0", "assert positive_sum([1, -1, 1, -1, 1, -1, 1, -1, 1, -1]) == 5", "assert positive_sum([1.5, 2.5, -3.5, 4.5]) == 8.5", "assert positive_sum([-1.1, -2.2, -3.3, -4.4]) == 0", "assert positive_sum([0.1, 0.2, 0.3, 0.4, 0.5]) == 1.5", "assert positive_sum([1000, -1000, 2000, -2000, 3000, -3000]) == 6000", "assert positive_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55"], "challenge_test_list": []}
{"text": "Write a python function to return negative numbers in a list.", "code": "def negative_nos(list1):\n    return [num for num in list1 if num < 0]", "task_id": "313_1940cba2-059c-4e4b-b37a-b8234bf3c37d", "test_setup_code": "", "test_list": ["assert negative_nos([1, -2, 3, -4, 5]) == [-2, -4]", "assert negative_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]", "assert negative_nos([1, 2, 3, 4, 5]) == []", "assert negative_nos([0, -1, 2, -3, 4, -5]) == [-1, -3, -5]", "assert negative_nos([]) == []", "assert negative_nos([0]) == []", "assert negative_nos([-1]) == [-1]", "assert negative_nos([1]) == []", "assert negative_nos([0, 0, 0, 0]) == []", "assert negative_nos([-1, -1, -1, -1]) == [-1, -1, -1, -1]", "assert negative_nos([1, -1, 1, -1, 1, -1]) == [-1, -1, -1]", "assert negative_nos([100, -100, 200, -200, 300, -300]) == [-100, -200, -300]", "assert negative_nos([1.5, -2.5, 3.5, -4.5, 5.5]) == [-2.5, -4.5]", "assert negative_nos([-1.1, -2.2, -3.3, -4.4, -5.5]) == [-1.1, -2.2, -3.3, -4.4, -5.5]", "assert negative_nos([1.1, 2.2, 3.3, 4.4, 5.5]) == []"], "challenge_test_list": []}
{"text": "Write a python function to return the square of each number in a list.", "code": "def square_nos(list1):\n    return [num ** 2 for num in list1]", "task_id": "313_11dd406f-4ab6-495a-8aad-68cab9be5f57", "test_setup_code": "", "test_list": ["assert square_nos([1, 2, 3]) == [1, 4, 9]", "assert square_nos([0, -1, -2]) == [0, 1, 4]", "assert square_nos([10, 20, 30]) == [100, 400, 900]", "assert square_nos([5]) == [25]", "assert square_nos([]) == []", "assert square_nos([100]) == [10000]", "assert square_nos([-10, -20, -30]) == [100, 400, 900]", "assert square_nos([1, 1, 1, 1]) == [1, 1, 1, 1]", "assert square_nos([2, 4, 6, 8]) == [4, 16, 36, 64]", "assert square_nos([3, 3, 3]) == [9, 9, 9]", "assert square_nos([0, 0, 0]) == [0, 0, 0]", "assert square_nos([1, -1, 1, -1]) == [1, 1, 1, 1]", "assert square_nos([999, -999]) == [998001, 998001]", "assert square_nos([7, 11, 13]) == [49, 121, 169]", "assert square_nos([2, -2, 2, -2]) == [4, 4, 4, 4]"], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a list.", "code": "def positive_count(list1):\n    return len([num for num in list1 if num > 0])", "task_id": "313_b0b6665e-4847-4a66-b0c3-f42073f401ae", "test_setup_code": "", "test_list": ["assert positive_count([1, 2, 3, 4, 5]) == 5", "assert positive_count([-1, -2, -3, -4, -5]) == 0", "assert positive_count([0, 1, -1, 2, -2, 3, -3]) == 3", "assert positive_count([]) == 0", "assert positive_count([0]) == 0", "assert positive_count([100, 200, 300]) == 3", "assert positive_count([-100, 0, 100]) == 1", "assert positive_count([1.5, 2.5, 3.5]) == 3", "assert positive_count([-1.5, -2.5, -3.5]) == 0", "assert positive_count([0.1, -0.1, 0.2, -0.2]) == 2", "assert positive_count([1, -1, 1, -1, 1, -1]) == 3", "assert positive_count([999999, -999999, 0]) == 1", "assert positive_count([1, 2, 3, 4, 5, -1, -2, -3, -4, -5]) == 5", "assert positive_count([0, 0, 0, 0, 0]) == 0", "assert positive_count([1, 1, 1, 1, 1]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to return each number in a list doubled.", "code": "def double_nos(list1):\n    return [num * 2 for num in list1]", "task_id": "313_a4eba043-a9b2-4066-9e8a-ae093c3985dd", "test_setup_code": "", "test_list": ["assert double_nos([1, 2, 3]) == [2, 4, 6]", "assert double_nos([0, -1, -2]) == [0, -2, -4]", "assert double_nos([100, 200, 300]) == [200, 400, 600]", "assert double_nos([]) == []", "assert double_nos([5]) == [10]", "assert double_nos([1.5, 2.5, 3.5]) == [3.0, 5.0, 7.0]", "assert double_nos([-1.5, -2.5, -3.5]) == [-3.0, -5.0, -7.0]", "assert double_nos([0]) == [0]", "assert double_nos([999999999]) == [1999999998]", "assert double_nos([1, 0, -1]) == [2, 0, -2]", "assert double_nos([1, 1, 1, 1]) == [2, 2, 2, 2]", "assert double_nos([2, 4, 6, 8]) == [4, 8, 12, 16]", "assert double_nos([10, 20, 30, 40, 50]) == [20, 40, 60, 80, 100]", "assert double_nos([-10, -20, -30, -40, -50]) == [-20, -40, -60, -80, -100]", "assert double_nos([0.1, 0.2, 0.3]) == [0.2, 0.4, 0.6]"], "challenge_test_list": []}
{"text": "Write a python function to return the average of positive numbers in a list.", "code": "def positive_avg(list1):\n    positives = [num for num in list1 if num > 0]\n    return sum(positives) / len(positives) if positives else 0", "task_id": "313_43845d2b-78c5-4104-84c1-103cc30be25b", "test_setup_code": "", "test_list": ["assert positive_avg([1, 2, 3, 4, 5]) == 3.0", "assert positive_avg([-1, -2, -3, -4, -5]) == 0", "assert positive_avg([0, 0, 0, 0, 0]) == 0", "assert positive_avg([1, -1, 2, -2, 3, -3, 4, -4, 5, -5]) == 3.0"], "challenge_test_list": []}
{"text": "Write a python function to return the absolute value of each number in a list.", "code": "def abs_nos(list1):\n    return [abs(num) for num in list1]", "task_id": "313_59e37408-37de-4e7b-911e-17ee35e2965e", "test_setup_code": "", "test_list": ["assert abs_nos([1, -2, 3, -4, 5]) == [1, 2, 3, 4, 5]", "assert abs_nos([-1, -2, -3, -4, -5]) == [1, 2, 3, 4, 5]", "assert abs_nos([0, 0, 0]) == [0, 0, 0]", "assert abs_nos([100, -200, 300, -400, 500]) == [100, 200, 300, 400, 500]", "assert abs_nos([1]) == [1]", "assert abs_nos([-1]) == [1]", "assert abs_nos([]) == []", "assert abs_nos([999999, -999999]) == [999999, 999999]", "assert abs_nos([0]) == [0]", "assert abs_nos([-0]) == [0]", "assert abs_nos([1.5, -2.5, 3.5, -4.5, 5.5]) == [1.5, 2.5, 3.5, 4.5, 5.5]", "assert abs_nos([-1.1, 2.2, -3.3, 4.4, -5.5]) == [1.1, 2.2, 3.3, 4.4, 5.5]", "assert abs_nos([0.0, -0.0]) == [0.0, 0.0]", "assert abs_nos([123456789, -987654321]) == [123456789, 987654321]", "assert abs_nos([-1, 0, 1]) == [1, 0, 1]"], "challenge_test_list": []}
{"text": "Write a python function to return the product of positive numbers in a list.", "code": "def positive_product(list1):\n    product = 1\n    for num in list1:\n        if num > 0:\n            product *= num\n    return product", "task_id": "313_9c3c97e5-0bcf-48a8-839d-0822514c7d56", "test_setup_code": "", "test_list": ["assert positive_product([1, 2, 3, 4, 5]) == 120", "assert positive_product([-1, -2, -3, -4, -5]) == 1", "assert positive_product([0, 1, -1, 2, -2, 3, -3]) == 6", "assert positive_product([1, 2, 0, 3, 0, 4, 0, 5]) == 120"], "challenge_test_list": []}
{"text": "Write a function that counts the number of consecutive identical elements in a list and returns a list of tuples where each tuple contains the element and its count.", "code": "from itertools import groupby\n\ndef count_consecutive_elements(alist):\n    return [(key, len(list(group))) for key, group in groupby(alist)]", "task_id": "317_77f83cb5-adb5-43f2-bf77-cbf5ec3dc40d", "test_setup_code": "", "test_list": ["assert count_consecutive_elements([1, 1, 2, 2, 2, 3, 3, 1]) == [(1, 2), (2, 3), (3, 2), (1, 1)]", "assert count_consecutive_elements(['a', 'a', 'b', 'b', 'b', 'a']) == [('a', 2), ('b', 3), ('a', 1)]", "assert count_consecutive_elements([1, 2, 3, 4, 5]) == [(1, 1), (2, 1), (3, 1), (4, 1), (5, 1)]", "assert count_consecutive_elements([1, 1, 1, 1, 1]) == [(1, 5)]", "assert count_consecutive_elements([]) == []", "assert count_consecutive_elements([1]) == [(1, 1)]", "assert count_consecutive_elements([1, 2, 1, 2, 1, 2]) == [(1, 1), (2, 1), (1, 1), (2, 1), (1, 1), (2, 1)]", "assert count_consecutive_elements(['a', 'b', 'a', 'b', 'a', 'b']) == [('a', 1), ('b', 1), ('a', 1), ('b', 1), ('a', 1), ('b', 1)]", "assert count_consecutive_elements([None, None, None, 'a', 'a', None]) == [(None, 3), ('a', 2), (None, 1)]", "assert count_consecutive_elements([True, True, False, False, True]) == [(True, 2), (False, 2), (True, 1)]", "assert count_consecutive_elements([1, 2, 2, 3, 3, 3, 4, 4, 4, 4]) == [(1, 1), (2, 2), (3, 3), (4, 4)]", "assert count_consecutive_elements(['a', 'a', 'a', 'b', 'b', 'a', 'a']) == [('a', 3), ('b', 2), ('a', 2)]", "assert count_consecutive_elements([1, 1, 2, 3, 3, 4, 4, 4, 5, 5, 5, 5]) == [(1, 2), (2, 1), (3, 2), (4, 3), (5, 4)]", "assert count_consecutive_elements(['x', 'x', 'x', 'y', 'y', 'z']) == [('x', 3), ('y', 2), ('z', 1)]", "assert count_consecutive_elements([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) == [(0, 10)]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a string and returns a list of tuples where each tuple contains the character and its count.", "code": "from itertools import groupby\n\ndef run_length_encode_string(s):\n    return [(char, len(list(group))) for char, group in groupby(s)]", "task_id": "317_db64d3f0-5f5d-4e66-8f21-f985ae9baa47", "test_setup_code": "", "test_list": ["assert run_length_encode_string('aabccc') == [('a', 2), ('b', 1), ('c', 3)]", "assert run_length_encode_string('') == []", "assert run_length_encode_string('a') == [('a', 1)]", "assert run_length_encode_string('aaabbbcccaaa') == [('a', 3), ('b', 3), ('c', 3), ('a', 3)]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a list of tuples where each tuple contains the element, its count, and the starting index of the sequence in the original list.", "code": "from itertools import groupby\n\ndef encode_with_positions(alist):\n    result = []\n    index = 0\n    for key, group in groupby(alist):\n        length = len(list(group))\n        result.append((key, length, index))\n        index += length\n    return result", "task_id": "317_84518c5d-eb3d-4557-b6d2-a2b843270325", "test_setup_code": "", "test_list": ["assert encode_with_positions([]) == []", "assert encode_with_positions([1]) == [(1, 1, 0)]", "assert encode_with_positions([1, 1, 1]) == [(1, 3, 0)]", "assert encode_with_positions([1, 2, 2, 3, 3, 3]) == [(1, 1, 0), (2, 2, 1), (3, 3, 3)]", "assert encode_with_positions([1, 1, 2, 2, 3, 3, 3]) == [(1, 2, 0), (2, 2, 2), (3, 3, 4)]", "assert encode_with_positions([1, 2, 3, 4, 5]) == [(1, 1, 0), (2, 1, 1), (3, 1, 2), (4, 1, 3), (5, 1, 4)]", "assert encode_with_positions(['a', 'a', 'b', 'b', 'b', 'c']) == [('a', 2, 0), ('b', 3, 2), ('c', 1, 5)]", "assert encode_with_positions(['a', 'b', 'c', 'a', 'b', 'c']) == [('a', 1, 0), ('b', 1, 1), ('c', 1, 2), ('a', 1, 3), ('b', 1, 4), ('c', 1, 5)]", "assert encode_with_positions([1, 1, 1, 2, 2, 3, 3, 3, 3]) == [(1, 3, 0), (2, 2, 3), (3, 4, 5)]", "assert encode_with_positions([1, 2, 3, 3, 3, 2, 2, 1, 1, 1]) == [(1, 1, 0), (2, 1, 1), (3, 3, 2), (2, 2, 5), (1, 3, 7)]", "assert encode_with_positions([1, 2, 2, 2, 1, 1, 3, 3, 3, 3, 4, 4]) == [(1, 1, 0), (2, 3, 1), (1, 2, 4), (3, 4, 6), (4, 2, 10)]", "assert encode_with_positions(['x', 'x', 'y', 'y', 'y', 'z', 'z', 'x']) == [('x', 2, 0), ('y', 3, 2), ('z', 2, 5), ('x', 1, 7)]", "assert encode_with_positions([True, True, False, False, True]) == [(True, 2, 0), (False, 2, 2), (True, 1, 4)]", "assert encode_with_positions([None, None, None, 1, 1, None]) == [(None, 3, 0), (1, 2, 3), (None, 1, 5)]", "assert encode_with_positions(['a', 'a', 'a', 'b', 'b', 'a', 'a', 'c', 'c', 'c', 'c']) == [('a', 3, 0), (b, 2, 3), (a, 2, 5), (c, 4, 7)]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list but only includes sequences with a length greater than or equal to a given threshold.", "code": "from itertools import groupby\n\ndef modified_encode_with_threshold(alist, threshold):\n    def ctr_ele(el):\n        if len(el) >= threshold: return [len(el), el[0]]\n        else: return el[0]\n    return [ctr_ele(list(group)) for key, group in groupby(alist)]", "task_id": "317_dc209c39-8132-4c02-ae44-e13917ec756a", "test_setup_code": "", "test_list": ["assert modified_encode_with_threshold([1, 1, 2, 2, 2, 3, 3], 2) == [[2, 1], [3, 2], [2, 3]]", "assert modified_encode_with_threshold([1, 1, 1, 2, 3, 3, 3, 3], 3) == [[3, 1], 2, [4, 3]]", "assert modified_encode_with_threshold([1, 2, 3, 4, 5], 1) == [[1, 1], [1, 2], [1, 3], [1, 4], [1, 5]]", "assert modified_encode_with_threshold([1, 1, 1, 1, 1], 5) == [[5, 1]]", "assert modified_encode_with_threshold([1, 1, 2, 2, 3, 3, 3], 2) == [[2, 1], [2, 2], [3, 3]]", "assert modified_encode_with_threshold([1, 1, 1, 2, 2, 3, 3, 3], 4) == [1, 1, 1, 2, 2, 3, 3, 3]", "assert modified_encode_with_threshold([], 2) == []", "assert modified_encode_with_threshold([1, 1, 1, 1, 2, 2, 2, 3, 3], 3) == [[4, 1], [3, 2], [2, 3]]", "assert modified_encode_with_threshold([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2) == [1, [2, 2], [3, 3], [4, 4]]", "assert modified_encode_with_threshold([1, 2, 3, 4, 5], 2) == [1, 2, 3, 4, 5]", "assert modified_encode_with_threshold([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3], 3) == [[3, 1], [4, 2], [5, 3]]", "assert modified_encode_with_threshold([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) == [1, 1, 2, 2, [3, 3], [4, 4]]", "assert modified_encode_with_threshold([1, 2, 2, 2, 3, 3, 4, 4, 4], 3) == [1, [3, 2], [2, 3], [3, 4]]", "assert modified_encode_with_threshold([1, 1, 1, 1, 1, 1], 6) == [[6, 1]]", "assert modified_encode_with_threshold([1, 1, 1, 1, 1, 1, 1, 1], 8) == [[8, 1]]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list but splits sequences longer than a given maximum length into multiple entries.", "code": "from itertools import groupby\n\ndef encode_with_max_length(alist, max_length):\n    result = []\n    for key, group in groupby(alist):\n        length = len(list(group))\n        while length > max_length:\n            result.append([max_length, key])\n            length -= max_length\n        if length > 0:\n            result.append([length, key])\n    return result", "task_id": "317_62cb33f9-8e45-4b58-bb50-441148a3bb70", "test_setup_code": "", "test_list": ["assert encode_with_max_length([1, 1, 1, 1, 1], 2) == [[2, 1], [2, 1], [1, 1]]", "assert encode_with_max_length([1, 1, 2, 2, 2, 3, 3], 2) == [[2, 1], [2, 2], [1, 2], [2, 3]]", "assert encode_with_max_length([], 3) == []", "assert encode_with_max_length([1, 2, 3, 4], 1) == [[1, 1], [1, 2], [1, 3], [1, 4]]", "assert encode_with_max_length([1, 1, 1, 1, 1], 5) == [[5, 1]]", "assert encode_with_max_length([1, 1, 1, 1, 1], 1) == [[1, 1], [1, 1], [1, 1], [1, 1], [1, 1]]", "assert encode_with_max_length([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 3) == [[1, 1], [2, 2], [3, 3], [3, 4], [1, 4]]", "assert encode_with_max_length([1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3], 4) == [[3, 1], [4, 2], [4, 3], [1, 3]]", "assert encode_with_max_length([5, 5, 5, 5, 5, 5, 5, 5, 5], 3) == [[3, 5], [3, 5], [3, 5]]", "assert encode_with_max_length([1], 1) == [[1, 1]]", "assert encode_with_max_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 3) == [[3, 1], [3, 1], [3, 1], [1, 1]]", "assert encode_with_max_length([1, 1, 2, 2, 3, 3, 3], 2) == [[2, 1], [2, 2], [2, 3], [1, 3]]", "assert encode_with_max_length([1, 1, 1, 2, 2, 2, 3, 3, 3, 3], 2) == [[2, 1], [1, 1], [2, 2], [1, 2], [2, 3], [2, 3]]", "assert encode_with_max_length([1, 1, 1, 1, 2, 2, 2, 2, 2], 3) == [[3, 1], [1, 1], [3, 2], [2, 2]]", "assert encode_with_max_length([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 5) == [[5, 1], [5, 1], [5, 1]]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and inserts a separator string between each encoded element.", "code": "from itertools import groupby\n\ndef encode_with_separator(alist, separator):\n    encoded = [[len(list(group)), key] for key, group in groupby(alist)]\n    result = []\n    for item in encoded:\n        result.extend(item)\n        result.append(separator)\n    return result[:-1]  # Remove the last separator", "task_id": "317_b1cab96c-08e8-49e4-a553-b5072a219557", "test_setup_code": "", "test_list": ["assert encode_with_separator([1, 1, 2, 2, 2, 3], '-') == [2, 1, '-', 3, 2, '-', 1, 3]", "assert encode_with_separator(['a', 'a', 'b', 'b', 'b', 'c'], '*') == [2, 'a', '*', 3, 'b', '*', 1, 'c']", "assert encode_with_separator([1, 2, 3, 4, 5], ',') == [1, 1, ',', 1, 2, ',', 1, 3, ',', 1, 4, ',', 1, 5]", "assert encode_with_separator([], '-') == []", "assert encode_with_separator([1], '-') == [1, 1]", "assert encode_with_separator([1, 1, 1, 1], '|') == [4, 1]", "assert encode_with_separator(['a', 'a', 'a', 'a', 'a'], '+') == [5, 'a']", "assert encode_with_separator([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], '/') == [1, 1, '/', 2, 2, '/', 3, 3, '/', 4, 4]", "assert encode_with_separator(['x', 'y', 'y', 'z'], '-') == [1, 'x', '-', 2, 'y', '-', 1, 'z']", "assert encode_with_separator([True, True, False, False, False], '|') == [2, True, '|', 3, False]", "assert encode_with_separator([None, None, None], '*') == [3, None]", "assert encode_with_separator([1, 1, 2, 3, 3, 3, 4], ',') == [2, 1, ',', 1, 2, ',', 3, 3, ',', 1, 4]", "assert encode_with_separator(['a', 'b', 'b', 'c', 'c', 'c', 'd', 'd'], '+') == [1, 'a', '+', 2, 'b', '+', 3, 'c', '+', 2, 'd']", "assert encode_with_separator([5, 5, 5, 5, 5, 5, 5, 5], '-') == [8, 5]", "assert encode_with_separator(['a', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e'], '|') == [2, 'a', '|', 2, 'b', '|', 2, 'c', '|', 2, 'd', '|', 2, 'e']"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and applies a custom function to each encoded element before returning the result.", "code": "from itertools import groupby\n\ndef encode_with_custom_function(alist, func):\n    return [func(len(list(group)), key) for key, group in groupby(alist)]", "task_id": "317_017195c2-159f-4cd7-98ed-828f81fcdeaa", "test_setup_code": "", "test_list": ["assert encode_with_custom_function([], lambda x, y: (x, y)) == []", "assert encode_with_custom_function([1], lambda x, y: (x, y)) == [(1, 1)]", "assert encode_with_custom_function([1, 1, 1], lambda x, y: (x, y)) == [(3, 1)]", "assert encode_with_custom_function([1, 2, 2, 3, 3, 3], lambda x, y: (x, y)) == [(1, 1), (2, 2), (3, 3)]", "assert encode_with_custom_function([1, 1, 2, 2, 2, 3], lambda x, y: (x, y)) == [(2, 1), (3, 2), (1, 3)]", "assert encode_with_custom_function([1, 1, 1, 2, 2, 3, 3, 3, 3], lambda x, y: (x, y)) == [(3, 1), (2, 2), (4, 3)]", "assert encode_with_custom_function([1, 2, 3, 4, 5], lambda x, y: (x, y)) == [(1, 1), (1, 2), (1, 3), (1, 4), (1, 5)]", "assert encode_with_custom_function([1, 1, 2, 2, 3, 3], lambda x, y: x * y) == [2, 4, 6]", "assert encode_with_custom_function([1, 1, 1, 2, 2, 2, 3, 3, 3], lambda x, y: x + y) == [4, 5, 6]", "assert encode_with_custom_function([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], lambda x, y: x * y) == [1, 4, 9, 16]", "assert encode_with_custom_function([1, 1, 2, 2, 3, 3, 4, 4], lambda x, y: x + y) == [3, 4, 5, 6]", "assert encode_with_custom_function([1, 1, 1, 1, 1], lambda x, y: x * y) == [5]", "assert encode_with_custom_function([1, 2, 3, 4, 5], lambda x, y: x + y) == [2, 3, 4, 5, 6]", "assert encode_with_custom_function([1, 1, 2, 2, 3, 3, 4, 4, 5, 5], lambda x, y: x * y) == [2, 4, 6, 8, 10]", "assert encode_with_custom_function([1, 2, 2, 3, 3, 4, 4, 4], lambda x, y: x + y) == [2, 4, 5, 7]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a dictionary where each key is an element and the value is the total count of that element in the list.", "code": "from itertools import groupby\n\ndef encode_with_element_count(alist):\n    result = {}\n    for key, group in groupby(alist):\n        result[key] = result.get(key, 0) + len(list(group))\n    return result", "task_id": "317_8a18c78c-02e4-4356-9634-74c8829aea4b", "test_setup_code": "", "test_list": ["assert encode_with_element_count([1, 1, 2, 2, 2, 3, 3, 1]) == {1: 3, 2: 3, 3: 2}", "assert encode_with_element_count(['a', 'a', 'b', 'b', 'b', 'c', 'a']) == {'a': 3, 'b': 3, 'c': 1}", "assert encode_with_element_count([]) == {}", "assert encode_with_element_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a list of run lengths only, without the elements.", "code": "from itertools import groupby\n\ndef encode_with_run_lengths(alist):\n    return [len(list(group)) for key, group in groupby(alist)]", "task_id": "317_eb611016-8fd8-42e6-832c-8fe8ab698a7d", "test_setup_code": "", "test_list": ["assert encode_with_run_lengths([1, 1, 2, 2, 2, 3]) == [2, 3, 1]", "assert encode_with_run_lengths(['a', 'a', 'b', 'b', 'b', 'c', 'c', 'a']) == [2, 3, 2, 1]", "assert encode_with_run_lengths([]) == []", "assert encode_with_run_lengths([5, 5, 5, 5, 5]) == [5]"], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a string and returns a list of tuples where each tuple contains the character and its count, but the characters alternate between uppercase and lowercase.", "code": "from itertools import groupby\n\ndef encode_with_alternating_case(s):\n    result = []\n    for i, (char, group) in enumerate(groupby(s)):\n        count = len(list(group))\n        if i % 2 == 0:\n            result.append((char.upper(), count))\n        else:\n            result.append((char.lower(), count))\n    return result", "task_id": "317_31423995-9fb3-43c9-bc81-dfc47b424efb", "test_setup_code": "", "test_list": ["assert encode_with_alternating_case('aaBBccDD') == [('A', 2), ('b', 2), ('C', 2), ('d', 2)]", "assert encode_with_alternating_case('aAaAaA') == [('A', 1), ('a', 1), ('A', 1), ('a', 1), ('A', 1), ('a', 1)]", "assert encode_with_alternating_case('') == []", "assert encode_with_alternating_case('a') == [('A', 1)]"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given 1D array.", "code": "def max_sum_1d_array(arr):\n    incl = arr[0]\n    excl = 0\n    for i in range(1, len(arr)):\n        excl_new = max(excl, incl)\n        incl = excl + arr[i]\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_6c51571b-836c-44dc-bb14-045ad1cd0952", "test_setup_code": "", "test_list": ["assert max_sum_1d_array([3, 2, 5, 10, 7]) == 15", "assert max_sum_1d_array([3, 2, 7, 10]) == 13", "assert max_sum_1d_array([5, 5, 10, 100, 10, 5]) == 110", "assert max_sum_1d_array([1, 2, 3]) == 4"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 3 x n.", "code": "def max_sum_3xN_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0], grid[2][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i], grid[2][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_188c0fc3-f9b0-405a-b43e-58787edabedb", "test_setup_code": "", "test_list": ["assert max_sum_3xN_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3) == 15", "assert max_sum_3xN_grid([[1, 1, 1], [1, 1, 1], [1, 1, 1]], 3) == 3", "assert max_sum_3xN_grid([[1, 2, 3], [1, 2, 3], [1, 2, 3]], 3) == 6", "assert max_sum_3xN_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 7", "assert max_sum_3xN_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == 13", "assert max_sum_3xN_grid([[0, 0, 0], [0, 0, 0], [0, 0, 0]], 3) == 0", "assert max_sum_3xN_grid([[1, 0, 3], [0, 5, 0], [7, 0, 9]], 3) == 16", "assert max_sum_3xN_grid([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 4) == 22", "assert max_sum_3xN_grid([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 4) == 30", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15]], 5) == 45", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], 5) == 9", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]], 6) == 63", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5, 6, 7], [8, 9, 10, 11, 12, 13, 14], [15, 16, 17, 18, 19, 20, 21]], 7) == 84", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16], [17, 18, 19, 20, 21, 22, 23, 24]], 8) == 105", "assert max_sum_3xN_grid([[1, 2, 3, 4, 5, 6, 7, 8, 9], [10, 11, 12, 13, 14, 15, 16, 17, 18], [19, 20, 21, 22, 23, 24, 25, 26, 27]], 9) == 126"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given 2D array.", "code": "def max_sum_2d_array(arr):\n    incl = max(arr[0][0], arr[1][0])\n    excl = 0\n    for i in range(1, len(arr[0])):\n        excl_new = max(excl, incl)\n        incl = excl + max(arr[0][i], arr[1][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_dff2ce8f-1590-4a09-a765-3261d616781f", "test_setup_code": "", "test_list": ["assert max_sum_2d_array([[1, 2, 3], [4, 5, 6]]) == 10", "assert max_sum_2d_array([[1, 2, 9], [5, 1, 5]]) == 10", "assert max_sum_2d_array([[1, 20, 3], [4, 5, 6]]) == 24", "assert max_sum_2d_array([[1, 2], [3, 4]]) == 4", "assert max_sum_2d_array([[5, 5, 10, 100, 10, 5], [10, 5, 5, 10, 5, 10]]) == 110", "assert max_sum_2d_array([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]]) == 9", "assert max_sum_2d_array([[0, 0, 0], [0, 0, 0]]) == 0", "assert max_sum_2d_array([[1, 2, 3, 1], [1, 2, 3, 1]]) == 4", "assert max_sum_2d_array([[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]]) == 12", "assert max_sum_2d_array([[1], [2]]) == 2", "assert max_sum_2d_array([[10, 1, 1, 10], [1, 10, 10, 1]]) == 20", "assert max_sum_2d_array([[1, 2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 3, 2, 1]]) == 16", "assert max_sum_2d_array([[1, 3, 1, 3, 100], [2, 2, 2, 2, 2]]) == 105", "assert max_sum_2d_array([[1, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1]]) == 3", "assert max_sum_2d_array([[5, 5, 5, 5, 5, 5], [5, 5, 5, 5, 5, 5]]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given circular array.", "code": "def max_sum_circular_array(arr):\n    def max_sum_non_adjacent(arr):\n        incl = arr[0]\n        excl = 0\n        for i in range(1, len(arr)):\n            excl_new = max(excl, incl)\n            incl = excl + arr[i]\n            excl = excl_new\n        return max(excl, incl)\n    return max(max_sum_non_adjacent(arr[:-1]), max_sum_non_adjacent(arr[1:]))", "task_id": "314_f1020f7b-274a-4be1-935e-816c69f17eae", "test_setup_code": "", "test_list": ["assert max_sum_circular_array([5, 5, 10, 100, 10, 5]) == 110", "assert max_sum_circular_array([3, 2, 7, 10]) == 13", "assert max_sum_circular_array([3, 2, 5, 10, 7]) == 15", "assert max_sum_circular_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30", "assert max_sum_circular_array([10, 2, 2, 100, 2, 2, 10]) == 120", "assert max_sum_circular_array([1, 20, 3]) == 20", "assert max_sum_circular_array([5, 1, 1, 5]) == 10", "assert max_sum_circular_array([1, 2, 3, 1]) == 4", "assert max_sum_circular_array([2, 3, 2]) == 3", "assert max_sum_circular_array([10, 1, 1, 10, 1, 1, 10]) == 30", "assert max_sum_circular_array([0, 0, 0, 0, 0]) == 0", "assert max_sum_circular_array([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]) == 5", "assert max_sum_circular_array([1]) == 1", "assert max_sum_circular_array([1, 2]) == 2", "assert max_sum_circular_array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 64"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent (including diagonals) for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_diagonals(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_1527988e-bc6c-4118-87f7-f9a078c696df", "test_setup_code": "", "test_list": ["assert max_sum_2d_grid_with_diagonals([[1, 2, 3], [4, 5, 6]], 3) == 10", "assert max_sum_2d_grid_with_diagonals([[1, 2], [3, 4]], 2) == 4", "assert max_sum_2d_grid_with_diagonals([[1, 1, 1], [1, 1, 1]], 3) == 2", "assert max_sum_2d_grid_with_diagonals([[5, 10, 15], [10, 5, 10]], 3) == 25", "assert max_sum_2d_grid_with_diagonals([[1, 2, 3, 4], [4, 3, 2, 1]], 4) == 8", "assert max_sum_2d_grid_with_diagonals([[0, 0, 0], [0, 0, 0]], 3) == 0", "assert max_sum_2d_grid_with_diagonals([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], 5) == 12", "assert max_sum_2d_grid_with_diagonals([[1, 100, 1], [1, 1, 100]], 3) == 200", "assert max_sum_2d_grid_with_diagonals([[1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]], 6) == 15", "assert max_sum_2d_grid_with_diagonals([[10, 20, 30], [30, 20, 10]], 3) == 50", "assert max_sum_2d_grid_with_diagonals([[1, 2, 3, 4, 5, 6, 7], [7, 6, 5, 4, 3, 2, 1]], 7) == 16", "assert max_sum_2d_grid_with_diagonals([[1]], 1) == 1", "assert max_sum_2d_grid_with_diagonals([[1, 2], [2, 1]], 2) == 2", "assert max_sum_2d_grid_with_diagonals([[1, 3, 1], [1, 1, 3]], 3) == 6", "assert max_sum_2d_grid_with_diagonals([[10, 20, 30, 40], [40, 30, 20, 10]], 4) == 70"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a penalty for choosing adjacent numbers for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_penalty(grid, n, penalty):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i]) - penalty\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_b55f7887-8a2b-4549-9e87-422c8fb80ecf", "test_setup_code": "", "test_list": ["assert max_sum_2d_grid_with_penalty([[1, 2, 3], [4, 5, 6]], 3, 1) == 10", "assert max_sum_2d_grid_with_penalty([[1, 2, 3], [4, 5, 6]], 3, 0) == 12", "assert max_sum_2d_grid_with_penalty([[1, 2, 3], [4, 5, 6]], 3, 2) == 8", "assert max_sum_2d_grid_with_penalty([[1, 2], [3, 4]], 2, 1) == 5", "assert max_sum_2d_grid_with_penalty([[1, 2], [3, 4]], 2, 0) == 6", "assert max_sum_2d_grid_with_penalty([[1, 2], [3, 4]], 2, 2) == 4", "assert max_sum_2d_grid_with_penalty([[5, 5, 10], [10, 5, 5]], 3, 1) == 15", "assert max_sum_2d_grid_with_penalty([[5, 5, 10], [10, 5, 5]], 3, 0) == 20", "assert max_sum_2d_grid_with_penalty([[5, 5, 10], [10, 5, 5]], 3, 2) == 13", "assert max_sum_2d_grid_with_penalty([[1, 1, 1, 1], [1, 1, 1, 1]], 4, 1) == 3", "assert max_sum_2d_grid_with_penalty([[1, 1, 1, 1], [1, 1, 1, 1]], 4, 0) == 4", "assert max_sum_2d_grid_with_penalty([[1, 1, 1, 1], [1, 1, 1, 1]], 4, 2) == 2", "assert max_sum_2d_grid_with_penalty([[10, 20, 30], [30, 20, 10]], 3, 5) == 45", "assert max_sum_2d_grid_with_penalty([[10, 20, 30], [30, 20, 10]], 3, 10) == 35", "assert max_sum_2d_grid_with_penalty([[10, 20, 30], [30, 20, 10]], 3, 0) == 60"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a bonus for choosing non-adjacent numbers for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_bonus(grid, n, bonus):\n    incl = max(grid[0][0], grid[1][0]) + bonus\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i]) + bonus\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_65bac10d-1cff-4c5e-9369-3a8c96be0534", "test_setup_code": "", "test_list": ["assert max_sum_2d_grid_with_bonus([[1, 2, 3], [4, 5, 6]], 3, 1) == 12", "assert max_sum_2d_grid_with_bonus([[1, 2, 3], [1, 2, 3]], 3, 2) == 10", "assert max_sum_2d_grid_with_bonus([[1, 1, 1], [1, 1, 1]], 3, 1) == 4", "assert max_sum_2d_grid_with_bonus([[10, 20, 30], [5, 15, 25]], 3, 5) == 60", "assert max_sum_2d_grid_with_bonus([[1, 2], [3, 4]], 2, 1) == 7", "assert max_sum_2d_grid_with_bonus([[1, 2], [1, 2]], 2, 2) == 6", "assert max_sum_2d_grid_with_bonus([[0, 0, 0], [0, 0, 0]], 3, 1) == 1", "assert max_sum_2d_grid_with_bonus([[1, 3, 1], [2, 1, 2]], 3, 2) == 9", "assert max_sum_2d_grid_with_bonus([[5, 5, 5], [5, 5, 5]], 3, 3) == 18", "assert max_sum_2d_grid_with_bonus([[1, 2, 3, 4], [4, 3, 2, 1]], 4, 1) == 12", "assert max_sum_2d_grid_with_bonus([[1, 2, 3, 4], [1, 2, 3, 4]], 4, 2) == 14", "assert max_sum_2d_grid_with_bonus([[10, 20, 30, 40], [5, 15, 25, 35]], 4, 5) == 80", "assert max_sum_2d_grid_with_bonus([[1, 1, 1, 1], [1, 1, 1, 1]], 4, 1) == 5", "assert max_sum_2d_grid_with_bonus([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], 5, 2) == 18", "assert max_sum_2d_grid_with_bonus([[1, 2, 3, 4, 5], [1, 2, 3, 4, 5]], 5, 3) == 20"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a restriction on the maximum value for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_restriction(grid, n, restriction):\n    incl = max(min(grid[0][0], restriction), min(grid[1][0], restriction))\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(min(grid[0][i], restriction), min(grid[1][i], restriction))\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_a1ee2e31-28f9-4fce-8f0a-f8430e797b9f", "test_setup_code": "", "test_list": ["assert max_sum_2d_grid_with_restriction([[1, 2, 3], [4, 5, 6]], 3, 5) == 10", "assert max_sum_2d_grid_with_restriction([[1, 2, 3], [4, 5, 6]], 3, 4) == 8", "assert max_sum_2d_grid_with_restriction([[1, 2, 3], [4, 5, 6]], 3, 3) == 6", "assert max_sum_2d_grid_with_restriction([[1, 2, 3], [4, 5, 6]], 3, 2) == 4", "assert max_sum_2d_grid_with_restriction([[1, 2, 3], [4, 5, 6]], 3, 1) == 2", "assert max_sum_2d_grid_with_restriction([[1, 2], [3, 4]], 2, 3) == 5", "assert max_sum_2d_grid_with_restriction([[1, 2], [3, 4]], 2, 2) == 4", "assert max_sum_2d_grid_with_restriction([[1, 2], [3, 4]], 2, 1) == 2", "assert max_sum_2d_grid_with_restriction([[1, 2, 3, 4], [5, 6, 7, 8]], 4, 5) == 15", "assert max_sum_2d_grid_with_restriction([[1, 2, 3, 4], [5, 6, 7, 8]], 4, 4) == 12", "assert max_sum_2d_grid_with_restriction([[1, 2, 3, 4], [5, 6, 7, 8]], 4, 3) == 9", "assert max_sum_2d_grid_with_restriction([[1, 2, 3, 4], [5, 6, 7, 8]], 4, 2) == 6", "assert max_sum_2d_grid_with_restriction([[1, 2, 3, 4], [5, 6, 7, 8]], 4, 1) == 4", "assert max_sum_2d_grid_with_restriction([[10, 20, 30], [40, 50, 60]], 3, 25) == 65", "assert max_sum_2d_grid_with_restriction([[10, 20, 30], [40, 50, 60]], 3, 15) == 45"], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there are multiple restrictions on the maximum values for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_multiple_restrictions(grid, n, restrictions):\n    incl = max(min(grid[0][0], restrictions[0]), min(grid[1][0], restrictions[1]))\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(min(grid[0][i], restrictions[0]), min(grid[1][i], restrictions[1]))\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_34bd7499-3b35-43fd-a11e-13e60aba7070", "test_setup_code": "", "test_list": ["assert max_sum_2d_grid_with_multiple_restrictions([[1, 2, 3], [4, 5, 6]], 3, [3, 6]) == 9", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2, 3], [4, 5, 6]], 3, [2, 5]) == 7", "assert max_sum_2d_grid_with_multiple_restrictions([[10, 20, 30], [40, 50, 60]], 3, [30, 60]) == 90", "assert max_sum_2d_grid_with_multiple_restrictions([[10, 20, 30], [40, 50, 60]], 3, [20, 50]) == 70", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2], [3, 4]], 2, [2, 4]) == 4", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2], [3, 4]], 2, [1, 3]) == 3", "assert max_sum_2d_grid_with_multiple_restrictions([[5, 5, 10, 100, 10, 5], [10, 5, 5, 10, 5, 10]], 6, [100, 100]) == 110", "assert max_sum_2d_grid_with_multiple_restrictions([[5, 5, 10, 100, 10, 5], [10, 5, 5, 10, 5, 10]], 6, [50, 50]) == 55", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2, 3, 4], [5, 6, 7, 8]], 4, [4, 8]) == 12", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2, 3, 4], [5, 6, 7, 8]], 4, [3, 7]) == 10", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 1, 1, 1], [1, 1, 1, 1]], 4, [1, 1]) == 2", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 1, 1, 1], [1, 1, 1, 1]], 4, [2, 2]) == 2", "assert max_sum_2d_grid_with_multiple_restrictions([[100, 200, 300], [400, 500, 600]], 3, [300, 600]) == 900", "assert max_sum_2d_grid_with_multiple_restrictions([[100, 200, 300], [400, 500, 600]], 3, [200, 500]) == 700", "assert max_sum_2d_grid_with_multiple_restrictions([[1, 2, 3, 4, 5], [5, 4, 3, 2, 1]], 5, [5, 5]) == 15"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_cc12d671-4af5-472b-a821-26a3bbbccd46", "test_setup_code": "", "test_list": ["assert find_first_occurrence([1, 2, 2, 2, 3, 4, 5], 2) == 1", "assert find_first_occurrence([1, 2, 3, 4, 5], 6) == -1", "assert find_first_occurrence([], 1) == -1", "assert find_first_occurrence([1, 1, 1, 1, 1], 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a number greater than a given number in a sorted array.", "code": "def find_last_occurrence_greater_than(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_eb551150-a649-4510-bfea-8a0270491ca9", "test_setup_code": "", "test_list": ["assert find_last_occurrence_greater_than([1, 2, 3, 4, 5, 6], 3) == 5", "assert find_last_occurrence_greater_than([1, 2, 3, 4, 5, 6], 6) == -1", "assert find_last_occurrence_greater_than([1, 2, 2, 2, 3, 4, 5], 2) == 6", "assert find_last_occurrence_greater_than([1, 2, 3, 4, 5, 6], 0) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a number less than a given number in a sorted array.", "code": "def find_first_occurrence_less_than(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_7bb413a0-f009-493d-97c5-40135cf2e28d", "test_setup_code": "", "test_list": ["assert find_first_occurrence_less_than([1, 2, 3, 4, 5], 3) == 1", "assert find_first_occurrence_less_than([1, 2, 3, 4, 5], 1) == -1", "assert find_first_occurrence_less_than([1, 2, 3, 4, 5], 6) == 4", "assert find_first_occurrence_less_than([], 3) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the index of the number closest to a given number in a sorted array.", "code": "def find_closest_number(A, x):\n    left, right = 0, len(A) - 1\n    closest_index = -1\n    min_diff = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        if abs(A[mid] - x) < min_diff:\n            min_diff = abs(A[mid] - x)\n            closest_index = mid\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return closest_index", "task_id": "316_08330e40-e24f-40fe-a11d-983deb7cfb9f", "test_setup_code": "", "test_list": ["assert find_closest_number([1, 2, 4, 5, 6, 8, 9], 7) == 4", "assert find_closest_number([1, 3, 5, 7, 9], 4) == 1", "assert find_closest_number([1, 2, 3, 4, 5], 10) == 4", "assert find_closest_number([-5, -2, 0, 1, 3, 5, 7], -3) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a multiple of a given number in a sorted array.", "code": "def find_first_occurrence_of_multiple(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % x == 0:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_f116523e-0019-4ad2-a73d-ac80171ebecc", "test_setup_code": "", "test_list": ["assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 2) == 1", "assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 3) == 2", "assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 4) == 3", "assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 5) == 4", "assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 6) == 5", "assert find_first_occurrence_of_multiple([1, 2, 3, 4, 5, 6], 7) == -1", "assert find_first_occurrence_of_multiple([2, 4, 6, 8, 10], 2) == 0", "assert find_first_occurrence_of_multiple([2, 4, 6, 8, 10], 5) == 4", "assert find_first_occurrence_of_multiple([2, 4, 6, 8, 10], 3) == -1", "assert find_first_occurrence_of_multiple([], 3) == -1", "assert find_first_occurrence_of_multiple([3, 6, 9, 12], 3) == 0", "assert find_first_occurrence_of_multiple([5, 10, 15, 20], 5) == 0", "assert find_first_occurrence_of_multiple([5, 10, 15, 20], 10) == 1", "assert find_first_occurrence_of_multiple([5, 10, 15, 20], 20) == 3", "assert find_first_occurrence_of_multiple([1, 3, 5, 7, 9], 2) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a multiple of a given number in a sorted array.", "code": "def find_last_occurrence_of_multiple(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % x == 0:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_49e2368b-cec2-45b0-bfd9-d10a45fda7a8", "test_setup_code": "", "test_list": ["assert find_last_occurrence_of_multiple([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == 9", "assert find_last_occurrence_of_multiple([1, 3, 5, 7, 9], 2) == -1", "assert find_last_occurrence_of_multiple([2, 4, 6, 8, 10], 3) == 2", "assert find_last_occurrence_of_multiple([], 1) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of an even number in a sorted array.", "code": "def find_first_occurrence_of_even(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 == 0:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_ad13e09f-58ba-4b77-91e0-cdef6b01c252", "test_setup_code": "", "test_list": ["assert find_first_occurrence_of_even([1, 3, 5, 6, 8, 10]) == 3", "assert find_first_occurrence_of_even([2, 4, 6, 8, 10]) == 0", "assert find_first_occurrence_of_even([1, 3, 5, 7, 9]) == -1", "assert find_first_occurrence_of_even([]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of an odd number in a sorted array.", "code": "def find_last_occurrence_of_odd(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 != 0:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_e4f267a4-3cdd-4799-8817-9d4da4c41856", "test_setup_code": "", "test_list": ["assert find_last_occurrence_of_odd([1, 3, 5, 6, 8, 10]) == 2", "assert find_last_occurrence_of_odd([2, 4, 6, 8, 10]) == -1", "assert find_last_occurrence_of_odd([1, 3, 5, 7, 9]) == 4", "assert find_last_occurrence_of_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a prime number in a sorted array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_last_occurrence_of_prime(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_prime(A[mid]):\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_2dc1e6a2-de12-43bf-87c6-ea669a960aa4", "test_setup_code": "", "test_list": ["assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]) == 9", "assert find_last_occurrence_of_prime([4, 6, 8, 10, 12, 14, 15, 16, 18, 20]) == -1", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24]) == 8", "assert find_last_occurrence_of_prime([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 6", "assert find_last_occurrence_of_prime([29, 31, 37, 41, 43, 47, 53, 59, 61, 67]) == 9", "assert find_last_occurrence_of_prime([1, 4, 6, 8, 9, 10, 12, 14, 15, 16]) == -1", "assert find_last_occurrence_of_prime([2]) == 0", "assert find_last_occurrence_of_prime([4]) == -1", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 29]) == 10", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29]) == 14", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 25, 26, 27, 28, 30]) == 8", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67]) == 23", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 68, 69, 70, 71]) == 27", "assert find_last_occurrence_of_prime([2, 3, 5, 7, 11, 13, 17, 19, 23, 24, 25, 26, 27, 28, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 68, 69, 70, 71, 73, 79, 83, 89, 97]) == 32", "assert find_last_occurrence_of_prime([]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain at least one vowel (a, e, i, o, u) using regex.", "code": "import re\ndef find_words_with_vowels(text):\n  return re.findall(r'\\b\\w*[aeiou]\\w*\\b', text)", "task_id": "319_89f56819-1ffa-4cc6-a487-7dcbced78205", "test_setup_code": "", "test_list": ["assert find_words_with_vowels('hello world') == ['hello']", "assert find_words_with_vowels('sky fly by') == []", "assert find_words_with_vowels('This is a test') == ['This', 'is', 'a']", "assert find_words_with_vowels('AEIOU are vowels') == ['AEIOU', 'are', 'vowels']", "assert find_words_with_vowels('bcdfg') == []", "assert find_words_with_vowels('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'over', 'the', 'lazy', 'dog']", "assert find_words_with_vowels('') == []", "assert find_words_with_vowels('123 456 789') == []", "assert find_words_with_vowels('a e i o u') == ['a', 'e', 'i', 'o', 'u']", "assert find_words_with_vowels('Python programming is fun') == ['programming', 'is']", "assert find_words_with_vowels('Why do you ask?') == ['do', 'you', 'ask']", "assert find_words_with_vowels('bcd fgh jkl') == []", "assert find_words_with_vowels('An example sentence with multiple vowels') == ['An', 'example', 'sentence', 'with', 'multiple', 'vowels']", "assert find_words_with_vowels('Hello, how are you?') == ['Hello', 'how', 'are', 'you']", "assert find_words_with_vowels('abcdefghijklmnopqrstuvwxyz') == ['abcdefghijklmnopqrstuvwxyz']"], "challenge_test_list": []}
{"text": "Write a function to find all capitalized words in the given string using regex.", "code": "import re\ndef find_capitalized_words(text):\n  return re.findall(r'\\b[A-Z][a-z]*\\b', text)", "task_id": "319_f921def8-4180-46d3-b97f-42b56c7d04b6", "test_setup_code": "", "test_list": ["assert find_capitalized_words('Hello World') == ['Hello', 'World']", "assert find_capitalized_words('This is a Test') == ['This', 'Test']", "assert find_capitalized_words('no Capitalized words here') == []", "assert find_capitalized_words('MixedCASE Words') == ['Words']", "assert find_capitalized_words('Single') == ['Single']", "assert find_capitalized_words('') == []", "assert find_capitalized_words('ALLCAPITALS') == []", "assert find_capitalized_words('lowercase') == []", "assert find_capitalized_words('Capitalized Words In A Sentence') == ['Capitalized', 'Words', 'In', 'A', 'Sentence']", "assert find_capitalized_words('123 Numbers 456') == ['Numbers']", "assert find_capitalized_words('Special Characters! @#$$%^&*()') == ['Special', 'Characters']", "assert find_capitalized_words('New\nLine') == ['New', 'Line']", "assert find_capitalized_words('Tab\tCharacter') == ['Tab', 'Character']", "assert find_capitalized_words('Hyphenated-Word') == ['Word']", "assert find_capitalized_words('CamelCaseWord') == ['CamelCaseWord']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain at least one digit using regex.", "code": "import re\ndef find_words_with_numbers(text):\n  return re.findall(r'\\b\\w*\\d\\w*\\b', text)", "task_id": "319_96b1267d-a576-47c5-b42b-5f57ac7b3c71", "test_setup_code": "", "test_list": ["assert find_words_with_numbers('My phone number is 1234 and my zip code is 56789') == ['1234', '56789']", "assert find_words_with_numbers('There are 3 apples and 4 oranges in the basket') == ['3', '4']", "assert find_words_with_numbers('No digits here!') == []", "assert find_words_with_numbers('The password is passw0rd and the pin is 1234') == ['passw0rd', '1234']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that end with the letter 's' using regex.", "code": "import re\ndef find_words_ending_with_s(text):\n  return re.findall(r'\\b\\w*s\\b', text)", "task_id": "319_e6224d60-90b2-40c3-b003-215782baaa5a", "test_setup_code": "", "test_list": ["assert find_words_ending_with_s('This is a test string with words') == ['This', 'is', 'words']", "assert find_words_ending_with_s('No words end with s here') == []", "assert find_words_ending_with_s('Dogs and cats are pets') == ['Dogs', 'cats', 'pets']", "assert find_words_ending_with_s('s s s s s') == ['s', 's', 's', 's', 's']", "assert find_words_ending_with_s('Mississippi is a river') == ['Mississippi', 'is']", "assert find_words_ending_with_s('Ends with s, ends with s.') == ['Ends', 's', 'ends', 's']", "assert find_words_ending_with_s('This sentence has no words ending with s') == []", "assert find_words_ending_with_s('s') == ['s']", "assert find_words_ending_with_s('Words like this and those') == ['Words', 'this', 'those']", "assert find_words_ending_with_s('') == []", "assert find_words_ending_with_s('Multiple words: cats, dogs, and birds') == ['cats', 'dogs', 'birds']", "assert find_words_ending_with_s('Words with special characters: pass, class, mass!') == ['pass', 'class', 'mass']", "assert find_words_ending_with_s('Uppercase and lowercase: S, s, Ss, ss') == ['S', 's', 'Ss', 'ss']", "assert find_words_ending_with_s('Hyphenated-words: cross-sections, non-sense') == ['cross-sections', 'non-sense']", "assert find_words_ending_with_s('Numbers and words: 123s, 456s, words') == ['123s', '456s', 'words']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that start with a consonant using regex.", "code": "import re\ndef find_words_starting_with_consonant(text):\n  return re.findall(r'\\b[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\\w*\\b', text)", "task_id": "319_03d8c377-3251-4a1f-a09e-48c25ed48f8c", "test_setup_code": "", "test_list": ["assert find_words_starting_with_consonant('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'the', 'lazy', 'dog']", "assert find_words_starting_with_consonant('An apple a day keeps the doctor away') == ['day', 'keeps', 'the', 'doctor', 'away']", "assert find_words_starting_with_consonant('Hello World!') == ['Hello', 'World']", "assert find_words_starting_with_consonant('') == []", "assert find_words_starting_with_consonant('123 456 789') == []", "assert find_words_starting_with_consonant('A quick brown fox') == ['quick', 'brown', 'fox']", "assert find_words_starting_with_consonant('Zebra and lion in the zoo') == ['Zebra', 'lion', 'the', 'zoo']", "assert find_words_starting_with_consonant('Python is great') == ['Python', 'great']", "assert find_words_starting_with_consonant('Jump over the lazy dog') == ['Jump', 'over', 'the', 'lazy', 'dog']", "assert find_words_starting_with_consonant('Consonants are fun') == ['Consonants', 'fun']", "assert find_words_starting_with_consonant('I am learning regex') == ['learning', 'regex']", "assert find_words_starting_with_consonant('This is a test') == ['This', 'test']", "assert find_words_starting_with_consonant('Bananas are yellow') == ['Bananas', 'yellow']", "assert find_words_starting_with_consonant('Xylophone and violin') == ['Xylophone', 'violin']", "assert find_words_starting_with_consonant('Umbrella and raincoat') == ['raincoat']"], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words (words that read the same backward as forward) in the given string using regex.", "code": "import re\ndef find_palindromic_words(text):\n  return [word for word in re.findall(r'\\b\\w+\\b', text) if word == word[::-1]]", "task_id": "319_a4a55d78-3665-4e2d-87aa-3d5807bc341a", "test_setup_code": "", "test_list": ["assert find_palindromic_words('madam racecar level') == ['madam', 'racecar', 'level']", "assert find_palindromic_words('hello world') == []", "assert find_palindromic_words('A man a plan a canal Panama') == []", "assert find_palindromic_words('') == []", "assert find_palindromic_words('noon civic radar') == ['noon', 'civic', 'radar']", "assert find_palindromic_words('Was it a car or a cat I saw') == []", "assert find_palindromic_words('Able was I ere I saw Elba') == []", "assert find_palindromic_words('deified rotator repaper') == ['deified', 'rotator', 'repaper']", "assert find_palindromic_words('12321 45654 789987') == ['12321', '45654', '789987']", "assert find_palindromic_words('palindrome') == []", "assert find_palindromic_words('refer kayak level') == ['refer', 'kayak', 'level']", "assert find_palindromic_words('step on no pets') == []", "assert find_palindromic_words('madam in Eden Im Adam') == []", "assert find_palindromic_words('Eva can I see bees in a cave') == []", "assert find_palindromic_words('12321 noon civic radar 45654') == ['12321', 'noon', 'civic', 'radar', '45654']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain double letters (e.g., 'letter') using regex.", "code": "import re\ndef find_words_with_double_letters(text):\n  return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "319_6f38a960-c6cf-49fa-912d-6e56ec804b07", "test_setup_code": "", "test_list": ["assert find_words_with_double_letters('This is a test sentence with the word letter in it.') == ['letter']", "assert find_words_with_double_letters('Look at the book on the bookshelf.') == ['Look', 'book', 'bookshelf']", "assert find_words_with_double_letters('No double letters here.') == []", "assert find_words_with_double_letters('A sentence with multiple words like balloon, committee, and address.') == ['balloon', 'committee', 'address']", "assert find_words_with_double_letters('Mississippi is a state with many double letters.') == ['Mississippi']", "assert find_words_with_double_letters('The quick brown fox jumps over the lazy dog.') == []", "assert find_words_with_double_letters('I need a good book to read.') == ['good', 'book']", "assert find_words_with_double_letters('Success is not the key to happiness.') == ['Success']", "assert find_words_with_double_letters('The address is 1234 Elm Street.') == ['address']", "assert find_words_with_double_letters('Can you see the committee meeting?') == ['committee', 'meeting']", "assert find_words_with_double_letters('The balloon popped.') == ['balloon']", "assert find_words_with_double_letters('This is a test with no double letters.') == []", "assert find_words_with_double_letters('The coffee is too hot.') == ['coffee']", "assert find_words_with_double_letters('She sells seashells by the seashore.') == ['seashells']", "assert find_words_with_double_letters('I will call you tomorrow.') == ['call', 'tomorrow']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain special characters (e.g., 'hello!') using regex.", "code": "import re\ndef find_words_with_special_characters(text):\n  return re.findall(r'\\b\\w*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+\\w*\\b', text)", "task_id": "319_c1ecaceb-3225-4e7b-8129-9a77d2037771", "test_setup_code": "", "test_list": ["assert find_words_with_special_characters('Hello world!') == ['world!']", "assert find_words_with_special_characters('Hello, world!') == ['world!']", "assert find_words_with_special_characters('Hello! World') == ['Hello!']", "assert find_words_with_special_characters('No special characters here') == []", "assert find_words_with_special_characters('Multiple! special$ characters@') == ['Multiple!', 'special$', 'characters@']", "assert find_words_with_special_characters('') == []", "assert find_words_with_special_characters('!@#$%^&*()') == []", "assert find_words_with_special_characters('word_with_underscore') == []", "assert find_words_with_special_characters('hyphenated-word') == ['hyphenated-word']", "assert find_words_with_special_characters('email@example.com') == ['email@example.com']", "assert find_words_with_special_characters('a!b@c#d$e%f^g&h*i(j)k_l+m-n=o[p]q{r}s;t:u\"v\\\\w|x,y<z>.?/') == ['a!b@c#d$e%f^g&h*i(j)k_l+m-n=o[p]q{r}s;t:u\"v\\\\w|x,y<z>.?/']", "assert find_words_with_special_characters('word1! word2@ word3#') == ['word1!', 'word2@', 'word3#']", "assert find_words_with_special_characters('!word') == ['!word']", "assert find_words_with_special_characters('word!') == ['word!']", "assert find_words_with_special_characters('wo!rd') == ['wo!rd']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that start with a given prefix using regex.", "code": "import re\ndef find_words_with_prefix(text, prefix):\n  return re.findall(r'\\b' + re.escape(prefix) + r'\\w*\\b', text)", "task_id": "319_e18a8bf7-2bcb-4b72-a79b-1501f83ad8d4", "test_setup_code": "", "test_list": ["assert find_words_with_prefix('apple apricot banana', 'ap') == ['apple', 'apricot']", "assert find_words_with_prefix('the quick brown fox jumps over the lazy dog', 'qu') == ['quick']", "assert find_words_with_prefix('hello world', 'wo') == ['world']", "assert find_words_with_prefix('hello world', 'he') == ['hello']", "assert find_words_with_prefix('hello world', 'z') == []", "assert find_words_with_prefix('a quick brown fox', 'a') == ['a']", "assert find_words_with_prefix('a quick brown fox', 'q') == ['quick']", "assert find_words_with_prefix('a quick brown fox', 'b') == ['brown']", "assert find_words_with_prefix('a quick brown fox', 'f') == ['fox']", "assert find_words_with_prefix('a quick brown fox', 'x') == []", "assert find_words_with_prefix('prefix preposition prelude', 'pre') == ['prefix', 'preposition', 'prelude']", "assert find_words_with_prefix('prefix preposition prelude', 'prefix') == ['prefix']", "assert find_words_with_prefix('prefix preposition prelude', 'prepo') == ['preposition']", "assert find_words_with_prefix('prefix preposition prelude', 'prel') == ['prelude']", "assert find_words_with_prefix('prefix preposition prelude', 'p') == ['prefix', 'preposition', 'prelude']"], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that end with a given suffix using regex.", "code": "import re\ndef find_words_with_suffix(text, suffix):\n  return re.findall(r'\\b\\w*' + re.escape(suffix) + r'\\b', text)", "task_id": "319_efbd8925-7811-47fa-900c-e1231e8342a4", "test_setup_code": "", "test_list": ["assert find_words_with_suffix('The cats and dogs are playing in the garden', 's') == ['cats', 'dogs']", "assert find_words_with_suffix('She sells sea shells by the sea shore', 'sea') == ['sea']", "assert find_words_with_suffix('Running, jumping, and swimming are fun activities', 'ing') == ['Running', 'jumping', 'swimming']", "assert find_words_with_suffix('No words end with this suffix', 'xyz') == []"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum area of a rectangle with given perimeter.", "code": "def max_area(a: int, b: int) -> int:\n    return (a // 2) * (b // 2)", "task_id": "318_58818b7a-a038-4e44-9dae-8a1519c2132d", "test_setup_code": "", "test_list": ["assert max_area(4, 4) == 4", "assert max_area(6, 2) == 3", "assert max_area(10, 2) == 5", "assert max_area(8, 4) == 8", "assert max_area(12, 2) == 6", "assert max_area(14, 2) == 7", "assert max_area(16, 2) == 8", "assert max_area(18, 2) == 9", "assert max_area(20, 2) == 10", "assert max_area(22, 2) == 11", "assert max_area(24, 2) == 12", "assert max_area(26, 2) == 13", "assert max_area(28, 2) == 14", "assert max_area(30, 2) == 15", "assert max_area(32, 2) == 16"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of a contiguous subarray.", "code": "def max_sum_subarray(arr: list) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "318_1f5085c4-5ede-44dd-8186-2bf038da4902", "test_setup_code": "", "test_list": ["assert max_sum_subarray([1, 2, 3, 4, 5]) == 15", "assert max_sum_subarray([-1, -2, -3, -4, -5]) == -1", "assert max_sum_subarray([1, -2, 3, 4, -1, 2, 1, -5, 4]) == 9", "assert max_sum_subarray([5, 4, -1, 7, 8]) == 23", "assert max_sum_subarray([-2, -3, 4, -1, -2, 1, 5, -3]) == 7", "assert max_sum_subarray([1]) == 1", "assert max_sum_subarray([-1]) == -1", "assert max_sum_subarray([0, 0, 0, 0, 0]) == 0", "assert max_sum_subarray([2, -1, 2, 3, 4, -5]) == 10", "assert max_sum_subarray([-2, 1, -3, 4, -1, 2, 1, -5, 4]) == 6", "assert max_sum_subarray([3, -2, 5, -1]) == 6", "assert max_sum_subarray([1, 2, 3, -2, 5]) == 9", "assert max_sum_subarray([1, 2, 3, -2, 5, -10, 6, 7, 8]) == 21", "assert max_sum_subarray([-2, -3, -1, -4]) == -1", "assert max_sum_subarray([1, -3, 2, 1, -1]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of a contiguous subarray.", "code": "def max_product_subarray(arr: list) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    for num in arr:\n        if num == 0:\n            current_product = 1\n            continue\n        current_product *= num\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n    return max_product", "task_id": "318_bda3163b-a36b-4569-b9cd-58719791fc21", "test_setup_code": "", "test_list": ["assert max_product_subarray([2, 3, -2, 4]) == 6", "assert max_product_subarray([-2, 0, -1]) == 0", "assert max_product_subarray([-2, -3, 0, -2, -40]) == 80", "assert max_product_subarray([0, 2]) == 2", "assert max_product_subarray([2, 3, -2, 4, -1]) == 48", "assert max_product_subarray([1, -2, -3, 0, 7, -8, -2]) == 112", "assert max_product_subarray([6, -3, -10, 0, 2]) == 180", "assert max_product_subarray([-1, -3, -10, 0, 60]) == 60", "assert max_product_subarray([-2, -3, 0, -2, -40]) == 80", "assert max_product_subarray([0, 0, 0, 0]) == 0", "assert max_product_subarray([1, 2, 3, 4, 5]) == 120", "assert max_product_subarray([-1, -2, -3, -4]) == 24", "assert max_product_subarray([-1, -2, -3, 4]) == 24", "assert max_product_subarray([1, -2, 3, -4, 5, -6, 7, -8, 9]) == 20160", "assert max_product_subarray([0, -1, -2, -3, -4, -5, 0]) == 120"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum profit from buying and selling a stock given a list of prices.", "code": "def max_profit(prices: list) -> int:\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit", "task_id": "318_222eb8c1-6182-4440-941f-71579793374a", "test_setup_code": "", "test_list": ["assert max_profit([7, 1, 5, 3, 6, 4]) == 5", "assert max_profit([7, 6, 4, 3, 1]) == 0", "assert max_profit([1, 2, 3, 4, 5]) == 4", "assert max_profit([5, 4, 3, 2, 1]) == 0", "assert max_profit([1, 2, 3, 1, 2, 3, 1, 2, 3]) == 2", "assert max_profit([3, 3, 3, 3, 3]) == 0", "assert max_profit([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 9", "assert max_profit([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 0", "assert max_profit([1, 10, 1, 10, 1, 10]) == 9", "assert max_profit([1, 1, 1, 1, 1, 10]) == 9", "assert max_profit([10, 1, 10, 1, 10, 1]) == 9", "assert max_profit([1, 2, 3, 4, 5, 6, 7, 8, 9, 1]) == 8", "assert max_profit([1, 1, 1, 1, 1, 1]) == 0", "assert max_profit([1, 2, 1, 2, 1, 2, 1, 2]) == 1", "assert max_profit([2, 4, 1, 7, 5, 3, 6]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of non-adjacent elements in a list.", "code": "def max_sum_non_adjacent(arr: list) -> int:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)", "task_id": "318_36095bc8-930f-4e8c-b47d-3837d53fbbe0", "test_setup_code": "", "test_list": ["assert max_sum_non_adjacent([3, 2, 5, 10, 7]) == 15", "assert max_sum_non_adjacent([3, 2, 7, 10]) == 13", "assert max_sum_non_adjacent([5, 5, 10, 100, 10, 5]) == 110", "assert max_sum_non_adjacent([1, 2, 3]) == 4", "assert max_sum_non_adjacent([1, 20, 3]) == 20", "assert max_sum_non_adjacent([5, 1, 1, 5]) == 10", "assert max_sum_non_adjacent([2, 1, 4, 9, 1]) == 11", "assert max_sum_non_adjacent([0, 0, 0, 0, 0]) == 0", "assert max_sum_non_adjacent([1, 2, 3, 4, 5, 6]) == 12", "assert max_sum_non_adjacent([10, 5, 15, 20, 2, 30]) == 55", "assert max_sum_non_adjacent([3, 2, 5, 10, 7, 8, 1, 9]) == 29", "assert max_sum_non_adjacent([1]) == 1", "assert max_sum_non_adjacent([]) == 0", "assert max_sum_non_adjacent([10, 1, 2, 9, 3, 8]) == 27", "assert max_sum_non_adjacent([1, 0, 3, 9, 2]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum path sum in a grid from the top-left to the bottom-right corner.", "code": "def max_path_sum(grid: list) -> int:\n    rows = len(grid)\n    cols = len(grid[0])\n    for i in range(1, rows):\n        grid[i][0] += grid[i-1][0]\n    for j in range(1, cols):\n        grid[0][j] += grid[0][j-1]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            grid[i][j] += max(grid[i-1][j], grid[i][j-1])\n    return grid[rows-1][cols-1]", "task_id": "318_c4f92c24-67a3-4571-b50d-96464d2de8a9", "test_setup_code": "", "test_list": ["assert max_path_sum([[1, 3, 1], [1, 5, 1], [4, 2, 1]]) == 12", "assert max_path_sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 29", "assert max_path_sum([[1]]) == 1", "assert max_path_sum([[1, 2], [1, 1]]) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum path sum in a triangle from the top to the bottom.", "code": "def max_sum_path(triangle: list) -> int:\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "318_3cf88bfd-66cb-48d8-b7ce-1f46649b806b", "test_setup_code": "", "test_list": ["assert max_sum_path([[2], [3, 4], [6, 5, 7], [4, 1, 8, 3]]) == 23", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 20", "assert max_sum_path([[10]]) == 10", "assert max_sum_path([[1], [2, 3], [1, 5, 1], [4, 1, 8, 3]]) == 15", "assert max_sum_path([[7], [3, 8], [8, 1, 0], [2, 7, 4, 4], [4, 5, 2, 6, 5]]) == 30", "assert max_sum_path([[5], [9, 6], [4, 6, 8], [0, 7, 1, 5]]) == 27", "assert max_sum_path([[1], [2, 3], [3, 6, 7], [8, 5, 9, 3]]) == 23", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 35", "assert max_sum_path([[1], [1, 1], [1, 1, 1], [1, 1, 1, 1]]) == 4", "assert max_sum_path([[2], [4, 3], [6, 5, 7], [4, 1, 8, 3]]) == 22", "assert max_sum_path([[3], [7, 4], [2, 4, 6], [8, 5, 9, 3]]) == 23", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21]]) == 56", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28]]) == 84", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36]]) == 120", "assert max_sum_path([[1], [2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15], [16, 17, 18, 19, 20, 21], [22, 23, 24, 25, 26, 27, 28], [29, 30, 31, 32, 33, 34, 35, 36], [37, 38, 39, 40, 41, 42, 43, 44, 45]]) == 165"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of elements in a list that is divisible by a given integer k.", "code": "def max_sum_divisible_by_k(arr: list, k: int) -> int:\n    dp = [0] * k\n    for num in arr:\n        for i in dp[:]:\n            dp[(i + num) % k] = max(dp[(i + num) % k], i + num)\n    return dp[0]", "task_id": "318_56e1b148-4953-46c8-aae2-3400cecba772", "test_setup_code": "", "test_list": ["assert max_sum_divisible_by_k([3, 6, 5, 1, 8], 3) == 18", "assert max_sum_divisible_by_k([1, 2, 3, 4, 4], 5) == 10", "assert max_sum_divisible_by_k([1, 2, 3], 2) == 6", "assert max_sum_divisible_by_k([1, 2, 3], 1) == 6", "assert max_sum_divisible_by_k([1, 2, 3], 4) == 0", "assert max_sum_divisible_by_k([5, 10, 15, 20], 5) == 50", "assert max_sum_divisible_by_k([7, 14, 21, 28], 7) == 70", "assert max_sum_divisible_by_k([4, 8, 12, 16], 4) == 40", "assert max_sum_divisible_by_k([1, 1, 1, 1, 1], 3) == 3", "assert max_sum_divisible_by_k([1, 1, 1, 1, 1], 5) == 5", "assert max_sum_divisible_by_k([1, 1, 1, 1, 1], 6) == 0", "assert max_sum_divisible_by_k([100, 200, 300], 100) == 600", "assert max_sum_divisible_by_k([1, 2, 3, 4, 5, 6], 7) == 21", "assert max_sum_divisible_by_k([0, 0, 0, 0, 0], 3) == 0", "assert max_sum_divisible_by_k([1], 1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of an increasing subsequence in a list.", "code": "def max_sum_increasing_subsequence(arr: list) -> int:\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)", "task_id": "318_9fb304cc-fa0a-44d4-b864-f19b50caee83", "test_setup_code": "", "test_list": ["assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5]) == 106", "assert max_sum_increasing_subsequence([3, 4, 5, 10]) == 22", "assert max_sum_increasing_subsequence([10, 5, 4, 3]) == 10", "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5]) == 15", "assert max_sum_increasing_subsequence([5, 4, 3, 2, 1]) == 5", "assert max_sum_increasing_subsequence([10, 20, 30, 40, 50]) == 150", "assert max_sum_increasing_subsequence([50, 40, 30, 20, 10]) == 50", "assert max_sum_increasing_subsequence([1, 2, 3, 1, 2, 3, 4, 5]) == 15", "assert max_sum_increasing_subsequence([5, 4, 3, 2, 1, 2, 3, 4, 5]) == 15", "assert max_sum_increasing_subsequence([1, 1, 1, 1, 1]) == 1", "assert max_sum_increasing_subsequence([1, 2, 1, 2, 1, 2, 1, 2]) == 4", "assert max_sum_increasing_subsequence([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 45", "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 55", "assert max_sum_increasing_subsequence([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == 10", "assert max_sum_increasing_subsequence([1]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of k consecutive elements in a list.", "code": "def max_sum_of_k_elements(arr: list, k: int) -> int:\n    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "318_f16ca679-ad0d-41bd-b426-321e1bb49044", "test_setup_code": "", "test_list": ["assert max_sum_of_k_elements([1, 2, 3, 4, 5], 2) == 9", "assert max_sum_of_k_elements([1, 2, 3, 4, 5], 3) == 12", "assert max_sum_of_k_elements([1, 2, 3, 4, 5], 5) == 15", "assert max_sum_of_k_elements([5, 4, 3, 2, 1], 2) == 9", "assert max_sum_of_k_elements([5, 4, 3, 2, 1], 3) == 12", "assert max_sum_of_k_elements([5, 4, 3, 2, 1], 5) == 15", "assert max_sum_of_k_elements([1, 1, 1, 1, 1], 3) == 3", "assert max_sum_of_k_elements([1, -1, 1, -1, 1], 2) == 1", "assert max_sum_of_k_elements([1, -1, 1, -1, 1], 3) == 1", "assert max_sum_of_k_elements([1, 2, 3, -2, 5], 2) == 6", "assert max_sum_of_k_elements([1, 2, 3, -2, 5], 3) == 6", "assert max_sum_of_k_elements([1, 2, 3, -2, 5], 4) == 8", "assert max_sum_of_k_elements([1], 1) == 1", "assert max_sum_of_k_elements([1, 2, 3, 4, 5], 1) == 5", "assert max_sum_of_k_elements([10, -10, 10, -10, 10], 2) == 10"], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the cubed sum of first n natural numbers and the sum of cubed first n natural numbers.", "code": "def sum_of_cubes_difference(n):\n    sumofcubes = 0\n    cubeofsum = 0\n    for num in range(1, n+1):\n        sumofcubes += num ** 3\n        cubeofsum += num\n    cubeofsum = cubeofsum ** 3\n    return cubeofsum - sumofcubes", "task_id": "320_1ecd58e3-b675-4542-a078-39beea23ecd4", "test_setup_code": "", "test_list": ["assert sum_of_cubes_difference(1) == 0", "assert sum_of_cubes_difference(2) == 8", "assert sum_of_cubes_difference(3) == 36", "assert sum_of_cubes_difference(10) == 3025"], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the fourth power sum of first n natural numbers and the sum of fourth powers of first n natural numbers.", "code": "def sum_of_fourth_powers_difference(n):\n    sumoffourthpowers = 0\n    fourthpowerofsum = 0\n    for num in range(1, n+1):\n        sumoffourthpowers += num ** 4\n        fourthpowerofsum += num\n    fourthpowerofsum = fourthpowerofsum ** 4\n    return fourthpowerofsum - sumoffourthpowers", "task_id": "320_3dc619e8-d580-46b6-8083-35569cf1f7cb", "test_setup_code": "", "test_list": ["assert sum_of_fourth_powers_difference(1) == 0", "assert sum_of_fourth_powers_difference(2) == 240", "assert sum_of_fourth_powers_difference(10) == 52295680", "assert sum_of_fourth_powers_difference(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the product of first n natural numbers and the sum of first n natural numbers.", "code": "def product_difference(n):\n    product = 1\n    summation = 0\n    for num in range(1, n+1):\n        product *= num\n        summation += num\n    return product - summation", "task_id": "320_b3e57ffa-1dc3-479a-974a-fda1644b5f3f", "test_setup_code": "", "test_list": ["assert product_difference(1) == 0", "assert product_difference(5) == 110", "assert product_difference(10) == 362790", "assert product_difference(0) == -1"], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the sum of first n even natural numbers and the sum of first n odd natural numbers.", "code": "def sum_of_even_odd_difference(n):\n    sum_even = 0\n    sum_odd = 0\n    for num in range(1, 2*n+1):\n        if num % 2 == 0:\n            sum_even += num\n        else:\n            sum_odd += num\n    return sum_even - sum_odd", "task_id": "320_09a9d11c-9223-4f17-b2a3-cb837055b1b8", "test_setup_code": "", "test_list": ["assert sum_of_even_odd_difference(1) == 1", "assert sum_of_even_odd_difference(2) == 2", "assert sum_of_even_odd_difference(10) == 10", "assert sum_of_even_odd_difference(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n even natural numbers.", "code": "def sum_of_squares_of_evens(n):\n    sumofsquares = 0\n    for num in range(2, 2*n+1, 2):\n        sumofsquares += num ** 2\n    return sumofsquares", "task_id": "320_45b5f442-3387-4750-9c97-4a6c922f32e3", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_evens(1) == 4", "assert sum_of_squares_of_evens(3) == 56", "assert sum_of_squares_of_evens(0) == 0", "assert sum_of_squares_of_evens(10) == 1540"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n odd natural numbers.", "code": "def sum_of_cubes_of_odds(n):\n    sumofcubes = 0\n    for num in range(1, 2*n, 2):\n        sumofcubes += num ** 3\n    return sumofcubes", "task_id": "320_26544a99-8350-4bba-9876-3c70aa65f90c", "test_setup_code": "", "test_list": ["assert sum_of_cubes_of_odds(1) == 1", "assert sum_of_cubes_of_odds(2) == 28", "assert sum_of_cubes_of_odds(5) == 1533", "assert sum_of_cubes_of_odds(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    sumoffactorials = 0\n    for num in range(1, n+1):\n        sumoffactorials += factorial(num)\n    return sumoffactorials", "task_id": "320_5fad5015-cc71-4fbe-b054-021759d07ea6", "test_setup_code": "", "test_list": ["assert sum_of_factorials(1) == 1", "assert sum_of_factorials(3) == 9", "assert sum_of_factorials(5) == 153", "assert sum_of_factorials(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n Fibonacci numbers.", "code": "def sum_of_cubes_of_fibonacci(n):\n    def fibonacci(x):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return fibonacci(x - 1) + fibonacci(x - 2)\n    sumofcubes = 0\n    for num in range(n):\n        sumofcubes += fibonacci(num) ** 3\n    return sumofcubes", "task_id": "320_e808858d-3ac4-4a9f-989e-37d4e587e4f0", "test_setup_code": "", "test_list": ["assert sum_of_cubes_of_fibonacci(0) == 0", "assert sum_of_cubes_of_fibonacci(1) == 0", "assert sum_of_cubes_of_fibonacci(2) == 1", "assert sum_of_cubes_of_fibonacci(5) == 153"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n powers of two.", "code": "def sum_of_powers_of_two(n):\n    sumofpowers = 0\n    for num in range(n):\n        sumofpowers += 2 ** num\n    return sumofpowers", "task_id": "320_f6240dd2-66eb-41b0-ac57-9f63d7a9a214", "test_setup_code": "", "test_list": ["assert sum_of_powers_of_two(0) == 0", "assert sum_of_powers_of_two(1) == 1", "assert sum_of_powers_of_two(5) == 31", "assert sum_of_powers_of_two(10) == 1023"], "challenge_test_list": []}
{"text": "Write a function to generate a palindrome of digits up to the given number.", "code": "def find_palindrome(n):\n    res = ''.join(str(i) for i in range(1, n+1))\n    res += ''.join(str(i) for i in range(n-1, 0, -1))\n    return res", "task_id": "321_64e43d01-bf62-4896-8a02-9859a59b1419", "test_setup_code": "", "test_list": ["assert find_palindrome(1) == '1'", "assert find_palindrome(3) == '12321'", "assert find_palindrome(5) == '123454321'", "assert find_palindrome(0) == ''"], "challenge_test_list": []}
{"text": "Write a function to repeat each character in the given string twice.", "code": "def repeat_characters(s):\n    return ''.join(c*2 for c in s)", "task_id": "321_e2275593-8357-4efb-a812-9db435356473", "test_setup_code": "", "test_list": ["assert repeat_characters('hello') == 'hheelllloo'", "assert repeat_characters('') == ''", "assert repeat_characters('a') == 'aa'", "assert repeat_characters('123!') == '112233!!'"], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "321_a89cb1f6-a265-47bd-a829-979b52010dbe", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(9999) == 36", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "321_6bcf01c9-ad43-4853-82f3-70a14cd4e568", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "task_id": "321_616041b8-4ab3-4adc-994b-84a753757d59", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(10) == 55", "assert fibonacci(20) == 6765"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for c in s if c.lower() in 'aeiou')", "task_id": "321_228d949e-040e-41fb-b33a-2b6eeee4df85", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == 0", "assert count_vowels('aeiouAEIOU') == 10", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11"], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "321_2433ccae-b865-49bd-a03c-f2bcab97a1d0", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "321_6f583389-bd18-4eb0-8a07-423af69b1a37", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('') == True"], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(a, b):\n    return sorted(a + b)", "task_id": "321_7362690c-5d05-4973-8bef-5f10e04227be", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([], [1, 2, 3]) == [1, 2, 3]", "assert merge_sorted_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_sorted_lists([1, 1, 1], [1, 1, 1]) == [1, 1, 1, 1, 1, 1]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the maximum values in a given list.", "code": "def find_max_positions(lst):\n    max_val = max(lst)\n    max_result = [i for i, j in enumerate(lst) if j == max_val]\n    return max_result", "task_id": "322_710e6b3b-1d9b-4a5c-b0b3-54fce1af394c", "test_setup_code": "", "test_list": ["assert find_max_positions([1, 3, 5, 7, 9, 7, 5, 3, 1]) == [4]", "assert find_max_positions([9, 3, 9, 5, 7, 9, 2]) == [0, 2, 5]", "assert find_max_positions([5, 5, 5, 5]) == [0, 1, 2, 3]", "assert find_max_positions([-10, -5, -2, -7]) == [2]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of even numbers in a given list.", "code": "def find_even_positions(lst):\n    even_result = [i for i, j in enumerate(lst) if j % 2 == 0]\n    return even_result", "task_id": "322_014da445-ad32-4cb5-ab72-f53eecb7ffad", "test_setup_code": "", "test_list": ["assert find_even_positions([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "assert find_even_positions([2, 4, 6, 8, 10]) == [0, 1, 2, 3, 4]", "assert find_even_positions([1, 3, 5, 7, 9]) == []", "assert find_even_positions([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of odd numbers in a given list.", "code": "def find_odd_positions(lst):\n    odd_result = [i for i, j in enumerate(lst) if j % 2 != 0]\n    return odd_result", "task_id": "322_f8e870f9-70ab-46d1-b527-4997e2a7da3a", "test_setup_code": "", "test_list": ["assert find_odd_positions([1, 2, 3, 4, 5]) == [0, 2, 4]", "assert find_odd_positions([2, 4, 6, 8, 10]) == []", "assert find_odd_positions([1, 3, 5, 7, 9]) == [0, 1, 2, 3, 4]", "assert find_odd_positions([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of negative numbers in a given list.", "code": "def find_negative_positions(lst):\n    negative_result = [i for i, j in enumerate(lst) if j < 0]\n    return negative_result", "task_id": "322_92af255c-9282-49f4-b832-9a07a3620e8b", "test_setup_code": "", "test_list": ["assert find_negative_positions([1, -2, 3, -4, 5]) == [1, 3]", "assert find_negative_positions([-1, -2, -3, -4, -5]) == [0, 1, 2, 3, 4]", "assert find_negative_positions([1, 2, 3, 4, 5]) == []", "assert find_negative_positions([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of positive numbers in a given list.", "code": "def find_positive_positions(lst):\n    positive_result = [i for i, j in enumerate(lst) if j > 0]\n    return positive_result", "task_id": "322_f47dd7ca-98fe-40ca-a5fb-bf960ffcb8c6", "test_setup_code": "", "test_list": ["assert find_positive_positions([1, -2, 3, 4, -5]) == [0, 2, 3]", "assert find_positive_positions([-1, -2, -3, -4, -5]) == []", "assert find_positive_positions([0, 0, 0, 0, 0]) == []", "assert find_positive_positions([1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of prime numbers in a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_positions(lst):\n    prime_result = [i for i, j in enumerate(lst) if is_prime(j)]\n    return prime_result", "task_id": "322_e6f855eb-a2f8-4078-9f52-d6bfc1a9ddb3", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(7) == True", "assert is_prime(1) == False", "assert is_prime(15) == False"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of palindrome numbers in a given list.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_palindrome_positions(lst):\n    palindrome_result = [i for i, j in enumerate(lst) if is_palindrome(j)]\n    return palindrome_result", "task_id": "322_b7427bc8-53ff-4a8d-9cb6-21b6a54e99e1", "test_setup_code": "", "test_list": ["assert find_palindrome_positions([121, 131, 20, 33, 44, 55]) == [0, 1, 3, 4, 5]", "assert find_palindrome_positions([123, 456, 789, 987, 654, 321]) == []", "assert find_palindrome_positions([1, 22, 333, 4444, 55555]) == [0, 1, 2, 3, 4]", "assert find_palindrome_positions([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of numbers divisible by a given divisor in a given list.", "code": "def find_divisible_positions(lst, divisor):\n    divisible_result = [i for i, j in enumerate(lst) if j % divisor == 0]\n    return divisible_result", "task_id": "322_009e0334-2f50-4541-835a-2fba5016f2b3", "test_setup_code": "", "test_list": ["assert find_divisible_positions([10, 15, 20, 25, 30], 5) == [0, 1, 2, 3, 4]", "assert find_divisible_positions([1, 2, 3, 4, 5], 2) == [1, 3]", "assert find_divisible_positions([0, 1, 2, 3, 4, 5], 1) == [0, 1, 2, 3, 4, 5]", "assert find_divisible_positions([10, 20, 30, 40, 50], 7) == []"], "challenge_test_list": []}
{"text": "Write a function to find all index positions of unique numbers (numbers that appear only once) in a given list.", "code": "def find_unique_positions(lst):\n    unique_result = [i for i, j in enumerate(lst) if lst.count(j) == 1]\n    return unique_result", "task_id": "322_5dae210a-68fc-4529-823f-8a58068af773", "test_setup_code": "", "test_list": ["assert find_unique_positions([1, 2, 2, 3, 4, 4, 5]) == [0, 3, 6]", "assert find_unique_positions([1, 1, 1, 1, 1]) == []", "assert find_unique_positions([1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4]", "assert find_unique_positions([]) == []"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of squares of alternate elements in a tuple.", "code": "def sum_of_squares_of_alternates(test_tuple: tuple[int]) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele ** 2\n    else:\n      sum2 += ele ** 2\n  return (sum1, sum2)", "task_id": "324_700fd82f-1bb1-45c5-834e-a4699c56f59a", "test_setup_code": "", "test_list": ["assert sum_of_squares_of_alternates((1, 2, 3, 4, 5)) == (35, 20)", "assert sum_of_squares_of_alternates((0, -1, -2, -3, -4)) == (10, 20)", "assert sum_of_squares_of_alternates((10, 20, 30, 40)) == (1600, 1000)", "assert sum_of_squares_of_alternates((5,)) == (25, 0)"], "challenge_test_list": []}
{"text": "Write a function to concatenate alternate strings in a tuple.", "code": "def sum_of_alternate_strings(test_tuple: tuple[str]) -> tuple[str, str]:\n  str1 = ''\n  str2 = ''\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      str1 += ele\n    else:\n      str2 += ele\n  return (str1, str2)", "task_id": "324_9abbf58b-2fb4-4124-8d71-811cae6863a7", "test_setup_code": "", "test_list": ["assert sum_of_alternate_strings(('a', 'b', 'c', 'd', 'e')) == ('bd', 'ace')", "assert sum_of_alternate_strings(('hello', 'world', 'python', 'is', 'fun')) == ('worldfun', 'hellopythonis')", "assert sum_of_alternate_strings(('')) == ('', '')", "assert sum_of_alternate_strings(('single',)) == ('', 'single')"], "challenge_test_list": []}
{"text": "Write a function to extract the product of alternate elements in a tuple.", "code": "def product_of_alternates(test_tuple: tuple[int]) -> tuple[int, int]:\n  prod1 = 1\n  prod2 = 1\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      prod1 *= ele\n    else:\n      prod2 *= ele\n  return (prod1, prod2)", "task_id": "324_b80ca8f8-e1c1-49e2-b50f-8822e5e0d3bd", "test_setup_code": "", "test_list": ["assert product_of_alternates((1, 2, 3, 4, 5, 6)) == (15, 48)", "assert product_of_alternates((0, 1, 0, 1, 0, 1)) == (0, 0)", "assert product_of_alternates((7,)) == (7, 1)", "assert product_of_alternates(()) == (1, 1)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting from a given offset.", "code": "def sum_of_alternates_with_offset(test_tuple: tuple[int], offset: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[offset:]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_e53da373-335a-468a-9a27-09fdbe4b82e1", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_offset((1, 2, 3, 4, 5, 6), 0) == (9, 6)", "assert sum_of_alternates_with_offset((10, 20, 30, 40, 50), 1) == (60, 40)", "assert sum_of_alternates_with_offset((5, 5, 5, 5, 5, 5), 2) == (10, 10)", "assert sum_of_alternates_with_offset((1,), 0) == (1, 0)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, with a given step size.", "code": "def sum_of_alternates_with_step(test_tuple: tuple[int], step: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[::step]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_7c3afd02-881e-47a3-9471-b3c10fbdc36b", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_step((1, 2, 3, 4, 5, 6), 2) == (9, 6)", "assert sum_of_alternates_with_step((10, 20, 30, 40, 50), 1) == (60, 90)", "assert sum_of_alternates_with_step((1,), 1) == (1, 0)", "assert sum_of_alternates_with_step((), 1) == (0, 0)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting with an initial value.", "code": "def sum_of_alternates_with_initial(test_tuple: tuple[int], initial: int) -> tuple[int, int]:\n  sum1 = initial\n  sum2 = initial\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_29df14c9-c11a-4277-813a-796de81f595a", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_initial((1, 2, 3, 4, 5), 0) == (9, 6)", "assert sum_of_alternates_with_initial((10, 20, 30, 40), 5) == (55, 45)", "assert sum_of_alternates_with_initial((), 10) == (10, 10)", "assert sum_of_alternates_with_initial((1,), -1) == (0, -1)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, considering only elements greater than a given condition.", "code": "def sum_of_alternates_with_condition(test_tuple: tuple[int], condition: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele > condition:\n      if idx % 2:\n        sum1 += ele\n      else:\n        sum2 += ele\n  return (sum1, sum2)", "task_id": "324_e121dbeb-1fb2-47f8-8918-04809e4ff8ce", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_condition((1, 2, 3, 4, 5, 6), 2) == (8, 12)", "assert sum_of_alternates_with_condition((10, 15, 20, 25, 30), 18) == (25, 50)", "assert sum_of_alternates_with_condition((0, 0, 0, 0), -1) == (0, 0)", "assert sum_of_alternates_with_condition((5, 10, 15, 20, 25, 30, 35), 15) == (50, 65)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting from a given index.", "code": "def sum_of_alternates_with_index(test_tuple: tuple[int], index: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[index:]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_c8990e09-7bad-46f7-8db5-b49a0769d56e", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_index((1, 2, 3, 4, 5), 0) == (6, 9)", "assert sum_of_alternates_with_index((1, 2, 3, 4, 5), 1) == (8, 5)", "assert sum_of_alternates_with_index((10, 20, 30, 40, 50), 2) == (40, 30)", "assert sum_of_alternates_with_index((5, 10, 15, 20), 3) == (0, 20)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, excluding a specific value.", "code": "def sum_of_alternates_with_exclusion(test_tuple: tuple[int], exclude: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele != exclude:\n      if idx % 2:\n        sum1 += ele\n      else:\n        sum2 += ele\n  return (sum1, sum2)", "task_id": "324_bb84af00-4c18-428c-b646-94f8aac0fc1c", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_exclusion((1, 2, 3, 4, 5, 6), 3) == (12, 6)", "assert sum_of_alternates_with_exclusion((10, 20, 30, 40, 50, 60), 20) == (100, 90)", "assert sum_of_alternates_with_exclusion((1, 1, 1, 1, 1, 1), 1) == (0, 0)", "assert sum_of_alternates_with_exclusion((0, -1, -2, -3, -4, -5), -3) == (-6, -6)"], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, replacing a specific value with another value.", "code": "def sum_of_alternates_with_replacement(test_tuple: tuple[int], replace: int, replacement: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele == replace:\n      ele = replacement\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_b4db2c17-ead6-428f-8bab-545249173204", "test_setup_code": "", "test_list": ["assert sum_of_alternates_with_replacement((1, 2, 3, 4, 5, 6), 3, 10) == (12, 22)", "assert sum_of_alternates_with_replacement((0, 0, 0, 0, 0, 0), 0, 1) == (3, 3)", "assert sum_of_alternates_with_replacement((1, 2, 3, 4, 5), 5, 10) == (6, 16)", "assert sum_of_alternates_with_replacement((10, 20, 30, 40), 20, 5) == (40, 45)"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of cubes whose sum is equal to a given number.", "code": "def min_squares_sum(n):\n    if n <= 1:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum(n - temp))\n    return res", "task_id": "325_0c91899a-721a-4b3c-898a-0a9254aeb99b", "test_setup_code": "", "test_list": ["assert min_squares_sum(1) == 1", "assert min_squares_sum(8) == 1", "assert min_squares_sum(17) == 2", "assert min_squares_sum(28) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number using memoization to optimize the solution.", "code": "def min_squares_sum_memo(n, memo):\n    if n in memo:\n        return memo[n]\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_memo(n - temp, memo))\n    memo[n] = res\n    return res", "task_id": "325_2c20b3ad-8da6-49b2-858b-9d71c61c294f", "test_setup_code": "", "test_list": ["assert min_squares_sum_memo(12, {}) == 3", "assert min_squares_sum_memo(13, {}) == 2", "assert min_squares_sum_memo(1, {}) == 1", "assert min_squares_sum_memo(0, {}) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number using dynamic programming.", "code": "def min_squares_sum_dp(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]", "task_id": "325_0603647a-e51e-4f2a-a52c-d31f2ab9536e", "test_setup_code": "", "test_list": ["assert min_squares_sum_dp(12) == 3", "assert min_squares_sum_dp(13) == 2", "assert min_squares_sum_dp(1) == 1", "assert min_squares_sum_dp(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, starting from a given square.", "code": "def min_squares_sum_with_start(n, start):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(start, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_start(n - temp, start))\n    return res", "task_id": "325_2a5ce57e-3c05-4a0a-87c9-c421cd3b1787", "test_setup_code": "", "test_list": ["assert min_squares_sum_with_start(12, 1) == 3", "assert min_squares_sum_with_start(13, 2) == 4", "assert min_squares_sum_with_start(6, 1) == 3", "assert min_squares_sum_with_start(1, 1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but only using squares that are multiples of a given step.", "code": "def min_squares_sum_with_step(n, step):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = (x * step) * (x * step)\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_step(n - temp, step))\n    return res", "task_id": "325_9e18ebb5-d0b8-4260-89db-5dec4e1fe6ba", "test_setup_code": "", "test_list": ["assert min_squares_sum_with_step(12, 1) == 3", "assert min_squares_sum_with_step(13, 2) == 2", "assert min_squares_sum_with_step(0, 1) == 0", "assert min_squares_sum_with_step(25, 5) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but only using even squares.", "code": "def min_squares_sum_with_even_squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(2, n + 1, 2):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_even_squares(n - temp))\n    return res", "task_id": "325_8daf57fe-9c8c-406f-a738-4c3df193c717", "test_setup_code": "", "test_list": ["assert min_squares_sum_with_even_squares(1) == 1", "assert min_squares_sum_with_even_squares(4) == 1", "assert min_squares_sum_with_even_squares(10) == 2", "assert min_squares_sum_with_even_squares(20) == 2"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list and return the word along with its length.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_length(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res), len(res))", "task_id": "326_37dffd12-398e-4811-90a6-80c972ab4351", "test_setup_code": "", "test_list": ["assert most_occurrences_with_length(['apple banana apple', 'banana apple orange']) == ('apple', 5)", "assert most_occurrences_with_length(['a a a a', 'b b b', 'c c', 'd']) == ('a', 1)", "assert most_occurrences_with_length(['one two three', 'four five six', 'seven eight nine']) == ('one', 3)", "assert most_occurrences_with_length(['']) == ('', 0)"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, ignoring case.", "code": "from collections import defaultdict\n\ndef most_occurrences_ignore_case(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.lower().split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9baac05b-020e-4f8b-b3c7-43bce8e3cfaf", "test_setup_code": "", "test_list": ["assert most_occurrences_ignore_case(['apple banana apple', 'banana orange apple', 'banana']) == 'banana'", "assert most_occurrences_ignore_case(['Hello world', 'hello', 'HELLO']) == 'hello'", "assert most_occurrences_ignore_case(['a a a', 'b b b', 'c c c']) == 'a'", "assert most_occurrences_ignore_case(['']) == ''"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list and return the word along with its count.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_count(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res), temp[res])", "task_id": "326_36b594cc-c08a-4148-be85-443fa144d60e", "test_setup_code": "", "test_list": ["assert most_occurrences_with_count(['this is a test', 'this is another test', 'test test test']) == ('test', 5)", "assert most_occurrences_with_count(['hello world', 'hello', 'world world']) == ('world', 3)", "assert most_occurrences_with_count(['one fish two fish', 'red fish blue fish']) == ('fish', 4)", "assert most_occurrences_with_count(['']) == ('', 0)"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that is at least a given minimum length.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_min_length(test_list, min_length):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if len(wrd) >= min_length:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_fb9716d2-e625-4ee1-9a45-773455093460", "test_setup_code": "", "test_list": ["assert most_occurrences_with_min_length(['apple banana apple', 'banana apple', 'banana'], 5) == 'banana'", "assert most_occurrences_with_min_length(['this is a test', 'this test is a test', 'test'], 4) == 'test'", "assert most_occurrences_with_min_length(['short long longer longest', 'longer longest', 'longest'], 7) == 'longest'", "assert most_occurrences_with_min_length(['one two three four', 'five six seven eight', 'nine ten eleven twelve'], 4) == 'four'"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, excluding a list of specific words.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_exclusion(test_list, exclude):\n  temp = defaultdict(int)\n  exclude_set = set(exclude)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd not in exclude_set:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9f8deb67-8bb0-4f3a-8b4d-b7049f72fdb9", "test_setup_code": "", "test_list": ["assert most_occurrences_with_exclusion(['apple banana apple', 'banana orange apple', 'apple banana'], ['banana']) == 'apple'", "assert most_occurrences_with_exclusion(['dog cat dog', 'cat dog', 'dog'], ['dog']) == 'cat'", "assert most_occurrences_with_exclusion(['one two three', 'two three four', 'three four five'], ['three', 'four']) == 'two'", "assert most_occurrences_with_exclusion(['a a a a', 'b b b', 'c c'], ['a', 'b', 'c']) == ''"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that starts with a given prefix.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_prefix(test_list, prefix):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd.startswith(prefix):\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_0b4462ca-6665-4376-beb1-37efd1d75f87", "test_setup_code": "", "test_list": ["assert most_occurrences_with_prefix(['apple banana apple', 'apple apricot banana'], 'a') == 'apple'", "assert most_occurrences_with_prefix(['dog cat dog', 'cat dog'], 'c') == 'cat'", "assert most_occurrences_with_prefix(['hello world', 'hi there', 'howdy partner'], 'h') == 'hello'", "assert most_occurrences_with_prefix(['', ''], 'a') == ''"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that ends with a given suffix.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_suffix(test_list, suffix):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd.endswith(suffix):\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9348b4ed-3aed-4f0e-bf3a-55e64a47bdd3", "test_setup_code": "", "test_list": ["assert most_occurrences_with_suffix(['hello world', 'world of code', 'hello code'], 'o') == 'hello'", "assert most_occurrences_with_suffix(['test case', 'another test case', 'case closed'], 'e') == 'case'", "assert most_occurrences_with_suffix(['apple pie', 'apple tart', 'banana pie'], 'e') == 'pie'", "assert most_occurrences_with_suffix(['one', 'two', 'three'], 'x') == ''"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list after replacing all occurrences of a specific word with another word.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_replacement(test_list, old, new):\n  temp = defaultdict(int)\n  for sub in test_list:\n    sub = sub.replace(old, new)\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_5ac3a99d-a08b-441c-9ae1-80e80df44f79", "test_setup_code": "", "test_list": ["assert most_occurrences_with_replacement(['hello world', 'hello there', 'world hello'], 'hello', 'hi') == 'hi'", "assert most_occurrences_with_replacement(['apple banana apple', 'banana apple banana', 'apple'], 'banana', 'orange') == 'apple'", "assert most_occurrences_with_replacement(['one two three', 'three two one', 'two three one'], 'two', 'four') == 'one'", "assert most_occurrences_with_replacement(['a a a', 'b b b', 'c c c'], 'a', 'b') == 'b'"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, ignoring punctuation.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_punctuation(test_list):\n  import string\n  temp = defaultdict(int)\n  for sub in test_list:\n    sub = sub.translate(str.maketrans('', '', string.punctuation))\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_ca7755a5-b504-415f-8d88-b0f387ab6f12", "test_setup_code": "", "test_list": ["assert most_occurrences_with_punctuation(['hello world', 'hello', 'world hello']) == 'hello'", "assert most_occurrences_with_punctuation(['a!b!c!', 'a b c', 'a b', 'a']) == 'a'", "assert most_occurrences_with_punctuation(['test, test, test.', 'test!', 'TEST']) == 'test'", "assert most_occurrences_with_punctuation(['', '', '']) == ''"], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, excluding common stopwords.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_stopwords(test_list, stopwords):\n  temp = defaultdict(int)\n  stopwords_set = set(stopwords)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd not in stopwords_set:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9bf85c5c-4331-48ec-a08f-c1d346eb0178", "test_setup_code": "", "test_list": ["assert most_occurrences_with_stopwords(['the quick brown fox', 'jumps over the lazy dog', 'the fox is quick'], ['the', 'is', 'over']) == 'quick'", "assert most_occurrences_with_stopwords(['hello world', 'hello', 'world hello'], ['world']) == 'hello'", "assert most_occurrences_with_stopwords(['a a a b b c c c c', 'b b b b c c c'], ['a', 'b']) == 'c'", "assert most_occurrences_with_stopwords(['stopwords are common words', 'common words should be excluded', 'words are repeated'], ['are', 'common', 'should', 'be']) == 'words'"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is equilateral or not.", "code": "def is_equilateral(a, b, c):\n    return a == b == c", "task_id": "327_2fa88448-9598-4a2f-b0b9-7289c3bbab3d", "test_setup_code": "", "test_list": ["assert is_equilateral(3, 3, 3) == True", "assert is_equilateral(3, 4, 5) == False", "assert is_equilateral(0, 0, 0) == True", "assert is_equilateral(1, 1, 2) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is scalene or not.", "code": "def is_scalene(a, b, c):\n    return a != b and b != c and a != c", "task_id": "327_e25a2086-89e5-48d7-aaa3-857a217f5ae1", "test_setup_code": "", "test_list": ["assert is_scalene(3, 4, 5) == True", "assert is_scalene(2, 2, 3) == False", "assert is_scalene(1, 1, 1) == False", "assert is_scalene(5, 7, 10) == True"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is a right triangle or not.", "code": "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "327_d56369df-4d9b-4ef8-ae4d-fb83f45b1f3e", "test_setup_code": "", "test_list": ["assert is_right_triangle(3, 4, 5) == True", "assert is_right_triangle(5, 12, 13) == True", "assert is_right_triangle(1, 1, 1) == False", "assert is_right_triangle(0, 0, 0) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an obtuse triangle or not.", "code": "def is_obtuse_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "327_820df8e4-a4dd-4cec-b60d-3555a9e142d1", "test_setup_code": "", "test_list": ["assert is_obtuse_triangle(3, 4, 5) == False", "assert is_obtuse_triangle(5, 12, 13) == False", "assert is_obtuse_triangle(7, 24, 25) == True", "assert is_obtuse_triangle(1, 1, 1) == False"], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an acute triangle or not.", "code": "def is_acute_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "327_0cf88f0d-a051-4a93-922c-5b608d5713f3", "test_setup_code": "", "test_list": ["assert is_acute_triangle(3, 4, 5) == False", "assert is_acute_triangle(5, 5, 5) == True", "assert is_acute_triangle(7, 24, 25) == False", "assert is_acute_triangle(1, 1, 1.5) == True"], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a triangle.", "code": "def triangle_perimeter(a, b, c):\n    return a + b + c", "task_id": "327_accfb652-42cf-40bb-a22d-3afd45c77f1c", "test_setup_code": "", "test_list": ["assert triangle_perimeter(3, 4, 5) == 12", "assert triangle_perimeter(1, 1, 1) == 3", "assert triangle_perimeter(0, 0, 0) == 0", "assert triangle_perimeter(10, 15, 20) == 45"], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle using Heron's formula.", "code": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))", "task_id": "327_aec03ea0-8554-4cd2-b4c8-01f7c45abb2a", "test_setup_code": "", "test_list": ["assert triangle_area(3, 4, 5) == 6.0", "assert triangle_area(7, 10, 5) == 16.24807680927192", "assert triangle_area(1, 1, 1) == 0.4330127018922193", "assert triangle_area(0.1, 0.1, 0.1) == 0.004330127018922193"], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid triangle.", "code": "def is_valid_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a", "task_id": "327_5424d45e-67ad-428b-adb3-efa880e8f939", "test_setup_code": "", "test_list": ["assert is_valid_triangle(3, 4, 5) == True", "assert is_valid_triangle(1, 1, 2) == False", "assert is_valid_triangle(10, 10, 10) == True", "assert is_valid_triangle(0, 1, 1) == False"], "challenge_test_list": []}
{"text": "Write a function to determine the type of triangle based on its sides (equilateral, isosceles, or scalene).", "code": "def triangle_type(a, b, c):\n    if a == b == c:\n        return 'equilateral'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'", "task_id": "327_34bf5029-bc5f-4d99-a3d8-fee41befc266", "test_setup_code": "", "test_list": ["assert triangle_type(3, 3, 3) == 'equilateral'", "assert triangle_type(3, 4, 4) == 'isosceles'", "assert triangle_type(3, 4, 5) == 'scalene'", "assert triangle_type(1, 2, 2) == 'isosceles'"], "challenge_test_list": []}
{"text": "Write a function to calculate the angles of a triangle given its sides using the Law of Cosines.", "code": "import math\n\ndef triangle_angles(a, b, c):\n    angle_A = math.degrees(math.acos((b**2 + c**2 - a**2) / (2 * b * c)))\n    angle_B = math.degrees(math.acos((a**2 + c**2 - b**2) / (2 * a * c)))\n    angle_C = 180 - angle_A - angle_B\n    return angle_A, angle_B, angle_C", "task_id": "327_25129d93-ff64-4c80-8ed3-4813e63179b2", "test_setup_code": "", "test_list": ["assert triangle_angles(3, 4, 5) == (36.86989764584401, 53.13010235415599, 90.0)", "assert triangle_angles(1, 1, 1) == (60.00000000000001, 60.00000000000001, 60.00000000000001)", "assert triangle_angles(7, 24, 25) == (16.26020470831196, 73.73979529168804, 90.0)", "assert triangle_angles(10, 10, 14.142135623730951) == (45.00000000000001, 45.00000000000001, 90.0)"], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(lst: list) -> list:\n    return lst[::-1]", "task_id": "328_37ae0313-c4f8-4012-8608-5847db5d2496", "test_setup_code": "", "test_list": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([]) == []", "assert reverse_list([1]) == [1]", "assert reverse_list([1, 2, 3, 2, 1]) == [1, 2, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction.", "code": "def rotate_right(lst: list, n: int) -> list:\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]", "task_id": "328_e91aaded-07f9-4bb0-90ec-b8cfbbae39ab", "test_setup_code": "", "test_list": ["assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]", "assert rotate_right([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert rotate_right([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3]", "assert rotate_right([], 3) == []"], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in a given list.", "code": "def sum_elements(lst: list) -> int:\n    return sum(lst)", "task_id": "328_069bbc51-9ac7-4ff5-a01b-3b5313b02e87", "test_setup_code": "", "test_list": ["assert sum_elements([1, 2, 3, 4, 5]) == 15", "assert sum_elements([-1, -2, 3, 4]) == 4", "assert sum_elements([]) == 0", "assert sum_elements([0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list.", "code": "def find_max(lst: list) -> int:\n    return max(lst)", "task_id": "328_a16ea8e4-de64-4568-a774-b5be5b5e2be7", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([-10, -20, -30, -5, -1]) == -1", "assert find_max([100]) == 100", "assert find_max([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a given list.", "code": "def find_min(lst: list) -> int:\n    return min(lst)", "task_id": "328_01d9d6e0-3d55-4d6c-9bb5-f2b5d91ed774", "test_setup_code": "", "test_list": ["assert find_min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1", "assert find_min([-10, -20, -30, -40, -50]) == -50", "assert find_min([0]) == 0", "assert find_min([100, 200, 300, 400, 500]) == 100"], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a given list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(dict.fromkeys(lst))", "task_id": "328_d978f819-87e3-400b-8a1d-bf2c40da71b3", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]", "assert remove_duplicates([]) == []", "assert remove_duplicates([4, 4, 4, 4]) == [4]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a specified element in a given list.", "code": "def count_occurrences(lst: list, x: int) -> int:\n    return lst.count(x)", "task_id": "328_1c6be04e-7b83-4ff3-9379-fd1b2ef70c2b", "test_setup_code": "", "test_list": ["assert count_occurrences([1, 2, 3, 4, 2, 2, 5], 2) == 3", "assert count_occurrences([], 1) == 0", "assert count_occurrences([1, 1, 1, 1, 1], 1) == 5", "assert count_occurrences([1, 2, 3, 4, 5], 6) == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given list is sorted in ascending order.", "code": "def is_sorted(lst: list) -> bool:\n    return lst == sorted(lst)", "task_id": "328_4643489f-e7b6-4599-8312-276b5db6dcc7", "test_setup_code": "", "test_list": ["assert is_sorted([1, 2, 3, 4, 5]) == True", "assert is_sorted([5, 4, 3, 2, 1]) == False", "assert is_sorted([]) == True", "assert is_sorted([1, 2, 2, 3, 4]) == True"], "challenge_test_list": []}
{"text": "Write a function to find the second maximum element in a given list.", "code": "def find_second_max(lst: list) -> int:\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2] if len(unique_lst) >= 2 else None", "task_id": "328_4dbded0b-825c-4e83-b290-22f5ebd6467b", "test_setup_code": "", "test_list": ["assert find_second_max([1, 3, 4, 5, 0, 2]) == 4", "assert find_second_max([5, 5, 5, 5, 5]) == None", "assert find_second_max([10, 20]) == 10", "assert find_second_max([100]) == None"], "challenge_test_list": []}
{"text": "Write a function to merge two given lists into one.", "code": "def merge_lists(lst1: list, lst2: list) -> list:\n    return lst1 + lst2", "task_id": "328_9d653aa9-d990-4991-91e9-122fd21e4aa9", "test_setup_code": "", "test_list": ["assert merge_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3, 4, 5, 6]", "assert merge_lists([], [1, 2, 3]) == [1, 2, 3]", "assert merge_lists([1, 2, 3], []) == [1, 2, 3]", "assert merge_lists([], []) == []"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating even and odd numbers.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_even_odd(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 2 == 0 and arr[out_of_place] % 2 != 0) or\n\t\t\t(arr[index] % 2 != 0 and arr[out_of_place] % 2 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 2 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 2 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_de204d4a-d7a6-4a63-8116-cf97f831bfbb", "test_setup_code": "", "test_list": ["assert rearrange_even_odd([1, 2, 3, 4, 5, 6]) == [2, 1, 4, 3, 6, 5]", "assert rearrange_even_odd([1, 3, 5, 7, 2, 4, 6, 8]) == [2, 1, 4, 3, 6, 5, 8, 7]", "assert rearrange_even_odd([2, 4, 6, 8, 1, 3, 5, 7]) == [2, 1, 4, 3, 6, 5, 8, 7]", "assert rearrange_even_odd([1]) == [1]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating elements greater than and less than the previous element.", "code": "def rearrange_greater_less(arr):\n\tn = len(arr)\n\tfor i in range(1, n):\n\t\tif (i % 2 == 1 and arr[i] < arr[i - 1]) or (i % 2 == 0 and arr[i] > arr[i - 1]):\n\t\t\tarr[i], arr[i - 1] = arr[i - 1], arr[i]\n\treturn arr", "task_id": "323_8bd4ed6a-0134-4bd5-94e2-23825565e09c", "test_setup_code": "", "test_list": ["assert rearrange_greater_less([1, 2, 3, 4, 5]) == [1, 3, 2, 5, 4]", "assert rearrange_greater_less([5, 4, 3, 2, 1]) == [4, 5, 2, 3, 1]", "assert rearrange_greater_less([1, 1, 1, 1, 1]) == [1, 1, 1, 1, 1]", "assert rearrange_greater_less([]) == []"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating prime and non-prime numbers.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_prime_nonprime(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_prime(arr[index]) != is_prime(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_prime(arr[index]) and index % 2 == 1) or (not is_prime(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_936e1af8-4f0a-440e-8441-3b3d6d76a444", "test_setup_code": "", "test_list": ["assert rearrange_prime_nonprime([2, 3, 5, 7, 11, 4, 6, 8, 9, 10]) == [2, 4, 3, 6, 5, 8, 7, 9, 11, 10]", "assert rearrange_prime_nonprime([4, 6, 8, 9, 10, 2, 3, 5, 7, 11]) == [4, 2, 6, 3, 8, 5, 9, 7, 10, 11]", "assert rearrange_prime_nonprime([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 4, 3, 6, 5, 8, 7, 10, 9]", "assert rearrange_prime_nonprime([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of characters in alternating vowels and consonants.", "code": "def is_vowel(c):\n\treturn c.lower() in 'aeiou'\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_vowel_consonant(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_vowel(arr[index]) != is_vowel(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_vowel(arr[index]) and index % 2 == 1) or (not is_vowel(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_20f98138-dd2e-4511-aeaf-ac8e6b64d768", "test_setup_code": "", "test_list": ["assert rearrange_vowel_consonant(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'e', 'c', 'd', 'f']", "assert rearrange_vowel_consonant(['b', 'a', 'd', 'e', 'f', 'i']) == ['a', 'b', 'e', 'd', 'i', 'f']", "assert rearrange_vowel_consonant(['a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g']) == ['a', 'b', 'e', 'c', 'i', 'd', 'o', 'f', 'u', 'g']", "assert rearrange_vowel_consonant(['b', 'c', 'd', 'f', 'g', 'h']) == ['b', 'c', 'd', 'f', 'g', 'h']"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of characters in alternating uppercase and lowercase letters.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_upper_lower(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (arr[index].isupper() != arr[out_of_place].isupper()):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (arr[index].isupper() and index % 2 == 1) or (arr[index].islower() and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_54aeb0bd-a3ce-43a6-bb7c-95e649ee0aa0", "test_setup_code": "", "test_list": ["assert rearrange_upper_lower(['a', 'B', 'c', 'D', 'e', 'F']) == ['a', 'B', 'c', 'D', 'e', 'F']", "assert rearrange_upper_lower(['A', 'b', 'C', 'd', 'E', 'f']) == ['A', 'b', 'C', 'd', 'E', 'f']", "assert rearrange_upper_lower(['a', 'b', 'c', 'D', 'E', 'F']) == ['a', 'D', 'b', 'E', 'c', 'F']", "assert rearrange_upper_lower(['A', 'B', 'C', 'd', 'e', 'f']) == ['A', 'd', 'B', 'e', 'C', 'f']"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array such that elements at odd indices are greater than elements at even indices.", "code": "def rearrange_odd_even_index(arr):\n\tn = len(arr)\n\tfor i in range(1, n, 2):\n\t\tif arr[i] < arr[i - 1]:\n\t\t\tarr[i], arr[i - 1] = arr[i - 1], arr[i]\n\t\tif i + 1 < n and arr[i] < arr[i + 1]:\n\t\t\tarr[i], arr[i + 1] = arr[i + 1], arr[i]\n\treturn arr", "task_id": "323_05b91127-a30e-4a7c-8384-fa8b434e7527", "test_setup_code": "", "test_list": ["assert rearrange_odd_even_index([1, 3, 2, 4, 5, 6]) == [1, 3, 2, 4, 5, 6]", "assert rearrange_odd_even_index([9, 6, 8, 3, 7]) == [6, 9, 3, 8, 7]", "assert rearrange_odd_even_index([10, 5, 11, 4, 12, 3]) == [5, 10, 4, 11, 3, 12]", "assert rearrange_odd_even_index([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [1, 3, 2, 5, 4, 7, 6, 9, 8]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating increasing and decreasing order.", "code": "def rearrange_increasing_decreasing(arr):\n\tn = len(arr)\n\tarr.sort()\n\tresult = [0] * n\n\tleft, right = 0, n - 1\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tresult[i] = arr[left]\n\t\t\tleft += 1\n\t\telse:\n\t\t\tresult[i] = arr[right]\n\t\t\tright -= 1\n\treturn result", "task_id": "323_969ca707-f3b5-4267-a9f6-c1f216e2f717", "test_setup_code": "", "test_list": ["assert rearrange_increasing_decreasing([1, 3, 2, 4, 5]) == [1, 5, 2, 4, 3]", "assert rearrange_increasing_decreasing([10, 20, 30, 40, 50, 60]) == [10, 60, 20, 50, 30, 40]", "assert rearrange_increasing_decreasing([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert rearrange_increasing_decreasing([1]) == [1]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating multiples of 5 and non-multiples of 5.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_multiple_five(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 5 == 0 and arr[out_of_place] % 5 != 0) or\n\t\t\t(arr[index] % 5 != 0 and arr[out_of_place] % 5 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 5 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 5 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_6c915bff-2d6a-46c3-af30-2c70c7d9b09b", "test_setup_code": "", "test_list": ["assert rearrange_multiple_five([1, 5, 2, 10, 3, 15, 4, 20]) == [5, 1, 10, 2, 15, 3, 20, 4]", "assert rearrange_multiple_five([5, 10, 15, 20, 25, 30, 35, 40]) == [5, 10, 15, 20, 25, 30, 35, 40]", "assert rearrange_multiple_five([1, 2, 3, 4, 6, 7, 8, 9]) == [1, 2, 3, 4, 6, 7, 8, 9]", "assert rearrange_multiple_five([5, 1, 10, 2, 15, 3, 20, 4, 25, 5]) == [5, 1, 10, 2, 15, 3, 20, 4, 25, 5]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating numbers divisible by 3 and not divisible by 3.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_divisible_three(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 3 == 0 and arr[out_of_place] % 3 != 0) or\n\t\t\t(arr[index] % 3 != 0 and arr[out_of_place] % 3 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 3 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 3 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_18477bd8-26b5-4b76-b3a8-3be053269447", "test_setup_code": "", "test_list": ["assert rearrange_divisible_three([1, 2, 3, 4, 5, 6, 7, 8, 9]) == [3, 1, 6, 2, 9, 4, 5, 7, 8]", "assert rearrange_divisible_three([3, 6, 9, 12, 15, 18]) == [3, 6, 9, 12, 15, 18]", "assert rearrange_divisible_three([1, 2, 4, 5, 7, 8]) == [1, 2, 4, 5, 7, 8]", "assert rearrange_divisible_three([3, 1, 6, 2, 9, 4, 12, 5, 15]) == [3, 1, 6, 2, 9, 4, 12, 5, 15]"], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of strings in alternating palindromes and non-palindromes.", "code": "def is_palindrome(s):\n\treturn s == s[::-1]\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_palindrome_nonpalindrome(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_palindrome(arr[index]) != is_palindrome(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_palindrome(arr[index]) and index % 2 == 1) or (not is_palindrome(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_bbea02b5-2ef5-4993-812f-50baaad1e4a4", "test_setup_code": "", "test_list": ["assert rearrange_palindrome_nonpalindrome(['madam', 'racecar', 'apple', 'banana', 'civic', 'level']) == ['madam', 'apple', 'racecar', 'banana', 'civic', 'level']", "assert rearrange_palindrome_nonpalindrome(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f']", "assert rearrange_palindrome_nonpalindrome(['noon', 'deed', 'rotor', 'apple', 'banana']) == ['noon', 'apple', 'deed', 'banana', 'rotor']", "assert rearrange_palindrome_nonpalindrome(['apple', 'banana', 'civic', 'deed', 'level', 'madam']) == ['civic', 'apple', 'deed', 'banana', 'level', 'madam']"], "challenge_test_list": []}
{"text": "Write a python function to count odd numbers in a list.", "code": "def count_odd_numbers(nums):\n    odd_count = 0\n    for num in nums:\n        if num % 2 != 0:\n            odd_count += 1\n    return odd_count", "task_id": "329_6792eaaa-58ee-4920-8495-698d6c5c6e3f", "test_setup_code": "", "test_list": ["assert count_odd_numbers([1, 2, 3, 4, 5]) == 3", "assert count_odd_numbers([2, 4, 6, 8, 10]) == 0", "assert count_odd_numbers([1, 3, 5, 7, 9]) == 5", "assert count_odd_numbers([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count even numbers in a list.", "code": "def count_even_numbers(nums):\n    even_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count", "task_id": "329_2a3011d5-ce6a-4473-97be-6166be36bbf1", "test_setup_code": "", "test_list": ["assert count_even_numbers([1, 2, 3, 4, 5, 6]) == 3", "assert count_even_numbers([2, 4, 6, 8, 10]) == 5", "assert count_even_numbers([1, 3, 5, 7, 9]) == 0", "assert count_even_numbers([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count zeroes in a list.", "code": "def count_zeroes(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count", "task_id": "329_eb2bdcb5-ed79-41ab-bb74-dfeb719cf09d", "test_setup_code": "", "test_list": ["assert count_zeroes([1, 0, 2, 0, 3, 0]) == 3", "assert count_zeroes([0, 0, 0, 0]) == 4", "assert count_zeroes([1, 2, 3, 4, 5]) == 0", "assert count_zeroes([]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count prime numbers in a list.", "code": "def count_primes(nums):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_count = 0\n    for num in nums:\n        if is_prime(num):\n            prime_count += 1\n    return prime_count", "task_id": "329_7bb58716-1af6-4bb1-897d-496376ab1571", "test_setup_code": "", "test_list": ["assert count_primes([2, 3, 4, 5, 6, 7, 8, 9, 10]) == 4", "assert count_primes([11, 13, 17, 19, 23, 29, 31]) == 7", "assert count_primes([1, 4, 6, 8, 10, 12, 14]) == 0", "assert count_primes([2, 2, 2, 2, 2, 2, 2]) == 7"], "challenge_test_list": []}
{"text": "Write a python function to count palindromic words in a list.", "code": "def count_palindromes(words):\n    palindrome_count = 0\n    for word in words:\n        if word == word[::-1]:\n            palindrome_count += 1\n    return palindrome_count", "task_id": "329_f85b0d59-e100-419c-8443-e3559b26fe4a", "test_setup_code": "", "test_list": ["assert count_palindromes(['madam', 'racecar', 'apple', 'level', 'banana']) == 3", "assert count_palindromes(['hello', 'world', 'python', 'code']) == 0", "assert count_palindromes(['a', 'b', 'c', 'd', 'e']) == 5", "assert count_palindromes(['', 'noon', 'civic', 'radar', '']) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count vowels in a string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count", "task_id": "329_660922b8-11c7-4210-89d0-041869b3a3e1", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('') == 0", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5"], "challenge_test_list": []}
{"text": "Write a python function to count uppercase letters in a string.", "code": "def count_uppercase(s):\n    uppercase_count = 0\n    for char in s:\n        if char.isupper():\n            uppercase_count += 1\n    return uppercase_count", "task_id": "329_cb99d193-2908-4c1f-9214-a2dd00c7e9a9", "test_setup_code": "", "test_list": ["assert count_uppercase('Hello World!') == 2", "assert count_uppercase('PYTHON') == 6", "assert count_uppercase('python') == 0", "assert count_uppercase('1234!@#$') == 0", "assert count_uppercase('') == 0", "assert count_uppercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 13"], "challenge_test_list": []}
{"text": "Write a python function to count lowercase letters in a string.", "code": "def count_lowercase(s):\n    lowercase_count = 0\n    for char in s:\n        if char.islower():\n            lowercase_count += 1\n    return lowercase_count", "task_id": "329_1ae1bd16-e1a5-4a8b-b15e-d6350e4259a9", "test_setup_code": "", "test_list": ["assert count_lowercase('Hello World!') == 8", "assert count_lowercase('1234567890') == 0", "assert count_lowercase('') == 0", "assert count_lowercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 13"], "challenge_test_list": []}
{"text": "Write a python function to count digits in a string.", "code": "def count_digits(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count", "task_id": "329_0560dbf0-64fd-4d2c-ab9f-199ce23b44c5", "test_setup_code": "", "test_list": ["assert count_digits('abc123') == 3", "assert count_digits('no digits here!') == 0", "assert count_digits('1234567890') == 10", "assert count_digits('a1b2c3d4e5f6g7h8i9j0') == 10"], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one vowel in the given string by using regex.", "code": "import re\ndef find_words_with_vowels(text):\n  return re.findall(r'\\b\\w*[aeiouAEIOU]+\\w*\\b', text)", "task_id": "330_5eabedf0-cf89-44b4-850d-4eff80be7b12", "test_setup_code": "", "test_list": ["assert find_words_with_vowels('This is a test sentence.') == ['This', 'is', 'a', 'test', 'sentence']", "assert find_words_with_vowels('Sky, why?') == ['why']", "assert find_words_with_vowels('BCDFG') == []", "assert find_words_with_vowels('A quick brown fox jumps over the lazy dog.') == ['A', 'quick', 'brown', 'fox', 'jumps', 'over', 'the', 'lazy', 'dog']"], "challenge_test_list": []}
{"text": "Write a function to find all words that start with a consonant in the given string by using regex.", "code": "import re\ndef find_words_starting_with_consonant(text):\n  return re.findall(r'\\b[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\\w*\\b', text)", "task_id": "330_326196e1-6c86-4003-87bf-c84ca5837a77", "test_setup_code": "", "test_list": ["assert find_words_starting_with_consonant('The quick brown fox jumps over the lazy dog') == ['The', 'quick', 'brown', 'fox', 'jumps', 'the', 'lazy', 'dog']", "assert find_words_starting_with_consonant('An apple a day keeps the doctor away') == ['day', 'keeps', 'the', 'doctor', 'away']", "assert find_words_starting_with_consonant('Umbrellas are useful on rainy days') == ['Umbrellas', 'useful', 'on', 'rainy', 'days']", "assert find_words_starting_with_consonant('') == []"], "challenge_test_list": []}
{"text": "Write a function to find all words that end with 'ing' in the given string by using regex.", "code": "import re\ndef find_words_ending_with_ing(text):\n  return re.findall(r'\\b\\w+ing\\b', text)", "task_id": "330_b27c68a5-5ec5-4d3d-a40c-7d86a022c25f", "test_setup_code": "", "test_list": ["assert find_words_ending_with_ing('I enjoy swimming and running in the morning.') == ['swimming', 'running', 'morning']", "assert find_words_ending_with_ing('Nothing to see here, just testing.') == ['Nothing', 'testing']", "assert find_words_ending_with_ing('The king and the wing of the airplane.') == ['king', 'wing']", "assert find_words_ending_with_ing('') == []"], "challenge_test_list": []}
{"text": "Write a function to find all words that contain double letters in the given string by using regex.", "code": "import re\ndef find_words_with_double_letters(text):\n  return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "330_8767b644-a1f9-4e57-a278-dc598d3b5e46", "test_setup_code": "", "test_list": ["assert find_words_with_double_letters('I need a bookkeeper for my business') == ['bookkeeper']", "assert find_words_with_double_letters('The committee will meet tomorrow') == ['committee']", "assert find_words_with_double_letters('Look at the happy puppy') == ['happy', 'puppy']", "assert find_words_with_double_letters('No double letters here') == []"], "challenge_test_list": []}
{"text": "Write a function to find all words that contain numbers in the given string by using regex.", "code": "import re\ndef find_words_with_numbers(text):\n  return re.findall(r'\\b\\w*\\d+\\w*\\b', text)", "task_id": "330_ee82c3c3-9b1f-4270-8d46-391f96804276", "test_setup_code": "", "test_list": ["assert find_words_with_numbers('The car model is X5 and the price is 20000 dollars') == ['X5', '20000']", "assert find_words_with_numbers('I have 2 cats and 3 dogs') == ['2', '3']", "assert find_words_with_numbers('No numbers here!') == []", "assert find_words_with_numbers('My phone number is 123-456-7890 and my email is user123@example.com') == ['123', '456', '7890', 'user123']"], "challenge_test_list": []}
{"text": "Write a function to find all palindrome words in the given string by using regex.", "code": "import re\ndef find_palindrome_words(text):\n  return [word for word in re.findall(r'\\b\\w+\\b', text) if word == word[::-1]]", "task_id": "330_68bd41f0-6f22-44ad-85fa-b9a8c8ae17f5", "test_setup_code": "", "test_list": ["assert find_palindrome_words('A man a plan a canal Panama') == ['A', 'a', 'a']", "assert find_palindrome_words('Madam Arora teaches malayalam') == ['Madam', 'Arora', 'malayalam']", "assert find_palindrome_words('No palindromes here') == []", "assert find_palindrome_words('Level, civic, and radar are palindromes') == ['Level', 'civic', 'radar']"], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one capital letter in the given string by using regex.", "code": "import re\ndef find_words_with_capital_letters(text):\n  return re.findall(r'\\b\\w*[A-Z]+\\w*\\b', text)", "task_id": "330_868abd87-1d39-451a-96a6-d51fc8050ec8", "test_setup_code": "", "test_list": ["assert find_words_with_capital_letters('Hello world') == ['Hello']", "assert find_words_with_capital_letters('this is a Test') == ['Test']", "assert find_words_with_capital_letters('NO capital letters here') == ['NO']", "assert find_words_with_capital_letters('') == []"], "challenge_test_list": []}
{"text": "Write a function to find all words that contain no vowels in the given string by using regex.", "code": "import re\ndef find_words_with_no_vowels(text):\n  return re.findall(r'\\b[^aeiouAEIOU\\W]+\\b', text)", "task_id": "330_b17209eb-3806-4341-b812-d5776cf9858a", "test_setup_code": "", "test_list": ["assert find_words_with_no_vowels('This is a test') == ['Ths', 's', 'tst']", "assert find_words_with_no_vowels('Why try dry fly') == ['Why', 'try', 'dry', 'fly']", "assert find_words_with_no_vowels('') == []", "assert find_words_with_no_vowels('A quick brown fox jumps over the lazy dog') == ['brwn', 'fx', 'jmps']"], "challenge_test_list": []}
{"text": "Write a python function to count unset bits of a given number in its binary representation.", "code": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count", "task_id": "331_53fed245-115b-40df-869a-7b6be151b750", "test_setup_code": "", "test_list": ["assert count_unset_bits(0) == 1", "assert count_unset_bits(1) == 0", "assert count_unset_bits(5) == 1", "assert count_unset_bits(15) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count set bits of a given number in its binary representation.", "code": "def count_set_bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count", "task_id": "331_5fb36060-9807-4f3e-8b01-4a2e8d1f5a4a", "test_setup_code": "", "test_list": ["assert count_set_bits(0) == 0", "assert count_set_bits(1) == 1", "assert count_set_bits(255) == 8", "assert count_set_bits(1023) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the number of differing bits between two given numbers.", "code": "def count_bits_difference(a, b): \n    count = 0\n    xor = a ^ b\n    while xor: \n        count += xor & 1\n        xor >>= 1\n    return count", "task_id": "331_724b2456-ea56-4300-bd75-7acd82370926", "test_setup_code": "", "test_list": ["assert count_bits_difference(4, 14) == 3", "assert count_bits_difference(0, 0) == 0", "assert count_bits_difference(255, 0) == 8", "assert count_bits_difference(1, 2) == 2"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(n): \n    return n > 0 and (n & (n - 1)) == 0", "task_id": "331_e0cc3450-a7dc-4e9a-86b1-49f5d13bc86f", "test_setup_code": "", "test_list": ["assert is_power_of_two(1) == True", "assert is_power_of_two(16) == True", "assert is_power_of_two(18) == False", "assert is_power_of_two(0) == False"], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given number.", "code": "def reverse_bits(n): \n    result = 0\n    while n: \n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "331_ffde6590-4f67-4e4e-b088-cbd2bd49c8b9", "test_setup_code": "", "test_list": ["assert reverse_bits(0) == 0", "assert reverse_bits(1) == 1", "assert reverse_bits(2) == 1", "assert reverse_bits(13) == 11"], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in the binary representation of a given number.", "code": "def count_leading_zeros(n): \n    if n == 0: \n        return 32\n    count = 0\n    while (n & (1 << 31)) == 0: \n        n <<= 1\n        count += 1\n    return count", "task_id": "331_9e466317-bab9-4ff7-8647-4d1b89949ed8", "test_setup_code": "", "test_list": ["assert count_leading_zeros(0) == 32", "assert count_leading_zeros(1) == 31", "assert count_leading_zeros(2) == 30", "assert count_leading_zeros(2147483647) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the binary representation of a given number.", "code": "def count_trailing_zeros(n): \n    if n == 0: \n        return 32\n    count = 0\n    while (n & 1) == 0: \n        n >>= 1\n        count += 1\n    return count", "task_id": "331_dbb24d88-b792-4e5e-93e0-8f8bab0e20b3", "test_setup_code": "", "test_list": ["assert count_trailing_zeros(0) == 32", "assert count_trailing_zeros(8) == 3", "assert count_trailing_zeros(15) == 0", "assert count_trailing_zeros(1024) == 10"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is even.", "code": "def is_even(n): \n    return (n & 1) == 0", "task_id": "331_f650c3b8-e40f-407b-bd55-a0086c70b5e6", "test_setup_code": "", "test_list": ["assert is_even(2) == True", "assert is_even(3) == False", "assert is_even(0) == True", "assert is_even(-4) == True"], "challenge_test_list": []}
{"text": "Write a python function to toggle the k-th bit of a given number.", "code": "def toggle_kth_bit(n, k): \n    return n ^ (1 << (k - 1))", "task_id": "331_bdf68237-5b6b-45b6-a823-9b7dd7c392d6", "test_setup_code": "", "test_list": ["assert toggle_kth_bit(10, 2) == 8", "assert toggle_kth_bit(15, 4) == 7", "assert toggle_kth_bit(0, 1) == 1", "assert toggle_kth_bit(1, 1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to check if the k-th bit of a given number is set.", "code": "def is_kth_bit_set(n, k): \n    return (n & (1 << (k - 1))) != 0", "task_id": "331_8aeb2f9e-298a-4bba-a132-134406861335", "test_setup_code": "", "test_list": ["assert is_kth_bit_set(5, 1) == True", "assert is_kth_bit_set(5, 2) == False", "assert is_kth_bit_set(8, 4) == True", "assert is_kth_bit_set(0, 1) == False"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each vowel in a given string.", "code": "def count_vowels(s: str) -> dict:\n    vowels = 'aeiou'\n    freq = {v: 0 for v in vowels}\n    for char in s:\n        if char in vowels:\n            freq[char] += 1\n    return freq", "task_id": "332_2ba4e9fe-e9a1-4412-9b84-b6301a56dbaa", "test_setup_code": "", "test_list": ["assert count_vowels('hello world') == {'a': 0, 'e': 1, 'i': 0, 'o': 2, 'u': 0}", "assert count_vowels('AEIOUaeiou') == {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}", "assert count_vowels('') == {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}", "assert count_vowels('bcdfghjklmnpqrstvwxyz') == {'a': 0, 'e': 0, 'i': 0, 'o': 0, 'u': 0}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each word in a given string.", "code": "def word_frequency(s: str) -> dict:\n    words = s.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return freq", "task_id": "332_a69b9fc7-758b-4769-877a-5cce0bbd1eff", "test_setup_code": "", "test_list": ["assert word_frequency('the quick brown fox jumps over the lazy dog') == {'the': 2, 'quick': 1, 'brown': 1, 'fox': 1, 'jumps': 1, 'over': 1, 'lazy': 1, 'dog': 1}", "assert word_frequency('hello hello world') == {'hello': 2, 'world': 1}", "assert word_frequency('') == {}", "assert word_frequency('a a a a b b c') == {'a': 4, 'b': 2, 'c': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each digit in a given string.", "code": "def count_digits(s: str) -> dict:\n    digits = '0123456789'\n    freq = {d: 0 for d in digits}\n    for char in s:\n        if char in digits:\n            freq[char] += 1\n    return freq", "task_id": "332_ad7cd9c9-ca1c-4c4d-accd-05d785632f30", "test_setup_code": "", "test_list": ["assert count_digits('1234567890') == {'0': 1, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1}", "assert count_digits('11223344556677889900') == {'0': 2, '1': 2, '2': 2, '3': 2, '4': 2, '5': 2, '6': 2, '7': 2, '8': 2, '9': 2}", "assert count_digits('abc123xyz456') == {'0': 0, '1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 0, '8': 0, '9': 0}", "assert count_digits('') == {'0': 0, '1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0, '8': 0, '9': 0}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each uppercase letter in a given string.", "code": "def count_uppercase(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if char.isupper():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_f9d4659c-4f7e-49fb-b89c-2e3c3e1bc04b", "test_setup_code": "", "test_list": ["assert count_uppercase('Hello World!') == {'H': 1, 'W': 1}", "assert count_uppercase('AAAaaaBBBbbbCCCccc') == {'A': 3, 'B': 3, 'C': 3}", "assert count_uppercase('') == {}", "assert count_uppercase('12345!@#$%') == {}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each consonant in a given string.", "code": "def count_consonants(s: str) -> dict:\n    vowels = 'aeiou'\n    freq = {}\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_02f4f4ca-f436-40be-8eb3-00811c87f25a", "test_setup_code": "", "test_list": ["assert count_consonants('hello world') == {'h': 1, 'l': 3, 'w': 1, 'r': 1, 'd': 1}", "assert count_consonants('') == {}", "assert count_consonants('AEIOUaeiou') == {}", "assert count_consonants('Python 3.8!') == {'P': 1, 'y': 1, 't': 1, 'h': 1, 'n': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each alphanumeric character in a given string.", "code": "def count_alphanumeric(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if char.isalnum():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_c9ef2d94-9f05-4895-a3d5-093767fda3a9", "test_setup_code": "", "test_list": ["assert count_alphanumeric('abc123') == {'a': 1, 'b': 1, 'c': 1, '1': 1, '2': 1, '3': 1}", "assert count_alphanumeric('aabbcc112233') == {'a': 2, 'b': 2, 'c': 2, '1': 2, '2': 2, '3': 2}", "assert count_alphanumeric('') == {}", "assert count_alphanumeric('!@#$$%^&*()') == {}", "assert count_alphanumeric('AaBbCc123') == {'A': 1, 'a': 1, 'B': 1, 'b': 1, 'C': 1, 'c': 1, '1': 1, '2': 1, '3': 1}", "assert count_alphanumeric('1234567890') == {'1': 1, '2': 1, '3': 1, '4': 1, '5': 1, '6': 1, '7': 1, '8': 1, '9': 1, '0': 1}"], "challenge_test_list": []}
{"text": "Write a function to count the number of whitespace characters in a given string.", "code": "def count_whitespace(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isspace():\n            count += 1\n    return count", "task_id": "332_7e858545-c0d0-4ade-a3a0-7dcd1be52cf7", "test_setup_code": "", "test_list": ["assert count_whitespace('Hello World') == 1", "assert count_whitespace('   Leading and trailing spaces   ') == 7", "assert count_whitespace('NoSpacesHere') == 0", "assert count_whitespace('\\tTab\\nNewline\\rCarriageReturn') == 3"], "challenge_test_list": []}
{"text": "Write a python function to sort a list according to the last element in sublist.", "code": "def sort_by_last_element(sub_li): \n    sub_li.sort(key = lambda x: x[-1]) \n    return sub_li", "task_id": "333_13eecf3c-0a4f-49c6-be5e-49804664c21e", "test_setup_code": "", "test_list": ["assert sort_by_last_element([[1, 3], [2, 2], [3, 1]]) == [[3, 1], [2, 2], [1, 3]]", "assert sort_by_last_element([[5, 5], [1, 2], [3, 3], [2, 1]]) == [[2, 1], [1, 2], [3, 3], [5, 5]]", "assert sort_by_last_element([[10, 20], [30, 40], [50, 60], [70, 80]]) == [[10, 20], [30, 40], [50, 60], [70, 80]]", "assert sort_by_last_element([[1, 1], [1, 1], [1, 1]]) == [[1, 1], [1, 1], [1, 1]]"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the length of each string.", "code": "def sort_by_length(sub_li): \n    sub_li.sort(key = len) \n    return sub_li", "task_id": "333_e60eb757-5c29-45f9-99ca-697529c2a108", "test_setup_code": "", "test_list": ["assert sort_by_length(['apple', 'banana', 'kiwi', 'cherry']) == ['kiwi', 'apple', 'cherry', 'banana']", "assert sort_by_length(['a', 'ab', 'abc', 'abcd']) == ['a', 'ab', 'abc', 'abcd']", "assert sort_by_length(['', 'a', 'ab', 'abc', 'abcd']) == ['', 'a', 'ab', 'abc', 'abcd']", "assert sort_by_length(['same', 'size', 'test', 'case']) == ['same', 'size', 'test', 'case']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of lists by the sum of elements in each sublist.", "code": "def sort_by_sum(sub_li): \n    sub_li.sort(key = lambda x: sum(x)) \n    return sub_li", "task_id": "333_c27dd34e-03dd-47a6-925f-5aa4061a9107", "test_setup_code": "", "test_list": ["assert sort_by_sum([[1, 2, 3], [4, 5], [0, 0, 0], [1, 1, 1, 1]]) == [[0, 0, 0], [1, 1, 1, 1], [1, 2, 3], [4, 5]]", "assert sort_by_sum([[10], [5, 5], [2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]) == [[10], [5, 5], [2, 3, 5], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]]", "assert sort_by_sum([[], [1], [2, 2], [-1, -1, -1], [0]]) == [[-1, -1, -1], [], [0], [1], [2, 2]]", "assert sort_by_sum([[100], [50, 50], [25, 25, 25, 25], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]) == [[100], [50, 50], [25, 25, 25, 25], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the second character in each string.", "code": "def sort_by_second_char(sub_li): \n    sub_li.sort(key = lambda x: x[1] if len(x) > 1 else '') \n    return sub_li", "task_id": "333_71f365e0-0112-4014-ab70-32356a35e91e", "test_setup_code": "", "test_list": ["assert sort_by_second_char(['apple', 'banana', 'cherry', 'date']) == ['banana', 'apple', 'date', 'cherry']", "assert sort_by_second_char(['a', 'bb', 'ccc', 'dddd']) == ['a', 'bb', 'ccc', 'dddd']", "assert sort_by_second_char(['zebra', 'yak', 'xenon', 'wolf']) == ['yak', 'zebra', 'wolf', 'xenon']", "assert sort_by_second_char(['', 'a', 'ab', 'abc']) == ['', 'a', 'ab', 'abc']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of integers by their absolute values.", "code": "def sort_by_absolute_value(sub_li): \n    sub_li.sort(key = abs) \n    return sub_li", "task_id": "333_9e70248d-3cc6-4b4b-8e37-501624c61ddf", "test_setup_code": "", "test_list": ["assert sort_by_absolute_value([3, -1, -4, 2, 0]) == [0, -1, 2, 3, -4]", "assert sort_by_absolute_value([-10, 5, -3, 2, -1]) == [-1, 2, -3, 5, -10]", "assert sort_by_absolute_value([0, 0, 0]) == [0, 0, 0]", "assert sort_by_absolute_value([1, -1, 1, -1]) == [1, -1, 1, -1]"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of vowels in each string.", "code": "def sort_by_vowel_count(sub_li): \n    sub_li.sort(key = lambda x: sum(1 for char in x if char in 'aeiouAEIOU')) \n    return sub_li", "task_id": "333_8c60a00e-bafb-415b-809b-4b0784c8290f", "test_setup_code": "", "test_list": ["assert sort_by_vowel_count(['apple', 'banana', 'cherry']) == ['cherry', 'banana', 'apple']", "assert sort_by_vowel_count(['dog', 'cat', 'elephant']) == ['cat', 'dog', 'elephant']", "assert sort_by_vowel_count(['a', 'e', 'i', 'o', 'u']) == ['a', 'e', 'i', 'o', 'u']", "assert sort_by_vowel_count(['rhythm', 'fly', 'sky']) == ['rhythm', 'fly', 'sky']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the first digit found in each string.", "code": "def sort_by_first_digit(sub_li): \n    sub_li.sort(key = lambda x: next((char for char in x if char.isdigit()), '')) \n    return sub_li", "task_id": "333_217acccf-d451-484f-bb20-5db2513e20a6", "test_setup_code": "", "test_list": ["assert sort_by_first_digit(['a3b', 'c2d', 'e1f']) == ['e1f', 'c2d', 'a3b']", "assert sort_by_first_digit(['abc', 'def', 'ghi']) == ['abc', 'def', 'ghi']", "assert sort_by_first_digit(['1a', '2b', '3c']) == ['1a', '2b', '3c']", "assert sort_by_first_digit(['z9y', 'y8x', 'x7w', 'w6v', 'v5u']) == ['v5u', 'w6v', 'x7w', 'y8x', 'z9y']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of words in each string.", "code": "def sort_by_word_count(sub_li): \n    sub_li.sort(key = lambda x: len(x.split())) \n    return sub_li", "task_id": "333_33f861e1-3d19-492d-bfc0-767b988f68ec", "test_setup_code": "", "test_list": ["assert sort_by_word_count(['a quick brown fox', 'jumps over', 'the lazy dog']) == ['jumps over', 'the lazy dog', 'a quick brown fox']", "assert sort_by_word_count(['hello', 'world', 'this is a test', 'of the sorting function']) == ['hello', 'world', 'this is a test', 'of the sorting function']", "assert sort_by_word_count(['one', 'two words', 'three words here', 'four words are here now']) == ['one', 'two words', 'three words here', 'four words are here now']", "assert sort_by_word_count(['', 'single', 'two words', 'three words here']) == ['', 'single', 'two words', 'three words here']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of unique characters in each string.", "code": "def sort_by_unique_chars(sub_li): \n    sub_li.sort(key = lambda x: len(set(x))) \n    return sub_li", "task_id": "333_8d6fd4e3-51e4-4e7a-abac-d2ff3bae5217", "test_setup_code": "", "test_list": ["assert sort_by_unique_chars(['apple', 'banana', 'cherry']) == ['banana', 'apple', 'cherry']", "assert sort_by_unique_chars(['abc', 'a', 'ab', 'abcd']) == ['a', 'ab', 'abc', 'abcd']", "assert sort_by_unique_chars(['', 'a', 'aa', 'aaa']) == ['', 'a', 'aa', 'aaa']", "assert sort_by_unique_chars(['aabbcc', 'abc', 'aabb', 'a']) == ['a', 'aabb', 'abc', 'aabbcc']"], "challenge_test_list": []}
{"text": "Write a python function to sort a list according to the first element in sublist.", "code": "def sort_by_first_element(sub_li): \n    sub_li.sort(key = lambda x: x[0]) \n    return sub_li", "task_id": "333_9bc23d17-b56c-4361-8038-0a6d2fc55911", "test_setup_code": "", "test_list": ["assert sort_by_first_element([[3, 2], [1, 4], [2, 5]]) == [[1, 4], [2, 5], [3, 2]]", "assert sort_by_first_element([[10, 2], [5, 4], [20, 1], [15, 3]]) == [[5, 4], [10, 2], [15, 3], [20, 1]]", "assert sort_by_first_element([[1, 2], [1, 3], [1, 1]]) == [[1, 2], [1, 3], [1, 1]]", "assert sort_by_first_element([[0, 0], [-1, 2], [1, -2], [0, 1]]) == [[-1, 2], [0, 0], [0, 1], [1, -2]]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "335_b920df72-1a0d-41da-bf6e-756a8460ea0f", "test_setup_code": "", "test_list": ["assert sum_of_squares(1) == 1", "assert sum_of_squares(5) == 55", "assert sum_of_squares(0) == 0", "assert sum_of_squares(10) == 385"], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "335_17bf5e73-a668-4333-90e2-4ae7830c4c36", "test_setup_code": "", "test_list": ["assert sum_of_cubes(1) == 1", "assert sum_of_cubes(2) == 9", "assert sum_of_cubes(10) == 3025", "assert sum_of_cubes(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n: int) -> int:\n    return n * (n + 1)", "task_id": "335_62e0d211-2e24-4327-a499-968200862d9a", "test_setup_code": "", "test_list": ["assert sum_of_even_numbers(1) == 2", "assert sum_of_even_numbers(5) == 30", "assert sum_of_even_numbers(0) == 0", "assert sum_of_even_numbers(10) == 110"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n: int) -> int:\n    return n * n", "task_id": "335_db0894c8-d0af-4b82-a3e5-e00b1784f30c", "test_setup_code": "", "test_list": ["assert sum_of_odd_numbers(1) == 1", "assert sum_of_odd_numbers(5) == 25", "assert sum_of_odd_numbers(0) == 0", "assert sum_of_odd_numbers(10) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n multiples of k.", "code": "def sum_of_multiples_of_k(n: int, k: int) -> int:\n    return k * n * (n + 1) // 2", "task_id": "335_0a4d9540-3bd2-470e-9c79-13c52617bfdb", "test_setup_code": "", "test_list": ["assert sum_of_multiples_of_k(5, 3) == 45", "assert sum_of_multiples_of_k(0, 10) == 0", "assert sum_of_multiples_of_k(1, 7) == 7", "assert sum_of_multiples_of_k(10, 1) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of a geometric progression with first term a and common ratio r.", "code": "def sum_of_geometric_progression(a: int, r: int, n: int) -> float:\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) / (1 - r)", "task_id": "335_45f912e7-6db5-491f-8799-084727ac6621", "test_setup_code": "", "test_list": ["assert sum_of_geometric_progression(1, 2, 3) == 7.0", "assert sum_of_geometric_progression(5, 3, 4) == 200.0", "assert sum_of_geometric_progression(2, 1, 5) == 10", "assert sum_of_geometric_progression(3, -2, 3) == -3.0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n: int) -> int:\n    from math import factorial\n    return sum(factorial(i) for i in range(1, n + 1))", "task_id": "335_fbe2d06e-55a3-4f13-8114-c5050bcc7a5b", "test_setup_code": "", "test_list": ["assert sum_of_factorials(1) == 1", "assert sum_of_factorials(4) == 33", "assert sum_of_factorials(5) == 153", "assert sum_of_factorials(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = 0, 1\n    total = a + b\n    for _ in range(2, n):\n        a, b = b, a + b\n        total += b\n    return total", "task_id": "335_706f114a-8b66-44e8-aa54-fba570ca71a1", "test_setup_code": "", "test_list": ["assert sum_of_fibonacci(0) == 0", "assert sum_of_fibonacci(1) == 0", "assert sum_of_fibonacci(5) == 7", "assert sum_of_fibonacci(10) == 88"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "335_b1c4846a-af14-438f-b81d-ab8615325061", "test_setup_code": "", "test_list": ["assert sum_of_digits(12345) == 15", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all divisors of a given number n.", "code": "def sum_of_divisors(n: int) -> int:\n    return sum(i for i in range(1, n + 1) if n % i == 0)", "task_id": "335_8d4da9da-e582-4bc7-a11b-f08753dd02ae", "test_setup_code": "", "test_list": ["assert sum_of_divisors(1) == 1", "assert sum_of_divisors(6) == 12", "assert sum_of_divisors(28) == 56", "assert sum_of_divisors(100) == 217"], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False", "task_id": "336_54fbbb42-b126-4ae9-877c-a5031ccaa70a", "test_setup_code": "", "test_list": ["assert is_leap_year(2020) == True", "assert is_leap_year(1900) == False", "assert is_leap_year(2000) == True", "assert is_leap_year(2100) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(number: int) -> bool:\n    return number % 2 == 0", "task_id": "336_249ef447-1776-47f9-9658-763af6e10a86", "test_setup_code": "", "test_list": ["assert is_even(4) == True", "assert is_even(7) == False", "assert is_even(0) == True", "assert is_even(-2) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(number: int) -> bool:\n    if number <= 1:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True", "task_id": "336_20f4c301-3cc7-4ac3-9774-d976834c1dcb", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given word is a palindrome or not.", "code": "def is_palindrome(word: str) -> bool:\n    return word == word[::-1]", "task_id": "336_8352d437-3e0a-479a-ba9e-02a277b65665", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('') == True", "assert is_palindrome('a') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is positive or not.", "code": "def is_positive(number: int) -> bool:\n    return number > 0", "task_id": "336_e04e58ac-48b2-4d3a-9616-baac4f82daf4", "test_setup_code": "", "test_list": ["assert is_positive(10) == True", "assert is_positive(-5) == False", "assert is_positive(0) == False", "assert is_positive(999999) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(character: str) -> bool:\n    return character.lower() in 'aeiou'", "task_id": "336_1e82f39d-0b0f-4489-979a-ca606ee7607e", "test_setup_code": "", "test_list": ["assert is_vowel('a') == True", "assert is_vowel('b') == False", "assert is_vowel('E') == True", "assert is_vowel('z') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is an uppercase letter or not.", "code": "def is_uppercase(character: str) -> bool:\n    return character.isupper()", "task_id": "336_6a67f731-5a4c-4ea2-a29d-70e2a72d84a0", "test_setup_code": "", "test_list": ["assert is_uppercase('A') == True", "assert is_uppercase('a') == False", "assert is_uppercase('Z') == True", "assert is_uppercase('1') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 3 or not.", "code": "def is_divisible_by_3(number: int) -> bool:\n    return number % 3 == 0", "task_id": "336_6d3ef45b-12e2-4589-a840-a79d1701286b", "test_setup_code": "", "test_list": ["assert is_divisible_by_3(9) == True", "assert is_divisible_by_3(10) == False", "assert is_divisible_by_3(0) == True", "assert is_divisible_by_3(-3) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether the given day is a weekend or not.", "code": "def is_weekend(day: str) -> bool:\n    return day.lower() in ['saturday', 'sunday']", "task_id": "336_44fe27c6-9bb5-452a-8240-ad471f4cb231", "test_setup_code": "", "test_list": ["assert is_weekend('Saturday') == True", "assert is_weekend('sunday') == True", "assert is_weekend('Monday') == False", "assert is_weekend('friday') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a consonant or not.", "code": "def is_consonant(character: str) -> bool:\n    return character.isalpha() and character.lower() not in 'aeiou'", "task_id": "336_d9d5b1ea-eabd-4ade-a556-7462f0a32fd6", "test_setup_code": "", "test_list": ["assert is_consonant('b') == True", "assert is_consonant('a') == False", "assert is_consonant('1') == False", "assert is_consonant('Z') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is a right triangle.", "code": "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "334_e3986bcb-3105-45cc-9369-4d0173496ce6", "test_setup_code": "", "test_list": ["assert is_right_triangle(3, 4, 5) == True", "assert is_right_triangle(5, 12, 13) == True", "assert is_right_triangle(1, 1, 1) == False", "assert is_right_triangle(0, 0, 0) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an equilateral triangle.", "code": "def is_equilateral_triangle(a, b, c):\n    return a == b == c", "task_id": "334_5ea4e242-05a1-47cd-a1a1-0b5d705e150b", "test_setup_code": "", "test_list": ["assert is_equilateral_triangle(3, 3, 3) == True", "assert is_equilateral_triangle(3, 4, 5) == False", "assert is_equilateral_triangle(0, 0, 0) == False", "assert is_equilateral_triangle(1, 1, 2) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an isosceles triangle.", "code": "def is_isosceles_triangle(a, b, c):\n    return a == b or b == c or a == c", "task_id": "334_1610e778-0c6f-4f9a-a120-69a8334b8589", "test_setup_code": "", "test_list": ["assert is_isosceles_triangle(5, 5, 8) == True", "assert is_isosceles_triangle(7, 7, 7) == True", "assert is_isosceles_triangle(3, 4, 5) == False", "assert is_isosceles_triangle(10, 15, 10) == True"], "challenge_test_list": []}
{"text": "Write a python function to calculate the area of a triangle given its sides using Heron's formula.", "code": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))", "task_id": "334_2e254d27-f154-49ba-80b6-b39cbfb32e09", "test_setup_code": "", "test_list": ["assert triangle_area(3, 4, 5) == 6.0", "assert triangle_area(7, 10, 5) == 16.24807680927192", "assert triangle_area(1, 1, 1) == 0.4330127018922193", "assert triangle_area(0.1, 0.1, 0.1) == 0.004330127018922193"], "challenge_test_list": []}
{"text": "Write a python function to calculate the perimeter of a triangle given its sides.", "code": "def triangle_perimeter(a, b, c):\n    return a + b + c", "task_id": "334_89d008ba-3033-4a15-9d6e-9fcbf249826e", "test_setup_code": "", "test_list": ["assert triangle_perimeter(3, 4, 5) == 12", "assert triangle_perimeter(1, 1, 1) == 3", "assert triangle_perimeter(0, 0, 0) == 0", "assert triangle_perimeter(7, 10, 5) == 22"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an obtuse triangle.", "code": "def is_obtuse_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "334_4524ce21-0fe8-4015-b3ac-8daa8be4a66b", "test_setup_code": "", "test_list": ["assert is_obtuse_triangle(3, 4, 6) == True", "assert is_obtuse_triangle(3, 4, 5) == False", "assert is_obtuse_triangle(2, 2, 3) == True", "assert is_obtuse_triangle(5, 5, 5) == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an acute triangle.", "code": "def is_acute_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "334_14d9926c-6ce6-4322-9967-15b39c3754e6", "test_setup_code": "", "test_list": ["assert is_acute_triangle(3, 4, 5) == False", "assert is_acute_triangle(7, 10, 5) == True", "assert is_acute_triangle(1, 1, 1) == True", "assert is_acute_triangle(10, 6, 8) == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is a scalene triangle.", "code": "def is_scalene_triangle(a, b, c):\n    return a != b and b != c and a != c", "task_id": "334_c148bf07-a7bf-4bd8-957c-c76ec271e518", "test_setup_code": "", "test_list": ["assert is_scalene_triangle(3, 4, 5) == True", "assert is_scalene_triangle(5, 5, 5) == False", "assert is_scalene_triangle(2, 2, 3) == False", "assert is_scalene_triangle(7, 10, 5) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring element in a list.", "code": "def max_occurring_element(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return count.most_common(1)[0][0]", "task_id": "339_b09dd298-3447-4c02-af0f-d8382fc58730", "test_setup_code": "", "test_list": ["assert max_occurring_element([1, 2, 3, 2, 4, 2, 5]) == 2", "assert max_occurring_element(['a', 'b', 'a', 'c', 'a', 'b']) == 'a'", "assert max_occurring_element([1, 1, 1, 1, 1]) == 1", "assert max_occurring_element([]) == None"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "339_bb33a2d4-af12-445a-b9e0-1f75e181bc98", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "339_c425659a-0514-4532-a8d1-aabae303fe5b", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('12345') == '54321'"], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "339_665be3ee-5fdd-479c-a2de-6f4949bfbe46", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('') == True", "assert is_palindrome('a') == True"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "339_11f3cfb2-8a0b-4344-accc-f2315f76fb80", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "339_d3ae90b3-7bd3-435f-abb1-abcb96929435", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(5) == 5", "assert fibonacci(10) == 55"], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "339_d4916452-0c2b-4ae4-8674-cfad6ae60c8a", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(100, 100) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "339_a23129c1-93c1-4776-84c8-83893dd85e00", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(0, 10) == 0", "assert lcm(7, 3) == 21", "assert lcm(12, 15) == 60"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "339_38f43d30-80a2-484d-88a4-05208af431ae", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "339_e16a965e-9e13-4b90-9183-b9e7cae570b0", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5", "assert count_vowels('') == 0"], "challenge_test_list": []}
{"text": "Write a function to convert the given list into an ordered tuple.", "code": "def list_to_tuple(lst):\n    t = tuple(sorted(lst))\n    return t", "task_id": "341_40edea4e-8a51-4c28-acc2-548a5766192c", "test_setup_code": "", "test_list": ["assert list_to_tuple([3, 1, 2]) == (1, 2, 3)", "assert list_to_tuple([]) == ()", "assert list_to_tuple([5, -1, 3, 0, 2]) == (-1, 0, 2, 3, 5)", "assert list_to_tuple([7, 7, 7, 7]) == (7, 7, 7, 7)"], "challenge_test_list": []}
{"text": "Write a function to convert the given set into an ordered list.", "code": "def set_to_list(s):\n    l = sorted(list(s))\n    return l", "task_id": "341_7117f0fe-3d85-4f68-ac7f-f30fdbfde383", "test_setup_code": "", "test_list": ["assert set_to_list({3, 1, 2}) == [1, 2, 3]", "assert set_to_list({}) == []", "assert set_to_list({5, 5, 5, 5}) == [5]", "assert set_to_list({-1, -3, -2, 0, 1}) == [-3, -2, -1, 0, 1]"], "challenge_test_list": []}
{"text": "Write a function to convert the characters of the given string into an ordered tuple.", "code": "def string_to_tuple(s):\n    t = tuple(sorted(s))\n    return t", "task_id": "341_5657f1c2-6690-483f-8af7-2fac72dbbe63", "test_setup_code": "", "test_list": ["assert string_to_tuple('hello') == ('e', 'h', 'l', 'l', 'o')", "assert string_to_tuple('') == ()", "assert string_to_tuple('abc123') == ('1', '2', '3', 'a', 'b', 'c')", "assert string_to_tuple('zyxwvutsrqponmlkjihgfedcba') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z')"], "challenge_test_list": []}
{"text": "Write a function to convert the keys of the given dictionary into an ordered tuple.", "code": "def dict_keys_to_tuple(d):\n    t = tuple(sorted(d.keys()))\n    return t", "task_id": "341_45ee90f7-6ee7-447f-a9c7-e54c867a0c71", "test_setup_code": "", "test_list": ["assert dict_keys_to_tuple({'a': 1, 'b': 2, 'c': 3}) == ('a', 'b', 'c')", "assert dict_keys_to_tuple({'z': 10, 'y': 20, 'x': 30}) == ('x', 'y', 'z')", "assert dict_keys_to_tuple({'apple': 5, 'banana': 3, 'cherry': 8}) == ('apple', 'banana', 'cherry')", "assert dict_keys_to_tuple({}) == ()"], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a set.", "code": "def list_to_set(lst):\n    s = set(lst)\n    return s", "task_id": "341_c4928573-e375-47a8-97f5-9f8a389b69c5", "test_setup_code": "", "test_list": ["assert list_to_set([1, 2, 3, 4, 5]) == {1, 2, 3, 4, 5}", "assert list_to_set([1, 2, 2, 3, 4, 4, 5]) == {1, 2, 3, 4, 5}", "assert list_to_set([]) == set()", "assert list_to_set([1, 'a', 1, 'b', 'a']) == {1, 'a', 'b'}"], "challenge_test_list": []}
{"text": "Write a function to convert the characters of the given string into an ordered list.", "code": "def string_to_list(s):\n    l = sorted(list(s))\n    return l", "task_id": "341_60490470-062c-4ee7-a08f-2e01bd333e29", "test_setup_code": "", "test_list": ["assert string_to_list('hello') == ['e', 'h', 'l', 'l', 'o']", "assert string_to_list('') == []", "assert string_to_list('a') == ['a']", "assert string_to_list('zyxwvutsrqponmlkjihgfedcba') == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple into a set.", "code": "def tuple_to_set(t):\n    s = set(t)\n    return s", "task_id": "341_0849335d-c334-4b90-a34a-f625540dca94", "test_setup_code": "", "test_list": ["assert tuple_to_set((1, 2, 3)) == {1, 2, 3}", "assert tuple_to_set((1, 1, 2, 2, 3, 3)) == {1, 2, 3}", "assert tuple_to_set(()) == set()", "assert tuple_to_set(('a', 'b', 'a', 'c', 'b')) == {'a', 'b', 'c'}"], "challenge_test_list": []}
{"text": "Write a function to convert the given set into a string of ordered characters.", "code": "def set_to_string(s):\n    st = ''.join(sorted(s))\n    return st", "task_id": "341_7d1cf719-cf04-45c0-a063-5459b3f3523d", "test_setup_code": "", "test_list": ["assert set_to_string({'b', 'a', 'c'}) == 'abc'", "assert set_to_string({'z', 'x', 'y'}) == 'xyz'", "assert set_to_string({'a', 'a', 'b', 'b'}) == 'ab'", "assert set_to_string({'1', '2', '3', '4'}) == '1234'"], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a string of ordered characters.", "code": "def list_to_string(lst):\n    st = ''.join(sorted(lst))\n    return st", "task_id": "341_e615b4d2-e416-4aea-a639-1d0f1685e1a9", "test_setup_code": "", "test_list": ["assert list_to_string(['b', 'a', 'c']) == 'abc'", "assert list_to_string(['z', 'y', 'x', 'w']) == 'wxyz'", "assert list_to_string(['a', 'a', 'b', 'b']) == 'aabb'", "assert list_to_string([]) == ''"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with a vowel.", "code": "def is_vowel(c):\n    return c in 'aeiouAEIOU'\n\ndef count_vowel_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_vowel(s[i]) and is_vowel(s[i+j-1]):\n                result += 1\n    return result", "task_id": "338_1b2cc197-19be-41d3-8c6f-73e5b105091c", "test_setup_code": "", "test_list": ["assert count_vowel_substrings('aeiou') == 15", "assert count_vowel_substrings('abcde') == 2", "assert count_vowel_substrings('a') == 1", "assert count_vowel_substrings('bcdfg') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings with exactly k distinct characters.", "code": "def count_substrings_with_k_distinct_chars(s, k):\n    from collections import defaultdict\n    def at_most_k_distinct(s, k):\n        count = defaultdict(int)\n        left = 0\n        result = 0\n        for right in range(len(s)):\n            count[s[right]] += 1\n            while len(count) > k:\n                count[s[left]] -= 1\n                if count[s[left]] == 0:\n                    del count[s[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return at_most_k_distinct(s, k) - at_most_k_distinct(s, k-1)", "task_id": "338_50b6814b-3d4d-4133-bf8e-e2ec73911f85", "test_setup_code": "", "test_list": ["assert count_substrings_with_k_distinct_chars('abcba', 2) == 7", "assert count_substrings_with_k_distinct_chars('aaaa', 1) == 10", "assert count_substrings_with_k_distinct_chars('aabacbebebe', 3) == 23", "assert count_substrings_with_k_distinct_chars('ab', 3) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with a consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c not in 'aeiouAEIOU'\n\ndef count_substrings_with_consonant_ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_consonant(s[i]) and is_consonant(s[i+j-1]):\n                result += 1\n    return result", "task_id": "338_9b418be7-7982-4843-a6ce-fef3db33fb8b", "test_setup_code": "", "test_list": ["assert count_substrings_with_consonant_ends('abc') == 3", "assert count_substrings_with_consonant_ends('a') == 0", "assert count_substrings_with_consonant_ends('bcdfg') == 15", "assert count_substrings_with_consonant_ends('aeiou') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where the middle character (if it exists) is the same as the first and last character.", "code": "def count_substrings_with_same_middle(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(3, n-i+1, 2):\n            mid = (j-1)//2\n            if s[i] == s[i+mid] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_8fa76549-7406-417a-b633-98f7e4127854", "test_setup_code": "", "test_list": ["assert count_substrings_with_same_middle('abcba') == 1", "assert count_substrings_with_same_middle('aaa') == 1", "assert count_substrings_with_same_middle('a') == 0", "assert count_substrings_with_same_middle('abccba') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where all characters are distinct.", "code": "def count_substrings_with_distinct_chars(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        seen = set()\n        for j in range(i, n):\n            if s[j] in seen:\n                break\n            seen.add(s[j])\n            result += 1\n    return result", "task_id": "338_93bdddc4-2d56-4b2e-872d-0c9ab0aa856e", "test_setup_code": "", "test_list": ["assert count_substrings_with_distinct_chars('abc') == 6", "assert count_substrings_with_distinct_chars('aab') == 4", "assert count_substrings_with_distinct_chars('') == 0", "assert count_substrings_with_distinct_chars('abcdefg') == 28"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain at least one consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c not in 'aeiouAEIOU'\n\ndef count_substrings_with_at_least_one_consonant(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        has_consonant = False\n        for j in range(i, n):\n            if is_consonant(s[j]):\n                has_consonant = True\n            if has_consonant:\n                result += 1\n    return result", "task_id": "338_e237c410-074f-46fa-aea0-21b7b2ca3147", "test_setup_code": "", "test_list": ["assert count_substrings_with_at_least_one_consonant('abc') == 6", "assert count_substrings_with_at_least_one_consonant('aeiou') == 0", "assert count_substrings_with_at_least_one_consonant('b') == 1", "assert count_substrings_with_at_least_one_consonant('') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with the same digit.", "code": "def count_substrings_with_same_first_last_digit(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if s[i].isdigit() and s[i] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_1476bc59-e0f6-413c-ad74-69afb50da306", "test_setup_code": "", "test_list": ["assert count_substrings_with_same_first_last_digit('12321') == 6", "assert count_substrings_with_same_first_last_digit('111') == 6", "assert count_substrings_with_same_first_last_digit('abc12321cba') == 6", "assert count_substrings_with_same_first_last_digit('') == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with the same letter.", "code": "def count_substrings_with_same_first_last_letter(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if s[i].isalpha() and s[i] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_1902c3bf-e39c-4871-8a64-59cc32a76217", "test_setup_code": "", "test_list": ["assert count_substrings_with_same_first_last_letter('abcab') == 7", "assert count_substrings_with_same_first_last_letter('aaa') == 6", "assert count_substrings_with_same_first_last_letter('ab') == 2", "assert count_substrings_with_same_first_last_letter('') == 0"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of uppercase and lowercase letters in a string.", "code": "def count_upper_lower(s):\n    u = l = 0\n    for char in s:\n        if char.isupper():\n            u += 1\n        elif char.islower():\n            l += 1\n    return (u, l)", "task_id": "343_b609d742-ab44-4778-b1aa-ba43944232d6", "test_setup_code": "", "test_list": ["assert count_upper_lower('Hello World') == (2, 8)", "assert count_upper_lower('123 ABC abc') == (3, 3)", "assert count_upper_lower('') == (0, 0)", "assert count_upper_lower('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == (13, 13)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of spaces and punctuation marks in a string.", "code": "import string\n\ndef count_spaces_punctuation(s):\n    spaces = punct = 0\n    for char in s:\n        if char.isspace():\n            spaces += 1\n        elif char in string.punctuation:\n            punct += 1\n    return (spaces, punct)", "task_id": "343_41174470-2bde-43df-885a-c7d6d99528f2", "test_setup_code": "", "test_list": ["assert count_spaces_punctuation('Hello, World!') == (1, 2)", "assert count_spaces_punctuation('No spaces or punctuation') == (3, 0)", "assert count_spaces_punctuation('') == (0, 0)", "assert count_spaces_punctuation('   ...!!!') == (3, 6)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of words and sentences in a string.", "code": "def count_words_sentences(s):\n    words = len(s.split())\n    sentences = s.count('.') + s.count('!') + s.count('?')\n    return (words, sentences)", "task_id": "343_d89e5b41-6ba1-47fb-8f14-4b234c0c1e75", "test_setup_code": "", "test_list": ["assert count_words_sentences('Hello world. How are you?') == (5, 2)", "assert count_words_sentences('This is a test! This is only a test.') == (9, 2)", "assert count_words_sentences('No punctuation here') == (3, 0)", "assert count_words_sentences('') == (0, 0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of digits and special characters (non-alphanumeric) in a string.", "code": "def count_digits_special(s):\n    digits = special = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif not char.isalnum():\n            special += 1\n    return (digits, special)", "task_id": "343_9f2f9678-01aa-4956-8289-090386480155", "test_setup_code": "", "test_list": ["assert count_digits_special('abc123!@#') == (3, 3)", "assert count_digits_special('') == (0, 0)", "assert count_digits_special('1234567890') == (10, 0)", "assert count_digits_special('!@#$%^&*()') == (0, 10)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of alphabetic and numeric characters in a string.", "code": "def count_alpha_numeric(s):\n    alpha = numeric = 0\n    for char in s:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            numeric += 1\n    return (alpha, numeric)", "task_id": "343_e415b3ec-7795-4f36-a3ef-35fe2e4e9731", "test_setup_code": "", "test_list": ["assert count_alpha_numeric('abc123') == (3, 3)", "assert count_alpha_numeric('!@#') == (0, 0)", "assert count_alpha_numeric('a1b2c3d4e5') == (5, 5)", "assert count_alpha_numeric('') == (0, 0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of words and characters in a string.", "code": "def count_words_characters(s):\n    words = len(s.split())\n    characters = len(s)\n    return (words, characters)", "task_id": "343_cf3b4a9b-c450-4131-8b6a-6c2867a6202e", "test_setup_code": "", "test_list": ["assert count_words_characters('Hello world') == (2, 11)", "assert count_words_characters('') == (0, 0)", "assert count_words_characters('A quick brown fox jumps over the lazy dog') == (9, 43)", "assert count_words_characters('    Leading and trailing spaces    ') == (5, 34)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of vowels and digits in a string.", "code": "def count_vowels_digits(s):\n    vowels = 'aeiouAEIOU'\n    v = d = 0\n    for char in s:\n        if char in vowels:\n            v += 1\n        elif char.isdigit():\n            d += 1\n    return (v, d)", "task_id": "343_40707509-0fc1-4fee-82af-0680b7b50af6", "test_setup_code": "", "test_list": ["assert count_vowels_digits('hello123') == (2, 3)", "assert count_vowels_digits('AEIOUaeiou') == (10, 0)", "assert count_vowels_digits('1234567890') == (0, 10)", "assert count_vowels_digits('') == (0, 0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of consonants and spaces in a string.", "code": "def count_consonants_spaces(s):\n    vowels = 'aeiouAEIOU'\n    c = spaces = 0\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            c += 1\n        elif char.isspace():\n            spaces += 1\n    return (c, spaces)", "task_id": "343_c77127d5-217f-4dd8-ae69-8c5d7d8ce11e", "test_setup_code": "", "test_list": ["assert count_consonants_spaces('Hello World') == (7, 1)", "assert count_consonants_spaces('') == (0, 0)", "assert count_consonants_spaces('A quick brown fox jumps over the lazy dog') == (24, 8)", "assert count_consonants_spaces('12345!@#$%') == (0, 0)"], "challenge_test_list": []}
{"text": "Write a function to calculate the number of uppercase letters and digits in a string.", "code": "def count_upper_digits(s):\n    u = d = 0\n    for char in s:\n        if char.isupper():\n            u += 1\n        elif char.isdigit():\n            d += 1\n    return (u, d)", "task_id": "343_ee0d9e13-e81c-46df-9c1b-f3c3667c164d", "test_setup_code": "", "test_list": ["assert count_upper_digits('HelloWorld123') == (2, 3)", "assert count_upper_digits('') == (0, 0)", "assert count_upper_digits('1234567890') == (0, 10)", "assert count_upper_digits('UPPERlower123') == (5, 3)"], "challenge_test_list": []}
{"text": "Write a function to find the common elements that appear in all the given arrays.", "code": "def find_common_elements(arrays):\n    if not arrays:\n        return []\n    common_elements = set(arrays[0])\n    for array in arrays[1:]:\n        common_elements.intersection_update(array)\n    return sorted(list(common_elements))", "task_id": "342_76116cf1-f255-4d2b-aab3-72bc265b02bf", "test_setup_code": "", "test_list": ["assert find_common_elements([[1, 2, 3], [2, 3, 4], [2, 5, 3]]) == [2, 3]", "assert find_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == []", "assert find_common_elements([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]", "assert find_common_elements([[1], [1], [1]]) == [1]"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted arrays into a single sorted array.", "code": "from heapq import heappop, heappush\n\ndef merge_sorted_arrays(arrays):\n    min_heap = []\n    for i, array in enumerate(arrays):\n        if array:\n            heappush(min_heap, (array[0], i, 0))\n    result = []\n    while min_heap:\n        value, list_num, index = heappop(min_heap)\n        result.append(value)\n        if index + 1 < len(arrays[list_num]):\n            heappush(min_heap, (arrays[list_num][index + 1], list_num, index + 1))\n    return result", "task_id": "342_25acef12-e954-4dd4-a546-1830c8b97273", "test_setup_code": "", "test_list": ["assert merge_sorted_arrays([[1, 3, 5], [2, 4, 6], [0, 7, 8, 9]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert merge_sorted_arrays([[1, 1, 1], [1, 1, 1]]) == [1, 1, 1, 1, 1, 1]", "assert merge_sorted_arrays([[], [1, 2, 3], []]) == [1, 2, 3]", "assert merge_sorted_arrays([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the largest range that includes at-least one element from each of the given arrays.", "code": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef find_largest_range(arrays):\n    low = float('inf')\n    p = (float('-inf'), float('inf'))\n    pq = []\n    for i in range(len(arrays)):\n        heappush(pq, Node(arrays[i][0], i, 0))\n        low = min(low, arrays[i][0])\n    while True:\n        top = heappop(pq)\n        high = top.value\n        i = top.list_num\n        j = top.index\n        if high - low > p[1] - p[0]:\n            p = (low, high)\n        if j == len(arrays[i]) - 1:\n            return p\n        heappush(pq, Node(arrays[i][j + 1], i, j + 1))\n        low = min(low, arrays[i][j + 1])", "task_id": "342_ba74dbcc-f646-4bfc-9f91-03a025f10be7", "test_setup_code": "", "test_list": ["assert find_largest_range([[4, 10, 15, 24, 26], [0, 9, 12, 20], [5, 18, 22, 30]]) == (20, 24)", "assert find_largest_range([[1, 5, 8], [4, 12], [7, 8, 10]]) == (4, 8)", "assert find_largest_range([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (3, 7)", "assert find_largest_range([[1, 2], [3, 4], [5, 6]]) == (2, 5)"], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element among all the elements in the given arrays.", "code": "from heapq import heappop, heappush\n\ndef find_kth_smallest_element(arrays, k):\n    min_heap = []\n    for i, array in enumerate(arrays):\n        if array:\n            heappush(min_heap, (array[0], i, 0))\n    count = 0\n    while min_heap:\n        value, list_num, index = heappop(min_heap)\n        count += 1\n        if count == k:\n            return value\n        if index + 1 < len(arrays[list_num]):\n            heappush(min_heap, (arrays[list_num][index + 1], list_num, index + 1))", "task_id": "342_f696cd6d-318c-4712-868f-fc7e8d61344e", "test_setup_code": "", "test_list": ["assert find_kth_smallest_element([[1, 3, 5], [2, 4, 6], [0, 7, 8]], 5) == 4", "assert find_kth_smallest_element([[10, 20, 30], [5, 15, 25], [1, 2, 3]], 7) == 20", "assert find_kth_smallest_element([[], [1, 2, 3], [4, 5, 6]], 4) == 4", "assert find_kth_smallest_element([[1, 2], [3, 4], [5, 6]], 6) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element among all the elements in the given arrays.", "code": "from heapq import heappop, heappush\n\ndef find_kth_largest_element(arrays, k):\n    max_heap = []\n    for i, array in enumerate(arrays):\n        for num in array:\n            heappush(max_heap, -num)\n    count = 0\n    while max_heap:\n        value = -heappop(max_heap)\n        count += 1\n        if count == k:\n            return value", "task_id": "342_bf03a178-2e8a-4611-8146-af6b0e740b5b", "test_setup_code": "", "test_list": ["assert find_kth_largest_element([[3, 2, 1], [5, 6, 4], [8, 7]], 3) == 6", "assert find_kth_largest_element([[1, 2], [3, 4], [5, 6]], 1) == 6", "assert find_kth_largest_element([[10, 9, 8], [7, 6, 5], [4, 3, 2, 1]], 10) == 1", "assert find_kth_largest_element([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]], 5) == -5"], "challenge_test_list": []}
{"text": "Write a function to find the median of all the elements in the given arrays.", "code": "def find_median_of_arrays(arrays):\n    all_elements = []\n    for array in arrays:\n        all_elements.extend(array)\n    all_elements.sort()\n    n = len(all_elements)\n    if n % 2 == 1:\n        return float(all_elements[n // 2])\n    else:\n        return (all_elements[n // 2 - 1] + all_elements[n // 2]) / 2", "task_id": "342_e4d5f942-8902-4397-8117-f28a65da1982", "test_setup_code": "", "test_list": ["assert find_median_of_arrays([[1, 3], [2]]) == 2.0", "assert find_median_of_arrays([[1, 2], [3, 4]]) == 2.5", "assert find_median_of_arrays([[], [1], [2, 3]]) == 2.0", "assert find_median_of_arrays([[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]) == 6.5"], "challenge_test_list": []}
{"text": "Write a function to find all unique elements across the given arrays.", "code": "def find_unique_elements(arrays):\n    unique_elements = set()\n    for array in arrays:\n        unique_elements.update(array)\n    return sorted(list(unique_elements))", "task_id": "342_ca7b5076-6eaf-4f34-89af-1425f094aad0", "test_setup_code": "", "test_list": ["assert find_unique_elements([[1, 2, 3], [2, 3, 4], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert find_unique_elements([[7, 8, 9], [10, 11, 12], [7, 13, 14]]) == [7, 8, 9, 10, 11, 12, 13, 14]", "assert find_unique_elements([[], [1, 2, 3], [3, 4, 5]]) == [1, 2, 3, 4, 5]", "assert find_unique_elements([[1, 1, 1], [2, 2, 2], [3, 3, 3]]) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the intersection of all the given arrays.", "code": "def find_intersection_of_arrays(arrays):\n    if not arrays:\n        return []\n    intersection = set(arrays[0])\n    for array in arrays[1:]:\n        intersection.intersection_update(array)\n    return sorted(list(intersection))", "task_id": "342_f63a4da6-30fd-4374-9f86-9439da8d761f", "test_setup_code": "", "test_list": ["assert find_intersection_of_arrays([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6]]) == [3, 4]", "assert find_intersection_of_arrays([[1, 2, 3], [4, 5, 6]]) == []", "assert find_intersection_of_arrays([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [1, 2, 3]", "assert find_intersection_of_arrays([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the union of all the given arrays.", "code": "def find_union_of_arrays(arrays):\n    union = set()\n    for array in arrays:\n        union.update(array)\n    return sorted(list(union))", "task_id": "342_53ad3e4b-9fa9-45ba-8a5f-efeac932a5a6", "test_setup_code": "", "test_list": ["assert find_union_of_arrays([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert find_union_of_arrays([[1, 2, 2, 3], [3, 4, 4, 5], [5, 6, 7]]) == [1, 2, 3, 4, 5, 6, 7]", "assert find_union_of_arrays([[], [], []]) == []", "assert find_union_of_arrays([[1, 2], [2, 3], [3, 1]]) == [1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any subarray from the given arrays.", "code": "def find_max_sum_subarray(arrays):\n    def max_subarray_sum(array):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in array:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    return max(max_subarray_sum(array) for array in arrays)", "task_id": "342_c98a7387-07a8-414c-ae88-b3d9d910d25c", "test_setup_code": "", "test_list": ["assert find_max_sum_subarray([[1, -2, 3, 4, -1, 2, 1, -5, 4], [-2, -3, 4, -1, -2, 1, 5, -3]]) == 10", "assert find_max_sum_subarray([[1, 2, 3], [4, 5, 6], [-1, -2, -3]]) == 15", "assert find_max_sum_subarray([[-1, -2, -3, -4], [-5, -6, -7, -8]]) == -1", "assert find_max_sum_subarray([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all integers in a given range [n, m].", "code": "def sum_of_squares(n, m):\n    return sum(i**2 for i in range(n, m+1))", "task_id": "344_980115ba-44ec-4219-9648-8cd4a14976b2", "test_setup_code": "", "test_list": ["assert sum_of_squares(1, 5) == 55", "assert sum_of_squares(0, 0) == 0", "assert sum_of_squares(-3, 3) == 28", "assert sum_of_squares(10, 10) == 100"], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime numbers in a given range [n, m].", "code": "def count_primes(n, m):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return sum(1 for i in range(n, m+1) if is_prime(i))", "task_id": "344_501844f3-6008-4104-8445-6c8a1869e670", "test_setup_code": "", "test_list": ["assert count_primes(10, 20) == 4", "assert count_primes(1, 10) == 4", "assert count_primes(0, 0) == 0", "assert count_primes(17, 17) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of all integers in a given range [n, m].", "code": "def sum_of_cubes(n, m):\n    return sum(i**3 for i in range(n, m+1))", "task_id": "344_b7c4d1d8-d4fe-44cd-9703-3a85007bbfd5", "test_setup_code": "", "test_list": ["assert sum_of_cubes(1, 3) == 36", "assert sum_of_cubes(0, 0) == 0", "assert sum_of_cubes(-2, 2) == 9", "assert sum_of_cubes(10, 12) == 4459"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given range [n, m].", "code": "def count_even_numbers(n, m):\n    return sum(1 for i in range(n, m+1) if i % 2 == 0)", "task_id": "344_c8755fa7-107b-471e-b0f4-06adfa043bd9", "test_setup_code": "", "test_list": ["assert count_even_numbers(1, 10) == 5", "assert count_even_numbers(2, 2) == 1", "assert count_even_numbers(-10, 10) == 11", "assert count_even_numbers(0, 0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits of all integers in a given range [n, m].", "code": "def sum_of_digits(n, m):\n    return sum(sum(int(digit) for digit in str(i)) for i in range(n, m+1))", "task_id": "344_761cdc61-aea7-43e7-b8c0-4413ff92178f", "test_setup_code": "", "test_list": ["assert sum_of_digits(1, 10) == 46", "assert sum_of_digits(0, 0) == 0", "assert sum_of_digits(10, 12) == 6", "assert sum_of_digits(123, 125) == 18"], "challenge_test_list": []}
{"text": "Write a python function to find the product of all integers in a given range [n, m].", "code": "def product_of_range(n, m):\n    product = 1\n    for i in range(n, m+1):\n        product *= i\n    return product", "task_id": "344_36d6cb2c-d3d8-4aa2-8895-463eed8fd0b6", "test_setup_code": "", "test_list": ["assert product_of_range(1, 5) == 120", "assert product_of_range(3, 3) == 3", "assert product_of_range(0, 4) == 0", "assert product_of_range(-2, 2) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic numbers in a given range [n, m].", "code": "def count_palindromes(n, m):\n    return sum(1 for i in range(n, m+1) if str(i) == str(i)[::-1])", "task_id": "344_0d27dc9c-2a58-48c4-b5ec-a44aafc4137f", "test_setup_code": "", "test_list": ["assert count_palindromes(1, 10) == 9", "assert count_palindromes(10, 20) == 1", "assert count_palindromes(100, 200) == 10", "assert count_palindromes(0, 0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd numbers in a given range [n, m].", "code": "def sum_of_odd_numbers(n, m):\n    return sum(i for i in range(n, m+1) if i % 2 != 0)", "task_id": "344_4d8f36d0-ce22-4fc4-84ca-9e8f0fd83f6e", "test_setup_code": "", "test_list": ["assert sum_of_odd_numbers(1, 10) == 25", "assert sum_of_odd_numbers(0, 0) == 0", "assert sum_of_odd_numbers(-5, 5) == 0", "assert sum_of_odd_numbers(7, 7) == 7"], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers in a given range [n, m] that are divisible by a given number k.", "code": "def count_divisors(n, m, k):\n    return sum(1 for i in range(n, m+1) if i % k == 0)", "task_id": "344_9de9503d-190b-4865-b215-e61d9deeb65d", "test_setup_code": "", "test_list": ["assert count_divisors(1, 10, 2) == 5", "assert count_divisors(5, 15, 3) == 4", "assert count_divisors(0, 0, 1) == 1", "assert count_divisors(1, 1, 2) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of all integers in a given range [n, m].", "code": "import math\n\ndef sum_of_factorials(n, m):\n    return sum(math.factorial(i) for i in range(n, m+1))", "task_id": "344_73db4a78-4170-424a-aaba-3edbfd120ee3", "test_setup_code": "", "test_list": ["assert sum_of_factorials(1, 3) == 9", "assert sum_of_factorials(0, 0) == 1", "assert sum_of_factorials(5, 5) == 120", "assert sum_of_factorials(3, 6) == 873"], "challenge_test_list": []}
{"text": "Write a function to find the sum of two consecutive numbers in a given list.", "code": "def sum_consecutivenums(nums):\n    result = [a+b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_288e92d5-0902-4adf-a507-ce8f93fd2bf4", "test_setup_code": "", "test_list": ["assert sum_consecutivenums([1, 2, 3, 4]) == [3, 5, 7]", "assert sum_consecutivenums([10, 20, 30]) == [30, 50]", "assert sum_consecutivenums([5]) == []", "assert sum_consecutivenums([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the product of two consecutive numbers in a given list.", "code": "def product_consecutivenums(nums):\n    result = [a*b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_b0bce593-3211-495d-8dd9-bf9dff9b972a", "test_setup_code": "", "test_list": ["assert product_consecutivenums([1, 2, 3, 4]) == [2, 6, 12]", "assert product_consecutivenums([0, 1, 2, 3]) == [0, 2, 6]", "assert product_consecutivenums([5, 10, 15]) == [50, 150]", "assert product_consecutivenums([1]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two consecutive numbers in a given list.", "code": "def max_consecutivenums(nums):\n    result = [max(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_5df57b3f-4278-41bb-bbfb-f665ac7e09ef", "test_setup_code": "", "test_list": ["assert max_consecutivenums([1, 2, 3, 4, 5]) == [2, 3, 4, 5]", "assert max_consecutivenums([5, 4, 3, 2, 1]) == [5, 4, 3, 2]", "assert max_consecutivenums([1, 1, 1, 1, 1]) == [1, 1, 1, 1]", "assert max_consecutivenums([10, -1, 3, 7, 0]) == [10, 3, 7, 7]"], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two consecutive numbers in a given list.", "code": "def min_consecutivenums(nums):\n    result = [min(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_e150a79d-14c8-446d-b1ed-13f28f9927f2", "test_setup_code": "", "test_list": ["assert min_consecutivenums([3, 5, 2, 8, 1]) == [3, 2, 2, 1]", "assert min_consecutivenums([10, 20, 30, 40]) == [10, 20, 30]", "assert min_consecutivenums([5, 5, 5, 5]) == [5, 5, 5]", "assert min_consecutivenums([1]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the average of two consecutive numbers in a given list.", "code": "def avg_consecutivenums(nums):\n    result = [(a+b)/2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_c71d0a29-b91e-4753-838e-034dc932642e", "test_setup_code": "", "test_list": ["assert avg_consecutivenums([1, 2, 3, 4]) == [1.5, 2.5, 3.5]", "assert avg_consecutivenums([10, 20, 30, 40, 50]) == [15.0, 25.0, 35.0, 45.0]", "assert avg_consecutivenums([5]) == []", "assert avg_consecutivenums([-1, -2, -3, -4]) == [-1.5, -2.5, -3.5]"], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between two consecutive numbers in a given list.", "code": "def diff_abs_consecutivenums(nums):\n    result = [abs(b-a) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_9eeec650-3596-4a76-a2a5-98e7d1b69f84", "test_setup_code": "", "test_list": ["assert diff_abs_consecutivenums([1, 2, 3, 4, 5]) == [1, 1, 1, 1]", "assert diff_abs_consecutivenums([10, 5, 15, 0]) == [5, 10, 15]", "assert diff_abs_consecutivenums([-1, -2, -3, -4]) == [1, 1, 1]", "assert diff_abs_consecutivenums([100]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the square of the difference between two consecutive numbers in a given list.", "code": "def square_diff_consecutivenums(nums):\n    result = [(b-a)**2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_64ecbb36-0a3a-4be1-ae36-eb2cd6bdd657", "test_setup_code": "", "test_list": ["assert square_diff_consecutivenums([1, 2, 3, 4]) == [1, 1, 1]", "assert square_diff_consecutivenums([10, 5, 0]) == [25, 25]", "assert square_diff_consecutivenums([1, 1, 1, 1]) == [0, 0, 0]", "assert square_diff_consecutivenums([100, 50, 0, -50]) == [2500, 2500, 2500]"], "challenge_test_list": []}
{"text": "Write a function to concatenate two consecutive numbers in a given list as strings.", "code": "def concat_consecutivenums(nums):\n    result = [str(a) + str(b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_70e4a955-abbf-4cb1-b2e1-6197225a2109", "test_setup_code": "", "test_list": ["assert concat_consecutivenums([1, 2, 3, 4]) == ['12', '23', '34']", "assert concat_consecutivenums([10, 20, 30]) == ['1020', '2030']", "assert concat_consecutivenums([5]) == []", "assert concat_consecutivenums([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the difference between two consecutive numbers in a given list and return the differences along with their indices.", "code": "def diff_consecutivenums_with_index(nums):\n    result = [(i, b-a) for i, (a, b) in enumerate(zip(nums[:-1], nums[1:]))]\n    return result", "task_id": "345_79f8955a-d4ab-4244-bddd-88ead7bcf140", "test_setup_code": "", "test_list": ["assert diff_consecutivenums_with_index([1, 2, 3, 4, 5]) == [(0, 1), (1, 1), (2, 1), (3, 1)]", "assert diff_consecutivenums_with_index([10, 5, 0, -5, -10]) == [(0, -5), (1, -5), (2, -5), (3, -5)]", "assert diff_consecutivenums_with_index([100]) == []", "assert diff_consecutivenums_with_index([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the sum of two consecutive even numbers in a given list.", "code": "def sum_even_consecutivenums(nums):\n    result = [a+b for a, b in zip(nums[:-1], nums[1:]) if a % 2 == 0 and b % 2 == 0]\n    return result", "task_id": "345_747b1e9e-6df6-4526-ab68-073761d7c526", "test_setup_code": "", "test_list": ["assert sum_even_consecutivenums([2, 4, 6, 8]) == [6, 10, 14]", "assert sum_even_consecutivenums([1, 3, 5, 7]) == []", "assert sum_even_consecutivenums([2, 3, 4, 5, 6, 7, 8]) == [10, 14]", "assert sum_even_consecutivenums([2, 4, 3, 6, 8, 10, 12]) == [6, 14, 18, 22]"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two largest positive numbers from a given list of numbers.", "code": "def sum_two_largest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0], reverse=True)[:2])", "task_id": "340_8231c81e-159b-497f-ae66-009c97133291", "test_setup_code": "", "test_list": ["assert sum_two_largest_nums([10, 20, 30, 40, 50]) == 90", "assert sum_two_largest_nums([1, 2, 3, 4, 5]) == 9", "assert sum_two_largest_nums([-10, -20, -30, 40, 50]) == 90", "assert sum_two_largest_nums([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the product of the three lowest positive numbers from a given list of numbers.", "code": "def product_three_smallest_nums(lst):\n\tfrom functools import reduce\n\treturn reduce(lambda x, y: x * y, sorted([x for x in lst if x > 0])[:3])", "task_id": "340_d5e6412a-56ba-4d23-a38b-0dd442162f73", "test_setup_code": "", "test_list": ["assert product_three_smallest_nums([4, 1, 3, 2, 5]) == 6", "assert product_three_smallest_nums([10, 15, 3, 7, 8, 2, 1]) == 6", "assert product_three_smallest_nums([5, 5, 5, 5, 5]) == 125", "assert product_three_smallest_nums([100, 200, 300, 1, 2, 3]) == 6"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two lowest positive numbers from a given list of numbers.", "code": "def sum_two_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:2])", "task_id": "340_1135139d-7e53-4013-8d79-25fe4221ee81", "test_setup_code": "", "test_list": ["assert sum_two_smallest_nums([19, 5, 42, 2, 77]) == 7", "assert sum_two_smallest_nums([10, 343445353, 3453445, 3453545353453]) == 3453455", "assert sum_two_smallest_nums([1, 2, 3, 4, 5]) == 3", "assert sum_two_smallest_nums([5, 8, 12, 18, 22]) == 13"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive even numbers from a given list of numbers.", "code": "def sum_three_smallest_even_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0 and x % 2 == 0])[:3])", "task_id": "340_ab0aa6c9-d6c5-4b85-b28c-65e0586de959", "test_setup_code": "", "test_list": ["assert sum_three_smallest_even_nums([4, 2, 6, 8, 10]) == 12", "assert sum_three_smallest_even_nums([1, 3, 5, 7, 9, 11, 2, 4, 6]) == 12", "assert sum_three_smallest_even_nums([2, 4]) == 6", "assert sum_three_smallest_even_nums([0, -2, -4, 2, 4, 6, 8]) == 12"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive odd numbers from a given list of numbers.", "code": "def sum_three_smallest_odd_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0 and x % 2 != 0])[:3])", "task_id": "340_4edb3c75-c037-4a9d-a7e4-d488b7bfdddc", "test_setup_code": "", "test_list": ["assert sum_three_smallest_odd_nums([1, 3, 5, 7, 9]) == 9", "assert sum_three_smallest_odd_nums([10, 15, 3, 7, 5, 1]) == 9", "assert sum_three_smallest_odd_nums([2, 4, 6, 8, 10]) == 0", "assert sum_three_smallest_odd_nums([1, 1, 1, 3, 5]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest unique positive numbers from a given list of numbers.", "code": "def sum_three_smallest_unique_nums(lst):\n\treturn sum(sorted(set([x for x in lst if x > 0]))[:3])", "task_id": "340_14db4fe8-4e76-4b5e-9a33-a82e5c352285", "test_setup_code": "", "test_list": ["assert sum_three_smallest_unique_nums([4, 1, 2, 3, 5, 1, 2, 3]) == 6", "assert sum_three_smallest_unique_nums([10, 20, 30, 40, 50]) == 60", "assert sum_three_smallest_unique_nums([1, 1, 1, 1, 1]) == 1", "assert sum_three_smallest_unique_nums([5, 5, 5, 5, 5, 5, 5, 5, 5, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers, including duplicates.", "code": "def sum_three_smallest_nums_with_duplicates(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "task_id": "340_7a89afa7-dd97-492d-b4de-108db43a9f4a", "test_setup_code": "", "test_list": ["assert sum_three_smallest_nums_with_duplicates([10, 5, 2, 8, 3, 1, 1]) == 4", "assert sum_three_smallest_nums_with_duplicates([1, 2, 3, 4, 5]) == 6", "assert sum_three_smallest_nums_with_duplicates([10, 20, 30, 40, 50]) == 60", "assert sum_three_smallest_nums_with_duplicates([1, 1, 1, 1, 1, 1]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers, excluding numbers present in another list.", "code": "def sum_three_smallest_nums_excluding(lst, exclude):\n\treturn sum(sorted([x for x in lst if x > 0 and x not in exclude])[:3])", "task_id": "340_bcf3f9c0-c9e1-4488-9733-0dc5d7d05d44", "test_setup_code": "", "test_list": ["assert sum_three_smallest_nums_excluding([1, 2, 3, 4, 5], []) == 6", "assert sum_three_smallest_nums_excluding([1, 2, 3, 4, 5], [1, 3]) == 11", "assert sum_three_smallest_nums_excluding([-1, 0, 1, 2, 3, 4], []) == 6", "assert sum_three_smallest_nums_excluding([10, 5, 3, 7, 2, 1], [1, 2, 3]) == 22"], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "346_261c1819-b7c8-47cc-94f5-ae28d202167c", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(5) == 5", "assert fibonacci(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "346_759ea22c-9dbd-441c-b386-06cda1ace3c9", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a function to find the value at the nth row and kth column of Pascal's triangle.", "code": "def pascal_triangle(n: int, k: int) -> int:\n    if k == 0 or k == n:\n        return 1\n    return pascal_triangle(n-1, k-1) + pascal_triangle(n-1, k)", "task_id": "346_3995687d-05eb-43e3-b41c-7b3da933ae4e", "test_setup_code": "", "test_list": ["assert pascal_triangle(0, 0) == 1", "assert pascal_triangle(4, 2) == 6", "assert pascal_triangle(5, 0) == 1", "assert pascal_triangle(5, 5) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)", "task_id": "346_b0e58f2e-fa2a-40d5-8ae1-980df86863e0", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 10) == 1", "assert gcd(0, 5) == 5", "assert gcd(1000000, 2) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return abs(a*b) // gcd(a, b)", "task_id": "346_293174f4-2003-49d3-8cfa-93e7d274e5db", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(0, 10) == 0", "assert lcm(7, 3) == 21", "assert lcm(21, 6) == 42"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a number n.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digits(n // 10)", "task_id": "346_c33cbafd-495c-44d6-ab79-f07c173bf69b", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a function to find x raised to the power n.", "code": "def power(x: int, n: int) -> int:\n    if n == 0:\n        return 1\n    return x * power(x, n-1)", "task_id": "346_fd72aa86-6d7b-4844-9510-f99e284ce475", "test_setup_code": "", "test_list": ["assert power(2, 3) == 8", "assert power(5, 0) == 1", "assert power(-2, 4) == 16", "assert power(3, 1) == 3"], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    return reverse_string(s[1:]) + s[0]", "task_id": "346_d6d52341-b4ea-4e55-afe0-fb613d070b97", "test_setup_code": "", "test_list": ["assert reverse_string('hello') == 'olleh'", "assert reverse_string('') == ''", "assert reverse_string('a') == 'a'", "assert reverse_string('racecar') == 'racecar'"], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])", "task_id": "346_22cdb594-d15a-447d-a1dc-0a7467702ace", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('') == True"], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to climb a staircase with n steps, taking 1 or 2 steps at a time.", "code": "def count_ways(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return count_ways(n-1) + count_ways(n-2)", "task_id": "346_3b429306-404b-4578-aa5f-7e3ff4553e68", "test_setup_code": "", "test_list": ["assert count_ways(0) == 1", "assert count_ways(1) == 1", "assert count_ways(2) == 2", "assert count_ways(5) == 8"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with odd side lengths in a rectangle.", "code": "def count_odd_squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1, 2):\n        count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_07dbe09e-5fcf-47bc-ace9-9f411954de8f", "test_setup_code": "", "test_list": ["assert count_odd_squares(3, 3) == 10", "assert count_odd_squares(2, 2) == 4", "assert count_odd_squares(4, 5) == 21", "assert count_odd_squares(1, 10) == 10"], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle.", "code": "def count_rectangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 4", "task_id": "347_d51e91f5-ebf8-42e0-848c-49dc2f0ac4c4", "test_setup_code": "", "test_list": ["assert count_rectangles(1, 1) == 1", "assert count_rectangles(2, 2) == 9", "assert count_rectangles(3, 4) == 60", "assert count_rectangles(0, 5) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a rectangle where the squares' diagonals are also considered.", "code": "def count_squares_with_diagonal(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_ed042159-4152-4448-897a-cee856e59203", "test_setup_code": "", "test_list": ["assert count_squares_with_diagonal(2, 2) == 5", "assert count_squares_with_diagonal(3, 3) == 14", "assert count_squares_with_diagonal(1, 10) == 10", "assert count_squares_with_diagonal(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of L-shaped tiles that can fit in a rectangle.", "code": "def count_l_shapes(m, n):\n    return (m - 1) * (n - 1) * 2", "task_id": "347_66108ec2-f424-45e2-a426-db75251f57db", "test_setup_code": "", "test_list": ["assert count_l_shapes(3, 3) == 8", "assert count_l_shapes(2, 2) == 2", "assert count_l_shapes(1, 1) == 0", "assert count_l_shapes(5, 4) == 24"], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles that can fit in a rectangle.", "code": "def count_triangles(m, n):\n    return m * n * (m + 1) * (n + 1) // 4", "task_id": "347_02157079-5d7f-4a8e-a20d-82d2d0f40372", "test_setup_code": "", "test_list": ["assert count_triangles(1, 1) == 1", "assert count_triangles(2, 2) == 9", "assert count_triangles(3, 4) == 60", "assert count_triangles(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle where the rectangles' diagonals are also considered.", "code": "def count_diagonal_rectangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 4", "task_id": "347_79e10d5d-d553-4f95-8175-9fbab23ac11f", "test_setup_code": "", "test_list": ["assert count_diagonal_rectangles(2, 3) == 18", "assert count_diagonal_rectangles(1, 1) == 1", "assert count_diagonal_rectangles(3, 3) == 36", "assert count_diagonal_rectangles(4, 5) == 150"], "challenge_test_list": []}
{"text": "Write a python function to count the number of perfect squares in a rectangle.", "code": "def count_perfect_squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if int(i**0.5)**2 == i:\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_203be02d-9a4b-4525-9e6e-fde1ec5376db", "test_setup_code": "", "test_list": ["assert count_perfect_squares(4, 4) == 10", "assert count_perfect_squares(1, 1) == 1", "assert count_perfect_squares(0, 0) == 0", "assert count_perfect_squares(3, 5) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with prime side lengths in a rectangle.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_squares_with_prime_sides(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if is_prime(i):\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_bcaca0e4-7dcd-4a6d-86c4-79c4e7923e1b", "test_setup_code": "", "test_list": ["assert count_squares_with_prime_sides(5, 5) == 10", "assert count_squares_with_prime_sides(10, 10) == 35", "assert count_squares_with_prime_sides(1, 1) == 0", "assert count_squares_with_prime_sides(7, 3) == 6"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with Fibonacci side lengths in a rectangle.", "code": "def is_fibonacci(num):\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a + b\n    return b == num\n\ndef count_squares_with_fibonacci_sides(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if is_fibonacci(i):\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_90d3ebb1-a980-4c59-aad8-dacf2f5aa052", "test_setup_code": "", "test_list": ["assert count_squares_with_fibonacci_sides(5, 5) == 6", "assert count_squares_with_fibonacci_sides(10, 10) == 20", "assert count_squares_with_fibonacci_sides(1, 1) == 0", "assert count_squares_with_fibonacci_sides(8, 13) == 35"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a hexadecimal string or not.", "code": "def is_hexadecimal_string(s: str) -> str:\n    hex_digits = set('0123456789abcdefABCDEF')\n    for char in s:\n        if char not in hex_digits:\n            return 'No'\n    return 'Yes'", "task_id": "349_12cc971c-2419-4618-9be6-41ba68ecdf6b", "test_setup_code": "", "test_list": ["assert is_hexadecimal_string('1A3F') == 'Yes'", "assert is_hexadecimal_string('GHIJ') == 'No'", "assert is_hexadecimal_string('1234567890abcdefABCDEF') == 'Yes'", "assert is_hexadecimal_string('12345g') == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is an octal string or not.", "code": "def is_octal_string(s: str) -> str:\n    octal_digits = set('01234567')\n    for char in s:\n        if char not in octal_digits:\n            return 'No'\n    return 'Yes'", "task_id": "349_cb4b8bd9-3080-4882-9343-4e2b23df8639", "test_setup_code": "", "test_list": ["assert is_octal_string('1234567') == 'Yes'", "assert is_octal_string('128') == 'No'", "assert is_octal_string('') == 'Yes'", "assert is_octal_string('007') == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_1e6e3318-800f-40ed-ab65-e1bd6d32d9d8", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == 'Yes'", "assert is_palindrome('hello') == 'No'", "assert is_palindrome('A man a plan a canal Panama') == 'No'", "assert is_palindrome('') == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all uppercase letters or not.", "code": "def is_all_uppercase(s: str) -> str:\n    if s.isupper():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_0c61ab0f-a255-4a64-9f32-9e6c5956f89b", "test_setup_code": "", "test_list": ["assert is_all_uppercase('HELLO') == 'Yes'", "assert is_all_uppercase('Hello') == 'No'", "assert is_all_uppercase('') == 'No'", "assert is_all_uppercase('1234!@#$') == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all lowercase letters or not.", "code": "def is_all_lowercase(s: str) -> str:\n    if s.islower():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_5d2f27d2-228c-4047-92fd-851648ae5f40", "test_setup_code": "", "test_list": ["assert is_all_lowercase('hello') == 'Yes'", "assert is_all_lowercase('Hello') == 'No'", "assert is_all_lowercase('') == 'No'", "assert is_all_lowercase('hello world') == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only digits or not.", "code": "def is_digit_string(s: str) -> str:\n    if s.isdigit():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_025fa255-1163-4198-ba64-593ab89e4de0", "test_setup_code": "", "test_list": ["assert is_digit_string('12345') == 'Yes'", "assert is_digit_string('abc123') == 'No'", "assert is_digit_string('') == 'No'", "assert is_digit_string('0000') == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only alphabetic characters or not.", "code": "def is_alpha_string(s: str) -> str:\n    if s.isalpha():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_5659403c-c560-410d-b593-7d6fa8f42f8d", "test_setup_code": "", "test_list": ["assert is_alpha_string('HelloWorld') == 'Yes'", "assert is_alpha_string('Hello123') == 'No'", "assert is_alpha_string('') == 'No'", "assert is_alpha_string('Hello World') == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only alphanumeric characters or not.", "code": "def is_alphanumeric_string(s: str) -> str:\n    if s.isalnum():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_73ec1aec-1c24-42db-b60a-d26fa5cef26c", "test_setup_code": "", "test_list": ["assert is_alphanumeric_string('Hello123') == 'Yes'", "assert is_alphanumeric_string('Hello 123') == 'No'", "assert is_alphanumeric_string('') == 'No'", "assert is_alphanumeric_string('1234567890') == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains any space characters or not.", "code": "def contains_space(s: str) -> str:\n    if ' ' in s:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_ffd78602-1408-402d-93eb-cb5012cd0529", "test_setup_code": "", "test_list": ["assert contains_space('Hello World') == 'Yes'", "assert contains_space('NoSpacesHere') == 'No'", "assert contains_space(' LeadingSpace') == 'Yes'", "assert contains_space('') == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains any vowels or not.", "code": "def contains_vowel(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    for char in s:\n        if char in vowels:\n            return 'Yes'\n    return 'No'", "task_id": "349_4987c727-f309-4767-936d-5cc7dcc47859", "test_setup_code": "", "test_list": ["assert contains_vowel('hello') == 'Yes'", "assert contains_vowel('sky') == 'No'", "assert contains_vowel('AEIOU') == 'Yes'", "assert contains_vowel('') == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of the character that appears the most in the string.", "code": "def remove_max_occurrence_char(s: str) -> str:\n    from collections import Counter\n    counter = Counter(s)\n    max_occ_char = max(counter, key=counter.get)\n    return s.replace(max_occ_char, '')", "task_id": "350_422f1e3a-c4d3-440a-97a8-efe4f05b91d8", "test_setup_code": "", "test_list": ["assert remove_max_occurrence_char('aabbcc') == 'bbcc'", "assert remove_max_occurrence_char('abcabcabc') == 'bcabcabc'", "assert remove_max_occurrence_char('') == ''", "assert remove_max_occurrence_char('aaaa') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove the first occurrence of each character in the string.", "code": "def remove_first_occurrence_char(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n        else:\n            result.append(char)\n    return ''.join(result)", "task_id": "350_9cf3e9d3-4894-478a-aa97-2d78e2995515", "test_setup_code": "", "test_list": ["assert remove_first_occurrence_char('hello') == 'llo'", "assert remove_first_occurrence_char('aabbcc') == 'abc'", "assert remove_first_occurrence_char('') == ''", "assert remove_first_occurrence_char('abcdefg') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove the last occurrence of each character in the string.", "code": "def remove_last_occurrence_char(s: str) -> str:\n    seen = set()\n    result = []\n    for char in reversed(s):\n        if char not in seen:\n            seen.add(char)\n        else:\n            result.append(char)\n    return ''.join(reversed(result))", "task_id": "350_d10d2ef3-27c7-4a6b-a317-c4dff4276aa7", "test_setup_code": "", "test_list": ["assert remove_last_occurrence_char('abacabad') == 'bacab'", "assert remove_last_occurrence_char('abcabc') == 'bca'", "assert remove_last_occurrence_char('aabbcc') == 'abc'", "assert remove_last_occurrence_char('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from the string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "350_586f45c4-eac9-4e46-a82c-ec01de262676", "test_setup_code": "", "test_list": ["assert remove_vowels('hello world') == 'hll wrld'", "assert remove_vowels('AEIOUaeiou') == ''", "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'", "assert remove_vowels('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove every other character from the string.", "code": "def remove_every_other_char(s: str) -> str:\n    return s[::2]", "task_id": "350_9859ec2e-36ea-46e1-8af7-b4b1bc186b40", "test_setup_code": "", "test_list": ["assert remove_every_other_char('abcdef') == 'ace'", "assert remove_every_other_char('a') == 'a'", "assert remove_every_other_char('') == ''", "assert remove_every_other_char('1234567890') == '13579'"], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate characters from the string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "350_6a1d9f13-c683-4197-b8bd-a1b8401678e2", "test_setup_code": "", "test_list": ["assert remove_duplicates('hello') == 'helo'", "assert remove_duplicates('aabbcc') == 'abc'", "assert remove_duplicates('') == ''", "assert remove_duplicates('abcabcabc') == 'abc'"], "challenge_test_list": []}
{"text": "Write a python function to remove the character at the given index from the string.", "code": "def remove_char_at_index(s: str, index: int) -> str:\n    return s[:index] + s[index+1:]", "task_id": "350_15a6b853-7f18-4925-b971-bedee1082937", "test_setup_code": "", "test_list": ["assert remove_char_at_index('hello', 1) == 'hllo'", "assert remove_char_at_index('world', 0) == 'orld'", "assert remove_char_at_index('python', 5) == 'pytho'", "assert remove_char_at_index('a', 0) == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given character from the string.", "code": "def remove_char_occurrences(s: str, char: str) -> str:\n    return s.replace(char, '')", "task_id": "350_170060f0-6ec4-4ad9-8d33-5d6e421f5c13", "test_setup_code": "", "test_list": ["assert remove_char_occurrences('hello world', 'l') == 'heo word'", "assert remove_char_occurrences('aaaaa', 'a') == ''", "assert remove_char_occurrences('abcdefg', 'z') == 'abcdefg'", "assert remove_char_occurrences('123123123', '3') == '121212'"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from 0 to k.", "code": "def count_sequences(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_4a41164e-813a-4e2a-8622-3040f3d10a43", "test_setup_code": "", "test_list": ["assert count_sequences(1, 0) == 1", "assert count_sequences(2, 1) == 3", "assert count_sequences(3, 2) == 10", "assert count_sequences(4, 3) == 35"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by given values in the list.", "code": "def count_non_negative_sequences(n: int, values: list) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in values:\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_f523bd0c-18b8-43f6-b23d-aa8d1e85a4eb", "test_setup_code": "", "test_list": ["assert count_non_negative_sequences(3, [1, 2, 3]) == 10", "assert count_non_negative_sequences(2, [-1, 0, 1]) == 3", "assert count_non_negative_sequences(1, [0, 1, 2]) == 3", "assert count_non_negative_sequences(4, [1, 2, 3, 4]) == 35"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having positive prefix sums that can be generated by values from 1 to k.", "code": "def count_positive_sequences(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(1, k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_b18fd095-c2c5-42df-acb8-5b2d4ede7d66", "test_setup_code": "", "test_list": ["assert count_positive_sequences(1, 1) == 1", "assert count_positive_sequences(2, 2) == 3", "assert count_positive_sequences(3, 3) == 10", "assert count_positive_sequences(4, 1) == 1"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having a prefix sum equal to target_sum that can be generated by values from 0 to k.", "code": "def count_sequences_with_sum(n: int, k: int, target_sum: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        if i * n == target_sum:\n            total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_02bc3598-55b8-440c-9810-1504d1e84df8", "test_setup_code": "", "test_list": ["assert count_sequences_with_sum(3, 2, 3) == 1", "assert count_sequences_with_sum(2, 3, 4) == 0", "assert count_sequences_with_sum(4, 1, 2) == 0", "assert count_sequences_with_sum(5, 5, 10) == 1"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from 0 to k, with each value not exceeding max_value.", "code": "def count_sequences_with_max_value(n: int, k: int, max_value: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(min(k, max_value) + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_7251822d-f451-41bc-afe1-982f5cc8b7cc", "test_setup_code": "", "test_list": ["assert count_sequences_with_max_value(3, 2, 1) == 4", "assert count_sequences_with_max_value(4, 3, 2) == 15", "assert count_sequences_with_max_value(1, 1, 0) == 1", "assert count_sequences_with_max_value(5, 5, 3) == 56"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from min_value to k.", "code": "def count_sequences_with_min_value(n: int, k: int, min_value: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(min_value, k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_54809b4a-5936-40f2-b868-fbd91a00d700", "test_setup_code": "", "test_list": ["assert count_sequences_with_min_value(3, 2, 0) == 10", "assert count_sequences_with_min_value(2, 3, 1) == 6", "assert count_sequences_with_min_value(1, 1, 0) == 2", "assert count_sequences_with_min_value(4, 2, 1) == 15"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having an exact sum equal to exact_sum that can be generated by values from 0 to k.", "code": "def count_sequences_with_exact_sum(n: int, k: int, exact_sum: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        if i * n == exact_sum:\n            total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_0050473f-b7ad-43a9-a7ee-7845df28b279", "test_setup_code": "", "test_list": ["assert count_sequences_with_exact_sum(3, 2, 3) == 1", "assert count_sequences_with_exact_sum(2, 1, 1) == 1", "assert count_sequences_with_exact_sum(4, 3, 6) == 0", "assert count_sequences_with_exact_sum(5, 5, 10) == 1"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by distinct values in the list.", "code": "def count_sequences_with_distinct_values(n: int, values: list) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in values:\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_6c346903-3f11-45ce-b385-3d6f314d7829", "test_setup_code": "", "test_list": ["assert count_sequences_with_distinct_values(3, [1, 2, 3]) == 10", "assert count_sequences_with_distinct_values(2, [1, 1, 1]) == 3", "assert count_sequences_with_distinct_values(1, [0, 1, 2]) == 3", "assert count_sequences_with_distinct_values(4, [1, 2, 3, 4]) == 35"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by even values from 0 to k.", "code": "def count_sequences_with_even_values(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(0, k + 1, 2):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_f5d06b20-bf7e-4d19-aa8c-b23dd4efe1bf", "test_setup_code": "", "test_list": ["assert count_sequences_with_even_values(1, 2) == 2", "assert count_sequences_with_even_values(2, 4) == 5", "assert count_sequences_with_even_values(3, 6) == 20", "assert count_sequences_with_even_values(0, 0) == 1"], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by odd values from 1 to k.", "code": "def count_sequences_with_odd_values(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(1, k + 1, 2):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_9309a292-33c1-41b3-bfc1-350954caa46f", "test_setup_code": "", "test_list": ["assert count_sequences_with_odd_values(2, 3) == 4", "assert count_sequences_with_odd_values(1, 1) == 1", "assert count_sequences_with_odd_values(3, 5) == 35", "assert count_sequences_with_odd_values(0, 5) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring more than k times in a given array.", "code": "def first_element_greater_than_k(arr, n, k):\n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n    for i in range(n):\n        if count_map[arr[i]] > k:\n            return arr[i]\n    return -1", "task_id": "351_8924533c-21ef-447e-8d28-f0be7c4ea390", "test_setup_code": "", "test_list": ["assert first_element_greater_than_k([1, 2, 3, 4, 5, 1, 2, 3, 1], 9, 2) == 1", "assert first_element_greater_than_k([10, 20, 30, 40, 50], 5, 0) == 10", "assert first_element_greater_than_k([5, 5, 5, 5, 5], 5, 4) == 5", "assert first_element_greater_than_k([1, 2, 3, 4, 5], 5, 5) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring less than k times in a given array.", "code": "def first_element_less_than_k(arr, n, k):\n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n    for i in range(n):\n        if count_map[arr[i]] < k:\n            return arr[i]\n    return -1", "task_id": "351_e2892c65-0412-4320-bb6d-a47900a1d09b", "test_setup_code": "", "test_list": ["assert first_element_less_than_k([1, 2, 3, 4, 5], 5, 2) == 1", "assert first_element_less_than_k([1, 1, 2, 2, 3, 3, 4], 7, 3) == 1", "assert first_element_less_than_k([1, 2, 3, 4, 5, 1, 2, 3, 4, 5], 10, 3) == 1", "assert first_element_less_than_k([], 0, 1) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring exactly k times in a given array.", "code": "def first_element_exactly_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k:\n            return elem\n    return -1", "task_id": "351_706bec1a-9bfb-4009-b109-4116edb7b5a9", "test_setup_code": "", "test_list": ["assert first_element_exactly_k_times([1, 2, 2, 3, 3, 3, 4], 2) == 2", "assert first_element_exactly_k_times([1, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 4) == 4", "assert first_element_exactly_k_times([5, 5, 5, 6, 6, 7, 7, 7, 7], 3) == 5", "assert first_element_exactly_k_times([8, 9, 10], 2) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element that does not occur k times in a given array.", "code": "def first_element_not_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] != k:\n            return elem\n    return -1", "task_id": "351_e953ccab-6fe3-483a-b07e-ffba50d13dec", "test_setup_code": "", "test_list": ["assert first_element_not_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 2) == 1", "assert first_element_not_k_times([1, 1, 2, 2, 3, 3, 4], 2) == 4", "assert first_element_not_k_times([5, 5, 5, 6, 6, 7, 7, 7, 7], 3) == 6", "assert first_element_not_k_times([8, 8, 8, 8, 9, 9, 9, 10, 10, 10, 10], 4) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring at least k times in a given array.", "code": "def first_element_at_least_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] >= k:\n            return elem\n    return -1", "task_id": "351_1c5b5b4b-b822-48d3-abfe-6b6a68ed08de", "test_setup_code": "", "test_list": ["assert first_element_at_least_k_times([1, 2, 2, 3, 3, 3], 2) == 2", "assert first_element_at_least_k_times([4, 5, 6, 7, 8, 8, 8, 9], 3) == 8", "assert first_element_at_least_k_times([10, 10, 10, 20, 20, 20, 30, 30, 30], 3) == 10", "assert first_element_at_least_k_times([1, 2, 3, 4, 5], 2) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring at most k times in a given array.", "code": "def first_element_at_most_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] <= k:\n            return elem\n    return -1", "task_id": "351_faf0d5ab-6e3b-406a-af24-25faf0b94500", "test_setup_code": "", "test_list": ["assert first_element_at_most_k_times([1, 2, 2, 3, 3, 3], 2) == 1", "assert first_element_at_most_k_times([4, 5, 6, 7, 7, 8, 8, 8], 1) == 4", "assert first_element_at_most_k_times([9, 9, 9, 10, 10, 10, 11], 3) == 9", "assert first_element_at_most_k_times([], 1) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring not less than k times in a given array.", "code": "def first_element_not_less_than_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] >= k:\n            return elem\n    return -1", "task_id": "351_e20a819f-4473-4752-816c-488f5fb52d49", "test_setup_code": "", "test_list": ["assert first_element_not_less_than_k_times([1, 2, 3, 1, 2, 1], 2) == 1", "assert first_element_not_less_than_k_times([4, 5, 6, 7, 8, 5, 6, 5], 3) == 5", "assert first_element_not_less_than_k_times([1, 2, 3, 4, 5], 2) == -1", "assert first_element_not_less_than_k_times([9, 9, 9, 9, 9], 5) == 9"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring not more than k times in a given array.", "code": "def first_element_not_greater_than_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] <= k:\n            return elem\n    return -1", "task_id": "351_fe073b79-a894-4b43-9d32-e61d6d4b4ca9", "test_setup_code": "", "test_list": ["assert first_element_not_greater_than_k_times([1, 2, 3, 4, 2, 3, 1], 2) == 4", "assert first_element_not_greater_than_k_times([5, 5, 5, 5, 5], 3) == -1", "assert first_element_not_greater_than_k_times([1, 2, 2, 3, 3, 3, 4, 4, 4, 4], 1) == 1", "assert first_element_not_greater_than_k_times([], 1) == -1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring k times and is an odd number in a given array.", "code": "def first_element_occurs_k_times_and_odd(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k and elem % 2 != 0:\n            return elem\n    return -1", "task_id": "351_2f0b900e-fbb8-45a3-99c8-3ab7fa981382", "test_setup_code": "", "test_list": ["assert first_element_occurs_k_times_and_odd([1, 2, 3, 1, 3, 1, 3], 2) == 3", "assert first_element_occurs_k_times_and_odd([4, 5, 6, 5, 7, 5, 7, 7], 3) == 5", "assert first_element_occurs_k_times_and_odd([2, 4, 6, 8, 10], 1) == -1", "assert first_element_occurs_k_times_and_odd([1, 3, 5, 7, 9, 1, 3, 5, 7, 9], 2) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring k times and is an even number in a given array.", "code": "def first_element_occurs_k_times_and_even(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k and elem % 2 == 0:\n            return elem\n    return -1", "task_id": "351_0574112d-218f-4822-b390-f07efe10d0c1", "test_setup_code": "", "test_list": ["assert first_element_occurs_k_times_and_even([2, 4, 4, 2, 4, 6, 6], 3) == 4", "assert first_element_occurs_k_times_and_even([1, 3, 5, 7, 9], 2) == -1", "assert first_element_occurs_k_times_and_even([2, 2, 2, 3, 3, 3, 4, 4, 4], 3) == 2", "assert first_element_occurs_k_times_and_even([10, 10, 20, 20, 20, 30, 30, 30, 30], 4) == 30"], "challenge_test_list": []}
{"text": "Write a function to remove a specified row from a given nested list.", "code": "def remove_row(matrix, row_index):\n    del matrix[row_index]\n    return matrix", "task_id": "353_e6e4988e-502d-4f09-a8ef-100c654ca57d", "test_setup_code": "", "test_list": ["assert remove_row([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == [[1, 2, 3], [7, 8, 9]]", "assert remove_row([[1, 2], [3, 4], [5, 6]], 0) == [[3, 4], [5, 6]]", "assert remove_row([[1], [2], [3]], 2) == [[1], [2]]", "assert remove_row([[1, 2, 3, 4]], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to replace a specified column in a given nested list with a new column.", "code": "def replace_column(matrix, col_index, new_col):\n    for i in range(len(matrix)):\n        matrix[i][col_index] = new_col[i]\n    return matrix", "task_id": "353_94d5af7d-1065-42c6-812f-3f59ecefb2f5", "test_setup_code": "", "test_list": ["assert replace_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, [10, 11, 12]) == [[1, 10, 3], [4, 11, 6], [7, 12, 9]]", "assert replace_column([[1]], 0, [99]) == [[99]]", "assert replace_column([[1, 2], [3, 4], [5, 6]], 0, [7, 8, 9]) == [[7, 2], [8, 4], [9, 6]]", "assert replace_column([[1, 2, 3], [4, 5, 6]], 2, [7, 8]) == [[1, 2, 7], [4, 5, 8]]"], "challenge_test_list": []}
{"text": "Write a function to transpose a given nested list (matrix).", "code": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]", "task_id": "353_3008cf3c-08ca-49ee-ab19-5603486dc11c", "test_setup_code": "", "test_list": ["assert transpose_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[1, 4, 7], [2, 5, 8], [3, 6, 9]]", "assert transpose_matrix([[1, 2], [3, 4], [5, 6]]) == [[1, 3, 5], [2, 4, 6]]", "assert transpose_matrix([[1]]) == [[1]]", "assert transpose_matrix([[1, 2, 3], [4, 5, 6]]) == [[1, 4], [2, 5], [3, 6]]"], "challenge_test_list": []}
{"text": "Write a function to add a new column to a given nested list.", "code": "def add_column(matrix, new_col):\n    for i in range(len(matrix)):\n        matrix[i].append(new_col[i])\n    return matrix", "task_id": "353_37d4332f-5eb4-482c-bf5e-fff1aaeb7cea", "test_setup_code": "", "test_list": ["assert add_column([[1, 2], [3, 4]], [5, 6]) == [[1, 2, 5], [3, 4, 6]]", "assert add_column([[], []], [1, 2]) == [[1], [2]]", "assert add_column([[1], [2], [3]], [4, 5, 6]) == [[1, 4], [2, 5], [3, 6]]", "assert add_column([[1, 2, 3], [4, 5, 6]], [7, 8]) == [[1, 2, 3, 7], [4, 5, 6, 8]]"], "challenge_test_list": []}
{"text": "Write a function to add a new row to a given nested list.", "code": "def add_row(matrix, new_row):\n    matrix.append(new_row)\n    return matrix", "task_id": "353_58d51c46-d383-47ad-b7fe-d091edf5fa25", "test_setup_code": "", "test_list": ["assert add_row([[1, 2], [3, 4]], [5, 6]) == [[1, 2], [3, 4], [5, 6]]", "assert add_row([], [1, 2, 3]) == [[1, 2, 3]]", "assert add_row([[1]], [2, 3, 4]) == [[1], [2, 3, 4]]", "assert add_row([[1, 2], [3, 4]], []) == [[1, 2], [3, 4], []]"], "challenge_test_list": []}
{"text": "Write a function to remove an element from a specified position in a given nested list.", "code": "def remove_element(matrix, row_index, col_index):\n    del matrix[row_index][col_index]\n    return matrix", "task_id": "353_d2657898-021d-4130-b49a-ce11a42e60a4", "test_setup_code": "", "test_list": ["assert remove_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1) == [[1, 2, 3], [4, 6], [7, 8, 9]]", "assert remove_element([[10, 20], [30, 40, 50], [60, 70, 80, 90]], 2, 3) == [[10, 20], [30, 40, 50], [60, 70, 80]]", "assert remove_element([[1]], 0, 0) == [[]]", "assert remove_element([[1, 2], [3, 4]], 0, 1) == [[1], [3, 4]]"], "challenge_test_list": []}
{"text": "Write a function to replace an element at a specified position in a given nested list with a new value.", "code": "def replace_element(matrix, row_index, col_index, new_value):\n    matrix[row_index][col_index] = new_value\n    return matrix", "task_id": "353_31335d94-efea-4cb4-a5d7-646ef0823155", "test_setup_code": "", "test_list": ["assert replace_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1, 1, 99) == [[1, 2, 3], [4, 99, 6], [7, 8, 9]]", "assert replace_element([[1]], 0, 0, 10) == [[10]]", "assert replace_element([[1, 2], [3, 4]], 0, 1, 5) == [[1, 5], [3, 4]]", "assert replace_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2, 2, 0) == [[1, 2, 3], [4, 5, 6], [7, 8, 0]]"], "challenge_test_list": []}
{"text": "Write a function to return a list containing the sum of each column in a given nested list.", "code": "def sum_columns(matrix):\n    return [sum(col) for col in zip(*matrix)]", "task_id": "353_bb3553cd-df9e-4616-9942-0cd36a21b7ee", "test_setup_code": "", "test_list": ["assert sum_columns([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [12, 15, 18]", "assert sum_columns([[1], [2], [3], [4]]) == [10]", "assert sum_columns([[1, 2], [3, 4], [5, 6], [7, 8]]) == [16, 20]", "assert sum_columns([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]"], "challenge_test_list": []}
{"text": "Write a function to return a list containing the sum of each row in a given nested list.", "code": "def sum_rows(matrix):\n    return [sum(row) for row in matrix]", "task_id": "353_a6cbc426-1d6b-4344-bcba-2574cc6d26f9", "test_setup_code": "", "test_list": ["assert sum_rows([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [6, 15, 24]", "assert sum_rows([[0, 0, 0], [0, 0, 0], [0, 0, 0]]) == [0, 0, 0]", "assert sum_rows([[1], [2], [3]]) == [1, 2, 3]", "assert sum_rows([[-1, -2, -3], [-4, -5, -6], [-7, -8, -9]]) == [-6, -15, -24]"], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list into a single list.", "code": "def flatten_matrix(matrix):\n    return [element for row in matrix for element in row]", "task_id": "353_530dfff8-f558-4d34-a573-559d4a9d66d3", "test_setup_code": "", "test_list": ["assert flatten_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]", "assert flatten_matrix([[1], [2], [3]]) == [1, 2, 3]", "assert flatten_matrix([[], [1, 2], [], [3, 4, 5], []]) == [1, 2, 3, 4, 5]", "assert flatten_matrix([[]]) == []"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case.", "code": "def unique_Characters_ignore_case(s: str) -> bool:\n    s = s.lower()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_d64110b5-0547-410f-8706-ca53632af3ca", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case('abcdef') == True", "assert unique_Characters_ignore_case('aAbBcC') == False", "assert unique_Characters_ignore_case('') == True", "assert unique_Characters_ignore_case('AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZz') == False"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, considering spaces as characters.", "code": "def unique_Characters_with_spaces(s: str) -> bool:\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_05e9b4ad-6d63-4d13-9aac-d73ba91b6a6e", "test_setup_code": "", "test_list": ["assert unique_Characters_with_spaces('abcdef') == True", "assert unique_Characters_with_spaces('a b c d e f') == True", "assert unique_Characters_with_spaces('aabbcc') == False", "assert unique_Characters_with_spaces('') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring spaces.", "code": "def unique_Characters_ignore_spaces(s: str) -> bool:\n    s = s.replace(' ', '')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e5cce4a7-30b5-4315-b95c-d9f28b4c59f0", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_spaces('abcdef') == True", "assert unique_Characters_ignore_spaces('a b c d e f') == True", "assert unique_Characters_ignore_spaces('aabbcc') == False", "assert unique_Characters_ignore_spaces('') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring punctuation.", "code": "import string\n\ndef unique_Characters_ignore_punctuation(s: str) -> bool:\n    s = ''.join([c for c in s if c not in string.punctuation])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_4b385407-aabe-476c-aeed-ec8af5068316", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_punctuation('abcdefg!@#') == True", "assert unique_Characters_ignore_punctuation('aabbcc!!') == False", "assert unique_Characters_ignore_punctuation('') == True", "assert unique_Characters_ignore_punctuation('a!b@c#d$e%f^g&h*i(j)k_l+m=n') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring digits.", "code": "def unique_Characters_ignore_digits(s: str) -> bool:\n    s = ''.join([c for c in s if not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_5a23c96b-a8c0-4cf1-99ae-3ae12d1c2ad0", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_digits('abc123') == True", "assert unique_Characters_ignore_digits('a1b2c3a') == False", "assert unique_Characters_ignore_digits('1234567890') == True", "assert unique_Characters_ignore_digits('aA1!@#') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, considering digits as characters.", "code": "def unique_Characters_with_digits(s: str) -> bool:\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e7ea5be0-592e-4f49-8d3d-7947e313e069", "test_setup_code": "", "test_list": ["assert unique_Characters_with_digits('abcdef') == True", "assert unique_Characters_with_digits('1234567890') == True", "assert unique_Characters_with_digits('aabbcc') == False", "assert unique_Characters_with_digits('a1b2c3d4e5f6g7h8i9j0') == True", "assert unique_Characters_with_digits('') == True", "assert unique_Characters_with_digits('AaBbCc') == True", "assert unique_Characters_with_digits('112233') == False", "assert unique_Characters_with_digits('aA') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and spaces.", "code": "def unique_Characters_ignore_case_and_spaces(s: str) -> bool:\n    s = s.lower().replace(' ', '')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_6d108aeb-3114-425d-ac87-2762d62fb70d", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case_and_spaces('Hello World') == False", "assert unique_Characters_ignore_case_and_spaces('Python') == True", "assert unique_Characters_ignore_case_and_spaces('A quick brown fox') == False", "assert unique_Characters_ignore_case_and_spaces(' ') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_1cc6eaf4-a0a3-41b0-ab43-d4a8b8b73bfd", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case_and_punctuation('Hello, World!') == False", "assert unique_Characters_ignore_case_and_punctuation('Python') == True", "assert unique_Characters_ignore_case_and_punctuation('A quick brown fox jumps over the lazy dog.') == False", "assert unique_Characters_ignore_case_and_punctuation('12345!@#$%') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and digits.", "code": "def unique_Characters_ignore_case_and_digits(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_f076235a-c4c5-4d0b-acdd-7bf27b764a73", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case_and_digits('AbcD123') == True", "assert unique_Characters_ignore_case_and_digits('aA') == False", "assert unique_Characters_ignore_case_and_digits('1234567890') == True", "assert unique_Characters_ignore_case_and_digits('a!@#b$%^c&*()d') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case, spaces, and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_spaces_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation and c != ' '])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_142e96e1-410c-4bf1-9edd-aaace06008a1", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case_spaces_and_punctuation('Hello, World!') == False", "assert unique_Characters_ignore_case_spaces_and_punctuation('Python') == True", "assert unique_Characters_ignore_case_spaces_and_punctuation('A quick brown fox jumps over the lazy dog!') == False", "assert unique_Characters_ignore_case_spaces_and_punctuation('1234567890') == True"], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case, spaces, digits, and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_spaces_digits_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation and c != ' ' and not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e8d30140-edb3-4a17-93b8-aa4ce4a7ccb4", "test_setup_code": "", "test_list": ["assert unique_Characters_ignore_case_spaces_digits_and_punctuation('Hello, World!') == False", "assert unique_Characters_ignore_case_spaces_digits_and_punctuation('Python') == True", "assert unique_Characters_ignore_case_spaces_digits_and_punctuation('AaBbCcDdEe') == False", "assert unique_Characters_ignore_case_spaces_digits_and_punctuation('!@# $%^ &*()_+1234567890') == True"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of an arithmetic progression.", "code": "def sum_of_ap(a: int, n: int, d: int) -> int:\n    return n * (2 * a + (n - 1) * d) // 2", "task_id": "354_8191e98b-7e55-410b-8ad3-579c783297a4", "test_setup_code": "", "test_list": ["assert sum_of_ap(1, 5, 1) == 15", "assert sum_of_ap(2, 3, 4) == 24", "assert sum_of_ap(0, 10, 0) == 0", "assert sum_of_ap(5, 1, 10) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the n-th term of the Fibonacci sequence.", "code": "def nth_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "354_4081bd62-7b73-4501-a2c2-6507a22e4d73", "test_setup_code": "", "test_list": ["assert nth_fibonacci(0) == 0", "assert nth_fibonacci(1) == 1", "assert nth_fibonacci(10) == 55", "assert nth_fibonacci(20) == 6765"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n triangular numbers.", "code": "def sum_of_triangular_numbers(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6", "task_id": "354_c89bc3f7-f1c9-4c4d-86bc-58555c7f452a", "test_setup_code": "", "test_list": ["assert sum_of_triangular_numbers(1) == 1", "assert sum_of_triangular_numbers(3) == 10", "assert sum_of_triangular_numbers(5) == 35", "assert sum_of_triangular_numbers(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n-th square number.", "code": "def nth_square_number(n: int) -> int:\n    return n * n", "task_id": "354_05f6dd15-7139-49fb-b800-04f62c33cd7c", "test_setup_code": "", "test_list": ["assert nth_square_number(1) == 1", "assert nth_square_number(5) == 25", "assert nth_square_number(0) == 0", "assert nth_square_number(10) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n square numbers.", "code": "def sum_of_square_numbers(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "354_9ad999db-6af1-4d4d-a02a-be55d146e793", "test_setup_code": "", "test_list": ["assert sum_of_square_numbers(1) == 1", "assert sum_of_square_numbers(5) == 55", "assert sum_of_square_numbers(0) == 0", "assert sum_of_square_numbers(10) == 385"], "challenge_test_list": []}
{"text": "Given two angles of a triangle in degrees, write a function to find the missing third angle.", "code": "def find_missing_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_b0b48ddd-539e-4717-8b39-1e6023e4928c", "test_setup_code": "", "test_list": ["assert find_missing_angle(60, 60) == 60", "assert find_missing_angle(45, 45) == 90", "assert find_missing_angle(0, 90) == 90", "assert find_missing_angle(89, 1) == 90"], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to calculate the remaining angle.", "code": "def find_remaining_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_72a11fff-8042-4288-afd5-89bdf0b6e8a8", "test_setup_code": "", "test_list": ["assert find_remaining_angle(45, 45) == 90", "assert find_remaining_angle(30, 60) == 90", "assert find_remaining_angle(10, 20) == 150", "assert find_remaining_angle(1, 178) == 1"], "challenge_test_list": []}
{"text": "Write a function that takes two angles of a triangle and returns the third angle.", "code": "def calculate_third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_3c224a47-5649-4278-90d0-be318b84b7cc", "test_setup_code": "", "test_list": ["assert calculate_third_angle(60, 60) == 60", "assert calculate_third_angle(45, 45) == 90", "assert calculate_third_angle(0, 90) == 90", "assert calculate_third_angle(179, 1) == 0"], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to determine the third angle.", "code": "def third_triangle_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_4617278d-82b9-4210-ab6a-b7d857055b30", "test_setup_code": "", "test_list": ["assert third_triangle_angle(60, 60) == 60", "assert third_triangle_angle(45, 45) == 90", "assert third_triangle_angle(0, 90) == 90", "assert third_triangle_angle(89, 1) == 90"], "challenge_test_list": []}
{"text": "Write a function to find the last angle of a triangle given the other two angles.", "code": "def find_last_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_59af22f6-9c71-49ec-a7c8-d0f925829715", "test_setup_code": "", "test_list": ["assert find_last_angle(60, 60) == 60", "assert find_last_angle(45, 45) == 90", "assert find_last_angle(0, 0) == 180", "assert find_last_angle(179, 1) == 0"], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the missing angle.", "code": "def missing_triangle_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_45c8521c-22a5-492c-b335-7f53e1bef09d", "test_setup_code": "", "test_list": ["assert missing_triangle_angle(60, 60) == 60", "assert missing_triangle_angle(45, 45) == 90", "assert missing_triangle_angle(0, 90) == 90", "assert missing_triangle_angle(179, 0) == 1"], "challenge_test_list": []}
{"text": "Write a function that calculates the missing angle of a triangle given the other two angles.", "code": "def calculate_missing_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_7b586e86-f0b4-44ad-8af3-1f5a1405c887", "test_setup_code": "", "test_list": ["assert calculate_missing_angle(60, 60) == 60", "assert calculate_missing_angle(45, 45) == 90", "assert calculate_missing_angle(0, 90) == 90", "assert calculate_missing_angle(89, 1) == 90"], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the third angle.", "code": "def find_third_triangle_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_a924eee2-d0e4-4a38-ae02-df81f2f1a985", "test_setup_code": "", "test_list": ["assert find_third_triangle_angle(60, 60) == 60", "assert find_third_triangle_angle(45, 45) == 90", "assert find_third_triangle_angle(0, 90) == 90", "assert find_third_triangle_angle(1, 179) == 0"], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the remaining angle.", "code": "def remaining_triangle_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_78d74dc0-65be-4c88-8604-e69074806428", "test_setup_code": "", "test_list": ["assert remaining_triangle_angle(60, 60) == 60", "assert remaining_triangle_angle(45, 45) == 90", "assert remaining_triangle_angle(0, 90) == 90", "assert remaining_triangle_angle(179, 1) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a circle of radius r.", "code": "def count_Squares(radius):\n    squares = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            if a == b:\n                diagnalLengthSquare = (a * a + b * b)\n                if diagnalLengthSquare <= diameterSquare:\n                    squares += 1\n    return squares", "task_id": "355_09f65505-0838-4d33-9a5a-82c0fa156623", "test_setup_code": "", "test_list": ["assert count_Squares(1) == 1", "assert count_Squares(2) == 5", "assert count_Squares(3) == 13", "assert count_Squares(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a square of side length s.", "code": "def count_Rectangles_in_Square(side):\n    rectangles = 0\n    for a in range(1, side + 1):\n        for b in range(1, side + 1):\n            rectangles += (side - a + 1) * (side - b + 1)\n    return rectangles", "task_id": "355_5fd3ff6d-32a8-4731-b519-0cd5b3231c92", "test_setup_code": "", "test_list": ["assert count_Rectangles_in_Square(1) == 1", "assert count_Rectangles_in_Square(2) == 9", "assert count_Rectangles_in_Square(3) == 36", "assert count_Rectangles_in_Square(4) == 100"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a rectangle of length l and width w.", "code": "def count_Squares_in_Rectangle(length, width):\n    squares = 0\n    for a in range(1, min(length, width) + 1):\n        squares += (length - a + 1) * (width - a + 1)\n    return squares", "task_id": "355_82acecf4-0627-4fbb-8802-81152331f448", "test_setup_code": "", "test_list": ["assert count_Squares_in_Rectangle(2, 2) == 5", "assert count_Squares_in_Rectangle(3, 2) == 8", "assert count_Squares_in_Rectangle(1, 1) == 1", "assert count_Squares_in_Rectangle(4, 3) == 20"], "challenge_test_list": []}
{"text": "Write a python function to count the number of circles of radius r that can fit inside a rectangle of length l and width w.", "code": "def count_Circles_in_Rectangle(length, width, radius):\n    diameter = 2 * radius\n    circles_in_length = length // diameter\n    circles_in_width = width // diameter\n    return circles_in_length * circles_in_width", "task_id": "355_73dacd8b-83a1-4880-96bc-bf5d10c890f4", "test_setup_code": "", "test_list": ["assert count_Circles_in_Rectangle(10, 5, 1) == 20", "assert count_Circles_in_Rectangle(10, 5, 2) == 6", "assert count_Circles_in_Rectangle(7, 3, 2) == 0", "assert count_Circles_in_Rectangle(8, 8, 2) == 4"], "challenge_test_list": []}
{"text": "Write a python function to count the number of circles of radius r that can fit inside a square of side length s.", "code": "def count_Circles_in_Square(side, radius):\n    diameter = 2 * radius\n    circles_in_side = side // diameter\n    return circles_in_side * circles_in_side", "task_id": "355_e204731d-00ec-481d-891c-127acae63e05", "test_setup_code": "", "test_list": ["assert count_Circles_in_Square(10, 1) == 25", "assert count_Circles_in_Square(5, 1) == 4", "assert count_Circles_in_Square(6, 2) == 1", "assert count_Circles_in_Square(100, 10) == 25"], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle of length l and width w.", "code": "def count_Rectangles_in_Rectangle(length, width):\n    rectangles = 0\n    for a in range(1, length + 1):\n        for b in range(1, width + 1):\n            rectangles += (length - a + 1) * (width - b + 1)\n    return rectangles", "task_id": "355_90cf5874-8810-4d89-94c0-ab5558be1e0f", "test_setup_code": "", "test_list": ["assert count_Rectangles_in_Rectangle(1, 1) == 1", "assert count_Rectangles_in_Rectangle(2, 2) == 9", "assert count_Rectangles_in_Rectangle(3, 2) == 18", "assert count_Rectangles_in_Rectangle(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles in a square of side length s.", "code": "def count_Triangles_in_Square(side):\n    triangles = 0\n    for a in range(1, side + 1):\n        for b in range(1, side + 1):\n            if a == b:\n                triangles += (side - a + 1) * (side - b + 1)\n    return triangles", "task_id": "355_4ca03b7e-5b53-4f62-aa80-c677d8cc2ad9", "test_setup_code": "", "test_list": ["assert count_Triangles_in_Square(1) == 1", "assert count_Triangles_in_Square(2) == 4", "assert count_Triangles_in_Square(3) == 9", "assert count_Triangles_in_Square(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a circle of radius r.", "code": "def count_Squares_in_Circle(radius):\n    squares = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            if a == b:\n                diagnalLengthSquare = (a * a + b * b)\n                if diagnalLengthSquare <= diameterSquare:\n                    squares += 1\n    return squares", "task_id": "355_bf569b27-d2e4-47c9-9f48-635e99e19ce7", "test_setup_code": "", "test_list": ["assert count_Squares_in_Circle(1) == 1", "assert count_Squares_in_Circle(2) == 5", "assert count_Squares_in_Circle(0) == 0", "assert count_Squares_in_Circle(3) == 13"], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles in a rectangle of length l and width w.", "code": "def count_Triangles_in_Rectangle(length, width):\n    triangles = 0\n    for a in range(1, length + 1):\n        for b in range(1, width + 1):\n            if a == b:\n                triangles += (length - a + 1) * (width - b + 1)\n    return triangles", "task_id": "355_97476e4b-fd1e-4697-be5b-4d493643b76f", "test_setup_code": "", "test_list": ["assert count_Triangles_in_Rectangle(2, 2) == 4", "assert count_Triangles_in_Rectangle(3, 3) == 9", "assert count_Triangles_in_Rectangle(1, 1) == 1", "assert count_Triangles_in_Rectangle(0, 0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in the given list of tuples.", "code": "def sum_of_tuples(tuples):\n    return sum(sum(t) for t in tuples)", "task_id": "357_9a00ee14-ccb4-4bbb-aa54-1075a868946b", "test_setup_code": "", "test_list": ["assert sum_of_tuples([(1, 2), (3, 4), (5, 6)]) == 21", "assert sum_of_tuples([(0, 0), (0, 0), (0, 0)]) == 0", "assert sum_of_tuples([(100, 200), (-100, -200), (50, 50)]) == 100", "assert sum_of_tuples([(1,)] * 1000) == 1000"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element of all the given tuple records.", "code": "def min_of_tuples(tuples):\n    return min(min(t) for t in tuples)", "task_id": "357_08d13aac-b108-4c8b-95ff-89d3f5968d00", "test_setup_code": "", "test_list": ["assert min_of_tuples([(3, 4, 5), (1, 2, 3), (6, 7, 8)]) == 1", "assert min_of_tuples([(10, 20, 30), (5, 15, 25), (0, 50, 100)]) == 0", "assert min_of_tuples([(100, 200, 300), (400, 500, 600), (700, 800, 900)]) == 100", "assert min_of_tuples([(1, 2), (3, 4), (5, 6), (7, 8)]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the mean of all elements in the given list of tuples.", "code": "def mean_of_tuples(tuples):\n    total_elements = sum(len(t) for t in tuples)\n    total_sum = sum(sum(t) for t in tuples)\n    return total_sum / total_elements", "task_id": "357_20094aa8-245e-4e83-9b30-428ae203a9f4", "test_setup_code": "", "test_list": ["assert mean_of_tuples([(1, 2), (3, 4), (5, 6)]) == 3.5", "assert mean_of_tuples([(1,), (2, 3), (4, 5, 6)]) == 3.5", "assert mean_of_tuples([(0, 0, 0), (0, 0), (0,)]) == 0.0", "assert mean_of_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 5.0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element of each tuple in the given list of tuples.", "code": "def max_of_each_tuple(tuples):\n    return [max(t) for t in tuples]", "task_id": "357_84910120-d18f-4aa5-9ad8-bc543b67b738", "test_setup_code": "", "test_list": ["assert max_of_each_tuple([(1, 2), (3, 4), (5, 6)]) == [2, 4, 6]", "assert max_of_each_tuple([(10, 20, 30), (5, 15, 25), (100, 50, 75)]) == [30, 25, 100]", "assert max_of_each_tuple([(-1, -2, -3), (-10, -20, -30), (-5, -15, -25)]) == [-1, -10, -5]", "assert max_of_each_tuple([(0, 0, 0), (1, 1, 1), (2, 2, 2)]) == [0, 1, 2]"], "challenge_test_list": []}
{"text": "Write a function to find the sum of elements of each tuple in the given list of tuples.", "code": "def sum_of_each_tuple(tuples):\n    return [sum(t) for t in tuples]", "task_id": "357_c81f15f3-3c07-4d39-8d55-fb6701210291", "test_setup_code": "", "test_list": ["assert sum_of_each_tuple([(1, 2), (3, 4), (5, 6)]) == [3, 7, 11]", "assert sum_of_each_tuple([(0, 0), (0, 0), (0, 0)]) == [0, 0, 0]", "assert sum_of_each_tuple([(1, -1), (2, -2), (3, -3)]) == [0, 0, 0]", "assert sum_of_each_tuple([(100, 200), (300, 400), (500, 600)]) == [300, 700, 1100]"], "challenge_test_list": []}
{"text": "Write a function to find the product of all elements in the given list of tuples.", "code": "def product_of_tuples(tuples):\n    product = 1\n    for t in tuples:\n        for num in t:\n            product *= num\n    return product", "task_id": "357_9312eec2-1904-4a34-b22e-6eeb72134f69", "test_setup_code": "", "test_list": ["assert product_of_tuples([(1, 2), (3, 4)]) == 24", "assert product_of_tuples([(0, 1), (2, 3)]) == 0", "assert product_of_tuples([(1, 2, 3), (4, 5, 6)]) == 720", "assert product_of_tuples([(1,), (2,), (3,), (4,)]) == 24"], "challenge_test_list": []}
{"text": "Write a function to count the total number of elements in the given list of tuples.", "code": "def count_elements(tuples):\n    return sum(len(t) for t in tuples)", "task_id": "357_b90cd32c-1590-4a02-bcd2-0778c29670a6", "test_setup_code": "", "test_list": ["assert count_elements([(1, 2), (3, 4), (5, 6)]) == 6", "assert count_elements([(1,), (2, 3, 4), (5, 6, 7, 8)]) == 8", "assert count_elements([]) == 0", "assert count_elements([(1, 2, 3), (), (4, 5)]) == 5"], "challenge_test_list": []}
{"text": "Write a function to flatten the given list of tuples into a single list of elements.", "code": "def flatten_tuples(tuples):\n    return [element for t in tuples for element in t]", "task_id": "357_9b711f25-0dce-4582-be44-83bb7e828781", "test_setup_code": "", "test_list": ["assert flatten_tuples([(1, 2), (3, 4), (5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert flatten_tuples([(1,), (2, 3), (4, 5, 6)]) == [1, 2, 3, 4, 5, 6]", "assert flatten_tuples([]) == []", "assert flatten_tuples([(1, 2), (3,), (4, 5), (6,)]) == [1, 2, 3, 4, 5, 6]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum of all odd elements in the given list of tuples.", "code": "def max_of_odd_elements(tuples):\n    odd_elements = [element for t in tuples for element in t if element % 2 != 0]\n    return max(odd_elements)", "task_id": "357_6493f969-0226-48f3-8d07-0a75bcb1b5f9", "test_setup_code": "", "test_list": ["assert max_of_odd_elements([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 9", "assert max_of_odd_elements([(10, 20, 30), (40, 50, 60), (70, 80, 90)]) == None", "assert max_of_odd_elements([(1,), (3,), (5,), (7,)]) == 7", "assert max_of_odd_elements([(2, 4, 6), (8, 10, 12), (14, 16, 18)]) == None"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all even elements in the given list of tuples.", "code": "def sum_of_even_elements(tuples):\n    return sum(element for t in tuples for element in t if element % 2 == 0)", "task_id": "357_427b3232-b37c-4710-af24-d16edf22016d", "test_setup_code": "", "test_list": ["assert sum_of_even_elements([(1, 2, 3), (4, 5, 6)]) == 12", "assert sum_of_even_elements([(2, 4, 6), (8, 10, 12)]) == 42", "assert sum_of_even_elements([(1, 3, 5), (7, 9, 11)]) == 0", "assert sum_of_even_elements([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of a list of integers using map and lambda function.", "code": "def sum_of_squares(nums):\n  result = map(lambda x: x**2, nums)\n  return sum(result)", "task_id": "358_bf37cb94-1746-433c-ad14-ede8b06acb63", "test_setup_code": "", "test_list": ["assert sum_of_squares([1, 2, 3, 4]) == 30", "assert sum_of_squares([-1, -2, -3, -4]) == 30", "assert sum_of_squares([0, 0, 0, 0]) == 0", "assert sum_of_squares([100, 200, 300]) == 140000"], "challenge_test_list": []}
{"text": "Write a function to concatenate corresponding elements of two lists of strings using map and lambda function.", "code": "def concat_strings(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "358_ce65593f-b505-4e8b-97d3-8e329bad4bba", "test_setup_code": "", "test_list": ["assert concat_strings(['a', 'b', 'c'], ['x', 'y', 'z']) == ['ax', 'by', 'cz']", "assert concat_strings(['hello', 'world'], ['python', 'rocks']) == ['hellopython', 'worldrocks']", "assert concat_strings([''], ['']) == ['']", "assert concat_strings(['short'], ['longerstring']) == ['shortlongerstring']"], "challenge_test_list": []}
{"text": "Write a function to multiply corresponding elements of two lists of integers using map and lambda function.", "code": "def multiply_elements(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "358_9855b8d5-f6e5-4f82-a5d5-faa34b4e664a", "test_setup_code": "", "test_list": ["assert multiply_elements([1, 2, 3], [4, 5, 6]) == [4, 10, 18]", "assert multiply_elements([0, 0, 0], [1, 2, 3]) == [0, 0, 0]", "assert multiply_elements([-1, -2, -3], [1, 2, 3]) == [-1, -4, -9]", "assert multiply_elements([], []) == []"], "challenge_test_list": []}
{"text": "Write a function to convert all strings in a list to uppercase using map and lambda function.", "code": "def uppercase_strings(strs):\n  result = map(lambda x: x.upper(), strs)\n  return list(result)", "task_id": "358_e581e3e2-627e-4937-8c26-72799aa18b6d", "test_setup_code": "", "test_list": ["assert uppercase_strings(['hello', 'world']) == ['HELLO', 'WORLD']", "assert uppercase_strings(['Python', 'is', 'fun']) == ['PYTHON', 'IS', 'FUN']", "assert uppercase_strings(['a', 'b', 'c']) == ['A', 'B', 'C']", "assert uppercase_strings(['', '123', 'TeSt']) == ['', '123', 'TEST']"], "challenge_test_list": []}
{"text": "Write a function to subtract corresponding elements of two lists of integers using map and lambda function.", "code": "def subtract_elements(nums1, nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": "358_ce270391-56c5-4b45-be77-2a10880070d7", "test_setup_code": "", "test_list": ["assert subtract_elements([5, 10, 15], [2, 4, 6]) == [3, 6, 9]", "assert subtract_elements([1, 2, 3], [1, 2, 3]) == [0, 0, 0]", "assert subtract_elements([0, -1, -2], [1, 1, 1]) == [-1, -2, -3]", "assert subtract_elements([100, 200, 300], [50, 150, 250]) == [50, 50, 50]"], "challenge_test_list": []}
{"text": "Write a function to find the length of each string in a list using map and lambda function.", "code": "def length_of_strings(strs):\n  result = map(lambda x: len(x), strs)\n  return list(result)", "task_id": "358_a5bbaafd-ae5c-4be3-b980-03d05bdda29a", "test_setup_code": "", "test_list": ["assert length_of_strings(['hello', 'world']) == [5, 5]", "assert length_of_strings(['a', 'ab', 'abc', 'abcd']) == [1, 2, 3, 4]", "assert length_of_strings(['', 'test', 'longer string']) == [0, 4, 13]", "assert length_of_strings([]) == []"], "challenge_test_list": []}
{"text": "Write a function to divide corresponding elements of two lists of integers using map and lambda function.", "code": "def divide_elements(nums1, nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "task_id": "358_6e35dde4-5246-4bf2-b5d1-caef265a96f5", "test_setup_code": "", "test_list": ["assert divide_elements([10, 20, 30], [2, 5, 6]) == [5.0, 4.0, 5.0]", "assert divide_elements([1, 2, 3, 4], [1, 2, 3, 4]) == [1.0, 1.0, 1.0, 1.0]", "assert divide_elements([], []) == []", "assert divide_elements([100, 50, 25], [4, 2, 5]) == [25.0, 25.0, 5.0]"], "challenge_test_list": []}
{"text": "Write a function to reverse each string in a list using map and lambda function.", "code": "def reverse_strings(strs):\n  result = map(lambda x: x[::-1], strs)\n  return list(result)", "task_id": "358_73d988fb-e8fa-4bc2-8374-063f5abf1798", "test_setup_code": "", "test_list": ["assert reverse_strings(['hello', 'world']) == ['olleh', 'dlrow']", "assert reverse_strings(['abc', 'def', 'ghi']) == ['cba', 'fed', 'ihg']", "assert reverse_strings(['', 'a', 'ab']) == ['', 'a', 'ba']", "assert reverse_strings(['12345', 'racecar', 'madam']) == ['54321', 'racecar', 'madam']"], "challenge_test_list": []}
{"text": "Write a function to increment each element in a list of integers by 1 using map and lambda function.", "code": "def increment_elements(nums):\n  result = map(lambda x: x + 1, nums)\n  return list(result)", "task_id": "358_5bdcfa59-5653-469c-b523-b3f75862e5b5", "test_setup_code": "", "test_list": ["assert increment_elements([1, 2, 3]) == [2, 3, 4]", "assert increment_elements([-1, 0, 1]) == [0, 1, 2]", "assert increment_elements([]) == []", "assert increment_elements([100, 200, 300]) == [101, 201, 301]"], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from a list of integers using map and lambda function.", "code": "def filter_even(nums):\n  result = filter(lambda x: x % 2 == 0, nums)\n  return list(result)", "task_id": "358_2775b1fb-ac7d-42cf-8e46-3b2565fdddf7", "test_setup_code": "", "test_list": ["assert filter_even([1, 2, 3, 4, 5, 6]) == [2, 4, 6]", "assert filter_even([7, 11, 13, 17]) == []", "assert filter_even([2, 4, 6, 8, 10]) == [2, 4, 6, 8, 10]", "assert filter_even([]) == []"], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the roots of the quadratic equation is equal to zero or not.", "code": "def check_sum_of_roots(a, b, c):\n    if b == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_10412454-38a0-4c2a-b59f-04a55ad8870a", "test_setup_code": "", "test_list": ["assert check_sum_of_roots(1, 0, -1) == 'Yes'", "assert check_sum_of_roots(1, -2, 1) == 'No'", "assert check_sum_of_roots(1, 2, 1) == 'No'", "assert check_sum_of_roots(2, 0, 3) == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the roots of the quadratic equation is equal to the constant term or not.", "code": "def check_product_of_roots(a, b, c):\n    if a * c == b * b:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_eb21fc2f-4cd9-46c8-961e-a1b744a27e30", "test_setup_code": "", "test_list": ["assert check_product_of_roots(1, -3, 2) == 'No'", "assert check_product_of_roots(1, 2, 1) == 'No'", "assert check_product_of_roots(2, 4, 2) == 'Yes'", "assert check_product_of_roots(1, 0, 0) == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are equal or not.", "code": "def check_roots_equal(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_627cfbcb-49af-4198-8f65-20b92f4bedd3", "test_setup_code": "", "test_list": ["assert check_roots_equal(1, -2, 1) == 'Yes'", "assert check_roots_equal(1, 0, -1) == 'No'", "assert check_roots_equal(1, 2, 1) == 'Yes'", "assert check_roots_equal(1, 1, 1) == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are real or not.", "code": "def check_roots_real(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_0bb378ea-ffab-48eb-b83e-b7b42fe424f2", "test_setup_code": "", "test_list": ["assert check_roots_real(1, -3, 2) == 'Yes'", "assert check_roots_real(1, 2, 5) == 'No'", "assert check_roots_real(1, 2, 1) == 'Yes'", "assert check_roots_real(0, 2, 1) == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are imaginary or not.", "code": "def check_roots_imaginary(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant < 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_7940b5f1-4234-433d-8893-63af8b9cebca", "test_setup_code": "", "test_list": ["assert check_roots_imaginary(1, 2, 5) == 'Yes'", "assert check_roots_imaginary(1, -3, 2) == 'No'", "assert check_roots_imaginary(1, 2, 1) == 'No'", "assert check_roots_imaginary(0, 2, 1) == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are negative or not.", "code": "def check_roots_negative(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1 < 0 and root2 < 0:\n            return 'Yes'\n    return 'No'", "task_id": "359_8c95e389-3822-4d76-9c74-545f31a511bc", "test_setup_code": "", "test_list": ["assert check_roots_negative(1, 2, 1) == 'Yes'", "assert check_roots_negative(1, -3, 2) == 'No'", "assert check_roots_negative(1, 4, 4) == 'No'", "assert check_roots_negative(1, 1, 1) == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation have opposite signs or not.", "code": "def check_roots_opposite_signs(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1 * root2 < 0:\n            return 'Yes'\n    return 'No'", "task_id": "359_59684927-2a3a-4c36-9526-ee9e0d8ba6e8", "test_setup_code": "", "test_list": ["assert check_roots_opposite_signs(1, 0, -4) == 'Yes'", "assert check_roots_opposite_signs(1, 0, 4) == 'No'", "assert check_roots_opposite_signs(2, -3, -5) == 'Yes'", "assert check_roots_opposite_signs(1, 2, 1) == 'No'"], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are integers or not.", "code": "def check_roots_integer(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1.is_integer() and root2.is_integer():\n            return 'Yes'\n    return 'No'", "task_id": "359_36221b88-702d-454d-bb90-545f8c46c181", "test_setup_code": "", "test_list": ["assert check_roots_integer(1, -3, 2) == 'Yes'", "assert check_roots_integer(1, 2, 1) == 'Yes'", "assert check_roots_integer(1, 1, 1) == 'No'", "assert check_roots_integer(1, 0, -4) == 'Yes'"], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are rational numbers or not.", "code": "def check_roots_rational(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1.is_integer() and root2.is_integer():\n            return 'Yes'\n    return 'No'", "task_id": "359_a6340d7d-792f-409d-8824-1e1f6deba246", "test_setup_code": "", "test_list": ["assert check_roots_rational(1, -3, 2) == 'Yes'", "assert check_roots_rational(1, 2, 5) == 'No'", "assert check_roots_rational(1, -2, 1) == 'Yes'", "assert check_roots_rational(1, 0, -1) == 'Yes'"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Lucas number.", "code": "def get_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "360_2c1e6a56-2a1e-47b3-8ba7-defe7077aa06", "test_setup_code": "", "test_list": ["assert get_lucas(0) == 2", "assert get_lucas(1) == 1", "assert get_lucas(5) == 11", "assert get_lucas(10) == 123"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Fibonacci number.", "code": "def get_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "360_defc20a1-6c43-4a38-803a-ed78fca31cc8", "test_setup_code": "", "test_list": ["assert get_fibonacci(0) == 0", "assert get_fibonacci(1) == 1", "assert get_fibonacci(10) == 55", "assert get_fibonacci(20) == 6765"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th triangular number.", "code": "def get_triangular(n):\n    return n * (n + 1) // 2", "task_id": "360_a641feaa-3876-468f-bc0c-a7b14136d928", "test_setup_code": "", "test_list": ["assert get_triangular(1) == 1", "assert get_triangular(5) == 15", "assert get_triangular(10) == 55", "assert get_triangular(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th square number.", "code": "def get_square(n):\n    return n * n", "task_id": "360_986f87c8-432f-472c-94d6-a0cbf675954a", "test_setup_code": "", "test_list": ["assert get_square(0) == 0", "assert get_square(1) == 1", "assert get_square(10) == 100", "assert get_square(-5) == 25"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th pentagonal number.", "code": "def get_pentagonal(n):\n    return n * (3 * n - 1) // 2", "task_id": "360_89e81604-27a1-4238-a04a-257c62afe3d6", "test_setup_code": "", "test_list": ["assert get_pentagonal(1) == 1", "assert get_pentagonal(2) == 5", "assert get_pentagonal(3) == 12", "assert get_pentagonal(10) == 145"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th hexagonal number.", "code": "def get_hexagonal(n):\n    return n * (2 * n - 1)", "task_id": "360_65065b97-dcc1-4cd7-9a6c-6a21b57a0baa", "test_setup_code": "", "test_list": ["assert get_hexagonal(1) == 1", "assert get_hexagonal(2) == 6", "assert get_hexagonal(10) == 190", "assert get_hexagonal(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th heptagonal number.", "code": "def get_heptagonal(n):\n    return n * (5 * n - 3) // 2", "task_id": "360_8f85f4aa-6b7a-474e-b59c-126dee257f02", "test_setup_code": "", "test_list": ["assert get_heptagonal(1) == 1", "assert get_heptagonal(2) == 7", "assert get_heptagonal(10) == 370", "assert get_heptagonal(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th octagonal number.", "code": "def get_octagonal(n):\n    return n * (3 * n - 2)", "task_id": "360_ff2b829c-7c59-4d6c-a343-05a7f2c36433", "test_setup_code": "", "test_list": ["assert get_octagonal(1) == 1", "assert get_octagonal(2) == 8", "assert get_octagonal(10) == 280", "assert get_octagonal(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Catalan number.", "code": "def get_catalan(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[n]", "task_id": "360_0d853a5f-7d61-4435-9bd0-d7e37a46a078", "test_setup_code": "", "test_list": ["assert get_catalan(0) == 1", "assert get_catalan(1) == 1", "assert get_catalan(5) == 42", "assert get_catalan(10) == 16796"], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th harmonic number.", "code": "def get_harmonic(n):\n    harmonic = 0.0\n    for i in range(1, n + 1):\n        harmonic += 1 / i\n    return harmonic", "task_id": "360_ae140487-8871-418b-bac1-ba06733cd799", "test_setup_code": "", "test_list": ["assert get_harmonic(1) == 1.0", "assert get_harmonic(2) == 1.5", "assert get_harmonic(5) == 2.283333333333333", "assert get_harmonic(10) == 2.928968253968254"], "challenge_test_list": []}
{"text": "Write a function to remove negative numbers from a given list of numbers.", "code": "def remove_negative(list1):\n    return [x for x in list1 if x >= 0]", "task_id": "361_f50afde4-9d8d-422d-a59c-f8a483bb4f54", "test_setup_code": "", "test_list": ["assert remove_negative([1, -2, 3, -4, 5]) == [1, 3, 5]", "assert remove_negative([-1, -2, -3, -4, -5]) == []", "assert remove_negative([0, 1, 2, 3, 4, 5]) == [0, 1, 2, 3, 4, 5]", "assert remove_negative([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove zeros from a given list of numbers.", "code": "def remove_zeros(list1):\n    return [x for x in list1 if x != 0]", "task_id": "361_d87ca610-d395-4f61-b3cd-1946e8b02e7a", "test_setup_code": "", "test_list": ["assert remove_zeros([0, 1, 2, 0, 3, 0, 4]) == [1, 2, 3, 4]", "assert remove_zeros([0, 0, 0, 0, 0]) == []", "assert remove_zeros([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_zeros([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove None values from a given list.", "code": "def remove_none(list1):\n    return [x for x in list1 if x is not None]", "task_id": "361_3d1a100e-8cd3-408d-9edf-4b63ed6cfecf", "test_setup_code": "", "test_list": ["assert remove_none([1, None, 2, None, 3]) == [1, 2, 3]", "assert remove_none([None, None, None]) == []", "assert remove_none([1, 2, 3, 4]) == [1, 2, 3, 4]", "assert remove_none([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove strings from a given list.", "code": "def remove_strings(list1):\n    return [x for x in list1 if not isinstance(x, str)]", "task_id": "361_4473d168-b2a4-40da-af37-a4757fefb378", "test_setup_code": "", "test_list": ["assert remove_strings([1, 'a', 2, 'b', 3]) == [1, 2, 3]", "assert remove_strings(['hello', 'world', 1, 2, 3]) == [1, 2, 3]", "assert remove_strings([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert remove_strings(['a', 'b', 'c']) == []"], "challenge_test_list": []}
{"text": "Write a function to remove all falsy values (e.g., False, None, 0, '', etc.) from a given list.", "code": "def remove_falsy(list1):\n    return [x for x in list1 if x]", "task_id": "361_a1b31e8e-913b-4098-82a7-5e5069975b6c", "test_setup_code": "", "test_list": ["assert remove_falsy([0, 1, False, 2, '', 3, None, 4]) == [1, 2, 3, 4]", "assert remove_falsy([None, False, 0, '', [], {}, set()]) == []", "assert remove_falsy([1, 'hello', True, [1, 2], {'key': 'value'}, (3, 4)]) == [1, 'hello', True, [1, 2], {'key': 'value'}, (3, 4)]", "assert remove_falsy([0, '', False, None, [], {}, set(), 5, 'test']) == [5, 'test']"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate values from a given list.", "code": "def remove_duplicates(list1):\n    return list(dict.fromkeys(list1))", "task_id": "361_57407c07-f4b0-4479-8ca8-ad3ffdd8dcb6", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 2, 1]) == [1, 2, 3]", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to remove even numbers from a given list of numbers.", "code": "def remove_even_numbers(list1):\n    return [x for x in list1 if x % 2 != 0]", "task_id": "361_298320f3-831d-4596-ad3f-6f54dae5f1fb", "test_setup_code": "", "test_list": ["assert remove_even_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "assert remove_even_numbers([2, 4, 6, 8, 10]) == []", "assert remove_even_numbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]", "assert remove_even_numbers([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove strings shorter than a given length from a list of strings.", "code": "def remove_short_strings(list1, min_length):\n    return [x for x in list1 if len(x) >= min_length]", "task_id": "361_4728232b-925a-4d45-82ad-035f7ce88c83", "test_setup_code": "", "test_list": ["assert remove_short_strings(['apple', 'fig', 'banana', 'kiwi'], 4) == ['apple', 'banana', 'kiwi']", "assert remove_short_strings(['a', 'ab', 'abc', 'abcd'], 3) == ['abc', 'abcd']", "assert remove_short_strings([], 2) == []", "assert remove_short_strings(['short', 'tiny', 'small', 'big'], 5) == ['short', 'small']"], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "361_aba12073-0eaf-4434-b8cd-ee68f8a1bccf", "test_setup_code": "", "test_list": ["assert remove_vowels('hello world') == 'hll wrld'", "assert remove_vowels('APPLE BANANA') == 'PPL BNN'", "assert remove_vowels('aeiouAEIOU') == ''", "assert remove_vowels('123!@#$%^&*()') == '123!@#$%^&*()'"], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alpha(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "361_41b4d33a-a965-4019-a58c-ba40c4336da1", "test_setup_code": "", "test_list": ["assert remove_non_alpha('Hello, World!') == 'HelloWorld'", "assert remove_non_alpha('123abc456def') == 'abcdef'", "assert remove_non_alpha('!@#$%^&*()') == ''", "assert remove_non_alpha('a1b2c3d4e5f6g7h8i9j0') == 'abcdefghij'"], "challenge_test_list": []}
{"text": "Write a python function to find the character with maximum occurrences in a given string.", "code": "def most_frequent_char(s):\n    max_count = 0\n    result = s[0]\n    for char in s:\n        count = s.count(char)\n        if count > max_count:\n            max_count = count\n            result = char\n    return result", "task_id": "362_af422166-b6e3-4902-94f3-4b8b21dd9072", "test_setup_code": "", "test_list": ["assert most_frequent_char('aabbbcc') == 'b'", "assert most_frequent_char('abcabcabc') == 'a'", "assert most_frequent_char('') == ''", "assert most_frequent_char('a') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to find the word with maximum occurrences in a given sentence.", "code": "def most_frequent_word(sentence):\n    words = sentence.split()\n    max_count = 0\n    result = words[0]\n    for word in words:\n        count = words.count(word)\n        if count > max_count:\n            max_count = count\n            result = word\n    return result", "task_id": "362_ac8a47d0-3336-483b-bfef-4fdb4c299b21", "test_setup_code": "", "test_list": ["assert most_frequent_word('this is a test this is only a test') == 'test'", "assert most_frequent_word('hello hello hello world') == 'hello'", "assert most_frequent_word('a b c d e f g h i j k l m n o p q r s t u v w x y z') == 'a'", "assert most_frequent_word('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers.", "code": "def most_frequent_element(nums):\n    max_count = 0\n    result = nums[0]\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    return result", "task_id": "362_0a99409a-5eab-4273-b764-bef9c4f5957b", "test_setup_code": "", "test_list": ["assert most_frequent_element([1, 3, 2, 3, 4, 3, 5, 3]) == 3", "assert most_frequent_element([1, 1, 1, 2, 2, 3, 3, 3, 3]) == 3", "assert most_frequent_element([5, 5, 5, 5, 5]) == 5", "assert most_frequent_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1"], "challenge_test_list": []}
{"text": "Write a python function to find the pair with maximum occurrences in a given list of tuples.", "code": "def most_frequent_pair(pairs):\n    max_count = 0\n    result = pairs[0]\n    for pair in pairs:\n        count = pairs.count(pair)\n        if count > max_count:\n            max_count = count\n            result = pair\n    return result", "task_id": "362_11c34d48-3cff-4e2f-8543-a97bef815d46", "test_setup_code": "", "test_list": ["assert most_frequent_pair([(1, 2), (3, 4), (1, 2), (5, 6), (1, 2)]) == (1, 2)", "assert most_frequent_pair([(7, 8), (7, 8), (9, 10), (9, 10), (7, 8)]) == (7, 8)", "assert most_frequent_pair([(11, 12)]) == (11, 12)", "assert most_frequent_pair([(13, 14), (15, 16), (17, 18), (13, 14), (15, 16), (13, 14)]) == (13, 14)"], "challenge_test_list": []}
{"text": "Write a python function to find the item with maximum occurrences in a given list of any type.", "code": "def most_frequent_item(items):\n    max_count = 0\n    result = items[0]\n    for item in items:\n        count = items.count(item)\n        if count > max_count:\n            max_count = count\n            result = item\n    return result", "task_id": "362_05998946-eaa7-4805-937e-3bb7214ab2d9", "test_setup_code": "", "test_list": ["assert most_frequent_item([1, 2, 2, 3, 3, 3, 4]) == 3", "assert most_frequent_item(['a', 'b', 'b', 'c', 'a', 'a']) == 'a'", "assert most_frequent_item([True, False, True, True, False]) == True", "assert most_frequent_item([None, None, 'test', 'test', 'test']) == 'test'"], "challenge_test_list": []}
{"text": "Write a python function to find the digit with maximum occurrences in a given integer.", "code": "def most_frequent_digit(n):\n    digits = str(n)\n    max_count = 0\n    result = digits[0]\n    for digit in digits:\n        count = digits.count(digit)\n        if count > max_count:\n            max_count = count\n            result = digit\n    return int(result)", "task_id": "362_71cc35bc-d760-4eb4-b3b5-b391542fd2ed", "test_setup_code": "", "test_list": ["assert most_frequent_digit(1122334455) == 1", "assert most_frequent_digit(9876543210) == 9", "assert most_frequent_digit(111222333444555) == 1", "assert most_frequent_digit(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the substring with maximum occurrences in a given string of a specified length.", "code": "def most_frequent_substring(s, length):\n    max_count = 0\n    result = s[:length]\n    for i in range(len(s) - length + 1):\n        substring = s[i:i+length]\n        count = s.count(substring)\n        if count > max_count:\n            max_count = count\n            result = substring\n    return result", "task_id": "362_fa5f29be-71b2-4062-ab14-3422d37b8726", "test_setup_code": "", "test_list": ["assert most_frequent_substring('ababab', 2) == 'ab'", "assert most_frequent_substring('abcabcabc', 3) == 'abc'", "assert most_frequent_substring('aaaaa', 1) == 'a'", "assert most_frequent_substring('abcdefgh', 2) == 'ab'"], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with its first occurrence index.", "code": "def most_frequent_element_with_index(nums):\n    max_count = 0\n    result = nums[0]\n    index = 0\n    for i, num in enumerate(nums):\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n            index = i\n    return (result, index)", "task_id": "362_bc3f9da7-4af2-4d96-b087-f010ff2c0abc", "test_setup_code": "", "test_list": ["assert most_frequent_element_with_index([1, 2, 3, 2, 4, 2, 5]) == (2, 1)", "assert most_frequent_element_with_index([5, 5, 5, 2, 2, 3, 4]) == (5, 0)", "assert most_frequent_element_with_index([1, 1, 2, 2, 3, 3]) == (1, 0)", "assert most_frequent_element_with_index([7]) == (7, 0)"], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with its count.", "code": "def most_frequent_element_with_count(nums):\n    max_count = 0\n    result = nums[0]\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    return (result, max_count)", "task_id": "362_16caa5fe-cb3d-4d1b-b6ae-fe1cc702679c", "test_setup_code": "", "test_list": ["assert most_frequent_element_with_count([1, 3, 2, 3, 4, 3, 5]) == (3, 3)", "assert most_frequent_element_with_count([10, 20, 10, 30, 10, 40, 50, 10]) == (10, 4)", "assert most_frequent_element_with_count([1, 2, 3, 4, 5]) == (1, 1)", "assert most_frequent_element_with_count([5, 5, 5, 5, 5]) == (5, 5)"], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with all its occurrence indices.", "code": "def most_frequent_element_with_indices(nums):\n    max_count = 0\n    result = nums[0]\n    indices = []\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    indices = [i for i, x in enumerate(nums) if x == result]\n    return (result, indices)", "task_id": "362_bcd974e2-3b41-4268-8e4e-350910026622", "test_setup_code": "", "test_list": ["assert most_frequent_element_with_indices([1, 3, 2, 3, 4, 3, 5]) == (3, [1, 3, 5])", "assert most_frequent_element_with_indices([4, 4, 4, 4, 4]) == (4, [0, 1, 2, 3, 4])", "assert most_frequent_element_with_indices([1, 2, 3, 4, 5]) == (1, [0])", "assert most_frequent_element_with_indices([1, 1, 2, 2, 3, 3]) == (1, [0, 1])"], "challenge_test_list": []}
{"text": "Write a function to multiply the k elements to each element in the tuple.", "code": "def multiply_K_element(test_list, K):\n  res = [tuple(j * K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_db762dbe-2b02-44c4-9dfd-07771b818d85", "test_setup_code": "", "test_list": ["assert multiply_K_element([(1, 2), (3, 4)], 2) == [(2, 4), (6, 8)]", "assert multiply_K_element([(0, 0), (0, 0)], 5) == [(0, 0), (0, 0)]", "assert multiply_K_element([(1, -1), (-2, 2)], -3) == [(-3, 3), (6, -6)]", "assert multiply_K_element([(100, 200), (300, 400)], 0) == [(0, 0), (0, 0)]"], "challenge_test_list": []}
{"text": "Write a function to subtract the k elements from each element in the tuple.", "code": "def subtract_K_element(test_list, K):\n  res = [tuple(j - K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_db9c2593-e208-4ba9-8c52-8c9a756a5900", "test_setup_code": "", "test_list": ["assert subtract_K_element([(10, 20, 30), (40, 50, 60)], 5) == [(5, 15, 25), (35, 45, 55)]", "assert subtract_K_element([(1, 2, 3), (4, 5, 6)], 2) == [(-1, 0, 1), (2, 3, 4)]", "assert subtract_K_element([(0, 0, 0), (0, 0, 0)], 0) == [(0, 0, 0), (0, 0, 0)]", "assert subtract_K_element([(-5, -10, -15), (-20, -25, -30)], -5) == [(0, -5, -10), (-15, -20, -25)]"], "challenge_test_list": []}
{"text": "Write a function to divide each element in the tuple by k.", "code": "def divide_K_element(test_list, K):\n  res = [tuple(j / K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_3ed1ec0b-3265-44be-b082-25e3091f3372", "test_setup_code": "", "test_list": ["assert divide_K_element([(10, 20), (30, 40)], 10) == [(1.0, 2.0), (3.0, 4.0)]", "assert divide_K_element([(0, 0), (0, 0)], 1) == [(0.0, 0.0), (0.0, 0.0)]", "assert divide_K_element([(5, 15), (25, 35)], 5) == [(1.0, 3.0), (5.0, 7.0)]", "assert divide_K_element([(1, 2), (3, 4)], 2) == [(0.5, 1.0), (1.5, 2.0)]"], "challenge_test_list": []}
{"text": "Write a function to raise each element in the tuple to the power of k.", "code": "def power_K_element(test_list, K):\n  res = [tuple(j ** K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_dd1959e8-665e-42bd-96be-abf17ee525e8", "test_setup_code": "", "test_list": ["assert power_K_element([(1, 2), (3, 4)], 2) == [(1, 4), (9, 16)]", "assert power_K_element([(0, -1), (-2, 3)], 3) == [(0, -1), (-8, 27)]", "assert power_K_element([(5,)], 0) == [(1,)]", "assert power_K_element([(2, 3, 4), (0, 1, -1)], 1) == [(2, 3, 4), (0, 1, -1)]"], "challenge_test_list": []}
{"text": "Write a function to take the modulus of each element in the tuple with k.", "code": "def mod_K_element(test_list, K):\n  res = [tuple(j % K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_06a0f641-7f04-4edf-83f2-3bcb2297786e", "test_setup_code": "", "test_list": ["assert mod_K_element([(10, 20, 30), (40, 50, 60)], 10) == [(0, 0, 0), (0, 0, 0)]", "assert mod_K_element([(1, 2, 3), (4, 5, 6)], 2) == [(1, 0, 1), (0, 1, 0)]", "assert mod_K_element([(0, 0, 0), (0, 0, 0)], 5) == [(0, 0, 0), (0, 0, 0)]", "assert mod_K_element([(7, 14, 21), (28, 35, 42)], 7) == [(0, 0, 0), (0, 0, 0)]"], "challenge_test_list": []}
{"text": "Write a function to add k to the first element in each tuple.", "code": "def add_K_to_first_element(test_list, K):\n  res = [tuple((sub[0] + K,) + sub[1:]) for sub in test_list]\n  return res", "task_id": "363_46f74264-8e6f-4737-9c6d-563f751aab1b", "test_setup_code": "", "test_list": ["assert add_K_to_first_element([(1, 2), (3, 4), (5, 6)], 2) == [(3, 2), (5, 4), (7, 6)]", "assert add_K_to_first_element([(0, 0), (0, 0)], 5) == [(5, 0), (5, 0)]", "assert add_K_to_first_element([(-1, -2), (-3, -4)], -3) == [(-4, -2), (-6, -4)]", "assert add_K_to_first_element([(1000000, 2)], 1) == [(1000001, 2)]"], "challenge_test_list": []}
{"text": "Write a function to multiply k to the last element in each tuple.", "code": "def multiply_K_to_last_element(test_list, K):\n  res = [tuple(sub[:-1] + (sub[-1] * K,)) for sub in test_list]\n  return res", "task_id": "363_c10b5550-965e-4e5f-9e89-5fb68d2051fb", "test_setup_code": "", "test_list": ["assert multiply_K_to_last_element([(1, 2, 3), (4, 5, 6)], 2) == [(1, 2, 6), (4, 5, 12)]", "assert multiply_K_to_last_element([(0, 0), (1, 1)], 5) == [(0, 0), (1, 5)]", "assert multiply_K_to_last_element([(1,)], 3) == [(3,)]", "assert multiply_K_to_last_element([(1, 2, 3), (4, 5, 6)], 0) == [(1, 2, 0), (4, 5, 0)]"], "challenge_test_list": []}
{"text": "Write a function to add k to each even element in the tuple.", "code": "def add_K_to_even_elements(test_list, K):\n  res = [tuple(j + K if j % 2 == 0 else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_929a169f-398d-4960-b16f-603974bfaa26", "test_setup_code": "", "test_list": ["assert add_K_to_even_elements([(2, 3, 4), (6, 7, 8)], 2) == [(4, 3, 6), (8, 7, 10)]", "assert add_K_to_even_elements([(1, 3, 5), (7, 9, 11)], 5) == [(1, 3, 5), (7, 9, 11)]", "assert add_K_to_even_elements([(0, 2, 4), (6, 8, 10)], -2) == [(-2, 0, 2), (4, 6, 8)]", "assert add_K_to_even_elements([(2, 2, 2), (2, 2, 2)], 0) == [(2, 2, 2), (2, 2, 2)]"], "challenge_test_list": []}
{"text": "Write a function to subtract k from each odd element in the tuple.", "code": "def subtract_K_from_odd_elements(test_list, K):\n  res = [tuple(j - K if j % 2 != 0 else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_90643c6d-6586-421e-8e4f-5a03ea91d45d", "test_setup_code": "", "test_list": ["assert subtract_K_from_odd_elements([(1, 2, 3), (4, 5, 6)], 1) == [(0, 2, 2), (4, 4, 6)]", "assert subtract_K_from_odd_elements([(7, 8, 9), (10, 11, 12)], 2) == [(5, 8, 7), (10, 9, 12)]", "assert subtract_K_from_odd_elements([(13, 14, 15)], 3) == [(10, 14, 12)]", "assert subtract_K_from_odd_elements([(0, 1, 2), (3, 4, 5)], 0) == [(0, 1, 2), (3, 4, 5)]"], "challenge_test_list": []}
{"text": "Write a function to add k to each element in the tuple that is greater than N.", "code": "def add_K_to_elements_greater_than_N(test_list, K, N):\n  res = [tuple(j + K if j > N else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_1a640db4-4aac-49bd-8240-0e469e82a51a", "test_setup_code": "", "test_list": ["assert add_K_to_elements_greater_than_N([(1, 2, 3), (4, 5, 6)], 2, 3) == [(1, 2, 5), (6, 7, 8)]", "assert add_K_to_elements_greater_than_N([(10, 20), (30, 40)], 5, 25) == [(10, 20), (35, 45)]", "assert add_K_to_elements_greater_than_N([(0, -1, -2), (-3, -4)], 3, -2) == [(3, -1, 1), (0, -1)]", "assert add_K_to_elements_greater_than_N([(100, 200, 300)], 10, 250) == [(100, 200, 310)]"], "challenge_test_list": []}
{"text": "Write a function to count the number of '1's in a given binary string.", "code": "def count_ones(s):\n    return s.count('1')", "task_id": "364_b7b8df16-2e2c-4f74-a694-9c7d01183b50", "test_setup_code": "", "test_list": ["assert count_ones('1101') == 3", "assert count_ones('0000') == 0", "assert count_ones('11111111') == 8", "assert count_ones('1010101010101010') == 8"], "challenge_test_list": []}
{"text": "Write a function to check if a given binary string is already a sequence of alternate characters.", "code": "def is_alternating(s):\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            return False\n    return True", "task_id": "364_a1b0b0a6-4668-49e9-8414-d9bbb3a7c562", "test_setup_code": "", "test_list": ["assert is_alternating('101010') == True", "assert is_alternating('111000') == False", "assert is_alternating('0') == True", "assert is_alternating('10') == True"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string the same.", "code": "def flip_count_to_make_all_same(s):\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    return min(count_0, count_1)", "task_id": "364_7cbbb6ca-7fd8-477b-ada2-5f3e8b42d3cf", "test_setup_code": "", "test_list": ["assert flip_count_to_make_all_same('000111') == 3", "assert flip_count_to_make_all_same('010101') == 3", "assert flip_count_to_make_all_same('1111') == 0", "assert flip_count_to_make_all_same('0') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest alternating substring in a given binary string.", "code": "def max_alternating_substring_length(s):\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len", "task_id": "364_f197d58a-1bfa-43d3-aa94-01170f03d79d", "test_setup_code": "", "test_list": ["assert max_alternating_substring_length('10101') == 5", "assert max_alternating_substring_length('1100110') == 2", "assert max_alternating_substring_length('111000') == 2", "assert max_alternating_substring_length('0') == 1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make a given binary string a palindrome.", "code": "def count_flips_to_make_palindrome(s):\n    n = len(s)\n    flips = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            flips += 1\n    return flips", "task_id": "364_87ed9fcd-2d7d-4372-b5c6-730ef33c6db4", "test_setup_code": "", "test_list": ["assert count_flips_to_make_palindrome('010') == 1", "assert count_flips_to_make_palindrome('0110') == 1", "assert count_flips_to_make_palindrome('11011') == 0", "assert count_flips_to_make_palindrome('1001') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring of '1's in a given binary string.", "code": "def longest_ones_substring(s):\n    max_len = 0\n    current_len = 0\n    for ch in s:\n        if ch == '1':\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len", "task_id": "364_83cefff4-7dd4-4069-823a-16aa11b1c52d", "test_setup_code": "", "test_list": ["assert longest_ones_substring('11011101111') == 4", "assert longest_ones_substring('0000000') == 0", "assert longest_ones_substring('1111111') == 7", "assert longest_ones_substring('1010101010101') == 1"], "challenge_test_list": []}
{"text": "Write a function to find the number of flips required to make the prefix of a given binary string a sequence of alternate characters.", "code": "def flip_count_to_make_prefix_alternate(s):\n    def make_flip(ch):\n        return '1' if ch == '0' else '0'\n    def get_flip_with_starting_char(s, expected):\n        flip_count = 0\n        for i in range(len(s)):\n            if s[i] != expected:\n                flip_count += 1\n            expected = make_flip(expected)\n        return flip_count\n    return min(get_flip_with_starting_char(s, '0'), get_flip_with_starting_char(s, '1'))", "task_id": "364_b0e9bc60-4273-4f3d-a145-9d6de343991a", "test_setup_code": "", "test_list": ["assert flip_count_to_make_prefix_alternate('010101') == 0", "assert flip_count_to_make_prefix_alternate('111000') == 3", "assert flip_count_to_make_prefix_alternate('0000') == 2", "assert flip_count_to_make_prefix_alternate('1010101010') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of flips required to make the suffix of a given binary string a sequence of alternate characters.", "code": "def count_flips_to_make_suffix_alternate(s):\n    def make_flip(ch):\n        return '1' if ch == '0' else '0'\n    def get_flip_with_starting_char(s, expected):\n        flip_count = 0\n        for i in range(len(s)-1, -1, -1):\n            if s[i] != expected:\n                flip_count += 1\n            expected = make_flip(expected)\n        return flip_count\n    return min(get_flip_with_starting_char(s, '0'), get_flip_with_starting_char(s, '1'))", "task_id": "364_7f3f9583-da9a-4039-beba-deb29a01826f", "test_setup_code": "", "test_list": ["assert count_flips_to_make_suffix_alternate('010101') == 0", "assert count_flips_to_make_suffix_alternate('111000') == 3", "assert count_flips_to_make_suffix_alternate('000000') == 3", "assert count_flips_to_make_suffix_alternate('1') == 0"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string '0'.", "code": "def flip_count_to_make_all_zeros(s):\n    return s.count('1')", "task_id": "364_2b4ee094-baf6-435a-a6ff-9079bb5ad38b", "test_setup_code": "", "test_list": ["assert flip_count_to_make_all_zeros('1100') == 2", "assert flip_count_to_make_all_zeros('0000') == 0", "assert flip_count_to_make_all_zeros('1111') == 4", "assert flip_count_to_make_all_zeros('101010') == 3"], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string '1'.", "code": "def flip_count_to_make_all_ones(s):\n    return s.count('0')", "task_id": "364_bc995416-6aa8-4f23-9a1f-b7529450e71f", "test_setup_code": "", "test_list": ["assert flip_count_to_make_all_ones('0000') == 4", "assert flip_count_to_make_all_ones('1111') == 0", "assert flip_count_to_make_all_ones('101010') == 3", "assert flip_count_to_make_all_ones('110011') == 2"], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return reversed_num", "task_id": "365_c4f32bdf-d3d7-4671-ab5d-5ebf2ec83343", "test_setup_code": "", "test_list": ["assert reverse_number(12345) == 54321", "assert reverse_number(1000) == 1", "assert reverse_number(0) == 0", "assert reverse_number(987654321) == 123456789"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n):\n    original = n\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num", "task_id": "365_419a5e85-4fcb-4352-b079-40fa8909500d", "test_setup_code": "", "test_list": ["assert is_palindrome(121) == True", "assert is_palindrome(123) == False", "assert is_palindrome(0) == True", "assert is_palindrome(12321) == True"], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the digits of a given number.", "code": "def product_of_digits(n):\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product", "task_id": "365_a5bdb144-5b72-448c-b86c-2856e47f41cd", "test_setup_code": "", "test_list": ["assert product_of_digits(123) == 6", "assert product_of_digits(0) == 0", "assert product_of_digits(1111) == 1", "assert product_of_digits(9876) == 3024"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even digits in a given number.", "code": "def count_even_digits(n):\n    count = 0\n    while n > 0:\n        if (n % 10) % 2 == 0:\n            count += 1\n        n //= 10\n    return count", "task_id": "365_86cfee59-88f0-4ddb-a491-231ca82020b6", "test_setup_code": "", "test_list": ["assert count_even_digits(123456) == 3", "assert count_even_digits(24680) == 5", "assert count_even_digits(13579) == 0", "assert count_even_digits(0) == 1"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in a given number.", "code": "def count_odd_digits(n):\n    count = 0\n    while n > 0:\n        if (n % 10) % 2 != 0:\n            count += 1\n        n //= 10\n    return count", "task_id": "365_7253122b-c3f6-48ab-9d27-16b4c23b58a7", "test_setup_code": "", "test_list": ["assert count_odd_digits(12345) == 3", "assert count_odd_digits(2468) == 0", "assert count_odd_digits(13579) == 5", "assert count_odd_digits(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is an Armstrong number.", "code": "def is_armstrong_number(n):\n    original = n\n    total = 0\n    num_digits = len(str(n))\n    while n > 0:\n        total += (n % 10) ** num_digits\n        n //= 10\n    return total == original", "task_id": "365_485bf73b-9590-40f1-93dc-6202e6107981", "test_setup_code": "", "test_list": ["assert is_armstrong_number(153) == True", "assert is_armstrong_number(370) == True", "assert is_armstrong_number(371) == True", "assert is_armstrong_number(123) == False"], "challenge_test_list": []}
{"text": "Write a python function to calculate the alternating sum of the digits of a given number.", "code": "def alternating_sum_of_digits(n):\n    total = 0\n    sign = 1\n    while n > 0:\n        total += sign * (n % 10)\n        n //= 10\n        sign *= -1\n    return total", "task_id": "365_79d88bb1-51e7-4d9d-a521-2a37033652f9", "test_setup_code": "", "test_list": ["assert alternating_sum_of_digits(1234) == -2", "assert alternating_sum_of_digits(0) == 0", "assert alternating_sum_of_digits(5) == 5", "assert alternating_sum_of_digits(987654321) == -5"], "challenge_test_list": []}
{"text": "Write a python function to find the largest sum of the pair of adjacent elements from a given list of integers.", "code": "def max_sum_adjacent(nums: List[int]) -> int:\n    return max(a + b for a, b in zip(nums, nums[1:]))", "task_id": "366_55b98d99-47c7-4fff-8f6c-b9af3da54c5c", "test_setup_code": "", "test_list": ["assert max_sum_adjacent([1, 2, 3, 4, 5]) == 9", "assert max_sum_adjacent([-1, -2, -3, -4]) == -3", "assert max_sum_adjacent([10, 20, 5, 30, 40]) == 70", "assert max_sum_adjacent([5, 5]) == 10"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest product of the pair of adjacent elements from a given list of integers.", "code": "def min_product_adjacent(nums: List[int]) -> int:\n    return min(a * b for a, b in zip(nums, nums[1:]))", "task_id": "366_96ded8d1-d894-4f95-a5b6-cbf5cb7e0afd", "test_setup_code": "", "test_list": ["assert min_product_adjacent([3, 6, -2, -5, 7, 3]) == -30", "assert min_product_adjacent([1, 2, 3, 0, -1, -2, -3]) == -6", "assert min_product_adjacent([5, 4, 3, 2, 1]) == 2", "assert min_product_adjacent([-1, -2, -3, -4, -5]) == -20"], "challenge_test_list": []}
{"text": "Write a python function to find the largest difference between the pair of adjacent elements from a given list of integers.", "code": "def max_diff_adjacent(nums: List[int]) -> int:\n    return max(abs(a - b) for a, b in zip(nums, nums[1:]))", "task_id": "366_19c2db84-75da-4874-9005-62b0c61c7929", "test_setup_code": "", "test_list": ["assert max_diff_adjacent([1, 3, 6, 9, 2]) == 7", "assert max_diff_adjacent([10, 15, 20, 25, 30]) == 5", "assert max_diff_adjacent([5, 5, 5, 5, 5]) == 0", "assert max_diff_adjacent([100, 50, 200, 150, 300]) == 150"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest sum of the pair of adjacent elements from a given list of integers.", "code": "def min_sum_adjacent(nums: List[int]) -> int:\n    return min(a + b for a, b in zip(nums, nums[1:]))", "task_id": "366_07b394e3-1d17-4899-b66c-12834bdb63c7", "test_setup_code": "", "test_list": ["assert min_sum_adjacent([1, 2, 3, 4, 5]) == 3", "assert min_sum_adjacent([10, 20, 30, 40, 50]) == 30", "assert min_sum_adjacent([-1, -2, -3, -4, -5]) == -9", "assert min_sum_adjacent([100, 200, 300, 400, 500]) == 300"], "challenge_test_list": []}
{"text": "Write a python function to find the largest sum of the pair of non-adjacent elements from a given list of integers.", "code": "def max_sum_non_adjacent(nums: List[int]) -> int:\n    return max(nums[i] + nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_78e7df52-3cb0-4665-9cae-ffaf73136053", "test_setup_code": "", "test_list": ["assert max_sum_non_adjacent([3, 2, 5, 10, 7]) == 15", "assert max_sum_non_adjacent([5, 1, 1, 5]) == 10", "assert max_sum_non_adjacent([2, 4, 6, 2, 5]) == 11", "assert max_sum_non_adjacent([1, 2, 3, 4, 5, 6]) == 11"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest difference between the pair of adjacent elements from a given list of integers.", "code": "def min_diff_adjacent(nums: List[int]) -> int:\n    return min(abs(a - b) for a, b in zip(nums, nums[1:]))", "task_id": "366_c376a7c4-880e-42f8-a7ad-6b5e466c20a8", "test_setup_code": "", "test_list": ["assert min_diff_adjacent([1, 3, 6, 10, 15]) == 2", "assert min_diff_adjacent([-5, -2, -1, 0, 3, 7]) == 1", "assert min_diff_adjacent([10, 10, 10, 10]) == 0", "assert min_diff_adjacent([100, 50, 20, 10, 5, 1]) == 4"], "challenge_test_list": []}
{"text": "Write a python function to find the largest product of the pair of non-adjacent elements from a given list of integers.", "code": "def max_product_non_adjacent(nums: List[int]) -> int:\n    return max(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_caef74de-3d53-44de-9338-2598966c57b1", "test_setup_code": "", "test_list": ["assert max_product_non_adjacent([3, 6, 1, 9, 2]) == 18", "assert max_product_non_adjacent([5, 1, 1, 5]) == 25", "assert max_product_non_adjacent([1, 2, 3, 4, 5, 6]) == 30", "assert max_product_non_adjacent([1, -2, 3, -4, 5, -6]) == 12"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest sum of the pair of non-adjacent elements from a given list of integers.", "code": "def min_sum_non_adjacent(nums: List[int]) -> int:\n    return min(nums[i] + nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_857563e2-52ca-4af9-b7af-18293adddd18", "test_setup_code": "", "test_list": ["assert min_sum_non_adjacent([1, 2, 3, 4, 5]) == 3", "assert min_sum_non_adjacent([10, 5, 2, 7, 8, 7]) == 9", "assert min_sum_non_adjacent([-1, -2, -3, -4, -5]) == -6", "assert min_sum_non_adjacent([1, 2]) == float('inf')"], "challenge_test_list": []}
{"text": "Write a python function to find the smallest product of the pair of non-adjacent elements from a given list of integers.", "code": "def min_product_non_adjacent(nums: List[int]) -> int:\n    return min(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_bfd9f3b4-61f0-4c57-b0bb-764cc033ffd5", "test_setup_code": "", "test_list": ["assert min_product_non_adjacent([3, 1, 4, 1, 5, 9, 2, 6]) == 2", "assert min_product_non_adjacent([10, 20, 30, 40, 50]) == 200", "assert min_product_non_adjacent([-1, -2, -3, -4, -5]) == 4", "assert min_product_non_adjacent([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given list n times.", "code": "def repeat_list_elements(lst, n):\n    return [elem for elem in lst for _ in range(n)]", "task_id": "368_c687403d-89c8-42ef-8393-0431209c6069", "test_setup_code": "", "test_list": ["assert repeat_list_elements([1, 2, 3], 2) == [1, 1, 2, 2, 3, 3]", "assert repeat_list_elements(['a', 'b'], 3) == ['a', 'a', 'a', 'b', 'b', 'b']", "assert repeat_list_elements([], 5) == []", "assert repeat_list_elements([1, 2, 3], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to repeat the given string n times.", "code": "def repeat_string(s, n):\n    return s * n", "task_id": "368_7e5a599c-47c3-45cb-95fc-228538895789", "test_setup_code": "", "test_list": ["assert repeat_string('abc', 3) == 'abcabcabc'", "assert repeat_string('', 5) == ''", "assert repeat_string('a', 0) == ''", "assert repeat_string('xyz', 1) == 'xyz'"], "challenge_test_list": []}
{"text": "Write a function to repeat the keys of the given dictionary n times, with the same values.", "code": "def repeat_dict_keys(d, n):\n    return {k * n: v for k, v in d.items()}", "task_id": "368_d1bd0c29-c2b2-42a7-a237-944c422c30e9", "test_setup_code": "", "test_list": ["assert repeat_dict_keys({'a': 1, 'b': 2}, 2) == {'aa': 1, 'bb': 2}", "assert repeat_dict_keys({'key': 3, 'value': 4}, 3) == {'keykeykey': 3, 'valuevaluevalue': 4}", "assert repeat_dict_keys({}, 5) == {}", "assert repeat_dict_keys({'x': 0}, 1) == {'x': 0}"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given tuple n times.", "code": "def repeat_elements_in_tuple(t, n):\n    return tuple(elem for elem in t for _ in range(n))", "task_id": "368_0a0b32da-e2ab-42d2-b5ae-c4d609a3b833", "test_setup_code": "", "test_list": ["assert repeat_elements_in_tuple((1, 2, 3), 2) == (1, 1, 2, 2, 3, 3)", "assert repeat_elements_in_tuple(('a', 'b'), 3) == ('a', 'a', 'a', 'b', 'b', 'b')", "assert repeat_elements_in_tuple((), 5) == ()", "assert repeat_elements_in_tuple((1, 2, 3), 0) == ()"], "challenge_test_list": []}
{"text": "Write a function to repeat each tuple in the given list of tuples n times.", "code": "def repeat_list_of_tuples(lst, n):\n    return [tup for tup in lst for _ in range(n)]", "task_id": "368_5611f663-fb2a-4287-9169-78cad6344451", "test_setup_code": "", "test_list": ["assert repeat_list_of_tuples([(1, 2), (3, 4)], 2) == [(1, 2), (1, 2), (3, 4), (3, 4)]", "assert repeat_list_of_tuples([(5, 6)], 3) == [(5, 6), (5, 6), (5, 6)]", "assert repeat_list_of_tuples([], 4) == []", "assert repeat_list_of_tuples([(7, 8), (9, 10), (11, 12)], 1) == [(7, 8), (9, 10), (11, 12)]"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given set n times and return as a list.", "code": "def repeat_set_elements(s, n):\n    return [elem for elem in s for _ in range(n)]", "task_id": "368_38323e68-d1d8-4aec-9926-cfcdf0361d95", "test_setup_code": "", "test_list": ["assert repeat_set_elements({1, 2, 3}, 2) == [1, 1, 2, 2, 3, 3]", "assert repeat_set_elements({4, 5}, 3) == [4, 4, 4, 5, 5, 5]", "assert repeat_set_elements({7}, 1) == [7]", "assert repeat_set_elements(set(), 5) == []"], "challenge_test_list": []}
{"text": "Write a function to repeat each character in the given string n times.", "code": "def repeat_chars_in_string(s, n):\n    return ''.join([char * n for char in s])", "task_id": "368_d4d92b87-56e3-4b6d-992f-72e5fd2236e7", "test_setup_code": "", "test_list": ["assert repeat_chars_in_string('abc', 2) == 'aabbcc'", "assert repeat_chars_in_string('', 5) == ''", "assert repeat_chars_in_string('a', 0) == ''", "assert repeat_chars_in_string('xyz', 3) == 'xxxyyyzzz'"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given nested list n times.", "code": "def repeat_elements_in_nested_list(lst, n):\n    return [[elem for elem in sublist for _ in range(n)] for sublist in lst]", "task_id": "368_9c41e37d-a5ab-4c37-826d-e350499a668d", "test_setup_code": "", "test_list": ["assert repeat_elements_in_nested_list([[1, 2], [3, 4]], 2) == [[1, 1, 2, 2], [3, 3, 4, 4]]", "assert repeat_elements_in_nested_list([['a', 'b'], ['c']], 3) == [['a', 'a', 'a', 'b', 'b', 'b'], ['c', 'c', 'c']]", "assert repeat_elements_in_nested_list([[], [1, 2, 3]], 1) == [[], [1, 2, 3]]", "assert repeat_elements_in_nested_list([[5]], 0) == [[]]"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the values of the given dictionary n times.", "code": "def repeat_elements_in_dict_values(d, n):\n    return {k: [elem for elem in v for _ in range(n)] for k, v in d.items()}", "task_id": "368_36ec64c8-8b05-45ce-aa56-c95cbbc264b2", "test_setup_code": "", "test_list": ["assert repeat_elements_in_dict_values({'a': [1, 2], 'b': [3]}, 2) == {'a': [1, 1, 2, 2], 'b': [3, 3]}", "assert repeat_elements_in_dict_values({'x': [], 'y': [4, 5]}, 3) == {'x': [], 'y': [4, 4, 4, 5, 5, 5]}", "assert repeat_elements_in_dict_values({'key': [7, 8, 9]}, 1) == {'key': [7, 8, 9]}", "assert repeat_elements_in_dict_values({}, 5) == {}"], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given list of lists n times.", "code": "def repeat_elements_in_list_of_lists(lst, n):\n    return [[elem for elem in sublist for _ in range(n)] for sublist in lst]", "task_id": "368_c0654e1d-b0d7-459f-ba3e-064f38b28e36", "test_setup_code": "", "test_list": ["assert repeat_elements_in_list_of_lists([[1, 2], [3, 4]], 2) == [[1, 1, 2, 2], [3, 3, 4, 4]]", "assert repeat_elements_in_list_of_lists([[], [5, 6]], 3) == [[], [5, 5, 5, 6, 6, 6]]", "assert repeat_elements_in_list_of_lists([[7, 8, 9]], 1) == [[7, 8, 9]]", "assert repeat_elements_in_list_of_lists([[10], [11, 12]], 0) == [[], []]"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume", "task_id": "369_c129875c-dd5f-4d27-9300-e500c1d38760", "test_setup_code": "", "test_list": ["assert volume_cuboid(2, 3, 4) == 24", "assert volume_cuboid(1, 1, 1) == 1", "assert volume_cuboid(0, 5, 10) == 0", "assert volume_cuboid(7.5, 3.2, 2.1) == 50.4"], "challenge_test_list": []}
{"text": "Write a function to find the total surface area of a cuboid.", "code": "def surface_area_cuboid(l, w, h):\n    surface_area = 2 * (l * w + l * h + w * h)\n    return surface_area", "task_id": "369_1179f293-4b01-434c-8a1f-ff2ede497c6f", "test_setup_code": "", "test_list": ["assert surface_area_cuboid(1, 1, 1) == 6", "assert surface_area_cuboid(2, 3, 4) == 52", "assert surface_area_cuboid(0, 5, 7) == 0", "assert surface_area_cuboid(10, 10, 10) == 600"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n    perimeter = 2 * (l + w)\n    return perimeter", "task_id": "369_cf28797f-cb3f-4d5d-b362-dcbb3df20330", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(123, 456) == 1158"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(l, w):\n    area = l * w\n    return area", "task_id": "369_5f65eb86-e568-4bba-96a8-1483a95e92c5", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 3) == 15", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(7, 7) == 49", "assert area_rectangle(100, 200) == 20000"], "challenge_test_list": []}
{"text": "Write a function to find the length of the diagonal of a rectangle.", "code": "def diagonal_rectangle(l, w):\n    diagonal = (l**2 + w**2) ** 0.5\n    return diagonal", "task_id": "369_3cf09944-8bca-4f87-9bad-015fb0d49c81", "test_setup_code": "", "test_list": ["assert diagonal_rectangle(3, 4) == 5.0", "assert diagonal_rectangle(5, 12) == 13.0", "assert diagonal_rectangle(0, 0) == 0.0", "assert diagonal_rectangle(1, 1) == 2**0.5"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r, h):\n    volume = 3.14159 * r**2 * h\n    return volume", "task_id": "369_2d91d087-395a-4920-9243-8eda6b530c35", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.14159", "assert volume_cylinder(0, 10) == 0.0", "assert volume_cylinder(5, 0) == 0.0", "assert volume_cylinder(2.5, 4.2) == 82.4662125"], "challenge_test_list": []}
{"text": "Write a function to find the total surface area of a cylinder.", "code": "def surface_area_cylinder(r, h):\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area", "task_id": "369_0e78ed00-b759-418f-945f-cd74dcf67a49", "test_setup_code": "", "test_list": ["assert surface_area_cylinder(1, 1) == 12.56636", "assert surface_area_cylinder(0, 5) == 0.0", "assert surface_area_cylinder(2, 3) == 62.8318", "assert surface_area_cylinder(5, 0) == 157.0795"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n    volume = 4/3 * 3.14159 * r**3\n    return volume", "task_id": "369_6fd583e2-0bf5-4672-88af-df02afb582ce", "test_setup_code": "", "test_list": ["assert round(volume_sphere(1), 5) == 4.18879", "assert round(volume_sphere(0), 5) == 0.0", "assert round(volume_sphere(2.5), 5) == 65.44985", "assert round(volume_sphere(0.1), 5) == 0.00419"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r):\n    surface_area = 4 * 3.14159 * r**2\n    return surface_area", "task_id": "369_2ca75390-3573-4555-bd5e-819feaab880d", "test_setup_code": "", "test_list": ["assert surface_area_sphere(1) == 12.56636", "assert surface_area_sphere(0) == 0.0", "assert surface_area_sphere(2.5) == 78.53975", "assert surface_area_sphere(100) == 1256636.0"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(r, h):\n    volume = 1/3 * 3.14159 * r**2 * h\n    return volume", "task_id": "369_543738ea-39ff-49e4-8cca-07479fa05038", "test_setup_code": "", "test_list": ["assert volume_cone(3, 5) == 47.12385", "assert volume_cone(0, 10) == 0.0", "assert volume_cone(2.5, 7.1) == 46.6359375", "assert volume_cone(100, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their length.", "code": "def sort_by_length(strings):\n    return sorted(strings, key=len)", "task_id": "370_f78fe90c-4b55-48cc-838c-01c6e9f40412", "test_setup_code": "", "test_list": ["assert sort_by_length(['apple', 'banana', 'kiwi', 'pear']) == ['kiwi', 'pear', 'apple', 'banana']", "assert sort_by_length(['']) == ['']", "assert sort_by_length(['a', 'ab', 'abc', 'abcd', 'abcde']) == ['a', 'ab', 'abc', 'abcd', 'abcde']", "assert sort_by_length(['hello', 'world', 'python', 'is', 'awesome']) == ['is', 'hello', 'world', 'python', 'awesome']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their last character.", "code": "def sort_by_last_char(strings):\n    return sorted(strings, key=lambda x: x[-1])", "task_id": "370_1c137ba7-a2d0-42f5-827f-204b147022c1", "test_setup_code": "", "test_list": ["assert sort_by_last_char(['apple', 'banana', 'cherry', 'date']) == ['banana', 'apple', 'date', 'cherry']", "assert sort_by_last_char(['zebra', 'dog', 'cat', 'elephant']) == ['zebra', 'elephant', 'dog', 'cat']", "assert sort_by_last_char(['']) == ['']", "assert sort_by_last_char(['same', 'same', 'same']) == ['same', 'same', 'same']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by their absolute values.", "code": "def sort_by_abs_value(numbers):\n    return sorted(numbers, key=abs)", "task_id": "370_6cba7ab3-8cbb-43a9-993b-bef243e34675", "test_setup_code": "", "test_list": ["assert sort_by_abs_value([4, -1, -3, 2]) == [-1, 2, -3, 4]", "assert sort_by_abs_value([0, -5, 3, -2, 1]) == [0, 1, -2, 3, -5]", "assert sort_by_abs_value([-10, 10, -20, 20, 0]) == [0, 10, -10, 20, -20]", "assert sort_by_abs_value([]) == []"], "challenge_test_list": []}
{"text": "Write a function to sort a list of sentences by the number of words in each sentence.", "code": "def sort_by_word_count(sentences):\n    return sorted(sentences, key=lambda x: len(x.split()))", "task_id": "370_efd22e29-e65d-4401-ad95-9b401db77f3a", "test_setup_code": "", "test_list": ["assert sort_by_word_count(['This is a test', 'Short', 'A much longer sentence than the others']) == ['Short', 'This is a test', 'A much longer sentence than the others']", "assert sort_by_word_count(['One', 'Two words', 'Three words here']) == ['One', 'Two words', 'Three words here']", "assert sort_by_word_count(['Equal length', 'Same length']) == ['Equal length', 'Same length']", "assert sort_by_word_count(['', 'Single', 'Two words here', '']) == ['', '', 'Single', 'Two words here']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of vowels in each string.", "code": "def sort_by_vowel_count(strings):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return sorted(strings, key=count_vowels)", "task_id": "370_ef1d7d3e-d58f-47d2-83d6-24eaa2dc858c", "test_setup_code": "", "test_list": ["assert sort_by_vowel_count(['apple', 'banana', 'cherry', 'date']) == ['date', 'cherry', 'apple', 'banana']", "assert sort_by_vowel_count(['elephant', 'dog', 'cat', 'ant']) == ['dog', 'cat', 'ant', 'elephant']", "assert sort_by_vowel_count(['a', 'e', 'i', 'o', 'u']) == ['a', 'e', 'i', 'o', 'u']", "assert sort_by_vowel_count(['rhythm', 'myth', 'fly', 'try']) == ['rhythm', 'myth', 'fly', 'try']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by the sum of their digits.", "code": "def sort_by_digit_sum(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return sorted(numbers, key=digit_sum)", "task_id": "370_a0deef31-6ec8-44ec-afd4-a5c7eab4ee8e", "test_setup_code": "", "test_list": ["assert sort_by_digit_sum([10, 2, 38, 23, 38, 23, 21]) == [10, 2, 21, 23, 23, 38, 38]", "assert sort_by_digit_sum([5, 56, 901, 4321, 1234, 10000]) == [1, 10000, 5, 56, 1234, 4321, 901]", "assert sort_by_digit_sum([]) == []", "assert sort_by_digit_sum([999, 1001, 22, 13, 4]) == [4, 13, 22, 999, 1001]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of unique characters in each string.", "code": "def sort_by_unique_chars(strings):\n    return sorted(strings, key=lambda x: len(set(x)))", "task_id": "370_e9a02ff1-f9c4-46a5-8f15-e51cdc5d8d38", "test_setup_code": "", "test_list": ["assert sort_by_unique_chars(['apple', 'banana', 'cherry']) == ['banana', 'apple', 'cherry']", "assert sort_by_unique_chars(['a', 'bb', 'ccc', 'dddd']) == ['a', 'bb', 'ccc', 'dddd']", "assert sort_by_unique_chars(['abc', 'def', 'ghi', 'jkl']) == ['abc', 'def', 'ghi', 'jkl']", "assert sort_by_unique_chars(['', 'a', 'aa', 'aaa']) == ['', 'a', 'aa', 'aaa']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of full names by the first name.", "code": "def sort_by_first_name(names):\n    return sorted(names, key=lambda x: x.split()[0])", "task_id": "370_b9b4a9f9-de03-4f04-9465-aa6373a74f76", "test_setup_code": "", "test_list": ["assert sort_by_first_name(['John Doe', 'Jane Smith', 'Alice Johnson']) == ['Alice Johnson', 'Jane Smith', 'John Doe']", "assert sort_by_first_name(['Zara Ali', 'Mona Lisa', 'John Doe']) == ['John Doe', 'Mona Lisa', 'Zara Ali']", "assert sort_by_first_name(['Anna Marie', 'Anna Bella', 'Anna Zane']) == ['Anna Bella', 'Anna Marie', 'Anna Zane']", "assert sort_by_first_name(['']) == ['']"], "challenge_test_list": []}
{"text": "Write a function to sort a list of full names by the last name.", "code": "def sort_by_last_name(names):\n    return sorted(names, key=lambda x: x.split()[-1])", "task_id": "370_63bb38ba-06da-4b89-ab2e-ff7be7bcf0e4", "test_setup_code": "", "test_list": ["assert sort_by_last_name(['John Doe', 'Jane Smith', 'Alice Johnson']) == ['John Doe', 'Alice Johnson', 'Jane Smith']", "assert sort_by_last_name(['Anna Marie', 'John Smith', 'Jane Doe', 'Alice Johnson']) == ['Jane Doe', 'Alice Johnson', 'Anna Marie', 'John Smith']", "assert sort_by_last_name(['John']) == ['John']", "assert sort_by_last_name(['John Doe', 'Jane Doe', 'Alice Doe']) == ['John Doe', 'Jane Doe', 'Alice Doe']"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is symmetric (a mirror of itself).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_mirror(left, right):\n\tif left is None and right is None:\n\t\treturn True\n\tif left is None or right is None:\n\t\treturn False\n\treturn left.data == right.data and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)\n\ndef is_tree_symmetric(root):\n\tif root is None:\n\t\treturn True\n\treturn is_mirror(root.left, root.right)", "task_id": "367_e016de04-a514-4346-9d21-90bb937ee392", "test_setup_code": "", "test_list": ["assert is_tree_symmetric(None) == True", "assert is_tree_symmetric(Node(1)) == True", "assert is_tree_symmetric(Node(1, Node(2), Node(2))) == True", "assert is_tree_symmetric(Node(1, Node(2, Node(3), Node(4)), Node(2, Node(4), Node(3)))) == True", "assert is_tree_symmetric(Node(1, Node(2, Node(3), None), Node(2, None, Node(3)))) == True", "assert is_tree_symmetric(Node(1, Node(2, Node(3), Node(4)), Node(2, Node(3), Node(4)))) == False", "assert is_tree_symmetric(Node(1, Node(2, Node(3), Node(4)), Node(2, Node(4), Node(5)))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a full binary tree (every node has either 0 or 2 children).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_full(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is None and root.right is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn is_tree_full(root.left) and is_tree_full(root.right)\n\treturn False", "task_id": "367_1b72440d-6394-42f5-9375-1c2ff642c495", "test_setup_code": "", "test_list": ["assert is_tree_full(None) == True", "assert is_tree_full(Node(1)) == True", "assert is_tree_full(Node(1, Node(2), Node(3))) == True", "assert is_tree_full(Node(1, Node(2), None)) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a complete binary tree (all levels are completely filled except possibly the last level and the last level has all keys as left as possible).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_complete(root):\n\tif root is None:\n\t\treturn True\n\tqueue = [root]\n\tend = False\n\twhile queue:\n\t\tnode = queue.pop(0)\n\t\tif node is None:\n\t\t\tend = True\n\t\telse:\n\t\t\tif end:\n\t\t\t\treturn False\n\t\t\tqueue.append(node.left)\n\t\t\tqueue.append(node.right)\n\treturn True", "task_id": "367_7448df28-4e8c-4d7c-92ed-c0736937fd4b", "test_setup_code": "", "test_list": ["assert is_tree_complete(Node(1)) == True", "assert is_tree_complete(None) == True", "assert is_tree_complete(Node(1, Node(2), Node(3))) == True", "assert is_tree_complete(Node(1, Node(2, Node(4), Node(5)), Node(3, None, Node(6)))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a perfect binary tree (all internal nodes have two children and all leaves are at the same level).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef depth(node):\n\td = 0\n\twhile node is not None:\n\t\tnode = node.left\n\t\td += 1\n\treturn d\n\ndef is_perfect(root, d, level=0):\n\tif root is None:\n\t\treturn True\n\tif root.left is None and root.right is None:\n\t\treturn d == level + 1\n\tif root.left is None or root.right is None:\n\t\treturn False\n\treturn is_perfect(root.left, d, level + 1) and is_perfect(root.right, d, level + 1)\n\ndef is_tree_perfect(root):\n\td = depth(root)\n\treturn is_perfect(root, d)", "task_id": "367_f4fa45ce-34f0-4eb6-b9c0-a75cc24af1cd", "test_setup_code": "", "test_list": ["assert is_tree_perfect(Node(1)) == True", "assert is_tree_perfect(None) == True", "assert is_tree_perfect(Node(1, Node(2), Node(3))) == True", "assert is_tree_perfect(Node(1, Node(2, Node(4)), Node(3))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is height-balanced (the height difference between left and right subtrees for every node is not more than 1).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef height_and_balance(root):\n\tif root is None:\n\t\treturn 0, True\n\tleft_height, left_balanced = height_and_balance(root.left)\n\tright_height, right_balanced = height_and_balance(root.right)\n\theight = max(left_height, right_height) + 1\n\tbalanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1\n\treturn height, balanced\n\ndef is_tree_height_balanced(root):\n\t_, balanced = height_and_balance(root)\n\treturn balanced", "task_id": "367_fa7610ea-3cfc-4468-9674-0a620b07276d", "test_setup_code": "", "test_list": ["assert is_tree_height_balanced(None) == True", "assert is_tree_height_balanced(Node(1)) == True", "assert is_tree_height_balanced(Node(1, Node(2), Node(3))) == True", "assert is_tree_height_balanced(Node(1, Node(2, Node(4, Node(5))), Node(3))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a degenerate (or pathological) tree (each parent node has only one child).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_degenerate(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn False\n\tif root.left is not None:\n\t\treturn is_tree_degenerate(root.left)\n\tif root.right is not None:\n\t\treturn is_tree_degenerate(root.right)\n\treturn True", "task_id": "367_6d75ecd6-e591-4ce2-901b-fc5ab1a82c5e", "test_setup_code": "", "test_list": ["assert is_tree_degenerate(None) == True", "assert is_tree_degenerate(Node(1)) == True", "assert is_tree_degenerate(Node(1, Node(2), None)) == True", "assert is_tree_degenerate(Node(1, Node(2, Node(3), None), None)) == True", "assert is_tree_degenerate(Node(1, Node(2, Node(3), Node(4)), None)) == False", "assert is_tree_degenerate(Node(1, None, Node(2, None, Node(3)))) == True", "assert is_tree_degenerate(Node(1, Node(2), Node(3))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a skewed tree (all nodes are either to the left or to the right).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_skewed(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn False\n\tif root.left is not None:\n\t\treturn is_tree_skewed(root.left)\n\tif root.right is not None:\n\t\treturn is_tree_skewed(root.right)\n\treturn True", "task_id": "367_d650b0b6-92c3-4e2f-8d0c-424fb52215e6", "test_setup_code": "", "test_list": ["assert is_tree_skewed(None) == True", "assert is_tree_skewed(Node(1)) == True", "assert is_tree_skewed(Node(1, Node(2), None)) == True", "assert is_tree_skewed(Node(1, Node(2, Node(3)), None)) == True", "assert is_tree_skewed(Node(1, Node(2, None, Node(3)), None)) == False", "assert is_tree_skewed(Node(1, Node(2), Node(3))) == False", "assert is_tree_skewed(Node(1, None, Node(2, None, Node(3)))) == True", "assert is_tree_skewed(Node(1, None, Node(2, Node(3), None))) == False"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a subtree of another binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_same_tree(s, t):\n\tif s is None and t is None:\n\t\treturn True\n\tif s is None or t is None:\n\t\treturn False\n\treturn s.data == t.data and is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right)\n\ndef is_tree_subtree(s, t):\n\tif t is None:\n\t\treturn True\n\tif s is None:\n\t\treturn False\n\tif is_same_tree(s, t):\n\t\treturn True\n\treturn is_tree_subtree(s.left, t) or is_tree_subtree(s.right, t)", "task_id": "367_503d1300-d13b-447f-98dc-a7854d94f9a3", "test_setup_code": "", "test_list": ["assert is_tree_subtree(Node(3, Node(4, Node(1), Node(2)), Node(5)), Node(4, Node(1), Node(2))) == True", "assert is_tree_subtree(Node(3, Node(4, Node(1), Node(2, Node(0))), Node(5)), Node(4, Node(1), Node(2))) == False", "assert is_tree_subtree(Node(1, Node(2), Node(3)), Node(1, Node(2), Node(3))) == True", "assert is_tree_subtree(Node(1, Node(2), Node(3)), Node(2)) == True"], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a binary search tree (BST).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_bst_util(root, left, right):\n\tif root is None:\n\t\treturn True\n\tif root.data <= left or root.data >= right:\n\t\treturn False\n\treturn is_bst_util(root.left, left, root.data) and is_bst_util(root.right, root.data, right)\n\ndef is_tree_bst(root):\n\treturn is_bst_util(root, float('-inf'), float('inf'))", "task_id": "367_64dae618-f844-4bce-afbd-cc0b491b0d22", "test_setup_code": "", "test_list": ["assert is_tree_bst(Node(10, Node(5), Node(15))) == True", "assert is_tree_bst(Node(10, Node(15), Node(5))) == False", "assert is_tree_bst(Node(10, Node(5, Node(2), Node(7)), Node(15, Node(12), Node(20)))) == True", "assert is_tree_bst(Node(10, Node(5, Node(2), Node(12)), Node(15, Node(12), Node(20)))) == False"], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length, width):\n  return length * width", "task_id": "373_6c7bcac6-ff9f-4279-aa04-04cd799e5e59", "test_setup_code": "", "test_list": ["assert area_rectangle(5, 10) == 50", "assert area_rectangle(0, 10) == 0", "assert area_rectangle(7, 3) == 21", "assert area_rectangle(100, 200) == 20000"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side):\n  return 4 * side", "task_id": "373_74ebc69a-df3b-46ca-862e-c708407d5cba", "test_setup_code": "", "test_list": ["assert perimeter_square(1) == 4", "assert perimeter_square(0) == 0", "assert perimeter_square(5) == 20", "assert perimeter_square(100) == 400"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\n\ndef volume_sphere(radius):\n  return (4/3) * math.pi * (radius ** 3)", "task_id": "373_d3ffb1a0-6ddd-434b-b23d-281af6c20c9f", "test_setup_code": "", "test_list": ["assert volume_sphere(1) == 4.1887902047863905", "assert volume_sphere(0) == 0.0", "assert volume_sphere(3.5) == 179.59438003021648", "assert volume_sphere(-2) == -33.510321638291124"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base, height):\n  return 0.5 * base * height", "task_id": "373_5cbc55b0-b9aa-4a8e-bed7-feece402d3fb", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 10) == 0.0", "assert area_triangle(7, 3) == 10.5", "assert area_triangle(100, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\n\ndef circumference_circle(radius):\n  return 2 * math.pi * radius", "task_id": "373_580cb599-38cb-473e-94d5-86a58b9a1e23", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 2 * math.pi", "assert circumference_circle(0) == 0", "assert circumference_circle(2.5) == 2 * math.pi * 2.5", "assert circumference_circle(-3) == -2 * math.pi * 3"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cuboid.", "code": "def surface_area_cuboid(length, width, height):\n  return 2 * (length * width + width * height + height * length)", "task_id": "373_5708545c-afc4-4766-88ee-7635ff9c9ca4", "test_setup_code": "", "test_list": ["assert surface_area_cuboid(1, 1, 1) == 6", "assert surface_area_cuboid(2, 3, 4) == 52", "assert surface_area_cuboid(0, 5, 7) == 0", "assert surface_area_cuboid(10, 20, 30) == 2200"], "challenge_test_list": []}
{"text": "Write a function to find the diagonal of a rectangle.", "code": "import math\n\ndef diagonal_rectangle(length, width):\n  return math.sqrt(length ** 2 + width ** 2)", "task_id": "373_7e0a6b55-ee69-4caf-a4bc-37ef45d97d9a", "test_setup_code": "", "test_list": ["assert diagonal_rectangle(3, 4) == 5.0", "assert diagonal_rectangle(5, 12) == 13.0", "assert diagonal_rectangle(1, 1) == math.sqrt(2)", "assert diagonal_rectangle(0, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(base, height):\n  return base * height", "task_id": "373_48b96569-15a6-439e-9cb2-b58ff84a5637", "test_setup_code": "", "test_list": ["assert area_parallelogram(5, 10) == 50", "assert area_parallelogram(0, 10) == 0", "assert area_parallelogram(7, 0) == 0", "assert area_parallelogram(3.5, 4.2) == 14.7"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\n\ndef volume_cylinder(radius, height):\n  return math.pi * (radius ** 2) * height", "task_id": "373_99a33b64-6cd6-41d9-b6d6-fe320fb74a2b", "test_setup_code": "", "test_list": ["assert volume_cylinder(1, 1) == 3.141592653589793", "assert volume_cylinder(0, 10) == 0.0", "assert volume_cylinder(2.5, 4) == 78.53981633974483", "assert volume_cylinder(3, 0) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length, width):\n  return 2 * (length + width)", "task_id": "373_4a1cd455-dd08-4310-8015-0de4fdd6a9b4", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(1, 1) == 4", "assert perimeter_rectangle(1000, 2000) == 6000"], "challenge_test_list": []}
{"text": "Write a function to sort a given list of elements in descending order using heap queue algorithm.", "code": "import heapq as hq\n\ndef sort_descending(nums):\n    nums = [-num for num in nums]\n    hq.heapify(nums)\n    s_result = [-hq.heappop(nums) for i in range(len(nums))]\n    return s_result", "task_id": "372_ec1a2e62-627f-4de0-8cde-1a1668f60d54", "test_setup_code": "", "test_list": ["assert sort_descending([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]", "assert sort_descending([]) == []", "assert sort_descending([1]) == [1]", "assert sort_descending([5, -1, 3, -2, 0, 2, -3]) == [5, 3, 2, 0, -1, -2, -3]"], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef find_kth_largest(nums, k):\n    return hq.nlargest(k, nums)[-1]", "task_id": "372_1ea7e0a9-0ef2-4564-939f-3866b90d0193", "test_setup_code": "", "test_list": ["assert find_kth_largest([3, 2, 1, 5, 6, 4], 2) == 5", "assert find_kth_largest([3, 2, 3, 1, 2, 4, 5, 5, 6], 4) == 4", "assert find_kth_largest([1, 2], 2) == 1", "assert find_kth_largest([7, 6, 5, 4, 3, 2, 1], 1) == 7"], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into one sorted list using heap queue algorithm.", "code": "import heapq as hq\n\ndef merge_sorted_lists(lists):\n    return list(hq.merge(*lists))", "task_id": "372_6a6f9705-49ae-41b4-bc25-f4a55026b52e", "test_setup_code": "", "test_list": ["assert merge_sorted_lists([[1, 4, 5], [1, 3, 4], [2, 6]]) == [1, 1, 2, 3, 4, 4, 5, 6]", "assert merge_sorted_lists([[], [1, 2, 3], [4, 5, 6]]) == [1, 2, 3, 4, 5, 6]", "assert merge_sorted_lists([[1, 3, 5], [2, 4, 6], [0, 7, 8]]) == [0, 1, 2, 3, 4, 5, 6, 7, 8]", "assert merge_sorted_lists([[], [], []]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the k smallest elements in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef find_smallest_elements(nums, k):\n    return hq.nsmallest(k, nums)", "task_id": "372_82896cc8-449c-4b72-a65c-2659cbee4be7", "test_setup_code": "", "test_list": ["assert find_smallest_elements([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == [1, 1, 2]", "assert find_smallest_elements([10, 20, 30, 40, 50], 2) == [10, 20]", "assert find_smallest_elements([5, 5, 5, 5, 5], 3) == [5, 5, 5]", "assert find_smallest_elements([1], 1) == [1]"], "challenge_test_list": []}
{"text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm and return the sorted list.", "code": "import heapq as hq\n\ndef heap_sort(nums):\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]", "task_id": "372_c63f9218-9e66-4697-8e8f-d2c5943ef188", "test_setup_code": "", "test_list": ["assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]", "assert heap_sort([]) == []", "assert heap_sort([10]) == [10]", "assert heap_sort([-1, -3, -2, 0, 2, 1]) == [-3, -2, -1, 0, 1, 2]"], "challenge_test_list": []}
{"text": "Write a function to find the k largest elements in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef k_largest_elements(nums, k):\n    return hq.nlargest(k, nums)", "task_id": "372_14b522eb-175e-4854-a0c2-c36e005ed8db", "test_setup_code": "", "test_list": ["assert k_largest_elements([3, 1, 5, 12, 2, 11], 3) == [12, 11, 5]", "assert k_largest_elements([4, 4, 4, 4, 4], 2) == [4, 4]", "assert k_largest_elements([10, 9, 8, 7, 6, 5, 4, 3, 2, 1], 5) == [10, 9, 8, 7, 6]", "assert k_largest_elements([1], 1) == [1]"], "challenge_test_list": []}
{"text": "Write a function to convert a given list of elements into a heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heapify_list(nums):\n    hq.heapify(nums)\n    return nums", "task_id": "372_865c614a-e3f1-4b9c-88c3-0236273a3b34", "test_setup_code": "", "test_list": ["assert heapify_list([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 9, 4, 6, 5, 5, 5]", "assert heapify_list([]) == []", "assert heapify_list([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == [1, 2, 4, 3, 6, 5, 8, 10, 7, 9]", "assert heapify_list([1]) == [1]"], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef kth_smallest(nums, k):\n    return hq.nsmallest(k, nums)[-1]", "task_id": "372_684172f2-104c-4eef-b9a5-ca57dd4094ab", "test_setup_code": "", "test_list": ["assert kth_smallest([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 3) == 2", "assert kth_smallest([10, 20, 30, 40, 50], 1) == 10", "assert kth_smallest([1, 2, 3, 4, 5], 5) == 5", "assert kth_smallest([7, 10, 4, 3, 20, 15], 4) == 10"], "challenge_test_list": []}
{"text": "Write a function to push a new item onto the heap and then pop and return the smallest item from the heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heap_push_pop(nums, item):\n    hq.heapify(nums)\n    return hq.heappushpop(nums, item)", "task_id": "372_72abde8a-75a8-430b-8a95-453690672d2e", "test_setup_code": "", "test_list": ["assert heap_push_pop([3, 1, 4, 1, 5], 2) == 1", "assert heap_push_pop([], 10) == 10", "assert heap_push_pop([2, 3, 5, 7, 11], 1) == 1", "assert heap_push_pop([1, 2, 3, 4, 5], 6) == 1"], "challenge_test_list": []}
{"text": "Write a function to pop and return the smallest item from the heap, and then push the new item onto the heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heap_replace(nums, item):\n    hq.heapify(nums)\n    return hq.heapreplace(nums, item)", "task_id": "372_02f4f3d9-ede8-4564-be72-54781d4cd552", "test_setup_code": "", "test_list": ["assert heap_replace([3, 2, 1], 4) == 1", "assert heap_replace([5, 7, 9, 1, 3], 6) == 1", "assert heap_replace([10], 5) == 10", "assert heap_replace([2, 3, 4, 5, 6], 1) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing positive integer in an unsorted array.", "code": "def smallest_missing_positive(arr):\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_d3c1938b-e511-455d-8f8c-fb6e9234d2c7", "test_setup_code": "", "test_list": ["assert smallest_missing_positive([3, 4, -1, 1]) == 2", "assert smallest_missing_positive([1, 2, 0]) == 3", "assert smallest_missing_positive([7, 8, 9, 11, 12]) == 1", "assert smallest_missing_positive([1, 2, 3, 4, 5]) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing even number in a sorted array.", "code": "def smallest_missing_even(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "371_7662ca63-7f76-49b2-996f-aa75af391039", "test_setup_code": "", "test_list": ["assert smallest_missing_even([0, 2, 4, 6, 8]) == 10", "assert smallest_missing_even([1, 3, 5, 7, 9]) == 0", "assert smallest_missing_even([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 12", "assert smallest_missing_even([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing odd number in a sorted array.", "code": "def smallest_missing_odd(arr):\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "371_96a684d2-6420-45ac-b761-d347b3ce27b1", "test_setup_code": "", "test_list": ["assert smallest_missing_odd([1, 3, 5, 7, 9]) == 11", "assert smallest_missing_odd([2, 4, 6, 8, 10]) == 1", "assert smallest_missing_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11", "assert smallest_missing_odd([]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing multiple of k in a sorted array.", "code": "def smallest_missing_multiple(arr, k):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += k\n    return smallest_missing", "task_id": "371_d779fe09-15d0-438b-bdac-bc491c37e5f9", "test_setup_code": "", "test_list": ["assert smallest_missing_multiple([0, 5, 10, 15, 20], 5) == 25", "assert smallest_missing_multiple([0, 1, 2, 3, 4], 1) == 5", "assert smallest_missing_multiple([0, 3, 6, 9, 12], 3) == 15", "assert smallest_missing_multiple([], 7) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing non-negative integer in a sorted array.", "code": "def smallest_missing_nonnegative(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_4cca2c25-dec4-4f6b-ab73-1041dd89ad06", "test_setup_code": "", "test_list": ["assert smallest_missing_nonnegative([0, 1, 2, 3, 4, 5]) == 6", "assert smallest_missing_nonnegative([0, 2, 3, 4, 5, 6]) == 1", "assert smallest_missing_nonnegative([1, 2, 3, 4, 5, 6]) == 0", "assert smallest_missing_nonnegative([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing negative integer in a sorted array.", "code": "def smallest_missing_negative(arr):\n    smallest_missing = -1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing -= 1\n    return smallest_missing", "task_id": "371_9f376d5c-2690-41dd-9463-c0cfd6340479", "test_setup_code": "", "test_list": ["assert smallest_missing_negative([-5, -4, -3, -2, -1, 0, 1, 2]) == -6", "assert smallest_missing_negative([-3, -2, 0, 1, 2, 3]) == -1", "assert smallest_missing_negative([-10, -9, -8, -6, -5, -4, -3, -2, -1]) == -7", "assert smallest_missing_negative([1, 2, 3, 4, 5]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer within a given range [low, high] in a sorted array.", "code": "def smallest_missing_in_range(arr, low, high):\n    for i in range(low, high + 1):\n        if i not in arr:\n            return i\n    return high + 1", "task_id": "371_dc54fa9c-a88e-4b76-b06e-85c42f6db2e2", "test_setup_code": "", "test_list": ["assert smallest_missing_in_range([1, 2, 3, 5, 6, 8, 10], 1, 10) == 4", "assert smallest_missing_in_range([1, 2, 3, 4, 5], 1, 10) == 6", "assert smallest_missing_in_range([5, 6, 7, 8, 9], 1, 10) == 1", "assert smallest_missing_in_range([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in an unsorted array.", "code": "def smallest_missing_in_unsorted(arr):\n    arr.sort()\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_3e7be476-bb67-481a-9100-d16d1a94f633", "test_setup_code": "", "test_list": ["assert smallest_missing_in_unsorted([3, 4, -1, 1]) == 0", "assert smallest_missing_in_unsorted([1, 2, 0]) == 3", "assert smallest_missing_in_unsorted([]) == 0", "assert smallest_missing_in_unsorted([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 11"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in a rotated sorted array.", "code": "def smallest_missing_in_rotated(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left", "task_id": "371_2968ba66-e9ef-40eb-bdb9-a9cd86e6b231", "test_setup_code": "", "test_list": ["assert smallest_missing_in_rotated([4, 5, 6, 7, 0, 1, 2]) == 3", "assert smallest_missing_in_rotated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0", "assert smallest_missing_in_rotated([2, 3, 4, 5, 6, 7, 8, 9, 10, 0, 1]) == 11", "assert smallest_missing_in_rotated([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 0]) == 1001"], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in a sorted array with repeated elements.", "code": "def smallest_missing_in_repeated(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_5880ae60-6926-47bb-9ef9-6b682574a353", "test_setup_code": "", "test_list": ["assert smallest_missing_in_repeated([0, 0, 1, 1, 2, 2, 3, 3, 4, 4]) == 5", "assert smallest_missing_in_repeated([1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 0", "assert smallest_missing_in_repeated([]) == 0", "assert smallest_missing_in_repeated([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "374_3ab9cdba-db4c-476a-a6d4-ad8f721386d8", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('') == True", "assert is_palindrome('a') == True"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "374_d23cb83d-37e1-4936-ad0a-76d9f19c29a9", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('') == 0", "assert count_vowels('bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ') == 0", "assert count_vowels('aeiouAEIOU') == 10", "assert count_vowels('The quick brown fox jumps over the lazy dog') == 11"], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    return ''.join(sorted(set(s), key=s.index))", "task_id": "374_03fa9821-3ff9-4fa2-8ecc-ddf3b97577bd", "test_setup_code": "", "test_list": ["assert remove_duplicates('hello') == 'helo'", "assert remove_duplicates('aabbcc') == 'abc'", "assert remove_duplicates('') == ''", "assert remove_duplicates('abcabcabc') == 'abc'"], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s: str) -> str:\n    for char in s:\n        if s.count(char) == 1:\n            return char\n    return ''", "task_id": "374_63c5d78a-a9e7-406b-b233-9c30fdda9c4f", "test_setup_code": "", "test_list": ["assert first_non_repeating_char('aabbccddeeffg') == 'g'", "assert first_non_repeating_char('aabbccddeeff') == ''", "assert first_non_repeating_char('a') == 'a'", "assert first_non_repeating_char('abacabad') == 'c'"], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def anagrams(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "374_9cd7c588-25fe-466b-8abc-c88c60150d8f", "test_setup_code": "", "test_list": ["assert anagrams('listen', 'silent') == True", "assert anagrams('hello', 'world') == False", "assert anagrams('', '') == True", "assert anagrams('aab', 'aba') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a subsequence of string t.", "code": "def is_subsequence(s: str, t: str) -> bool:\n    it = iter(t)\n    return all(char in it for char in s)", "task_id": "374_02f201b0-d485-4e21-bf46-ac2f89224538", "test_setup_code": "", "test_list": ["assert is_subsequence('abc', 'ahbgdc') == True", "assert is_subsequence('axc', 'ahbgdc') == False", "assert is_subsequence('', 'ahbgdc') == True", "assert is_subsequence('abc', '') == False"], "challenge_test_list": []}
{"text": "Write a function to compress a string such that 'aaabb' becomes 'a3b2'.", "code": "def compress_string(s: str) -> str:\n    if not s:\n        return ''\n    compressed = []\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            compressed.append(s[i - 1] + str(count))\n            count = 1\n    compressed.append(s[-1] + str(count))\n    return ''.join(compressed)", "task_id": "374_a056258e-4578-4d96-ae3f-6d8b085c19ee", "test_setup_code": "", "test_list": ["assert compress_string('aaabb') == 'a3b2'", "assert compress_string('a') == 'a1'", "assert compress_string('') == ''", "assert compress_string('aabbcc') == 'a2b2c2'"], "challenge_test_list": []}
{"text": "Write a function to expand a compressed string such that 'a3b2' becomes 'aaabb'.", "code": "def expand_string(s: str) -> str:\n    expanded = []\n    i = 0\n    while i < len(s):\n        char = s[i]\n        count = ''\n        i += 1\n        while i < len(s) and s[i].isdigit():\n            count += s[i]\n            i += 1\n        expanded.append(char * int(count))\n    return ''.join(expanded)", "task_id": "374_9dfe9ee4-f9c4-42ec-8247-6e4f3e149cf5", "test_setup_code": "", "test_list": ["assert expand_string('a3b2') == 'aaabb'", "assert expand_string('a1b1c1') == 'abc'", "assert expand_string('z10') == 'zzzzzzzzzz'", "assert expand_string('a2b3c4') == 'aabbbcccc'"], "challenge_test_list": []}
{"text": "Write a function to round the given number up to the nearest multiple of a specific number.", "code": "def round_up(n, m):\n    return ((n + m - 1) // m) * m", "task_id": "375_c049aa01-76af-4962-87f8-f9c24b5dc705", "test_setup_code": "", "test_list": ["assert round_up(5, 3) == 6", "assert round_up(12, 5) == 15", "assert round_up(0, 7) == 0", "assert round_up(23, 1) == 23"], "challenge_test_list": []}
{"text": "Write a function to round the given number down to the nearest multiple of a specific number.", "code": "def round_down(n, m):\n    return (n // m) * m", "task_id": "375_adf5f755-4945-43e1-9b34-35e27be85fbc", "test_setup_code": "", "test_list": ["assert round_down(25, 10) == 20", "assert round_down(123, 5) == 120", "assert round_down(0, 7) == 0", "assert round_down(7, 7) == 7"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest integer, rounding half up.", "code": "def round_half_up(n):\n    return int(n + 0.5)", "task_id": "375_ab955fcc-433e-4507-af8f-6d0540626c70", "test_setup_code": "", "test_list": ["assert round_half_up(2.5) == 3", "assert round_half_up(2.4) == 2", "assert round_half_up(-2.5) == -2", "assert round_half_up(-2.6) == -3"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest integer, rounding half down.", "code": "def round_half_down(n):\n    return int(n - 0.5) if n < 0 else int(n + 0.5)", "task_id": "375_a5f5337e-00c4-4b6e-829b-2a70111cc725", "test_setup_code": "", "test_list": ["assert round_half_down(2.5) == 2", "assert round_half_down(-2.5) == -3", "assert round_half_down(3.4) == 3", "assert round_half_down(-3.4) == -3"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest even integer.", "code": "def round_to_nearest_even(n):\n    return int(round(n / 2.0) * 2)", "task_id": "375_4e24a6f2-2f47-4e3f-bc14-285ece2a34c8", "test_setup_code": "", "test_list": ["assert round_to_nearest_even(3.5) == 4", "assert round_to_nearest_even(4.5) == 4", "assert round_to_nearest_even(0.0) == 0", "assert round_to_nearest_even(-3.5) == -4"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest odd integer.", "code": "def round_to_nearest_odd(n):\n    rounded = round(n)\n    return rounded if rounded % 2 != 0 else rounded + 1", "task_id": "375_72961a20-0a82-4e78-a810-6725708fac6b", "test_setup_code": "", "test_list": ["assert round_to_nearest_odd(2.5) == 3", "assert round_to_nearest_odd(3.7) == 3", "assert round_to_nearest_odd(4.0) == 5", "assert round_to_nearest_odd(-1.2) == -1"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest tenth.", "code": "def round_to_nearest_tenth(n):\n    return round(n, 1)", "task_id": "375_9f8469a5-a31c-4aa4-88b1-327d77908d6e", "test_setup_code": "", "test_list": ["assert round_to_nearest_tenth(3.14159) == 3.1", "assert round_to_nearest_tenth(2.75) == 2.8", "assert round_to_nearest_tenth(-1.26) == -1.3", "assert round_to_nearest_tenth(0.05) == 0.1"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest hundredth.", "code": "def round_to_nearest_hundredth(n):\n    return round(n, 2)", "task_id": "375_d439d60a-256f-443b-b5ec-99933b516874", "test_setup_code": "", "test_list": ["assert round_to_nearest_hundredth(3.14159) == 3.14", "assert round_to_nearest_hundredth(2.71828) == 2.72", "assert round_to_nearest_hundredth(-1.23456) == -1.23", "assert round_to_nearest_hundredth(0.005) == 0.01"], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest thousandth.", "code": "def round_to_nearest_thousandth(n):\n    return round(n, 3)", "task_id": "375_718cdebe-a292-475c-a833-811356e3abae", "test_setup_code": "", "test_list": ["assert round_to_nearest_thousandth(3.1415926535) == 3.142", "assert round_to_nearest_thousandth(2.7182818284) == 2.718", "assert round_to_nearest_thousandth(-1.23456789) == -1.235", "assert round_to_nearest_thousandth(0.0004999) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to round a given integer to the nearest power of two.", "code": "def round_to_nearest_power_of_two(n):\n    if n < 1:\n        return 1\n    lower = 1\n    while lower * 2 <= n:\n        lower *= 2\n    upper = lower * 2\n    return lower if n - lower < upper - n else upper", "task_id": "375_9016714d-0739-46f9-99f3-5b260102ee41", "test_setup_code": "", "test_list": ["assert round_to_nearest_power_of_two(0) == 1", "assert round_to_nearest_power_of_two(1) == 1", "assert round_to_nearest_power_of_two(3) == 4", "assert round_to_nearest_power_of_two(6) == 8", "assert round_to_nearest_power_of_two(12) == 16", "assert round_to_nearest_power_of_two(31) == 32", "assert round_to_nearest_power_of_two(33) == 32", "assert round_to_nearest_power_of_two(1024) == 1024", "assert round_to_nearest_power_of_two(1025) == 1024"], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "377_d3aad9f2-5741-423e-8f1f-22476d924eb2", "test_setup_code": "", "test_list": ["assert remove_vowels('hello world') == 'hll wrld'", "assert remove_vowels('AEIOUaeiou') == ''", "assert remove_vowels('Python Programming') == 'Pythn Prgrmmng'", "assert remove_vowels('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all digits from a given string.", "code": "def remove_digits(s: str) -> str:\n    return ''.join([char for char in s if not char.isdigit()])", "task_id": "377_ac914501-caba-49a7-9aa7-13111700ac3b", "test_setup_code": "", "test_list": ["assert remove_digits('abc123') == 'abc'", "assert remove_digits('123456') == ''", "assert remove_digits('a1b2c3d4') == 'abcd'", "assert remove_digits('no digits here!') == 'no digits here!'"], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return ''.join(s.split())", "task_id": "377_e6258906-7ad5-4ed5-a307-356616161288", "test_setup_code": "", "test_list": ["assert remove_whitespace('Hello World') == 'HelloWorld'", "assert remove_whitespace('   Leading and trailing spaces   ') == 'Leadingandtrailingspaces'", "assert remove_whitespace('NoSpaces') == 'NoSpaces'", "assert remove_whitespace('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return ''.join([char for char in s if char not in consonants])", "task_id": "377_d77c9828-c5b5-4803-b088-6b9e0cc53b44", "test_setup_code": "", "test_list": ["assert remove_consonants('hello world') == 'eo o'", "assert remove_consonants('Python Programming') == 'o oai'", "assert remove_consonants('AEIOUaeiou') == 'AEIOUaeiou'", "assert remove_consonants('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all special characters from a given string.", "code": "def remove_special_characters(s: str) -> str:\n    return ''.join([char for char in s if char.isalnum() or char.isspace()])", "task_id": "377_8f70262e-7753-4c63-8a2b-a69e6e1dd48f", "test_setup_code": "", "test_list": ["assert remove_special_characters('Hello, World!') == 'Hello World'", "assert remove_special_characters('123@#abc$%^') == '123abc'", "assert remove_special_characters('') == ''", "assert remove_special_characters('NoSpecialCharacters') == 'NoSpecialCharacters'"], "challenge_test_list": []}
{"text": "Write a python function to remove all uppercase letters from a given string.", "code": "def remove_uppercase(s: str) -> str:\n    return ''.join([char for char in s if not char.isupper()])", "task_id": "377_cbab7f33-3c68-4e8f-9e0e-090219f908ad", "test_setup_code": "", "test_list": ["assert remove_uppercase('Hello World!') == 'ello orld!'", "assert remove_uppercase('PYTHON is Fun') == ' is un'", "assert remove_uppercase('12345') == '12345'", "assert remove_uppercase('') == ''"], "challenge_test_list": []}
{"text": "Write a python function to remove all lowercase letters from a given string.", "code": "def remove_lowercase(s: str) -> str:\n    return ''.join([char for char in s if not char.islower()])", "task_id": "377_64c2f996-08d5-465c-abb3-25d20d5e59b8", "test_setup_code": "", "test_list": ["assert remove_lowercase('Hello World!') == 'H W!'", "assert remove_lowercase('123ABCabc') == '123ABC'", "assert remove_lowercase('') == ''", "assert remove_lowercase('aBcDeFgHiJkLmNoPqRsTuVwXyZ') == 'BDFHJLNPRTVXZ'"], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given substring from a string.", "code": "def remove_substring(s: str, sub: str) -> str:\n    return s.replace(sub, '')", "task_id": "377_6eb8d906-9d38-4cf8-9246-d770393bb539", "test_setup_code": "", "test_list": ["assert remove_substring('hello world', 'world') == 'hello '", "assert remove_substring('aaaaaa', 'a') == ''", "assert remove_substring('abcabcabc', 'abc') == ''", "assert remove_substring('hello', 'x') == 'hello'"], "challenge_test_list": []}
{"text": "Write a python function to remove the nth occurrence of a character in a given string.", "code": "def remove_nth_occurrence(s: str, c: str, n: int) -> str:\n    count = 0\n    result = []\n    for char in s:\n        if char == c:\n            count += 1\n            if count == n:\n                continue\n        result.append(char)\n    return ''.join(result)", "task_id": "377_5e3a75ff-4d32-4775-bc88-b6934a8b5d81", "test_setup_code": "", "test_list": ["assert remove_nth_occurrence('hello world', 'l', 2) == 'helo world'", "assert remove_nth_occurrence('banana', 'a', 3) == 'banan'", "assert remove_nth_occurrence('mississippi', 's', 4) == 'mississipi'", "assert remove_nth_occurrence('aaaaa', 'a', 5) == 'aaaa'"], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements of a given list.", "code": "def reverse_list(lst):\n  return lst[::-1]", "task_id": "378_1ac04d0b-56ad-474b-ba27-609a347dda5c", "test_setup_code": "", "test_list": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([]) == []", "assert reverse_list([1]) == [1]", "assert reverse_list(['a', 'b', 'c', 'd']) == ['d', 'c', 'b', 'a']"], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the left by k positions.", "code": "def rotate_left(lst, k):\n  k = k % len(lst)\n  return lst[k:] + lst[:k]", "task_id": "378_479c0f91-ccaf-43fa-9a18-6994d2249f00", "test_setup_code": "", "test_list": ["assert rotate_left([1, 2, 3, 4, 5], 2) == [3, 4, 5, 1, 2]", "assert rotate_left([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]", "assert rotate_left([1, 2, 3, 4, 5], 0) == [1, 2, 3, 4, 5]", "assert rotate_left([1, 2, 3, 4, 5], 7) == [3, 4, 5, 1, 2]"], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the right by k positions.", "code": "def rotate_right(lst, k):\n  k = k % len(lst)\n  return lst[-k:] + lst[:-k]", "task_id": "378_d6eb42a7-4134-4e5f-91a4-2d523e00d8b2", "test_setup_code": "", "test_list": ["assert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]", "assert rotate_right([1, 2, 3], 3) == [1, 2, 3]", "assert rotate_right([], 1) == []", "assert rotate_right([1, 2, 3, 4, 5], 7) == [4, 5, 1, 2, 3]"], "challenge_test_list": []}
{"text": "Write a python function to swap the first and last elements of a given list.", "code": "def swap_first_last(lst):\n  if len(lst) < 2:\n    return lst\n  lst[0], lst[-1] = lst[-1], lst[0]\n  return lst", "task_id": "378_6ce851fe-5743-4215-810f-793987b300aa", "test_setup_code": "", "test_list": ["assert swap_first_last([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]", "assert swap_first_last([7]) == [7]", "assert swap_first_last(['a', 'b', 'c', 'd']) == ['d', 'b', 'c', 'a']", "assert swap_first_last([]) == []"], "challenge_test_list": []}
{"text": "Write a python function to double each element in a given list.", "code": "def double_elements(lst):\n  return [x * 2 for x in lst]", "task_id": "378_3dc5757d-281d-4ddb-a2d7-f867abc62cc7", "test_setup_code": "", "test_list": ["assert double_elements([1, 2, 3]) == [2, 4, 6]", "assert double_elements([-1, 0, 1]) == [-2, 0, 2]", "assert double_elements([]) == []", "assert double_elements([100, 200, 300]) == [200, 400, 600]"], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from a given list while preserving the order.", "code": "def remove_duplicates(lst):\n  seen = set()\n  return [x for x in lst if not (x in seen or seen.add(x))]", "task_id": "378_8141fd49-649c-48d7-a7b8-799783e2f363", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 3, 1, 2, 5]) == [1, 2, 3, 5]", "assert remove_duplicates([]) == []", "assert remove_duplicates(['a', 'b', 'a', 'c', 'd', 'd']) == ['a', 'b', 'c', 'd']", "assert remove_duplicates([True, False, True, 0, 1, 0]) == [True, False, 0, 1]"], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all elements in a given list.", "code": "def sum_elements(lst):\n  return sum(lst)", "task_id": "378_c4a4d1ac-66d6-4ede-b9bf-6be5af5d6e7a", "test_setup_code": "", "test_list": ["assert sum_elements([1, 2, 3, 4, 5]) == 15", "assert sum_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_elements([0, 0, 0, 0, 0]) == 0", "assert sum_elements([1000000, 2000000, 3000000]) == 6000000"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a given list.", "code": "def find_max(lst):\n  return max(lst)", "task_id": "378_d4ead154-c369-483d-af9a-c338a8fffc33", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([-1, -2, -3, -4, -5]) == -1", "assert find_max([100]) == 100", "assert find_max([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a given list.", "code": "def find_min(lst):\n  return min(lst)", "task_id": "378_a7bbc434-f10a-4e04-98d7-97dfa23bdc4f", "test_setup_code": "", "test_list": ["assert find_min([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == 1", "assert find_min([-10, -20, -30, -40, -50]) == -50", "assert find_min([100]) == 100", "assert find_min([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a given element in a list.", "code": "def count_occurrences(lst, x):\n  return lst.count(x)", "task_id": "378_5b753714-85c0-4f2b-9f4b-e234125fd6a2", "test_setup_code": "", "test_list": ["assert count_occurrences([1, 2, 3, 4, 5, 1, 1], 1) == 3", "assert count_occurrences(['a', 'b', 'c', 'a', 'a'], 'a') == 3", "assert count_occurrences([1, 2, 3, 4, 5], 6) == 0", "assert count_occurrences([], 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and replace the duplicates with a custom value.", "code": "def remove_duplicates(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else 'DUP' for ele in lst]\n    return res", "task_id": "376_35e9a23a-97bc-4064-acac-cc4a6472ac0e", "test_setup_code": "", "test_list": ["assert remove_duplicates([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 'DUP', 3, 4, 'DUP', 5]", "assert remove_duplicates(['a', 'b', 'a', 'c', 'b', 'd', 'e']) == ['a', 'b', 'DUP', 'c', 'DUP', 'd', 'e']", "assert remove_duplicates([]) == []", "assert remove_duplicates([1, 1, 1, 1, 1]) == [1, 'DUP', 'DUP', 'DUP', 'DUP']"], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with their index in the list.", "code": "def replace_duplicates_with_index(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else idx for idx, ele in enumerate(lst)]\n    return res", "task_id": "376_41f83a67-d967-4a49-bfc8-e3edee4fc411", "test_setup_code": "", "test_list": ["assert replace_duplicates_with_index([1, 2, 3, 2, 4, 1]) == [1, 2, 3, 3, 4, 5]", "assert replace_duplicates_with_index(['a', 'b', 'a', 'c', 'b']) == ['a', 'b', 2, 'c', 4]", "assert replace_duplicates_with_index([1, 1, 1, 1]) == [1, 1, 2, 3]", "assert replace_duplicates_with_index([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and return a tuple of the modified list and the count of removed duplicates.", "code": "def remove_duplicates_and_count(lst):\n    temp = set()\n    count = 0\n    res = []\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n        else:\n            count += 1\n    return (res, count)", "task_id": "376_45f48d7a-f1d6-4ec5-90ef-938440fbce7b", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_count([1, 2, 3, 2, 1, 4]) == ([1, 2, 3, 4], 2)", "assert remove_duplicates_and_count([]) == ([], 0)", "assert remove_duplicates_and_count([5, 5, 5, 5, 5]) == ([5], 4)", "assert remove_duplicates_and_count([1, 2, 3, 4, 5]) == ([1, 2, 3, 4, 5], 0)"], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the length of the list.", "code": "def replace_duplicates_with_length(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else len(lst) for ele in lst]\n    return res", "task_id": "376_1093137f-8954-4c39-805a-1f612fda6a99", "test_setup_code": "", "test_list": ["assert replace_duplicates_with_length([1, 2, 3, 2, 4, 1]) == [1, 2, 3, 6, 4, 6]", "assert replace_duplicates_with_length([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert replace_duplicates_with_length([10, 20, 30, 40, 50]) == [10, 20, 30, 40, 50]", "assert replace_duplicates_with_length([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and return the modified list in reverse order.", "code": "def remove_duplicates_and_reverse(lst):\n    temp = set()\n    res = [ele for ele in lst if ele not in temp and not temp.add(ele)]\n    return res[::-1]", "task_id": "376_303efdee-d6d5-4c1f-b7fe-33e7396b0d18", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_reverse([1, 2, 3, 2, 1]) == [3, 2, 1]", "assert remove_duplicates_and_reverse([4, 5, 6, 7, 7, 6, 5, 4]) == [7, 6, 5, 4]", "assert remove_duplicates_and_reverse([10, 20, 30, 40, 50]) == [50, 40, 30, 20, 10]", "assert remove_duplicates_and_reverse([]) == []"], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the previous element in the list.", "code": "def replace_duplicates_with_previous(lst):\n    temp = set()\n    res = []\n    prev = None\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n            prev = ele\n        else:\n            res.append(prev)\n    return res", "task_id": "376_e3c40953-2597-48b6-b3d9-5b1851ccd0f8", "test_setup_code": "", "test_list": ["assert replace_duplicates_with_previous([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 2, 3, 4, 4, 5]", "assert replace_duplicates_with_previous([1, 1, 1, 2, 3, 3, 4]) == [1, 1, 1, 2, 3, 3, 4]", "assert replace_duplicates_with_previous([]) == []", "assert replace_duplicates_with_previous([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]"], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and double the remaining elements.", "code": "def remove_duplicates_and_double(lst):\n    temp = set()\n    res = [ele * 2 for ele in lst if ele not in temp and not temp.add(ele)]\n    return res", "task_id": "376_04fb9763-ae45-4577-a4f2-8b6301efac2b", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_double([1, 2, 2, 3, 4, 4, 5]) == [2, 6, 10]", "assert remove_duplicates_and_double([1, 1, 1, 1, 1]) == [2]", "assert remove_duplicates_and_double([]) == []", "assert remove_duplicates_and_double([10, 20, 30, 40, 50]) == [20, 40, 60, 80, 100]"], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the sum of all unique elements seen so far.", "code": "def replace_duplicates_with_sum(lst):\n    temp = set()\n    unique_sum = 0\n    res = []\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            unique_sum += ele\n            res.append(ele)\n        else:\n            res.append(unique_sum)\n    return res", "task_id": "376_8d377123-fbb6-4c53-bac8-6009b14bb31b", "test_setup_code": "", "test_list": ["assert replace_duplicates_with_sum([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 3, 4, 10, 5]", "assert replace_duplicates_with_sum([5, 5, 5, 5, 5]) == [5, 5, 5, 5, 5]", "assert replace_duplicates_with_sum([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]", "assert replace_duplicates_with_sum([]) == []"], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and square the remaining elements.", "code": "def remove_duplicates_and_square(lst):\n    temp = set()\n    res = [ele ** 2 for ele in lst if ele not in temp and not temp.add(ele)]\n    return res", "task_id": "376_9e47ccd3-e253-403e-8ab0-a36ff8fcfa35", "test_setup_code": "", "test_list": ["assert remove_duplicates_and_square([1, 2, 2, 3, 4, 4, 5]) == [1, 4, 9, 16, 25]", "assert remove_duplicates_and_square([1, 1, 1, 1, 1]) == [1]", "assert remove_duplicates_and_square([]) == []", "assert remove_duplicates_and_square([10, 20, 10, 30, 40, 50, 20]) == [100, 400, 900, 1600, 2500]"], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the next element in the list.", "code": "def replace_duplicates_with_next(lst):\n    temp = set()\n    res = []\n    for i, ele in enumerate(lst):\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n        else:\n            res.append(lst[i+1] if i+1 < len(lst) else None)\n    return res", "task_id": "376_1e075464-0cb1-42f0-b878-eb8643bb060f", "test_setup_code": "", "test_list": ["assert replace_duplicates_with_next([1, 2, 2, 3, 4, 4, 5]) == [1, 2, 3, 3, 4, 5, 5]", "assert replace_duplicates_with_next([1, 1, 1, 1]) == [1, 1, 1, None]", "assert replace_duplicates_with_next([5, 6, 7, 8, 9]) == [5, 6, 7, 8, 9]", "assert replace_duplicates_with_next([]) == []"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n  return l * w * h", "task_id": "379_44b3e0cf-ce11-46b2-b6ad-97d12258ab3e", "test_setup_code": "", "test_list": ["assert volume_cuboid(2, 3, 4) == 24", "assert volume_cuboid(1, 1, 1) == 1", "assert volume_cuboid(0, 5, 10) == 0", "assert volume_cuboid(10, 5, 2) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surfacearea_cylinder(r, h):\n  return 2 * math.pi * r * (r + h)", "task_id": "379_c9e62833-26e3-4931-9108-ba1a79fa9259", "test_setup_code": "", "test_list": ["assert surfacearea_cylinder(1, 1) == 12.566370614359172", "assert surfacearea_cylinder(0, 10) == 0.0", "assert surfacearea_cylinder(5, 0) == 157.07963267948966", "assert surfacearea_cylinder(3, 7) == 188.49555921538757"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  return (4/3) * math.pi * r**3", "task_id": "379_9172ac42-0fca-41f7-99ba-d3bc2b9d0ef6", "test_setup_code": "", "test_list": ["assert round(volume_sphere(1), 2) == 4.19", "assert round(volume_sphere(0), 2) == 0.00", "assert round(volume_sphere(2.5), 2) == 65.45", "assert round(volume_sphere(10), 2) == 4188.79"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * r**2", "task_id": "379_a44810ca-b889-40fd-8d18-d184f2c064c6", "test_setup_code": "", "test_list": ["assert surfacearea_sphere(1) == 12.566370614359172", "assert surfacearea_sphere(0) == 0.0", "assert surfacearea_sphere(2.5) == 78.53981633974483", "assert surfacearea_sphere(10) == 1256.6370614359173"], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r, h):\n  return (1/3) * math.pi * r**2 * h", "task_id": "379_6f4dcaa1-727c-42aa-879f-792f6a947fd0", "test_setup_code": "", "test_list": ["assert volume_cone(3, 5) == 47.12388980384689", "assert volume_cone(0, 10) == 0.0", "assert volume_cone(5, 0) == 0.0", "assert volume_cone(2.5, 4.5) == 29.45243112595511"], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surfacearea_cone(r, h):\n  l = math.sqrt(r**2 + h**2)\n  return math.pi * r * (r + l)", "task_id": "379_34a88425-393e-49c4-8283-1b048309c8bd", "test_setup_code": "", "test_list": ["assert surfacearea_cone(3, 4) == 75.39822368615503", "assert surfacearea_cone(0, 5) == 0.0", "assert surfacearea_cone(5, 0) == 157.07963267948966", "assert surfacearea_cone(1, 1) == 7.584475591748159"], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n  return 2 * (l + w)", "task_id": "379_b44e5e6d-49b9-4b9a-a5e0-2f58c1783fee", "test_setup_code": "", "test_list": ["assert perimeter_rectangle(5, 3) == 16", "assert perimeter_rectangle(0, 0) == 0", "assert perimeter_rectangle(10, 5) == 30", "assert perimeter_rectangle(1, 1) == 4"], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(b, h):\n  return 0.5 * b * h", "task_id": "379_48666090-12d8-430a-bd0f-347219b9d4ca", "test_setup_code": "", "test_list": ["assert area_triangle(10, 5) == 25.0", "assert area_triangle(0, 10) == 0.0", "assert area_triangle(7, 3) == 10.5", "assert area_triangle(4, 4) == 8.0"], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\ndef circumference_circle(r):\n  return 2 * math.pi * r", "task_id": "379_d32f3788-cd54-472f-b6c7-678dd57cc744", "test_setup_code": "", "test_list": ["assert circumference_circle(1) == 2 * math.pi", "assert circumference_circle(0) == 0", "assert circumference_circle(2.5) == 2 * math.pi * 2.5", "assert circumference_circle(100) == 2 * math.pi * 100"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the length of the inner lists.", "code": "def sort_by_length(list_data):\n    result = sorted(list_data, key=len)\n    return result", "task_id": "381_2ddc239b-89dd-432e-b4f3-fed7988aeb72", "test_setup_code": "", "test_list": ["assert sort_by_length([[1, 2, 3], [1], [1, 2]]) == [[1], [1, 2], [1, 2, 3]]", "assert sort_by_length([[], [1, 2, 3], [1, 2], [1]]) == [[], [1], [1, 2], [1, 2, 3]]", "assert sort_by_length([[1, 2, 3], [1, 2, 3], [1, 2], [1, 2, 3, 4]]) == [[1, 2], [1, 2, 3], [1, 2, 3], [1, 2, 3, 4]]", "assert sort_by_length([[1, 2], [1, 2, 3], [1], [1, 2, 3, 4, 5]]) == [[1], [1, 2], [1, 2, 3], [1, 2, 3, 4, 5]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the sum of the elements in the inner lists.", "code": "def sort_by_sum(list_data):\n    result = sorted(list_data, key=sum)\n    return result", "task_id": "381_4b58a38e-e6a3-42fa-bda7-77b6b12f206c", "test_setup_code": "", "test_list": ["assert sort_by_sum([[1, 2, 3], [4, 5], [1, 1, 1, 1]]) == [[1, 1, 1, 1], [1, 2, 3], [4, 5]]", "assert sort_by_sum([[10], [3, 4, 5], [2, 2, 2, 2]]) == [[2, 2, 2, 2], [3, 4, 5], [10]]", "assert sort_by_sum([[], [0], [-1, -1, -1], [1, 1, 1]]) == [[], [-1, -1, -1], [0], [1, 1, 1]]", "assert sort_by_sum([[100], [50, 50], [25, 25, 25, 25], [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]]) == [[10, 10, 10, 10, 10, 10, 10, 10, 10, 10], [25, 25, 25, 25], [50, 50], [100]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the last element of the inner lists.", "code": "def sort_by_last_element(list_data):\n    result = sorted(list_data, key=lambda x: x[-1])\n    return result", "task_id": "381_9625db8c-a956-41e8-9ea6-57b09087b3f5", "test_setup_code": "", "test_list": ["assert sort_by_last_element([[3, 1], [2, 3], [1, 2]]) == [[3, 1], [1, 2], [2, 3]]", "assert sort_by_last_element([[1, 5], [2, 4], [3, 3], [4, 2], [5, 1]]) == [[5, 1], [4, 2], [3, 3], [2, 4], [1, 5]]", "assert sort_by_last_element([[1, 1], [2, 2], [3, 3]]) == [[1, 1], [2, 2], [3, 3]]", "assert sort_by_last_element([[1, 2], [1, 2], [1, 2]]) == [[1, 2], [1, 2], [1, 2]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the first element of the inner lists.", "code": "def sort_by_first_element(list_data):\n    result = sorted(list_data, key=lambda x: x[0])\n    return result", "task_id": "381_0a9f4a07-9b67-492e-aab6-dddde4e60826", "test_setup_code": "", "test_list": ["assert sort_by_first_element([[3, 2], [1, 4], [2, 3]]) == [[1, 4], [2, 3], [3, 2]]", "assert sort_by_first_element([[5, 1], [2, 2], [3, 3], [1, 4]]) == [[1, 4], [2, 2], [3, 3], [5, 1]]", "assert sort_by_first_element([[1, 2], [1, 3], [1, 1]]) == [[1, 2], [1, 3], [1, 1]]", "assert sort_by_first_element([[10, 2], [5, 3], [7, 1], [3, 4], [8, 5]]) == [[3, 4], [5, 3], [7, 1], [8, 5], [10, 2]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the maximum element of the inner lists.", "code": "def sort_by_max_element(list_data):\n    result = sorted(list_data, key=lambda x: max(x))\n    return result", "task_id": "381_36116c4a-23b4-481a-b9d1-749ccff4fda5", "test_setup_code": "", "test_list": ["assert sort_by_max_element([[1, 3, 2], [4, 5, 1], [0, 0, 0]]) == [[0, 0, 0], [1, 3, 2], [4, 5, 1]]", "assert sort_by_max_element([[10], [5], [7], [1]]) == [[1], [5], [7], [10]]", "assert sort_by_max_element([[-5, -2, -10], [-1, -3, -7], [-20, -15, -30]]) == [[-20, -15, -30], [-5, -2, -10], [-1, -3, -7]]", "assert sort_by_max_element([[100, 2], [99, 3], [100, 1]]) == [[99, 3], [100, 2], [100, 1]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the minimum element of the inner lists.", "code": "def sort_by_min_element(list_data):\n    result = sorted(list_data, key=lambda x: min(x))\n    return result", "task_id": "381_8e1c1ff4-3614-4659-8a83-b2892f88e489", "test_setup_code": "", "test_list": ["assert sort_by_min_element([[3, 4, 2], [1, 5, 6], [7, 8, 0]]) == [[7, 8, 0], [1, 5, 6], [3, 4, 2]]", "assert sort_by_min_element([[10, 20], [5, 15], [0, 25]]) == [[0, 25], [5, 15], [10, 20]]", "assert sort_by_min_element([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == [[1, 2, 3], [1, 2, 3], [1, 2, 3]]", "assert sort_by_min_element([[5], [3], [4], [2], [1]]) == [[1], [2], [3], [4], [5]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the product of the elements in the inner lists.", "code": "from functools import reduce\nimport operator\n\ndef sort_by_product(list_data):\n    result = sorted(list_data, key=lambda x: reduce(operator.mul, x, 1))\n    return result", "task_id": "381_d7f0b452-d0d3-4bb0-b5d5-ee9ea11f29a4", "test_setup_code": "", "test_list": ["assert sort_by_product([[1, 2], [3, 4], [1, 1]]) == [[1, 1], [1, 2], [3, 4]]", "assert sort_by_product([[0, 1], [2, 2], [3, 3]]) == [[0, 1], [2, 2], [3, 3]]", "assert sort_by_product([[1, -1], [-2, -2], [0, 0]]) == [[0, 0], [1, -1], [-2, -2]]", "assert sort_by_product([[1], [2], [3], [0]]) == [[0], [1], [2], [3]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of even elements in the inner lists.", "code": "def sort_by_even_count(list_data):\n    result = sorted(list_data, key=lambda x: sum(1 for i in x if i % 2 == 0))\n    return result", "task_id": "381_dcb2f56f-106f-4eaa-bc5e-34542b138335", "test_setup_code": "", "test_list": ["assert sort_by_even_count([[1, 2, 3], [4, 6, 8], [1, 3, 5], [2, 4, 6, 8]]) == [[1, 3, 5], [1, 2, 3], [4, 6, 8], [2, 4, 6, 8]]", "assert sort_by_even_count([[10, 20], [1, 3], [2, 4, 6], [5, 7, 9]]) == [[1, 3], [5, 7, 9], [10, 20], [2, 4, 6]]", "assert sort_by_even_count([[], [2, 4], [1, 2, 3, 4], [1, 3, 5, 7]]) == [[], [1, 3, 5, 7], [2, 4], [1, 2, 3, 4]]", "assert sort_by_even_count([[0], [1], [2], [3, 5, 7], [4, 6, 8]]) == [[1], [3, 5, 7], [0], [2], [4, 6, 8]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of odd elements in the inner lists.", "code": "def sort_by_odd_count(list_data):\n    result = sorted(list_data, key=lambda x: sum(1 for i in x if i % 2 != 0))\n    return result", "task_id": "381_727d1320-7944-4554-b51b-44b095fae68f", "test_setup_code": "", "test_list": ["assert sort_by_odd_count([[1, 2, 3], [4, 6, 8], [1, 3, 5]]) == [[4, 6, 8], [1, 2, 3], [1, 3, 5]]", "assert sort_by_odd_count([[10, 20, 30], [11, 13, 15], [2, 4, 6]]) == [[10, 20, 30], [2, 4, 6], [11, 13, 15]]", "assert sort_by_odd_count([[1], [2], [3, 5, 7], [8, 10, 12]]) == [[2], [8, 10, 12], [1], [3, 5, 7]]", "assert sort_by_odd_count([[], [1, 1], [2, 2], [3, 3, 3]]) == [[], [2, 2], [1, 1], [3, 3, 3]]"], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of unique elements in the inner lists.", "code": "def sort_by_unique_elements(list_data):\n    result = sorted(list_data, key=lambda x: len(set(x)))\n    return result", "task_id": "381_bd3ad94b-3908-459a-802c-712869f7ef7b", "test_setup_code": "", "test_list": ["assert sort_by_unique_elements([[1, 2, 2], [3, 4], [5, 5, 5], [6, 7, 8]]) == [[5, 5, 5], [1, 2, 2], [3, 4], [6, 7, 8]]", "assert sort_by_unique_elements([[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]) == [[1], [2, 2], [3, 3, 3], [4, 4, 4, 4]]", "assert sort_by_unique_elements([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == [[6], [4, 5], [1, 2, 3], [7, 8, 9, 10]]", "assert sort_by_unique_elements([[], [1, 1], [2, 3, 3], [4, 5, 6]]) == [[], [1, 1], [2, 3, 3], [4, 5, 6]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n identity matrix.", "code": "def create_identity_matrix(n: int) -> list[list[int]]:\n    return [[1 if i == j else 0 for j in range(n)] for i in range(n)]", "task_id": "380_70353bbf-4349-42e0-9095-3c3c5727cebf", "test_setup_code": "", "test_list": ["assert create_identity_matrix(1) == [[1]]", "assert create_identity_matrix(2) == [[1, 0], [0, 1]]", "assert create_identity_matrix(3) == [[1, 0, 0], [0, 1, 0], [0, 0, 1]]", "assert create_identity_matrix(4) == [[1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix with a given value on the diagonal and zeros elsewhere.", "code": "def create_diagonal_matrix(n: int, value: int) -> list[list[int]]:\n    return [[value if i == j else 0 for j in range(n)] for i in range(n)]", "task_id": "380_2ba1b9b7-35fa-45f4-96d3-5c2ddc5c12d0", "test_setup_code": "", "test_list": ["assert create_diagonal_matrix(1, 5) == [[5]]", "assert create_diagonal_matrix(3, 2) == [[2, 0, 0], [0, 2, 0], [0, 0, 2]]", "assert create_diagonal_matrix(4, 0) == [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]", "assert create_diagonal_matrix(2, -1) == [[-1, 0], [0, -1]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n upper triangular matrix filled with 1s.", "code": "def create_upper_triangular_matrix(n: int) -> list[list[int]]:\n    return [[1 if j >= i else 0 for j in range(n)] for i in range(n)]", "task_id": "380_581fffde-197e-4163-8138-e4892100a4dc", "test_setup_code": "", "test_list": ["assert create_upper_triangular_matrix(1) == [[1]]", "assert create_upper_triangular_matrix(2) == [[1, 1], [0, 1]]", "assert create_upper_triangular_matrix(3) == [[1, 1, 1], [0, 1, 1], [0, 0, 1]]", "assert create_upper_triangular_matrix(4) == [[1, 1, 1, 1], [0, 1, 1, 1], [0, 0, 1, 1], [0, 0, 0, 1]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n checkerboard matrix of 0s and 1s, starting with 0 in the top-left corner.", "code": "def create_checkerboard_matrix(n: int) -> list[list[int]]:\n    return [[(i + j) % 2 for j in range(n)] for i in range(n)]", "task_id": "380_6167472f-e5cc-4ea3-b079-fb394635bd05", "test_setup_code": "", "test_list": ["assert create_checkerboard_matrix(1) == [[0]]", "assert create_checkerboard_matrix(2) == [[0, 1], [1, 0]]", "assert create_checkerboard_matrix(3) == [[0, 1, 0], [1, 0, 1], [0, 1, 0]]", "assert create_checkerboard_matrix(4) == [[0, 1, 0, 1], [1, 0, 1, 0], [0, 1, 0, 1], [1, 0, 1, 0]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix filled with numbers from 1 to n^2 in a spiral order.", "code": "def create_spiral_matrix(n: int) -> list[list[int]]:\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        for i in range(right, left - 1, -1):\n            matrix[bottom][i] = num\n            num += 1\n        bottom -= 1\n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = num\n            num += 1\n        left += 1\n    return matrix", "task_id": "380_5cc6fe3c-1d0b-473e-9efb-530351a6f03f", "test_setup_code": "", "test_list": ["assert create_spiral_matrix(1) == [[1]]", "assert create_spiral_matrix(2) == [[1, 2], [4, 3]]", "assert create_spiral_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]", "assert create_spiral_matrix(4) == [[1, 2, 3, 4], [12, 13, 14, 5], [11, 16, 15, 6], [10, 9, 8, 7]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n multiplication table.", "code": "def create_multiplication_table(n: int) -> list[list[int]]:\n    return [[(i + 1) * (j + 1) for j in range(n)] for i in range(n)]", "task_id": "380_e20bfab2-69e8-4276-9eb1-ac6a850d0828", "test_setup_code": "", "test_list": ["assert create_multiplication_table(1) == [[1]]", "assert create_multiplication_table(2) == [[1, 2], [2, 4]]", "assert create_multiplication_table(3) == [[1, 2, 3], [2, 4, 6], [3, 6, 9]]", "assert create_multiplication_table(5) == [[1, 2, 3, 4, 5], [2, 4, 6, 8, 10], [3, 6, 9, 12, 15], [4, 8, 12, 16, 20], [5, 10, 15, 20, 25]]"], "challenge_test_list": []}
{"text": "Write a function to generate the first n rows of Pascal's triangle.", "code": "def create_pascals_triangle(n: int) -> list[list[int]]:\n    triangle = []\n    for i in range(n):\n        row = [1] * (i + 1)\n        for j in range(1, i):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle", "task_id": "380_b533e11d-94ae-4d5e-a2bd-a3b1e048cdc5", "test_setup_code": "", "test_list": ["assert create_pascals_triangle(1) == [[1]]", "assert create_pascals_triangle(2) == [[1], [1, 1]]", "assert create_pascals_triangle(5) == [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1]]", "assert create_pascals_triangle(0) == []"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix where each element is the Fibonacci number at that position.", "code": "def create_fibonacci_matrix(n: int) -> list[list[int]]:\n    def fibonacci(k: int) -> int:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, k + 1):\n                a, b = b, a + b\n            return b\n    return [[fibonacci(i * n + j) for j in range(n)] for i in range(n)]", "task_id": "380_5e84a355-ae23-400d-a6f9-f4858fb9bd86", "test_setup_code": "", "test_list": ["assert create_fibonacci_matrix(1) == [[0]]", "assert create_fibonacci_matrix(2) == [[0, 1], [1, 2]]", "assert create_fibonacci_matrix(3) == [[0, 1, 1], [2, 3, 5], [8, 13, 21]]", "assert create_fibonacci_matrix(4) == [[0, 1, 1, 2], [3, 5, 8, 13], [21, 34, 55, 89], [144, 233, 377, 610]]"], "challenge_test_list": []}
{"text": "Write a function to generate an n x n Hilbert matrix.", "code": "def create_hilbert_matrix(n: int) -> list[list[float]]:\n    return [[1 / (i + j + 1) for j in range(n)] for i in range(n)]", "task_id": "380_93c0740c-8680-4841-91b6-c7741fdf15cb", "test_setup_code": "", "test_list": ["assert create_hilbert_matrix(1) == [[1.0]]", "assert create_hilbert_matrix(2) == [[1.0, 0.5], [0.5, 0.3333333333333333]]", "assert create_hilbert_matrix(3) == [[1.0, 0.5, 0.3333333333333333], [0.5, 0.3333333333333333, 0.25], [0.3333333333333333, 0.25, 0.2]]", "assert create_hilbert_matrix(4) == [[1.0, 0.5, 0.3333333333333333, 0.25], [0.5, 0.3333333333333333, 0.25, 0.2], [0.3333333333333333, 0.25, 0.2, 0.16666666666666666], [0.25, 0.2, 0.16666666666666666, 0.14285714285714285]]"], "challenge_test_list": []}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def toggle_even_bits(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_8f991a8c-1cb1-4194-a423-687fc4d95cf3", "test_setup_code": "", "test_list": ["assert toggle_even_bits(10) == 5", "assert toggle_even_bits(0) == 0", "assert toggle_even_bits(255) == 170", "assert toggle_even_bits(1) == 1"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in a specified range [start, end].", "code": "def toggle_bits_in_range(n, start, end):\n    res = 0\n    for i in range(start, end + 1):\n        res = res | (1 << i)\n    return n ^ res", "task_id": "383_513c80cd-9b0c-465d-9d02-d36b06721dab", "test_setup_code": "", "test_list": ["assert toggle_bits_in_range(29, 1, 3) == 22", "assert toggle_bits_in_range(0, 0, 4) == 31", "assert toggle_bits_in_range(255, 0, 7) == 0", "assert toggle_bits_in_range(1023, 5, 9) == 895"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number except the first and last bits.", "code": "def toggle_bits_except_first_last(n):\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    res = 0\n    for i in range(1, num_bits - 1):\n        res = res | (1 << i)\n    return n ^ res", "task_id": "383_f44f9224-4ac8-4577-a5a6-b5af944ce34b", "test_setup_code": "", "test_list": ["assert toggle_bits_except_first_last(0b101010) == 0b110001", "assert toggle_bits_except_first_last(0b111111) == 0b100000", "assert toggle_bits_except_first_last(0b1000001) == 0b1000001", "assert toggle_bits_except_first_last(0b0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at prime indices.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef toggle_prime_index_bits(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if is_prime(count):\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_584e76fc-00a5-4c06-9838-7b89f18db6d9", "test_setup_code": "", "test_list": ["assert toggle_prime_index_bits(10) == 5", "assert toggle_prime_index_bits(15) == 8", "assert toggle_prime_index_bits(1) == 1", "assert toggle_prime_index_bits(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions which are multiples of three.", "code": "def toggle_bits_multiple_of_three(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 3 == 0:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_76431f17-bd3d-451e-8568-614b1b42934b", "test_setup_code": "", "test_list": ["assert toggle_bits_multiple_of_three(0b101010) == 0b101000", "assert toggle_bits_multiple_of_three(0b111111) == 0b110111", "assert toggle_bits_multiple_of_three(0b1000000000) == 0b1000001000", "assert toggle_bits_multiple_of_three(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in alternating blocks of a specified size.", "code": "def toggle_bits_in_alternating_blocks(n, block_size):\n    res = 0\n    count = 0\n    temp = n\n    toggle = True\n    while temp > 0:\n        for i in range(block_size):\n            if toggle and temp > 0:\n                res = res | (1 << count)\n            count += 1\n            temp >>= 1\n        toggle = not toggle\n    return n ^ res", "task_id": "383_95f4d28f-b738-4554-977f-a00f66041c52", "test_setup_code": "", "test_list": ["assert toggle_bits_in_alternating_blocks(0b110011, 2) == 0b001100", "assert toggle_bits_in_alternating_blocks(0b10101010, 1) == 0b01010101", "assert toggle_bits_in_alternating_blocks(0b11110000, 4) == 0b00001111", "assert toggle_bits_in_alternating_blocks(0b11111111, 3) == 0b00011111"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions less than k.", "code": "def toggle_bits_less_than_k(n, k):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count < k:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_4e2d644f-5d11-460f-b182-8d3bdac67c56", "test_setup_code": "", "test_list": ["assert toggle_bits_less_than_k(10, 2) == 9", "assert toggle_bits_less_than_k(15, 3) == 8", "assert toggle_bits_less_than_k(0, 5) == 31", "assert toggle_bits_less_than_k(255, 8) == 0"], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in reverse order.", "code": "def toggle_bits_in_reverse(n):\n    res = 0\n    count = 0\n    temp = n\n    num_bits = n.bit_length()\n    while temp > 0:\n        if temp & 1:\n            res = res | (1 << (num_bits - count - 1))\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_c479db2b-fcce-48bc-b20e-b76e351250ba", "test_setup_code": "", "test_list": ["assert toggle_bits_in_reverse(0) == 0", "assert toggle_bits_in_reverse(1) == 1", "assert toggle_bits_in_reverse(5) == 2", "assert toggle_bits_in_reverse(15) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the frequency of the largest value in a given array.", "code": "def frequency_Of_Largest(n, arr): \n    mx = arr[0] \n    freq = 1\n    for i in range(1, n): \n        if (arr[i] > mx): \n            mx = arr[i] \n            freq = 1\n        elif (arr[i] == mx): \n            freq += 1\n    return freq", "task_id": "384_aee933a3-b05b-4d14-8988-c9e54df4ee61", "test_setup_code": "", "test_list": ["assert frequency_Of_Largest(5, [1, 3, 3, 2, 3]) == 3", "assert frequency_Of_Largest(4, [4, 4, 4, 4]) == 4", "assert frequency_Of_Largest(6, [1, 2, 3, 4, 5, 6]) == 1", "assert frequency_Of_Largest(3, [7, 7, 7]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the smallest value in a given array.", "code": "def sum_Of_Smallest(n, arr): \n    mn = arr[0] \n    for i in range(1, n): \n        if (arr[i] < mn): \n            mn = arr[i] \n    return mn * arr.count(mn)", "task_id": "384_2b24f69a-6350-4136-84d4-867a72d4dce2", "test_setup_code": "", "test_list": ["assert sum_Of_Smallest(5, [3, 1, 2, 1, 4]) == 2", "assert sum_Of_Smallest(4, [7, 7, 7, 7]) == 28", "assert sum_Of_Smallest(3, [-1, -2, -3]) == -3", "assert sum_Of_Smallest(6, [0, 0, 0, 1, 2, 3]) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given array.", "code": "def count_Even_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] % 2 == 0: \n            count += 1\n    return count", "task_id": "384_d4bb2419-b94f-4fb5-9faf-c18e1728ab0d", "test_setup_code": "", "test_list": ["assert count_Even_Numbers(5, [1, 2, 3, 4, 5]) == 2", "assert count_Even_Numbers(4, [2, 4, 6, 8]) == 4", "assert count_Even_Numbers(3, [1, 3, 5]) == 0", "assert count_Even_Numbers(6, [0, -2, -4, 7, 9, 11]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in a given array.", "code": "def count_Odd_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] % 2 != 0: \n            count += 1\n    return count", "task_id": "384_55caa6a8-852f-4961-91a3-30328a6a60d3", "test_setup_code": "", "test_list": ["assert count_Odd_Numbers(5, [1, 2, 3, 4, 5]) == 3", "assert count_Odd_Numbers(4, [2, 4, 6, 8]) == 0", "assert count_Odd_Numbers(6, [1, 3, 5, 7, 9, 11]) == 6", "assert count_Odd_Numbers(0, []) == 0"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at even indices in a given array.", "code": "def sum_Of_Even_Indexed_Elements(n, arr): \n    total = 0\n    for i in range(0, n, 2): \n        total += arr[i]\n    return total", "task_id": "384_21c9fa06-5a2f-433d-ba05-b8282a9c124a", "test_setup_code": "", "test_list": ["assert sum_Of_Even_Indexed_Elements(5, [1, 2, 3, 4, 5]) == 9", "assert sum_Of_Even_Indexed_Elements(4, [10, 20, 30, 40]) == 40", "assert sum_Of_Even_Indexed_Elements(0, []) == 0", "assert sum_Of_Even_Indexed_Elements(6, [1, -1, 1, -1, 1, -1]) == 3"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at odd indices in a given array.", "code": "def sum_Of_Odd_Indexed_Elements(n, arr): \n    total = 0\n    for i in range(1, n, 2): \n        total += arr[i]\n    return total", "task_id": "384_834aea14-8e1b-4a8a-a58a-ebe50d746db2", "test_setup_code": "", "test_list": ["assert sum_Of_Odd_Indexed_Elements(5, [1, 2, 3, 4, 5]) == 6", "assert sum_Of_Odd_Indexed_Elements(4, [10, 20, 30, 40]) == 60", "assert sum_Of_Odd_Indexed_Elements(1, [5]) == 0", "assert sum_Of_Odd_Indexed_Elements(6, [0, -1, -2, -3, -4, -5]) == -9"], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in a given array.", "code": "def product_Of_All_Elements(n, arr): \n    product = 1\n    for i in range(n): \n        product *= arr[i]\n    return product", "task_id": "384_51ef8f05-c5fc-4272-a44b-372bde833318", "test_setup_code": "", "test_list": ["assert product_Of_All_Elements(4, [1, 2, 3, 4]) == 24", "assert product_Of_All_Elements(3, [-1, 2, -3]) == 6", "assert product_Of_All_Elements(5, [0, 1, 2, 3, 4]) == 0", "assert product_Of_All_Elements(1, [5]) == 5"], "challenge_test_list": []}
{"text": "Write a python function to find the average of all elements in a given array.", "code": "def average_Of_All_Elements(n, arr): \n    total = sum(arr)\n    return total / n", "task_id": "384_24792aa0-4e3a-452a-bc57-149294f98516", "test_setup_code": "", "test_list": ["assert average_Of_All_Elements(5, [1, 2, 3, 4, 5]) == 3.0", "assert average_Of_All_Elements(3, [0, 0, 0]) == 0.0", "assert average_Of_All_Elements(4, [-1, -2, -3, -4]) == -2.5", "assert average_Of_All_Elements(1, [100]) == 100.0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in a given array.", "code": "def count_Negative_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] < 0: \n            count += 1\n    return count", "task_id": "384_3edd25a6-e1bc-4355-9c91-77ad3d5c9fe9", "test_setup_code": "", "test_list": ["assert count_Negative_Numbers(5, [1, -2, -3, 4, 5]) == 2", "assert count_Negative_Numbers(3, [-1, -2, -3]) == 3", "assert count_Negative_Numbers(4, [0, 1, 2, 3]) == 0", "assert count_Negative_Numbers(0, []) == 0"], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a given array.", "code": "def count_Positive_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] > 0: \n            count += 1\n    return count", "task_id": "384_f48178b2-d004-4371-a65e-ee9971e54c75", "test_setup_code": "", "test_list": ["assert count_Positive_Numbers(5, [1, -2, 3, 4, -5]) == 3", "assert count_Positive_Numbers(3, [-1, -2, -3]) == 0", "assert count_Positive_Numbers(4, [0, 0, 0, 0]) == 0", "assert count_Positive_Numbers(6, [1, 2, 3, 4, 5, 6]) == 6"], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a circularly sorted array.", "code": "def find_min_element(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return A[left]\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return A[mid]\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_c19d1b5e-6078-4d99-a8e0-2355d6e15706", "test_setup_code": "", "test_list": ["assert find_min_element([4, 5, 6, 7, 0, 1, 2, 3]) == 0", "assert find_min_element([10, 20, 30, 40, 50, 5, 7, 9]) == 5", "assert find_min_element([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 1", "assert find_min_element([2]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a circularly sorted array.", "code": "def find_max_element(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return A[right]\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] >= A[next] and A[mid] >= A[prev]:\n            return A[mid]\n        elif A[mid] >= A[left]:\n            left = mid + 1\n        elif A[mid] <= A[right]:\n            right = mid - 1\n    return -1", "task_id": "382_c749b08f-1c90-4fcd-9941-87f34720603a", "test_setup_code": "", "test_list": ["assert find_max_element([4, 5, 6, 7, 0, 1, 2, 3]) == 7", "assert find_max_element([10, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 10", "assert find_max_element([1]) == 1", "assert find_max_element([2, 3, 4, 5, 6, 7, 8, 9, 10, 1]) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain duplicates.", "code": "def find_rotation_count_with_duplicates(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] < A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        if A[mid] == A[left] == A[right]:\n            left += 1\n            right -= 1\n        elif A[mid] <= A[right] or A[mid] == A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left] or A[mid] == A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_f507fecb-39c3-4b51-ae5d-617b48121b0c", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_duplicates([3, 4, 5, 1, 2]) == 3", "assert find_rotation_count_with_duplicates([1, 2, 3, 4, 5]) == 0", "assert find_rotation_count_with_duplicates([2, 2, 2, 0, 1, 2]) == 3", "assert find_rotation_count_with_duplicates([2, 2, 2, 2, 2, 2]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array sorted in descending order.", "code": "def find_rotation_count_descending(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] >= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] >= A[next] and A[mid] >= A[prev]:\n            return mid\n        elif A[mid] >= A[right]:\n            right = mid - 1\n        elif A[mid] <= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_0914a5cf-6b45-42e4-9874-2a9a8963f9da", "test_setup_code": "", "test_list": ["assert find_rotation_count_descending([5, 4, 3, 2, 1]) == 0", "assert find_rotation_count_descending([3, 2, 1, 5, 4]) == 3", "assert find_rotation_count_descending([2, 1, 5, 4, 3]) == 2", "assert find_rotation_count_descending([1, 5, 4, 3, 2]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain negative numbers.", "code": "def find_rotation_count_with_negatives(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_30525e34-d149-442f-b5cb-2fba802a1198", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_negatives([4, 5, 6, 7, 1, 2, 3]) == 4", "assert find_rotation_count_with_negatives([-3, -2, -1, 0, 1, 2, 3]) == 0", "assert find_rotation_count_with_negatives([2, 3, 4, 5, -5, -4, -3, -2, -1, 0, 1]) == 4", "assert find_rotation_count_with_negatives([1]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain floating point numbers.", "code": "def find_rotation_count_with_floats(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_980923ae-ec17-4031-92a8-4c058de4b9fc", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_floats([4.5, 5.1, 6.2, 1.0, 2.3, 3.4]) == 3", "assert find_rotation_count_with_floats([1.1, 2.2, 3.3, 4.4, 5.5, 6.6]) == 0", "assert find_rotation_count_with_floats([3.3, 4.4, 5.5, 6.6, 1.1, 2.2]) == 4", "assert find_rotation_count_with_floats([2.2]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array of strings.", "code": "def find_rotation_count_with_strings(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_880f5813-044c-49e0-ad5e-8f3f49610a24", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_strings(['c', 'd', 'e', 'f', 'a', 'b']) == 4", "assert find_rotation_count_with_strings(['apple', 'banana', 'cherry', 'date', 'elderberry']) == 0", "assert find_rotation_count_with_strings(['zebra', 'apple', 'banana', 'cherry', 'date']) == 1", "assert find_rotation_count_with_strings(['z', 'a', 'b', 'c', 'd', 'e', 'f', 'g']) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain very large numbers.", "code": "def find_rotation_count_with_large_numbers(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_f445ee31-5e55-4fad-8313-6c8605ee5d2c", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_large_numbers([15, 18, 2, 3, 6, 12]) == 2", "assert find_rotation_count_with_large_numbers([7, 9, 11, 12, 5]) == 4", "assert find_rotation_count_with_large_numbers([1, 2, 3, 4, 5, 6, 7]) == 0", "assert find_rotation_count_with_large_numbers([2]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that contains only one element.", "code": "def find_rotation_count_with_single_element(A):\n    return 0 if len(A) == 1 else -1", "task_id": "382_a3c45c08-ca3b-4034-8c94-af5ac2b22014", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_single_element([1]) == 0", "assert find_rotation_count_with_single_element([2]) == 0", "assert find_rotation_count_with_single_element([100]) == 0", "assert find_rotation_count_with_single_element([]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may be empty.", "code": "def find_rotation_count_with_empty_array(A):\n    return -1 if len(A) == 0 else 0", "task_id": "382_cb1fd4fe-4a9c-48e3-b02b-7856203cb6bc", "test_setup_code": "", "test_list": ["assert find_rotation_count_with_empty_array([]) == -1", "assert find_rotation_count_with_empty_array([1, 2, 3, 4, 5]) == 0", "assert find_rotation_count_with_empty_array([3, 4, 5, 1, 2]) == 3", "assert find_rotation_count_with_empty_array([2, 3, 4, 5, 1]) == 4"], "challenge_test_list": []}
{"text": "Write a python function to check whether the hexadecimal number is a palindrome.", "code": "def is_hex_palindrome(N: str) -> bool:\n    return N == N[::-1]", "task_id": "387_82d4de1b-9e42-40eb-8a87-2451d7d3f4ac", "test_setup_code": "", "test_list": ["assert is_hex_palindrome('1A3A1') == True", "assert is_hex_palindrome('1234') == False", "assert is_hex_palindrome('A') == True", "assert is_hex_palindrome('ABBA') == True"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to a decimal number.", "code": "def hex_to_decimal(N: str) -> int:\n    return int(N, 16)", "task_id": "387_dc6c4e26-825a-4e70-9439-b5ed095ce090", "test_setup_code": "", "test_list": ["assert hex_to_decimal('1A') == 26", "assert hex_to_decimal('0') == 0", "assert hex_to_decimal('FFFF') == 65535", "assert hex_to_decimal('7F') == 127"], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a hexadecimal number.", "code": "def count_hex_digits(N: str) -> int:\n    return len(N)", "task_id": "387_bf9fef12-7e0d-4513-be35-00f16ba43896", "test_setup_code": "", "test_list": ["assert count_hex_digits('1A3F') == 4", "assert count_hex_digits('0') == 1", "assert count_hex_digits('ABCDEF') == 6", "assert count_hex_digits('1234567890ABCDEF') == 16"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to a binary number.", "code": "def hex_to_binary(N: str) -> str:\n    return bin(int(N, 16))[2:]", "task_id": "387_a9e9f6f3-2f66-46b1-845b-cfcae6e5c0ee", "test_setup_code": "", "test_list": ["assert hex_to_binary('1A') == '11010'", "assert hex_to_binary('0') == '0'", "assert hex_to_binary('FFFF') == '1111111111111111'", "assert hex_to_binary('123ABC') == '100100011101010111100'"], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to an octal number.", "code": "def hex_to_octal(N: str) -> str:\n    return oct(int(N, 16))[2:]", "task_id": "387_430e218a-a6bd-458d-aadf-3019df46b29b", "test_setup_code": "", "test_list": ["assert hex_to_octal('1A') == '32'", "assert hex_to_octal('FF') == '377'", "assert hex_to_octal('0') == '0'", "assert hex_to_octal('ABCDEF') == '12571557'"], "challenge_test_list": []}
{"text": "Write a python function to add two hexadecimal numbers and return the result as a hexadecimal number.", "code": "def hex_sum(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) + int(N2, 16))[2:].upper()", "task_id": "387_0e51e566-9ca4-4677-b24e-27a04465f6ef", "test_setup_code": "", "test_list": ["assert hex_sum('A', '5') == 'F'", "assert hex_sum('1A', '2B') == '45'", "assert hex_sum('0', '0') == '0'", "assert hex_sum('FFFFFFFF', '1') == '100000000'"], "challenge_test_list": []}
{"text": "Write a python function to multiply two hexadecimal numbers and return the result as a hexadecimal number.", "code": "def hex_product(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) * int(N2, 16))[2:].upper()", "task_id": "387_c6550f66-fcf0-4668-80bf-7b2758ed3bbc", "test_setup_code": "", "test_list": ["assert hex_product('A', 'B') == '6E'", "assert hex_product('1', '1') == '1'", "assert hex_product('0', '123ABC') == '0'", "assert hex_product('FFFF', 'FFFF') == 'FFFE0001'"], "challenge_test_list": []}
{"text": "Write a python function to find the modulus of one hexadecimal number by another and return the result as a hexadecimal number.", "code": "def hex_modulus(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) % int(N2, 16))[2:].upper()", "task_id": "387_336320d3-ba57-48d3-94d1-892d50f42c1a", "test_setup_code": "", "test_list": ["assert hex_modulus('A', '3') == '1'", "assert hex_modulus('1F4', 'A') == '4'", "assert hex_modulus('0', '1') == '0'", "assert hex_modulus('FFFFFFFF', '100') == 'FF'"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fibonacci number using recursion.", "code": "def get_fibonacci(n):\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return get_fibonacci(n-1) + get_fibonacci(n-2)", "task_id": "385_f7a5c16f-8450-4f8f-b7e6-4acce39f03d3", "test_setup_code": "", "test_list": ["assert get_fibonacci(0) == 0", "assert get_fibonacci(1) == 1", "assert get_fibonacci(5) == 5", "assert get_fibonacci(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Tribonacci number using recursion. The Tribonacci sequence starts with 0, 1, 1 and each subsequent number is the sum of the previous three.", "code": "def get_tribonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1 or n == 2:\n    return 1\n  else:\n    return get_tribonacci(n-1) + get_tribonacci(n-2) + get_tribonacci(n-3)", "task_id": "385_1bf5f71e-f1c9-4eb3-9f2f-cdb8301cc544", "test_setup_code": "", "test_list": ["assert get_tribonacci(0) == 0", "assert get_tribonacci(1) == 1", "assert get_tribonacci(3) == 2", "assert get_tribonacci(5) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Lucas number using recursion. The Lucas sequence starts with 2, 1 and each subsequent number is the sum of the previous two.", "code": "def get_lucas(n):\n  if n == 0:\n    return 2\n  elif n == 1:\n    return 1\n  else:\n    return get_lucas(n-1) + get_lucas(n-2)", "task_id": "385_91ca5687-ffd5-4053-85f6-2c88cb18b470", "test_setup_code": "", "test_list": ["assert get_lucas(0) == 2", "assert get_lucas(1) == 1", "assert get_lucas(5) == 11", "assert get_lucas(10) == 123"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Tetranacci number using recursion. The Tetranacci sequence starts with 0, 0, 0, 1 and each subsequent number is the sum of the previous four.", "code": "def get_tetranacci(n):\n  if n == 0 or n == 1 or n == 2:\n    return 0\n  elif n == 3:\n    return 1\n  else:\n    return get_tetranacci(n-1) + get_tetranacci(n-2) + get_tetranacci(n-3) + get_tetranacci(n-4)", "task_id": "385_dd524dd1-5a0e-4812-880a-60d00b74d580", "test_setup_code": "", "test_list": ["assert get_tetranacci(0) == 0", "assert get_tetranacci(3) == 1", "assert get_tetranacci(5) == 2", "assert get_tetranacci(10) == 44"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Pell number using recursion. The Pell sequence starts with 0, 1 and each subsequent number is 2 times the (n-1)th number plus the (n-2)th number.", "code": "def get_pell(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return 2 * get_pell(n-1) + get_pell(n-2)", "task_id": "385_1b343578-eee3-491b-b8a7-5f3803d2704a", "test_setup_code": "", "test_list": ["assert get_pell(0) == 0", "assert get_pell(1) == 1", "assert get_pell(2) == 2", "assert get_pell(5) == 29"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Hofstadter Q number using recursion. The Hofstadter Q sequence is defined as Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)) with initial values Q(1) = Q(2) = 1.", "code": "def get_hofstadter_q(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return get_hofstadter_q(n - get_hofstadter_q(n-1)) + get_hofstadter_q(n - get_hofstadter_q(n-2))", "task_id": "385_c9c3ebaa-2890-45cb-b407-405cac2093d7", "test_setup_code": "", "test_list": ["assert get_hofstadter_q(1) == 1", "assert get_hofstadter_q(2) == 1", "assert get_hofstadter_q(5) == 3", "assert get_hofstadter_q(10) == 5"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fermat number using recursion. The Fermat sequence is defined as F(n) = 2^(2^n) + 1.", "code": "def get_fermat(n):\n  if n == 0:\n    return 3\n  else:\n    return 2 ** (2 ** n) + 1", "task_id": "385_215dd0da-fdb5-4093-9cc0-c5710866456e", "test_setup_code": "", "test_list": ["assert get_fermat(0) == 3", "assert get_fermat(1) == 5", "assert get_fermat(2) == 17", "assert get_fermat(3) == 257"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Catalan number using recursion. The Catalan sequence is defined as C(n) = (2n)! / ((n+1)!n!).", "code": "def get_catalan(n):\n  if n == 0:\n    return 1\n  else:\n    return int((2 * (2 * n - 1) / (n + 1)) * get_catalan(n - 1))", "task_id": "385_cba6c775-8520-4104-a5f7-fbe71e0197f4", "test_setup_code": "", "test_list": ["assert get_catalan(0) == 1", "assert get_catalan(1) == 1", "assert get_catalan(3) == 5", "assert get_catalan(5) == 42"], "challenge_test_list": []}
{"text": "Write a function to find the n'th Hofstadter Female sequence number using recursion. The Hofstadter Female sequence is defined as F(n) = n - M(F(n-1)) where M is the Hofstadter Male sequence.", "code": "def get_hofstadter_female(n):\n  def get_hofstadter_male(m):\n    if m == 0:\n      return 0\n    else:\n      return m - get_hofstadter_female(get_hofstadter_male(m-1))\n  if n == 0:\n    return 1\n  else:\n    return n - get_hofstadter_male(get_hofstadter_female(n-1))", "task_id": "385_5dab1045-b728-465b-acd5-34814139de62", "test_setup_code": "", "test_list": ["assert get_hofstadter_female(0) == 1", "assert get_hofstadter_female(1) == 1", "assert get_hofstadter_female(5) == 3", "assert get_hofstadter_female(10) == 6"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is a power of 2.", "code": "def is_power_of_2(n): \n    return n > 0 and (n & (n - 1)) == 0", "task_id": "388_a8b24529-1083-4536-b4da-71ad58748eae", "test_setup_code": "", "test_list": ["assert is_power_of_2(1) == True", "assert is_power_of_2(16) == True", "assert is_power_of_2(18) == False", "assert is_power_of_2(0) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 that is strictly less than n.", "code": "def highest_power_of_2_less_than(n): \n    res = 1 \n    while res * 2 < n: \n        res *= 2 \n    return res", "task_id": "388_eccdd8c4-3a42-4bd9-9659-edaa1220be01", "test_setup_code": "", "test_list": ["assert highest_power_of_2_less_than(10) == 8", "assert highest_power_of_2_less_than(1) == 1", "assert highest_power_of_2_less_than(33) == 32", "assert highest_power_of_2_less_than(1025) == 1024"], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 that divides n.", "code": "def highest_power_of_2_divisor(n): \n    res = 1 \n    while n % (res * 2) == 0: \n        res *= 2 \n    return res", "task_id": "388_ff9191a9-9420-4a32-8834-962a18508e82", "test_setup_code": "", "test_list": ["assert highest_power_of_2_divisor(8) == 8", "assert highest_power_of_2_divisor(20) == 4", "assert highest_power_of_2_divisor(1) == 1", "assert highest_power_of_2_divisor(1024) == 1024"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is a power of 10.", "code": "def is_power_of_10(n): \n    if n <= 0: \n        return False \n    while n % 10 == 0: \n        n //= 10 \n    return n == 1", "task_id": "388_23cb4ef9-79ee-4280-ad20-3c6c2f99a3c1", "test_setup_code": "", "test_list": ["assert is_power_of_10(1) == True", "assert is_power_of_10(10) == True", "assert is_power_of_10(1000) == True", "assert is_power_of_10(0) == False", "assert is_power_of_10(-10) == False", "assert is_power_of_10(50) == False", "assert is_power_of_10(1000000000) == True", "assert is_power_of_10(1234567890) == False"], "challenge_test_list": []}
{"text": "Write a function to append a given string at the end of all items in a list.", "code": "def add_suffix(lst, suffix):\n    return [i + suffix for i in lst]", "task_id": "390_ac781650-e1a1-4dc0-bef6-687ef81c0746", "test_setup_code": "", "test_list": ["assert add_suffix(['apple', 'banana', 'cherry'], 's') == ['apples', 'bananas', 'cherrys']", "assert add_suffix([], 's') == []", "assert add_suffix(['', 'test', ''], 'ing') == ['ing', 'testing', 'ing']", "assert add_suffix(['a', 'b', 'c'], '') == ['a', 'b', 'c']"], "challenge_test_list": []}
{"text": "Write a function to replace a given substring with another substring in all items in a list.", "code": "def replace_in_list(lst, old, new):\n    return [i.replace(old, new) for i in lst]", "task_id": "390_84d740f1-6e9b-4153-8d72-ecf20dfdaf8b", "test_setup_code": "", "test_list": ["assert replace_in_list(['hello world', 'world peace'], 'world', 'earth') == ['hello earth', 'earth peace']", "assert replace_in_list(['apple', 'banana', 'cherry'], 'a', 'o') == ['opple', 'bonono', 'cherry']", "assert replace_in_list(['aaa', 'bbb', 'ccc'], 'a', 'z') == ['zzz', 'bbb', 'ccc']", "assert replace_in_list(['', 'empty', ''], 'empty', 'full') == ['', 'full', '']"], "challenge_test_list": []}
{"text": "Write a function to capitalize all items in a list.", "code": "def capitalize_list(lst):\n    return [i.capitalize() for i in lst]", "task_id": "390_05086951-a338-4a95-ae03-6321fe688b43", "test_setup_code": "", "test_list": ["assert capitalize_list(['apple', 'banana', 'cherry']) == ['Apple', 'Banana', 'Cherry']", "assert capitalize_list(['hello', 'world']) == ['Hello', 'World']", "assert capitalize_list(['a', 'b', 'c']) == ['A', 'B', 'C']", "assert capitalize_list(['']) == ['']"], "challenge_test_list": []}
{"text": "Write a function to add a given prefix and suffix to all items in a list.", "code": "def add_prefix_suffix(lst, prefix, suffix):\n    return [prefix + i + suffix for i in lst]", "task_id": "390_bd1267c8-c5b1-4707-9c9f-1475fb710f84", "test_setup_code": "", "test_list": ["assert add_prefix_suffix(['apple', 'banana', 'cherry'], 'pre_', '_suf') == ['pre_apple_suf', 'pre_banana_suf', 'pre_cherry_suf']", "assert add_prefix_suffix(['cat', 'dog'], 'animal_', '_pet') == ['animal_cat_pet', 'animal_dog_pet']", "assert add_prefix_suffix(['hello'], '', '_world') == ['hello_world']", "assert add_prefix_suffix([], 'pre_', '_suf') == []"], "challenge_test_list": []}
{"text": "Write a function to reverse all strings in a list.", "code": "def reverse_strings(lst):\n    return [i[::-1] for i in lst]", "task_id": "390_efce90ff-9836-482f-996c-a113ba23cd76", "test_setup_code": "", "test_list": ["assert reverse_strings(['hello', 'world']) == ['olleh', 'dlrow']", "assert reverse_strings(['', 'a', 'ab']) == ['', 'a', 'ba']", "assert reverse_strings(['racecar', 'madam', 'level']) == ['racecar', 'madam', 'level']", "assert reverse_strings(['12345', '67890', '!@#$%']) == ['54321', '09876', '%$#@!']"], "challenge_test_list": []}
{"text": "Write a function to filter out items in a list that are shorter than a given length.", "code": "def filter_by_length(lst, length):\n    return [i for i in lst if len(i) >= length]", "task_id": "390_de9f1b73-d3fc-4a82-b00e-29c47c2b3197", "test_setup_code": "", "test_list": ["assert filter_by_length(['apple', 'banana', 'cherry', 'date'], 6) == ['banana', 'cherry']", "assert filter_by_length(['a', 'bb', 'ccc', 'dddd'], 3) == ['ccc', 'dddd']", "assert filter_by_length([], 5) == []", "assert filter_by_length(['short', 'tiny', 'minuscule'], 10) == []"], "challenge_test_list": []}
{"text": "Write a function to append the index of each item to the item itself in a list.", "code": "def add_index(lst):\n    return [f'{i}{idx}' for idx, i in enumerate(lst)]", "task_id": "390_e4bb0ff8-bcfe-4190-96e3-0b7391424089", "test_setup_code": "", "test_list": ["assert add_index(['a', 'b', 'c']) == ['a0', 'b1', 'c2']", "assert add_index([]) == []", "assert add_index(['single']) == ['single0']", "assert add_index(['x', 'y', 'z', 'w']) == ['x0', 'y1', 'z2', 'w3']"], "challenge_test_list": []}
{"text": "Write a function to double each string in a list.", "code": "def double_strings(lst):\n    return [i * 2 for i in lst]", "task_id": "390_616f17d8-e4ab-45c3-8f3a-0c1092d1554a", "test_setup_code": "", "test_list": ["assert double_strings(['a', 'b', 'c']) == ['aa', 'bb', 'cc']", "assert double_strings(['hello', 'world']) == ['hellohello', 'worldworld']", "assert double_strings(['', 'test']) == ['', 'testtest']", "assert double_strings(['123', '456']) == ['123123', '456456']"], "challenge_test_list": []}
{"text": "Write a function to append the length of each string to the string itself in a list.", "code": "def add_length(lst):\n    return [f'{i}{len(i)}' for i in lst]", "task_id": "390_362cddf5-33d9-45e8-8ec5-bde5cbaa4968", "test_setup_code": "", "test_list": ["assert add_length(['apple', 'banana', 'cherry']) == ['apple5', 'banana6', 'cherry6']", "assert add_length(['a', 'ab', 'abc']) == ['a1', 'ab2', 'abc3']", "assert add_length(['', 'test', 'longerstring']) == ['0', 'test4', 'longerstring12']", "assert add_length(['single']) == ['single6']"], "challenge_test_list": []}
{"text": "Write a function to insert a given string at a specified position in all items in a list.", "code": "def insert_at_position(lst, string, position):\n    return [i[:position] + string + i[position:] for i in lst]", "task_id": "390_e6117ee3-094c-4cf5-ae7f-5711fc34264d", "test_setup_code": "", "test_list": ["assert insert_at_position(['apple', 'banana', 'cherry'], 'X', 1) == ['aXpple', 'bXanana', 'cXherry']", "assert insert_at_position(['dog', 'cat', 'mouse'], '123', 0) == ['123dog', '123cat', '123mouse']", "assert insert_at_position(['hello', 'world'], '!', 5) == ['hello!', 'world!']", "assert insert_at_position(['a', 'b', 'c'], 'Z', 1) == ['aZ', 'bZ', 'cZ']"], "challenge_test_list": []}
{"text": "Write a function to find the n'th triangular number.", "code": "def nth_triangular(n):\n\tif n == 0:\n\t\treturn 0\n\treturn n + nth_triangular(n - 1)", "task_id": "389_0395b562-5dff-40ac-9ba4-e70b0aab4946", "test_setup_code": "", "test_list": ["assert nth_triangular(0) == 0", "assert nth_triangular(1) == 1", "assert nth_triangular(5) == 15", "assert nth_triangular(10) == 55"], "challenge_test_list": []}
{"text": "Write a function to find the n'th square number.", "code": "def nth_square(n):\n\treturn n * n", "task_id": "389_1918b47a-555b-4a9b-a3e5-192504af6236", "test_setup_code": "", "test_list": ["assert nth_square(1) == 1", "assert nth_square(0) == 0", "assert nth_square(10) == 100", "assert nth_square(-3) == 9"], "challenge_test_list": []}
{"text": "Write a function to find the n'th pentagonal number.", "code": "def nth_pentagonal(n):\n\treturn n * (3 * n - 1) // 2", "task_id": "389_d15f6d92-60ea-436d-ad7e-a80c17bfb7d4", "test_setup_code": "", "test_list": ["assert nth_pentagonal(1) == 1", "assert nth_pentagonal(2) == 5", "assert nth_pentagonal(10) == 145", "assert nth_pentagonal(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to find the n'th harmonic number.", "code": "def nth_harmonic(n):\n\tif n == 1:\n\t\treturn 1.0\n\treturn 1.0 / n + nth_harmonic(n - 1)", "task_id": "389_b6483350-f4a6-4cf6-9fa7-8263625e9a0d", "test_setup_code": "", "test_list": ["assert nth_harmonic(1) == 1.0", "assert nth_harmonic(2) == 1.5", "assert nth_harmonic(5) == 2.283333333333333", "assert nth_harmonic(10) == 2.928968253968254"], "challenge_test_list": []}
{"text": "Write a function to find the factorial of n.", "code": "def nth_factorial(n):\n\tif n == 0 or n == 1:\n\t\treturn 1\n\treturn n * nth_factorial(n - 1)", "task_id": "389_7d65c52a-e3f8-4a6a-beff-f364459de069", "test_setup_code": "", "test_list": ["assert nth_factorial(0) == 1", "assert nth_factorial(1) == 1", "assert nth_factorial(5) == 120", "assert nth_factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to sort the given array.", "code": "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key = lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arrpos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "task_id": "386_e4bc8a1f-182d-4ad6-8068-a0dc229bde1f", "test_setup_code": "", "test_list": ["assert min_swaps_to_sort([4, 3, 2, 1]) == 2", "assert min_swaps_to_sort([1, 5, 4, 3, 2]) == 2", "assert min_swaps_to_sort([1, 2, 3, 4, 5]) == 0", "assert min_swaps_to_sort([2, 3, 4, 1, 5]) == 3"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given string a palindrome.", "code": "def min_swaps_to_palindrome(s):\n    def is_palindrome_possible(s):\n        count = [0] * 256\n        for char in s:\n            count[ord(char)] += 1\n        odd = 0\n        for i in range(256):\n            if count[i] % 2 != 0:\n                odd += 1\n        return odd <= 1\n\n    if not is_palindrome_possible(s):\n        return -1\n\n    s = list(s)\n    n = len(s)\n    ans = 0\n    for i in range(n // 2):\n        left = i\n        right = n - left - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            else:\n                right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            ans += 1\n            left -= 1\n        else:\n            for j in range(right, n - left - 1):\n                s[j], s[j + 1] = s[j + 1], s[j]\n                ans += 1\n    return ans", "task_id": "386_40135ce0-6daf-4895-bb5c-c8d7192ea16d", "test_setup_code": "", "test_list": ["assert min_swaps_to_palindrome('mamad') == 3", "assert min_swaps_to_palindrome('asflkj') == -1", "assert min_swaps_to_palindrome('aabb') == 2", "assert min_swaps_to_palindrome('racecar') == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to group all 1's together in the given binary array.", "code": "def min_swaps_to_group_ones(arr):\n    ones = arr.count(1)\n    if ones == 0:\n        return 0\n    max_ones_in_window = 0\n    current_ones_in_window = 0\n    for i in range(ones):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n    max_ones_in_window = current_ones_in_window\n    for i in range(ones, len(arr)):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n        if arr[i - ones] == 1:\n            current_ones_in_window -= 1\n        max_ones_in_window = max(max_ones_in_window, current_ones_in_window)\n    return ones - max_ones_in_window", "task_id": "386_4c38f762-039c-4cb2-9bbc-9757ef679ee8", "test_setup_code": "", "test_list": ["assert min_swaps_to_group_ones([1, 0, 1, 0, 1]) == 1", "assert min_swaps_to_group_ones([1, 1, 0, 0, 1, 1, 0, 1, 0, 1]) == 2", "assert min_swaps_to_group_ones([0, 0, 0, 0, 0]) == 0", "assert min_swaps_to_group_ones([1, 1, 1, 1, 1]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given binary string alternating.", "code": "def min_swaps_to_make_binary_alternating(s):\n    def count_swaps(s, start):\n        swaps = 0\n        for i in range(len(s)):\n            if int(s[i]) != (start + i) % 2:\n                swaps += 1\n        return swaps // 2\n    return min(count_swaps(s, 0), count_swaps(s, 1))", "task_id": "386_ca00d873-0fdd-40b3-80e8-1f4bc8b3e829", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_binary_alternating('010101') == 0", "assert min_swaps_to_make_binary_alternating('111000') == 3", "assert min_swaps_to_make_binary_alternating('1100') == 1", "assert min_swaps_to_make_binary_alternating('1') == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two strings anagrams of each other.", "code": "def min_swaps_to_make_anagram(s1, s2):\n    if sorted(s1) != sorted(s2):\n        return -1\n    swaps = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            j = i\n            while s1[j] != s2[i]:\n                j += 1\n            while j > i:\n                s1[j], s1[j - 1] = s1[j - 1], s1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_b57da008-0bab-4559-8de0-b7e7239ad8f2", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_anagram('ab', 'ba') == 1", "assert min_swaps_to_make_anagram('abcd', 'dcba') == 2", "assert min_swaps_to_make_anagram('aabbcc', 'ccbbaa') == 3", "assert min_swaps_to_make_anagram('abc', 'def') == -1"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two arrays equal.", "code": "def min_swaps_to_make_equal(arr1, arr2):\n    if sorted(arr1) != sorted(arr2):\n        return -1\n    swaps = 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            j = i\n            while arr1[j] != arr2[i]:\n                j += 1\n            while j > i:\n                arr1[j], arr1[j - 1] = arr1[j - 1], arr1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_d463f307-eee6-47af-bbd8-09ae427afef1", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_equal([1, 2, 3], [3, 2, 1]) == 2", "assert min_swaps_to_make_equal([4, 3, 2, 1], [1, 2, 3, 4]) == 6", "assert min_swaps_to_make_equal([1, 1, 1], [1, 1, 1]) == 0", "assert min_swaps_to_make_equal([1, 2, 3], [4, 5, 6]) == -1"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make all elements in the given array equal.", "code": "def min_swaps_to_make_all_elements_equal(arr):\n    from collections import Counter\n    count = Counter(arr)\n    most_common = count.most_common(1)[0][0]\n    swaps = 0\n    for i in range(len(arr)):\n        if arr[i] != most_common:\n            j = i\n            while arr[j] != most_common:\n                j += 1\n            while j > i:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_064da52d-8257-4bc1-80d1-182aad2b11eb", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_all_elements_equal([1, 2, 2, 3, 3, 3]) == 3", "assert min_swaps_to_make_all_elements_equal([4, 4, 4, 4]) == 0", "assert min_swaps_to_make_all_elements_equal([1, 1, 2, 2, 3, 3, 4, 4]) == 4", "assert min_swaps_to_make_all_elements_equal([5]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two strings equal.", "code": "def min_swaps_to_make_string_equal(s1, s2):\n    if sorted(s1) != sorted(s2):\n        return -1\n    swaps = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            j = i\n            while s1[j] != s2[i]:\n                j += 1\n            while j > i:\n                s1[j], s1[j - 1] = s1[j - 1], s1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_0021d855-4e18-4c7d-909a-f174e2ce4668", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_string_equal('abcd', 'cdab') == 2", "assert min_swaps_to_make_string_equal('aabbcc', 'ccbbaa') == 3", "assert min_swaps_to_make_string_equal('abc', 'def') == -1", "assert min_swaps_to_make_string_equal('a', 'a') == 0"], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make all elements in the given array unique.", "code": "def min_swaps_to_make_all_elements_unique(arr):\n    arr.sort()\n    swaps = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            j = i\n            while j < len(arr) and arr[j] == arr[j - 1]:\n                j += 1\n            if j < len(arr):\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n    return swaps", "task_id": "386_5289b351-ea5c-4fa0-b89b-d359ae068778", "test_setup_code": "", "test_list": ["assert min_swaps_to_make_all_elements_unique([1, 2, 2, 3]) == 1", "assert min_swaps_to_make_all_elements_unique([4, 4, 4, 4]) == 3", "assert min_swaps_to_make_all_elements_unique([1, 2, 3, 4, 5]) == 0", "assert min_swaps_to_make_all_elements_unique([1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5]) == 5"], "challenge_test_list": []}
{"text": "Write a function to merge two lists into a dictionary where elements of the first list are keys and elements of the second list are values.", "code": "def merge_lists_to_dict(l1, l2):\n    return dict(zip(l1, l2))", "task_id": "391_1d648481-ca69-42f9-a446-c8da5dec88dd", "test_setup_code": "", "test_list": ["assert merge_lists_to_dict(['a', 'b', 'c'], [1, 2, 3]) == {'a': 1, 'b': 2, 'c': 3}", "assert merge_lists_to_dict(['x', 'y'], [10, 20, 30]) == {'x': 10, 'y': 20}", "assert merge_lists_to_dict([], []) == {}", "assert merge_lists_to_dict(['key1', 'key2', 'key3'], ['value1', 'value2']) == {'key1': 'value1', 'key2': 'value2'}"], "challenge_test_list": []}
{"text": "Write a function to combine three lists into a dictionary where elements of the first list are keys, elements of the second list are values, and elements of the third list are nested values.", "code": "def combine_lists_to_dict(l1, l2, l3):\n    return {x: {y: z} for x, y, z in zip(l1, l2, l3)}", "task_id": "391_82f8c476-c2b8-4d08-869a-e3903a4b60eb", "test_setup_code": "", "test_list": ["assert combine_lists_to_dict(['a', 'b', 'c'], [1, 2, 3], ['x', 'y', 'z']) == {'a': {1: 'x'}, 'b': {2: 'y'}, 'c': {3: 'z'}}", "assert combine_lists_to_dict([], [], []) == {}", "assert combine_lists_to_dict(['key1'], [10], ['value1']) == {'key1': {10: 'value1'}}", "assert combine_lists_to_dict(['k1', 'k2'], [100, 200], ['v1', 'v2']) == {'k1': {100: 'v1'}, 'k2': {200: 'v2'}}"], "challenge_test_list": []}
{"text": "Write a function to convert a list to a dictionary where the keys are the indices and the values are the elements of the list.", "code": "def list_to_dict_with_index(l1):\n    return {i: x for i, x in enumerate(l1)}", "task_id": "391_cc0ba670-d72e-4f96-beab-c86257538561", "test_setup_code": "", "test_list": ["assert list_to_dict_with_index([1, 2, 3]) == {0: 1, 1: 2, 2: 3}", "assert list_to_dict_with_index([]) == {}", "assert list_to_dict_with_index(['a', 'b', 'c']) == {0: 'a', 1: 'b', 2: 'c'}", "assert list_to_dict_with_index([None, True, False, 42]) == {0: None, 1: True, 2: False, 3: 42}"], "challenge_test_list": []}
{"text": "Write a function to convert two lists into a dictionary where the elements of the first list are keys and the elements of the second list are values in a list.", "code": "def lists_to_dict_of_lists(l1, l2):\n    return {x: [y] for x, y in zip(l1, l2)}", "task_id": "391_e7845f78-914d-4455-a9b6-77d4bcbd5c3e", "test_setup_code": "", "test_list": ["assert lists_to_dict_of_lists(['a', 'b', 'c'], [1, 2, 3]) == {'a': [1], 'b': [2], 'c': [3]}", "assert lists_to_dict_of_lists(['key1', 'key2'], ['value1', 'value2']) == {'key1': ['value1'], 'key2': ['value2']}", "assert lists_to_dict_of_lists([], []) == {}", "assert lists_to_dict_of_lists(['x', 'y', 'z'], [10, 20, 30, 40]) == {'x': [10], 'y': [20], 'z': [30]}"], "challenge_test_list": []}
{"text": "Write a function to create a nested dictionary from two lists where elements of the first list are keys and elements of the second list are dictionaries with a single key-value pair.", "code": "def nested_dict_from_lists(l1, l2):\n    return {x: {y: None} for x, y in zip(l1, l2)}", "task_id": "391_0d524041-9faf-42f0-857a-5c4801618b18", "test_setup_code": "", "test_list": ["assert nested_dict_from_lists(['a', 'b', 'c'], ['x', 'y', 'z']) == {'a': {'x': None}, 'b': {'y': None}, 'c': {'z': None}}", "assert nested_dict_from_lists([], []) == {}", "assert nested_dict_from_lists(['key1'], ['value1']) == {'key1': {'value1': None}}", "assert nested_dict_from_lists(['key1', 'key2'], ['value1', 'value2']) == {'key1': {'value1': None}, 'key2': {'value2': None}}"], "challenge_test_list": []}
{"text": "Write a function to merge a list of dictionaries into a single dictionary.", "code": "def dict_from_list_of_dicts(l):\n    result = {}\n    for d in l:\n        result.update(d)\n    return result", "task_id": "391_3695742f-fca3-49f7-8918-5182d1064987", "test_setup_code": "", "test_list": ["assert dict_from_list_of_dicts([{'a': 1}, {'b': 2}, {'c': 3}]) == {'a': 1, 'b': 2, 'c': 3}", "assert dict_from_list_of_dicts([{'a': 1, 'b': 2}, {'b': 3, 'c': 4}]) == {'a': 1, 'b': 3, 'c': 4}", "assert dict_from_list_of_dicts([{'a': 1}, {}, {'b': 2}, {}]) == {'a': 1, 'b': 2}", "assert dict_from_list_of_dicts([]) == {}"], "challenge_test_list": []}
{"text": "Write a function to create a dictionary from two lists where the first list contains keys and the second list contains lists of values.", "code": "def dict_from_two_lists(l1, l2):\n    return {x: [y] for x, y in zip(l1, l2)}", "task_id": "391_08e29a46-8f07-4a81-9f51-b69c461d0fb3", "test_setup_code": "", "test_list": ["assert dict_from_two_lists(['a', 'b', 'c'], [[1], [2], [3]]) == {'a': [1], 'b': [2], 'c': [3]}", "assert dict_from_two_lists(['key1', 'key2'], [['value1', 'value2'], ['value3']]) == {'key1': ['value1', 'value2'], 'key2': ['value3']}", "assert dict_from_two_lists([], []) == {}", "assert dict_from_two_lists(['only_key'], [['only_value']]) == {'only_key': ['only_value']}"], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.", "code": "def dict_from_list_of_tuples(tuples):\n    return dict(tuples)", "task_id": "391_b53ba1ae-e7ae-4928-9404-470fae3b361e", "test_setup_code": "", "test_list": ["assert dict_from_list_of_tuples([(1, 'one'), (2, 'two'), (3, 'three')]) == {1: 'one', 2: 'two', 3: 'three'}", "assert dict_from_list_of_tuples([('a', 1), ('b', 2), ('c', 3)]) == {'a': 1, 'b': 2, 'c': 3}", "assert dict_from_list_of_tuples([]) == {}", "assert dict_from_list_of_tuples([(True, False), (False, True)]) == {True: False, False: True}"], "challenge_test_list": []}
{"text": "Write a function to convert a list into a dictionary where each element of the list is a key and all values are set to a default value.", "code": "def dict_from_list_with_default(l1, default_value):\n    return {x: default_value for x in l1}", "task_id": "391_0d277a57-e73b-45f2-82f6-181f6ddd9b26", "test_setup_code": "", "test_list": ["assert dict_from_list_with_default(['a', 'b', 'c'], 1) == {'a': 1, 'b': 1, 'c': 1}", "assert dict_from_list_with_default([], 'default') == {}", "assert dict_from_list_with_default(['key1', 'key2'], None) == {'key1': None, 'key2': None}", "assert dict_from_list_with_default(['x', 'y', 'z', 'x'], 0) == {'x': 0, 'y': 0, 'z': 0}"], "challenge_test_list": []}
{"text": "Write a function to find the list with minimum length using lambda function.", "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)", "task_id": "393_b3fb688a-3df9-4522-b27f-878b465fd05c", "test_setup_code": "", "test_list": ["assert min_length_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == (2, [4, 5])", "assert min_length_list([['a', 'b', 'c'], ['d'], ['e', 'f']]) == (1, ['d'])", "assert min_length_list([[], [1, 2], [3, 4, 5]]) == (0, [])", "assert min_length_list([[1, 2], [3, 4], [5, 6]]) == (2, [1, 2])"], "challenge_test_list": []}
{"text": "Write a function to find the longest string in a list of strings using lambda function.", "code": "def longest_string(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_string = max(input_list, key=lambda i: len(i))\n    return (max_length, max_string)", "task_id": "393_0797131c-2210-4ddb-bccf-ab361823b846", "test_setup_code": "", "test_list": ["assert longest_string(['apple', 'banana', 'cherry', 'date']) == (6, 'banana')", "assert longest_string(['a', 'ab', 'abc', 'abcd', 'abcde']) == (5, 'abcde')", "assert longest_string(['']) == (0, '')", "assert longest_string(['short', 'medium', 'longest', 'tiny', '']) == (7, 'longest')"], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum sum of elements using lambda function.", "code": "def max_sum_list(input_list):\n    max_sum = max(sum(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: sum(i))\n    return (max_sum, max_list)", "task_id": "393_64c77091-902b-4dea-94b1-e547d211d727", "test_setup_code": "", "test_list": ["assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (24, [7, 8, 9])", "assert max_sum_list([[0], [1, -1], [2, 2, -2], [3, 3, 3]]) == (9, [3, 3, 3])", "assert max_sum_list([[], [0], [-1, -2, -3], [1, 2, 3, 4]]) == (10, [1, 2, 3, 4])", "assert max_sum_list([[100], [50, 50], [25, 25, 25, 25], [10, 20, 30, 40]]) == (100, [100])"], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum average of elements using lambda function.", "code": "def max_avg_list(input_list):\n    max_avg = max(sum(x)/len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: sum(i)/len(i))\n    return (max_avg, max_list)", "task_id": "393_7670f9a7-6e07-45d2-9eb0-35b7b37d249d", "test_setup_code": "", "test_list": ["assert max_avg_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (8.0, [7, 8, 9])", "assert max_avg_list([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == (2.0, [2, 2, 2])", "assert max_avg_list([[1], [2], [3], [4], [5]]) == (5.0, [5])", "assert max_avg_list([[1, 2], [3, 4], [5, 6], [7, 8]]) == (7.5, [7, 8])"], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum average of elements using lambda function.", "code": "def min_avg_list(input_list):\n    min_avg = min(sum(x)/len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: sum(i)/len(i))\n    return (min_avg, min_list)", "task_id": "393_1552dd27-4012-404a-85b4-21d3fe60db93", "test_setup_code": "", "test_list": ["assert min_avg_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == (2.0, [1, 2, 3])", "assert min_avg_list([[10, 20, 30], [5, 5, 5], [1, 2, 3, 4]]) == (3.0, [1, 2, 3, 4])", "assert min_avg_list([[1], [2], [3]]) == (1.0, [1])", "assert min_avg_list([[0, 0, 0], [1, 1, 1], [2, 2, 2]]) == (0.0, [0, 0, 0])"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//3) + f(n//5) + f(n//7) + f(n//9)), n) for odd numbers.", "code": "def get_max_sum_odd(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 3] + res[i // 5] + res[i // 7] + res[i // 9])))\n\treturn res[n]", "task_id": "392_f0d60a24-92ae-4267-9ace-3c8027e8cf3e", "test_setup_code": "", "test_list": ["assert get_max_sum_odd(1) == 1", "assert get_max_sum_odd(15) == 15", "assert get_max_sum_odd(21) == 21", "assert get_max_sum_odd(35) == 35"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//3) + f(n//6) + f(n//9)), n) where n is a perfect cube.", "code": "def get_max_sum_cube(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 3] + res[i // 6] + res[i // 9])))\n\treturn res[n]", "task_id": "392_bc47a2e5-65c6-4ef8-b584-953159b97848", "test_setup_code": "", "test_list": ["assert get_max_sum_cube(1) == 1", "assert get_max_sum_cube(8) == 8", "assert get_max_sum_cube(27) == 27", "assert get_max_sum_cube(64) == 64"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//6)), n) where n is a factorial number.", "code": "def get_max_sum_factorial(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 6])))\n\treturn res[n]", "task_id": "392_e3954805-835f-4724-b8fb-a17093abb7c4", "test_setup_code": "", "test_list": ["assert get_max_sum_factorial(1) == 1", "assert get_max_sum_factorial(5) == 5", "assert get_max_sum_factorial(10) == 10", "assert get_max_sum_factorial(20) == 21"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//5)), n) where n is a triangular number.", "code": "def get_max_sum_triangular(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 5])))\n\treturn res[n]", "task_id": "392_1b2e2af7-73c1-4420-b625-cf181f1d53af", "test_setup_code": "", "test_list": ["assert get_max_sum_triangular(1) == 1", "assert get_max_sum_triangular(3) == 3", "assert get_max_sum_triangular(6) == 6", "assert get_max_sum_triangular(10) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//4)), n) where n is a hexagonal number.", "code": "def get_max_sum_hexagonal(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 4])))\n\treturn res[n]", "task_id": "392_6adca44e-1814-48b2-8b8b-8a873f6d54be", "test_setup_code": "", "test_list": ["assert get_max_sum_hexagonal(1) == 1", "assert get_max_sum_hexagonal(6) == 6", "assert get_max_sum_hexagonal(12) == 13", "assert get_max_sum_hexagonal(24) == 27"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//5)), n) where n is a pentagonal number.", "code": "def get_max_sum_pentagonal(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 5])))\n\treturn res[n]", "task_id": "392_8905333c-faf8-4ccb-b684-ed52a3243769", "test_setup_code": "", "test_list": ["assert get_max_sum_pentagonal(1) == 1", "assert get_max_sum_pentagonal(5) == 5", "assert get_max_sum_pentagonal(10) == 10", "assert get_max_sum_pentagonal(15) == 15"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string.", "code": "def first_repeated_character(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "task_id": "395_125300b6-ccd2-48dc-90b1-2a50062c8d5c", "test_setup_code": "", "test_list": ["assert first_repeated_character('abca') == 'a'", "assert first_repeated_character('abcdef') == None", "assert first_repeated_character('aabbcc') == 'a'", "assert first_repeated_character('') == None"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_non_repeating_word(s: str) -> str:\n    words = s.split()\n    word_order = []\n    ctr = {}\n    for word in words:\n        if word in ctr:\n            ctr[word] += 1\n        else:\n            ctr[word] = 1\n            word_order.append(word)\n    for word in word_order:\n        if ctr[word] == 1:\n            return word\n    return None", "task_id": "395_3da37958-46ab-49e3-b253-d2e27cc52820", "test_setup_code": "", "test_list": ["assert first_non_repeating_word('hello world hello') == 'world'", "assert first_non_repeating_word('the quick brown fox jumps over the quick brown') == 'fox'", "assert first_non_repeating_word('apple apple banana banana cherry') == 'cherry'", "assert first_non_repeating_word('one one two two three three') == None"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_repeated_word(s: str) -> str:\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None", "task_id": "395_89cd54e6-cfff-4699-82f3-319735c63a15", "test_setup_code": "", "test_list": ["assert first_repeated_word('this is a test this is only a test') == 'this'", "assert first_repeated_word('hello world') == None", "assert first_repeated_word('a a b b c c') == 'a'", "assert first_repeated_word('') == None"], "challenge_test_list": []}
{"text": "Write a python function to find the last repeated character in a given string.", "code": "def last_repeated_character(s: str) -> str:\n    seen = set()\n    last_repeated = None\n    for char in s:\n        if char in seen:\n            last_repeated = char\n        seen.add(char)\n    return last_repeated", "task_id": "395_f79dcb8e-6eda-4acc-8764-86d448596f34", "test_setup_code": "", "test_list": ["assert last_repeated_character('abca') == 'a'", "assert last_repeated_character('abc') == None", "assert last_repeated_character('aabbcc') == 'c'", "assert last_repeated_character('') == None"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated digit in a given string.", "code": "def first_non_repeating_digit(s: str) -> str:\n    digit_order = []\n    ctr = {}\n    for char in s:\n        if char.isdigit():\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                digit_order.append(char)\n    for digit in digit_order:\n        if ctr[digit] == 1:\n            return digit\n    return None", "task_id": "395_9b88a206-edb5-4884-88ec-bcf4df4d5dbe", "test_setup_code": "", "test_list": ["assert first_non_repeating_digit('abc12321') == '3'", "assert first_non_repeating_digit('a1b2c3d4e5f6g7h8i9j0') == '1'", "assert first_non_repeating_digit('11223344556677889900') == None", "assert first_non_repeating_digit('') == None"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated digit in a given string.", "code": "def first_repeated_digit(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char.isdigit():\n            if char in seen:\n                return char\n            seen.add(char)\n    return None", "task_id": "395_029b6827-90cf-49c5-a5ea-4ddf536be25d", "test_setup_code": "", "test_list": ["assert first_repeated_digit('abc123321') == '3'", "assert first_repeated_digit('1234567890') == None", "assert first_repeated_digit('112233') == '1'", "assert first_repeated_digit('a1b2c3d4e5f6g7h8i9j0k1') == '1'"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated vowel in a given string.", "code": "def first_non_repeating_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_order = []\n    ctr = {}\n    for char in s:\n        if char in vowels:\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                vowel_order.append(char)\n    for vowel in vowel_order:\n        if ctr[vowel] == 1:\n            return vowel\n    return None", "task_id": "395_10d9a4af-37cd-4c34-9a78-94d5471eb4e5", "test_setup_code": "", "test_list": ["assert first_non_repeating_vowel('hello') == 'e'", "assert first_non_repeating_vowel('swimming') == 'i'", "assert first_non_repeating_vowel('aabbcc') == None", "assert first_non_repeating_vowel('aeiouAEIOU') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated vowel in a given string.", "code": "def first_repeated_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    seen = set()\n    for char in s:\n        if char in vowels:\n            if char in seen:\n                return char\n            seen.add(char)\n    return None", "task_id": "395_7aa38beb-bec4-4c4f-bbb7-5e5cfc1d2c41", "test_setup_code": "", "test_list": ["assert first_repeated_vowel('hello') == 'e'", "assert first_repeated_vowel('swimming') == 'i'", "assert first_repeated_vowel('rhythm') == None", "assert first_repeated_vowel('aeiouAEIOU') == 'a'"], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated consonant in a given string.", "code": "def first_non_repeating_consonant(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonant_order = []\n    ctr = {}\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                consonant_order.append(char)\n    for consonant in consonant_order:\n        if ctr[consonant] == 1:\n            return consonant\n    return None", "task_id": "395_c1693bec-0430-4ed0-aff6-ccd2ec5f809c", "test_setup_code": "", "test_list": ["assert first_non_repeating_consonant('programming') == 'r'", "assert first_non_repeating_consonant('hello') == 'h'", "assert first_non_repeating_consonant('aeiou') == None", "assert first_non_repeating_consonant('bbccdd') == None"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a vowel using regex.", "code": "import re\nregex = r'^[aeiouAEIOU].*[aeiouAEIOU]$'\ndef check_vowel(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_50a6b4b9-e4df-4871-8e42-113ff41bb8b2", "test_setup_code": "", "test_list": ["assert check_vowel('apple') == 'Valid'", "assert check_vowel('orange') == 'Valid'", "assert check_vowel('banana') == 'Invalid'", "assert check_vowel('') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a digit using regex.", "code": "import re\nregex = r'^\\d.*\\d$'\ndef check_digit(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_e78d7227-cda4-480c-949f-44be6722605c", "test_setup_code": "", "test_list": ["assert check_digit('1abc2') == 'Valid'", "assert check_digit('abc123') == 'Invalid'", "assert check_digit('9xyz9') == 'Valid'", "assert check_digit('a1b2c3') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with an uppercase letter and ends with a lowercase letter using regex.", "code": "import re\nregex = r'^[A-Z].*[a-z]$'\ndef check_uppercase(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_065c4fc6-35df-41f6-aa8e-a747d3e9d2ec", "test_setup_code": "", "test_list": ["assert check_uppercase('HelloWorld') == 'Invalid'", "assert check_uppercase('Hello') == 'Valid'", "assert check_uppercase('hello') == 'Invalid'", "assert check_uppercase('A') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with an alphanumeric character and ends with a special character using regex.", "code": "import re\nregex = r'^[a-zA-Z0-9].*[^a-zA-Z0-9]$'\ndef check_alphanumeric(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_1063e4b3-267a-494d-9590-0360f12bab80", "test_setup_code": "", "test_list": ["assert check_alphanumeric('Hello!') == 'Valid'", "assert check_alphanumeric('12345@') == 'Valid'", "assert check_alphanumeric('!Hello') == 'Invalid'", "assert check_alphanumeric('Hello') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome using regex.", "code": "import re\nregex = r'^(.)(.)(.).*\\3\\2\\1$'\ndef check_palindrome(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_c5260e52-e2c0-4047-a856-374d122a61a4", "test_setup_code": "", "test_list": ["assert check_palindrome('aba') == 'Valid'", "assert check_palindrome('abc') == 'Invalid'", "assert check_palindrome('a') == 'Invalid'", "assert check_palindrome('abba') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with an alphabetic character using regex.", "code": "import re\nregex = r'^[a-zA-Z].*[a-zA-Z]$'\ndef check_alpha(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_d557d652-933c-4d69-812a-d722806d236b", "test_setup_code": "", "test_list": ["assert check_alpha('hello') == 'Valid'", "assert check_alpha('1hello2') == 'Invalid'", "assert check_alpha('a1b2c3d4e') == 'Valid'", "assert check_alpha('!@#') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a special character using regex.", "code": "import re\nregex = r'^[^a-zA-Z0-9].*[^a-zA-Z0-9]$'\ndef check_special(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_75aa6cf9-5c68-4ac2-b5bd-e96cae323376", "test_setup_code": "", "test_list": ["assert check_special('!hello!') == 'Valid'", "assert check_special('hello!') == 'Invalid'", "assert check_special('!hello') == 'Invalid'", "assert check_special('!@#$%^&*()!') == 'Valid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with the same digit using regex.", "code": "import re\nregex = r'^(\\d).*(\\1)$'\ndef check_same_digit(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_24872ee3-7c15-410a-8f01-724d7c6a44f1", "test_setup_code": "", "test_list": ["assert check_same_digit('12321') == 'Valid'", "assert check_same_digit('12345') == 'Invalid'", "assert check_same_digit('1abc1') == 'Valid'", "assert check_same_digit('9xyz9') == 'Valid'", "assert check_same_digit('abc123') == 'Invalid'", "assert check_same_digit('') == 'Invalid'", "assert check_same_digit('1') == 'Valid'", "assert check_same_digit('12') == 'Invalid'"], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a consonant using regex.", "code": "import re\nregex = r'^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ].*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$'\ndef check_consonant(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_b518f9c7-66c6-499b-80fc-02ba291687ac", "test_setup_code": "", "test_list": ["assert check_consonant('hello') == 'Invalid'", "assert check_consonant('bacon') == 'Valid'", "assert check_consonant('apple') == 'Invalid'", "assert check_consonant('xylophone') == 'Valid'"], "challenge_test_list": []}
{"text": "Write a function to find the median of three specific numbers, but if two numbers are the same, return that number.", "code": "def find_median(a, b, c):\n    if a == b or a == c:\n        return a\n    if b == c:\n        return b\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_6f22da53-47fe-4d9a-a04d-4144455a2221", "test_setup_code": "", "test_list": ["assert find_median(1, 2, 3) == 2", "assert find_median(3, 3, 2) == 3", "assert find_median(5, 5, 5) == 5", "assert find_median(7, 9, 7) == 7"], "challenge_test_list": []}
{"text": "Write a function to find the middle value of three specific numbers, but if all numbers are the same, return -1.", "code": "def middle_value(a, b, c):\n    if a == b == c:\n        return -1\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_078b1a07-cc72-494a-be8e-f404a522a917", "test_setup_code": "", "test_list": ["assert middle_value(1, 2, 3) == 2", "assert middle_value(5, 5, 5) == -1", "assert middle_value(10, 20, 15) == 15", "assert middle_value(-1, -2, -3) == -2"], "challenge_test_list": []}
{"text": "Write a function to find the second largest number among three specific numbers.", "code": "def second_largest(a, b, c):\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_5aed81d8-d8d6-476a-97c7-e4e8fb0950c1", "test_setup_code": "", "test_list": ["assert second_largest(10, 20, 30) == 20", "assert second_largest(30, 20, 10) == 20", "assert second_largest(20, 20, 10) == 20", "assert second_largest(10, 10, 10) == 10"], "challenge_test_list": []}
{"text": "Write a function to find the median of four specific numbers.", "code": "def median_of_four(a, b, c, d):\n    nums = [a, b, c, d]\n    nums.sort()\n    return (nums[1] + nums[2]) / 2", "task_id": "397_caf6f4dd-09c2-4b69-8676-4501efdd51bb", "test_setup_code": "", "test_list": ["assert median_of_four(1, 2, 3, 4) == 2.5", "assert median_of_four(10, 20, 30, 40) == 25.0", "assert median_of_four(5, 5, 5, 5) == 5.0", "assert median_of_four(-1, -2, -3, -4) == -2.5"], "challenge_test_list": []}
{"text": "Write a function to find the mode of three specific numbers. If there is no mode, return -1.", "code": "def find_mode(a, b, c):\n    if a == b == c:\n        return a\n    if a == b or a == c:\n        return a\n    if b == c:\n        return b\n    return -1", "task_id": "397_29799615-de9b-45dd-a91f-baf31c50ef9b", "test_setup_code": "", "test_list": ["assert find_mode(1, 1, 1) == 1", "assert find_mode(2, 2, 3) == 2", "assert find_mode(4, 5, 4) == 4", "assert find_mode(6, 7, 8) == -1"], "challenge_test_list": []}
{"text": "Write a function to find the range (difference between the largest and smallest number) of three specific numbers.", "code": "def find_range(a, b, c):\n    return max(a, b, c) - min(a, b, c)", "task_id": "397_e5ad1bc5-f69e-4ad7-8ee4-95a5e998ba4c", "test_setup_code": "", "test_list": ["assert find_range(1, 2, 3) == 2", "assert find_range(-10, 0, 10) == 20", "assert find_range(5, 5, 5) == 0", "assert find_range(100, 50, 75) == 50"], "challenge_test_list": []}
{"text": "Write a function to find the average of three specific numbers.", "code": "def find_average(a, b, c):\n    return (a + b + c) / 3", "task_id": "397_7ae68ce7-ec40-48fc-bf42-36c249d370b7", "test_setup_code": "", "test_list": ["assert find_average(1, 2, 3) == 2.0", "assert find_average(0, 0, 0) == 0.0", "assert find_average(-1, -2, -3) == -2.0", "assert find_average(1.5, 2.5, 3.5) == 2.5"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the squares of the digits of each number in a given list.", "code": "def sum_of_squared_digits(nums):\n    return sum(int(el)**2 for n in nums for el in str(n) if el.isdigit())", "task_id": "398_6f9ce08e-29f9-4120-85ad-559cbfbb7120", "test_setup_code": "", "test_list": ["assert sum_of_squared_digits([1, 2, 3, 4]) == 30", "assert sum_of_squared_digits([10, 20, 30]) == 14", "assert sum_of_squared_digits([]) == 0", "assert sum_of_squared_digits([123, 456, 789]) == 285"], "challenge_test_list": []}
{"text": "Write a function to compute the product of the digits of each number in a given list.", "code": "def product_of_digits(nums):\n    product = 1\n    for n in nums:\n        for el in str(n):\n            if el.isdigit():\n                product *= int(el)\n    return product", "task_id": "398_0645e5fc-1e3b-4976-a5cb-75d723de6f42", "test_setup_code": "", "test_list": ["assert product_of_digits([123, 456]) == 720", "assert product_of_digits([0, 123]) == 0", "assert product_of_digits([]) == 1", "assert product_of_digits([10, 20, 30]) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the even digits of each number in a given list.", "code": "def sum_of_even_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) % 2 == 0)", "task_id": "398_6b70c494-0bfd-4f91-861e-040abf55e091", "test_setup_code": "", "test_list": ["assert sum_of_even_digits([123, 456, 789]) == 20", "assert sum_of_even_digits([0, 2, 4, 6, 8]) == 20", "assert sum_of_even_digits([13579, 24680]) == 20", "assert sum_of_even_digits([111, 222, 333, 444, 555]) == 12"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the odd digits of each number in a given list.", "code": "def sum_of_odd_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) % 2 != 0)", "task_id": "398_9956f112-1186-4893-b417-24e099f5dd20", "test_setup_code": "", "test_list": ["assert sum_of_odd_digits([123, 456, 789]) == 25", "assert sum_of_odd_digits([0, 2, 4, 6, 8]) == 0", "assert sum_of_odd_digits([13579, 24680]) == 25", "assert sum_of_odd_digits([111, 333, 555]) == 27"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits at even positions (0-based index) of each number in a given list.", "code": "def sum_of_digits_at_even_positions(nums):\n    return sum(int(str(n)[i]) for n in nums for i in range(len(str(n))) if i % 2 == 0)", "task_id": "398_ed8da15a-6428-4105-8611-3d768b56701f", "test_setup_code": "", "test_list": ["assert sum_of_digits_at_even_positions([1234, 5678]) == 10", "assert sum_of_digits_at_even_positions([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0", "assert sum_of_digits_at_even_positions([111, 222, 333]) == 6", "assert sum_of_digits_at_even_positions([9876543210, 1234567890]) == 25"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits at odd positions (0-based index) of each number in a given list.", "code": "def sum_of_digits_at_odd_positions(nums):\n    return sum(int(str(n)[i]) for n in nums for i in range(len(str(n))) if i % 2 != 0)", "task_id": "398_1b846d33-e508-49d0-bb6d-ab6028954280", "test_setup_code": "", "test_list": ["assert sum_of_digits_at_odd_positions([12345, 67890]) == 20", "assert sum_of_digits_at_odd_positions([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0", "assert sum_of_digits_at_odd_positions([111, 222, 333]) == 6", "assert sum_of_digits_at_odd_positions([9876543210, 1234567890]) == 45"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits of each even number in a given list.", "code": "def sum_of_digits_of_even_numbers(nums):\n    return sum(int(el) for n in nums if n % 2 == 0 for el in str(n) if el.isdigit())", "task_id": "398_ab035a95-0a2e-4ebe-a20d-7eb3fc3395de", "test_setup_code": "", "test_list": ["assert sum_of_digits_of_even_numbers([12, 34, 56, 78]) == 30", "assert sum_of_digits_of_even_numbers([1, 3, 5, 7]) == 0", "assert sum_of_digits_of_even_numbers([0, 2, 4, 6, 8]) == 20", "assert sum_of_digits_of_even_numbers([123, 456, 789, 101112]) == 18"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits of each odd number in a given list.", "code": "def sum_of_digits_of_odd_numbers(nums):\n    return sum(int(el) for n in nums if n % 2 != 0 for el in str(n) if el.isdigit())", "task_id": "398_0ddd001a-7836-4e32-8b1c-24611e17b793", "test_setup_code": "", "test_list": ["assert sum_of_digits_of_odd_numbers([1, 2, 3, 4, 5]) == 9", "assert sum_of_digits_of_odd_numbers([11, 22, 33, 44, 55]) == 18", "assert sum_of_digits_of_odd_numbers([0, 2, 4, 6, 8]) == 0", "assert sum_of_digits_of_odd_numbers([123, 456, 789, 101]) == 22"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits greater than five of each number in a given list.", "code": "def sum_of_digits_greater_than_five(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) > 5)", "task_id": "398_67498918-5479-4a22-be70-22351a5266f0", "test_setup_code": "", "test_list": ["assert sum_of_digits_greater_than_five([123, 456, 789]) == 24", "assert sum_of_digits_greater_than_five([0, 1, 2, 3, 4, 5]) == 0", "assert sum_of_digits_greater_than_five([6, 7, 8, 9, 10]) == 30", "assert sum_of_digits_greater_than_five([]) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits less than five of each number in a given list.", "code": "def sum_of_digits_less_than_five(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) < 5)", "task_id": "398_a4d73206-ba69-4bf6-85f3-c90745d7adc9", "test_setup_code": "", "test_list": ["assert sum_of_digits_less_than_five([123, 456, 789]) == 6", "assert sum_of_digits_less_than_five([0, 4, 5, 9]) == 4", "assert sum_of_digits_less_than_five([111, 222, 333, 444]) == 40", "assert sum_of_digits_less_than_five([9876543210]) == 10"], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "394_4a43eb24-6b37-444f-bc49-e498192fb781", "test_setup_code": "", "test_list": ["assert is_palindrome('racecar') == True", "assert is_palindrome('hello') == False", "assert is_palindrome('A man a plan a canal Panama'.replace(' ', '').lower()) == True", "assert is_palindrome('') == True"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a list.", "code": "def sum_of_elements(lst: list) -> int:\n    return sum(lst)", "task_id": "394_6328dee9-d568-4cf4-80b5-516a218ca315", "test_setup_code": "", "test_list": ["assert sum_of_elements([1, 2, 3, 4, 5]) == 15", "assert sum_of_elements([]) == 0", "assert sum_of_elements([-1, -2, -3, -4, -5]) == -15", "assert sum_of_elements([1000000, 2000000, 3000000]) == 6000000"], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "394_eca1921e-0c35-41e4-ba49-ca5497dbfa29", "test_setup_code": "", "test_list": ["assert count_vowels('hello') == 2", "assert count_vowels('HELLO') == 2", "assert count_vowels('') == 0", "assert count_vowels('abcdefghijklmnopqrstuvwxyz') == 5"], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(lst: list) -> list:\n    return lst[::-1]", "task_id": "394_5f28fc39-9abd-4ee6-8d39-2b3732e26ac8", "test_setup_code": "", "test_list": ["assert reverse_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]", "assert reverse_list([]) == []", "assert reverse_list([1]) == [1]", "assert reverse_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a list.", "code": "def find_max(lst: list) -> int:\n    return max(lst)", "task_id": "394_0bd7f548-c420-4600-a221-0cd1d7dc233a", "test_setup_code": "", "test_list": ["assert find_max([1, 2, 3, 4, 5]) == 5", "assert find_max([-10, -20, -30, -40, -5]) == -5", "assert find_max([100]) == 100", "assert find_max([0, 0, 0, 0, 0]) == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "394_ae885703-f6ee-4789-baf0-837b152011a0", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(17) == True", "assert is_prime(1) == False", "assert is_prime(15) == False"], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n: int) -> list:\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n    return fib[:n]", "task_id": "394_cd9876df-e50f-46de-8127-fccdd66a5c9c", "test_setup_code": "", "test_list": ["assert fibonacci(1) == [0]", "assert fibonacci(2) == [0, 1]", "assert fibonacci(5) == [0, 1, 1, 2, 3]", "assert fibonacci(10) == [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]"], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "394_19146773-0fe8-42ed-9a3f-3d49443178c4", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from a given list.", "code": "def unique_elements(lst: list) -> list:\n    return list(set(lst))", "task_id": "394_e8438cc4-839a-498e-a5c2-a1e34271d023", "test_setup_code": "", "test_list": ["assert unique_elements([1, 2, 3, 2, 1]) == [1, 2, 3]", "assert unique_elements([4, 4, 4, 4]) == [4]", "assert unique_elements([]) == []", "assert unique_elements([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise AND operation across the given tuples.", "code": "def bitwise_and(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_4e0026f7-a5e9-4bda-814e-d415dab60e15", "test_setup_code": "", "test_list": ["assert bitwise_and((1, 2, 3), (4, 5, 6)) == (0, 0, 2)", "assert bitwise_and((255, 128, 64), (128, 64, 32)) == (128, 0, 0)", "assert bitwise_and((0, 0, 0), (255, 255, 255)) == (0, 0, 0)", "assert bitwise_and((15, 31, 63), (1, 2, 4)) == (1, 2, 0)"], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise OR operation across the given tuples.", "code": "def bitwise_or(test_tup1, test_tup2):\n  res = tuple(ele1 | ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_8b6e897c-51c3-44c9-a6e1-a4bf2bc762a8", "test_setup_code": "", "test_list": ["assert bitwise_or((1, 2, 3), (4, 5, 6)) == (5, 7, 7)", "assert bitwise_or((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert bitwise_or((255, 128, 64), (1, 2, 3)) == (255, 130, 67)", "assert bitwise_or((15, 31, 63), (240, 224, 192)) == (255, 255, 255)"], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise NOT operation on each element of the given tuple.", "code": "def bitwise_not(test_tup):\n  res = tuple(~ele for ele in test_tup)\n  return res", "task_id": "399_91b43957-dd5e-4d90-aaec-60fe57f7041c", "test_setup_code": "", "test_list": ["assert bitwise_not((1, 2, 3)) == (-2, -3, -4)", "assert bitwise_not((0, -1, -2)) == (-1, 0, 1)", "assert bitwise_not((1024, 2048, 4096)) == (-1025, -2049, -4097)", "assert bitwise_not((-1024, -2048, -4096)) == (1023, 2047, 4095)"], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise left shift operation on each element of the given tuple by a given number of positions.", "code": "def bitwise_shift_left(test_tup, shift):\n  res = tuple(ele << shift for ele in test_tup)\n  return res", "task_id": "399_4846c058-983a-4f35-bd3b-106d256b7ed4", "test_setup_code": "", "test_list": ["assert bitwise_shift_left((1, 2, 3), 1) == (2, 4, 6)", "assert bitwise_shift_left((0, 0, 0), 5) == (0, 0, 0)", "assert bitwise_shift_left((1024, 2048, 4096), 2) == (4096, 8192, 16384)", "assert bitwise_shift_left((1, -1, 2, -2), 3) == (8, -8, 16, -16)"], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise right shift operation on each element of the given tuple by a given number of positions.", "code": "def bitwise_shift_right(test_tup, shift):\n  res = tuple(ele >> shift for ele in test_tup)\n  return res", "task_id": "399_efbbc15f-3662-45b1-a088-4d1e3ca6f269", "test_setup_code": "", "test_list": ["assert bitwise_shift_right((10, 20, 30, 40), 1) == (5, 10, 15, 20)", "assert bitwise_shift_right((1, 2, 4, 8, 16), 2) == (0, 0, 1, 2, 4)", "assert bitwise_shift_right((0, 0, 0), 3) == (0, 0, 0)", "assert bitwise_shift_right((255, 128, 64, 32), 4) == (15, 8, 4, 2)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition across the given tuples.", "code": "def add_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_68797837-83cf-46f2-8155-f85939bf7cc3", "test_setup_code": "", "test_list": ["assert add_tuples((1, 2, 3), (4, 5, 6)) == (5, 7, 9)", "assert add_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert add_tuples((-1, -2, -3), (1, 2, 3)) == (0, 0, 0)", "assert add_tuples((1000000, 2000000, 3000000), (4000000, 5000000, 6000000)) == (5000000, 7000000, 9000000)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction across the given tuples.", "code": "def subtract_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_e16c87d0-de9b-4bc2-a859-64deec678026", "test_setup_code": "", "test_list": ["assert subtract_tuples((5, 10, 15), (3, 6, 9)) == (2, 4, 6)", "assert subtract_tuples((0, 0, 0), (0, 0, 0)) == (0, 0, 0)", "assert subtract_tuples((1, 2, 3), (-1, -2, -3)) == (2, 4, 6)", "assert subtract_tuples((100, 200, 300), (50, 150, 250)) == (50, 50, 50)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division across the given tuples.", "code": "def divide_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_50475ab8-7b97-43fc-95ae-d111e8066d2c", "test_setup_code": "", "test_list": ["assert divide_tuples((10, 20, 30), (2, 4, 6)) == (5.0, 5.0, 5.0)", "assert divide_tuples((9, 16, 25), (3, 4, 5)) == (3.0, 4.0, 5.0)", "assert divide_tuples((0, 1, 2), (1, 1, 1)) == (0.0, 1.0, 2.0)", "assert divide_tuples((5, 10, 15), (1, 2, 3)) == (5.0, 5.0, 5.0)"], "challenge_test_list": []}
{"text": "Write a function to perform element-wise modulus operation across the given tuples.", "code": "def mod_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_b2ac605e-394e-49b5-b52c-d269174991f7", "test_setup_code": "", "test_list": ["assert mod_tuples((10, 20, 30), (3, 5, 7)) == (1, 0, 2)", "assert mod_tuples((15, 25, 35), (4, 6, 8)) == (3, 1, 3)", "assert mod_tuples((0, 1, 2), (1, 1, 1)) == (0, 0, 0)", "assert mod_tuples((100, 200, 300), (10, 20, 30)) == (0, 0, 0)"], "challenge_test_list": []}
{"text": "Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.", "code": "def multiply_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_89702d34-472b-4041-9bc2-069879833e9b", "test_setup_code": "", "test_list": ["assert multiply_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == ((5, 12), (21, 32))", "assert multiply_nested_tuples(((0, 2), (3, 0)), ((5, 6), (7, 8))) == ((0, 12), (21, 0))", "assert multiply_nested_tuples(((1, -2), (3, 4)), ((-5, 6), (7, -8))) == ((-5, -12), (21, -32))", "assert multiply_nested_tuples(((1, 2, 3),), ((4, 5, 6),)) == ((4, 10, 18))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise division of tuple elements in the given two nested tuples.", "code": "def divide_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a / b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_c77c5342-7d10-4c1a-a0d4-442bc0b8ff6f", "test_setup_code": "", "test_list": ["assert divide_nested_tuples(((10, 4), (5, 6)), ((5, 2), (1, 3))) == ((2.0, 2.0), (5.0, 2.0))", "assert divide_nested_tuples(((1, 2), (3, 4)), ((1, 1), (1, 1))) == ((1.0, 2.0), (3.0, 4.0))", "assert divide_nested_tuples(((0, 0), (0, 0)), ((1, 1), (1, 1))) == ((0.0, 0.0), (0.0, 0.0))", "assert divide_nested_tuples(((100, 200), (300, 400)), ((10, 20), (30, 40))) == ((10.0, 10.0), (10.0, 10.0))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise maximum of tuple elements in the given two nested tuples.", "code": "def max_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_150c445b-bd51-4896-8175-be681d03389f", "test_setup_code": "", "test_list": ["assert max_nested_tuples(((1, 2), (3, 4)), ((2, 1), (1, 5))) == ((2, 2), (3, 5))", "assert max_nested_tuples(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))", "assert max_nested_tuples(((1, 2, 3), (4, 5, 6)), ((3, 2, 1), (6, 5, 4))) == ((3, 2, 3), (6, 5, 6))", "assert max_nested_tuples(((-1, -2), (-3, -4)), ((-2, -1), (-1, -5))) == ((-1, -1), (-1, -4))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise minimum of tuple elements in the given two nested tuples.", "code": "def min_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(min(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_58e4a144-ee44-48e2-915c-5679a39ed17d", "test_setup_code": "", "test_list": ["assert min_nested_tuples(((1, 3), (4, 5)), ((2, 2), (3, 7))) == ((1, 2), (3, 5))", "assert min_nested_tuples(((10, 20, 30), (40, 50, 60)), ((5, 25, 15), (45, 30, 70))) == ((5, 20, 15), (40, 30, 60))", "assert min_nested_tuples(((0, 0), (0, 0)), ((0, 0), (0, 0))) == ((0, 0), (0, 0))", "assert min_nested_tuples(((100, 200), (300, 400), (500, 600)), ((150, 50), (350, 250), (450, 650))) == ((100, 50), (300, 250), (450, 600))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise summation of tuple elements in the given nested tuple.", "code": "def sum_nested_tuples(test_tup):\n  res = tuple(sum(tup) for tup in test_tup)\n  return res", "task_id": "401_0396c9ec-ba85-4816-9f46-4f12e7fe29d9", "test_setup_code": "", "test_list": ["assert sum_nested_tuples(((1, 2), (3, 4), (5, 6))) == (3, 7, 11)", "assert sum_nested_tuples(((0, 0), (0, 0), (0, 0))) == (0, 0, 0)", "assert sum_nested_tuples(((1,), (2,), (3,))) == (1, 2, 3)", "assert sum_nested_tuples(((-1, -2), (-3, -4), (-5, -6))) == (-3, -7, -11)"], "challenge_test_list": []}
{"text": "Write a function to perform index wise product of tuple elements in the given nested tuple.", "code": "def product_nested_tuples(test_tup):\n  from functools import reduce\n  res = tuple(reduce(lambda x, y: x * y, tup) for tup in test_tup)\n  return res", "task_id": "401_886987ea-a034-45d9-8ea1-d6ec9b144379", "test_setup_code": "", "test_list": ["assert product_nested_tuples(((1, 2), (3, 4), (5, 6))) == (2, 12, 30)", "assert product_nested_tuples(((0, 1), (2, 3), (4, 0))) == (0, 6, 0)", "assert product_nested_tuples(((7,), (8, 9), (10, 11, 12))) == (7, 72, 1320)", "assert product_nested_tuples(((1, 2, 3), (4, 5), (6, 7, 8, 9))) == (6, 20, 3024)"], "challenge_test_list": []}
{"text": "Write a function to perform index wise concatenation of tuple elements in the given two nested tuples.", "code": "def concatenate_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(str(a) + str(b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_1f1d661f-d1fd-48d4-8861-aa90bc84e425", "test_setup_code": "", "test_list": ["assert concatenate_nested_tuples(((1, 2), (3, 4)), ((5, 6), (7, 8))) == (('15', '26'), ('37', '48'))", "assert concatenate_nested_tuples(((10, 20), (30, 40)), ((50, 60), (70, 80))) == (('1050', '2060'), ('3070', '4080'))", "assert concatenate_nested_tuples(((\"a\", \"b\"), (\"c\", \"d\")), ((\"e\", \"f\"), (\"g\", \"h\"))) == ((\"ae\", \"bf\"), (\"cg\", \"dh\"))", "assert concatenate_nested_tuples(((True, False), (False, True)), ((False, True), (True, False))) == ((\"TrueFalse\", \"FalseTrue\"), (\"FalseTrue\", \"TrueFalse\"))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise exponentiation of tuple elements in the given two nested tuples.", "code": "def power_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a ** b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_7ceb1f11-ee0e-4d0b-9b75-bf94a251f750", "test_setup_code": "", "test_list": ["assert power_nested_tuples(((1, 2), (3, 4)), ((2, 3), (1, 0))) == ((1, 8), (3, 1))", "assert power_nested_tuples(((0, 1), (2, 3)), ((1, 2), (3, 4))) == ((0, 1), (8, 81))", "assert power_nested_tuples(((2, 3), (4, 5)), ((3, 2), (1, 0))) == ((8, 9), (4, 1))", "assert power_nested_tuples(((1, 2, 3), (4, 5, 6)), ((0, 1, 2), (3, 2, 1))) == ((1, 2, 9), (64, 25, 6))"], "challenge_test_list": []}
{"text": "Write a function to perform index wise modulo of tuple elements in the given two nested tuples.", "code": "def modulo_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a % b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_cc7d08cb-5849-4a3b-8727-e757c85b0a49", "test_setup_code": "", "test_list": ["assert modulo_nested_tuples(((10, 20), (30, 40)), ((3, 5), (7, 11))) == ((1, 0), (2, 7))", "assert modulo_nested_tuples(((0, 1), (2, 3)), ((1, 2), (3, 4))) == ((0, 1), (2, 3))", "assert modulo_nested_tuples(((100, 200), (300, 400)), ((10, 20), (30, 40))) == ((0, 0), (0, 0))", "assert modulo_nested_tuples(((1, 2), (3, 4)), ((1, 1), (1, 1))) == ((0, 0), (0, 0))"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, with each tuple sorted in ascending order.", "code": "def unique_sorted_tuples(test_list):\n    return list(set(tuple(sorted(sub)) for sub in test_list))", "task_id": "400_302ec25e-2110-461f-a969-1ccb6ff6a3d2", "test_setup_code": "", "test_list": ["assert unique_sorted_tuples([(3, 2, 1), (1, 2, 3), (4, 5, 6)]) == [(1, 2, 3), (4, 5, 6)]", "assert unique_sorted_tuples([(1, 1, 1), (2, 2, 2), (1, 1, 1)]) == [(1, 1, 1), (2, 2, 2)]", "assert unique_sorted_tuples([(1, 3, 2), (3, 2, 1), (2, 1, 3), (4, 6, 5)]) == [(1, 2, 3), (4, 5, 6)]", "assert unique_sorted_tuples([]) == []"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the product of the integers in each tuple is unique.", "code": "def unique_tuples_with_product(test_list):\n    seen_products = set()\n    result = []\n    for sub in test_list:\n        product = sub[0] * sub[1]\n        if product not in seen_products:\n            seen_products.add(product)\n            result.append(sub)\n    return result", "task_id": "400_03574ec4-f12d-4ccc-b8c3-f461477a7c6a", "test_setup_code": "", "test_list": ["assert unique_tuples_with_product([(1, 2), (2, 3), (3, 4), (2, 6)]) == [(1, 2), (2, 3), (3, 4)]", "assert unique_tuples_with_product([(1, 1), (2, 2), (3, 3), (4, 4)]) == [(1, 1), (2, 2), (3, 3), (4, 4)]", "assert unique_tuples_with_product([(0, 1), (1, 0), (2, 0), (0, 2)]) == [(0, 1)]", "assert unique_tuples_with_product([(1, 2), (2, 1), (3, 1), (1, 3)]) == [(1, 2), (3, 1)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers, is sorted in ascending order, and the sum of the integers in each tuple is unique.", "code": "def unique_sorted_tuples_with_sum(test_list):\n    seen_sums = set()\n    result = []\n    for sub in test_list:\n        sorted_sub = tuple(sorted(sub))\n        if sum(sorted_sub) not in seen_sums:\n            seen_sums.add(sum(sorted_sub))\n            result.append(sorted_sub)\n    return result", "task_id": "400_44aa8e0d-6928-4363-a6ee-facd5ad55e25", "test_setup_code": "", "test_list": ["assert unique_sorted_tuples_with_sum([(1, 2), (3, 4), (1, 2), (2, 1)]) == [(1, 2), (3, 4)]", "assert unique_sorted_tuples_with_sum([(1, 3), (2, 2), (4, 0), (1, 3), (0, 4)]) == [(1, 3), (2, 2), (4, 0)]", "assert unique_sorted_tuples_with_sum([(1, 1), (2, 2), (3, 3), (4, 4)]) == [(1, 1), (2, 2), (3, 3), (4, 4)]", "assert unique_sorted_tuples_with_sum([(0, 0), (0, 0), (0, 0)]) == [(0, 0)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is even.", "code": "def unique_tuples_with_even_sum(test_list):\n    result = []\n    for sub in test_list:\n        if sum(sub) % 2 == 0:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_55e32f8d-ceff-4637-bfba-c244b9084707", "test_setup_code": "", "test_list": ["assert unique_tuples_with_even_sum([(1, 3), (2, 4), (5, 5), (6, 2)]) == [(2, 4), (6, 2)]", "assert unique_tuples_with_even_sum([(0, 0), (1, 1), (2, 2), (3, 3)]) == [(0, 0), (1, 1), (2, 2), (3, 3)]", "assert unique_tuples_with_even_sum([(1, 2), (3, 5), (7, 9), (2, 4), (6, 8)]) == [(2, 4), (6, 8)]", "assert unique_tuples_with_even_sum([(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8)]) == [(2, 2), (4, 4), (6, 6), (8, 8)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is odd.", "code": "def unique_tuples_with_odd_sum(test_list):\n    result = []\n    for sub in test_list:\n        if sum(sub) % 2 != 0:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_4ceb6f2c-fe4a-4031-9f31-50ef503fd9ef", "test_setup_code": "", "test_list": ["assert unique_tuples_with_odd_sum([(1, 2), (3, 4), (5, 6), (7, 8)]) == [(1, 2), (3, 4), (5, 6), (7, 8)]", "assert unique_tuples_with_odd_sum([(1, 1), (2, 3), (4, 5), (6, 7), (1, 1)]) == [(2, 3), (4, 5), (6, 7)]", "assert unique_tuples_with_odd_sum([(0, 1), (2, 2), (3, 3), (4, 4), (5, 5)]) == [(0, 1), (3, 3), (5, 5)]", "assert unique_tuples_with_odd_sum([(10, 15), (20, 25), (30, 35), (40, 45), (10, 15)]) == [(10, 15), (20, 25), (30, 35), (40, 45)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef unique_tuples_with_prime_sum(test_list):\n    result = []\n    for sub in test_list:\n        if is_prime(sum(sub)):\n            result.append(sub)\n    return list(set(result))", "task_id": "400_072f2aac-63a1-4b6b-8b3b-b7390ba06021", "test_setup_code": "", "test_list": ["assert unique_tuples_with_prime_sum([(1, 2), (3, 4), (2, 5), (1, 2)]) == [(1, 2), (2, 5)]", "assert unique_tuples_with_prime_sum([(1, 1), (2, 2), (3, 3), (4, 4)]) == []", "assert unique_tuples_with_prime_sum([(0, 3), (1, 4), (2, 3), (3, 2)]) == [(0, 3), (2, 3), (3, 2)]", "assert unique_tuples_with_prime_sum([(7, 10), (5, 6), (11, 14), (13, 18)]) == [(5, 6)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the product of the integers in each tuple is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef unique_tuples_with_prime_product(test_list):\n    result = []\n    for sub in test_list:\n        if is_prime(sub[0] * sub[1]):\n            result.append(sub)\n    return list(set(result))", "task_id": "400_6a2d4024-0188-4360-a0f4-8329d4cc9b20", "test_setup_code": "", "test_list": ["assert unique_tuples_with_prime_product([(2, 3), (3, 5), (4, 6), (2, 3)]) == [(2, 3), (3, 5)]", "assert unique_tuples_with_prime_product([(1, 1), (2, 2), (3, 3), (5, 7)]) == [(5, 7)]", "assert unique_tuples_with_prime_product([(2, 2), (3, 3), (4, 5), (6, 7)]) == []", "assert unique_tuples_with_prime_product([(2, 5), (3, 7), (5, 11), (7, 13)]) == [(2, 5), (3, 7)]"], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two distinct integers.", "code": "def unique_tuples_with_distinct_elements(test_list):\n    result = []\n    for sub in test_list:\n        if sub[0] != sub[1]:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_efd3f41e-bfdd-4fbf-8999-decf8fe2c117", "test_setup_code": "", "test_list": ["assert unique_tuples_with_distinct_elements([(1, 2), (3, 4), (1, 2), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]", "assert unique_tuples_with_distinct_elements([(1, 1), (2, 3), (4, 4), (2, 3)]) == [(2, 3)]", "assert unique_tuples_with_distinct_elements([]) == []", "assert unique_tuples_with_distinct_elements([(5, 5), (6, 6), (7, 7)]) == []"], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of n modulo p.", "code": "def factorial_modp(n, p):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % p\n    return result", "task_id": "402_bc206719-1c8d-441b-b60d-edac7201e1dd", "test_setup_code": "", "test_list": ["assert factorial_modp(5, 3) == 2", "assert factorial_modp(10, 7) == 6", "assert factorial_modp(0, 5) == 1", "assert factorial_modp(20, 13) == 3"], "challenge_test_list": []}
{"text": "Write a function to compute (x^y) % p.", "code": "def power_modp(x, y, p):\n    result = 1\n    x = x % p\n    while y > 0:\n        if y % 2 == 1:\n            result = (result * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return result", "task_id": "402_d8ae74ca-c082-4b0f-9b52-6d7cdf4ca435", "test_setup_code": "", "test_list": ["assert power_modp(2, 3, 5) == 3", "assert power_modp(10, 0, 7) == 1", "assert power_modp(2, 10, 1000) == 24", "assert power_modp(0, 5, 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (gcd) of a and b modulo p.", "code": "def gcd_modp(a, b, p):\n    while b != 0:\n        a, b = b, a % b\n    return a % p", "task_id": "402_2963de86-23d9-4918-bc1d-b88d31f15c33", "test_setup_code": "", "test_list": ["assert gcd_modp(48, 18, 5) == 1", "assert gcd_modp(101, 103, 7) == 2", "assert gcd_modp(0, 0, 1) == 0", "assert gcd_modp(56, 98, 10) == 2"], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number modulo p.", "code": "def fibonacci_modp(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % p\n    return b", "task_id": "402_5875fb3f-b2cf-475e-a2b6-93a82a773ce3", "test_setup_code": "", "test_list": ["assert fibonacci_modp(0, 10) == 0", "assert fibonacci_modp(1, 10) == 1", "assert fibonacci_modp(10, 7) == 3", "assert fibonacci_modp(20, 5) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of squares of the first n natural numbers modulo p.", "code": "def sum_of_squares_modp(n, p):\n    return (n * (n + 1) * (2 * n + 1) // 6) % p", "task_id": "402_c2c004f0-92c7-49cf-872c-ec3f799a9a18", "test_setup_code": "", "test_list": ["assert sum_of_squares_modp(5, 1000) == 55", "assert sum_of_squares_modp(10, 100) == 85", "assert sum_of_squares_modp(0, 7) == 0", "assert sum_of_squares_modp(1000, 997) == 671"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of cubes of the first n natural numbers modulo p.", "code": "def sum_of_cubes_modp(n, p):\n    sum_n = n * (n + 1) // 2\n    return (sum_n * sum_n) % p", "task_id": "402_47dbbb78-12c6-482c-903b-2fd98721fe62", "test_setup_code": "", "test_list": ["assert sum_of_cubes_modp(5, 1000) == 225", "assert sum_of_cubes_modp(10, 10000) == 3025", "assert sum_of_cubes_modp(1000, 997) == 0", "assert sum_of_cubes_modp(0, 100) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the product of elements in an array modulo p.", "code": "def product_of_array_modp(arr, p):\n    result = 1\n    for num in arr:\n        result = (result * num) % p\n    return result", "task_id": "402_9dda189c-f7e7-4e8b-ad87-3b0b0ac33160", "test_setup_code": "", "test_list": ["assert product_of_array_modp([1, 2, 3, 4], 5) == 4", "assert product_of_array_modp([0, 2, 3, 4], 5) == 0", "assert product_of_array_modp([10, 20, 30], 7) == 6", "assert product_of_array_modp([1, 1, 1, 1], 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the sum of elements in an array modulo p.", "code": "def sum_of_array_modp(arr, p):\n    result = 0\n    for num in arr:\n        result = (result + num) % p\n    return result", "task_id": "402_2422ec5b-d6ab-4b31-a240-8ce9550fd3d6", "test_setup_code": "", "test_list": ["assert sum_of_array_modp([1, 2, 3, 4, 5], 3) == 0", "assert sum_of_array_modp([10, 20, 30], 7) == 2", "assert sum_of_array_modp([0, 0, 0, 0], 5) == 0", "assert sum_of_array_modp([1000000000, 2000000000, 3000000000], 1000000007) == 999999986"], "challenge_test_list": []}
{"text": "Write a function to compute the modular inverse of a under modulo p.", "code": "def inverse_modp(a, p):\n    return pow(a, p - 2, p)", "task_id": "402_e7016609-b9fa-4806-ae30-d306fc4ba8ca", "test_setup_code": "", "test_list": ["assert inverse_modp(3, 11) == 4", "assert inverse_modp(10, 17) == 12", "assert inverse_modp(1, 2) == 1", "assert inverse_modp(0, 7) == 0"], "challenge_test_list": []}
{"text": "Write a function to compute the least common multiple (LCM) of a and b modulo p.", "code": "def lcm_modp(a, b, p):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return (a * b // gcd(a, b)) % p", "task_id": "402_26552762-dee9-4222-99fe-f27f8c8a2763", "test_setup_code": "", "test_list": ["assert lcm_modp(6, 8, 5) == 4", "assert lcm_modp(21, 14, 10) == 2", "assert lcm_modp(0, 10, 7) == 0", "assert lcm_modp(7, 13, 1) == 0"], "challenge_test_list": []}
{"text": "Write a function to check if an email address is valid or not using regex.", "code": "import re\n\ndef is_valid_email(email: str) -> bool:\n    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(regex, email) is not None", "task_id": "403_b8b47783-5771-4ba5-a053-8ea16bf5f99c", "test_setup_code": "", "test_list": ["assert is_valid_email('test@example.com') == True", "assert is_valid_email('user.name+tag+sorting@example.com') == True", "assert is_valid_email('invalid-email@com') == False", "assert is_valid_email('') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a phone number is valid or not using regex. Assume valid phone numbers are in the format (123) 456-7890.", "code": "import re\n\ndef is_valid_phone_number(phone: str) -> bool:\n    regex = r'^\\(\\d{3}\\) \\d{3}-\\d{4}$'\n    return re.match(regex, phone) is not None", "task_id": "403_5c5024fb-b0ad-4882-956d-79be90689d5f", "test_setup_code": "", "test_list": ["assert is_valid_phone_number('(123) 456-7890') == True", "assert is_valid_phone_number('123-456-7890') == False", "assert is_valid_phone_number('(123)456-7890') == False", "assert is_valid_phone_number('(123) 456-789') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a date is valid or not using regex. Assume valid dates are in the format YYYY-MM-DD.", "code": "import re\n\ndef is_valid_date(date: str) -> bool:\n    regex = r'^\\d{4}-\\d{2}-\\d{2}$'\n    return re.match(regex, date) is not None", "task_id": "403_9d7bc5f5-1979-44ab-9557-2fe841f57e4b", "test_setup_code": "", "test_list": ["assert is_valid_date('2023-10-15') == True", "assert is_valid_date('2023-02-29') == False", "assert is_valid_date('2023-13-01') == False", "assert is_valid_date('2023-12-31') == True"], "challenge_test_list": []}
{"text": "Write a function to check if a time is valid or not using regex. Assume valid times are in the format HH:MM.", "code": "import re\n\ndef is_valid_time(time: str) -> bool:\n    regex = r'^\\d{2}:\\d{2}$'\n    return re.match(regex, time) is not None", "task_id": "403_646dabe5-2369-42dc-af60-b3739fc4d9c7", "test_setup_code": "", "test_list": ["assert is_valid_time('12:34') == True", "assert is_valid_time('99:99') == True", "assert is_valid_time('1:23') == False", "assert is_valid_time('12:345') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a hexadecimal color code is valid or not using regex. Assume valid hex color codes start with a '#' followed by exactly 6 hexadecimal digits.", "code": "import re\n\ndef is_valid_hex_color(color: str) -> bool:\n    regex = r'^#[0-9A-Fa-f]{6}$'\n    return re.match(regex, color) is not None", "task_id": "403_c3efe528-a431-4ee1-b99f-132e3e3ca132", "test_setup_code": "", "test_list": ["assert is_valid_hex_color('#FFFFFF') == True", "assert is_valid_hex_color('#000000') == True", "assert is_valid_hex_color('#1a2b3c') == True", "assert is_valid_hex_color('FFFFFF') == False", "assert is_valid_hex_color('#FFFFF') == False", "assert is_valid_hex_color('#FFFFFFF') == False", "assert is_valid_hex_color('#GGGGGG') == False", "assert is_valid_hex_color('') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a credit card number is valid or not using regex. Assume valid credit card numbers are 16 digits long.", "code": "import re\n\ndef is_valid_credit_card(card: str) -> bool:\n    regex = r'^\\d{16}$'\n    return re.match(regex, card) is not None", "task_id": "403_9799b79c-d7ac-41ef-8882-80ed0ad6cbcc", "test_setup_code": "", "test_list": ["assert is_valid_credit_card('1234567812345678') == True", "assert is_valid_credit_card('123456781234567') == False", "assert is_valid_credit_card('12345678123456789') == False", "assert is_valid_credit_card('1234abcd5678efgh') == False"], "challenge_test_list": []}
{"text": "Write a function to check if an IP address is valid or not using regex. Assume valid IP addresses are in the format XXX.XXX.XXX.XXX where XXX is a number between 0 and 255.", "code": "import re\n\ndef is_valid_ip_address(ip: str) -> bool:\n    regex = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return re.match(regex, ip) is not None", "task_id": "403_0e38dac2-dfe7-463d-a7b9-e255282c8802", "test_setup_code": "", "test_list": ["assert is_valid_ip_address('192.168.1.1') == True", "assert is_valid_ip_address('255.255.255.255') == True", "assert is_valid_ip_address('256.256.256.256') == False", "assert is_valid_ip_address('192.168.1') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a postal code is valid or not using regex. Assume valid postal codes are 5 digits long.", "code": "import re\n\ndef is_valid_postal_code(code: str) -> bool:\n    regex = r'^\\d{5}$'\n    return re.match(regex, code) is not None", "task_id": "403_9982f0a5-7d25-4d9a-aba8-4386aceaf894", "test_setup_code": "", "test_list": ["assert is_valid_postal_code('12345') == True", "assert is_valid_postal_code('1234') == False", "assert is_valid_postal_code('123456') == False", "assert is_valid_postal_code('12a45') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a password is valid or not using regex. Assume valid passwords are at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "code": "import re\n\ndef is_valid_password(password: str) -> bool:\n    regex = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$'\n    return re.match(regex, password) is not None", "task_id": "403_414fab1b-310e-4fc9-a56b-b022cfe1d4a2", "test_setup_code": "", "test_list": ["assert is_valid_password('Password123') == True", "assert is_valid_password('pass123') == False", "assert is_valid_password('PASSWORD123') == False", "assert is_valid_password('Pass123') == False", "assert is_valid_password('ValidPass1') == True", "assert is_valid_password('12345678') == False", "assert is_valid_password('Valid123') == True", "assert is_valid_password('Va1') == False"], "challenge_test_list": []}
{"text": "Write a function to check if a username is valid or not using regex. Assume valid usernames are alphanumeric and between 3 and 16 characters long.", "code": "import re\n\ndef is_valid_username(username: str) -> bool:\n    regex = r'^[a-zA-Z0-9]{3,16}$'\n    return re.match(regex, username) is not None", "task_id": "403_1c529035-e064-4254-ba95-b5365b293072", "test_setup_code": "", "test_list": ["assert is_valid_username('user123') == True", "assert is_valid_username('u') == False", "assert is_valid_username('user_name') == False", "assert is_valid_username('12345678901234567') == False"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of two numbers.", "code": "def maximum(a: int, b: int) -> int:\n    if a >= b:\n        return a\n    else:\n        return b", "task_id": "404_36a15b20-73a8-43ca-85d9-99184ba74666", "test_setup_code": "", "test_list": ["assert maximum(3, 5) == 5", "assert maximum(10, 10) == 10", "assert maximum(-1, -5) == -1", "assert maximum(0, 100) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "404_fb7a3ff2-9964-46e4-9f93-8a9b8f81a196", "test_setup_code": "", "test_list": ["assert min_of_three(1, 2, 3) == 1", "assert min_of_three(-1, -2, -3) == -3", "assert min_of_three(0, 0, 0) == 0", "assert min_of_three(100, 50, 75) == 50"], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "404_ae7764d6-c23c-447a-ae95-bce0e8cda866", "test_setup_code": "", "test_list": ["assert max_of_three(1, 2, 3) == 3", "assert max_of_three(-1, -2, -3) == -1", "assert max_of_three(0, 0, 0) == 0", "assert max_of_three(100, 100, 99) == 100"], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def absolute_difference(a: int, b: int) -> int:\n    return abs(a - b)", "task_id": "404_3d205ed7-867a-46a8-8cd5-2951323a1e1f", "test_setup_code": "", "test_list": ["assert absolute_difference(5, 3) == 2", "assert absolute_difference(-5, -3) == 2", "assert absolute_difference(0, 0) == 0", "assert absolute_difference(100, -100) == 200"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def sum_of_two(a: int, b: int) -> int:\n    return a + b", "task_id": "404_05f22119-3063-4da3-ae35-01cabb731116", "test_setup_code": "", "test_list": ["assert sum_of_two(1, 2) == 3", "assert sum_of_two(-1, -1) == -2", "assert sum_of_two(0, 0) == 0", "assert sum_of_two(123456, 654321) == 777777"], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def product_of_two(a: int, b: int) -> int:\n    return a * b", "task_id": "404_71b24bb7-afc4-4579-b540-c3b10eb807fb", "test_setup_code": "", "test_list": ["assert product_of_two(3, 4) == 12", "assert product_of_two(-1, 5) == -5", "assert product_of_two(0, 100) == 0", "assert product_of_two(999, 999) == 998001"], "challenge_test_list": []}
{"text": "Write a python function to check if a number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "404_fece8b2d-573f-409c-a579-4c2ed11eaa6a", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(17) == True", "assert is_prime(18) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "404_44a05296-16a5-4a9c-802d-33259af88b22", "test_setup_code": "", "test_list": ["assert factorial(0) == 1", "assert factorial(1) == 1", "assert factorial(5) == 120", "assert factorial(10) == 3628800"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(x: int) -> bool:\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True", "task_id": "406_f218ab1d-8075-4ad0-b2a1-291c3bb8b5ce", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(4) == False", "assert is_prime(17) == True", "assert is_prime(1) == False"], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "406_119e7685-fa06-42f7-8d6c-1eaaf2ee0d93", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(10) == 55", "assert fibonacci(20) == 6765"], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(x: int) -> int:\n    return sum(int(digit) for digit in str(x))", "task_id": "406_1b06c1c1-4497-4300-9dbc-a1e96df792fc", "test_setup_code": "", "test_list": ["assert sum_of_digits(12345) == 15", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(x: int) -> int:\n    return int(str(x)[::-1])", "task_id": "406_1709927f-6b8d-48b1-a843-f98e9022f47a", "test_setup_code": "", "test_list": ["assert reverse_number(12345) == 54321", "assert reverse_number(-9876) == -6789", "assert reverse_number(1000) == 1", "assert reverse_number(0) == 0"], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(x: int) -> bool:\n    return str(x) == str(x)[::-1]", "task_id": "406_1c60dd25-6e75-4ddf-b6db-b97988e12593", "test_setup_code": "", "test_list": ["assert is_palindrome(121) == True", "assert is_palindrome(-121) == False", "assert is_palindrome(10) == False", "assert is_palindrome(0) == True"], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "406_afa6768c-3bf1-4cd3-b2af-5d332e1a217c", "test_setup_code": "", "test_list": ["assert lcm(4, 5) == 20", "assert lcm(0, 10) == 0", "assert lcm(21, 6) == 42", "assert lcm(13, 17) == 221"], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a list.", "code": "def check_list_element(lst, element):\n    return element in lst", "task_id": "405_91b8744e-25b3-4bcd-b16e-608560ea2397", "test_setup_code": "", "test_list": ["assert check_list_element([1, 2, 3, 4, 5], 3) == True", "assert check_list_element(['apple', 'banana', 'orange'], 'banana') == True", "assert check_list_element([1, 2, 3, 4, 5], 6) == False", "assert check_list_element([], 'anything') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether a key exists within a dictionary.", "code": "def check_dict_key(d, key):\n    return key in d", "task_id": "405_8c83ee64-7cb8-4c6f-9f16-0ae3d0d7cbe4", "test_setup_code": "", "test_list": ["assert check_dict_key({'a': 1, 'b': 2, 'c': 3}, 'b') == True", "assert check_dict_key({'a': 1, 'b': 2, 'c': 3}, 'd') == False", "assert check_dict_key({}, 'a') == False", "assert check_dict_key({'key1': 'value1', 'key2': 'value2'}, 'key1') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a set.", "code": "def check_set_element(s, element):\n    return element in s", "task_id": "405_2f554193-a6c6-45af-9fb1-aca3dbb03607", "test_setup_code": "", "test_list": ["assert check_set_element({1, 2, 3, 4, 5}, 3) == True", "assert check_set_element({1, 2, 3, 4, 5}, 6) == False", "assert check_set_element(set(), 1) == False", "assert check_set_element({'apple', 'banana', 'orange'}, 'banana') == True"], "challenge_test_list": []}
{"text": "Write a function to check whether a substring exists within a string.", "code": "def check_string_substring(s, substring):\n    return substring in s", "task_id": "405_3d6f8feb-e3ae-48b4-87dd-8a6b75efe2e8", "test_setup_code": "", "test_list": ["assert check_string_substring('hello world', 'world') == True", "assert check_string_substring('hello world', 'WORLD') == False", "assert check_string_substring('a quick brown fox', 'quick') == True", "assert check_string_substring('a quick brown fox', 'quickly') == False"], "challenge_test_list": []}
{"text": "Write a function to check whether a dictionary with a specific key-value pair exists within a list of dictionaries.", "code": "def check_list_of_dicts(lst, key, value):\n    return any(d.get(key) == value for d in lst)", "task_id": "405_471e532e-b48f-46a8-b014-a10afd24d2b7", "test_setup_code": "", "test_list": ["assert check_list_of_dicts([{'a': 1}, {'b': 2}, {'c': 3}], 'b', 2) == True", "assert check_list_of_dicts([{'a': 1}, {'b': 2}, {'c': 3}], 'd', 4) == False", "assert check_list_of_dicts([{'a': 1}, {'b': 2}, {'c': 3}, {'d': 4}], 'd', 4) == True", "assert check_list_of_dicts([{'a': 1}, {'b': 2}, {'c': 3}], 'a', 3) == False"], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a nested list.", "code": "def check_nested_list(lst, element):\n    return any(element in sublist for sublist in lst)", "task_id": "405_4c09abbb-1ef0-4f22-b98d-999b50480211", "test_setup_code": "", "test_list": ["assert check_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 5) == True", "assert check_nested_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 10) == False", "assert check_nested_list([[], [], []], 1) == False", "assert check_nested_list([[1], [2], [3]], 2) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether a specific inner tuple exists within a tuple of tuples.", "code": "def check_tuple_of_tuples(t, inner_tuple):\n    return inner_tuple in t", "task_id": "405_7b445b20-95dc-421f-9c03-b6de8ec7ce20", "test_setup_code": "", "test_list": ["assert check_tuple_of_tuples(((1, 2), (3, 4), (5, 6)), (3, 4)) == True", "assert check_tuple_of_tuples(((1, 2), (3, 4), (5, 6)), (7, 8)) == False", "assert check_tuple_of_tuples((), (1, 2)) == False", "assert check_tuple_of_tuples(((1,), (2,), (3,)), (2,)) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether a specific inner tuple exists within a list of tuples.", "code": "def check_list_of_tuples(lst, inner_tuple):\n    return inner_tuple in lst", "task_id": "405_49bff1e3-64a2-45db-9199-4508649ff782", "test_setup_code": "", "test_list": ["assert check_list_of_tuples([(1, 2), (3, 4), (5, 6)], (3, 4)) == True", "assert check_list_of_tuples([(1, 2), (3, 4), (5, 6)], (7, 8)) == False", "assert check_list_of_tuples([], (1, 2)) == False", "assert check_list_of_tuples([(1, 2), (3, 4), (5, 6)], (5, 6)) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether a specific value exists within a dictionary.", "code": "def check_dict_value(d, value):\n    return value in d.values()", "task_id": "405_45e6a29e-8357-472f-b2bf-83b02b042c14", "test_setup_code": "", "test_list": ["assert check_dict_value({'a': 1, 'b': 2, 'c': 3}, 2) == True", "assert check_dict_value({'a': 1, 'b': 2, 'c': 3}, 4) == False", "assert check_dict_value({}, 1) == False", "assert check_dict_value({'a': None, 'b': 0, 'c': ''}, None) == True"], "challenge_test_list": []}
{"text": "Write a function to check whether a specific sublist exists within a list of lists.", "code": "def check_list_of_lists(lst, sublist):\n    return sublist in lst", "task_id": "405_8497f626-3a9d-48a8-88d9-e8d6c22646fc", "test_setup_code": "", "test_list": ["assert check_list_of_lists([[1, 2], [3, 4], [5, 6]], [3, 4]) == True", "assert check_list_of_lists([[1, 2], [3, 4], [5, 6]], [7, 8]) == False", "assert check_list_of_lists([[], [1], [2, 3]], []) == True", "assert check_list_of_lists([[], [1], [2, 3]], [1, 2]) == False"], "challenge_test_list": []}
{"text": "Write a function to reverse the digits of a given number.", "code": "def reverse_digits(n: int) -> int:\n    return int(str(n)[::-1])", "task_id": "407_c9cb674a-b749-45d4-a5a8-1d78d4b927e1", "test_setup_code": "", "test_list": ["assert reverse_digits(12345) == 54321", "assert reverse_digits(-9876) == -6789", "assert reverse_digits(1000) == 1", "assert reverse_digits(0) == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]", "task_id": "407_88cb500f-c9cd-49f1-ae32-501ce65d3996", "test_setup_code": "", "test_list": ["assert is_palindrome(121) == True", "assert is_palindrome(-121) == False", "assert is_palindrome(10) == False", "assert is_palindrome(0) == True"], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "407_91b71edb-d185-4325-9576-018fbf376364", "test_setup_code": "", "test_list": ["assert sum_of_digits(123) == 6", "assert sum_of_digits(0) == 0", "assert sum_of_digits(987654321) == 45", "assert sum_of_digits(1001) == 2"], "challenge_test_list": []}
{"text": "Write a function to calculate the product of the digits of a given number.", "code": "def product_of_digits(n: int) -> int:\n    product = 1\n    for digit in str(n):\n        product *= int(digit)\n    return product", "task_id": "407_6ad214c6-45db-4d29-ab18-13d06bf69628", "test_setup_code": "", "test_list": ["assert product_of_digits(123) == 6", "assert product_of_digits(0) == 0", "assert product_of_digits(999) == 729", "assert product_of_digits(102) == 0"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "407_4ddff2b9-7db0-405a-8fa5-1d8bed54a0d6", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(29) == True", "assert is_prime(100) == False"], "challenge_test_list": []}
{"text": "Write a function to find the next prime number greater than a given number.", "code": "def next_prime(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    n += 1\n    while not is_prime(n):\n        n += 1\n    return n", "task_id": "407_21396873-6b7a-406a-9393-7599ef0c5f8f", "test_setup_code": "", "test_list": ["assert next_prime(10) == 11", "assert next_prime(17) == 19", "assert next_prime(1) == 2", "assert next_prime(0) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "407_8117b402-0564-424e-9930-a4623e76a3a2", "test_setup_code": "", "test_list": ["assert fibonacci(0) == 0", "assert fibonacci(1) == 1", "assert fibonacci(10) == 55", "assert fibonacci(20) == 6765"], "challenge_test_list": []}
{"text": "Write a function to check if a given number is an Armstrong number.", "code": "def is_armstrong(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)", "task_id": "407_7ffa3b7f-a2a1-41a1-9d8a-70cb3f9973db", "test_setup_code": "", "test_list": ["assert is_armstrong(153) == True", "assert is_armstrong(370) == True", "assert is_armstrong(371) == True", "assert is_armstrong(123) == False"], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "407_e8964959-f1c0-4a56-8edf-0d925d70d727", "test_setup_code": "", "test_list": ["assert gcd(48, 18) == 6", "assert gcd(101, 103) == 1", "assert gcd(0, 5) == 5", "assert gcd(100, 100) == 100"], "challenge_test_list": []}
{"text": "Write a function to find the sum of all float values in a given heterogeneous list.", "code": "def sum_floats(listval):\n    total = sum(i for i in listval if isinstance(i, float))\n    return total", "task_id": "410_2b8179ce-5cf0-4fc9-88f0-a87c3d5a8626", "test_setup_code": "", "test_list": ["assert sum_floats([1, 2.5, 'a', 3.5, True, 4]) == 6.0", "assert sum_floats([0.1, 0.2, 0.3, 0.4, 0.5]) == 1.5", "assert sum_floats([1, 2, 3, 4, 5]) == 0.0", "assert sum_floats([]) == 0.0"], "challenge_test_list": []}
{"text": "Write a function to find the maximum product from the pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([x * y for x, y in list1])\n    return result_max", "task_id": "409_e35feb76-e03d-4341-a916-9ede87097d87", "test_setup_code": "", "test_list": ["assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 30", "assert max_product_tuple([(0, 0), (1, 1), (2, 2)]) == 4", "assert max_product_tuple([(-1, -2), (-3, -4), (-5, -6)]) == 30", "assert max_product_tuple([(1000, 1000), (999, 999), (1001, 1001)]) == 1002001"], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares from the pairs of tuples within a given list.", "code": "def sum_of_squares_tuple(list1):\n    result_sum = sum([x**2 + y**2 for x, y in list1])\n    return result_sum", "task_id": "409_2785c083-af21-4acb-8238-8c776c0d24ad", "test_setup_code": "", "test_list": ["assert sum_of_squares_tuple([(1, 2), (3, 4)]) == 30", "assert sum_of_squares_tuple([(0, 0), (0, 0)]) == 0", "assert sum_of_squares_tuple([(1, 1), (-1, -1)]) == 4", "assert sum_of_squares_tuple([(100, 100), (-100, -100)]) == 40000"], "challenge_test_list": []}
{"text": "Write a function to find the minimum absolute difference from the pairs of tuples within a given list.", "code": "def min_difference_tuple(list1):\n    result_min = min([abs(x - y) for x, y in list1])\n    return result_min", "task_id": "409_1309b0b3-487c-449d-8197-f637d478ac28", "test_setup_code": "", "test_list": ["assert min_difference_tuple([(1, 2), (3, 5), (8, 12)]) == 1", "assert min_difference_tuple([(10, 10), (20, 20), (30, 30)]) == 0", "assert min_difference_tuple([(5, 3), (15, 10), (25, 20)]) == 2", "assert min_difference_tuple([(-1, -2), (-3, -5), (-8, -12)]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the sum of products from the pairs of tuples within a given list.", "code": "def sum_of_products_tuple(list1):\n    result_sum = sum([x * y for x, y in list1])\n    return result_sum", "task_id": "409_2b920b80-04d3-4ee4-9799-ba791bd65cc2", "test_setup_code": "", "test_list": ["assert sum_of_products_tuple([(1, 2), (3, 4), (5, 6)]) == 44", "assert sum_of_products_tuple([(0, 0), (0, 0), (0, 0)]) == 0", "assert sum_of_products_tuple([(-1, -2), (-3, -4), (-5, -6)]) == 44", "assert sum_of_products_tuple([(1, 0), (0, 1), (1, 1)]) == 1"], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of squares from the pairs of tuples within a given list.", "code": "def min_sum_of_squares_tuple(list1):\n    result_min = min([x**2 + y**2 for x, y in list1])\n    return result_min", "task_id": "409_43fc08c1-761f-4064-923f-a9ec0e6d73a6", "test_setup_code": "", "test_list": ["assert min_sum_of_squares_tuple([(1, 2), (3, 4), (5, 6)]) == 5", "assert min_sum_of_squares_tuple([(0, 0), (1, 1), (2, 2)]) == 0", "assert min_sum_of_squares_tuple([(-1, -1), (-2, -2), (-3, -3)]) == 2", "assert min_sum_of_squares_tuple([(100, 100), (1, 1), (10, 10)]) == 2"], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of squares from the pairs of tuples within a given list.", "code": "def max_sum_of_squares_tuple(list1):\n    result_max = max([x**2 + y**2 for x, y in list1])\n    return result_max", "task_id": "409_21e2e01e-2894-4fb9-882a-44b1f2379340", "test_setup_code": "", "test_list": ["assert max_sum_of_squares_tuple([(1, 2), (3, 4), (5, 6)]) == 61", "assert max_sum_of_squares_tuple([(-1, -2), (3, 4), (0, 0)]) == 25", "assert max_sum_of_squares_tuple([(10, 0), (0, 10), (7, 7)]) == 100", "assert max_sum_of_squares_tuple([(-5, -5), (-3, -4), (-1, -1)]) == 50"], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of cubes from the pairs of tuples within a given list.", "code": "def min_sum_of_cubes_tuple(list1):\n    result_min = min([x**3 + y**3 for x, y in list1])\n    return result_min", "task_id": "409_4c0b8679-5406-4b5f-bcd8-e315545dd9b3", "test_setup_code": "", "test_list": ["assert min_sum_of_cubes_tuple([(1, 2), (3, 4), (5, 6)]) == 9", "assert min_sum_of_cubes_tuple([(-1, -2), (3, 4), (5, 6)]) == -9", "assert min_sum_of_cubes_tuple([(0, 0), (1, 1), (2, 2)]) == 0", "assert min_sum_of_cubes_tuple([(10, -10), (5, -5), (2, -2)]) == 0"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-(nums1[i] + nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_c5f36a2c-a869-4320-b7d7-9ee87bde87e3", "test_setup_code": "", "test_list": ["assert k_largest_pairs([1, 7, 11], [2, 4, 6], 3) == [[11, 6], [11, 4], [7, 6]]", "assert k_largest_pairs([1, 2], [3], 3) == [[2, 3], [1, 3]]", "assert k_largest_pairs([1, 2, 3], [4, 5, 6], 5) == [[3, 6], [3, 5], [2, 6], [3, 4], [2, 5]]", "assert k_largest_pairs([], [1, 2, 3], 2) == []"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the product of the pairs is the smallest.", "code": "import heapq\n\ndef k_smallest_pairs_product(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] * nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_f66643ae-3e17-4896-a987-861a4a07a432", "test_setup_code": "", "test_list": ["assert k_smallest_pairs_product([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert k_smallest_pairs_product([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert k_smallest_pairs_product([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert k_smallest_pairs_product([1, 2, 3], [1, 2, 3], 5) == [[1, 1], [1, 2], [2, 1], [1, 3], [2, 2]]"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the product of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs_product(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-(nums1[i] * nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_b1ef0e1f-1094-4506-a18a-be53a4652067", "test_setup_code": "", "test_list": ["assert k_largest_pairs_product([1, 7, 11], [2, 4, 6], 3) == [[11, 6], [11, 4], [7, 6]]", "assert k_largest_pairs_product([1, 2], [3, 4], 2) == [[2, 4], [2, 3]]", "assert k_largest_pairs_product([1, 2, 3], [4, 5, 6], 5) == [[3, 6], [3, 5], [2, 6], [3, 4], [2, 5]]", "assert k_largest_pairs_product([10, 20], [30, 40], 1) == [[20, 40]]"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is closest to a given target.", "code": "import heapq\n\ndef k_closest_pairs(nums1, nums2, k, target):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [abs(nums1[i] + nums2[j] - target), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_4a7a27c7-4471-4a98-bace-c4da809d5eb7", "test_setup_code": "", "test_list": ["assert k_closest_pairs([1, 2, 3], [4, 5, 6], 2, 7) == [[1, 6], [2, 5]]", "assert k_closest_pairs([1, 7, 11], [2, 4, 6], 3, 10) == [[1, 6], [7, 2], [4, 6]]", "assert k_closest_pairs([1, 1, 1], [1, 1, 1], 3, 2) == [[1, 1], [1, 1], [1, 1]]", "assert k_closest_pairs([1, 2], [3, 4], 1, 10) == [[2, 4]]"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is furthest from a given target.", "code": "import heapq\n\ndef k_furthest_pairs(nums1, nums2, k, target):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-abs(nums1[i] + nums2[j] - target), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_f1e3fdc7-7f7e-41be-bc2e-d2066a7517ec", "test_setup_code": "", "test_list": ["assert k_furthest_pairs([1, 2, 3], [4, 5, 6], 2, 7) == [[3, 6], [3, 5]]", "assert k_furthest_pairs([1, 2], [3, 4], 1, 5) == [[2, 4]]", "assert k_furthest_pairs([1, 1, 1], [1, 1, 1], 3, 2) == [[1, 1], [1, 1], [1, 1]]", "assert k_furthest_pairs([], [1, 2, 3], 2, 5) == []"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the absolute difference of the pairs is the smallest.", "code": "import heapq\n\ndef k_smallest_pairs_diff(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [abs(nums1[i] - nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_c5030927-c6a9-4df5-a548-93970a435e22", "test_setup_code": "", "test_list": ["assert k_smallest_pairs_diff([1, 7, 11], [2, 4, 6], 3) == [[1, 2], [1, 4], [1, 6]]", "assert k_smallest_pairs_diff([1, 2], [3], 3) == [[1, 3], [2, 3]]", "assert k_smallest_pairs_diff([1, 1, 2], [1, 2, 3], 2) == [[1, 1], [1, 1]]", "assert k_smallest_pairs_diff([], [1, 2, 3], 2) == []"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the absolute difference of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs_diff(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-abs(nums1[i] - nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_b9574816-c7cc-4082-987a-e567f0dc4c9d", "test_setup_code": "", "test_list": ["assert k_largest_pairs_diff([1, 2, 3], [4, 5, 6], 3) == [[1, 6], [2, 6], [3, 6]]", "assert k_largest_pairs_diff([1, 2], [3, 4], 2) == [[1, 4], [2, 4]]", "assert k_largest_pairs_diff([1, 2, 3], [1, 2, 3], 2) == [[1, 3], [2, 3]]", "assert k_largest_pairs_diff([1, 2, 3], [4, 5, 6], 0) == []"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the smallest and the sum is even.", "code": "import heapq\n\ndef k_smallest_pairs_sum_even(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and (nums1[i] + nums2[j]) % 2 == 0:\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_7ecbad1a-0fc7-480c-8252-20f599e13453", "test_setup_code": "", "test_list": ["assert k_smallest_pairs_sum_even([1, 2, 3], [4, 5, 6], 2) == [[2, 4], [1, 5]]", "assert k_smallest_pairs_sum_even([1, 3, 5], [2, 4, 6], 3) == [[1, 3], [1, 5], [3, 3]]", "assert k_smallest_pairs_sum_even([1, 2], [3, 4], 1) == [[2, 4]]", "assert k_smallest_pairs_sum_even([1, 1, 1], [1, 1, 1], 2) == []"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the largest and the sum is odd.", "code": "import heapq\n\ndef k_largest_pairs_sum_odd(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and (nums1[i] + nums2[j]) % 2 != 0:\n            heapq.heappush(queue, [-(nums1[i] + nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_67bbbabd-f678-43a8-8b85-2b6a232bec0b", "test_setup_code": "", "test_list": ["assert k_largest_pairs_sum_odd([1, 2, 3], [4, 5, 6], 2) == [[3, 6], [1, 6]]", "assert k_largest_pairs_sum_odd([1, 3, 5], [2, 4, 6], 3) == [[5, 6], [3, 6], [1, 6]]", "assert k_largest_pairs_sum_odd([1, 2], [3, 4], 1) == [[1, 4]]", "assert k_largest_pairs_sum_odd([1, 2, 3], [2, 4, 6], 2) == [[3, 4], [1, 4]]"], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the smallest and the sum is a prime number.", "code": "import heapq\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef k_smallest_pairs_sum_prime(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and is_prime(nums1[i] + nums2[j]):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_392aa731-f0c4-4bd3-86a1-c396154c6132", "test_setup_code": "", "test_list": ["assert is_prime(2) == True", "assert is_prime(1) == False", "assert is_prime(17) == True", "assert is_prime(15) == False"], "challenge_test_list": []}
