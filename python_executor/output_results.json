[
  {
    "task_id": 1,
    "text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16"
      }
    ],
    "error": null
  },
  {
    "task_id": 2,
    "text": "Write a function to find the similar elements from the given two tuple lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)"
      },
      {
        "passed": true,
        "message": "Test passed: assert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)"
      }
    ],
    "error": null
  },
  {
    "task_id": 3,
    "text": "Write a python function to identify non-prime numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_not_prime(2) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_not_prime(10) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_not_prime(35) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 4,
    "text": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] "
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] "
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]"
      }
    ],
    "error": null
  },
  {
    "task_id": 5,
    "text": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_ways(2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_ways(8) == 153"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_ways(12) == 2131"
      }
    ],
    "error": null
  },
  {
    "task_id": 6,
    "text": "Write a python function to check whether the two numbers differ at one bit position only or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert differ_At_One_Bit_Pos(13,9) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert differ_At_One_Bit_Pos(15,8) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert differ_At_One_Bit_Pos(2,4) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 7,
    "text": "Write a function to find all words which are at least 4 characters long in a string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']"
      }
    ],
    "error": null
  },
  {
    "task_id": 8,
    "text": "Write a function to find squares of individual elements in a list using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_nums([10,20,30])==([100,400,900])"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_nums([12,15])==([144,225])"
      }
    ],
    "error": null
  },
  {
    "task_id": 9,
    "text": "Write a python function to find the minimum number of rotations required to get the same string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Rotations(\"aaaa\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Rotations(\"ab\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Rotations(\"abc\") == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 10,
    "text": "Write a function to get the n smallest items from a dataset.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]"
      },
      {
        "passed": true,
        "message": "Test passed: assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]"
      },
      {
        "passed": true,
        "message": "Test passed: assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]"
      }
    ],
    "error": null
  },
  {
    "task_id": 11,
    "text": "Write a python function to remove first and last occurrence of a given character from the string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_Occ(\"hello\",\"l\") == \"heo\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_Occ(\"abcda\",\"a\") == \"bcd\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_Occ(\"PHP\",\"P\") == \"H\""
      }
    ],
    "error": null
  },
  {
    "task_id": 12,
    "text": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 13,
    "text": "Write a function to count the most common words in a dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 14,
    "text": "Write a python function to find the volume of a triangular prism.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Volume(10,8,6) == 240"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Volume(3,2,2) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Volume(1,2,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 15,
    "text": "Write a function to split a string at lowercase letters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split_lowerstring(\"AbCd\")==['bC','d']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
      }
    ],
    "error": null
  },
  {
    "task_id": 16,
    "text": "Write a function to find sequences of lowercase letters joined with an underscore.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 17,
    "text": "Write a function to find the perimeter of a square.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert square_perimeter(10)==40"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_perimeter(5)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_perimeter(4)==16"
      }
    ],
    "error": null
  },
  {
    "task_id": 18,
    "text": "Write a function to remove characters from the first string which are present in the second string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
      }
    ],
    "error": null
  },
  {
    "task_id": 19,
    "text": "Write a function to find whether a given array of integers contains any duplicate element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert test_duplicate(([1,2,3,4,5]))==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_duplicate(([1,2,3,4, 4]))==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 20,
    "text": "Write a function to check if the given number is woodball or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_woodall(383) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_woodall(254) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_woodall(200) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 21,
    "text": "Write a function to find m number of multiples of n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiples_of_num(4,3)== [3,6,9,12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiples_of_num(2,5)== [5,10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
      }
    ],
    "error": null
  },
  {
    "task_id": 22,
    "text": "Write a function to find the first duplicate element in a given array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_first_duplicate([1, 2, 3, 4])==-1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 23,
    "text": "Write a python function to find the maximum sum of elements of list in a list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
      }
    ],
    "error": null
  },
  {
    "task_id": 24,
    "text": "Write a function to convert the given binary number to its decimal equivalent.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert binary_to_decimal(100) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_to_decimal(1011) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_to_decimal(1101101) == 109"
      }
    ],
    "error": null
  },
  {
    "task_id": 25,
    "text": "Write a python function to find the product of non-repeated elements in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Product([1,1,2,3],4) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Product([1,2,3,1,1],5) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Product([1,1,4,5,6],5) == 120"
      }
    ],
    "error": null
  },
  {
    "task_id": 26,
    "text": "Write a function to check if the given tuple list has all k elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 27,
    "text": "Write a python function to remove all digits from a list of strings.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
      }
    ],
    "error": null
  },
  {
    "task_id": 28,
    "text": "Write a python function to find binomial co-efficient.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert binomial_Coeff(5,2) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert binomial_Coeff(4,3) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert binomial_Coeff(3,2) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 29,
    "text": "Write a python function to find the element occurring odd number of times.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 30,
    "text": "Write a python function to count all the substrings starting and ending with same characters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends(\"abc\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends(\"abcda\") == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends(\"ab\") == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 31,
    "text": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 32,
    "text": "Write a python function to find the largest prime factor of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_Prime_Factors(15) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Prime_Factors(6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Prime_Factors(2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 33,
    "text": "Write a python function to convert a decimal number to binary number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert decimal_To_Binary(10) == 1010"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_To_Binary(1) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_To_Binary(20) == 10100"
      }
    ],
    "error": null
  },
  {
    "task_id": 34,
    "text": "Write a python function to find the missing number in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_missing([1,2,3,5],4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_missing([1,3,4,5],4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_missing([1,2,3,5,6,7],5) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 35,
    "text": "Write a function to find the n-th rectangular number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_rect_num(4) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_rect_num(5) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_rect_num(6) == 42"
      }
    ],
    "error": null
  },
  {
    "task_id": 36,
    "text": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Nth_Digit(1,2,1) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Nth_Digit(3,5,1) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Nth_Digit(5,6,5) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 37,
    "text": "Write a function to sort a given mixed list of integers and strings.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
      }
    ],
    "error": null
  },
  {
    "task_id": 38,
    "text": "Write a function to find the division of first even and odd number of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert div_even_odd([1,3,5,7,4,1,6,8])==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_even_odd([1,5,7,9,10])==10"
      }
    ],
    "error": null
  },
  {
    "task_id": 39,
    "text": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rearange_string(\"aab\")==('aba')"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearange_string(\"aabb\")==('abab')"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearange_string(\"abccdd\")==('cdabcd')"
      }
    ],
    "error": null
  },
  {
    "task_id": 40,
    "text": "Write a function to find frequency of the elements in a given list of lists using collections module.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})"
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})"
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
      }
    ],
    "error": null
  },
  {
    "task_id": 41,
    "text": "Write a function to filter even numbers using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
      }
    ],
    "error": null
  },
  {
    "task_id": 42,
    "text": "Write a python function to find the sum of repeated elements in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([1,2,3,1,1,4,5,6],8) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([1,2,3,1,1],5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([1,1,2],3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 43,
    "text": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"aab_cbbbc\") == 'Found a match!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"aab_Abbbc\") == 'Not matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
      }
    ],
    "error": null
  },
  {
    "task_id": 44,
    "text": "Write a function that matches a word at the beginning of a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_string(\" python\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_string(\"python\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_string(\"  lang\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 45,
    "text": "Write a function to find the gcd of the given array elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_gcd([2, 4, 6, 8, 16]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_gcd([1, 2, 3]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_gcd([2, 4, 6, 8]) == 2 "
      }
    ],
    "error": null
  },
  {
    "task_id": 46,
    "text": "Write a python function to determine whether all the numbers are different from each other are not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert test_distinct([1,5,7,9]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_distinct([2,4,5,5,7,9]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_distinct([1,2,3]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 47,
    "text": "Write a python function to find the last digit when factorial of a divides factorial of b.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert compute_Last_Digit(2,4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert compute_Last_Digit(6,8) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert compute_Last_Digit(1,2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 48,
    "text": "Write a python function to set all odd bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_bit_set_number(10) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_bit_set_number(20) == 21"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_bit_set_number(30) == 31"
      }
    ],
    "error": null
  },
  {
    "task_id": 49,
    "text": "Write a function to extract every first or specified element from a given two-dimensional list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 50,
    "text": "Write a function to find the list with minimum length using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
      }
    ],
    "error": null
  },
  {
    "task_id": 51,
    "text": "Write a function to print check if the triangle is equilateral or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_equilateral(6,8,12)==False "
      },
      {
        "passed": true,
        "message": "Test passed: assert check_equilateral(6,6,12)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_equilateral(6,6,6)==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 52,
    "text": "Write a function to caluclate area of a parallelogram.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_area(10,20)==200"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_area(15,20)==300"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_area(8,9)==72"
      }
    ],
    "error": null
  },
  {
    "task_id": 53,
    "text": "Write a python function to check whether the first and last characters of a given string are equal or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Equality(\"abcda\") == \"Equal\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Equality(\"ab\") == \"Not Equal\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Equality(\"mad\") == \"Not Equal\""
      }
    ],
    "error": null
  },
  {
    "task_id": 54,
    "text": "Write a function to sort the given array by using counting sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]"
      },
      {
        "passed": true,
        "message": "Test passed: assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]"
      },
      {
        "passed": true,
        "message": "Test passed: assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
      }
    ],
    "error": null
  },
  {
    "task_id": 55,
    "text": "Write a function to find t-nth term of geometric series.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tn_gp(1,5,2)==16"
      },
      {
        "passed": true,
        "message": "Test passed: assert tn_gp(1,5,4)==256"
      },
      {
        "passed": true,
        "message": "Test passed: assert tn_gp(2,6,3)==486"
      }
    ],
    "error": null
  },
  {
    "task_id": 56,
    "text": "Write a python function to check if a given number is one less than twice its reverse.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check(70) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check(23) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check(73) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 57,
    "text": "Write a python function to find the largest number that can be formed with the given digits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Num([1,2,3],3) == 321"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Num([4,5,6,1],4) == 6541"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Num([1,2,3,9],4) == 9321"
      }
    ],
    "error": null
  },
  {
    "task_id": 58,
    "text": "Write a python function to check whether the given two integers have opposite sign or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert opposite_Signs(1,-2) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert opposite_Signs(3,2) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert opposite_Signs(-10,-10) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 59,
    "text": "Write a function to find the nth octagonal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_octagonal(5) == 65"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_octagonal(10) == 280"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_octagonal(15) == 645"
      }
    ],
    "error": null
  },
  {
    "task_id": 60,
    "text": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 61,
    "text": "Write a python function to count number of substrings with the sum of digits equal to their length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Substrings('112112',6) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substrings('111',3) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substrings('1101112',7) == 12"
      }
    ],
    "error": null
  },
  {
    "task_id": 62,
    "text": "Write a python function to find smallest number in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert smallest_num([10, 20, 1, 45, 99]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_num([1, 2, 3]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_num([45, 46, 50, 60]) == 45"
      }
    ],
    "error": null
  },
  {
    "task_id": 63,
    "text": "Write a function to find the maximum difference between available pairs in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
      }
    ],
    "error": null
  },
  {
    "task_id": 64,
    "text": "Write a function to sort a list of tuples using lambda.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"
      },
      {
        "passed": true,
        "message": "Test passed: assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
      }
    ],
    "error": null
  },
  {
    "task_id": 65,
    "text": "Write a function of recursion list sum.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21"
      },
      {
        "passed": true,
        "message": "Test passed: assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106"
      },
      {
        "passed": true,
        "message": "Test passed: assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
      }
    ],
    "error": null
  },
  {
    "task_id": 66,
    "text": "Write a python function to count positive numbers in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pos_count([1,-2,3,-4]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert pos_count([3,4,5,-1]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert pos_count([1,2,3,4]) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 67,
    "text": "Write a function to find the number of ways to partition a set of bell numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert bell_number(2)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert bell_number(10)==115975"
      },
      {
        "passed": true,
        "message": "Test passed: assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
      }
    ],
    "error": null
  },
  {
    "task_id": 68,
    "text": "Write a python function to check whether the given array is monotonic or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Monotonic([6, 5, 4, 4]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Monotonic([1, 2, 2, 3]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Monotonic([1, 3, 2]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 69,
    "text": "Write a function to check whether a list contains the given sublist or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_sublist([2,4,3,5,7],[3,7])==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_sublist([2,4,3,5,7],[4,3])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_sublist([2,4,3,5,7],[1,6])==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 70,
    "text": "Write a function to find whether all the given tuples have equal length or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
      }
    ],
    "error": null
  },
  {
    "task_id": 71,
    "text": "Write a function to sort a list of elements using comb sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"
      },
      {
        "passed": true,
        "message": "Test passed: assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]"
      },
      {
        "passed": true,
        "message": "Test passed: assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
      }
    ],
    "error": null
  },
  {
    "task_id": 72,
    "text": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dif_Square(5) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert dif_Square(10) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert dif_Square(15) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 73,
    "text": "Write a function to split the given string with multiple delimiters by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
      }
    ],
    "error": null
  },
  {
    "task_id": 74,
    "text": "Write a function to check whether it follows the sequence given in the patterns array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True "
      },
      {
        "passed": true,
        "message": "Test passed: assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False "
      },
      {
        "passed": true,
        "message": "Test passed: assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
      }
    ],
    "error": null
  },
  {
    "task_id": 75,
    "text": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 76,
    "text": "Write a python function to count the number of squares in a rectangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(4,3) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(2,2) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(1,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 77,
    "text": "Write a python function to find the difference between sum of even and odd digits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Diff (12345) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Diff(1212112) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Diff(1212) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 78,
    "text": "Write a python function to find number of integers with odd number of set bits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_With_Odd_SetBits(5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_With_Odd_SetBits(10) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_With_Odd_SetBits(15) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 79,
    "text": "Write a python function to check whether the length of the word is odd or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"Hadoop\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"great\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"structure\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 80,
    "text": "Write a function to find the nth tetrahedral number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tetrahedral_number(5) == 35.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert tetrahedral_number(6) == 56.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert tetrahedral_number(7) == 84.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 81,
    "text": "Write a function to zip the two given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 82,
    "text": "Write a function to find the volume of a sphere.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_sphere(10)==4188.790204786391"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_sphere(25)==65449.84694978735"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_sphere(20)==33510.32163829113"
      }
    ],
    "error": null
  },
  {
    "task_id": 83,
    "text": "Write a python function to find the character made by adding all the characters of the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Char(\"abc\") == \"f\""
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Char(\"gfg\") == \"t\""
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Char(\"ab\") == \"c\""
      }
    ],
    "error": null
  },
  {
    "task_id": 84,
    "text": "Write a function to find the n-th number in newman conway sequence.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sequence(10) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert sequence(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert sequence(3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 85,
    "text": "Write a function to find the surface area of a sphere.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_sphere(10)==1256.6370614359173"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_sphere(15)==2827.4333882308138"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_sphere(20)==5026.548245743669"
      }
    ],
    "error": null
  },
  {
    "task_id": 86,
    "text": "Write a function to find nth centered hexagonal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert centered_hexagonal_number(10) == 271"
      },
      {
        "passed": true,
        "message": "Test passed: assert centered_hexagonal_number(2) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert centered_hexagonal_number(9) == 217"
      }
    ],
    "error": null
  },
  {
    "task_id": 87,
    "text": "Write a function to merge three dictionaries into a single expression.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
      }
    ],
    "error": null
  },
  {
    "task_id": 88,
    "text": "Write a function to get the frequency of the elements in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) "
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) "
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
      }
    ],
    "error": null
  },
  {
    "task_id": 89,
    "text": "Write a function to find the closest smaller number than n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert closest_num(11) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert closest_num(7) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert closest_num(12) == 11"
      }
    ],
    "error": null
  },
  {
    "task_id": 90,
    "text": "Write a python function to find the length of the longest word.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"a\",\"ab\",\"abc\"]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"small\",\"big\",\"tall\"]) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 91,
    "text": "Write a function to check if a substring is present in a given list of string values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 92,
    "text": "Write a function to check whether the given number is undulating or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_undulating(\"1212121\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_undulating(\"1991\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_undulating(\"121\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 93,
    "text": "Write a function to calculate the value of 'a' to the power 'b'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert power(3,4) == 81"
      },
      {
        "passed": true,
        "message": "Test passed: assert power(2,3) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert power(5,5) == 3125"
      }
    ],
    "error": null
  },
  {
    "task_id": 94,
    "text": "Write a function to extract the index minimum value record from the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
      }
    ],
    "error": null
  },
  {
    "task_id": 95,
    "text": "Write a python function to find the minimum length of sublist.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Find_Min_Length([[1],[1,2]]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 96,
    "text": "Write a python function to find the number of divisors of a given integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert divisor(15) == 4 "
      },
      {
        "passed": true,
        "message": "Test passed: assert divisor(12) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert divisor(9) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 97,
    "text": "Write a function to find frequency count of list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
      }
    ],
    "error": null
  },
  {
    "task_id": 98,
    "text": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiply_num((8, 2, 3, -1, 7))==-67.2"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_num((-10,-20,-30))==-2000.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_num((19,15,18))==1710.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 99,
    "text": "Write a function to convert the given decimal number to its binary equivalent.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_binary(8) == '1000'"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_binary(18) == '10010'"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_binary(7) == '111' "
      }
    ],
    "error": null
  },
  {
    "task_id": 100,
    "text": "Write a function to find the next smallest palindrome of a specified number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert next_smallest_palindrome(99)==101"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_smallest_palindrome(1221)==1331"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_smallest_palindrome(120)==121"
      }
    ],
    "error": null
  },
  {
    "task_id": 101,
    "text": "Write a function to find the kth element in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert kth_element([12,3,5,7,19], 5, 2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert kth_element([17,24,8,23], 4, 3) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert kth_element([16,21,25,36,4], 5, 4) == 36"
      }
    ],
    "error": null
  },
  {
    "task_id": 102,
    "text": "Write a function to convert snake case string to camel case string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('python_program')=='PythonProgram'"
      },
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('python_language')==('PythonLanguage')"
      },
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
      }
    ],
    "error": null
  },
  {
    "task_id": 103,
    "text": "Write a function to find eulerian number a(n, m).",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert eulerian_num(3, 1) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert eulerian_num(4, 1) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert eulerian_num(5, 3) == 26"
      }
    ],
    "error": null
  },
  {
    "task_id": 104,
    "text": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 105,
    "text": "Write a python function to count true booleans in the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count([True,False,True]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count([False,False]) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count([True,True,True]) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 106,
    "text": "Write a function to add the given list to the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
      }
    ],
    "error": null
  },
  {
    "task_id": 107,
    "text": "Write a python function to count hexadecimal numbers for a given range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Hexadecimal(10,15) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Hexadecimal(2,4) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Hexadecimal(15,16) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 108,
    "text": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
      }
    ],
    "error": null
  },
  {
    "task_id": 109,
    "text": "Write a python function to find the count of rotations of a binary string with odd value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_Equivalent(\"011001\",6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Equivalent(\"11011\",5) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Equivalent(\"1010\",4) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 110,
    "text": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 111,
    "text": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
      }
    ],
    "error": null
  },
  {
    "task_id": 112,
    "text": "Write a python function to find the perimeter of a cylinder.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert perimeter(2,4) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter(1,2) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter(3,1) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 113,
    "text": "Write a function to check if a string represents an integer or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_integer(\"python\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_integer(\"1\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_integer(\"12345\")==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 114,
    "text": "Write a function to assign frequency to each tuple in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 115,
    "text": "Write a function to check whether all dictionaries in a list are empty or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert empty_dit([{},{},{}])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert empty_dit([{1,2},{},{}])==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert empty_dit({})==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 116,
    "text": "Write a function to convert a given tuple of positive integers into an integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_int((1,2,3))==123"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_int((4,5,6))==456"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_int((5,6,7))==567"
      }
    ],
    "error": null
  },
  {
    "task_id": 117,
    "text": "Write a function to convert all possible convertible elements in the list to float.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 118,
    "text": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert string_to_list(\"python programming\")==['python','programming']"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_to_list(\"write a program\")==['write','a','program']"
      }
    ],
    "error": null
  },
  {
    "task_id": 119,
    "text": "Write a python function to find the element that appears only once in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert search([1,1,2,2,3],5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert search([1,2,2,3,3,4,4],7) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 120,
    "text": "Write a function to find the maximum product from the pairs of tuples within a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product_tuple([(10,20), (15,2), (5,10)] )==200"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
      }
    ],
    "error": null
  },
  {
    "task_id": 121,
    "text": "Write a function to find the triplet with sum of the given array",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 122,
    "text": "Write a function to find n\u2019th smart number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert smartNumber(1) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert smartNumber(50) == 273"
      },
      {
        "passed": true,
        "message": "Test passed: assert smartNumber(1000) == 2664"
      }
    ],
    "error": null
  },
  {
    "task_id": 123,
    "text": "Write a function to sum all amicable numbers from 1 to a specified number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert amicable_numbers_sum(999)==504"
      },
      {
        "passed": true,
        "message": "Test passed: assert amicable_numbers_sum(9999)==31626"
      },
      {
        "passed": true,
        "message": "Test passed: assert amicable_numbers_sum(99)==0"
      }
    ],
    "error": null
  },
  {
    "task_id": 124,
    "text": "Write a function to get the angle of a complex number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert angle_complex(0,1j)==1.5707963267948966 "
      },
      {
        "passed": true,
        "message": "Test passed: assert angle_complex(2,1j)==0.4636476090008061"
      },
      {
        "passed": true,
        "message": "Test passed: assert angle_complex(0,2j)==1.5707963267948966"
      }
    ],
    "error": null
  },
  {
    "task_id": 125,
    "text": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_length(\"11000010001\", 11) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_length(\"10111\", 5) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_length(\"11011101100101\", 14) == 2 "
      }
    ],
    "error": null
  },
  {
    "task_id": 126,
    "text": "Write a python function to find the sum of common divisors of two given numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum(10,15) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum(100,150) == 93"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum(4,6) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 127,
    "text": "Write a function to multiply two integers without using the * operator in python.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiply_int(10,20)==200"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_int(5,10)==50"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_int(4,8)==32"
      }
    ],
    "error": null
  },
  {
    "task_id": 128,
    "text": "Write a function to shortlist words that are longer than n from a given list of words.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert long_words(3,\"python is a programming language\")==['python','programming','language']"
      },
      {
        "passed": true,
        "message": "Test passed: assert long_words(2,\"writing a program\")==['writing','program']"
      },
      {
        "passed": true,
        "message": "Test passed: assert long_words(5,\"sorting list\")==['sorting']"
      }
    ],
    "error": null
  },
  {
    "task_id": 129,
    "text": "Write a function to calculate magic square.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 130,
    "text": "Write a function to find the item with maximum frequency in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
      }
    ],
    "error": null
  },
  {
    "task_id": 131,
    "text": "Write a python function to reverse only the vowels of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert reverse_vowels(\"Python\") == \"Python\""
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_vowels(\"USA\") == \"ASU\""
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_vowels(\"ab\") == \"ab\""
      }
    ],
    "error": null
  },
  {
    "task_id": 132,
    "text": "Write a function to convert tuple to a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert tup_string(('p','y','t','h','o','n'))==(\"python\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 133,
    "text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 134,
    "text": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_last([5,7,10],3,1) == \"ODD\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_last([2,3],2,3) == \"EVEN\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_last([1,2,3],3,1) == \"ODD\""
      }
    ],
    "error": null
  },
  {
    "task_id": 135,
    "text": "Write a function to find the nth hexagonal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert hexagonal_num(10) == 190"
      },
      {
        "passed": true,
        "message": "Test passed: assert hexagonal_num(5) == 45"
      },
      {
        "passed": true,
        "message": "Test passed: assert hexagonal_num(7) == 91"
      }
    ],
    "error": null
  },
  {
    "task_id": 136,
    "text": "Write a function to calculate electricity bill.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cal_electbill(75)==246.25"
      },
      {
        "passed": true,
        "message": "Test passed: assert cal_electbill(265)==1442.75"
      },
      {
        "passed": true,
        "message": "Test passed: assert cal_electbill(100)==327.5"
      }
    ],
    "error": null
  },
  {
    "task_id": 137,
    "text": "Write a function to find the ration of zeroes in an array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15"
      },
      {
        "passed": true,
        "message": "Test passed: assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00"
      },
      {
        "passed": true,
        "message": "Test passed: assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
      }
    ],
    "error": null
  },
  {
    "task_id": 138,
    "text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Sum_Of_Powers_Of_Two(10) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Sum_Of_Powers_Of_Two(7) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Sum_Of_Powers_Of_Two(14) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 139,
    "text": "Write a function to find the circumference of a circle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert circle_circumference(10)==62.830000000000005"
      },
      {
        "passed": true,
        "message": "Test passed: assert circle_circumference(5)==31.415000000000003"
      },
      {
        "passed": true,
        "message": "Test passed: assert circle_circumference(4)==25.132"
      }
    ],
    "error": null
  },
  {
    "task_id": 140,
    "text": "Write a function to extract elements that occur singly in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
      }
    ],
    "error": null
  },
  {
    "task_id": 141,
    "text": "Write a function to sort a list of elements using pancake sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
      }
    ],
    "error": null
  },
  {
    "task_id": 142,
    "text": "Write a function to count the same pair in three given lists.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 143,
    "text": "Write a function to find number of lists present in the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 144,
    "text": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Pairs([1,8,9,15,16],5) == 74"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Pairs([1,2,3,4],4) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
      }
    ],
    "error": null
  },
  {
    "task_id": 145,
    "text": "Write a python function to find the maximum difference between any two elements in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_Abs_Diff((2,1,5,3),4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Abs_Diff((9,3,2,5,1),5) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Abs_Diff((3,2,1),3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 146,
    "text": "Write a function to find the ascii value of total characters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert ascii_value_string(\"python\")==112"
      },
      {
        "passed": true,
        "message": "Test passed: assert ascii_value_string(\"Program\")==80"
      },
      {
        "passed": true,
        "message": "Test passed: assert ascii_value_string(\"Language\")==76"
      }
    ],
    "error": null
  },
  {
    "task_id": 147,
    "text": "Write a function to find the maximum total path sum in the given triangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 "
      },
      {
        "passed": true,
        "message": "Test passed: assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
      }
    ],
    "error": null
  },
  {
    "task_id": 148,
    "text": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_digits_twoparts(35)==17"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_digits_twoparts(7)==7"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_digits_twoparts(100)==19"
      }
    ],
    "error": null
  },
  {
    "task_id": 149,
    "text": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
      }
    ],
    "error": null
  },
  {
    "task_id": 150,
    "text": "Write a python function to find whether the given number is present in the infinite sequence or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert does_Contain_B(1,7,3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert does_Contain_B(1,-3,5) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert does_Contain_B(3,2,5) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 151,
    "text": "Write a python function to check whether the given number is co-prime or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_coprime(17,13) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_coprime(15,21) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_coprime(25,45) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 152,
    "text": "Write a function to sort the given array by using merge sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 153,
    "text": "Write a function to find the vertex of a parabola.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parabola_vertex(5,3,2)==(-0.3, 1.55)"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
      }
    ],
    "error": null
  },
  {
    "task_id": 154,
    "text": "Write a function to extract every specified element from a given two dimensional list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 155,
    "text": "Write a python function to toggle all even bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(10) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(20) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(30) == 20"
      }
    ],
    "error": null
  },
  {
    "task_id": 156,
    "text": "Write a function to convert a tuple of string values to a tuple of integer values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
      }
    ],
    "error": null
  },
  {
    "task_id": 157,
    "text": "Write a function to reflect the run-length encoding from a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 158,
    "text": "Write a python function to find k number of operations required to make all elements equal.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Ops([2,2,2,2],4,3) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Ops([4,2,6,8],4,3) == -1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Ops([21,33,9,45,63],5,6) == 24"
      }
    ],
    "error": null
  },
  {
    "task_id": 159,
    "text": "Write a function to print the season for the given month and day.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert month_season('January',4)==('winter')"
      },
      {
        "passed": true,
        "message": "Test passed: assert month_season('October',28)==('autumn')"
      },
      {
        "passed": true,
        "message": "Test passed: assert month_season('June',6)==('spring')"
      }
    ],
    "error": null
  },
  {
    "task_id": 160,
    "text": "Write a function to find x and y that satisfies ax + by = n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)"
      },
      {
        "passed": true,
        "message": "Test passed: assert solution(4, 2, 7) == 'No solution'"
      },
      {
        "passed": true,
        "message": "Test passed: assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
      }
    ],
    "error": null
  },
  {
    "task_id": 161,
    "text": "Write a function to remove all elements from a given list present in another list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
      }
    ],
    "error": null
  },
  {
    "task_id": 162,
    "text": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_series(6)==12"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_series(10)==30"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_series(9)==25"
      }
    ],
    "error": null
  },
  {
    "task_id": 163,
    "text": "Write a function to calculate the area of a regular polygon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert area_polygon(4,20)==400.00000000000006"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_polygon(10,15)==1731.1969896610804"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_polygon(9,7)==302.90938549487214"
      }
    ],
    "error": null
  },
  {
    "task_id": 164,
    "text": "Write a python function to check whether the sum of divisors are same or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert areEquivalent(36,57) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert areEquivalent(2,4) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert areEquivalent(23,47) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 165,
    "text": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_char_position(\"xbcefg\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_char_position(\"ABcED\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_char_position(\"AbgdeF\") == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 166,
    "text": "Write a python function to count the pairs with xor as an even number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_even_Pair([5,4,7,2,1],5) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_even_Pair([7,2,8,1,0,5,11],7) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_even_Pair([1,2,3],3) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 167,
    "text": "Write a python function to find smallest power of 2 greater than or equal to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert next_Power_Of_2(0) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_Power_Of_2(5) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_Power_Of_2(17) == 32"
      }
    ],
    "error": null
  },
  {
    "task_id": 168,
    "text": "Write a python function to find the frequency of a number in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert frequency([1,2,3],4) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency([1,2,2,3,3,3,4],3) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency([0,1,2,3,1,2],1) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 169,
    "text": "Write a function to calculate the nth pell number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_pell(4) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_pell(7) == 169"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_pell(8) == 408"
      }
    ],
    "error": null
  },
  {
    "task_id": 170,
    "text": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
      }
    ],
    "error": null
  },
  {
    "task_id": 171,
    "text": "Write a function to find the perimeter of a pentagon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert perimeter_pentagon(5)==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_pentagon(10)==50"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_pentagon(15)==75"
      }
    ],
    "error": null
  },
  {
    "task_id": 172,
    "text": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_occurance(\"letstdlenstdporstd\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_occurance(\"truststdsolensporsd\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_occurance(\"makestdsostdworthit\") == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 173,
    "text": "Write a function to remove everything except alphanumeric characters from a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
      }
    ],
    "error": null
  },
  {
    "task_id": 174,
    "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
      }
    ],
    "error": null
  },
  {
    "task_id": 175,
    "text": "Write a function to verify validity of a string of parentheses.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_valid_parenthese(\"(){}[]\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_valid_parenthese(\"()[{)}\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_valid_parenthese(\"()\")==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 176,
    "text": "Write a function to find the perimeter of a triangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert perimeter_triangle(10,20,30)==60"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_triangle(3,4,5)==12"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_triangle(25,35,45)==105"
      }
    ],
    "error": null
  },
  {
    "task_id": 177,
    "text": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert answer(3,8) == (3,6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert answer(2,6) == (2,4)"
      },
      {
        "passed": true,
        "message": "Test passed: assert answer(1,3) == (1,2)"
      }
    ],
    "error": null
  },
  {
    "task_id": 178,
    "text": "Write a function to search some literals strings in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert string_literals(['language'],'python language')==('Matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_literals(['program'],'python language')==('Not Matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_literals(['python'],'programming language')==('Not Matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 179,
    "text": "Write a function to find if the given number is a keith number or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_num_keith(14) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_num_keith(12) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_num_keith(197) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 180,
    "text": "Write a function to calculate distance between two points using latitude and longitude.",
    "test_results": [
      {
        "passed": false,
        "message": "Assertion failed: assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429"
      },
      {
        "passed": false,
        "message": "Assertion failed: assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514"
      },
      {
        "passed": true,
        "message": "Test passed: assert distance_lat_long(10,20,30,40)==6783.751974994595"
      }
    ],
    "error": null
  },
  {
    "task_id": 181,
    "text": "Write a function to find the longest common prefix in the given set of strings.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
      }
    ],
    "error": null
  },
  {
    "task_id": 182,
    "text": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
      }
    ],
    "error": null
  },
  {
    "task_id": 183,
    "text": "Write a function to count all the distinct pairs having a difference of k in any array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 184,
    "text": "Write a function to find all the values in a list that are greater than a specified number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert greater_specificnum([220, 330, 500],200)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert greater_specificnum([12, 17, 21],20)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert greater_specificnum([1,2,3,4],10)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 185,
    "text": "Write a function to find the focus of a parabola.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parabola_focus(5,3,2)==(-0.3, 1.6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_focus(2,4,6)==(-1.0, 4.125)"
      }
    ],
    "error": null
  },
  {
    "task_id": 186,
    "text": "Write a function to search some literals strings in a string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
      }
    ],
    "error": null
  },
  {
    "task_id": 187,
    "text": "Write a function to find the longest common subsequence for the given two sequences.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 188,
    "text": "Write a python function to check whether the given number can be represented by product of two squares or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert prod_Square(25) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert prod_Square(30) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert prod_Square(16) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 189,
    "text": "Write a python function to find the first missing positive number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Missing_Positive([1,2,3,-1,5],5) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 190,
    "text": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Intgral_Points(1,1,4,4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Intgral_Points(1,2,1,2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Intgral_Points(4,2,6,4) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 191,
    "text": "Write a function to check whether the given month name contains 30 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber(\"February\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber(\"June\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber(\"April\")==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 192,
    "text": "Write a python function to check whether a string has atleast one letter and one number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_String('thishasboth29') == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_String('python') == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_String ('string') == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 193,
    "text": "Write a function to remove the duplicates from the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
      }
    ],
    "error": null
  },
  {
    "task_id": 194,
    "text": "Write a python function to convert octal number to decimal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert octal_To_Decimal(25) == 21"
      },
      {
        "passed": true,
        "message": "Test passed: assert octal_To_Decimal(30) == 24"
      },
      {
        "passed": true,
        "message": "Test passed: assert octal_To_Decimal(40) == 32"
      }
    ],
    "error": null
  },
  {
    "task_id": 195,
    "text": "Write a python function to find the first position of an element in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first([1,2,3,4,5,6,6],6,6) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert first([1,2,2,2,3,2,2,4,2],2,9) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first([1,2,3],1,3) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 196,
    "text": "Write a function to remove all the tuples with length k.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 197,
    "text": "Write a function to perform the exponentiation of the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
      }
    ],
    "error": null
  },
  {
    "task_id": 198,
    "text": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert largest_triangle(4,2)==10.392304845413264"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_triangle(5,7)==4.639421805988064"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_triangle(9,1)==105.2220865598093"
      }
    ],
    "error": null
  },
  {
    "task_id": 199,
    "text": "Write a python function to find highest power of 2 less than or equal to given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(10) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(19) == 16"
      },
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(32) == 32"
      }
    ],
    "error": null
  },
  {
    "task_id": 200,
    "text": "Write a function to find all index positions of the maximum values in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
      }
    ],
    "error": null
  },
  {
    "task_id": 201,
    "text": "Write a python function to check whether the elements in a list are same or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert chkList(['one','one','one']) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert chkList(['one','Two','Three']) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert chkList(['bigdata','python','Django']) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 202,
    "text": "Write a function to remove even characters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_even(\"python\")==(\"pto\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_even(\"program\")==(\"porm\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_even(\"language\")==(\"lnug\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 203,
    "text": "Write a python function to find the hamming distance between given two integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert hamming_Distance(4,8) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert hamming_Distance(2,4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert hamming_Distance(1,2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 204,
    "text": "Write a python function to count the occurrence of a given character in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count(\"abcc\",\"c\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count(\"ababca\",\"a\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count(\"mnmm0pm\",\"m\") == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 205,
    "text": "Write a function to find the inversions of tuple elements in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
      }
    ],
    "error": null
  },
  {
    "task_id": 206,
    "text": "Write a function to perform the adjacent element concatenation in the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
      }
    ],
    "error": null
  },
  {
    "task_id": 207,
    "text": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_longest_repeating_subseq(\"AABEBCDD\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_longest_repeating_subseq(\"aabb\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_longest_repeating_subseq(\"aab\") == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 208,
    "text": "Write a function to check the given decimal with a precision of 2 by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('123.11') == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('0.21') == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('123.1214') == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 209,
    "text": "Write a function to delete the smallest element from the given heap and then insert a new item.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
      }
    ],
    "error": null
  },
  {
    "task_id": 210,
    "text": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_allowed_specific_char(\"*&%@#!}{\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 211,
    "text": "Write a python function to count numbers whose oth and nth bits are set.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Num(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Num(3) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Num(1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 212,
    "text": "Write a python function to find the sum of fourth power of n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert fourth_Power_Sum(2) == 17"
      },
      {
        "passed": true,
        "message": "Test passed: assert fourth_Power_Sum(4) == 354"
      },
      {
        "passed": true,
        "message": "Test passed: assert fourth_Power_Sum(6) == 2275"
      }
    ],
    "error": null
  },
  {
    "task_id": 213,
    "text": "Write a function to perform the concatenation of two string tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
      }
    ],
    "error": null
  },
  {
    "task_id": 214,
    "text": "Write a function to convert radians to degrees.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert degree_radian(90)==5156.620156177409"
      },
      {
        "passed": true,
        "message": "Test passed: assert degree_radian(60)==3437.746770784939"
      },
      {
        "passed": true,
        "message": "Test passed: assert degree_radian(120)==6875.493541569878"
      }
    ],
    "error": null
  },
  {
    "task_id": 215,
    "text": "Write a function to decode a run-length encoded given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']"
      },
      {
        "passed": true,
        "message": "Test passed: assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
      }
    ],
    "error": null
  },
  {
    "task_id": 216,
    "text": "Write a function to check if a nested list is a subset of another nested list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 217,
    "text": "Write a python function to find the first repeated character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Repeated_Char(\"Google\") == \"o\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Repeated_Char(\"data\") == \"a\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Repeated_Char(\"python\") == '\\0'"
      }
    ],
    "error": null
  },
  {
    "task_id": 218,
    "text": "Write a python function to find the minimum operations required to make two numbers equal.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Operations(2,4) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Operations(4,10) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Operations(1,4) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 219,
    "text": "Write a function to extract maximum and minimum k elements in the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
      }
    ],
    "error": null
  },
  {
    "task_id": 220,
    "text": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
      }
    ],
    "error": null
  },
  {
    "task_id": 221,
    "text": "Write a python function to find the first even number in a given list of numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_even([2, 3, 4]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_even([5, 6, 7]) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 222,
    "text": "Write a function to check if all the elements in tuple have same data type or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_type((5, 6, 7, 3, 5, 6) ) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_type((1, 2, \"4\") ) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_type((3, 2, 1, 4, 5) ) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 223,
    "text": "Write a function to check for majority element in the given sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 224,
    "text": "Write a python function to count set bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(4) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(6) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 225,
    "text": "Write a python function to find the minimum element in a sorted and rotated array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Min([1,2,3,4,5],0,4) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min([4,6,8],0,2) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min([2,3,5,7,9],0,4) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 226,
    "text": "Write a python function to remove the characters which have odd index values of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_values_string('abcdef') == 'ace'"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_values_string('python') == 'pto'"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_values_string('data') == 'dt'"
      }
    ],
    "error": null
  },
  {
    "task_id": 227,
    "text": "Write a function to find minimum of three numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_of_three(10,20,0)==0"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_of_three(19,15,18)==15"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_of_three(-10,-20,-30)==-30"
      }
    ],
    "error": null
  },
  {
    "task_id": 228,
    "text": "Write a python function to check whether all the bits are unset in the given range or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(4,1,2) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(17,2,4) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 229,
    "text": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
      }
    ],
    "error": null
  },
  {
    "task_id": 230,
    "text": "Write a function to replace blank spaces with any character in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_blank(\"hello people\",'@')==(\"hello@people\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_blank(\"python program language\",'$')==(\"python$program$language\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 231,
    "text": "Write a function to find the maximum sum in the given right triangle of numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum([[1], [2,1], [3,3,2]], 3) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 "
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
      }
    ],
    "error": null
  },
  {
    "task_id": 232,
    "text": "Write a function to get the n largest items from a dataset.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]"
      },
      {
        "passed": true,
        "message": "Test passed: assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]"
      },
      {
        "passed": true,
        "message": "Test passed: assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
      }
    ],
    "error": null
  },
  {
    "task_id": 233,
    "text": "Write a function to find the lateral surface area of a cylinder.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lateralsuface_cylinder(10,5)==314.15000000000003"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsuface_cylinder(4,5)==125.66000000000001"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsuface_cylinder(4,10)==251.32000000000002"
      }
    ],
    "error": null
  },
  {
    "task_id": 234,
    "text": "Write a function to find the volume of a cube.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_cube(3)==27"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cube(2)==8"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cube(5)==125"
      }
    ],
    "error": null
  },
  {
    "task_id": 235,
    "text": "Write a python function to set all even bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_bit_set_number(10) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_set_number(20) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_set_number(30) == 30"
      }
    ],
    "error": null
  },
  {
    "task_id": 236,
    "text": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert No_of_Triangle(4,2) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert No_of_Triangle(4,3) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert No_of_Triangle(1,3) == -1"
      }
    ],
    "error": null
  },
  {
    "task_id": 237,
    "text": "Write a function to check the occurrences of records which occur similar times in the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
      }
    ],
    "error": null
  },
  {
    "task_id": 238,
    "text": "Write a python function to count number of non-empty substrings of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert number_of_substrings(\"abc\") == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert number_of_substrings(\"abcd\") == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert number_of_substrings(\"abcde\") == 15"
      }
    ],
    "error": null
  },
  {
    "task_id": 239,
    "text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_total_number_of_sequences(10, 4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_total_number_of_sequences(5, 2) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_total_number_of_sequences(16, 3) == 84"
      }
    ],
    "error": null
  },
  {
    "task_id": 240,
    "text": "Write a function to replace the last element of the list with another list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
      }
    ],
    "error": null
  },
  {
    "task_id": 241,
    "text": "Write a function to generate a 3d array having each element as '*'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 242,
    "text": "Write a function to count total characters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_charac(\"python programming\")==18"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_charac(\"language\")==8"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_charac(\"words\")==5"
      }
    ],
    "error": null
  },
  {
    "task_id": 243,
    "text": "Write a function to sort the given list based on the occurrence of first element of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 244,
    "text": "Write a python function to find the next perfect square greater than a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert next_Perfect_Square(35) == 36"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_Perfect_Square(6) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert next_Perfect_Square(9) == 16"
      }
    ],
    "error": null
  },
  {
    "task_id": 245,
    "text": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
      }
    ],
    "error": null
  },
  {
    "task_id": 246,
    "text": "Write a function for computing square roots using the babylonian method.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert babylonian_squareroot(10)==3.162277660168379"
      },
      {
        "passed": true,
        "message": "Test passed: assert babylonian_squareroot(2)==1.414213562373095"
      },
      {
        "passed": true,
        "message": "Test passed: assert babylonian_squareroot(9)==3.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 247,
    "text": "Write a function to find the longest palindromic subsequence in the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lps(\"TENS FOR TENS\") == 5 "
      },
      {
        "passed": true,
        "message": "Test passed: assert lps(\"CARDIO FOR CARDS\") == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
      }
    ],
    "error": null
  },
  {
    "task_id": 248,
    "text": "Write a function to calculate the harmonic sum of n-1.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(7) == 2.5928571428571425"
      },
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(4) == 2.083333333333333"
      },
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(19) == 3.547739657143682"
      }
    ],
    "error": null
  },
  {
    "task_id": 249,
    "text": "Write a function to find the intersection of two arrays using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
      }
    ],
    "error": null
  },
  {
    "task_id": 250,
    "text": "Write a python function to count the occcurences of an element in a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 251,
    "text": "Write a function to insert an element before each element of a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] "
      },
      {
        "passed": true,
        "message": "Test passed: assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] "
      },
      {
        "passed": true,
        "message": "Test passed: assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
      }
    ],
    "error": null
  },
  {
    "task_id": 252,
    "text": "Write a python function to convert complex numbers to polar coordinates.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert convert(1) == (1.0, 0.0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert(4) == (4.0,0.0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert(5) == (5.0,0.0)"
      }
    ],
    "error": null
  },
  {
    "task_id": 253,
    "text": "Write a python function to count integers from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_integer([1,2,'abc',1.2]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_integer([1,2,3]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_integer([1,1.2,4,5.1]) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 254,
    "text": "Write a function to find all words starting with 'a' or 'e' in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert words_ae(\"python programe\")==['ame']"
      },
      {
        "passed": true,
        "message": "Test passed: assert words_ae(\"python programe language\")==['ame','anguage']"
      },
      {
        "passed": true,
        "message": "Test passed: assert words_ae(\"assert statement\")==['assert', 'atement']"
      }
    ],
    "error": null
  },
  {
    "task_id": 255,
    "text": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
      }
    ],
    "error": null
  },
  {
    "task_id": 256,
    "text": "Write a python function to count the number of prime numbers less than a given non-negative number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Primes_nums(5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Primes_nums(10) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Primes_nums(100) == 25"
      }
    ],
    "error": null
  },
  {
    "task_id": 257,
    "text": "Write a function to swap two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert swap_numbers(10,20)==(20,10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_numbers(15,17)==(17,15)"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_numbers(100,200)==(200,100)"
      }
    ],
    "error": null
  },
  {
    "task_id": 258,
    "text": "Write a function to find number of odd elements in the given list using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_odd([1, 2, 3, 5, 7, 8, 10])==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_odd([10,15,14,13,-18,12,-20])==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_odd([1, 2, 4, 8, 9])==2"
      }
    ],
    "error": null
  },
  {
    "task_id": 259,
    "text": "Write a function to maximize the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
      }
    ],
    "error": null
  },
  {
    "task_id": 260,
    "text": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert newman_prime(3) == 7 "
      },
      {
        "passed": true,
        "message": "Test passed: assert newman_prime(4) == 17"
      },
      {
        "passed": true,
        "message": "Test passed: assert newman_prime(5) == 41"
      }
    ],
    "error": null
  },
  {
    "task_id": 261,
    "text": "Write a function to perform mathematical division operation across the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"
      },
      {
        "passed": true,
        "message": "Test passed: assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)"
      },
      {
        "passed": true,
        "message": "Test passed: assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
      }
    ],
    "error": null
  },
  {
    "task_id": 262,
    "text": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
      }
    ],
    "error": null
  },
  {
    "task_id": 263,
    "text": "Write a function to merge two dictionaries.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
      }
    ],
    "error": null
  },
  {
    "task_id": 264,
    "text": "Write a function to calculate a dog's age in dog's years.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dog_age(12)==61"
      },
      {
        "passed": true,
        "message": "Test passed: assert dog_age(15)==73"
      },
      {
        "passed": true,
        "message": "Test passed: assert dog_age(24)==109"
      }
    ],
    "error": null
  },
  {
    "task_id": 265,
    "text": "Write a function to split a list for every nth element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] "
      },
      {
        "passed": true,
        "message": "Test passed: assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] "
      },
      {
        "passed": true,
        "message": "Test passed: assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
      }
    ],
    "error": null
  },
  {
    "task_id": 266,
    "text": "Write a function to find the lateral surface area of a cube.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cube(5)==100"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cube(9)==324"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cube(10)==400"
      }
    ],
    "error": null
  },
  {
    "task_id": 267,
    "text": "Write a python function to find the sum of squares of first n odd natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(2) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(3) == 35"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(4) == 84"
      }
    ],
    "error": null
  },
  {
    "task_id": 268,
    "text": "Write a function to find the n'th star number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_star_num(3) == 37"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_star_num(4) == 73"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_star_num(5) == 121"
      }
    ],
    "error": null
  },
  {
    "task_id": 269,
    "text": "Write a function to find the ascii value of a character.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert ascii_value('A')==65"
      },
      {
        "passed": true,
        "message": "Test passed: assert ascii_value('R')==82"
      },
      {
        "passed": true,
        "message": "Test passed: assert ascii_value('S')==83"
      }
    ],
    "error": null
  },
  {
    "task_id": 270,
    "text": "Write a python function to find the sum of even numbers at even positions.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
      }
    ],
    "error": null
  },
  {
    "task_id": 271,
    "text": "Write a python function to find the sum of fifth power of first n even natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(2) == 1056"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(3) == 8832"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(1) == 32"
      }
    ],
    "error": null
  },
  {
    "task_id": 272,
    "text": "Write a function to perfom the rear element extraction from list of tuples records.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
      }
    ],
    "error": null
  },
  {
    "task_id": 273,
    "text": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"
      },
      {
        "passed": true,
        "message": "Test passed: assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)"
      },
      {
        "passed": true,
        "message": "Test passed: assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
      }
    ],
    "error": null
  },
  {
    "task_id": 274,
    "text": "Write a python function to find sum of even index binomial coefficients.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_binomial_Coeff_Sum(4) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_binomial_Coeff_Sum(6) == 32"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_binomial_Coeff_Sum(2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 275,
    "text": "Write a python function to find the position of the last removed element from the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Position([2,5,4],3,2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Position([4,3],2,2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Position([1,2,3,4],4,1) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 276,
    "text": "Write a function to find the volume of a cylinder.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_cylinder(10,5)==1570.7500000000002"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cylinder(4,5)==251.32000000000002"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cylinder(4,10)==502.64000000000004"
      }
    ],
    "error": null
  },
  {
    "task_id": 277,
    "text": "Write a function to filter a dictionary based on values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"
      },
      {
        "passed": true,
        "message": "Test passed: assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"
      },
      {
        "passed": true,
        "message": "Test passed: assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
      }
    ],
    "error": null
  },
  {
    "task_id": 278,
    "text": "Write a function to find the element count that occurs before the record in the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_first_elements((2, 9, (5, 7), 11) ) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 279,
    "text": "Write a function to find the nth decagonal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_num_decagonal(3) == 27"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_num_decagonal(7) == 175"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_num_decagonal(10) == 370"
      }
    ],
    "error": null
  },
  {
    "task_id": 280,
    "text": "Write a function to search an element in the given array by using sequential search.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
      }
    ],
    "error": null
  },
  {
    "task_id": 281,
    "text": "Write a python function to check if the elements of a given list are unique or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert all_unique([1,2,3]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_unique([1,2,1,2]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_unique([1,2,3,4,5]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 282,
    "text": "Write a function to substaract two lists using map and lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sub_list([1,2],[3,4])==[-2,-2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sub_list([90,120],[50,70])==[40,50]"
      }
    ],
    "error": null
  },
  {
    "task_id": 283,
    "text": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert validate(1234) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert validate(51241) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert validate(321) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 284,
    "text": "Write a function to check whether all items of a list are equal to a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_element([1,2,3,4],7)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 285,
    "text": "Write a function that matches a string that has an a followed by two to three 'b'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_two_three(\"ac\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_two_three(\"dc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_two_three(\"abbbba\")==('Found a match!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 286,
    "text": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
      }
    ],
    "error": null
  },
  {
    "task_id": 287,
    "text": "Write a python function to find the sum of squares of first n even natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(2) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(3) == 56"
      },
      {
        "passed": true,
        "message": "Test passed: assert square_Sum(4) == 120"
      }
    ],
    "error": null
  },
  {
    "task_id": 288,
    "text": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 289,
    "text": "Write a python function to calculate the number of odd days in a given year.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_Days(100) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Days(50) ==6"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Days(75) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 290,
    "text": "Write a function to find the list of lists with maximum length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
      }
    ],
    "error": null
  },
  {
    "task_id": 291,
    "text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_no_of_ways(2, 4) == 16"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_no_of_ways(3, 2) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_no_of_ways(4, 4) == 228"
      }
    ],
    "error": null
  },
  {
    "task_id": 292,
    "text": "Write a python function to find quotient of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find(10,3) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find(4,2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find(20,5) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 293,
    "text": "Write a function to find the third side of a right angled triangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert otherside_rightangle(7,8)==10.63014581273465"
      },
      {
        "passed": true,
        "message": "Test passed: assert otherside_rightangle(3,4)==5"
      },
      {
        "passed": true,
        "message": "Test passed: assert otherside_rightangle(7,15)==16.55294535724685"
      }
    ],
    "error": null
  },
  {
    "task_id": 294,
    "text": "Write a function to find the maximum value in a given heterogeneous list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_val(['Python', 15, 20, 25])==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
      }
    ],
    "error": null
  },
  {
    "task_id": 295,
    "text": "Write a function to return the sum of all divisors of a number.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_div(8)==7, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_div(12)==16, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_div(7)==1, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 296,
    "text": "Write a python function to count inversions in an array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Inv_Count([1,20,6,4,5],5) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Inv_Count([1,2,1],3) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Inv_Count([1,2,5,6,1],5) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 297,
    "text": "Write a function to flatten a given nested list structure.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"
      },
      {
        "passed": true,
        "message": "Test passed: assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]"
      },
      {
        "passed": true,
        "message": "Test passed: assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 298,
    "text": "Write a function to find the nested list elements which are present in another list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]"
      },
      {
        "passed": true,
        "message": "Test passed: assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
      }
    ],
    "error": null
  },
  {
    "task_id": 299,
    "text": "Write a function to calculate the maximum aggregate from the list of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
      }
    ],
    "error": null
  },
  {
    "task_id": 300,
    "text": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_binary_seq(1) == 2.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_binary_seq(2) == 6.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_binary_seq(3) == 20.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 301,
    "text": "Write a function to find the depth of a dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert dict_depth({'a':1, 'b': {'c':'python'}})==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
      }
    ],
    "error": null
  },
  {
    "task_id": 302,
    "text": "Write a python function to find the most significant bit number which is also a set bit.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert set_Bit_Number(6) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_Bit_Number(10) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_Bit_Number(18) == 16"
      }
    ],
    "error": null
  },
  {
    "task_id": 303,
    "text": "Write a python function to check whether the count of inversion of two types are same or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert solve([1,0,2],3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert solve([1,2,0],3) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert solve([1,2,1],3) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 304,
    "text": "Write a python function to find element at a given index after number of rotations.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 305,
    "text": "Write a function to match two words from a list of words starting with letter 'p'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')"
      },
      {
        "passed": true,
        "message": "Test passed: assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')"
      },
      {
        "passed": true,
        "message": "Test passed: assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
      }
    ],
    "error": null
  },
  {
    "task_id": 306,
    "text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
      }
    ],
    "error": null
  },
  {
    "task_id": 307,
    "text": "Write a function to get a colon of a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) "
      },
      {
        "passed": true,
        "message": "Test passed: assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))"
      },
      {
        "passed": true,
        "message": "Test passed: assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
      }
    ],
    "error": null
  },
  {
    "task_id": 308,
    "text": "Write a function to find the specified number of largest products from two given lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"
      },
      {
        "passed": true,
        "message": "Test passed: assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]"
      },
      {
        "passed": true,
        "message": "Test passed: assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
      }
    ],
    "error": null
  },
  {
    "task_id": 309,
    "text": "Write a python function to find the maximum of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximum(5,10) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum(-1,-2) == -1"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum(9,7) == 9"
      }
    ],
    "error": null
  },
  {
    "task_id": 310,
    "text": "Write a function to convert a given string to a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
      }
    ],
    "error": null
  },
  {
    "task_id": 311,
    "text": "Write a python function to set the left most unset bit.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert set_left_most_unset_bit(10) == 14"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_left_most_unset_bit(12) == 14"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_left_most_unset_bit(15) == 15"
      }
    ],
    "error": null
  },
  {
    "task_id": 312,
    "text": "Write a function to find the volume of a cone.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_cone(5,12)==314.15926535897927"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cone(10,15)==1570.7963267948965"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cone(19,17)==6426.651371693521"
      }
    ],
    "error": null
  },
  {
    "task_id": 313,
    "text": "Write a python function to print positive numbers in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pos_nos([-1,-2,1,2]) == 1,2"
      },
      {
        "passed": true,
        "message": "Test passed: assert pos_nos([3,4,-5]) == 3,4"
      },
      {
        "passed": true,
        "message": "Test passed: assert pos_nos([-2,-3,1]) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 314,
    "text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
      }
    ],
    "error": null
  },
  {
    "task_id": 315,
    "text": "Write a python function to find the first maximum length of even word.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Len_Even(\"python language\") == \"language\""
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Len_Even(\"maximum even length\") == \"length\""
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max_Len_Even(\"eve\") == \"-1\""
      }
    ],
    "error": null
  },
  {
    "task_id": 316,
    "text": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 317,
    "text": "Write a function to reflect the modified run-length encoding from a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']"
      },
      {
        "passed": true,
        "message": "Test passed: assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
      }
    ],
    "error": null
  },
  {
    "task_id": 318,
    "text": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_volume(8) == 18"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_volume(4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_volume(1) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 319,
    "text": "Write a function to find all five characters long word in the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_long_word('Please move back to strem') == ['strem']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_long_word('4K Ultra HD streaming player') == ['Ultra']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_long_word('Streaming Media Player') == ['Media']"
      }
    ],
    "error": null
  },
  {
    "task_id": 320,
    "text": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_difference(12)==5434"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_difference(20)==41230"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_difference(54)==2151270"
      }
    ],
    "error": null
  },
  {
    "task_id": 321,
    "text": "Write a function to find the demlo number for the given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_demlo(\"111111\") == '12345654321'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_demlo(\"1111\") == '1234321'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_demlo(\"13333122222\") == '123456789101110987654321'"
      }
    ],
    "error": null
  },
  {
    "task_id": 322,
    "text": "Write a function to find all index positions of the minimum values in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]"
      },
      {
        "passed": true,
        "message": "Test passed: assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 323,
    "text": "Write a function to re-arrange the given array in alternating positive and negative items.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 324,
    "text": "Write a function to extract the sum of alternate chains of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
      }
    ],
    "error": null
  },
  {
    "task_id": 325,
    "text": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Min_Squares(6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Min_Squares(2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Min_Squares(4) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 326,
    "text": "Write a function to get the word with most number of occurrences in the given strings list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'"
      },
      {
        "passed": true,
        "message": "Test passed: assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'"
      },
      {
        "passed": true,
        "message": "Test passed: assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
      }
    ],
    "error": null
  },
  {
    "task_id": 327,
    "text": "Write a function to print check if the triangle is isosceles or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,8,12)==False "
      },
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,6,12)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,16,20)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 328,
    "text": "Write a function to rotate a given list by specified number of items to the left direction.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 329,
    "text": "Write a python function to count negative numbers in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert neg_count([-1,-2,3,-4,-5]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert neg_count([1,2,3]) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert neg_count([1,2,-3,-10,20]) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 330,
    "text": "Write a function to find all three, four, five characters long words in the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
      }
    ],
    "error": null
  },
  {
    "task_id": 331,
    "text": "Write a python function to count unset bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_unset_bits(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_unset_bits(4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_unset_bits(6) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 332,
    "text": "Write a function to count character frequency of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}"
      },
      {
        "passed": true,
        "message": "Test passed: assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
      }
    ],
    "error": null
  },
  {
    "task_id": 333,
    "text": "Write a python function to sort a list according to the second element in sublist.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 334,
    "text": "Write a python function to check whether the triangle is valid or not if sides are given.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Validity(1,2,3) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Validity(2,3,5) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Validity(7,10,5) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 335,
    "text": "Write a function to find the sum of arithmetic progression.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert ap_sum(1,5,2)==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert ap_sum(2,6,4)==72"
      },
      {
        "passed": true,
        "message": "Test passed: assert ap_sum(1,4,5)==34"
      }
    ],
    "error": null
  },
  {
    "task_id": 336,
    "text": "Write a function to check whether the given month name contains 28 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum(\"February\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum(\"January\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum(\"March\")==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 337,
    "text": "Write a function that matches a word at the end of a string, with optional punctuation.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_word(\"python.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_word(\"python.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_word(\"  lang  .\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 338,
    "text": "Write a python function to count the number of substrings with same first and last characters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends('aba') == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends('abcab') == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Substring_With_Equal_Ends('abc') == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 339,
    "text": "Write a python function to find the maximum occuring divisor in an interval.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Divisor(2,2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Divisor(2,5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Divisor(5,10) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 340,
    "text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_three_smallest_nums([1,2,3,4,5]) == 6, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 341,
    "text": "Write a function to convert the given set into ordered tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
      }
    ],
    "error": null
  },
  {
    "task_id": 342,
    "text": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
      }
    ],
    "error": null
  },
  {
    "task_id": 343,
    "text": "Write a function to calculate the number of digits and letters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dig_let(\"python\")==(6,0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert dig_let(\"program\")==(7,0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert dig_let(\"python3.0\")==(6,2)"
      }
    ],
    "error": null
  },
  {
    "task_id": 344,
    "text": "Write a python function to find number of elements with odd factors in a given range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Odd_Squares(5,100) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Odd_Squares(8,65) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Odd_Squares(2,5) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 345,
    "text": "Write a function to find the difference between two consecutive numbers in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 346,
    "text": "Write a function to find entringer number e(n, k).",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert zigzag(4, 3) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert zigzag(4, 2) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert zigzag(3, 1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 347,
    "text": "Write a python function to count the number of squares in a rectangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(4,3) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(1,2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Squares(2,2) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 348,
    "text": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_ways(4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_ways(6) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_ways(8) == 14"
      }
    ],
    "error": null
  },
  {
    "task_id": 349,
    "text": "Write a python function to check whether the given string is a binary string or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check(\"01010101010\") == \"Yes\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check(\"name0\") == \"No\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check(\"101\") == \"Yes\""
      }
    ],
    "error": null
  },
  {
    "task_id": 350,
    "text": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert minimum_Length(\"mnm\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert minimum_Length(\"abcda\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert minimum_Length(\"abcb\") == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 351,
    "text": "Write a python function to find the first element occurring k times in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Element([0,1,2,3,4,5],6,1) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Element([1,2,1,3,4],5,2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 352,
    "text": "Write a python function to check whether all the characters in a given string are unique.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert unique_Characters('aba') == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_Characters('abc') == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_Characters('abab') == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 353,
    "text": "Write a function to remove a specified column from a given nested list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 354,
    "text": "Write a function to find t-nth term of arithemetic progression.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tn_ap(1,5,2)==9"
      },
      {
        "passed": true,
        "message": "Test passed: assert tn_ap(2,6,4)==22"
      },
      {
        "passed": true,
        "message": "Test passed: assert tn_ap(1,4,5)==16"
      }
    ],
    "error": null
  },
  {
    "task_id": 355,
    "text": "Write a python function to count the number of rectangles in a circle of radius r.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Rectangles(2) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Rectangles(1) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Rectangles(0) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 356,
    "text": "Write a function to find the third angle of a triangle using two angles.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_angle(47,89)==44"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_angle(45,95)==40"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_angle(50,40)==90"
      }
    ],
    "error": null
  },
  {
    "task_id": 357,
    "text": "Write a function to find the maximum element of all the given tuple records.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
      }
    ],
    "error": null
  },
  {
    "task_id": 358,
    "text": "Write a function to find modulo division of two lists using map and lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert moddiv_list([3,2],[1,4])==[0, 2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert moddiv_list([90,120],[50,70])==[40, 50]"
      }
    ],
    "error": null
  },
  {
    "task_id": 359,
    "text": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,3,2) == \"Yes\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,2,3) == \"No\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,-5,6) == \"No\""
      }
    ],
    "error": null
  },
  {
    "task_id": 360,
    "text": "Write a function to find the n\u2019th carol number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_carol(2) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_carol(4) == 223"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_carol(5) == 959"
      }
    ],
    "error": null
  },
  {
    "task_id": 361,
    "text": "Write a function to remove empty lists from a given list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
      }
    ],
    "error": null
  },
  {
    "task_id": 362,
    "text": "Write a python function to find the item with maximum occurrences in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([1,2,3,1,2,4,1]) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 363,
    "text": "Write a function to add the k elements to each element in the tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 364,
    "text": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_flip_to_make_string_alternate(\"0001010111\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_flip_to_make_string_alternate(\"001\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
      }
    ],
    "error": null
  },
  {
    "task_id": 365,
    "text": "Write a python function to count the number of digits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Digit(12345) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Digit(11223305) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Digit(4123459) == 7"
      }
    ],
    "error": null
  },
  {
    "task_id": 366,
    "text": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert adjacent_num_product([1,2,3,4,5,6]) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert adjacent_num_product([1,2,3,4,5]) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert adjacent_num_product([2,3]) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 367,
    "text": "Write a function to check if a binary tree is balanced or not.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert is_tree_balanced(root) == False, Error: name 'root' is not defined"
      },
      {
        "passed": false,
        "message": "Error in test case: assert is_tree_balanced(root1) == True, Error: name 'root1' is not defined"
      },
      {
        "passed": false,
        "message": "Error in test case: assert is_tree_balanced(root2) == False , Error: name 'root2' is not defined"
      }
    ],
    "error": null
  },
  {
    "task_id": 368,
    "text": "Write a function to repeat the given tuple n times.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))"
      },
      {
        "passed": true,
        "message": "Test passed: assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))"
      },
      {
        "passed": true,
        "message": "Test passed: assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
      }
    ],
    "error": null
  },
  {
    "task_id": 369,
    "text": "Write a function to find the lateral surface area of cuboid",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cuboid(8,5,6)==156"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cuboid(7,9,10)==320"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cuboid(10,20,30)==1800"
      }
    ],
    "error": null
  },
  {
    "task_id": 370,
    "text": "Write a function to sort a tuple by its float element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] "
      },
      {
        "passed": true,
        "message": "Test passed: assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] "
      },
      {
        "passed": true,
        "message": "Test passed: assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
      }
    ],
    "error": null
  },
  {
    "task_id": 371,
    "text": "Write a function to find the smallest missing element in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 372,
    "text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 373,
    "text": "Write a function to find the volume of a cuboid.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_cuboid(1,2,3)==6"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cuboid(5,7,9)==315"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_cuboid(10,15,21)==3150"
      }
    ],
    "error": null
  },
  {
    "task_id": 374,
    "text": "Write a function to print all permutations of a given string including duplicates.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert permute_string('ab')==['ab', 'ba']"
      },
      {
        "passed": true,
        "message": "Test passed: assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']"
      },
      {
        "passed": true,
        "message": "Test passed: assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
      }
    ],
    "error": null
  },
  {
    "task_id": 375,
    "text": "Write a function to round the given number to the nearest multiple of a specific number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert round_num(4722,10)==4720"
      },
      {
        "passed": true,
        "message": "Test passed: assert round_num(1111,5)==1110"
      },
      {
        "passed": true,
        "message": "Test passed: assert round_num(219,2)==218"
      }
    ],
    "error": null
  },
  {
    "task_id": 376,
    "text": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
      }
    ],
    "error": null
  },
  {
    "task_id": 377,
    "text": "Write a python function to remove all occurrences of a character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_Char(\"aba\",'a') == \"b\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_Char(\"toggle\",'g') == \"tole\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_Char(\"aabbc\",'b') == \"aac\""
      }
    ],
    "error": null
  },
  {
    "task_id": 378,
    "text": "Write a python function to shift last element to first position in the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert move_first([1,2,3,4]) == [4,1,2,3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_first([0,1,2,3]) == [3,0,1,2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_first([9,8,7,1]) == [1,9,8,7]"
      }
    ],
    "error": null
  },
  {
    "task_id": 379,
    "text": "Write a function to find the surface area of a cuboid.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cuboid(1,2,3)==22"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cuboid(5,7,9)==286"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cuboid(10,15,21)==1350"
      }
    ],
    "error": null
  },
  {
    "task_id": 380,
    "text": "Write a function to generate a two-dimensional array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] "
      },
      {
        "passed": true,
        "message": "Test passed: assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 381,
    "text": "Write a function to sort a list of lists by a given index of the inner list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 382,
    "text": "Write a function to find the number of rotations in a circularly sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 383,
    "text": "Write a python function to toggle all odd bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(10) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(20) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_bit_toggle_number(30) == 11"
      }
    ],
    "error": null
  },
  {
    "task_id": 384,
    "text": "Write a python function to find the frequency of the smallest value in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 385,
    "text": "Write a function to find the n'th perrin number using recursion.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_perrin(9) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_perrin(4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_perrin(6) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 386,
    "text": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert swap_count(\"[]][][\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_count(\"[[][]]\") == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_count(\"[[][]]][\") == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 387,
    "text": "Write a python function to check whether the hexadecimal number is even or odd.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_or_odd(\"AB3454D\") ==\"Odd\""
      },
      {
        "passed": true,
        "message": "Test passed: assert even_or_odd(\"ABC\") == \"Even\""
      },
      {
        "passed": true,
        "message": "Test passed: assert even_or_odd(\"AAD\") == \"Odd\""
      }
    ],
    "error": null
  },
  {
    "task_id": 388,
    "text": "Write a python function to find the highest power of 2 that is less than or equal to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(10) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(19) == 16"
      },
      {
        "passed": true,
        "message": "Test passed: assert highest_Power_of_2(32) == 32"
      }
    ],
    "error": null
  },
  {
    "task_id": 389,
    "text": "Write a function to find the n'th lucas number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_lucas(9) == 76"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_lucas(4) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_lucas(3) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 390,
    "text": "Write a function to insert a given string at the beginning of all items in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
      }
    ],
    "error": null
  },
  {
    "task_id": 391,
    "text": "Write a function to convert more than one list to nested dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
      }
    ],
    "error": null
  },
  {
    "task_id": 392,
    "text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_max_sum(60) == 106"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_max_sum(10) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_max_sum(2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 393,
    "text": "Write a function to find the list with maximum length using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
      }
    ],
    "error": null
  },
  {
    "task_id": 394,
    "text": "Write a function to check if given tuple is distinct or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_distinct((1, 4, 5, 6, 1, 4)) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_distinct((1, 4, 5, 6)) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_distinct((2, 3, 4, 5, 6)) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 395,
    "text": "Write a python function to find the first non-repeated character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_non_repeating_character(\"abcabc\") == None"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_non_repeating_character(\"abc\") == \"a\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_non_repeating_character(\"ababc\") == \"c\""
      }
    ],
    "error": null
  },
  {
    "task_id": 396,
    "text": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_char(\"abba\") == \"Valid\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_char(\"a\") == \"Valid\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_char(\"abcd\") == \"Invalid\""
      }
    ],
    "error": null
  },
  {
    "task_id": 397,
    "text": "Write a function to find the median of three specific numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert median_numbers(25,55,65)==55.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert median_numbers(20,10,30)==20.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert median_numbers(15,45,75)==45.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 398,
    "text": "Write a function to compute the sum of digits of each number of a given list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_of_digits([10,2,56])==14, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_of_digits([10,20,-4,5,-70])==19, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 399,
    "text": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)"
      },
      {
        "passed": true,
        "message": "Test passed: assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
      }
    ],
    "error": null
  },
  {
    "task_id": 400,
    "text": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 401,
    "text": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
      }
    ],
    "error": null
  },
  {
    "task_id": 402,
    "text": "Write a function to compute the value of ncr%p.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert ncr_modp(10,2,13)==6"
      },
      {
        "passed": true,
        "message": "Test passed: assert ncr_modp(15,12,43)==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert ncr_modp(17,9,18)==10"
      }
    ],
    "error": null
  },
  {
    "task_id": 403,
    "text": "Write a function to check if a url is valid or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_valid_URL(\"https://www.google.com\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_valid_URL(\"https:/www.gmail.com\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_valid_URL(\"https:// www.redit.com\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 404,
    "text": "Write a python function to find the minimum of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert minimum(1,2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert minimum(-5,-4) == -5"
      },
      {
        "passed": true,
        "message": "Test passed: assert minimum(0,0) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 405,
    "text": "Write a function to check whether an element exists within a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 406,
    "text": "Write a python function to find the parity of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Parity(12) == \"Even Parity\""
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Parity(7) == \"Odd Parity\""
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Parity(10) == \"Even Parity\""
      }
    ],
    "error": null
  },
  {
    "task_id": 407,
    "text": "Write a function to create the next bigger number by rearranging the digits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rearrange_bigger(12)==21"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearrange_bigger(10)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearrange_bigger(102)==120"
      }
    ],
    "error": null
  },
  {
    "task_id": 408,
    "text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 409,
    "text": "Write a function to find the minimum product from the pairs of tuples within a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_product_tuple([(10,20), (15,2), (5,10)] )==30"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
      }
    ],
    "error": null
  },
  {
    "task_id": 410,
    "text": "Write a function to find the minimum value in a given heterogeneous list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_val(['Python', 15, 20, 25])==15"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
      }
    ],
    "error": null
  },
  {
    "task_id": 411,
    "text": "Write a function to convert the given snake case string to camel case string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('android_tv') == 'AndroidTv'"
      },
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('google_pixel') == 'GooglePixel'"
      },
      {
        "passed": true,
        "message": "Test passed: assert snake_to_camel('apple_watch') == 'AppleWatch'"
      }
    ],
    "error": null
  },
  {
    "task_id": 412,
    "text": "Write a python function to remove odd numbers from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_odd([1,2,3]) == [2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_odd([2,4,6]) == [2,4,6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_odd([10,20,3]) == [10,20]"
      }
    ],
    "error": null
  },
  {
    "task_id": 413,
    "text": "Write a function to extract the nth element from a given list of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
      }
    ],
    "error": null
  },
  {
    "task_id": 414,
    "text": "Write a python function to check whether the value exists in a sequence or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert overlapping([1,2,3,4,5],[6,7,8,9]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert overlapping([1,2,3],[4,5,6]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert overlapping([1,4,5],[1,4,5]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 415,
    "text": "Write a python function to find a pair with highest product from a given array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_Product([1,2,3]) == (2,3)"
      }
    ],
    "error": null
  },
  {
    "task_id": 416,
    "text": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert breakSum(12) == 13"
      },
      {
        "passed": true,
        "message": "Test passed: assert breakSum(24) == 27"
      },
      {
        "passed": true,
        "message": "Test passed: assert breakSum(23) == 23"
      }
    ],
    "error": null
  },
  {
    "task_id": 417,
    "text": "Write a function to find common first element in given list of tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
      }
    ],
    "error": null
  },
  {
    "task_id": 418,
    "text": "Write a python function to find the sublist having maximum length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 419,
    "text": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert round_and_sum([5,2,9,24.3,29])==345, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert round_and_sum([25.0,56.7,89.2])==513, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 420,
    "text": "Write a python function to find the cube sum of first n even natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(2) == 72"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(3) == 288"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(4) == 800"
      }
    ],
    "error": null
  },
  {
    "task_id": 421,
    "text": "Write a function to concatenate each element of tuple by the delimiter.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
      }
    ],
    "error": null
  },
  {
    "task_id": 422,
    "text": "Write a python function to find the average of cubes of first n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Average_Of_Cube(2) == 4.5"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Average_Of_Cube(3) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Average_Of_Cube(1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 423,
    "text": "Write a function to solve gold mine problem.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_maxgold([[10,20],[30,40]],2,2)==70"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_maxgold([[4,9],[3,7]],2,2)==13"
      }
    ],
    "error": null
  },
  {
    "task_id": 424,
    "text": "Write a function to extract only the rear index element of each string in the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
      }
    ],
    "error": null
  },
  {
    "task_id": 425,
    "text": "Write a function to count the number of sublists containing a particular element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 426,
    "text": "Write a function to filter odd numbers using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
      }
    ],
    "error": null
  },
  {
    "task_id": 427,
    "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert change_date_format(\"2026-01-02\") == '02-01-2026'"
      },
      {
        "passed": true,
        "message": "Test passed: assert change_date_format(\"2020-11-13\") == '13-11-2020'"
      },
      {
        "passed": true,
        "message": "Test passed: assert change_date_format(\"2021-04-26\") == '26-04-2021'"
      }
    ],
    "error": null
  },
  {
    "task_id": 428,
    "text": "Write a function to sort the given array by using shell sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"
      },
      {
        "passed": true,
        "message": "Test passed: assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]"
      },
      {
        "passed": true,
        "message": "Test passed: assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
      }
    ],
    "error": null
  },
  {
    "task_id": 429,
    "text": "Write a function to extract the elementwise and tuples from the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"
      },
      {
        "passed": true,
        "message": "Test passed: assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
      }
    ],
    "error": null
  },
  {
    "task_id": 430,
    "text": "Write a function to find the directrix of a parabola.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parabola_directrix(5,3,2)==-198"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_directrix(9,8,4)==-2336"
      },
      {
        "passed": true,
        "message": "Test passed: assert parabola_directrix(2,4,6)==-130"
      }
    ],
    "error": null
  },
  {
    "task_id": 431,
    "text": "Write a function that takes two lists and returns true if they have at least one common element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert common_element([1,2,3,4,5], [5,6,7,8,9])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_element([1,2,3,4,5], [6,7,8,9])==None"
      },
      {
        "passed": true,
        "message": "Test passed: assert common_element(['a','b','c'], ['d','b','e'])==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 432,
    "text": "Write a function to find the median of a trapezium.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert median_trapezium(15,25,35)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert median_trapezium(10,20,30)==15"
      },
      {
        "passed": true,
        "message": "Test passed: assert median_trapezium(6,9,4)==7.5"
      }
    ],
    "error": null
  },
  {
    "task_id": 433,
    "text": "Write a function to check whether the entered number is greater than the elements of the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
      }
    ],
    "error": null
  },
  {
    "task_id": 434,
    "text": "Write a function that matches a string that has an a followed by one or more b's.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_one(\"ac\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_one(\"dc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_one(\"abba\")==('Found a match!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 435,
    "text": "Write a python function to find the last digit of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert last_Digit(123) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Digit(25) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Digit(30) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 436,
    "text": "Write a python function to print negative numbers in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert neg_nos([-1,4,5,-6]) == -1,-6"
      },
      {
        "passed": true,
        "message": "Test passed: assert neg_nos([-1,-2,3,4]) == -1,-2"
      },
      {
        "passed": true,
        "message": "Test passed: assert neg_nos([-7,-6,8,9]) == -7,-6"
      }
    ],
    "error": null
  },
  {
    "task_id": 437,
    "text": "Write a function to remove odd characters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_odd(\"python\")==(\"yhn\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_odd(\"program\")==(\"rga\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_odd(\"language\")==(\"agae\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 438,
    "text": "Write a function to count bidirectional tuple pairs.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
      }
    ],
    "error": null
  },
  {
    "task_id": 439,
    "text": "Write a function to convert a list of multiple integers into a single integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiple_to_single([11, 33, 50])==113350"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiple_to_single([-1,2,3,4,5,6])==-123456"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiple_to_single([10,15,20,25])==10152025"
      }
    ],
    "error": null
  },
  {
    "task_id": 440,
    "text": "Write a function to find all adverbs and their positions in a given sentence.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
      }
    ],
    "error": null
  },
  {
    "task_id": 441,
    "text": "Write a function to find the surface area of a cube.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cube(5)==150"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cube(3)==54"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cube(10)==600"
      }
    ],
    "error": null
  },
  {
    "task_id": 442,
    "text": "Write a function to find the ration of positive numbers in an array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54"
      },
      {
        "passed": true,
        "message": "Test passed: assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69"
      },
      {
        "passed": true,
        "message": "Test passed: assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
      }
    ],
    "error": null
  },
  {
    "task_id": 443,
    "text": "Write a python function to find the largest negative number from the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert largest_neg([1,2,3,-4,-6]) == -6"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_neg([1,2,3,-8,-9]) == -9"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_neg([1,2,3,4,-1]) == -1"
      }
    ],
    "error": null
  },
  {
    "task_id": 444,
    "text": "Write a function to trim each tuple by k in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 445,
    "text": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))"
      },
      {
        "passed": true,
        "message": "Test passed: assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
      }
    ],
    "error": null
  },
  {
    "task_id": 446,
    "text": "Write a python function to count the occurence of all elements of list in a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 447,
    "text": "Write a function to find cubes of individual elements in a list using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_nums([10,20,30])==([1000, 8000, 27000])"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_nums([12,15])==([1728, 3375])"
      }
    ],
    "error": null
  },
  {
    "task_id": 448,
    "text": "Write a function to calculate the sum of perrin numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cal_sum(9) == 49"
      },
      {
        "passed": true,
        "message": "Test passed: assert cal_sum(10) == 66"
      },
      {
        "passed": true,
        "message": "Test passed: assert cal_sum(11) == 88"
      }
    ],
    "error": null
  },
  {
    "task_id": 449,
    "text": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Triangle(1,5,2,5,4,6) == 'Yes'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Triangle(1,1,1,4,1,5) == 'No'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Triangle(1,1,1,1,1,1) == 'No'"
      }
    ],
    "error": null
  },
  {
    "task_id": 450,
    "text": "Write a function to extract specified size of strings from a give list of string values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
      }
    ],
    "error": null
  },
  {
    "task_id": 451,
    "text": "Write a function to remove all whitespaces from the given string using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
      }
    ],
    "error": null
  },
  {
    "task_id": 452,
    "text": "Write a function that gives loss amount if the given amount has loss else return none.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert loss_amount(1500,1200)==None"
      },
      {
        "passed": true,
        "message": "Test passed: assert loss_amount(100,200)==100"
      },
      {
        "passed": true,
        "message": "Test passed: assert loss_amount(2000,5000)==3000"
      }
    ],
    "error": null
  },
  {
    "task_id": 453,
    "text": "Write a python function to find the sum of even factors of a number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sumofFactors(18) == 26"
      },
      {
        "passed": true,
        "message": "Test passed: assert sumofFactors(30) == 48"
      },
      {
        "passed": true,
        "message": "Test passed: assert sumofFactors(6) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 454,
    "text": "Write a function that matches a word containing 'z'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz(\"pythonz.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz(\"xyz.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz(\"  lang  .\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 455,
    "text": "Write a function to check whether the given month number contains 31 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb_number(5)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb_number(2)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb_number(6)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 456,
    "text": "Write a function to reverse strings in a given list of string values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
      }
    ],
    "error": null
  },
  {
    "task_id": 457,
    "text": "Write a python function to find the sublist having minimum length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Find_Min([[1],[1,2],[1,2,3]]) == [1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
      }
    ],
    "error": null
  },
  {
    "task_id": 458,
    "text": "Write a function to find the area of a rectangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rectangle_area(10,20)==200"
      },
      {
        "passed": true,
        "message": "Test passed: assert rectangle_area(10,5)==50"
      },
      {
        "passed": true,
        "message": "Test passed: assert rectangle_area(4,2)==8"
      }
    ],
    "error": null
  },
  {
    "task_id": 459,
    "text": "Write a function to remove uppercase substrings from a given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
      }
    ],
    "error": null
  },
  {
    "task_id": 460,
    "text": "Write a python function to get the first element of each sublist.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Extract([[1,2,3],[4, 5]]) == [1,4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Extract([[9,8,1],[1,2]]) == [9,1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 461,
    "text": "Write a python function to count the upper case characters in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert upper_ctr('PYthon') == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert upper_ctr('BigData') == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert upper_ctr('program') == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 462,
    "text": "Write a function to find all possible combinations of the elements of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 463,
    "text": "Write a function to find the maximum product subarray of the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_subarray_product([6, -3, -10, 0, 2]) == 180 "
      },
      {
        "passed": true,
        "message": "Test passed: assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
      }
    ],
    "error": null
  },
  {
    "task_id": 464,
    "text": "Write a function to check if all values are same in a dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 465,
    "text": "Write a function to drop empty items from a given dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
      }
    ],
    "error": null
  },
  {
    "task_id": 466,
    "text": "Write a function to find the peak element in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_peak([2, 3, 4, 5, 6], 5) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
      }
    ],
    "error": null
  },
  {
    "task_id": 467,
    "text": "Write a python function to convert decimal number to octal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_Octal(10) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_Octal(2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert decimal_to_Octal(33) == 41"
      }
    ],
    "error": null
  },
  {
    "task_id": 468,
    "text": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 "
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product([4, 42, 55, 68, 80], 5) == 50265600"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
      }
    ],
    "error": null
  },
  {
    "task_id": 469,
    "text": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_profit([10, 6, 8, 4, 2], 2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 470,
    "text": "Write a function to find the pairwise addition of the elements of the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
      }
    ],
    "error": null
  },
  {
    "task_id": 471,
    "text": "Write a python function to find remainder of array multiplication divided by n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_remainder([1,1,1],3,1) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_remainder([1,2,1],3,2) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 472,
    "text": "Write a python function to check whether the given list contains consecutive numbers or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Consecutive([1,2,3,4,5]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Consecutive([1,2,3,5,6]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Consecutive([1,2,1]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 473,
    "text": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
      }
    ],
    "error": null
  },
  {
    "task_id": 474,
    "text": "Write a function to replace characters in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_char(\"polygon\",'y','l')==(\"pollgon\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_char(\"character\",'c','a')==(\"aharaater\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_char(\"python\",'l','a')==(\"python\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 475,
    "text": "Write a function to sort counter by value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 476,
    "text": "Write a python function to find the sum of the largest and smallest value in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert big_sum([1,2,3]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert big_sum([-1,2,3,4]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert big_sum([2,3,6]) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 477,
    "text": "Write a python function to convert the given string to lower case.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_lower(\"InValid\") == \"invalid\""
      },
      {
        "passed": true,
        "message": "Test passed: assert is_lower(\"TruE\") == \"true\""
      },
      {
        "passed": true,
        "message": "Test passed: assert is_lower(\"SenTenCE\") == \"sentence\""
      }
    ],
    "error": null
  },
  {
    "task_id": 478,
    "text": "Write a function to remove lowercase substrings from a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase(\"PYTHon\")==('PYTH')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase(\"FInD\")==('FID')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase(\"STRinG\")==('STRG')"
      }
    ],
    "error": null
  },
  {
    "task_id": 479,
    "text": "Write a python function to find the first digit of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(123) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(456) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(12) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 480,
    "text": "Write a python function to find the maximum occurring character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_max_occuring_char(\"data\") == \"a\""
      },
      {
        "passed": true,
        "message": "Test passed: assert get_max_occuring_char(\"create\") == \"e\""
      },
      {
        "passed": true,
        "message": "Test passed: assert get_max_occuring_char(\"brilliant girl\") == \"i\""
      }
    ],
    "error": null
  },
  {
    "task_id": 481,
    "text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 482,
    "text": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert match(\"Geeks\") == 'Yes'"
      },
      {
        "passed": true,
        "message": "Test passed: assert match(\"geeksforGeeks\") == 'Yes'"
      },
      {
        "passed": true,
        "message": "Test passed: assert match(\"geeks\") == 'No'"
      }
    ],
    "error": null
  },
  {
    "task_id": 483,
    "text": "Write a python function to find the first natural number whose factorial is divisible by x.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Factorial_Divisible_Number(10) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Factorial_Divisible_Number(15) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Factorial_Divisible_Number(5) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 484,
    "text": "Write a function to remove the matching tuples from the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
      }
    ],
    "error": null
  },
  {
    "task_id": 485,
    "text": "Write a function to find the largest palindromic number in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
      }
    ],
    "error": null
  },
  {
    "task_id": 486,
    "text": "Write a function to compute binomial probability for the given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185"
      },
      {
        "passed": true,
        "message": "Test passed: assert binomial_probability(11, 6, 2.0/4) == 0.2255859375"
      },
      {
        "passed": true,
        "message": "Test passed: assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
      }
    ],
    "error": null
  },
  {
    "task_id": 487,
    "text": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 488,
    "text": "Write a function to find the area of a pentagon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert area_pentagon(5)==43.01193501472417"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_pentagon(10)==172.0477400588967"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_pentagon(15)==387.10741513251753"
      }
    ],
    "error": null
  },
  {
    "task_id": 489,
    "text": "Write a python function to find the frequency of the largest value in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Largest(3,[5,6,5]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 490,
    "text": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
      }
    ],
    "error": null
  },
  {
    "task_id": 491,
    "text": "Write a function to find the sum of geometric progression series.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_gp(1,5,2)==31"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_gp(1,5,4)==341"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_gp(2,6,3)==728"
      }
    ],
    "error": null
  },
  {
    "task_id": 492,
    "text": "Write a function to search an element in the given array by using binary search.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert binary_search([1,2,3,5,8], 6) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_search([7, 8, 9, 10, 13], 10) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 493,
    "text": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.",
    "test_results": [
      {
        "passed": false,
        "message": "Assertion failed: assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]"
      },
      {
        "passed": false,
        "message": "Assertion failed: assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]"
      },
      {
        "passed": false,
        "message": "Assertion failed: assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 494,
    "text": "Write a function to convert the given binary tuple to integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'"
      },
      {
        "passed": true,
        "message": "Test passed: assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
      }
    ],
    "error": null
  },
  {
    "task_id": 495,
    "text": "Write a function to remove lowercase substrings from a given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
      }
    ],
    "error": null
  },
  {
    "task_id": 496,
    "text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] "
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
      }
    ],
    "error": null
  },
  {
    "task_id": 497,
    "text": "Write a function to find the surface area of a cone.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cone(5,12)==282.7433388230814"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cone(10,15)==880.5179353159282"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cone(19,17)==2655.923961165254"
      }
    ],
    "error": null
  },
  {
    "task_id": 498,
    "text": "Write a python function to find gcd of two positive integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert gcd(12, 17) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert gcd(4,6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert gcd(2,9) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 499,
    "text": "Write a function to find the diameter of a circle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert diameter_circle(10)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert diameter_circle(40)==80"
      },
      {
        "passed": true,
        "message": "Test passed: assert diameter_circle(15)==30"
      }
    ],
    "error": null
  },
  {
    "task_id": 500,
    "text": "Write a function to concatenate all elements of the given list into a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
      }
    ],
    "error": null
  },
  {
    "task_id": 501,
    "text": "Write a python function to find common divisor between two numbers in a given pair.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert num_comm_div(2,4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert num_comm_div(2,8) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert num_comm_div(12,24) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 502,
    "text": "Write a python function to find remainder of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find(3,3) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert find(10,3) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find(16,5) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 503,
    "text": "Write a function to add consecutive numbers of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
      }
    ],
    "error": null
  },
  {
    "task_id": 504,
    "text": "Write a python function to find the cube sum of first n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Series(5) == 225"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Series(2) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Series(3) == 36"
      }
    ],
    "error": null
  },
  {
    "task_id": 505,
    "text": "Write a function to move all zeroes to the end of the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
      }
    ],
    "error": null
  },
  {
    "task_id": 506,
    "text": "Write a function to calculate the permutation coefficient of given p(n, k).",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert permutation_coefficient(10, 2) == 90"
      },
      {
        "passed": true,
        "message": "Test passed: assert permutation_coefficient(10, 3) == 720"
      },
      {
        "passed": true,
        "message": "Test passed: assert permutation_coefficient(10, 1) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 507,
    "text": "Write a function to remove specific words from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
      }
    ],
    "error": null
  },
  {
    "task_id": 508,
    "text": "Write a function to check if the common elements between two given lists are in the same order or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 509,
    "text": "Write a python function to find the average of odd numbers till a given odd number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert average_Odd(9) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert average_Odd(5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert average_Odd(11) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 510,
    "text": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert no_of_subsequences([1,2,3,4], 10) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert no_of_subsequences([4,8,7,2], 50) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert no_of_subsequences([5,6,7,8], 15) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 511,
    "text": "Write a python function to find minimum sum of factors of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum(12) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum(105) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum(2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 512,
    "text": "Write a function to count the element frequency in the mixed nested tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}"
      }
    ],
    "error": null
  },
  {
    "task_id": 513,
    "text": "Write a function to convert tuple into list by adding the given string after every element.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
      }
    ],
    "error": null
  },
  {
    "task_id": 514,
    "text": "Write a function to find the summation of tuple elements in the given tuple list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_elements((7, 8, 9, 1, 10, 7)) == 42, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_elements((1, 2, 3, 4, 5, 6)) == 21, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_elements((11, 12 ,13 ,45, 14)) == 95, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 515,
    "text": "Write a function to check if there is a subset with sum divisible by m.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert modular_sum([3, 1, 7, 5], 4, 6) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert modular_sum([1, 7], 2, 5) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert modular_sum([1, 6], 2, 5) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 516,
    "text": "Write a function to sort a list of elements using radix sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]"
      },
      {
        "passed": true,
        "message": "Test passed: assert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]"
      },
      {
        "passed": true,
        "message": "Test passed: assert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]"
      }
    ],
    "error": null
  },
  {
    "task_id": 517,
    "text": "Write a python function to find the largest postive number from the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert largest_pos([1,2,3,4,-1]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_pos([0,1,2,-5,-1,6]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_pos([0,0,1,0]) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 518,
    "text": "Write a function to find the square root of a perfect number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sqrt_root(4)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert sqrt_root(16)==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert sqrt_root(400)==20"
      }
    ],
    "error": null
  },
  {
    "task_id": 519,
    "text": "Write a function to calculate volume of a tetrahedron.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert volume_tetrahedron(10)==117.85"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_tetrahedron(15)==397.75"
      },
      {
        "passed": true,
        "message": "Test passed: assert volume_tetrahedron(20)==942.81"
      }
    ],
    "error": null
  },
  {
    "task_id": 520,
    "text": "Write a function to find the lcm of the given array elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_lcm([2, 7, 3, 9, 4]) == 252"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_lcm([1, 2, 8, 3]) == 24"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_lcm([3, 8, 4, 10, 5]) == 120"
      }
    ],
    "error": null
  },
  {
    "task_id": 521,
    "text": "Write a function to print check if the triangle is scalene or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,8,12)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,6,12)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_isosceles(6,15,20)==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 522,
    "text": "Write a function to find the longest bitonic subsequence for the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert lbs([80, 60, 30, 40, 20, 10]) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 523,
    "text": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_string('123python')==['String must have 1 upper case character.']"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_string('123Python')==['Valid string.']"
      }
    ],
    "error": null
  },
  {
    "task_id": 524,
    "text": "Write a function to find the sum of maximum increasing subsequence of the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 525,
    "text": "Write a python function to check whether two given lines are parallel or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parallel_lines([2,3,4], [2,3,8]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallel_lines([2,3,4], [4,-3,8]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallel_lines([3,3],[5,5]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 526,
    "text": "Write a python function to capitalize first and last letters of each word of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert capitalize_first_last_letters(\"python\") == \"PythoN\""
      },
      {
        "passed": true,
        "message": "Test passed: assert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\""
      },
      {
        "passed": true,
        "message": "Test passed: assert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\""
      }
    ],
    "error": null
  },
  {
    "task_id": 527,
    "text": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_pairs_count([1, 5, 7, -1], 4, 6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_pairs_count([1, 1, 1, 1], 4, 2) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 528,
    "text": "Write a function to find the list of lists with minimum length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_length([[5], [15,20,25]])==(1, [5])"
      }
    ],
    "error": null
  },
  {
    "task_id": 529,
    "text": "Write a function to find the nth jacobsthal-lucas number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_lucas(5) == 31"
      },
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_lucas(2) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_lucas(4) == 17"
      }
    ],
    "error": null
  },
  {
    "task_id": 530,
    "text": "Write a function to find the ration of negative numbers in an array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31"
      },
      {
        "passed": true,
        "message": "Test passed: assert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31"
      },
      {
        "passed": true,
        "message": "Test passed: assert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44"
      }
    ],
    "error": null
  },
  {
    "task_id": 531,
    "text": "Write a function to find minimum number of coins that make a given value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_coins([9, 6, 5, 1] ,4,11)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_coins([4,5,6,7,8,9],6,9)==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_coins([1, 2, 3],3,4)==2"
      }
    ],
    "error": null
  },
  {
    "task_id": 532,
    "text": "Write a function to check if the two given strings are permutations of each other.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_permutation(\"abc\", \"cba\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_permutation(\"test\", \"ttew\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_permutation(\"xxyz\", \"yxzx\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 533,
    "text": "Write a function to remove particular data type elements from the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 534,
    "text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert search_literal('python','python programming language')==(0,6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert search_literal('programming','python programming language')==(7,18)"
      },
      {
        "passed": true,
        "message": "Test passed: assert search_literal('language','python programming language')==(19,27)"
      }
    ],
    "error": null
  },
  {
    "task_id": 535,
    "text": "Write a function to find the top or bottom surface area of a cylinder.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert topbottom_surfacearea(10)==314.15000000000003"
      },
      {
        "passed": true,
        "message": "Test passed: assert topbottom_surfacearea(5)==78.53750000000001"
      },
      {
        "passed": true,
        "message": "Test passed: assert topbottom_surfacearea(4)==50.264"
      }
    ],
    "error": null
  },
  {
    "task_id": 536,
    "text": "Write a function to select the nth items of a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] "
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_items([10,15,19,17,16,18],3)==[10,17] "
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_items([14,16,19,15,17],4)==[14,17]"
      }
    ],
    "error": null
  },
  {
    "task_id": 537,
    "text": "Write a python function to find the first repeated word in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_word(\"ab ca bc ab\") == \"ab\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_word(\"ab ca bc\") == 'None'"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\""
      }
    ],
    "error": null
  },
  {
    "task_id": 538,
    "text": "Write a python function to convert a given string list to a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')"
      }
    ],
    "error": null
  },
  {
    "task_id": 539,
    "text": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]"
      },
      {
        "passed": true,
        "message": "Test passed: assert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]"
      },
      {
        "passed": true,
        "message": "Test passed: assert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]"
      }
    ],
    "error": null
  },
  {
    "task_id": 540,
    "text": "Write a python function to find the difference between highest and least frequencies in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Diff([1,2,1,2],4) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 541,
    "text": "Write a function to find if the given number is abundant or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_abundant(12) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_abundant(15) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_abundant(18) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 542,
    "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'"
      },
      {
        "passed": true,
        "message": "Test passed: assert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'"
      },
      {
        "passed": true,
        "message": "Test passed: assert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'"
      }
    ],
    "error": null
  },
  {
    "task_id": 543,
    "text": "Write a function to add two numbers and print number of digits of sum.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_digits(9875,10)==(4)"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_digits(98759853034,100)==(11)"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_digits(1234567,500)==(7)"
      }
    ],
    "error": null
  },
  {
    "task_id": 544,
    "text": "Write a function to flatten the tuple list to a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'"
      },
      {
        "passed": true,
        "message": "Test passed: assert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'"
      },
      {
        "passed": true,
        "message": "Test passed: assert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'"
      }
    ],
    "error": null
  },
  {
    "task_id": 545,
    "text": "Write a python function to toggle only first and last bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert toggle_F_and_L_bits(10) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_F_and_L_bits(15) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_F_and_L_bits(20) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 546,
    "text": "Write a function to find the last occurrence of a character in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert last_occurence_char(\"hello world\",'l')==10"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_occurence_char(\"language\",'g')==7"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_occurence_char(\"little\",'y')==None"
      }
    ],
    "error": null
  },
  {
    "task_id": 547,
    "text": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Total_Hamming_Distance(4) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert Total_Hamming_Distance(2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert Total_Hamming_Distance(5) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 548,
    "text": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 "
      }
    ],
    "error": null
  },
  {
    "task_id": 549,
    "text": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(1) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(2) == 244"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(3) == 3369"
      }
    ],
    "error": null
  },
  {
    "task_id": 550,
    "text": "Write a python function to find the maximum element in a sorted and rotated array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Max([2,3,5,6,9],0,4) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max([3,4,5,2,1],0,4) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Max([1,2,3],0,2) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 551,
    "text": "Write a function to extract a specified column from a given nested list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 552,
    "text": "Write a python function to check whether a given sequence is linear or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Seq_Linear([1,2,3]) == \"Linear Sequence\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Seq_Linear([1,5,2]) == \"Non Linear Sequence\""
      }
    ],
    "error": null
  },
  {
    "task_id": 553,
    "text": "Write a function to convert the given tuple to a floating-point number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_float((4, 56)) == 4.56"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_float((7, 256)) == 7.256"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_float((8, 123)) == 8.123"
      }
    ],
    "error": null
  },
  {
    "task_id": 554,
    "text": "Write a python function to find odd numbers from a mixed list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Split([1,2,3,4,5,6]) == [1,3,5]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Split([10,11,12,13]) == [11,13]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Split([7,8,9,1]) == [7,9,1]"
      }
    ],
    "error": null
  },
  {
    "task_id": 555,
    "text": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert difference(3) == 30"
      },
      {
        "passed": true,
        "message": "Test passed: assert difference(5) == 210"
      },
      {
        "passed": true,
        "message": "Test passed: assert difference(2) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 556,
    "text": "Write a python function to count the pairs with xor as an odd number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Odd_Pair([5,4,7,2,1],5) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Odd_Pair([1,2,3],3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 557,
    "text": "Write a function to toggle characters case in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert toggle_string(\"Python\")==(\"pYTHON\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_string(\"Pangram\")==(\"pANGRAM\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_string(\"LIttLE\")==(\"liTTle\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 558,
    "text": "Write a python function to find the digit distance between two integers.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert digit_distance_nums(1,2) == 1, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert digit_distance_nums(23,56) == 6, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert digit_distance_nums(123,256) == 7, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 559,
    "text": "Write a function to find the largest sum of contiguous subarray in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 560,
    "text": "Write a function to find the union of elements of the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)"
      }
    ],
    "error": null
  },
  {
    "task_id": 561,
    "text": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}"
      },
      {
        "passed": true,
        "message": "Test passed: assert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}"
      },
      {
        "passed": true,
        "message": "Test passed: assert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}"
      }
    ],
    "error": null
  },
  {
    "task_id": 562,
    "text": "Write a python function to find the maximum length of sublist.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 563,
    "text": "Write a function to extract values between quotation marks of a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']"
      }
    ],
    "error": null
  },
  {
    "task_id": 564,
    "text": "Write a python function to count unequal element pairs from the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([1,2,1],3) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([1,1,1,1],4) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([1,2,3,4,5],5) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 565,
    "text": "Write a python function to split a string into characters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split('python') == ['p','y','t','h','o','n']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split('Name') == ['N','a','m','e']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split('program') == ['p','r','o','g','r','a','m']"
      }
    ],
    "error": null
  },
  {
    "task_id": 566,
    "text": "Write a function to get the sum of a non-negative integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_digits(345)==12"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_digits(12)==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_digits(97)==16"
      }
    ],
    "error": null
  },
  {
    "task_id": 567,
    "text": "Write a function to check whether a specified list is sorted or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert issort_list([1,2,4,6,8,10,12,14,16,17])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 568,
    "text": "Write a function to create a list of empty dictionaries.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert empty_list(5)==[{},{},{},{},{}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert empty_list(6)==[{},{},{},{},{},{}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert empty_list(7)==[{},{},{},{},{},{},{}]"
      }
    ],
    "error": null
  },
  {
    "task_id": 569,
    "text": "Write a function to sort each sublist of strings in a given list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 570,
    "text": "Write a function to remove words from a given list of strings containing a character or string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']"
      }
    ],
    "error": null
  },
  {
    "task_id": 571,
    "text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21"
      }
    ],
    "error": null
  },
  {
    "task_id": 572,
    "text": "Write a python function to remove two duplicate numbers from a given number of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"
      },
      {
        "passed": true,
        "message": "Test passed: assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]"
      },
      {
        "passed": true,
        "message": "Test passed: assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 573,
    "text": "Write a python function to calculate the product of the unique numbers of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_product([1, 2, 3, 1,]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_product([7, 8, 9, 0, 1, 1]) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 574,
    "text": "Write a function to find the surface area of a cylinder.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cylinder(10,5)==942.45"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cylinder(4,5)==226.18800000000002"
      },
      {
        "passed": true,
        "message": "Test passed: assert surfacearea_cylinder(4,10)==351.848"
      }
    ],
    "error": null
  },
  {
    "task_id": 575,
    "text": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_no(2,3,1,10) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_no(3,6,4,20) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_no(5,10,4,20) == 16"
      }
    ],
    "error": null
  },
  {
    "task_id": 576,
    "text": "Write a python function to check whether an array is subarray of another or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Sub_Array([1,2,1],[1,2,1],3,3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 577,
    "text": "Write a python function to find the last digit in factorial of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert last_Digit_Factorial(4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Digit_Factorial(21) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Digit_Factorial(30) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 578,
    "text": "Write a function to interleave lists of the same length.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"
      },
      {
        "passed": true,
        "message": "Test passed: assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 579,
    "text": "Write a function to find the dissimilar elements in the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)"
      }
    ],
    "error": null
  },
  {
    "task_id": 580,
    "text": "Write a function to extract the even elements in the nested mixed tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)"
      }
    ],
    "error": null
  },
  {
    "task_id": 581,
    "text": "Write a python function to find the surface area of the square pyramid.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert surface_Area(3,4) == 33"
      },
      {
        "passed": true,
        "message": "Test passed: assert surface_Area(4,5) == 56"
      },
      {
        "passed": true,
        "message": "Test passed: assert surface_Area(1,2) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 582,
    "text": "Write a function to check if a dictionary is empty or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert my_dict({10})==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert my_dict({11})==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert my_dict({})==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 583,
    "text": "Write a function for nth catalan number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert catalan_number(10)==16796"
      },
      {
        "passed": true,
        "message": "Test passed: assert catalan_number(9)==4862"
      },
      {
        "passed": true,
        "message": "Test passed: assert catalan_number(7)==429"
      }
    ],
    "error": null
  },
  {
    "task_id": 584,
    "text": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'"
      }
    ],
    "error": null
  },
  {
    "task_id": 585,
    "text": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]"
      }
    ],
    "error": null
  },
  {
    "task_id": 586,
    "text": "Write a python function to split the array and add the first part to the end.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_Arr([1,2,3,4],4,1) == [2,3,4,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 587,
    "text": "Write a function to convert a list to a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)"
      },
      {
        "passed": true,
        "message": "Test passed: assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert list_tuple([58,44,56])==(58,44,56)"
      }
    ],
    "error": null
  },
  {
    "task_id": 588,
    "text": "Write a python function to find the difference between largest and smallest value in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert big_diff([1,2,3,4]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert big_diff([4,5,12]) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert big_diff([9,2,3]) == 7"
      }
    ],
    "error": null
  },
  {
    "task_id": 589,
    "text": "Write a function to find perfect squares between two given numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert perfect_squares(1,30)==[1, 4, 9, 16, 25]"
      },
      {
        "passed": true,
        "message": "Test passed: assert perfect_squares(50,100)==[64, 81, 100]"
      },
      {
        "passed": true,
        "message": "Test passed: assert perfect_squares(100,200)==[100, 121, 144, 169, 196]"
      }
    ],
    "error": null
  },
  {
    "task_id": 590,
    "text": "Write a function to convert polar coordinates to rectangular coordinates.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"
      },
      {
        "passed": true,
        "message": "Test passed: assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))"
      },
      {
        "passed": true,
        "message": "Test passed: assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))"
      }
    ],
    "error": null
  },
  {
    "task_id": 591,
    "text": "Write a python function to interchange the first and last elements in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_List([1, 2, 3]) == [3, 2, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_List([4, 5, 6]) == [6, 5, 4]"
      }
    ],
    "error": null
  },
  {
    "task_id": 592,
    "text": "Write a python function to find sum of product of binomial co-efficients.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_product(3) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_product(4) == 56"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_product(1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 593,
    "text": "Write a function to remove leading zeroes from an ip address.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') "
      },
      {
        "passed": true,
        "message": "Test passed: assert removezero_ip(\"12.01.024\")==('12.1.24') "
      },
      {
        "passed": true,
        "message": "Test passed: assert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') "
      }
    ],
    "error": null
  },
  {
    "task_id": 594,
    "text": "Write a function to find the difference of first even and odd number of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert diff_even_odd([1,3,5,7,4,1,6,8])==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert diff_even_odd([1,5,7,9,10])==9"
      }
    ],
    "error": null
  },
  {
    "task_id": 595,
    "text": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"1101\",\"1110\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"111\",\"000\") == \"Not Possible\""
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"111\",\"110\") == \"Not Possible\""
      }
    ],
    "error": null
  },
  {
    "task_id": 596,
    "text": "Write a function to find the size of the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))"
      }
    ],
    "error": null
  },
  {
    "task_id": 597,
    "text": "Write a function to find kth element from the given two sorted arrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 598,
    "text": "Write a function to check whether the given number is armstrong or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert armstrong_number(153)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert armstrong_number(259)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert armstrong_number(4458)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 599,
    "text": "Write a function to find sum and average of first n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_average(10)==(55, 5.5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_average(15)==(120, 8.0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_average(20)==(210, 10.5)"
      }
    ],
    "error": null
  },
  {
    "task_id": 600,
    "text": "Write a python function to check whether the given number is even or not using bitwise operator.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Even(1) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Even(2) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Even(3) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 601,
    "text": "Write a function to find the longest chain which can be formed from the given set of pairs.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 602,
    "text": "Write a python function to find the first repeated character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_char(\"abcabc\") == \"a\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_char(\"abc\") == \"None\""
      },
      {
        "passed": true,
        "message": "Test passed: assert first_repeated_char(\"123123\") == \"1\""
      }
    ],
    "error": null
  },
  {
    "task_id": 603,
    "text": "Write a function to get a lucid number smaller than or equal to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_ludic(10) == [1, 2, 3, 5, 7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
      }
    ],
    "error": null
  },
  {
    "task_id": 604,
    "text": "Write a function to reverse words in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert reverse_words(\"python program\")==(\"program python\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_words(\"java language\")==(\"language java\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_words(\"indian man\")==(\"man indian\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 605,
    "text": "Write a function to check if the given integer is a prime number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert prime_num(13)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert prime_num(7)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert prime_num(-1010)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 606,
    "text": "Write a function to convert degrees to radians.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert radian_degree(90)==1.5707963267948966"
      },
      {
        "passed": true,
        "message": "Test passed: assert radian_degree(60)==1.0471975511965976"
      },
      {
        "passed": true,
        "message": "Test passed: assert radian_degree(120)==2.0943951023931953"
      }
    ],
    "error": null
  },
  {
    "task_id": 607,
    "text": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)"
      }
    ],
    "error": null
  },
  {
    "task_id": 608,
    "text": "Write a python function to find nth bell number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert bell_Number(2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert bell_Number(3) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert bell_Number(4) == 15"
      }
    ],
    "error": null
  },
  {
    "task_id": 609,
    "text": "Write a python function to find minimum possible value for the given periodic function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert floor_Min(10,20,30) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert floor_Min(1,2,1) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert floor_Min(11,10,9) == 9"
      }
    ],
    "error": null
  },
  {
    "task_id": 610,
    "text": "Write a python function to remove the k'th element from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]"
      }
    ],
    "error": null
  },
  {
    "task_id": 611,
    "text": "Write a function to find the maximum of nth column from the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11"
      }
    ],
    "error": null
  },
  {
    "task_id": 612,
    "text": "Write a python function to merge the first and last elements separately in a list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 613,
    "text": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 614,
    "text": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 615,
    "text": "Write a function to find average value of the numbers in a given tuple of tuples.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25], Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75], Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5], Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 616,
    "text": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)"
      }
    ],
    "error": null
  },
  {
    "task_id": 617,
    "text": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Jumps(3,4,11)==3.5"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Jumps(3,4,0)==0"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Jumps(11,14,11)==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 618,
    "text": "Write a function to divide two lists using map and lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_list([3,2],[1,4])==[3.0, 0.5]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]"
      }
    ],
    "error": null
  },
  {
    "task_id": 619,
    "text": "Write a function to move all the numbers in it to the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_num('Avengers124Assemble') == 'AvengersAssemble124'"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'"
      }
    ],
    "error": null
  },
  {
    "task_id": 620,
    "text": "Write a function to find the largest subset where each pair is divisible.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_subset([10, 5, 3, 15, 20], 5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 621,
    "text": "Write a function to increment the numeric values in the given strings by k.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']"
      },
      {
        "passed": true,
        "message": "Test passed: assert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']"
      },
      {
        "passed": true,
        "message": "Test passed: assert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
      }
    ],
    "error": null
  },
  {
    "task_id": 622,
    "text": "Write a function to find the median of two sorted arrays of same size.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0"
      }
    ],
    "error": null
  },
  {
    "task_id": 623,
    "text": "Write a function to find the n-th power of individual elements in a list using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_nums([10,20,30],3)==([1000, 8000, 27000])"
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_nums([12,15],5)==([248832, 759375])"
      }
    ],
    "error": null
  },
  {
    "task_id": 624,
    "text": "Write a python function to convert the given string to upper case.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_upper(\"person\") ==\"PERSON\""
      },
      {
        "passed": true,
        "message": "Test passed: assert is_upper(\"final\") == \"FINAL\""
      },
      {
        "passed": true,
        "message": "Test passed: assert is_upper(\"Valid\") == \"VALID\""
      }
    ],
    "error": null
  },
  {
    "task_id": 625,
    "text": "Write a python function to interchange first and last elements in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert swap_List([1,2,3]) == [3,2,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert swap_List([4,5,6]) == [6,5,4]"
      }
    ],
    "error": null
  },
  {
    "task_id": 626,
    "text": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert triangle_area(0) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert triangle_area(-1) == -1"
      },
      {
        "passed": true,
        "message": "Test passed: assert triangle_area(2) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 627,
    "text": "Write a python function to find the smallest missing number from the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_First_Missing([0,1,2,3],0,3) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_First_Missing([0,1,2,6,9],0,4) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_First_Missing([2,3,5,8,9],0,4) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 628,
    "text": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'"
      }
    ],
    "error": null
  },
  {
    "task_id": 629,
    "text": "Write a python function to find even numbers from a mixed list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Split([1,2,3,4,5]) == [2,4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Split ([8,12,15,19]) == [8,12]"
      }
    ],
    "error": null
  },
  {
    "task_id": 630,
    "text": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 631,
    "text": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces('The Avengers') == 'The_Avengers'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'"
      }
    ],
    "error": null
  },
  {
    "task_id": 632,
    "text": "Write a python function to move all zeroes to the end of the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]"
      }
    ],
    "error": null
  },
  {
    "task_id": 633,
    "text": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pair_OR_Sum([5,9,7,6],4) == 47"
      },
      {
        "passed": true,
        "message": "Test passed: assert pair_OR_Sum([7,3,5],3) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert pair_OR_Sum([7,3],2) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 634,
    "text": "Write a python function to find the sum of fourth power of first n even natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(2) == 272"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(3) == 1568"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_Power_Sum(4) == 5664"
      }
    ],
    "error": null
  },
  {
    "task_id": 635,
    "text": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 636,
    "text": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(2,0,2) == \"Yes\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(2,-5,2) == \"Yes\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,2,3) == \"No\""
      }
    ],
    "error": null
  },
  {
    "task_id": 637,
    "text": "Write a function to check whether the given amount has no profit and no loss",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert noprofit_noloss(1500,1200)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert noprofit_noloss(100,100)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert noprofit_noloss(2000,5000)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 638,
    "text": "Write a function to calculate wind chill index.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert wind_chill(120,35)==40"
      },
      {
        "passed": true,
        "message": "Test passed: assert wind_chill(40,70)==86"
      },
      {
        "passed": true,
        "message": "Test passed: assert wind_chill(10,100)==116"
      }
    ],
    "error": null
  },
  {
    "task_id": 639,
    "text": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"
      },
      {
        "passed": true,
        "message": "Test passed: assert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10"
      },
      {
        "passed": true,
        "message": "Test passed: assert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6"
      }
    ],
    "error": null
  },
  {
    "task_id": 640,
    "text": "Write a function to remove the parenthesis area in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_parenthesis([\"python (chrome)\"])==(\"python\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_parenthesis([\"string(.abc)\"])==(\"string\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 641,
    "text": "Write a function to find the nth nonagonal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_nonagonal(10) == 325"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_nonagonal(15) == 750"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_nonagonal(18) == 1089"
      }
    ],
    "error": null
  },
  {
    "task_id": 642,
    "text": "Write a function to remove similar rows from the given tuple matrix.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}"
      }
    ],
    "error": null
  },
  {
    "task_id": 643,
    "text": "Write a function that matches a word containing 'z', not at the start or end of the word.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_wordz_middle(\"  lang  .\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 644,
    "text": "Write a python function to reverse an array upto a given position.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 645,
    "text": "Write a function to find the product of it\u2019s kth index in the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210"
      }
    ],
    "error": null
  },
  {
    "task_id": 646,
    "text": "Write a python function to count number of cubes of size k in a cube of size n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert No_of_cubes(2,1) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert No_of_cubes(5,2) == 64"
      },
      {
        "passed": true,
        "message": "Test passed: assert No_of_cubes(1,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 647,
    "text": "Write a function to split a string at uppercase letters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_upperstring(\"PythonProgram\")==['Python','Program']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']"
      }
    ],
    "error": null
  },
  {
    "task_id": 648,
    "text": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] "
      },
      {
        "passed": true,
        "message": "Test passed: assert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] "
      },
      {
        "passed": true,
        "message": "Test passed: assert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] "
      }
    ],
    "error": null
  },
  {
    "task_id": 649,
    "text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Range_list([1,2,3,4,5],1,2) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Range_list([1,0,1,2,5,6],4,5) == 11"
      }
    ],
    "error": null
  },
  {
    "task_id": 650,
    "text": "Write a python function to check whether the given two arrays are equal or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert are_Equal([1,2,3],[3,2,1],3,3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert are_Equal([1,1,1],[2,2,2],3,3) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert are_Equal([8,9],[4,5,6],2,3) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 651,
    "text": "Write a function to check if one tuple is a subset of another tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_subset((10, 4, 5, 6), (5, 10)) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset((1, 2, 3, 4), (5, 6)) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset((7, 8, 9, 10), (10, 8)) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 652,
    "text": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 653,
    "text": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})"
      },
      {
        "passed": true,
        "message": "Test passed: assert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})"
      },
      {
        "passed": true,
        "message": "Test passed: assert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})"
      }
    ],
    "error": null
  },
  {
    "task_id": 654,
    "text": "Write a function to find the perimeter of a rectangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rectangle_perimeter(10,20)==60"
      },
      {
        "passed": true,
        "message": "Test passed: assert rectangle_perimeter(10,5)==30"
      },
      {
        "passed": true,
        "message": "Test passed: assert rectangle_perimeter(4,2)==12"
      }
    ],
    "error": null
  },
  {
    "task_id": 655,
    "text": "Write a python function to find the sum of fifth power of n natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert fifth_Power_Sum(2) == 33"
      },
      {
        "passed": true,
        "message": "Test passed: assert fifth_Power_Sum(4) == 1300"
      },
      {
        "passed": true,
        "message": "Test passed: assert fifth_Power_Sum(3) == 276"
      }
    ],
    "error": null
  },
  {
    "task_id": 656,
    "text": "Write a python function to find the minimum sum of absolute differences of two arrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum([3,2,1],[2,1,3],3) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum([1,2,3],[4,5,6],3) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 657,
    "text": "Write a python function to find the first digit in factorial of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(5) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(10) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_Digit(7) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 658,
    "text": "Write a function to find the item with maximum occurrences in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 659,
    "text": "Write a python function to print duplicants from a list of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Repeat([-1, 1, -1, 8]) == [-1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Repeat([1, 2, 3, 1, 2,]) == [1, 2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 660,
    "text": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Points(5,10,1,5) == (1,10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Points(3,5,7,9) == (3,9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Points(1,5,2,8) == (1,8)"
      }
    ],
    "error": null
  },
  {
    "task_id": 661,
    "text": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27"
      }
    ],
    "error": null
  },
  {
    "task_id": 662,
    "text": "Write a function to sort a list in a dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}"
      }
    ],
    "error": null
  },
  {
    "task_id": 663,
    "text": "Write a function to find the largest possible value of k such that k modulo x is y.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_max_val(15, 10, 5) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_max_val(187, 10, 5) == 185"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_max_val(16, 11, 1) == 12"
      }
    ],
    "error": null
  },
  {
    "task_id": 664,
    "text": "Write a python function to find the average of even numbers till a given even number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert average_Even(2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert average_Even(4) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert average_Even(100) == 51"
      }
    ],
    "error": null
  },
  {
    "task_id": 665,
    "text": "Write a python function to shift first element to the end of given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert move_last([1,2,3,4]) == [2,3,4,1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert move_last([5,4,3,2,1]) == [4,3,2,1,5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 666,
    "text": "Write a function to count occurrence of a character in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_char(\"Python\",'o')==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_char(\"little\",'t')==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_char(\"assert\",'s')==2"
      }
    ],
    "error": null
  },
  {
    "task_id": 667,
    "text": "Write a python function to count number of vowels in the string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Check_Vow('corner','AaEeIiOoUu') == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Vow('valid','AaEeIiOoUu') == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Vow('true','AaEeIiOoUu') ==2"
      }
    ],
    "error": null
  },
  {
    "task_id": 668,
    "text": "Write a python function to replace multiple occurence of character by single.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace('peep','e') == 'pep'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace('Greek','e') == 'Grek'"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace('Moon','o') == 'Mon'"
      }
    ],
    "error": null
  },
  {
    "task_id": 669,
    "text": "Write a function to check whether the given ip address is valid or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_IP(\"192.168.0.1\") == 'Valid IP address'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_IP(\"110.234.52.124\") == 'Valid IP address'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_IP(\"366.1.2.2\") == 'Invalid IP address'"
      }
    ],
    "error": null
  },
  {
    "task_id": 670,
    "text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert decreasing_trend([-4,-3,-2,-1]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert decreasing_trend([1,2,3]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert decreasing_trend([3,2,1]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 671,
    "text": "Write a python function to set the right most unset bit.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert set_Right_most_Unset_Bit(21) == 23"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_Right_most_Unset_Bit(11) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert set_Right_most_Unset_Bit(15) == 15"
      }
    ],
    "error": null
  },
  {
    "task_id": 672,
    "text": "Write a function to find maximum of three numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_of_three(10,20,30)==30"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_three(55,47,39)==55"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_three(10,49,30)==49"
      }
    ],
    "error": null
  },
  {
    "task_id": 673,
    "text": "Write a python function to convert a list of multiple integers into a single integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert convert([1,2,3]) == 123"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert([4,5,6]) == 456"
      },
      {
        "passed": true,
        "message": "Test passed: assert convert([7,8,9]) == 789"
      }
    ],
    "error": null
  },
  {
    "task_id": 674,
    "text": "Write a function to remove duplicate words from a given string using collections module.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 675,
    "text": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_nums(2,10,11,20)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_nums(15,17,1,10)==32"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_nums(10,15,5,30)==20"
      }
    ],
    "error": null
  },
  {
    "task_id": 676,
    "text": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'"
      }
    ],
    "error": null
  },
  {
    "task_id": 677,
    "text": "Write a function to check if the triangle is valid or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert validity_triangle(60,50,90)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert validity_triangle(45,75,60)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert validity_triangle(30,50,100)==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 678,
    "text": "Write a python function to remove spaces from a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces(\"a b c\") == \"abc\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces(\"1 2 3\") == \"123\""
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces(\" b c\") == \"bc\""
      }
    ],
    "error": null
  },
  {
    "task_id": 679,
    "text": "Write a function to access dictionary key\u2019s element by index.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'"
      },
      {
        "passed": true,
        "message": "Test passed: assert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'"
      },
      {
        "passed": true,
        "message": "Test passed: assert access_key({'program':15,'computer':45},1)== 'computer'"
      }
    ],
    "error": null
  },
  {
    "task_id": 680,
    "text": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert increasing_trend([1,2,3,4]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert increasing_trend([4,3,2,1]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert increasing_trend([0,1,4,9]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 681,
    "text": "Write a python function to find the smallest prime divisor of a number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert smallest_Divisor(10) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_Divisor(25) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_Divisor(31) == 31"
      }
    ],
    "error": null
  },
  {
    "task_id": 682,
    "text": "Write a function to multiply two lists using map and lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_list([1,2],[3,4])==[3,8]"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_list([90,120],[50,70])==[4500,8400]"
      }
    ],
    "error": null
  },
  {
    "task_id": 683,
    "text": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Square(25) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Square(24) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Square(17) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 684,
    "text": "Write a python function to count occurences of a character in a repeated string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Char(\"abcac\",'a') == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Char(\"abca\",'c') == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Char(\"aba\",'a') == 7"
      }
    ],
    "error": null
  },
  {
    "task_id": 685,
    "text": "Write a python function to find sum of prime numbers between 1 to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Primes(10) == 17"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Primes(20) == 77"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Primes(5) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 686,
    "text": "Write a function to find the frequency of each element in the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'"
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'"
      },
      {
        "passed": true,
        "message": "Test passed: assert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'"
      }
    ],
    "error": null
  },
  {
    "task_id": 687,
    "text": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert recur_gcd(12,14) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert recur_gcd(13,17) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert recur_gcd(9, 3) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 688,
    "text": "Write a function to get the length of a complex number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert len_complex(3,4)==5.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_complex(9,10)==13.45362404707371"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_complex(7,9)==11.40175425099138"
      }
    ],
    "error": null
  },
  {
    "task_id": 689,
    "text": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 690,
    "text": "Write a function to multiply consecutive numbers of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]"
      }
    ],
    "error": null
  },
  {
    "task_id": 691,
    "text": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}"
      },
      {
        "passed": true,
        "message": "Test passed: assert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}"
      }
    ],
    "error": null
  },
  {
    "task_id": 692,
    "text": "Write a python function to find the last two digits in factorial of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert last_Two_Digits(7) == 40"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Two_Digits(5) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert last_Two_Digits(2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 693,
    "text": "Write a function to remove multiple spaces in a string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_multiple_spaces('Quad      Core') == 'Quad Core'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'"
      }
    ],
    "error": null
  },
  {
    "task_id": 694,
    "text": "Write a function to extract unique values from the given dictionary values.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
      }
    ],
    "error": null
  },
  {
    "task_id": 695,
    "text": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_greater((10, 4, 5), (13, 5, 18)) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_greater((1, 2, 3), (2, 1, 4)) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_greater((4, 5, 6), (5, 6, 7)) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 696,
    "text": "Write a function to zip two given lists of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 697,
    "text": "Write a function to find number of even elements in the given list using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_even([10,15,14,13,-18,12,-20])==5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_even([1, 2, 4, 8, 9])==3"
      }
    ],
    "error": null
  },
  {
    "task_id": 698,
    "text": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}"
      }
    ],
    "error": null
  },
  {
    "task_id": 699,
    "text": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"1101\",\"1110\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"1111\",\"0100\") == \"Not Possible\""
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"1110000\",\"0001101\") == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 700,
    "text": "Write a function to count the number of elements in a list which are within a specific range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_range_in_list([7,8,9,15,17,19,45],15,20)==3"
      }
    ],
    "error": null
  },
  {
    "task_id": 701,
    "text": "Write a function to find the equilibrium index of the given array.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert equilibrium_index([1, 2, 3]) == -1, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 702,
    "text": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert removals([1, 5, 6, 2, 8], 5, 2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 703,
    "text": "Write a function to check whether the given key is present in the dictionary or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 704,
    "text": "Write a function to calculate the harmonic sum of n-1.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(10)==2.9289682539682538"
      },
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(4)==2.083333333333333"
      },
      {
        "passed": true,
        "message": "Test passed: assert harmonic_sum(7)==2.5928571428571425 "
      }
    ],
    "error": null
  },
  {
    "task_id": 705,
    "text": "Write a function to sort a list of lists by length and value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 706,
    "text": "Write a function to find whether an array is subset of another array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 707,
    "text": "Write a python function to count the total set bits from 1 to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(16) == 33"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(2) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Set_Bits(14) == 28"
      }
    ],
    "error": null
  },
  {
    "task_id": 708,
    "text": "Write a python function to convert a string to a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Convert('python program') == ['python','program']"
      },
      {
        "passed": true,
        "message": "Test passed: assert Convert('Data Analysis') ==['Data','Analysis']"
      },
      {
        "passed": true,
        "message": "Test passed: assert Convert('Hadoop Training') == ['Hadoop','Training']"
      }
    ],
    "error": null
  },
  {
    "task_id": 709,
    "text": "Write a function to count unique keys for each value present in the tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'"
      }
    ],
    "error": null
  },
  {
    "task_id": 710,
    "text": "Write a function to access the initial and last data of the given tuple record.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)"
      }
    ],
    "error": null
  },
  {
    "task_id": 711,
    "text": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert product_Equal(2841) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert product_Equal(1234) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert product_Equal(1212) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 712,
    "text": "Write a function to remove duplicates from a list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] "
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]"
      }
    ],
    "error": null
  },
  {
    "task_id": 713,
    "text": "Write a function to check if the given tuple contains all valid values or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_valid((True, True, True, True) ) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_valid((True, False, True, True) ) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_valid((True, True, True, True) ) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 714,
    "text": "Write a python function to count the number of distinct power of prime factor of given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Fac(24) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Fac(12) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Fac(4) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 715,
    "text": "Write a function to convert the given string of integers into a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)"
      },
      {
        "passed": true,
        "message": "Test passed: assert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)"
      }
    ],
    "error": null
  },
  {
    "task_id": 716,
    "text": "Write a function to find the perimeter of a rombus.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rombus_perimeter(10)==40"
      },
      {
        "passed": true,
        "message": "Test passed: assert rombus_perimeter(5)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert rombus_perimeter(4)==16"
      }
    ],
    "error": null
  },
  {
    "task_id": 717,
    "text": "Write a function to calculate the standard deviation.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979"
      },
      {
        "passed": true,
        "message": "Test passed: assert sd_calc([1,2,3,4,5,6,7])==2.160246899469287"
      },
      {
        "passed": true,
        "message": "Test passed: assert sd_calc([5,9,10,15,6,4])==4.070217029430577"
      }
    ],
    "error": null
  },
  {
    "task_id": 718,
    "text": "Write a function to create a list taking alternate elements from another given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']"
      },
      {
        "passed": true,
        "message": "Test passed: assert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]"
      }
    ],
    "error": null
  },
  {
    "task_id": 719,
    "text": "Write a function that matches a string that has an a followed by zero or more b's.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"ac\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"dc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"abba\")==('Found a match!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 720,
    "text": "Write a function to add a dictionary to the tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
      }
    ],
    "error": null
  },
  {
    "task_id": 721,
    "text": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2"
      },
      {
        "passed": true,
        "message": "Test passed: assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2"
      },
      {
        "passed": true,
        "message": "Test passed: assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 "
      }
    ],
    "error": null
  },
  {
    "task_id": 722,
    "text": "Write a function to filter the height and width of students which are stored in a dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}"
      },
      {
        "passed": true,
        "message": "Test passed: assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}"
      }
    ],
    "error": null
  },
  {
    "task_id": 723,
    "text": "Write a function to count the same pair in two given lists using map function.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 724,
    "text": "Write a function to calculate the sum of all digits of the base to the specified power.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert power_base_sum(2,100)==115, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert power_base_sum(8,10)==37, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert power_base_sum(8,15)==62, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 725,
    "text": "Write a function to extract values between quotation marks of the given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']"
      }
    ],
    "error": null
  },
  {
    "task_id": 726,
    "text": "Write a function to multiply the adjacent elements of the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)"
      }
    ],
    "error": null
  },
  {
    "task_id": 727,
    "text": "Write a function to remove all characters except letters and numbers using regex",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' "
      }
    ],
    "error": null
  },
  {
    "task_id": 728,
    "text": "Write a function to sum elements in two lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_list([10,20,30],[15,25,35])==[25,45,65]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_list([1,2,3],[5,6,7])==[6,8,10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_list([15,20,30],[15,45,75])==[30,65,105]"
      }
    ],
    "error": null
  },
  {
    "task_id": 729,
    "text": "Write a function to add two lists using map and lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_list([1,2],[3,4])==[4,6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_list([10,20],[50,70])==[60,90]"
      }
    ],
    "error": null
  },
  {
    "task_id": 730,
    "text": "Write a function to remove consecutive duplicates of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"
      }
    ],
    "error": null
  },
  {
    "task_id": 731,
    "text": "Write a function to find the lateral surface area of a cone.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cone(5,12)==204.20352248333654"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cone(10,15)==566.3586699569488"
      },
      {
        "passed": true,
        "message": "Test passed: assert lateralsurface_cone(19,17)==1521.8090132193388"
      }
    ],
    "error": null
  },
  {
    "task_id": 732,
    "text": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')"
      },
      {
        "passed": true,
        "message": "Test passed: assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')"
      }
    ],
    "error": null
  },
  {
    "task_id": 733,
    "text": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 734,
    "text": "Write a python function to find sum of products of all possible subarrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Subarray_Prod([1,2,3],3) == 20"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Subarray_Prod([1,2],2) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Of_Subarray_Prod([1,2,3,4],4) == 84"
      }
    ],
    "error": null
  },
  {
    "task_id": 735,
    "text": "Write a python function to toggle bits of the number except the first and the last bit.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert toggle_middle_bits(9) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_middle_bits(10) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert toggle_middle_bits(11) == 13"
      }
    ],
    "error": null
  },
  {
    "task_id": 736,
    "text": "Write a function to locate the left insertion point for a specified value in sorted order.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert left_insertion([1,2,4,5],6)==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert left_insertion([1,2,4,5],3)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert left_insertion([1,2,4,5],7)==4"
      }
    ],
    "error": null
  },
  {
    "task_id": 737,
    "text": "Write a function to check whether the given string is starting with a vowel or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_str(\"annie\") == 'Valid'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_str(\"dawood\") == 'Invalid'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_str(\"Else\") == 'Valid'"
      }
    ],
    "error": null
  },
  {
    "task_id": 738,
    "text": "Write a function to calculate the geometric sum of n-1.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert geometric_sum(7) == 1.9921875"
      },
      {
        "passed": true,
        "message": "Test passed: assert geometric_sum(4) == 1.9375"
      },
      {
        "passed": true,
        "message": "Test passed: assert geometric_sum(8) == 1.99609375"
      }
    ],
    "error": null
  },
  {
    "task_id": 739,
    "text": "Write a python function to find the index of smallest triangular number with n digits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Index(2) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Index(3) == 14"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Index(4) == 45"
      }
    ],
    "error": null
  },
  {
    "task_id": 740,
    "text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}"
      }
    ],
    "error": null
  },
  {
    "task_id": 741,
    "text": "Write a python function to check whether all the characters are same or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert all_Characters_Same(\"python\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Characters_Same(\"aaa\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Characters_Same(\"data\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 742,
    "text": "Write a function to caluclate the area of a tetrahedron.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert area_tetrahedron(3)==15.588457268119894"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_tetrahedron(20)==692.8203230275509"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_tetrahedron(10)==173.20508075688772"
      }
    ],
    "error": null
  },
  {
    "task_id": 743,
    "text": "Write a function to rotate a given list by specified number of items to the right direction.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
      }
    ],
    "error": null
  },
  {
    "task_id": 744,
    "text": "Write a function to check if the given tuple has any none value or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_none((10, 4, 5, 6, None)) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_none((7, 8, 9, 11, 14)) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_none((1, 2, 3, 4, None)) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 745,
    "text": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"
      },
      {
        "passed": true,
        "message": "Test passed: assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]"
      },
      {
        "passed": true,
        "message": "Test passed: assert divisible_by_digits(20,25)==[22, 24]"
      }
    ],
    "error": null
  },
  {
    "task_id": 746,
    "text": "Write a function to find area of a sector.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sector_area(4,45)==6.285714285714286"
      },
      {
        "passed": true,
        "message": "Test passed: assert sector_area(9,45)==31.82142857142857"
      },
      {
        "passed": true,
        "message": "Test passed: assert sector_area(9,360)==None"
      }
    ],
    "error": null
  },
  {
    "task_id": 747,
    "text": "Write a function to find the longest common subsequence for the given three string sequence.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 "
      },
      {
        "passed": true,
        "message": "Test passed: assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 748,
    "text": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert capital_words_spaces(\"Python\") == 'Python'"
      },
      {
        "passed": true,
        "message": "Test passed: assert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'"
      },
      {
        "passed": true,
        "message": "Test passed: assert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'"
      }
    ],
    "error": null
  },
  {
    "task_id": 749,
    "text": "Write a function to sort a given list of strings of numbers numerically.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
      }
    ],
    "error": null
  },
  {
    "task_id": 750,
    "text": "Write a function to add the given tuple to the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]"
      },
      {
        "passed": true,
        "message": "Test passed: assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]"
      }
    ],
    "error": null
  },
  {
    "task_id": 751,
    "text": "Write a function to check if the given array represents min heap or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 752,
    "text": "Write a function to find the nth jacobsthal number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_num(5) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_num(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert jacobsthal_num(4) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 753,
    "text": "Write a function to find minimum k records from tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 754,
    "text": "Write a function to find common index elements from three lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 755,
    "text": "Write a function to find the second smallest number in a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert second_smallest([1, 2, -8, -2, 0, -2])==-2"
      },
      {
        "passed": true,
        "message": "Test passed: assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5"
      },
      {
        "passed": true,
        "message": "Test passed: assert second_smallest([2,2])==None"
      }
    ],
    "error": null
  },
  {
    "task_id": 756,
    "text": "Write a function that matches a string that has an a followed by zero or one 'b'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_zero_one(\"ac\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_zero_one(\"dc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_zero_one(\"abbbba\")==('Found a match!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 757,
    "text": "Write a function to count the pairs of reverse strings in the given string list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2', Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1', Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' , Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 758,
    "text": "Write a function to count number of unique lists within a list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 759,
    "text": "Write a function to check a decimal with a precision of 2.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('123.11')==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('e666.86')==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_decimal('3.124587')==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 760,
    "text": "Write a python function to check whether an array contains only one distinct element or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert unique_Element([1,1,1],3) == 'YES'"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_Element([1,2,1,2],4) == 'NO'"
      },
      {
        "passed": true,
        "message": "Test passed: assert unique_Element([1,2,3,4,5],5) == 'NO'"
      }
    ],
    "error": null
  },
  {
    "task_id": 761,
    "text": "Write a function to caluclate arc length of an angle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert arc_length(9,45)==3.5357142857142856"
      },
      {
        "passed": true,
        "message": "Test passed: assert arc_length(9,480)==None"
      },
      {
        "passed": true,
        "message": "Test passed: assert arc_length(5,270)==11.785714285714285"
      }
    ],
    "error": null
  },
  {
    "task_id": 762,
    "text": "Write a function to check whether the given month number contains 30 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber_number(6)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber_number(2)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumber_number(12)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 763,
    "text": "Write a python function to find the minimum difference between any two elements in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Diff((1,5,3,19,18,25),6) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Diff((4,3,2,6),4) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Diff((30,5,20,9),4) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 764,
    "text": "Write a python function to count numeric values in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert number_ctr('program2bedone') == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert number_ctr('3wonders') ==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert number_ctr('123') == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 765,
    "text": "Write a function to find nth polite number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_polite(7) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_polite(4) == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_polite(9) == 13"
      }
    ],
    "error": null
  },
  {
    "task_id": 766,
    "text": "Write a function to iterate over all pairs of consecutive items in a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 767,
    "text": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Pairs_Count([1,1,1,1],4,2) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Pairs_Count([1,5,7,-1,5],5,6) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Pairs_Count([1,-2,3],3,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 768,
    "text": "Write a python function to check for odd parity of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Odd_Parity(13) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Odd_Parity(21) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Odd_Parity(18) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 769,
    "text": "Write a python function to get the difference between two lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"
      },
      {
        "passed": true,
        "message": "Test passed: assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]"
      }
    ],
    "error": null
  },
  {
    "task_id": 770,
    "text": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(2) == 82"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(3) == 707"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_Num_Sum(4) == 3108"
      }
    ],
    "error": null
  },
  {
    "task_id": 771,
    "text": "Write a function to check if the given expression is balanced or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_expression(\"{()}[{}]\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_expression(\"{()}[{]\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_expression(\"{()}[{}][]({})\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 772,
    "text": "Write a function to remove all the words with k length in the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_length('The person is most value tet', 3) == 'person is most value'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_length('If you told me about this ok', 4) == 'If you me about ok'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'"
      }
    ],
    "error": null
  },
  {
    "task_id": 773,
    "text": "Write a function to find the occurrence and position of the substrings within a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert occurance_substring('python programming, python language','python')==('python', 0, 6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)"
      },
      {
        "passed": true,
        "message": "Test passed: assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"
      }
    ],
    "error": null
  },
  {
    "task_id": 774,
    "text": "Write a function to check if the string is a valid email address or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_email(\"ankitaoie326.com\") == 'Invalid Email'"
      }
    ],
    "error": null
  },
  {
    "task_id": 775,
    "text": "Write a python function to check whether every odd index contains odd numbers of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert odd_position([2,1,4,3,6,7,6,3]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_position([4,1,2]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert odd_position([1,2,3]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 776,
    "text": "Write a function to count those characters which have vowels as their neighbors in the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_vowels('bestinstareels') == 7"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_vowels('partofthejourneyistheend') == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_vowels('amazonprime') == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 777,
    "text": "Write a python function to find the sum of non-repeated elements in a given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([1,2,3,1,1,4,5,6],8) == 21"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78"
      }
    ],
    "error": null
  },
  {
    "task_id": 778,
    "text": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 779,
    "text": "Write a function to count the number of unique lists within a list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 780,
    "text": "Write a function to find the combinations of sums with tuples in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 781,
    "text": "Write a python function to check whether the count of divisors is even or odd.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Divisors(10) == \"Even\""
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Divisors(100) == \"Odd\""
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Divisors(125) == \"Even\""
      }
    ],
    "error": null
  },
  {
    "task_id": 782,
    "text": "Write a python function to find the sum of all odd length subarrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Odd_Length_Sum([1,2,4]) == 14"
      },
      {
        "passed": true,
        "message": "Test passed: assert Odd_Length_Sum([1,2,1,2]) == 15"
      },
      {
        "passed": true,
        "message": "Test passed: assert Odd_Length_Sum([1,7]) == 8"
      }
    ],
    "error": null
  },
  {
    "task_id": 783,
    "text": "Write a function to convert rgb color to hsv color.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)"
      },
      {
        "passed": true,
        "message": "Test passed: assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)"
      },
      {
        "passed": true,
        "message": "Test passed: assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)"
      }
    ],
    "error": null
  },
  {
    "task_id": 784,
    "text": "Write a function to find the product of first even and odd number of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert mul_even_odd([1,3,5,7,4,1,6,8])==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert mul_even_odd([1,5,7,9,10])==10"
      }
    ],
    "error": null
  },
  {
    "task_id": 785,
    "text": "Write a function to convert tuple string to integer tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)"
      }
    ],
    "error": null
  },
  {
    "task_id": 786,
    "text": "Write a function to locate the right insertion point for a specified value in sorted order.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert right_insertion([1,2,4,5],6)==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert right_insertion([1,2,4,5],3)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert right_insertion([1,2,4,5],7)==4"
      }
    ],
    "error": null
  },
  {
    "task_id": 787,
    "text": "Write a function that matches a string that has an a followed by three 'b'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match_three(\"ac\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_three(\"dc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match_three(\"abbbba\")==('Found a match!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 788,
    "text": "Write a function to create a new tuple from the given string and list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"
      },
      {
        "passed": true,
        "message": "Test passed: assert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')"
      },
      {
        "passed": true,
        "message": "Test passed: assert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')"
      }
    ],
    "error": null
  },
  {
    "task_id": 789,
    "text": "Write a function to calculate the perimeter of a regular polygon.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert perimeter_polygon(4,20)==80"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_polygon(10,15)==150"
      },
      {
        "passed": true,
        "message": "Test passed: assert perimeter_polygon(9,7)==63"
      }
    ],
    "error": null
  },
  {
    "task_id": 790,
    "text": "Write a python function to check whether every even index contains even numbers of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_position([3,2,1]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_position([1,2,3]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_position([2,1,4]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 791,
    "text": "Write a function to remove the nested record from the given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)"
      }
    ],
    "error": null
  },
  {
    "task_id": 792,
    "text": "Write a python function to count the number of lists in a given number of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_list([[1,2],[2,3],[4,5]]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_list([[1,0],[2,0]]) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 793,
    "text": "Write a python function to find the last position of an element in a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert last([1,2,3],1,3) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert last([1,1,1,2,3,4],1,6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert last([2,3,2,3,6,8,9],3,8) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 794,
    "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_starta_endb(\"aabbbb\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_starta_endb(\"aabAbbbc\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_starta_endb(\"accddbbjjj\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 795,
    "text": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]"
      }
    ],
    "error": null
  },
  {
    "task_id": 796,
    "text": "Write function to find the sum of all items in the given dictionary.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert return_sum({'a': 100, 'b':200, 'c':300}) == 600"
      },
      {
        "passed": true,
        "message": "Test passed: assert return_sum({'a': 25, 'b':18, 'c':45}) == 88"
      },
      {
        "passed": true,
        "message": "Test passed: assert return_sum({'a': 36, 'b':39, 'c':49}) == 124"
      }
    ],
    "error": null
  },
  {
    "task_id": 797,
    "text": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_in_Range(2,5) == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_in_Range(5,7) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_in_Range(7,13) == 40"
      }
    ],
    "error": null
  },
  {
    "task_id": 798,
    "text": "Write a python function to find the sum of an array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert _sum([1, 2, 3]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert _sum([15, 12, 13, 10]) == 50"
      },
      {
        "passed": true,
        "message": "Test passed: assert _sum([0, 1, 2]) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 799,
    "text": "Write a python function to left rotate the bits of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert left_Rotate(16,2) == 64"
      },
      {
        "passed": true,
        "message": "Test passed: assert left_Rotate(10,2) == 40"
      },
      {
        "passed": true,
        "message": "Test passed: assert left_Rotate(99,3) == 792"
      }
    ],
    "error": null
  },
  {
    "task_id": 800,
    "text": "Write a function to remove all whitespaces from a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_all_spaces('python  program')==('pythonprogram')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_all_spaces('python                     program')==('pythonprogram')"
      }
    ],
    "error": null
  },
  {
    "task_id": 801,
    "text": "Write a python function to count the number of equal numbers from three given integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert test_three_equal(1,1,1) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_three_equal(-1,-2,-3) == 0"
      },
      {
        "passed": true,
        "message": "Test passed: assert test_three_equal(1,2,2) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 802,
    "text": "Write a python function to count the number of rotations required to generate a sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Rotation([3,2,1],3) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Rotation([4,5,1,2,3],5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Rotation([7,8,9,1,2,3],6) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 803,
    "text": "Write a python function to check whether the given number is a perfect square or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Perfect_Square(10) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Perfect_Square(36) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Perfect_Square(14) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 804,
    "text": "Write a python function to check whether the product of numbers is even or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Product_Even([1,2,3],3) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Product_Even([1,2,1,4],4) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Product_Even([1,1],2) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 805,
    "text": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] , Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] , Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert max_sum_list([[2,3,1]])==[2,3,1] , Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 806,
    "text": "Write a function to find maximum run of uppercase characters in the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_run_uppercase('GeMKSForGERksISBESt') == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_run_uppercase('GooGLEFluTTER') == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 807,
    "text": "Write a python function to find the first odd number in a given list of numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert first_odd([1,3,5]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_odd([2,4,1,3]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert first_odd ([8,9,1]) == 9"
      }
    ],
    "error": null
  },
  {
    "task_id": 808,
    "text": "Write a function to check if the given tuples contain the k or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_K((10, 4, 5, 6, 8), 6) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_K((1, 2, 3, 4, 5, 6), 7) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_K((7, 8, 9, 44, 11, 12), 11) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 809,
    "text": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_smaller((1, 2, 3), (2, 3, 4)) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_smaller((4, 5, 6), (3, 4, 5)) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_smaller((11, 12, 13), (10, 11, 12)) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 810,
    "text": "Write a function to iterate over elements repeating each as many times as its count.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] "
      },
      {
        "passed": true,
        "message": "Test passed: assert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] "
      },
      {
        "passed": true,
        "message": "Test passed: assert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
      }
    ],
    "error": null
  },
  {
    "task_id": 811,
    "text": "Write a function to check if two lists of tuples are identical or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 812,
    "text": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')"
      },
      {
        "passed": true,
        "message": "Test passed: assert road_rd(\"palnadu Road\")==('palnadu Rd.')"
      },
      {
        "passed": true,
        "message": "Test passed: assert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')"
      }
    ],
    "error": null
  },
  {
    "task_id": 813,
    "text": "Write a function to find length of the string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert string_length('python')==6"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_length('program')==7"
      },
      {
        "passed": true,
        "message": "Test passed: assert string_length('language')==8"
      }
    ],
    "error": null
  },
  {
    "task_id": 814,
    "text": "Write a function to find the area of a rombus.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rombus_area(10,20)==100"
      },
      {
        "passed": true,
        "message": "Test passed: assert rombus_area(10,5)==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert rombus_area(4,2)==4"
      }
    ],
    "error": null
  },
  {
    "task_id": 815,
    "text": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
      }
    ],
    "error": null
  },
  {
    "task_id": 816,
    "text": "Write a function to clear the values of the given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert clear_tuple((1, 5, 3, 6, 8)) == ()"
      },
      {
        "passed": true,
        "message": "Test passed: assert clear_tuple((2, 1, 4 ,5 ,6)) == ()"
      },
      {
        "passed": true,
        "message": "Test passed: assert clear_tuple((3, 2, 5, 6, 8)) == ()"
      }
    ],
    "error": null
  },
  {
    "task_id": 817,
    "text": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]"
      }
    ],
    "error": null
  },
  {
    "task_id": 818,
    "text": "Write a python function to count lower case letters in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lower_ctr('abc') == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert lower_ctr('string') == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert lower_ctr('Python') == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 819,
    "text": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
      }
    ],
    "error": null
  },
  {
    "task_id": 820,
    "text": "Write a function to check whether the given month number contains 28 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum_number(2)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum_number(1)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnum_number(3)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 821,
    "text": "Write a function to merge two dictionaries into a single expression.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
      }
    ],
    "error": null
  },
  {
    "task_id": 822,
    "text": "Write a function to return true if the password is valid.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert pass_validity(\"password\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert pass_validity(\"Password@10\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert pass_validity(\"password@10\")==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 823,
    "text": "Write a function to check if the given string starts with a substring using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'"
      }
    ],
    "error": null
  },
  {
    "task_id": 824,
    "text": "Write a python function to remove even numbers from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_even([1,3,5,2]) == [1,3,5]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_even([5,6,7]) == [5,7]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_even([1,2,3,4]) == [1,3]"
      }
    ],
    "error": null
  },
  {
    "task_id": 825,
    "text": "Write a python function to access multiple elements of specified index from a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert access_elements([1,0,2,3],[0,1]) == [1,0]"
      }
    ],
    "error": null
  },
  {
    "task_id": 826,
    "text": "Write a python function to find the type of triangle from the given sides.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\""
      }
    ],
    "error": null
  },
  {
    "task_id": 827,
    "text": "Write a function to sum a specific column of a list in a given list of lists.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 828,
    "text": "Write a function to count alphabets,digits and special charactes in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)"
      }
    ],
    "error": null
  },
  {
    "task_id": 829,
    "text": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'"
      },
      {
        "passed": true,
        "message": "Test passed: assert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'"
      },
      {
        "passed": true,
        "message": "Test passed: assert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'"
      }
    ],
    "error": null
  },
  {
    "task_id": 830,
    "text": "Write a function to round up a number to specific digits.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert round_up(123.01247,0)==124"
      },
      {
        "passed": true,
        "message": "Test passed: assert round_up(123.01247,1)==123.1"
      },
      {
        "passed": true,
        "message": "Test passed: assert round_up(123.01247,2)==123.02"
      }
    ],
    "error": null
  },
  {
    "task_id": 831,
    "text": "Write a python function to count equal element pairs from the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([1,1,1,1],4) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([1,5,1],3) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Pairs([3,2,1,7,8,9],6) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 832,
    "text": "Write a function to extract the maximum numeric value from a string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_max('100klh564abc365bg') == 564"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_max('hello300how546mer231') == 546"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_max('its233beenalong343journey234') == 343"
      }
    ],
    "error": null
  },
  {
    "task_id": 833,
    "text": "Write a function to get dictionary keys as a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_key({1:'python',2:'java'})==[1,2]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_key({27:'language',39:'java',44:'little'})==[27,39,44]"
      }
    ],
    "error": null
  },
  {
    "task_id": 834,
    "text": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] "
      },
      {
        "passed": true,
        "message": "Test passed: assert generate_matrix(2)==[[1,2],[4,3]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 835,
    "text": "Write a python function to find the slope of a line.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert slope(4,2,2,5) == -1.5"
      },
      {
        "passed": true,
        "message": "Test passed: assert slope(2,4,4,6) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert slope(1,2,4,2) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 836,
    "text": "Write a function to find length of the subarray having maximum sum.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 837,
    "text": "Write a python function to find the cube sum of first n odd natural numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(2) == 28"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(3) == 153"
      },
      {
        "passed": true,
        "message": "Test passed: assert cube_Sum(4) == 496"
      }
    ],
    "error": null
  },
  {
    "task_id": 838,
    "text": "Write a python function to find minimum number swaps required to make two binary strings equal.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"0011\",\"1111\") == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"00011\",\"01001\") == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Swaps(\"111\",\"111\") == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 839,
    "text": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 840,
    "text": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(2,0,-1) == \"Yes\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,-5,6) == \"No\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(2,0,2) == \"Yes\""
      }
    ],
    "error": null
  },
  {
    "task_id": 841,
    "text": "Write a function to count the number of inversions in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_inv_count([1, 20, 6, 4, 5], 5) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_inv_count([8, 4, 2, 1], 4) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_inv_count([3, 1, 2], 3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 842,
    "text": "Write a function to find the number which occurs for odd number of times in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 843,
    "text": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert nth_super_ugly_number(12,[2,7,13,19])==32"
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_super_ugly_number(10,[2,7,13,19])==26"
      },
      {
        "passed": true,
        "message": "Test passed: assert nth_super_ugly_number(100,[2,7,13,19])==5408"
      }
    ],
    "error": null
  },
  {
    "task_id": 844,
    "text": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_Number(8,5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Number(7,2) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_Number(5,2) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 845,
    "text": "Write a python function to count the number of digits in factorial of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Digits(7) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Digits(5) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Digits(4) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 846,
    "text": "Write a function to find the minimum number of platforms required for a railway/bus station.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_platform([100,200,300,400],[700,800,900,1000],4)==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_platform([5,6,7,8],[4,3,2,1],4)==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 847,
    "text": "Write a python function to copy a list from a singleton tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lcopy([1, 2, 3]) == [1, 2, 3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]"
      },
      {
        "passed": true,
        "message": "Test passed: assert lcopy([4, 5, 6]) == [4, 5, 6]\n"
      }
    ],
    "error": null
  },
  {
    "task_id": 848,
    "text": "Write a function to find the area of a trapezium.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert area_trapezium(6,9,4)==30"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_trapezium(10,20,30)==450"
      },
      {
        "passed": true,
        "message": "Test passed: assert area_trapezium(15,25,35)==700"
      }
    ],
    "error": null
  },
  {
    "task_id": 849,
    "text": "Write a python function to find sum of all prime divisors of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Sum(60) == 10"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sum(39) == 16"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sum(40) == 7"
      }
    ],
    "error": null
  },
  {
    "task_id": 850,
    "text": "Write a function to check if a triangle of positive area is possible with the given angles.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_triangleexists(50,60,70)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_triangleexists(90,45,45)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_triangleexists(150,30,70)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 851,
    "text": "Write a python function to find sum of inverse of divisors.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Sum_of_Inverse_Divisors(6,12) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sum_of_Inverse_Divisors(9,13) == 1.44"
      },
      {
        "passed": true,
        "message": "Test passed: assert Sum_of_Inverse_Divisors(1,4) == 4"
      }
    ],
    "error": null
  },
  {
    "task_id": 852,
    "text": "Write a python function to remove negative numbers from a list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_negs([1,-2,3,-4]) == [1,3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_negs([1,2,3,-4]) == [1,2,3]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_negs([4,5,-6,7,-8]) == [4,5,7]"
      }
    ],
    "error": null
  },
  {
    "task_id": 853,
    "text": "Write a python function to find sum of odd factors of a number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_of_odd_Factors(30) == 24"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_odd_Factors(18) == 13"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_odd_Factors(2) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 854,
    "text": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]"
      },
      {
        "passed": true,
        "message": "Test passed: assert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]"
      },
      {
        "passed": true,
        "message": "Test passed: assert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 855,
    "text": "Write a python function to check for even parity of a given number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Even_Parity(10) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Even_Parity(11) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Even_Parity(18) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 856,
    "text": "Write a python function to find minimum adjacent swaps required to sort binary array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Swaps([1,0,1,0],4) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Swaps([0,1,0],3) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Min_Swaps([0,0,1,1,0],5) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 857,
    "text": "Write a function to list out the list of given strings individually using map function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
      }
    ],
    "error": null
  },
  {
    "task_id": 858,
    "text": "Write a function to count number of lists in a given list of lists and square the count.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9"
      }
    ],
    "error": null
  },
  {
    "task_id": 859,
    "text": "Write a function to generate all sublists of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 860,
    "text": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_alphanumeric(\"dawood@\") == 'Discard'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_alphanumeric(\"skdmsam326\") == 'Accept'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_alphanumeric(\"cooltricks@\") == 'Discard'"
      }
    ],
    "error": null
  },
  {
    "task_id": 861,
    "text": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']"
      },
      {
        "passed": true,
        "message": "Test passed: assert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]"
      },
      {
        "passed": true,
        "message": "Test passed: assert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]"
      }
    ],
    "error": null
  },
  {
    "task_id": 862,
    "text": "Write a function to find the occurrences of n most common words in a given text.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert n_common_words(\"python is a programming language\",1)==[('python', 1)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert n_common_words(\"python is a programming language\",1)==[('python', 1)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 863,
    "text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 864,
    "text": "Write a function to find palindromes in a given list of strings using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']"
      },
      {
        "passed": true,
        "message": "Test passed: assert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']"
      },
      {
        "passed": true,
        "message": "Test passed: assert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']"
      }
    ],
    "error": null
  },
  {
    "task_id": 865,
    "text": "Write a function to print n-times a list using map function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]"
      },
      {
        "passed": true,
        "message": "Test passed: assert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]"
      },
      {
        "passed": true,
        "message": "Test passed: assert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]"
      }
    ],
    "error": null
  },
  {
    "task_id": 866,
    "text": "Write a function to check whether the given month name contains 31 days or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb(\"February\")==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb(\"January\")==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_monthnumb(\"March\")==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 867,
    "text": "Write a python function to add a minimum number such that the sum of array becomes even.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Num([1,2,3,4,5,6,7,8],8) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_Num([1,2,3],3) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 868,
    "text": "Write a python function to find the length of the last word in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert length_Of_Last_Word(\"python language\") == 8"
      },
      {
        "passed": true,
        "message": "Test passed: assert length_Of_Last_Word(\"PHP\") == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert length_Of_Last_Word(\"\") == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 869,
    "text": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 870,
    "text": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_positivenum([10,15,-14,13,-18,12,-20])==50, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 871,
    "text": "Write a python function to check whether the given strings are rotations of each other or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert are_Rotations(\"abc\",\"cba\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert are_Rotations(\"abcd\",\"cdba\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert are_Rotations(\"abacd\",\"cdaba\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 872,
    "text": "Write a function to check if a nested list is a subset of another nested list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 873,
    "text": "Write a function to solve the fibonacci sequence using recursion.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert fibonacci(7) == 13"
      },
      {
        "passed": true,
        "message": "Test passed: assert fibonacci(8) == 21"
      },
      {
        "passed": true,
        "message": "Test passed: assert fibonacci(9) == 34"
      }
    ],
    "error": null
  },
  {
    "task_id": 874,
    "text": "Write a python function to check if the string is a concatenation of another string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_Concat(\"abcabcabc\",\"abc\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Concat(\"abcab\",\"abc\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_Concat(\"aba\",\"ab\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 875,
    "text": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 876,
    "text": "Write a python function to find lcm of two positive integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lcm(4,6) == 12"
      },
      {
        "passed": true,
        "message": "Test passed: assert lcm(15,17) == 255"
      },
      {
        "passed": true,
        "message": "Test passed: assert lcm(2,6) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 877,
    "text": "Write a python function to sort the given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_String(\"cba\") == \"abc\""
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_String(\"data\") == \"aadt\""
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_String(\"zxy\") == \"xyz\""
      }
    ],
    "error": null
  },
  {
    "task_id": 878,
    "text": "Write a function to check if the given tuple contains only k elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 879,
    "text": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"aabbbbd\") == 'Not matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"aabAbbbc\") == 'Not matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"accddbbjjjb\") == 'Found a match!'"
      }
    ],
    "error": null
  },
  {
    "task_id": 880,
    "text": "Write a python function to find number of solutions in quadratic equation.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(2,5,2) == \"2 solutions\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,1,1) == \"No solutions\""
      },
      {
        "passed": true,
        "message": "Test passed: assert Check_Solution(1,2,1) == \"1 solution\""
      }
    ],
    "error": null
  },
  {
    "task_id": 881,
    "text": "Write a function to find the sum of first even and odd number of a given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_even_odd([1,3,5,7,4,1,6,8])==5"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_even_odd([1,5,7,9,10])==11"
      }
    ],
    "error": null
  },
  {
    "task_id": 882,
    "text": "Write a function to caluclate perimeter of a parallelogram.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_perimeter(10,20)==400"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_perimeter(15,20)==600"
      },
      {
        "passed": true,
        "message": "Test passed: assert parallelogram_perimeter(8,9)==144"
      }
    ],
    "error": null
  },
  {
    "task_id": 883,
    "text": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]"
      },
      {
        "passed": true,
        "message": "Test passed: assert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]"
      }
    ],
    "error": null
  },
  {
    "task_id": 884,
    "text": "Write a python function to check whether all the bits are within a given range or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(10,2,1) == True "
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(5,2,4) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert all_Bits_Set_In_The_Given_Range(22,2,3) == True "
      }
    ],
    "error": null
  },
  {
    "task_id": 885,
    "text": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Isomorphic(\"paper\",\"title\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Isomorphic(\"ab\",\"ba\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Isomorphic(\"ab\",\"aa\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 886,
    "text": "Write a function to add all the numbers in a list and divide it with the length of the list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_num((8, 2, 3, 0, 7))==4.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_num((-10,-20,-30))==-20.0"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_num((19,15,18))==17.333333333333332"
      }
    ],
    "error": null
  },
  {
    "task_id": 887,
    "text": "Write a python function to check whether the given number is odd or not using bitwise operator.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_odd(5) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_odd(6) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_odd(7) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 888,
    "text": "Write a function to substract the elements of the given nested tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))"
      },
      {
        "passed": true,
        "message": "Test passed: assert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))"
      },
      {
        "passed": true,
        "message": "Test passed: assert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))"
      }
    ],
    "error": null
  },
  {
    "task_id": 889,
    "text": "Write a function to reverse each list in a given list of lists.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]"
      },
      {
        "passed": true,
        "message": "Test passed: assert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]"
      }
    ],
    "error": null
  },
  {
    "task_id": 890,
    "text": "Write a python function to find the index of an extra element present in one sorted array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_Extra([1,2,3,4],[1,2,3],3) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 891,
    "text": "Write a python function to check whether the given two numbers have same number of digits or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert same_Length(12,1) == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert same_Length(2,2) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert same_Length(10,20) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 892,
    "text": "Write a function to remove multiple spaces in a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces('python  program')==('python program')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces('python   programming    language')==('python programming language')"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_spaces('python                     program')==('python program')"
      }
    ],
    "error": null
  },
  {
    "task_id": 893,
    "text": "Write a python function to get the last element of each sublist.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]"
      },
      {
        "passed": true,
        "message": "Test passed: assert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']"
      },
      {
        "passed": true,
        "message": "Test passed: assert Extract([[1, 2, 3], [4, 5]]) == [3, 5]"
      }
    ],
    "error": null
  },
  {
    "task_id": 894,
    "text": "Write a function to convert the given string of float type into tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)"
      },
      {
        "passed": true,
        "message": "Test passed: assert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)"
      }
    ],
    "error": null
  },
  {
    "task_id": 895,
    "text": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44"
      }
    ],
    "error": null
  },
  {
    "task_id": 896,
    "text": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] "
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] "
      },
      {
        "passed": true,
        "message": "Test passed: assert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] "
      }
    ],
    "error": null
  },
  {
    "task_id": 897,
    "text": "Write a python function to check whether the word is present in a given sentence or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Word_Present(\"machine learning\",\"machine\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Word_Present(\"easy\",\"fun\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Word_Present(\"python language\",\"code\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 898,
    "text": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_elements([0,0,0,0,0],5)==[0]"
      }
    ],
    "error": null
  },
  {
    "task_id": 899,
    "text": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check([3,2,1,2,3,4],6) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check([2,1,4,5,1],5) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check([1,2,2,1,2,3],6) == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 900,
    "text": "Write a function where a string will start with a specific number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert match_num('5-2345861')==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert match_num('6-2345861')==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert match_num('78910')==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 901,
    "text": "Write a function to find the smallest multiple of the first n numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert smallest_multiple(13)==360360"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_multiple(2)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert smallest_multiple(1)==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 902,
    "text": "Write a function to combine two dictionaries by adding values for common keys.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) "
      },
      {
        "passed": true,
        "message": "Test passed: assert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) "
      },
      {
        "passed": true,
        "message": "Test passed: assert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})"
      }
    ],
    "error": null
  },
  {
    "task_id": 903,
    "text": "Write a python function to count the total unset bits from 1 to n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_Unset_Bits(2) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Unset_Bits(5) == 4"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_Unset_Bits(14) == 17"
      }
    ],
    "error": null
  },
  {
    "task_id": 904,
    "text": "Write a function to return true if the given number is even else return false.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert even_num(13.5)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_num(0)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert even_num(-9)==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 905,
    "text": "Write a python function to find the sum of squares of binomial co-efficients.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_of_square(4) == 70"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_square(5) == 252"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_of_square(2) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 906,
    "text": "Write a function to extract year, month and date from a url by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]"
      },
      {
        "passed": true,
        "message": "Test passed: assert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]"
      }
    ],
    "error": null
  },
  {
    "task_id": 907,
    "text": "Write a function to print the first n lucky numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] "
      },
      {
        "passed": true,
        "message": "Test passed: assert lucky_num(5)==[1, 3, 7, 9, 13]"
      },
      {
        "passed": true,
        "message": "Test passed: assert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]"
      }
    ],
    "error": null
  },
  {
    "task_id": 908,
    "text": "Write a function to find the fixed point in the given array.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_fixed_point([0, 2, 5, 8, 17],5) == 0"
      }
    ],
    "error": null
  },
  {
    "task_id": 909,
    "text": "Write a function to find the previous palindrome of a specified number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert previous_palindrome(99)==88"
      },
      {
        "passed": true,
        "message": "Test passed: assert previous_palindrome(1221)==1111"
      },
      {
        "passed": true,
        "message": "Test passed: assert previous_palindrome(120)==111"
      }
    ],
    "error": null
  },
  {
    "task_id": 910,
    "text": "Write a function to validate a gregorian date.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_date(11,11,2002)==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_date(13,11,2002)==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_date('11','11','2002')==True"
      }
    ],
    "error": null
  },
  {
    "task_id": 911,
    "text": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximum_product( [12, 74, 9, 50, 61, 41])==225700"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520"
      }
    ],
    "error": null
  },
  {
    "task_id": 912,
    "text": "Write a function to find ln, m lobb number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert int(lobb_num(5, 3)) == 35"
      },
      {
        "passed": true,
        "message": "Test passed: assert int(lobb_num(3, 2)) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert int(lobb_num(4, 2)) == 20"
      }
    ],
    "error": null
  },
  {
    "task_id": 913,
    "text": "Write a function to check for a number at the end of a string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert end_num('abcdef')==False"
      },
      {
        "passed": true,
        "message": "Test passed: assert end_num('abcdef7')==True"
      },
      {
        "passed": true,
        "message": "Test passed: assert end_num('abc')==False"
      }
    ],
    "error": null
  },
  {
    "task_id": 914,
    "text": "Write a python function to check whether the given string is made up of two alternating characters or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert is_Two_Alter(\"abab\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Two_Alter(\"aaaa\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert is_Two_Alter(\"xyz\") == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 915,
    "text": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]"
      },
      {
        "passed": true,
        "message": "Test passed: assert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]"
      }
    ],
    "error": null
  },
  {
    "task_id": 916,
    "text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)"
      }
    ],
    "error": null
  },
  {
    "task_id": 917,
    "text": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_uppercase_lowercase(\"aA\")==('Not matched!')"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')"
      }
    ],
    "error": null
  },
  {
    "task_id": 918,
    "text": "Write a function to count coin change.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert coin_change([1, 2, 3],3,4)==4"
      },
      {
        "passed": true,
        "message": "Test passed: assert coin_change([4,5,6,7,8,9],6,9)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert coin_change([4,5,6,7,8,9],6,4)==1"
      }
    ],
    "error": null
  },
  {
    "task_id": 919,
    "text": "Write a python function to multiply all items in the list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert multiply_list([1,-2,3]) == -6"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_list([1,2,3,4]) == 24"
      },
      {
        "passed": true,
        "message": "Test passed: assert multiply_list([3,1,2,3]) == 18"
      }
    ],
    "error": null
  },
  {
    "task_id": 920,
    "text": "Write a function to remove all tuples with all none values in the given tuple list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'"
      }
    ],
    "error": null
  },
  {
    "task_id": 921,
    "text": "Write a function to perform chunking of tuples each of size n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 922,
    "text": "Write a function to find a pair with the highest product from a given array of integers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_product([1, 3, 5, 6, 8, 9])==(8,9)"
      }
    ],
    "error": null
  },
  {
    "task_id": 923,
    "text": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert super_seq(\"feek\", \"eke\", 4, 3) == 5"
      },
      {
        "passed": true,
        "message": "Test passed: assert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 924,
    "text": "Write a function to find maximum of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_of_two(10,20)==20"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_two(19,15)==19"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_of_two(-10,-20)==-10"
      }
    ],
    "error": null
  },
  {
    "task_id": 925,
    "text": "Write a python function to calculate the product of all the numbers of a given tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864"
      },
      {
        "passed": true,
        "message": "Test passed: assert mutiple_tuple((1,2,3)) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert mutiple_tuple((-2,-4,-6)) == -48"
      }
    ],
    "error": null
  },
  {
    "task_id": 926,
    "text": "Write a function to find n-th rencontres number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert rencontres_number(7, 2) == 924"
      },
      {
        "passed": true,
        "message": "Test passed: assert rencontres_number(3, 0) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert rencontres_number(3, 1) == 3"
      }
    ],
    "error": null
  },
  {
    "task_id": 927,
    "text": "Write a function to calculate the height of the given binary tree.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert (max_height(root)) == 3, Error: name 'root' is not defined"
      },
      {
        "passed": false,
        "message": "Error in test case: assert (max_height(root1)) == 5 , Error: name 'root1' is not defined"
      },
      {
        "passed": false,
        "message": "Error in test case: assert (max_height(root2)) == 4, Error: name 'root2' is not defined"
      }
    ],
    "error": null
  },
  {
    "task_id": 928,
    "text": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert change_date_format('2026-01-02')=='02-01-2026'"
      },
      {
        "passed": true,
        "message": "Test passed: assert change_date_format('2021-01-04')=='04-01-2021'"
      },
      {
        "passed": true,
        "message": "Test passed: assert change_date_format('2030-06-06')=='06-06-2030'"
      }
    ],
    "error": null
  },
  {
    "task_id": 929,
    "text": "Write a function to count repeated items of a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4"
      }
    ],
    "error": null
  },
  {
    "task_id": 930,
    "text": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"msb\") == 'Not matched!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"a0c\") == 'Found a match!'"
      },
      {
        "passed": true,
        "message": "Test passed: assert text_match(\"abbc\") == 'Found a match!'"
      }
    ],
    "error": null
  },
  {
    "task_id": 931,
    "text": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_series(7)==784"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_series(5)==225"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_series(15)==14400"
      }
    ],
    "error": null
  },
  {
    "task_id": 932,
    "text": "Write a function to remove duplicate words from a given list of strings.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']"
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']"
      }
    ],
    "error": null
  },
  {
    "task_id": 933,
    "text": "Write a function to convert camel case string to snake case string by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('GoogleAssistant') == 'google_assistant'"
      },
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('ChromeCast') == 'chrome_cast'"
      },
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('QuadCore') == 'quad_core'"
      }
    ],
    "error": null
  },
  {
    "task_id": 934,
    "text": "Write a function to find the nth delannoy number.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert dealnnoy_num(3, 4) == 129"
      },
      {
        "passed": true,
        "message": "Test passed: assert dealnnoy_num(3, 3) == 63"
      },
      {
        "passed": true,
        "message": "Test passed: assert dealnnoy_num(4, 5) == 681"
      }
    ],
    "error": null
  },
  {
    "task_id": 935,
    "text": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert series_sum(6)==91"
      },
      {
        "passed": true,
        "message": "Test passed: assert series_sum(7)==140"
      },
      {
        "passed": true,
        "message": "Test passed: assert series_sum(12)==650"
      }
    ],
    "error": null
  },
  {
    "task_id": 936,
    "text": "Write a function to re-arrange the given tuples based on the given ordered list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 937,
    "text": "Write a function to count the most common character in a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_char(\"hello world\")==('l')"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_char(\"hello \")==('l')"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_char(\"python pr\")==('p')"
      }
    ],
    "error": null
  },
  {
    "task_id": 938,
    "text": "Write a function to find three closest elements from three sorted arrays.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)"
      },
      {
        "passed": true,
        "message": "Test passed: assert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)"
      }
    ],
    "error": null
  },
  {
    "task_id": 939,
    "text": "Write a function to sort a list of dictionaries using lambda function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]"
      },
      {
        "passed": true,
        "message": "Test passed: assert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])"
      },
      {
        "passed": true,
        "message": "Test passed: assert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])"
      }
    ],
    "error": null
  },
  {
    "task_id": 940,
    "text": "Write a function to sort the given array by using heap sort.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]"
      },
      {
        "passed": true,
        "message": "Test passed: assert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]"
      }
    ],
    "error": null
  },
  {
    "task_id": 941,
    "text": "Write a function to count the elements in a list until an element is a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert count_elim([10,20,30,(10,20),40])==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_elim([10,(20,30),(10,20),40])==1"
      },
      {
        "passed": true,
        "message": "Test passed: assert count_elim([(10,(20,30,(10,20),40))])==0"
      }
    ],
    "error": null
  },
  {
    "task_id": 942,
    "text": "Write a function to check if any list element is present in the given list.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False"
      }
    ],
    "error": null
  },
  {
    "task_id": 943,
    "text": "Write a function to combine two given sorted lists using heapq module.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]"
      },
      {
        "passed": true,
        "message": "Test passed: assert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]"
      }
    ],
    "error": null
  },
  {
    "task_id": 944,
    "text": "Write a function to separate and print the numbers and their position of a given string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert num_position(\"there are 70 flats in this apartment\")==10"
      },
      {
        "passed": true,
        "message": "Test passed: assert num_position(\"every adult have 32 teeth\")==17"
      },
      {
        "passed": true,
        "message": "Test passed: assert num_position(\"isha has 79 chocolates in her bag\")==9"
      }
    ],
    "error": null
  },
  {
    "task_id": 945,
    "text": "Write a function to convert the given tuples into set.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}"
      },
      {
        "passed": true,
        "message": "Test passed: assert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}"
      }
    ],
    "error": null
  },
  {
    "task_id": 946,
    "text": "Write a function to find the most common elements and their counts of a specified text.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] "
      },
      {
        "passed": true,
        "message": "Test passed: assert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 947,
    "text": "Write a python function to find the length of the shortest word.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"win\",\"lose\",\"great\"]) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"a\",\"ab\",\"abc\"]) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert len_log([\"12\",\"12\",\"1234\"]) == 2"
      }
    ],
    "error": null
  },
  {
    "task_id": 948,
    "text": "Write a function to get an item of a tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')"
      }
    ],
    "error": null
  },
  {
    "task_id": 949,
    "text": "Write a function to sort the given tuple list basis the total digits in tuple.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]', Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]', Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]', Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 950,
    "text": "Write a function to display sign of the chinese zodiac for given year.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert chinese_zodiac(1997)==('Ox')"
      },
      {
        "passed": true,
        "message": "Test passed: assert chinese_zodiac(1998)==('Tiger')"
      },
      {
        "passed": true,
        "message": "Test passed: assert chinese_zodiac(1994)==('Dog')"
      }
    ],
    "error": null
  },
  {
    "task_id": 951,
    "text": "Write a function to find the maximum of similar indices in two lists of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 952,
    "text": "Write a function to compute the value of ncr mod p.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert nCr_mod_p(10, 2, 13) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert nCr_mod_p(11, 3, 14) == 11"
      },
      {
        "passed": true,
        "message": "Test passed: assert nCr_mod_p(18, 14, 19) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 953,
    "text": "Write a python function to find the minimun number of subsets with distinct elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert subset([1, 2, 3, 4],4) == 1"
      },
      {
        "passed": true,
        "message": "Test passed: assert subset([5, 6, 9, 3, 4, 3, 4],7) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert subset([1, 2, 3 ],3) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 954,
    "text": "Write a function that gives profit amount if the given amount has profit else return none.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert profit_amount(1500,1200)==300"
      },
      {
        "passed": true,
        "message": "Test passed: assert profit_amount(100,200)==None"
      },
      {
        "passed": true,
        "message": "Test passed: assert profit_amount(2000,5000)==None"
      }
    ],
    "error": null
  },
  {
    "task_id": 955,
    "text": "Write a function to find out, if the given number is abundant.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert is_abundant(12)==True, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert is_abundant(13)==False, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert is_abundant(9)==False, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 956,
    "text": "Write a function to split the given string at uppercase letters by using regex.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']"
      },
      {
        "passed": true,
        "message": "Test passed: assert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']"
      }
    ],
    "error": null
  },
  {
    "task_id": 957,
    "text": "Write a python function to get the position of rightmost set bit.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_First_Set_Bit_Pos(12) == 3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_First_Set_Bit_Pos(18) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_First_Set_Bit_Pos(16) == 5"
      }
    ],
    "error": null
  },
  {
    "task_id": 958,
    "text": "Write a function to convert an integer into a roman numeral.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert int_to_roman(1)==(\"I\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert int_to_roman(50)==(\"L\")"
      },
      {
        "passed": true,
        "message": "Test passed: assert int_to_roman(4)==(\"IV\")"
      }
    ],
    "error": null
  },
  {
    "task_id": 959,
    "text": "Write a python function to find the average of a list.",
    "test_results": [
      {
        "passed": false,
        "message": "Error in test case: assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75, Error: sum() missing 1 required positional argument: 'b'"
      },
      {
        "passed": false,
        "message": "Error in test case: assert Average([1,2,3]) == 2, Error: sum() missing 1 required positional argument: 'b'"
      }
    ],
    "error": null
  },
  {
    "task_id": 960,
    "text": "Write a function to solve tiling problem.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert get_noOfways(4)==3"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_noOfways(3)==2"
      },
      {
        "passed": true,
        "message": "Test passed: assert get_noOfways(5)==5"
      }
    ],
    "error": null
  },
  {
    "task_id": 961,
    "text": "Write a function to convert a roman numeral to an integer.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert roman_to_int('MMMCMLXXXVI')==3986"
      },
      {
        "passed": true,
        "message": "Test passed: assert roman_to_int('MMMM')==4000"
      },
      {
        "passed": true,
        "message": "Test passed: assert roman_to_int('C')==100"
      }
    ],
    "error": null
  },
  {
    "task_id": 962,
    "text": "Write a python function to find the sum of all even natural numbers within the range l and r.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert sum_Even(2,5) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Even(3,8) == 18"
      },
      {
        "passed": true,
        "message": "Test passed: assert sum_Even(4,6) == 10"
      }
    ],
    "error": null
  },
  {
    "task_id": 963,
    "text": "Write a function to calculate the discriminant value.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert discriminant_value(4,8,2)==(\"Two solutions\",32)"
      },
      {
        "passed": true,
        "message": "Test passed: assert discriminant_value(5,7,9)==(\"no real solution\",-131)"
      },
      {
        "passed": true,
        "message": "Test passed: assert discriminant_value(0,0,9)==(\"one solution\",0)"
      }
    ],
    "error": null
  },
  {
    "task_id": 964,
    "text": "Write a python function to check whether the length of the word is even or not.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"program\") == False"
      },
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"solution\") == True"
      },
      {
        "passed": true,
        "message": "Test passed: assert word_len(\"data\") == True"
      }
    ],
    "error": null
  },
  {
    "task_id": 965,
    "text": "Write a function to convert camel case string to snake case string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('PythonProgram')==('python_program')"
      },
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('pythonLanguage')==('python_language')"
      },
      {
        "passed": true,
        "message": "Test passed: assert camel_to_snake('ProgrammingLanguage')==('programming_language')"
      }
    ],
    "error": null
  },
  {
    "task_id": 966,
    "text": "Write a function to remove an empty tuple from a list of tuples.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  "
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  "
      },
      {
        "passed": true,
        "message": "Test passed: assert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  "
      }
    ],
    "error": null
  },
  {
    "task_id": 967,
    "text": "Write a python function to accept the strings which contains all vowels.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert check(\"SEEquoiaL\") == 'accepted'"
      },
      {
        "passed": true,
        "message": "Test passed: assert check('program') == \"not accepted\""
      },
      {
        "passed": true,
        "message": "Test passed: assert check('fine') == \"not accepted\""
      }
    ],
    "error": null
  },
  {
    "task_id": 968,
    "text": "Write a python function to find maximum possible value for the given periodic function.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert floor_Max(11,10,9) == 9"
      },
      {
        "passed": true,
        "message": "Test passed: assert floor_Max(5,7,4) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert floor_Max(2,2,1) == 1"
      }
    ],
    "error": null
  },
  {
    "task_id": 969,
    "text": "Write a function to join the tuples if they have similar initial elements.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]"
      },
      {
        "passed": true,
        "message": "Test passed: assert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]"
      }
    ],
    "error": null
  },
  {
    "task_id": 970,
    "text": "Write a function to find minimum of two numbers.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_of_two(10,20)==10"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_of_two(19,15)==15"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_of_two(-10,-20)==-20"
      }
    ],
    "error": null
  },
  {
    "task_id": 971,
    "text": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert maximum_segments(7, 5, 2, 5) == 2"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_segments(17, 2, 1, 3) == 17"
      },
      {
        "passed": true,
        "message": "Test passed: assert maximum_segments(18, 16, 3, 6) == 6"
      }
    ],
    "error": null
  },
  {
    "task_id": 972,
    "text": "Write a function to concatenate the given two tuples to a nested tuple.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)"
      },
      {
        "passed": true,
        "message": "Test passed: assert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)"
      }
    ],
    "error": null
  },
  {
    "task_id": 973,
    "text": "Write a python function to left rotate the string.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert left_rotate(\"python\",2) == \"thonpy\"   "
      },
      {
        "passed": true,
        "message": "Test passed: assert left_rotate(\"bigdata\",3 ) == \"databig\" "
      },
      {
        "passed": true,
        "message": "Test passed: assert left_rotate(\"hadoop\",1 ) == \"adooph\" "
      }
    ],
    "error": null
  },
  {
    "task_id": 974,
    "text": "Write a function to find the minimum total path sum in the given triangle.",
    "test_results": [
      {
        "passed": true,
        "message": "Test passed: assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6"
      },
      {
        "passed": true,
        "message": "Test passed: assert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 "
      },
      {
        "passed": true,
        "message": "Test passed: assert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9"
      }
    ],
    "error": null
  }
]