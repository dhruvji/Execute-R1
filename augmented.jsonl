{"text": "Write a function to find the elements that are unique to each of the given two tuple lists (elements that appear in one tuple but not the other).", "code": "def find_unique_elements(test_tup1: tuple, test_tup2: tuple):\n    unique_to_tup1 = tuple(set(test_tup1) - set(test_tup2))\n    unique_to_tup2 = tuple(set(test_tup2) - set(test_tup1))\n    return unique_to_tup1 + unique_to_tup2", "task_id": "2_98ff7e47-73fb-4139-831e-3ab384fd2277", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements from the given two tuple lists and return a dictionary with the elements as keys and their frequency of occurrence as values.", "code": "def common_elements_with_count(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        count1 = test_tup1.count(item)\n        count2 = test_tup2.count(item)\n        result[item] = min(count1, count2)\n    return result", "task_id": "2_2b4ce55f-5294-49fb-ac91-e1c1c377f69d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the similar elements from the given two tuple lists, but preserve the order of elements as they appear in the first tuple.", "code": "def similar_elements_ordered(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = tuple(item for item in test_tup1 if item in common)\n    return result", "task_id": "2_5d1911cf-d400-479f-9095-23f715bd8a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements at the same index positions in two tuples that have the same value.", "code": "def similar_elements_by_index(test_tup1: tuple, test_tup2: tuple):\n    min_len = min(len(test_tup1), len(test_tup2))\n    result = tuple(test_tup1[i] for i in range(min_len) if test_tup1[i] == test_tup2[i])\n    return result", "task_id": "2_2a75d9b5-a882-426c-970e-3a13df1a10e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements that appear at least 'threshold' number of times across both tuple lists combined.", "code": "def similar_elements_threshold(test_tup1: tuple, test_tup2: tuple, threshold: int):\n    combined = list(test_tup1) + list(test_tup2)\n    result = tuple(item for item in set(combined) if combined.count(item) >= threshold)\n    return result", "task_id": "2_6d47a8ee-4026-4c63-a3f5-07887ac5151c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find similar elements from two tuples and group them by their data types in a dictionary.", "code": "def similar_elements_type(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        item_type = type(item).__name__\n        if item_type not in result:\n            result[item_type] = []\n        result[item_type].append(item)\n    return result", "task_id": "2_c25c74c8-d75d-4b7a-8cbd-505d29ea13fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find similar elements from two tuples and return a dictionary where keys are the common elements and values are lists of their positions in both tuples.", "code": "def similar_elements_with_positions(test_tup1: tuple, test_tup2: tuple):\n    common = set(test_tup1) & set(test_tup2)\n    result = {}\n    for item in common:\n        positions1 = [i for i, x in enumerate(test_tup1) if x == item]\n        positions2 = [i for i, x in enumerate(test_tup2) if x == item]\n        result[item] = [positions1, positions2]\n    return result", "task_id": "2_9434ca25-a4d8-45d0-b142-d93e43fff1fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find consecutive similar elements (elements that appear next to each other in the same order) from the given two tuple lists.", "code": "def similar_elements_consecutive(test_tup1: tuple, test_tup2: tuple):\n    result = []\n    for i in range(min(len(test_tup1), len(test_tup2)) - 1):\n        if test_tup1[i:i+2] == test_tup2[i:i+2]:\n            result.extend(test_tup1[i:i+2])\n    return tuple(set(result))", "task_id": "2_0fbdc9b5-585b-41b3-a992-cd9f729fccf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find similar string elements from two tuples, ignoring case sensitivity.", "code": "def similar_elements_case_insensitive(test_tup1: tuple, test_tup2: tuple):\n    lower_tup1 = tuple(str(item).lower() if isinstance(item, str) else item for item in test_tup1)\n    lower_tup2 = tuple(str(item).lower() if isinstance(item, str) else item for item in test_tup2)\n    \n    # Create mapping of lowercase to original case\n    original_case = {}\n    for item in test_tup1 + test_tup2:\n        if isinstance(item, str):\n            original_case[item.lower()] = item\n    \n    common = set(lower_tup1) & set(lower_tup2)\n    result = tuple(original_case.get(item, item) for item in common)\n    return result", "task_id": "2_603a8eda-9ca7-4761-b4b0-c5fad973d777", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find numerically similar elements from two tuples, where numbers are considered similar if their absolute difference is within a given tolerance.", "code": "def similar_elements_fuzzy(test_tup1: tuple, test_tup2: tuple, tolerance: int):\n    result = set()\n    for item1 in test_tup1:\n        if not isinstance(item1, (int, float)):\n            continue\n        for item2 in test_tup2:\n            if not isinstance(item2, (int, float)):\n                continue\n            if abs(item1 - item2) <= tolerance:\n                result.add(item1)\n                result.add(item2)\n    return tuple(result)", "task_id": "2_839e5f9b-700e-4d05-a7a0-369d3bf70a37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is even.", "code": "def is_even(n):\n    return n % 2 == 0", "task_id": "3_f1dfd465-1e05-4d6d-919a-d8f3a54a2f87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is odd.", "code": "def is_odd(n):\n    return n % 2 != 0", "task_id": "3_605a1cba-cfd5-4d1a-9ca0-8ad519eb55a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is a perfect square.", "code": "import math\ndef is_perfect_square(n):\n    return math.isqrt(n) ** 2 == n", "task_id": "3_9bf6f757-e0b8-443a-927e-7fe3d055e761", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "3_3eef5630-c956-4370-9326-3ad004417d0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of digits of a number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "3_bbb182b8-608b-44eb-b3a6-c38d850f778d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "3_4a0f75b5-d2ca-48c8-8660-e04b38208d04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two strings are anagrams.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "3_b32321f9-9bd3-4ec3-bcb4-13b58d957d35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "3_771e95fd-809d-4745-bb8c-9fa8f3cd3968", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b", "task_id": "3_b4be4bf5-524d-45c0-b19c-f00c4a79fcae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "3_6cebdfad-6c51-4bc0-801d-d7365c7de98f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a power of two.", "code": "def is_power_of_two(x: int) -> bool:\n    return x > 0 and (x & (x - 1)) == 0", "task_id": "6_daa41d09-ef26-4767-bb55-533aefac29e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at exactly two bit positions.", "code": "def differ_at_two_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') == 2", "task_id": "6_c744d1d3-9330-42d9-b01a-90bcdea2fd6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at most at one bit position.", "code": "def differ_at_most_one_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') <= 1", "task_id": "6_ae381c6f-e828-4490-a002-871bd5ebdf8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at least at one bit position.", "code": "def differ_at_least_one_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') >= 1", "task_id": "6_f2f9265e-c3a9-497c-8cea-f8b047601a8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at any odd bit position.", "code": "def differ_at_odd_bit_pos(a: int, b: int) -> bool:\n    return any((a ^ b) & (1 << i) for i in range(1, 32, 2))", "task_id": "6_b8407614-0f3e-4d53-b9d5-99c54e62ff0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at any even bit position.", "code": "def differ_at_even_bit_pos(a: int, b: int) -> bool:\n    return any((a ^ b) & (1 << i) for i in range(0, 32, 2))", "task_id": "6_55d3a2b1-b0e8-4e0a-9851-4885efa3c63c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at least at two bit positions.", "code": "def differ_at_least_two_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') >= 2", "task_id": "6_6bfbcdf8-db25-44cc-8de3-3eba57d90d18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at most at two bit positions.", "code": "def differ_at_most_two_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') <= 2", "task_id": "6_fd755a3d-e72e-4da1-86f3-fa5a95355bdc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at least at three bit positions.", "code": "def differ_at_least_three_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') >= 3", "task_id": "6_6c9191eb-9114-4bf9-9f6b-96bf71e6b918", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two numbers differ at most at three bit positions.", "code": "def differ_at_most_three_bit_pos(a: int, b: int) -> bool:\n    return bin(a ^ b).count('1') <= 3", "task_id": "6_0373b748-7a07-47e6-8809-a9f9fb7cb876", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return smallest_nums", "task_id": "4_55624dbe-3aff-4e33-b82c-97cb96b9bd9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_sum(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return sum(largest_nums)", "task_id": "4_661eaeea-491c-441a-95ec-d5ac3c18ac61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_sum(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return sum(smallest_nums)", "task_id": "4_4c0de59e-3f6f-4e07-9113-d01621577e0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\nfrom functools import reduce\ndef find_largest_product(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return reduce(lambda x, y: x * y, largest_nums)", "task_id": "4_06f97eb9-953f-4b18-83c8-7843847cb2ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\nfrom functools import reduce\ndef find_smallest_product(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return reduce(lambda x, y: x * y, smallest_nums)", "task_id": "4_ec13c611-b73e-4d81-9c87-7cbe7c2da037", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest unique integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_unique(nums, n):\n  unique_nums = list(set(nums))\n  largest_unique_nums = hq.nlargest(n, unique_nums)\n  return largest_unique_nums", "task_id": "4_2ed7fa0b-2dd5-4699-9d98-7569ce1a98b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest unique integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_unique(nums, n):\n  unique_nums = list(set(nums))\n  smallest_unique_nums = hq.nsmallest(n, unique_nums)\n  return smallest_unique_nums", "task_id": "4_6c933d16-96de-4b8d-981f-5f15e37afdf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the indices of the largest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_indices(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  indices = [nums.index(num) for num in largest_nums]\n  return indices", "task_id": "4_ce4f59bd-4f9d-4a85-b5f3-4f161eca07d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the indices of the smallest n integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_indices(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  indices = [nums.index(num) for num in smallest_nums]\n  return indices", "task_id": "4_d6d6487c-53be-4cc8-9b99-973474418b92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest n integers by absolute value from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_absolute(nums, n):\n  largest_abs_nums = hq.nlargest(n, nums, key=abs)\n  return largest_abs_nums", "task_id": "4_127f38f9-47a4-449e-8885-d3a02fbf9c5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that start with a vowel in a string by using regex.", "code": "import re\ndef find_vowels(text):\n  return re.findall(r'\\b[aeiouAEIOU]\\w*\\b', text)", "task_id": "7_ff08e273-b9e5-487c-ba82-92f13bfb02de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one digit in a string by using regex.", "code": "import re\ndef find_digits(text):\n  return re.findall(r'\\b\\w*\\d+\\w*\\b', text)", "task_id": "7_0293d8b5-9dea-4b50-b5af-13aa3090f9bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that start with an uppercase letter in a string by using regex.", "code": "import re\ndef find_uppercase(text):\n  return re.findall(r'\\b[A-Z]\\w*\\b', text)", "task_id": "7_ede951c2-1d01-49fc-bf15-cb279f23d169", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain any special character (non-alphanumeric) in a string by using regex.", "code": "import re\ndef find_special_chars(text):\n  return re.findall(r'\\b\\w*[^\\w\\s]+\\w*\\b', text)", "task_id": "7_782fb173-28d4-47a1-87f1-d3fa38d5266f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words in a string by using regex.", "code": "import re\ndef find_palindromes(text):\n  words = re.findall(r'\\b\\w+\\b', text)\n  return [word for word in words if word == word[::-1]]", "task_id": "7_dff12412-4fb3-4670-95c0-f558d26569bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain double letters in a string by using regex.", "code": "import re\ndef find_double_letters(text):\n  return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "7_55c4b928-0900-4b89-89f3-cd2204dcf53c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that end with the letter 's' in a string by using regex.", "code": "import re\ndef find_ends_with_s(text):\n  return re.findall(r'\\b\\w*s\\b', text)", "task_id": "7_b9651d8d-ff70-4a51-acd5-08a94db99080", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that are exactly 3 letters long in a string by using regex.", "code": "import re\ndef find_three_letters(text):\n  return re.findall(r'\\b\\w{3}\\b', text)", "task_id": "7_30437a67-5fd8-4dd5-80ba-10dbcf04739d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that start with a consonant in a string by using regex.", "code": "import re\ndef find_consonants(text):\n  return re.findall(r'\\b[^aeiouAEIOU\\W]\\w*\\b', text)", "task_id": "7_b777e1b5-8784-44b6-8d98-5d5606a5abc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hyphenated words in a string by using regex.", "code": "import re\ndef find_hyphenated(text):\n  return re.findall(r'\\b\\w+-\\w+\\b', text)", "task_id": "7_4bbf4317-3592-417b-bdfa-873659fc3cf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find cubes of individual elements in a list using lambda function.", "code": "def cube_nums(nums):\n    cube_nums = list(map(lambda x: x ** 3, nums))\n    return cube_nums", "task_id": "8_6b5a1619-e608-498f-ae5c-652f3a8cb451", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double the individual elements in a list using lambda function.", "code": "def double_nums(nums):\n    double_nums = list(map(lambda x: x * 2, nums))\n    return double_nums", "task_id": "8_b0ffb3b4-5f28-4da6-9bfa-57558b4ba8a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to halve the individual elements in a list using lambda function.", "code": "def halve_nums(nums):\n    halve_nums = list(map(lambda x: x / 2, nums))\n    return halve_nums", "task_id": "8_d214e19f-6452-4a47-9af0-68ffb7413ac9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to negate the individual elements in a list using lambda function.", "code": "def negate_nums(nums):\n    negate_nums = list(map(lambda x: -x, nums))\n    return negate_nums", "task_id": "8_e0a5d085-e7b6-438e-97c4-6963fb33d94f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the individual elements in a list by 1 using lambda function.", "code": "def increment_nums(nums):\n    increment_nums = list(map(lambda x: x + 1, nums))\n    return increment_nums", "task_id": "8_040ad881-7014-4f25-8fd4-58a57f6dc87b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to decrement the individual elements in a list by 1 using lambda function.", "code": "def decrement_nums(nums):\n    decrement_nums = list(map(lambda x: x - 1, nums))\n    return decrement_nums", "task_id": "8_0de82b58-af3b-42be-be90-58550be72d5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the square root of individual elements in a list using lambda function.", "code": "def square_root_nums(nums):\n    square_root_nums = list(map(lambda x: x ** 0.5, nums))\n    return square_root_nums", "task_id": "8_96a100f8-0111-435e-a3a0-274cde71a3d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of individual elements in a list using lambda function.", "code": "def absolute_nums(nums):\n    absolute_nums = list(map(lambda x: abs(x), nums))\n    return absolute_nums", "task_id": "8_22970016-558d-41ef-a34d-1e95bb33ff87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the reciprocal of individual elements in a list using lambda function.", "code": "def reciprocal_nums(nums):\n    reciprocal_nums = list(map(lambda x: 1/x, nums))\n    return reciprocal_nums", "task_id": "8_87846d23-833a-46b6-afa2-8bd1bbbedb8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of individual elements in a list using lambda function.", "code": "from math import factorial\n\ndef factorial_nums(nums):\n    factorial_nums = list(map(lambda x: factorial(x), nums))\n    return factorial_nums", "task_id": "8_6f5f0a32-4cd7-40fc-aabf-a1513c8bee8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 4 x n board with 2 x 1 dominoes.", "code": "def count_ways_4xN(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[2] = 2\n    for i in range(4, n + 1, 2):\n        dp[i] = dp[i - 2] * 2 + dp[i - 4]\n    return dp[n]", "task_id": "5_578a9e99-611b-4b47-8380-b798c9f246d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 2 x n board with 2 x 1 dominoes.", "code": "def count_ways_2xN(n):\n    if n % 2 != 0:\n        return 0\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    dp[2] = 1\n    for i in range(4, n + 1, 2):\n        dp[i] = dp[i - 2] + dp[i - 4]\n    return dp[n]", "task_id": "5_a0c65f69-3432-4f32-ac18-e33e19a9a313", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 1 x 1 tiles.", "code": "def count_ways_3xN_with_1x1(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    C = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    C[0] = 1\n    C[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + C[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n        C[i] = C[i - 1]\n    return A[n]", "task_id": "5_689311b5-02b9-4c7b-9313-00b02987a2aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 2 x 2 tiles.", "code": "def count_ways_3xN_with_2x2(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 4] if i >= 4 else 0)\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]", "task_id": "5_4f69497b-dd77-4875-9f72-ccad52641a6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 1 x 2 tiles.", "code": "def count_ways_3xN_with_1x2(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 2] if i >= 2 else 0)\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]", "task_id": "5_6b24d59a-823e-4746-9c4f-07b9297ab819", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 3 x 1 tiles.", "code": "def count_ways_3xN_with_3x1(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 3] if i >= 3 else 0)\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]", "task_id": "5_a759ab1f-c75b-46bf-a1d6-26f92f02acac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 1 x 3 tiles.", "code": "def count_ways_3xN_with_1x3(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 3] if i >= 3 else 0)\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]", "task_id": "5_d246ff6e-e041-4e3b-8900-032f182be52e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 1 x 1 tiles.", "code": "def count_ways_3xN_with_2x1_and_1x1(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    C = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    C[0] = 1\n    C[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + C[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n        C[i] = C[i - 1]\n    return A[n]", "task_id": "5_484e4334-c71b-4da2-9ad4-abb4756cc036", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes, 2 x 2 tiles, and 1 x 1 tiles.", "code": "def count_ways_3xN_with_2x2_and_1x1(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    C = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    C[0] = 1\n    C[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 4] if i >= 4 else 0) + C[i - 1]\n        B[i] = A[i - 1] + B[i - 2]\n        C[i] = C[i - 1]\n    return A[n]", "task_id": "5_ded6fd1f-9c2b-4e08-b59d-173e150efe45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to fill a 3 x n board with 2 x 1 dominoes and 2 x 2 tiles.", "code": "def count_ways_3xN_with_2x1_and_2x2(n):\n    A = [0] * (n + 1)\n    B = [0] * (n + 1)\n    A[0] = 1\n    A[1] = 0\n    B[0] = 0\n    B[1] = 1\n    for i in range(2, n + 1):\n        A[i] = A[i - 2] + 2 * B[i - 1] + (A[i - 4] if i >= 4 else 0)\n        B[i] = A[i - 1] + B[i - 2]\n    return A[n]", "task_id": "5_c625ea65-dadc-4ef5-9157-fbb95ba8c138", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n largest items from a dataset.", "code": "import heapq\ndef largest_nnum(list1, n):\n  largest = heapq.nlargest(n, list1)\n  return largest", "task_id": "10_d8ed2a4b-fcf5-4f25-82ef-7fa9d7634a85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n smallest items from a dataset.", "code": "import heapq\ndef sum_n_smallest(list1, n):\n  smallest = heapq.nsmallest(n, list1)\n  return sum(smallest)", "task_id": "10_969c0e6d-e55a-4c42-8312-a9bfe8538eda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n largest items from a dataset.", "code": "import heapq\ndef sum_n_largest(list1, n):\n  largest = heapq.nlargest(n, list1)\n  return sum(largest)", "task_id": "10_0369ce16-2e0e-4c90-a89f-184193519772", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n smallest unique items from a dataset.", "code": "import heapq\ndef smallest_n_unique(list1, n):\n  unique_list = list(set(list1))\n  smallest = heapq.nsmallest(n, unique_list)\n  return smallest", "task_id": "10_efc97607-50c3-479f-9220-14dcb8f5da50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n largest unique items from a dataset.", "code": "import heapq\ndef largest_n_unique(list1, n):\n  unique_list = list(set(list1))\n  largest = heapq.nlargest(n, unique_list)\n  return largest", "task_id": "10_c56d6a97-d0fc-4f8e-9ebf-a725fea2599b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the indices of the n smallest items from a dataset.", "code": "import heapq\ndef smallest_n_indices(list1, n):\n  smallest = heapq.nsmallest(n, enumerate(list1), key=lambda x: x[1])\n  return [i[0] for i in smallest]", "task_id": "10_685eca7c-0bd0-4b49-b82b-153f0af9be2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the indices of the n largest items from a dataset.", "code": "import heapq\ndef largest_n_indices(list1, n):\n  largest = heapq.nlargest(n, enumerate(list1), key=lambda x: x[1])\n  return [i[0] for i in largest]", "task_id": "10_6eb0e325-86d1-41a5-8917-857c3514133a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n smallest items by absolute value from a dataset.", "code": "import heapq\ndef smallest_n_abs(list1, n):\n  smallest = heapq.nsmallest(n, list1, key=abs)\n  return smallest", "task_id": "10_fdcbcb1c-d395-47c3-a5e1-bc5c457c7bf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n largest items by absolute value from a dataset.", "code": "import heapq\ndef largest_n_abs(list1, n):\n  largest = heapq.nlargest(n, list1, key=abs)\n  return largest", "task_id": "10_be8d65e5-8fdc-43ea-adc8-2d4c2a66b6c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n smallest even items from a dataset.", "code": "import heapq\ndef smallest_n_even(list1, n):\n  even_list = [x for x in list1 if x % 2 == 0]\n  smallest = heapq.nsmallest(n, even_list)\n  return smallest", "task_id": "10_2d68db98-0c42-48cb-bc1b-5aa3b1daaace", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string starts with a given character after rotation.", "code": "def find_Rotations_with_char(str: str, char: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring[0] == char:\n            return i\n    return -1", "task_id": "9_d1a98ccb-ee81-4b4a-bbd0-b1e8fa9ef230", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string ends with a given suffix after rotation.", "code": "def find_Rotations_with_suffix(str: str, suffix: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring.endswith(suffix):\n            return i\n    return -1", "task_id": "9_e4dbcdb8-143c-4bc2-a3c2-c3957843034c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string starts with a given prefix after rotation.", "code": "def find_Rotations_with_prefix(str: str, prefix: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring.startswith(prefix):\n            return i\n    return -1", "task_id": "9_1defc63f-c848-4cd3-b34b-1b57c67ae04b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the number of rotations is within a given limit.", "code": "def find_Rotations_within_limit(str: str, limit: int) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, min(n + 1, limit + 1)):\n        substring = tmp[i: i + n]\n        if str == substring:\n            return i\n    return -1", "task_id": "9_3c917056-68fc-4224-a32f-56ea2600b479", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string contains a given substring after rotation.", "code": "def find_Rotations_with_substring(str: str, sub: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and sub in substring:\n            return i\n    return -1", "task_id": "9_96bf23a5-f09c-4281-867c-19f38a39eb3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string does not contain a given character after rotation.", "code": "def find_Rotations_with_no_char(str: str, char: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and char not in substring:\n            return i\n    return -1", "task_id": "9_bda77e78-cbc0-48aa-8da9-fbf184d7889c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string has a given length after rotation.", "code": "def find_Rotations_with_length(str: str, length: int) -> int:\n    if len(str) != length:\n        return -1\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring:\n            return i\n    return -1", "task_id": "9_752c3f14-cd1d-4c5d-94c8-c5afab21f314", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string is a palindrome after rotation.", "code": "def find_Rotations_with_palindrome(str: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring == substring[::-1]:\n            return i\n    return -1", "task_id": "9_ea57bf7f-6332-4d23-9143-3bc4a6b16344", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string starts with a vowel after rotation.", "code": "def find_Rotations_with_vowel_start(str: str) -> int:\n    vowels = 'aeiouAEIOU'\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring[0] in vowels:\n            return i\n    return -1", "task_id": "9_7d02b4a4-aa82-4b50-9347-ed91863def1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string ends with a consonant after rotation.", "code": "def find_Rotations_with_consonant_end(str: str) -> int:\n    vowels = 'aeiouAEIOU'\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and substring[-1] not in vowels:\n            return i\n    return -1", "task_id": "9_21dd42fe-d368-43e2-beec-ebf244ca4cdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to get the same string, but only if the string has all unique characters after rotation.", "code": "def find_Rotations_with_unique_chars(str: str) -> int:\n    tmp = str + str\n    n = len(str)\n    for i in range(1, n + 1):\n        substring = tmp[i: i + n]\n        if str == substring and len(set(substring)) == len(substring):\n            return i\n    return -1", "task_id": "9_789e7557-21da-4e2d-aaef-7ec141d426d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down.", "code": "def min_cost_path(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_5790c430-096e-4394-b4d3-bd1dfbddc2b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down.", "code": "def max_cost_path(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = max(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_b7ab8d5e-8597-4d8c-bbd3-419b3d3010c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can move right, down, or diagonally.", "code": "def min_cost_path_diagonal(cost, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n]", "task_id": "1_b8b27f47-4b96-4833-8cd9-f6d89cebc9b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells are marked as obstacles and cannot be traversed.", "code": "def min_cost_path_with_obstacles(cost, m, n, obstacles):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    for obs in obstacles:\n        tc[obs[0]][obs[1]] = float('inf')\n    tc[0][0] = cost[0][0] if (0, 0) not in obstacles else float('inf')\n    for i in range(1, m+1):\n        if (i, 0) not in obstacles:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if (0, j) not in obstacles:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if (i, j) not in obstacles:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_9a9db470-9c14-44fc-8c8e-edc954410425", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move incurs an additional penalty cost.", "code": "def min_cost_path_with_penalty(cost, m, n, penalty):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] + penalty\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] + penalty\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j] + penalty\n    return tc[m][n]", "task_id": "1_afcd5cc8-cc65-46f3-a057-3e5110075c09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells are restricted and cannot be traversed.", "code": "def min_cost_path_with_restrictions(cost, m, n, restrictions):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    for res in restrictions:\n        tc[res[0]][res[1]] = float('inf')\n    tc[0][0] = cost[0][0] if (0, 0) not in restrictions else float('inf')\n    for i in range(1, m+1):\n        if (i, 0) not in restrictions:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if (0, j) not in restrictions:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if (i, j) not in restrictions:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_013b9ee7-3383-476c-bf21-2724a612fa3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells have bonus points that reduce the cost.", "code": "def min_cost_path_with_bonus(cost, m, n, bonuses):\n    R = len(cost)\n    C = len(cost[0])\n    bonus_dict = {(x, y): b for x, y, b in bonuses}\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0] - bonus_dict.get((0, 0), 0)\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] - bonus_dict.get((i, 0), 0)\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] - bonus_dict.get((0, j), 0)\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j] - bonus_dict.get((i, j), 0)\n    return tc[m][n]", "task_id": "1_8b219187-fdfd-4fb9-9178-3d7bfb39090b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move consumes energy and you have a limited amount of energy.", "code": "def min_cost_path_with_energy(cost, m, n, energy):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        if energy >= i:\n            tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        if energy >= j:\n            tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if energy >= i + j:\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    return tc[m][n] if tc[m][n] != float('inf') else -1", "task_id": "1_ebac4857-92c7-410e-8c21-e1f3a17425a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Each move has a variable cost that changes based on the current position.", "code": "def min_cost_path_with_variable_cost(cost, m, n, variable_cost):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[0 for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0] + variable_cost * i\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j] + variable_cost * j\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j] + variable_cost * i, tc[i][j-1] + variable_cost * j) + cost[i][j]\n    return tc[m][n]", "task_id": "1_28d0c4d5-d179-44f9-ade1-cef4dca5f721", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from any of the given starting points in starts for the given cost matrix cost[][], where you can only move right or down.", "code": "def min_cost_path_with_multiple_starts(cost, starts, m, n):\n    R = len(cost)\n    C = len(cost[0])\n    min_cost = float('inf')\n    for start in starts:\n        tc = [[float('inf') for x in range(C)] for x in range(R)]\n        tc[start[0]][start[1]] = cost[start[0]][start[1]]\n        for i in range(start[0], m+1):\n            if i > start[0]:\n                tc[i][start[1]] = tc[i-1][start[1]] + cost[i][start[1]]\n        for j in range(start[1], n+1):\n            if j > start[1]:\n                tc[start[0]][j] = tc[start[0]][j-1] + cost[start[0]][j]\n        for i in range(start[0]+1, m+1):\n            for j in range(start[1]+1, n+1):\n                tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n        min_cost = min(min_cost, tc[m][n])\n    return min_cost", "task_id": "1_5667032b-438e-4b2f-baca-d152fb08b4a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][], where you can only move right or down. Some cells have teleport points that allow you to jump to another cell.", "code": "def min_cost_path_with_teleport(cost, m, n, teleports):\n    R = len(cost)\n    C = len(cost[0])\n    tc = [[float('inf') for x in range(C)] for x in range(R)]\n    tc[0][0] = cost[0][0]\n    for i in range(1, m+1):\n        tc[i][0] = tc[i-1][0] + cost[i][0]\n    for j in range(1, n+1):\n        tc[0][j] = tc[0][j-1] + cost[0][j]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            tc[i][j] = min(tc[i-1][j], tc[i][j-1]) + cost[i][j]\n    for t in teleports:\n        tc[t[2]][t[3]] = min(tc[t[2]][t[3]], tc[t[0]][t[1]])\n    return tc[m][n]", "task_id": "1_0638d4f5-8eba-4eab-9cf8-8cbd3bd61159", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first and last occurrence of a given character from the string.", "code": "def remove_first_last_occurrence(s: str, ch: str) -> str:\n    first_index = s.find(ch)\n    last_index = s.rfind(ch)\n    if first_index != -1:\n        s = s[:first_index] + s[first_index+1:]\n    if last_index != -1:\n        s = s[:last_index] + s[last_index+1:]\n    return s", "task_id": "11_c49cb6d4-f0d6-495c-b392-8174bdfffd5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given character from the string.", "code": "def remove_all_occurrences(s: str, ch: str) -> str:\n    return s.replace(ch, '')", "task_id": "11_20aa06ad-91a6-4df4-9548-b81612cc53c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first occurrence of a given character from the string.", "code": "def remove_first_occurrence(s: str, ch: str) -> str:\n    index = s.find(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n    return s", "task_id": "11_cc78c2a2-6a82-4ba6-ac3e-27542eac3d5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the last occurrence of a given character from the string.", "code": "def remove_last_occurrence(s: str, ch: str) -> str:\n    index = s.rfind(ch)\n    if index != -1:\n        s = s[:index] + s[index+1:]\n    return s", "task_id": "11_c9b21c9a-8b29-4a16-b67e-0ce566f0f43d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first n occurrences of a given character from the string.", "code": "def remove_first_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(result)", "task_id": "11_f58418e4-0949-4759-89fd-797fc5425832", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the last n occurrences of a given character from the string.", "code": "def remove_last_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in reversed(s):\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(reversed(result))", "task_id": "11_2d1f2caf-8be4-441d-b6bf-15e2b722a724", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove occurrences of a given character from the string if they are at an even index.", "code": "def remove_even_index_occurrences(s: str, ch: str) -> str:\n    result = []\n    for i, c in enumerate(s):\n        if i % 2 == 0 and c == ch:\n            continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_b7ccac81-1ab6-42bb-a4df-cb7071a9fa42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove occurrences of a given character from the string if they are at an odd index.", "code": "def remove_odd_index_occurrences(s: str, ch: str) -> str:\n    result = []\n    for i, c in enumerate(s):\n        if i % 2 != 0 and c == ch:\n            continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_973e4243-83d0-49dc-b823-e3b962e000f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first and last n occurrences of a given character from the string.", "code": "def remove_first_last_n_occurrences(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    s = ''.join(result)\n    count = 0\n    result = []\n    for c in reversed(s):\n        if c == ch and count < n:\n            count += 1\n        else:\n            result.append(c)\n    return ''.join(reversed(result))", "task_id": "11_14ba56ef-4564-40b0-8514-cd741d9276ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the nth occurrence of a given character from the string.", "code": "def remove_nth_occurrence(s: str, ch: str, n: int) -> str:\n    count = 0\n    result = []\n    for c in s:\n        if c == ch:\n            count += 1\n            if count == n:\n                continue\n        result.append(c)\n    return ''.join(result)", "task_id": "11_b06b7865-44a0-4e8b-b3de-fd244f580a65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the maximum element in each row.", "code": "def sort_matrix_by_max_element(M):\n    result = sorted(M, key=max)\n    return result", "task_id": "12_4eef2232-366e-4c56-98d1-3ba110e50df6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the minimum element in each row.", "code": "def sort_matrix_by_min_element(M):\n    result = sorted(M, key=min)\n    return result", "task_id": "12_c92de936-02e9-49d9-b188-3bb3eff162ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the first element in each row.", "code": "def sort_matrix_by_first_element(M):\n    result = sorted(M, key=lambda x: x[0])\n    return result", "task_id": "12_d8c36add-afad-4ec0-8d47-cb0b748c6f72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the last element in each row.", "code": "def sort_matrix_by_last_element(M):\n    result = sorted(M, key=lambda x: x[-1])\n    return result", "task_id": "12_9c319bbb-5c7a-46a6-b84b-01ae6fda85ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the length of each row.", "code": "def sort_matrix_by_row_length(M):\n    result = sorted(M, key=len)\n    return result", "task_id": "12_9bdf2b14-b165-4b8c-a156-777d77f5d110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of even numbers in each row.", "code": "def sort_matrix_by_even_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if i % 2 == 0))\n    return result", "task_id": "12_b7cbc3ba-6ccf-40ec-926a-7e5de26a2a65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of odd numbers in each row.", "code": "def sort_matrix_by_odd_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if i % 2 != 0))\n    return result", "task_id": "12_d44cdaae-8a5f-4ede-be76-07a24eb9fcda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of prime numbers in each row.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sort_matrix_by_prime_count(M):\n    result = sorted(M, key=lambda x: sum(1 for i in x if is_prime(i)))\n    return result", "task_id": "12_ab80222d-5f88-449e-a4ca-6df493154bef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the count of unique numbers in each row.", "code": "def sort_matrix_by_unique_count(M):\n    result = sorted(M, key=lambda x: len(set(x)))\n    return result", "task_id": "12_00e596c7-c5d0-4203-a12a-419790221c70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given matrix in ascending order according to the sum of the squares of the elements in each row.", "code": "def sort_matrix_by_sum_of_squares(M):\n    result = sorted(M, key=lambda x: sum(i**2 for i in x))\n    return result", "task_id": "12_59ef7081-a109-4d0d-b094-0becff6788f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "13_7b834ea7-4bcd-406d-aa8c-8fb273a2f2de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in a list of integers.", "code": "def find_max(nums: list) -> int:\n    return max(nums)", "task_id": "13_bf3f6a1e-b406-4c18-94e7-3ebf5b69c141", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "13_0c4439ff-679a-4ef8-b541-4c50d777d601", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "13_43130b16-ed24-452d-b29d-f7e673b62849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of a list of integers.", "code": "def sum_of_squares(nums: list) -> int:\n    return sum(x**2 for x in nums)", "task_id": "13_b52b47ca-a7eb-46b7-b295-a2a6eeece2dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a list of integers.", "code": "def find_unique(nums: list) -> list:\n    return list(set(nums))", "task_id": "13_a064441e-797d-4216-a5bc-219d430dd43d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists into one.", "code": "def merge_lists(list1: list, list2: list) -> list:\n    return list1 + list2", "task_id": "13_fa78c93f-9a53-4f9c-99a2-53a7588a1456", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "13_6ef2e889-5c72-43de-9073-ebbaedd97fe4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number in a list of integers.", "code": "def find_min(nums: list) -> int:\n    return min(nums)", "task_id": "13_7f43b21f-dd72-4ef5-9fd7-1e2c32e8bef6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "13_c9a9aa3a-8301-4b7e-b2a2-55ee009f9417", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at uppercase letters.", "code": "import re\ndef split_upperstring(text):\n    return re.findall('[A-Z][^A-Z]*', text)", "task_id": "15_b7f659a8-94db-4832-9808-ec3edc4e82aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at digits.", "code": "import re\ndef split_digits(text):\n    return re.findall('\\d[^\\d]*', text)", "task_id": "15_29edefe5-628e-40a4-a0dd-1f85406738d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at vowels.", "code": "import re\ndef split_vowels(text):\n    return re.findall('[aeiouAEIOU][^aeiouAEIOU]*', text)", "task_id": "15_37d47c41-22ad-4d04-89be-11f4b71a799e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at consonants.", "code": "import re\ndef split_consonants(text):\n    return re.findall('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ][^bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]*', text)", "task_id": "15_743e4d4c-a961-4cea-ba75-eff5a99f1715", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at special characters.", "code": "import re\ndef split_specialchars(text):\n    return re.findall('[^a-zA-Z0-9][a-zA-Z0-9]*', text)", "task_id": "15_f07098a6-c830-4f10-a73a-80e63eefd3ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at whitespace characters.", "code": "import re\ndef split_whitespace(text):\n    return re.findall('\\s[^\\s]*', text)", "task_id": "15_ad036c48-cd43-43ca-be16-fc729aead6b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at punctuation marks.", "code": "import re\ndef split_punctuation(text):\n    return re.findall('[.,!?;:][^.,!?;:]*', text)", "task_id": "15_da39f670-80ad-46d3-8c74-1f29efdc1d67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at numbers.", "code": "import re\ndef split_numbers(text):\n    return re.findall('[0-9][^0-9]*', text)", "task_id": "15_befead53-6a18-4ffa-bdd9-2c2b2b7dc4e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at uppercase vowels.", "code": "import re\ndef split_uppercase_vowels(text):\n    return re.findall('[AEIOU][^AEIOU]*', text)", "task_id": "15_405750b7-8a20-4a61-8f5d-a9a86d6c9e88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at lowercase consonants.", "code": "import re\ndef split_lowercase_consonants(text):\n    return re.findall('[bcdfghjklmnpqrstvwxyz][^bcdfghjklmnpqrstvwxyz]*', text)", "task_id": "15_21e0d948-7b41-4d95-91bf-b8d9257e158d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a triangular prism.", "code": "def find_surface_area(l, b, h):\n    base_area = 0.5 * b * h\n    side_area1 = l * b\n    side_area2 = l * h\n    return 2 * base_area + side_area1 + side_area2", "task_id": "14_7b593482-3341-4c44-a478-45b5acd674ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cylinder.", "code": "import math\n\ndef find_volume_cylinder(r, h):\n    return math.pi * r**2 * h", "task_id": "14_31b8365b-bda6-4d68-a29d-c89772c56285", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cylinder.", "code": "import math\n\ndef find_surface_area_cylinder(r, h):\n    return 2 * math.pi * r * (r + h)", "task_id": "14_dbb451ad-4aa5-49e0-a58d-57d0dda91b14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cone.", "code": "import math\n\ndef find_volume_cone(r, h):\n    return (1/3) * math.pi * r**2 * h", "task_id": "14_1a811c94-a606-4f11-a34c-cb9d890984d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cone.", "code": "import math\n\ndef find_surface_area_cone(r, h):\n    slant_height = math.sqrt(r**2 + h**2)\n    return math.pi * r * (r + slant_height)", "task_id": "14_e118a44f-8130-4e96-88cc-798f1efb978e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a sphere.", "code": "import math\n\ndef find_volume_sphere(r):\n    return (4/3) * math.pi * r**3", "task_id": "14_3e891eb2-9edf-485b-8195-4ac961580072", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a sphere.", "code": "import math\n\ndef find_surface_area_sphere(r):\n    return 4 * math.pi * r**2", "task_id": "14_2421ccde-202c-4bd9-a553-19537d934c0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a rectangular prism.", "code": "def find_volume_rectangular_prism(l, w, h):\n    return l * w * h", "task_id": "14_7a0b0aec-ec52-4fd4-bb3b-997a1b41ca61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a rectangular prism.", "code": "def find_surface_area_rectangular_prism(l, w, h):\n    return 2 * (l * w + l * h + w * h)", "task_id": "14_f83b2984-2670-425b-8e00-33d0bc3ab30c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a rectangular pyramid.", "code": "def find_volume_pyramid(l, w, h):\n    return (1/3) * l * w * h", "task_id": "14_adcc21fe-d952-40ec-99c4-7174801f7bde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of uppercase letters joined with a hyphen.", "code": "import re\n\ndef find_uppercase_sequence(text):\n    patterns = '^[A-Z]+-[A-Z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_0662eafa-a094-46c9-8402-111d80106afe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of digits joined with a colon.", "code": "import re\n\ndef find_digits_sequence(text):\n    patterns = '^[0-9]+:[0-9]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_3073266b-ac57-4197-bb8d-a2f10e72dea9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of alphanumeric characters joined with a dollar sign.", "code": "import re\n\ndef find_alphanumeric_sequence(text):\n    patterns = '^[a-zA-Z0-9]+\\$[a-zA-Z0-9]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_1bfbff72-10c6-43e2-baf4-80cab0324807", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of vowels joined with an asterisk.", "code": "import re\n\ndef find_vowel_sequence(text):\n    patterns = '^[aeiou]+\\*[aeiou]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_144d2dcb-9a7d-41fb-a124-fa71131a9ebe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of consonants joined with a plus sign.", "code": "import re\n\ndef find_consonant_sequence(text):\n    patterns = '^[bcdfghjklmnpqrstvwxyz]+\\+[bcdfghjklmnpqrstvwxyz]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_c325751f-0c04-4ecb-8631-7543dfccc32d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of hexadecimal digits joined with a comma.", "code": "import re\n\ndef find_hex_sequence(text):\n    patterns = '^[0-9a-fA-F]+,[0-9a-fA-F]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_86c46fb3-ff42-417a-a6eb-ed249425358c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of words joined with a space.", "code": "import re\n\ndef find_word_sequence(text):\n    patterns = '^[a-zA-Z]+\\s[a-zA-Z]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_205daa3a-a825-44f8-850c-c31675f572f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of email addresses joined with a semicolon.", "code": "import re\n\ndef find_email_sequence(text):\n    patterns = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4};[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_e24d5b8a-fd4b-4cca-98f0-4d26187355c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of dates in the format YYYY-MM-DD joined with a pipe.", "code": "import re\n\ndef find_date_sequence(text):\n    patterns = '^[0-9]{4}-[0-9]{2}-[0-9]{2}\\|[0-9]{4}-[0-9]{2}-[0-9]{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_1484be15-01d8-4e31-924d-d0d28eb1980c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of times in the format HH:MM:SS joined with an ampersand.", "code": "import re\n\ndef find_time_sequence(text):\n    patterns = '^[0-9]{2}:[0-9]{2}:[0-9]{2}&[0-9]{2}:[0-9]{2}:[0-9]{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "16_e4643564-69ba-4fe1-81c4-3f5df1071d43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "17_82eb3188-e30f-4778-baa8-7518e1f4e625", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given its three sides.", "code": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "17_d656b492-b2a9-49a6-8302-910a2c26ed61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circle_circumference(radius: int) -> float:\n    return 2 * math.pi * radius", "task_id": "17_42ca98c1-3ef9-4e74-8127-96ead59eae73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a parallelogram given its base and side lengths.", "code": "def parallelogram_perimeter(base: int, side: int) -> int:\n    return 2 * (base + side)", "task_id": "17_563bf0dc-e2f8-4519-840c-ea077fdffcc5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rhombus given the length of one of its sides.", "code": "def rhombus_perimeter(side: int) -> int:\n    return 4 * side", "task_id": "17_ef772c36-39e4-4d46-a202-86a79f6097cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a trapezoid given the lengths of its four sides.", "code": "def trapezoid_perimeter(a: int, b: int, c: int, d: int) -> int:\n    return a + b + c + d", "task_id": "17_83873115-f370-4c48-b8b7-29d858176691", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular pentagon given the length of one of its sides.", "code": "def pentagon_perimeter(side: int) -> int:\n    return 5 * side", "task_id": "17_ab5a364b-f4f0-496e-94a1-deddc926dc9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular hexagon given the length of one of its sides.", "code": "def hexagon_perimeter(side: int) -> int:\n    return 6 * side", "task_id": "17_791c2c71-6cdf-4a00-9fa5-64bc19b20b5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular octagon given the length of one of its sides.", "code": "def octagon_perimeter(side: int) -> int:\n    return 8 * side", "task_id": "17_39aee939-9d9c-41c0-8ced-60814f7ba57f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of an equilateral triangle given the length of one of its sides.", "code": "def equilateral_triangle_perimeter(side: int) -> int:\n    return 3 * side", "task_id": "17_a8ec3ca2-cf99-4a74-a402-6d84783accbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "18_16e06315-f957-4e2b-a775-fd4f714507ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "18_bb12f12e-04d4-450a-8641-cf6fb8b93c9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "18_b72ad067-a50c-4258-98c6-272224b64490", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "18_cf678c9e-18c1-44cf-aa06-1b4603ab5de3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a given string with underscores.", "code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "18_e2e8606a-fd57-4dd4-b9a1-9cd530c3be0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "18_d1c0e1db-b32b-4708-99ea-76aed99c81a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "18_e63e1d82-d8de-48ff-ae10-cc1c23babda0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "18_7ce331f7-71ac-4c25-bbe6-a33a5e21d2c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "18_8e1d3dfa-ed74-41b4-9e15-70c1b83e7719", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alpha(s: str) -> str:\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "18_45b83e17-dee5-4b84-952c-d22807af8d2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first duplicate element in a given array of integers. If no duplicate is found, return -1.", "code": "def find_first_duplicate(nums: list[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "19_ecf5a0fc-4cf4-4296-b9b6-4f7a96f81add", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from a given array of integers.", "code": "def unique_elements(nums: list[int]) -> list[int]:\n    return list(set(nums))", "task_id": "19_c75e1da5-4b62-4712-b1f9-008f05377514", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of duplicate elements in a given array of integers.", "code": "def count_duplicates(nums: list[int]) -> int:\n    from collections import Counter\n    count = Counter(nums)\n    return sum(1 for v in count.values() if v > 1)", "task_id": "19_932a6476-b7a7-49f7-b725-92877d505c63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate elements from a given array of integers, keeping only the first occurrence.", "code": "def remove_duplicates(nums: list[int]) -> list[int]:\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "task_id": "19_d635e9b4-7f09-4725-b433-afb6ad6dcdc5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in a given array of integers are unique.", "code": "def has_all_unique_elements(nums: list[int]) -> bool:\n    return len(nums) == len(set(nums))", "task_id": "19_18644168-0506-4055-9baa-8e7b9453118a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in a given array of integers from 1 to n.", "code": "def find_missing_number(nums: list[int], n: int) -> int:\n    return n * (n + 1) // 2 - sum(nums)", "task_id": "19_70191501-d8bc-4e4a-b107-76427b1c5ebd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in a given array of integers where each integer is between 1 and n-1.", "code": "def find_duplicate_number(nums: list[int]) -> int:\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "19_b7f526d1-026c-404b-8728-cc2473bed756", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two given arrays of integers.", "code": "def find_intersection(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) & set(arr2))", "task_id": "19_92a02305-9192-47e4-89be-652f427388d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the union of two given arrays of integers.", "code": "def find_union(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) | set(arr2))", "task_id": "19_cfbeb091-39f5-43eb-a6c4-349ef3a7b9c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of two given arrays of integers (elements in arr1 but not in arr2).", "code": "def find_difference(arr1: list[int], arr2: list[int]) -> list[int]:\n    return list(set(arr1) - set(arr2))", "task_id": "19_12a3d890-f968-4174-870c-003c69d239e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "20_f966ba0b-2ef3-4439-a1a1-28d4033e039c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a Fibonacci number or not.", "code": "def is_fibonacci(n: int) -> bool:\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "20_84e486a1-9625-43c1-8687-a14d01ac29a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "20_f8718eed-5e39-467e-baee-2affcb354c7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a perfect square or not.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "20_9539e71a-0642-4d71-8644-77bf54add4ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is an Armstrong number or not.", "code": "def is_armstrong(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit)**num_len for digit in num_str)", "task_id": "20_f2003d0b-9569-4bd0-abf9-9dd87497c817", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a Harshad number or not.", "code": "def is_harshad(n: int) -> bool:\n    return n % sum(int(digit) for digit in str(n)) == 0", "task_id": "20_d787a888-37c4-4c49-b9d8-cb170a05af4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a perfect number or not.", "code": "def is_perfect_number(n: int) -> bool:\n    return n == sum(i for i in range(1, n) if n % i == 0)", "task_id": "20_eef31dcf-73e8-4f72-9216-f863c6e21fc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is a happy number or not.", "code": "def is_happy_number(n: int) -> bool:\n    def get_next(number):\n        return sum(int(char) ** 2 for char in str(number))\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_next(n)\n    return n == 1", "task_id": "20_3c9cf6d8-cb04-4944-a571-f973521321f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is even or not.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "20_e5c5720e-4862-44b8-8233-b02f38796916", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given number is odd or not.", "code": "def is_odd(n: int) -> bool:\n    return n % 2 != 0", "task_id": "20_c4239c1b-3d71-4bf4-959c-cf73c6cc3917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-duplicate element in a given array of integers.", "code": "def find_first_non_duplicate(nums):\n    num_count = {}\n    for num in nums:\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n    for num in nums:\n        if num_count[num] == 1:\n            return num\n    return -1", "task_id": "22_88649413-2c56-4af9-8a5c-a38bb23ffd80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first repeated character in a given string.", "code": "def find_first_repeated_char(s):\n    char_set = set()\n    for char in s:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return ''", "task_id": "22_31eeaebd-dbd6-4836-96f2-6e8a94eea8ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first unique character in a given string.", "code": "def find_first_unique_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "22_2714f605-6a90-49a6-ba55-8675ce00b6a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first duplicate element in a given array of integers.", "code": "def find_first_duplicate_index(nums):\n    num_set = set()\n    for i, num in enumerate(nums):\n        if num in num_set:\n            return i\n        num_set.add(num)\n    return -1", "task_id": "22_377e16c3-379b-442f-a2ce-01702cb32014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first repeated word in a given string.", "code": "def find_first_repeated_word(s):\n    word_set = set()\n    words = s.split()\n    for word in words:\n        if word in word_set:\n            return word\n        word_set.add(word)\n    return ''", "task_id": "22_a2edeb95-b4bf-4bbe-95e6-f1e98177eb67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeated word in a given string.", "code": "def find_first_non_repeated_word(s):\n    word_count = {}\n    words = s.split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    for word in words:\n        if word_count[word] == 1:\n            return word\n    return ''", "task_id": "22_7c60da90-e539-4842-9a90-74e426527ac2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_pair(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return (num, num)\n        num_set.add(num)\n    return (-1, -1)", "task_id": "22_05c973b4-2f0e-4975-b097-493cd2f0fa2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_sum(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num + num\n        num_set.add(num)\n    return -1", "task_id": "22_6a9157a3-35ba-4878-844f-b8ba7f7d4530", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first pair of duplicate elements in a given array of integers.", "code": "def find_first_duplicate_product(nums):\n    num_set = set()\n    for num in nums:\n        if num in num_set:\n            return num * num\n        num_set.add(num)\n    return -1", "task_id": "22_38726e03-c11b-4f0c-93e8-1899089f1237", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first duplicate element within k distance in a given array of integers.", "code": "def find_first_duplicate_within_k(nums, k):\n    num_dict = {}\n    for i, num in enumerate(nums):\n        if num in num_dict and i - num_dict[num] <= k:\n            return num\n        num_dict[num] = i\n    return -1", "task_id": "22_b68a7173-c4da-4fa4-9aa6-56d17c77d239", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of squares of elements of list in a list of lists.", "code": "def find_max_sum_of_squares(lst):\n    maxi = -100000\n    for x in lst:\n        sum_squares = sum(y**2 for y in x)\n        maxi = max(sum_squares, maxi)\n    return maxi", "task_id": "23_b7693645-b9ee-433d-a466-6378bef7c7ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of elements of list in a list of lists.", "code": "def find_min_sum(lst):\n    mini = 100000\n    for x in lst:\n        sum_elements = sum(x)\n        mini = min(sum_elements, mini)\n    return mini", "task_id": "23_1f4c64c8-cd82-44bb-8d39-f2c9641bbae6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of elements of list in a list of lists.", "code": "def find_max_product(lst):\n    maxi = -100000\n    for x in lst:\n        product = 1\n        for y in x:\n            product *= y\n        maxi = max(product, maxi)\n    return maxi", "task_id": "23_544905b5-01a6-48b2-86f9-c552fb4c323f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of absolute values of elements of list in a list of lists.", "code": "def find_max_sum_of_absolute_values(lst):\n    maxi = -100000\n    for x in lst:\n        sum_abs = sum(abs(y) for y in x)\n        maxi = max(sum_abs, maxi)\n    return maxi", "task_id": "23_f0eaed5e-f7fd-46b2-a72d-4cf2c6a7479e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of even elements of list in a list of lists.", "code": "def find_max_sum_of_even_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_even = sum(y for y in x if y % 2 == 0)\n        maxi = max(sum_even, maxi)\n    return maxi", "task_id": "23_ccb053e9-8e26-428c-8cdd-37ab2909a886", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of odd elements of list in a list of lists.", "code": "def find_max_sum_of_odd_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_odd = sum(y for y in x if y % 2 != 0)\n        maxi = max(sum_odd, maxi)\n    return maxi", "task_id": "23_e2812c54-da6f-4da4-ba66-80ccce38be90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of positive elements of list in a list of lists.", "code": "def find_max_sum_of_positive_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_positive = sum(y for y in x if y > 0)\n        maxi = max(sum_positive, maxi)\n    return maxi", "task_id": "23_d4390738-4e6b-467e-b152-caa7aa57bda4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of negative elements of list in a list of lists.", "code": "def find_max_sum_of_negative_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_negative = sum(y for y in x if y < 0)\n        maxi = max(sum_negative, maxi)\n    return maxi", "task_id": "23_54622e29-4011-420a-a0ad-13861e4c65da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of prime elements of list in a list of lists.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_max_sum_of_prime_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_prime = sum(y for y in x if is_prime(y))\n        maxi = max(sum_prime, maxi)\n    return maxi", "task_id": "23_5ea6c7a1-1993-4b4e-b91d-51f45fa50a9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of unique elements of list in a list of lists.", "code": "def find_max_sum_of_unique_elements(lst):\n    maxi = -100000\n    for x in lst:\n        sum_unique = sum(set(x))\n        maxi = max(sum_unique, maxi)\n    return maxi", "task_id": "23_a2d79d2a-ea5d-456d-8594-fc82a1748360", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first m multiples of n.", "code": "def sum_of_multiples(m, n):\n    multiples = list(range(n, (m + 1) * n, n))\n    return sum(multiples)", "task_id": "21_2b56e2b5-93ee-49a3-863e-95a041645e04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m even multiples of n.", "code": "def even_multiples(m, n):\n    multiples = [i for i in range(n, (m * 2 + 1) * n, n) if i % 2 == 0]\n    return multiples[:m]", "task_id": "21_542320c6-a0f3-4486-8548-599eea9e8bd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m odd multiples of n.", "code": "def odd_multiples(m, n):\n    multiples = [i for i in range(n, (m * 2 + 1) * n, n) if i % 2 != 0]\n    return multiples[:m]", "task_id": "21_d19173cd-d630-4f17-8847-011778ecffd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples of n within a given range (start, end).", "code": "def multiples_within_range(m, n, start, end):\n    multiples = [i for i in range(start, end + 1) if i % n == 0]\n    return multiples[:m]", "task_id": "21_110e5770-f9ad-4314-937d-848506f207aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first m multiples of n within a given range (start, end).", "code": "def multiples_sum_within_range(m, n, start, end):\n    multiples = [i for i in range(start, end + 1) if i % n == 0]\n    return sum(multiples[:m])", "task_id": "21_66f59d44-71be-4293-9043-621906b2d1bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples that are common to both n1 and n2.", "code": "def multiples_of_two_numbers(m, n1, n2):\n    lcm = n1 * n2 // math.gcd(n1, n2)\n    multiples = list(range(lcm, (m + 1) * lcm, lcm))\n    return multiples[:m]", "task_id": "21_dd13f603-90a3-4445-a7e4-259ab197e612", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples that are common to n1, n2, and n3.", "code": "def multiples_of_three_numbers(m, n1, n2, n3):\n    lcm = n1 * n2 * n3 // math.gcd(n1, math.gcd(n2, n3))\n    multiples = list(range(lcm, (m + 1) * lcm, lcm))\n    return multiples[:m]", "task_id": "21_83d94db1-e1b4-4bdb-a831-f2548950b0cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find multiples of n such that their sum does not exceed a given limit.", "code": "def multiples_with_sum_limit(n, limit):\n    multiples = []\n    current_sum = 0\n    i = 1\n    while current_sum + n * i <= limit:\n        multiples.append(n * i)\n        current_sum += n * i\n        i += 1\n    return multiples", "task_id": "21_3334a042-ed7d-4cd6-8926-6c4420109d5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find multiples of n such that their product does not exceed a given limit.", "code": "def multiples_with_product_limit(n, limit):\n    multiples = []\n    current_product = 1\n    i = 1\n    while current_product * n * i <= limit:\n        multiples.append(n * i)\n        current_product *= n * i\n        i += 1\n    return multiples", "task_id": "21_5f661b34-fc78-4b08-9448-a2249b9e6482", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first m multiples of n whose digits sum up to a given value.", "code": "def multiples_with_digit_sum(m, n, digit_sum):\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n    multiples = []\n    i = 1\n    while len(multiples) < m:\n        multiple = n * i\n        if sum_of_digits(multiple) == digit_sum:\n            multiples.append(multiple)\n        i += 1\n    return multiples", "task_id": "21_08cbb9ab-2413-4eb4-a412-1ccbb342e493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal number to its decimal equivalent.", "code": "def hex_to_decimal(hex_num: str) -> int:\n    return int(hex_num, 16)", "task_id": "24_842f1c07-cf53-4f1c-b952-2e932564adb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its decimal equivalent.", "code": "def octal_to_decimal(octal: str) -> int:\n    return int(octal, 8)", "task_id": "24_78df7788-8a9d-4203-b0cf-214c1eff5bd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary number to its hexadecimal equivalent.", "code": "def binary_to_hex(binary: str) -> str:\n    decimal = int(binary, 2)\n    return hex(decimal)[2:]", "task_id": "24_af387aa3-a6a2-4880-9019-45ef72c804bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its binary equivalent.", "code": "def decimal_to_binary(decimal: int) -> str:\n    return bin(decimal)[2:]", "task_id": "24_0a2b2015-dd5e-4e1b-8a9e-3f8709d52849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its octal equivalent.", "code": "def decimal_to_octal(decimal: int) -> str:\n    return oct(decimal)[2:]", "task_id": "24_e3fc4e35-36c2-43cf-b63c-5ec5de37b2a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its hexadecimal equivalent.", "code": "def decimal_to_hex(decimal: int) -> str:\n    return hex(decimal)[2:]", "task_id": "24_370d7b28-e975-4180-bd1b-42c50a7e4be4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal number to its binary equivalent.", "code": "def hex_to_binary(hex_num: str) -> str:\n    decimal = int(hex_num, 16)\n    return bin(decimal)[2:]", "task_id": "24_3e7552df-13e9-40df-adb0-94d22adab777", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its binary equivalent.", "code": "def octal_to_binary(octal: str) -> str:\n    decimal = int(octal, 8)\n    return bin(decimal)[2:]", "task_id": "24_4092b30a-52c0-485e-9ac8-7b76dbb7a0f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary number to its octal equivalent.", "code": "def binary_to_octal(binary: str) -> str:\n    decimal = int(binary, 2)\n    return oct(decimal)[2:]", "task_id": "24_668f25e3-99c4-4281-bd87-0117fd533768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal number to its hexadecimal equivalent.", "code": "def octal_to_hex(octal: str) -> str:\n    decimal = int(octal, 8)\n    return hex(decimal)[2:]", "task_id": "24_a8a6e39e-2485-42e5-b7af-fe9736a3391c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of non-repeated elements in a given array.", "code": "def sum_unique_elements(arr: list) -> int:\n    unique_elements = set(arr)\n    return sum(unique_elements)", "task_id": "25_609049a1-f7db-4975-af15-23f87a2b284e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all even elements in a given array.", "code": "def product_of_even_elements(arr: list) -> int:\n    prod = 1\n    for num in arr:\n        if num % 2 == 0:\n            prod *= num\n    return prod", "task_id": "25_213c1a2a-20cb-469b-9399-43c132aee98e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd elements in a given array.", "code": "def sum_of_odd_elements(arr: list) -> int:\n    total = 0\n    for num in arr:\n        if num % 2 != 0:\n            total += num\n    return total", "task_id": "25_35b78be6-238a-4994-95d8-26a5098eb96d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique elements in a given array.", "code": "def count_unique_elements(arr: list) -> int:\n    unique_elements = set(arr)\n    return len(unique_elements)", "task_id": "25_a3afdf60-8a41-4b40-8a65-8b1e718f75c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum unique element in a given array.", "code": "def max_unique_element(arr: list) -> int:\n    unique_elements = set(arr)\n    return max(unique_elements)", "task_id": "25_73ce8c52-6e4b-43ee-bb8a-0166296bfb90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum unique element in a given array.", "code": "def min_unique_element(arr: list) -> int:\n    unique_elements = set(arr)\n    return min(unique_elements)", "task_id": "25_3efdf2b3-fc10-455a-93e7-9992ed325e15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all positive elements in a given array.", "code": "def product_of_positive_elements(arr: list) -> int:\n    prod = 1\n    for num in arr:\n        if num > 0:\n            prod *= num\n    return prod", "task_id": "25_aa537250-8416-46d2-992c-9505d50408d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all negative elements in a given array.", "code": "def sum_of_negative_elements(arr: list) -> int:\n    total = 0\n    for num in arr:\n        if num < 0:\n            total += num\n    return total", "task_id": "25_58c8625f-78c2-4cfe-957a-dc5b41c25091", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even elements in a given array.", "code": "def count_even_elements(arr: list) -> int:\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count", "task_id": "25_7ee7af9c-f196-412f-be96-0d06e7d2c700", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a given array.", "code": "def count_odd_elements(arr: list) -> int:\n    count = 0\n    for num in arr:\n        if num % 2 != 0:\n            count += 1\n    return count", "task_id": "25_ed9c07be-755a-479b-a3f3-149eeef26d1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "28_e714a29b-4376-4646-b142-1eca0fe43508", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "28_c510e008-5755-434b-84e4-c1578268a984", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)", "task_id": "28_767839db-025a-4297-b139-110ed869e6c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return abs(a * b) // gcd(a, b)", "task_id": "28_78760c51-cffc-460d-9838-1479f8386fdf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find x raised to the power n.", "code": "def power(x: int, n: int) -> int:\n    if n == 0:\n        return 1\n    return x * power(x, n-1)", "task_id": "28_e7090c50-34ab-4dfd-b8be-4b5c3302cff2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digits(n // 10)", "task_id": "28_25cdd2fc-109e-451a-8bff-957e4b79e8f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    return s[-1] + reverse_string(s[:-1])", "task_id": "28_90447ada-3302-4870-bfee-85cc44f14358", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])", "task_id": "28_0bad096a-99b9-4101-a3fa-62f59ed395dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    if len(s) == 0:\n        return 0\n    return (1 if s[0] in vowels else 0) + count_vowels(s[1:])", "task_id": "28_520786af-efaf-4e24-bcf7-aebb0c70f92d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements in a given list.", "code": "def sum_of_list(lst: list) -> int:\n    if len(lst) == 0:\n        return 0\n    return lst[0] + sum_of_list(lst[1:])", "task_id": "28_2e507d88-3c3a-4d7e-ad06-bef921d77250", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a list of strings.", "code": "import re\ndef remove_vowels(words):\n    pattern = '[aeiouAEIOU]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_cf4b2194-0c8e-4c30-bad9-9a0f5a88fc11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all special characters from a list of strings.", "code": "import re\ndef remove_special_chars(words):\n    pattern = '[^a-zA-Z0-9\\s]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_c2009b4a-9e5c-4abd-bd85-ea955a4e5123", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all uppercase letters from a list of strings.", "code": "import re\ndef remove_uppercase(words):\n    pattern = '[A-Z]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_d6516f57-6fa7-4555-acfe-d7bd861c0015", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all lowercase letters from a list of strings.", "code": "import re\ndef remove_lowercase(words):\n    pattern = '[a-z]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_19508eec-1209-4aa2-a9af-aed73021187d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all spaces from a list of strings.", "code": "import re\ndef remove_spaces(words):\n    pattern = '\\s'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_0969f055-420e-41cd-abb9-8748c250cdcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a list of strings.", "code": "import re\ndef remove_consonants(words):\n    pattern = '[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_1b60c0f6-d419-44d2-ae0e-59130ab012ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all digits and special characters from a list of strings.", "code": "import re\ndef remove_digits_and_special_chars(words):\n    pattern = '[^a-zA-Z\\s]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_0dc5fffb-3820-46c9-8a27-a637c126c607", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all non-alphanumeric characters from a list of strings.", "code": "import re\ndef remove_non_alphanumeric(words):\n    pattern = '[^a-zA-Z0-9]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_69f8d2bb-fe1b-4ed0-ad27-4b91879cd053", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all non-ASCII characters from a list of strings.", "code": "import re\ndef remove_non_ascii(words):\n    pattern = '[^\\x00-\\x7F]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_b838c8df-d57c-4895-a3dd-4f26fa868fcd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all punctuation from a list of strings.", "code": "import re\ndef remove_punctuation(words):\n    pattern = '[\\.,!?;:]'\n    words = [re.sub(pattern, '', word) for word in words]\n    return words", "task_id": "27_250c583d-be27-4c25-8f08-034d26eb9f85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in each tuple of the given list are equal to K.", "code": "def check_all_elements_equal(test_list, K):\n    for tup in test_list:\n        if not all(ele == K for ele in tup):\n            return False\n    return True", "task_id": "26_63f1f5d7-147d-4b57-86fe-55324332b0ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any element in any tuple of the given list is equal to K.", "code": "def check_any_element_equal(test_list, K):\n    for tup in test_list:\n        if any(ele == K for ele in tup):\n            return True\n    return False", "task_id": "26_8714f78e-df25-41d6-b836-579ec02ede33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of tuples in the given list that contain the element K.", "code": "def count_tuples_with_k(test_list, K):\n    count = 0\n    for tup in test_list:\n        if K in tup:\n            count += 1\n    return count", "task_id": "26_20f16b41-01de-4bc4-ac0c-9329e5e05022", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if no elements in any tuple of the given list are equal to K.", "code": "def check_no_elements_equal(test_list, K):\n    for tup in test_list:\n        if any(ele == K for ele in tup):\n            return False\n    return True", "task_id": "26_b6bf527d-28b3-471b-8042-54a7c2407991", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the first element of each tuple in the given list is equal to K.", "code": "def check_first_element_equal(test_list, K):\n    for tup in test_list:\n        if tup[0] != K:\n            return False\n    return True", "task_id": "26_68a5aadd-05f5-4b8e-a2eb-2da553597bbf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the last element of each tuple in the given list is equal to K.", "code": "def check_last_element_equal(test_list, K):\n    for tup in test_list:\n        if tup[-1] != K:\n            return False\n    return True", "task_id": "26_a62cb2e9-5937-4875-9731-c0cbcd8b2a92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all tuples in the given list have the specified length.", "code": "def check_length_of_tuples(test_list, length):\n    for tup in test_list:\n        if len(tup) != length:\n            return False\n    return True", "task_id": "26_0428f6a1-9ba5-4232-bace-4191f20ac116", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the sum of elements in each tuple of the given list is equal to S.", "code": "def check_sum_of_elements(test_list, S):\n    for tup in test_list:\n        if sum(tup) != S:\n            return False\n    return True", "task_id": "26_f25b540a-ef49-4f99-9730-219e8b30bc68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the product of elements in each tuple of the given list is equal to P.", "code": "def check_product_of_elements(test_list, P):\n    for tup in test_list:\n        product = 1\n        for ele in tup:\n            product *= ele\n        if product != P:\n            return False\n    return True", "task_id": "26_18ce2ad2-8a2d-4b04-a331-2ef1c0732a12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in each tuple of the given list are greater than K.", "code": "def check_all_elements_greater(test_list, K):\n    for tup in test_list:\n        if not all(ele > K for ele in tup):\n            return False\n    return True", "task_id": "26_7673baf1-304b-4e82-a1b9-8c8d85dddac2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring an odd number of times in a list of integers.", "code": "def find_odd_occurrence(nums):\n    for num in nums:\n        if nums.count(num) % 2 != 0:\n            return num\n    return -1", "task_id": "29_37693342-2003-4d61-9947-3a98587d82b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring an even number of times in a list of integers.", "code": "def find_even_occurrence(nums):\n    for num in nums:\n        if nums.count(num) % 2 == 0:\n            return num\n    return -1", "task_id": "29_adb66afb-95ae-4a51-86bf-7b3a124eff5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first unique element in a list of integers.", "code": "def find_unique(nums):\n    for num in nums:\n        if nums.count(num) == 1:\n            return num\n    return -1", "task_id": "29_c60606f2-9688-4939-a9df-b59250dfb38a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-unique element in a list of integers.", "code": "def find_non_unique(nums):\n    for num in nums:\n        if nums.count(num) > 1:\n            return num\n    return -1", "task_id": "29_b23ebe06-559f-45b8-a522-eb4d7084ee74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated element in a list of integers.", "code": "def find_first_repeated(nums):\n    seen = set()\n    for num in nums:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "29_446b299b-9773-48db-8959-fe9931a04152", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated element in a list of integers.", "code": "def find_first_non_repeated(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    for num in nums:\n        if count[num] == 1:\n            return num\n    return -1", "task_id": "29_8c464436-12b3-4b19-9d93-92a50ba735e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the majority element in a list of integers. The majority element is the element that appears more than n/2 times.", "code": "def find_majority_element(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > len(nums) // 2:\n            return num\n    return -1", "task_id": "29_ee9631d0-d856-40cb-98e7-7dd22340831e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the most frequent element in a list of integers.", "code": "def find_most_frequent(nums):\n    count = {}\n    max_count = 0\n    most_frequent = -1\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > max_count:\n            max_count = count[num]\n            most_frequent = num\n    return most_frequent", "task_id": "29_a534f392-19b6-4de8-9e5b-6cf952a53bbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least frequent element in a list of integers.", "code": "def find_least_frequent(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    min_count = float('inf')\n    least_frequent = -1\n    for num in count:\n        if count[num] < min_count:\n            min_count = count[num]\n            least_frequent = num\n    return least_frequent", "task_id": "29_797dc4f8-af39-45c0-b609-ec397a805800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second most frequent element in a list of integers.", "code": "def find_second_most_frequent(nums):\n    count = {}\n    for num in nums:\n        count[num] = count.get(num, 0) + 1\n    sorted_count = sorted(count.items(), key=lambda x: x[1], reverse=True)\n    if len(sorted_count) > 1:\n        return sorted_count[1][0]\n    return -1", "task_id": "29_61a8111b-068e-42f3-b598-af26d5e25020", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime factors of a given number.", "code": "import math\ndef sum_of_primes(n):\n    sumPrimes = 0\n    while n % 2 == 0:\n        sumPrimes += 2\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            sumPrimes += i\n            n = n / i\n    if n > 2:\n        sumPrimes += n\n    return int(sumPrimes)", "task_id": "32_22f2e069-29b1-486b-b9b2-d7a99c5e6810", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of distinct prime factors of a given number.", "code": "import math\ndef count_prime_factors(n):\n    count = 0\n    if n % 2 == 0:\n        count += 1\n        while n % 2 == 0:\n            n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            count += 1\n            while n % i == 0:\n                n = n / i\n    if n > 2:\n        count += 1\n    return count", "task_id": "32_363db79a-0806-41e6-96f4-727fada0ffef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "task_id": "32_07b5bb80-2e26-408d-b8f8-f6957cae524f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next prime number greater than a given number.", "code": "import math\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n\ndef next_prime(n):\n    prime = n\n    found = False\n    while not found:\n        prime += 1\n        if is_prime(prime):\n            found = True\n    return prime", "task_id": "32_d8fe6375-0c07-47a0-a895-302af8296c11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all prime factors of a given number.", "code": "import math\ndef prime_factors(n):\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n >>= 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n / i\n    if n > 2:\n        factors.append(n)\n    return factors", "task_id": "32_9d41b8b6-994d-4893-b34d-eb44d62dd9ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a perfect square.", "code": "import math\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return n == root * root", "task_id": "32_855ffd77-00be-4429-a1ea-225b8d707bba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "32_20f6067d-4448-456b-bc6a-3c1f00e796a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a, b):\n    return abs(a * b) // gcd(a, b)", "task_id": "32_42e0df48-87b4-4335-af8a-55ceb7406a34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a Fibonacci number.", "code": "import math\ndef is_perfect_square(x):\n    s = int(math.sqrt(x))\n    return s * s == x\n\ndef is_fibonacci(n):\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)", "task_id": "32_47296c64-c21a-4b02-9f8e-cebef08e0fec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number.", "code": "def sum_of_divisors(n):\n    sumDiv = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            sumDiv += i\n    return sumDiv", "task_id": "32_251240c8-eaa8-4e9b-b110-ba33db2934ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a vowel.", "code": "def is_vowel(c):\n    return c in 'aeiouAEIOU'\n\ndef count_vowel_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_vowel(s[i]) and is_vowel(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_0be66dc3-666b-4957-b271-5356e292b189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the palindromic substrings.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef count_palindromic_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_palindrome(s[i:i+j]):\n                result += 1\n    return result", "task_id": "30_8142625a-4478-4f5c-8e57-a394ae1e3b52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an even digit.", "code": "def is_even_digit(c):\n    return c in '02468'\n\ndef count_even_digit_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_even_digit(s[i]) and is_even_digit(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_5f59edc0-c270-4cc6-a674-ff12c1a8579a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c.lower() not in 'aeiou'\n\ndef count_consonant_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_consonant(s[i]) and is_consonant(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_bbfc657b-122a-4959-8b6a-454e254aab0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a digit.", "code": "def is_digit(c):\n    return c.isdigit()\n\ndef count_digit_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_digit(s[i]) and is_digit(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_1a95a325-db7f-4f69-99d5-fa1bfaa03fed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an uppercase letter.", "code": "def is_uppercase(c):\n    return c.isupper()\n\ndef count_uppercase_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_uppercase(s[i]) and is_uppercase(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_214d9873-9672-45b0-802f-e96a8496b93d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a lowercase letter.", "code": "def is_lowercase(c):\n    return c.islower()\n\ndef count_lowercase_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_lowercase(s[i]) and is_lowercase(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_19e00195-e884-472e-93f0-2369b0e130e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with a special character (non-alphanumeric).", "code": "def is_special_char(c):\n    return not c.isalnum()\n\ndef count_special_char_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_special_char(s[i]) and is_special_char(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_c0f6d0f2-201d-406d-8f9e-5c423ff49bb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with an alphanumeric character.", "code": "def is_alphanumeric(c):\n    return c.isalnum()\n\ndef count_alphanumeric_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_alphanumeric(s[i]) and is_alphanumeric(s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_d78e3ef6-019f-4f5d-b0c8-7be7659f850f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count all the substrings that start and end with the same case (both uppercase or both lowercase).", "code": "def is_same_case(c1, c2):\n    return (c1.isupper() and c2.isupper()) or (c1.islower() and c2.islower())\n\ndef count_same_case_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_same_case(s[i], s[i+j-1]):\n                result += 1\n    return result", "task_id": "30_1e06a1b3-ed70-418a-b42e-1abb89761376", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a binary number (as a string).", "code": "def hex_to_binary(hex_num: str) -> str:\n    return bin(int(hex_num, 16))[2:]", "task_id": "33_88400104-4773-4e0e-a1a4-757201ee7b69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to an octal number (as a string).", "code": "def decimal_to_octal(decimal_num: int) -> str:\n    return oct(decimal_num)[2:]", "task_id": "33_c943999e-2275-488f-9b05-b60429b487ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to a decimal number.", "code": "def binary_to_decimal(binary_num: str) -> int:\n    return int(binary_num, 2)", "task_id": "33_860bcb23-9938-4aba-82a8-b91166f38ecd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number (as a string) to a decimal number.", "code": "def octal_to_decimal(octal_num: str) -> int:\n    return int(octal_num, 8)", "task_id": "33_7d0ef1f0-7c01-4b57-bd23-412e44d8a95b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to a hexadecimal number (as a string).", "code": "def binary_to_hex(binary_num: str) -> str:\n    return hex(int(binary_num, 2))[2:]", "task_id": "33_763744b6-5651-448d-a80e-baca2f5f921f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to a hexadecimal number (as a string).", "code": "def decimal_to_hex(decimal_num: int) -> str:\n    return hex(decimal_num)[2:]", "task_id": "33_5ea34740-42b2-44b0-8f0f-89a6da32d4d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a decimal number.", "code": "def hex_to_decimal(hex_num: str) -> int:\n    return int(hex_num, 16)", "task_id": "33_a29e8433-a815-4ba2-9fd0-005a668be28d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number (as a string) to a binary number (as a string).", "code": "def octal_to_binary(octal_num: str) -> str:\n    return bin(int(octal_num, 8))[2:]", "task_id": "33_9331e3b6-caf3-4a83-86f9-7c6db5b78f7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number (as a string) to an octal number (as a string).", "code": "def binary_to_octal(binary_num: str) -> str:\n    return oct(int(binary_num, 2))[2:]", "task_id": "33_973ff844-bc6d-4804-92a7-d1f51189e424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to an octal number (as a string).", "code": "def hex_to_octal(hex_num: str) -> str:\n    return oct(int(hex_num, 16))[2:]", "task_id": "33_a7adce94-0d34-49d5-9f3d-8220fdf669aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th square number.", "code": "def find_square_num(n: int) -> int:\n    return n * n", "task_id": "35_239f1a64-9ed5-4790-b22b-d3a285c26825", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th triangular number.", "code": "def find_triangular_num(n: int) -> int:\n    return n * (n + 1) // 2", "task_id": "35_7da5ae13-0752-4af7-8ac3-628b56a57b50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th pentagonal number.", "code": "def find_pentagonal_num(n: int) -> int:\n    return n * (3 * n - 1) // 2", "task_id": "35_31035ed6-114a-4b11-bad6-61b7f148d919", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th hexagonal number.", "code": "def find_hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "task_id": "35_888b5092-c815-4dce-9bf0-6febb4e602a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th heptagonal number.", "code": "def find_heptagonal_num(n: int) -> int:\n    return n * (5 * n - 3) // 2", "task_id": "35_6314a2d5-fb97-49d2-b24b-13384f7e73ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th octagonal number.", "code": "def find_octagonal_num(n: int) -> int:\n    return n * (3 * n - 2)", "task_id": "35_02d56907-3707-4b61-a6fc-eaa230637488", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th Fibonacci number.", "code": "def find_fibonacci_num(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "35_fc943f27-d019-4cfc-8e4b-42088748d421", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of n.", "code": "def find_factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * find_factorial(n - 1)", "task_id": "35_4f811f19-7d5b-4ddc-a1ea-adfe3be646d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def find_sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "35_ebf86c7f-6f0c-4731-9ccf-6972a2eb4fec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def find_sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "35_1dcb07e4-1d6b-4338-b963-410c4785a327", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "36_09012602-0fff-4dba-9bf3-b9c4d579fda6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "36_0f4cc837-bb31-4a89-9544-d7c76c9dcb88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "36_daeec9ce-1726-44ca-aff3-71821e475849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "36_390ffc77-93f2-430c-9e2c-0647ef2d37d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "36_f4fc53c8-55be-4a3a-a6bd-df5319351925", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "36_bde7aaea-73cf-4ad5-9262-3b2eba7f4313", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "36_40d94ec6-c233-45d1-8e4e-60435813aa62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "36_2dd70c96-f463-4f0d-b7e6-9e61cf8bad80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "36_69bcb08f-be2d-4922-8614-e7d20223eb27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(lst1: list, lst2: list) -> list:\n    return sorted(lst1 + lst2)", "task_id": "36_17f6be1f-7d72-4baa-bd25-11793b729e95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that occur most frequently from given lists of integers (not necessarily sorted or distinct) using heap queue algorithm.", "code": "def find_top_k(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_912a7a74-8057-4513-990d-09e2ada5552e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k even integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_even(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % 2 == 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_e049c430-2e24-4e01-a503-747d27fbec6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k odd integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_odd(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % 2 != 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_b16721bb-2dd6-4698-a82e-0b594c2faf45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k positive integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_positive(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i > 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_85d6f4d0-b673-4690-97da-8e2a83cc6ca7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k negative integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_negative(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i < 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_91113813-c199-4e42-8ce3-e4e3b9d1619c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k unique integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_unique(nums, k):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            d[i] += 1\n    unique_items = {key for key, value in d.items() if value == 1}\n    temp = []\n    import heapq\n    for key in unique_items:\n        if len(temp) < k:\n            temp.append((d[key], key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if d[key] > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (d[key], key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_0a27b684-240e-4fa0-9cd7-a19c4889b47a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k prime integers that occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_prime(nums, k):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_prime(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_0b093b03-cef1-4e97-b2c8-0381e3dddb49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are multiples of a given number n and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_multiples_of_n(nums, k, n):\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if i % n == 0:\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_6883aa1e-b3f5-4f6e-b215-a227dbfbb87a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are perfect squares and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_squares(nums, k):\n    def is_square(n):\n        return int(n ** 0.5) ** 2 == n\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_square(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_ce2b8072-7c25-4150-9175-ffec65093fd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k integers that are Fibonacci numbers and occur most frequently from given lists of integers using heap queue algorithm.", "code": "def find_top_k_fibonacci(nums, k):\n    def is_fibonacci(n):\n        x, y = 0, 1\n        while y < n:\n            x, y = y, x + y\n        return y == n\n    import collections\n    d = collections.defaultdict(int)\n    for row in nums:\n        for i in row:\n            if is_fibonacci(i):\n                d[i] += 1\n    temp = []\n    import heapq\n    for key, v in d.items():\n        if len(temp) < k:\n            temp.append((v, key))\n            if len(temp) == k:\n                heapq.heapify(temp)\n        else:\n            if v > temp[0][0]:\n                heapq.heappop(temp)\n                heapq.heappush(temp, (v, key))\n    result = []\n    while temp:\n        v, key = heapq.heappop(temp)\n        result.append(key)\n    return result", "task_id": "31_08a87f5d-071e-492d-befd-62ca50b0b963", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an unsorted array of unique integers from 1 to n.", "code": "def find_missing_number(arr: list[int]) -> int:\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum", "task_id": "34_fa44c071-e041-46e7-80b0-297b0a685403", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the duplicate number in an array of n+1 integers where each integer is between 1 and n.", "code": "def find_duplicate_number(arr: list[int]) -> int:\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "34_61f7b2af-a5c5-4ab0-8224-8ba6001e7249", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing and duplicate numbers in an array of n integers where each integer is between 1 and n.", "code": "def find_missing_and_duplicate(arr: list[int]) -> tuple[int, int]:\n    n = len(arr)\n    total_sum = n * (n + 1) // 2\n    total_square_sum = n * (n + 1) * (2 * n + 1) // 6\n    arr_sum = sum(arr)\n    arr_square_sum = sum(x * x for x in arr)\n    sum_diff = total_sum - arr_sum\n    square_sum_diff = total_square_sum - arr_square_sum\n    missing = (sum_diff + square_sum_diff // sum_diff) // 2\n    duplicate = missing - sum_diff\n    return (missing, duplicate)", "task_id": "34_f400a303-2058-4777-b1e2-011e5f2c4d57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive integer in an unsorted array.", "code": "def find_first_missing_positive(arr: list[int]) -> int:\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "task_id": "34_f68d0f4d-7212-4ea4-b61c-c22326a659e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers within a given range [start, end].", "code": "def find_missing_number_in_range(arr: list[int], start: int, end: int) -> int:\n    expected_sum = sum(range(start, end + 1))\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum", "task_id": "34_05c7e623-b550-47b3-b2e0-e45aa191a514", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all missing numbers in an array of integers from 1 to n.", "code": "def find_missing_numbers(arr: list[int], n: int) -> list[int]:\n    present = [False] * (n + 1)\n    for num in arr:\n        present[num] = True\n    missing = [i for i in range(1, n + 1) if not present[i]]\n    return missing", "task_id": "34_04409e9d-6900-43bc-9c00-bcbbfa0716b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers from 1 to n using XOR.", "code": "def find_missing_number_with_xor(arr: list[int], n: int) -> int:\n    xor_all = 0\n    xor_arr = 0\n    for i in range(1, n + 1):\n        xor_all ^= i\n    for num in arr:\n        xor_arr ^= num\n    return xor_all ^ xor_arr", "task_id": "34_1273e354-6f77-46ca-b79f-bbc1d9c054ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a sorted and rotated array of unique integers from 1 to n.", "code": "def find_missing_number_in_sorted_rotated(arr: list[int]) -> int:\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum", "task_id": "34_ebaec7a9-cb36-46a3-be7a-e9e87cbd5e2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers from 1 to n with possible duplicates.", "code": "def find_missing_number_with_duplicates(arr: list[int], n: int) -> int:\n    unique_sum = sum(set(arr))\n    expected_sum = n * (n + 1) // 2\n    return expected_sum - unique_sum", "task_id": "34_a6fa6aa4-a79c-443c-becc-a97f7d795249", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a large range [start, end] where the array may not fit into memory.", "code": "def find_missing_number_in_large_range(arr: list[int], start: int, end: int) -> int:\n    expected_sum = sum(range(start, end + 1))\n    actual_sum = sum(arr)\n    return expected_sum - actual_sum", "task_id": "34_964ab028-67c0-419a-ad58-2ad831b2b413", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given list of lists.", "code": "def sum_of_elements(nums):\n  return sum(sum(sublist) for sublist in nums)", "task_id": "40_fab0f286-03d7-4156-9dbd-9d53ac6453e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list of lists.", "code": "def max_element(nums):\n  return max(max(sublist) for sublist in nums)", "task_id": "40_f50e7062-8cfd-4af9-814e-6107864761ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list(nums):\n  return [item for sublist in nums for item in sublist]", "task_id": "40_c0208a36-8b85-4fcd-ade9-fa121369a985", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given list of lists.", "code": "def unique_elements(nums):\n  return set(item for sublist in nums for item in sublist)", "task_id": "40_5910ca8f-d3c1-4253-b2fd-8157f258878a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to transpose a given matrix (list of lists).", "code": "def transpose_matrix(matrix):\n  return [list(row) for row in zip(*matrix)]", "task_id": "40_caca2725-d00a-435d-a0e0-e935fa7a19b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the element-wise sum of two matrices (lists of lists) of the same dimensions.", "code": "def element_wise_sum(matrix1, matrix2):\n  return [[matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))] for i in range(len(matrix1))]", "task_id": "40_5e782ac9-17b0-44dc-b3f1-ba91c3d6a4dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the diagonal elements of a square matrix (list of lists).", "code": "def diagonal_sum(matrix):\n  return sum(matrix[i][i] for i in range(len(matrix)))", "task_id": "40_19e7118b-d684-49cf-855d-cdb63694726f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each list within a given list of lists.", "code": "def reverse_each_list(nums):\n  return [sublist[::-1] for sublist in nums]", "task_id": "40_4e89a52d-3f00-4c86-ba2a-32ce499f3a18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of zeros in a given list of lists.", "code": "def count_zeros(nums):\n  return sum(sublist.count(0) for sublist in nums)", "task_id": "40_2a0a9fbe-dd6c-470f-bf74-b29ab270df19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of each row in a given matrix (list of lists).", "code": "def row_sums(matrix):\n  return [sum(row) for row in matrix]", "task_id": "40_07fef709-565d-4b9f-ba92-922ae65f63de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number of a given list.", "code": "def sum_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even + first_odd", "task_id": "38_890a44ac-1a8a-4368-a75e-ae5e61f61964", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first even and odd number of a given list.", "code": "def product_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 1)\n    first_odd = next((el for el in list1 if el%2!=0), 1)\n    return first_even * first_odd", "task_id": "38_f52a54fe-016f-4e0d-8345-8c8db7a65293", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference between the first even and odd number of a given list.", "code": "def difference_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even - first_odd", "task_id": "38_75e34960-bfeb-4985-8c6d-33ae52b92255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first two even numbers of a given list.", "code": "def sum_first_two_evens(list1):\n    evens = [el for el in list1 if el%2==0]\n    return sum(evens[:2])", "task_id": "38_3f2a26a9-3103-4a00-8523-3aee80cbe566", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first two odd numbers of a given list.", "code": "def sum_first_two_odds(list1):\n    odds = [el for el in list1 if el%2!=0]\n    return sum(odds[:2])", "task_id": "38_0815aa0d-3c7a-49d8-8622-2ce602422324", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number at even and odd indices respectively of a given list.", "code": "def sum_first_even_odd_indices(list1):\n    first_even = next((list1[i] for i in range(0, len(list1), 2) if list1[i]%2==0), 0)\n    first_odd = next((list1[i] for i in range(1, len(list1), 2) if list1[i]%2!=0), 0)\n    return first_even + first_odd", "task_id": "38_eeb2362b-fce3-4d91-8271-c532cba14a20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first even and odd number at even and odd indices respectively of a given list.", "code": "def product_first_even_odd_indices(list1):\n    first_even = next((list1[i] for i in range(0, len(list1), 2) if list1[i]%2==0), 1)\n    first_odd = next((list1[i] for i in range(1, len(list1), 2) if list1[i]%2!=0), 1)\n    return first_even * first_odd", "task_id": "38_4a59ac69-3c35-4a1e-94fc-c20d6d68eebb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of the first even and odd number of a given list.", "code": "def sum_first_even_odd_squares(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even**2 + first_odd**2", "task_id": "38_393768d4-25ef-4165-a848-7e8d926b7421", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of the first even and odd number of a given list.", "code": "def sum_first_even_odd_cubes(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even**3 + first_odd**3", "task_id": "38_85474da2-0fba-46de-a6a8-1f96949fd470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the absolute values of the first even and odd number of a given list.", "code": "def sum_first_even_odd_abs(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return abs(first_even) + abs(first_odd)", "task_id": "38_8f019b91-a7f8-49cf-a0c7-472b3d23182c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings in descending order.", "code": "def sort_mixed_list_desc(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int], reverse=True)\n    str_part = sorted([i for i in mixed_list if type(i) is str], reverse=True)\n    return int_part + str_part", "task_id": "37_560d107e-910f-4a90-9451-7ac585a203c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in ascending order.", "code": "def sort_mixed_list_by_type(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "task_id": "37_51e2a145-d362-4913-b363-11b94bac3824", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings sorted by their length.", "code": "def sort_mixed_list_by_length(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=len)\n    return int_part + str_part", "task_id": "37_15eae3cb-d1b1-450f-ac06-30acdca4ad3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with even integers first in ascending order, followed by odd integers in ascending order, and then strings in ascending order.", "code": "def sort_mixed_list_even_odd(mixed_list):\n    even_ints = sorted([i for i in mixed_list if type(i) is int and i % 2 == 0])\n    odd_ints = sorted([i for i in mixed_list if type(i) is int and i % 2 != 0])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return even_ints + odd_ints + str_part", "task_id": "37_d72b92b3-705e-4899-9f9f-6f136ef56b54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in case-insensitive alphabetical order.", "code": "def sort_mixed_list_case_insensitive(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=lambda s: s.lower())\n    return int_part + str_part", "task_id": "37_fe1c1e7e-084c-4e9c-90ec-21dca3111943", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in descending order followed by strings in ascending order.", "code": "def sort_mixed_list_custom_order(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int], reverse=True)\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return int_part + str_part", "task_id": "37_6fb64dac-aae4-4520-82a1-34079cb52e69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings sorted by their length in descending order.", "code": "def sort_mixed_list_length_desc(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], key=len, reverse=True)\n    return int_part + str_part", "task_id": "37_8bf06029-a8db-49f8-a645-3c7fada7a75e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings that start with a vowel in ascending order, then other strings in ascending order.", "code": "def sort_mixed_list_vowels_first(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    vowels = 'AEIOUaeiou'\n    str_vowels = sorted([i for i in mixed_list if type(i) is str and i[0] in vowels])\n    str_others = sorted([i for i in mixed_list if type(i) is str and i[0] not in vowels])\n    return int_part + str_vowels + str_others", "task_id": "37_aca12853-5e08-4d7a-ba58-c8c470e262da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with prime integers first in ascending order, followed by non-prime integers in ascending order, and then strings in ascending order.", "code": "def sort_mixed_list_prime_first(mixed_list):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_ints = sorted([i for i in mixed_list if type(i) is int and is_prime(i)])\n    non_prime_ints = sorted([i for i in mixed_list if type(i) is int and not is_prime(i)])\n    str_part = sorted([i for i in mixed_list if type(i) is str])\n    return prime_ints + non_prime_ints + str_part", "task_id": "37_a645049c-2a32-46c3-9912-10345ffdf0aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given mixed list of integers and strings, with integers first in ascending order followed by strings in reverse alphabetical order.", "code": "def sort_mixed_list_reverse_alpha(mixed_list):\n    int_part = sorted([i for i in mixed_list if type(i) is int])\n    str_part = sorted([i for i in mixed_list if type(i) is str], reverse=True)\n    return int_part + str_part", "task_id": "37_e73c10ca-b4eb-4d64-9041-5069b09524f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter odd numbers using a lambda function.", "code": "def filter_odd_numbers(nums):\n    odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n    return odd_nums", "task_id": "41_fca0ddd5-41b6-423c-a1d3-8c6ffe4154f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter positive numbers using a lambda function.", "code": "def filter_positive_numbers(nums):\n    positive_nums = list(filter(lambda x: x > 0, nums))\n    return positive_nums", "task_id": "41_4cb1a554-92c1-4fe5-9029-5d1a3fec52be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter negative numbers using a lambda function.", "code": "def filter_negative_numbers(nums):\n    negative_nums = list(filter(lambda x: x < 0, nums))\n    return negative_nums", "task_id": "41_5bf103d5-dadf-4c89-ac5a-df5dcd49ed1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter numbers that are multiples of three using a lambda function.", "code": "def filter_multiples_of_three(nums):\n    multiples_of_three = list(filter(lambda x: x % 3 == 0, nums))\n    return multiples_of_three", "task_id": "41_a597c544-dfe8-46f3-9eea-07bfee73acd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter non-empty strings using a lambda function.", "code": "def filter_non_empty_strings(strings):\n    non_empty_strings = list(filter(lambda s: s != '', strings))\n    return non_empty_strings", "task_id": "41_ef5f7d7d-2eda-4357-9910-d2c1e2efdead", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter strings that contain vowels using a lambda function.", "code": "def filter_strings_with_vowels(strings):\n    vowels = 'aeiouAEIOU'\n    strings_with_vowels = list(filter(lambda s: any(v in s for v in vowels), strings))\n    return strings_with_vowels", "task_id": "41_a986df47-3465-456a-a429-ebd53e7e8f54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter palindromic strings using a lambda function.", "code": "def filter_palindromes(strings):\n    palindromes = list(filter(lambda s: s == s[::-1], strings))\n    return palindromes", "task_id": "41_2d1c3f35-e397-4aa1-b85e-f58060c8bfa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter strings that are entirely uppercase using a lambda function.", "code": "def filter_uppercase_strings(strings):\n    uppercase_strings = list(filter(lambda s: s.isupper(), strings))\n    return uppercase_strings", "task_id": "41_d2a2f664-e02e-48d4-8fc6-4a76ca53337c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter strings longer than a given length using a lambda function.", "code": "def filter_long_strings(strings, length):\n    long_strings = list(filter(lambda s: len(s) > length, strings))\n    return long_strings", "task_id": "41_e3e1f241-3a15-4982-977e-5bfc0dc7d408", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter strings shorter than a given length using a lambda function.", "code": "def filter_short_strings(strings, length):\n    short_strings = list(filter(lambda s: len(s) < length, strings))\n    return short_strings", "task_id": "41_de9d2fa1-fc16-465c-a09a-1f8b57b547c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no two adjacent characters are the same.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 2 > len(s) + 1:\n        return False\n    return True", "task_id": "39_172dba18-0012-41db-8360-a7434dfb45d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that the same characters are at least k distance apart.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_with_k_distance(s: str, k: int) -> str:\n    if k == 0:\n        return s\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    queue = []\n    result = []\n    while max_heap:\n        freq, char = heapq.heappop(max_heap)\n        result.append(char)\n        queue.append((freq + 1, char))\n        if len(queue) >= k:\n            freq, char = queue.pop(0)\n            if freq < 0:\n                heapq.heappush(max_heap, (freq, char))\n    return ''.join(result) if len(result) == len(s) else ''", "task_id": "39_0e8f13c6-105e-487f-99ab-4b8c3f2c77da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged to form a palindrome.", "code": "from collections import Counter\n\ndef can_rearrange_palindrome(s: str) -> bool:\n    ctr = Counter(s)\n    odd_count = sum(1 for count in ctr.values() if count % 2 != 0)\n    return odd_count <= 1", "task_id": "39_13f3db5f-fcd5-4dbc-9ec6-d01836108b28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string to form a palindrome if possible, otherwise return an empty string.", "code": "from collections import Counter\n\ndef rearrange_to_palindrome(s: str) -> str:\n    ctr = Counter(s)\n    odd_count = sum(1 for count in ctr.values() if count % 2 != 0)\n    if odd_count > 1:\n        return ''\n    half_palindrome = []\n    middle_char = ''\n    for char, count in ctr.items():\n        if count % 2 != 0:\n            middle_char = char\n        half_palindrome.extend(char * (count // 2))\n    return ''.join(half_palindrome) + middle_char + ''.join(half_palindrome[::-1])", "task_id": "39_afbb8e5c-5966-4115-9312-4c7f1e4ef2e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no character repeats more than twice consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_repeats(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 3 > len(s) + 2:\n        return False\n    return True", "task_id": "39_fb17be40-60be-4bb7-b657-62ac24505455", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no character repeats more than twice consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_repeats(s: str) -> str:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 3 > len(s) + 2:\n        return ''\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char1, char2])\n        if freq1 + 2 < 0:\n            heapq.heappush(max_heap, (freq1 + 2, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_e2adccc7-040b-4866-9284-ae673be90279", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no character repeats more than three times consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_triples(s: str) -> bool:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 4 > len(s) + 3:\n        return False\n    return True", "task_id": "39_515d3883-a9d9-458f-87b0-b80d340f6087", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no character repeats more than three times consecutively.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_triples(s: str) -> str:\n    ctr = Counter(s)\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    if (-max_heap[0][0]) * 4 > len(s) + 3:\n        return ''\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        result.extend([char1, char1, char1, char2])\n        if freq1 + 3 < 0:\n            heapq.heappush(max_heap, (freq1 + 3, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_53ba7139-eaf2-439a-ac16-e268ada982bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the letters of a given string can be rearranged so that no two consecutive characters are vowels.", "code": "from collections import Counter\nimport heapq\n\ndef can_rearrange_to_avoid_consecutive_vowels(s: str) -> bool:\n    vowels = set('aeiouAEIOU')\n    ctr = Counter(s)\n    vowel_count = sum(ctr[char] for char in ctr if char in vowels)\n    non_vowel_count = len(s) - vowel_count\n    return vowel_count <= non_vowel_count + 1", "task_id": "39_4bfb7b03-1d8d-4607-882c-2fccc6869e41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange the letters of a given string so that no two consecutive characters are vowels.", "code": "from collections import Counter\nimport heapq\n\ndef rearrange_to_avoid_consecutive_vowels(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    ctr = Counter(s)\n    vowel_count = sum(ctr[char] for char in ctr if char in vowels)\n    non_vowel_count = len(s) - vowel_count\n    if vowel_count > non_vowel_count + 1:\n        return ''\n    max_heap = [(-freq, char) for char, freq in ctr.items()]\n    heapq.heapify(max_heap)\n    result = []\n    while len(max_heap) >= 2:\n        freq1, char1 = heapq.heappop(max_heap)\n        freq2, char2 = heapq.heappop(max_heap)\n        if (char1 in vowels and char2 in vowels) or (char1 not in vowels and char2 not in vowels):\n            result.extend([char1, char2])\n        else:\n            result.extend([char1, char2])\n        if freq1 + 1 < 0:\n            heapq.heappush(max_heap, (freq1 + 1, char1))\n        if freq2 + 1 < 0:\n            heapq.heappush(max_heap, (freq2 + 1, char2))\n    if max_heap:\n        result.extend([max_heap[0][1]] * -max_heap[0][0])\n    return ''.join(result)", "task_id": "39_d2d76c95-3052-42b3-8651-7b95ff6e92b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated even elements in a given array.", "code": "def sum_of_even_repeated_elements(arr):\n    return sum([x for x in arr if arr.count(x) > 1 and x % 2 == 0])", "task_id": "42_fb3258c8-3ae4-41a0-bb82-21606329fee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique elements in a given array.", "code": "def sum_of_unique_elements(arr):\n    return sum([x for x in arr if arr.count(x) == 1])", "task_id": "42_c256847a-f718-4aeb-b073-c299f7af76ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a given array that are greater than a given value k.", "code": "def sum_of_repeated_elements_greater_than_k(arr, k):\n    return sum([x for x in arr if arr.count(x) > 1 and x > k])", "task_id": "42_0f0fed2f-6598-4149-b042-55d79769cf90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a given array that are located at even indices.", "code": "def sum_of_repeated_elements_at_even_indices(arr):\n    return sum([arr[i] for i in range(0, len(arr), 2) if arr.count(arr[i]) > 1])", "task_id": "42_4f472042-e49e-49b2-9631-a02e3650d82b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a given array that fall within a specified range [start, end].", "code": "def sum_of_repeated_elements_within_range(arr, start, end):\n    return sum([x for x in arr if arr.count(x) > 1 and start <= x <= end])", "task_id": "42_15bf35d4-c95d-4b3c-9d9f-6a85ff436c29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated odd elements in a given array.", "code": "def sum_of_repeated_odd_elements(arr):\n    return sum([x for x in arr if arr.count(x) > 1 and x % 2 != 0])", "task_id": "42_c96992c2-d8c2-42a0-82f9-236d3ca5cb43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a given array, excluding their first occurrence.", "code": "def sum_of_repeated_elements_excluding_first_occurrence(arr):\n    seen = set()\n    return sum([x for x in arr if x in seen or seen.add(x)])", "task_id": "42_309e0a3c-22a3-4004-ac0e-d5e7edb12ef8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements in a given array that are repeated exactly 'freq' times.", "code": "def sum_of_repeated_elements_with_frequency(arr, freq):\n    return sum([x for x in arr if arr.count(x) == freq])", "task_id": "42_d88dcd56-6ed3-4258-b239-d18aeb623083", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a subarray of a given array, defined by start and end indices.", "code": "def sum_of_repeated_elements_in_subarray(arr, start, end):\n    subarray = arr[start:end+1]\n    return sum([x for x in subarray if subarray.count(x) > 1])", "task_id": "42_e685f080-21bd-48f4-87fb-ca7811cf72ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of repeated elements in a given array, excluding their last occurrence.", "code": "def sum_of_repeated_elements_excluding_last_occurrence(arr):\n    seen = set()\n    return sum([x for x in arr[::-1] if x in seen or seen.add(x)])", "task_id": "42_d583aaba-4d7c-4d4d-af88-7d3514b04b66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of uppercase letters joined with a hyphen using regex.", "code": "import re\ndef find_uppercase_sequences(text):\n  patterns = '^[A-Z]+-[A-Z]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_53449d47-0115-4006-97cb-7991998d511b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of digits joined with a comma using regex.", "code": "import re\ndef find_digits_with_commas(text):\n  patterns = '^[0-9]+,[0-9]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_73fc373b-bc57-47d9-88a5-8af2d315de37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of mixed case letters joined with a period using regex.", "code": "import re\ndef find_mixed_case_sequences(text):\n  patterns = '^[a-zA-Z]+\\.[a-zA-Z]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_25a40138-3bb7-4160-87de-3cdd29a1d994", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of hexadecimal digits joined with a colon using regex.", "code": "import re\ndef find_hexadecimal_sequences(text):\n  patterns = '^[0-9A-Fa-f]+:[0-9A-Fa-f]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_0ad5eff5-39a7-4ef3-9b74-4fa4773cef48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of alphanumeric characters joined with a dash using regex.", "code": "import re\ndef find_alphanumeric_sequences(text):\n  patterns = '^[a-zA-Z0-9]+-[a-zA-Z0-9]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_449b85b6-09f5-46fd-88e4-49fc520ddfcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of vowels joined with a semicolon using regex.", "code": "import re\ndef find_vowel_sequences(text):\n  patterns = '^[aeiouAEIOU]+;[aeiouAEIOU]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_6d7710a4-d455-42e7-92e1-fba02abfeee2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of consonants joined with an underscore using regex.", "code": "import re\ndef find_consonant_sequences(text):\n  patterns = '^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+_[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_7dce4f63-b36c-4074-a3e4-86c9a1b7ae43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of special characters joined with a pipe using regex.", "code": "import re\ndef find_special_char_sequences(text):\n  patterns = '^[!@#$%^&*()_+]+\\|[!@#$%^&*()_+]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_6fc1502a-9581-446d-bf1a-a0abb1843c4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of words joined with a space using regex.", "code": "import re\ndef find_word_sequences(text):\n  patterns = '^[a-zA-Z]+ [a-zA-Z]+$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_189f5a42-9394-4042-8ac2-c41cba8d9b8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of palindromes joined with a hyphen using regex.", "code": "import re\ndef find_palindrome_sequences(text):\n  patterns = '^(?:(.)(?:(?:(?<=\\1)|(?<=\\1.))|(?:(?<=\\1\\1)|(?<=\\1.\\1)))\\1)-(?:(.)(?:(?:(?<=\\2)|(?<=\\2.))|(?:(?<=\\2\\2)|(?<=\\2.\\2)))\\2)$'\n  if re.search(patterns, text):\n    return 'Found a match!'\n  else:\n    return 'Not matched!'", "task_id": "43_15ae8146-7f7b-4a75-b9fb-f1bf81540c27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine whether all the numbers in a list are positive.", "code": "def all_elements_positive(data):\n    return all(x > 0 for x in data)", "task_id": "46_95935bad-1c35-40c3-8559-d3eb034d356f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine whether a list contains at least one even number.", "code": "def contains_even_number(data):\n    return any(x % 2 == 0 for x in data)", "task_id": "46_111d37ce-36af-405b-a48b-81e512d644cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of all elements in a list.", "code": "def sum_of_elements(data):\n    return sum(data)", "task_id": "46_66baca73-73eb-4b34-855a-c5099266835c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of all elements in a list.", "code": "def product_of_elements(data):\n    product = 1\n    for x in data:\n        product *= x\n    return product", "task_id": "46_d7b4c35b-2698-4366-9a38-049e5d0408f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine whether all the numbers in a list are even.", "code": "def all_elements_even(data):\n    return all(x % 2 == 0 for x in data)", "task_id": "46_fb5e81ec-1728-43b1-a982-c5ee1874f017", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine whether a list contains at least one negative number.", "code": "def contains_negative_number(data):\n    return any(x < 0 for x in data)", "task_id": "46_3b3a94c3-f9e9-4caa-a020-34b70dc90586", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a list.", "code": "def max_element(data):\n    return max(data)", "task_id": "46_e87d4e8c-059a-4a28-a082-82aca7fdf42f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a list.", "code": "def min_element(data):\n    return min(data)", "task_id": "46_80372e0b-4087-48f2-9b22-8d77998c442b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine whether all the numbers in a list are odd.", "code": "def all_elements_odd(data):\n    return all(x % 2 != 0 for x in data)", "task_id": "46_616fc454-5612-4afc-b797-907222e36a27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the average of all elements in a list.", "code": "def average_of_elements(data):\n    return sum(data) / len(data) if data else 0", "task_id": "46_70f6bb32-6e36-48d7-acfc-4bba33fdafbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word at the end of a string.", "code": "import re\n\ndef match_end_string(text):\n    patterns = '\\w+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_f5d0f5a8-31b0-4e63-9aba-7d78bdaf9ff6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a digit in a string.", "code": "import re\n\ndef match_digit(text):\n    patterns = '\\d'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_27f90747-5556-4217-917a-4ac3285c570c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word of a given length in a string.", "code": "import re\n\ndef match_word_with_length(text, length):\n    patterns = f'\\b\\w{{{length}}}\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_a2fb47fb-4ee5-4ee0-a9f7-c561595736f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches an uppercase word in a string.", "code": "import re\n\ndef match_uppercase(text):\n    patterns = '\\b[A-Z]+\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_be775947-df2e-4a86-9cc4-c2a76801302f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches an email address in a string.", "code": "import re\n\ndef match_email(text):\n    patterns = '[\\w\\.-]+@[\\w\\.-]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_2d0526e8-42bd-45cb-a504-44d6d5fb2e6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a phone number in the format xxx-xxx-xxxx in a string.", "code": "import re\n\ndef match_phone_number(text):\n    patterns = '\\b\\d{3}-\\d{3}-\\d{4}\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_7f18aefe-b11f-42d7-b8cd-971091f19fda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a date in the format dd/mm/yyyy in a string.", "code": "import re\n\ndef match_date(text):\n    patterns = '\\b\\d{2}/\\d{2}/\\d{4}\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_3878d1a2-7b3d-4566-a399-275c825f47ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a hex color code in a string.", "code": "import re\n\ndef match_hex_color(text):\n    patterns = '#[0-9a-fA-F]{6}\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_2d8ae606-d76f-4e6b-bd7b-6518b27ff2b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a URL in a string.", "code": "import re\n\ndef match_url(text):\n    patterns = 'https?://[\\w\\.-]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_a3a0130d-3d23-4208-9c21-133215976424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a time in the format hh:mm in a string.", "code": "import re\n\ndef match_time(text):\n    patterns = '\\b\\d{2}:\\d{2}\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "44_9daa3e19-1935-4771-a4e2-70af4d03225c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of factorial of a and factorial of b.", "code": "def last_digit_of_sum(a: int, b: int) -> int:\n    def factorial(n):\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    sum_factorials = factorial(a) + factorial(b)\n    return sum_factorials % 10", "task_id": "47_74f0fca4-b1d3-419c-83ab-f9ad7ffc199b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the product of factorial of a and factorial of b.", "code": "def last_digit_of_product(a: int, b: int) -> int:\n    def factorial(n):\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    product_factorials = factorial(a) * factorial(b)\n    return product_factorials % 10", "task_id": "47_df1fc643-6c22-41a3-8765-63c69e3cc103", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of a raised to the power of b.", "code": "def last_digit_of_power(a: int, b: int) -> int:\n    return (a ** b) % 10", "task_id": "47_d5526594-f723-4924-9f59-8bb7774de3f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of the digits of n.", "code": "def last_digit_of_sum_of_digits(n: int) -> int:\n    sum_digits = sum(int(digit) for digit in str(n))\n    return sum_digits % 10", "task_id": "47_854b6a34-83ca-477f-9223-8a5f30b9a1b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the nth Fibonacci number.", "code": "def last_digit_of_fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % 10\n    return b", "task_id": "47_52830c51-1ac7-43ae-98e2-d8deb0297b4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of the squares of a and b.", "code": "def last_digit_of_sum_of_squares(a: int, b: int) -> int:\n    sum_squares = a**2 + b**2\n    return sum_squares % 10", "task_id": "47_09b1d2a1-14ef-4a61-8c36-aa3d82afd624", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of the factorials of all integers from 1 to n.", "code": "def last_digit_of_factorial_sum(n: int) -> int:\n    def factorial(x):\n        result = 1\n        for i in range(2, x + 1):\n            result *= i\n        return result\n    sum_factorials = sum(factorial(i) for i in range(1, n + 1))\n    return sum_factorials % 10", "task_id": "47_2814c95b-c7b4-4bb2-8673-cc031fa97f23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the double factorial of n (n!!).", "code": "def last_digit_of_double_factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(n, 0, -2):\n        result *= i\n    return result % 10", "task_id": "47_0fd1a3dd-1a3c-4640-8272-76199b8bca90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of the cubes of a and b.", "code": "def last_digit_of_sum_of_cubes(a: int, b: int) -> int:\n    sum_cubes = a**3 + b**3\n    return sum_cubes % 10", "task_id": "47_adef6db2-7bfd-4a96-be79-1358bac8432a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of the sum of all prime numbers less than or equal to n.", "code": "def last_digit_of_sum_of_primes(n: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum_primes = sum(i for i in range(2, n + 1) if is_prime(i))\n    return sum_primes % 10", "task_id": "47_20fd645e-3b54-4b32-a5c1-3d504b90fe14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first elements from each sublist in a given two-dimensional list.", "code": "def sum_first_elements(nums):\n    return sum(i[0] for i in nums)", "task_id": "49_ce09f708-e97b-44ae-8ab7-a756fad46825", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the last element from each sublist in a given two-dimensional list.", "code": "def extract_last_elements(nums):\n    return [i[-1] for i in nums]", "task_id": "49_3ad71b18-0b45-45af-9854-fda2ee3ec103", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements at a specified index from each sublist in a given two-dimensional list.", "code": "def extract_elements_at_index(nums, index):\n    return [i[index] for i in nums]", "task_id": "49_1594bab9-e1aa-4e9f-a8e2-3a064b0ce333", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the first elements from each sublist in a given two-dimensional list that are greater than a specified threshold.", "code": "def extract_first_elements_greater_than(nums, threshold):\n    return [i[0] for i in nums if i[0] > threshold]", "task_id": "49_ebcef56f-bac1-47c5-b65d-0eb7f00ef4ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all even elements from each sublist in a given two-dimensional list.", "code": "def extract_even_elements(nums):\n    return [elem for sublist in nums for elem in sublist if elem % 2 == 0]", "task_id": "49_41645569-0dae-49db-8fa4-1ad693a54cd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each sublist in a given two-dimensional list that have a specified length.", "code": "def extract_elements_with_length(nums, length):\n    return [elem for sublist in nums for elem in sublist if len(str(elem)) == length]", "task_id": "49_76a6696b-be48-43f3-8e26-35c3af342d08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each sublist in a given two-dimensional list that start with a specified character.", "code": "def extract_elements_starting_with(nums, char):\n    return [elem for sublist in nums for elem in sublist if str(elem).startswith(char)]", "task_id": "49_84716a26-fde7-4040-8685-a18d0300041b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique elements from each sublist in a given two-dimensional list.", "code": "def extract_unique_elements(nums):\n    unique_elements = set()\n    for sublist in nums:\n        unique_elements.update(sublist)\n    return list(unique_elements)", "task_id": "49_ab74c51e-c23f-4dfc-9111-c4b22176ed8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each sublist in a given two-dimensional list that are within a specified range (inclusive).", "code": "def extract_elements_within_range(nums, start, end):\n    return [elem for sublist in nums for elem in sublist if start <= elem <= end]", "task_id": "49_3dbb6a1b-f5fa-4047-8ed7-2de1b1fd1f27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each sublist in a given two-dimensional list that are at odd indices.", "code": "def extract_elements_with_odd_indices(nums):\n    return [sublist[i] for sublist in nums for i in range(len(sublist)) if i % 2 != 0]", "task_id": "49_aa5722f6-33dd-46bf-954b-93a6a1c7a0a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of two given numbers.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_lcm(x, y): \n\treturn abs(x * y) // find_gcd(x, y)", "task_id": "45_8c97ac04-fba6-47eb-b44f-cbfc6e44c055", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_lcm(x, y): \n\treturn abs(x * y) // find_gcd(x, y) \ndef get_lcm(arr): \n\tlcm = arr[0] \n\tfor i in range(1, len(arr)): \n\t\tlcm = find_lcm(lcm, arr[i]) \n\treturn lcm", "task_id": "45_56ecd74c-83fd-4ee0-98bd-cb56852dc920", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the even numbers in the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_even_numbers(arr): \n\teven_numbers = [num for num in arr if num % 2 == 0] \n\tif not even_numbers: \n\t\treturn 0 \n\tgcd = even_numbers[0] \n\tfor num in even_numbers[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_e133b109-cd02-4af7-a99d-1a264def3c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the odd numbers in the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_odd_numbers(arr): \n\todd_numbers = [num for num in arr if num % 2 != 0] \n\tif not odd_numbers: \n\t\treturn 0 \n\tgcd = odd_numbers[0] \n\tfor num in odd_numbers[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_a15d5c32-c9e9-4963-88a0-0563b1d93cbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the prime numbers in the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef is_prime(n): \n\tif n <= 1: \n\t\treturn False \n\tfor i in range(2, int(n**0.5) + 1): \n\t\tif n % i == 0: \n\t\t\treturn False \n\treturn True \ndef find_gcd_of_primes(arr): \n\tprime_numbers = [num for num in arr if is_prime(num)] \n\tif not prime_numbers: \n\t\treturn 0 \n\tgcd = prime_numbers[0] \n\tfor num in prime_numbers[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_11a539fc-86f1-4bf7-9858-9cf21e47da48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the numbers in the given array that are multiples of a given number n.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_multiples_of_n(arr, n): \n\tmultiples_of_n = [num for num in arr if num % n == 0] \n\tif not multiples_of_n: \n\t\treturn 0 \n\tgcd = multiples_of_n[0] \n\tfor num in multiples_of_n[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_882651c6-fbef-438e-b4d4-a7bcd75cceb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the numbers in the given array that are not multiples of a given number n.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_non_multiples_of_n(arr, n): \n\tnon_multiples_of_n = [num for num in arr if num % n != 0] \n\tif not non_multiples_of_n: \n\t\treturn 0 \n\tgcd = non_multiples_of_n[0] \n\tfor num in non_multiples_of_n[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_e4545f38-4e0f-48b7-b0f3-7097f7320638", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the positive numbers in the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_positive_numbers(arr): \n\tpositive_numbers = [num for num in arr if num > 0] \n\tif not positive_numbers: \n\t\treturn 0 \n\tgcd = positive_numbers[0] \n\tfor num in positive_numbers[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_16bc4ba3-997a-49a3-b47f-cd6fb63e4f52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the negative numbers in the given array elements.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_negative_numbers(arr): \n\tnegative_numbers = [num for num in arr if num < 0] \n\tif not negative_numbers: \n\t\treturn 0 \n\tgcd = abs(negative_numbers[0]) \n\tfor num in negative_numbers[1:]: \n\t\tgcd = find_gcd(gcd, abs(num)) \n\treturn gcd", "task_id": "45_8de35772-d665-4d69-8f0a-ee8a674494ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the numbers in the given array that are greater than a given number n.", "code": "def find_gcd(x, y): \n\twhile(y): \n\t\tx, y = y, x % y \n\treturn x \ndef find_gcd_of_numbers_greater_than_n(arr, n): \n\tnumbers_greater_than_n = [num for num in arr if num > n] \n\tif not numbers_greater_than_n: \n\t\treturn 0 \n\tgcd = numbers_greater_than_n[0] \n\tfor num in numbers_greater_than_n[1:]: \n\t\tgcd = find_gcd(gcd, num) \n\treturn gcd", "task_id": "45_104b5e95-ec0c-42a5-911d-40789ec561fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set all even bits of a given number.", "code": "def even_bit_set_number(n):\n    count = 0; res = 0; temp = n\n    while temp > 0:\n        if count % 2 != 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n | res)", "task_id": "48_8eef1cc6-d11c-4de6-b84f-945c909c4ea1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all odd bits of a given number.", "code": "def clear_odd_bits(n):\n    count = 0; res = 0; temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n & res)", "task_id": "48_bc5b69b8-bc06-49ca-adcf-0cb1fd91bb4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all even bits of a given number.", "code": "def clear_even_bits(n):\n    count = 0; res = 0; temp = n\n    while temp > 0:\n        if count % 2 != 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n & res)", "task_id": "48_67e6582f-33ad-4f78-a27d-89b0d7194c93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all odd bits of a given number.", "code": "def toggle_odd_bits(n):\n    count = 0; res = 0; temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n ^ res)", "task_id": "48_388d92d1-f472-4482-8998-53a560aad657", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def toggle_even_bits(n):\n    count = 0; res = 0; temp = n\n    while temp > 0:\n        if count % 2 != 0:\n            res |= (1 << count)\n        count += 1\n        temp >>= 1\n    return (n ^ res)", "task_id": "48_60a8d22d-aa93-4693-9a8d-f3e0d157f9b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set all bits in a given range [start, end].", "code": "def set_bits_in_range(n, start, end):\n    for i in range(start, end + 1):\n        n |= (1 << i)\n    return n", "task_id": "48_3725351a-ed25-4d7c-be58-73825cd18a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all bits in a given range [start, end].", "code": "def clear_bits_in_range(n, start, end):\n    for i in range(start, end + 1):\n        n &= ~(1 << i)\n    return n", "task_id": "48_0a687b6c-b549-4615-82e2-51f55127c909", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits in a given range [start, end].", "code": "def toggle_bits_in_range(n, start, end):\n    for i in range(start, end + 1):\n        n ^= (1 << i)\n    return n", "task_id": "48_c2d76a1e-b4ad-49c3-a0a5-7b61f4f898e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in a given number.", "code": "def count_set_bits(n):\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "48_e8269e18-7705-4f76-8452-3373a4800a19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of clear bits in a given number.", "code": "def count_clear_bits(n):\n    count = 0; total_bits = n.bit_length()\n    while n > 0:\n        if n & 1 == 0:\n            count += 1\n        n >>= 1\n    return count + (total_bits - count - n.bit_length())", "task_id": "48_52f6c5c5-8b4c-45ee-b468-2c6e4e1adef2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle.", "code": "def triangle_area(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "52_4908e219-8c4f-4ce7-9cd3-623b1c169d54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a rectangle.", "code": "def rectangle_area(length: float, width: float) -> float:\n    return length * width", "task_id": "52_7d66ee77-9e45-4111-8f84-71e93d18e6d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle.", "code": "import math\n\ndef circle_area(radius: float) -> float:\n    return math.pi * radius ** 2", "task_id": "52_b9e1df96-7b1f-4a83-b9d0-0e3a86eb351b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a trapezoid.", "code": "def trapezoid_area(base1: float, base2: float, height: float) -> float:\n    return 0.5 * (base1 + base2) * height", "task_id": "52_ba8244b4-cc4a-47ba-a4b4-1144874cf758", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a rhombus.", "code": "def rhombus_area(diagonal1: float, diagonal2: float) -> float:\n    return 0.5 * diagonal1 * diagonal2", "task_id": "52_27a8d67a-eacb-4b36-a8fe-2cabcae2e32e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a square.", "code": "def square_area(side: float) -> float:\n    return side ** 2", "task_id": "52_7b8e1d89-8b57-4b14-a262-d7e7e8f663e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of an ellipse.", "code": "import math\n\ndef ellipse_area(a: float, b: float) -> float:\n    return math.pi * a * b", "task_id": "52_0f0f0a07-316f-494d-aa80-9c5eb120c02d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a sector of a circle.", "code": "import math\n\ndef sector_area(radius: float, angle: float) -> float:\n    return 0.5 * radius ** 2 * math.radians(angle)", "task_id": "52_00883065-310c-407e-a334-6d076e59b949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a regular polygon.", "code": "import math\n\ndef polygon_area(num_sides: int, side_length: float) -> float:\n    return (num_sides * side_length ** 2) / (4 * math.tan(math.pi / num_sides))", "task_id": "52_b44954d7-0083-4161-923d-ecbca1da49ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a regular hexagon.", "code": "import math\n\ndef hexagon_area(side: float) -> float:\n    return (3 * math.sqrt(3) * side ** 2) / 2", "task_id": "52_620adec2-9001-428b-b458-ccbda4f52763", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with maximum length using lambda function.", "code": "def max_length_list(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: len(i))\n    return (max_length, max_list)", "task_id": "50_072f71a4-4c63-4c97-a13c-858e4384b790", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a list of lists using lambda function.", "code": "def sum_of_elements(input_list):\n    return sum(map(lambda x: sum(x), input_list))", "task_id": "50_c4af7f2f-dee0-4812-afc6-c76d53254cd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum sum of elements using lambda function.", "code": "def list_with_max_sum(input_list):\n    max_sum_list = max(input_list, key=lambda x: sum(x))\n    max_sum = sum(max_sum_list)\n    return (max_sum, max_sum_list)", "task_id": "50_fb8b8609-7ddc-4868-8886-c9977a997df9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum sum of elements using lambda function.", "code": "def list_with_min_sum(input_list):\n    min_sum_list = min(input_list, key=lambda x: sum(x))\n    min_sum = sum(min_sum_list)\n    return (min_sum, min_sum_list)", "task_id": "50_57ada58b-26e6-49a9-a47f-44a63cc15f1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum average of elements using lambda function.", "code": "def list_with_max_avg(input_list):\n    max_avg_list = max(input_list, key=lambda x: sum(x)/len(x))\n    max_avg = sum(max_avg_list)/len(max_avg_list)\n    return (max_avg, max_avg_list)", "task_id": "50_e524d9bd-e07b-401c-99c6-1d666f6d3258", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum average of elements using lambda function.", "code": "def list_with_min_avg(input_list):\n    min_avg_list = min(input_list, key=lambda x: sum(x)/len(x))\n    min_avg = sum(min_avg_list)/len(min_avg_list)\n    return (min_avg, min_avg_list)", "task_id": "50_2491a7d7-8e52-4706-b997-7484565b8a8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum product of elements using lambda function.", "code": "from functools import reduce\n\ndef list_with_max_product(input_list):\n    max_product_list = max(input_list, key=lambda x: reduce(lambda a, b: a*b, x))\n    max_product = reduce(lambda a, b: a*b, max_product_list)\n    return (max_product, max_product_list)", "task_id": "50_5f1d6318-bb35-482e-b480-33f0fcb48ceb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum product of elements using lambda function.", "code": "from functools import reduce\n\ndef list_with_min_product(input_list):\n    min_product_list = min(input_list, key=lambda x: reduce(lambda a, b: a*b, x))\n    min_product = reduce(lambda a, b: a*b, min_product_list)\n    return (min_product, min_product_list)", "task_id": "50_af189d7a-bfe9-4148-9f03-07178b265c7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum count of even numbers using lambda function.", "code": "def list_with_max_even_count(input_list):\n    max_even_list = max(input_list, key=lambda x: sum(1 for i in x if i % 2 == 0))\n    max_even_count = sum(1 for i in max_even_list if i % 2 == 0)\n    return (max_even_count, max_even_list)", "task_id": "50_c2674196-98c1-4948-96b9-3792123bdbf9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum count of odd numbers using lambda function.", "code": "def list_with_min_odd_count(input_list):\n    min_odd_list = min(input_list, key=lambda x: sum(1 for i in x if i % 2 != 0))\n    min_odd_count = sum(1 for i in min_odd_list if i % 2 != 0)\n    return (min_odd_count, min_odd_list)", "task_id": "50_dc52fc8e-23dc-45db-a1ea-507e702804df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is isosceles or not.", "code": "def is_isosceles(x, y, z):\n  return x == y or y == z or x == z", "task_id": "51_84d542cc-2337-40e6-8703-9f389e341d53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is scalene or not.", "code": "def is_scalene(x, y, z):\n  return x != y and y != z and x != z", "task_id": "51_8ebb8fa0-3cfe-4d26-8886-cb1e3d475152", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is a right-angled triangle or not.", "code": "def is_right_angle(a, b, c):\n  sides = sorted([a, b, c])\n  return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "51_37e9ef51-7a74-4647-adc7-ff210ad01a39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides form a valid triangle or not.", "code": "def is_valid_triangle(a, b, c):\n  return a + b > c and a + c > b and b + c > a", "task_id": "51_ddc48f34-360f-45ba-a605-60b2e2b8fac2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the type of triangle (equilateral, isosceles, scalene).", "code": "def triangle_type(a, b, c):\n  if a == b == c:\n    return 'equilateral'\n  elif a == b or b == c or a == c:\n    return 'isosceles'\n  else:\n    return 'scalene'", "task_id": "51_66b1def7-e0bb-45a4-8098-21a2083e0fec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle given its three sides.", "code": "import math\n\ndef triangle_area(a, b, c):\n  s = (a + b + c) / 2\n  return math.sqrt(s * (s - a) * (s - b) * (s - c))", "task_id": "51_21466a3e-ed19-4f1e-a41b-10d2c2337583", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an obtuse triangle or not.", "code": "def is_obtuse(a, b, c):\n  sides = sorted([a, b, c])\n  return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "51_a0f87df9-2a7a-4cfd-932e-213f4d2ece13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an acute triangle or not.", "code": "def is_acute(a, b, c):\n  sides = sorted([a, b, c])\n  return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "51_a0ba8a06-3b2d-46e3-9453-a69dda40fcfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a triangle given its three sides.", "code": "def triangle_perimeter(a, b, c):\n  return a + b + c", "task_id": "51_95f096af-d889-432f-9e31-9f2b94f9b915", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides form a degenerate triangle or not.", "code": "def is_degenerate(a, b, c):\n  return a + b == c or a + c == b or b + c == a", "task_id": "51_982b22a4-dea0-4b86-8845-859bb99c33a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the second and second last characters of a given string are equal or not.", "code": "def check_SecondLast_Equality(s: str) -> str:\n  if len(s) < 2:\n    return 'Not Equal'\n  if s[1] == s[-2]:\n    return 'Equal'\n  else:\n    return 'Not Equal'", "task_id": "53_3d19bb2f-5883-473e-9e08-f5517d8337af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first character in uppercase and the last character in lowercase of a given string are equal or not.", "code": "def check_UpperLower_Equality(s: str) -> str:\n  if s[0].upper() == s[-1].lower():\n    return 'Equal'\n  else:\n    return 'Not Equal'", "task_id": "53_05f2d289-1e19-43f2-a6fa-49090be00ebd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and middle characters of a given string are equal or not.", "code": "def check_FirstMiddle_Equality(s: str) -> str:\n  if len(s) % 2 == 0:\n    return 'Not Equal'\n  middle = len(s) // 2\n  if s[0] == s[middle]:\n    return 'Equal'\n  else:\n    return 'Not Equal'", "task_id": "53_8a81c07d-18c9-4dd0-8b3c-5ce39bb7134d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are digits or not.", "code": "def check_FirstLast_Digit(s: str) -> str:\n  if s[0].isdigit() and s[-1].isdigit():\n    return 'Both are digits'\n  else:\n    return 'Not both digits'", "task_id": "53_1d8d86f7-d98f-458d-ba3b-474911a6b818", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are vowels or not.", "code": "def check_FirstLast_Vowel(s: str) -> str:\n  vowels = 'aeiouAEIOU'\n  if s[0] in vowels and s[-1] in vowels:\n    return 'Both are vowels'\n  else:\n    return 'Not both vowels'", "task_id": "53_2fe8ac79-6087-44f1-9919-888496316120", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are alphabets or not.", "code": "def check_FirstLast_Alphabet(s: str) -> str:\n  if s[0].isalpha() and s[-1].isalpha():\n    return 'Both are alphabets'\n  else:\n    return 'Not both alphabets'", "task_id": "53_17aba5c2-07a5-4a0b-9cd9-e478e9fca21a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are uppercase letters or not.", "code": "def check_FirstLast_Upper(s: str) -> str:\n  if s[0].isupper() and s[-1].isupper():\n    return 'Both are uppercase'\n  else:\n    return 'Not both uppercase'", "task_id": "53_169d4672-c619-403f-a8c2-aa946401a443", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are lowercase letters or not.", "code": "def check_FirstLast_Lower(s: str) -> str:\n  if s[0].islower() and s[-1].islower():\n    return 'Both are lowercase'\n  else:\n    return 'Not both lowercase'", "task_id": "53_455b949b-570c-4cbf-94d0-90f87463f94e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are special characters (non-alphanumeric) or not.", "code": "def check_FirstLast_Special(s: str) -> str:\n  if not s[0].isalnum() and not s[-1].isalnum():\n    return 'Both are special characters'\n  else:\n    return 'Not both special characters'", "task_id": "53_ede93057-4525-4a38-a30a-21eb7eec67a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first and last characters of a given string are of the same case (both uppercase or both lowercase) or not.", "code": "def check_FirstLast_SameCase(s: str) -> str:\n  if (s[0].isupper() and s[-1].isupper()) or (s[0].islower() and s[-1].islower()):\n    return 'Same case'\n  else:\n    return 'Different case'", "task_id": "53_79d3901f-db41-4f82-9f8c-5602f3519a8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of a geometric series.", "code": "def sum_gp(a, n, r):\n  if r == 1:\n    return a * n\n  else:\n    return a * (1 - r**n) / (1 - r)", "task_id": "55_61d848bb-16ed-43d9-aa87-6754e70bc63b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th term of an arithmetic series.", "code": "def nth_term_ap(a, n, d):\n  return a + (n - 1) * d", "task_id": "55_029707f4-a5d5-4d4d-8fae-803bd990ee8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of an arithmetic series.", "code": "def sum_ap(a, n, d):\n  return n * (2 * a + (n - 1) * d) // 2", "task_id": "55_6345255c-1f59-4177-ac05-4527a18df509", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n):\n  if n == 0:\n    return 1\n  else:\n    return n * factorial(n - 1)", "task_id": "55_30c91d99-3846-4032-9d4f-6a73cd0ab28d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th term of the Fibonacci sequence.", "code": "def fibonacci(n):\n  if n <= 1:\n    return n\n  else:\n    return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "55_09d6251f-9414-47d7-8c1c-fcee320dbbe1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is prime.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True", "task_id": "55_16e55f26-2329-46b6-8370-b16051dbbc1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a", "task_id": "55_80fda8a6-b5af-47d3-9f82-245a4b6c0a4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a, b):\n  def gcd(a, b):\n    while b:\n      a, b = b, a % b\n    return a\n  return abs(a * b) // gcd(a, b)", "task_id": "55_890f50c0-85a6-4f1e-96d3-623b0717d843", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s):\n  return s[::-1]", "task_id": "55_4a73b7fc-9286-49da-9c7b-1c3db7104281", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s):\n  return s == s[::-1]", "task_id": "55_e3b8f81b-5889-4dd2-89c8-b84dd1f4d54e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]", "task_id": "56_cf84642a-fdb5-4811-933c-986b13745744", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "56_a037a238-497a-4d10-ae53-483f3129ea9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is an Armstrong number.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)", "task_id": "56_58016c46-a8c0-4d27-8daa-4c927fd68a58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "56_cd94b397-b264-4e05-b53c-11336584353c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "56_8c7448d8-301e-4a35-99ec-2f0b52d5540d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "56_933a3e63-dab6-422e-a31d-6a73e2663b72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "56_eec845ec-8e6e-4b18-ac32-3e443fc69dfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "56_2caab910-0f32-49f6-86c9-ac3e505235d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the least common multiple (LCM) of two given numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "56_02e4c9e0-01ae-4aec-ac58-fbbc52ab0a5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "56_c3b52484-c61b-4011-b0ed-2a75f9c6bcf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest number in a list of integers.", "code": "def find_second_largest(arr: List[int]) -> int:\n    unique_arr = list(set(arr))\n    unique_arr.sort(reverse=True)\n    return unique_arr[1] if len(unique_arr) > 1 else None", "task_id": "57_d49c8a25-5cd5-409e-b240-14dbb1abd1df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest number that can be formed with the given digits.", "code": "def find_smallest_num(arr: List[int]) -> int:\n    arr.sort()\n    num = arr[0]\n    for i in range(1, len(arr)):\n        num = num * 10 + arr[i]\n    return num", "task_id": "57_8ab44bf1-831c-4be3-978d-afe2fe2801e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest even number that can be formed with the given digits.", "code": "def find_largest_even_num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] % 2 == 0:\n            even_digit = arr.pop(i)\n            num = int(''.join(map(str, arr))) * 10 + even_digit\n            return num\n    return -1", "task_id": "57_476ae5ce-3850-4619-a250-8eac017be6b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest odd number that can be formed with the given digits.", "code": "def find_largest_odd_num(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] % 2 != 0:\n            odd_digit = arr.pop(i)\n            num = int(''.join(map(str, arr))) * 10 + odd_digit\n            return num\n    return -1", "task_id": "57_8476a820-d114-4dcc-a5e9-77c42879f189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits in a list of integers.", "code": "def find_sum_of_digits(arr: List[int]) -> int:\n    return sum(arr)", "task_id": "57_9996491f-27c4-4a0b-9425-35ca09eeaf55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all digits in a list of integers.", "code": "def find_product_of_digits(arr: List[int]) -> int:\n    product = 1\n    for num in arr:\n        product *= num\n    return product", "task_id": "57_678e639b-632d-4bdb-bea5-67a7b415a932", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest palindrome number that can be formed with the given digits.", "code": "def find_largest_palindrome(arr: List[int]) -> int:\n    from itertools import permutations\n    max_palindrome = -1\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        if str(num) == str(num)[::-1]:\n            max_palindrome = max(max_palindrome, num)\n    return max_palindrome", "task_id": "57_26af86ee-2683-41f3-a68e-a4733488fa9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest prime number that can be formed with the given digits.", "code": "def find_largest_prime(arr: List[int]) -> int:\n    from itertools import permutations\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_prime = -1\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        if is_prime(num):\n            max_prime = max(max_prime, num)\n    return max_prime", "task_id": "57_2e099a6c-0a71-4dea-ad6e-50094be9d119", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest number that is a multiple of three and can be formed with the given digits.", "code": "def find_largest_multiple_of_three(arr: List[int]) -> int:\n    arr.sort(reverse=True)\n    num = int(''.join(map(str, arr)))\n    if num % 3 == 0:\n        return num\n    return -1", "task_id": "57_87470680-17f7-40f2-99c4-302d2f8960ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest number that can be formed with the given digits such that the sum of its digits equals a given target sum.", "code": "def find_largest_num_with_sum(arr: List[int], target_sum: int) -> int:\n    from itertools import permutations\n    max_num = -1\n    for perm in permutations(arr):\n        num = int(''.join(map(str, perm)))\n        if sum(map(int, str(num))) == target_sum:\n            max_num = max(max_num, num)\n    return max_num", "task_id": "57_62330ea9-a290-48bb-93fc-ec51b09be4a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is even.", "code": "def is_even(x: int) -> bool:\n    return x % 2 == 0", "task_id": "58_f9116a77-3a2f-407b-9dc1-56e3afb48ea4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is odd.", "code": "def is_odd(x: int) -> bool:\n    return x % 2 != 0", "task_id": "58_35f084dc-59e0-40d5-b421-c6d2382cc643", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is positive.", "code": "def is_positive(x: int) -> bool:\n    return x > 0", "task_id": "58_ff22363d-3ca0-4f59-85ec-34b099d72517", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is negative.", "code": "def is_negative(x: int) -> bool:\n    return x < 0", "task_id": "58_176363ab-2110-417a-ab34-93865f7edf51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is a multiple of five.", "code": "def is_multiple_of_five(x: int) -> bool:\n    return x % 5 == 0", "task_id": "58_7c218a78-048b-4b90-9caf-928970e28fb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer x is divisible by another integer y.", "code": "def is_divisible_by(x: int, y: int) -> bool:\n    return x % y == 0", "task_id": "58_9603a24a-88fb-40c9-ac86-c685eeb00070", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is a prime number.", "code": "def is_prime(x: int) -> bool:\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True", "task_id": "58_a3774023-70e9-465d-8614-bcde396b84ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "58_1b1ca753-11ca-4191-9911-5cd52cbe5935", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "58_52b8a460-bda3-4cce-a495-15749644faa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer is a power of two.", "code": "def is_power_of_two(x: int) -> bool:\n    return x > 0 and (x & (x - 1)) == 0", "task_id": "58_c8a3e322-6d53-4843-8d2a-9df83c53e32b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth hexagonal number.", "code": "def is_hexagonal(n):\n\treturn n * (2 * n - 1)", "task_id": "59_5236a186-87eb-45d1-a0a0-c10747357d9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth pentagonal number.", "code": "def is_pentagonal(n):\n\treturn n * (3 * n - 1) // 2", "task_id": "59_51d8b54e-f327-4ace-877b-86e108975ace", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def is_triangular(n):\n\treturn n * (n + 1) // 2", "task_id": "59_7cf04bfd-a901-4f81-a86c-ad9cf3ee925b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def is_square(n):\n\treturn n * n", "task_id": "59_6d54fa73-260c-491b-8e9b-a80ee5fee9ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth cubic number.", "code": "def is_cubic(n):\n\treturn n * n * n", "task_id": "59_1e89614a-3d78-44b8-b0fd-539abe50703a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def is_tetrahedral(n):\n\treturn n * (n + 1) * (n + 2) // 6", "task_id": "59_d5e4ad61-5317-41cc-aec4-0aed7bba8460", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth star number.", "code": "def is_star(n):\n\treturn 6 * n * (n - 1) + 1", "task_id": "59_80ffe294-3ad9-458c-ac07-e59030f534d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered square number.", "code": "def is_centered_square(n):\n\treturn n * n + (n - 1) * (n - 1)", "task_id": "59_b1531052-770e-4642-bd05-c61f8d36d709", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered hexagonal number.", "code": "def is_centered_hexagonal(n):\n\treturn 3 * n * (n - 1) + 1", "task_id": "59_461c4468-d140-4729-8a76-02075476bd50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered triangular number.", "code": "def is_centered_triangular(n):\n\treturn 3 * n * (n + 1) // 2 + 1", "task_id": "59_769dda92-7dc8-4bb9-9f4b-a5878a7028eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "54_3aec43f5-daf2-427e-9d8a-dbeec288f5e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "54_883dd3ff-d139-414f-946d-75aaf28081c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "54_e26718cd-a5cb-4941-91d2-9ce39b6183e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using merge sort.", "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr", "task_id": "54_96221314-23ad-45fc-80f8-bb97b76eab2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quick_sort(left) + middle + quick_sort(right)", "task_id": "54_b6b1721c-c1e3-444a-b2b5-cb30a6707d67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using heap sort.", "code": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr", "task_id": "54_ed6081ab-ee15-468a-93f3-57a66482a283", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using radix sort.", "code": "def counting_sort_for_radix(arr, exp1):\n    n = len(arr)\n    output = [0] * (n)\n    count = [0] * (10)\n    for i in range(0, n):\n        index = (arr[i] // exp1)\n        count[(index) % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = (arr[i] // exp1)\n        output[count[(index) % 10] - 1] = arr[i]\n        count[(index) % 10] -= 1\n        i -= 1\n    for i in range(0, len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr", "task_id": "54_f72d0e28-e5a8-4c4b-a493-96dce3769a78", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using shell sort.", "code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "task_id": "54_fc6580de-2a68-4588-a1bf-aba67148fb75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using bucket sort.", "code": "def bucket_sort(arr):\n    bucket = []\n    slot_num = 10\n    for i in range(slot_num):\n        bucket.append([])\n    for j in arr:\n        index_b = int(slot_num * j)\n        bucket[index_b].append(j)\n    for i in range(slot_num):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(slot_num):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n    return arr", "task_id": "54_c3169972-3e6a-4037-90da-763f7a47defe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array using gnome sort.", "code": "def gnome_sort(arr):\n    index = 0\n    n = len(arr)\n    while index < n:\n        if index == 0:\n            index += 1\n        if arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr", "task_id": "54_76d89c19-3f3e-46c7-ab0b-15a96e92e736", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of all elements in the given array.", "code": "def sum_of_squares(arr: list[int]) -> int:\n    return sum(x**2 for x in arr)", "task_id": "60_1e4602ae-3543-44d2-bcd4-72ed57eabedc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a contiguous subarray within a given array.", "code": "def max_product_subarray(arr: list[int]) -> int:\n    max_product = float('-inf')\n    current_product = 1\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if current_product == 0:\n            current_product = 1\n    return max_product", "task_id": "60_d55c439a-d122-4bda-9d99-298019bbfd42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in the given array.", "code": "def longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    lis = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                lis[i] = max(lis[i], lis[j] + 1)\n    return max(lis)", "task_id": "60_a2d53d92-343b-4de9-83d8-06155c79036a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all even elements in the given array.", "code": "def sum_of_even_elements(arr: list[int]) -> int:\n    return sum(x for x in arr if x % 2 == 0)", "task_id": "60_915bceef-752b-41bc-a137-22a415fc8733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of distinct elements in the given array.", "code": "def count_distinct_elements(arr: list[int]) -> int:\n    return len(set(arr))", "task_id": "60_e421b3b7-1d88-4c73-8233-f789bb2691ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the given array.", "code": "def reverse_array(arr: list[int]) -> list[int]:\n    return arr[::-1]", "task_id": "60_ea6361d9-f6f9-4895-b22c-a11158c2fca9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr: list[int], n: int) -> int:\n    total = n * (n + 1) // 2\n    return total - sum(arr)", "task_id": "60_4c253841-7a24-443e-a27f-c491c2d3bca1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in the given array.", "code": "def second_largest(arr: list[int]) -> int:\n    first, second = float('-inf'), float('-inf')\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second", "task_id": "60_2cb9b020-cf7e-473e-bb18-42aa85228255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate the given array to the right by k steps.", "code": "def rotate_array(arr: list[int], k: int) -> list[int]:\n    k = k % len(arr)\n    return arr[-k:] + arr[:-k]", "task_id": "60_415df507-585d-4168-b2d3-c34967da2c6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "60_2c8ddaf7-13da-45c4-9404-08dc147a7665", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum difference between available pairs in the given tuple list.", "code": "def find_min_difference(pairs):\n    temp = [abs(b - a) for a, b in pairs]\n    res = min(temp)\n    return res", "task_id": "63_44cfe0a9-c3ef-470b-b406-7ab2e9780553", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of differences between available pairs in the given tuple list.", "code": "def sum_of_differences(pairs):\n    temp = [abs(b - a) for a, b in pairs]\n    res = sum(temp)\n    return res", "task_id": "63_76704a94-2f78-408b-b16b-3252ee417ef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average difference between available pairs in the given tuple list.", "code": "def average_difference(pairs):\n    temp = [abs(b - a) for a, b in pairs]\n    res = sum(temp) / len(temp)\n    return res", "task_id": "63_4db96e4c-67cc-4e03-92c4-8de41549cfdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the maximum sum in the given tuple list.", "code": "def max_sum_pair(pairs):\n    res = max(pairs, key=lambda x: x[0] + x[1])\n    return res", "task_id": "63_a0adebf7-a58c-453e-a158-a38c3760bb65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the minimum sum in the given tuple list.", "code": "def min_sum_pair(pairs):\n    res = min(pairs, key=lambda x: x[0] + x[1])\n    return res", "task_id": "63_b1766bf2-d2ee-48d8-8402-0f127730a325", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the maximum product in the given tuple list.", "code": "def max_product_pair(pairs):\n    res = max(pairs, key=lambda x: x[0] * x[1])\n    return res", "task_id": "63_1521bae4-70c8-45ff-aedf-da9375b3c311", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the minimum product in the given tuple list.", "code": "def min_product_pair(pairs):\n    res = min(pairs, key=lambda x: x[0] * x[1])\n    return res", "task_id": "63_ce514d48-b8d7-4b52-a323-6fa1a74e9c8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the maximum absolute values sum in the given tuple list.", "code": "def max_absolute_pair(pairs):\n    res = max(pairs, key=lambda x: abs(x[0]) + abs(x[1]))\n    return res", "task_id": "63_5e6c7c71-d544-4d21-88f1-37ce5f871c73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair with the minimum absolute values sum in the given tuple list.", "code": "def min_absolute_pair(pairs):\n    res = min(pairs, key=lambda x: abs(x[0]) + abs(x[1]))\n    return res", "task_id": "63_69f8090e-1b35-4c7f-8294-b20788f56a8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of differences between available pairs in the given tuple list.", "code": "def sum_of_squares(pairs):\n    temp = [(b - a) ** 2 for a, b in pairs]\n    res = sum(temp)\n    return res", "task_id": "63_dda5b95c-c022-4152-bb8c-f4832eb4118d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain all the vowels at least once.", "code": "def count_vowel_substrings(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(s)):\n        found_vowels = set()\n        for j in range(i, len(s)):\n            if s[j] in vowels:\n                found_vowels.add(s[j])\n            if found_vowels == vowels:\n                count += 1\n    return count", "task_id": "61_9bfa2bfd-72d2-413e-9d20-7917ea3021cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic substrings in a given string.", "code": "def count_palindromic_substrings(s: str) -> int:\n    def is_palindrome(sub: str) -> bool:\n        return sub == sub[::-1]\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if is_palindrome(s[i:j+1]):\n                count += 1\n    return count", "task_id": "61_d54d85d2-b32c-4511-bbea-090e906e9fd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where all digits are even.", "code": "def count_even_digit_substrings(s: str) -> int:\n    def all_even(sub: str) -> bool:\n        return all(int(c) % 2 == 0 for c in sub)\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if all_even(s[i:j+1]):\n                count += 1\n    return count", "task_id": "61_ad399688-9f8e-4f71-8c99-3af36c9797f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings with all distinct characters.", "code": "def count_distinct_char_substrings(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        seen = set()\n        for j in range(i, len(s)):\n            if s[j] in seen:\n                break\n            seen.add(s[j])\n            count += 1\n    return count", "task_id": "61_0ba14d9e-018c-4e8b-a703-7646269954c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings with exactly k distinct characters.", "code": "def count_substrings_with_k_distinct(s: str, k: int) -> int:\n    from collections import defaultdict\n    count = 0\n    for i in range(len(s)):\n        char_count = defaultdict(int)\n        distinct_count = 0\n        for j in range(i, len(s)):\n            if char_count[s[j]] == 0:\n                distinct_count += 1\n            char_count[s[j]] += 1\n            if distinct_count == k:\n                count += 1\n            elif distinct_count > k:\n                break\n    return count", "task_id": "61_6b824e4c-7445-4fd7-945f-69b73030f461", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where the sum of digits is odd.", "code": "def count_substrings_with_odd_sum(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        sum_digits = 0\n        for j in range(i, len(s)):\n            sum_digits += int(s[j])\n            if sum_digits % 2 != 0:\n                count += 1\n    return count", "task_id": "61_3b6823f3-f013-4ca2-a4fc-98b67837f462", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where the sum of digits is a prime number.", "code": "def count_substrings_with_prime_sum(s: str) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(len(s)):\n        sum_digits = 0\n        for j in range(i, len(s)):\n            sum_digits += int(s[j])\n            if is_prime(sum_digits):\n                count += 1\n    return count", "task_id": "61_603ab1fe-3bee-4b14-a896-0d8e4670e493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings with no repeating characters.", "code": "def count_substrings_with_no_repeating_chars(s: str) -> int:\n    count = 0\n    for i in range(len(s)):\n        seen = set()\n        for j in range(i, len(s)):\n            if s[j] in seen:\n                break\n            seen.add(s[j])\n            count += 1\n    return count", "task_id": "61_eeffc52c-498b-4807-b45e-3204d3be059f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain at least one vowel.", "code": "def count_substrings_with_at_least_one_vowel(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(s)):\n        has_vowel = False\n        for j in range(i, len(s)):\n            if s[j] in vowels:\n                has_vowel = True\n            if has_vowel:\n                count += 1\n    return count", "task_id": "61_9cd83993-b9da-445f-a956-f16baff20a26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain at least one consonant.", "code": "def count_substrings_with_at_least_one_consonant(s: str) -> int:\n    vowels = set('aeiou')\n    count = 0\n    for i in range(len(s)):\n        has_consonant = False\n        for j in range(i, len(s)):\n            if s[j] not in vowels:\n                has_consonant = True\n            if has_consonant:\n                count += 1\n    return count", "task_id": "61_21232a8a-6e7e-45f7-aefc-f4d17f5e45b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the second element in each sublist using a lambda function.", "code": "def sort_by_second_element(lst):\n    lst.sort(key=lambda x: x[1])\n    return lst", "task_id": "64_ff7f75c9-552c-45a5-ac7c-e57fcc2a4257", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their lengths using a lambda function.", "code": "def sort_by_length(lst):\n    lst.sort(key=lambda x: len(x))\n    return lst", "task_id": "64_07c1848f-9ad8-440d-8e01-d3a0391af97a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their last character using a lambda function.", "code": "def sort_by_last_char(lst):\n    lst.sort(key=lambda x: x[-1])\n    return lst", "task_id": "64_f330c0e4-8fa4-4864-9363-ef9489dd21e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by their absolute values using a lambda function.", "code": "def sort_by_absolute_value(lst):\n    lst.sort(key=lambda x: abs(x))\n    return lst", "task_id": "64_f8cc06b2-c296-45fe-81d3-855f889e2629", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their second character using a lambda function.", "code": "def sort_by_second_char(lst):\n    lst.sort(key=lambda x: x[1] if len(x) > 1 else '')\n    return lst", "task_id": "64_d93e5c2a-a255-460d-8118-c096a6176115", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples by the sum of their elements using a lambda function.", "code": "def sort_by_tuple_sum(lst):\n    lst.sort(key=lambda x: sum(x))\n    return lst", "task_id": "64_ab305aac-20bf-4028-b1b4-11090e4b38f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of vowels in each string using a lambda function.", "code": "def sort_by_vowel_count(lst):\n    lst.sort(key=lambda x: sum(1 for char in x if char in 'aeiouAEIOU'))\n    return lst", "task_id": "64_6cda0e65-4a83-4842-aece-25f34cb6bb47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by the sum of their digits using a lambda function.", "code": "def sort_by_digit_sum(lst):\n    lst.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    return lst", "task_id": "64_13c345c6-33cd-47db-a797-ec67fdc534b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of words in each string using a lambda function.", "code": "def sort_by_word_count(lst):\n    lst.sort(key=lambda x: len(x.split()))\n    return lst", "task_id": "64_a9293913-f182-4682-a2f8-4f4c4d3c4d30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the position of the first vowel in each string using a lambda function.", "code": "def sort_by_first_vowel(lst):\n    lst.sort(key=lambda x: next((i for i, char in enumerate(x) if char in 'aeiouAEIOU'), len(x)))\n    return lst", "task_id": "64_10af2451-9134-4f4f-8796-0e6597093ce4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the product of all numbers in a nested list using recursion.", "code": "def recursive_list_product(data_list):\n\ttotal = 1\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\ttotal *= recursive_list_product(element)\n\t\telse:\n\t\t\ttotal *= element\n\treturn total", "task_id": "65_3b08a443-15a1-4b93-93dd-6777ec7caa6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds the maximum number in a nested list using recursion.", "code": "def recursive_list_max(data_list):\n\tmax_val = float('-inf')\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\tmax_val = max(max_val, recursive_list_max(element))\n\t\telse:\n\t\t\tmax_val = max(max_val, element)\n\treturn max_val", "task_id": "65_7836f14e-41f6-472c-a3e9-c32e3aafef49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds the minimum number in a nested list using recursion.", "code": "def recursive_list_min(data_list):\n\tmin_val = float('inf')\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\tmin_val = min(min_val, recursive_list_min(element))\n\t\telse:\n\t\t\tmin_val = min(min_val, element)\n\treturn min_val", "task_id": "65_b3fe18a3-2e49-4b21-bdf0-54d260c67f34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the depth of a nested list using recursion.", "code": "def recursive_list_depth(data_list):\n\tmax_depth = 1\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\tmax_depth = max(max_depth, 1 + recursive_list_depth(element))\n\treturn max_depth", "task_id": "65_4c47ba40-68bd-4f3c-a3d7-40826b8457d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that flattens a nested list using recursion.", "code": "def recursive_list_flatten(data_list):\n\tflat_list = []\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\tflat_list.extend(recursive_list_flatten(element))\n\t\telse:\n\t\t\tflat_list.append(element)\n\treturn flat_list", "task_id": "65_0ac451ba-bde6-435c-848c-97b9869f49ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that counts the total number of elements in a nested list using recursion.", "code": "def recursive_list_count(data_list):\n\ttotal_count = 0\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\ttotal_count += recursive_list_count(element)\n\t\telse:\n\t\t\ttotal_count += 1\n\treturn total_count", "task_id": "65_d30c3888-b631-48d2-8005-59acc7c04471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that checks if a target number is present in a nested list using recursion.", "code": "def recursive_list_contains(data_list, target):\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\tif recursive_list_contains(element, target):\n\t\t\t\treturn True\n\t\telif element == target:\n\t\t\treturn True\n\treturn False", "task_id": "65_c3afdd64-6e8a-46b2-af5e-2f6ffb648db4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that reverses a nested list using recursion.", "code": "def recursive_list_reverse(data_list):\n\treversed_list = []\n\tfor element in reversed(data_list):\n\t\tif type(element) == list:\n\t\t\treversed_list.append(recursive_list_reverse(element))\n\t\telse:\n\t\t\treversed_list.append(element)\n\treturn reversed_list", "task_id": "65_a00c521a-c6d8-4e80-baee-ceac47945de6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the sum of all even numbers in a nested list using recursion.", "code": "def recursive_list_sum_even(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\ttotal += recursive_list_sum_even(element)\n\t\telif element % 2 == 0:\n\t\t\ttotal += element\n\treturn total", "task_id": "65_5ad90885-ef3f-4532-a27d-d38f5fc2be51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the sum of all odd numbers in a nested list using recursion.", "code": "def recursive_list_sum_odd(data_list):\n\ttotal = 0\n\tfor element in data_list:\n\t\tif type(element) == list:\n\t\t\ttotal += recursive_list_sum_odd(element)\n\t\telif element % 2 != 0:\n\t\t\ttotal += element\n\treturn total", "task_id": "65_ecc73483-d38e-42f9-852e-c0125fcc7801", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest number in a list.", "code": "def largest_num(xs):\n  return max(xs)", "task_id": "62_aca9fea6-4fff-43b1-9f21-57a2deb9388a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all numbers in a list.", "code": "def sum_of_list(xs):\n  return sum(xs)", "task_id": "62_6cd75ac7-c1eb-4422-924c-fafc4005e75d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of all numbers in a list.", "code": "def average_of_list(xs):\n  return sum(xs) / len(xs)", "task_id": "62_a3485b56-665a-4f52-b8ab-50a920964a97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a list.", "code": "def count_even_numbers(xs):\n  return len([x for x in xs if x % 2 == 0])", "task_id": "62_48b4ff95-42cd-4848-b97a-b66714365ea1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in a list.", "code": "def count_odd_numbers(xs):\n  return len([x for x in xs if x % 2 != 0])", "task_id": "62_dc6f08e5-13f2-4cc6-bcfb-205b623025eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all numbers in a list.", "code": "def product_of_list(xs):\n  product = 1\n  for x in xs:\n    product *= x\n  return product", "task_id": "62_86962cf0-e2a6-4850-9936-c622a5612df9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second smallest number in a list.", "code": "def second_smallest_num(xs):\n  return sorted(xs)[1]", "task_id": "62_77f78bee-a04d-4853-be4a-ff34f06f8927", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest number in a list.", "code": "def second_largest_num(xs):\n  return sorted(xs)[-2]", "task_id": "62_d0569c18-6acf-469c-9934-e11be146aee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate numbers from a list.", "code": "def remove_duplicates(xs):\n  return list(set(xs))", "task_id": "62_f2dcd22f-cc6d-4b4b-8d24-7decda7b5d3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of elements in a list.", "code": "def reverse_list(xs):\n  return xs[::-1]", "task_id": "62_540779b2-d318-4e6f-a6d2-2cd4d1aa9f41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array is sorted in non-decreasing order.", "code": "def is_sorted(A): \n    return all(A[i] <= A[i + 1] for i in range(len(A) - 1))", "task_id": "68_9e732e60-54f9-4afe-8ee6-1e52f438aa6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array is sorted in non-increasing order.", "code": "def is_sorted_desc(A): \n    return all(A[i] >= A[i + 1] for i in range(len(A) - 1))", "task_id": "68_c02dc4e8-7dc9-4a0f-b00d-37dd94faca81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array alternates between increasing and decreasing.", "code": "def is_alternating(A): \n    return all((A[i] < A[i + 1] and A[i + 1] > A[i + 2]) or (A[i] > A[i + 1] and A[i + 1] < A[i + 2]) for i in range(len(A) - 2))", "task_id": "68_c2423fb0-1653-49f5-bc21-83d3afa468fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array is palindromic.", "code": "def is_palindromic(A): \n    return A == A[::-1]", "task_id": "68_b6b8946d-ead7-4c56-b620-df35f4a0228f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in the given array are unique.", "code": "def is_unique(A): \n    return len(A) == len(set(A))", "task_id": "68_ea29ab04-67d8-4dc5-a25a-0d492c2b42ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array forms an arithmetic sequence.", "code": "def is_arithmetic_sequence(A): \n    if len(A) < 2: \n        return True \n    diff = A[1] - A[0] \n    return all(A[i + 1] - A[i] == diff for i in range(1, len(A) - 1))", "task_id": "68_0b6dae69-b867-4755-98c6-6705acbf2cf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array forms a geometric sequence.", "code": "def is_geometric_sequence(A): \n    if len(A) < 2: \n        return True \n    if A[0] == 0: \n        return False \n    ratio = A[1] / A[0] \n    return all(A[i + 1] / A[i] == ratio for i in range(1, len(A) - 1))", "task_id": "68_d87e8655-eb4e-4c0f-83ae-5b225cc2af1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given array forms a Fibonacci sequence.", "code": "def is_fibonacci_sequence(A): \n    if len(A) < 3: \n        return True \n    return all(A[i] == A[i - 1] + A[i - 2] for i in range(2, len(A)))", "task_id": "68_24302454-fe60-4456-b809-024686fe84d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in the given array are prime numbers.", "code": "def is_prime_sequence(A): \n    def is_prime(n): \n        if n <= 1: \n            return False \n        for i in range(2, int(n ** 0.5) + 1): \n            if n % i == 0: \n                return False \n        return True \n    return all(is_prime(x) for x in A)", "task_id": "68_db4ff46e-dda7-4b57-9b7d-e0391c0125cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in the given array are even numbers.", "code": "def is_even_sequence(A): \n    return all(x % 2 == 0 for x in A)", "task_id": "68_310ffbef-887e-4513-bc6a-410f66d0485b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count negative numbers in a list.", "code": "def neg_count(lst):\n  neg_count = 0\n  for num in lst:\n    if num < 0:\n      neg_count += 1\n  return neg_count", "task_id": "66_b8004f82-6632-4004-ad78-99a5efcdb07a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count even numbers in a list.", "code": "def even_count(lst):\n  even_count = 0\n  for num in lst:\n    if num % 2 == 0:\n      even_count += 1\n  return even_count", "task_id": "66_ce359000-1c3d-490f-b9d2-51abb9efdf4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count odd numbers in a list.", "code": "def odd_count(lst):\n  odd_count = 0\n  for num in lst:\n    if num % 2 != 0:\n      odd_count += 1\n  return odd_count", "task_id": "66_64670c95-1d01-42ee-983d-505efc84a501", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count zeros in a list.", "code": "def zero_count(lst):\n  zero_count = 0\n  for num in lst:\n    if num == 0:\n      zero_count += 1\n  return zero_count", "task_id": "66_343dd92c-88df-4ced-bc8e-b114cd3968df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers greater than a given threshold in a list.", "code": "def greater_than_count(lst, threshold):\n  count = 0\n  for num in lst:\n    if num > threshold:\n      count += 1\n  return count", "task_id": "66_40564487-c206-46e3-b2c2-67d270532f93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers less than a given threshold in a list.", "code": "def less_than_count(lst, threshold):\n  count = 0\n  for num in lst:\n    if num < threshold:\n      count += 1\n  return count", "task_id": "66_c075103d-80e2-40ce-ae78-ff9ec8a52bf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers within a given range (inclusive) in a list.", "code": "def count_in_range(lst, low, high):\n  count = 0\n  for num in lst:\n    if low <= num <= high:\n      count += 1\n  return count", "task_id": "66_beaca730-7a6d-4e42-9aa9-1dec871bc3fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers divisible by a given divisor in a list.", "code": "def count_divisible_by(lst, divisor):\n  count = 0\n  for num in lst:\n    if num % divisor == 0:\n      count += 1\n  return count", "task_id": "66_de1b3ca6-c9c5-4bfd-983b-092166b43e3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers not divisible by a given divisor in a list.", "code": "def count_non_divisible_by(lst, divisor):\n  count = 0\n  for num in lst:\n    if num % divisor != 0:\n      count += 1\n  return count", "task_id": "66_206f26d4-3e3c-4f15-a82e-a367a6f05487", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count unique numbers in a list.", "code": "def count_unique(lst):\n  return len(set(lst))", "task_id": "66_21b590cc-0bb0-4a72-998b-a4ba8edc6c44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all strings in a list have the same length.", "code": "def check_all_strings_same_length(strings: list[str]) -> bool:\n    if not strings:\n        return True\n    length = len(strings[0])\n    for string in strings:\n        if len(string) != length:\n            return False\n    return True", "task_id": "70_7b9b62e3-b32c-4214-9706-39c83df51e0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all lists in a list of lists have the same length.", "code": "def check_all_lists_same_length(lists: list[list[int]]) -> bool:\n    if not lists:\n        return True\n    length = len(lists[0])\n    for lst in lists:\n        if len(lst) != length:\n            return False\n    return True", "task_id": "70_091dd910-3012-44dd-a404-1f856a40608f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all dictionaries in a list have the same number of keys.", "code": "def check_all_dicts_same_length(dicts: list[dict]) -> bool:\n    if not dicts:\n        return True\n    length = len(dicts[0])\n    for d in dicts:\n        if len(d) != length:\n            return False\n    return True", "task_id": "70_0504319e-44d5-4b38-a7a4-6360c1a62df4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all sets in a list of sets have the same number of elements.", "code": "def check_all_sets_same_length(sets: list[set]) -> bool:\n    if not sets:\n        return True\n    length = len(sets[0])\n    for s in sets:\n        if len(s) != length:\n            return False\n    return True", "task_id": "70_3eb458d4-f270-45d1-a69f-d7a86b7bb7a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all strings in a list are either all uppercase or all lowercase.", "code": "def check_all_strings_same_case(strings: list[str]) -> bool:\n    if not strings:\n        return True\n    all_upper = all(s.isupper() for s in strings)\n    all_lower = all(s.islower() for s in strings)\n    return all_upper or all_lower", "task_id": "70_f6af1792-b4b8-407c-8c17-9f5985229bee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all numbers in a list are even.", "code": "def check_all_numbers_even(numbers: list[int]) -> bool:\n    return all(n % 2 == 0 for n in numbers)", "task_id": "70_28e831dd-ad85-4859-a05b-ed263b08cc93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all numbers in a list are positive.", "code": "def check_all_numbers_positive(numbers: list[int]) -> bool:\n    return all(n > 0 for n in numbers)", "task_id": "70_556870b0-1b1a-4973-840d-8610b864f5e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in a list are of the same type.", "code": "def check_all_elements_same_type(elements: list) -> bool:\n    if not elements:\n        return True\n    first_type = type(elements[0])\n    return all(isinstance(e, first_type) for e in elements)", "task_id": "70_fe719728-76c2-43aa-a8fd-c0a9d3d536c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all strings in a list start with a vowel.", "code": "def check_all_strings_start_with_vowel(strings: list[str]) -> bool:\n    vowels = 'AEIOUaeiou'\n    return all(s[0] in vowels for s in strings if s)", "task_id": "70_5ee65aca-cd1f-4429-9adf-c4d2626e2e15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all strings in a list are palindromes.", "code": "def check_all_strings_palindromes(strings: list[str]) -> bool:\n    return all(s == s[::-1] for s in strings)", "task_id": "70_db43a19d-2023-4d36-8da8-691aaa2a0557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the Stirling number of the second kind, which represents the number of ways to partition a set of n elements into k non-empty subsets.", "code": "def stirling_number(n, k):\n    if k == 0 or k > n:\n        return 0\n    if k == 1 or k == n:\n        return 1\n    return k * stirling_number(n-1, k) + stirling_number(n-1, k-1)", "task_id": "67_0332871e-cb64-4962-829c-713c078ec4e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Catalan number, which represents the number of ways to correctly match n pairs of parentheses.", "code": "def catalan_number(n):\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0], catalan[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]", "task_id": "67_9fe904c9-d296-4db7-9e7f-7b1665ea6be8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "67_72bd5f2b-e251-4921-84e7-ee4ad499a370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "67_bd798f52-5836-4ca4-aaf2-a1ec70d2f5ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the binomial coefficient C(n, k), which represents the number of ways to choose k elements from a set of n elements.", "code": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c", "task_id": "67_cb0eade7-6b87-4e3a-a9a2-1c09d45a5223", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n rows of Pascal's triangle.", "code": "def pascal_triangle(n):\n    triangle = []\n    for i in range(n):\n        row = [1] * (i + 1)\n        for j in range(1, i):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle", "task_id": "67_01567bb1-0deb-4ccf-bf0e-5305ef80c6f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Lucas number.", "code": "def lucas_number(n):\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    a, b = 2, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "67_0a03cfe3-7229-4c41-9bd3-bb907cd99e1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tribonacci number, where each term is the sum of the three preceding ones, starting from 0, 1, and 1.", "code": "def tribonacci(n):\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    a, b, c = 0, 1, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c", "task_id": "67_14005788-21f4-41b9-b7f5-0fc01ee168be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of ways to partition a number n into sums of positive integers.", "code": "def partition_number(n):\n    partitions = [0] * (n + 1)\n    partitions[0] = 1\n    for i in range(1, n + 1):\n        for j in range(i, n + 1):\n            partitions[j] += partitions[j - i]\n    return partitions[n]", "task_id": "67_c13167de-1a58-4ee1-abfc-dd5d1dc9d84d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of derangements (permutations with no fixed points) of n elements.", "code": "def derangement_number(n):\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    derangements = [0] * (n + 1)\n    derangements[0], derangements[1] = 1, 0\n    for i in range(2, n + 1):\n        derangements[i] = (i - 1) * (derangements[i - 1] + derangements[i - 2])\n    return derangements[n]", "task_id": "67_d2d0b9cc-53db-435e-8e5b-cd73375cb1b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the reversed version of a given sublist.", "code": "def is_sublist_reversed(l, s):\n\ts = s[::-1]\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif s == l:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "task_id": "69_44ddc1d8-941a-4a24-a421-a6e00c3a9233", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist with a specified gap between elements.", "code": "def is_sublist_with_gap(l, s, gap):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (i + n * (gap + 1) < len(l)) and (l[i + n * (gap + 1)] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "task_id": "69_8582735a-a5fe-440f-b0e7-82007159bed2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist with one element replaced by a specified value.", "code": "def is_sublist_with_replacement(l, s, replacement):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0] or l[i] == replacement:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n] or l[i+n] == replacement):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "task_id": "69_9bf4ae8c-51c3-42f0-a7f7-b1f987bde090", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist with a specified number of elements skipped between each element of the sublist.", "code": "def is_sublist_with_skip(l, s, skip):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (i + n * (skip + 1) < len(l)) and (l[i + n * (skip + 1)] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "task_id": "69_cab17113-1918-432b-91ec-27e4844749d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist or any of its rotations.", "code": "def is_sublist_with_rotation(l, s):\n\tdef rotate(lst):\n\t\treturn lst[1:] + lst[:1]\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor _ in range(len(s)):\n\t\t\tif is_sublist(l, s):\n\t\t\t\tsub_set = True\n\t\t\t\ts = rotate(s)\n\treturn sub_set", "task_id": "69_95e0fb18-e4f9-4960-bc96-2d7cd4d8bb07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist allowing for duplicate elements in the sublist.", "code": "def is_sublist_with_duplicates(l, s):\n\tsub_set = False\n\tif s == []:\n\t\tsub_set = True\n\telif len(s) > len(l):\n\t\tsub_set = False\n\telse:\n\t\tfor i in range(len(l)):\n\t\t\tif l[i] == s[0]:\n\t\t\t\tn = 1\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\n\t\t\t\t\tn += 1\n\t\t\t\tif n == len(s):\n\t\t\t\t\tsub_set = True\n\treturn sub_set", "task_id": "69_c91689fb-7a0b-4507-beb2-6f0224e7764b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist in any order.", "code": "def is_sublist_with_any_order(l, s):\n\ts = sorted(s)\n\tfor i in range(len(l) - len(s) + 1):\n\t\tif sorted(l[i:i+len(s)]) == s:\n\t\t\treturn True\n\treturn False", "task_id": "69_ab08aea2-0720-4ff8-be0f-a27513be7e06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist in any order, allowing for duplicate elements.", "code": "def is_sublist_with_any_order_and_duplicates(l, s):\n\ts = sorted(s)\n\tfor i in range(len(l) - len(s) + 1):\n\t\tif sorted(l[i:i+len(s)]) == s:\n\t\t\treturn True\n\treturn False", "task_id": "69_5891d448-5a2a-40cb-9086-7e13bc1910ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist in any order with a specified gap between elements.", "code": "def is_sublist_with_any_order_and_gap(l, s, gap):\n\ts = sorted(s)\n\tfor i in range(len(l) - len(s) * (gap + 1) + 1):\n\t\tif sorted(l[i:i+len(s)*(gap+1):gap+1]) == s:\n\t\t\treturn True\n\treturn False", "task_id": "69_7a5095f0-55f7-47cc-99ae-676fd65d0bdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a list contains the given sublist in any order with one element replaced by a specified value.", "code": "def is_sublist_with_any_order_and_replacement(l, s, replacement):\n\ts = sorted(s)\n\tfor i in range(len(l) - len(s) + 1):\n\t\tif sorted([replacement if x == replacement else x for x in l[i:i+len(s)]]) == s:\n\t\t\treturn True\n\treturn False", "task_id": "69_dea8b5dd-21d5-4c9f-bccb-a77dd83447ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using bubble sort.", "code": "def bubble_sort(nums):\n    n = len(nums)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums", "task_id": "71_159f9235-c939-4b9b-9e61-26879f120429", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using selection sort.", "code": "def selection_sort(nums):\n    for i in range(len(nums)):\n        min_idx = i\n        for j in range(i+1, len(nums)):\n            if nums[j] < nums[min_idx]:\n                min_idx = j\n        nums[i], nums[min_idx] = nums[min_idx], nums[i]\n    return nums", "task_id": "71_a5ff0f95-3baf-4f67-8f95-c21365bf1b61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using insertion sort.", "code": "def insertion_sort(nums):\n    for i in range(1, len(nums)):\n        key = nums[i]\n        j = i-1\n        while j >= 0 and key < nums[j]:\n            nums[j + 1] = nums[j]\n            j -= 1\n        nums[j + 1] = key\n    return nums", "task_id": "71_2180a930-37c1-4a81-b4fb-35bfc44dfb65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using merge sort.", "code": "def merge_sort(nums):\n    if len(nums) > 1:\n        mid = len(nums) // 2\n        L = nums[:mid]\n        R = nums[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                nums[k] = L[i]\n                i += 1\n            else:\n                nums[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            nums[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            nums[k] = R[j]\n            j += 1\n            k += 1\n    return nums", "task_id": "71_e491e330-78d9-4463-bc29-f4d3adea6d27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using quick sort.", "code": "def quick_sort(nums):\n    if len(nums) <= 1:\n        return nums\n    pivot = nums[len(nums) // 2]\n    left = [x for x in nums if x < pivot]\n    middle = [x for x in nums if x == pivot]\n    right = [x for x in nums if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "71_9c65063a-fdc3-4e6b-ba44-185b8dce4aa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using heap sort.", "code": "def heap_sort(nums):\n    def heapify(nums, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n        if l < n and nums[i] < nums[l]:\n            largest = l\n        if r < n and nums[largest] < nums[r]:\n            largest = r\n        if largest != i:\n            nums[i], nums[largest] = nums[largest], nums[i]\n            heapify(nums, n, largest)\n    n = len(nums)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(nums, n, i)\n    for i in range(n-1, 0, -1):\n        nums[i], nums[0] = nums[0], nums[i]\n        heapify(nums, i, 0)\n    return nums", "task_id": "71_9de02c95-e8f3-4135-97e6-d966afb4e463", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using shell sort.", "code": "def shell_sort(nums):\n    gap = len(nums) // 2\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            temp = nums[i]\n            j = i\n            while j >= gap and nums[j - gap] > temp:\n                nums[j] = nums[j - gap]\n                j -= gap\n            nums[j] = temp\n        gap //= 2\n    return nums", "task_id": "71_cc24cd1f-df56-4911-8c85-06db2086aa9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using bucket sort.", "code": "def bucket_sort(nums):\n    if len(nums) == 0:\n        return nums\n    bucket_size = 10\n    min_value = min(nums)\n    max_value = max(nums)\n    bucket_count = (max_value - min_value) // bucket_size + 1\n    buckets = [[] for _ in range(bucket_count)]\n    for num in nums:\n        buckets[(num - min_value) // bucket_size].append(num)\n    nums.clear()\n    for bucket in buckets:\n        nums.extend(sorted(bucket))\n    return nums", "task_id": "71_f88507c0-45a7-4bea-92ab-3ff42e3003b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using counting sort.", "code": "def counting_sort(nums):\n    if len(nums) == 0:\n        return nums\n    max_value = max(nums)\n    count = [0] * (max_value + 1)\n    for num in nums:\n        count[num] += 1\n    nums.clear()\n    for i, c in enumerate(count):\n        nums.extend([i] * c)\n    return nums", "task_id": "71_3a9f8a96-42f1-49e1-891b-ac7220dc4dd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using radix sort.", "code": "def counting_sort_for_radix(nums, exp):\n    n = len(nums)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = nums[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = nums[i] // exp\n        output[count[index % 10] - 1] = nums[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(len(nums)):\n        nums[i] = output[i]\n\ndef radix_sort(nums):\n    max_value = max(nums)\n    exp = 1\n    while max_value // exp > 0:\n        counting_sort_for_radix(nums, exp)\n        exp *= 10\n    return nums", "task_id": "71_e21d11cb-0470-4fb7-bc53-fe84a5d58f94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words.", "code": "import re\ndef split_by_multiple_delimiters(text):\n    return re.split(';|,|\\*|\\s+', text)", "task_id": "73_fee153ec-f848-43e7-9efa-9c054e8e8739", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words, stripping any leading or trailing whitespace from each word.", "code": "import re\ndef split_and_strip(text):\n    return [word.strip() for word in re.split(';|,|\\*|\\s+', text) if word.strip()]", "task_id": "73_4ca36554-7269-404b-bcc0-cb6e8cb4c7be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words in lowercase.", "code": "import re\ndef split_and_lower(text):\n    return [word.lower() for word in re.split(';|,|\\*|\\s+', text) if word]", "task_id": "73_e0865271-7b85-478a-abd1-a39b3fccd557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words, removing any empty strings from the result.", "code": "import re\ndef split_and_remove_empty(text):\n    return [word for word in re.split(';|,|\\*|\\s+', text) if word]", "task_id": "73_5b4bb8e2-6bc3-4190-b842-eba9f9284ba4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return a tuple containing the list of words and the count of words.", "code": "import re\ndef split_and_count(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return (words, len(words))", "task_id": "73_41d54ceb-afe9-436f-b650-175cd0b02184", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words in reverse order.", "code": "import re\ndef split_and_reverse(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return words[::-1]", "task_id": "73_f141683c-f7ae-4288-ad08-bba07381e54a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of words sorted alphabetically.", "code": "import re\ndef split_and_sort(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return sorted(words)", "task_id": "73_bb2b023f-1cfb-42e1-a149-c6288b933f7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the list of unique words.", "code": "import re\ndef split_and_unique(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return list(set(words))", "task_id": "73_2358a6eb-31de-413d-a54a-8b277ee1dd54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the longest word.", "code": "import re\ndef split_and_find_longest(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return max(words, key=len) if words else ''", "task_id": "73_e2128677-bdab-4b1d-a1ef-e0e724eca6e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string with multiple delimiters (';', ',', '*', ' ') and return the shortest word.", "code": "import re\ndef split_and_find_shortest(text):\n    words = [word for word in re.split(';|,|\\*|\\s+', text) if word]\n    return min(words, key=len) if words else ''", "task_id": "73_05b3a222-75da-42a6-a6c8-a7393dc857bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "74_afb5230e-1381-4762-ab67-9929e1a318d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "74_97ea7b4e-626e-4da1-9d1e-ccc2d52f9d30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "74_fafa6372-69f8-460c-93a7-8966b81651e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "task_id": "74_2b181190-7611-42c1-85ab-a038eb55b99d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "74_b0869631-11b9-4b9f-8a29-3dd1f37ba5e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "74_319e6bbb-eaf0-4de4-b91a-e55c22fc84ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "74_c4fb429e-430c-4336-aae9-e6c656a60218", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into a single sorted list.", "code": "def merge_sorted_lists(lst1: list, lst2: list) -> list:\n    return sorted(lst1 + lst2)", "task_id": "74_9ca5082f-2c19-40c1-a41a-15452c828030", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list.", "code": "def find_max(lst: list) -> int:\n    return max(lst)", "task_id": "74_48d19581-c80e-46d6-83f4-45f1b6c9b381", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the first string is a subsequence of the second string.", "code": "def is_subsequence(s1: str, s2: str) -> bool:\n    it = iter(s2)\n    return all(char in it for char in s1)", "task_id": "74_b40cc0b1-bf53-4679-9394-688652421947", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two squares or not.", "code": "def is_sum_of_squares(n):\n    for i in range(int(n**0.5) + 1):\n        j = int((n - i*i)**0.5)\n        if i*i + j*j == n:\n            return True\n    return False", "task_id": "72_576f14fe-b6e8-49d4-8620-a75b16fdfccc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the product of two prime numbers or not.", "code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_product_of_two_primes(n):\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0 and is_prime(i) and is_prime(n // i):\n            return True\n    return False", "task_id": "72_ec519f00-5c39-46c6-b75e-8dda8df526c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the difference of two cubes or not.", "code": "def is_difference_of_cubes(n):\n    for i in range(int(n**(1/3)) + 1):\n        for j in range(i):\n            if i**3 - j**3 == n:\n                return True\n    return False", "task_id": "72_494217da-1cfd-4349-bc9d-89bdb065a53d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two cubes or not.", "code": "def is_sum_of_cubes(n):\n    for i in range(int(n**(1/3)) + 1):\n        for j in range(i+1):\n            if i**3 + j**3 == n:\n                return True\n    return False", "task_id": "72_b85fa572-a026-4136-a3a5-8c7d14df3c92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two prime numbers or not.", "code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_sum_of_two_primes(n):\n    for i in range(2, n//2 + 1):\n        if is_prime(i) and is_prime(n - i):\n            return True\n    return False", "task_id": "72_6bda1346-b58f-44fc-8f37-503cc2026312", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the difference of two prime numbers or not.", "code": "def is_prime(x):\n    if x < 2:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True\n\ndef is_difference_of_two_primes(n):\n    for i in range(2, n):\n        if is_prime(i) and is_prime(i + n):\n            return True\n    return False", "task_id": "72_63e37a85-e5a9-4571-ae8f-88cf917ef10f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two even numbers or not.", "code": "def is_sum_of_two_even_numbers(n):\n    return n % 2 == 0", "task_id": "72_dcec2ffd-c0c2-4e52-a3ed-7805c2d36c9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two odd numbers or not.", "code": "def is_sum_of_two_odd_numbers(n):\n    return n % 2 == 0 and n > 2", "task_id": "72_6ee02454-f970-4824-aa7d-5c7280c1bd67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the product of two even numbers or not.", "code": "def is_product_of_two_even_numbers(n):\n    for i in range(2, int(n**0.5) + 1, 2):\n        if n % i == 0 and (n // i) % 2 == 0:\n            return True\n    return False", "task_id": "72_208fcf3a-9ff5-417b-ae89-a9b7ea408ab3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the product of two odd numbers or not.", "code": "def is_product_of_two_odd_numbers(n):\n    for i in range(1, int(n**0.5) + 1, 2):\n        if n % i == 0 and (n // i) % 2 == 1:\n            return True\n    return False", "task_id": "72_5676d165-f650-4917-a839-cb04453e7ae5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find strings which have a length equal to the given length from the given list of strings.", "code": "def find_strings_with_length(strings, length):\n    return [s for s in strings if len(s) == length]", "task_id": "75_edd6192b-76a0-4bbf-86c3-6c501e38751b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have an even sum of elements from the given list of tuples.", "code": "def find_even_sum_tuples(tuples):\n    return [t for t in tuples if sum(t) % 2 == 0]", "task_id": "75_b68efa5e-254b-4425-b4fb-bd7ce450023f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all positive elements from the given list of tuples.", "code": "def find_tuples_with_positive_elements(tuples):\n    return [t for t in tuples if all(ele > 0 for ele in t)]", "task_id": "75_c20fa906-9daa-463f-b446-9f11c7e07bce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have a sum of elements greater than the given threshold from the given list of tuples.", "code": "def find_tuples_with_sum_greater_than(tuples, threshold):\n    return [t for t in tuples if sum(t) > threshold]", "task_id": "75_a9c34c86-9812-42ba-95e9-8f101223fcb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all prime elements from the given list of tuples.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_tuples_with_prime_elements(tuples):\n    return [t for t in tuples if all(is_prime(ele) for ele in t)]", "task_id": "75_a47a53f7-9bf1-4bee-95f8-188cd1dce7ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all unique elements from the given list of tuples.", "code": "def find_tuples_with_unique_elements(tuples):\n    return [t for t in tuples if len(t) == len(set(t))]", "task_id": "75_604e7488-11a3-46d2-a18c-9d26b5fa411b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all even elements from the given list of tuples.", "code": "def find_tuples_with_even_elements(tuples):\n    return [t for t in tuples if all(ele % 2 == 0 for ele in t)]", "task_id": "75_5f9231e6-3ec0-4a6f-954b-9d313796c007", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all elements within a given range from the given list of tuples.", "code": "def find_tuples_with_elements_in_range(tuples, start, end):\n    return [t for t in tuples if all(start <= ele <= end for ele in t)]", "task_id": "75_703e8345-5cf2-4d2f-afb2-14813ee0b3e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all elements belonging to a given set from the given list of tuples.", "code": "def find_tuples_with_elements_in_set(tuples, valid_set):\n    return [t for t in tuples if all(ele in valid_set for ele in t)]", "task_id": "75_1575da5a-0ad2-4f04-9bd0-2db774c6767f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find tuples which have all elements that are multiples of a given number from the given list of tuples.", "code": "def find_tuples_with_elements_multiple_of(tuples, n):\n    return [t for t in tuples if all(ele % n == 0 for ele in t)]", "task_id": "75_56a48175-3349-422f-8502-d639e82c33dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle of size m x n.", "code": "def count_rectangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 4", "task_id": "76_81a04f71-ca34-4d86-bb1d-c69a5f0deffe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles that can be formed in a grid of size m x n.", "code": "def count_triangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 2", "task_id": "76_27451a48-717f-4185-8a5f-1a21f33beef6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares that can be formed along the diagonal of a rectangle of size m x n.", "code": "def count_diagonal_squares(m, n):\n    return min(m, n)", "task_id": "76_619cca4d-7b69-49a8-95b9-3b9030a06273", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of L-shaped figures that can be formed in a grid of size m x n.", "code": "def count_l_shapes(m, n):\n    return (m - 1) * (n - 1) * 2", "task_id": "76_556b4e6e-35cd-44ed-8ce1-27eb5494a0cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique paths from the top-left to the bottom-right corner of a grid of size m x n.", "code": "def count_paths(m, n):\n    from math import comb\n    return comb(m + n - 2, m - 1)", "task_id": "76_474c6d4d-e0b6-4e34-b8a1-a53bd4d992fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique permutations of a given string s.", "code": "def count_permutations(s):\n    from math import factorial\n    from collections import Counter\n    counter = Counter(s)\n    denominator = 1\n    for count in counter.values():\n        denominator *= factorial(count)\n    return factorial(len(s)) // denominator", "task_id": "76_d55d3e88-0b78-4034-b228-d58f9f283493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic substrings in a given string s.", "code": "def count_palindromes(s):\n    n = len(s)\n    count = 0\n    for center in range(2 * n - 1):\n        left = center // 2\n        right = left + center % 2\n        while left >= 0 and right < n and s[left] == s[right]:\n            count += 1\n            left -= 1\n            right += 1\n    return count", "task_id": "76_e7f9f068-8f54-4127-82de-0e93baaedc94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string s.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "76_95dd9506-3298-48e5-9aed-b845f234bf4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string s.", "code": "def count_consonants(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)", "task_id": "76_1fcf0a29-9cd9-4889-8546-e3503789c1d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of distinct elements in a given list.", "code": "def count_distinct_elements(lst):\n    return len(set(lst))", "task_id": "76_7b555b89-52af-431c-adcc-e33446adc9af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even digits in a given number.", "code": "def sum_of_even_digits(n):\n    return sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)", "task_id": "77_2d279a1d-ad07-41b8-a5dd-35af2d92b1a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd digits in a given number.", "code": "def sum_of_odd_digits(n):\n    return sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)", "task_id": "77_8e6e410f-a5a1-4806-8203-1ba79348ac9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even digits in a given number.", "code": "def count_even_digits(n):\n    return sum(1 for digit in str(n) if int(digit) % 2 == 0)", "task_id": "77_e30e5608-b944-47e4-b03a-2c36da4140a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in a given number.", "code": "def count_odd_digits(n):\n    return sum(1 for digit in str(n) if int(digit) % 2 != 0)", "task_id": "77_642de166-ba93-45c6-b52b-9581e53fcb8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of even digits in a given number.", "code": "def product_of_even_digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 == 0:\n            product *= int(digit)\n    return product", "task_id": "77_5cbf0c93-7304-4837-87b9-77e05c781dd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of odd digits in a given number.", "code": "def product_of_odd_digits(n):\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product", "task_id": "77_649a13d3-d894-425b-a23a-7c2c3e1f3ad6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime digits in a given number.", "code": "def sum_of_prime_digits(n):\n    prime_digits = {2, 3, 5, 7}\n    return sum(int(digit) for digit in str(n) if int(digit) in prime_digits)", "task_id": "77_01f78d77-881c-49bd-98f3-c84b89bd3e42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime digits in a given number.", "code": "def count_prime_digits(n):\n    prime_digits = {2, 3, 5, 7}\n    return sum(1 for digit in str(n) if int(digit) in prime_digits)", "task_id": "77_295fbfb3-0b68-4d04-be99-11142752ad33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of non-prime digits in a given number.", "code": "def sum_of_non_prime_digits(n):\n    prime_digits = {2, 3, 5, 7}\n    return sum(int(digit) for digit in str(n) if int(digit) not in prime_digits)", "task_id": "77_c7a4e5b6-ef33-410f-aefa-cc4b0b73eb48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of non-prime digits in a given number.", "code": "def count_non_prime_digits(n):\n    prime_digits = {2, 3, 5, 7}\n    return sum(1 for digit in str(n) if int(digit) not in prime_digits)", "task_id": "77_406daddf-fcaf-40dd-beee-7e62b5279272", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the number of integers with an even number of set bits up to n.", "code": "def count_even_set_bits(n):\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 == 0:\n            count += 1\n    return count", "task_id": "78_7ae56b5d-8e6e-424b-9f9e-a9b5ae0f3105", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the number of set bits for all integers from 0 to n.", "code": "def sum_of_set_bits(n):\n    total = 0\n    for i in range(n + 1):\n        total += bin(i).count('1')\n    return total", "task_id": "78_99dc2a5d-8ffa-47bf-84ce-127852281fdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest power of two less than or equal to n.", "code": "def largest_power_of_two(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power", "task_id": "78_f70522db-fc6e-43e8-b3a5-93d254784e95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers up to n that have exactly k set bits.", "code": "def count_numbers_with_k_set_bits(n, k):\n    count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') == k:\n            count += 1\n    return count", "task_id": "78_7c9589f4-c15d-409a-ab42-fc695a885452", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all integers up to n that have an odd number of set bits.", "code": "def sum_of_odd_set_bits(n):\n    total = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 != 0:\n            total += i\n    return total", "task_id": "78_11c56d00-a7df-44a6-b193-b6105244667f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all integers from a to b inclusive.", "code": "def count_set_bits_in_range(a, b):\n    total = 0\n    for i in range(a, b + 1):\n        total += bin(i).count('1')\n    return total", "task_id": "78_5f5474a1-012c-4bd9-adde-2e9489afd33d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a tuple with the count of integers with even set bits and the count of integers with odd set bits up to n.", "code": "def count_even_and_odd_set_bits(n):\n    even_count = 0\n    odd_count = 0\n    for i in range(n + 1):\n        if bin(i).count('1') % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)", "task_id": "78_1a8d9866-5634-4443-ad53-2377b50cacb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of all integers up to n that have exactly k set bits.", "code": "def all_numbers_with_k_set_bits(n, k):\n    result = []\n    for i in range(n + 1):\n        if bin(i).count('1') == k:\n            result.append(i)\n    return result", "task_id": "78_28a8ebc2-cc13-4f00-827c-a00a5ddacef9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest integer that has exactly k set bits.", "code": "def smallest_number_with_k_set_bits(k):\n    return (1 << k) - 1", "task_id": "78_5d2c30c0-4a1c-4006-89fd-0706c7e66cf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers up to n that have a prime number of set bits.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_numbers_with_prime_set_bits(n):\n    count = 0\n    for i in range(n + 1):\n        if is_prime(bin(i).count('1')):\n            count += 1\n    return count", "task_id": "78_2cee493b-7ade-40ad-98e0-7de54f15941b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given word is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "79_ac66f6dd-3a72-441f-871a-a7d3a76dea49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "79_c716edb8-96ce-482f-a0fd-b50de93a2401", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "79_7490f8d0-c024-4c1c-aa87-9616b634719e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "79_d5039e8c-f42a-423e-840b-6781644fb534", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s: str) -> str:\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return ''", "task_id": "79_cb1825df-0111-4c51-9d8b-fb6b815ba3ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "79_aa3054f7-4201-4ccb-a554-fa64f6de1c28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "79_1568e3a0-ff8b-4a32-9df3-38b677749882", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "79_5a7b9098-d832-442b-8de9-595a8ff10c8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether one string is a substring of another string.", "code": "def is_substring(s1: str, s2: str) -> bool:\n    return s1 in s2", "task_id": "79_ea395dde-1795-4f17-91af-1ae2889f202c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in a given string with underscores.", "code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "79_319b8f88-eba7-4c6b-9cd6-24572b1e09ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def triangular_number(n):\n\treturn (n * (n + 1)) // 2", "task_id": "80_f6173a56-88d7-4333-aed5-bd8fd5e9b14b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth pentagonal number.", "code": "def pentagonal_number(n):\n\treturn (n * (3 * n - 1)) // 2", "task_id": "80_b25eef1f-fbba-4976-8cdb-389b07b81233", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth hexagonal number.", "code": "def hexagonal_number(n):\n\treturn n * (2 * n - 1)", "task_id": "80_bd6beafa-e5db-4119-9f86-9a7084711aa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n - 1)", "task_id": "80_456d3e82-48aa-41eb-a7eb-fdd1c10d8fa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n\treturn (n * (n + 1) * (2 * n + 1)) // 6", "task_id": "80_3627e814-6d06-4306-ab27-dd1416573ef7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n\treturn ((n * (n + 1)) // 2) ** 3", "task_id": "80_fd9d14ee-1fe3-4c2b-9059-a639d6d17d9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n\tif n <= 1:\n\t\treturn n\n\telse:\n\t\treturn fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "80_88f95309-e512-49d2-a9ba-93cafcda4bd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of an arithmetic series with first term a and common difference d.", "code": "def arithmetic_sum(a, d, n):\n\treturn n * (2 * a + (n - 1) * d) // 2", "task_id": "80_29230f88-e2ea-4f15-ae06-19577fcf76de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of a geometric series with first term a and common ratio r.", "code": "def geometric_sum(a, r, n):\n\tif r == 1:\n\t\treturn a * n\n\telse:\n\t\treturn a * (1 - r ** n) // (1 - r)", "task_id": "80_4430dd73-272b-44e7-aa34-997c915e0631", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Catalan number.", "code": "def catalan_number(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn (2 * (2 * n - 1) * catalan_number(n - 1)) // (n + 1)", "task_id": "80_005814eb-91e4-47ec-922c-2aa2b3415a87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "import math\ndef area_circle(r):\n  area = math.pi * r * r\n  return area", "task_id": "82_76669712-5c02-46d2-9c0e-bf80a2bce486", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\ndef circumference_circle(r):\n  circumference = 2 * math.pi * r\n  return circumference", "task_id": "82_5293235a-f2a1-44d0-bf15-6dfd09ce7cf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(r):\n  surface_area = 4 * math.pi * r * r\n  return surface_area", "task_id": "82_4d48431a-1ef9-47c5-8bc9-9e68d6153606", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r, h):\n  volume = math.pi * r * r * h\n  return volume", "task_id": "82_230045bc-f586-4a72-aef7-b62163552255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surface_area_cylinder(r, h):\n  surface_area = 2 * math.pi * r * (r + h)\n  return surface_area", "task_id": "82_5851f186-49a5-4c4f-9772-c6aea00325df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r, h):\n  volume = (1/3) * math.pi * r * r * h\n  return volume", "task_id": "82_b6afb08a-cae4-45fc-94d6-5bf762ff7063", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surface_area_cone(r, h):\n  l = math.sqrt(r * r + h * h)\n  surface_area = math.pi * r * (r + l)\n  return surface_area", "task_id": "82_e174ca1c-66a4-4a96-81d3-05da835a998f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a):\n  volume = a * a * a\n  return volume", "task_id": "82_66022895-49a7-4cb5-9587-1069f06d88af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(a):\n  surface_area = 6 * a * a\n  return surface_area", "task_id": "82_25d06311-d982-4721-aa1c-699c5a274809", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(l, w, h):\n  volume = l * w * h\n  return volume", "task_id": "82_99161c16-839d-4848-948a-45bb09484561", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists.", "code": "def zip_lists(list1, list2):\n    res = []\n    for i, j in enumerate(list1):\n        res.append((j, list2[i % len(list2)]))\n    return res", "task_id": "81_c15d4445-7ff5-4e6f-a2f4-b0bbf9af22a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given strings.", "code": "def zip_strings(str1, str2):\n    res = []\n    for i, j in enumerate(str1):\n        res.append((j, str2[i % len(str2)]))\n    return res", "task_id": "81_1d0394d7-3b17-489a-b6fc-bddac16ca222", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given dictionaries by their keys.", "code": "def zip_dicts(dict1, dict2):\n    res = []\n    for key in dict1.keys():\n        res.append((dict1[key], dict2.get(key)))\n    return res", "task_id": "81_b5dc4823-c881-428b-96e9-8009824f1e00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given sets.", "code": "def zip_sets(set1, set2):\n    res = []\n    set2_list = list(set2)\n    for i, j in enumerate(set1):\n        res.append((j, set2_list[i % len(set2_list)]))\n    return res", "task_id": "81_4bcd15b6-ea11-4c78-a1c3-6f92b0365bec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists, padding the shorter list with a given value.", "code": "def zip_lists_with_padding(list1, list2, pad):\n    res = []\n    max_len = max(len(list1), len(list2))\n    for i in range(max_len):\n        elem1 = list1[i] if i < len(list1) else pad\n        elem2 = list2[i] if i < len(list2) else pad\n        res.append((elem1, elem2))\n    return res", "task_id": "81_2eb86237-4f53-4f43-8035-1989ae9d1efc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists by alternating their elements.", "code": "def zip_lists_alternating(list1, list2):\n    res = []\n    min_len = min(len(list1), len(list2))\n    for i in range(min_len):\n        res.append(list1[i])\n        res.append(list2[i])\n    res.extend(list1[min_len:])\n    res.extend(list2[min_len:])\n    return res", "task_id": "81_7477614f-2ba9-4ef8-917d-b4c17e9aae16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists, including the index in the result.", "code": "def zip_lists_with_index(list1, list2):\n    res = []\n    for i, (elem1, elem2) in enumerate(zip(list1, list2)):\n        res.append((i, elem1, elem2))\n    return res", "task_id": "81_74e8f1c3-e7ad-4210-ae91-af24f352aae0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists and sum their elements.", "code": "def zip_lists_and_sum(list1, list2):\n    res = []\n    for elem1, elem2 in zip(list1, list2):\n        res.append(elem1 + elem2)\n    return res", "task_id": "81_d8bbbe27-163b-4419-afc2-431123c53bae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists and apply a given function to their elements.", "code": "def zip_lists_with_function(list1, list2, func):\n    res = []\n    for elem1, elem2 in zip(list1, list2):\n        res.append(func(elem1, elem2))\n    return res", "task_id": "81_c328464f-0a33-4d32-b252-c84ff7f815e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip the two given lists and multiply their elements.", "code": "def zip_lists_and_multiply(list1, list2):\n    res = []\n    for elem1, elem2 in zip(list1, list2):\n        res.append(elem1 * elem2)\n    return res", "task_id": "81_e0bdc65a-dd50-4150-be83-83bfa62c5b92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of ASCII values of all characters in the given string.", "code": "def sum_of_ascii_values(s: str) -> int:\n    return sum(ord(char) for char in s)", "task_id": "83_b6fc0984-8b27-41f4-ad6c-90b1f848b30b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of ASCII values of all characters in the given string.", "code": "def product_of_ascii_values(s: str) -> int:\n    product = 1\n    for char in s:\n        product *= ord(char)\n    return product", "task_id": "83_218243d2-f785-4c7d-8f23-9b8981858a4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all characters in the given string, where 'a' is 1, 'b' is 2, and so on.", "code": "def sum_of_positions(s: str) -> int:\n    return sum(ord(char) - ord('a') + 1 for char in s)", "task_id": "83_183e2cbb-4464-4a06-aa0e-718e7b630d30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of positions of all characters in the given string, where 'a' is 1, 'b' is 2, and so on.", "code": "def product_of_positions(s: str) -> int:\n    product = 1\n    for char in s:\n        product *= (ord(char) - ord('a') + 1)\n    return product", "task_id": "83_2d1c8632-e949-4ff0-8bbd-cd1a685cd51d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all characters in the given string that are at even indices, where 'a' is 1, 'b' is 2, and so on.", "code": "def sum_of_even_positions(s: str) -> int:\n    return sum(ord(s[i]) - ord('a') + 1 for i in range(1, len(s), 2))", "task_id": "83_6422b2bb-4e8e-4e8d-912c-3626ff946526", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all characters in the given string that are at odd indices, where 'a' is 1, 'b' is 2, and so on.", "code": "def sum_of_odd_positions(s: str) -> int:\n    return sum(ord(s[i]) - ord('a') + 1 for i in range(0, len(s), 2))", "task_id": "83_11c77317-e8b5-4aba-8a02-9d54576fa016", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all vowel characters in the given string, where 'a' is 1, 'e' is 5, and so on.", "code": "def sum_of_vowel_positions(s: str) -> int:\n    vowels = 'aeiou'\n    return sum(ord(char) - ord('a') + 1 for char in s if char in vowels)", "task_id": "83_69e69531-2506-46c6-91dd-2675444c23c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all consonant characters in the given string, where 'b' is 2, 'c' is 3, and so on.", "code": "def sum_of_consonant_positions(s: str) -> int:\n    vowels = 'aeiou'\n    return sum(ord(char) - ord('a') + 1 for char in s if char not in vowels)", "task_id": "83_a6fbcfaa-7bda-4e62-b5c9-26bd5fe6465f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all uppercase characters in the given string, where 'A' is 1, 'B' is 2, and so on.", "code": "def sum_of_uppercase_positions(s: str) -> int:\n    return sum(ord(char) - ord('A') + 1 for char in s if char.isupper())", "task_id": "83_aa2eac1e-e710-4678-904b-dbb365a620ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of positions of all lowercase characters in the given string, where 'a' is 1, 'b' is 2, and so on.", "code": "def sum_of_lowercase_positions(s: str) -> int:\n    return sum(ord(char) - ord('a') + 1 for char in s if char.islower())", "task_id": "83_ad454264-5a7d-4802-9fa9-95b6eb79c6d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th number in the Fibonacci sequence.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "84_e5bcf92b-6648-4e3a-9824-60ac76363d82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "84_10244ae8-cf3a-4c79-8d82-8c0b859ca9b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)", "task_id": "84_a3ccacb1-614c-499b-8645-f908db93c89e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "task_id": "84_e60df016-f8a2-4be5-930a-5ac4a686f5f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate x raised to the power of n.", "code": "def power(x, n):\n    if n == 0:\n        return 1\n    else:\n        return x * power(x, n-1)", "task_id": "84_93de91f6-6a83-4fde-993e-fda0027507cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]", "task_id": "84_b7e9cf11-3097-48e5-add8-ac4b9ff1643e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    else:\n        return s[0] == s[-1] and is_palindrome(s[1:-1])", "task_id": "84_a8a2711b-2446-40b4-a681-73712f5b8ef9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given array arr.", "code": "def sum_of_array(arr):\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + sum_of_array(arr[1:])", "task_id": "84_3df35218-9c09-4a42-90e5-95d0bb06c59c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string s.", "code": "def count_vowels(s):\n    if len(s) == 0:\n        return 0\n    else:\n        return (1 if s[0] in 'aeiouAEIOU' else 0) + count_vowels(s[1:])", "task_id": "84_03e12a0b-f035-4b52-a51a-bcdfd9719498", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform merge sort on a given array arr.", "code": "def merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    mid = len(arr) // 2\n    left = merge_sort(arr[:mid])\n    right = merge_sort(arr[mid:])\n    return merge(left, right)\n\ndef merge(left, right):\n    result = []\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n    result.extend(left[i:])\n    result.extend(right[j:])\n    return result", "task_id": "84_548f0ccd-f2e6-4fa7-83f6-d687d459e0f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r: float) -> float:\n  volume = (4/3) * math.pi * r**3\n  return volume", "task_id": "85_39cc7bae-a739-4150-901c-aea1b4213410", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surfacearea_cylinder(r: float, h: float) -> float:\n  surfacearea = 2 * math.pi * r * (r + h)\n  return surfacearea", "task_id": "85_b92a4336-5f56-4a22-96fc-ee89cdbb83ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r: float, h: float) -> float:\n  volume = math.pi * r**2 * h\n  return volume", "task_id": "85_d741348f-0c0f-4f8c-b86b-e62fe7451100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surfacearea_cube(a: float) -> float:\n  surfacearea = 6 * a**2\n  return surfacearea", "task_id": "85_c07ba058-9802-4680-a0c8-8ea92c700ac3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a: float) -> float:\n  volume = a**3\n  return volume", "task_id": "85_7655b59f-9042-4acb-87d0-dd0db14de204", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surfacearea_cone(r: float, h: float) -> float:\n  l = math.sqrt(r**2 + h**2)\n  surfacearea = math.pi * r * (r + l)\n  return surfacearea", "task_id": "85_3da48c4e-88da-451c-b40f-a96555a13699", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r: float, h: float) -> float:\n  volume = (1/3) * math.pi * r**2 * h\n  return volume", "task_id": "85_b06fc2b1-0a37-487f-90cc-a78c4bac4074", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a rectangular prism.", "code": "def surfacearea_rectangular_prism(l: float, w: float, h: float) -> float:\n  surfacearea = 2 * (l*w + w*h + h*l)\n  return surfacearea", "task_id": "85_65a8c371-a894-4155-a82a-cd4a71b43537", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(l: float, w: float, h: float) -> float:\n  volume = l * w * h\n  return volume", "task_id": "85_73448b77-f4a1-41b4-aa88-c2397de1d603", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a pyramid with a square base.", "code": "def surfacearea_pyramid(base: float, height: float, slant_height: float) -> float:\n  base_area = base**2\n  lateral_area = 2 * base * slant_height\n  surfacearea = base_area + lateral_area\n  return surfacearea", "task_id": "85_6e91575c-c707-4a6d-aa92-dc180fd77118", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered square number.", "code": "def centered_square_number(n):\n  return n**2 + (n-1)**2", "task_id": "86_55b3c1d7-e68d-455a-a5db-d25276517f92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered triangular number.", "code": "def centered_triangular_number(n):\n  return 3 * n * (n - 1) // 2 + 1", "task_id": "86_140eeb52-06b2-4e42-956a-0ac2c2bf40c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered pentagonal number.", "code": "def centered_pentagonal_number(n):\n  return 5 * n * (n - 1) // 2 + 1", "task_id": "86_5403cf03-3578-4e49-8ed3-fe3707808834", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered heptagonal number.", "code": "def centered_heptagonal_number(n):\n  return 7 * n * (n - 1) // 2 + 1", "task_id": "86_0e928d4b-864d-4ffe-a251-385de1f37e10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered octagonal number.", "code": "def centered_octagonal_number(n):\n  return 8 * n * (n - 1) // 2 + 1", "task_id": "86_30a35d88-0b10-45f4-997a-9f06eddde496", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered nonagonal number.", "code": "def centered_nonagonal_number(n):\n  return 9 * n * (n - 1) // 2 + 1", "task_id": "86_29577428-6034-4774-a495-329a13b3b63c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered decagonal number.", "code": "def centered_decagonal_number(n):\n  return 10 * n * (n - 1) // 2 + 1", "task_id": "86_005d06ac-da8c-4f55-967a-60736917a7a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered dodecagonal number.", "code": "def centered_dodecagonal_number(n):\n  return 12 * n * (n - 1) // 2 + 1", "task_id": "86_cc27c555-c509-4d25-81f8-b49a574f741c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered undecagonal number.", "code": "def centered_undecagonal_number(n):\n  return 11 * n * (n - 1) // 2 + 1", "task_id": "86_f9dd4d30-612a-45be-a4b6-ce66510a4e82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered 13-gonal number.", "code": "def centered_13_gonal_number(n):\n  return 13 * n * (n - 1) // 2 + 1", "task_id": "86_b05323b3-294e-47d3-a5a4-0fa9a9c17cd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary.", "code": "def merge_dictionaries_two(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    return merged_dict", "task_id": "87_18d2313d-26ce-4dc7-8df3-ec4531c60973", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, with a priority parameter to determine which dictionary's values should be used in case of key conflicts.", "code": "def merge_dictionaries_with_priority(dict1, dict2, priority):\n    if priority == 'dict1':\n        return {**dict2, **dict1}\n    else:\n        return {**dict1, **dict2}", "task_id": "87_80906232-c73f-4ae9-ad27-b6b55902a7f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge a list of dictionaries into a single dictionary.", "code": "def merge_dictionaries_list(dicts):\n    merged_dict = {}\n    for d in dicts:\n        merged_dict.update(d)\n    return merged_dict", "task_id": "87_44814aba-8f09-45a8-8b7e-48c1fd4e00a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, filling in any missing keys with a default value.", "code": "def merge_dictionaries_with_default(dict1, dict2, default_value):\n    merged_dict = {**dict1, **dict2}\n    for key in set(dict1).union(dict2):\n        if key not in merged_dict:\n            merged_dict[key] = default_value\n    return merged_dict", "task_id": "87_0916c7a0-88b5-460a-bcd2-0beeec407f71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, summing the values of any keys that appear in both dictionaries.", "code": "def merge_dictionaries_and_sum(dict1, dict2):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key] += value\n        else:\n            merged_dict[key] = value\n    return merged_dict", "task_id": "87_505c974e-f184-45d0-8da6-7d436b5ca132", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, keeping the values as lists if the same key appears in both dictionaries.", "code": "def merge_dictionaries_and_keep_lists(dict1, dict2):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            if isinstance(merged_dict[key], list):\n                merged_dict[key].append(value)\n            else:\n                merged_dict[key] = [merged_dict[key], value]\n        else:\n            merged_dict[key] = value\n    return merged_dict", "task_id": "87_36c1b1b6-73f3-4f50-87cd-efe6ff82b045", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, adding a prefix to the keys from each dictionary.", "code": "def merge_dictionaries_with_key_prefix(dict1, dict2, prefix1, prefix2):\n    merged_dict = {prefix1 + key: value for key, value in dict1.items()}\n    merged_dict.update({prefix2 + key: value for key, value in dict2.items()})\n    return merged_dict", "task_id": "87_4f2783d6-a4ec-43e1-98c6-5855b93f7ec5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, and return the merged dictionary along with the count of unique keys.", "code": "def merge_dictionaries_and_count_keys(dict1, dict2):\n    merged_dict = {**dict1, **dict2}\n    unique_keys_count = len(merged_dict)\n    return merged_dict, unique_keys_count", "task_id": "87_36c060d3-a683-4a68-8313-a8091f3b1f9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, and track the source of each key (either 'dict1', 'dict2', or 'both').", "code": "def merge_dictionaries_and_track_sources(dict1, dict2):\n    merged_dict = {}\n    for key in set(dict1.keys()).union(dict2.keys()):\n        if key in dict1 and key in dict2:\n            merged_dict[key] = ('both', dict1[key], dict2[key])\n        elif key in dict1:\n            merged_dict[key] = ('dict1', dict1[key])\n        else:\n            merged_dict[key] = ('dict2', dict2[key])\n    return merged_dict", "task_id": "87_20e1d4ba-3317-489c-b995-2e6c64b59076", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries into a single dictionary, keeping the maximum value for any keys that appear in both dictionaries.", "code": "def merge_dictionaries_and_find_max(dict1, dict2):\n    merged_dict = dict1.copy()\n    for key, value in dict2.items():\n        if key in merged_dict:\n            merged_dict[key] = max(merged_dict[key], value)\n        else:\n            merged_dict[key] = value\n    return merged_dict", "task_id": "87_352c87f6-17c9-44b3-b346-81e8d84dfc2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of each character in a string.", "code": "import collections\ndef char_frequency(s: str) -> dict:\n    return collections.Counter(s)", "task_id": "88_53e34c1f-d1f1-4d2a-ab69-82190e518558", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of each word in a string.", "code": "import collections\ndef word_frequency(s: str) -> dict:\n    words = s.split()\n    return collections.Counter(words)", "task_id": "88_c074a45b-8eff-400a-b968-c86894c1d90e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of elements in a list that appear more than a given threshold.", "code": "import collections\ndef element_frequency_with_threshold(lst: list, threshold: int) -> dict:\n    counter = collections.Counter(lst)\n    return {k: v for k, v in counter.items() if v > threshold}", "task_id": "88_f20008fa-1fc7-42b1-9f4b-390340de8a8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from the input list.", "code": "def unique_elements(lst: list) -> list:\n    return list(set(lst))", "task_id": "88_3415b08d-7050-4939-ab8c-97529c3b7961", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common element in a list.", "code": "import collections\ndef most_common_element(lst: list) -> any:\n    counter = collections.Counter(lst)\n    return counter.most_common(1)[0][0]", "task_id": "88_915992ee-db9a-47e3-a4d8-e5f62f9289d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common element in a list.", "code": "import collections\ndef least_common_element(lst: list) -> any:\n    counter = collections.Counter(lst)\n    return counter.most_common()[-1][0]", "task_id": "88_4e7716fb-6526-4d99-9270-f3dc5771004d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the elements of a list sorted by their frequency in descending order.", "code": "import collections\ndef element_frequency_sorted(lst: list) -> list:\n    counter = collections.Counter(lst)\n    return [item for item, count in counter.most_common()]", "task_id": "88_b6bb3370-cf00-42f4-8893-2cbe7ddbafa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of elements in a list along with their first occurrence index.", "code": "import collections\ndef element_frequency_with_indices(lst: list) -> dict:\n    counter = collections.Counter(lst)\n    return {k: (v, lst.index(k)) for k, v in counter.items()}", "task_id": "88_91efc973-4843-4bf9-bb5b-470b49d1c71c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of elements in a list excluding certain elements.", "code": "import collections\ndef element_frequency_excluding(lst: list, exclude: list) -> dict:\n    filtered_lst = [x for x in lst if x not in exclude]\n    return collections.Counter(filtered_lst)", "task_id": "88_11fa2ba4-59d8-4ed8-96fc-34d4cef258a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the frequency of elements within a specified range of indices in a list.", "code": "import collections\ndef element_frequency_within_range(lst: list, start: int, end: int) -> dict:\n    sublist = lst[start:end+1]\n    return collections.Counter(sublist)", "task_id": "88_b5bb47fd-ab4e-4a9a-9018-8b9e19cfb9d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller even number than n.", "code": "def closest_even_num(n: int) -> int:\n    return n - 1 if n % 2 == 0 else n - 2", "task_id": "89_00660d2f-ff13-47c1-9877-b825776e8a72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller odd number than n.", "code": "def closest_odd_num(n: int) -> int:\n    return n - 1 if n % 2 != 0 else n - 2", "task_id": "89_3e99497d-8c09-498e-bc63-ff1bdb673427", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller prime number than n.", "code": "def closest_prime_num(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    n -= 1\n    while n > 1:\n        if is_prime(n):\n            return n\n        n -= 1\n    return None", "task_id": "89_79506ac6-a289-4d32-949a-84612e8db2c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller perfect square number than n.", "code": "def closest_square_num(n: int) -> int:\n    import math\n    return int(math.floor(math.sqrt(n-1))**2)", "task_id": "89_37421a36-dbcf-434e-a2f8-5da50f4182f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller Fibonacci number than n.", "code": "def closest_fibonacci_num(n: int) -> int:\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return a", "task_id": "89_7b24dec7-b9c8-4c77-875e-54a1e87e2936", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller power of two than n.", "code": "def closest_power_of_two(n: int) -> int:\n    power = 1\n    while power * 2 < n:\n        power *= 2\n    return power", "task_id": "89_fd0ce9a3-ec7d-4eb2-a6b6-6274ffa32377", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller factorial number than n.", "code": "def closest_factorial_num(n: int) -> int:\n    fact, i = 1, 1\n    while fact * i < n:\n        fact *= i\n        i += 1\n    return fact", "task_id": "89_d49cebbd-9d64-4730-9e2c-8d39bd0a5602", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller multiple of five than n.", "code": "def closest_multiple_of_five(n: int) -> int:\n    return (n // 5) * 5 - 5", "task_id": "89_49ef855d-a265-4cd6-b9db-fa89b96e304f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller palindrome number than n.", "code": "def closest_palindrome_num(n: int) -> int:\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    n -= 1\n    while n > 0:\n        if is_palindrome(n):\n            return n\n        n -= 1\n    return None", "task_id": "89_07c5f885-123a-4ade-83bc-a2fcd96035ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest smaller perfect cube number than n.", "code": "def closest_cubed_num(n: int) -> int:\n    import math\n    return int(math.floor(n**(1/3))**3)", "task_id": "89_51054edd-0f4d-4d4f-ab39-26bb6e6fac78", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that contains at least one vowel.", "code": "def len_log_vowels(list1):\n    vowels = set('aeiouAEIOU')\n    max_len = 0\n    for word in list1:\n        if any(char in vowels for char in word):\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_c2d095e0-f8fa-4114-a02f-3782f79ef34d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that has an even number of characters.", "code": "def len_log_even(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) % 2 == 0:\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_ed3d7e27-afa0-476e-96ef-3a1f1c078ca3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that starts with a vowel.", "code": "def len_log_start_vowel(list1):\n    vowels = set('aeiouAEIOU')\n    max_len = 0\n    for word in list1:\n        if word[0] in vowels:\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_828ba12e-969c-4777-9dcf-c9269eda3fed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that ends with a consonant.", "code": "def len_log_end_consonant(list1):\n    vowels = set('aeiouAEIOU')\n    max_len = 0\n    for word in list1:\n        if word[-1] not in vowels:\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_b788c34b-f058-4d33-8aa6-eb5329d2707e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that is a palindrome.", "code": "def len_log_palindrome(list1):\n    max_len = 0\n    for word in list1:\n        if word == word[::-1]:\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_b299a3df-ad7c-4a6a-b6be-18ef4364fd49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that is in uppercase.", "code": "def len_log_uppercase(list1):\n    max_len = 0\n    for word in list1:\n        if word.isupper():\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_635e4a12-f935-4f11-83e0-300a400cf432", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that is in lowercase.", "code": "def len_log_lowercase(list1):\n    max_len = 0\n    for word in list1:\n        if word.islower():\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_806bca12-c05e-42e0-a21b-e5f51d8870ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that contains at least one digit.", "code": "def len_log_digit(list1):\n    max_len = 0\n    for word in list1:\n        if any(char.isdigit() for char in word):\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_99b27322-0d22-4ae2-8674-0e30a2efc7d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that contains at least one special character (non-alphanumeric).", "code": "def len_log_special_char(list1):\n    max_len = 0\n    for word in list1:\n        if any(not char.isalnum() for char in word):\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_db47bf6f-2918-4371-914b-4432649dc594", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word that has all unique characters.", "code": "def len_log_unique_chars(list1):\n    max_len = 0\n    for word in list1:\n        if len(word) == len(set(word)):\n            max_len = max(max_len, len(word))\n    return max_len", "task_id": "90_b8bf12a3-b1cd-4dda-b0d4-e602ecd3adda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number alternates between two digits.", "code": "def is_alternating(n):\n\tif len(n) <= 2:\n\t\treturn False\n\tfor i in range(2, len(n)):\n\t\tif n[i] != n[i % 2]:\n\t\t\treturn False\n\treturn True", "task_id": "92_f4870188-c407-4196-89c0-c5b880cda852", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a palindrome.", "code": "def is_palindrome(n):\n\treturn n == n[::-1]", "task_id": "92_5cdf256d-a8a3-4156-8482-a7b40e69c812", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the digits of the given number are in strictly increasing order.", "code": "def is_increasing(n):\n\treturn all(n[i] < n[i+1] for i in range(len(n)-1))", "task_id": "92_c1dcb925-fe34-46e8-9e4b-053c3ad2644f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the digits of the given number are in strictly decreasing order.", "code": "def is_decreasing(n):\n\treturn all(n[i] > n[i+1] for i in range(len(n)-1))", "task_id": "92_f017a0b6-533d-4b33-ac55-470e40483134", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the digits of the given number form an arithmetic sequence.", "code": "def is_arithmetic_sequence(n):\n\tif len(n) < 2:\n\t\treturn False\n\td = int(n[1]) - int(n[0])\n\treturn all(int(n[i+1]) - int(n[i]) == d for i in range(len(n)-1))", "task_id": "92_6a99e943-1ef0-4b78-8f79-3ccada7770f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the digits of the given number form a geometric sequence.", "code": "def is_geometric_sequence(n):\n\tif len(n) < 2:\n\t\treturn False\n\tr = int(n[1]) / int(n[0])\n\treturn all(int(n[i+1]) / int(n[i]) == r for i in range(len(n)-1))", "task_id": "92_5e721def-0ce1-4153-8bbd-02dc82c0ab25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number has any repeated digits.", "code": "def has_repeated_digit(n):\n\treturn len(set(n)) != len(n)", "task_id": "92_01b7b635-78a7-4287-8d73-3c66cb83a07d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True", "task_id": "92_89d2f17f-a55e-4e02-8d91-950754021363", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a Fibonacci number.", "code": "def is_fibonacci(n):\n\tif n < 0:\n\t\treturn False\n\ta, b = 0, 1\n\twhile b < n:\n\t\ta, b = b, a + b\n\treturn b == n", "task_id": "92_b0b83c4e-082e-40df-87a3-52339274a8c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square.", "code": "def is_perfect_square(n):\n\treturn int(n**0.5)**2 == n", "task_id": "92_49189c92-f5c7-4978-a074-dd288914b9f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a substring in a given list of string values.", "code": "def count_occurrences(lst, sub_str):\n    return sum(s.count(sub_str) for s in lst)", "task_id": "91_1d19e3df-d85d-499d-ade6-99a5840dc7d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first string in the list that contains a given substring. Return -1 if the substring is not found.", "code": "def find_substring_index(lst, sub_str):\n    for i, s in enumerate(lst):\n        if sub_str in s:\n            return i\n    return -1", "task_id": "91_a669cc1e-219c-449d-9062-d09bc5a2e32e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all indices of strings in the list that contain a given substring.", "code": "def find_all_substring_indices(lst, sub_str):\n    return [i for i, s in enumerate(lst) if sub_str in s]", "task_id": "91_c73d83d6-3eef-4e93-a936-438e64326b04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace a given substring with another substring in all strings of a given list.", "code": "def replace_substring(lst, old_sub, new_sub):\n    return [s.replace(old_sub, new_sub) for s in lst]", "task_id": "91_e1282c1a-4607-48a3-af47-37b3a72fba02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given substring is present in all strings of a given list.", "code": "def substring_in_all(lst, sub_str):\n    return all(sub_str in s for s in lst)", "task_id": "91_e7e4f8b0-227d-404d-9fab-229bf414bc98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given substring is present in any string of a given list.", "code": "def substring_in_any(lst, sub_str):\n    return any(sub_str in s for s in lst)", "task_id": "91_3c22c637-0039-4fb9-95a3-68eb4f4bac7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in a list that contain a given substring.", "code": "def count_strings_with_substring(lst, sub_str):\n    return sum(1 for s in lst if sub_str in s)", "task_id": "91_27bb07f3-6f08-4715-b620-bfd5fc1098a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest string in a list that contains a given substring. Return an empty string if no such string exists.", "code": "def find_longest_string_with_substring(lst, sub_str):\n    strings_with_sub = [s for s in lst if sub_str in s]\n    return max(strings_with_sub, key=len, default='')", "task_id": "91_17d50e94-f164-4508-ac57-ea17a06f4200", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the shortest string in a list that contains a given substring. Return an empty string if no such string exists.", "code": "def find_shortest_string_with_substring(lst, sub_str):\n    strings_with_sub = [s for s in lst if sub_str in s]\n    return min(strings_with_sub, key=len, default='')", "task_id": "91_634a7e26-597e-4a2d-a349-3d8ee008b433", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings from a list that contain a given substring.", "code": "def remove_strings_with_substring(lst, sub_str):\n    return [s for s in lst if sub_str not in s]", "task_id": "91_c271c1c0-3111-45f0-95a2-2ec48fd3be18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number 'n'.", "code": "def factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "93_25322646-0dd7-4335-9ed1-2a110743a7a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "93_cf93c0f6-66f6-41e4-9412-db739a34c690", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two numbers 'a' and 'b'.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "task_id": "93_955812dc-d380-4bc5-868a-a4b1b6756075", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number 'n'.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)", "task_id": "93_0033952a-f381-4d5f-8628-3645afa2b781", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string 's'.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    else:\n        return s[-1] + reverse_string(s[:-1])", "task_id": "93_029a4937-1710-4256-9e55-16d91bd49c96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number 'n' is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "93_f5cb67eb-51ef-46fb-bc90-f7a3cad71ebc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string 's' is a palindrome.", "code": "def palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    elif s[0] != s[-1]:\n        return False\n    else:\n        return palindrome(s[1:-1])", "task_id": "93_2bd9f942-a5dd-4462-bc38-96fc388e8d9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string 's'.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    if len(s) == 0:\n        return 0\n    elif s[0] in vowels:\n        return 1 + count_vowels(s[1:])\n    else:\n        return count_vowels(s[1:])", "task_id": "93_0282d7a2-c8d7-4130-8db5-4330804da29b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a given list 'lst'.", "code": "def sum_of_list(lst: list) -> int:\n    if len(lst) == 0:\n        return 0\n    else:\n        return lst[0] + sum_of_list(lst[1:])", "task_id": "93_37d1b975-a465-4a7e-b081-7817161d306c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform binary search on a sorted list 'arr' to find the index of a given 'target'. Return -1 if the target is not found.", "code": "def binary_search(arr: list, target: int) -> int:\n    def search(arr, target, low, high):\n        if low > high:\n            return -1\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            return search(arr, target, mid + 1, high)\n        else:\n            return search(arr, target, low, mid - 1)\n    return search(arr, target, 0, len(arr) - 1)", "task_id": "93_93b56b1b-75d2-41e5-ab25-8aac4a0e2700", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum length of sublist.", "code": "def Find_Max_Length(lst):\n    maxLength = max(len(x) for x in lst)\n    return maxLength", "task_id": "95_033fbd1b-040b-47de-a3f1-4eb5fbca2053", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average length of sublist.", "code": "def Find_Avg_Length(lst):\n    avgLength = sum(len(x) for x in lst) / len(lst)\n    return avgLength", "task_id": "95_e9701d5a-45d9-45bf-937d-c07d2ba117a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of lengths of all sublists.", "code": "def Find_Sum_Lengths(lst):\n    sumLengths = sum(len(x) for x in lst)\n    return sumLengths", "task_id": "95_507fe0d7-ed37-4b80-b4ac-827e0a9041b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the shortest sublist.", "code": "def Find_Shortest_Sublist(lst):\n    shortest = min(lst, key=len)\n    return shortest", "task_id": "95_059ba535-5c73-4694-94a6-e3a73ada2f18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest sublist.", "code": "def Find_Longest_Sublist(lst):\n    longest = max(lst, key=len)\n    return longest", "task_id": "95_8a1dfc30-e420-446b-a0e3-cbcc5cde1354", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of empty sublists.", "code": "def Count_Empty_Sublists(lst):\n    count = sum(1 for x in lst if len(x) == 0)\n    return count", "task_id": "95_6322e229-39ef-4eb5-93fe-ed07fb63ae80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of lengths of each sublist.", "code": "def Find_Sublist_Lengths(lst):\n    lengths = [len(x) for x in lst]\n    return lengths", "task_id": "95_05079883-8c36-4a55-a032-cb6ca26ad0fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all sublists of a given length.", "code": "def Find_Sublists_Of_Length(lst, length):\n    sublists = [x for x in lst if len(x) == length]\n    return sublists", "task_id": "95_913ff276-5cc1-4c95-9d2e-08ab3e899338", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all sublists containing a specific element.", "code": "def Find_Sublists_Containing_Element(lst, element):\n    sublists = [x for x in lst if element in x]\n    return sublists", "task_id": "95_90d5b173-7d95-4572-b5fd-f2e9d526d957", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all sublists that do not contain a specific element.", "code": "def Find_Sublists_Without_Element(lst, element):\n    sublists = [x for x in lst if element not in x]\n    return sublists", "task_id": "95_f521b47c-ed72-4ede-8315-adadde8abac5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given integer.", "code": "def sum_of_divisors(n):\n    return sum([i for i in range(1, n+1) if n % i == 0])", "task_id": "96_3146baa6-72fa-4628-adba-749e8d006813", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "96_e5c4fe96-8d6a-4ed9-b110-2e6bfef3daad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given integers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "96_e0803a17-a4a2-461a-9d1a-5435a83835ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given integers.", "code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a*b) // gcd(a, b)", "task_id": "96_20875434-e66c-4aa5-8e63-2b4ff8daf184", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a perfect number. A perfect number is a positive integer that is equal to the sum of its proper divisors.", "code": "def is_perfect(n):\n    return n == sum([i for i in range(1, n) if n % i == 0])", "task_id": "96_33058df8-e6ae-4d96-b309-e3fb71671401", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "96_540887f6-4d5f-408f-bd7a-c9dc1660b2e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given integer.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "96_75530177-3f9f-4235-909b-ef948f32ab49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "96_b28dbd10-b2cc-4749-89f6-756e2e14f35e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "96_1093dcd7-ecf2-4865-ab6a-d64d1c81b764", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "96_1a1b2517-8d0e-41c2-b868-3af962eaf362", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of characters in a list of strings.", "code": "def frequency_strings(list_of_strings):\n    char_list = [char for string in list_of_strings for char in string]\n    char_count = {}\n    for char in char_list:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count", "task_id": "97_20936c96-dff3-44d6-8a8f-fd97caa639f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of elements in a list of tuples.", "code": "def frequency_tuples(list_of_tuples):\n    element_list = [element for tuple_ in list_of_tuples for element in tuple_]\n    element_count = {}\n    for element in element_list:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    return element_count", "task_id": "97_5f3ce808-06a2-4445-b6ea-771f138f6bb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of words in a sentence.", "code": "def frequency_words(sentence):\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count", "task_id": "97_44b6af35-25f5-464d-bdd5-7a7f6fc95bbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of elements in a list.", "code": "def frequency_elements(list1):\n    element_count = {}\n    for element in list1:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    return element_count", "task_id": "97_1671af28-8114-40cf-8b3d-7ded86d07623", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of digits in a number.", "code": "def frequency_digits(number):\n    digit_count = {}\n    for digit in str(number):\n        if digit in digit_count:\n            digit_count[digit] += 1\n        else:\n            digit_count[digit] = 1\n    return digit_count", "task_id": "97_4edd395d-7339-4302-a52a-c4ab860e2ff1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of characters in a string.", "code": "def frequency_chars(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return char_count", "task_id": "97_9f33c53a-ab5c-409b-b2aa-5c987fbd48c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of words in a list of sentences.", "code": "def frequency_words_in_list(list_of_sentences):\n    word_list = [word for sentence in list_of_sentences for word in sentence.split()]\n    word_count = {}\n    for word in word_list:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count", "task_id": "97_dcbeb911-4023-4153-b623-054b6fa0ebc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of elements in a list of pairs.", "code": "def frequency_pairs(list_of_pairs):\n    element_list = [element for pair in list_of_pairs for element in pair]\n    element_count = {}\n    for element in element_list:\n        if element in element_count:\n            element_count[element] += 1\n        else:\n            element_count[element] = 1\n    return element_count", "task_id": "97_bb4b0435-4fdb-4f28-919c-cf5fc0d5e010", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of unique elements in a list.", "code": "def frequency_unique_elements(list1):\n    unique_elements = set(list1)\n    element_count = {}\n    for element in unique_elements:\n        element_count[element] = list1.count(element)\n    return element_count", "task_id": "97_0a40b611-4721-4b22-8a66-c37cdb9a1bfe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the frequency count of values in a list of dictionaries.", "code": "def frequency_nested_dicts(list_of_dicts):\n    value_list = [value for dict_ in list_of_dicts for value in dict_.values()]\n    value_count = {}\n    for value in value_list:\n        if value in value_count:\n            value_count[value] += 1\n        else:\n            value_count[value] = 1\n    return value_count", "task_id": "97_80d2a369-b662-47a6-a939-6da884940883", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary string to its decimal equivalent.", "code": "def binary_to_decimal(binary_str):\n    return int(binary_str, 2)", "task_id": "99_3a884dab-1d9c-40e8-9921-6146d9fc0bc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its hexadecimal equivalent.", "code": "def decimal_to_hexadecimal(n):\n    return hex(n).replace('0x', '')", "task_id": "99_9320b53f-582d-4373-be85-102f7879bf9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal string to its decimal equivalent.", "code": "def hexadecimal_to_decimal(hex_str):\n    return int(hex_str, 16)", "task_id": "99_49066ed3-b300-4c0e-b286-4d06033affaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its octal equivalent.", "code": "def decimal_to_octal(n):\n    return oct(n).replace('0o', '')", "task_id": "99_96241204-0011-4b93-a59d-b40002380a21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal string to its decimal equivalent.", "code": "def octal_to_decimal(octal_str):\n    return int(octal_str, 8)", "task_id": "99_45258a0f-38ed-46ef-b5c0-afd5a34ab076", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary string to its hexadecimal equivalent.", "code": "def binary_to_hexadecimal(binary_str):\n    return hex(int(binary_str, 2)).replace('0x', '')", "task_id": "99_1a804224-e5e2-4ad7-8975-4bb715a9b3d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal string to its binary equivalent.", "code": "def hexadecimal_to_binary(hex_str):\n    return bin(int(hex_str, 16)).replace('0b', '')", "task_id": "99_6d219c2d-1f6a-4364-b19b-c859f58a232a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal string to its binary equivalent.", "code": "def octal_to_binary(octal_str):\n    return bin(int(octal_str, 8)).replace('0b', '')", "task_id": "99_ba58eb40-58de-48c2-8512-201cefeb95e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary string to its octal equivalent.", "code": "def binary_to_octal(binary_str):\n    return oct(int(binary_str, 2)).replace('0o', '')", "task_id": "99_74c71667-98bf-4b95-9a1a-e86db00457c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given decimal number to its equivalent in the specified base (between 2 and 16).", "code": "def decimal_to_base(n, base):\n    if base < 2 or base > 16:\n        return ''\n    digits = '0123456789ABCDEF'\n    result = ''\n    while n > 0:\n        result = digits[n % base] + result\n        n //= base\n    return result", "task_id": "99_0ddeac33-bc41-48d0-ad32-777245e89ca6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all the numbers in a list and return the sum along with the average of the numbers.", "code": "def sum_and_average(numbers):\n    total = sum(numbers)\n    average = total / len(numbers)\n    return total, average", "task_id": "98_b927a647-9d1e-409c-8f4a-6c3e3ea08e6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply all the even numbers in a list.", "code": "def product_of_evens(numbers):\n    total = 1\n    for x in numbers:\n        if x % 2 == 0:\n            total *= x\n    return total", "task_id": "98_80c3d0dd-71d3-423d-967e-053697856f8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of all the numbers in a list.", "code": "def sum_of_squares(numbers):\n    total = 0\n    for x in numbers:\n        total += x ** 2\n    return total", "task_id": "98_9a8b6dca-47fc-4718-acf8-460acb5f194b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply all the odd numbers in a list.", "code": "def product_of_odds(numbers):\n    total = 1\n    for x in numbers:\n        if x % 2 != 0:\n            total *= x\n    return total", "task_id": "98_52391fcd-428e-47d4-bb31-129aad9c50b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all the positive numbers in a list and return the sum along with the count of positive numbers.", "code": "def sum_and_count_positives(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x > 0:\n            total += x\n            count += 1\n    return total, count", "task_id": "98_a6712096-f1cd-4607-9e9f-bd7a02f2fee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the average of all the negative numbers in a list.", "code": "def average_of_negatives(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x < 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "98_2925c8bd-05c1-464f-ba9c-55088276c5ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the absolute values of all the numbers in a list.", "code": "def sum_of_absolute_values(numbers):\n    total = 0\n    for x in numbers:\n        total += abs(x)\n    return total", "task_id": "98_fbc75e05-2bf0-41bf-b06b-ed1c219679d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply all the non-zero numbers in a list.", "code": "def product_of_non_zero(numbers):\n    total = 1\n    for x in numbers:\n        if x != 0:\n            total *= x\n    return total", "task_id": "98_770e2af8-d1a5-421c-a96b-b59c4d570926", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the numbers at even indices in a list.", "code": "def sum_of_even_indices(numbers):\n    total = 0\n    for i in range(0, len(numbers), 2):\n        total += numbers[i]\n    return total", "task_id": "98_40e224c4-ed34-43ed-9a95-671c102d602b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the numbers at odd indices in a list.", "code": "def product_of_odd_indices(numbers):\n    total = 1\n    for i in range(1, len(numbers), 2):\n        total *= numbers[i]\n    return total", "task_id": "98_b2b0b3a3-a538-4ed5-8058-a663657cf4ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "100_7b272279-9d6b-4ba7-a3eb-fd06eefdff52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "100_ed274af7-4aee-49d0-ac05-d7c267597d76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "100_34087082-00ec-4bc0-a261-212845c98019", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "100_d7e30b61-2fe7-4402-9f37-8a8dc23d07cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "100_44f47797-9ad6-41e6-a422-02b4a03bfd0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "100_6929d5e0-d16e-4920-ae33-e4de08014081", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "100_2dd3dd43-ac86-4d76-8fdd-45ba1a643ff7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "100_8f64a809-b05a-4213-9f12-ac4720fa9613", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a*b) // gcd(a, b)", "task_id": "100_2e92036a-6571-428f-a1fa-a95f0b41a85b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "100_9ac9d410-db24-4613-8bda-0eaa1c65ab17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the index of the maximum value record from the given tuples.", "code": "from operator import itemgetter\ndef find_max_index(tuples):\n    res = max(tuples, key=itemgetter(1))[0]\n    return res", "task_id": "94_93a631b1-1eb3-4310-980f-54745270f59a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of the second elements of the given tuples.", "code": "def sum_second_elements(tuples):\n    return sum(x[1] for x in tuples)", "task_id": "94_9fed2bef-f736-4789-bb6a-ae6b66518470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the average of the first elements of the given tuples.", "code": "def average_first_elements(tuples):\n    return sum(x[0] for x in tuples) / len(tuples)", "task_id": "94_f85c8b0c-feaf-4ddb-a644-90d7f9fe04f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out tuples where the second element is less than a given threshold.", "code": "def filter_by_threshold(tuples, threshold):\n    return [t for t in tuples if t[1] >= threshold]", "task_id": "94_54a16e60-02cd-4230-a1ed-918afaa5b67f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given tuples by their first element.", "code": "def sort_by_first_element(tuples):\n    return sorted(tuples, key=lambda x: x[0])", "task_id": "94_96e0a319-7b20-4a2f-b30f-e56425e460c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many tuples have their second element above a given threshold.", "code": "def count_above_threshold(tuples, threshold):\n    return sum(1 for t in tuples if t[1] > threshold)", "task_id": "94_94924c5a-bd54-470a-8eaa-e22ad40517be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value of the first elements in the given tuples.", "code": "def find_min_first_element(tuples):\n    return min(t[0] for t in tuples)", "task_id": "94_96bebbd5-c3a7-4128-a86d-75b1772b4f3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the product of the second elements of the given tuples.", "code": "def multiply_second_elements(tuples):\n    result = 1\n    for t in tuples:\n        result *= t[1]\n    return result", "task_id": "94_4f0df11b-0314-4aa8-9208-d554b5aca083", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the tuple with the maximum sum of its elements.", "code": "def find_tuple_with_max_sum(tuples):\n    return max(tuples, key=lambda x: x[0] + x[1])", "task_id": "94_dbf9b7c8-0a3e-416c-85cc-4aee8332bcdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap the elements of each tuple in the given list of tuples.", "code": "def swap_elements(tuples):\n    return [(t[1], t[0]) for t in tuples]", "task_id": "94_d767fbe1-05c7-4733-8a51-5270a85fd9b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert camel case string to snake case string.", "code": "def camel_to_snake(word):\n    import re\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()", "task_id": "102_19cacb0b-55f1-4a1f-a0d3-1f6f62c648f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given sentence.", "code": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])", "task_id": "102_685db32f-a59e-41dc-ac64-fd0b2fe13d95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(word):\n    return word == word[::-1]", "task_id": "102_0787d2c2-da68-47be-a159-77c8e85c305d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(word):\n    return sum(1 for char in word if char.lower() in 'aeiou')", "task_id": "102_961ca736-18ec-49bf-ae94-2741169c3af0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "102_a6186be5-170b-483e-986e-d3d9f23b7ad3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "102_2325ce15-cc66-4d89-b34d-27eb3de7d392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "102_937d61b1-db65-408e-a114-cfa74cf2eb27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)", "task_id": "102_de2f7a78-9af3-43f3-bca7-d449d498ed6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "task_id": "102_65bbb6ca-3990-4a32-ba47-06ae85ec46b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given sentence.", "code": "def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)", "task_id": "102_b2425744-87e1-449a-9101-57183100f89f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest element in the given array.", "code": "def kth_smallest_element(arr, k):\n  arr.sort()\n  return arr[k-1]", "task_id": "101_1a0f6f96-26cb-4905-89fc-d4cb17b32b0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest element in the given array.", "code": "def kth_largest_element(arr, k):\n  arr.sort(reverse=True)\n  return arr[k-1]", "task_id": "101_31841c28-283e-4e23-8afa-370f0e9dd4e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth unique element in the given array.", "code": "def kth_unique_element(arr, k):\n  unique_elements = list(set(arr))\n  unique_elements.sort()\n  return unique_elements[k-1]", "task_id": "101_99eb7145-ad15-4e7d-b642-43c81c202679", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth even element in the given array.", "code": "def kth_even_element(arr, k):\n  even_elements = [x for x in arr if x % 2 == 0]\n  even_elements.sort()\n  return even_elements[k-1]", "task_id": "101_a881ca93-e3d0-4f0b-975d-58e0edec787a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth odd element in the given array.", "code": "def kth_odd_element(arr, k):\n  odd_elements = [x for x in arr if x % 2 != 0]\n  odd_elements.sort()\n  return odd_elements[k-1]", "task_id": "101_b6f8e14e-a505-43e3-ab56-6448c72fb478", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth prime element in the given array.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef kth_prime_element(arr, k):\n  prime_elements = [x for x in arr if is_prime(x)]\n  prime_elements.sort()\n  return prime_elements[k-1]", "task_id": "101_dc6974ce-8454-4c0e-b790-46188ce608b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth negative element in the given array.", "code": "def kth_negative_element(arr, k):\n  negative_elements = [x for x in arr if x < 0]\n  negative_elements.sort()\n  return negative_elements[k-1]", "task_id": "101_7e9c8f22-f6b3-4518-940b-5af31d75d80d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth positive element in the given array.", "code": "def kth_positive_element(arr, k):\n  positive_elements = [x for x in arr if x > 0]\n  positive_elements.sort()\n  return positive_elements[k-1]", "task_id": "101_d12d6ffa-4b0a-4cc2-9411-96c588a4c956", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth element in the given array after removing all occurrences of x.", "code": "def kth_element_after_removal(arr, k, x):\n  filtered_elements = [elem for elem in arr if elem != x]\n  filtered_elements.sort()\n  return filtered_elements[k-1]", "task_id": "101_4bc942ea-38ff-49e8-9d30-e0ff64ae4d96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth element in the subarray defined by start and end indices.", "code": "def kth_element_in_subarray(arr, start, end, k):\n  subarray = arr[start:end+1]\n  subarray.sort()\n  return subarray[k-1]", "task_id": "101_69bd7c11-1e12-45bc-a5a3-32242838e986", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each sublist in a given list of lists.", "code": "def reverse_sublists(input_list):\n    result = [x[::-1] for x in input_list]\n    return result", "task_id": "104_eb51d1f5-6ed8-47ef-a9ff-c5c011c9a31c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of each sublist in a given list of lists.", "code": "def sum_sublists(input_list):\n    result = [sum(x) for x in input_list]\n    return result", "task_id": "104_bd76fade-77d7-4b5f-9436-df532f4a79be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out odd numbers from each sublist in a given list of lists.", "code": "def filter_even_sublists(input_list):\n    result = [[num for num in x if num % 2 == 0] for x in input_list]\n    return result", "task_id": "104_1f8877c0-1a81-4005-b4a8-9036bebf5b6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the length of each sublist in a given list of lists.", "code": "def length_of_sublists(input_list):\n    result = [len(x) for x in input_list]\n    return result", "task_id": "104_8c1cdde2-7657-45f2-a62f-daf9401debab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list_of_lists(input_list):\n    result = [item for sublist in input_list for item in sublist]\n    return result", "task_id": "104_eadd9cd2-8e96-4891-b250-ba0d46258388", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in each sublist of a given list of lists.", "code": "def max_in_sublists(input_list):\n    result = [max(x) for x in input_list]\n    return result", "task_id": "104_c0249b24-228e-4cc6-8bbc-d5a45dbb0145", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in each sublist of a given list of lists.", "code": "def min_in_sublists(input_list):\n    result = [min(x) for x in input_list]\n    return result", "task_id": "104_19dc281c-c709-4a50-9de6-380b47387c5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the product of each sublist in a given list of lists.", "code": "from functools import reduce\n\ndef product_of_sublists(input_list):\n    result = [reduce(lambda a, b: a * b, x) for x in input_list]\n    return result", "task_id": "104_020251fa-5168-4e37-a599-61cb59e63710", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort each sublist of strings in a given list of lists by the length of the strings.", "code": "def sort_sublists_by_length(input_list):\n    result = [sorted(x, key = lambda x: len(x)) for x in input_list]\n    return result", "task_id": "104_14c3482c-1ba1-4577-bf3f-6404ff6696a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the strings in each sublist of a given list of lists.", "code": "def concatenate_sublists(input_list):\n    result = [''.join(x) for x in input_list]\n    return result", "task_id": "104_b5a717ba-968a-4704-80d6-f098ee90c934", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in the given list.", "code": "def count_odds(lst):\n    return sum(1 for x in lst if x % 2 != 0)", "task_id": "105_45f6ede8-5a16-4b52-91f3-e063d1cbaaae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in the given list.", "code": "def count_evens(lst):\n    return sum(1 for x in lst if x % 2 == 0)", "task_id": "105_acde9a3b-1a76-4f98-bb95-e8aedf71e599", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in the given list.", "code": "def count_positive(lst):\n    return sum(1 for x in lst if x > 0)", "task_id": "105_41603c08-2ed1-4b20-8c33-21cfd4d5d197", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in the given list.", "code": "def count_negative(lst):\n    return sum(1 for x in lst if x < 0)", "task_id": "105_09010adc-55a9-4564-9187-0b2129104cf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "105_37c8a992-80fa-447e-8c00-537f1119b980", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in the given string.", "code": "def count_uppercase(s):\n    return sum(1 for char in s if char.isupper())", "task_id": "105_8a40fa22-7ec8-4522-af7a-99d8f784d160", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in the given string.", "code": "def count_lowercase(s):\n    return sum(1 for char in s if char.islower())", "task_id": "105_c7cc1da1-f227-4c71-909c-e2cd6690ef11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in the given string.", "code": "def count_spaces(s):\n    return sum(1 for char in s if char == ' ')", "task_id": "105_1da894f0-ea8c-4d14-88c2-840ceb1e6e5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime numbers in the given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(lst):\n    return sum(1 for x in lst if is_prime(x))", "task_id": "105_74b42f2c-dabf-4aad-9f43-52ead8000fdc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic strings in the given list.", "code": "def count_palindromes(lst):\n    return sum(1 for s in lst if s == s[::-1])", "task_id": "105_3398486b-84fc-4f5c-8dfd-8371f3ac278e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the binomial coefficient C(n, k).", "code": "def binomial_coefficient(n: int, k: int) -> int:\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)", "task_id": "103_262c415a-c3c1-4a2c-bce5-26cd8fe08684", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "103_4e984589-9a54-459e-8233-78a287155e41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Catalan number.", "code": "def catalan_number(n: int) -> int:\n    if n == 0:\n        return 1\n    res = 0\n    for i in range(n):\n        res += catalan_number(i) * catalan_number(n-i-1)\n    return res", "task_id": "103_9b9f10db-fcbd-4182-a9b2-d5be8b383794", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the nth row of Pascal's triangle.", "code": "def pascal_triangle_row(n: int) -> list[int]:\n    row = [1]\n    for k in range(1, n+1):\n        row.append(row[-1] * (n - k + 1) // k)\n    return row", "task_id": "103_95fedd18-50e8-4c13-b96a-2d0ec2a69f03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the Stirling number of the second kind S(n, k).", "code": "def stirling_number(n: int, k: int) -> int:\n    if n == k == 0:\n        return 1\n    if n == 0 or k == 0:\n        return 0\n    return k * stirling_number(n-1, k) + stirling_number(n-1, k-1)", "task_id": "103_db38a205-21ca-44ae-b51d-7079d7c12902", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Bell number.", "code": "def bell_number(n: int) -> int:\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "task_id": "103_41738053-60a6-4829-9acb-95fa5594588a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Motzkin number.", "code": "def motzkin_number(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    motzkin = [0] * (n + 1)\n    motzkin[0], motzkin[1] = 1, 1\n    for i in range(2, n + 1):\n        motzkin[i] = ((2 * i + 1) * motzkin[i - 1] + (3 * i - 3) * motzkin[i - 2]) // (i + 2)\n    return motzkin[n]", "task_id": "103_8a594b70-cc73-4f8f-9960-52be433a6efe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the number of derangements (permutations with no fixed points) of n items.", "code": "def derangement(n: int) -> int:\n    if n == 0:\n        return 1\n    if n == 1:\n        return 0\n    return (n - 1) * (derangement(n - 1) + derangement(n - 2))", "task_id": "103_3710f6ad-4260-41ca-a974-b567ac47d72c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Lucas number.", "code": "def lucas_number(n: int) -> int:\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return lucas_number(n-1) + lucas_number(n-2)", "task_id": "103_eea0ede7-3731-4bcb-b430-8ccb65db34ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Tribonacci number.", "code": "def tribonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    if n == 1 or n == 2:\n        return 1\n    return tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)", "task_id": "103_89878fcf-a3ec-484d-9bbe-f672f1a5da52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply each element of the given list with the corresponding element of the given tuple.", "code": "def multiply_elements(test_list, test_tup):\n    res = tuple(a * b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_1cf76e51-94ef-4a8d-aa44-4fe44f511871", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of the given list with the corresponding element of the given tuple.", "code": "def concatenate_elements(test_list, test_tup):\n    res = tuple(str(a) + str(b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_13c389c9-38df-4bd6-8c10-86fdb2c31ce1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a given constant to each element of the given list and tuple.", "code": "def add_constant_to_elements(test_list, test_tup, constant):\n    res = tuple(a + constant for a in test_list + list(test_tup))\n    return res", "task_id": "106_bee938a5-83cb-411b-bb32-3eb514445b58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract each element of the given tuple from the corresponding element of the given list.", "code": "def subtract_elements(test_list, test_tup):\n    res = tuple(a - b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_cbe0f788-02fb-4c26-ae8c-668df68f621b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide each element of the given list by the corresponding element of the given tuple.", "code": "def divide_elements(test_list, test_tup):\n    res = tuple(a / b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e1288e2a-c8b8-4868-abd4-64e5afb5984c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of each element of the given list by the corresponding element of the given tuple.", "code": "def mod_elements(test_list, test_tup):\n    res = tuple(a % b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_fae1f0e7-fa06-4ae5-8f22-174f2af6415c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise each element of the given list to the power of the corresponding element of the given tuple.", "code": "def power_elements(test_list, test_tup):\n    res = tuple(a ** b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_6c63f53a-313b-44db-a6da-fb9f334e7a5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of each element of the given list and the corresponding element of the given tuple.", "code": "def max_elements(test_list, test_tup):\n    res = tuple(max(a, b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e35923f3-ce4e-43f6-aa12-cbb2f45d0d73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of each element of the given list and the corresponding element of the given tuple.", "code": "def min_elements(test_list, test_tup):\n    res = tuple(min(a, b) for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_f75a9e4c-d01a-4e42-bf0a-d563364bdf62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum each element of the given list with the corresponding element of the given tuple.", "code": "def sum_elements(test_list, test_tup):\n    res = tuple(a + b for a, b in zip(test_list, test_tup))\n    return res", "task_id": "106_e1603cc9-7fec-43bf-a0ce-c76cd8cb4492", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list using heap queue algorithm.", "code": "import heapq\n\ndef merge_sorted_lists(*lists):\n    return list(heapq.merge(*lists))", "task_id": "108_7fa44468-7534-4435-961e-2387b353c705", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted dictionaries into a single sorted dictionary.", "code": "def merge_sorted_dicts(dict1, dict2):\n    merged = {**dict1, **dict2}\n    return dict(sorted(merged.items()))", "task_id": "108_da80762f-c654-4e20-8b46-51afc7f396fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted strings into a single sorted string.", "code": "def merge_sorted_strings(str1, str2):\n    return ''.join(sorted(str1 + str2))", "task_id": "108_136fe294-9c41-4fe7-b786-9116fccddbac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted tuples into a single sorted tuple.", "code": "def merge_sorted_tuples(tup1, tup2):\n    return tuple(sorted(tup1 + tup2))", "task_id": "108_3877603f-80f9-4efd-b4c6-20d8af867770", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted sets into a single sorted list.", "code": "def merge_sorted_sets(set1, set2):\n    return sorted(set1.union(set2))", "task_id": "108_2d10a64b-99aa-44f7-973a-020832dd5283", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge three sorted arrays into a single sorted array.", "code": "import heapq\n\ndef merge_sorted_arrays(arr1, arr2, arr3):\n    return list(heapq.merge(arr1, arr2, arr3))", "task_id": "108_4a766083-53d9-4749-80ca-4b3b7c1b60f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge a list of sorted lists into a single sorted list.", "code": "import heapq\n\ndef merge_sorted_lists_of_lists(lists):\n    return list(heapq.merge(*lists))", "task_id": "108_ecf70e65-6f70-453f-a94b-3c5de325c37d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list, allowing duplicates.", "code": "import heapq\n\ndef merge_sorted_lists_with_duplicates(*lists):\n    return list(heapq.merge(*lists))", "task_id": "108_73534e69-1bae-4b4c-89a4-7ecde02ed681", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list, removing duplicates.", "code": "import heapq\n\ndef merge_sorted_lists_remove_duplicates(*lists):\n    return sorted(set(heapq.merge(*lists)))", "task_id": "108_3a0f3f3e-f8f0-4cff-a0e9-79e78c7469f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into a single sorted list using a custom key function.", "code": "import heapq\n\ndef merge_sorted_lists_with_custom_key(*lists, key):\n    merged = heapq.merge(*lists)\n    return sorted(merged, key=key)", "task_id": "108_d5a63384-134e-4ce6-9d26-8442d957fa77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count even hexadecimal numbers for a given range.", "code": "def count_even_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 2 == 0:\n            count += 1\n    return count", "task_id": "107_c5613694-fc66-4bc3-9962-cc5a3bb1ec13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count odd hexadecimal numbers for a given range.", "code": "def count_odd_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 2 != 0:\n            count += 1\n    return count", "task_id": "107_cdcceecc-3dcd-4e49-a98f-f4b185095aa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sum all hexadecimal numbers for a given range.", "code": "def sum_hexadecimal(L, R):\n    total = 0\n    for i in range(L, R + 1):\n        total += i\n    return total", "task_id": "107_f526c517-0a48-40b6-a217-64ad3f7d5653", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count prime hexadecimal numbers for a given range.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if is_prime(i):\n            count += 1\n    return count", "task_id": "107_47ab279f-c732-4ae2-bb42-1e9ed365cdab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count palindromic hexadecimal numbers for a given range.", "code": "def is_palindromic(n):\n    return str(n) == str(n)[::-1]\n\ndef count_palindromic_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if is_palindromic(i):\n            count += 1\n    return count", "task_id": "107_fd3383c7-78e6-44ed-90cc-ac4c44d73f80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers divisible by 5 for a given range.", "code": "def count_divisible_by_five_hexadecimal(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if i % 5 == 0:\n            count += 1\n    return count", "task_id": "107_1a4b2daa-973d-40a2-9792-53b64cedf281", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing a specific digit for a given range.", "code": "def count_hexadecimal_with_digit(L, R, digit):\n    count = 0\n    for i in range(L, R + 1):\n        if str(digit) in str(i):\n            count += 1\n    return count", "task_id": "107_d31ecc42-3fe9-47ad-9c56-b3a533a65e6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only even digits for a given range.", "code": "def count_hexadecimal_with_even_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(int(d) % 2 == 0 for d in str(i)):\n            count += 1\n    return count", "task_id": "107_59f7a747-d75b-4f78-a05e-d410a1a987e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only odd digits for a given range.", "code": "def count_hexadecimal_with_odd_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(int(d) % 2 != 0 for d in str(i)):\n            count += 1\n    return count", "task_id": "107_e5c5bd08-d815-4215-89bd-e6f6b6039dc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count hexadecimal numbers containing only prime digits for a given range.", "code": "def is_prime_digit(d):\n    return d in {2, 3, 5, 7}\n\ndef count_hexadecimal_with_prime_digits(L, R):\n    count = 0\n    for i in range(L, R + 1):\n        if all(is_prime_digit(int(d)) for d in str(i)):\n            count += 1\n    return count", "task_id": "107_9ebe9d06-bae4-4217-988b-6cf0318e2f31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in an odd decimal value.", "code": "def count_odd_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 1:\n            count += 1\n    return count", "task_id": "109_342dccf1-ca1d-41ee-b495-1d252c049077", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in an even decimal value.", "code": "def count_even_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if int(rotated, 2) % 2 == 0:\n            count += 1\n    return count", "task_id": "109_93afd1a7-5e20-4f45-9bfb-8310e6d90ae2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of binary strings with an odd number of 1s after any rotation.", "code": "def count_odd_ones(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 1:\n            count += 1\n    return count", "task_id": "109_eaf9f98e-8020-4e09-99ce-89bc14c5d2ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of binary strings with an even number of 1s after any rotation.", "code": "def count_even_ones(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') % 2 == 0:\n            count += 1\n    return count", "task_id": "109_5f9720ea-6e5c-4971-a68c-adb2f3ad3424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in a palindromic string.", "code": "def count_palindromic_rotations(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated == rotated[::-1]:\n            count += 1\n    return count", "task_id": "109_14379fba-2f5f-485d-8836-ce2c47b60fa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of unique rotations of a binary string.", "code": "def count_unique_rotations(s: str) -> int:\n    rotations = set()\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        rotations.add(rotated)\n    return len(rotations)", "task_id": "109_b6c430f7-d2a1-4631-afcf-7db63e170451", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that have exactly k number of 1s.", "code": "def count_rotations_with_k_ones(s: str, k: int) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('1') == k:\n            count += 1\n    return count", "task_id": "109_e153ca79-ddf8-4c09-920e-0a3f96785966", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that have exactly k number of 0s.", "code": "def count_rotations_with_k_zeros(s: str, k: int) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if rotated.count('0') == k:\n            count += 1\n    return count", "task_id": "109_8958e1d3-104e-4427-a7b7-fdb60e640bda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that result in a prime decimal value.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_rotations_with_prime_value(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        if is_prime(int(rotated, 2)):\n            count += 1\n    return count", "task_id": "109_89ca0072-ca8f-44cf-94b5-27688f15fb92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to find the count of rotations of a binary string that contain a palindromic substring of length at least 3.", "code": "def is_palindrome(sub: str) -> bool:\n    return sub == sub[::-1]\n\ndef count_rotations_with_palindromic_substring(s: str) -> int:\n    count = 0\n    n = len(s)\n    for i in range(n):\n        rotated = s[i:] + s[:i]\n        for j in range(n):\n            for k in range(j + 3, n + 1):\n                if is_palindrome(rotated[j:k]):\n                    count += 1\n                    break\n    return count", "task_id": "109_56651786-70db-40c0-a136-faccf8a64cd9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing ranges within the given range.", "code": "def find_missing_ranges(nums, lower, upper):\n    missing_ranges = []\n    prev = lower - 1\n    for num in nums + [upper + 1]:\n        if num == prev + 2:\n            missing_ranges.append(str(prev + 1))\n        elif num > prev + 2:\n            missing_ranges.append(f'{prev + 1}->{num - 1}')\n        prev = num\n    return missing_ranges", "task_id": "110_e5c354de-79aa-42c0-be69-b4f0fbe29981", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing individual elements within the given range.", "code": "def find_missing_elements(nums, lower, upper):\n    missing_elements = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_elements.append(num)\n    return missing_elements", "task_id": "110_0be33f8c-00ed-40cf-8c38-501561af58b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing intervals within the given range.", "code": "def find_missing_intervals(nums, lower, upper):\n    missing_intervals = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_intervals.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_intervals.append((prev, upper))\n    return missing_intervals", "task_id": "110_f8a42a10-a90d-4159-b5d9-6ae8405a4c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing ranges within the given range with a specific step size.", "code": "def find_missing_ranges_with_steps(nums, lower, upper, step):\n    missing_ranges = []\n    prev = lower - step\n    for num in nums + [upper + step]:\n        if num == prev + step:\n            missing_ranges.append(str(prev + step))\n        elif num > prev + step:\n            missing_ranges.append(f'{prev + step}->{num - step}')\n        prev = num\n    return missing_ranges", "task_id": "110_33690b95-7133-4cd4-83c0-f4aea1ad660e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing subranges within the given range.", "code": "def find_missing_subranges(nums, lower, upper):\n    missing_subranges = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_subranges.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_subranges.append((prev, upper))\n    return missing_subranges", "task_id": "110_c4e8f4d9-3452-4ae1-b595-a4aa6361b231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing numbers within the given range.", "code": "def find_missing_numbers(nums, lower, upper):\n    missing_numbers = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_numbers.append(num)\n    return missing_numbers", "task_id": "110_1616f19f-3296-4af8-87d7-62b9b6fe5cf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing values within the given range.", "code": "def find_missing_values(nums, lower, upper):\n    missing_values = []\n    num_set = set(nums)\n    for num in range(lower, upper + 1):\n        if num not in num_set:\n            missing_values.append(num)\n    return missing_values", "task_id": "110_c786bca3-1426-4620-aa9c-5a6723b5c37a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing segments within the given range.", "code": "def find_missing_segments(nums, lower, upper):\n    missing_segments = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_segments.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_segments.append((prev, upper))\n    return missing_segments", "task_id": "110_30556ab3-d81c-494c-800b-8e39b6887e11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing gaps within the given range.", "code": "def find_missing_gaps(nums, lower, upper):\n    missing_gaps = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_gaps.append((prev, num - 1))\n        prev = num + 1\n    if prev <= upper:\n        missing_gaps.append((prev, upper))\n    return missing_gaps", "task_id": "110_2c588d6b-d424-4a8e-8147-c69a8a6f74dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given a sorted list of integers and a range [lower, upper], find the missing intervals within the given range with a specific step size.", "code": "def find_missing_intervals_with_steps(nums, lower, upper, step):\n    missing_intervals = []\n    prev = lower\n    for num in nums:\n        if num > prev:\n            missing_intervals.append((prev, num - step))\n        prev = num + step\n    if prev <= upper:\n        missing_intervals.append((prev, upper))\n    return missing_intervals", "task_id": "110_df3a7a4f-4988-4fc5-82dc-d4aeda08af22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements that appear in at least 'threshold' number of nested lists.", "code": "def common_in_nested_lists_with_threshold(nestedlist, threshold):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= threshold]", "task_id": "111_f1e779d4-d509-48d9-b698-5f6484811fb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements that appear in all but one of the nested lists.", "code": "def common_elements_in_all_but_one(nestedlist):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= len(nestedlist) - 1]", "task_id": "111_7ad38927-4d42-4619-bf90-0f7f40c6fdbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find unique elements in each nested list.", "code": "def unique_elements_in_each_list(nestedlist):\n    return [list(set(sublist)) for sublist in nestedlist]", "task_id": "111_02fe661f-b3f6-4ecf-8e96-c46032e5a8ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements that appear at least 'min_freq' times across all nested lists.", "code": "def common_elements_with_min_frequency(nestedlist, min_freq):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq >= min_freq]", "task_id": "111_cff8c978-98c4-4db9-be6a-ca32ebb9bc57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements that appear at most 'max_freq' times across all nested lists.", "code": "def common_elements_with_max_frequency(nestedlist, max_freq):\n    from collections import Counter\n    flat_list = [item for sublist in nestedlist for item in sublist]\n    count = Counter(flat_list)\n    return [item for item, freq in count.items() if freq <= max_freq]", "task_id": "111_7f0b8275-a5b0-4090-9077-f957345a73af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements in the first 'n' nested lists.", "code": "def common_elements_in_first_n_lists(nestedlist, n):\n    return list(set.intersection(*map(set, nestedlist[:n])))", "task_id": "111_b15c669b-8c17-4f8c-8fad-97eb49907a6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements in the last 'n' nested lists.", "code": "def common_elements_in_last_n_lists(nestedlist, n):\n    return list(set.intersection(*map(set, nestedlist[-n:])))", "task_id": "111_6df759fb-14a3-4002-aed1-70b9aef6d6fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists, excluding elements present in the 'exclude' list.", "code": "def common_elements_with_exclusion(nestedlist, exclude):\n    common_elements = list(set.intersection(*map(set, nestedlist)))\n    return [item for item in common_elements if item not in exclude]", "task_id": "111_1853e6ad-1490-4cfc-8a77-e813c11c308d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists that fall within a specified range [start, end].", "code": "def common_elements_within_range(nestedlist, start, end):\n    common_elements = list(set.intersection(*map(set, nestedlist)))\n    return [item for item in common_elements if start <= item <= end]", "task_id": "111_f250d3d4-641d-4ce0-8fef-b5b9507b0a2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements in nested lists that have at least 'min_length' elements.", "code": "def common_elements_with_min_length(nestedlist, min_length):\n    filtered_lists = [sublist for sublist in nestedlist if len(sublist) >= min_length]\n    return list(set.intersection(*map(set, filtered_lists)))", "task_id": "111_08544fa0-ea6d-4300-8d69-7aa593fd643a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the area of a rectangle.", "code": "def area_of_rectangle(length: int, width: int) -> int:\n    return length * width", "task_id": "112_6b33f9a1-fd0c-4214-8e53-18e9a8e62ff0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cylinder.", "code": "import math\n\ndef volume_of_cylinder(radius: float, height: float) -> float:\n    return math.pi * radius**2 * height", "task_id": "112_c4a458c4-1de5-4465-b157-b083e9a497ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the perimeter of a rectangle.", "code": "def perimeter_of_rectangle(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "112_186c18bc-556e-4511-b358-94e3bb42d4d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the area of a circle.", "code": "import math\n\ndef area_of_circle(radius: float) -> float:\n    return math.pi * radius**2", "task_id": "112_204a957d-4324-4bbf-8a16-b5baafd032e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cube.", "code": "def volume_of_cube(side: int) -> int:\n    return side**3", "task_id": "112_7440f221-f115-413b-9497-553bf318792b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cube.", "code": "def surface_area_of_cube(side: int) -> int:\n    return 6 * side**2", "task_id": "112_cd3029dd-763c-40cc-b6ab-4b3041e60b48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the circumference of a circle.", "code": "import math\n\ndef circumference_of_circle(radius: float) -> float:\n    return 2 * math.pi * radius", "task_id": "112_7fb45936-d8c0-494e-ad49-c9ff2c65ec0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the area of a triangle.", "code": "def area_of_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "112_981c1d9d-1c01-4a36-a856-9dd027da32c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a sphere.", "code": "import math\n\ndef volume_of_sphere(radius: float) -> float:\n    return (4/3) * math.pi * radius**3", "task_id": "112_91a3a4c9-ccf7-41e6-a122-4885ec305546", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a sphere.", "code": "import math\n\ndef surface_area_of_sphere(radius: float) -> float:\n    return 4 * math.pi * radius**2", "task_id": "112_e5f476a0-f567-4b2d-adcc-7dbb3ad597b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string represents a floating-point number or not.", "code": "def check_float(text):\n    text = text.strip()\n    if len(text) < 1:\n        return False\n    try:\n        float(text)\n        return True\n    except ValueError:\n        return False", "task_id": "113_f782b4c5-d9cd-4e12-bd03-10db09373392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string represents a valid hexadecimal number or not.", "code": "def check_hexadecimal(text):\n    text = text.strip()\n    if len(text) < 1:\n        return False\n    try:\n        int(text, 16)\n        return True\n    except ValueError:\n        return False", "task_id": "113_7dd3c086-244a-4772-9599-79b985128594", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string represents a binary number or not.", "code": "def check_binary(text):\n    text = text.strip()\n    if len(text) < 1:\n        return False\n    return all(char in '01' for char in text)", "task_id": "113_b7d8513e-57ff-4b08-ae24-eb3057bfe1c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome or not.", "code": "def check_palindrome(text):\n    text = text.strip().lower()\n    return text == text[::-1]", "task_id": "113_4fb202f7-cab7-434c-b8b1-5f39829338fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is in uppercase or not.", "code": "def check_uppercase(text):\n    return text.isupper()", "task_id": "113_558ae498-9848-463c-985b-0679191a5b87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is in lowercase or not.", "code": "def check_lowercase(text):\n    return text.islower()", "task_id": "113_2070413d-bc05-4bab-9d09-c746b7333e0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is alphanumeric or not.", "code": "def check_alphanumeric(text):\n    return text.isalnum()", "task_id": "113_221f6e02-33fe-4cb2-8bd0-8bda8d5f1195", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is in title case or not.", "code": "def check_title_case(text):\n    return text.istitle()", "task_id": "113_eed6a50a-93ae-4fdf-a77c-6705aaae2f15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string contains only ASCII characters or not.", "code": "def check_ascii(text):\n    return all(ord(char) < 128 for char in text)", "task_id": "113_5a6b9890-62c0-4075-8e26-877c22d91bc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with a vowel or not.", "code": "def check_vowel_start(text):\n    text = text.strip().lower()\n    return text[0] in 'aeiou' if text else False", "task_id": "113_8b3f6629-42fa-410e-b84e-8f741190b14b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are empty or not.", "code": "def all_strings_empty(lst: list) -> bool:\n    return all(s == '' for s in lst)", "task_id": "115_03c8d424-6f73-4acf-acc4-b63a9574e1c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all lists in a list are empty or not.", "code": "def all_lists_empty(lst: list) -> bool:\n    return all(len(sublist) == 0 for sublist in lst)", "task_id": "115_1dbe631c-6e8e-46bc-b2d9-517a954bc217", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all sets in a list are empty or not.", "code": "def all_sets_empty(lst: list) -> bool:\n    return all(len(s) == 0 for s in lst)", "task_id": "115_8aef3721-49f3-4931-a163-dd3efad02965", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all tuples in a list are empty or not.", "code": "def all_tuples_empty(lst: list) -> bool:\n    return all(len(t) == 0 for t in lst)", "task_id": "115_270f7c1e-e265-403b-8953-cb30b3f3ee3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all values in a list of integers are zero or not.", "code": "def all_values_zero(lst: list) -> bool:\n    return all(x == 0 for x in lst)", "task_id": "115_0d62f01c-b310-4969-b7e1-b8f5fbdb1276", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all values in a list are None or not.", "code": "def all_values_none(lst: list) -> bool:\n    return all(x is None for x in lst)", "task_id": "115_86f8f26b-1130-46d0-9442-df81be30b1c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are uppercase or not.", "code": "def all_strings_uppercase(lst: list) -> bool:\n    return all(s.isupper() for s in lst)", "task_id": "115_a65ea644-7c66-404f-ace3-f331dcbc1b7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all numbers in a list are positive or not.", "code": "def all_numbers_positive(lst: list) -> bool:\n    return all(x > 0 for x in lst)", "task_id": "115_d2762df4-f9ab-4712-9eea-94d9ac7ad02f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all elements in a list are equal or not.", "code": "def all_elements_equal(lst: list) -> bool:\n    return all(x == lst[0] for x in lst)", "task_id": "115_d87d4e7a-4918-41da-abaf-0edf770a177e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specific key is present in all dictionaries in a list.", "code": "def all_keys_present(lst: list, key: str) -> bool:\n    return all(key in d for d in lst)", "task_id": "115_16481042-a458-46e9-a6b3-6a3127d567a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into an integer.", "code": "def list_to_int(nums):\n    result = int(''.join(map(str, nums)))\n    return result", "task_id": "116_74b829be-7e13-4632-aae2-c944027f71c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a string.", "code": "def tuple_to_str(nums):\n    result = ''.join(map(str, nums))\n    return result", "task_id": "116_7e26c663-bebe-42cf-81f2-ec41e3b15a3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a string.", "code": "def list_to_str(nums):\n    result = ''.join(map(str, nums))\n    return result", "task_id": "116_16e25c5a-93d6-4e7b-b6f9-3a43b7ef93b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a float.", "code": "def tuple_to_float(nums):\n    result = float(''.join(map(str, nums)))\n    return result", "task_id": "116_4f21811d-ef62-4f69-88e3-f84fb3a6bf09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a float.", "code": "def list_to_float(nums):\n    result = float(''.join(map(str, nums)))\n    return result", "task_id": "116_690d4dd5-e1e2-40d3-a8b1-5f126b308ad1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a hexadecimal string.", "code": "def tuple_to_hex(nums):\n    result = hex(int(''.join(map(str, nums))))\n    return result", "task_id": "116_9017c059-f7e4-491e-b4f6-bbd0caeea89d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a hexadecimal string.", "code": "def list_to_hex(nums):\n    result = hex(int(''.join(map(str, nums))))\n    return result", "task_id": "116_15f21319-b3f9-4083-9c2b-8a11a5d48f6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into a binary string.", "code": "def tuple_to_bin(nums):\n    result = bin(int(''.join(map(str, nums))))\n    return result", "task_id": "116_b257c118-103a-4e1e-b261-c1c8c77e71fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of positive integers into a binary string.", "code": "def list_to_bin(nums):\n    result = bin(int(''.join(map(str, nums))))\n    return result", "task_id": "116_0b5ac0a9-5c61-42af-b2aa-ba3d79279d10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple of positive integers into an octal string.", "code": "def tuple_to_octal(nums):\n    result = oct(int(''.join(map(str, nums))))\n    return result", "task_id": "116_56ef58a5-7525-4c70-a073-fb21308ec0e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each element in a list and return a list of tuples with the element and its frequency.", "code": "from collections import Counter\n\ndef count_elements(lst):\n    return list(Counter(lst).items())", "task_id": "114_1274e5ec-a389-4764-baf5-f1d97a7cfd50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each character in a string and return a dictionary with the character as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef char_frequency(s):\n    return dict(Counter(s))", "task_id": "114_4eaac10a-89f2-4af3-832a-1e1456e549d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each word in a sentence and return a dictionary with the word as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef word_frequency(sentence):\n    words = sentence.split()\n    return dict(Counter(words))", "task_id": "114_01593ecd-ae94-4363-aeff-318e83ec9104", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each element in a list of lists and return a list of tuples with the element and its frequency.", "code": "from collections import Counter\n\ndef element_frequency(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return list(Counter(flat_list).items())", "task_id": "114_7628b965-1c02-4612-be51-8175963295e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from the given list.", "code": "def unique_elements(lst):\n    return list(set(lst))", "task_id": "114_d8c3ab10-c777-43ce-9d61-a1b3a60b3dea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common element in a list and return a tuple with the element and its frequency.", "code": "from collections import Counter\n\ndef most_common_element(lst):\n    counter = Counter(lst)\n    return counter.most_common(1)[0]", "task_id": "114_639d21e7-32d6-4859-96c4-0281f273f149", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common element in a list and return a tuple with the element and its frequency.", "code": "from collections import Counter\n\ndef least_common_element(lst):\n    counter = Counter(lst)\n    return counter.most_common()[-1]", "task_id": "114_e3708dc7-5225-44e0-8bd3-51e0abebac32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each vowel in a string and return a dictionary with the vowel as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_vowels(s):\n    vowels = 'aeiou'\n    filtered_vowels = [char for char in s if char in vowels]\n    return dict(Counter(filtered_vowels))", "task_id": "114_ea19a1bf-39e9-4529-a589-5a8fcda3338d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of words of different lengths in a sentence and return a dictionary with the word length as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_words_length(sentence):\n    words = sentence.split()\n    lengths = [len(word) for word in words]\n    return dict(Counter(lengths))", "task_id": "114_baec0392-45cb-46b2-8be0-5313f265e005", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each digit in an integer and return a dictionary with the digit as the key and its frequency as the value.", "code": "from collections import Counter\n\ndef count_digit_frequency(n):\n    digits = str(n)\n    return dict(Counter(digits))", "task_id": "114_075a7e71-695f-40c7-bdf7-62842a6c001b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible convertible elements in the list to integers.", "code": "def convert_to_int(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(int(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_307c4853-8f1b-424b-9b71-101ab7b40bad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all elements in the list to strings.", "code": "def convert_to_str(lst):\n    return [str(item) for item in lst]", "task_id": "117_05bf9b1c-cc7e-401e-935b-b6f164b3f2de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible convertible elements in the list to boolean values.", "code": "def convert_to_bool(lst):\n    res = []\n    for item in lst:\n        if str(item).lower() in ['true', 'false']:\n            res.append(item.lower() == 'true')\n        else:\n            res.append(item)\n    return res", "task_id": "117_2f55755c-aec6-4899-9f9b-0639e68db227", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to uppercase.", "code": "def convert_to_uppercase(lst):\n    return [item.upper() if isinstance(item, str) else item for item in lst]", "task_id": "117_88fb1264-5cef-4b00-b593-2b8cd4243a89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to lowercase.", "code": "def convert_to_lowercase(lst):\n    return [item.lower() if isinstance(item, str) else item for item in lst]", "task_id": "117_efdd669f-9345-4aac-bdc7-4b826fca47db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their absolute values.", "code": "def convert_to_abs(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(abs(float(item)))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_1807815e-2cda-4c19-8747-deaa466ffe04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all string elements in the list to their lengths.", "code": "def convert_to_length(lst):\n    return [len(item) if isinstance(item, str) else item for item in lst]", "task_id": "117_b2b5866b-ac65-4f00-b5b5-b89f0b368cde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their square values.", "code": "def convert_to_square(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(float(item) ** 2)\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_69c194a6-b369-4e39-8281-f531fc647f27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to floats, and leave other elements unchanged.", "code": "def convert_to_float_if_possible(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(float(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_0b876b1d-076a-46af-a5a9-ed7b67ba782a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all possible numeric elements in the list to their negative values.", "code": "def convert_to_negative(lst):\n    res = []\n    for item in lst:\n        try:\n            res.append(-float(item))\n        except ValueError:\n            res.append(item)\n    return res", "task_id": "117_8f6878bd-b91e-47a7-afe4-7c765232912e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "118_f9b162d8-5d03-4813-aeda-92ac6bdea35d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "118_93ffd254-364a-4066-9386-a7df156d6edd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    s = s.replace(' ', '').lower()\n    return s == s[::-1]", "task_id": "118_2bdc383d-785d-44d4-b821-eefa2572d85d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "118_433e0189-fe36-476f-9fdf-eb8680d1278c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(dict.fromkeys(lst))", "task_id": "118_2b31ecf7-ca39-475a-ad96-797879728447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "118_1d3f1f6a-65f6-4420-9870-f8a1250aaefb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of a given integer.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "118_2ba41501-8c10-429e-bc6b-d87d77e1f829", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1.replace(' ', '').lower()) == sorted(s2.replace(' ', '').lower())", "task_id": "118_2a54dcb1-3840-4468-8cf9-2c4353684362", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n: int) -> list:\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:n]", "task_id": "118_ea2a13c2-2cf7-4b7d-994a-903920189828", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(lst: list) -> list:\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "task_id": "118_3d1505ba-5f6b-4bf1-86fc-d94d98b61fe5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum from the pairs of tuples within a given list.", "code": "def max_sum_tuple(list1):\n    result_max = max([x + y for x, y in list1])\n    return result_max", "task_id": "120_aba3b92c-a7d5-48b8-992a-741f3e5e5105", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum product from the pairs of tuples within a given list.", "code": "def min_product_tuple(list1):\n    result_min = min([x * y for x, y in list1])\n    return result_min", "task_id": "120_5825bfc5-86af-4da4-898d-f6f4548c0844", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute sum from the pairs of tuples within a given list.", "code": "def max_sum_abs_tuple(list1):\n    result_max = max([abs(x + y) for x, y in list1])\n    return result_max", "task_id": "120_138e08dd-6784-406c-b587-4a2143b5dba7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum from the pairs of tuples within a given list.", "code": "def min_sum_tuple(list1):\n    result_min = min([x + y for x, y in list1])\n    return result_min", "task_id": "120_491ed808-6026-4685-897f-933463877595", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference from the pairs of tuples within a given list.", "code": "def max_diff_tuple(list1):\n    result_max = max([abs(x - y) for x, y in list1])\n    return result_max", "task_id": "120_fa1d5406-e639-47fe-9945-a876d83716bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum difference from the pairs of tuples within a given list.", "code": "def min_diff_tuple(list1):\n    result_min = min([abs(x - y) for x, y in list1])\n    return result_min", "task_id": "120_baf306c0-54c5-49f8-946b-100aab92fb8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute product from the pairs of tuples within a given list.", "code": "def max_product_abs_tuple(list1):\n    result_max = max([abs(x * y) for x, y in list1])\n    return result_max", "task_id": "120_4c717cbb-19d4-44bc-9f98-e6db93a183b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the maximum products from the pairs of tuples within a given list.", "code": "def sum_of_max_products(list1):\n    result_sum = sum([max(x, y) for x, y in list1])\n    return result_sum", "task_id": "120_4d2e32ca-1d75-44a6-88fa-963a22062711", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of squares from the pairs of tuples within a given list.", "code": "def max_sum_of_squares(list1):\n    result_max = max([x**2 + y**2 for x, y in list1])\n    return result_max", "task_id": "120_a4dcc6c2-7ae2-49a9-bc9a-ca5af8039391", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of squares from the pairs of tuples within a given list.", "code": "def min_sum_of_squares(list1):\n    result_min = min([x**2 + y**2 for x, y in list1])\n    return result_min", "task_id": "120_8a969486-fdd5-4f7d-9ce8-19a328c486d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element that appears only once in an unsorted array.", "code": "def find_unique(arr):\n    result = 0\n    for num in arr:\n        result ^= num\n    return result", "task_id": "119_d75e228b-5264-4481-b9c7-1f0178db5f0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of integers from 1 to n.", "code": "def find_missing(arr, n):\n    total = n * (n + 1) // 2\n    sum_arr = sum(arr)\n    return total - sum_arr", "task_id": "119_310b9ec8-bb36-4c9a-ad8c-7dbe0fc57574", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the duplicate number in an array of integers where each integer is between 1 and n-1.", "code": "def find_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)", "task_id": "119_2ceb6237-de64-41f2-9e31-bf7ba3866c32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the majority element in an array, which is the element that appears more than n/2 times.", "code": "def find_majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate", "task_id": "119_997b7f21-2e31-43f3-a022-a30e52046de9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the two elements that appear only once in an array where every other element appears exactly twice.", "code": "def find_single_numbers(arr):\n    xor = 0\n    for num in arr:\n        xor ^= num\n    rightmost_bit = xor & -xor\n    num1, num2 = 0, 0\n    for num in arr:\n        if num & rightmost_bit:\n            num1 ^= num\n        else:\n            num2 ^= num\n    return num1, num2", "task_id": "119_b689f8d4-ddf4-4bdb-99bc-9a7988f118a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing and duplicate numbers in an array of integers from 1 to n.", "code": "def find_missing_and_duplicate(arr, n):\n    total = n * (n + 1) // 2\n    sum_arr = sum(arr)\n    sum_sq_arr = sum(x*x for x in arr)\n    total_sq = sum(x*x for x in range(1, n+1))\n    diff = total - sum_arr\n    sq_diff = total_sq - sum_sq_arr\n    sum_missing_duplicate = sq_diff // diff\n    missing = (diff + sum_missing_duplicate) // 2\n    duplicate = sum_missing_duplicate - missing\n    return missing, duplicate", "task_id": "119_9512849f-cbca-4cda-bd7d-484c50f8bb40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a string.", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "119_20f03f39-561b-4783-8f03-a15bd4dcd030", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element that appears only once in an array where every other element appears exactly three times.", "code": "def find_single_element(arr):\n    ones, twos = 0, 0\n    for num in arr:\n        ones = (ones ^ num) & ~twos\n        twos = (twos ^ num) & ~ones\n    return ones", "task_id": "119_8d22f438-350f-46f0-9b99-4a1d4378b1c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive integer in an unsorted array.", "code": "def find_first_missing_positive(arr):\n    n = len(arr)\n    for i in range(n):\n        while 1 <= arr[i] <= n and arr[arr[i] - 1] != arr[i]:\n            arr[arr[i] - 1], arr[i] = arr[i], arr[arr[i] - 1]\n    for i in range(n):\n        if arr[i] != i + 1:\n            return i + 1\n    return n + 1", "task_id": "119_16efa38c-1f9a-468f-8dbd-6d890ac0f350", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 & set2)", "task_id": "119_008f35b2-2150-4a5d-8b97-2dd3fab3cd3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all divisors of a given number.", "code": "def sum_of_divisors(n: int) -> int:\n    return sum([i for i in range(1, n+1) if n % i == 0])", "task_id": "123_8ddabbfe-62dc-45b6-a104-26f074f7b73d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect number.", "code": "def is_perfect_number(n: int) -> bool:\n    return sum([i for i in range(1, n) if n % i == 0]) == n", "task_id": "123_d0418e0e-150c-4262-bd61-4a2d3eed343c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all perfect numbers from 1 to a specified number.", "code": "def sum_of_perfect_numbers(limit: int) -> int:\n    return sum([n for n in range(1, limit + 1) if sum([i for i in range(1, n) if n % i == 0]) == n])", "task_id": "123_a1e4d8f8-991f-40c3-9cba-82b8c3d0d560", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all abundant numbers from 1 to a specified number.", "code": "def sum_of_abundant_numbers(limit: int) -> int:\n    return sum([n for n in range(1, limit + 1) if sum([i for i in range(1, n) if n % i == 0]) > n])", "task_id": "123_a9bac643-c593-4f69-9fbd-aecea9e16a34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a deficient number.", "code": "def is_deficient_number(n: int) -> bool:\n    return sum([i for i in range(1, n) if n % i == 0]) < n", "task_id": "123_4f814185-ebaa-4bc6-97f9-77ea793be633", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all deficient numbers from 1 to a specified number.", "code": "def sum_of_deficient_numbers(limit: int) -> int:\n    return sum([n for n in range(1, limit + 1) if sum([i for i in range(1, n) if n % i == 0]) < n])", "task_id": "123_9bfee39e-ba71-4b18-a23d-34cf223f0c63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all prime numbers from 1 to a specified number.", "code": "def sum_of_prime_numbers(limit: int) -> int:\n    def is_prime(n: int) -> bool:\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return sum([n for n in range(2, limit + 1) if is_prime(n)])", "task_id": "123_bafaecc1-80d8-4947-9c28-a2ce1873fca9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all Fibonacci numbers up to a specified number.", "code": "def sum_of_fibonacci_numbers(limit: int) -> int:\n    a, b = 0, 1\n    total = 0\n    while a <= limit:\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "123_c83b8c28-068b-48e4-bab5-8551b2b94515", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the squares of all numbers from 1 to a specified number.", "code": "def sum_of_squares(limit: int) -> int:\n    return sum([i ** 2 for i in range(1, limit + 1)])", "task_id": "123_39043226-76e7-496c-9c85-1085ece42efb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the cubes of all numbers from 1 to a specified number.", "code": "def sum_of_cubes(limit: int) -> int:\n    return sum([i ** 3 for i in range(1, limit + 1)])", "task_id": "123_157631ea-e16c-4906-8b92-ef5a587763b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the triplet with product of the given array.", "code": "def find_triplet_with_product(arr, product):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] * arr[j] * arr[k] == product:\n                    return True\n    return False", "task_id": "121_6e560898-16bc-420f-9825-33365f873052", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the quadruplet with sum of the given array.", "code": "def find_quadruplet_with_sum(arr, target):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                for l in range(k + 1, n):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return True\n    return False", "task_id": "121_8a17537b-1274-499e-ad77-fd125bd4613e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the triplet with sum closest to the given target.", "code": "def find_triplet_with_sum_closest(arr, target):\n    arr.sort()\n    closest_sum = float('inf')\n    for i in range(len(arr) - 2):\n        left, right = i + 1, len(arr) - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if abs(target - current_sum) < abs(target - closest_sum):\n                closest_sum = current_sum\n            if current_sum < target:\n                left += 1\n            elif current_sum > target:\n                right -= 1\n            else:\n                return current_sum\n    return closest_sum", "task_id": "121_13270187-6a98-45f1-a988-efbb923a70dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum zero in the given array.", "code": "def find_triplet_with_sum_zero(arr):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum == 0:\n                return True\n            elif current_sum < 0:\n                left += 1\n            else:\n                right -= 1\n    return False", "task_id": "121_2cdb4a10-7856-422e-b826-a0ac9202513c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum greater than the given target in the array.", "code": "def find_triplet_with_sum_greater_than(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum > target:\n                return True\n            elif current_sum <= target:\n                left += 1\n            else:\n                right -= 1\n    return False", "task_id": "121_9c84fd08-c0c4-4318-b58a-457c6a8b6246", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum less than the given target in the array.", "code": "def find_triplet_with_sum_less_than(arr, target):\n    arr.sort()\n    n = len(arr)\n    for i in range(n - 2):\n        left, right = i + 1, n - 1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if current_sum < target:\n                return True\n            elif current_sum >= target:\n                right -= 1\n            else:\n                left += 1\n    return False", "task_id": "121_79468707-ef24-4aee-bc7e-f5a2609c558e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with an even sum in the given array.", "code": "def find_triplet_with_sum_even(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 2 == 0:\n                    return True\n    return False", "task_id": "121_1d7b09b8-76e8-49d4-90d2-ad19f3b661bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with an odd sum in the given array.", "code": "def find_triplet_with_sum_odd(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % 2 != 0:\n                    return True\n    return False", "task_id": "121_1a202228-c683-4d40-82a9-29dae24cbc1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum that is a multiple of k in the given array.", "code": "def find_triplet_with_sum_multiple_of_k(arr, k):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if (arr[i] + arr[j] + arr[k]) % k == 0:\n                    return True\n    return False", "task_id": "121_4009deae-a960-4b48-ae80-accd2f30c60a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet with sum in the given range [low, high] in the array.", "code": "def find_triplet_with_sum_in_range(arr, low, high):\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if low <= arr[i] + arr[j] + arr[k] <= high:\n                    return True\n    return False", "task_id": "121_aee96f13-db07-4673-8801-53c7f4de06a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the magnitude of a complex number.", "code": "import cmath\ndef magnitude_complex(a: float, b: float) -> float:\n    cn = complex(a, b)\n    magnitude = abs(cn)\n    return magnitude", "task_id": "124_a9b307d1-1a18-4962-864e-75a174cd012c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the conjugate of a complex number.", "code": "def conjugate_complex(a: float, b: float) -> complex:\n    cn = complex(a, b)\n    conjugate = cn.conjugate()\n    return conjugate", "task_id": "124_223decee-6469-4c3b-b6fc-14894f9d779f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two complex numbers.", "code": "def add_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 + cn2\n    return result", "task_id": "124_b6fe5192-f512-4e6b-8156-2ccfd4cbe6fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the second complex number from the first.", "code": "def subtract_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 - cn2\n    return result", "task_id": "124_97108854-56a8-46e6-ac47-7fdbc2f27d0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply two complex numbers.", "code": "def multiply_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 * cn2\n    return result", "task_id": "124_caa4f6d8-01fd-4415-aa66-1259e73cfdc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the first complex number by the second.", "code": "def divide_complex(a1: float, b1: float, a2: float, b2: float) -> complex:\n    cn1 = complex(a1, b1)\n    cn2 = complex(a2, b2)\n    result = cn1 / cn2\n    return result", "task_id": "124_8f9c5b10-6e65-4dab-9bc4-4be5e707f8c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the polar coordinates of a complex number.", "code": "import cmath\ndef polar_coordinates(a: float, b: float) -> tuple:\n    cn = complex(a, b)\n    polar = cmath.polar(cn)\n    return polar", "task_id": "124_8145b03c-29f4-439e-929a-94773dab26b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the real part of a complex number.", "code": "def real_part(a: float, b: float) -> float:\n    cn = complex(a, b)\n    real = cn.real\n    return real", "task_id": "124_e8f62c20-fef3-40cb-8fb6-1d638f0df260", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the imaginary part of a complex number.", "code": "def imaginary_part(a: float, b: float) -> float:\n    cn = complex(a, b)\n    imaginary = cn.imag\n    return imaginary", "task_id": "124_39d9b614-069b-4ce1-b22f-6d2611a9769d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a complex number to its string representation.", "code": "def complex_to_string(a: float, b: float) -> str:\n    cn = complex(a, b)\n    return str(cn)", "task_id": "124_2948116b-e6e8-4588-b967-710b563ab327", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th prime number.", "code": "def findNthPrime(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        for i in primes:\n            if num % i == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return primes[-1]", "task_id": "122_240ed24d-7233-4020-9c70-4696bc71dfdc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Fibonacci number.", "code": "def nthFibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "122_a159e497-38f1-4282-918e-2917f46fe76c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th perfect square.", "code": "def nthPerfectSquare(n):\n    return n * n", "task_id": "122_ac510939-f73b-4067-a45b-f4204fa165bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th triangular number.", "code": "def nthTriangularNumber(n):\n    return n * (n + 1) // 2", "task_id": "122_1d45f2e9-af11-4772-b212-d645494f68b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Catalan number.", "code": "def nthCatalanNumber(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = sum(catalan[j] * catalan[i - 1 - j] for j in range(i))\n    return catalan[n]", "task_id": "122_46218af8-0cce-47f5-8b1d-7003acb8cf8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th hexagonal number.", "code": "def nthHexagonalNumber(n):\n    return n * (2 * n - 1)", "task_id": "122_76eec1a6-73ba-40c6-86e1-ae2fad14e284", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th pentagonal number.", "code": "def nthPentagonalNumber(n):\n    return n * (3 * n - 1) // 2", "task_id": "122_00361da4-f744-43cc-b271-8bfbf0b4a2d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th harmonic number.", "code": "def nthHarmonicNumber(n):\n    harmonic = 0.0\n    for i in range(1, n + 1):\n        harmonic += 1 / i\n    return harmonic", "task_id": "122_e29fb6f0-005b-47c4-b6b9-41642a40a8f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Lucas number.", "code": "def nthLucasNumber(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "122_f0181628-7438-455d-ab54-2dcfadb81889", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th square pyramidal number.", "code": "def nthSquarePyramidalNumber(n):\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "122_8c2b6efc-b13f-4826-b5c5-c37c09d5680a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of common divisors of two given numbers.", "code": "def product_of_common_divisors(a, b):\n    product = 1\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            product *= i\n    return product", "task_id": "126_498affe9-6e48-4f02-b4be-7d623bee529c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of common divisors of two given numbers.", "code": "def count_common_divisors(a, b):\n    count = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            count += 1\n    return count", "task_id": "126_52de9821-6076-4275-a82b-662090e7ae05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "126_abe76710-0277-4b43-a385-20c191cbcbb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a, b):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)", "task_id": "126_d7248d0a-02ce-4385-8a85-3971fd716e7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique common divisors of two given numbers.", "code": "def sum_of_unique_common_divisors(a, b):\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)", "task_id": "126_f16865e2-382d-4c60-a7e1-bb81fd3d55e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime common divisors of two given numbers.", "code": "def sum_of_prime_common_divisors(a, b):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and is_prime(i):\n            sum += i\n    return sum", "task_id": "126_34c4cbc7-ec90-451b-a0fe-0105ef2d91b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of common divisors of two given numbers.", "code": "def common_divisors_list(a, b):\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return common_divisors", "task_id": "126_7d64b02e-9f25-4499-8a45-6969691ce086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of common divisors of two given numbers.", "code": "def sum_of_squares_of_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i**2\n    return sum", "task_id": "126_5c3a40f2-bc4b-4850-8f15-634ed7c78d87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd common divisors of two given numbers.", "code": "def sum_of_odd_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and i % 2 != 0:\n            sum += i\n    return sum", "task_id": "126_d4ae2c1e-5b42-4792-a659-c3c9c0ea63f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even common divisors of two given numbers.", "code": "def sum_of_even_common_divisors(a, b):\n    sum = 0\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "task_id": "126_21eb0fa8-3399-4a2e-a763-83629bdfc169", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two integers without using the + operator in python.", "code": "def add_int(x, y):\n    while y != 0:\n        carry = x & y\n        x = x ^ y\n        y = carry << 1\n    return x", "task_id": "127_6762b674-5b6e-4241-a0a1-4d1e08e18e45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract two integers without using the - operator in python.", "code": "def subtract_int(x, y):\n    while y != 0:\n        borrow = (~x) & y\n        x = x ^ y\n        y = borrow << 1\n    return x", "task_id": "127_cf7782d4-eda1-43a3-bd00-a26516d0bc4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide two integers without using the / operator in python.", "code": "def divide_int(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    sign = -1 if (x < 0) ^ (y < 0) else 1\n    x, y = abs(x), abs(y)\n    quotient = 0\n    while x >= y:\n        x -= y\n        quotient += 1\n    return sign * quotient", "task_id": "127_035a7c79-329d-4178-abba-cd533107682c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of two integers without using the % operator in python.", "code": "def modulus_int(x, y):\n    if y == 0:\n        raise ValueError('Cannot divide by zero')\n    return x - (x // y) * y", "task_id": "127_aafcf6c6-20c1-4148-bfe6-7ccb394ce743", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the power of an integer raised to another integer without using the ** operator in python.", "code": "def power_int(x, y):\n    if y == 0:\n        return 1\n    elif y < 0:\n        return 1 / power_int(x, -y)\n    elif y % 2 == 0:\n        half_power = power_int(x, y // 2)\n        return half_power * half_power\n    else:\n        return x * power_int(x, y - 1)", "task_id": "127_a2898279-3e5d-467c-976d-23ea3a6f4969", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two integers without using the gcd function from the math module.", "code": "def gcd_int(x, y):\n    while y:\n        x, y = y, x % y\n    return x", "task_id": "127_5aefed5c-22b3-40b9-a2d4-7294655cd1fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two integers without using the lcm function from the math module.", "code": "def lcm_int(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(x * y) // gcd(x, y)", "task_id": "127_7eed50ae-57b5-48bd-b9e0-7c6be9d54f37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to negate an integer without using the - operator in python.", "code": "def negate_int(x):\n    return ~x + 1", "task_id": "127_441e1633-8b1c-45b7-9b92-5c3efd5ba10e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of an integer without using the abs function in python.", "code": "def abs_int(x):\n    return x if x >= 0 else negate_int(x)", "task_id": "127_9e46e099-48b5-455c-97de-e8113439a5ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if an integer is even without using the % operator in python.", "code": "def is_even(x):\n    return (x & 1) == 0", "task_id": "127_9818ecb7-176e-45c8-94fb-5338db4d05c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that start with a given character from a given list of words.", "code": "def words_starting_with(char: str, words: list) -> list:\n    result = []\n    for word in words:\n        if word.startswith(char):\n            result.append(word)\n    return result", "task_id": "128_63ff4e1e-5373-47f4-b859-580a2c2d527f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain a given substring from a given list of words.", "code": "def words_containing_substring(substring: str, words: list) -> list:\n    result = []\n    for word in words:\n        if substring in word:\n            result.append(word)\n    return result", "task_id": "128_86a9c9ba-c148-4b12-a2a5-70263192b3fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one vowel from a given list of words.", "code": "def words_with_vowels(words: list) -> list:\n    vowels = 'aeiouAEIOU'\n    result = []\n    for word in words:\n        if any(char in vowels for char in word):\n            result.append(word)\n    return result", "task_id": "128_83e23637-c427-4374-85f0-0a043a0339f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have an even number of characters from a given list of words.", "code": "def words_with_even_length(words: list) -> list:\n    result = []\n    for word in words:\n        if len(word) % 2 == 0:\n            result.append(word)\n    return result", "task_id": "128_4d3efa22-eb78-48a4-9514-c87ce0d3399e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have an odd number of characters from a given list of words.", "code": "def words_with_odd_length(words: list) -> list:\n    result = []\n    for word in words:\n        if len(word) % 2 != 0:\n            result.append(word)\n    return result", "task_id": "128_52e71ce7-9fe8-45a6-8f5e-7eef0db74a8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one uppercase letter from a given list of words.", "code": "def words_with_uppercase(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.isupper() for char in word):\n            result.append(word)\n    return result", "task_id": "128_23e5b3be-6816-4dff-8ca2-35f32a802966", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one lowercase letter from a given list of words.", "code": "def words_with_lowercase(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.islower() for char in word):\n            result.append(word)\n    return result", "task_id": "128_b8744eb6-11fd-499d-ac92-32042363d5c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one digit from a given list of words.", "code": "def words_with_digit(words: list) -> list:\n    result = []\n    for word in words:\n        if any(char.isdigit() for char in word):\n            result.append(word)\n    return result", "task_id": "128_f71a4f6d-3a6d-49f4-b049-82b50c06c20d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that contain at least one special character (non-alphanumeric) from a given list of words.", "code": "def words_with_special_char(words: list) -> list:\n    result = []\n    for word in words:\n        if any(not char.isalnum() for char in word):\n            result.append(word)\n    return result", "task_id": "128_1dc6f8f7-1e6f-4c63-b2c1-d4b58c6471a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to shortlist words that have a length within a given range (inclusive) from a given list of words.", "code": "def words_with_length_in_range(min_len: int, max_len: int, words: list) -> list:\n    result = []\n    for word in words:\n        if min_len <= len(word) <= max_len:\n            result.append(word)\n    return result", "task_id": "128_7ee8f154-4ceb-49d3-859b-60ad9c30027b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of even and odd numbers in any sub-array of the given array of integers.", "code": "def max_diff_even_odd(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num % 2 == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_c0c23619-c9a7-460b-a31b-485c86dff8bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of vowels and consonants in any sub-string of the given string.", "code": "def max_diff_vowels_consonants(s):\n    vowels = 'aeiouAEIOU'\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        current_sum += (1 if char in vowels else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_68e566a4-9cf7-4b82-8c44-8ce55fb15bc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of uppercase and lowercase letters in any sub-string of the given string.", "code": "def max_diff_upper_lower(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        if char.isalpha():\n            current_sum += (1 if char.isupper() else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_28af28fe-79ec-495a-bcd7-a59139df62f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of positive and negative numbers in any sub-array of the given array of integers.", "code": "def max_diff_pos_neg(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num > 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_be086e72-6ed2-42f5-b193-e142b8b8bac1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of prime and non-prime numbers in any sub-array of the given array of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_diff_primes_nonprimes(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if is_prime(num) else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_160ec2f8-bb36-4a88-b241-2b1b7cf28a2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of elements divisible by k and not divisible by k in any sub-array of the given array of integers.", "code": "def max_diff_divisible_nondivisible(arr, k):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num % k == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_ad037421-6bb3-4894-8ca4-ec355861cb18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the sum of positive and negative numbers in any sub-array of the given array of integers.", "code": "def max_diff_positives_negatives(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_5162e00e-8c8d-418f-92a4-76879263a559", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of zeros and non-zeros in any sub-array of the given array of integers.", "code": "def max_diff_zeros_nonzeros(arr):\n    current_sum = 0\n    max_sum = 0\n    for num in arr:\n        current_sum += (1 if num == 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_30418da7-24c4-4bf4-a64f-b0d83773af06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of alphabetic characters and digits in any sub-string of the given string.", "code": "def max_diff_char_digit(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        current_sum += (1 if char.isalpha() else -1 if char.isdigit() else 0)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_7dcf5179-fcd5-4aa1-b56d-da853ebedf3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between the number of odd and even digits in any sub-string of the given string.", "code": "def max_diff_odd_even_digits(s):\n    current_sum = 0\n    max_sum = 0\n    for char in s:\n        if char.isdigit():\n            current_sum += (1 if int(char) % 2 != 0 else -1)\n        if current_sum < 0:\n            current_sum = 0\n        max_sum = max(current_sum, max_sum)\n    return max_sum if max_sum else 0", "task_id": "125_765199ca-63b0-4edf-b123-5673f374d6a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the consonants of a given string.", "code": "def reverse_consonants(s: str) -> str:\n\tconsonants = \"\"\n\tfor char in s:\n\t\tif char.lower() not in \"aeiou\" and char.isalpha():\n\t\t\tconsonants += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.lower() not in \"aeiou\" and char.isalpha():\n\t\t\tresult_string += consonants[-1]\n\t\t\tconsonants = consonants[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_9baa428e-6672-412b-9622-82fff37fdbf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the digits of a given string.", "code": "def reverse_digits(s: str) -> str:\n\tdigits = \"\"\n\tfor char in s:\n\t\tif char.isdigit():\n\t\t\tdigits += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.isdigit():\n\t\t\tresult_string += digits[-1]\n\t\t\tdigits = digits[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_61c7b215-1f63-477e-ab9c-45b477fbc325", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the uppercase letters of a given string.", "code": "def reverse_uppercase(s: str) -> str:\n\tuppercase = \"\"\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tuppercase += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tresult_string += uppercase[-1]\n\t\t\tuppercase = uppercase[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_82043248-846f-4bc7-8ba1-1ffc775174ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the lowercase letters of a given string.", "code": "def reverse_lowercase(s: str) -> str:\n\tlowercase = \"\"\n\tfor char in s:\n\t\tif char.islower():\n\t\t\tlowercase += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif char.islower():\n\t\t\tresult_string += lowercase[-1]\n\t\t\tlowercase = lowercase[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_396bd481-cdc7-4eec-8a3e-e372cffe76b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n\twords = s.split()\n\treturn ' '.join(words[::-1])", "task_id": "131_b9abf7f8-5770-4af0-a2b5-219b8cb71ec4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the characters at even indices of a given string.", "code": "def reverse_even_indexed_chars(s: str) -> str:\n\teven_chars = \"\"\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0:\n\t\t\teven_chars += s[i]\n\tresult_string = \"\"\n\teven_index = 0\n\tfor i in range(len(s)):\n\t\tif i % 2 == 0:\n\t\t\tresult_string += even_chars[-(even_index + 1)]\n\t\t\teven_index += 1\n\t\telse:\n\t\t\tresult_string += s[i]\n\treturn result_string", "task_id": "131_11fe8a79-aee2-4496-8e97-8c75e2dd33e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the characters at odd indices of a given string.", "code": "def reverse_odd_indexed_chars(s: str) -> str:\n\todd_chars = \"\"\n\tfor i in range(len(s)):\n\t\tif i % 2 != 0:\n\t\t\todd_chars += s[i]\n\tresult_string = \"\"\n\todd_index = 0\n\tfor i in range(len(s)):\n\t\tif i % 2 != 0:\n\t\t\tresult_string += odd_chars[-(odd_index + 1)]\n\t\t\todd_index += 1\n\t\telse:\n\t\t\tresult_string += s[i]\n\treturn result_string", "task_id": "131_cb82c696-4a62-4219-84f4-182609cd55c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the words of even length in a given string.", "code": "def reverse_words_of_even_length(s: str) -> str:\n\twords = s.split()\n\tfor i in range(len(words)):\n\t\tif len(words[i]) % 2 == 0:\n\t\t\twords[i] = words[i][::-1]\n\treturn ' '.join(words)", "task_id": "131_39ed4b24-9662-4fa8-95a3-5a52592d8674", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the words of odd length in a given string.", "code": "def reverse_words_of_odd_length(s: str) -> str:\n\twords = s.split()\n\tfor i in range(len(words)):\n\t\tif len(words[i]) % 2 != 0:\n\t\t\twords[i] = words[i][::-1]\n\treturn ' '.join(words)", "task_id": "131_b15a1eaf-ded7-4024-9d07-2cca49be588c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse only the special characters (non-alphanumeric) of a given string.", "code": "def reverse_special_chars(s: str) -> str:\n\tspecial_chars = \"\"\n\tfor char in s:\n\t\tif not char.isalnum():\n\t\t\tspecial_chars += char\n\tresult_string = \"\"\n\tfor char in s:\n\t\tif not char.isalnum():\n\t\t\tresult_string += special_chars[-1]\n\t\t\tspecial_chars = special_chars[:-1]\n\t\telse:\n\t\t\tresult_string += char\n\treturn result_string", "task_id": "131_18fde052-0764-4a64-b731-5c58b64e8c02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is symmetric.", "code": "def is_symmetric(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != matrix[j][i]:\n                return False\n    return True", "task_id": "129_1e0f1312-e8a2-49f0-be87-553d11b88b8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is an identity matrix.", "code": "def is_identity(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i == j and matrix[i][j] != 1:\n                return False\n            elif i != j and matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_814643bc-17e4-412f-af50-530d9af5f599", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is upper triangular.", "code": "def is_upper_triangular(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i):\n            if matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_69bdd969-3ce1-46a1-b1aa-f8eda6c76fd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is lower triangular.", "code": "def is_lower_triangular(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_c17cd707-406e-46be-8b3e-7d8372c85d50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to transpose a given square matrix.", "code": "def transpose(matrix):\n    n = len(matrix)\n    transposed = [[matrix[j][i] for j in range(n)] for i in range(n)]\n    return transposed", "task_id": "129_b7b1694f-8c5c-409d-a930-14abcf128ac5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a diagonal matrix.", "code": "def is_diagonal(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if i != j and matrix[i][j] != 0:\n                return False\n    return True", "task_id": "129_d86d1cca-84be-4019-93ff-69f81a1d084f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the trace of a given square matrix.", "code": "def trace(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))", "task_id": "129_073c23f2-9384-4519-9892-6239d28253ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is skew-symmetric.", "code": "def is_skew_symmetric(matrix):\n    n = len(matrix)\n    for i in range(n):\n        for j in range(n):\n            if matrix[i][j] != -matrix[j][i]:\n                return False\n    return True", "task_id": "129_4b1a8963-746a-4deb-9ec5-17aae1d64389", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a permutation matrix.", "code": "def is_permutation_matrix(matrix):\n    n = len(matrix)\n    for row in matrix:\n        if sum(row) != 1 or any(x not in [0, 1] for x in row):\n            return False\n    for col in range(n):\n        if sum(matrix[row][col] for row in range(n)) != 1:\n            return False\n    return True", "task_id": "129_88ba06ab-71bc-4978-aac6-4fd794a3df2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given square matrix is a Toeplitz matrix.", "code": "def is_toeplitz(matrix):\n    n = len(matrix)\n    for i in range(1, n):\n        for j in range(1, n):\n            if matrix[i][j] != matrix[i-1][j-1]:\n                return False\n    return True", "task_id": "129_961b2a05-9f39-49fa-a28e-f8b3d7350855", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of characters to a string.", "code": "def list_to_string(lst):\n    return ''.join(lst)", "task_id": "132_fb061345-7c46-4812-9fe8-3f771f34a4da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string, but in reverse order.", "code": "def reverse_tuple_to_string(tup):\n    return ''.join(reversed(tup))", "task_id": "132_b0e7984b-716a-4f21-9aaa-c15c6eb72049", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of integers to a string.", "code": "def int_list_to_string(lst):\n    return ''.join(map(str, lst))", "task_id": "132_05180187-7649-4eab-82a8-b3d6b49c8279", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of words to a single string with spaces between words.", "code": "def list_of_words_to_string(lst):\n    return ' '.join(lst)", "task_id": "132_1c2ba37c-f5f3-4a32-bdd2-38611d9d201b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with commas between elements.", "code": "def tuple_to_comma_string(tup):\n    return ','.join(tup)", "task_id": "132_b8e6aca2-28d3-4e78-a2cd-e53267dc150e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of characters to an uppercase string.", "code": "def list_to_uppercase_string(lst):\n    return ''.join(lst).upper()", "task_id": "132_9dac5506-20a1-482b-ba4d-e33ec5eb4658", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with a given prefix before each element.", "code": "def tuple_to_string_with_prefix(tup, prefix):\n    return ''.join(prefix + elem for elem in tup)", "task_id": "132_76edf3be-e974-44e9-a99a-6942466c0583", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples to a single string, where each tuple is converted to a string first.", "code": "def list_of_tuples_to_string(lst):\n    return ''.join(''.join(tup) for tup in lst)", "task_id": "132_a272c8eb-62b1-4b06-988c-984b63a3e7e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a string with a given separator between elements.", "code": "def tuple_to_string_with_separator(tup, sep):\n    return sep.join(tup)", "task_id": "132_7d0daa48-b404-4c28-9b79-1c61179be946", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of numbers to a string with a space between each number.", "code": "def list_of_numbers_to_string(lst):\n    return ' '.join(map(str, lst))", "task_id": "132_0f19e2ea-c50f-4391-8b41-52f1de91b3a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with the second highest frequency in a given list.", "code": "from collections import defaultdict\n\ndef second_max_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    sorted_items = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items[1]", "task_id": "130_1ae09312-fa67-4783-b769-ba1ce5395455", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with the minimum frequency in a given list.", "code": "from collections import defaultdict\n\ndef min_occurrences(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    result = min(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_7f568d32-e729-4326-8906-b6574a1d7e87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements in the given list.", "code": "def unique_elements(nums):\n    return list(set(nums))", "task_id": "130_f5d75487-c711-445b-803b-3287709eaa21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a dictionary with the frequency of each element in the given list.", "code": "from collections import defaultdict\n\ndef element_frequencies(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        dict[i] += 1\n    return dict", "task_id": "130_3f32c630-b23d-4727-8f17-3f0be256df40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent even number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_even(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i % 2 == 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_36d40b3a-f44f-4234-8ed1-ae0807bade6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent odd number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_odd(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i % 2 != 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_b9b57f29-7370-4962-a4ab-fc392601db45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent negative number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_negative(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i < 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_9dfc9bf7-b20b-44ac-b833-4fc185148c85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent positive number in the given list.", "code": "from collections import defaultdict\n\ndef most_frequent_positive(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if i > 0:\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_c1104bf5-e4b2-4ae5-900f-d725ce5b619b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent prime number in the given list.", "code": "from collections import defaultdict\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef most_frequent_prime(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if is_prime(i):\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_56bfb8f2-b4d3-4dfd-803d-77a28eb33a9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most frequent non-prime number in the given list.", "code": "from collections import defaultdict\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef most_frequent_non_prime(nums):\n    dict = defaultdict(int)\n    for i in nums:\n        if not is_prime(i):\n            dict[i] += 1\n    result = max(dict.items(), key=lambda x: x[1])\n    return result", "task_id": "130_7cdec1ec-0f07-403c-b927-1ad6b064d737", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the even numbers of a given list of numbers using lambda function.", "code": "def sum_even_numbers(nums):\n  even_numbers = list(filter(lambda x: x % 2 == 0, nums))\n  return sum(even_numbers)", "task_id": "133_46161901-2eb6-4457-9cb3-095951348645", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in a given list of numbers using lambda function.", "code": "def count_positive_numbers(nums):\n  positive_numbers = list(filter(lambda x: x > 0, nums))\n  return len(positive_numbers)", "task_id": "133_380505a7-11cd-46f2-95a5-6fb0f91a2868", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the product of the odd numbers of a given list of numbers using lambda function.", "code": "def product_of_odd_numbers(nums):\n  odd_numbers = list(filter(lambda x: x % 2 != 0, nums))\n  product = 1\n  for num in odd_numbers:\n    product *= num\n  return product", "task_id": "133_26735d2e-2d68-4260-b684-5c0a1b22d55a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the numbers in a given list using lambda function.", "code": "def sum_of_squares(nums):\n  squares = list(map(lambda x: x**2, nums))\n  return sum(squares)", "task_id": "133_c6f7f048-7e18-4e8a-9fdc-efbcee7311c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string using lambda function.", "code": "def count_vowels(s):\n  vowels = list(filter(lambda x: x in 'aeiouAEIOU', s))\n  return len(vowels)", "task_id": "133_2ba86a3c-d29a-43f5-a2fe-945d2247e3cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the lengths of the words in a given list using lambda function.", "code": "def sum_of_lengths(words):\n  lengths = list(map(lambda x: len(x), words))\n  return sum(lengths)", "task_id": "133_dc27faac-162b-4cac-b79f-9a8949f77b35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words longer than a given length n from a list of words using lambda function.", "code": "def filter_long_words(words, n):\n  long_words = list(filter(lambda x: len(x) > n, words))\n  return long_words", "task_id": "133_7405b55f-b45f-484f-a4bf-3e5f0daf16a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the numbers in a given list using lambda function.", "code": "def sum_of_cubes(nums):\n  cubes = list(map(lambda x: x**3, nums))\n  return sum(cubes)", "task_id": "133_4e11d1d7-7b96-4113-ae96-7ae9c0fce8d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in a given string using lambda function.", "code": "def count_uppercase(s):\n  uppercase_letters = list(filter(lambda x: x.isupper(), s))\n  return len(uppercase_letters)", "task_id": "133_d2d60a3e-5bdd-4800-a50f-a25644f90137", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the absolute values of the numbers in a given list using lambda function.", "code": "def sum_of_absolute_values(nums):\n  absolute_values = list(map(lambda x: abs(x), nums))\n  return sum(absolute_values)", "task_id": "133_41a6c7ec-cd5f-4f26-9082-b1d48d2f4027", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first element of the given array is even or odd after performing an operation p times.", "code": "def check_first(arr, n, p):\n    _sum = 0\n    for i in range(n):\n        _sum += arr[i]\n    if p == 1:\n        if arr[0] % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_1cbcaae4-c9f1-4da6-b49a-148b2e7fda97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the given array is even or odd after performing an operation p times.", "code": "def check_sum(arr, n, p):\n    _sum = sum(arr)\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_e45feb42-a169-421c-98aa-bf5be73c0952", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the given array is even or odd after performing an operation p times.", "code": "def check_product(arr, n, p):\n    _product = 1\n    for i in range(n):\n        _product *= arr[i]\n    if p == 1:\n        if _product % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_00fcb54e-12c3-4736-8a65-aa56410714e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the maximum element of the given array is even or odd after performing an operation p times.", "code": "def check_max(arr, n, p):\n    _max = max(arr)\n    if p == 1:\n        if _max % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_fe3a1187-9041-4c8f-8f8d-3c8a89b506e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the minimum element of the given array is even or odd after performing an operation p times.", "code": "def check_min(arr, n, p):\n    _min = min(arr)\n    if p == 1:\n        if _min % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_52a3b41b-0c12-4048-b1ca-d603286e492a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the median element of the given array is even or odd after performing an operation p times.", "code": "def check_median(arr, n, p):\n    arr.sort()\n    _median = arr[n//2] if n % 2 != 0 else (arr[n//2 - 1] + arr[n//2]) // 2\n    if p == 1:\n        if _median % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_380b4fa2-3c99-444d-a222-d668961d5b57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the second last element of the given array is even or odd after performing an operation p times.", "code": "def check_second_last(arr, n, p):\n    if n < 2:\n        return 'EVEN'\n    if p == 1:\n        if arr[-2] % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_fa18d023-15d9-4330-a9bc-29b5d845768e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the first and last element of the given array is even or odd after performing an operation p times.", "code": "def check_sum_first_last(arr, n, p):\n    _sum = arr[0] + arr[-1]\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_9fd6cc94-00b6-4ac9-ad19-260134e31d55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of elements at even indices of the given array is even or odd after performing an operation p times.", "code": "def check_sum_even_indices(arr, n, p):\n    _sum = sum(arr[i] for i in range(0, n, 2))\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_a5cd4a27-2a37-49b6-926c-8e04d91ddfd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of elements at odd indices of the given array is even or odd after performing an operation p times.", "code": "def check_sum_odd_indices(arr, n, p):\n    _sum = sum(arr[i] for i in range(1, n, 2))\n    if p == 1:\n        if _sum % 2 == 0:\n            return 'EVEN'\n        else:\n            return 'ODD'\n    return 'EVEN'", "task_id": "134_03ffae0a-920d-4e94-8257-a7d7a7c0e1ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def triangular_num(n):\n\treturn n*(n + 1) // 2", "task_id": "135_e211bca0-4869-478c-b6a9-df5d364678c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth pentagonal number.", "code": "def pentagonal_num(n):\n\treturn n*(3*n - 1) // 2", "task_id": "135_5c031b0c-6b29-4762-85a2-620646680e24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def square_num(n):\n\treturn n*n", "task_id": "135_917b1511-25a6-469c-a31c-c9e48350b16a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth heptagonal number.", "code": "def heptagonal_num(n):\n\treturn n*(5*n - 3) // 2", "task_id": "135_4d3252df-221f-4db1-9a64-e711c1b06ae7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth octagonal number.", "code": "def octagonal_num(n):\n\treturn n*(3*n - 2)", "task_id": "135_553a5361-977e-44d9-b5c7-5f096edef1cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def tetrahedral_num(n):\n\treturn n*(n + 1)*(n + 2) // 6", "task_id": "135_ae50e1e6-b7bc-4426-bcc4-1158f7ba8094", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered hexagonal number.", "code": "def centered_hexagonal_num(n):\n\treturn 3*n*(n - 1) + 1", "task_id": "135_659b0d07-b2e9-45fa-913a-50da7720561c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered square number.", "code": "def centered_square_num(n):\n\treturn n*n + (n-1)*(n-1)", "task_id": "135_ec5aee0d-de41-4d2a-8a05-16b104240241", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth centered pentagonal number.", "code": "def centered_pentagonal_num(n):\n\treturn (5*n*n - 5*n + 2) // 2", "task_id": "135_bd135858-3722-4b4a-b671-2f34485ca6d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth star number.", "code": "def star_number(n):\n\treturn 6*n*(n - 1) + 1", "task_id": "135_4b299be6-d659-43fd-8362-9b10ecf19f4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of even numbers in an array of integers.", "code": "def count_evens(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 2 == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_b2b80ddd-6f1d-484c-bb1e-aa09725954e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of odd numbers in an array of integers.", "code": "def count_odds(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 2 != 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_46f4831a-08e3-492b-aacb-3c0a43f372c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of negative numbers in an array of integers.", "code": "def count_negatives(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_d30931d9-e8c4-409e-b6bd-747df5dd5891", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of positive numbers in an array of integers.", "code": "def count_positives(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_fb1f350a-2bf4-443f-b566-f346eff4d89c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of prime numbers in an array of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if is_prime(x):\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_aa22a280-c944-4acb-b40f-9f1978521ff1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers divisible by a given integer k in an array of integers.", "code": "def count_divisible_by_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % k == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_5a4ae68d-33e2-41ea-a40e-5fdd98e54189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers greater than a given integer k in an array of integers.", "code": "def count_greater_than_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x > k:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_ee71fd50-3e86-4995-af44-ca0e6fd97714", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers less than a given integer k in an array of integers.", "code": "def count_less_than_k(nums, k):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x < k:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_6cbc3682-649e-4371-a1dc-0c8f0d835f88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers that are multiples of 3 in an array of integers.", "code": "def count_multiples_of_3(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if x % 3 == 0:\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_650ce61e-6fb8-4a5b-9db8-9e9bdd8f212a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of palindromic numbers in an array of integers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef count_palindromes(nums):\n    n = len(nums)\n    n1 = 0\n    for x in nums:\n        if is_palindrome(x):\n            n1 += 1\n    return round(n1/n, 2)", "task_id": "137_18af967a-ebec-440f-8f59-29c4f6785d34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "139_d6a179d4-74b6-4847-b301-e43f49ddb866", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def triangle_area(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "139_fb49b702-e51e-43b6-8009-0a0f14c6c776", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def square_area(side: float) -> float:\n    return side * side", "task_id": "139_50a57a68-3af9-4f8e-ab3f-4be395c61c4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid.", "code": "def trapezoid_area(base1: float, base2: float, height: float) -> float:\n    return 0.5 * (base1 + base2) * height", "task_id": "139_83757277-8f17-4ac9-a977-701cb29778c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def circle_area(radius: float) -> float:\n    return 3.1415 * radius * radius", "task_id": "139_9eeb5c4f-fb33-4dea-bbf8-c8e8f0c19f6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def parallelogram_area(base: float, height: float) -> float:\n    return base * height", "task_id": "139_14e582d4-1410-4fd1-9495-39122e695068", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def cylinder_volume(radius: float, height: float) -> float:\n    return 3.1415 * radius * radius * height", "task_id": "139_b6c3ab2f-37c0-4ada-b191-b149708bf5e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def sphere_volume(radius: float) -> float:\n    return (4/3) * 3.1415 * radius * radius * radius", "task_id": "139_80a6bc86-cc1c-4f02-99b5-cfea4b2ed40e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def cone_volume(radius: float, height: float) -> float:\n    return (1/3) * 3.1415 * radius * radius * height", "task_id": "139_acf57bc1-717e-484d-981a-53aadd8f5284", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def rectangular_prism_volume(length: float, width: float, height: float) -> float:\n    return length * width * height", "task_id": "139_68d47555-7a75-4d78-9f97-3da6da95ec00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 3 or not.", "code": "def is_Sum_Of_Powers_Of_Three(n):\n    while n > 0:\n        if n % 3 == 2:\n            return False\n        n //= 3\n    return True", "task_id": "138_823dc0f0-1a8b-4d4d-9743-3426814f3064", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 4 or not.", "code": "def is_Sum_Of_Powers_Of_Four(n):\n    while n > 0:\n        if n % 4 == 3:\n            return False\n        n //= 4\n    return True", "task_id": "138_b24892f4-bc9f-4c25-8ed7-30a310518194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 5 or not.", "code": "def is_Sum_Of_Powers_Of_Five(n):\n    while n > 0:\n        if n % 5 == 4:\n            return False\n        n //= 5\n    return True", "task_id": "138_ec0f6dc7-5a46-42df-824e-c2de81c3afb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 6 or not.", "code": "def is_Sum_Of_Powers_Of_Six(n):\n    while n > 0:\n        if n % 6 == 5:\n            return False\n        n //= 6\n    return True", "task_id": "138_f8914cdc-c4c6-49bb-a4a8-b02e3236af9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 7 or not.", "code": "def is_Sum_Of_Powers_Of_Seven(n):\n    while n > 0:\n        if n % 7 == 6:\n            return False\n        n //= 7\n    return True", "task_id": "138_2f19b2fe-7e75-4fa2-bbd8-d471fd945c22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 8 or not.", "code": "def is_Sum_Of_Powers_Of_Eight(n):\n    while n > 0:\n        if n % 8 == 7:\n            return False\n        n //= 8\n    return True", "task_id": "138_56f15acd-1d24-4a14-8709-653cfebdf06e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 9 or not.", "code": "def is_Sum_Of_Powers_Of_Nine(n):\n    while n > 0:\n        if n % 9 == 8:\n            return False\n        n //= 9\n    return True", "task_id": "138_9393ba7d-2446-41b2-afbc-b785ccde5d62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 10 or not.", "code": "def is_Sum_Of_Powers_Of_Ten(n):\n    while n > 0:\n        if n % 10 == 9:\n            return False\n        n //= 10\n    return True", "task_id": "138_17faa272-8e32-4a87-b535-681e65643f1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 11 or not.", "code": "def is_Sum_Of_Powers_Of_Eleven(n):\n    while n > 0:\n        if n % 11 == 10:\n            return False\n        n //= 11\n    return True", "task_id": "138_1e9ea431-5fca-4415-8284-7132f7f841f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 12 or not.", "code": "def is_Sum_Of_Powers_Of_Twelve(n):\n    while n > 0:\n        if n % 12 == 11:\n            return False\n        n //= 12\n    return True", "task_id": "138_78c6b081-4c6f-4c06-aa0d-768b5492751b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate water bill based on the given units of water consumed.", "code": "def calculate_water_bill(units):\n    if units <= 30:\n        amount = units * 1.50\n    elif units <= 100:\n        amount = (30 * 1.50) + ((units - 30) * 2.00)\n    elif units <= 200:\n        amount = (30 * 1.50) + (70 * 2.00) + ((units - 100) * 3.00)\n    else:\n        amount = (30 * 1.50) + (70 * 2.00) + (100 * 3.00) + ((units - 200) * 5.00)\n    return amount", "task_id": "136_e71bdc71-1178-417c-9d9a-c09160c22eb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate gas bill based on the given units of gas consumed.", "code": "def calculate_gas_bill(units):\n    if units <= 20:\n        amount = units * 1.20\n    elif units <= 50:\n        amount = (20 * 1.20) + ((units - 20) * 1.50)\n    elif units <= 100:\n        amount = (20 * 1.20) + (30 * 1.50) + ((units - 50) * 2.00)\n    else:\n        amount = (20 * 1.20) + (30 * 1.50) + (50 * 2.00) + ((units - 100) * 3.00)\n    return amount", "task_id": "136_98ced87e-5d11-4f6c-bcb2-630391109aa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate internet bill based on the given data used in GB.", "code": "def calculate_internet_bill(data_used):\n    if data_used <= 10:\n        amount = data_used * 5.00\n    elif data_used <= 50:\n        amount = (10 * 5.00) + ((data_used - 10) * 4.00)\n    elif data_used <= 100:\n        amount = (10 * 5.00) + (40 * 4.00) + ((data_used - 50) * 3.00)\n    else:\n        amount = (10 * 5.00) + (40 * 4.00) + (50 * 3.00) + ((data_used - 100) * 2.00)\n    return amount", "task_id": "136_bc5eac07-8f7c-4a85-aa58-0a38ae2c10de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate phone bill based on the given minutes of call time.", "code": "def calculate_phone_bill(minutes):\n    if minutes <= 100:\n        amount = minutes * 0.50\n    elif minutes <= 300:\n        amount = (100 * 0.50) + ((minutes - 100) * 0.40)\n    elif minutes <= 500:\n        amount = (100 * 0.50) + (200 * 0.40) + ((minutes - 300) * 0.30)\n    else:\n        amount = (100 * 0.50) + (200 * 0.40) + (200 * 0.30) + ((minutes - 500) * 0.20)\n    return amount", "task_id": "136_a9510e62-2fac-470f-a88e-bba17b43e5eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate parking fee based on the given hours parked.", "code": "def calculate_parking_fee(hours):\n    if hours <= 2:\n        amount = hours * 5.00\n    elif hours <= 5:\n        amount = (2 * 5.00) + ((hours - 2) * 4.00)\n    elif hours <= 10:\n        amount = (2 * 5.00) + (3 * 4.00) + ((hours - 5) * 3.00)\n    else:\n        amount = (2 * 5.00) + (3 * 4.00) + (5 * 3.00) + ((hours - 10) * 2.00)\n    return amount", "task_id": "136_6aeca200-3aa3-4792-b60b-943bcb48e15f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate taxi fare based on the given distance traveled in kilometers.", "code": "def calculate_taxi_fare(distance):\n    if distance <= 5:\n        amount = distance * 10.00\n    elif distance <= 20:\n        amount = (5 * 10.00) + ((distance - 5) * 8.00)\n    elif distance <= 50:\n        amount = (5 * 10.00) + (15 * 8.00) + ((distance - 20) * 6.00)\n    else:\n        amount = (5 * 10.00) + (15 * 8.00) + (30 * 6.00) + ((distance - 50) * 5.00)\n    return amount", "task_id": "136_9ce6c790-6fd1-4b67-86c2-2f298e734358", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate gym membership fee based on the given number of months.", "code": "def calculate_gym_membership_fee(months):\n    if months <= 3:\n        amount = months * 50.00\n    elif months <= 6:\n        amount = (3 * 50.00) + ((months - 3) * 45.00)\n    elif months <= 12:\n        amount = (3 * 50.00) + (3 * 45.00) + ((months - 6) * 40.00)\n    else:\n        amount = (3 * 50.00) + (3 * 45.00) + (6 * 40.00) + ((months - 12) * 35.00)\n    return amount", "task_id": "136_da6fb44b-1d03-4d5d-a760-12f01f85553a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate movie ticket cost based on the given number of tickets.", "code": "def calculate_movie_ticket_cost(tickets):\n    if tickets <= 2:\n        amount = tickets * 12.00\n    elif tickets <= 5:\n        amount = (2 * 12.00) + ((tickets - 2) * 10.00)\n    elif tickets <= 10:\n        amount = (2 * 12.00) + (3 * 10.00) + ((tickets - 5) * 8.00)\n    else:\n        amount = (2 * 12.00) + (3 * 10.00) + (5 * 8.00) + ((tickets - 10) * 6.00)\n    return amount", "task_id": "136_438ad4ef-80d6-4ca8-99ff-f05c338e2796", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate laundry cost based on the given number of loads.", "code": "def calculate_laundry_cost(loads):\n    if loads <= 3:\n        amount = loads * 7.00\n    elif loads <= 7:\n        amount = (3 * 7.00) + ((loads - 3) * 6.00)\n    elif loads <= 10:\n        amount = (3 * 7.00) + (4 * 6.00) + ((loads - 7) * 5.00)\n    else:\n        amount = (3 * 7.00) + (4 * 6.00) + (3 * 5.00) + ((loads - 10) * 4.00)\n    return amount", "task_id": "136_a1f48cb1-3c1c-4b23-b31e-08445ee63e24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate carpool cost based on the given number of passengers and distance traveled in kilometers.", "code": "def calculate_carpool_cost(passengers, distance):\n    if passengers <= 2:\n        amount = distance * 0.50\n    elif passengers <= 4:\n        amount = distance * 0.40\n    elif passengers <= 6:\n        amount = distance * 0.30\n    else:\n        amount = distance * 0.20\n    return amount", "task_id": "136_76895e49-136a-4ccd-9590-894fd42e4278", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a sublist of elements from index 'start' to 'end' in a list.", "code": "def reverse_sublist(nums, start, end):\n    nums[start:end+1] = nums[start:end+1][::-1]\n    return nums", "task_id": "141_0110318b-0ab0-464a-8dc3-d45b6f9c5600", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the maximum element in a list.", "code": "def find_max_index(nums):\n    return nums.index(max(nums))", "task_id": "141_bce28e67-533a-4229-98b3-975a93412e37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a list to the right by k steps.", "code": "def rotate_list(nums, k):\n    k = k % len(nums)\n    return nums[-k:] + nums[:-k]", "task_id": "141_35cf5875-38ee-43a9-9fd0-98f01d9443ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the minimum element in a list.", "code": "def find_min_index(nums):\n    return nums.index(min(nums))", "task_id": "141_11685f64-adfa-4a14-8706-557739908b96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a list is sorted in non-decreasing order.", "code": "def is_sorted(nums):\n    return nums == sorted(nums)", "task_id": "141_93bc347c-0476-4783-b634-3cfbdc7e0f77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list while maintaining the order.", "code": "def remove_duplicates(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "task_id": "141_604553fc-bf2e-47b9-beff-0e0d1012d45f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)", "task_id": "141_0617e37d-bf3c-495a-b20c-9081856d63d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a list.", "code": "def find_second_largest(nums):\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    return unique_nums[-2]", "task_id": "141_d359fc30-644d-40bb-8a73-7dc960b2e283", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a list.", "code": "def sum_of_elements(nums):\n    return sum(nums)", "task_id": "141_58bd93e4-d5cb-42d1-907b-d4fbed7482c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a target element in a list.", "code": "def count_occurrences(nums, target):\n    return nums.count(target)", "task_id": "141_b1f1a7a2-2323-4b29-ad40-0385d06ef6f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of lists.", "code": "def extract_unique_elements(test_list):\n    element_count = {}\n    for sublist in test_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_a28ada44-4cf0-4b1c-a336-f9a216918291", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that do not repeat in the given list of lists.", "code": "def extract_non_repeating_elements(test_list):\n    element_count = {}\n    for sublist in test_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_0252783d-7e33-47d4-81d6-43c31e3d0c69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract characters that occur exactly once in the given string.", "code": "def extract_unique_chars(test_string):\n    char_count = {}\n    for char in test_string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    return ''.join([char for char, count in char_count.items() if count == 1])", "task_id": "140_ec87d8ab-01bf-4663-9104-2e8b6645bae1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract numbers that occur exactly once in the given list of numbers.", "code": "def extract_unique_numbers(test_list):\n    number_count = {}\n    for number in test_list:\n        if number in number_count:\n            number_count[number] += 1\n        else:\n            number_count[number] = 1\n    return [number for number, count in number_count.items() if count == 1]", "task_id": "140_2f5f9b37-0a23-4c61-9eb9-ee59eaaeaa69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract words that occur exactly once in the given string.", "code": "def extract_unique_words(test_string):\n    word_count = {}\n    words = test_string.split()\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return [word for word, count in word_count.items() if count == 1]", "task_id": "140_d408cfb6-66f0-4636-8c7a-fdd35434e2dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given 2D matrix.", "code": "def extract_unique_elements_from_matrix(matrix):\n    element_count = {}\n    for row in matrix:\n        for elem in row:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_d3f3a76d-beed-4613-864d-21e15a1c2183", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of dictionaries.", "code": "def extract_unique_elements_from_dict(dict_list):\n    element_count = {}\n    for d in dict_list:\n        for key, value in d.items():\n            if value in element_count:\n                element_count[value] += 1\n            else:\n                element_count[value] = 1\n    return [value for value, count in element_count.items() if count == 1]", "task_id": "140_e798a015-5a43-4dde-960e-04ad3226a723", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given nested list.", "code": "def extract_unique_elements_from_nested_list(nested_list):\n    element_count = {}\n    for sublist in nested_list:\n        for elem in sublist:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_971acd98-940d-445d-8eaf-bdef4283f2b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of strings.", "code": "def extract_unique_elements_from_string_list(string_list):\n    element_count = {}\n    for string in string_list:\n        for char in string:\n            if char in element_count:\n                element_count[char] += 1\n            else:\n                element_count[char] = 1\n    return [char for char, count in element_count.items() if count == 1]", "task_id": "140_379d9728-a0bc-4c20-a308-f6a4876f4ebb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that occur exactly once in the given list of tuples.", "code": "def extract_unique_elements_from_tuple_list(tuple_list):\n    element_count = {}\n    for tpl in tuple_list:\n        for elem in tpl:\n            if elem in element_count:\n                element_count[elem] += 1\n            else:\n                element_count[elem] = 1\n    return [elem for elem, count in element_count.items() if count == 1]", "task_id": "140_f47f5996-be1a-4558-8da6-360de942a7f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings present in the given tuple.", "code": "def count_strings_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, str))", "task_id": "143_28b3b9b7-da7e-4495-aa06-4f794cff850f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of integers present in the given tuple.", "code": "def count_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int))", "task_id": "143_76b6310c-6069-4975-8d19-7fd8740d05f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of floats present in the given tuple.", "code": "def count_floats_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, float))", "task_id": "143_b5713d95-7598-43db-a6cf-f5e741170019", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of dictionaries present in the given tuple.", "code": "def count_dicts_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, dict))", "task_id": "143_7e8aface-c8d6-4ab8-bc01-c36091b272e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of tuples present in the given tuple.", "code": "def count_tuples_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, tuple))", "task_id": "143_a9ebbe87-d02b-4345-93dd-b88bbf3c1903", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sets present in the given tuple.", "code": "def count_sets_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, set))", "task_id": "143_637afb46-aa31-42f2-9e9d-88aaf8afc87f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of booleans present in the given tuple.", "code": "def count_booleans_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, bool))", "task_id": "143_57875c52-25ea-4309-84a5-f2f6db7b8bca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of None values present in the given tuple.", "code": "def count_none_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if item is None)", "task_id": "143_1f8c88f7-2baa-4783-9e5e-5263823eb091", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive integers present in the given tuple.", "code": "def count_positive_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int) and item > 0)", "task_id": "143_1ed168a7-7cd8-4376-a57c-27451b1a15d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of negative integers present in the given tuple.", "code": "def count_negative_integers_in_tuple(t: tuple) -> int:\n    return sum(1 for item in t if isinstance(item, int) and item < 0)", "task_id": "143_8925eb31-04ef-4220-8150-096095d9bf38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the common elements in three given lists.", "code": "def count_common_elements(list1, list2, list3):\n    common_elements = set(list1) & set(list2) & set(list3)\n    return len(common_elements)", "task_id": "142_31cbf7f5-c7f9-431f-bb19-63571b2e1fc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is greater than a given threshold.", "code": "def count_samepair_with_threshold(list1, list2, list3, threshold):\n    result = sum(m == n == o and m > threshold for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_03ce6243-d26a-4811-8638-db79ae90b932", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the indices of the same pair in three given lists.", "code": "def count_samepair_with_index(list1, list2, list3):\n    result = [i for i, (m, n, o) in enumerate(zip(list1, list2, list3)) if m == n == o]\n    return result", "task_id": "142_df89be22-ea15-44d5-8d41-e533c5d45dc0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the sum of the pair is even.", "code": "def count_samepair_with_sum(list1, list2, list3):\n    result = sum(m == n == o and (m + n + o) % 2 == 0 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_173402ce-41c3-4ff2-b801-bfbbbd0b4513", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the absolute difference between the pair values is less than 5.", "code": "def count_samepair_with_difference(list1, list2, list3):\n    result = sum(m == n == o and abs(m - n) < 5 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_d0be3567-df26-4ed2-a5ae-916b64eab2c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the product of the pair values is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_samepair_with_product(list1, list2, list3):\n    result = sum(m == n == o and is_prime(m * n * o) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_5c5d2397-1000-4de1-a67c-4b1406da6987", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the length of the pair value is greater than 2.", "code": "def count_samepair_with_length(list1, list2, list3):\n    result = sum(m == n == o and len(str(m)) > 2 for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_cd347fce-08d4-4ce4-9c90-011c97f94059", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is a palindrome.", "code": "def is_palindrome(s):\n    return str(s) == str(s)[::-1]\n\ndef count_samepair_with_palindrome(list1, list2, list3):\n    result = sum(m == n == o and is_palindrome(m) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_ff4c9df9-8d7d-4d9b-a03a-3d9076279fb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value starts with a vowel.", "code": "def count_samepair_with_vowel(list1, list2, list3):\n    vowels = 'AEIOUaeiou'\n    result = sum(m == n == o and str(m)[0] in vowels for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_02d44ab0-2eff-4fc7-8d8d-5914bc8b0881", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in three given lists where the pair value is a perfect square.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef count_samepair_with_square(list1, list2, list3):\n    result = sum(m == n == o and is_perfect_square(m) for m, n, o in zip(list1, list2, list3))\n    return result", "task_id": "142_463177b3-ba5b-4d67-b01e-38c03bd53290", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all elements in the given array.", "code": "def sum_of_squares(arr: list) -> int:\n    return sum(x**2 for x in arr)", "task_id": "144_b992c91c-db07-4f61-ad4e-60ecb63f5686", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in the given array.", "code": "def product_of_elements(arr: list) -> int:\n    product = 1\n    for x in arr:\n        product *= x\n    return product", "task_id": "144_8357c4e5-54b7-4360-9436-bee42f830f24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in the given array.", "code": "def count_even_numbers(arr: list) -> int:\n    return sum(1 for x in arr if x % 2 == 0)", "task_id": "144_d04d72e6-f9e0-4dd4-b999-1ffabb9cd2e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum difference between any two elements in the given array.", "code": "def max_difference(arr: list) -> int:\n    return max(arr) - min(arr)", "task_id": "144_b9517875-8ca9-4b30-a2f2-8e372466ac20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime numbers in the given array.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(arr: list) -> int:\n    return sum(x for x in arr if is_prime(x))", "task_id": "144_78a3b8df-0e4d-45f2-82dd-73f0ef880041", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given array.", "code": "def reverse_array(arr: list) -> list:\n    return arr[::-1]", "task_id": "144_c3eebec8-ad39-49cd-93a2-905c6175c9e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at odd indices in the given array.", "code": "def sum_of_odd_indices(arr: list) -> int:\n    return sum(arr[i] for i in range(1, len(arr), 2))", "task_id": "144_7679ba05-a09e-4e62-9b06-69e2bd5a42ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in the given array.", "code": "def second_largest(arr: list) -> int:\n    unique_arr = list(set(arr))\n    unique_arr.sort()\n    return unique_arr[-2]", "task_id": "144_b852a589-7ee1-4e35-ad21-3091c74a8c67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits of all elements in the given array.", "code": "def sum_of_digits(arr: list) -> int:\n    return sum(sum(int(digit) for digit in str(x)) for x in arr)", "task_id": "144_cdc392c0-9ca6-4616-803e-962a797d9a94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique elements in the given array.", "code": "def count_unique_elements(arr: list) -> int:\n    return len(set(arr))", "task_id": "144_10d9589e-520b-46ac-9dd1-53c12ebcfdef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of ASCII values of all characters in a string.", "code": "def sum_ascii_values(s: str) -> int:\n    return sum(ord(char) for char in s)", "task_id": "146_835d5f82-b45a-4aa2-bcb0-1c4b5eb7b5bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of the first and last characters in a string.", "code": "def ascii_value_first_last(s: str) -> tuple:\n    if not s:\n        return (0, 0)\n    return (ord(s[0]), ord(s[-1]))", "task_id": "146_c93ea99e-4cd8-45a2-b7de-d65265be3b73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of characters at even indices in a string.", "code": "def ascii_value_even_indices(s: str) -> list:\n    return [ord(s[i]) for i in range(0, len(s), 2)]", "task_id": "146_c4ee1d33-7775-4f1c-b3ae-d8d9a5bffb24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of characters at odd indices in a string.", "code": "def ascii_value_odd_indices(s: str) -> list:\n    return [ord(s[i]) for i in range(1, len(s), 2)]", "task_id": "146_62f36480-de2a-4954-81c0-60dd78ac3cee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all vowels in a string.", "code": "def ascii_value_vowels(s: str) -> list:\n    vowels = 'aeiouAEIOU'\n    return [ord(char) for char in s if char in vowels]", "task_id": "146_97fb2f1f-18a6-4c33-8eca-92f5cc7aba41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all consonants in a string.", "code": "def ascii_value_consonants(s: str) -> list:\n    vowels = 'aeiouAEIOU'\n    return [ord(char) for char in s if char.isalpha() and char not in vowels]", "task_id": "146_48177edc-b700-494e-8a13-8ccdf826975d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all digits in a string.", "code": "def ascii_value_digits(s: str) -> list:\n    return [ord(char) for char in s if char.isdigit()]", "task_id": "146_be55941b-6e69-4158-9902-7101235609d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all special characters in a string.", "code": "def ascii_value_special_chars(s: str) -> list:\n    return [ord(char) for char in s if not char.isalnum()]", "task_id": "146_2b550014-c2c0-411f-bc2e-075f3564619c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all uppercase letters in a string.", "code": "def ascii_value_uppercase(s: str) -> list:\n    return [ord(char) for char in s if char.isupper()]", "task_id": "146_0e856667-624b-4a0e-b838-1f999280f535", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ASCII values of all lowercase letters in a string.", "code": "def ascii_value_lowercase(s: str) -> list:\n    return [ord(char) for char in s if char.islower()]", "task_id": "146_e2551a99-0aa2-44e8-b2d6-22ec235c1601", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array.", "code": "def min_Abs_Diff(arr: list[int]) -> int:\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(1, len(arr)):\n        min_diff = min(min_diff, arr[i] - arr[i-1])\n    return min_diff", "task_id": "145_360a15d6-4ff3-407c-9814-337875343159", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of any two elements in a given array.", "code": "def max_Abs_Sum(arr: list[int]) -> int:\n    arr.sort()\n    return arr[-1] + arr[-2]", "task_id": "145_be6dd06b-1823-4f95-9342-bf6b0446d8bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of any two elements in a given array.", "code": "def min_Abs_Sum(arr: list[int]) -> int:\n    arr.sort()\n    return arr[0] + arr[1]", "task_id": "145_e255b58e-6e63-461a-be62-c23011a091d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of any two elements in a given array.", "code": "def max_Abs_Product(arr: list[int]) -> int:\n    arr.sort()\n    return max(arr[0] * arr[1], arr[-1] * arr[-2])", "task_id": "145_8a956aad-67b3-4b8e-ac37-b1ecc5ba737c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum product of any two elements in a given array.", "code": "def min_Abs_Product(arr: list[int]) -> int:\n    arr.sort()\n    return min(arr[0] * arr[1], arr[-1] * arr[-2])", "task_id": "145_c1922051-16c9-44b4-bd24-41af0710e0ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the maximum difference.", "code": "def max_Abs_Diff_Index(arr: list[int]) -> tuple[int, int]:\n    min_index = arr.index(min(arr))\n    max_index = arr.index(max(arr))\n    return (min_index, max_index)", "task_id": "145_c91bd784-c40a-4579-960c-083970aa112e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the minimum difference.", "code": "def min_Abs_Diff_Index(arr: list[int]) -> tuple[int, int]:\n    min_diff = float('inf')\n    min_pair = (0, 1)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n                min_pair = (i, j)\n    return min_pair", "task_id": "145_fe328287-54b1-4679-9567-24cbadffd722", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the maximum sum.", "code": "def max_Abs_Sum_Index(arr: list[int]) -> tuple[int, int]:\n    max1, max2 = sorted(arr)[-2:]\n    return (arr.index(max1), arr.index(max2))", "task_id": "145_ed14578d-04cd-4849-94d9-4730afe290a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the minimum sum.", "code": "def min_Abs_Sum_Index(arr: list[int]) -> tuple[int, int]:\n    min1, min2 = sorted(arr)[:2]\n    return (arr.index(min1), arr.index(min2))", "task_id": "145_8bce0119-4693-4289-987a-e2891bb9e42b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements in a given array that have the maximum product.", "code": "def max_Abs_Product_Index(arr: list[int]) -> tuple[int, int]:\n    arr_sorted = sorted(arr)\n    if arr_sorted[0] * arr_sorted[1] > arr_sorted[-1] * arr_sorted[-2]:\n        return (arr.index(arr_sorted[0]), arr.index(arr_sorted[1]))\n    else:\n        return (arr.index(arr_sorted[-1]), arr.index(arr_sorted[-2]))", "task_id": "145_5c83dc62-eb2f-495b-9c0d-8851e94bdd16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "150_f194b810-15c8-446e-bb89-d013f41ba6b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "150_c6f740a0-a9b9-4fa8-a64c-89414af72c13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "150_4b5414c4-4a34-462d-953b-f4ac5b8df3a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "150_01c37695-413a-41a4-b1c5-bb0977ea7114", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "150_46116596-21b5-44cf-893f-f65db1833fab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "150_d6eb4f58-b517-4548-b887-d63646f93f5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "150_90b964c7-487f-460e-a204-811865a16470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "150_167fb05a-f459-4f7b-8a55-04e4efe7a6e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)", "task_id": "150_aab74c65-fe11-44db-9c4b-1ac2b043158f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a perfect square.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "150_ea517358-902a-4efe-b439-9aecaa60515d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the product of digits is maximum.", "code": "def product_digits_single(x):\n    ans = 1\n    while x:\n        ans *= x % 10\n        x //= 10\n    return ans\n\ndef closest_product(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_product(N):\n    A = closest_product(N)\n    return product_digits_single(A) * product_digits_single(N - A)", "task_id": "148_226c753f-50bb-4c18-8412-b4535667cb2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the absolute difference of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_difference(N):\n    A = closest(N)\n    return abs(sum_digits_single(A) - sum_digits_single(N - A))", "task_id": "148_bfa0c3bc-865f-45c8-88d3-152236c729b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the quotient of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_quotient(N):\n    A = closest(N)\n    return sum_digits_single(A) // sum_digits_single(N - A)", "task_id": "148_40ad18ac-9411-457e-a3fa-dda9480c6bc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the modulus of digits is maximum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_modulus(N):\n    A = closest(N)\n    return sum_digits_single(A) % sum_digits_single(N - A)", "task_id": "148_5027dcce-2b3e-48fc-9e64-1f83bc21286f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of digits is minimum.", "code": "def sum_digits_single(x):\n    ans = 0\n    while x:\n        ans += x % 10\n        x //= 10\n    return ans\n\ndef closest_min(x):\n    ans = 0\n    while (ans * 10 + 1 <= x):\n        ans = ans * 10 + 1\n    return ans\n\ndef min_digit_sum_sum(N):\n    A = closest_min(N)\n    return sum_digits_single(A) + sum_digits_single(N - A)", "task_id": "148_7190e5f4-2cf1-4436-97b0-06b9faa32aea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of even digits is maximum.", "code": "def sum_even_digits_single(x):\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit % 2 == 0:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_even(x):\n    ans = 0\n    while (ans * 10 + 8 <= x):\n        ans = ans * 10 + 8\n    return ans\n\ndef max_digit_sum_sum_even(N):\n    A = closest_even(N)\n    return sum_even_digits_single(A) + sum_even_digits_single(N - A)", "task_id": "148_c0d3498a-2ae8-466d-8946-69988c4c1c5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of odd digits is maximum.", "code": "def sum_odd_digits_single(x):\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit % 2 != 0:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_odd(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_sum_odd(N):\n    A = closest_odd(N)\n    return sum_odd_digits_single(A) + sum_odd_digits_single(N - A)", "task_id": "148_f5c7da8f-4856-4cf3-a761-8e05ce902ed9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of prime digits is maximum.", "code": "def sum_prime_digits_single(x):\n    prime_digits = {2, 3, 5, 7}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in prime_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_prime(x):\n    ans = 0\n    while (ans * 10 + 7 <= x):\n        ans = ans * 10 + 7\n    return ans\n\ndef max_digit_sum_sum_prime(N):\n    A = closest_prime(N)\n    return sum_prime_digits_single(A) + sum_prime_digits_single(N - A)", "task_id": "148_06d627f5-dbeb-4264-96f9-ae7b7ef0d7e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of Fibonacci digits is maximum.", "code": "def sum_fibonacci_digits_single(x):\n    fibonacci_digits = {0, 1, 2, 3, 5, 8}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in fibonacci_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_fibonacci(x):\n    ans = 0\n    while (ans * 10 + 8 <= x):\n        ans = ans * 10 + 8\n    return ans\n\ndef max_digit_sum_sum_fibonacci(N):\n    A = closest_fibonacci(N)\n    return sum_fibonacci_digits_single(A) + sum_fibonacci_digits_single(N - A)", "task_id": "148_c07815e0-8f64-42fd-81a4-5713f73d3f75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide a number into two parts such that the sum of square digits is maximum.", "code": "def sum_square_digits_single(x):\n    square_digits = {0, 1, 4, 9}\n    ans = 0\n    while x:\n        digit = x % 10\n        if digit in square_digits:\n            ans += digit\n        x //= 10\n    return ans\n\ndef closest_square(x):\n    ans = 0\n    while (ans * 10 + 9 <= x):\n        ans = ans * 10 + 9\n    return ans\n\ndef max_digit_sum_sum_square(N):\n    A = closest_square(N)\n    return sum_square_digits_single(A) + sum_square_digits_single(N - A)", "task_id": "148_d789131c-418c-4c4a-a797-da457d3cf2e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle.", "code": "def min_path_sum(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif (tri[i+1][j] < tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_22abdcb8-ab04-4c64-b893-2646f462f9ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider even numbers.", "code": "def max_path_sum_even(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 2 == 0 and tri[i+1][j+1] % 2 == 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 2 == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 2 == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_707811d7-57b0-4f6a-9b62-db391b6ebc34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider odd numbers.", "code": "def max_path_sum_odd(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 2 != 0 and tri[i+1][j+1] % 2 != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 2 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 2 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_564a84fc-7e56-4176-9b88-502391a39107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider prime numbers.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num**0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef max_path_sum_prime(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif is_prime(tri[i+1][j]) and is_prime(tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif is_prime(tri[i+1][j]): \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif is_prime(tri[i+1][j+1]): \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_fd6d8c91-425b-41a1-bfdd-deb471927e73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider adjacent elements in the next row.", "code": "def max_path_sum_no_adjacent(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif j == 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\t\t\telif j == i: \n\t\t\t\ttri[i][j] += tri[i+1][j-1] \n\t\t\telse: \n\t\t\t\ttri[i][j] += max(tri[i+1][j-1], tri[i+1][j+1]) \n\treturn tri[0][0]", "task_id": "147_2cddb15c-bcf9-47c1-b1f9-fce3e0d10a03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but only consider non-negative numbers.", "code": "def max_path_sum_non_negative(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] >= 0 and tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_51ee8c07-e64d-4dc1-bae7-bdfb9ba6cdf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider repeated elements in the next row.", "code": "def max_path_sum_no_repeats(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] != tri[i+1][j+1]: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telse: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\treturn tri[0][0]", "task_id": "147_cc4985ef-d5ad-4508-9545-58ac4907203b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider zero elements.", "code": "def max_path_sum_no_zero(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] != 0 and tri[i+1][j+1] != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_a9b14bfa-781d-431a-bc80-90dae8710a58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider negative elements.", "code": "def max_path_sum_no_negative(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] >= 0 and tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] >= 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_6f4f8a44-68b2-4e3d-8138-46ce06933c88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle, but do not consider elements divisible by 3.", "code": "def max_path_sum_no_divisible_by_3(tri, m, n): \n\tfor i in range(m-1, -1, -1): \n\t\tfor j in range(i+1): \n\t\t\tif tri[i+1][j] % 3 != 0 and tri[i+1][j+1] % 3 != 0: \n\t\t\t\ttri[i][j] += max(tri[i+1][j], tri[i+1][j+1]) \n\t\t\telif tri[i+1][j] % 3 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j] \n\t\t\telif tri[i+1][j+1] % 3 != 0: \n\t\t\t\ttri[i][j] += tri[i+1][j+1] \n\treturn tri[0][0]", "task_id": "147_76a8fd1f-c5d8-44f5-a5da-3f263b480705", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "151_230ce13d-fb12-4143-9614-d0aa323b2c00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def gcd(p, q):\n    while q != 0:\n        p, q = q, p % q\n    return p\n\ndef lcm(x: int, y: int) -> int:\n    return abs(x * y) // gcd(x, y)", "task_id": "151_238e2224-638c-4ce8-8ef1-966bd959f3ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is even or not.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "151_72d2ee66-d4ed-4be5-a410-389e3650b090", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "151_b8533248-d269-4458-bd1d-f489878e6190", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "151_239fbb64-1cf5-4609-b9c4-2eb84b4e7bfb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "151_ec0a76cb-1c50-4978-b3cf-a2c95e706852", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "151_89da077c-362b-4922-bd2b-953684e662b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "151_954f7912-81cc-4310-9139-0f1a93e34525", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "151_16882b4e-54ce-48f1-9068-7867ee5b6e05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "151_41c29f3c-46b1-4d9b-95d9-7d9ad188db7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is two for the given array.", "code": "def longest_subseq_with_diff_two(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+2) or (arr[i] == arr[j]-2)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_52b6ed1d-4f20-4d1b-b046-ccd569ddcf16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is k for the given array.", "code": "def longest_subseq_with_diff_k(arr, n, k): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] == arr[j]+k) or (arr[i] == arr[j]-k)): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_91f04a82-36da-40e0-aee2-182893d633f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest increasing subsequence for the given array.", "code": "def longest_increasing_subseq(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] > arr[j]: \n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1) \n\treturn max(dp)", "task_id": "149_d4344e82-3d81-42ce-8efd-334d809dfba2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest decreasing subsequence for the given array.", "code": "def longest_decreasing_subseq(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif arr[i] < arr[j]: \n\t\t\t\tdp[i] = max(dp[i], dp[j] + 1) \n\treturn max(dp)", "task_id": "149_2942763d-f571-4369-91f9-bb9598b01128", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is odd for the given array.", "code": "def longest_subseq_with_diff_odd_even(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] - arr[j]) % 2 != 0: \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_e182fc76-9570-4307-9392-c3ef6f03da6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a prime number for the given array.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num**0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef longest_subseq_with_diff_prime(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_prime(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_607a36b7-8611-47f3-b71d-c0b9098086f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a Fibonacci number for the given array.", "code": "def is_fibonacci(num): \n\tif num < 0: \n\t\treturn False \n\ta, b = 0, 1 \n\twhile b < num: \n\t\ta, b = b, a + b \n\treturn b == num \n\ndef longest_subseq_with_diff_fibonacci(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_fibonacci(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_e65fb74a-db41-4bc7-94f8-f7ac451c2890", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a perfect square for the given array.", "code": "def is_perfect_square(num): \n\tif num < 0: \n\t\treturn False \n\treturn int(num**0.5)**2 == num \n\ndef longest_subseq_with_diff_square(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_perfect_square(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_15b2d622-aeb2-4d4d-b1d7-aa2c76fcf21a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a perfect cube for the given array.", "code": "def is_perfect_cube(num): \n\tif num < 0: \n\t\treturn False \n\treturn round(num**(1/3))**3 == num \n\ndef longest_subseq_with_diff_cube(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_perfect_cube(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_1317e95f-fd2e-47cf-a750-92e1328f3c82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest subsequence such that the difference between adjacents is a factorial number for the given array.", "code": "def is_factorial(num): \n\tif num < 0: \n\t\treturn False \n\tfact = 1 \n\ti = 1 \n\twhile fact < num: \n\t\ti += 1 \n\t\tfact *= i \n\treturn fact == num \n\ndef longest_subseq_with_diff_factorial(arr, n): \n\tdp = [1 for i in range(n)] \n\tfor i in range(n): \n\t\tfor j in range(i): \n\t\t\tif is_factorial(abs(arr[i] - arr[j])): \n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \n\tresult = 1\n\tfor i in range(n): \n\t\tif (result < dp[i]): \n\t\t\tresult = dp[i] \n\treturn result", "task_id": "149_d2f8f409-0b42-4158-8639-f246380c7af4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "152_ceaad8f6-f327-4dd3-8a1c-cbf43d77f292", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "152_e774d5b5-eceb-4c93-ae76-567bf41e5c4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "152_4c529244-17a9-4757-b679-bdb8fcf6c0c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "152_8e1f7d72-f392-43c8-a5b9-2bc327b2b5ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using heap sort.", "code": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr", "task_id": "152_fc1fb9d6-6a32-46d1-b165-27df450c8b0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using counting sort.", "code": "def counting_sort(arr):\n    max_val = max(arr)\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n    return arr", "task_id": "152_3d9ff548-7f2d-48d9-a236-6472da319eb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using radix sort.", "code": "def counting_sort_exp(arr, exp1):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // exp1\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp1\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_exp(arr, exp)\n        exp *= 10\n    return arr", "task_id": "152_783b9951-92e4-44cd-91b2-96d82843081f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using shell sort.", "code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "task_id": "152_06a93ac5-c111-44d5-8959-73f5bbab4a17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bucket sort.", "code": "def bucket_sort(arr):\n    bucket = [[] for _ in range(len(arr))]\n    for j in arr:\n        index_b = int(len(arr) * j)\n        bucket[index_b].append(j)\n    for i in range(len(arr)):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(len(arr)):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n    return arr", "task_id": "152_5005c2a6-92bb-4d57-9c59-2b8ad43f171b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using gnome sort.", "code": "def gnome_sort(arr):\n    index = 0\n    while index < len(arr):\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr", "task_id": "152_3933c1f0-3260-4cf1-bd13-0f8fa549081b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given number.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    while n > 0:\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "155_d810724d-ab67-4877-a904-279eea2b8fe7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in a given number.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "155_8db2a135-db16-4ef6-8fe8-89c1f658c887", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "155_69fdf9b7-f958-45e4-983e-d7e031014d1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap all odd and even bits of a given number.", "code": "def swap_odd_even_bits(n: int) -> int:\n    even_bits = n & 0xAAAAAAAA\n    odd_bits = n & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return even_bits | odd_bits", "task_id": "155_94b8f1a9-f385-46f4-94da-55fd9887a3c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all odd bits of a given number.", "code": "def toggle_odd_bits(n: int) -> int:\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 0:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "155_4efb5eef-840f-42c9-a4c7-f619ae7ee6b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the rightmost set bit of a given number.", "code": "def clear_rightmost_set_bit(n: int) -> int:\n    return n & (n - 1)", "task_id": "155_808337a1-6067-4b9e-8979-938333d63394", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to isolate the rightmost set bit of a given number.", "code": "def isolate_rightmost_set_bit(n: int) -> int:\n    return n & -n", "task_id": "155_0f0efd4b-016c-4124-92d6-e3fb91cf9619", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the parity of a given number (1 if the number of set bits is odd, otherwise 0).", "code": "def parity(n: int) -> int:\n    result = 0\n    while n > 0:\n        result ^= n & 1\n        n >>= 1\n    return result", "task_id": "155_f83203a2-1f78-45ea-b210-7f1079788542", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the bits of a given number to the left by d positions.", "code": "def rotate_bits_left(n: int, d: int) -> int:\n    INT_BITS = 32\n    return (n << d) | (n >> (INT_BITS - d))", "task_id": "155_989714bf-34a0-4df7-aeb5-2331b8656209", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the bits of a given number to the right by d positions.", "code": "def rotate_bits_right(n: int, d: int) -> int:\n    INT_BITS = 32\n    return (n >> d) | (n << (INT_BITS - d))", "task_id": "155_777e31b2-84dd-41e0-b422-4c00234d514b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract a specified column from a given two-dimensional list.", "code": "def extract_column(matrix, col_index):\n    return [row[col_index] for row in matrix]", "task_id": "154_34652298-87b1-40a1-b5bb-2b3021a00283", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract a specified row from a given two-dimensional list.", "code": "def extract_row(matrix, row_index):\n    return matrix[row_index]", "task_id": "154_6d6593e3-6f31-47fc-ae8a-b15c82648c20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the main diagonal elements from a given square two-dimensional list.", "code": "def extract_diagonal(matrix):\n    return [matrix[i][i] for i in range(len(matrix))]", "task_id": "154_5ddce72d-f64e-4a9e-aecb-2e8d0191f224", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the anti-diagonal elements from a given square two-dimensional list.", "code": "def extract_anti_diagonal(matrix):\n    n = len(matrix)\n    return [matrix[i][n-1-i] for i in range(n)]", "task_id": "154_c51a34e1-7466-47ce-afb4-f40ff7eb2f26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the border elements from a given two-dimensional list.", "code": "def extract_border(matrix):\n    if not matrix: return []\n    top = matrix[0]\n    bottom = matrix[-1]\n    left = [row[0] for row in matrix[1:-1]]\n    right = [row[-1] for row in matrix[1:-1]]\n    return top + right + bottom[::-1] + left[::-1]", "task_id": "154_af999486-dde3-498d-9f56-8501c28fb7bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all even elements from a given two-dimensional list.", "code": "def extract_even_elements(matrix):\n    return [elem for row in matrix for elem in row if elem % 2 == 0]", "task_id": "154_3611fcf2-1840-47df-aff4-759c087dee61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all odd elements from a given two-dimensional list.", "code": "def extract_odd_elements(matrix):\n    return [elem for row in matrix for elem in row if elem % 2 != 0]", "task_id": "154_a0609cc0-8b27-4f11-ad04-b75be9adec32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all elements greater than a specified threshold from a given two-dimensional list.", "code": "def extract_elements_greater_than(matrix, threshold):\n    return [elem for row in matrix for elem in row if elem > threshold]", "task_id": "154_171e1f7a-2bed-47b1-817a-4060eb84b4f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all elements less than a specified threshold from a given two-dimensional list.", "code": "def extract_elements_less_than(matrix, threshold):\n    return [elem for row in matrix for elem in row if elem < threshold]", "task_id": "154_fc20bc8b-deb2-4fdb-99b2-7b5f66e60be7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all elements divisible by a specified number from a given two-dimensional list.", "code": "def extract_elements_divisible_by(matrix, divisor):\n    return [elem for row in matrix for elem in row if elem % divisor == 0]", "task_id": "154_6f3507ed-d9df-4d50-85d6-e57b8a48b960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the focus of a parabola given its coefficients a, b, and c.", "code": "def parabola_focus(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    focus = (h, k + 1 / (4 * a))\n    return focus", "task_id": "153_5f54e457-5eca-4d1d-8c4e-e850feeef9a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the directrix of a parabola given its coefficients a, b, and c.", "code": "def parabola_directrix(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    directrix = k - 1 / (4 * a)\n    return directrix", "task_id": "153_16e20265-837f-4b38-adbe-8f56857eccbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the axis of symmetry of a parabola given its coefficients a and b.", "code": "def parabola_axis_of_symmetry(a, b):\n    axis_of_symmetry = -b / (2 * a)\n    return axis_of_symmetry", "task_id": "153_56b78508-9d35-4c0b-9f5d-6a21b313fc9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the y-intercept of a parabola given its coefficients a, b, and c.", "code": "def parabola_y_intercept(a, b, c):\n    return c", "task_id": "153_49944cc6-2f56-4375-b3a2-ddb809a02616", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the x-intercepts of a parabola given its coefficients a, b, and c.", "code": "def parabola_x_intercepts(a, b, c):\n    discriminant = b**2 - 4 * a * c\n    if discriminant < 0:\n        return ()\n    elif discriminant == 0:\n        x = -b / (2 * a)\n        return (x,)\n    else:\n        x1 = (-b + discriminant**0.5) / (2 * a)\n        x2 = (-b - discriminant**0.5) / (2 * a)\n        return (x1, x2)", "task_id": "153_6e33de10-9172-486e-90cb-24ffed9ff29b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the opening direction of a parabola given its coefficient a.", "code": "def parabola_opening_direction(a):\n    return 'upward' if a > 0 else 'downward'", "task_id": "153_ffed528d-07ff-4110-82f6-452f1c322d68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the standard form of a parabola to its vertex form given its coefficients a, b, and c.", "code": "def parabola_vertex_form(a, b, c):\n    h = -b / (2 * a)\n    k = c - (b**2 / (4 * a))\n    return f'y = {a}(x - {h})^2 + {k}'", "task_id": "153_aaa83d9b-f3bd-469f-9fe0-e78c921763e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the latus rectum of a parabola given its coefficient a.", "code": "def parabola_latus_rectum(a):\n    return 1 / abs(a)", "task_id": "153_c0a8946b-8311-43e2-9c21-071967704c72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the y-coordinate of the vertex of a parabola given its coefficients a, b, and c.", "code": "def parabola_vertex_y(a, b, c):\n    k = c - (b**2 / (4 * a))\n    return k", "task_id": "153_17bb597f-6020-4e4d-a6c8-36f84414d733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the discriminant of a parabola given its coefficients a, b, and c.", "code": "def parabola_discriminant(a, b, c):\n    return b**2 - 4 * a * c", "task_id": "153_cfa56b86-08dc-41b7-9aaf-a209b1169fac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a tuple of integers.", "code": "def sum_of_tuple_elements(t: tuple) -> int:\n    return sum(t)", "task_id": "156_712014a9-cb28-4d70-b84d-7c29745b3056", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of a given tuple.", "code": "def reverse_tuple(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "156_4cb272e2-ea3f-43ec-8d88-9cd49a1423d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a list.", "code": "def tuple_to_list(t: tuple) -> list:\n    return list(t)", "task_id": "156_efb63f4f-3799-41bf-8d93-23546404313a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two tuples.", "code": "def concatenate_tuples(t1: tuple, t2: tuple) -> tuple:\n    return t1 + t2", "task_id": "156_06e63963-1b4c-4ac5-9741-235c5624e3e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple of key-value pairs to a dictionary.", "code": "def tuple_to_dict(t: tuple) -> dict:\n    return dict(t)", "task_id": "156_82425bee-d521-4966-ac19-9dc47dfecdde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a tuple of integers.", "code": "def max_in_tuple(t: tuple) -> int:\n    return max(t)", "task_id": "156_4405f13b-3b76-4740-854b-60c7b7e94fc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of a given tuple.", "code": "def tuple_length(t: tuple) -> int:\n    return len(t)", "task_id": "156_1ce0a4bc-2016-44e8-a969-4eca2238a2e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if an element exists in a tuple.", "code": "def element_in_tuple(t: tuple, element: int) -> bool:\n    return element in t", "task_id": "156_e626857b-4190-4e57-a461-07312ecfa2e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a set.", "code": "def tuple_to_set(t: tuple) -> set:\n    return set(t)", "task_id": "156_7e52162b-11e3-4df4-905c-a27f9b7c9af1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the product of all elements in a tuple of integers.", "code": "def tuple_product(t: tuple) -> int:\n    product = 1\n    for x in t:\n        product *= x\n    return product", "task_id": "156_f9dc5721-6d3b-4c01-8025-a33bf0ee8b07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to decode a run-length encoded list.", "code": "def decode_list(encoded_list):\n    return [key for count, key in encoded_list for _ in range(count)]", "task_id": "157_0fcf2ef9-565a-4ca5-94fe-51b1bfe0a3fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a string.", "code": "from itertools import groupby\n\ndef encode_string(s):\n    return [[len(list(group)), key] for key, group in groupby(s)]", "task_id": "157_23ce6b20-bec9-4c73-b16c-09f985db2d48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to decode a run-length encoded string.", "code": "def decode_string(encoded_list):\n    return ''.join([key * count for count, key in encoded_list])", "task_id": "157_5fd77f0f-2d9c-4802-8b07-eafddd82a68b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a string, considering alternating case characters as different.", "code": "from itertools import groupby\n\ndef encode_alternating_case(s):\n    return [[len(list(group)), key] for key, group in groupby(s, key=lambda x: (x.lower(), x.islower()))]", "task_id": "157_64360463-6af7-4c15-a0e7-fdb9faa66c27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the starting index of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_index(list1):\n    result = []\n    index = 0\n    for key, group in groupby(list1):\n        length = len(list(group))\n        result.append([length, key, index])\n        index += length\n    return result", "task_id": "157_c11179b8-5b6c-4097-9ba4-3b766c73cff1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the sum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_sum(list1):\n    return [[len(list(group)), key, sum(group)] for key, group in groupby(list1)]", "task_id": "157_25edd679-6c8c-46ec-9061-a383d8f19be0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the product of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_product(list1):\n    from functools import reduce\n    import operator\n    return [[len(list(group)), key, reduce(operator.mul, group, 1)] for key, group in groupby(list1)]", "task_id": "157_c82bc5be-2933-44ad-8efa-7cff09140646", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the average of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_average(list1):\n    return [[len(list(group)), key, sum(group) / len(group)] for key, group in groupby(list1)]", "task_id": "157_06689238-417c-4004-b56e-8f009d419d07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the minimum and maximum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_min_max(list1):\n    return [[len(list(group)), key, min(group), max(group)] for key, group in groupby(list1)]", "task_id": "157_787bbe50-c380-4edd-80f5-d2bb7dedf5cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reflect the run-length encoding from a list, including the length and sum of each run.", "code": "from itertools import groupby\n\ndef encode_list_with_run_length_and_sum(list1):\n    return [[len(list(group)), key, len(list(group)), sum(group)] for key, group in groupby(list1)]", "task_id": "157_0f8e6b20-aa76-418f-a5f7-3b17c2d28b5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day: int, month: int, year: int) -> str:\n    date = datetime.date(year, month, day)\n    return date.strftime('%A')", "task_id": "159_7d67e717-5082-4d6e-ad22-688fbad8cda9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "159_c3289554-e3a3-4701-b943-8d8c3746fe9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the number of days in a given month and year.", "code": "def days_in_month(month: int, year: int) -> int:\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        return 29 if is_leap_year(year) else 28\n    else:\n        return 0\n\ndef is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "159_5fb233da-73e4-493d-a2f5-b613dad75a63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the next day's date given a day, month, and year.", "code": "import datetime\n\ndef next_day(day: int, month: int, year: int) -> tuple:\n    date = datetime.date(year, month, day)\n    next_date = date + datetime.timedelta(days=1)\n    return (next_date.day, next_date.month, next_date.year)", "task_id": "159_e9f1837e-c962-4423-bbc0-f3d07f0cce52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the time of day (morning, afternoon, evening, night) given an hour and minute.", "code": "def time_of_day(hour: int, minute: int) -> str:\n    if 5 <= hour < 12:\n        return 'morning'\n    elif 12 <= hour < 17:\n        return 'afternoon'\n    elif 17 <= hour < 21:\n        return 'evening'\n    else:\n        return 'night'", "task_id": "159_da9a5670-1edf-461a-a427-cabec78df590", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given date falls on a weekend.", "code": "import datetime\n\ndef is_weekend(day: int, month: int, year: int) -> bool:\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5", "task_id": "159_81c03d8e-0f88-4135-b200-cc888e3b6a1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days until the next occurrence of a given birthday.", "code": "import datetime\n\ndef days_until_birthday(day: int, month: int, year: int, bday_day: int, bday_month: int) -> int:\n    today = datetime.date(year, month, day)\n    birthday = datetime.date(year, bday_month, bday_day)\n    if birthday < today:\n        birthday = datetime.date(year + 1, bday_month, bday_day)\n    return (birthday - today).days", "task_id": "159_7c4d672d-610c-4c61-bf76-53cbbad42a81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a time from 24-hour format to 12-hour format.", "code": "def convert_24_to_12(hour: int, minute: int) -> str:\n    period = 'AM' if hour < 12 else 'PM'\n    hour = hour % 12\n    if hour == 0:\n        hour = 12\n    return f'{hour}:{minute:02d} {period}'", "task_id": "159_98d1fade-d5a3-4776-95b5-4a068fb2fd32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days between two given dates.", "code": "import datetime\n\ndef days_between_dates(day1: int, month1: int, year1: int, day2: int, month2: int, year2: int) -> int:\n    date1 = datetime.date(year1, month1, day1)\n    date2 = datetime.date(year2, month2, day2)\n    return abs((date2 - date1).days)", "task_id": "159_6d08d802-9294-4017-94ac-fb6f6a849be1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given date is valid.", "code": "def is_valid_date(day: int, month: int, year: int) -> bool:\n    try:\n        datetime.date(year, month, day)\n        return True\n    except ValueError:\n        return False", "task_id": "159_f6a34811-e0d3-4f8a-b7a6-0f7052cd9b1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all even numbers from a given list.", "code": "def remove_even_numbers(lst):\n    return [x for x in lst if x % 2 != 0]", "task_id": "161_4224ab9e-51b8-45cf-b1a4-db4a126c81ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "161_40a00919-9a27-4d33-8a3d-6ce94d55e351", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate elements from a given list.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for x in lst:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result", "task_id": "161_c7e567d8-ca86-44de-af3b-ee17bfbc3028", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all negative numbers from a given list.", "code": "def remove_negative_numbers(lst):\n    return [x for x in lst if x >= 0]", "task_id": "161_8ccbc0ba-93d3-4dd8-917b-8a9b2680f440", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings shorter than a given length from a list of strings.", "code": "def remove_short_strings(lst, n):\n    return [s for s in lst if len(s) >= n]", "task_id": "161_125f406d-2ef5-47f6-be34-d4e4d1fbfaeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alphabetic(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "161_0b9067f1-3335-4120-a4a3-c49a3b8a3510", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all elements greater than a given number from a list.", "code": "def remove_elements_greater_than(lst, n):\n    return [x for x in lst if x <= n]", "task_id": "161_f51613aa-6743-4ad9-b255-3f129096f0ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings starting with a given character from a list of strings.", "code": "def remove_elements_starting_with(lst, char):\n    return [s for s in lst if not s.startswith(char)]", "task_id": "161_d42ad38f-bb21-4b68-b507-f84e1104564f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings containing a given substring from a list of strings.", "code": "def remove_elements_with_substring(lst, substring):\n    return [s for s in lst if substring not in s]", "task_id": "161_35275082-d9e7-4342-ba07-dc29334e3b5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all elements at odd indices from a given list.", "code": "def remove_elements_at_odd_indices(lst):\n    return [x for i, x in enumerate(lst) if i % 2 == 0]", "task_id": "161_9e39f26a-5639-44e6-bfef-bf95f2d6c5ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array equal by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_equal(arr: list[int], k: int) -> int:\n    max1 = max(arr)\n    res = 0\n    for i in range(len(arr)):\n        if abs(max1 - arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(max1 - arr[i]) // k\n    return res", "task_id": "158_ced17e28-3c26-4336-964b-b1c65617560b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array zero by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_zero(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if abs(arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(arr[i]) // k\n    return res", "task_id": "158_3e7ecb4f-5e86-47a9-8425-3ad1627b151a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array equal to m by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_m(arr: list[int], m: int, k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if abs(m - arr[i]) % k != 0:\n            return -1\n        else:\n            res += abs(m - arr[i]) // k\n    return res", "task_id": "158_506d9a7d-e06b-43d6-b9df-175ace542f5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array even by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_even(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 != 0:\n            if k % 2 == 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_8bb5355f-1657-4be9-a7e5-3cf936fa2677", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array odd by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_odd(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            if k % 2 == 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_2b5182ec-0d58-4380-8ff7-c06757ab1445", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array divisible by x by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_divisible_by_x(arr: list[int], x: int, k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % x != 0:\n            if k % x != 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_dcffc534-1173-4c30-be96-7056ef48b9dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array prime by either adding or subtracting k.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef min_ops_to_make_all_elements_prime(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if not is_prime(arr[i]):\n            return -1\n    return res", "task_id": "158_e6a0b9e4-f104-4910-9744-f22608060fb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array a multiple of y by either adding or subtracting k.", "code": "def min_ops_to_make_all_elements_multiple_of_y(arr: list[int], y: int, k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if arr[i] % y != 0:\n            if k % y != 0:\n                return -1\n            else:\n                res += 1\n    return res", "task_id": "158_ab8c00ec-002d-4175-882c-f360235087ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array a power of two by either adding or subtracting k.", "code": "def is_power_of_two(n):\n    return (n & (n - 1)) == 0 and n != 0\n\ndef min_ops_to_make_all_elements_power_of_two(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if not is_power_of_two(arr[i]):\n            return -1\n    return res", "task_id": "158_7705c861-7849-4230-a24f-a878bcf223b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of operations required to make all elements in the array a Fibonacci number by either adding or subtracting k.", "code": "def is_fibonacci(n):\n    x1 = 5 * n * n + 4\n    x2 = 5 * n * n - 4\n    return int(x1**0.5)**2 == x1 or int(x2**0.5)**2 == x2\n\ndef min_ops_to_make_all_elements_fibonacci(arr: list[int], k: int) -> int:\n    res = 0\n    for i in range(len(arr)):\n        if not is_fibonacci(arr[i]):\n            return -1\n    return res", "task_id": "158_fac663eb-2265-438e-b452-d4e25f1fba0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax - by = n.", "code": "def find_xy(a, b, n):\n    i = 0\n    while i * a <= n:\n        if (n - (i * a)) % b == 0:\n            return (i, int((n - (i * a)) / b))\n        i += 1\n    return ('No solution',)", "task_id": "160_ca1d21ab-10bb-4de0-9066-08d0b7e2fdfe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find non-negative x and y that satisfies ax + by = n.", "code": "def find_xy_non_negative(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            return (x, y)\n    return ('No solution',)", "task_id": "160_0db0c912-3148-42a2-8403-2e997f03ca56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find positive x and y that satisfies ax + by = n.", "code": "def find_xy_positive(a, b, n):\n    for x in range(1, n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y > 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_d75e3b44-e6a0-4dfc-9c53-deabff9e4b7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, with the constraint that x and y must be less than or equal to a given limit.", "code": "def find_xy_within_limits(a, b, n, limit):\n    for x in range(limit + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if y <= limit:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_83aa9819-1422-4991-ad22-42b0b69bc8c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is minimized.", "code": "def find_xy_with_min_sum(a, b, n):\n    min_sum = float('inf')\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x + y < min_sum:\n                min_sum = x + y\n                result = (x, y)\n    return result", "task_id": "160_f8a49dbb-c37a-48bc-826c-3dab3c2a92b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is maximized.", "code": "def find_xy_with_max_sum(a, b, n):\n    max_sum = -1\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x + y > max_sum:\n                max_sum = x + y\n                result = (x, y)\n    return result", "task_id": "160_d19c4982-c330-42d6-b47e-a3ed0beaaebd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the product x * y is minimized.", "code": "def find_xy_with_min_product(a, b, n):\n    min_product = float('inf')\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x * y < min_product:\n                min_product = x * y\n                result = (x, y)\n    return result", "task_id": "160_d84a0b12-13f9-4a69-b633-5886d54bb7fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the product x * y is maximized.", "code": "def find_xy_with_max_product(a, b, n):\n    max_product = -1\n    result = ('No solution',)\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if x * y > max_product:\n                max_product = x * y\n                result = (x, y)\n    return result", "task_id": "160_a5b4ed01-8b59-4059-84e8-396ae2a1b9d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is even.", "code": "def find_xy_with_even_sum(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if (x + y) % 2 == 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_4818c16e-736a-4afd-8a45-050b1d4f2498", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x and y that satisfies ax + by = n, such that the sum x + y is odd.", "code": "def find_xy_with_odd_sum(a, b, n):\n    for x in range(n // a + 1):\n        if (n - a * x) % b == 0:\n            y = (n - a * x) // b\n            if (x + y) % 2 != 0:\n                return (x, y)\n    return ('No solution',)", "task_id": "160_a033b5e7-9fd4-4480-88d8-c4caf45c7dc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a regular polygon.", "code": "def perimeter_polygon(sides, length):\n  return sides * length", "task_id": "163_ca5e08d1-1605-40c2-bc86-f1e864283aa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  return 0.5 * base * height", "task_id": "163_c6eb6f08-f2c4-414c-af38-2a5ef0a62b2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the circumference of a circle given its radius.", "code": "from math import pi\n\ndef circumference_circle(radius):\n  return 2 * pi * radius", "task_id": "163_61bc7661-31fd-4784-8c22-21f3337094e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a rectangle given its length and width.", "code": "def area_rectangle(length, width):\n  return length * width", "task_id": "163_6bf59ea8-1482-49d5-b468-bf5977401960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cube given the length of one side.", "code": "def volume_cube(side):\n  return side ** 3", "task_id": "163_ba8af888-a734-4883-8e33-fb287fdd0df8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle given its radius.", "code": "from math import pi\n\ndef area_circle(radius):\n  return pi * (radius ** 2)", "task_id": "163_fa7a0171-5b83-41a7-ad9d-24db06935008", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cylinder given its radius and height.", "code": "from math import pi\n\ndef volume_cylinder(radius, height):\n  return pi * (radius ** 2) * height", "task_id": "163_72caf253-8760-4966-ae94-246a7bad4d84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a sphere given its radius.", "code": "from math import pi\n\ndef surface_area_sphere(radius):\n  return 4 * pi * (radius ** 2)", "task_id": "163_1466f888-77f0-49cb-87cb-029bc16603b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cone given its radius and height.", "code": "from math import pi\n\ndef volume_cone(radius, height):\n  return (1/3) * pi * (radius ** 2) * height", "task_id": "163_f1c7e795-b3bd-4456-8da9-9e3cfd2fecee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base, height):\n  return base * height", "task_id": "163_d9abcbd1-378a-46f2-8441-bd4f8c38bb11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the even positive integers of n+(n-2)+(n-4)... (until n-x <= 0).", "code": "def sum_even_series(n):\n  if n < 2:\n    return 0\n  elif n % 2 != 0:\n    return sum_even_series(n - 1)\n  else:\n    return n + sum_even_series(n - 2)", "task_id": "162_8b72717b-88d7-451b-9939-91a5e940d9a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the odd positive integers of n+(n-2)+(n-4)... (until n-x <= 0).", "code": "def sum_odd_series(n):\n  if n < 1:\n    return 0\n  elif n % 2 == 0:\n    return sum_odd_series(n - 1)\n  else:\n    return n + sum_odd_series(n - 2)", "task_id": "162_ffa60923-5b34-4f51-9b2a-b6fbf09cbce3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the multiples of 3 of n+(n-3)+(n-6)... (until n-x <= 0).", "code": "def sum_multiples_of_three(n):\n  if n < 3:\n    return 0\n  elif n % 3 != 0:\n    return sum_multiples_of_three(n - 1)\n  else:\n    return n + sum_multiples_of_three(n - 3)", "task_id": "162_b14effc3-2b0a-4f03-93d1-96daf9b4827c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def sum_fibonacci(n):\n  def fibonacci(num):\n    if num <= 0:\n      return 0\n    elif num == 1:\n      return 1\n    else:\n      return fibonacci(num - 1) + fibonacci(num - 2)\n  return sum(fibonacci(i) for i in range(n))", "task_id": "162_cf8abedc-cf59-4d37-8020-a59b0c1d660a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n positive integers.", "code": "def sum_squares(n):\n  return sum(i * i for i in range(1, n + 1))", "task_id": "162_350629dd-2838-4168-886a-8d4eb500d2e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the first n positive integers.", "code": "def sum_cubes(n):\n  return sum(i * i * i for i in range(1, n + 1))", "task_id": "162_7c42bb29-fc4b-4d05-9724-c0ea7bfec878", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of an arithmetic series with a common difference d.", "code": "def sum_arithmetic_series(n, d):\n  return n * (2 + (n - 1) * d) // 2", "task_id": "162_e707f2c8-dfed-4474-ba0a-58c13d7c9052", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of a geometric series with a common ratio r.", "code": "def sum_geometric_series(n, r):\n  if r == 1:\n    return n\n  else:\n    return (1 - r ** n) // (1 - r)", "task_id": "162_c30e83ec-c73e-46c3-a270-1696e1e67314", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n positive integers.", "code": "def sum_factorials(n):\n  def factorial(num):\n    if num == 0:\n      return 1\n    else:\n      return num * factorial(num - 1)\n  return sum(factorial(i) for i in range(1, n + 1))", "task_id": "162_ff193df4-6300-4201-bce4-fc9ce17c3fc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n powers of 2.", "code": "def sum_powers_of_two(n):\n  return sum(2 ** i for i in range(n))", "task_id": "162_27ef4dfc-2184-4af7-ad4a-4321660ad2f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a perfect square.", "code": "import math\ndef isPerfectSquare(n: int) -> bool:\n    root = math.isqrt(n)\n    return root * root == n", "task_id": "164_9fb1827f-8d93-4c95-96a3-75eb9446732e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a prime number.", "code": "def isPrime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "164_5a794ef7-cbff-47d9-b767-c2c2ce251fe7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "164_c9282f2f-6dc2-40da-b1aa-08d613fd62f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n\ndef lcm(a: int, b: int) -> int:\n    return abs(a * b) // gcd(a, b)", "task_id": "164_fef5521e-7edf-45e5-9e7d-3600053226a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sumOfDigits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "164_9a9c4ba6-0a0d-47ad-ba8d-227fb26d9df4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverseString(s: str) -> str:\n    return s[::-1]", "task_id": "164_9894e2f9-d5aa-4349-a35b-eddcddef3a37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome.", "code": "def isPalindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "164_169421f0-e188-4b71-ba37-a4f5a2aa8222", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "164_a32f75a6-1020-45fb-a85e-da82a69d95f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "164_26cf347f-10c0-4c05-bc18-23be358fb3db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams.", "code": "def isAnagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "164_b6268209-edc8-4ce2-a9a3-2908e5cbf0f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count vowels at the same position in a given string (lowercase characters) as in the English alphabet.", "code": "def count_vowels_at_position(s):\n    count_vowels = 0\n    vowels = 'aeiou'\n    for i in range(len(s)):\n        if s[i] in vowels and i == ord(s[i]) - ord('a'):\n            count_vowels += 1\n    return count_vowels", "task_id": "165_34104a6d-a152-4640-8a6b-68b7cdc1f284", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count digits at even positions in a given string.", "code": "def count_even_position_digits(s):\n    count_digits = 0\n    for i in range(len(s)):\n        if s[i].isdigit() and i % 2 == 0:\n            count_digits += 1\n    return count_digits", "task_id": "165_955ae194-8e9b-45e1-a949-fc6fa607f25d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count uppercase characters at the same position in a given string as in the English alphabet.", "code": "def count_uppercase_at_position(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if s[i].isupper() and i == ord(s[i]) - ord('A'):\n            count_chars += 1\n    return count_chars", "task_id": "165_f47ed1fa-03db-45a4-bf67-42bbe0f2a6eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count consonants at the same position in a given string (lowercase characters) as in the English alphabet.", "code": "def count_consonants_at_position(s):\n    count_consonants = 0\n    consonants = 'bcdfghjklmnpqrstvwxyz'\n    for i in range(len(s)):\n        if s[i] in consonants and i == ord(s[i]) - ord('a'):\n            count_consonants += 1\n    return count_consonants", "task_id": "165_e8e21c34-b81b-4f95-8368-b35f071e4a5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count digits at the same position in a given string as their value.", "code": "def count_digits_at_position(s):\n    count_digits = 0\n    for i in range(len(s)):\n        if s[i].isdigit() and i == int(s[i]):\n            count_digits += 1\n    return count_digits", "task_id": "165_affebafc-c9bb-432f-a6f3-e32835e69654", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count special characters at the same position in a given string as in the ASCII table.", "code": "def count_special_chars_at_position(s):\n    count_special = 0\n    for i in range(len(s)):\n        if not s[i].isalnum() and i == ord(s[i]):\n            count_special += 1\n    return count_special", "task_id": "165_5f6ebcf8-ea61-4e43-a96e-7fd480de08b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count characters at the same position in a given string where the position is even for lowercase and odd for uppercase.", "code": "def count_alternating_case_at_position(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if (i % 2 == 0 and s[i].islower()) or (i % 2 == 1 and s[i].isupper()):\n            count_chars += 1\n    return count_chars", "task_id": "165_dfe397d5-9de8-42f7-bf47-11079db3f164", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count characters at prime positions in a given string.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_position_chars(s):\n    count_chars = 0\n    for i in range(len(s)):\n        if is_prime(i):\n            count_chars += 1\n    return count_chars", "task_id": "165_799ca089-f3a3-4a3c-a331-1bdaeb2d3f40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count characters in a given string that form a palindrome when read from the start to that position.", "code": "def count_palindrome_chars(s):\n    count_palindromes = 0\n    for i in range(len(s)):\n        if s[:i+1] == s[:i+1][::-1]:\n            count_palindromes += 1\n    return count_palindromes", "task_id": "165_336ff8b8-e5f3-4fb5-b1f4-a5bdbea6a01d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count characters at Fibonacci sequence positions in a given string.", "code": "def count_fibonacci_position_chars(s):\n    count_chars = 0\n    a, b = 0, 1\n    while a < len(s):\n        if a < len(s):\n            count_chars += 1\n        a, b = b, a + b\n    return count_chars", "task_id": "165_e462c2eb-f047-4d6c-aa7b-090e0965809b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with xor as an odd number.", "code": "def count_odd_pairs(arr):\n    oddPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                oddPair += 1\n    return oddPair", "task_id": "166_26fe24d8-e620-47a9-adbf-b71fe44abaae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an even number.", "code": "def count_even_sum_pairs(arr):\n    evenSumPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 == 0:\n                evenSumPair += 1\n    return evenSumPair", "task_id": "166_5a55191e-9e8c-4007-8635-3e5c323fa56a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an odd number.", "code": "def count_odd_sum_pairs(arr):\n    oddSumPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 != 0:\n                oddSumPair += 1\n    return oddSumPair", "task_id": "166_4127f0ab-8406-438a-8c4d-4de1f06f8620", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is divisible by a given number k.", "code": "def count_divisible_pairs(arr, k):\n    divisiblePair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % k == 0:\n                divisiblePair += 1\n    return divisiblePair", "task_id": "166_5da38b54-c64c-47d2-9d77-3380e838c4bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is greater than a given number x.", "code": "def count_greater_pairs(arr, x):\n    greaterPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) > x:\n                greaterPair += 1\n    return greaterPair", "task_id": "166_9c94d3b3-ca79-4e52-b828-cff2a9f61aaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is smaller than a given number x.", "code": "def count_smaller_pairs(arr, x):\n    smallerPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) < x:\n                smallerPair += 1\n    return smallerPair", "task_id": "166_a28d8060-95d2-41e7-bdf1-48cce9866ab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose sum is equal to a given number x.", "code": "def count_equal_pairs(arr, x):\n    equalPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) == x:\n                equalPair += 1\n    return equalPair", "task_id": "166_2f62e8e9-7df9-4242-8854-f8b300b30501", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose product is an even number.", "code": "def count_product_even_pairs(arr):\n    evenProductPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) % 2 == 0:\n                evenProductPair += 1\n    return evenProductPair", "task_id": "166_f9e338af-2baa-4f98-818a-504f06eebc1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose product is an odd number.", "code": "def count_product_odd_pairs(arr):\n    oddProductPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) % 2 != 0:\n                oddProductPair += 1\n    return oddProductPair", "task_id": "166_a811605a-23ca-477a-af85-b804f2c7f55c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs whose xor is greater than a given number x.", "code": "def count_xor_greater_pairs(arr, x):\n    xorGreaterPair = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] ^ arr[j]) > x:\n                xorGreaterPair += 1\n    return xorGreaterPair", "task_id": "166_6cf1fa62-4e98-4dac-82a4-647fbb00fc23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 3 greater than or equal to n.", "code": "def smallest_power_of_3(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 3\n    return power", "task_id": "167_5d748ba7-6add-44a3-bf3d-febe65ee939a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 5 greater than or equal to n.", "code": "def smallest_power_of_5(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 5\n    return power", "task_id": "167_d9e787cc-f2a2-4dcb-8cf7-9004a5e68e39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 10 greater than or equal to n.", "code": "def smallest_power_of_10(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 10\n    return power", "task_id": "167_1948a8e7-6c3a-4da3-95d1-85e17ae54f01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 2 minus 1 greater than or equal to n.", "code": "def smallest_power_of_2_minus_1(n: int) -> int:\n    power = 1\n    while power - 1 < n:\n        power *= 2\n    return power - 1", "task_id": "167_2a719c0c-96b0-4f20-b4b1-63a20185680d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 3 plus 1 greater than or equal to n.", "code": "def smallest_power_of_3_plus_1(n: int) -> int:\n    power = 1\n    while power + 1 < n:\n        power *= 3\n    return power + 1", "task_id": "167_18b67943-52f9-45e3-843d-168e03001bca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 4 greater than or equal to n.", "code": "def smallest_power_of_4(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 4\n    return power", "task_id": "167_4ff856ed-fef8-444c-aeeb-db344d17063f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 6 greater than or equal to n.", "code": "def smallest_power_of_6(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 6\n    return power", "task_id": "167_19ee3bc8-c622-4c43-9cc2-162d307b60cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 7 greater than or equal to n.", "code": "def smallest_power_of_7(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 7\n    return power", "task_id": "167_09166e36-674a-46fa-9253-ed0b5912cb82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 8 greater than or equal to n.", "code": "def smallest_power_of_8(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 8\n    return power", "task_id": "167_a075045d-0a8c-4002-abdf-2c53aa2879e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest power of 9 greater than or equal to n.", "code": "def smallest_power_of_9(n: int) -> int:\n    power = 1\n    while power < n:\n        power *= 9\n    return power", "task_id": "167_8dfec223-08c5-4859-922b-d252e07f6acb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given array.", "code": "def count_even_numbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count", "task_id": "168_54cc837a-5cfb-4011-a207-7b25cd724ac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "168_feb82eee-0467-4a17-bc47-e60fdc602c3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all numbers in a given array.", "code": "def sum_of_squares(arr):\n    total = 0\n    for num in arr:\n        total += num ** 2\n    return total", "task_id": "168_71a499c0-8ddf-417f-bc7a-5ec76f4de1c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a character in a given string.", "code": "def count_occurrences(s, ch):\n    count = 0\n    for char in s:\n        if char == ch:\n            count += 1\n    return count", "task_id": "168_f92d9955-72e8-4b10-89e1-7d3973a2dbf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum number in a given array.", "code": "def find_max(arr):\n    if not arr:\n        return None\n    max_num = arr[0]\n    for num in arr:\n        if num > max_num:\n            max_num = num\n    return max_num", "task_id": "168_ff2f2c36-cfdd-45ed-a895-36410ce940b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "168_3ba19c04-5ad1-473c-b364-2585ec57561c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s):\n    return len(s.split())", "task_id": "168_fd968ba6-8cb8-4e03-9387-6c309eccd037", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "168_b12604a6-24ea-4343-b457-ba6d16b26c42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "168_de22b6c3-f5b0-4510-8ac8-504debaa2807", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a given array.", "code": "def count_positives(arr):\n    count = 0\n    for num in arr:\n        if num > 0:\n            count += 1\n    return count", "task_id": "168_2cc83df7-1c05-4807-a50a-baab34c38713", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Fibonacci number.", "code": "def fibonacci(n):\n\tif n <= 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\ta, b = 0, 1\n\tfor _ in range(2, n+1):\n\t\ta, b = b, a + b\n\treturn b", "task_id": "169_f7c24756-052f-40a4-ae7d-ac2eeb2ac703", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Tribonacci number.", "code": "def tribonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\ta, b, c = 0, 1, 1\n\tfor _ in range(3, n+1):\n\t\ta, b, c = b, c, a + b + c\n\treturn c", "task_id": "169_0f64808e-5d44-4820-9fb1-2a03664e3320", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Lucas number.", "code": "def lucas(n):\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\ta, b = 2, 1\n\tfor _ in range(2, n+1):\n\t\ta, b = b, a + b\n\treturn b", "task_id": "169_c8d5fcb6-01b6-42b4-8550-99dd99ee13a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a number n.", "code": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\tresult = 1\n\tfor i in range(1, n+1):\n\t\tresult *= i\n\treturn result", "task_id": "169_6fde2f3e-efad-4777-a10f-ee0a78f1632e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n\treturn sum(i*i for i in range(1, n+1))", "task_id": "169_0e56644c-ccd4-4435-9e33-0f79f36476b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n\treturn sum(i**3 for i in range(1, n+1))", "task_id": "169_5954006d-58a7-4fd3-a119-85c17d0b2166", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number n is prime.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True", "task_id": "169_f976f96e-fdfa-425f-bac7-1078b2bf3bf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n\twhile b:\n\t\ta, b = b, a % b\n\treturn a", "task_id": "169_4f0f7656-0e75-4de9-a0b6-7d460b47ea08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a, b):\n\tdef gcd(a, b):\n\t\twhile b:\n\t\t\ta, b = b, a % b\n\t\treturn a\n\treturn abs(a*b) // gcd(a, b)", "task_id": "169_70eb92a4-e9b1-416b-bbc8-cb0429627d5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the Collatz sequence starting from a number n.", "code": "def collatz_sequence(n):\n\tsequence = []\n\twhile n != 1:\n\t\tsequence.append(n)\n\t\tif n % 2 == 0:\n\t\t\tn = n // 2\n\t\telse:\n\t\t\tn = 3 * n + 1\n\tsequence.append(1)\n\treturn sequence", "task_id": "169_2315113c-0c94-4382-a5e7-470256a1a7e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "171_f3841d70-df3a-4cd0-9d2b-15c619695f50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circumference_circle(radius: float) -> float:\n    return 2 * math.pi * radius", "task_id": "171_e16d9967-0221-4c1a-9741-ccaf5d18c1c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square given its side length.", "code": "def area_square(side: float) -> float:\n    return side * side", "task_id": "171_e4bcd30d-f6eb-4ea7-ad14-994020d0ec2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube given its side length.", "code": "def volume_cube(side: float) -> float:\n    return side ** 3", "task_id": "171_cfe3abf1-ea01-4845-b3f3-f579e40ee475", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle given its length and width.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "171_ae237798-18ce-4443-b1c3-ec8e3da9d2e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef area_circle(radius: float) -> float:\n    return math.pi * radius ** 2", "task_id": "171_9f7a6c3a-6067-4b36-9c32-836927b72a6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "import math\ndef volume_sphere(radius: float) -> float:\n    return (4/3) * math.pi * radius ** 3", "task_id": "171_9c3ff05f-f7cf-4fea-ad03-b41adaf7e438", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given the lengths of its three sides.", "code": "def perimeter_triangle(a: float, b: float, c: float) -> float:\n    return a + b + c", "task_id": "171_90c052e2-61ee-45dd-9eb2-ddca4c9edb2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base: float, height: float) -> float:\n    return base * height", "task_id": "171_00c8c654-b2b9-4d10-a463-e77e098df03d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube given its side length.", "code": "def surface_area_cube(side: float) -> float:\n    return 6 * side ** 2", "task_id": "171_6eac4894-ae8d-4015-bc4f-1de038628be2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the numbers in a list between the indices of a specified range.", "code": "def product_range_list(list1, m, n):\n    product_range = 1\n    for i in range(m, n+1, 1):\n        product_range *= list1[i]\n    return product_range", "task_id": "170_3467c732-c12b-4b50-8ce5-daff34e03cc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers at even indices in a list.", "code": "def sum_even_indices(list1):\n    sum_even = 0\n    for i in range(0, len(list1), 2):\n        sum_even += list1[i]\n    return sum_even", "task_id": "170_81169a88-b9f1-4078-9a84-980ec016578b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers at odd indices in a list.", "code": "def sum_odd_indices(list1):\n    sum_odd = 0\n    for i in range(1, len(list1), 2):\n        sum_odd += list1[i]\n    return sum_odd", "task_id": "170_ad3d58ab-5b55-4268-b288-4eb3031a7b5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers in a list excluding the indices of a specified range.", "code": "def sum_list_excluding_range(list1, m, n):\n    sum_excluding = 0\n    for i in range(len(list1)):\n        if i < m or i > n:\n            sum_excluding += list1[i]\n    return sum_excluding", "task_id": "170_43e44669-7c6e-44c7-8a7d-c5da777f3189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of the numbers in a list.", "code": "def sum_of_squares(list1):\n    sum_squares = 0\n    for num in list1:\n        sum_squares += num ** 2\n    return sum_squares", "task_id": "170_dcceb58a-8258-4558-8987-e105eb84d1c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of the numbers in a list.", "code": "def sum_of_cubes(list1):\n    sum_cubes = 0\n    for num in list1:\n        sum_cubes += num ** 3\n    return sum_cubes", "task_id": "170_ed65f78c-9387-4f7e-bcad-268796df1d9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the absolute values of the numbers in a list.", "code": "def sum_of_absolute_values(list1):\n    sum_absolute = 0\n    for num in list1:\n        sum_absolute += abs(num)\n    return sum_absolute", "task_id": "170_91af8646-3466-439d-842f-ba640431f33a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the positive numbers in a list.", "code": "def sum_of_positive_numbers(list1):\n    sum_positive = 0\n    for num in list1:\n        if num > 0:\n            sum_positive += num\n    return sum_positive", "task_id": "170_6befd08f-c033-47c2-b5d1-b1bb2136a28d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the negative numbers in a list.", "code": "def sum_of_negative_numbers(list1):\n    sum_negative = 0\n    for num in list1:\n        if num < 0:\n            sum_negative += num\n    return sum_negative", "task_id": "170_cce4f9c8-8f41-4a4a-af5b-791f75428b58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the prime numbers in a list.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(list1):\n    sum_primes = 0\n    for num in list1:\n        if is_prime(num):\n            sum_primes += num\n    return sum_primes", "task_id": "170_46b131ca-f23e-4559-82f3-2d53d97325a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'abc' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'abc':\n      count += 1\n  return count", "task_id": "172_65a85040-7c3d-42aa-b007-4cc099cb4bef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'xyz' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'xyz':\n      count += 1\n  return count", "task_id": "172_a24a4d7a-bb49-4e5d-9d6e-b2074857cb25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring '123' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == '123':\n      count += 1\n  return count", "task_id": "172_23980e8b-0bcc-4183-bc86-1cf6ecd9b7e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'cat' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'cat':\n      count += 1\n  return count", "task_id": "172_6ce91422-eb58-4372-a610-891be2a536ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'dog' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 2):\n    if s[i:i+3] == 'dog':\n      count += 1\n  return count", "task_id": "172_6f383bce-1c5d-4f30-87fb-70483f333274", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'hello' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 4):\n    if s[i:i+5] == 'hello':\n      count += 1\n  return count", "task_id": "172_9b26f020-4ccb-4d95-885f-aada43644c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'world' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 4):\n    if s[i:i+5] == 'world':\n      count += 1\n  return count", "task_id": "172_45cff7b3-9821-446b-bbef-8ee2427fe921", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'python' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 5):\n    if s[i:i+6] == 'python':\n      count += 1\n  return count", "task_id": "172_215d4375-6ba0-46c7-8098-99da0f1381bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'java' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'java':\n      count += 1\n  return count", "task_id": "172_3c1328af-11b9-4176-bbdd-f367c3f3f3f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrence of the substring 'code' in the given string.", "code": "def count_occurrence(s):\n  count = 0\n  for i in range(len(s) - 3):\n    if s[i:i+4] == 'code':\n      count += 1\n  return count", "task_id": "172_1a6285cc-0fad-4844-b5ba-bc97917363ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a string.", "code": "import re\ndef remove_digits(text): \n pattern = re.compile('[0-9]+')\n return (pattern.sub('', text))", "task_id": "173_dfd788bd-3cd6-4bc3-8262-619cbd0cea54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "import re\ndef remove_vowels(text): \n pattern = re.compile('[aeiouAEIOU]+')\n return (pattern.sub('', text))", "task_id": "173_fd64d16a-6406-4592-8c0c-6655c32ff351", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a string.", "code": "import re\ndef remove_consonants(text): \n pattern = re.compile('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+')\n return (pattern.sub('', text))", "task_id": "173_5a198a36-0965-42d6-a621-758af8fe28b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase letters from a string.", "code": "import re\ndef remove_uppercase(text): \n pattern = re.compile('[A-Z]+')\n return (pattern.sub('', text))", "task_id": "173_593f0342-950f-4f07-9c0f-c64bb2c14fea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase letters from a string.", "code": "import re\ndef remove_lowercase(text): \n pattern = re.compile('[a-z]+')\n return (pattern.sub('', text))", "task_id": "173_eab14839-f0fb-447b-b5b1-2dd1d47dcbfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a string.", "code": "import re\ndef remove_whitespace(text): \n pattern = re.compile('\\s+')\n return (pattern.sub('', text))", "task_id": "173_4fa972a3-993c-4950-a336-f3f89dfd2ed5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation characters from a string.", "code": "import re\ndef remove_punctuation(text): \n pattern = re.compile('[\\p{Punct}]+')\n return (pattern.sub('', text))", "task_id": "173_1501a071-f246-44b4-ad19-9b7e19e5f21b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-ASCII characters from a string.", "code": "import re\ndef remove_non_ascii(text): \n pattern = re.compile('[^\\x00-\\x7F]+')\n return (pattern.sub('', text))", "task_id": "173_b08c5fef-b2f0-4918-a66a-5b3c049edb3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all hexadecimal characters from a string.", "code": "import re\ndef remove_hexadecimal(text): \n pattern = re.compile('[0-9a-fA-F]+')\n return (pattern.sub('', text))", "task_id": "173_05aed132-e2ac-4f3a-82b7-319829f51521", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphanumeric characters from a string.", "code": "import re\ndef remove_non_alphanumeric(text): \n pattern = re.compile('[^a-zA-Z0-9]+')\n return (pattern.sub('', text))", "task_id": "173_d1da348a-459f-42cd-9ab0-9157bbb4ce5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length, width):\n  area = length * width\n  return area", "task_id": "176_275a14f2-07a5-430e-8bc0-335e3354a3b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\ndef circumference_circle(radius):\n  circumference = 2 * math.pi * radius\n  return circumference", "task_id": "176_c1852974-f314-4b27-9570-c27c0087730a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(length, width, height):\n  volume = length * width * height\n  return volume", "task_id": "176_f1970e0e-19c6-4179-bade-0af1f419c926", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  area = 0.5 * base * height\n  return area", "task_id": "176_e9391be5-57a7-4753-8823-500d49397455", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length, width):\n  perimeter = 2 * (length + width)\n  return perimeter", "task_id": "176_adc59351-7067-4631-9b25-864a23dd3f4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube given the length of its side.", "code": "def surface_area_cube(side):\n  surface_area = 6 * (side ** 2)\n  return surface_area", "task_id": "176_4ee3d7e7-5fdd-4aa7-ab4a-96c9c2d6d034", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the diagonal of a rectangle.", "code": "import math\ndef diagonal_rectangle(length, width):\n  diagonal = math.sqrt(length**2 + width**2)\n  return diagonal", "task_id": "176_7cd91120-fee7-4093-b053-807eefc1ab80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef area_circle(radius):\n  area = math.pi * (radius ** 2)\n  return area", "task_id": "176_276f9f4d-d694-4e7e-807b-44c61c0220f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "import math\ndef volume_sphere(radius):\n  volume = (4/3) * math.pi * (radius ** 3)\n  return volume", "task_id": "176_e38fac45-e71e-4f83-bee7-f718096758cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square given the length of its side.", "code": "def perimeter_square(side):\n  perimeter = 4 * side\n  return perimeter", "task_id": "176_5b9af1c8-a105-40af-afd2-6abedee2afee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, initializing each list with a default value.", "code": "def group_keyvalue_with_default(l, default):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = [default]\n        result[k].append(v)\n    return result", "task_id": "174_20c22cc5-343f-423d-882f-c4c0271d38ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of sorted lists.", "code": "def group_keyvalue_sorted(l):\n    result = {}\n    for k, v in l:\n        result.setdefault(k, []).append(v)\n    for k in result:\n        result[k].sort()\n    return result", "task_id": "174_85d41740-b95b-4bc5-b57d-73d18fc43657", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, ensuring each list contains only unique values.", "code": "def group_keyvalue_unique(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = []\n        if v not in result[k]:\n            result[k].append(v)\n    return result", "task_id": "174_c0b13741-914e-4c5e-a334-430597b87b4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of counts, where each key maps to the number of times it appears.", "code": "def group_keyvalue_count(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n        result[k] += 1\n    return result", "task_id": "174_0dfa8ce7-79b8-4e0d-85b9-fa8a39b88f51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of sums, where each key maps to the sum of its values.", "code": "def group_keyvalue_sum(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n        result[k] += v\n    return result", "task_id": "174_1af9199d-176e-44c7-bddf-f10719dc6644", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the maximum value among its values.", "code": "def group_keyvalue_max(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = v\n        else:\n            result[k] = max(result[k], v)\n    return result", "task_id": "174_19dedfc2-ae68-4ffd-b94b-f3ff1cb5bd28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the minimum value among its values.", "code": "def group_keyvalue_min(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = v\n        else:\n            result[k] = min(result[k], v)\n    return result", "task_id": "174_9aee48a8-95bf-477c-a1c1-6b501de17464", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to the average of its values.", "code": "def group_keyvalue_avg(l):\n    result = {}\n    count = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = 0\n            count[k] = 0\n        result[k] += v\n        count[k] += 1\n    for k in result:\n        result[k] /= count[k]\n    return result", "task_id": "174_872383b0-ac2b-411e-b5ce-b9a1dff6198a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary, where each key maps to a concatenated string of its values.", "code": "def group_keyvalue_concat(l):\n    result = {}\n    for k, v in l:\n        if k not in result:\n            result[k] = ''\n        result[k] += str(v)\n    return result", "task_id": "174_8b8cef82-a2c1-4a60-b8fb-c360c3b67a30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group a sequence of key-value pairs into a dictionary of lists, but the lists should be in reverse order of their appearance.", "code": "def group_keyvalue_reverse(l):\n    result = {}\n    for k, v in l[::-1]:\n        result.setdefault(k, []).append(v)\n    return result", "task_id": "174_0be911a6-3a80-4acc-ac5a-efb7256ee0b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of HTML tags.", "code": "def is_valid_html_tags(html: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(html):\n        if html[i] == '<':\n            j = i + 1\n            while j < len(html) and html[j] != '>':\n                j += 1\n            if j == len(html):\n                return False\n            tag = html[i+1:j]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_2442c29d-fa7a-4968-84c9-a6a248e11f0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing only square brackets.", "code": "def is_valid_brackets(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if not stack or stack.pop() != '[':\n                return False\n    return not stack", "task_id": "175_c5cec0c2-cd5f-426d-a53d-384dc94be430", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a mathematical expression containing parentheses.", "code": "def is_valid_math_expression(expr: str) -> bool:\n    stack = []\n    for char in expr:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_61d49fcd-ebe5-4493-bf4c-3268f674e40c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of code blocks delimited by curly braces.", "code": "def is_valid_code_blocks(code: str) -> bool:\n    stack = []\n    for char in code:\n        if char == '{':\n            stack.append(char)\n        elif char == '}':\n            if not stack or stack.pop() != '{':\n                return False\n    return not stack", "task_id": "175_4689ec97-d390-4b1b-9c5d-7da8b23cab27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing only angle brackets.", "code": "def is_valid_angle_brackets(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '<':\n            stack.append(char)\n        elif char == '>':\n            if not stack or stack.pop() != '<':\n                return False\n    return not stack", "task_id": "175_7b9013d4-50ae-4f8b-9db7-237268391166", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of nested parentheses.", "code": "def is_valid_nested_parentheses(s: str) -> bool:\n    stack = []\n    for char in s:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_5fc59af0-844f-41ac-ac35-a400e87f688f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string containing mixed types of brackets (parentheses, square brackets, and curly braces).", "code": "def is_valid_mixed_brackets(s: str) -> bool:\n    stack = []\n    matching_bracket = {')': '(', ']': '[', '}': '{'}\n    for char in s:\n        if char in '([{':\n            stack.append(char)\n        elif char in ')]}':\n            if not stack or stack.pop() != matching_bracket[char]:\n                return False\n    return not stack", "task_id": "175_8ada8bc6-18f4-4123-a13e-4dd105f94b63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of XML tags.", "code": "def is_valid_xml_tags(xml: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(xml):\n        if xml[i] == '<':\n            j = i + 1\n            while j < len(xml) and xml[j] != '>':\n                j += 1\n            if j == len(xml):\n                return False\n            tag = xml[i+1:j]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_48d7c879-0ad8-4d04-9b59-f485d87bcf43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a mathematical expression containing parentheses and operators (+, -, *, /).", "code": "def is_valid_expression_with_operators(expr: str) -> bool:\n    stack = []\n    for char in expr:\n        if char == '(':\n            stack.append(char)\n        elif char == ')':\n            if not stack or stack.pop() != '(':\n                return False\n    return not stack", "task_id": "175_32f6f474-e570-46bc-b82c-b5a1e18db191", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to verify the validity of a string of HTML tags with attributes.", "code": "def is_valid_html_with_attributes(html: str) -> bool:\n    stack = []\n    i = 0\n    while i < len(html):\n        if html[i] == '<':\n            j = i + 1\n            while j < len(html) and html[j] != '>':\n                j += 1\n            if j == len(html):\n                return False\n            tag = html[i+1:j].split()[0]\n            if not tag.startswith('/'):\n                stack.append(tag)\n            else:\n                if not stack or stack.pop() != tag[1:]:\n                    return False\n            i = j\n        i += 1\n    return not stack", "task_id": "175_6234a65f-46c1-4cd0-8526-735306560b84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a substring exists within a given string.", "code": "def find_substring(main_string: str, sub_string: str) -> bool:\n    return sub_string in main_string", "task_id": "178_5ab800be-0d1e-4452-8891-ec73dc234e2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of times a substring appears in a given string.", "code": "def count_occurrences(main_string: str, sub_string: str) -> int:\n    return main_string.count(sub_string)", "task_id": "178_63ccbdf7-5f02-482f-8e79-815b869d1bce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of a substring with another substring in a given string.", "code": "def replace_substring(main_string: str, old_sub: str, new_sub: str) -> str:\n    return main_string.replace(old_sub, new_sub)", "task_id": "178_7f635d09-285b-45b4-877e-aef9441af629", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all starting indices of a substring in a given string.", "code": "def find_all_indices(main_string: str, sub_string: str) -> list:\n    indices = []\n    index = main_string.find(sub_string)\n    while index != -1:\n        indices.append(index)\n        index = main_string.find(sub_string, index + 1)\n    return indices", "task_id": "178_8eda80c3-15bd-486a-9d99-44e80d44f443", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "178_60ceb2b2-286a-42f8-a3b8-b41528f216a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "178_08aacb24-c5bd-42f3-ae45-334fdd0f92b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "178_b8eed843-ca4f-448c-8c06-833a4f2999f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "178_12c7866c-ed85-4188-8f4c-74fd3da4fff1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "178_c267006a-5ebc-44f9-9e6a-af42ead08bef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest", "task_id": "178_85cabc29-f661-41e0-8350-d6c3cfb684fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum lies within the given range.", "code": "def find_pair_with_sum(x, y):\n    if x + 1 <= y:\n        return (x, x + 1)\n    else:\n        return (-1, -1)", "task_id": "177_24250ad4-890d-4de4-bd30-10cb5e5de107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their product lies within the given range.", "code": "def find_pair_with_product(x, y):\n    if x * 2 <= y:\n        return (x, x * 2)\n    else:\n        return (-1, -1)", "task_id": "177_d5e30407-b416-4c64-b5e3-d55d51655d6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their difference lies within the given range.", "code": "def find_pair_with_difference(x, y):\n    if x + 1 <= y:\n        return (x + 1, x)\n    else:\n        return (-1, -1)", "task_id": "177_b6a81947-549f-4fd2-a970-9984e07ad898", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is an even number within the given range.", "code": "def find_pair_with_sum_even(x, y):\n    if x % 2 == 0 and x + 2 <= y:\n        return (x, x + 2)\n    elif x % 2 != 0 and x + 1 <= y:\n        return (x, x + 1)\n    else:\n        return (-1, -1)", "task_id": "177_0cee319d-a060-4fc6-844d-81c513719124", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is an odd number within the given range.", "code": "def find_pair_with_sum_odd(x, y):\n    if x % 2 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif x % 2 != 0 and x + 2 <= y:\n        return (x, x + 2)\n    else:\n        return (-1, -1)", "task_id": "177_d26dc5a5-06b5-48db-a077-5399848a796a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a multiple of three within the given range.", "code": "def find_pair_with_sum_multiple_of_three(x, y):\n    if (x + 1) % 3 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif (x + 2) % 3 == 0 and x + 2 <= y:\n        return (x, x + 2)\n    else:\n        return (-1, -1)", "task_id": "177_30627b6d-87b1-4bff-90d0-3ae625e420d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a multiple of five within the given range.", "code": "def find_pair_with_sum_multiple_of_five(x, y):\n    if (x + 1) % 5 == 0 and x + 1 <= y:\n        return (x, x + 1)\n    elif (x + 4) % 5 == 0 and x + 4 <= y:\n        return (x, x + 4)\n    else:\n        return (-1, -1)", "task_id": "177_4fb5cd75-76ab-45c9-af58-df0843e4f2ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a prime number within the given range.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_pair_with_sum_prime(x, y):\n    for i in range(x, y):\n        if is_prime(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_1bab95de-6ec9-4107-b1cb-3b4326c222f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a perfect square within the given range.", "code": "def is_perfect_square(n):\n    return int(n ** 0.5) ** 2 == n\n\ndef find_pair_with_sum_square(x, y):\n    for i in range(x, y):\n        if is_perfect_square(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_c9154b3a-ce57-4e00-a798-5e79b90d3a73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two distinct numbers such that their sum is a Fibonacci number within the given range.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef find_pair_with_sum_fibonacci(x, y):\n    for i in range(x, y):\n        if is_fibonacci(i + i + 1):\n            return (i, i + 1)\n    return (-1, -1)", "task_id": "177_77480857-3ba9-4fa5-82b5-fe304abda160", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a happy number or not.", "code": "def is_happy_number(x):\n    def get_next(n):\n        total_sum = 0\n        while n > 0:\n            n, digit = divmod(n, 10)\n            total_sum += digit ** 2\n        return total_sum\n    seen = set()\n    while x != 1 and x not in seen:\n        seen.add(x)\n        x = get_next(x)\n    return x == 1", "task_id": "179_22cdcede-21af-46b4-b873-3e2e9975bacf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is an Armstrong number or not.", "code": "def is_armstrong_number(x):\n    num_str = str(x)\n    num_len = len(num_str)\n    total = sum(int(digit) ** num_len for digit in num_str)\n    return total == x", "task_id": "179_b6a3ef69-8d24-4b8d-8248-dd76b67d5542", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a palindrome or not.", "code": "def is_palindrome(x):\n    return str(x) == str(x)[::-1]", "task_id": "179_49580640-a082-469d-840a-a69b626e9db4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Fibonacci number or not.", "code": "def is_fibonacci_number(x):\n    a, b = 0, 1\n    while b < x:\n        a, b = b, a + b\n    return b == x or x == 0", "task_id": "179_e3fa6d06-e6e9-460d-bb35-7b0a5ecb890d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a prime number or not.", "code": "def is_prime(x):\n    if x <= 1:\n        return False\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            return False\n    return True", "task_id": "179_daafc0a1-552b-4f1b-831c-7fbdcbcfacbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a perfect number or not.", "code": "def is_perfect_number(x):\n    if x < 2:\n        return False\n    divisors = [1]\n    for i in range(2, int(x ** 0.5) + 1):\n        if x % i == 0:\n            divisors.extend([i, x // i])\n    return sum(set(divisors)) == x", "task_id": "179_bf9590db-bf13-4c65-9da6-8cdc2a3aaa8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Harshad number or not.", "code": "def is_harshad_number(x):\n    return x % sum(int(digit) for digit in str(x)) == 0", "task_id": "179_be4fc0ee-ce10-4503-9e3f-18e4011a83d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is an automorphic number or not.", "code": "def is_automorphic_number(x):\n    return str(x) == str(x ** 2)[-len(str(x)):]", "task_id": "179_762cd403-d340-42c6-aea3-efc2bb08a071", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a Smith number or not.", "code": "def is_smith_number(x):\n    def prime_factors(n):\n        i = 2\n        factors = []\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.append(i)\n        if n > 1:\n            factors.append(n)\n        return factors\n    if is_prime(x):\n        return False\n    sum_digits = sum(int(digit) for digit in str(x))\n    sum_factors = sum(int(digit) for factor in prime_factors(x) for digit in str(factor))\n    return sum_digits == sum_factors", "task_id": "179_d1f0e07d-7ce2-4c11-a620-33bfb6f8aeb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if the given number is a magic number or not.", "code": "def is_magic_number(x):\n    while x > 9:\n        x = sum(int(digit) for digit in str(x))\n    return x == 1", "task_id": "179_74d6be92-3423-488c-8e91-1874b23c5155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all vowels and consonants in a given string using regex.", "code": "import re\ndef find_vowels_consonants(string):\n  vowels = re.findall(r'[aeiouAEIOU]', string)\n  consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', string)\n  return vowels, consonants", "task_id": "182_262b5a01-6b4f-418d-8931-f138d226be11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words and numbers in a given string using regex.", "code": "import re\ndef find_words_numbers(string):\n  words = re.findall(r'\\b[A-Za-z]+\\b', string)\n  numbers = re.findall(r'\\b[0-9]+\\b', string)\n  return words, numbers", "task_id": "182_5dca5379-3038-4e48-9c64-5c48d74e3b1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all email addresses and URLs in a given string using regex.", "code": "import re\ndef find_emails_urls(string):\n  emails = re.findall(r'[\\w\\.-]+@[\\w\\.-]+', string)\n  urls = re.findall(r'https?://[\\w\\.-]+', string)\n  return emails, urls", "task_id": "182_666bbdc1-043c-4ecf-81bf-c9b3f2945930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all dates (in format YYYY-MM-DD) and times (in format HH:MM) in a given string using regex.", "code": "import re\ndef find_dates_times(string):\n  dates = re.findall(r'\\b\\d{4}-\\d{2}-\\d{2}\\b', string)\n  times = re.findall(r'\\b\\d{2}:\\d{2}\\b', string)\n  return dates, times", "task_id": "182_4c88de24-fcd1-43cb-a1c9-c3d51899f35a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hashtags and mentions in a given string using regex.", "code": "import re\ndef find_hashtags_mentions(string):\n  hashtags = re.findall(r'#\\w+', string)\n  mentions = re.findall(r'@\\w+', string)\n  return hashtags, mentions", "task_id": "182_5bedd26e-2302-485b-b403-5777a5cab9dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hexadecimal color codes (e.g., #FFFFFF) in a given string using regex.", "code": "import re\ndef find_hex_colors(string):\n  hex_colors = re.findall(r'#[0-9a-fA-F]{6}', string)\n  return hex_colors", "task_id": "182_d7c42cb7-1dc2-4b22-ae38-f8b53b5d0f18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all phone numbers (in format XXX-XXX-XXXX) in a given string using regex.", "code": "import re\ndef find_phone_numbers(string):\n  phone_numbers = re.findall(r'\\b\\d{3}-\\d{3}-\\d{4}\\b', string)\n  return phone_numbers", "task_id": "182_e721a09d-6ff4-4fc4-9747-8657d47d03b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all IPv4 addresses in a given string using regex.", "code": "import re\ndef find_ip_addresses(string):\n  ip_addresses = re.findall(r'\\b(?:\\d{1,3}\\.){3}\\d{1,3}\\b', string)\n  return ip_addresses", "task_id": "182_ae96ff2c-6a3c-47e8-b1f0-a1dfcf6b9b6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all credit card numbers (in format XXXX-XXXX-XXXX-XXXX) in a given string using regex.", "code": "import re\ndef find_credit_card_numbers(string):\n  credit_card_numbers = re.findall(r'\\b\\d{4}-\\d{4}-\\d{4}-\\d{4}\\b', string)\n  return credit_card_numbers", "task_id": "182_cd525f8f-6c84-4a3a-8491-8ec023a8c6de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all HTML tags in a given string using regex.", "code": "import re\ndef find_html_tags(string):\n  html_tags = re.findall(r'<[^>]+>', string)\n  return html_tags", "task_id": "182_6c9588b9-b269-4fed-9973-80add74e0bdf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a sum of k in any array.", "code": "def count_pairs_with_sum(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] + arr[j] == k:\n        count += 1\n  return count", "task_id": "183_65b75107-3673-469a-a4ed-5b71cdac795c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a product of k in any array.", "code": "def count_pairs_with_product(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] * arr[j] == k:\n        count += 1\n  return count", "task_id": "183_b37dd62b-a2c4-4208-9a3b-f0370ed41ff9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a quotient of k in any array.", "code": "def count_pairs_with_quotient(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] / arr[j] == k or arr[j] / arr[i] == k:\n        count += 1\n  return count", "task_id": "183_97350eb5-e5d2-40cb-b0e8-c2304399422b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a GCD of k in any array.", "code": "import math\ndef count_pairs_with_gcd(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if math.gcd(arr[i], arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_de757588-d3e3-4051-a3dd-229da2b5caec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having an LCM of k in any array.", "code": "import math\ndef lcm(a, b):\n  return abs(a*b) // math.gcd(a, b)\ndef count_pairs_with_lcm(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if lcm(arr[i], arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_a0addd87-cf88-4f31-90fc-cc6248fcc4fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having an XOR of k in any array.", "code": "def count_pairs_with_xor(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] ^ arr[j] == k:\n        count += 1\n  return count", "task_id": "183_6674681a-0a5d-439c-9ffb-927c8ab8a064", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a modulus of k in any array.", "code": "def count_pairs_with_mod(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if arr[i] % arr[j] == k or arr[j] % arr[i] == k:\n        count += 1\n  return count", "task_id": "183_583282c3-9ab1-4cff-b9a8-4eb0739fc1ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise AND of k in any array.", "code": "def count_pairs_with_bitwise_and(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] & arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_3f6f8cfc-1319-4f95-84c0-7dd7265d4014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise OR of k in any array.", "code": "def count_pairs_with_bitwise_or(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] | arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_6d00adde-44a3-480e-aa4a-7b106ecf415b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count all the distinct pairs having a bitwise XOR of k in any array.", "code": "def count_pairs_with_bitwise_xor(arr, n, k):\n  count = 0\n  for i in range(n):\n    for j in range(i+1, n):\n      if (arr[i] ^ arr[j]) == k:\n        count += 1\n  return count", "task_id": "183_1f7790d6-4ba1-449f-a6ed-51832d623d92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common suffix in the given set of strings.", "code": "def longest_common_suffix(arr):\n    def common_suffix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = n1 - 1, n2 - 1\n        while i >= 0 and j >= 0:\n            if str1[i] != str2[j]:\n                break\n            result = str1[i] + result\n            i -= 1\n            j -= 1\n        return result\n    suffix = arr[0]\n    for i in range(1, len(arr)):\n        suffix = common_suffix_util(suffix, arr[i])\n    return suffix", "task_id": "181_ade6940c-c7dc-4e6a-a0c1-3223978c90ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common substring in the given set of strings.", "code": "def longest_common_substring(arr):\n    def common_substring_util(str1, str2):\n        m, n = len(str1), len(str2)\n        max_len = 0\n        ending_index = m\n        length = [[0] * (n + 1) for _ in range(m + 1)]\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if str1[i - 1] == str2[j - 1]:\n                    length[i][j] = length[i - 1][j - 1] + 1\n                    if length[i][j] > max_len:\n                        max_len = length[i][j]\n                        ending_index = i\n                else:\n                    length[i][j] = 0\n        return str1[ending_index - max_len: ending_index]\n    substring = arr[0]\n    for i in range(1, len(arr)):\n        substring = common_substring_util(substring, arr[i])\n    return substring", "task_id": "181_21eb86dd-d66c-4020-a561-a5d5a7842407", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common prefix in the given set of strings.", "code": "def longest_common_prefix_length(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return len(prefix)", "task_id": "181_63c54f4b-bb53-45fe-8893-1fd24b30edb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, ignoring case.", "code": "def longest_common_prefix_with_case_insensitivity(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i].lower() != str2[j].lower():\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_4d0cbbce-287d-4698-988d-f80ab1b290b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, but the prefix must be at least a given minimum length.", "code": "def longest_common_prefix_with_min_length(arr, min_length):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix if len(prefix) >= min_length else ''", "task_id": "181_2904d0e6-7ebc-4dd9-90d6-3b775435bad3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, but the prefix must be at most a given maximum length.", "code": "def longest_common_prefix_with_max_length(arr, max_length):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix[:max_length]", "task_id": "181_43764d78-33b9-4b89-8f80-355c59e467cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering special characters.", "code": "def longest_common_prefix_with_special_characters(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_a92ce9cd-785d-4942-b135-bdcc24cf0fea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering numbers.", "code": "def longest_common_prefix_with_numbers(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_261b09a1-5d4a-4135-b286-8207c269be39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering whitespace.", "code": "def longest_common_prefix_with_whitespace(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_dde3b077-036a-4fa1-a4ca-be857519caf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix in the given set of strings, considering punctuation.", "code": "def longest_common_prefix_with_punctuation(arr):\n    def common_prefix_util(str1, str2):\n        result = ''\n        n1, n2 = len(str1), len(str2)\n        i, j = 0, 0\n        while i < n1 and j < n2:\n            if str1[i] != str2[j]:\n                break\n            result += str1[i]\n            i += 1\n            j += 1\n        return result\n    prefix = arr[0]\n    for i in range(1, len(arr)):\n        prefix = common_prefix_util(prefix, arr[i])\n    return prefix", "task_id": "181_fe682016-b7aa-4e06-a562-f667aa8281aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are less than a specified number.", "code": "def less_than_specificnum(lst, num):\n    return [x for x in lst if x < num]", "task_id": "184_9b2ed3bb-000a-4e2e-84e7-a9891a9c8385", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are equal to a specified number.", "code": "def equal_to_specificnum(lst, num):\n    return [x for x in lst if x == num]", "task_id": "184_9934d11e-b16a-4cc7-a771-d20ee7dd09a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are not equal to a specified number.", "code": "def not_equal_to_specificnum(lst, num):\n    return [x for x in lst if x != num]", "task_id": "184_0ac254b0-1eb4-4220-98b7-c579bf558064", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are greater than or equal to a specified number.", "code": "def greater_than_or_equal_specificnum(lst, num):\n    return [x for x in lst if x >= num]", "task_id": "184_00e41759-bd61-47c0-9232-e9dcd23a7ac4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are less than or equal to a specified number.", "code": "def less_than_or_equal_specificnum(lst, num):\n    return [x for x in lst if x <= num]", "task_id": "184_21f3566a-cec6-4bda-80eb-1a3c2bfdeaa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are between two specified numbers (inclusive).", "code": "def between_two_numbers(lst, num1, num2):\n    return [x for x in lst if num1 <= x <= num2]", "task_id": "184_bbf89595-f633-4f73-88fb-d9fa8f2c160c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are outside two specified numbers (exclusive).", "code": "def outside_two_numbers(lst, num1, num2):\n    return [x for x in lst if x < num1 or x > num2]", "task_id": "184_df4afcb6-a023-4121-8556-37b283ba7919", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are divisible by a specified number.", "code": "def divisible_by_specificnum(lst, num):\n    return [x for x in lst if x % num == 0]", "task_id": "184_ceefbb95-ebab-473b-8789-bfeb552d51d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the values in a list that are not divisible by a specified number.", "code": "def not_divisible_by_specificnum(lst, num):\n    return [x for x in lst if x % num != 0]", "task_id": "184_7b67eecc-55f4-4933-9f21-8b0661c812ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the even numbers in a list.", "code": "def even_numbers(lst):\n    return [x for x in lst if x % 2 == 0]", "task_id": "184_1ce55b12-54eb-4ff0-bbdc-80d0ec419a57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the midpoint between two points using latitude and longitude.", "code": "from math import radians, degrees, atan2, sin, cos\n\ndef midpoint(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlon = elon - slon\n    Bx = cos(elat) * cos(dlon)\n    By = cos(elat) * sin(dlon)\n    mid_lat = atan2(sin(slat) + sin(elat), ((cos(slat) + Bx)**2 + By**2)**0.5)\n    mid_lon = slon + atan2(By, cos(slat) + Bx)\n    return (degrees(mid_lat), degrees(mid_lon))", "task_id": "180_214ee001-6e1d-4a63-b33a-c35c01996fdf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the initial bearing between two points using latitude and longitude.", "code": "from math import radians, degrees, atan2, sin, cos\n\ndef bearing(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlon = elon - slon\n    x = sin(dlon) * cos(elat)\n    y = cos(slat) * sin(elat) - sin(slat) * cos(elat) * cos(dlon)\n    initial_bearing = atan2(x, y)\n    initial_bearing = degrees(initial_bearing)\n    compass_bearing = (initial_bearing + 360) % 360\n    return compass_bearing", "task_id": "180_e63f57ab-016b-4224-bb88-f867e364ee5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points using the Haversine formula.", "code": "from math import radians, sin, cos, sqrt, atan2\n\ndef haversine_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance", "task_id": "180_c17aa190-2334-446c-b222-1df2a9d06ab8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points using the Vincenty formula.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef vincenty_distance(slat, slon, elat, elon):\n    a = 6378137.0\n    f = 1 / 298.257223563\n    b = 6356752.314245\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    L = elon - slon\n    U1 = atan2((1 - f) * sin(slat), cos(slat))\n    U2 = atan2((1 - f) * sin(elat), cos(elat))\n    sinU1, cosU1 = sin(U1), cos(U1)\n    sinU2, cosU2 = sin(U2), cos(U2)\n    lamb = L\n    for _ in range(1000):\n        sinLambda, cosLambda = sin(lamb), cos(lamb)\n        sinSigma = sqrt((cosU2 * sinLambda) ** 2 + (cosU1 * sinU2 - sinU1 * cosU2 * cosLambda) ** 2)\n        cosSigma = sinU1 * sinU2 + cosU1 * cosU2 * cosLambda\n        sigma = atan2(sinSigma, cosSigma)\n        sinAlpha = cosU1 * cosU2 * sinLambda / sinSigma\n        cos2Alpha = 1 - sinAlpha ** 2\n        cos2SigmaM = cosSigma - 2 * sinU1 * sinU2 / cos2Alpha\n        C = f / 16 * cos2Alpha * (4 + f * (4 - 3 * cos2Alpha))\n        lambPrev = lamb\n        lamb = L + (1 - C) * f * sinAlpha * (sigma + C * sinSigma * (cos2SigmaM + C * cosSigma * (-1 + 2 * cos2SigmaM ** 2)))\n        if abs(lamb - lambPrev) < 1e-12:\n            break\n    u2 = cos2Alpha * (a ** 2 - b ** 2) / (b ** 2)\n    A = 1 + u2 / 16384 * (4096 + u2 * (-768 + u2 * (320 - 175 * u2)))\n    B = u2 / 1024 * (256 + u2 * (-128 + u2 * (74 - 47 * u2)))\n    deltaSigma = B * sinSigma * (cos2SigmaM + B / 4 * (cosSigma * (-1 + 2 * cos2SigmaM ** 2) - B / 6 * cos2SigmaM * (-3 + 4 * sinSigma ** 2) * (-3 + 4 * cos2SigmaM ** 2)))\n    s = b * A * (sigma - deltaSigma)\n    return s / 1000", "task_id": "180_7a76d134-680e-42bd-8d0b-40f19bf56627", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the great-circle distance between two points using latitude and longitude.", "code": "from math import radians, sin, cos, sqrt, atan2\n\ndef great_circle_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = elon - slon\n    a = sin(dlat / 2)**2 + cos(slat) * cos(elat) * sin(dlon / 2)**2\n    c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    distance = R * c\n    return distance", "task_id": "180_1f6513eb-8a56-4820-96cd-7deaab5f615e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the destination point given a starting point, distance, and bearing.", "code": "from math import radians, degrees, sin, cos, atan2\n\ndef destination_point(slat, slon, distance, bearing):\n    R = 6371.0\n    slat, slon, bearing = map(radians, [slat, slon, bearing])\n    lat2 = asin(sin(slat) * cos(distance / R) + cos(slat) * sin(distance / R) * cos(bearing))\n    lon2 = slon + atan2(sin(bearing) * sin(distance / R) * cos(slat), cos(distance / R) - sin(slat) * sin(lat2))\n    return (degrees(lat2), degrees(lon2))", "task_id": "180_3fbfd577-6eaf-4bbf-87e9-08a30f43db19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the cross-track distance between a point and a great-circle path defined by two other points.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef cross_track_distance(slat, slon, elat, elon, dlat, dlon):\n    R = 6371.0\n    slat, slon, elat, elon, dlat, dlon = map(radians, [slat, slon, elat, elon, dlat, dlon])\n    d13 = great_circle_distance(slat, slon, dlat, dlon) / R\n    theta13 = bearing(slat, slon, dlat, dlon)\n    theta12 = bearing(slat, slon, elat, elon)\n    xtd = asin(sin(d13) * sin(theta13 - theta12)) * R\n    return abs(xtd)", "task_id": "180_f69ada49-282e-4fee-ae31-412904cb639e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the along-track distance between a point and a great-circle path defined by two other points.", "code": "from math import radians, sin, cos, atan2, sqrt\n\ndef along_track_distance(slat, slon, elat, elon, dlat, dlon):\n    R = 6371.0\n    slat, slon, elat, elon, dlat, dlon = map(radians, [slat, slon, elat, elon, dlat, dlon])\n    d13 = great_circle_distance(slat, slon, dlat, dlon) / R\n    theta13 = bearing(slat, slon, dlat, dlon)\n    theta12 = bearing(slat, slon, elat, elon)\n    atd = acos(cos(d13) / cos(asin(sin(d13) * sin(theta13 - theta12)))) * R\n    return abs(atd)", "task_id": "180_60a39623-de61-4213-8a63-4f8a8cb64937", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the midpoint along the great-circle path between two points using latitude and longitude.", "code": "from math import radians, degrees, sin, cos, atan2\n\ndef midpoint_along_path(slat, slon, elat, elon):\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    Bx = cos(elat) * cos(elon - slon)\n    By = cos(elat) * sin(elon - slon)\n    mid_lat = atan2(sin(slat) + sin(elat), sqrt((cos(slat) + Bx) ** 2 + By ** 2))\n    mid_lon = slon + atan2(By, cos(slat) + Bx)\n    return (degrees(mid_lat), degrees(mid_lon))", "task_id": "180_a8c7c3da-c39d-4c86-993a-77df9108ffda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the distance between two points along a rhumb line using latitude and longitude.", "code": "from math import radians, degrees, sin, cos, log, sqrt, atan2\n\ndef rhumb_line_distance(slat, slon, elat, elon):\n    R = 6371.0\n    slat, slon, elat, elon = map(radians, [slat, slon, elat, elon])\n    dlat = elat - slat\n    dlon = abs(elon - slon)\n    if dlon > 3.141592653589793:\n        dlon = 2 * 3.141592653589793 - dlon\n    dphi = log(tan(elat / 2 + 3.141592653589793 / 4) / tan(slat / 2 + 3.141592653589793 / 4))\n    q = dlat / dphi if dphi != 0 else cos(slat)\n    distance = sqrt(dlat ** 2 + (q * dlon) ** 2) * R\n    return distance", "task_id": "180_2417e63c-bfcc-4fd8-a60d-9baa0e8fe728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the vertex of a parabola given its coefficients a, b, and c.", "code": "def parabola_vertex(a, b, c):\n  vertex = (-b / (2 * a), (4 * a * c - b * b) / (4 * a))\n  return vertex", "task_id": "185_3febadfe-efe1-40c4-bb96-b5a32132f374", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the directrix of a parabola given its coefficients a, b, and c.", "code": "def parabola_directrix(a, b, c):\n  directrix = (4 * a * c - b * b - 1) / (4 * a)\n  return directrix", "task_id": "185_7e335e4a-b193-4a5a-bc43-f7063407d70c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the axis of symmetry of a parabola given its coefficients a, b, and c.", "code": "def parabola_axis_of_symmetry(a, b, c):\n  axis_of_symmetry = -b / (2 * a)\n  return axis_of_symmetry", "task_id": "185_6844f9b8-d4b8-45f0-b82a-8e6b9cb5fa89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the y-intercept of a parabola given its coefficients a, b, and c.", "code": "def parabola_y_intercept(a, b, c):\n  y_intercept = c\n  return y_intercept", "task_id": "185_2eae5d0a-656b-4b05-aae6-d08d62cfd1c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the x-intercepts of a parabola given its coefficients a, b, and c.", "code": "import math\n\ndef parabola_x_intercepts(a, b, c):\n  discriminant = b**2 - 4*a*c\n  if discriminant < 0:\n    return ()\n  elif discriminant == 0:\n    x = -b / (2 * a)\n    return (x,)\n  else:\n    x1 = (-b + math.sqrt(discriminant)) / (2 * a)\n    x2 = (-b - math.sqrt(discriminant)) / (2 * a)\n    return (x1, x2)", "task_id": "185_ed4a7d3e-003e-4883-a907-9e165cc9574a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the opening direction of a parabola given its coefficient a.", "code": "def parabola_opening_direction(a):\n  if a > 0:\n    return 'up'\n  elif a < 0:\n    return 'down'\n  else:\n    return 'not a parabola'", "task_id": "185_e82de2f8-01d1-49c6-9e17-f5169cbdddf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the distance from the vertex to the focus of a parabola given its coefficient a.", "code": "def parabola_focus_distance(a):\n  focus_distance = 1 / (4 * a)\n  return focus_distance", "task_id": "185_eca69e76-ca2c-41f9-b290-d639c03e8dc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the equation of a parabola given its focus and directrix.", "code": "def parabola_equation_from_focus_directrix(focus, directrix):\n  h, k = focus\n  a = 1 / (2 * (k - directrix))\n  return f'y = {a}(x - {h})^2 + {k}'", "task_id": "185_38d58548-b4ec-4a71-9152-41a040489aa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the focus of a parabola given its vertex and directrix.", "code": "def parabola_focus_from_vertex_directrix(vertex, directrix):\n  h, k = vertex\n  focus_y = (k + directrix) / 2\n  return (h, focus_y)", "task_id": "185_df49955c-4149-4ea5-8d27-078cb077cf9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the standard form of a parabola to its vertex form given its coefficients a, b, and c.", "code": "def parabola_vertex_form(a, b, c):\n  h = -b / (2 * a)\n  k = (4 * a * c - b * b) / (4 * a)\n  return f'y = {a}(x - {h})^2 + {k}'", "task_id": "185_b1299dd4-ac70-4304-937f-89b5d3000913", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all occurrences of literal strings in a string by using regex.", "code": "import re\ndef find_all_literals(text, patterns):\n  matches = []\n  for pattern in patterns:\n    matches.extend(re.findall(pattern, text))\n  return matches", "task_id": "186_8a0f7789-4688-4b36-ba27-be820758983b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of times any of the literal strings appear in a string by using regex.", "code": "import re\ndef count_literals(text, patterns):\n  count = 0\n  for pattern in patterns:\n    count += len(re.findall(pattern, text))\n  return count", "task_id": "186_5029fd65-6a60-4bf5-8b8a-edd39a405167", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of literal strings in a string with a given replacement string by using regex.", "code": "import re\ndef replace_literals(text, patterns, replacement):\n  for pattern in patterns:\n    text = re.sub(pattern, replacement, text)\n  return text", "task_id": "186_156269f1-b107-4b76-ba77-36890f09cc54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first occurrence of any literal string in a string by using regex.", "code": "import re\ndef find_first_literal(text, patterns):\n  for pattern in patterns:\n    match = re.search(pattern, text)\n    if match:\n      return match.group(0)\n  return ''", "task_id": "186_4f497be8-d60c-4e46-ae96-ae6073ff21f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the starting positions of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_positions(text, patterns):\n  positions = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      positions.append(match.start())\n  return positions", "task_id": "186_40ed307c-38ce-4ace-b257-27dfb1fa82f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the ending positions of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_end_positions(text, patterns):\n  positions = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      positions.append(match.end())\n  return positions", "task_id": "186_9ddca844-b9c1-4d02-a049-1c21ac32aed6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the span (start and end positions) of all occurrences of literal strings in a string by using regex.", "code": "import re\ndef check_literal_spans(text, patterns):\n  spans = []\n  for pattern in patterns:\n    for match in re.finditer(pattern, text):\n      spans.append(match.span())\n  return spans", "task_id": "186_e497a994-ff66-4b4e-a672-dfd78da29a66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search for literal strings in a string case insensitively by using regex.", "code": "import re\ndef check_literal_case_insensitive(text, patterns):\n  for pattern in patterns:\n    if re.search(pattern, text, re.IGNORECASE):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_a3b13edd-8f56-4533-841f-9413f605f4e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search for literal strings as whole words in a string by using regex.", "code": "import re\ndef check_literal_whole_words(text, patterns):\n  for pattern in patterns:\n    if re.search(r'\\b' + pattern + r'\\b', text):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_216288f7-0960-4c5e-996c-8a893f4ff219", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any of the literal strings appear at the start of a string by using regex.", "code": "import re\ndef check_literal_at_start(text, patterns):\n  for pattern in patterns:\n    if re.match(pattern, text):\n      return 'Matched!'\n  return 'Not Matched!'", "task_id": "186_ba9cbf65-31ae-4228-9552-9d5cf2961ad8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two squares.", "code": "def is_sum_of_squares(n):\n    for i in range(int(n**0.5)+1):\n        for j in range(int(n**0.5)+1):\n            if i*i + j*j == n:\n                return True\n    return False", "task_id": "188_64d22eb3-00bd-45db-8650-34209904ca2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number can be represented as the sum of two cubes.", "code": "def is_cube_sum(n):\n    for i in range(int(n**(1/3))+1):\n        for j in range(int(n**(1/3))+1):\n            if i**3 + j**3 == n:\n                return True\n    return False", "task_id": "188_6b0ed00c-1588-47ca-8348-e7f6f722b345", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a Fibonacci number.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "188_8b2a36a3-3f36-47a9-b192-d73c5a5dd70d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "188_91d9eac5-70ed-435d-af7e-5285c8ab3692", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "188_4c0f2c14-7fbd-4b4f-a2e2-d7e7a0c75af4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "188_e5a4205e-1792-4685-a430-341eed134a2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a power of two.", "code": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "188_cafe9a9b-829a-4a07-9a3d-52defd6be3a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is an Armstrong number.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit)**num_len for digit in num_str)", "task_id": "188_348e84e8-035f-43c1-9643-a6e0161132b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a Harshad number.", "code": "def is_harshad(n):\n    return n % sum(int(digit) for digit in str(n)) == 0", "task_id": "188_55def771-08f9-4ce5-8d24-3112bdd82253", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a perfect square.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n", "task_id": "188_f4403303-d36f-432f-8480-92b7ec7bcca4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing even number in a given list of integers.", "code": "def find_first_missing_even(arr):\n    arr = [x for x in arr if x % 2 == 0]\n    arr.sort()\n    missing_even = 2\n    for num in arr:\n        if num == missing_even:\n            missing_even += 2\n        elif num > missing_even:\n            break\n    return missing_even", "task_id": "189_6e2e1460-b368-4f63-81d7-908a7698c3bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing odd number in a given list of integers.", "code": "def find_first_missing_odd(arr):\n    arr = [x for x in arr if x % 2 != 0]\n    arr.sort()\n    missing_odd = 1\n    for num in arr:\n        if num == missing_odd:\n            missing_odd += 2\n        elif num > missing_odd:\n            break\n    return missing_odd", "task_id": "189_711886a8-37c8-408c-b3a9-cf0ba103bae0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing multiple of three in a given list of integers.", "code": "def find_first_missing_multiple_of_three(arr):\n    arr = [x for x in arr if x % 3 == 0]\n    arr.sort()\n    missing_multiple = 3\n    for num in arr:\n        if num == missing_multiple:\n            missing_multiple += 3\n        elif num > missing_multiple:\n            break\n    return missing_multiple", "task_id": "189_bef37062-6b99-448e-b2ae-49fedef3b589", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing positive square number in a given list of integers.", "code": "def find_first_missing_positive_square(arr):\n    arr = [x for x in arr if x > 0 and (x**0.5).is_integer()]\n    arr.sort()\n    missing_square = 1\n    while missing_square in arr:\n        missing_square += 1\n        missing_square = missing_square**2\n    return missing_square", "task_id": "189_dfa10349-5a8d-4d2a-98ec-20e9bb692408", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing prime number in a given list of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_missing_prime(arr):\n    arr = [x for x in arr if is_prime(x)]\n    arr.sort()\n    missing_prime = 2\n    while missing_prime in arr:\n        missing_prime += 1\n        while not is_prime(missing_prime):\n            missing_prime += 1\n    return missing_prime", "task_id": "189_f5bcdf11-bdfd-423b-b3c0-2a356bb262b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing Fibonacci number in a given list of integers.", "code": "def generate_fibonacci(n):\n    fib = [0, 1]\n    while fib[-1] < n:\n        fib.append(fib[-1] + fib[-2])\n    return fib\n\ndef find_first_missing_fibonacci(arr):\n    max_val = max(arr) if arr else 0\n    fib_sequence = generate_fibonacci(max_val + 1)\n    for num in fib_sequence:\n        if num not in arr:\n            return num\n    return fib_sequence[-1] + fib_sequence[-2]", "task_id": "189_2b0bc51c-94ed-4c64-bdac-e5e473605dd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing power of two in a given list of integers.", "code": "def find_first_missing_power_of_two(arr):\n    powers_of_two = [2**i for i in range(31)]\n    for power in powers_of_two:\n        if power not in arr:\n            return power\n    return 2**31", "task_id": "189_0357b2b9-a99a-48d7-82a4-1f8c843a444e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing factorial number in a given list of integers.", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef find_first_missing_factorial(arr):\n    i = 0\n    while True:\n        fact = factorial(i)\n        if fact not in arr:\n            return fact\n        i += 1", "task_id": "189_567393a6-16f3-4a8c-b3dd-9c345af42f8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing integer square root in a given list of integers.", "code": "def find_first_missing_square_root(arr):\n    arr = [int(x**0.5) for x in arr if (x**0.5).is_integer()]\n    arr.sort()\n    missing_root = 1\n    while missing_root in arr:\n        missing_root += 1\n    return missing_root", "task_id": "189_8ab73832-9284-4870-b61b-64ba4c0e6773", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first missing cubic number in a given list of integers.", "code": "def find_first_missing_cubic(arr):\n    arr = [x for x in arr if round(x**(1/3))**3 == x]\n    arr.sort()\n    missing_cubic = 1\n    while missing_cubic**3 in arr:\n        missing_cubic += 1\n    return missing_cubic**3", "task_id": "189_b141c428-87d9-4aa0-a526-56cef9c38306", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given day is a weekend or not.", "code": "def is_weekend(day: str) -> bool:\n    return day in ['Saturday', 'Sunday']", "task_id": "191_9dfbe2eb-4f48-4a63-951c-c1ef92e56df1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(character: str) -> bool:\n    return character.lower() in ['a', 'e', 'i', 'o', 'u']", "task_id": "191_9c5e5e91-fc5d-48c2-b5a2-13cb43adf21f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "191_238e60d6-74a7-418b-866f-d75f6d32f692", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(number: int) -> bool:\n    if number <= 1:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True", "task_id": "191_cd0ad42a-8795-4727-a2e6-e566dc663a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given word is a palindrome or not.", "code": "def is_palindrome(word: str) -> bool:\n    return word == word[::-1]", "task_id": "191_9b2bfb04-f46b-4bd7-890c-ce5ee954e43a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is an uppercase letter or not.", "code": "def is_uppercase(character: str) -> bool:\n    return character.isupper()", "task_id": "191_6bf905e5-6b66-4dd8-b8aa-5658c216ea69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(number: int) -> bool:\n    return number % 2 == 0", "task_id": "191_cdfde0db-f68c-41f8-a1ef-f13577f29f2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a consonant or not.", "code": "def is_consonant(character: str) -> bool:\n    return character.isalpha() and character.lower() not in ['a', 'e', 'i', 'o', 'u']", "task_id": "191_07dbbbbc-d016-4c87-bd4d-38ce62547538", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square or not.", "code": "def is_square(number: int) -> bool:\n    return int(number ** 0.5) ** 2 == number", "task_id": "191_0fd3b96c-f183-458e-94b8-208ceca8875b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 5 or not.", "code": "def is_divisible_by_5(number: int) -> bool:\n    return number % 5 == 0", "task_id": "191_b44c9c0b-7145-498e-a115-20692856fa61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a circle centered at the origin with a given radius.", "code": "def count_integral_points_circle(radius: int) -> int:\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 < radius**2:\n                count += 1\n    return count", "task_id": "190_2c82f956-043e-4b53-8071-db34a86b30bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a rectangle with given bottom-left and top-right coordinates.", "code": "def count_integral_points_rectangle(x1: int, y1: int, x2: int, y2: int) -> int:\n    return (x2 - x1 - 1) * (y2 - y1 - 1)", "task_id": "190_218c82ad-c9d1-4177-bf1e-f9f1cb61de29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a right-angled triangle with given base and height.", "code": "def count_integral_points_triangle(base: int, height: int) -> int:\n    count = 0\n    for x in range(1, base):\n        for y in range(1, height):\n            if y < (height/base) * x:\n                count += 1\n    return count", "task_id": "190_1a90aae0-eca3-4f0d-b8bb-bd32fd1bb938", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a parallelogram with given base and height.", "code": "def count_integral_points_parallelogram(base: int, height: int) -> int:\n    return (base - 1) * (height - 1)", "task_id": "190_8ee8de25-67f5-421e-90d3-2c3024c0196d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a regular hexagon with a given side length.", "code": "def count_integral_points_hexagon(side_length: int) -> int:\n    count = 0\n    for x in range(-side_length, side_length + 1):\n        for y in range(-side_length, side_length + 1):\n            if abs(x - y) <= side_length and abs(x + y) <= side_length:\n                count += 1\n    return count", "task_id": "190_37f9fb36-ffdb-4669-b51d-762a6f135a19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside an ellipse centered at the origin with given semi-major axis a and semi-minor axis b.", "code": "def count_integral_points_ellipse(a: int, b: int) -> int:\n    count = 0\n    for x in range(-a, a + 1):\n        for y in range(-b, b + 1):\n            if (x**2 / a**2) + (y**2 / b**2) < 1:\n                count += 1\n    return count", "task_id": "190_9c10d8d2-bb6e-4fe0-a980-6be6824edcaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a diamond centered at the origin with a given diagonal length d.", "code": "def count_integral_points_diamond(d: int) -> int:\n    count = 0\n    for x in range(-d//2, d//2 + 1):\n        for y in range(-d//2, d//2 + 1):\n            if abs(x) + abs(y) < d//2:\n                count += 1\n    return count", "task_id": "190_4aabc086-b786-43de-87dc-ff88f84ec6e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a regular pentagon with a given side length.", "code": "def count_integral_points_pentagon(side_length: int) -> int:\n    count = 0\n    for x in range(-side_length, side_length + 1):\n        for y in range(-side_length, side_length + 1):\n            if abs(x) + abs(y) < side_length:\n                count += 1\n    return count", "task_id": "190_00915aa9-69f5-4429-8ccd-a41d88f171dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a trapezoid with given bases a, b and height.", "code": "def count_integral_points_trapezoid(a: int, b: int, height: int) -> int:\n    count = 0\n    for x in range(min(a, b)):\n        for y in range(height):\n            if y < height:\n                count += 1\n    return count", "task_id": "190_131b99f1-ba5c-4936-be26-eff6cc3c4a5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integral coordinates that lie inside a circular sector with a given radius and angle in degrees.", "code": "import math\n\ndef count_integral_points_sector(radius: int, angle: int) -> int:\n    count = 0\n    for x in range(-radius, radius + 1):\n        for y in range(-radius, radius + 1):\n            if x**2 + y**2 < radius**2 and math.degrees(math.atan2(y, x)) < angle:\n                count += 1\n    return count", "task_id": "190_8d0edb8a-777c-4faa-b1f3-f9cd7a68c80a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common substring for the given two sequences.", "code": "def longest_common_substring(X: str, Y: str) -> int:\n    m = len(X)\n    n = len(Y)\n    result = 0\n    length = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                length[i][j] = length[i - 1][j - 1] + 1\n                result = max(result, length[i][j])\n            else:\n                length[i][j] = 0\n    return result", "task_id": "187_74e47bfe-012d-4a3d-9bba-50c3df7b194c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix for the given two sequences.", "code": "def longest_common_prefix(X: str, Y: str) -> str:\n    min_length = min(len(X), len(Y))\n    for i in range(min_length):\n        if X[i] != Y[i]:\n            return X[:i]\n    return X[:min_length]", "task_id": "187_8707a2ff-c291-47bb-b674-0e0a3d2f5b39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common suffix for the given two sequences.", "code": "def longest_common_suffix(X: str, Y: str) -> str:\n    min_length = min(len(X), len(Y))\n    for i in range(1, min_length + 1):\n        if X[-i] != Y[-i]:\n            return X[-i+1:]\n    return X[-min_length:]", "task_id": "187_108daa2e-b50f-47bb-a7b2-ab43707a51c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given list of integers.", "code": "def longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "187_f4ea3736-2382-4cd8-a09b-d8483f3d7e7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest palindromic subsequence in a given string.", "code": "def longest_palindromic_subsequence(X: str) -> int:\n    n = len(X)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if X[i] == X[j] and cl == 2:\n                dp[i][j] = 2\n            elif X[i] == X[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "task_id": "187_73d546ac-7f3a-4f07-8fc9-490a9ca9ddf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences.", "code": "def longest_common_subsequence_length(X: str, Y: str) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "187_0898ca61-8138-4b77-9d10-e3a2dbd88883", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence string for the given two sequences.", "code": "def longest_common_subsequence_string(X: str, Y: str) -> str:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    index = dp[m][n]\n    lcs = [''] * index\n    i, j = m, n\n    while i > 0 and j > 0:\n        if X[i - 1] == Y[j - 1]:\n            lcs[index - 1] = X[i - 1]\n            i -= 1\n            j -= 1\n            index -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            i -= 1\n        else:\n            j -= 1\n    return ''.join(lcs)", "task_id": "187_ab3fbfc1-fe05-4a91-8e34-f4d35a152b59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences with at most k mismatches allowed.", "code": "def longest_common_subsequence_length_k(X: str, Y: str, k: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[[0] * (k + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for l in range(k + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j][l] = dp[i - 1][j - 1][l] + 1\n                else:\n                    dp[i][j][l] = max(dp[i - 1][j][l], dp[i][j - 1][l])\n                    if l > 0:\n                        dp[i][j][l] = max(dp[i][j][l], dp[i - 1][j - 1][l - 1] + 1)\n    return dp[m][n][k]", "task_id": "187_823ad9d4-477f-4179-9949-58f825a94663", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can replace one character in X with any character from the replacement string.", "code": "def longest_common_subsequence_with_replacement(X: str, Y: str, replacement: str) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                for r in replacement:\n                    if r == Y[j - 1]:\n                        dp[i][j] = max(dp[i][j], dp[i - 1][j - 1] + 1)\n    return dp[m][n]", "task_id": "187_c16971c4-1ecb-49f2-8879-20486d897627", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can skip up to 'skip' characters in X.", "code": "def longest_common_subsequence_with_skip(X: str, Y: str, skip: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n                if skip > 0:\n                    dp[i][j] = max(dp[i][j], dp[i - 1][j] + 1)\n    return dp[m][n]", "task_id": "187_cf0211b1-e657-4f19-9cfc-dc3829c910ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence for the given two sequences where you can delete up to 'deletions' characters in X.", "code": "def longest_common_subsequence_with_deletion(X: str, Y: str, deletions: int) -> int:\n    m = len(X)\n    n = len(Y)\n    dp = [[[0] * (deletions + 1) for _ in range(n + 1)] for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            for d in range(deletions + 1):\n                if X[i - 1] == Y[j - 1]:\n                    dp[i][j][d] = dp[i - 1][j - 1][d] + 1\n                else:\n                    dp[i][j][d] = max(dp[i - 1][j][d], dp[i][j - 1][d])\n                    if d > 0:\n                        dp[i][j][d] = max(dp[i][j][d], dp[i - 1][j][d - 1])\n    return dp[m][n][deletions]", "task_id": "187_1b42323e-1a1e-43ab-a84c-14754b5706e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))", "task_id": "193_236cb11c-a6df-4b0a-9010-d0e08039cc77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the sorted list.", "code": "def remove_duplicates_and_sort(lst: list) -> list:\n    return sorted(list(set(lst)))", "task_id": "193_f3b9cfd5-98b5-4114-a0d7-866f423f764d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the sum of the unique elements.", "code": "def remove_duplicates_and_sum(lst: list) -> int:\n    return sum(set(lst))", "task_id": "193_8502d2a7-20a6-4da3-a6e2-85a6d7a5eded", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the count of unique elements.", "code": "def remove_duplicates_and_count(lst: list) -> int:\n    return len(set(lst))", "task_id": "193_a0017287-3f3b-4f67-8ef5-713422376236", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the maximum of the unique elements.", "code": "def remove_duplicates_and_max(lst: list) -> int:\n    return max(set(lst))", "task_id": "193_cae71987-f5fd-468d-8bce-3a6a94ee84a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the minimum of the unique elements.", "code": "def remove_duplicates_and_min(lst: list) -> int:\n    return min(set(lst))", "task_id": "193_1cf7b92c-af9e-4c92-a217-b467778a0d63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the list of unique elements in reverse order.", "code": "def remove_duplicates_and_reverse(lst: list) -> list:\n    return list(set(lst))[::-1]", "task_id": "193_e3970df5-db0a-4079-aebf-a9339a2a1f0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the first element of the unique elements.", "code": "def remove_duplicates_and_first(lst: list) -> int:\n    return list(set(lst))[0]", "task_id": "193_daab8e7e-b145-417d-9ee5-9dfdac24f18a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the last element of the unique elements.", "code": "def remove_duplicates_and_last(lst: list) -> int:\n    return list(set(lst))[-1]", "task_id": "193_522d9cb4-9d1c-45fa-9be0-3676ba72eaef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the duplicates from the given list and return the product of the unique elements.", "code": "def remove_duplicates_and_multiply(lst: list) -> int:\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, set(lst), 1)", "task_id": "193_f225bae0-012a-42e4-8652-edd23c9283a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one letter and one special character.", "code": "def check_special_characters(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.isalpha():\n            flag_l = True\n        if not i.isalnum():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_a152f943-c88a-4be8-bf67-645ef84f947a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one uppercase letter and one lowercase letter.", "code": "def check_upper_lower(s: str) -> bool:\n    flag_u = False\n    flag_l = False\n    for i in s:\n        if i.isupper():\n            flag_u = True\n        if i.islower():\n            flag_l = True\n    return flag_u and flag_l", "task_id": "192_ff21dfe9-7c87-4b36-bb13-94a1d5131e9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one vowel and one consonant.", "code": "def check_vowel_consonant(s: str) -> bool:\n    vowels = 'aeiouAEIOU'\n    flag_v = False\n    flag_c = False\n    for i in s:\n        if i in vowels:\n            flag_v = True\n        elif i.isalpha():\n            flag_c = True\n    return flag_v and flag_c", "task_id": "192_54faa06d-3968-48ce-9bfd-55ce46c1387a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one even digit and one odd digit.", "code": "def check_even_odd_digits(s: str) -> bool:\n    flag_e = False\n    flag_o = False\n    for i in s:\n        if i.isdigit():\n            if int(i) % 2 == 0:\n                flag_e = True\n            else:\n                flag_o = True\n    return flag_e and flag_o", "task_id": "192_5a74617b-e4e2-41c8-9fa1-56b4360a417e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one alphanumeric character and one non-alphanumeric character.", "code": "def check_alphanumeric(s: str) -> bool:\n    flag_a = False\n    flag_na = False\n    for i in s:\n        if i.isalnum():\n            flag_a = True\n        else:\n            flag_na = True\n    return flag_a and flag_na", "task_id": "192_31df521b-9b63-409d-bfa5-fb05bbfc51a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one digit and its length is at least 8 characters.", "code": "def check_digit_length(s: str) -> bool:\n    flag_d = False\n    if len(s) >= 8:\n        for i in s:\n            if i.isdigit():\n                flag_d = True\n    return flag_d", "task_id": "192_17bbe983-08db-4d25-8de6-49118c4f03b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one letter and one space.", "code": "def check_letter_space(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.isalpha():\n            flag_l = True\n        if i.isspace():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_a5e1c8de-7fff-4d1f-abac-32c46b79293b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one uppercase letter and one digit.", "code": "def check_upper_digit(s: str) -> bool:\n    flag_u = False\n    flag_d = False\n    for i in s:\n        if i.isupper():\n            flag_u = True\n        if i.isdigit():\n            flag_d = True\n    return flag_u and flag_d", "task_id": "192_fee00dbf-492e-4b3e-ac1b-9f2f673028c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one lowercase letter and one special character.", "code": "def check_lower_special(s: str) -> bool:\n    flag_l = False\n    flag_s = False\n    for i in s:\n        if i.islower():\n            flag_l = True\n        if not i.isalnum():\n            flag_s = True\n    return flag_l and flag_s", "task_id": "192_052fd52c-53ea-411a-8e4f-2c107ae1d2d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string has at least one digit and one vowel.", "code": "def check_digit_vowel(s: str) -> bool:\n    vowels = 'aeiouAEIOU'\n    flag_d = False\n    flag_v = False\n    for i in s:\n        if i.isdigit():\n            flag_d = True\n        if i in vowels:\n            flag_v = True\n    return flag_d and flag_v", "task_id": "192_dcf8e637-2138-4975-88cb-33aa82c4a171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to a decimal number.", "code": "def binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value", "task_id": "194_c327e76b-60ac-490f-9b19-f1fd954bcd83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a decimal number.", "code": "def hexadecimal_to_decimal(s):\n    return int(s, 16)", "task_id": "194_4702d95e-7817-4c96-b36d-5be89123c668", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to an octal number.", "code": "def decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_71c3608b-2538-4c3f-8e51-72a2f7f96d03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal number to a binary number.", "code": "def decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_0fa96c71-0f21-421d-9334-fdcc1537ee52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to an octal number.", "code": "def binary_to_octal(n):\n    decimal = binary_to_decimal(n)\n    return decimal_to_octal(decimal)\n\ndef binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\ndef decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_7df295d3-20b2-4298-8b3b-64c5bcc4bea6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number to a binary number.", "code": "def octal_to_binary(n):\n    decimal = octal_to_decimal(n)\n    return decimal_to_binary(decimal)\n\ndef octal_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_fb50298a-d3c9-4619-b644-5d9eaf2d92d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to a binary number.", "code": "def hexadecimal_to_binary(s):\n    decimal = int(s, 16)\n    return decimal_to_binary(decimal)\n\ndef decimal_to_binary(n):\n    if n == 0:\n        return '0'\n    binary_num = ''\n    while n > 0:\n        binary_num = str(n % 2) + binary_num\n        n = n // 2\n    return binary_num", "task_id": "194_97833224-de0d-402f-9b71-5442cfba0b35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary number to a hexadecimal number.", "code": "def binary_to_hexadecimal(n):\n    decimal = binary_to_decimal(n)\n    return decimal_to_hexadecimal(decimal)\n\ndef binary_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 2\n    return dec_value\n\ndef decimal_to_hexadecimal(n):\n    return hex(n)[2:]", "task_id": "194_5611dbbc-06b4-43ce-aaba-43b9e2cc14ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert an octal number to a hexadecimal number.", "code": "def octal_to_hexadecimal(n):\n    decimal = octal_to_decimal(n)\n    return decimal_to_hexadecimal(decimal)\n\ndef octal_to_decimal(n):\n    num = n\n    dec_value = 0\n    base = 1\n    temp = num\n    while temp:\n        last_digit = temp % 10\n        temp = int(temp / 10)\n        dec_value += last_digit * base\n        base = base * 8\n    return dec_value\n\ndef decimal_to_hexadecimal(n):\n    return hex(n)[2:]", "task_id": "194_6d06bd20-9394-43db-86f1-a1d4abab4882", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number (as a string) to an octal number.", "code": "def hexadecimal_to_octal(s):\n    decimal = int(s, 16)\n    return decimal_to_octal(decimal)\n\ndef decimal_to_octal(n):\n    if n == 0:\n        return '0'\n    octal_num = ''\n    while n > 0:\n        octal_num = str(n % 8) + octal_num\n        n = n // 8\n    return octal_num", "task_id": "194_4e97ce8e-9806-410d-8a9d-60715b9be694", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an element in a sorted array.", "code": "def find_last(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            low = mid + 1\n    return res", "task_id": "195_ebcec68f-1222-4e4b-9305-58e4bf2678f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element greater than a given value in a sorted array.", "code": "def find_first_greater(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_4a1b8509-fc36-4e97-829a-9a87b4264b51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element not less than a given value in a sorted array.", "code": "def find_first_not_less(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] >= x:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_81eb00fa-9426-4685-90d9-0e303e55cbf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the element closest to a given value in a sorted array.", "code": "def find_closest(arr, x, n):\n    low = 0\n    high = n - 1\n    closest = -1\n    min_diff = float('inf')\n    while (low <= high):\n        mid = (low + high) // 2\n        diff = abs(arr[mid] - x)\n        if diff < min_diff:\n            min_diff = diff\n            closest = mid\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return closest", "task_id": "195_a2ac5f8f-ef85-4d00-a922-1f1fa8fde25c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an even number in a sorted array.", "code": "def find_first_even(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 == 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_452d052b-ed6b-47e9-9377-016cd3ccea3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an odd number in a sorted array.", "code": "def find_first_odd(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 != 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_8fbb9edb-0610-40c5-ad2f-09239df10515", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a negative number in a sorted array.", "code": "def find_first_negative(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] < 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_5fc27dd0-cf12-43c4-aec6-f9f949a94ab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a positive number in a sorted array.", "code": "def find_first_positive(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_3bbd19b6-8326-4dc5-af73-4079dd26366e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of zero in a sorted array.", "code": "def find_first_zero(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] == 0:\n            res = mid\n            high = mid - 1\n        elif arr[mid] < 0:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "195_eb7120c7-7bb5-4b67-9a94-b1289c43af87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element that is a multiple of a given number in a sorted array.", "code": "def find_first_multiple_of_k(arr, k, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % k == 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "195_7bbcb726-0de4-41d1-bfd7-6bcc826823d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add corresponding elements of two tuples.", "code": "def add_tuples(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))", "task_id": "197_56fb3c19-e3f4-4971-8954-bcfd0b0b968d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply corresponding elements of two tuples.", "code": "def multiply_tuples(tuple1, tuple2):\n    return tuple(a * b for a, b in zip(tuple1, tuple2))", "task_id": "197_6c4de4eb-a030-410e-924b-f22df0b90b7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract corresponding elements of the second tuple from the first tuple.", "code": "def subtract_tuples(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))", "task_id": "197_524a76c8-ba43-496c-b2d6-69b0d2f4d561", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide corresponding elements of the first tuple by the second tuple.", "code": "def divide_tuples(tuple1, tuple2):\n    return tuple(a / b for a, b in zip(tuple1, tuple2))", "task_id": "197_37d0d279-5581-4b0b-af27-2859bf146233", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of corresponding elements of the first tuple by the second tuple.", "code": "def modulus_tuples(tuple1, tuple2):\n    return tuple(a % b for a, b in zip(tuple1, tuple2))", "task_id": "197_daa81cd2-53d3-4623-b8dc-b0f53424b919", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of corresponding elements of two tuples.", "code": "def max_tuples(tuple1, tuple2):\n    return tuple(max(a, b) for a, b in zip(tuple1, tuple2))", "task_id": "197_2b7c7271-e918-48b9-9e31-f0b43a1e3347", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of corresponding elements of two tuples.", "code": "def min_tuples(tuple1, tuple2):\n    return tuple(min(a, b) for a, b in zip(tuple1, tuple2))", "task_id": "197_3110a8a9-06be-4a2e-bc41-4d5397835c08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise each element of a tuple to a given power.", "code": "def power_tuples(tuple1, power):\n    return tuple(a ** power for a in tuple1)", "task_id": "197_b915737c-2a53-4b77-8934-02612b9889c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to negate each element of a tuple.", "code": "def negate_tuples(tuple1):\n    return tuple(-a for a in tuple1)", "task_id": "197_0ca56a69-5a90-48e7-9456-2a8728b6b18a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of each element in a tuple.", "code": "def absolute_tuples(tuple1):\n    return tuple(abs(a) for a in tuple1)", "task_id": "197_fd4c2f1d-9666-4f13-9788-3dd3e409cf4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings with length equal to a given number.", "code": "def filter_strings_by_length(strings, length):\n    return [s for s in strings if len(s) != length]", "task_id": "196_8343591a-8fc7-451c-8b63-09485405a1cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lists with length equal to a given number.", "code": "def filter_lists_by_length(lists, length):\n    return [lst for lst in lists if len(lst) != length]", "task_id": "196_1c5c030c-fd2d-4a2b-9e49-46aa1ef257dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all dictionaries with a given number of keys.", "code": "def remove_dicts_with_key_count(dicts, key_count):\n    return [d for d in dicts if len(d.keys()) != key_count]", "task_id": "196_f62b743f-cd11-438c-95c8-9966cdc32741", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all sets with length equal to a given number.", "code": "def filter_sets_by_length(sets, length):\n    return [s for s in sets if len(s) != length]", "task_id": "196_3209fdf8-fcf3-44dd-879c-d8a06a1d0290", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings with a given number of vowels.", "code": "def remove_strings_with_vowel_count(strings, vowel_count):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return [s for s in strings if count_vowels(s) != vowel_count]", "task_id": "196_38cb4de9-0ba5-40be-963a-42f70961a4d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lists whose elements sum to a given number.", "code": "def remove_lists_with_sum(lists, target_sum):\n    return [lst for lst in lists if sum(lst) != target_sum]", "task_id": "196_1a3d8342-a680-422e-9c3a-7b27336e22e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples whose first element is equal to a given number.", "code": "def filter_tuples_by_first_element(tuples, first_element):\n    return [t for t in tuples if t[0] != first_element]", "task_id": "196_94185527-4e15-4228-8c5a-e13a69ebf46b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all dictionaries that contain a given value.", "code": "def remove_dicts_with_value(dicts, value):\n    return [d for d in dicts if value not in d.values()]", "task_id": "196_1176d0c6-0a56-4d82-b628-07f3646fea91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lists whose maximum element is equal to a given number.", "code": "def filter_lists_by_max_element(lists, max_element):\n    return [lst for lst in lists if max(lst) != max_element]", "task_id": "196_f4c40879-fdd4-441b-8a87-5949ae140262", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all strings that contain a given character.", "code": "def remove_strings_with_char(strings, char):\n    return [s for s in strings if char not in s]", "task_id": "196_04cedd85-947c-434e-8993-7ddcaa78e092", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest rectangle that can be inscribed in an ellipse.", "code": "import math\ndef largest_rectangle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_62dfb1ac-9773-4410-809a-db6d5f6b10fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest square that can be inscribed in an ellipse.", "code": "import math\ndef largest_square(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * math.sqrt(2)\n    area = side * side\n    return area", "task_id": "198_48dd431c-c870-49d5-9ab0-f8e49738e4c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest circle that can be inscribed in an ellipse.", "code": "import math\ndef largest_circle(a, b):\n    if a < 0 or b < 0:\n        return -1\n    radius = min(a, b)\n    area = math.pi * radius * radius\n    return area", "task_id": "198_216db27c-9e2a-4a7f-9c28-ee7580c509ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest hexagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_hexagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) / math.sqrt(3)\n    area = (3 * math.sqrt(3) * side * side) / 2\n    return area", "task_id": "198_392ad87b-98c0-48a8-8a33-34ec02f54e1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest pentagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_pentagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * (math.sqrt(5) - 1) / 2\n    area = (5 * side * side) / (4 * math.tan(math.pi / 5))\n    return area", "task_id": "198_1269d97d-4c73-473e-9825-5d8e7ab7d5c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest octagon that can be inscribed in an ellipse.", "code": "import math\ndef largest_octagon(a, b):\n    if a < 0 or b < 0:\n        return -1\n    side = min(a, b) * (1 + math.sqrt(2)) / 2\n    area = 2 * (1 + math.sqrt(2)) * side * side\n    return area", "task_id": "198_901ce7b1-b36c-424e-a37e-f4e7c0fe79d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest parallelogram that can be inscribed in an ellipse.", "code": "import math\ndef largest_parallelogram(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_e57ba814-9c9a-4a0b-b932-8c308cb47ff9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest rhombus that can be inscribed in an ellipse.", "code": "import math\ndef largest_rhombus(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_edff0eac-297b-4446-a789-4f2027412adc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest trapezoid that can be inscribed in an ellipse.", "code": "import math\ndef largest_trapezoid(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = 2 * a * b\n    return area", "task_id": "198_7e8cda14-da44-4cc8-a99b-8014a517c024", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest ellipse that can be inscribed in another ellipse.", "code": "import math\ndef largest_ellipse(a, b):\n    if a < 0 or b < 0:\n        return -1\n    area = math.pi * a * b\n    return area", "task_id": "198_d6432ca0-9dc5-4cc9-8a27-deb6f6f8c3bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are even.", "code": "def is_all_even(lst): \n    return all(x % 2 == 0 for x in lst)", "task_id": "201_0924cf1e-7fa4-43ae-8a19-83ac9fb521e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are positive.", "code": "def is_all_positive(lst): \n    return all(x > 0 for x in lst)", "task_id": "201_34292e54-2a0c-404b-afd8-62e7332273a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list have the same length.", "code": "def are_lengths_equal(lst): \n    return len(set(len(x) for x in lst)) == 1", "task_id": "201_76d82c52-efef-4530-bd7e-884a39fb1a44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list are uppercase.", "code": "def is_all_uppercase(lst): \n    return all(x.isupper() for x in lst)", "task_id": "201_7d5e357e-6020-4284-a394-a962bdf56446", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome.", "code": "def is_palindrome(s): \n    return s == s[::-1]", "task_id": "201_f29303fe-7f9c-4422-929e-743979ad1256", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a list are unique.", "code": "def is_all_unique(lst): \n    return len(lst) == len(set(lst))", "task_id": "201_bd99a792-f24f-4cd0-a2f7-67b39e66dab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a list is sorted in ascending order.", "code": "def is_sorted(lst): \n    return lst == sorted(lst)", "task_id": "201_0d5778d0-f33e-464b-9798-8c7c1d630b62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all characters in a string are vowels.", "code": "def is_all_vowels(s): \n    return all(c in 'aeiouAEIOU' for c in s)", "task_id": "201_b639da8e-f85e-40d6-a6b7-3e8972fe78cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list contain only alphabetic characters.", "code": "def is_all_alpha(lst): \n    return all(x.isalpha() for x in lst)", "task_id": "201_dd3c5eb1-88e8-43b9-aaef-526dd502a99f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all strings in a list are non-empty.", "code": "def is_all_nonempty(lst): \n    return all(len(x) > 0 for x in lst)", "task_id": "201_a79e8f79-b305-4ec2-acc2-ec3309e40527", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 3 less than or equal to a given number.", "code": "def highest_power_of_3(n):\n    res = 1\n    while res * 3 <= n:\n        res *= 3\n    return res", "task_id": "199_03b2f2cf-70c2-4e07-a9da-5bfb5cf40998", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 5 less than or equal to a given number.", "code": "def highest_power_of_5(n):\n    res = 1\n    while res * 5 <= n:\n        res *= 5\n    return res", "task_id": "199_7e5ea645-14ff-4d25-899f-9ca64c8ec326", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 10 less than or equal to a given number.", "code": "def highest_power_of_10(n):\n    res = 1\n    while res * 10 <= n:\n        res *= 10\n    return res", "task_id": "199_762fcd6b-6317-4056-947c-c7a27d0a1860", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 strictly less than a given number.", "code": "def highest_power_of_2_less_than(n):\n    res = 1\n    while res * 2 < n:\n        res *= 2\n    return res", "task_id": "199_93ff247f-12ac-4ea3-aa99-e2822022237b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 3 strictly less than a given number.", "code": "def highest_power_of_3_less_than(n):\n    res = 1\n    while res * 3 < n:\n        res *= 3\n    return res", "task_id": "199_6f5d505b-d035-4a4e-9ab5-e7007532cf03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 4 less than or equal to a given number.", "code": "def highest_power_of_4(n):\n    res = 1\n    while res * 4 <= n:\n        res *= 4\n    return res", "task_id": "199_a6563213-460c-4528-9d03-fe8898ef5c19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 6 less than or equal to a given number.", "code": "def highest_power_of_6(n):\n    res = 1\n    while res * 6 <= n:\n        res *= 6\n    return res", "task_id": "199_d9c63252-f20c-4219-ad11-57228c22cd33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 7 less than or equal to a given number.", "code": "def highest_power_of_7(n):\n    res = 1\n    while res * 7 <= n:\n        res *= 7\n    return res", "task_id": "199_f197a11f-6826-4f8c-b650-0a58384b9fdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 or 3 less than or equal to a given number.", "code": "def highest_power_of_2_or_3(n):\n    res = 1\n    for i in range(n, 0, -1):\n        if (i & (i - 1)) == 0 or (i % 3 == 0 and (i // 3) % 3 == 0):\n            res = i\n            break\n    return res", "task_id": "199_dd8eb566-17f9-4587-9ff0-304ba64cad85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 and 3 (i.e., 6, 12, 24, etc.) less than or equal to a given number.", "code": "def highest_power_of_2_and_3(n):\n    res = 1\n    while res * 6 <= n:\n        res *= 6\n    return res", "task_id": "199_41b18181-bbea-4437-89a7-dc0eb3a860cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the minimum values in a given list.", "code": "def find_min_positions(lst):\n    min_val = min(lst)\n    min_result = [i for i, j in enumerate(lst) if j == min_val]\n    return min_result", "task_id": "200_86e75fdd-5781-42da-87ff-30ce657f1ac6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the even numbers in a given list.", "code": "def find_even_positions(lst):\n    even_result = [i for i, j in enumerate(lst) if j % 2 == 0]\n    return even_result", "task_id": "200_fdc3b10b-792e-4b2f-8ec4-b6aae1ddb2f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the odd numbers in a given list.", "code": "def find_odd_positions(lst):\n    odd_result = [i for i, j in enumerate(lst) if j % 2 != 0]\n    return odd_result", "task_id": "200_709d905b-f3ac-4cb7-8396-31d9e076ea8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the prime numbers in a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_positions(lst):\n    prime_result = [i for i, j in enumerate(lst) if is_prime(j)]\n    return prime_result", "task_id": "200_282b1cd2-0175-438a-934d-b3679c323035", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the negative numbers in a given list.", "code": "def find_negative_positions(lst):\n    negative_result = [i for i, j in enumerate(lst) if j < 0]\n    return negative_result", "task_id": "200_57ca299c-48b0-4180-97c5-57681392d802", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the positive numbers in a given list.", "code": "def find_positive_positions(lst):\n    positive_result = [i for i, j in enumerate(lst) if j > 0]\n    return positive_result", "task_id": "200_3cb8d6d6-47f9-4141-a205-c4ee77405447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the palindrome strings in a given list.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef find_palindrome_positions(lst):\n    palindrome_result = [i for i, j in enumerate(lst) if is_palindrome(j)]\n    return palindrome_result", "task_id": "200_baced3a5-2a85-4cae-a237-bf50a1d31e04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the strings that start with a vowel in a given list.", "code": "def find_vowel_start_positions(lst):\n    vowels = 'aeiouAEIOU'\n    vowel_result = [i for i, j in enumerate(lst) if j[0] in vowels]\n    return vowel_result", "task_id": "200_61f7af4e-445e-47d5-a5d6-73348c09f413", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the numbers that are multiples of a given number k in a given list.", "code": "def find_multiple_of_k_positions(lst, k):\n    multiple_result = [i for i, j in enumerate(lst) if j % k == 0]\n    return multiple_result", "task_id": "200_0d2ec025-b938-41a5-94a7-1205e8f3ff74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the longest strings in a given list.", "code": "def find_longest_string_positions(lst):\n    max_len = max(len(s) for s in lst)\n    longest_result = [i for i, s in enumerate(lst) if len(s) == max_len]\n    return longest_result", "task_id": "200_cfabb352-2d2c-4633-afe2-9e888023e901", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove odd characters in a string.", "code": "def remove_odd_characters(s: str) -> str:\n    return ''.join([s[i] for i in range(len(s)) if i % 2 != 0])", "task_id": "202_fe8c0f55-b8ef-48c2-9afd-ad57c468d4ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "202_2d915d5a-9ce3-4792-a80a-ff6c4a8ed49d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "202_f175249d-bd7a-4f54-bed5-89fe43b3de59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize every alternate character in a string.", "code": "def capitalize_alternate(s: str) -> str:\n    return ''.join([char.upper() if i % 2 == 0 else char for i, char in enumerate(s)])", "task_id": "202_e728ff83-36a4-4f1f-bd3a-618c19c7c308", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char in vowels])", "task_id": "202_434a7cdd-9d7a-4061-9788-6314203b9720", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double every character in a string.", "code": "def double_characters(s: str) -> str:\n    return ''.join([char * 2 for char in s])", "task_id": "202_d036e1d8-7952-4cec-9674-321e254999ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a string.", "code": "def remove_whitespace(s: str) -> str:\n    return ''.join(s.split())", "task_id": "202_ad258395-c4a6-4bb1-929c-b26bd0c30f40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "202_f65f8db9-8786-4452-acb3-a2ea960b6bfc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a string.", "code": "def remove_digits(s: str) -> str:\n    return ''.join([char for char in s if not char.isdigit()])", "task_id": "202_97c68be3-341c-4ebc-843d-357eea717155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters from a string, leaving only alphanumeric characters.", "code": "def remove_special_characters(s: str) -> str:\n    return ''.join([char for char in s if char.isalnum()])", "task_id": "202_f0106786-e7ba-479d-afa6-78ea83ebe21c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of the given tuple.", "code": "def reverse_tuple_elements(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "205_f0678a67-e337-4802-a2f2-af8983011e69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment each element of the given tuple by 1.", "code": "def increment_tuple_elements(t: tuple) -> tuple:\n    return tuple(x + 1 for x in t)", "task_id": "205_67de3e70-223f-466f-865e-da519a1cdcc5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to square each element of the given tuple.", "code": "def square_tuple_elements(t: tuple) -> tuple:\n    return tuple(x ** 2 for x in t)", "task_id": "205_9d71af48-0885-4d2e-8d46-36101cfa4d4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to negate each element of the given tuple.", "code": "def negate_tuple_elements(t: tuple) -> tuple:\n    return tuple(-x for x in t)", "task_id": "205_f05e0e4f-2c7b-40b6-9efd-5f3c35655d49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each element of the given tuple.", "code": "def double_tuple_elements(t: tuple) -> tuple:\n    return tuple(x * 2 for x in t)", "task_id": "205_a1a612d9-0125-4ab2-923b-5b0b9b2552c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the absolute value of each element in the given tuple.", "code": "def absolute_tuple_elements(t: tuple) -> tuple:\n    return tuple(abs(x) for x in t)", "task_id": "205_4b4aa456-4890-497a-a7a0-0fae818a2965", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert each element of the given tuple to a string.", "code": "def convert_tuple_elements_to_string(t: tuple) -> tuple:\n    return tuple(str(x) for x in t)", "task_id": "205_7328f9f6-2b0e-47f3-aabb-99f0b59071f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to halve each element of the given tuple.", "code": "def half_tuple_elements(t: tuple) -> tuple:\n    return tuple(x / 2 for x in t)", "task_id": "205_73e08e0b-63bb-4e34-b811-999543583065", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to cube each element of the given tuple.", "code": "def cube_tuple_elements(t: tuple) -> tuple:\n    return tuple(x ** 3 for x in t)", "task_id": "205_5bf1385f-cbcf-48f2-83fe-1070a88ac24e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if each element of the given tuple is even, returning a tuple of booleans.", "code": "def is_even_tuple_elements(t: tuple) -> tuple:\n    return tuple(x % 2 == 0 for x in t)", "task_id": "205_efe7d58c-c9b8-4709-9ec7-5367a5e46cd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "204_fdeb4417-7bd0-41cd-b4c9-7f90a71bf0e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "204_4c3945f4-009a-4ab4-a849-6acb0a19937a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a given string.", "code": "def count_uppercase(s: str) -> int:\n    return sum(1 for char in s if char.isupper())", "task_id": "204_25e3cb2a-40a8-49fa-b040-8f72d2131512", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a given string.", "code": "def count_lowercase(s: str) -> int:\n    return sum(1 for char in s if char.islower())", "task_id": "204_3b30fc57-eebd-448e-b2cb-0a4d81f9e06c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a given string.", "code": "def count_digits(s: str) -> int:\n    return sum(1 for char in s if char.isdigit())", "task_id": "204_c20e02f0-7736-47b8-8a2a-0f38a1ad8e44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in a given string.", "code": "def count_spaces(s: str) -> int:\n    return sum(1 for char in s if char == ' ')", "task_id": "204_02fde9df-c1cc-44f9-b423-18597b1f6d05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of special characters (non-alphanumeric) in a given string.", "code": "def count_special_characters(s: str) -> int:\n    return sum(1 for char in s if not char.isalnum())", "task_id": "204_6d3cc096-7f18-4d20-80e4-77fdb9839add", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given substring in a string.", "code": "def count_substring(s: str, sub: str) -> int:\n    return s.count(sub)", "task_id": "204_1f09a14a-a26e-4ca3-96f2-1b3b39bc1f97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)", "task_id": "204_fc3d16e2-2507-49f0-a703-42e23bd2c221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given integer in a list.", "code": "def count_occurrences(lst: list, x: int) -> int:\n    return lst.count(x)", "task_id": "204_98c0cd45-bd95-487f-9996-d7d5df7439ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd-positioned bits set to 1 in the binary representation of a given integer.", "code": "def count_odd_bits(n: int) -> int:\n    count = 0\n    position = 1\n    while n > 0:\n        if position % 2 == 1 and (n & 1) == 1:\n            count += 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "203_7e4e0de9-47c0-4355-9c17-d54631091293", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of bits set to 1 in the binary representation of a given integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "203_d72e01df-3317-42fb-8086-93ad34930a2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the XOR of all elements in a given list of integers.", "code": "def xor_sum(arr: list) -> int:\n    result = 0\n    for num in arr:\n        result ^= num\n    return result", "task_id": "203_3e4aa517-6117-4edc-bca2-85fe9b54a48c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given 32-bit unsigned integer.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    for i in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "203_59084173-3a28-4901-bede-046e7154904b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "203_7e3a03c8-cd17-405a-97a6-056fc1905100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap all odd and even bits in a given integer.", "code": "def swap_odd_even_bits(n: int) -> int:\n    even_bits = n & 0xAAAAAAAA\n    odd_bits = n & 0x55555555\n    even_bits >>= 1\n    odd_bits <<= 1\n    return even_bits | odd_bits", "task_id": "203_ab0bb050-7d95-4546-a058-a489d6a8d7e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the binary representation of a given integer.", "code": "def count_trailing_zeros(n: int) -> int:\n    count = 0\n    while (n & 1) == 0 and n != 0:\n        count += 1\n        n >>= 1\n    return count", "task_id": "203_d229b1e3-1690-4dc1-9a4d-1ddacc7f8f50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the parity (even or odd) of the number of bits set to 1 in the binary representation of a given integer.", "code": "def parity(n: int) -> int:\n    count = 0\n    while n > 0:\n        count ^= n & 1\n        n >>= 1\n    return count", "task_id": "203_bb5496e0-9f0c-45a2-9b25-1558afa72353", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum distance between two consecutive 1's in the binary representation of a given integer.", "code": "def binary_gap(n: int) -> int:\n    max_gap = 0\n    current_gap = -1\n    while n > 0:\n        if n & 1 == 1:\n            if current_gap > max_gap:\n                max_gap = current_gap\n            current_gap = 0\n        elif current_gap != -1:\n            current_gap += 1\n        n >>= 1\n    return max_gap", "task_id": "203_a144df99-7532-431a-b017-868449ab1d39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than or equal to a given integer.", "code": "def next_power_of_two(n: int) -> int:\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1", "task_id": "203_0d2b1404-4114-4006-95bb-05a967de32ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples with a separator between them.", "code": "def concatenate_elements_with_separator(test_tup, sep):\n    res = tuple(i + sep + j for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_1f0f98e5-5791-426c-91e0-dc3d453cd659", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include their indices in the result.", "code": "def concatenate_elements_with_indices(test_tup):\n    res = tuple(f'{i}{idx}-{j}{idx+1}' for idx, (i, j) in enumerate(zip(test_tup, test_tup[1:])))\n    return res", "task_id": "206_a0ab81f0-e5ba-427a-9b5e-f961b46c6b10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but concatenate them in reverse order.", "code": "def concatenate_elements_reverse(test_tup):\n    res = tuple(j + i for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_7e661588-526d-4c57-a21c-7434eeb53fa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of every second adjacent element in the given tuples.", "code": "def concatenate_elements_skip_one(test_tup):\n    res = tuple(i + j for i, j in zip(test_tup, test_tup[2:]))\n    return res", "task_id": "206_9156ca99-4a0f-4ce8-b5fd-9d24d895a331", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include the length of each concatenated string.", "code": "def concatenate_elements_with_length(test_tup):\n    res = tuple(f'{i+j}-{len(i+j)}' for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_3e9e3ea9-212e-4c3d-af3f-5f7fc81a8668", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but also include the sum of the ASCII values of the concatenated string.", "code": "def concatenate_elements_with_sum(test_tup):\n    res = tuple(f'{i+j}-{sum(ord(c) for c in i+j)}' for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_c93ad580-77c8-4743-b03e-d1b02fac48d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to uppercase.", "code": "def concatenate_elements_with_upper(test_tup):\n    res = tuple((i + j).upper() for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_b598b55c-2931-4d21-b0fa-203a57115c7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to lowercase.", "code": "def concatenate_elements_with_lower(test_tup):\n    res = tuple((i + j).lower() for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_d7a7b4f7-1608-459c-aa51-46b582af612e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but convert the concatenated string to have alternating case starting with uppercase.", "code": "def concatenate_elements_with_alternating_case(test_tup):\n    def alternate_case(s):\n        return ''.join(c.upper() if i % 2 == 0 else c.lower() for i, c in enumerate(s))\n    res = tuple(alternate_case(i + j) for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_663db603-3d09-4f3d-9448-c330d82491b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the adjacent element concatenation in the given tuples, but reverse the concatenated string.", "code": "def concatenate_elements_with_reversed(test_tup):\n    res = tuple((i + j)[::-1] for i, j in zip(test_tup, test_tup[1:]))\n    return res", "task_id": "206_4d886f54-fd7a-401e-8829-71f93e8ab9b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a valid hexadecimal number (contains only 0-9, a-f, A-F).", "code": "import re\ndef check_hexadecimal(s: str) -> bool:\n    pattern = re.compile(r'^[0-9a-fA-F]+$')\n    return bool(pattern.match(s))", "task_id": "210_7d789a8f-89eb-4b83-97bf-17cb76c5705b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a valid binary number (contains only 0 and 1).", "code": "import re\ndef check_binary(s: str) -> bool:\n    pattern = re.compile(r'^[01]+$')\n    return bool(pattern.match(s))", "task_id": "210_bd23d526-ccd8-4aae-9b88-898c1829e5b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only alphanumeric characters or underscores.", "code": "import re\ndef check_alphanumeric_underscore(s: str) -> bool:\n    pattern = re.compile(r'^[a-zA-Z0-9_]+$')\n    return bool(pattern.match(s))", "task_id": "210_dbf50805-7cd4-4195-ba57-c8dcc59ba90e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only vowels (a, e, i, o, u).", "code": "import re\ndef check_vowels(s: str) -> bool:\n    pattern = re.compile(r'^[aeiouAEIOU]+$')\n    return bool(pattern.match(s))", "task_id": "210_3cdc8982-2740-48f1-95f8-5f1571741c3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only uppercase letters.", "code": "import re\ndef check_uppercase(s: str) -> bool:\n    pattern = re.compile(r'^[A-Z]+$')\n    return bool(pattern.match(s))", "task_id": "210_a5c6fc54-cb8c-49a0-a0e4-52c16fb0cb69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only lowercase letters.", "code": "import re\ndef check_lowercase(s: str) -> bool:\n    pattern = re.compile(r'^[a-z]+$')\n    return bool(pattern.match(s))", "task_id": "210_5e5e3761-989d-4f5f-8e10-5f76a39d91ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only special characters (e.g., !, @, #, $, %, ^, &, *).", "code": "import re\ndef check_special_characters(s: str) -> bool:\n    pattern = re.compile(r'^[!@#$%^&*]+$')\n    return bool(pattern.match(s))", "task_id": "210_97ffffa7-c457-43f8-8e93-464443979e11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only digits.", "code": "import re\ndef check_digits(s: str) -> bool:\n    pattern = re.compile(r'^[0-9]+$')\n    return bool(pattern.match(s))", "task_id": "210_ea9a77d0-9f2b-4d7c-86c1-ad5b1dced438", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only whitespace characters (spaces, tabs, newlines).", "code": "import re\ndef check_whitespace(s: str) -> bool:\n    pattern = re.compile(r'^[\\s]+$')\n    return bool(pattern.match(s))", "task_id": "210_c12f1534-fe5e-4cba-b02e-3f99c055d6ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains only alphabetic characters (a-z, A-Z).", "code": "import re\ndef check_alphabetic(s: str) -> bool:\n    pattern = re.compile(r'^[a-zA-Z]+$')\n    return bool(pattern.match(s))", "task_id": "210_1072f789-c2a0-4aa1-997c-02796585c50d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common substring between two given strings.", "code": "def longest_common_substring(s1: str, s2: str) -> int:\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    max_length = 0\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n    return max_length", "task_id": "207_5148d9e1-a10c-4d68-be13-2bcbfebb812b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest palindromic subsequence in a given string.", "code": "def longest_palindromic_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "task_id": "207_bbdb674d-ab1b-4cda-944a-f1a5f2aff89e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given array of integers.", "code": "def longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "207_c8a630f1-8afa-48b3-b48d-de0b0a8ec736", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two given strings.", "code": "def longest_common_subsequence(s1: str, s2: str) -> int:\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "207_842c4842-b1b7-4b8f-ac88-6d71b955a19d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest repeating substring in a given string.", "code": "def longest_repeating_substring(s: str) -> int:\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    max_length = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                max_length = max(max_length, dp[i][j])\n    return max_length", "task_id": "207_0412a26f-1e30-43de-8142-98a5ce1ec240", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with a given sum in a given array of integers.", "code": "def longest_subarray_with_sum(arr: list[int], target: int) -> int:\n    sum_map = {}\n    curr_sum = 0\n    max_len = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum == target:\n            max_len = i + 1\n        if curr_sum - target in sum_map:\n            max_len = max(max_len, i - sum_map[curr_sum - target])\n        if curr_sum not in sum_map:\n            sum_map[curr_sum] = i\n    return max_len", "task_id": "207_3320d78f-2853-427f-8075-4f98058f4456", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters in a given string.", "code": "def longest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    char_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if s[i] in char_index and char_index[s[i]] >= start:\n            start = char_index[s[i]] + 1\n        char_index[s[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_0a96005f-8a0b-4ffa-a35d-450bb65c4177", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with distinct elements in a given array of integers.", "code": "def longest_subarray_with_distinct_elements(arr: list[int]) -> int:\n    n = len(arr)\n    element_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if arr[i] in element_index and element_index[arr[i]] >= start:\n            start = element_index[arr[i]] + 1\n        element_index[arr[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_a6b0806e-0891-431b-a95a-1140fa56e88f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence with exactly k distinct characters in a given string.", "code": "def longest_subsequence_with_k_distinct(s: str, k: int) -> int:\n    n = len(s)\n    char_count = {}\n    max_length = 0\n    start = 0\n    distinct_count = 0\n    for i in range(n):\n        if s[i] not in char_count or char_count[s[i]] == 0:\n            distinct_count += 1\n        char_count[s[i]] = char_count.get(s[i], 0) + 1\n        while distinct_count > k:\n            char_count[s[start]] -= 1\n            if char_count[s[start]] == 0:\n                distinct_count -= 1\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_08b5dc55-9a9a-48cc-8868-534a69f0071d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with at most k distinct elements in a given array of integers.", "code": "def longest_subarray_with_at_most_k_distinct(arr: list[int], k: int) -> int:\n    n = len(arr)\n    element_count = {}\n    max_length = 0\n    start = 0\n    distinct_count = 0\n    for i in range(n):\n        if arr[i] not in element_count or element_count[arr[i]] == 0:\n            distinct_count += 1\n        element_count[arr[i]] = element_count.get(arr[i], 0) + 1\n        while distinct_count > k:\n            element_count[arr[start]] -= 1\n            if element_count[arr[start]] == 0:\n                distinct_count -= 1\n            start += 1\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "207_347a55f0-24b5-4ee8-b941-edb0e819e8c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose even bits are set.", "code": "def count_even_bits(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_d0eac248-f0ab-4efb-bc02-0958ad6036e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose odd bits are set.", "code": "def count_odd_bits(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_1859d6f4-d977-41e9-bc5c-cf9b0e9ae280", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose mth and nth bits are set.", "code": "def count_bits_set(n, m):\n    if n == m:\n        return 1\n    count = pow(2, abs(n - m) - 1)\n    return count", "task_id": "211_9994c4b9-0313-4698-86bf-b38d4372f71b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose oth and nth bits are unset.", "code": "def count_bits_unset(n):\n    if n == 1:\n        return 1\n    count = pow(2, n - 2)\n    return count", "task_id": "211_43ce00cf-cbea-418a-8d12-84ffc8f037cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose bits from start to end are set.", "code": "def count_bits_range(n, start, end):\n    if start == end:\n        return 1\n    count = pow(2, end - start - 1)\n    return count", "task_id": "211_5ddfcd3b-2207-48d2-9e3e-efa7036f24f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose alternate bits are set.", "code": "def count_bits_alternate(n):\n    if n == 0:\n        return 0\n    count = pow(2, (n // 2))\n    return count", "task_id": "211_2dbfac9f-c7ea-484e-a0af-63e3f51e32a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose prime indexed bits are set.", "code": "def count_bits_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = sum(1 for i in range(n) if is_prime(i))\n    return pow(2, count)", "task_id": "211_1feaef1d-b2c4-44ca-b571-8f61470280bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose Fibonacci indexed bits are set.", "code": "def count_bits_fibonacci(n):\n    def fibonacci_sequence(limit):\n        seq = [0, 1]\n        while seq[-1] < limit:\n            seq.append(seq[-1] + seq[-2])\n        return seq[:-1]\n    fib_indices = fibonacci_sequence(n)\n    count = len(fib_indices)\n    return pow(2, count)", "task_id": "211_691eb7ca-cbf5-4806-9d85-456650f173da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose power of two indexed bits are set.", "code": "def count_bits_power_of_two(n):\n    count = 0\n    i = 1\n    while i < n:\n        count += 1\n        i *= 2\n    return pow(2, count)", "task_id": "211_f8cab114-0576-4e17-a253-82564536bc19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count numbers whose palindrome indexed bits are set.", "code": "def count_bits_palindrome(n):\n    def is_palindrome(num):\n        s = str(num)\n        return s == s[::-1]\n    count = sum(1 for i in range(n) if is_palindrome(i))\n    return pow(2, count)", "task_id": "211_b366fec8-4923-43c0-bc22-7951cedbd90e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition of two integer tuples.", "code": "def add_tuples(tup1, tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_e0f1c006-f53b-466c-bae2-6f60a299c4ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication of two integer tuples.", "code": "def multiply_tuples(tup1, tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_3f12f381-2fb1-43d3-8046-63595bad94d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction of two integer tuples.", "code": "def subtract_tuples(tup1, tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_4e91d6be-a2ee-417d-b5c7-8fdebf16b936", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division of two integer tuples.", "code": "def divide_tuples(tup1, tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(tup1, tup2))\n  return res", "task_id": "213_d5bcbfde-1688-437f-b790-ce2c6568a8d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of two lists of strings.", "code": "def concatenate_lists(list1, list2):\n  res = [ele1 + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_e0bad365-7066-4256-84ed-05aa589f1d18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition of two lists of integers.", "code": "def add_lists(list1, list2):\n  res = [ele1 + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_5606ce30-9666-4e8f-89c0-d3060f139533", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication of two lists of integers.", "code": "def multiply_lists(list1, list2):\n  res = [ele1 * ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_7a66571a-8f1c-4154-adb8-695855452e8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction of two lists of integers.", "code": "def subtract_lists(list1, list2):\n  res = [ele1 - ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_a2deb6f9-de3e-4e4d-8dc9-b182ac33d480", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division of two lists of integers.", "code": "def divide_lists(list1, list2):\n  res = [ele1 / ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_6177de57-9f13-4b9e-b95e-d40f419ece5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the concatenation of two lists of strings with a space in between.", "code": "def concatenate_string_lists(list1, list2):\n  res = [ele1 + ' ' + ele2 for ele1, ele2 in zip(list1, list2)]\n  return res", "task_id": "213_44bbbce0-61de-4455-8dec-f03df4e9a2cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to delete the largest element from the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef remove_largest_insert(heap, a):\n    hq.heapify(heap)\n    heap.remove(max(heap))\n    hq.heappush(heap, a)\n    return heap", "task_id": "209_178f9fcf-28f1-4394-966a-33359d738d0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the largest element in the given heap with the sum of all elements in the heap.", "code": "import heapq as hq\n\ndef replace_max_with_sum(heap):\n    hq.heapify(heap)\n    total_sum = sum(heap)\n    heap.remove(max(heap))\n    hq.heappush(heap, total_sum)\n    return heap", "task_id": "209_24f19339-4ae4-47ea-8f0b-759f71fc4e22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a new item into the given heap and return the heap sorted in ascending order.", "code": "import heapq as hq\n\ndef insert_and_sort(heap, a):\n    hq.heapify(heap)\n    hq.heappush(heap, a)\n    return sorted(heap)", "task_id": "209_ed8072e2-db14-4eb5-884a-c5862cb01c48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove and return the smallest element from the given heap.", "code": "import heapq as hq\n\ndef remove_and_return_smallest(heap):\n    hq.heapify(heap)\n    return hq.heappop(heap)", "task_id": "209_d27c9ff1-97f1-451d-9c55-c6d601d62069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the smallest element in the given heap with a new item and return the new smallest element.", "code": "import heapq as hq\n\ndef replace_and_return_smallest(heap, a):\n    hq.heapify(heap)\n    hq.heapreplace(heap, a)\n    return heap[0]", "task_id": "209_70de7a29-8821-47d7-b5f7-9f2ac582a51c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double the smallest element in the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef double_and_insert(heap, a):\n    hq.heapify(heap)\n    smallest = hq.heappop(heap)\n    hq.heappush(heap, smallest * 2)\n    hq.heappush(heap, a)\n    return heap", "task_id": "209_6d35eac9-c48d-4018-91b1-f0587f061025", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove a specified element from the given heap and then insert a new item.", "code": "import heapq as hq\n\ndef remove_and_insert(heap, remove_val, insert_val):\n    hq.heapify(heap)\n    heap.remove(remove_val)\n    hq.heapify(heap)\n    hq.heappush(heap, insert_val)\n    return heap", "task_id": "209_35db985c-b7c8-4407-a29d-5384531a902a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the second smallest element in the given heap with a new item.", "code": "import heapq as hq\n\ndef replace_second_smallest(heap, a):\n    hq.heapify(heap)\n    smallest = hq.heappop(heap)\n    second_smallest = hq.heappop(heap)\n    hq.heappush(heap, a)\n    hq.heappush(heap, smallest)\n    return heap", "task_id": "209_d9e44163-9b5a-4eff-bb39-357d1bff761f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the largest element from the given heap, double it, and then insert it back into the heap.", "code": "import heapq as hq\n\ndef remove_and_double_largest(heap):\n    hq.heapify(heap)\n    largest = max(heap)\n    heap.remove(largest)\n    hq.heappush(heap, largest * 2)\n    return heap", "task_id": "209_61feec02-9d7a-4680-bc22-1127e45905d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the smallest element from the given heap, insert a new item, and then insert the sum of all elements in the heap.", "code": "import heapq as hq\n\ndef remove_and_insert_sum(heap, a):\n    hq.heapify(heap)\n    hq.heappop(heap)\n    hq.heappush(heap, a)\n    total_sum = sum(heap)\n    hq.heappush(heap, total_sum)\n    return heap", "task_id": "209_cf6fd722-f45c-4960-b8df-a55f1923e176", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Fahrenheit to Celsius.", "code": "def fahrenheit_to_celsius(fahrenheit: float) -> float:\n    celsius = (fahrenheit - 32) * 5.0/9.0\n    return celsius", "task_id": "214_688a6d27-65ce-4f13-a493-7eb93b8bf4ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Celsius to Kelvin.", "code": "def celsius_to_kelvin(celsius: float) -> float:\n    kelvin = celsius + 273.15\n    return kelvin", "task_id": "214_5dcde70f-ff88-4c4c-9845-1abf6f25bbb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert miles to kilometers.", "code": "def miles_to_kilometers(miles: float) -> float:\n    kilometers = miles * 1.60934\n    return kilometers", "task_id": "214_9d6410b2-0395-485c-81b9-8009375d3dd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert inches to centimeters.", "code": "def inches_to_centimeters(inches: float) -> float:\n    centimeters = inches * 2.54\n    return centimeters", "task_id": "214_7faa0649-7c45-4f1a-9ef2-2b600d7954f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert pounds to kilograms.", "code": "def pounds_to_kilograms(pounds: float) -> float:\n    kilograms = pounds * 0.453592\n    return kilograms", "task_id": "214_5e2ef59e-760d-48a6-96b5-606a88913dad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert minutes to seconds.", "code": "def minutes_to_seconds(minutes: float) -> float:\n    seconds = minutes * 60\n    return seconds", "task_id": "214_8e9ecdc1-2c6e-41dc-a355-122b7c4643e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert hours to minutes.", "code": "def hours_to_minutes(hours: float) -> float:\n    minutes = hours * 60\n    return minutes", "task_id": "214_319889aa-93ee-41d8-a738-694e9d756f2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert days to hours.", "code": "def days_to_hours(days: float) -> float:\n    hours = days * 24\n    return hours", "task_id": "214_4f0fcec1-9211-4b60-8901-c0466dfffff2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert weeks to days.", "code": "def weeks_to_days(weeks: float) -> float:\n    days = weeks * 7\n    return days", "task_id": "214_cd3168a4-fdba-47b2-b1bf-c6066ee2da7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert months to days, assuming each month has 30 days.", "code": "def months_to_days(months: float) -> float:\n    days = months * 30\n    return days", "task_id": "214_d81baad7-95fe-44f0-915c-0afac2c97650", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of n natural numbers.", "code": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum", "task_id": "212_bab12db9-166c-48d9-970c-ce772c3c5a5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of n natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**2\n    return sum", "task_id": "212_eb3f5432-68c7-4642-b411-7ea462e9447f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of n natural numbers.", "code": "def sum_of_fifths(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**5\n    return sum", "task_id": "212_142b0013-bd85-455a-b49c-1a9bbd2d6614", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of n natural numbers.", "code": "import math\n\ndef sum_of_factorials(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += math.factorial(i)\n    return sum", "task_id": "212_e5c0567a-ad84-4636-8558-e660e4bf3a22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n even natural numbers.", "code": "def sum_of_even_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**2\n    return sum", "task_id": "212_24dc45e7-09f2-44da-93c9-480d60b5b77c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n odd natural numbers.", "code": "def sum_of_odd_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i-1)**3\n    return sum", "task_id": "212_001b6a0a-a710-4085-b4b6-1e5b1efa48c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the digits of a number n.", "code": "def sum_of_squares_of_digits(n):\n    sum = 0\n    while n > 0:\n        digit = n % 10\n        sum += digit**2\n        n //= 10\n    return sum", "task_id": "212_198b9bb8-6994-426f-ab06-d1008c86b314", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n prime numbers.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_prime_squares(n):\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num**2\n            count += 1\n        num += 1\n    return sum", "task_id": "212_95df0a87-0840-49f1-97cb-b1ecd13e090a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci_squares(n):\n    a, b = 0, 1\n    sum = 0\n    for _ in range(n):\n        sum += a**2\n        a, b = b, a + b\n    return sum", "task_id": "212_292f15a1-c7a0-4ef4-a189-60299ea2a276", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the square roots of the first n perfect squares.", "code": "def sum_of_perfect_square_roots(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum", "task_id": "212_e9e1a228-9f64-4cef-9eb8-da55a7f28e4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a string and returns the string reversed.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "215_757b67e6-dd28-463a-80eb-1809e5f4fa8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and returns the sum of the list.", "code": "def sum_of_list(nums: list) -> int:\n    return sum(nums)", "task_id": "215_eae465fd-fbcf-480f-83a8-38cae4295693", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that checks if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "215_2b7e0ddd-aaae-4dd0-a87b-1654a1060822", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "215_811e53c8-6ea1-4b21-b495-e6f0b7a6e549", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds the maximum number in a list of integers.", "code": "def find_max(nums: list) -> int:\n    return max(nums)", "task_id": "215_33243d40-a79b-4c4c-93ab-38844c8bd8e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that counts the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "215_9509a7cf-84d6-4fbb-bc86-cbee9370fa63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns the first n numbers in the Fibonacci sequence.", "code": "def fibonacci(n: int) -> list:\n    fib_seq = [0, 1]\n    for i in range(2, n):\n        fib_seq.append(fib_seq[-1] + fib_seq[-2])\n    return fib_seq[:n]", "task_id": "215_c3897fe4-2e88-48a5-a7bd-a3e822cb3214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that checks if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "215_bd4f446a-3184-4974-b941-e61c776ff38c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that merges two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    return sorted(list1 + list2)", "task_id": "215_3106a70d-0883-41a7-8326-33c12e2de5d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that removes duplicates from a list of integers.", "code": "def remove_duplicates(nums: list) -> list:\n    return list(set(nums))", "task_id": "215_b35e217f-4bca-4f3f-aa94-9d66762e7c87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_NonRepeated_Char(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_9f4a1492-40e9-40fa-b1bf-bfe8070878a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_Repeated_Word(s: str) -> str:\n    words = s.split()\n    h = {}\n    for word in words:\n        if word in h:\n            return word\n        else:\n            h[word] = 0\n    return ''", "task_id": "217_5e2fbb29-c798-40f4-931c-81cedf07d74e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_NonRepeated_Word(s: str) -> str:\n    words = s.split()\n    h = {}\n    for word in words:\n        if word in h:\n            h[word] += 1\n        else:\n            h[word] = 1\n    for word in words:\n        if h[word] == 1:\n            return word\n    return ''", "task_id": "217_2ba531fe-538b-4006-b58a-42fa9335d2ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first repeated character in a given string.", "code": "def first_Repeated_Char_Index(s: str) -> int:\n    h = {}\n    for i, ch in enumerate(s):\n        if ch in h:\n            return i\n        else:\n            h[ch] = 0\n    return -1", "task_id": "217_260a8ca5-4185-4c7c-baaa-96b374ba4dbf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first non-repeated character in a given string.", "code": "def first_NonRepeated_Char_Index(s: str) -> int:\n    h = {}\n    for i, ch in enumerate(s):\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for i, ch in enumerate(s):\n        if h[ch] == 1:\n            return i\n    return -1", "task_id": "217_fa8d966f-c1e7-4f46-9385-e6789a7125e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string, ignoring case.", "code": "def first_Repeated_Char_IgnoreCase(s: str) -> str:\n    h = {}\n    for ch in s.lower():\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return ''", "task_id": "217_5a7b58da-7817-4e85-a8e8-31ac0b2fe0d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring case.", "code": "def first_NonRepeated_Char_IgnoreCase(s: str) -> str:\n    h = {}\n    for ch in s.lower():\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s.lower():\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_cc57430b-912e-47d6-b03f-df94f0fd9f9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string, ignoring spaces.", "code": "def first_Repeated_Char_IgnoreSpaces(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch == ' ':\n            continue\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return ''", "task_id": "217_3aa919ee-2a26-478f-9cb4-e7e85a2edbb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring spaces.", "code": "def first_NonRepeated_Char_IgnoreSpaces(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch == ' ':\n            continue\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if ch == ' ':\n            continue\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_32f29490-058d-4cfd-abe9-37727cda3ce8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string, ignoring punctuation.", "code": "import string\n\ndef first_Repeated_Char_IgnorePunctuation(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch in string.punctuation:\n            continue\n        if ch in h:\n            return ch\n        else:\n            h[ch] = 0\n    return ''", "task_id": "217_209c2241-119b-42bc-a812-4fc71a6f2793", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string, ignoring punctuation.", "code": "import string\n\ndef first_NonRepeated_Char_IgnorePunctuation(s: str) -> str:\n    h = {}\n    for ch in s:\n        if ch in string.punctuation:\n            continue\n        if ch in h:\n            h[ch] += 1\n        else:\n            h[ch] = 1\n    for ch in s:\n        if ch in string.punctuation:\n            continue\n        if h[ch] == 1:\n            return ch\n    return ''", "task_id": "217_974ff209-5433-42e0-ac6d-5f504919a67a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top k largest elements in a given list.", "code": "def find_top_k_elements(arr, k):\n    return sorted(arr, reverse=True)[:k]", "task_id": "219_ffd384a5-8e89-4364-8cd0-46f5a9f57c87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the bottom k smallest elements in a given list.", "code": "def find_bottom_k_elements(arr, k):\n    return sorted(arr)[:k]", "task_id": "219_b333ebde-66ab-49f2-8af7-58fe22044fac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in a given list.", "code": "def find_kth_largest(arr, k):\n    return sorted(arr, reverse=True)[k-1]", "task_id": "219_3bd36d98-334c-406a-8d10-028b0fedc8c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element in a given list.", "code": "def find_kth_smallest(arr, k):\n    return sorted(arr)[k-1]", "task_id": "219_01ccd85d-a999-4da3-8ca5-966f15d53f60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a given list.", "code": "def find_median(arr):\n    arr = sorted(arr)\n    n = len(arr)\n    if n % 2 == 1:\n        return arr[n//2]\n    else:\n        return (arr[n//2 - 1] + arr[n//2]) / 2", "task_id": "219_637f341e-b2a6-4541-8723-22937d0e8262", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the mode of a given list (the element that appears most frequently).", "code": "from collections import Counter\n\ndef find_mode(arr):\n    count = Counter(arr)\n    return count.most_common(1)[0][0]", "task_id": "219_32869340-f8c6-49c3-9313-4f1c6a4a119b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given list.", "code": "def find_unique_elements(arr):\n    return list(set(arr))", "task_id": "219_6f7735f7-96df-48eb-9247-135fb0e16d56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all duplicate elements in a given list.", "code": "def find_duplicates(arr):\n    seen = set()\n    duplicates = set()\n    for x in arr:\n        if x in seen:\n            duplicates.add(x)\n        else:\n            seen.add(x)\n    return list(duplicates)", "task_id": "219_5c741cdb-dcd9-4a46-81a4-cd68572ab3c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the range of a given list (the difference between the maximum and minimum elements).", "code": "def find_range(arr):\n    return max(arr) - min(arr)", "task_id": "219_2cfe1778-d8ea-43e3-b2f3-75fbca73d0a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given list.", "code": "def find_sum_of_elements(arr):\n    return sum(arr)", "task_id": "219_eb67a131-9f40-4215-8884-de25e90c95b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, but the lists can contain other lists as elements.", "code": "def check_subset_list(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_81618365-c7ef-4f75-a449-7193b8a09882", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering duplicate elements.", "code": "def check_subset_list_with_duplicates(list1, list2):\n    from collections import Counter\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return not (Counter(flat_list2) - Counter(flat_list1))", "task_id": "216_b5894f5e-9134-4853-b934-5ddbbd5010f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ignoring case for string elements.", "code": "def check_subset_list_ignore_case(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = [str(item).lower() if isinstance(item, str) else item for item in flatten(list1)]\n    flat_list2 = [str(item).lower() if isinstance(item, str) else item for item in flatten(list2)]\n    return all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_2e8b2bda-d89f-44fc-a605-3f8210eb2a0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the order of elements.", "code": "def check_subset_list_with_order(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    it = iter(flat_list1)\n    return all(any(elem == x for x in it) for elem in flat_list2)", "task_id": "216_6fd380ed-0ee8-4723-90e4-693c834652e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for a certain number of mismatches.", "code": "def check_subset_list_with_tolerance(list1, list2, tolerance):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    mismatches = sum(1 for elem in flat_list2 if elem not in flat_list1)\n    return mismatches <= tolerance", "task_id": "216_7dc5d523-4cba-465d-b003-c15d021c783c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the types of elements.", "code": "def check_subset_list_with_types(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(any(isinstance(elem, type(x)) and elem == x for x in flat_list1) for elem in flat_list2)", "task_id": "216_0cc63c16-3296-40cc-93f0-20e1412eddd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for numerical elements to be within a certain threshold.", "code": "def check_subset_list_with_threshold(list1, list2, threshold):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    def is_within_threshold(a, b, threshold):\n        return abs(a - b) <= threshold\n    return all(any(is_within_threshold(elem, x, threshold) if isinstance(elem, (int, float)) and isinstance(x, (int, float)) else elem == x for x in flat_list1) for elem in flat_list2)", "task_id": "216_feba1f36-2b4a-444e-ab9f-564a4847a72a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, using a custom comparator function.", "code": "def check_subset_list_with_custom_comparator(list1, list2, comparator):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(any(comparator(elem, x) for x in flat_list1) for elem in flat_list2)", "task_id": "216_e92293ec-ec57-4be7-8f41-80764dd29d6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ignoring the order of elements.", "code": "def check_subset_list_with_any_order(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return set(flat_list2).issubset(set(flat_list1))", "task_id": "216_de233ddb-db89-4cec-bffb-83e1584bcfc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering the length of the lists.", "code": "def check_subset_list_with_length(list1, list2):\n    def flatten(lst):\n        for item in lst:\n            if isinstance(item, list):\n                yield from flatten(item)\n            else:\n                yield item\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return len(flat_list2) <= len(flat_list1) and all(elem in flat_list1 for elem in flat_list2)", "task_id": "216_dca744cc-1940-48a5-ae3a-4c0a56538c5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only adding the smaller number to itself.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A += A\n        else:\n            B += B\n        operations += 1\n    return operations", "task_id": "218_a7a92366-c034-4c4e-9ae2-b137192e40fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only subtracting the smaller number from the larger number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A -= B\n        else:\n            B -= A\n        operations += 1\n    return operations", "task_id": "218_6a0da581-034e-44bb-ac68-9f637306775c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only multiplying the smaller number by 2.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A *= 2\n        else:\n            B *= 2\n        operations += 1\n    return operations", "task_id": "218_ca085251-2bb2-4c18-a9f1-74ac9941da29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only dividing the larger number by 2.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A //= 2\n        else:\n            B //= 2\n        operations += 1\n    return operations", "task_id": "218_bcb3ef28-c6ba-4568-a9e2-70ddbbb38938", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only adding 1 to the smaller number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A += 1\n        else:\n            B += 1\n        operations += 1\n    return operations", "task_id": "218_22f3b848-6771-401c-a987-9e93271f9196", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only subtracting 1 from the larger number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A -= 1\n        else:\n            B -= 1\n        operations += 1\n    return operations", "task_id": "218_4d1678ca-af2d-4ec3-86fa-6a0c9e265f46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only adding the smaller number to itself or subtracting 1 from the larger number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A += A\n        else:\n            B -= 1\n        operations += 1\n    return operations", "task_id": "218_acfd6cb8-d804-434b-ad59-6d6a9c961f22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only multiplying the smaller number by 2 or dividing the larger number by 2.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A *= 2\n        else:\n            B //= 2\n        operations += 1\n    return operations", "task_id": "218_062a9663-2e8b-413a-970a-101e6a51d1e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only adding 1 to the smaller number or subtracting 1 from the larger number.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A += 1\n        else:\n            B -= 1\n        operations += 1\n    return operations", "task_id": "218_20c6a4a4-3ad9-4c7e-8357-2dd80df21ee0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only multiplying the smaller number by 3.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A < B:\n            A *= 3\n        else:\n            B *= 3\n        operations += 1\n    return operations", "task_id": "218_84ac6b4a-e572-481f-a121-7789cd04052f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum operations required to make two numbers equal by only dividing the larger number by 3.", "code": "def min_operations_to_make_equal(A: int, B: int) -> int:\n    operations = 0\n    while A != B:\n        if A > B:\n            A //= 3\n        else:\n            B //= 3\n        operations += 1\n    return operations", "task_id": "218_6214645b-aca0-4166-b375-2724370d4971", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or semicolons with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,;]', ':', text, n)", "task_id": "220_85dca5af-147e-4e18-8fcb-1544c1ffc298", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or exclamation marks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,!]', ':', text, n)", "task_id": "220_c65695dd-63e3-4c80-abcc-6bbefaca54f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or question marks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,?]', ':', text, n)", "task_id": "220_675fb2b4-3dfe-449e-bd82-5d4e18f0a479", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or colons with a semicolon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,:]', ';', text, n)", "task_id": "220_28a0326f-746f-4fbe-9365-e87710e840d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or hyphens with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,-]', ':', text, n)", "task_id": "220_d46eab2a-6b83-46f9-94b9-97b01f34bc18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or underscores with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,_]', ':', text, n)", "task_id": "220_0d56a5fa-978c-40b5-9047-76ee648b9ee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or slashes with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,/]', ':', text, n)", "task_id": "220_d934621d-14b3-41ba-bde6-c3f0b7ff90e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or backslashes with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,\\\\]', ':', text, n)", "task_id": "220_e8fe760b-caf9-4d7b-ac92-15a049193471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or asterisks with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,*]', ':', text, n)", "task_id": "220_37bbada6-a563-4fb1-8948-71e546fc083e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace maximum n occurrences of spaces, commas, or plus signs with a colon.", "code": "import re\ndef replace_max_specialchar(text, n):\n    return re.sub('[ ,+]', ':', text, n)", "task_id": "220_39aa84fc-a558-48d6-8d4e-51d7311849c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are even numbers.", "code": "def all_elements_even(numbers: tuple) -> bool:\n    return all(num % 2 == 0 for num in numbers)", "task_id": "222_1859d79e-6a66-4824-8c94-23217544d944", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are positive numbers.", "code": "def all_elements_positive(numbers: tuple) -> bool:\n    return all(num > 0 for num in numbers)", "task_id": "222_6922cd3d-63c5-408c-a79d-162acd776e9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are unique.", "code": "def all_elements_unique(elements: tuple) -> bool:\n    return len(elements) == len(set(elements))", "task_id": "222_9db6490d-0080-4bd1-b190-25cacbd3bb5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are strings.", "code": "def all_elements_strings(elements: tuple) -> bool:\n    return all(isinstance(ele, str) for ele in elements)", "task_id": "222_ce7151b1-851c-4076-b8ae-5a4415d10d8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are non-empty.", "code": "def all_elements_non_empty(elements: tuple) -> bool:\n    return all(bool(ele) for ele in elements)", "task_id": "222_1209d1a1-99c2-4431-8dba-63392589db18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings are in uppercase.", "code": "def all_elements_uppercase(strings: tuple) -> bool:\n    return all(s.isupper() for s in strings)", "task_id": "222_0d63a839-1699-4296-a51a-2b518cebe10a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings start with a vowel.", "code": "def all_elements_start_with_vowel(strings: tuple) -> bool:\n    vowels = 'AEIOUaeiou'\n    return all(s[0] in vowels for s in strings if s)", "task_id": "222_763b8d78-a162-4030-9a0e-d50a4c9551ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings have a length greater than five.", "code": "def all_elements_length_greater_than_five(strings: tuple) -> bool:\n    return all(len(s) > 5 for s in strings)", "task_id": "222_9d9ab693-2537-4a18-a752-f5f1cbfe1364", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple of strings are palindromes.", "code": "def all_elements_palindromes(strings: tuple) -> bool:\n    return all(s == s[::-1] for s in strings)", "task_id": "222_df7914b9-0566-4494-bf46-3a8b723f4f02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all the elements in a tuple are integers.", "code": "def all_elements_integers(elements: tuple) -> bool:\n    return all(isinstance(ele, int) for ele in elements)", "task_id": "222_effd7586-8206-4039-94a2-f8f68aba9011", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first odd number in a given list of numbers.", "code": "def find_first_odd(nums):\n    first_odd = next((el for el in nums if el % 2 != 0), -1)\n    return first_odd", "task_id": "221_6fd540ee-6829-4a8e-acc7-0e432d5dfcac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first positive number in a given list of numbers.", "code": "def find_first_positive(nums):\n    first_positive = next((el for el in nums if el > 0), -1)\n    return first_positive", "task_id": "221_730ae0da-ebb1-4558-a8f6-ba555331c10a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first negative number in a given list of numbers.", "code": "def find_first_negative(nums):\n    first_negative = next((el for el in nums if el < 0), -1)\n    return first_negative", "task_id": "221_ba415280-5a9b-4d6c-9fd1-7c245291d6b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number that is a multiple of five in a given list of numbers.", "code": "def find_first_multiple_of_five(nums):\n    first_multiple_of_five = next((el for el in nums if el % 5 == 0), -1)\n    return first_multiple_of_five", "task_id": "221_1f7c3aae-799b-46c8-a268-5eb11a6a19a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first prime number in a given list of numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_prime(nums):\n    first_prime = next((el for el in nums if is_prime(el)), -1)\n    return first_prime", "task_id": "221_49988847-3667-4609-9d6b-42f6c05646cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first palindrome number in a given list of numbers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_first_palindrome(nums):\n    first_palindrome = next((el for el in nums if is_palindrome(el)), -1)\n    return first_palindrome", "task_id": "221_aeb99585-5f83-4f5a-942e-61e3e7b86612", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number greater than ten in a given list of numbers.", "code": "def find_first_greater_than_ten(nums):\n    first_greater_than_ten = next((el for el in nums if el > 10), -1)\n    return first_greater_than_ten", "task_id": "221_70be6ba2-eede-418a-980c-2cf9406a6350", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first even number in a given list of numbers.", "code": "def find_first_even_index(nums):\n    first_even_index = next((i for i, el in enumerate(nums) if el % 2 == 0), -1)\n    return first_even_index", "task_id": "221_26142bf3-4bd3-44e9-988b-8a24289dc5db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first odd number in a given list of numbers.", "code": "def find_first_odd_index(nums):\n    first_odd_index = next((i for i, el in enumerate(nums) if el % 2 != 0), -1)\n    return first_odd_index", "task_id": "221_5166eda3-0ed6-47c4-98c0-309fd33cc3f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-zero number in a given list of numbers.", "code": "def find_first_non_zero(nums):\n    first_non_zero = next((el for el in nums if el != 0), -1)\n    return first_non_zero", "task_id": "221_c231c8bb-1f27-4b96-be08-d40ae457a0ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the majority element in a given unsorted array. The majority element is the element that appears more than n/2 times.", "code": "def find_majority_element(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n        if count[num] > len(arr) // 2:\n            return num\n    return -1", "task_id": "223_f8d51317-7533-4a45-9c5d-2a4f9c56cd73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a given array.", "code": "def find_second_largest(arr):\n    first, second = float('-inf'), float('-inf')\n    for num in arr:\n        if num > first:\n            second = first\n            first = num\n        elif num > second and num != first:\n            second = num\n    return second", "task_id": "223_dac0f991-7048-4914-b995-d77f7ef79c2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a given array.", "code": "def find_unique_elements(arr):\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n    return [num for num, cnt in count.items() if cnt == 1]", "task_id": "223_e28f944d-40d5-421d-9aa7-6637f6cd2768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr, n):\n    total = n * (n + 1) // 2\n    return total - sum(arr)", "task_id": "223_d373392f-2c6d-45fb-bb6d-b37e807995b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in an array containing numbers from 1 to n-1.", "code": "def find_duplicate_number(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "223_a938fcce-3e16-4dc7-a1b0-98f8725e009a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 & set2)", "task_id": "223_61247ab2-6e0a-4df6-920e-9c4857dcdead", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the union of two arrays.", "code": "def find_union(arr1, arr2):\n    set1, set2 = set(arr1), set(arr2)\n    return list(set1 | set2)", "task_id": "223_fe2b381b-80f7-4bed-9956-b79dcde4309e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest consecutive elements sequence in an array.", "code": "def find_longest_consecutive_sequence(arr):\n    num_set = set(arr)\n    longest_streak = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak", "task_id": "223_cadf4f5c-30f5-4d0a-b79b-6c0f2dcdd6c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in an array.", "code": "def find_kth_largest(arr, k):\n    arr.sort(reverse=True)\n    return arr[k-1]", "task_id": "223_818bf088-9a78-4238-a25d-371001a8c2ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair of elements in an array that sum up to a given target.", "code": "def find_pair_with_sum(arr, target):\n    seen = {}\n    for num in arr:\n        complement = target - num\n        if complement in seen:\n            return (complement, num)\n        seen[num] = True\n    return (-1, -1)", "task_id": "223_c7bf884f-d960-46b0-a810-b420f7e74ce7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "227_ba0cb0c7-f5b2-4604-a7d7-17f709fc748e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "227_2ab7ebe1-518a-4f38-ac1f-9f60c93c9be6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of three numbers.", "code": "def sum_of_three(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "227_83fb6be7-4656-4cda-8dea-6cad4d96a49c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of three numbers.", "code": "def product_of_three(a: int, b: int, c: int) -> int:\n    return a * b * c", "task_id": "227_129625d6-bbe0-46ce-aee0-b86fa77ad970", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of three numbers.", "code": "def average_of_three(a: int, b: int, c: int) -> float:\n    return (a + b + c) / 3", "task_id": "227_40bfff15-bef0-40fb-a561-5b10bca660ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of three numbers.", "code": "def median_of_three(a: int, b: int, c: int) -> int:\n    return sorted([a, b, c])[1]", "task_id": "227_c927ff21-0ed1-4c31-bb6e-f1e97eedc41a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any of the three numbers is negative.", "code": "def is_any_negative(a: int, b: int, c: int) -> bool:\n    return a < 0 or b < 0 or c < 0", "task_id": "227_995e1d0b-158a-413a-86a9-8c95ac646a30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all three numbers are positive.", "code": "def all_positive(a: int, b: int, c: int) -> bool:\n    return a > 0 and b > 0 and c > 0", "task_id": "227_e391cd7c-0212-402c-a5ad-c0fc823812e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all three numbers are equal.", "code": "def are_all_equal(a: int, b: int, c: int) -> bool:\n    return a == b == c", "task_id": "227_ea2e8a8b-23b4-4a3a-9c6c-41b0f70e3e79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any of the three numbers is even.", "code": "def is_any_even(a: int, b: int, c: int) -> bool:\n    return a % 2 == 0 or b % 2 == 0 or c % 2 == 0", "task_id": "227_0132dd90-f92f-40db-9fe2-09e6b3ced114", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd-positioned set bits in a given number.", "code": "def count_odd_bits(n):\n    count = 0\n    position = 1\n    while n:\n        if position % 2 != 0:\n            count += n & 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "224_38140945-72f8-4766-b0a5-6cc4b01afb58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even-positioned set bits in a given number.", "code": "def count_even_bits(n):\n    count = 0\n    position = 1\n    while n:\n        if position % 2 == 0:\n            count += n & 1\n        n >>= 1\n        position += 1\n    return count", "task_id": "224_0945e496-53fd-4f8e-be97-3e596a278fad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers within a given range [start, end].", "code": "def count_set_bits_in_range(start, end):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(start, end + 1):\n        total_count += count_set_bits(i)\n    return total_count", "task_id": "224_0ddcbce4-9364-47f3-a83b-eae5bace674e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers in a given list.", "code": "def count_set_bits_in_list(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for num in nums:\n        total_count += count_set_bits(num)\n    return total_count", "task_id": "224_5e94a395-ac07-401b-b89a-9704b1de15ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in a given binary string.", "code": "def count_set_bits_in_binary_string(s):\n    return s.count('1')", "task_id": "224_4732acac-263f-42fc-a4cf-eadb469ad240", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all numbers in a given 2D matrix.", "code": "def count_set_bits_in_matrix(matrix):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for row in matrix:\n        for num in row:\n            total_count += count_set_bits(num)\n    return total_count", "task_id": "224_dc6c2b7d-911a-4d3a-b618-3ac9471ad216", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all odd numbers in a given list.", "code": "def count_set_bits_in_odd_numbers(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for num in nums:\n        if num % 2 != 0:\n            total_count += count_set_bits(num)\n    return total_count", "task_id": "224_aeb97e62-48f7-44ae-b35d-6be9dff5035a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in all even numbers in a given list.", "code": "def count_set_bits_in_even_numbers(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            total_count += count_set_bits(num)\n    return total_count", "task_id": "224_3cd1bc28-19be-4609-8e78-b7f17b50afd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in numbers that are in odd positions in a given list.", "code": "def count_set_bits_in_odd_positions(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(len(nums)):\n        if i % 2 != 0:\n            total_count += count_set_bits(nums[i])\n    return total_count", "task_id": "224_702df866-fc9c-4f75-8151-1b33ff7b6c8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of set bits in numbers that are in even positions in a given list.", "code": "def count_set_bits_in_even_positions(nums):\n    def count_set_bits(n):\n        count = 0\n        while n:\n            count += n & 1\n            n >>= 1\n        return count\n    total_count = 0\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            total_count += count_set_bits(nums[i])\n    return total_count", "task_id": "224_0d2cb8bd-0ee6-429a-a785-f9c3dc1f4816", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the characters which have even index values of a given string.", "code": "def remove_even_index_characters(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i]\n    return result", "task_id": "226_4f764bc9-4fcf-4b15-9b44-407aad7e1ac7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char not in vowels:\n            result += char\n    return result", "task_id": "226_08930d10-c369-4b32-88c0-1a72e1725912", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "226_bd87460e-a5e1-4be4-912d-716e18b2aa0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the characters which have odd index values of a given string.", "code": "def capitalize_odd_index_characters(s: str) -> str:\n    result = \"\"\n    for i in range(len(s)):\n        if i % 2 != 0:\n            result += s[i].upper()\n        else:\n            result += s[i]\n    return result", "task_id": "226_c3f2af5a-a82f-4c69-b2ef-4bf99c47a297", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in a given string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "226_6c133aae-b1c2-4b68-ba0b-0feabedb82f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to double each character in a given string.", "code": "def double_characters(s: str) -> str:\n    result = \"\"\n    for char in s:\n        result += char * 2\n    return result", "task_id": "226_2c7b3a6b-80a0-4596-a4be-163fa7b13ee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = \"aeiouAEIOU\"\n    result = \"\"\n    for char in s:\n        if char in vowels:\n            result += char\n    return result", "task_id": "226_05276585-7ff5-4fe4-8a4b-55df17f4ccbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all digits from a given string.", "code": "def remove_digits(s: str) -> str:\n    result = \"\"\n    for char in s:\n        if not char.isdigit():\n            result += char\n    return result", "task_id": "226_cea2ee6c-f3ef-4739-a08c-e04de5c1b133", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "226_c32a0e66-4479-49ef-92e9-f65c84f3dff6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return s.replace(' ', '').replace('\\t', '').replace('\\n', '')", "task_id": "226_53928e02-aab3-4f17-9359-aee135a5e7bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array.", "code": "def find_max(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_16039ab2-0e99-49f9-839d-6c06fbbd37ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the minimum element in a sorted and rotated array.", "code": "def find_min_index(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return low;", "task_id": "225_a5e06101-545d-4aed-986f-4905e685a5f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the maximum element in a sorted and rotated array.", "code": "def find_max_index(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return low;", "task_id": "225_9de9dfb1-e2b5-491b-9bca-6c88e2a32ec4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array without using recursion.", "code": "def find_min_in_rotated(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_3c347bd2-f9c6-453b-b599-1d62cb5e8cc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array without using recursion.", "code": "def find_max_in_rotated(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_929fe7aa-c17b-4f8e-805b-0af1dae8c634", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that may contain duplicates.", "code": "def find_min_with_duplicates(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_6e6e5b5a-43eb-48a6-bae0-6270f5187863", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array that may contain duplicates.", "code": "def find_max_with_duplicates(arr, low, high): \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_c7410623-5811-4f02-8a87-e3b35ec596e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that may contain duplicates without using recursion.", "code": "def find_min_in_rotated_with_duplicates(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_691d86f1-1cdb-475f-96f5-b651c9c6e0fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a sorted and rotated array that may contain duplicates without using recursion.", "code": "def find_max_in_rotated_with_duplicates(arr): \n    low, high = 0, len(arr) - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[low]): \n            low += 1; \n        elif (arr[mid] > arr[low]): \n            low = mid; \n        else: \n            high = mid - 1; \n    return arr[low];", "task_id": "225_6a09b5bd-4750-4b0c-8abb-6ba4892ce1d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array that has been rotated k times.", "code": "def find_min_rotated_k(arr, k): \n    n = len(arr) \n    low, high = 0, n - 1 \n    while (low < high): \n        mid = low + (high - low) // 2; \n        if (arr[mid] == arr[high]): \n            high -= 1; \n        elif (arr[mid] > arr[high]): \n            low = mid + 1; \n        else: \n            high = mid; \n    return arr[high];", "task_id": "225_bc5ab068-cf55-47bf-97af-1766e726feb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "230_d0868762-2020-4922-9b44-e606fa2a414b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "230_6ceac1cf-b5f9-456b-b64b-1e0ace7d5e35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "230_7fb6eb6c-679f-4979-921e-aa8f6a856a55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "230_175cada2-065a-4dba-9343-5a4b3c1627ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "230_7044a7de-fe75-4e09-a9e4-84a8b00e9ebf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "230_fea6f069-9d76-45e0-a6c3-a9a89e2918f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all vowels in a given string with a specified character.", "code": "def replace_vowels(s: str, char: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char if c in vowels else c for c in s)", "task_id": "230_d931fba3-db05-472a-9723-52ba872a9014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char in vowels or not char.isalpha())", "task_id": "230_00762e4c-cc40-4f35-930e-8f40b985273d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a given string with a specified character.", "code": "def replace_digits(s: str, char: str) -> str:\n    return ''.join(char if c.isdigit() else c for c in s)", "task_id": "230_491d97b1-0c9a-4be4-82ec-0ff62f5e11af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation from a given string.", "code": "import string\n\ndef remove_punctuation(s: str) -> str:\n    return ''.join(char for char in s if char not in string.punctuation)", "task_id": "230_ffb24955-2369-4e7f-8847-f3e4449d2432", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the bits are unset in the given range or not.", "code": "def all_bits_unset(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == 0", "task_id": "228_5f9b2821-1747-4d2c-9f85-19fb7a3f34ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the bits are set in the given range or not.", "code": "def all_bits_set(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num == num", "task_id": "228_ce0f96e1-d608-49d2-b60a-2b44c26c82c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in the given range.", "code": "def count_set_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    count = 0\n    while new_num:\n        count += new_num & 1\n        new_num >>= 1\n    return count", "task_id": "228_6ada3456-0663-4587-9664-6ddb6770f81e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the bits in the given range.", "code": "def toggle_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n ^ num", "task_id": "228_04a4b1ec-2813-4343-9198-d2799541fce9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the bits in the given range.", "code": "def set_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n | num", "task_id": "228_8f5022be-21ce-4a61-bebf-152c3e53e900", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the bits in the given range.", "code": "def clear_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n & ~num", "task_id": "228_5df501a5-db6c-4d7b-815a-fedca05c15e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to invert the bits in the given range.", "code": "def invert_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    return n ^ num", "task_id": "228_261e1274-68c5-4063-8095-ace61410565f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the number formed by the bits in the given range is a power of two.", "code": "def is_power_of_two(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    return new_num != 0 and (new_num & (new_num - 1)) == 0", "task_id": "228_93510805-45bb-42c6-b9a9-c777cbf30fe5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unset bits in the given range.", "code": "def count_unset_bits(n: int, l: int, r: int) -> int:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    count = 0\n    while num:\n        if not (new_num & 1):\n            count += 1\n        num >>= 1\n        new_num >>= 1\n    return count", "task_id": "228_a30ea4a7-0594-4e8b-8a0d-b8935d2fa87d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the bits in the given range form a palindrome.", "code": "def is_palindrome_bits(n: int, l: int, r: int) -> bool:\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1))\n    new_num = n & num\n    bits = bin(new_num)[2:]\n    return bits == bits[::-1]", "task_id": "228_7da8d690-59a6-4d91-9a9c-d4dd67d45f6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all even elements appear before odd ones.", "code": "def separate_even_odd(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_aa88b39c-dced-4af5-b823-932d45aba46a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all zeros appear at the end.", "code": "def move_zeros_to_end(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] != 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_6f5d33ce-989e-4b45-ab0d-c8536e1e1da0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all vowels appear before consonants.", "code": "def separate_vowels_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_part = ''.join([char for char in s if char in vowels])\n    consonant_part = ''.join([char for char in s if char not in vowels])\n    return vowel_part + consonant_part", "task_id": "229_6a2ee619-e5d4-4b1e-b91c-3e85181cf131", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the elements of the given array by their absolute values.", "code": "def sort_by_absolute_value(arr: list[int]) -> list[int]:\n    return sorted(arr, key=abs)", "task_id": "229_5eacaef9-ec60-4783-8cfd-99cf967d5c53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all uppercase letters appear before lowercase ones.", "code": "def separate_upper_lower(s: str) -> str:\n    upper_part = ''.join([char for char in s if char.isupper()])\n    lower_part = ''.join([char for char in s if char.islower()])\n    return upper_part + lower_part", "task_id": "229_dd020e31-a9bd-470a-912e-f857d271e9d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all prime numbers appear before non-prime ones.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef move_primes_to_front(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if is_prime(arr[i]):\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_f486f4dc-1eea-4392-87ec-19f45b553525", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all multiples of three appear before non-multiples.", "code": "def separate_multiples_of_three(arr: list[int]) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % 3 == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_1963f975-f191-40c3-a1e9-c20262777555", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all palindromic strings appear before non-palindromic ones.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef move_palindromes_to_front(arr: list[str]) -> list[str]:\n    j = 0\n    for i in range(len(arr)):\n        if is_palindrome(arr[i]):\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_86bc1eba-367a-4d11-82a0-26f62f791f50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the characters of the given string so that all digits appear before non-digits.", "code": "def separate_digits_non_digits(s: str) -> str:\n    digits = ''.join([char for char in s if char.isdigit()])\n    non_digits = ''.join([char for char in s if not char.isdigit()])\n    return digits + non_digits", "task_id": "229_006fbfc7-0b8e-48f8-9b11-dc29c7bcd2e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the elements of the given array so that all elements divisible by a given number k appear before non-divisibles.", "code": "def move_divisibles_to_front(arr: list[int], k: int) -> list[int]:\n    j = 0\n    for i in range(len(arr)):\n        if arr[i] % k == 0:\n            arr[i], arr[j] = arr[j], arr[i]\n            j += 1\n    return arr", "task_id": "229_7a187340-92cc-46d7-8e93-68448ebbf669", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n largest items from a dataset.", "code": "import heapq\ndef sum_of_largest(nums: list[int], n: int) -> int:\n    return sum(heapq.nlargest(n, nums))", "task_id": "232_ef2cc1c5-232f-4eae-9cff-4f4c3f6a6ce0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the n smallest items from a dataset.", "code": "import heapq\ndef smallest_nnum(nums: list[int], n: int) -> list[int]:\n    return heapq.nsmallest(n, nums)", "task_id": "232_948bb162-2363-4760-9f3b-cdf708bf9e8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the n smallest items from a dataset.", "code": "import heapq\ndef sum_of_smallest(nums: list[int], n: int) -> int:\n    return sum(heapq.nsmallest(n, nums))", "task_id": "232_7d0372ad-507c-4f73-b2f0-9b8b67f769ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the nth largest item from a dataset.", "code": "import heapq\ndef nth_largest(nums: list[int], n: int) -> int:\n    return heapq.nlargest(n, nums)[-1]", "task_id": "232_8f129359-9a12-47fb-bd15-c1a1b56f9811", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the nth smallest item from a dataset.", "code": "import heapq\ndef nth_smallest(nums: list[int], n: int) -> int:\n    return heapq.nsmallest(n, nums)[-1]", "task_id": "232_955df25a-4fc7-4ad9-b43c-3cc2c93e2440", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the median of a dataset.", "code": "def median_of_list(nums: list[int]) -> float:\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 1:\n        return float(nums[n // 2])\n    else:\n        return (nums[n // 2 - 1] + nums[n // 2]) / 2", "task_id": "232_af47259a-e5a3-48b0-820b-f37f60cc1169", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the average of the n largest items from a dataset.", "code": "import heapq\ndef average_of_largest(nums: list[int], n: int) -> float:\n    return sum(heapq.nlargest(n, nums)) / n", "task_id": "232_b4c2dca2-74f1-4f66-921d-087134b3368b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the average of the n smallest items from a dataset.", "code": "import heapq\ndef average_of_smallest(nums: list[int], n: int) -> float:\n    return sum(heapq.nsmallest(n, nums)) / n", "task_id": "232_e2179dd5-5c86-4bae-8282-a44d8d261a01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the top n percent of items from a dataset.", "code": "import heapq\ndef top_n_percent(nums: list[int], percent: float) -> list[int]:\n    n = int(len(nums) * percent / 100)\n    return heapq.nlargest(n, nums)", "task_id": "232_a5774f79-df97-4e3a-aa27-59c8ed464272", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the bottom n percent of items from a dataset.", "code": "import heapq\ndef bottom_n_percent(nums: list[int], percent: float) -> list[int]:\n    n = int(len(nums) * percent / 100)\n    return heapq.nsmallest(n, nums)", "task_id": "232_d18a77ff-8aae-4575-8e67-f3be194ac83a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r**2 * h\n    return volume", "task_id": "233_bf201d10-0d06-44c9-8684-449544c1ad1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r):\n    surface_area = 4 * 3.1415 * r**2\n    return surface_area", "task_id": "233_9bc473b1-594b-477e-9bec-1bf2d9ec8f74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n    volume = (4/3) * 3.1415 * r**3\n    return volume", "task_id": "233_2f58a576-eaf5-48e9-917c-af4999e9bbac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(l, w):\n    area = l * w\n    return area", "task_id": "233_e357d44e-0260-42ad-a96c-2d0a6902a11e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n    perimeter = 2 * (l + w)\n    return perimeter", "task_id": "233_48622dc7-f8e5-400c-b9c4-b553469e436c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(b, h):\n    area = 0.5 * b * h\n    return area", "task_id": "233_024c19ec-beeb-4c39-892d-cce2915164aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(r):\n    circumference = 2 * 3.1415 * r\n    return circumference", "task_id": "233_317a0107-3526-483d-a952-73e293e52583", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a):\n    volume = a**3\n    return volume", "task_id": "233_00a181b8-abfc-4930-b448-f4749d977b75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(a):\n    surface_area = 6 * a**2\n    return surface_area", "task_id": "233_21d2b39b-a66a-481e-857e-58f01ca5b557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(b, h):\n    area = b * h\n    return area", "task_id": "233_a27570cb-3a42-4ec7-b7b9-2c310c3bdf71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers.", "code": "def find_max_sum_path(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_bbe2ba82-afca-4072-8fef-3677d75eb61e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, avoiding certain obstacle positions.", "code": "def max_sum_path_with_obstacles(triangle: List[List[int]], obstacles: List[Tuple[int, int]]) -> int:\n    n = len(triangle)\n    for i, j in obstacles:\n        triangle[i][j] = float('-inf')\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            if triangle[i][j] != float('-inf'):\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_53bac53f-4980-482a-bcb4-7bcb97a48a57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where some numbers can be negative.", "code": "def max_sum_path_with_negative(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_efe5ce0a-8801-4eb7-bc55-cbf3acaee68b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can only move down to the next row but within k columns.", "code": "def max_sum_path_with_restriction(triangle: List[List[int]], k: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            max_sum = float('-inf')\n            for m in range(1, k+1):\n                if j+m < len(triangle[i+1]):\n                    max_sum = max(max_sum, triangle[i+1][j+m])\n            triangle[i][j] += max_sum\n    return triangle[0][0]", "task_id": "231_60fadd2b-99c8-4007-b1af-6a4b4e11d733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can skip at most one row.", "code": "def max_sum_path_with_skip(triangle: List[List[int]], skip: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            if i+2 < n:\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1], triangle[i+2][j], triangle[i+2][j+1])\n            else:\n                triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_30f6cc8d-629b-41e0-aae1-f688794658ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where moving to the next row incurs a penalty.", "code": "def max_sum_path_with_penalty(triangle: List[List[int]], penalty: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] - penalty, triangle[i+1][j+1] - penalty)\n    return triangle[0][0]", "task_id": "231_10d50e98-9828-4274-84b8-fbc98e7d7839", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where moving to the next row gives a bonus.", "code": "def max_sum_path_with_bonus(triangle: List[List[int]], bonus: int) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] + bonus, triangle[i+1][j+1] + bonus)\n    return triangle[0][0]", "task_id": "231_f30c7ffe-8655-4e7c-854d-25a7de4e2aae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where each row has a multiplier.", "code": "def max_sum_path_with_multipliers(triangle: List[List[int]], multipliers: List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j] * multipliers[i+1], triangle[i+1][j+1] * multipliers[i+1])\n    return triangle[0][0]", "task_id": "231_f0b752cc-c5d4-4c84-95ab-5f3fe4690a3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from the top to bottom of a given triangle of numbers, where you can only move to the minimum of the next row.", "code": "def max_sum_path_with_minimum(triangle: List[List[int]]) -> int:\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "231_cb0247e8-7e54-4a04-96c2-a420f28efe0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path from a fixed starting point to the bottom of a given triangle of numbers.", "code": "def max_sum_path_with_fixed_start(triangle: List[List[int]], start: int) -> int:\n    n = len(triangle)\n    for i in range(start, n-1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[start][0]", "task_id": "231_8b79f4bd-ac54-4d96-a81f-09f1f5ffda5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def area_square(side: int) -> int:\n  return side * side", "task_id": "234_1861a83f-d824-4b78-aec4-9756bfdb4903", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side: int) -> int:\n  return 4 * side", "task_id": "234_2eab3a63-8931-4e93-a35e-9cc868a1ebc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(radius: int) -> float:\n  return (4/3) * math.pi * (radius ** 3)", "task_id": "234_7dda50ee-1591-452d-8593-26f1eb17d3a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "import math\ndef area_circle(radius: int) -> float:\n  return math.pi * (radius ** 2)", "task_id": "234_4241a19d-f80c-41f4-93a5-bccc96983d59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(radius: int, height: int) -> float:\n  return math.pi * (radius ** 2) * height", "task_id": "234_31ac406c-d9ae-4dcf-804c-f4c858e87842", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length: int, width: int) -> int:\n  return length * width", "task_id": "234_84ec6439-7399-4098-9a3f-055a6add77dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: int, width: int) -> int:\n  return 2 * (length + width)", "task_id": "234_ff8abb77-5401-494e-898f-89b1870e9286", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(length: int, width: int, height: int) -> int:\n  return length * width * height", "task_id": "234_6d4d3334-dbf4-4624-ab3b-adcf6c685edb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(side: int) -> int:\n  return 6 * (side ** 2)", "task_id": "234_b31e9a4c-7f25-4ad8-bb5e-abb5074a6cc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(radius: int) -> float:\n  return 4 * math.pi * (radius ** 2)", "task_id": "234_b31d8682-ee26-4c99-bd3a-53b0f82f35fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of squares that can be formed within a given square grid of size n x n.", "code": "def count_squares(n: int) -> int:\n    return sum((n - i) ** 2 for i in range(n))", "task_id": "236_4fee176d-a78a-4466-b3f4-89e8a0228b0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of rectangles that can be formed within a given rectangle grid of size n x m.", "code": "def count_rectangles(n: int, m: int) -> int:\n    return (n * (n + 1) * m * (m + 1)) // 4", "task_id": "236_edb81a23-d10e-4552-a2da-8286dd9c0b2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of squares that can be formed along the diagonal of a given square grid of size n x n.", "code": "def count_diagonal_squares(n: int) -> int:\n    return n", "task_id": "236_b9865479-8620-432d-a390-e134cf6c0934", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of L-shaped figures that can be formed within a given square grid of size n x n.", "code": "def count_l_shapes(n: int) -> int:\n    return (n - 1) * (n - 1) * 2", "task_id": "236_56593347-b828-4b1b-bd4d-b6835b7fb4de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of right-angled triangles that can be formed within a given square grid of size n x n.", "code": "def count_triangles(n: int) -> int:\n    return (n * (n + 1) * (2 * n + 1)) // 6", "task_id": "236_b86b7b53-82c8-4443-8ae8-235e5c5d2445", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of hexagons that can be formed within a given hexagonal grid of size n.", "code": "def count_hexagons(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_e3043ed6-df01-4628-9e4f-a55b36ec648e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of pyramids that can be formed within a given square grid of size n x n.", "code": "def count_pyramids(n: int) -> int:\n    return (n * (n + 1) * (2 * n + 1)) // 6", "task_id": "236_7ca77c9b-ff47-4216-990f-c02afedf4c44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of diamond shapes that can be formed within a given square grid of size n x n.", "code": "def count_diamonds(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_1bf04aa6-998c-4f9f-a242-9fe90c43b3a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of octagons that can be formed within a given square grid of size n x n.", "code": "def count_octagons(n: int) -> int:\n    return (n * (n - 1) * (2 * n - 1)) // 3", "task_id": "236_22bdd55c-8d1b-45d5-b5d8-9da11ed2d27e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the maximum number of parallelograms that can be formed within a given rectangle grid of size n x m.", "code": "def count_parallelograms(n: int, m: int) -> int:\n    return (n * (n + 1) * m * (m + 1)) // 4", "task_id": "236_bb1ccbd1-72ff-493e-8173-91142f310ea3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set all odd bits of a given number.", "code": "def odd_bit_set_number(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 0): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n | res)", "task_id": "235_d3885811-2ff7-422d-94a7-25bf57f3325d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all even bits of a given number.", "code": "def clear_even_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n & res)", "task_id": "235_9c563d17-e5a8-40a3-9b83-a7660acc8a26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all odd bits of a given number.", "code": "def clear_odd_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n & ~res)", "task_id": "235_5a5c4d2a-bf8e-46f6-9955-29214525b8d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def toggle_even_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 1): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n ^ res)", "task_id": "235_a7a9a476-7b7e-4587-8be0-0396535eefa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all odd bits of a given number.", "code": "def toggle_odd_bits(n): \n    count = 0;res = 0;temp = n \n    while(temp > 0): \n        if (count % 2 == 0): \n            res |= (1 << count)\n        count+=1\n        temp >>= 1\n    return (n ^ res)", "task_id": "235_160675de-45f1-4631-995e-65cdf649aa5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set all bits in a given range [start, end] of a number.", "code": "def set_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n |= (1 << i) \n    return n", "task_id": "235_82218a56-1fb9-45c7-97ff-d2eb6c824580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all bits in a given range [start, end] of a number.", "code": "def clear_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n &= ~(1 << i) \n    return n", "task_id": "235_3d9396d0-1bf5-4093-bef6-2a685354a6c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits in a given range [start, end] of a number.", "code": "def toggle_bits_in_range(n, start, end): \n    for i in range(start, end+1): \n        n ^= (1 << i) \n    return n", "task_id": "235_78deda5a-e153-4bd5-87c9-8140cf7c504d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the nth bit of a given number.", "code": "def set_nth_bit(n, k): \n    return n | (1 << k)", "task_id": "235_e8e88f6a-6c8f-4497-b023-99cedf33ada8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the nth bit of a given number.", "code": "def clear_nth_bit(n, k): \n    return n & ~(1 << k)", "task_id": "235_3aec09eb-9e58-4634-93f2-cd373d0d659a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in a list of tuples.", "code": "def find_unique_elements(lst):\n    unique_elements = set()\n    for tup in lst:\n        unique_elements.update(tup)\n    return list(unique_elements)", "task_id": "237_97ea176d-7c0d-4d24-beeb-08838f77ec92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of each element in a list of tuples.", "code": "from collections import Counter\n\ndef count_element_occurrences(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    return dict(Counter(flat_list))", "task_id": "237_407934f9-9c13-4308-9af7-265fa981e60f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements across all tuples in a list.", "code": "def find_common_elements(lst):\n    if not lst:\n        return set()\n    common_elements = set(lst[0])\n    for tup in lst[1:]:\n        common_elements.intersection_update(tup)\n    return common_elements", "task_id": "237_1b55fa6f-53fc-43bf-88af-549ef96aaa31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of elements in each tuple in a list of tuples.", "code": "def sum_of_tuples(lst):\n    return [sum(tup) for tup in lst]", "task_id": "237_30320c57-d107-46ef-8a95-7bccf156a65e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out tuples in a list that have a length less than a given value.", "code": "def filter_tuples_by_length(lst, length):\n    return [tup for tup in lst if len(tup) >= length]", "task_id": "237_5d66e292-c014-4fb9-83e2-fbaf212bea39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples by the sum of their elements.", "code": "def sort_tuples_by_sum(lst):\n    return sorted(lst, key=sum)", "task_id": "237_75f8d448-2b91-4b66-96ea-cd211b576728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of each tuple in a list of tuples.", "code": "def reverse_each_tuple(lst):\n    return [tup[::-1] for tup in lst]", "task_id": "237_b4581b88-92dd-4fc9-b0ba-fb9513709168", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a list of tuples into a single list.", "code": "def flatten_list_of_tuples(lst):\n    return [item for tup in lst for item in tup]", "task_id": "237_351043d4-a646-4ce5-bf9e-4769a76ff7ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in each tuple in a list of tuples.", "code": "def find_max_in_each_tuple(lst):\n    return [max(tup) for tup in lst]", "task_id": "237_9a47241f-6a5f-46f1-80ae-1a8ed630e47d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all tuples in a list into a single tuple.", "code": "def concatenate_tuples(lst):\n    result = ()\n    for tup in lst:\n        result += tup\n    return result", "task_id": "237_75b3e2c8-b31d-4dae-8684-c5ae9fbb0c62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "238_d2ebc05e-2f2f-49ed-b2ee-8d43a0cbb617", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "238_7d1a1cc3-8fd9-4d4b-a063-79631cac5fb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "238_f0b0edb7-c854-4c5a-95f1-db16116aab49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "238_170f36ba-1001-4f8e-bc2d-08bb429ecd81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s: str) -> str:\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return ''", "task_id": "238_e699144c-a3f3-445e-b661-53cdcd8c1bfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "238_2aac52b4-0358-4f5a-96d6-4ab9832df38f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "238_0881054f-2f43-477d-819a-770a97a5dfab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "238_e1d08c8b-c72a-4179-9729-58c66ad97383", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char.isalpha() and char not in vowels)", "task_id": "238_eced4aae-9ba7-4ca9-a380-cc810488b083", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "238_33f8d1e6-3729-45f3-a7ad-4ca2bf1caa51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the first element of the list with another list.", "code": "def replace_first_element(list1, list2):\n    list1[:1] = list2\n    return list1", "task_id": "240_d659810e-1fae-4699-b346-aa26043e8580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the middle element of the list with another list. If the list has an even number of elements, replace the element just before the middle.", "code": "def replace_middle_element(list1, list2):\n    mid_index = (len(list1) - 1) // 2\n    list1[mid_index:mid_index+1] = list2\n    return list1", "task_id": "240_7ddb9a4d-547b-417d-b9b2-6b853c6dbeda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the second element of the list with another list.", "code": "def replace_second_element(list1, list2):\n    list1[1:2] = list2\n    return list1", "task_id": "240_d50a4ed5-115e-4554-bfa9-1a633a8cc00c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the last two elements of the list with another list.", "code": "def replace_last_two_elements(list1, list2):\n    list1[-2:] = list2\n    return list1", "task_id": "240_e3b2dd0d-c064-48fb-a079-d2a1d91d4410", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the first two elements of the list with another list.", "code": "def replace_first_two_elements(list1, list2):\n    list1[:2] = list2\n    return list1", "task_id": "240_804c9a9d-0f0b-453e-91d5-e9cfb06ca171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all elements of the list with another list.", "code": "def replace_all_elements(list1, list2):\n    list1[:] = list2\n    return list1", "task_id": "240_c8b00203-e222-46e7-8a2b-e81777f2a7b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all elements at even indices of the list with another list.", "code": "def replace_even_index_elements(list1, list2):\n    list1[::2] = list2\n    return list1", "task_id": "240_94b0b2e5-6a3c-4129-af49-7dbc16bf0693", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all elements at odd indices of the list with another list.", "code": "def replace_odd_index_elements(list1, list2):\n    list1[1::2] = list2\n    return list1", "task_id": "240_1d4aa1ee-70e2-458d-bf64-24cff71ba03a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the elements of the list with the sum of corresponding elements from another list. If the lists are of different lengths, use the length of the shorter list.", "code": "def replace_elements_with_sum(list1, list2):\n    length = min(len(list1), len(list2))\n    for i in range(length):\n        list1[i] = list1[i] + list2[i]\n    return list1", "task_id": "240_c9258f0c-6bb1-4d66-aa5d-58a0f4c98479", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace the elements of the list with the product of corresponding elements from another list. If the lists are of different lengths, use the length of the shorter list.", "code": "def replace_elements_with_product(list1, list2):\n    length = min(len(list1), len(list2))\n    for i in range(length):\n        list1[i] = list1[i] * list2[i]\n    return list1", "task_id": "240_1e06c928-be7c-41ae-9f7c-a57eb517c54c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array having each element as the specified value.", "code": "def array_3d_with_value(m, n, o, value):\n    return [[[value for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_41d2eafa-df49-41dc-84c0-685b51b6efb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is an incremental integer starting from 0.", "code": "def array_3d_incremental(m, n, o):\n    counter = 0\n    result = []\n    for i in range(o):\n        layer = []\n        for j in range(n):\n            row = []\n            for k in range(m):\n                row.append(counter)\n                counter += 1\n            layer.append(row)\n        result.append(layer)\n    return result", "task_id": "241_20ab2d63-b1e7-4000-98b8-dfe87ead63c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice is an identity matrix of size m.", "code": "def array_3d_identity(m):\n    return [[[1 if i == j else 0 for j in range(m)] for i in range(m)] for _ in range(m)]", "task_id": "241_74e03f56-a9b9-47ed-a81f-96aee0072aee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice has a diagonal of 1s and the rest are 0s.", "code": "def array_3d_diagonal(m, n, o):\n    return [[[1 if i == j else 0 for j in range(n)] for i in range(m)] for _ in range(o)]", "task_id": "241_b2aba10a-7403-4b0e-8005-3bddaccdd6b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array having each element as 0.", "code": "def array_3d_zeros(m, n, o):\n    return [[[0 for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_67183753-fc9b-4c2c-9a8b-8f5cd784fd6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is a random integer between 0 and 9.", "code": "import random\n\ndef array_3d_random(m, n, o):\n    return [[[random.randint(0, 9) for _ in range(m)] for _ in range(n)] for _ in range(o)]", "task_id": "241_981dace4-b2aa-44a9-ae0a-96861728977c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element alternates between 0 and 1.", "code": "def array_3d_alternating(m, n, o):\n    return [[[((i+j+k) % 2) for i in range(m)] for j in range(n)] for k in range(o)]", "task_id": "241_71587fab-62c3-442c-8bab-1e5fc38d239e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each element is a tuple of its coordinates (i, j, k).", "code": "def array_3d_coordinates(m, n, o):\n    return [[[(i, j, k) for i in range(m)] for j in range(n)] for k in range(o)]", "task_id": "241_c9abeec8-6ebb-4fc9-9c80-9d036d88332a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice is a checkerboard pattern of 0s and 1s.", "code": "def array_3d_checkerboard(m, n, o):\n    return [[[((i+j) % 2) for i in range(m)] for j in range(n)] for _ in range(o)]", "task_id": "241_9f4b01ca-ce4f-41c9-9cfe-20fb2a61a4da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a 3d array where each 2d slice is filled with the slice index.", "code": "def array_3d_layers(m, n, o):\n    return [[[k for _ in range(m)] for _ in range(n)] for k in range(o)]", "task_id": "241_0453f4aa-aa0b-4d17-bc3a-8b48ad385624", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the second element of each tuple.", "code": "def sort_by_second_element(lst):\n    return sorted(lst, key=lambda x: x[1])", "task_id": "243_44d63286-d9ad-4d1f-8c12-53e13a0cd17f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the sum of the elements in each tuple.", "code": "def sort_by_sum_of_elements(lst):\n    return sorted(lst, key=lambda x: x[0] + x[1])", "task_id": "243_779b3f86-86ba-4f78-9f00-22388acd863a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of tuples based on the length of the string in each tuple.", "code": "def sort_by_length_of_string(lst):\n    return sorted(lst, key=lambda x: len(x[1]))", "task_id": "243_3ae3fadb-c4bc-4e18-9f57-de914665f4fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on their absolute values.", "code": "def sort_by_absolute_value(lst):\n    return sorted(lst, key=abs)", "task_id": "243_6573f0a6-355b-4396-a56b-5e78fdb9652e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on their last digit.", "code": "def sort_by_last_digit(lst):\n    return sorted(lst, key=lambda x: x % 10)", "task_id": "243_2ee66751-4245-4c32-88e2-1368e46bb3e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the first character of each string.", "code": "def sort_by_first_char(lst):\n    return sorted(lst, key=lambda x: x[0])", "task_id": "243_f5e5e31a-0083-4616-94d6-b5aa1848b4ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of vowels in each string.", "code": "def sort_by_vowel_count(lst):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return sorted(lst, key=count_vowels)", "task_id": "243_cce89e29-77cf-41ae-8ccb-605ec2392a89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of integers based on the sum of their digits.", "code": "def sort_by_digit_sum(lst):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return sorted(lst, key=digit_sum)", "task_id": "243_5317f101-dbb7-4658-9fec-8ce0d6559ac4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of words in each string.", "code": "def sort_by_word_count(lst):\n    return sorted(lst, key=lambda x: len(x.split()))", "task_id": "243_5411c3c0-6c59-4893-933a-49d9bf3a5535", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list of strings based on the number of unique characters in each string.", "code": "def sort_by_unique_char_count(lst):\n    return sorted(lst, key=lambda x: len(set(x)))", "task_id": "243_11b48c47-12a9-4129-978c-594518fe9b82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next perfect cube greater than a given number.", "code": "import math\n\ndef next_cube(N):\n    nextN = math.floor(N ** (1/3)) + 1\n    return nextN ** 3", "task_id": "244_f04cdd90-3ce5-4e25-8155-51b20fb1e559", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next Fibonacci number greater than a given number.", "code": "def next_fibonacci(N):\n    a, b = 0, 1\n    while b <= N:\n        a, b = b, a + b\n    return b", "task_id": "244_504b85be-1092-4258-a617-6bb0594aca9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next prime number greater than a given number.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\n\ndef next_prime(N):\n    N += 1\n    while not is_prime(N):\n        N += 1\n    return N", "task_id": "244_a60c22c6-d1eb-4e96-ab88-be85dbdf826e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than a given number.", "code": "def next_power_of_two(N):\n    power = 1\n    while power <= N:\n        power *= 2\n    return power", "task_id": "244_06cd89c4-cc1c-4cff-85c6-45a3d3b5bf9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next even number greater than a given number.", "code": "def next_even(N):\n    return N + 2 if N % 2 == 0 else N + 1", "task_id": "244_8804a263-9572-4c59-8656-611dbe1ea3e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next odd number greater than a given number.", "code": "def next_odd(N):\n    return N + 1 if N % 2 == 0 else N + 2", "task_id": "244_485afb3f-814e-498a-95e6-0d6b025f0ff6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next multiple of five greater than a given number.", "code": "def next_multiple_of_five(N):\n    return (N // 5 + 1) * 5", "task_id": "244_93505729-c951-4faf-ad6b-3f01869a9716", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next palindrome number greater than a given number.", "code": "def is_palindrome(num):\n    return str(num) == str(num)[::-1]\n\n\ndef next_palindrome(N):\n    N += 1\n    while not is_palindrome(N):\n        N += 1\n    return N", "task_id": "244_4247436b-b1a9-41cc-b501-17363c78e15e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next number that is either a perfect square or a perfect cube greater than a given number.", "code": "import math\n\ndef is_perfect_square(num):\n    return int(math.sqrt(num)) ** 2 == num\n\n\ndef is_perfect_cube(num):\n    return int(num ** (1/3)) ** 3 == num\n\n\ndef next_perfect_square_or_cube(N):\n    N += 1\n    while not (is_perfect_square(N) or is_perfect_cube(N)):\n        N += 1\n    return N", "task_id": "244_6fcb4bd7-3e09-4b1c-9c1f-420c510a6ba0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next happy number greater than a given number.", "code": "def is_happy_number(num):\n    seen = set()\n    while num != 1 and num not in seen:\n        seen.add(num)\n        num = sum(int(digit) ** 2 for digit in str(num))\n    return num == 1\n\n\ndef next_happy_number(N):\n    N += 1\n    while not is_happy_number(N):\n        N += 1\n    return N", "task_id": "244_7a6861dc-b446-4858-8f3c-a764e72d6e62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to k times the previous element but less than or equal to m.", "code": "def count_sequences(m, n, k):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i // k][j - 1]\n\treturn T[m][n]", "task_id": "239_fb5695d7-69c3-41c0-b5cd-7e783a84b647", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is strictly greater than the previous element but less than or equal to m.", "code": "def count_increasing_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[m][n]", "task_id": "239_e0702ad9-45c4-423a-978a-077eed93b7ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is strictly less than the previous element but greater than or equal to 1.", "code": "def count_decreasing_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(m + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[m][n]", "task_id": "239_66aaed55-5bce-4360-b380-ea02569e2051", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is an even number and less than or equal to m.", "code": "def count_even_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(0, m + 1, 2):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i // 2 + 1\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 2][j] + T[i // 2][j - 1]\n\treturn T[m][n]", "task_id": "239_ace4fd90-9e5c-46dd-bd05-de99db31cc37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is an odd number and less than or equal to m.", "code": "def count_odd_sequences(m, n):\n\tT = [[0 for _ in range(n + 1)] for _ in range(m + 1)]\n\tfor i in range(1, m + 1, 2):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif i < j:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = (i + 1) // 2\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 2][j] + T[i // 2][j - 1]\n\treturn T[m][n]", "task_id": "239_046baed6-a716-4147-b5e3-93c917e4d139", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a prime number and less than or equal to m.", "code": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef count_prime_sequences(m, n):\n\tprimes = [i for i in range(2, m + 1) if is_prime(i)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(primes) + 1)]\n\tfor i in range(len(primes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(primes)][n]", "task_id": "239_c3ea2465-d178-48ca-8198-1aef3a1add0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a Fibonacci number and less than or equal to m.", "code": "def generate_fibonacci_up_to(m):\n\tfib = [0, 1]\n\twhile True:\n\t\tnext_fib = fib[-1] + fib[-2]\n\t\tif next_fib > m:\n\t\t\tbreak\n\t\tfib.append(next_fib)\n\treturn fib[1:] # Exclude 0\n\ndef count_fibonacci_sequences(m, n):\n\tfibs = generate_fibonacci_up_to(m)\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(fibs) + 1)]\n\tfor i in range(len(fibs) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(fibs)][n]", "task_id": "239_df5fd3b0-362e-491a-b408-6c2e990fe214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a palindromic number and less than or equal to m.", "code": "def is_palindrome(num):\n\treturn str(num) == str(num)[::-1]\n\ndef count_palindromic_sequences(m, n):\n\tpalindromes = [i for i in range(1, m + 1) if is_palindrome(i)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(palindromes) + 1)]\n\tfor i in range(len(palindromes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(palindromes)][n]", "task_id": "239_664c7115-cb8b-4dca-8144-966a1a5281bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a perfect square and less than or equal to m.", "code": "def count_square_sequences(m, n):\n\tsquares = [i * i for i in range(1, int(m ** 0.5) + 1)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(squares) + 1)]\n\tfor i in range(len(squares) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(squares)][n]", "task_id": "239_9f564d2c-c0d9-473b-9688-f24320728999", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of possible sequences of length n such that each element is a perfect cube and less than or equal to m.", "code": "def count_cube_sequences(m, n):\n\tcubes = [i * i * i for i in range(1, int(m ** (1/3)) + 1)]\n\tT = [[0 for _ in range(n + 1)] for _ in range(len(cubes) + 1)]\n\tfor i in range(len(cubes) + 1):\n\t\tfor j in range(n + 1):\n\t\t\tif i == 0 or j == 0:\n\t\t\t\tT[i][j] = 0\n\t\t\telif j == 1:\n\t\t\t\tT[i][j] = i\n\t\t\telse:\n\t\t\t\tT[i][j] = T[i - 1][j] + T[i - 1][j - 1]\n\treturn T[len(cubes)][n]", "task_id": "239_ad5f1a13-3d9f-4604-816b-76f5117dee9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray for the given array.", "code": "def find_max_sum_subarray(arr: list[int]) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "245_489a74ef-d3a2-4c46-8512-76cd2f194fd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of any contiguous subarray for the given array.", "code": "def find_max_product_subarray(arr: list[int]) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_max = 1\n    current_min = 1\n    for num in arr:\n        if num == 0:\n            current_max, current_min = 1, 1\n            continue\n        temp = current_max * num\n        current_max = max(num, temp, current_min * num)\n        current_min = min(num, temp, current_min * num)\n        max_product = max(max_product, current_max)\n    return max_product", "task_id": "245_88ea6ce1-b831-45cd-ac2d-e2a743fd5194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence for the given array.", "code": "def find_longest_increasing_subsequence(arr: list[int]) -> int:\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "245_059a2cae-af84-4912-aaf0-d544288c292b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of non-adjacent elements in the given array.", "code": "def find_max_sum_non_adjacent_subsequence(arr: list[int]) -> int:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)", "task_id": "245_3e971c74-edb3-4bdc-bdc9-df78ad079bfb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any circular subarray for the given array.", "code": "def find_max_sum_circular_subarray(arr: list[int]) -> int:\n    def kadane(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    max_kadane = kadane(arr)\n    max_wrap = sum(arr) - kadane([-x for x in arr])\n    return max(max_kadane, max_wrap)", "task_id": "245_0ff13ef5-f61f-4016-8a8d-9daba39d52cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any subsequence for the given array.", "code": "def find_max_sum_subsequence(arr: list[int]) -> int:\n    max_sum = 0\n    for num in arr:\n        if num > 0:\n            max_sum += num\n    return max_sum", "task_id": "245_31f857cb-ff24-4cb1-bea4-2d14b47c5ed9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of any contiguous subarray for the given array.", "code": "def find_min_sum_subarray(arr: list[int]) -> int:\n    min_sum = float('inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    return min_sum", "task_id": "245_cd306f98-5314-4b28-b92c-343264bdee60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of two non-overlapping subarrays for the given array.", "code": "def find_max_sum_of_two_non_overlapping_subarrays(arr: list[int]) -> int:\n    def max_subarray(arr):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in arr:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    max_sum = float('-inf')\n    for i in range(1, len(arr)):\n        max_sum = max(max_sum, max_subarray(arr[:i]) + max_subarray(arr[i:]))\n    return max_sum", "task_id": "245_2185ba03-97ad-4c47-ad67-3b3c7f321321", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray with at most one deletion for the given array.", "code": "def find_max_sum_subarray_with_one_deletion(arr: list[int]) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_end_here = [0] * n\n    max_start_here = [0] * n\n    max_end_here[0] = arr[0]\n    for i in range(1, n):\n        max_end_here[i] = max(arr[i], max_end_here[i - 1] + arr[i])\n    max_start_here[-1] = arr[-1]\n    for i in range(n - 2, -1, -1):\n        max_start_here[i] = max(arr[i], max_start_here[i + 1] + arr[i])\n    max_sum = max(max_end_here)\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, max_end_here[i - 1] + max_start_here[i + 1])\n    return max_sum", "task_id": "245_1e4ae13f-0952-484d-8fc0-f40d74a41860", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any contiguous subarray with at most k deletions for the given array.", "code": "def find_max_sum_subarray_with_k_deletions(arr: list[int], k: int) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[float('-inf')] * (k + 1) for _ in range(n)]\n    dp[0][0] = arr[0]\n    for i in range(1, n):\n        for j in range(k + 1):\n            dp[i][j] = max(dp[i][j], dp[i - 1][j] + arr[i])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i - 1][j - 1])\n    return max(dp[-1])", "task_id": "245_6efa4f90-8308-4301-9d3a-d10a3ffe9635", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing cube roots using the babylonian method.", "code": "def babylonian_cuberoot(number):\n    if number == 0:\n        return 0\n    g = number / 3.0\n    g2 = g + 1\n    while g != g2:\n        n = number / (g * g)\n        g2 = g\n        g = (2 * g + n) / 3\n    return g", "task_id": "246_e660db87-69d1-498f-8fef-07f22b7df42d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method with a specified precision.", "code": "def babylonian_squareroot_with_precision(number, precision):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    while True:\n        n = number / g\n        g2 = (g + n) / 2\n        if abs(g - g2) < precision:\n            return g2\n        g = g2", "task_id": "246_ec87649d-ad63-479b-a634-0aebd1082a5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method with a specified number of iterations.", "code": "def babylonian_squareroot_iter(number, iterations):\n    if number == 0:\n        return 0\n    g = number / 2.0\n    for _ in range(iterations):\n        n = number / g\n        g = (g + n) / 2\n    return g", "task_id": "246_d5a80ff8-b17a-4083-a9c3-7bcb2fea9005", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing square roots using the babylonian method that can handle negative inputs by returning complex numbers.", "code": "def babylonian_squareroot_negative(number):\n    if number == 0:\n        return 0\n    if number < 0:\n        return complex(0, babylonian_squareroot(-number))\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_aa2da53d-a620-4fef-95bc-d919cff6c0e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing square roots of a list of numbers using the babylonian method.", "code": "def babylonian_squareroot_list(numbers):\n    def babylonian_squareroot(number):\n        if number == 0:\n            return 0\n        g = number / 2.0\n        g2 = g + 1\n        while g != g2:\n            n = number / g\n            g2 = g\n            g = (g + n) / 2\n        return g\n    return [babylonian_squareroot(num) for num in numbers]", "task_id": "246_5cd0d3f6-6637-48bf-aebb-1eaf94019211", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the sum of two numbers using the babylonian method.", "code": "def babylonian_squareroot_sum(number1, number2):\n    number = number1 + number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_19d478e2-176e-4632-8a3c-8ccd795d13bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the difference of two numbers using the babylonian method.", "code": "def babylonian_squareroot_diff(number1, number2):\n    number = abs(number1 - number2)\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_204206f7-f822-4658-a340-88bb666b13a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the product of two numbers using the babylonian method.", "code": "def babylonian_squareroot_product(number1, number2):\n    number = number1 * number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_c42ff2d6-5d08-4ce8-aac1-6de7261cd3ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the division of two numbers using the babylonian method.", "code": "def babylonian_squareroot_division(number1, number2):\n    if number2 == 0:\n        raise ValueError('Division by zero is not allowed')\n    number = number1 / number2\n    if number == 0:\n        return 0\n    g = number / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = number / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_2a88f11a-5a0f-496a-a931-f9bfe085e955", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function for computing the square root of the average of a list of numbers using the babylonian method.", "code": "def babylonian_squareroot_average(numbers):\n    if not numbers:\n        return 0\n    average = sum(numbers) / len(numbers)\n    if average == 0:\n        return 0\n    g = average / 2.0\n    g2 = g + 1\n    while g != g2:\n        n = average / g\n        g2 = g\n        g = (g + n) / 2\n    return g", "task_id": "246_7891bcc5-1631-4b69-a3a7-e2e36877592d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the geometric sum of n-1.", "code": "def geometric_sum(n):\n  if n < 1:\n    return 1\n  else:\n    return 1 / (2 ** n) + geometric_sum(n - 1)", "task_id": "248_7306f5ec-9511-4b2d-a3b1-c18dc5282e34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of factorials up to n-1.", "code": "def factorial_sum(n):\n  def factorial(x):\n    if x == 0:\n      return 1\n    else:\n      return x * factorial(x - 1)\n  if n < 1:\n    return 1\n  else:\n    return factorial(n) + factorial_sum(n - 1)", "task_id": "248_3a424b0b-411a-4876-99bf-22752b1cc733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 Fibonacci numbers.", "code": "def fibonacci_sum(n):\n  def fibonacci(x):\n    if x <= 1:\n      return x\n    else:\n      return fibonacci(x - 1) + fibonacci(x - 2)\n  if n < 1:\n    return 0\n  else:\n    return fibonacci(n - 1) + fibonacci_sum(n - 1)", "task_id": "248_c746da34-51fa-4940-b9a6-be1f28743823", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 natural numbers.", "code": "def arithmetic_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n + arithmetic_sum(n - 1)", "task_id": "248_6d974ade-d46b-46d1-a5a9-67267644a281", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n-1 natural numbers.", "code": "def square_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n ** 2 + square_sum(n - 1)", "task_id": "248_a4ff516d-fc52-427e-8c4c-5afe83d1c733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the first n-1 natural numbers.", "code": "def cube_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n ** 3 + cube_sum(n - 1)", "task_id": "248_6988f235-621a-4b41-a464-6655753eb614", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the inverses of the first n-1 natural numbers.", "code": "def inverse_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return 1 / n + inverse_sum(n - 1)", "task_id": "248_e2954daf-d28d-4347-a50a-734edb9e0026", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the alternating sum of the first n-1 natural numbers.", "code": "def alternating_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return n if n % 2 == 1 else -n + alternating_sum(n - 1)", "task_id": "248_21d3a0db-1aa2-48a9-afb3-f8519c60028b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of double factorials up to n-1.", "code": "def double_factorial_sum(n):\n  def double_factorial(x):\n    if x <= 0:\n      return 1\n    else:\n      return x * double_factorial(x - 2)\n  if n < 1:\n    return 0\n  else:\n    return double_factorial(n) + double_factorial_sum(n - 1)", "task_id": "248_cd0400a4-3806-4e6e-b7dc-4769a215fe71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n-1 triangular numbers.", "code": "def triangular_sum(n):\n  def triangular(x):\n    return x * (x + 1) // 2\n  if n < 1:\n    return 0\n  else:\n    return triangular(n) + triangular_sum(n - 1)", "task_id": "248_b2ee8288-f7d7-448f-8e3c-03dd9dfac55d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two lists of strings using a lambda function.", "code": "def intersection_strings(list1, list2):\n    result = list(filter(lambda x: x in list1, list2))\n    return result", "task_id": "249_51cb2185-4e52-48ac-9f53-c4ff7d852c9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers using a lambda function.", "code": "def common_elements(list1, list2):\n    result = list(filter(lambda x: x in list1, list2))\n    return result", "task_id": "249_e7311158-2c4c-42f6-b85c-22a8c1c6c5ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers using set intersection and a lambda function.", "code": "def common_elements_set(list1, list2):\n    result = list(filter(lambda x: x in set(list1), list2))\n    return result", "task_id": "249_185d9e29-6776-40e4-a33f-c056e9a0367e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common characters between two strings using a lambda function.", "code": "def common_chars(str1, str2):\n    result = list(filter(lambda x: x in str1, str2))\n    return result", "task_id": "249_81575cf7-cb3c-419f-9fd1-cde2ff64e6fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common words between two sentences using a lambda function.", "code": "def common_words(sentence1, sentence2):\n    words1 = sentence1.split()\n    words2 = sentence2.split()\n    result = list(filter(lambda x: x in words1, words2))\n    return result", "task_id": "249_569b393e-514e-4f1e-9779-b0f79307d220", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers that are greater than a given condition using a lambda function.", "code": "def common_elements_with_condition(list1, list2, condition):\n    result = list(filter(lambda x: x in list1 and x > condition, list2))\n    return result", "task_id": "249_67fc40b5-8087-48bc-be34-63171cc874ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers after transforming each element by adding 1 using a lambda function.", "code": "def common_elements_with_transform(list1, list2):\n    transformed_list1 = list(map(lambda x: x + 1, list1))\n    result = list(filter(lambda x: x in transformed_list1, list2))\n    return result", "task_id": "249_37e6fb78-c080-4a0b-b867-7c29126a9794", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers where the elements in the first list are squared using a lambda function.", "code": "def common_elements_with_square(list1, list2):\n    squared_list1 = list(map(lambda x: x**2, list1))\n    result = list(filter(lambda x: x in squared_list1, list2))\n    return result", "task_id": "249_35246129-6667-404d-8c9f-9250db566452", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers that satisfy a given filter function using a lambda function.", "code": "def common_elements_with_filter(list1, list2, filter_func):\n    filtered_list1 = list(filter(filter_func, list1))\n    result = list(filter(lambda x: x in filtered_list1, list2))\n    return result", "task_id": "249_730cd083-fdc7-403f-a47e-2abff3c1a77e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of integers after applying a custom transformation function to each element in the first list using a lambda function.", "code": "def common_elements_with_custom_transform(list1, list2, transform_func):\n    transformed_list1 = list(map(transform_func, list1))\n    result = list(filter(lambda x: x in transformed_list1, list2))\n    return result", "task_id": "249_3a5636bd-4c3b-422e-81ae-c30b52e8e7ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest palindromic substring in the given string.", "code": "def longest_palindromic_substring(s: str) -> str:\n    n = len(s)\n    if n == 0:\n        return ''\n    dp = [[False] * n for _ in range(n)]\n    start, max_length = 0, 1\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = True\n            start = i\n            max_length = 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i+length-1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n    return s[start:start+max_length]", "task_id": "247_5b0c2749-f80c-48f8-914b-7f8a99d759c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest repeating subsequence in the given string.", "code": "def longest_repeating_subsequence(s: str) -> int:\n    n = len(s)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            if s[i-1] == s[j-1] and i != j:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[n][n]", "task_id": "247_ff7ad77b-256e-4462-8a76-47f1ec1066e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two given strings.", "code": "def longest_common_subsequence(x: str, y: str) -> int:\n    m, n = len(x), len(y)\n    dp = [[0] * (n+1) for _ in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if x[i-1] == y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[m][n]", "task_id": "247_9e496900-0ff7-4c85-9a2c-ddc5246d4af3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in the given array.", "code": "def longest_increasing_subsequence(arr: list) -> int:\n    n = len(arr)\n    if n == 0:\n        return 0\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)", "task_id": "247_97ba91df-8bab-458b-b465-3a158a27a56e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest consecutive elements sequence in the given array.", "code": "def longest_consecutive_subsequence(arr: list) -> int:\n    if not arr:\n        return 0\n    num_set = set(arr)\n    longest_streak = 0\n    for num in num_set:\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n            longest_streak = max(longest_streak, current_streak)\n    return longest_streak", "task_id": "247_e56e2ebc-a1b0-4b15-bcdb-5e5e6ee2e8d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters in the given string.", "code": "def longest_substring_without_repeating_characters(s: str) -> int:\n    n = len(s)\n    char_index = {}\n    max_length = 0\n    start = 0\n    for i in range(n):\n        if s[i] in char_index and char_index[s[i]] >= start:\n            start = char_index[s[i]] + 1\n        char_index[s[i]] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "247_29fabe61-105c-40dd-b159-7bf9fef6b3cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with a given sum in the given array.", "code": "def longest_subarray_with_sum(arr: list, target: int) -> int:\n    sum_map = {}\n    curr_sum = 0\n    max_length = 0\n    for i in range(len(arr)):\n        curr_sum += arr[i]\n        if curr_sum == target:\n            max_length = i + 1\n        if curr_sum - target in sum_map:\n            max_length = max(max_length, i - sum_map[curr_sum - target])\n        if curr_sum not in sum_map:\n            sum_map[curr_sum] = i\n    return max_length", "task_id": "247_d13fc73a-3fb8-43ce-b471-801102e609ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest balanced parentheses substring in the given string.", "code": "def longest_balanced_parentheses(s: str) -> int:\n    stack = [-1]\n    max_length = 0\n    for i, char in enumerate(s):\n        if char == '(': \n            stack.append(i)\n        else:\n            stack.pop()\n            if not stack:\n                stack.append(i)\n            else:\n                max_length = max(max_length, i - stack[-1])\n    return max_length", "task_id": "247_a4f15443-52df-4305-b80e-8294baccd7dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring with at most k distinct characters in the given string.", "code": "def longest_substring_k_distinct(s: str, k: int) -> int:\n    n = len(s)\n    if n == 0 or k == 0:\n        return 0\n    left, right = 0, 0\n    char_map = {}\n    max_length = 1\n    while right < n:\n        char_map[s[right]] = char_map.get(s[right], 0) + 1\n        while len(char_map) > k:\n            char_map[s[left]] -= 1\n            if char_map[s[left]] == 0:\n                del char_map[s[left]]\n            left += 1\n        max_length = max(max_length, right - left + 1)\n        right += 1\n    return max_length", "task_id": "247_8af31db2-6157-4002-8cbd-9d6ed67ff559", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subarray with at most k odd numbers in the given array.", "code": "def longest_subarray_with_at_most_k_odd_numbers(arr: list, k: int) -> int:\n    left, right = 0, 0\n    odd_count = 0\n    max_length = 0\n    while right < len(arr):\n        if arr[right] % 2 != 0:\n            odd_count += 1\n        while odd_count > k:\n            if arr[left] % 2 != 0:\n                odd_count -= 1\n            left += 1\n        max_length = max(max_length, right - left + 1)\n        right += 1\n    return max_length", "task_id": "247_b3ba97eb-1a7d-4e54-ae17-f5fb7faa6bda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of elements in a tuple that are greater than a given value.", "code": "def count_greater_than(tup, x): \n    count = 0\n    for ele in tup: \n        if ele > x: \n            count += 1\n    return count", "task_id": "250_ee3738e9-407d-4815-bc5a-aa1b97235173", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of elements in a tuple that are less than a given value.", "code": "def count_less_than(tup, x): \n    count = 0\n    for ele in tup: \n        if ele < x: \n            count += 1\n    return count", "task_id": "250_14996cad-434e-430c-b60c-80748e5ad6a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even elements in a tuple.", "code": "def count_even(tup): \n    count = 0\n    for ele in tup: \n        if ele % 2 == 0: \n            count += 1\n    return count", "task_id": "250_1fe118c3-98b5-4945-bcf8-aaac497d81c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a tuple.", "code": "def count_odd(tup): \n    count = 0\n    for ele in tup: \n        if ele % 2 != 0: \n            count += 1\n    return count", "task_id": "250_5fefd81f-7b60-4f03-9ad8-4768ac8ad9c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a tuple of characters.", "code": "def count_vowels(tup): \n    vowels = 'aeiouAEIOU'\n    count = 0\n    for ele in tup: \n        if ele in vowels: \n            count += 1\n    return count", "task_id": "250_a6e33c2b-e46f-4adc-ab14-8a2ba0ef2813", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a tuple of characters.", "code": "def count_uppercase(tup): \n    count = 0\n    for ele in tup: \n        if ele.isupper(): \n            count += 1\n    return count", "task_id": "250_ef08dacd-3645-4457-851c-799fc89cf7f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a tuple of characters.", "code": "def count_lowercase(tup): \n    count = 0\n    for ele in tup: \n        if ele.islower(): \n            count += 1\n    return count", "task_id": "250_91241b4a-ce5f-45cb-b466-9ec3b067d9ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of elements in a tuple that are divisible by a given value.", "code": "def count_divisible_by(tup, x): \n    count = 0\n    for ele in tup: \n        if ele % x == 0: \n            count += 1\n    return count", "task_id": "250_0f4e78b4-047b-47f2-bb0c-3a3a670770a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of strings in a tuple that have a specific length.", "code": "def count_strings_with_length(tup, length): \n    count = 0\n    for ele in tup: \n        if isinstance(ele, str) and len(ele) == length: \n            count += 1\n    return count", "task_id": "250_61eb3fc0-0a37-4fe1-9208-f570aabcdc29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic strings in a tuple.", "code": "def count_palindromes(tup): \n    count = 0\n    for ele in tup: \n        if isinstance(ele, str) and ele == ele[::-1]: \n            count += 1\n    return count", "task_id": "250_57fdbf82-d980-4629-bde7-8924b2e7de79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element before each even element of a list.", "code": "def insert_element_before_even(lst, element):\n    result = []\n    for elt in lst:\n        if elt % 2 == 0:\n            result.append(element)\n        result.append(elt)\n    return result", "task_id": "251_546f4a6f-cbaf-4a68-9228-8f9da2e82d00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element after each odd element of a list.", "code": "def insert_element_after_odd(lst, element):\n    result = []\n    for elt in lst:\n        result.append(elt)\n        if elt % 2 != 0:\n            result.append(element)\n    return result", "task_id": "251_39990570-6c11-4664-a4a1-71ce240a7394", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element before the first element of a list.", "code": "def insert_element_before_first(lst, element):\n    return [element] + lst", "task_id": "251_576722c0-8901-4555-9e76-6ed178a345a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element after the last element of a list.", "code": "def insert_element_after_last(lst, element):\n    return lst + [element]", "task_id": "251_e08d8a54-3c9a-40b4-9eb7-44c2fea26cf9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a character before each vowel in a string.", "code": "def insert_element_before_each_vowel(s, element):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        if char in vowels:\n            result += element\n        result += char\n    return result", "task_id": "251_ffaa21dc-745b-4f6d-beda-5d3738ac5900", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a character after each consonant in a string.", "code": "def insert_element_after_each_consonant(s, element):\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in s:\n        result += char\n        if char not in vowels and char.isalpha():\n            result += element\n    return result", "task_id": "251_5e5fbe77-5121-41fc-a702-d894d571b22c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element before each multiple of a given number in a list.", "code": "def insert_element_before_each_multiple_of_n(lst, n, element):\n    result = []\n    for elt in lst:\n        if elt % n == 0:\n            result.append(element)\n        result.append(elt)\n    return result", "task_id": "251_17e6a843-bb0f-4eab-b925-274466f62536", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an element after each multiple of a given number in a list.", "code": "def insert_element_after_each_multiple_of_n(lst, n, element):\n    result = []\n    for elt in lst:\n        result.append(elt)\n        if elt % n == 0:\n            result.append(element)\n    return result", "task_id": "251_c5ab83b6-e7ab-450e-a5e2-a2dc373df2ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a character before each word in a string.", "code": "def insert_element_before_each_word(s, element):\n    words = s.split()\n    result = ' '.join([element + word for word in words])\n    return result", "task_id": "251_5e843ddb-fa0d-4c2c-94d0-dcc94c2405b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a character after each word in a string.", "code": "def insert_element_after_each_word(s, element):\n    words = s.split()\n    result = ' '.join([word + element for word in words])\n    return result", "task_id": "251_b2522fcb-487f-4756-9c16-2d193b4c8bf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to polar coordinates.", "code": "import math\ndef convert_to_polar(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta)", "task_id": "252_a2edf988-14e1-427a-97aa-1140173f88ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert polar coordinates to Cartesian coordinates.", "code": "import math\ndef convert_to_cartesian(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "task_id": "252_12a4cc77-4c77-4920-bc75-f488165e6d99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert 3D Cartesian coordinates to cylindrical coordinates.", "code": "import math\ndef rectangular_to_polar(x, y, z):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.atan2(y, x)\n    return (r, theta, z)", "task_id": "252_8a376727-9349-4753-866a-e24a22c37fd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert cylindrical coordinates to 3D Cartesian coordinates.", "code": "import math\ndef polar_to_rectangular(r, theta, z):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y, z)", "task_id": "252_c2acebdf-81cc-473d-b8f5-07e3e8943d57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert 3D Cartesian coordinates to spherical coordinates.", "code": "import math\ndef convert_to_spherical(x, y, z):\n    r = math.sqrt(x**2 + y**2 + z**2)\n    theta = math.atan2(y, x)\n    phi = math.acos(z / r)\n    return (r, theta, phi)", "task_id": "252_16358968-e9be-4285-8206-5793c71ce8e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert spherical coordinates to 3D Cartesian coordinates.", "code": "import math\ndef spherical_to_cartesian(r, theta, phi):\n    x = r * math.sin(phi) * math.cos(theta)\n    y = r * math.sin(phi) * math.sin(theta)\n    z = r * math.cos(phi)\n    return (x, y, z)", "task_id": "252_d0971f03-7fe3-4976-9fe4-bc53105cc8d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to polar coordinates with the angle in degrees.", "code": "import math\ndef convert_to_polar_degrees(x, y):\n    r = math.sqrt(x**2 + y**2)\n    theta = math.degrees(math.atan2(y, x))\n    return (r, theta)", "task_id": "252_ba543e1c-9867-4014-b96f-79573ed6b5e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert polar coordinates with the angle in degrees to Cartesian coordinates.", "code": "import math\ndef polar_degrees_to_cartesian(r, theta):\n    theta = math.radians(theta)\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "task_id": "252_34c54f61-d754-41f4-a17c-e6bf4636853c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a complex number to Cartesian coordinates.", "code": "def complex_to_cartesian(z):\n    return (z.real, z.imag)", "task_id": "252_e68e4204-8393-49a3-9599-c1360d560f15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert Cartesian coordinates to a complex number.", "code": "def cartesian_to_complex(x, y):\n    return complex(x, y)", "task_id": "252_befc9991-1913-4298-bfca-8c5403216374", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count even numbers from a given list.", "code": "def count_even_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2 == 0:\n            ctr += 1\n    return ctr", "task_id": "253_e2c20b9f-d91d-46c9-a009-d60ff1bd0ac3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count strings from a given list.", "code": "def count_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str):\n            ctr += 1\n    return ctr", "task_id": "253_87c53605-f4f8-46b9-977e-4d48c9685d2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count positive integers from a given list.", "code": "def count_positive_integers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i > 0:\n            ctr += 1\n    return ctr", "task_id": "253_431e8a20-c7fb-4088-b68a-6be4e2c98b5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count negative numbers from a given list.", "code": "def count_negative_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, (int, float)) and i < 0:\n            ctr += 1\n    return ctr", "task_id": "253_8251c5ea-4b5d-43ed-92b6-110598027e0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count float numbers from a given list.", "code": "def count_floats(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, float):\n            ctr += 1\n    return ctr", "task_id": "253_76e70cf2-1d22-4ab4-a4a0-173587bc10e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count odd numbers from a given list.", "code": "def count_odd_numbers(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, int) and i % 2 != 0:\n            ctr += 1\n    return ctr", "task_id": "253_fed7c79c-5b3d-4c43-89f2-94805f5e98d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count boolean values from a given list.", "code": "def count_booleans(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, bool):\n            ctr += 1\n    return ctr", "task_id": "253_af68db9d-a348-4803-97ed-605cba6b4994", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count non-integer values from a given list.", "code": "def count_non_integers(lst):\n    ctr = 0\n    for i in lst:\n        if not isinstance(i, int):\n            ctr += 1\n    return ctr", "task_id": "253_fa540220-edcf-4964-a69b-91d5f8898fa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count strings that are fully uppercase from a given list.", "code": "def count_uppercase_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str) and i.isupper():\n            ctr += 1\n    return ctr", "task_id": "253_5421f90b-d4dc-4aa7-afc7-de53c5493c1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count non-empty strings from a given list.", "code": "def count_non_empty_strings(lst):\n    ctr = 0\n    for i in lst:\n        if isinstance(i, str) and i:\n            ctr += 1\n    return ctr", "task_id": "253_21bd4fa8-139a-41ef-885e-2d16cd79c09c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words starting with any vowel in a given string.", "code": "import re\ndef find_words_with_vowels(text):\n    return re.findall(r'\\b[aeiouAEIOU]\\w*', text)", "task_id": "254_14287e52-da77-48a3-8c94-535f476bce2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words starting with any consonant in a given string.", "code": "import re\ndef find_words_with_consonants(text):\n    return re.findall(r'\\b[^aeiouAEIOU\\W]\\w*', text)", "task_id": "254_205e940f-bdba-4135-b047-0e037c71ec9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words of a given length in a string.", "code": "import re\ndef find_words_with_length(text, length):\n    return re.findall(r'\\b\\w{' + str(length) + r'}\\b', text)", "task_id": "254_c3cb15fa-a137-430c-9f4d-0f1cb848521d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words ending with a given suffix in a string.", "code": "import re\ndef find_words_with_suffix(text, suffix):\n    return re.findall(r'\\b\\w*' + re.escape(suffix) + r'\\b', text)", "task_id": "254_cc6d6536-dc6a-426d-87f7-260f3fdb92bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words starting with a given prefix in a string.", "code": "import re\ndef find_words_with_prefix(text, prefix):\n    return re.findall(r'\\b' + re.escape(prefix) + r'\\w*', text)", "task_id": "254_0e720e47-0833-49c6-a7d1-7a9793e9fc82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one digit in a string.", "code": "import re\ndef find_words_with_digit(text):\n    return re.findall(r'\\b\\w*\\d\\w*\\b', text)", "task_id": "254_b325bb91-1149-4438-b52f-ef24fd622cf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one special character in a string.", "code": "import re\ndef find_words_with_special_char(text):\n    return re.findall(r'\\b\\w*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+\\w*\\b', text)", "task_id": "254_9f24def3-61ff-4750-a342-6a5c9163426b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words starting with a capital letter in a string.", "code": "import re\ndef find_words_with_capital(text):\n    return re.findall(r'\\b[A-Z]\\w*', text)", "task_id": "254_00c50a14-75a5-45cd-a127-c21cf78f512a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words containing at least one repeated character in a string.", "code": "import re\ndef find_words_with_repeated_chars(text):\n    return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "254_ba3f4ba2-1b16-4bab-a1ac-c774023f4aff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words in a string.", "code": "import re\ndef find_words_with_palindromes(text):\n    words = re.findall(r'\\b\\w+\\b', text)\n    return [word for word in words if word == word[::-1]]", "task_id": "254_9acdc07a-2d2e-40f9-9e3f-cf3ba3e9870d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of numbers from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_numbers(nums, k):\n    return list(combinations_with_replacement(nums, k))", "task_id": "255_5e9e74d4-3647-45cb-8f8b-5b69fadec8a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of letters from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_letters(letters, k):\n    return list(combinations_with_replacement(letters, k))", "task_id": "255_46dbefe5-a33a-4a25-9984-fd8f36cb8437", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of fruits from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_fruits(fruits, k):\n    return list(combinations_with_replacement(fruits, k))", "task_id": "255_71d5f610-01b9-4782-8f6c-ece6f8daf553", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of animals from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_animals(animals, k):\n    return list(combinations_with_replacement(animals, k))", "task_id": "255_6f1c31c8-7e64-4385-bc78-fbdb5c733dc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of flowers from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_flowers(flowers, k):\n    return list(combinations_with_replacement(flowers, k))", "task_id": "255_63ab828b-0ded-475f-a634-470abc9bec4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of shapes from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_shapes(shapes, k):\n    return list(combinations_with_replacement(shapes, k))", "task_id": "255_931880a4-0904-42e5-9c83-45822ab1967d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of cities from a given list and generate all the combinations with repetitions.", "code": "from itertools import combinations_with_replacement\ndef choose_cities(cities, k):\n    return list(combinations_with_replacement(cities, k))", "task_id": "255_7c2446e5-d987-4ed8-8957-fbfccc08438a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of numbers from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_numbers_no_repetition(nums, k):\n    return list(combinations(nums, k))", "task_id": "255_d631a543-68b3-490a-b51a-25fdcd4776a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of letters from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_letters_no_repetition(letters, k):\n    return list(combinations(letters, k))", "task_id": "255_a1337766-6ce0-40e4-ace9-f1f095f6c34f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to choose specified number of fruits from a given list and generate all the combinations without repetitions.", "code": "from itertools import combinations\ndef choose_fruits_no_repetition(fruits, k):\n    return list(combinations(fruits, k))", "task_id": "255_cb7c68cd-c104-4bfa-80b8-a09bb6621442", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers less than a given non-negative number.", "code": "def count_even_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if num % 2 == 0:\n            ctr += 1\n    return ctr", "task_id": "256_cb3b1a64-e711-4dd2-a735-be1e936743cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of squares of all numbers less than a given non-negative number.", "code": "def sum_of_squares(n):\n    total = 0\n    for num in range(n):\n        total += num ** 2\n    return total", "task_id": "256_281b3e27-942f-4042-847a-9d15b39a82c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers less than a given non-negative number.", "code": "def count_odd_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if num % 2 != 0:\n            ctr += 1\n    return ctr", "task_id": "256_4d4ac4f1-8ee3-4d2d-9aff-52fed452a4c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of cubes of all numbers less than a given non-negative number.", "code": "def sum_of_cubes(n):\n    total = 0\n    for num in range(n):\n        total += num ** 3\n    return total", "task_id": "256_89143ace-252b-4dfd-b3dd-a45d21d6e5be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of multiples of three less than a given non-negative number.", "code": "def count_multiples_of_three(n):\n    ctr = 0\n    for num in range(n):\n        if num % 3 == 0:\n            ctr += 1\n    return ctr", "task_id": "256_1c14b90f-bbe7-4309-98f1-27fdc2da5e2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of multiples of five less than a given non-negative number.", "code": "def sum_of_multiples_of_five(n):\n    total = 0\n    for num in range(n):\n        if num % 5 == 0:\n            total += num\n    return total", "task_id": "256_4beaae4c-9181-4c52-bf1d-228e2ad37d18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of perfect squares less than a given non-negative number.", "code": "def count_perfect_squares(n):\n    ctr = 0\n    for num in range(n):\n        if (num ** 0.5).is_integer():\n            ctr += 1\n    return ctr", "task_id": "256_299f3c35-219e-4dff-92b3-4cb342b344c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of even numbers less than a given non-negative number.", "code": "def sum_of_even_numbers(n):\n    total = 0\n    for num in range(n):\n        if num % 2 == 0:\n            total += num\n    return total", "task_id": "256_8d1d7191-c6ed-47d2-8ca4-0112466bfac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic numbers less than a given non-negative number.", "code": "def count_palindromic_numbers(n):\n    ctr = 0\n    for num in range(n):\n        if str(num) == str(num)[::-1]:\n            ctr += 1\n    return ctr", "task_id": "256_84bbe607-7723-413a-a7de-49b18faa7467", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of odd numbers less than a given non-negative number.", "code": "def sum_of_odd_numbers(n):\n    total = 0\n    for num in range(n):\n        if num % 2 != 0:\n            total += num\n    return total", "task_id": "256_fa10ec40-dea3-4d9e-889c-1f8f27122d96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "257_68e7c488-0e5b-42af-80d2-2be0061b7ec9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "257_b7844371-aae2-45e3-991d-d1cad06ad107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in a list.", "code": "def sum_of_list(lst: list) -> int:\n    return sum(lst)", "task_id": "257_45cf87a1-9201-4e96-843c-0b096b976de1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "257_66040e1f-3434-477b-a4a2-c4e1235fe017", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "257_3b2d5379-126f-4250-9d3d-d22bf1f02c72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "257_2741ba5f-54ef-4715-8ea2-e4e97792ab40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "257_bb81aef6-821e-4e90-b1a3-3cc8b010f604", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "257_f524df66-04d6-4a45-b19a-5dda1d177bfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(set(lst))", "task_id": "257_7f381ee5-a8f2-4e5e-87df-16c315171c07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def find_gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "257_5871b3e5-404a-488a-a514-236134fabf4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of even elements in the given list using a lambda function.", "code": "def count_even(array_nums):\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return count_even", "task_id": "258_f5c2f442-59b1-4f52-85b6-46d8af84d78c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of odd elements in the given list using a lambda function.", "code": "def sum_odd(array_nums):\n   sum_odd = sum(list(filter(lambda x: (x%2 != 0) , array_nums)))\n   return sum_odd", "task_id": "258_99effd12-5d29-4c8a-b13f-cddd366bf80d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of even elements in the given list using a lambda function.", "code": "def sum_even(array_nums):\n   sum_even = sum(list(filter(lambda x: (x%2 == 0) , array_nums)))\n   return sum_even", "task_id": "258_e3bcaf08-9d2d-4e85-8020-4d61f8df2f27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of positive elements in the given list using a lambda function.", "code": "def count_positive(array_nums):\n   count_positive = len(list(filter(lambda x: (x > 0) , array_nums)))\n   return count_positive", "task_id": "258_58b59456-fc54-4f6f-9464-bc0c6be7db76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of negative elements in the given list using a lambda function.", "code": "def count_negative(array_nums):\n   count_negative = len(list(filter(lambda x: (x < 0) , array_nums)))\n   return count_negative", "task_id": "258_958f4254-7189-40bc-8c09-0817a3e0225b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of positive elements in the given list using a lambda function.", "code": "def sum_positive(array_nums):\n   sum_positive = sum(list(filter(lambda x: (x > 0) , array_nums)))\n   return sum_positive", "task_id": "258_3652f457-49ab-4dc1-8a8a-b902c50f9800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of negative elements in the given list using a lambda function.", "code": "def sum_negative(array_nums):\n   sum_negative = sum(list(filter(lambda x: (x < 0) , array_nums)))\n   return sum_negative", "task_id": "258_a6dcedee-d8b4-46aa-8632-4d15bb2b5689", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of elements divisible by 3 in the given list using a lambda function.", "code": "def count_divisible_by_3(array_nums):\n   count_divisible_by_3 = len(list(filter(lambda x: (x % 3 == 0) , array_nums)))\n   return count_divisible_by_3", "task_id": "258_ac2f8874-603d-4d3a-a8da-7a37a54757e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of elements divisible by 5 in the given list using a lambda function.", "code": "def sum_divisible_by_5(array_nums):\n   sum_divisible_by_5 = sum(list(filter(lambda x: (x % 5 == 0) , array_nums)))\n   return sum_divisible_by_5", "task_id": "258_0032c9ff-d83d-487c-b99e-ed1227be86ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of prime elements in the given list using a lambda function.", "code": "def count_prime(array_nums):\n   is_prime = lambda x: x > 1 and all(x % i != 0 for i in range(2, int(x**0.5) + 1))\n   count_prime = len(list(filter(is_prime, array_nums)))\n   return count_prime", "task_id": "258_66b85d1a-a8df-4da6-8c81-0a9a9f876808", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn fibonacci(n-1) + fibonacci(n-2)", "task_id": "260_b4d896ce-dac0-4135-8b99-ae4893f44904", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def factorial(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn n * factorial(n-1)", "task_id": "260_a7d22fb4-6afd-4239-b74b-ae2de0dc0b7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn n * n + sum_of_squares(n-1)", "task_id": "260_58bca90e-f8f0-48e4-bdea-394dc0ef9e3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tribonacci number, where each number is the sum of the three preceding ones, starting from 0, 1, 1.", "code": "def tribonacci(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)", "task_id": "260_d0614b37-fe43-4e36-83de-68d393b71f45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Pell number.", "code": "def pell_number(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 * pell_number(n-1) + pell_number(n-2)", "task_id": "260_c9f998c7-ac4b-45aa-a89b-0dd9c28e5a0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Lucas number.", "code": "def lucas_number(n):\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn lucas_number(n-1) + lucas_number(n-2)", "task_id": "260_4fac1ff3-d146-40cb-b8cf-0586b9c6e1b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a number n.", "code": "def sum_of_digits(n):\n\tif n == 0:\n\t\treturn 0\n\telse:\n\t\treturn n % 10 + sum_of_digits(n // 10)", "task_id": "260_ef909e32-2b39-453f-8d02-916ae5aef686", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s):\n\tif len(s) == 0:\n\t\treturn s\n\telse:\n\t\treturn reverse_string(s[1:]) + s[0]", "task_id": "260_8885b972-7c0d-42b6-8693-3784d71235e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n\tif b == 0:\n\t\treturn a\n\telse:\n\t\treturn gcd(b, a % b)", "task_id": "260_ce50e0f1-2ed1-453e-876e-d03bf4462670", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x raised to the power n.", "code": "def power(x, n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\treturn x * power(x, n-1)", "task_id": "260_fe3fa7b7-def2-4f1b-953f-77a345903fb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the corresponding elements of two tuples.", "code": "def sum_elements(test_tup1, test_tup2):\n  res = tuple(a + b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_abd1538c-f0ef-4586-960e-04d257be06f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the corresponding elements of two tuples.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(min(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_f1572555-1bba-42d7-81e5-c1c6abd86654", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the corresponding elements of two tuples.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(a * b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_ff913cce-64bd-4fd3-b388-0e4d73f27d76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the corresponding elements of two tuples. Assume no division by zero.", "code": "def divide_elements(test_tup1, test_tup2):\n  res = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_8c75de82-1439-4b77-99cb-384775f8b6c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the corresponding elements of the second tuple from the first tuple.", "code": "def subtract_elements(test_tup1, test_tup2):\n  res = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_8e684e2d-da88-4cd8-9b2b-da2e533b8272", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the corresponding elements of two tuples.", "code": "def concatenate_elements(test_tup1, test_tup2):\n  res = tuple(str(a) + str(b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_e74145e4-a791-4ea4-aae2-47854b9fa857", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise the elements of the first tuple to the power of the corresponding elements of the second tuple.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_e7d744a1-ec0c-43cf-8a64-175b5c6bd5a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the corresponding elements of two tuples.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_2f401e7d-a063-4689-8e60-c99c48e9f774", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of the corresponding elements of two tuples.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(abs(a - b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_b3ad731d-d865-4fe1-a513-96dfff6563f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the corresponding elements of two tuples. If an element is missing in one of the tuples, use the default value.", "code": "def max_elements_with_default(test_tup1, test_tup2, default):\n  len1, len2 = len(test_tup1), len(test_tup2)\n  if len1 < len2:\n    test_tup1 += (default,) * (len2 - len1)\n  elif len2 < len1:\n    test_tup2 += (default,) * (len1 - len2)\n  res = tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "259_f0d9482e-45a6-4922-8277-891ff1940752", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition operation across the given tuples.", "code": "def add_elements(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_f578b648-d871-4436-b63b-687a8946bee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction operation across the given tuples.", "code": "def subtract_elements(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_498c92a8-157c-4224-94d7-c8942ba0a166", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication operation across the given tuples.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_e056843f-ecb6-466b-9c43-f2d444c08aa2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise modulo operation across the given tuples.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_4202829c-1205-4e51-9cfa-c569b9d8f866", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise power operation across the given tuples.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_1a1dff8f-45dc-4064-ae60-26bdeffe99ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element-wise maximum across the given tuples.", "code": "def max_elements(test_tup1, test_tup2):\n  res = tuple(max(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_aa00fe21-3739-48ed-817e-b0e3796b223b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element-wise minimum across the given tuples.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(min(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_ca603a2c-bf1c-467d-89a1-41a0e88e0818", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element-wise absolute difference across the given tuples.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(abs(ele1 - ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_0bb9d11d-8e52-4af7-8b62-6d69c23c6082", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the corresponding elements of the given tuples as strings.", "code": "def concat_elements(test_tup1, test_tup2):\n  res = tuple(str(ele1) + str(ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_66b3da3b-ada6-41e4-8e14-8a8036e47e55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compare the corresponding elements of the given tuples and return a tuple of booleans indicating if elements in the first tuple are greater than those in the second tuple.", "code": "def compare_elements(test_tup1, test_tup2):\n  res = tuple(ele1 > ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "261_6c8c89f0-06fa-4153-9a58-54679b4f70e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a cat's age in cat's years.", "code": "def cat_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age == 1:\n  c_age = 15\n elif h_age == 2:\n  c_age = 24\n else:\n  c_age = 24 + (h_age - 2) * 4\n return c_age", "task_id": "264_3a8fdb25-a792-4645-bd5d-31ab51b9bbc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a turtle's age in turtle's years.", "code": "def turtle_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 5:\n  t_age = h_age * 2\n else:\n  t_age = 10 + (h_age - 5) * 1.5\n return t_age", "task_id": "264_4c50df41-3dc7-433b-a85d-a56aa36430ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a rabbit's age in rabbit's years.", "code": "def rabbit_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 1:\n  r_age = h_age * 12\n else:\n  r_age = 12 + (h_age - 1) * 6\n return r_age", "task_id": "264_3fc9ed84-6f0f-47a7-9d27-60d823fced51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a parrot's age in parrot's years.", "code": "def parrot_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 3:\n  p_age = h_age * 5\n else:\n  p_age = 15 + (h_age - 3) * 2\n return p_age", "task_id": "264_5f8787dd-2cc2-4f61-83b6-8889e7b2a214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a hamster's age in hamster's years.", "code": "def hamster_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 1:\n  h_age = h_age * 25\n else:\n  h_age = 25 + (h_age - 1) * 12.5\n return h_age", "task_id": "264_016d97ba-a117-4428-970d-31a69469fecf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a goldfish's age in goldfish's years.", "code": "def goldfish_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 2:\n  g_age = h_age * 5\n else:\n  g_age = 10 + (h_age - 2) * 1.5\n return g_age", "task_id": "264_0b4ab259-77eb-446c-88e1-bc3a55e0d256", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a horse's age in horse's years.", "code": "def horse_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 3:\n  ho_age = h_age * 6.5\n else:\n  ho_age = 19.5 + (h_age - 3) * 2.5\n return ho_age", "task_id": "264_4bbebccd-a9c7-40c0-9297-5c7692fd002e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate an elephant's age in elephant's years.", "code": "def elephant_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 10:\n  e_age = h_age * 1.5\n else:\n  e_age = 15 + (h_age - 10) * 1.1\n return e_age", "task_id": "264_82ec3dfc-c3d3-45f6-a98a-27774ea37b08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a frog's age in frog's years.", "code": "def frog_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 2:\n  f_age = h_age * 4\n else:\n  f_age = 8 + (h_age - 2) * 2\n return f_age", "task_id": "264_e2d734c1-c655-4b52-bb39-523767a8a2fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a mouse's age in mouse's years.", "code": "def mouse_age(h_age):\n if h_age < 0:\n  exit()\n elif h_age <= 1:\n  m_age = h_age * 30\n else:\n  m_age = 30 + (h_age - 1) * 15\n return m_age", "task_id": "264_ca0b0bec-2de2-4a97-a5b4-0dba1a0228c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements less than or equal to a given value.", "code": "def split_by_value(list1, value):\n    part1 = [x for x in list1 if x <= value]\n    part2 = [x for x in list1 if x > value]\n    return part1, part2", "task_id": "262_93b5c1ba-9a9c-40c6-8981-33eb5191dceb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements up to a given index.", "code": "def split_by_index(list1, index):\n    return list1[:index+1], list1[index+1:]", "task_id": "262_5cd22e37-7538-4664-9fe6-0091170df632", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all even numbers and the second part contains all odd numbers.", "code": "def split_by_even_odd(list1):\n    evens = [x for x in list1 if x % 2 == 0]\n    odds = [x for x in list1 if x % 2 != 0]\n    return evens, odds", "task_id": "262_63402b7c-c500-4d9f-b6e5-e4dcd19fe0a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all non-negative numbers and the second part contains all negative numbers.", "code": "def split_by_sign(list1):\n    non_negatives = [x for x in list1 if x >= 0]\n    negatives = [x for x in list1 if x < 0]\n    return non_negatives, negatives", "task_id": "262_559d5169-c676-4f12-b2d5-13cc18e87ba6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings of length less than or equal to a given length.", "code": "def split_by_length(strings, length):\n    short_strings = [s for s in strings if len(s) <= length]\n    long_strings = [s for s in strings if len(s) > length]\n    return short_strings, long_strings", "task_id": "262_e293f699-7e51-4e58-af71-26fbf6bb6282", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements that are multiples of a given number.", "code": "def split_by_multiple_of(list1, n):\n    multiples = [x for x in list1 if x % n == 0]\n    non_multiples = [x for x in list1 if x % n != 0]\n    return multiples, non_multiples", "task_id": "262_5e2c454d-eb40-471c-aeef-d08773d01840", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all palindrome strings.", "code": "def split_by_palindrome(strings):\n    palindromes = [s for s in strings if s == s[::-1]]\n    non_palindromes = [s for s in strings if s != s[::-1]]\n    return palindromes, non_palindromes", "task_id": "262_5761fc20-e1fc-4ae3-9368-dfbb37836d05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings that start with a vowel.", "code": "def split_by_vowel_start(strings):\n    vowels = 'AEIOUaeiou'\n    vowel_start = [s for s in strings if s[0] in vowels]\n    non_vowel_start = [s for s in strings if s[0] not in vowels]\n    return vowel_start, non_vowel_start", "task_id": "262_2a6d5627-3074-4b3c-b220-20c4d85a5942", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list of strings into two parts where the first part contains all strings that are in uppercase.", "code": "def split_by_uppercase(strings):\n    uppercase = [s for s in strings if s.isupper()]\n    non_uppercase = [s for s in strings if not s.isupper()]\n    return uppercase, non_uppercase", "task_id": "262_92273911-0ca5-4a43-8295-8810a147d16f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into two parts where the first part contains all elements that are divisible by a given divisor.", "code": "def split_by_divisibility(list1, divisor):\n    divisible = [x for x in list1 if x % divisor == 0]\n    non_divisible = [x for x in list1 if x % divisor != 0]\n    return divisible, non_divisible", "task_id": "262_0f9b0b94-b44e-4f1b-be3d-e35cb6d45e4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists.", "code": "def merge_lists(l1, l2):\n    return l1 + l2", "task_id": "263_f36ad821-730e-42fc-bb08-e765e939d91e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sets.", "code": "def merge_sets(s1, s2):\n    return s1.union(s2)", "task_id": "263_9dbffd69-1abc-422b-bfe2-22c8a4e0427b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two strings.", "code": "def merge_strings(s1, s2):\n    return s1 + s2", "task_id": "263_bfed1d9a-b21f-4eab-a984-dd44e26f19e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two tuples.", "code": "def merge_tuples(t1, t2):\n    return t1 + t2", "task_id": "263_68cd7584-917e-4278-96ff-f1a4f29afad9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, summing values of common keys.", "code": "def merge_dicts_with_sum(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result", "task_id": "263_c64b6b1b-a5a2-4272-a1e8-12713afac051", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists by alternating their elements.", "code": "def merge_lists_alternating(l1, l2):\n    result = []\n    for a, b in zip(l1, l2):\n        result.extend([a, b])\n    result.extend(l1[len(l2):])\n    result.extend(l2[len(l1):])\n    return result", "task_id": "263_7d61ec48-0391-4c9a-a4a6-5a0108bc1da7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, combining values of common keys into lists.", "code": "def merge_dicts_with_list_values(d1, d2):\n    result = {key: [value] for key, value in d1.items()}\n    for key, value in d2.items():\n        if key in result:\n            result[key].append(value)\n        else:\n            result[key] = [value]\n    return result", "task_id": "263_6cc20cd2-f83d-46fc-82c5-d1d02e58f98f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists and remove duplicates.", "code": "def merge_lists_remove_duplicates(l1, l2):\n    return list(set(l1 + l2))", "task_id": "263_5471a520-2c2c-4b13-b9e7-3805b815f5dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries, keeping the maximum value for common keys.", "code": "def merge_dicts_with_max_values(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = max(result[key], value)\n        else:\n            result[key] = value\n    return result", "task_id": "263_354e9901-ab9d-4499-8461-e6887820a439", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists and return a sorted list.", "code": "def merge_lists_sorted(l1, l2):\n    return sorted(l1 + l2)", "task_id": "263_63353299-15b7-4f75-8615-f0e22bf618ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse every nth element in a list.", "code": "def reverse_every_nth(S, step):\n    return [S[i:i+step][::-1] for i in range(0, len(S), step)]", "task_id": "265_bf4c50b9-98e7-4471-ae38-3837d1e01a34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum every nth element in a list.", "code": "def sum_every_nth(S, step):\n    return [sum(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_a37febff-9c7c-47ac-a0ae-cbdf3887ccd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply every nth element in a list.", "code": "def multiply_every_nth(S, step):\n    from functools import reduce\n    return [reduce(lambda x, y: x * y, S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_03d9e5dd-2b54-4ccc-922d-3b534cae79e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of every nth element in a list.", "code": "def max_every_nth(S, step):\n    return [max(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_49fd08bf-fa75-4457-93af-662ef3370429", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of every nth element in a list.", "code": "def min_every_nth(S, step):\n    return [min(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_c1831ffd-4771-42c9-b0c3-ea7b59670d3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of every nth element in a list.", "code": "def avg_every_nth(S, step):\n    return [sum(S[i:i+step])/len(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_949a6467-efa4-4853-bf11-235894ee529b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in every nth segment of a list.", "code": "def count_every_nth(S, step):\n    return [len(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_d2649cbe-059e-42d9-8d07-3e41f11581d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of every nth element in a list.", "code": "def sum_of_squares_every_nth(S, step):\n    return [sum(x**2 for x in S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_174b2f0d-15c7-4513-a8c6-e32523b27224", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate every nth element in a list of strings.", "code": "def concatenate_every_nth(S, step):\n    return [''.join(S[i:i+step]) for i in range(0, len(S), step)]", "task_id": "265_21948780-6818-439a-bf47-6c189eff9cf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the alternating sum of every nth element in a list.", "code": "def alternating_sum_every_nth(S, step):\n    return [sum(S[i:i+step][::2]) - sum(S[i:i+step][1::2]) for i in range(0, len(S), step)]", "task_id": "265_cd603192-fdcb-4d05-8d38-f2aa58ffd63f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a character to its ASCII value.", "code": "def char_to_ascii(c: str) -> int:\n    return ord(c)", "task_id": "269_02d33976-a310-42d1-9c3c-30977cb86f46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an ASCII value to its corresponding character.", "code": "def ascii_to_char(n: int) -> str:\n    return chr(n)", "task_id": "269_c642f90b-60da-4dc5-9eaf-6239c9918b63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of ASCII values of all characters in a string.", "code": "def sum_ascii_values(s: str) -> int:\n    return sum(ord(c) for c in s)", "task_id": "269_914034b1-653e-4a1a-a570-12aacbae52dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a character to its hexadecimal ASCII value.", "code": "def char_to_hex(c: str) -> str:\n    return hex(ord(c))", "task_id": "269_5b8573e6-a328-41ab-ba5f-230b7fc64703", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a hexadecimal ASCII value to its corresponding character.", "code": "def hex_to_char(h: str) -> str:\n    return chr(int(h, 16))", "task_id": "269_9e84ba31-38b5-4ce0-945d-d706b9a2fc6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a character is a printable ASCII character.", "code": "def is_ascii_printable(c: str) -> bool:\n    return 32 <= ord(c) <= 126", "task_id": "269_7dbbfbe1-6f12-499f-8263-e96d3a309aed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference between the ASCII values of two characters.", "code": "def ascii_difference(c1: str, c2: str) -> int:\n    return abs(ord(c1) - ord(c2))", "task_id": "269_9e09c270-8400-464c-908f-0a3209b635f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a character to its binary ASCII value.", "code": "def ascii_to_binary(c: str) -> str:\n    return bin(ord(c))[2:]", "task_id": "269_596c842a-6860-41fc-9848-3dd55f234519", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a binary ASCII value to its corresponding character.", "code": "def binary_to_char(b: str) -> str:\n    return chr(int(b, 2))", "task_id": "269_1b4d5d05-be1c-47e5-a0eb-e68aa8f3bddd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a character is an uppercase ASCII letter.", "code": "def is_ascii_uppercase(c: str) -> bool:\n    return 'A' <= c <= 'Z'", "task_id": "269_102ba37c-1da9-401e-8868-ea33361e0c07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side_length: float) -> float:\n    return 4 * side_length", "task_id": "266_8f838d23-0460-48f9-8e67-9d93ad6ba288", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(side_length: float) -> float:\n    return side_length ** 3", "task_id": "266_15b96e74-eac0-4934-ab5d-abd7eabf57d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length: float, width: float) -> float:\n    return length * width", "task_id": "266_205c8877-8ed4-436e-869b-dedb7da97e21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(radius: float) -> float:\n    import math\n    return 2 * math.pi * radius", "task_id": "266_3c323bf6-b1e2-4810-9ab4-93b39dca6d1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(radius: float) -> float:\n    import math\n    return 4 * math.pi * radius ** 2", "task_id": "266_91b0872c-eac5-4b69-adf3-01a91dd15fd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(radius: float, height: float) -> float:\n    import math\n    return math.pi * radius ** 2 * height", "task_id": "266_34b44912-5009-40fa-88eb-5aa1e366dda7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base: float, height: float) -> float:\n    return 0.5 * base * height", "task_id": "266_2850692f-f30a-4581-89cb-724dc661173d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n    return 2 * (length + width)", "task_id": "266_276f548d-c52a-4262-8a2b-13ce4a78c74d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(radius: float, height: float) -> float:\n    import math\n    return (1/3) * math.pi * radius ** 2 * height", "task_id": "266_4f307af2-4b5e-4a4f-9eec-78f94293ceee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "def surface_area_cylinder(radius: float, height: float) -> float:\n    import math\n    return 2 * math.pi * radius * (radius + height)", "task_id": "266_b433c277-e235-4983-aa27-66517f2f1624", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th hexagonal number.", "code": "def find_hexagonal_num(n: int) -> int:\n    return n * (2 * n - 1)", "task_id": "268_e161ae17-18ef-4ae1-9382-1be09f91b885", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th pentagonal number.", "code": "def find_pentagonal_num(n: int) -> int:\n    return n * (3 * n - 1) // 2", "task_id": "268_290bbcd6-ae99-49dd-b8b4-11165f9d044a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th triangular number.", "code": "def find_triangular_num(n: int) -> int:\n    return n * (n + 1) // 2", "task_id": "268_1bc45bb4-76f0-4491-aedb-3e907d9e119f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th square number.", "code": "def find_square_num(n: int) -> int:\n    return n * n", "task_id": "268_4ce08a4e-44c3-4168-88a2-fe003cd9da10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th cube number.", "code": "def find_cube_num(n: int) -> int:\n    return n * n * n", "task_id": "268_0c6f353b-ebac-44da-90d2-c79d66952205", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th tetrahedral number.", "code": "def find_tetrahedral_num(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6", "task_id": "268_c485217e-0a53-4ae8-9e6f-1c585c6efa30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fibonacci number.", "code": "def find_fibonacci_num(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "268_6d780cc1-3455-4052-86b9-407e49758910", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def find_factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * find_factorial(n - 1)", "task_id": "268_414858dc-5254-4fe8-834e-556707eaa224", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the double factorial of a number n.", "code": "def find_double_factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * find_double_factorial(n - 2)", "task_id": "268_a1d9a600-8066-4bb0-9ac2-8cc2978e70d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Catalan number.", "code": "def find_catalan_num(n: int) -> int:\n    if n == 0:\n        return 1\n    catalan = 1\n    for i in range(2, n + 1):\n        catalan = catalan * (n + i) // i\n    return catalan", "task_id": "268_4d73d623-dff5-4256-8ad4-349f28cca07a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Lucas number.", "code": "def find_lucas_num(n: int) -> int:\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "268_93fb95d5-1ca0-4c09-8c37-972d64d38111", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n even natural numbers.", "code": "def sum_of_squares_even(n):\n    return n * (n + 1) * (2 * n + 1) // 3", "task_id": "267_7e2e20d9-e8cf-46e9-9419-75dd2da96cf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n odd natural numbers.", "code": "def sum_of_cubes_odd(n):\n    return (n * (2 * n - 1) * (2 * n + 1) * (2 * n - 1)) // 3", "task_id": "267_175546a6-fdec-404d-a8ff-e7348915b096", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n even natural numbers.", "code": "def sum_of_cubes_even(n):\n    return (n * (n + 1) * (2 * n + 1) * (n + 1)) // 3", "task_id": "267_a10f3fd8-8ad0-41cc-a1b1-da858f3f6187", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n prime numbers.", "code": "def sum_of_first_n_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum_primes, count, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            sum_primes += num\n            count += 1\n        num += 1\n    return sum_primes", "task_id": "267_d77afa02-fac1-4d26-a502-590ae5b9bf5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n prime numbers.", "code": "def sum_of_squares_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum_squares, count, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            sum_squares += num ** 2\n            count += 1\n        num += 1\n    return sum_squares", "task_id": "267_94d8840b-4e32-4429-baf8-2e6fcd6e2335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n Fibonacci numbers.", "code": "def sum_of_squares_fibonacci(n):\n    a, b = 0, 1\n    sum_squares = 0\n    for _ in range(n):\n        sum_squares += a ** 2\n        a, b = b, a + b\n    return sum_squares", "task_id": "267_997e0564-d647-4093-b558-d2abf7a76d26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n Fibonacci numbers.", "code": "def sum_of_cubes_fibonacci(n):\n    a, b = 0, 1\n    sum_cubes = 0\n    for _ in range(n):\n        sum_cubes += a ** 3\n        a, b = b, a + b\n    return sum_cubes", "task_id": "267_bf985a62-25b4-4aa3-93c9-7bde04a58b11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n triangular numbers.", "code": "def sum_of_squares_triangular(n):\n    sum_squares = 0\n    for i in range(1, n + 1):\n        T_i = i * (i + 1) // 2\n        sum_squares += T_i ** 2\n    return sum_squares", "task_id": "267_52407b23-8add-45a0-9b79-f72ff9cf55e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n triangular numbers.", "code": "def sum_of_cubes_triangular(n):\n    sum_cubes = 0\n    for i in range(1, n + 1):\n        T_i = i * (i + 1) // 2\n        sum_cubes += T_i ** 3\n    return sum_cubes", "task_id": "267_85c394e6-6ef1-432e-84de-ea0afd823263", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n powers of 2.", "code": "def sum_of_squares_powers_of_two(n):\n    sum_squares = 0\n    for i in range(n):\n        sum_squares += (2 ** i) ** 2\n    return sum_squares", "task_id": "267_2399c67b-d703-486b-960e-a444cafc6208", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n odd natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(n):\n        sum += (2*i + 1) ** 2\n    return sum", "task_id": "271_71cfdbe3-6f6d-4594-a2c2-ec81f05ef803", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 3\n    return sum", "task_id": "271_f7014376-a99f-4af8-a92d-2d2880ef5183", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fourth power of the first n multiples of 3.", "code": "def sum_of_fourth_powers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (3*i) ** 4\n    return sum", "task_id": "271_d0de88f9-c8f5-48ee-9596-6c4d6680476f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fifth power of the first n multiples of 5.", "code": "def sum_of_fifth_powers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (5*i) ** 5\n    return sum", "task_id": "271_6abcff96-d1ad-49c9-ba26-e4941d2cd278", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n prime numbers.", "code": "def sum_of_squares_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num ** 2\n            count += 1\n        num += 1\n    return sum", "task_id": "271_d468004d-ffa7-4e25-a184-61aa6ab96be6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n even natural numbers.", "code": "def sum_of_cubes_of_evens(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i) ** 3\n    return sum", "task_id": "271_924adafc-02ac-4cc4-be0e-8fd2f3cf285a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n multiples of 4.", "code": "def sum_of_squares_of_multiples_of_4(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (4*i) ** 2\n    return sum", "task_id": "271_fb8aedfe-9f04-41cd-8c93-c48e4d37f8ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fourth power of the first n odd natural numbers.", "code": "def sum_of_fourth_powers_of_odds(n):\n    sum = 0\n    for i in range(n):\n        sum += (2*i + 1) ** 4\n    return sum", "task_id": "271_24f8f8af-64ab-4238-ad2e-125d1e2e1e58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fifth power of the first n prime numbers.", "code": "def sum_of_fifth_powers_of_primes(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num ** 5\n            count += 1\n        num += 1\n    return sum", "task_id": "271_864600ed-b506-47a8-a436-f5471d4098dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n multiples of 7.", "code": "def sum_of_cubes_of_multiples_of_7(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (7*i) ** 3\n    return sum", "task_id": "271_c045aea3-157b-4362-b271-62cc577d0d11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the first element extraction from a list of tuple records.", "code": "def first_element_extract(test_list):\n  res = [lis[0] for lis in test_list]\n  return res", "task_id": "272_8c233886-a4fb-406c-a1e8-af09f7ab2682", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of elements in each tuple from a list of tuple records.", "code": "def sum_of_elements(test_list):\n  res = [sum(lis) for lis in test_list]\n  return res", "task_id": "272_f9e4c94f-7069-498e-8372-2ad10c88554f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the second element extraction from a list of tuple records.", "code": "def second_element_extract(test_list):\n  res = [lis[1] for lis in test_list]\n  return res", "task_id": "272_d317b23a-3329-400e-ae05-1c9a5cf41b43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of each tuple in a list of tuple records.", "code": "def length_of_tuples(test_list):\n  res = [len(lis) for lis in test_list]\n  return res", "task_id": "272_60836faa-ffa6-41e4-b5e0-536cd9ab0d65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the product of elements in each tuple from a list of tuple records.", "code": "def product_of_elements(test_list):\n  res = [eval('*'.join(map(str, lis))) for lis in test_list]\n  return res", "task_id": "272_fd7089e5-9509-4249-af37-cbafb0db75df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each tuple in a list of tuple records.", "code": "def reverse_each_tuple(test_list):\n  res = [lis[::-1] for lis in test_list]\n  return res", "task_id": "272_9d6bd2fa-a464-49a4-ab22-9bc379f49c06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in each tuple from a list of tuple records.", "code": "def max_element_in_each_tuple(test_list):\n  res = [max(lis) for lis in test_list]\n  return res", "task_id": "272_e67cf394-b1ce-452f-80c6-5403f6d94ac9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in each tuple from a list of tuple records.", "code": "def min_element_in_each_tuple(test_list):\n  res = [min(lis) for lis in test_list]\n  return res", "task_id": "272_81544321-1ad5-461b-81a2-e86265f8717d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract even elements from each tuple in a list of tuple records.", "code": "def even_elements_in_each_tuple(test_list):\n  res = [[x for x in lis if x % 2 == 0] for lis in test_list]\n  return res", "task_id": "272_dff002b5-a98d-45e1-990e-95ac93d0c968", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract odd elements from each tuple in a list of tuple records.", "code": "def odd_elements_in_each_tuple(test_list):\n  res = [[x for x in lis if x % 2 != 0] for lis in test_list]\n  return res", "task_id": "272_25e32872-615e-4628-9c82-70d61a9b7fd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd numbers at odd positions.", "code": "def sum_odd_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] % 2 != 0:\n            sum += arr[i]\n    return sum", "task_id": "270_4a36f860-c60c-4b11-9ed4-93bc77ee2829", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of even numbers at odd positions.", "code": "def product_even_and_odd_index(arr, n):\n    i = 1\n    product = 1\n    for i in range(1, n, 2):\n        if arr[i] % 2 == 0:\n            product *= arr[i]\n    return product", "task_id": "270_d29f7981-ee92-40aa-ab4e-28730bd908df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers at even positions.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_prime_and_even_index(arr, n):\n    i = 0\n    sum = 0\n    for i in range(0, n, 2):\n        if is_prime(arr[i]):\n            sum += arr[i]\n    return sum", "task_id": "270_ebebad33-ce82-4e75-a8f6-3768d20ac8ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of numbers divisible by 3 at odd positions.", "code": "def sum_divisible_by_three_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] % 3 == 0:\n            sum += arr[i]\n    return sum", "task_id": "270_1147a54c-71bd-49b4-9d77-f73eec84c940", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers at even positions.", "code": "def count_even_and_even_index(arr, n):\n    i = 0\n    count = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 == 0:\n            count += 1\n    return count", "task_id": "270_c51c1c56-c928-4c7e-81d9-59ed44836627", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of negative numbers at odd positions.", "code": "def sum_negative_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] < 0:\n            sum += arr[i]\n    return sum", "task_id": "270_ae4dd841-dd79-47ca-b8d3-e35bdcd48eab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of positive numbers at even positions.", "code": "def product_positive_and_even_index(arr, n):\n    i = 0\n    product = 1\n    for i in range(0, n, 2):\n        if arr[i] > 0:\n            product *= arr[i]\n    return product", "task_id": "270_2245815e-4a83-47de-9071-5a9a7fb31836", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of numbers greater than 5 at odd positions.", "code": "def sum_greater_than_five_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        if arr[i] > 5:\n            sum += arr[i]\n    return sum", "task_id": "270_2e61562b-b0d5-4b08-b03d-da0ade5480a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers at even positions.", "code": "def count_odd_and_even_index(arr, n):\n    i = 0\n    count = 0\n    for i in range(0, n, 2):\n        if arr[i] % 2 != 0:\n            count += 1\n    return count", "task_id": "270_6ec52861-6f8f-4012-aefe-221e4a989f21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of numbers at odd positions.", "code": "def sum_square_and_odd_index(arr, n):\n    i = 1\n    sum = 0\n    for i in range(1, n, 2):\n        sum += arr[i] ** 2\n    return sum", "task_id": "270_f26d03a8-3bf9-456c-a6f7-38b0ea077896", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the contents of one tuple with corresponding index of another tuple.", "code": "def add_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i + j, test_tup1, test_tup2))\n  return res", "task_id": "273_3850e623-fda1-4f2b-a471-abfd21ca4688", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the contents of one tuple with corresponding index of another tuple.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i * j, test_tup1, test_tup2))\n  return res", "task_id": "273_7c020a8d-7aa9-4b61-bf04-065663a2377f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the contents of one tuple by the corresponding index of another tuple.", "code": "def divide_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i / j if j != 0 else None, test_tup1, test_tup2))\n  return res", "task_id": "273_d5ff1e4d-b1eb-409f-a240-29ec123ec2a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the contents of one tuple with corresponding index of another tuple.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i % j if j != 0 else None, test_tup1, test_tup2))\n  return res", "task_id": "273_d419edc4-edc0-4d27-8189-e7e0acc88e69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise the contents of one tuple to the power of the corresponding index of another tuple.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i ** j, test_tup1, test_tup2))\n  return res", "task_id": "273_b57e4cd5-90d0-4481-a9af-70cb22cdd0c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the contents of one tuple with corresponding index of another tuple.", "code": "def max_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: max(i, j), test_tup1, test_tup2))\n  return res", "task_id": "273_6e73cd22-eabe-4474-b7f5-fec5e75fd59f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the contents of one tuple with corresponding index of another tuple.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: min(i, j), test_tup1, test_tup2))\n  return res", "task_id": "273_436b26e4-cf30-4d26-9289-ed67205a74ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of the contents of one tuple with corresponding index of another tuple.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: abs(i - j), test_tup1, test_tup2))\n  return res", "task_id": "273_f740432b-315b-41c7-aaa5-a8fb31ea9b48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the string representations of the contents of one tuple with corresponding index of another tuple.", "code": "def concat_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: str(i) + str(j), test_tup1, test_tup2))\n  return res", "task_id": "273_a2880546-a8ae-4caf-ac9b-087515b25562", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compare the contents of one tuple with corresponding index of another tuple and return a tuple of booleans indicating if the elements are equal.", "code": "def compare_elements(test_tup1, test_tup2):\n  res = tuple(map(lambda i, j: i == j, test_tup1, test_tup2))\n  return res", "task_id": "273_e4e927f8-798d-4d47-bc97-cd4594b67adf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd index binomial coefficients.", "code": "import math\n\ndef sum_of_odd_index_binomial_coefficients(n: int) -> int:\n    return (1 << (n - 1))", "task_id": "274_3c640d16-4133-48b1-9c09-619b423f2d0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients(n: int) -> int:\n    return (1 << n)", "task_id": "274_14c3fa9e-7fc8-40c2-befe-74cc27fa75be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of binomial coefficients for a given n.", "code": "import math\n\ndef sum_of_square_of_binomial_coefficients(n: int) -> int:\n    return math.comb(2 * n, n)", "task_id": "274_e8d16ef5-5ecf-42e7-a910-1962cb929ac0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are divisible by a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_divisible_by_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) % k == 0)", "task_id": "274_3bf77e1c-1c15-43d8-9589-292aaad127fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at prime indices for a given n.", "code": "import math\n\ndef is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_prime_index_binomial_coefficients(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if is_prime(i))", "task_id": "274_226d1183-f6d0-41d6-bccc-bb08dfa4305c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are greater than a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_greater_than_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) > k)", "task_id": "274_71db754e-69f3-4af3-8029-b00f23f25b90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients that are less than a given integer k.", "code": "import math\n\ndef sum_of_binomial_coefficients_less_than_k(n: int, k: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if math.comb(n, i) < k)", "task_id": "274_7cc5d8d7-5313-4299-b6f2-4644cc7f8d1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at Fibonacci indices for a given n.", "code": "import math\n\ndef fibonacci_sequence(limit: int) -> list:\n    fibs = [0, 1]\n    while fibs[-1] + fibs[-2] <= limit:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs\n\ndef sum_of_binomial_coefficients_at_fibonacci_indices(n: int) -> int:\n    fib_indices = fibonacci_sequence(n)\n    return sum(math.comb(n, i) for i in fib_indices)", "task_id": "274_3998ba21-06c9-4e80-8749-eba97a8a000a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at even indices for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients_at_even_indices(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if i % 2 == 0)", "task_id": "274_537343b3-8c12-44d1-839c-84eaa6e2c80c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of binomial coefficients at odd indices for a given n.", "code": "import math\n\ndef sum_of_binomial_coefficients_at_odd_indices(n: int) -> int:\n    return sum(math.comb(n, i) for i in range(n + 1) if i % 2 != 0)", "task_id": "274_5b57520d-12ac-4e67-8e68-0414ab1dbd26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def area_circle(r: float) -> float:\n  area = 3.1415 * r * r\n  return area", "task_id": "276_08b879e1-631a-40e3-a630-8a94ee9cfdc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length: float, width: float) -> float:\n  perimeter = 2 * (length + width)\n  return perimeter", "task_id": "276_5a064c2d-2736-4799-b592-f5d9036769ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r: float) -> float:\n  surface_area = 4 * 3.1415 * r * r\n  return surface_area", "task_id": "276_ce1465ec-69a5-4fe5-a4e7-7021d76818b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(r: float, h: float) -> float:\n  volume = (1/3) * 3.1415 * r * r * h\n  return volume", "task_id": "276_5b367f64-54e8-4902-8db0-c8a2975ca19b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base: float, height: float) -> float:\n  area = 0.5 * base * height\n  return area", "task_id": "276_c20db5cc-4c15-4782-985d-58fdf2091e42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(length: float, width: float, height: float) -> float:\n  volume = length * width * height\n  return volume", "task_id": "276_16c5312e-8482-415e-bb61-ec751eecadc0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(base: float, height: float) -> float:\n  area = base * height\n  return area", "task_id": "276_3f6a50d3-d1a4-414c-bdf7-71d57bec5d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "def circumference_circle(r: float) -> float:\n  circumference = 2 * 3.1415 * r\n  return circumference", "task_id": "276_4bfc69b8-1665-4178-b9a7-1f3bc00bd380", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surface_area_cube(side: float) -> float:\n  surface_area = 6 * side * side\n  return surface_area", "task_id": "276_806fd677-48f5-4647-bf92-741248610e57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r: float) -> float:\n  volume = (4/3) * 3.1415 * r * r * r\n  return volume", "task_id": "276_b531a44c-0720-4b62-801d-379c3ca88379", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last even number in the given array.", "code": "def find_last_even_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 == 0:\n            return i\n    return -1", "task_id": "275_906306af-2532-4e50-aec6-c79ced70276e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last prime number in the given array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_last_prime_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if is_prime(arr[i]):\n            return i\n    return -1", "task_id": "275_d0223264-c241-4279-a5b1-b04149b5a0bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last negative number in the given array.", "code": "def find_last_negative_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < 0:\n            return i\n    return -1", "task_id": "275_e6700644-2900-408d-8cbe-ca02e5f5ed32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last element that is a multiple of k in the given array.", "code": "def find_last_multiple_of_k_position(arr, k):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % k == 0:\n            return i\n    return -1", "task_id": "275_69baf13c-bde6-4257-8909-5d6d5eba04e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last element that is greater than x in the given array.", "code": "def find_last_greater_than_x_position(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] > x:\n            return i\n    return -1", "task_id": "275_f5b1b1a5-995e-46cf-9cbe-d1f7207a3215", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last odd number in the given array.", "code": "def find_last_odd_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] % 2 != 0:\n            return i\n    return -1", "task_id": "275_d1a9b342-ae52-44ca-8845-a488801bab5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last palindrome string in the given array.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef find_last_palindrome_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if is_palindrome(arr[i]):\n            return i\n    return -1", "task_id": "275_da65c54b-e2c5-4ebe-86cc-e576a9b7cbd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that starts with a vowel in the given array.", "code": "def find_last_vowel_start_position(arr):\n    vowels = 'aeiouAEIOU'\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i][0] in vowels:\n            return i\n    return -1", "task_id": "275_66b922f2-fb76-42db-bfc7-3542d0cfb3a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that is longer than x characters in the given array.", "code": "def find_last_longer_than_x_position(arr, x):\n    for i in range(len(arr) - 1, -1, -1):\n        if len(arr[i]) > x:\n            return i\n    return -1", "task_id": "275_a7fa2da6-591f-480b-a928-0eac197e8d4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the last string that is in uppercase in the given array.", "code": "def find_last_uppercase_position(arr):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i].isupper():\n            return i\n    return -1", "task_id": "275_1e617a72-652e-4536-8e13-c68aacc19b89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the length of the keys.", "code": "def filter_by_key_length(d, length):\n    result = {key: value for key, value in d.items() if len(key) >= length}\n    return result", "task_id": "277_b927dbfe-3a04-4f7d-ba52-ec3df4452be1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the type of the values.", "code": "def filter_by_value_type(d, t):\n    result = {key: value for key, value in d.items() if isinstance(value, t)}\n    return result", "task_id": "277_e9839f7a-2622-4254-91bd-b983c6898e43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a prefix of the keys.", "code": "def filter_by_key_prefix(d, prefix):\n    result = {key: value for key, value in d.items() if key.startswith(prefix)}\n    return result", "task_id": "277_fe7e32c2-bd63-4441-862d-438b6c53a167", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a range of values.", "code": "def filter_by_value_range(d, min_val, max_val):\n    result = {key: value for key, value in d.items() if min_val <= value <= max_val}\n    return result", "task_id": "277_fd188a62-a1b4-438e-ad5f-023f74a7b719", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on a suffix of the keys.", "code": "def filter_by_key_suffix(d, suffix):\n    result = {key: value for key, value in d.items() if key.endswith(suffix)}\n    return result", "task_id": "277_a5959ce3-e149-48ba-9787-f60b4b727f05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of a substring in the keys.", "code": "def filter_by_key_inclusion(d, substring):\n    result = {key: value for key, value in d.items() if substring in key}\n    return result", "task_id": "277_2c26a7f9-0d6b-42a4-aade-bf18a40abd57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of a substring in the values (assuming values are strings).", "code": "def filter_by_value_inclusion(d, substring):\n    result = {key: value for key, value in d.items() if substring in value}\n    return result", "task_id": "277_6df00415-6341-47fd-b3b8-0c1eb11a3b87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the case of the keys ('upper' or 'lower').", "code": "def filter_by_key_case(d, case):\n    if case == 'upper':\n        result = {key: value for key, value in d.items() if key.isupper()}\n    elif case == 'lower':\n        result = {key: value for key, value in d.items() if key.islower()}\n    else:\n        result = {}\n    return result", "task_id": "277_8929548d-8a8a-491f-a122-069fb80dcb6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the length of the values (assuming values are strings).", "code": "def filter_by_value_length(d, length):\n    result = {key: value for key, value in d.items() if len(value) >= length}\n    return result", "task_id": "277_b7430c7f-522c-4002-8d6c-120e9fe00862", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter a dictionary based on the inclusion of substrings in both keys and values.", "code": "def filter_by_key_value_match(d, key_substring, value_substring):\n    result = {key: value for key, value in d.items() if key_substring in key and value_substring in value}\n    return result", "task_id": "277_0f7115b7-1309-4ecb-8faf-4a75fe23769e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth hexagonal number.", "code": "def find_hexagonal_number(n):\n\treturn n * (2 * n - 1)", "task_id": "279_1e7c1719-9a07-4157-9f05-a803d36917ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth pentagonal number.", "code": "def find_pentagonal_number(n):\n\treturn n * (3 * n - 1) // 2", "task_id": "279_84c6c3a8-3956-4084-8c38-b02d792ffece", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def find_triangular_number(n):\n\treturn n * (n + 1) // 2", "task_id": "279_e3d9df55-ba97-405d-a698-6c28d6089ce3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def find_square_number(n):\n\treturn n * n", "task_id": "279_519a18e2-634f-458a-8fc1-c43f3242c233", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth heptagonal number.", "code": "def find_heptagonal_number(n):\n\treturn n * (5 * n - 3) // 2", "task_id": "279_2bddc934-6d16-414e-ac2f-93b316905389", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth octagonal number.", "code": "def find_octagonal_number(n):\n\treturn n * (3 * n - 2)", "task_id": "279_864641e6-85f7-47c3-b0b3-5fb625d247e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth nonagonal number.", "code": "def find_nonagonal_number(n):\n\treturn n * (7 * n - 5) // 2", "task_id": "279_9a6584de-3143-4bc7-baff-d670f752abfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth dodecagonal number.", "code": "def find_dodecagonal_number(n):\n\treturn n * (5 * n - 4)", "task_id": "279_2053e091-703a-41ef-b499-d7f3d7a64bdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def find_tetrahedral_number(n):\n\treturn n * (n + 1) * (n + 2) // 6", "task_id": "279_a4f729c6-b5a3-4753-a64c-d8f32b683218", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth cubic number.", "code": "def find_cubic_number(n):\n\treturn n * n * n", "task_id": "279_8096c383-3a36-4918-89f4-d3a577b4c6c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first string in the given tuple.", "code": "def count_before_string(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, str):\n            break\n    return count", "task_id": "278_30516ae8-eb64-40ac-aa5a-d3231ebcf0c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first float in the given tuple.", "code": "def count_before_float(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, float):\n            break\n    return count", "task_id": "278_8fba0ce8-388e-45ab-9e45-970d30228fd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first negative number in the given tuple.", "code": "def count_before_negative(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, (int, float)) and ele < 0:\n            break\n    return count", "task_id": "278_2a24de90-263d-4eb2-8c27-518231aa6c0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first list in the given tuple.", "code": "def count_before_list(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, list):\n            break\n    return count", "task_id": "278_83f15c98-1474-4993-a27f-fb49a3ffa2f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first dictionary in the given tuple.", "code": "def count_before_dict(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, dict):\n            break\n    return count", "task_id": "278_82838335-6879-4791-b2a1-bbae54973461", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first even number in the given tuple.", "code": "def count_before_even(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, int) and ele % 2 == 0:\n            break\n    return count", "task_id": "278_5556181a-553d-4ae9-b9f0-2d9e92e4b2a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first odd number in the given tuple.", "code": "def count_before_odd(test_tup):\n    for count, ele in enumerate(test_tup):\n        if isinstance(ele, int) and ele % 2 != 0:\n            break\n    return count", "task_id": "278_777defa2-716b-4ee7-b23e-c431679ddb88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first None value in the given tuple.", "code": "def count_before_none(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is None:\n            break\n    return count", "task_id": "278_fd1afb73-03f5-419b-b65c-49c40c3f7531", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first True value in the given tuple.", "code": "def count_before_true(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is True:\n            break\n    return count", "task_id": "278_df1c1c4c-4b7e-412d-9731-d0ecb8c8947f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element count that occurs before the first False value in the given tuple.", "code": "def count_before_false(test_tup):\n    for count, ele in enumerate(test_tup):\n        if ele is False:\n            break\n    return count", "task_id": "278_de618bd9-68c0-4ac2-8cc3-b45dfb2f9e34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if there are any duplicate elements in a given list.", "code": "def has_duplicates(test_list):\n    return len(test_list) != len(set(test_list))", "task_id": "281_21d8a8f9-c114-46be-adea-d3e1fc2a1158", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the number of unique elements in a given list.", "code": "def unique_elements_count(test_list):\n    return len(set(test_list))", "task_id": "281_810ebbaa-4731-416a-b431-cf9bc081a5d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the first duplicate element in a given list. If no duplicates are found, return -1.", "code": "def first_duplicate(test_list):\n    seen = set()\n    for item in test_list:\n        if item in seen:\n            return item\n        seen.add(item)\n    return -1", "task_id": "281_58a71d90-3c8a-4725-8c46-23ecb7ce8004", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if all elements in a given list are even numbers.", "code": "def all_elements_even(test_list):\n    return all(x % 2 == 0 for x in test_list)", "task_id": "281_8815e70b-c98b-4860-8bb9-37ef1ed4f1e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in a given list.", "code": "def count_odd_elements(test_list):\n    return sum(1 for x in test_list if x % 2 != 0)", "task_id": "281_6ed9aef1-a4a1-4266-b2f8-767f77ddfb48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all unique elements in a given list.", "code": "def sum_of_unique_elements(test_list):\n    return sum(set(test_list))", "task_id": "281_fafffa49-38a3-43df-8934-7f623612a01d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a list containing numbers from 1 to n.", "code": "def find_missing_number(test_list, n):\n    return sum(range(1, n+1)) - sum(test_list)", "task_id": "281_bbd0e714-6adc-4244-808b-22697e5a4e84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a new list that is the reverse of the given list.", "code": "def reverse_list(test_list):\n    return test_list[::-1]", "task_id": "281_da631abf-8bd2-4bd3-8370-621e9b27cce0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given list is a palindrome.", "code": "def is_palindrome(test_list):\n    return test_list == test_list[::-1]", "task_id": "281_b139db4d-bfcd-4be2-8389-4dfc067ff046", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a given list and return the new list.", "code": "def remove_duplicates(test_list):\n    return list(set(test_list))", "task_id": "281_730f40ad-f4dc-4264-90ec-7d9f13dc87f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list.", "code": "def find_max_element(arr: list) -> int:\n    max_element = arr[0]\n    for element in arr:\n        if element > max_element:\n            max_element = element\n    return max_element", "task_id": "280_e2f9b6cd-a623-4e2e-8be2-fc03a6c7a4f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a given element in a list.", "code": "def count_occurrences(arr: list, item: int) -> int:\n    count = 0\n    for element in arr:\n        if element == item:\n            count += 1\n    return count", "task_id": "280_249b3bfa-e625-44a0-9021-df0f6c5dac75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(arr: list) -> list:\n    return arr[::-1]", "task_id": "280_c640b1b6-bdaa-4c31-9670-4f5795a5572a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a given list.", "code": "def find_min_element(arr: list) -> int:\n    min_element = arr[0]\n    for element in arr:\n        if element < min_element:\n            min_element = element\n    return min_element", "task_id": "280_b87e73f6-3a50-4d54-bbe6-c6ba02bd167c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given list is sorted in ascending order.", "code": "def is_sorted(arr: list) -> bool:\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return False\n    return True", "task_id": "280_564929f9-96c7-44cf-b0a6-280a2cc64af8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest element in a given list.", "code": "def find_second_largest(arr: list) -> int:\n    first, second = float('-inf'), float('-inf')\n    for element in arr:\n        if element > first:\n            second = first\n            first = element\n        elif element > second and element != first:\n            second = element\n    return second", "task_id": "280_b5d975c8-f197-4cda-a947-da9e63fc8eab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a given list.", "code": "def remove_duplicates(arr: list) -> list:\n    unique_elements = []\n    for element in arr:\n        if element not in unique_elements:\n            unique_elements.append(element)\n    return unique_elements", "task_id": "280_40c313ca-8d12-42e3-9a57-a9bf0cc2b0c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of a given element in a list. If the element is not found, return -1.", "code": "def find_element_index(arr: list, item: int) -> int:\n    for index, element in enumerate(arr):\n        if element == item:\n            return index\n    return -1", "task_id": "280_ed985495-cdc2-47cc-9f3e-9b414fab4688", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a given list.", "code": "def sum_of_elements(arr: list) -> int:\n    total = 0\n    for element in arr:\n        total += element\n    return total", "task_id": "280_77905c6a-a832-4daa-8948-43e9836b03eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1: list, list2: list) -> list:\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    return merged_list", "task_id": "280_acd7604e-87d8-411e-9409-6d086e728d5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the frequency of each digit is less than or equal to twice the digit itself.", "code": "def validate_frequency(n): \n    for i in range(10): \n        temp = n;  \n        count = 0; \n        while (temp): \n            if (temp % 10 == i): \n                count+=1;  \n            if (count > 2 * i): \n                return False\n            temp //= 10; \n    return True", "task_id": "283_25b5dcb5-d4d1-48f3-85f7-f190044ebd47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the digits is less than or equal to 20.", "code": "def validate_sum(n): \n    total = 0 \n    while n: \n        total += n % 10 \n        n //= 10 \n    return total <= 20", "task_id": "283_b64957c5-ac3e-4e7c-a2bd-661110be96db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are even.", "code": "def validate_even_digits(n): \n    while n: \n        if (n % 10) % 2 != 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_e8bca920-1792-4f9b-bcfe-ea005b9fcbf8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are odd.", "code": "def validate_odd_digits(n): \n    while n: \n        if (n % 10) % 2 == 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_cee0d410-9fed-4c63-9c29-ef6cf8b996b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are prime numbers (2, 3, 5, 7).", "code": "def validate_prime_digits(n): \n    prime_digits = {2, 3, 5, 7} \n    while n: \n        if n % 10 not in prime_digits: \n            return False \n        n //= 10 \n    return True", "task_id": "283_b532bdf3-b05a-4f01-967c-ab38ffdff8c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the number is a palindrome.", "code": "def validate_palindrome(n): \n    return str(n) == str(n)[::-1]", "task_id": "283_190cedd3-ca21-447a-b6f3-ff90b5197344", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the digits of the number are in strictly increasing order.", "code": "def validate_increasing_digits(n): \n    prev = 10 \n    while n: \n        curr = n % 10 \n        if curr >= prev: \n            return False \n        prev = curr \n        n //= 10 \n    return True", "task_id": "283_d9e3caef-60d5-4993-be46-5cb036598074", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the digits of the number are in strictly decreasing order.", "code": "def validate_decreasing_digits(n): \n    prev = -1 \n    while n: \n        curr = n % 10 \n        if curr <= prev: \n            return False \n        prev = curr \n        n //= 10 \n    return True", "task_id": "283_9f0443ea-7ff4-43d6-90a1-9db20a69e13b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all digits in the number are unique.", "code": "def validate_unique_digits(n): \n    seen = set() \n    while n: \n        digit = n % 10 \n        if digit in seen: \n            return False \n        seen.add(digit) \n        n //= 10 \n    return True", "task_id": "283_3836d15e-6ece-4d46-a7a9-3b2a1c2a39d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the number contains no zero digits.", "code": "def validate_no_zero(n): \n    while n: \n        if n % 10 == 0: \n            return False \n        n //= 10 \n    return True", "task_id": "283_6415f594-4deb-49d2-916e-b636b9ad3229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two lists element-wise using map and lambda function.", "code": "def add_list(nums1, nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "task_id": "282_05160d70-3f04-4057-aac1-b408e08a82a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply two lists element-wise using map and lambda function.", "code": "def multiply_list(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "282_70384eed-2495-4c08-95b1-c284d3e440a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide two lists element-wise using map and lambda function.", "code": "def divide_list(nums1, nums2):\n  result = map(lambda x, y: x / y if y != 0 else None, nums1, nums2)\n  return list(result)", "task_id": "282_fe51dc72-7bcd-43dc-ac66-32de6a87c70f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of two lists element-wise using map and lambda function.", "code": "def mod_list(nums1, nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "task_id": "282_f874e116-bf43-4c85-8ee7-5d1f7bd25d5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise elements of one list to the power of elements of another list element-wise using map and lambda function.", "code": "def power_list(nums1, nums2):\n  result = map(lambda x, y: x ** y, nums1, nums2)\n  return list(result)", "task_id": "282_ec845c2c-77e3-4331-a500-24f6abb53016", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two lists element-wise using map and lambda function.", "code": "def max_list(nums1, nums2):\n  result = map(lambda x, y: max(x, y), nums1, nums2)\n  return list(result)", "task_id": "282_1adf8d17-4319-426c-aeb4-4dd7809b4087", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two lists element-wise using map and lambda function.", "code": "def min_list(nums1, nums2):\n  result = map(lambda x, y: min(x, y), nums1, nums2)\n  return list(result)", "task_id": "282_2692b8ef-3fcc-47a3-b02e-52c7f3cf0ce1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of two lists element-wise using map and lambda function.", "code": "def abs_diff_list(nums1, nums2):\n  result = map(lambda x, y: abs(x - y), nums1, nums2)\n  return list(result)", "task_id": "282_d8ba80c4-21b1-4998-9d81-0dacb198f431", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two lists of strings element-wise using map and lambda function.", "code": "def concat_list(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "282_ad78d5a6-7715-468f-aae2-bce2c77ff792", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform logical AND on two lists of booleans element-wise using map and lambda function.", "code": "def bool_and_list(bools1, bools2):\n  result = map(lambda x, y: x and y, bools1, bools2)\n  return list(result)", "task_id": "282_47837788-16fb-4222-b750-aef765f85fe5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by two to three 'c'.", "code": "import re\ndef match_a_then_c(text):\n    patterns = 'ac{2,3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_0d934a66-463c-410e-9656-a185b61768f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'd' followed by one or more 'e'.", "code": "import re\ndef match_d_then_e(text):\n    patterns = 'de+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_ac2d38df-52b7-4b00-b08a-fad1cb46769c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'f' followed by exactly three 'g'.", "code": "import re\ndef match_f_then_g(text):\n    patterns = 'fg{3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_f75ca731-e84b-4bbd-ab1c-d584439f0f41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'h' followed by zero or one 'i'.", "code": "import re\ndef match_h_then_i(text):\n    patterns = 'hi?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_cc4df0e4-0dde-4513-b29c-0ae59b4a4d31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'j' followed by exactly two 'k'.", "code": "import re\ndef match_j_then_k(text):\n    patterns = 'jk{2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_62152d0c-c9ea-4752-be14-1fae036d61ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'l' followed by two to four 'm'.", "code": "import re\ndef match_l_then_m(text):\n    patterns = 'lm{2,4}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_c8ead7f6-bced-4eec-8338-7810e1529a03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'n' followed by three to five 'o'.", "code": "import re\ndef match_n_then_o(text):\n    patterns = 'no{3,5}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_a3e955f5-abcb-4e82-b587-89f14aa01fe8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'p' followed by one to two 'q'.", "code": "import re\ndef match_p_then_q(text):\n    patterns = 'pq{1,2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_52cef50b-3004-4835-b30a-697e3b0b60dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'r' followed by zero or more 's'.", "code": "import re\ndef match_r_then_s(text):\n    patterns = 'rs*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_9cd4eed8-03ac-438e-a8e7-b9d96e34678b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 't' followed by exactly one 'u'.", "code": "import re\ndef match_t_then_u(text):\n    patterns = 'tu{1}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "285_e7b99ce1-0f63-4041-a9c4-40262499f426", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def sum_of_squares_odd(n):\n    return n * (2*n - 1) * (2*n + 1) // 3", "task_id": "287_c3b4b07e-1bfb-435e-ae9c-ee8c53b0ae1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n even natural numbers.", "code": "def sum_of_cubes_even(n):\n    return (2*n*(n+1))**2", "task_id": "287_8987cbf3-c8f2-472f-9604-956a10024d0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n odd natural numbers.", "code": "def sum_of_cubes_odd(n):\n    return (n*(2*n-1)*(2*n+1))//3", "task_id": "287_214ab8e9-a01a-427c-a910-ae0da826209f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n multiples of 3.", "code": "def sum_of_squares_multiples_of_three(n):\n    return 3**2 * n * (n + 1) * (2*n + 1) // 6", "task_id": "287_e8ad0e49-7ffd-4d97-bf99-67f1090f6f9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n multiples of 5.", "code": "def sum_of_squares_multiples_of_five(n):\n    return 5**2 * n * (n + 1) * (2*n + 1) // 6", "task_id": "287_c9dbca93-d332-49b3-b602-fc6cb8ff8862", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n Fibonacci numbers.", "code": "def sum_of_squares_fibonacci(n):\n    a, b = 0, 1\n    sum_squares = 0\n    for _ in range(n):\n        sum_squares += a**2\n        a, b = b, a + b\n    return sum_squares", "task_id": "287_7cbb03d7-abdd-4c5c-a3f3-aa1474847805", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n prime numbers.", "code": "def sum_of_squares_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count, num, sum_squares = 0, 2, 0\n    while count < n:\n        if is_prime(num):\n            sum_squares += num**2\n            count += 1\n        num += 1\n    return sum_squares", "task_id": "287_00948640-ab95-4778-a478-6d812dd8d2af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n terms of an arithmetic progression with first term a and common difference d.", "code": "def sum_of_squares_arithmetic_progression(n, a, d):\n    sum_squares = 0\n    for i in range(n):\n        term = a + i * d\n        sum_squares += term**2\n    return sum_squares", "task_id": "287_18630391-f3d8-4669-a0cf-2b6834bc957e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n terms of a geometric progression with first term a and common ratio r.", "code": "def sum_of_squares_geometric_progression(n, a, r):\n    sum_squares = 0\n    for i in range(n):\n        term = a * (r**i)\n        sum_squares += term**2\n    return sum_squares", "task_id": "287_ad83b212-1045-4c87-8c52-8b496d3696cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n triangular numbers.", "code": "def sum_of_squares_triangular_numbers(n):\n    sum_squares = 0\n    for i in range(1, n + 1):\n        triangular_number = i * (i + 1) // 2\n        sum_squares += triangular_number**2\n    return sum_squares", "task_id": "287_47146672-a15a-4c06-adbc-282bcb74132f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are greater than a given threshold.", "code": "def check_all_greater_than(nums, threshold):\n  return all(num > threshold for num in nums)", "task_id": "284_b226bcc8-113d-4009-a3d0-2be422f4c627", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are even numbers.", "code": "def check_all_even(nums):\n  return all(num % 2 == 0 for num in nums)", "task_id": "284_4f6ce55a-ad79-42c7-ac34-29ab2006d1cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are positive numbers.", "code": "def check_all_positive(nums):\n  return all(num > 0 for num in nums)", "task_id": "284_870a8f2e-0fc7-4aee-8855-0f9aeb5e4f4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list have a length equal to a given number.", "code": "def check_all_strings_length(strings, length):\n  return all(len(s) == length for s in strings)", "task_id": "284_7d0bde8b-b727-4652-88da-bac2fbcbb1c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list start with a given character.", "code": "def check_all_start_with(strings, char):\n  return all(s.startswith(char) for s in strings)", "task_id": "284_32f01d22-de25-4500-a585-442e0eaebfbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all items of a list are divisible by a given number.", "code": "def check_all_divisible_by(nums, divisor):\n  return all(num % divisor == 0 for num in nums)", "task_id": "284_af333480-8c93-4dac-a7f5-b37662e10705", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are uppercase.", "code": "def check_all_uppercase(strings):\n  return all(s.isupper() for s in strings)", "task_id": "284_63021b97-7771-478c-81e4-1090cd9af763", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list are palindromes.", "code": "def check_all_palindromes(strings):\n  return all(s == s[::-1] for s in strings)", "task_id": "284_6c1c514f-c3ff-481d-aacf-45d330cc1c25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list have the same length.", "code": "def check_all_same_length(strings):\n  if not strings: return True\n  length = len(strings[0])\n  return all(len(s) == length for s in strings)", "task_id": "284_7cbea614-460d-4d87-92f7-753d8c2c307a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether all strings in a list contain a given substring.", "code": "def check_all_contain_substring(strings, substring):\n  return all(substring in s for s in strings)", "task_id": "284_d4b695cb-5967-48de-88ec-dcb5fb03694b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of prime numbers in an array.", "code": "def count_primes(arr, N):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    count = 0\n    for i in range(N):\n        if is_prime(arr[i]):\n            count += 1\n    return count", "task_id": "288_149396c7-c606-426f-8cec-6cf154a78ef2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in an array.", "code": "def count_even(arr, N):\n    count = 0\n    for i in range(N):\n        if arr[i] % 2 == 0:\n            count += 1\n    return count", "task_id": "288_d98df0c2-ddab-4b9e-a6ad-aab49ae99ee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of odd numbers in an array.", "code": "def count_odd(arr, N):\n    count = 0\n    for i in range(N):\n        if arr[i] % 2 != 0:\n            count += 1\n    return count", "task_id": "288_155a7394-3214-4af8-92af-db76a62da174", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are divisible by a given number K.", "code": "def count_divisible_by_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] % K == 0:\n            count += 1\n    return count", "task_id": "288_32570e13-9ae5-4c1a-8482-f286df292c82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are greater than a given number K.", "code": "def count_greater_than_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] > K:\n            count += 1\n    return count", "task_id": "288_46f8e04e-16fa-4062-997d-863ebdf7fcf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in an array that are less than a given number K.", "code": "def count_less_than_k(arr, N, K):\n    count = 0\n    for i in range(N):\n        if arr[i] < K:\n            count += 1\n    return count", "task_id": "288_826fa846-e5bf-452c-a0e4-bd55489e908b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic numbers in an array.", "code": "def count_palindromes(arr, N):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n    count = 0\n    for i in range(N):\n        if is_palindrome(arr[i]):\n            count += 1\n    return count", "task_id": "288_d62dae16-53e4-41ab-9ed5-2ebb3a1df1f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of perfect squares in an array.", "code": "def count_perfect_squares(arr, N):\n    def is_perfect_square(num):\n        return int(num**0.5)**2 == num\n    count = 0\n    for i in range(N):\n        if is_perfect_square(arr[i]):\n            count += 1\n    return count", "task_id": "288_544b1863-7afa-43a6-8b0a-1aa61532190b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of Fibonacci numbers in an array.", "code": "def count_fibonacci_numbers(arr, N):\n    def is_fibonacci(num):\n        x, y = 0, 1\n        while y < num:\n            x, y = y, x + y\n        return y == num\n    count = 0\n    for i in range(N):\n        if is_fibonacci(arr[i]):\n            count += 1\n    return count", "task_id": "288_f00772ca-75bc-47d7-9d5e-a507f4775ae2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique elements in an array.", "code": "def count_unique_elements(arr, N):\n    return len(set(arr))", "task_id": "288_01c4773c-d3bb-4d41-8f5a-8cfe7dd33263", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should not exceed a given limit.", "code": "def max_sub_array_sum_with_limit(a, n, k, limit):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here > limit:\n\t\t\tmax_ending_here = limit\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_b001d129-7e32-4642-860b-e1f4a533a383", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should be at least a given minimum sum.", "code": "def max_sub_array_sum_with_min(a, n, k, min_sum):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here < min_sum:\n\t\t\tmax_ending_here = min_sum\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_af811419-79cb-4944-88b5-d70cf7da9f20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the array may contain negative numbers.", "code": "def max_sub_array_sum_with_negative(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_c85e324f-50f5-48c1-8b5a-8eb914d8c848", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the given array, considering that the array is circular (i.e., it wraps around).", "code": "def max_sub_array_sum_with_wraparound(a, n):\n\tdef kadane(arr):\n\t\tmax_so_far = -2147483648\n\t\tmax_ending_here = 0\n\t\tfor x in arr:\n\t\t\tmax_ending_here = max_ending_here + x\n\t\t\tif max_so_far < max_ending_here:\n\t\t\t\tmax_so_far = max_ending_here\n\t\t\tif max_ending_here < 0:\n\t\t\t\tmax_ending_here = 0\n\t\treturn max_so_far\n\tmax_kadane = kadane(a)\n\ttotal_sum = sum(a)\n\tfor i in range(n):\n\t\ta[i] = -a[i]\n\tmax_wrap = total_sum + kadane(a)\n\treturn max(max_kadane, max_wrap)", "task_id": "286_7c6e3822-2074-4d5d-afe9-b5cff5353b5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you can skip at most 'skip' elements.", "code": "def max_sub_array_sum_with_skip(a, n, k, skip):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tskips = 0\n\tfor i in range(n*k):\n\t\tif skips < skip and a[i%n] < 0:\n\t\t\tskips += 1\n\t\t\tcontinue\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_4d374529-77fb-4e8d-ad23-bd16844e8eb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you can replace at most one element with a given replacement value.", "code": "def max_sub_array_sum_with_replacement(a, n, k, replacement):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\treplaced = False\n\tfor i in range(n*k):\n\t\tif not replaced and a[i%n] < replacement:\n\t\t\tmax_ending_here = max_ending_here + replacement\n\t\t\treplaced = True\n\t\telse:\n\t\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_89f79621-6b51-4e63-976c-4a9bb8313493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but you must exclude a given element from the sum.", "code": "def max_sub_array_sum_with_exclusion(a, n, k, exclude):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tif a[i%n] == exclude:\n\t\t\tcontinue\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_4c95b207-5847-4d59-a036-600c60ad8856", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the sum should not exceed a given threshold.", "code": "def max_sub_array_sum_with_threshold(a, n, k, threshold):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_ending_here > threshold:\n\t\t\tmax_ending_here = threshold\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_31034d73-f704-42d6-ba64-d7b5ffd563e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray of a fixed length in the modified array which is formed by repeating the given array k times.", "code": "def max_sub_array_sum_with_fixed_length(a, n, k, length):\n\tmax_so_far = -2147483648\n\tfor i in range((n*k) - length + 1):\n\t\tcurrent_sum = sum(a[j%n] for j in range(i, i + length))\n\t\tif max_so_far < current_sum:\n\t\t\tmax_so_far = current_sum\n\treturn max_so_far", "task_id": "286_630acebf-ac87-4ee4-8582-4f43ed0ce169", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest sum of contiguous subarray in the modified array which is formed by repeating the given array k times, but the subarray must have alternating positive and negative signs.", "code": "def max_sub_array_sum_with_alternating_signs(a, n, k):\n\tmax_so_far = -2147483648\n\tmax_ending_here = 0\n\tfor i in range(n*k):\n\t\tif i > 0 and (a[i%n] > 0) == (a[(i-1)%n] > 0):\n\t\t\tmax_ending_here = 0\n\t\tmax_ending_here = max_ending_here + a[i%n]\n\t\tif max_so_far < max_ending_here:\n\t\t\tmax_so_far = max_ending_here\n\t\tif max_ending_here < 0:\n\t\t\tmax_ending_here = 0\n\treturn max_so_far", "task_id": "286_e94a4444-2142-4bce-92a9-dd7133e5c339", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine if a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "289_ce858787-1532-46ec-9805-b3e9e8bd870c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine the number of days in a given month of a given year.", "code": "def days_in_month(month: int, year: int) -> int:\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return 29\n        else:\n            return 28\n    else:\n        return 0", "task_id": "289_c3705823-278d-4d20-adaf-1f6048a4f11e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day: int, month: int, year: int) -> str:\n    days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n    return days[datetime.date(year, month, day).weekday()]", "task_id": "289_9e2ef985-8dfb-4553-a1ba-be7818d39eff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the number of days between two given dates.", "code": "from datetime import date\n\ndef days_between_dates(day1: int, month1: int, year1: int, day2: int, month2: int, year2: int) -> int:\n    d1 = date(year1, month1, day1)\n    d2 = date(year2, month2, day2)\n    return abs((d2 - d1).days)", "task_id": "289_0843cb43-c14c-4395-a370-4a86e6b00bf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a given number of days to a date and return the new date.", "code": "from datetime import date, timedelta\n\ndef add_days_to_date(day: int, month: int, year: int, days_to_add: int) -> tuple:\n    initial_date = date(year, month, day)\n    new_date = initial_date + timedelta(days=days_to_add)\n    return (new_date.day, new_date.month, new_date.year)", "task_id": "289_098e15a9-85bf-4698-8c74-623a24361bfb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the number of days in a given year.", "code": "def days_in_year(year: int) -> int:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return 366\n    return 365", "task_id": "289_a8bd941b-81c2-41d7-b1a1-39ef4eab474e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine the week number of the year for a given date.", "code": "import datetime\n\ndef week_of_year(day: int, month: int, year: int) -> int:\n    return datetime.date(year, month, day).isocalendar()[1]", "task_id": "289_2d951e8e-29f8-499f-a17f-9cbdefaa046e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to validate if a given date is valid.", "code": "import datetime\n\ndef is_valid_date(day: int, month: int, year: int) -> bool:\n    try:\n        datetime.date(year, month, day)\n        return True\n    except ValueError:\n        return False", "task_id": "289_085d8d91-9c6e-4592-9b70-677167ad7032", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the number of days remaining until the end of the year from a given date.", "code": "from datetime import date\n\ndef days_until_end_of_year(day: int, month: int, year: int) -> int:\n    given_date = date(year, month, day)\n    end_of_year = date(year, 12, 31)\n    return (end_of_year - given_date).days", "task_id": "289_95b6ab7c-2559-47f3-9e18-6bf48c4d08a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next leap year after a given year.", "code": "def next_leap_year(year: int) -> int:\n    while True:\n        year += 1\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            return year", "task_id": "289_eaeb63db-090f-4353-89c3-59eac813f0c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum sum of its elements.", "code": "def max_sum_list(list1):\n    max_sum = max(sum(x) for x in list1)\n    max_list = max(list1, key=sum)\n    return (max_sum, max_list)", "task_id": "290_22a3fefd-0e24-450b-beed-838052b93aab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the minimum length.", "code": "def min_length_list(list1):\n    min_length = min(len(x) for x in list1)\n    min_list = min(list1, key=len)\n    return (min_length, min_list)", "task_id": "290_8f6d4d35-0c40-45b4-aa9c-5d4297fbc7b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum average of its elements.", "code": "def max_avg_list(list1):\n    max_avg = max(sum(x)/len(x) for x in list1 if len(x) > 0)\n    max_list = max(list1, key=lambda x: sum(x)/len(x) if len(x) > 0 else float('-inf'))\n    return (max_avg, max_list)", "task_id": "290_c55e2949-7a9e-4bee-9ec4-f97217a35529", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum product of its elements.", "code": "from functools import reduce\nimport operator\n\ndef max_product_list(list1):\n    max_product = max(reduce(operator.mul, x, 1) for x in list1)\n    max_list = max(list1, key=lambda x: reduce(operator.mul, x, 1))\n    return (max_product, max_list)", "task_id": "290_8db8077f-c943-4431-b5a1-6daa558edfd8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are even.", "code": "def max_length_even_list(list1):\n    even_lists = [x for x in list1 if all(e % 2 == 0 for e in x)]\n    max_length = max(len(x) for x in even_lists)\n    max_list = max(even_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_a4700553-6b0b-407c-a14f-1808c7e10ed3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are odd.", "code": "def max_length_odd_list(list1):\n    odd_lists = [x for x in list1 if all(e % 2 != 0 for e in x)]\n    max_length = max(len(x) for x in odd_lists)\n    max_list = max(odd_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_54482e4f-3099-4395-9774-5200a679bf49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are prime numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_length_prime_list(list1):\n    prime_lists = [x for x in list1 if all(is_prime(e) for e in x)]\n    max_length = max(len(x) for x in prime_lists)\n    max_list = max(prime_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_e50580ef-054d-446c-8753-5b25fea5e3ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are unique.", "code": "def max_length_unique_list(list1):\n    unique_lists = [x for x in list1 if len(x) == len(set(x))]\n    max_length = max(len(x) for x in unique_lists)\n    max_list = max(unique_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_acee3c39-afad-4424-b00a-414f73739cb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are palindromes.", "code": "def is_palindrome(s):\n    return str(s) == str(s)[::-1]\n\ndef max_length_palindrome_list(list1):\n    palindrome_lists = [x for x in list1 if all(is_palindrome(e) for e in x)]\n    max_length = max(len(x) for x in palindrome_lists)\n    max_list = max(palindrome_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_351b2aa0-7e9e-4e94-9231-b95bb47cff08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are sorted in non-decreasing order.", "code": "def max_length_sorted_list(list1):\n    sorted_lists = [x for x in list1 if all(x[i] <= x[i+1] for i in range(len(x)-1))]\n    max_length = max(len(x) for x in sorted_lists)\n    max_list = max(sorted_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_5f5a341b-3437-4931-92db-2ce804cf86fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with the maximum length where all elements are vowels.", "code": "def max_length_vowel_list(list1):\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    vowel_lists = [x for x in list1 if all(e in vowels for e in x)]\n    max_length = max(len(x) for x in vowel_lists)\n    max_list = max(vowel_lists, key=len)\n    return (max_length, max_list)", "task_id": "290_c5ebc72e-d150-4427-b312-0948df8b0715", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the remainder when one number is divided by another.", "code": "def find_remainder(n: int, m: int) -> int:\n    return n % m", "task_id": "292_cb07d9b0-8445-475a-8902-8bf25d168218", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def find_sum(n: int, m: int) -> int:\n    return n + m", "task_id": "292_2ddf6118-a183-48d8-b5e3-60a8b41ff6fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the difference between two numbers.", "code": "def find_difference(n: int, m: int) -> int:\n    return n - m", "task_id": "292_d5641fb1-871c-46e1-a9f0-d0798914e50a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def find_product(n: int, m: int) -> int:\n    return n * m", "task_id": "292_d0dfeca6-08ab-4a96-b442-31c74a8f6d77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the power of one number raised to another.", "code": "def find_power(n: int, m: int) -> int:\n    return n ** m", "task_id": "292_1de08b9e-3b72-43ae-9d13-e73fed065de4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find both the quotient and remainder when one number is divided by another.", "code": "def find_quotient_and_remainder(n: int, m: int) -> tuple:\n    return (n // m, n % m)", "task_id": "292_0f90652b-aa1b-43ad-b35c-90e0f42757c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of two numbers.", "code": "def find_max(n: int, m: int) -> int:\n    return max(n, m)", "task_id": "292_7802b3a7-c962-40ee-bc7a-91b988522544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of two numbers.", "code": "def find_min(n: int, m: int) -> int:\n    return min(n, m)", "task_id": "292_dd207dcb-3d26-4771-bdc3-1571018c0b63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of two numbers.", "code": "def find_average(n: int, m: int) -> float:\n    return (n + m) / 2", "task_id": "292_0d810f51-c3bf-406e-91e4-3c72241e3bb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def find_absolute_difference(n: int, m: int) -> int:\n    return abs(n - m)", "task_id": "292_b40eea7f-edb4-4f27-8a12-915088e09a93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the hypotenuse of a right-angled triangle given the other two sides.", "code": "import math\ndef find_hypotenuse(a: float, b: float) -> float:\n    return math.sqrt(a**2 + b**2)", "task_id": "293_86c4a373-d9ba-4c69-a4c9-162ae5caf8c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a right-angled triangle given the two shorter sides.", "code": "import math\ndef find_perimeter(a: float, b: float) -> float:\n    c = math.sqrt(a**2 + b**2)\n    return a + b + c", "task_id": "293_8eaa423f-4c04-474a-9634-5a9b941e1d51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a right-angled triangle given the two shorter sides.", "code": "def find_area(a: float, b: float) -> float:\n    return 0.5 * a * b", "task_id": "293_033d161a-d2f8-495f-9ec1-98cbe26fd4f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the third side of a right-angled triangle given two sides and a boolean indicating if the given sides include the hypotenuse.", "code": "import math\ndef find_third_side(a: float, b: float, hypotenuse: bool) -> float:\n    if hypotenuse:\n        return math.sqrt(a**2 - b**2)\n    else:\n        return math.sqrt(a**2 + b**2)", "task_id": "293_454da493-93ee-43ca-a1bf-0875f9f8a37a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find one of the non-right angles of a right-angled triangle given the two shorter sides.", "code": "import math\ndef find_angle(a: float, b: float) -> float:\n    return math.degrees(math.atan(a / b))", "task_id": "293_16a53e64-3234-4e36-870b-ab44138a4d40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the side opposite to a given angle in a right-angled triangle given the hypotenuse.", "code": "import math\ndef find_opposite_side(angle: float, hypotenuse: float) -> float:\n    return hypotenuse * math.sin(math.radians(angle))", "task_id": "293_b903a955-dad9-477d-a603-d0fdd4891ff7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the side adjacent to a given angle in a right-angled triangle given the hypotenuse.", "code": "import math\ndef find_adjacent_side(angle: float, hypotenuse: float) -> float:\n    return hypotenuse * math.cos(math.radians(angle))", "task_id": "293_424098bd-f39d-4559-b1ff-0e0505435208", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the angle in a right-angled triangle given the lengths of the opposite and adjacent sides.", "code": "import math\ndef find_angle_from_sides(opposite: float, adjacent: float) -> float:\n    return math.degrees(math.atan(opposite / adjacent))", "task_id": "293_fde4b575-5ae8-422d-bfbe-200413199d7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the third angle in a triangle given the other two angles.", "code": "def find_third_angle(angle1: float, angle2: float) -> float:\n    return 180 - angle1 - angle2", "task_id": "293_6f22bbb6-aaf7-4424-9a48-4c4d427bff9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a triangle is right-angled given the lengths of its three sides.", "code": "def is_right_angled(a: float, b: float, c: float) -> bool:\n    sides = sorted([a, b, c])\n    return math.isclose(sides[2]**2, sides[0]**2 + sides[1]**2)", "task_id": "293_eac8661b-4726-426f-a95e-e2eb0a5b9c0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no three adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    if n == 2:\n        return k * k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * k\n    dp[3] = k * k * (k - 1)\n    for i in range(4, n + 1):\n        dp[i] = (k - 1) * (dp[i - 1] + dp[i - 2] - dp[i - 3])\n    return dp[n]", "task_id": "291_a2c9d21a-7ae3-4092-90e0-f6cb1204fbfc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most m adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_restrictions(n, k, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    for i in range(2, n + 1):\n        dp[i] = k * (dp[i - 1] - dp[i - m - 1] if i - m - 1 >= 0 else 0)\n    return dp[n]", "task_id": "291_7073c8b4-de99-4871-8a60-bda50a0c7931", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors, and return the minimum cost of painting the fence. The costs of each color are given in a list.", "code": "def ways_to_paint_fence_with_cost(n, k, costs):\n    if n == 0:\n        return 0\n    if n == 1:\n        return min(costs)\n    dp = [[0] * k for _ in range(n)]\n    for i in range(k):\n        dp[0][i] = costs[i]\n    for i in range(1, n):\n        for j in range(k):\n            dp[i][j] = costs[j] + min(dp[i - 1][l] for l in range(k) if l != j)\n    return min(dp[-1])", "task_id": "291_1316c801-7aab-4cda-917c-d78d697dc39c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_no_adjacent_same(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1)\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1]\n    return dp[n]", "task_id": "291_811fdb76-788c-4fe3-b48e-9878bd6a48d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at least one adjacent post pair has a different color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_at_least_one_diff(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    total_ways = k ** n\n    same_color_ways = k\n    for i in range(1, n):\n        same_color_ways *= (k - 1)\n    return total_ways - same_color_ways", "task_id": "291_2079646e-390c-4255-bf3c-67ae2975d927", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_no_two_same(n, k):\n    if n > k:\n        return 0\n    result = 1\n    for i in range(n):\n        result *= (k - i)\n    return result", "task_id": "291_75f757a9-9249-43c1-a094-79f09b3389a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at least one pair of adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_at_least_one_same(n, k):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    total_ways = k ** n\n    no_adjacent_same_ways = k * (k - 1) ** (n - 1)\n    return total_ways - no_adjacent_same_ways", "task_id": "291_8f114d30-75f0-48f0-a96e-5ee616ae8772", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that at most m adjacent posts have the same color for the given fence with n posts and k colors.", "code": "def ways_to_paint_fence_with_max_adjacent_same(n, k, m):\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    for i in range(2, n + 1):\n        dp[i] = k * (dp[i - 1] - dp[i - m - 1] if i - m - 1 >= 0 else 0)\n    return dp[n]", "task_id": "291_bb7e713c-6237-42d3-a8fa-e9a28767cc5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors, and return the number of ways modulo 1000000007.", "code": "def ways_to_paint_fence_with_no_adjacent_same_color(n, k):\n    mod = 1000000007\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1) % mod\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1] % mod\n    return dp[n]", "task_id": "291_0ff421f2-780e-4e86-995a-e29a0b70d2df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the number of ways of painting the fence such that no two adjacent posts have the same color for the given fence with n posts and k colors, and return the number of ways modulo 1000000007.", "code": "def ways_to_paint_fence_with_no_two_adjacent_same_color(n, k):\n    mod = 1000000007\n    if n == 0:\n        return 0\n    if n == 1:\n        return k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k * (k - 1) % mod\n    for i in range(3, n + 1):\n        dp[i] = (k - 1) * dp[i - 1] % mod\n    return dp[n]", "task_id": "291_03efdb4a-29f0-4bef-a3b4-b10663e1989b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in a given heterogeneous list.", "code": "def min_val(listval):\n    min_val = min(i for i in listval if isinstance(i, int))\n    return min_val", "task_id": "294_1e45eb03-57f9-4d42-bb01-1399e1ecabe8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a given heterogeneous list.", "code": "def sum_vals(listval):\n    sum_val = sum(i for i in listval if isinstance(i, int))\n    return sum_val", "task_id": "294_8dd0e633-a2e4-4014-81d9-f473ea0d1016", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of integer values in a given heterogeneous list.", "code": "def count_ints(listval):\n    count = sum(1 for i in listval if isinstance(i, int))\n    return count", "task_id": "294_c3906f34-66ee-4bd4-b344-c171df077036", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of all integer values in a given heterogeneous list.", "code": "def avg_val(listval):\n    int_vals = [i for i in listval if isinstance(i, int)]\n    avg = sum(int_vals) / len(int_vals) if int_vals else 0\n    return avg", "task_id": "294_0fac8980-5a77-486c-b51f-de7dffe0be07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum length of string values in a given heterogeneous list.", "code": "def max_str_len(listval):\n    max_len = max(len(i) for i in listval if isinstance(i, str))\n    return max_len", "task_id": "294_def36e75-3931-4e34-893d-78901326800a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all string values in a given heterogeneous list.", "code": "def concat_strs(listval):\n    concatenated = ''.join(i for i in listval if isinstance(i, str))\n    return concatenated", "task_id": "294_099e251f-b97c-430b-95ea-2ed631fd8bd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum float value in a given heterogeneous list.", "code": "def max_float(listval):\n    max_val = max(i for i in listval if isinstance(i, float))\n    return max_val", "task_id": "294_e70af14a-265c-4c58-8543-6a964f8c6777", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum float value in a given heterogeneous list.", "code": "def min_float(listval):\n    min_val = min(i for i in listval if isinstance(i, float))\n    return min_val", "task_id": "294_0010c61f-1da2-4dc6-91fc-a6ab5612f302", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of string values in a given heterogeneous list.", "code": "def count_strs(listval):\n    count = sum(1 for i in listval if isinstance(i, str))\n    return count", "task_id": "294_d69c7240-981d-4277-981a-61d17407eaed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all float values in a given heterogeneous list.", "code": "def sum_floats(listval):\n    sum_val = sum(i for i in listval if isinstance(i, float))\n    return sum_val", "task_id": "294_77e3af2d-2e02-45c8-8c09-bc304a2577d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all odd divisors of a number.", "code": "def sum_odd_divisors(number):\n    divisors = [1] if number % 2 != 0 else []\n    for i in range(3, number, 2):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_779e7666-9d1f-4af9-8f55-a01a712a77c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all even divisors of a number.", "code": "def sum_even_divisors(number):\n    divisors = []\n    for i in range(2, number, 2):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_578722f2-8890-4deb-9487-2ded29ef1ab8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of the squares of all divisors of a number.", "code": "def sum_square_divisors(number):\n    divisors = [1]\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum([x**2 for x in divisors])", "task_id": "295_8e29a25d-dd34-44fe-92f9-89dc219a5665", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all prime divisors of a number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_prime_divisors(number):\n    divisors = []\n    for i in range(2, number):\n        if number % i == 0 and is_prime(i):\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_92842897-f39c-4fd2-904e-7f1f569d0f13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the sum of the digits of a number.", "code": "def sum_divisors_of_sum(number):\n    digit_sum = sum(int(digit) for digit in str(number))\n    divisors = [1]\n    for i in range(2, digit_sum):\n        if digit_sum % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_06715ed8-6cc8-4878-8c93-1a87a4cddb53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the product of the digits of a number.", "code": "def sum_divisors_of_product(number):\n    digit_product = 1\n    for digit in str(number):\n        digit_product *= int(digit)\n    divisors = [1]\n    for i in range(2, digit_product):\n        if digit_product % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_d27acd17-9e00-45e9-8114-2cac8d1be65e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the factorial of a number.", "code": "import math\n\ndef sum_divisors_of_factorial(number):\n    factorial = math.factorial(number)\n    divisors = [1]\n    for i in range(2, factorial):\n        if factorial % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_5cc23515-4e46-4f62-b56b-726a30ce1849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the square of a number.", "code": "def sum_divisors_of_square(number):\n    square = number ** 2\n    divisors = [1]\n    for i in range(2, square):\n        if square % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_5be6f2bd-b030-4fe4-93e3-504d62d642ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of the cube of a number.", "code": "def sum_divisors_of_cube(number):\n    cube = number ** 3\n    divisors = [1]\n    for i in range(2, cube):\n        if cube % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_2d2fd1e7-410c-478b-9541-d5d5dcefbe3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all divisors of double the number.", "code": "def sum_divisors_of_double(number):\n    double_number = number * 2\n    divisors = [1]\n    for i in range(2, double_number):\n        if double_number % i == 0:\n            divisors.append(i)\n    return sum(divisors)", "task_id": "295_80f97d16-a303-4253-a475-0644d6e5a2b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of even and odd numbers in an array.", "code": "def count_even_odd_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] % 2 == 0 and arr[j] % 2 != 0) or (arr[i] % 2 != 0 and arr[j] % 2 == 0):\n                count += 1\n    return count", "task_id": "296_862188f1-cebf-4226-8815-7cd0c4db4098", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is greater than the second element in an array.", "code": "def count_greater_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                count += 1\n    return count", "task_id": "296_a699bcbe-e43b-4e16-8c3a-85947577eee7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is smaller than the second element in an array.", "code": "def count_smaller_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                count += 1\n    return count", "task_id": "296_e179fc8f-07e5-49f4-aa4b-d0149e60b977", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is equal to the second element in an array.", "code": "def count_equal_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j]:\n                count += 1\n    return count", "task_id": "296_5c9908a0-a9fc-4c00-8535-ecbae86afff8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where both elements are prime numbers in an array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_prime(arr[i]) and is_prime(arr[j]):\n                count += 1\n    return count", "task_id": "296_2369f9d1-041e-460d-8d1e-9131065ad715", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the first element is divisible by the second element in an array.", "code": "def count_divisible_pairs(arr, k):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % arr[j] == 0:\n                count += 1\n    return count", "task_id": "296_ad8371ca-6064-480e-8675-d9ef095d7b13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the sum of the elements is equal to a given target in an array.", "code": "def count_sum_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                count += 1\n    return count", "task_id": "296_8194db03-c572-479f-8266-df89d7655a4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the absolute difference of the elements is equal to a given target in an array.", "code": "def count_diff_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == target:\n                count += 1\n    return count", "task_id": "296_b0a28c25-3899-43b1-b7aa-e8a544baa91b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the product of the elements is equal to a given target in an array.", "code": "def count_product_pairs(arr, target):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == target:\n                count += 1\n    return count", "task_id": "296_7ec900ca-3be9-4a55-9686-d1dde7055d02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs where the concatenation of the elements forms a palindrome in an array of strings.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef count_palindrome_pairs(arr):\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_palindrome(arr[i] + arr[j]):\n                count += 1\n    return count", "task_id": "296_fb0a8483-cd66-46ca-ac10-e3ee28b7a799", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between each sublist of a nested list and another list.", "code": "def common_elements_in_sublists(l1, l2):\n    result = [[n for n in lst if n in l2] for lst in l1]\n    return result", "task_id": "298_eb875a6f-69dc-42ad-8447-14e63a3ce3e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the unique elements in each sublist of a nested list that are not present in another list.", "code": "def unique_elements_in_sublists(l1, l2):\n    result = [[n for n in lst if n not in l2] for lst in l1]\n    return result", "task_id": "298_0145b60c-f908-4d80-8f7d-e09c2cf926ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements in a list that are not present in any of the sublists of a nested list.", "code": "def elements_not_in_sublists(l1, l2):\n    result = [n for n in l1 if all(n not in lst for lst in l2)]\n    return result", "task_id": "298_434a47bb-41ed-41a4-a20f-30f97689ba97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements that are common in all sublists of a nested list and another list.", "code": "def common_elements_in_all_sublists(l1, l2):\n    common_elements = set(l2)\n    for lst in l1:\n        common_elements &= set(lst)\n    return list(common_elements)", "task_id": "298_011cdd95-37a8-461c-a3b6-e0dc3aab1237", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements in a list that are present in any of the sublists of a nested list.", "code": "def elements_in_any_sublists(l1, l2):\n    result = [n for n in l1 if any(n in lst for lst in l2)]\n    return result", "task_id": "298_d48ef1e6-2d31-4091-9c84-be5f8eaafe38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sublists in a nested list that have any common elements with another list.", "code": "def sublists_with_common_elements(l1, l2):\n    result = [lst for lst in l1 if any(n in l2 for n in lst)]\n    return result", "task_id": "298_f76caf7c-dd1d-45f1-9bbb-b301f428c23f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sublists in a nested list that have unique elements not present in another list.", "code": "def sublists_with_unique_elements(l1, l2):\n    result = [lst for lst in l1 if all(n not in l2 for n in lst)]\n    return result", "task_id": "298_6480dcbf-66c6-4e2a-a423-1b9845ead5c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the common elements between each sublist of a nested list and another list.", "code": "def common_elements_count(l1, l2):\n    result = [sum(1 for n in lst if n in l2) for lst in l1]\n    return result", "task_id": "298_46e39c19-74c6-4219-b874-949dec301512", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the unique elements in each sublist of a nested list that are not present in another list.", "code": "def unique_elements_count(l1, l2):\n    result = [sum(1 for n in lst if n not in l2) for lst in l1]\n    return result", "task_id": "298_5f2f3584-ae72-4437-bf25-64c90c9d21f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between each sublist of a nested list and another list, along with their indices in the sublist.", "code": "def common_elements_in_sublists_with_indices(l1, l2):\n    result = [[(i, n) for i, n in enumerate(lst) if n in l2] for lst in l1]\n    return result", "task_id": "298_8102c9f0-d8eb-4f68-9a4e-a5a8c4fa8abb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of a list of integers.", "code": "def sum_of_squares(numbers: list[int]) -> int:\n    return sum(x**2 for x in numbers)", "task_id": "299_7219fb74-7613-46f4-b7e3-9b770a55e585", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "299_3bfa5e43-fdc3-4664-a2da-45d819a5e400", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the words in a given sentence.", "code": "def reverse_words(sentence: str) -> str:\n    return ' '.join(sentence.split()[::-1])", "task_id": "299_be20dc76-378c-4c53-8071-7d3e124134e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "299_7944575f-beda-49bd-ac25-836347deb470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both, sum their values.", "code": "def merge_dictionaries(dict1: dict, dict2: dict) -> dict:\n    result = dict1.copy()\n    for key, value in dict2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result", "task_id": "299_57fe66fb-097d-4e14-8c71-707ffad5fa73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(n-1):\n        a, b = b, a + b\n    return b", "task_id": "299_2303caf8-5518-4832-ab09-09fd4559a89b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a list of lists.", "code": "def flatten_list(nested_list: list[list[int]]) -> list[int]:\n    return [item for sublist in nested_list for item in sublist]", "task_id": "299_9225a96b-2740-489e-8df6-ea681aa05725", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists.", "code": "def common_elements(list1: list[int], list2: list[int]) -> list[int]:\n    return list(set(list1) & set(list2))", "task_id": "299_5b954348-c6d4-4422-a7e9-4006c77b901d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrence of each word in a given sentence.", "code": "def count_words(sentence: str) -> dict:\n    words = sentence.split()\n    word_count = {}\n    for word in words:\n        if word in word_count:\n            word_count[word] += 1\n        else:\n            word_count[word] = 1\n    return word_count", "task_id": "299_d0967924-7a3d-45ac-85fd-05f5c7a2b664", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest number in a list of integers.", "code": "def second_largest(numbers: list[int]) -> int:\n    first, second = float('-inf'), float('-inf')\n    for number in numbers:\n        if number > first:\n            first, second = number, first\n        elif number > second and number != first:\n            second = number\n    return second", "task_id": "299_f1502941-d936-49e6-9855-dbefeb457b23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and reverse the order of elements.", "code": "def reverse_flatten_list(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return result_list", "task_id": "297_851f8e81-289a-4af8-904a-542a58184c61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the sum of all elements.", "code": "def flatten_and_sum(nested_list):\n    result_list = []\n    if not nested_list: return 0\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return sum(result_list)", "task_id": "297_ae9d408a-e862-40cf-a511-1685f5a74d58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a list of only the even elements.", "code": "def flatten_and_filter_even(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else:\n            if next_item % 2 == 0:\n                result_list.append(next_item)\n    return result_list", "task_id": "297_31ad1f45-dfb1-40f9-96e9-8a5e175d5af1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the count of all elements.", "code": "def flatten_and_count(nested_list):\n    result_list = []\n    if not nested_list: return 0\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return len(result_list)", "task_id": "297_babda3d2-9aa6-41e5-9694-8257bce108f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the maximum element.", "code": "def flatten_and_max(nested_list):\n    result_list = []\n    if not nested_list: return float('-inf')\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return max(result_list)", "task_id": "297_80133fa3-a58e-4071-b234-353cf4341004", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the minimum element.", "code": "def flatten_and_min(nested_list):\n    result_list = []\n    if not nested_list: return float('inf')\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return min(result_list)", "task_id": "297_1348905a-ef8b-4555-9ae2-7b0acd093067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return the product of all elements.", "code": "def flatten_and_product(nested_list):\n    result_list = []\n    if not nested_list: return 1\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    product = 1\n    for num in result_list:\n        product *= num\n    return product", "task_id": "297_33ae8060-3d52-4e37-b668-18c183a8c1cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a list of unique elements.", "code": "def flatten_and_unique(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return list(set(result_list))", "task_id": "297_47665d44-12c4-4c2c-94b0-8add19aaecbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return a sorted list of elements.", "code": "def flatten_and_sort(nested_list):\n    result_list = []\n    if not nested_list: return result_list\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return sorted(result_list)", "task_id": "297_a3e2500a-e849-4168-8f21-790915f351ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list structure and return True if a target element is found, otherwise False.", "code": "def flatten_and_find(nested_list, target):\n    result_list = []\n    if not nested_list: return False\n    stack = [list(nested_list)]\n    while stack:\n        current = stack.pop()\n        next_item = current.pop()\n        if current: stack.append(current)\n        if isinstance(next_item, list):\n            if next_item: stack.append(list(next_item))\n        else: result_list.append(next_item)\n    return target in result_list", "task_id": "297_b17775b0-49d4-49ce-9c59-4bf8907fd86b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all ternary sequences of length 2n such that sum of first n digits is same as sum of last n digits.", "code": "def count_balanced_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_fea737dd-3249-481d-9018-88cbd57d44cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all binary sequences of length 2n that are palindromic.", "code": "def count_palindromic_sequences(n): \n    return 2 ** n", "task_id": "300_dcd18517-07a6-41a9-959f-142bce08d68f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all subarrays of an array where the sum of the first half is equal to the sum of the second half.", "code": "def count_equal_sum_subarrays(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i + 1, n, 2): \n            mid = (i + j + 1) // 2 \n            if sum(arr[i:mid]) == sum(arr[mid:j + 1]): \n                count += 1 \n    return count", "task_id": "300_9e1e7b1b-f437-4201-a2a8-2fadf06827ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all balanced parentheses sequences of length 2n.", "code": "def count_balanced_parentheses(n): \n    from math import comb\n    return comb(2*n, n) // (n + 1)", "task_id": "300_b173eb9d-909f-42c7-900a-5902a7fe9107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all decimal sequences of length 2n such that the sum of the first n digits is equal to the sum of the last n digits.", "code": "def count_equal_digit_sum_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_4e2c2fae-9178-46a9-a992-e9b0b76562f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all symmetric sequences of length 2n where the sequence is the same when read forwards and backwards.", "code": "def count_symmetric_sequences(n): \n    return 2 ** n", "task_id": "300_34a31fbf-44e9-47b8-bb51-790cc613857c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all binary sequences of length 2n such that the number of 1s in the first half is equal to the number of 0s in the second half.", "code": "def count_even_odd_sequences(n): \n    from math import comb\n    return comb(2*n, n) ** 2", "task_id": "300_79a55620-40a1-4d40-90ca-a3498212df24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all pairs of subarrays where the sum of the first subarray is equal to the sum of the second subarray.", "code": "def count_equal_sum_pairs(arr): \n    n = len(arr) \n    count = 0 \n    for i in range(n): \n        for j in range(i + 1, n): \n            for k in range(j + 1, n): \n                for l in range(k + 1, n + 1): \n                    if sum(arr[i:j]) == sum(arr[k:l]): \n                        count += 1 \n    return count", "task_id": "300_67a7b84b-fcb9-4285-81fb-d84a66ba944f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all palindromic substrings in a given string.", "code": "def count_palindromic_substrings(s): \n    n = len(s) \n    count = 0 \n    for i in range(n): \n        for j in range(i, n): \n            if s[i:j + 1] == s[i:j + 1][::-1]: \n                count += 1 \n    return count", "task_id": "300_7ef53861-2884-4dab-8499-be83e1ed2347", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the count of all pairs of submatrices in a given matrix where the sum of the elements in the first submatrix is equal to the sum of the elements in the second submatrix.", "code": "def count_equal_sum_pairs_in_matrix(matrix): \n    n = len(matrix) \n    m = len(matrix[0]) \n    count = 0 \n    for i in range(n): \n        for j in range(m): \n            for k in range(i, n): \n                for l in range(j, m): \n                    for p in range(i, k + 1): \n                        for q in range(j, l + 1): \n                            if sum(matrix[x][y] for x in range(i, k + 1) for y in range(j, l + 1)) == sum(matrix[x][y] for x in range(p, k + 1) for y in range(q, l + 1)): \n                                count += 1 \n    return count", "task_id": "300_aef5e0ee-ff98-4d60-b359-9082fbf4b407", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in an integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "302_bb3cc0b0-ed0e-4c4e-9160-7aab0d39e626", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "302_bf25271f-4122-4e68-9d3a-5586111289b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the next power of two greater than or equal to a given integer.", "code": "def next_power_of_two(n: int) -> int:\n    if n <= 0:\n        return 1\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    return n + 1", "task_id": "302_4370753d-3121-4637-b634-14abb7dade71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of two less than a given integer.", "code": "def highest_power_of_two_less_than(n: int) -> int:\n    if n < 1:\n        return 0\n    p = 1\n    while p * 2 < n:\n        p *= 2\n    return p", "task_id": "302_0fd3f4cd-fe5b-4dc6-84ef-047096f7e64d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given integer.", "code": "def toggle_bits(n: int) -> int:\n    num_bits = n.bit_length()\n    all_ones = (1 << num_bits) - 1\n    return n ^ all_ones", "task_id": "302_4c23defa-bc1c-4377-b79a-cb8db86ab346", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in the binary representation of a given integer.", "code": "def count_leading_zeros(n: int) -> int:\n    if n == 0:\n        return 32\n    count = 0\n    while (n & (1 << 31)) == 0:\n        n <<= 1\n        count += 1\n    return count", "task_id": "302_ccd3a91b-2e40-47eb-bf35-55d5b5953aac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given integer.", "code": "def reverse_bits(n: int) -> int:\n    result = 0\n    for i in range(32):\n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "302_1c50402e-24e7-4251-b14b-d08c02f7426f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is even.", "code": "def is_even(n: int) -> bool:\n    return (n & 1) == 0", "task_id": "302_aab153bf-e712-4164-a374-67da0daba3e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a binary string to a decimal integer.", "code": "def binary_to_decimal(binary: str) -> int:\n    return int(binary, 2)", "task_id": "302_af4aecc4-00e9-48f0-b94a-820cda6a5061", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a decimal integer to a binary string.", "code": "def decimal_to_binary(n: int) -> str:\n    return bin(n)[2:]", "task_id": "302_6dfc71bb-237a-4f77-9c80-384e40c73599", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested list.", "code": "def list_depth(lst):\n    if isinstance(lst, list):\n        return 1 + (max(map(list_depth, lst)) if lst else 0)\n    return 0", "task_id": "301_e196cf4b-b5a7-4a6c-9048-728ac2db4d68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the total number of keys in a nested dictionary.", "code": "def dict_keys_count(d):\n    if isinstance(d, dict):\n        return len(d) + sum(dict_keys_count(v) for v in d.values())\n    return 0", "task_id": "301_3f04374e-88e9-4c89-aaae-a4942fb894c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integers in a nested list.", "code": "def list_sum(lst):\n    if isinstance(lst, list):\n        return sum(map(list_sum, lst))\n    elif isinstance(lst, int):\n        return lst\n    return 0", "task_id": "301_569ef8db-d49a-4b96-bd0d-b82a4d499ef3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a nested dictionary.", "code": "def dict_values_sum(d):\n    if isinstance(d, dict):\n        return sum(dict_values_sum(v) for v in d.values())\n    elif isinstance(d, int):\n        return d\n    return 0", "task_id": "301_3a3e3d10-5606-483e-baef-e9cb0ab06a91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def list_flatten(lst):\n    if isinstance(lst, list):\n        result = []\n        for item in lst:\n            result.extend(list_flatten(item))\n        return result\n    return [lst]", "task_id": "301_f367440c-76e0-451d-b66b-de11646b5e7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a dictionary where the keys are the original keys and the values are their depths in the original nested dictionary.", "code": "def dict_depth_keys(d, depth=1):\n    result = {}\n    if isinstance(d, dict):\n        for k, v in d.items():\n            result[k] = depth\n            if isinstance(v, dict):\n                result.update(dict_depth_keys(v, depth + 1))\n    return result", "task_id": "301_c5ed573a-2634-451a-b109-9b295e2ea6d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list contains a specific integer value.", "code": "def list_contains(lst, value):\n    if isinstance(lst, list):\n        return any(list_contains(item, value) for item in lst)\n    return lst == value", "task_id": "301_0ac3387e-2705-4b23-b8c6-eb1ac93b26d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested dictionary contains a specific integer value.", "code": "def dict_contains(d, value):\n    if isinstance(d, dict):\n        return any(dict_contains(v, value) for v in d.values())\n    return d == value", "task_id": "301_499045f7-ad3f-4fec-8abb-6b6f050f99e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested list, counting only lists that contain integers.", "code": "def list_max_depth(lst):\n    if isinstance(lst, list):\n        if any(isinstance(i, int) for i in lst):\n            return 1 + (max(map(list_max_depth, lst)) if lst else 0)\n        else:\n            return max(map(list_max_depth, lst)) if lst else 0\n    return 0", "task_id": "301_8a263467-4a7a-4194-9bed-cefd2095e214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum depth of a nested dictionary, counting only dictionaries that contain integer values.", "code": "def dict_max_depth(d):\n    if isinstance(d, dict):\n        if any(isinstance(v, int) for v in d.values()):\n            return 1 + (max(map(dict_max_depth, d.values())) if d else 0)\n        else:\n            return max(map(dict_max_depth, d.values())) if d else 0\n    return 0", "task_id": "301_6099e441-d0a7-4261-bd77-eceeb9aee97c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "303_b25ed252-fc38-4ad9-8083-faff6c277f84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "303_2a3b0e91-730b-40bd-9ec4-4760bb07d92c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is prime or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "303_c564bead-8a5f-4089-be55-ac965dbd7317", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)", "task_id": "303_0c57de9a-be9e-42fb-8b02-b152e78c0370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "303_48f6e9af-86c6-44b6-91e2-803ccb90e36c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given list is sorted in ascending order.", "code": "def is_sorted(arr: list) -> bool:\n    return arr == sorted(arr)", "task_id": "303_1576b076-9602-4eae-a9a1-336af073fea3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "303_8bf17dfa-c84e-4be8-bbc1-3771d4a39f02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "303_7f6e6889-a9b7-424c-ab2a-5c85af7b629c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "303_630af3fe-4efc-44a4-bd27-9be7df6d37a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "303_e64a9cc4-9dc0-4aaa-adb8-f3340e8a6888", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of a tuple.", "code": "def reverse_tuple(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "307_1d462002-4724-4bd9-9ef0-57dad9b8b998", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all the elements of a tuple.", "code": "def sum_tuple_elements(t: tuple) -> int:\n    return sum(t)", "task_id": "307_1cebaf80-78d7-43f9-b46a-7f41c1b0ce05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a list.", "code": "def tuple_to_list(t: tuple) -> list:\n    return list(t)", "task_id": "307_0624e1e0-8550-43ad-8f00-dc35091c4cd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list to a tuple.", "code": "def list_to_tuple(lst: list) -> tuple:\n    return tuple(lst)", "task_id": "307_5399c261-5d3f-4046-814c-cbde681ea3f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if an element is present in a tuple.", "code": "def tuple_contains(t: tuple, element) -> bool:\n    return element in t", "task_id": "307_49762d64-1b31-42a8-a65f-e6a8bf03c956", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of an element in a tuple.", "code": "def tuple_index(t: tuple, element) -> int:\n    return t.index(element)", "task_id": "307_549ea0c7-e1a1-496b-b8ab-202da7c4362f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of a tuple.", "code": "def tuple_length(t: tuple) -> int:\n    return len(t)", "task_id": "307_f0114029-c427-4d14-ac1f-c86350340363", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a tuple.", "code": "def tuple_max(t: tuple) -> int:\n    return max(t)", "task_id": "307_34af1a85-fcc9-45ed-a450-a2201befea49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a tuple.", "code": "def tuple_min(t: tuple) -> int:\n    return min(t)", "task_id": "307_4ce7eda6-43ef-490f-9679-d8f4055bf411", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two tuples.", "code": "def tuple_concat(t1: tuple, t2: tuple) -> tuple:\n    return t1 + t2", "task_id": "307_7f5cc22c-d2c9-4a76-a74f-b5ba7cc8fcfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words starting with any vowel.", "code": "import re\ndef find_words_with_vowel(words):\n    for w in words:\n        m = re.match(r'([aeiouAEIOU]\\w+)\\W([aeiouAEIOU]\\w+)', w)\n        if m:\n            return m.groups()", "task_id": "305_daa049e7-04d2-4f1d-951c-a90184ad7ab4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a digit.", "code": "import re\ndef find_words_with_digit(words):\n    for w in words:\n        m = re.match(r'(\\w*\\d\\w*)\\W(\\w*\\d\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_4ed6de7e-dad2-4923-9a5c-aa9552532f56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that have a specific length.", "code": "import re\ndef find_words_with_length(words, length):\n    for w in words:\n        m = re.match(r'(\\b\\w{' + str(length) + '}\\b)\\W(\\b\\w{' + str(length) + '}\\b)', w)\n        if m:\n            return m.groups()", "task_id": "305_4c53b340-b37a-4bc3-9a76-2e68469f9b6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words starting with any consonant.", "code": "import re\ndef find_words_with_consonant(words):\n    for w in words:\n        m = re.match(r'([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\\w+)\\W([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]\\w+)', w)\n        if m:\n            return m.groups()", "task_id": "305_decf9106-52cc-45c8-bf2a-fad31b1c5e5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a special character.", "code": "import re\ndef find_words_with_special_char(words):\n    for w in words:\n        m = re.match(r'(\\w*[^\\w\\s]\\w*)\\W(\\w*[^\\w\\s]\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_ec486714-9709-4a19-99ab-e29c906d8f85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain an uppercase letter.", "code": "import re\ndef find_words_with_uppercase(words):\n    for w in words:\n        m = re.match(r'(\\w*[A-Z]\\w*)\\W(\\w*[A-Z]\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_62d7ddea-1045-4ccd-b104-dc2198aaaf2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a lowercase letter.", "code": "import re\ndef find_words_with_lowercase(words):\n    for w in words:\n        m = re.match(r'(\\w*[a-z]\\w*)\\W(\\w*[a-z]\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_6e37d8f3-634f-426e-9061-7d71f5c5a65c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a repeated character.", "code": "import re\ndef find_words_with_repeated_char(words):\n    for w in words:\n        m = re.match(r'(\\w*(\\w)\\2\\w*)\\W(\\w*(\\w)\\4\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_ed388b47-73a3-48a2-945f-34098616cadf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that are palindromes.", "code": "import re\ndef find_words_with_palindrome(words):\n    for w in words:\n        m = re.match(r'((\\w)\\w*\\2)\\W((\\w)\\w*\\4)', w)\n        if m:\n            return m.groups()", "task_id": "305_2f16b54b-c4a6-46ec-9551-39eb8fc5d02f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to match two words from a list of words that contain a specific substring.", "code": "import re\ndef find_words_with_substring(words, substring):\n    for w in words:\n        m = re.match(r'(\\w*' + re.escape(substring) + '\\w*)\\W(\\w*' + re.escape(substring) + '\\w*)', w)\n        if m:\n            return m.groups()", "task_id": "305_7fcee440-1ac3-45f8-8165-8f2e0687c57f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of left rotations on subarrays.", "code": "def find_element_after_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == right:\n                index = left\n            else:\n                index += 1\n    return arr[index]", "task_id": "304_a7bcdae9-65c3-4421-a2a2-43305331535f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of right rotations on subarrays.", "code": "def find_element_after_right_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]", "task_id": "304_9055f7d7-b1e6-4f51-8431-d3eed5e2e77b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of reverse rotations on subarrays.", "code": "def find_element_after_reverse_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            index = right - (index - left)\n    return arr[index]", "task_id": "304_14fef9fd-fbda-40a1-95d2-d09200131cd9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of circular rotations on subarrays.", "code": "def find_element_after_circular_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            index = (index + 1) % (right - left + 1) + left\n    return arr[index]", "task_id": "304_c6827f5d-8462-40e1-a0fa-cadacf710503", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of mixed left and right rotations on subarrays.", "code": "def find_element_after_mixed_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right, direction = ranges[i]\n        if left <= index <= right:\n            if direction == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_7f19abb9-9ffc-49ef-ad42-31d0276bc9f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of double rotations (left then right) on subarrays.", "code": "def find_element_after_double_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == right:\n                index = left\n            else:\n                index += 1\n        if left <= index <= right:\n            if index == left:\n                index = right\n            else:\n                index -= 1\n    return arr[index]", "task_id": "304_4575db91-1c51-40a5-b32c-227440c671bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of random rotations on subarrays.", "code": "import random\n\ndef find_element_after_random_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if random.choice(['left', 'right']) == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_4384d786-0eea-48c9-b16f-baa1c920323d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of partial rotations on subarrays.", "code": "def find_element_after_partial_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if index == left:\n                index = (index + (right - left) // 2) % (right - left + 1) + left\n            else:\n                index -= 1\n    return arr[index]", "task_id": "304_8223a359-4c65-4cc4-9366-53d27e575ac9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of alternating left and right rotations on subarrays.", "code": "def find_element_after_alternating_rotations(arr, ranges, rotations, index):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            if i % 2 == 0:\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_4e0e9f98-8e6e-42ba-8cfd-bfddad39207d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element at a given index after a series of custom rotations on subarrays, where the rotation direction is determined by a custom function.", "code": "def find_element_after_custom_rotations(arr, ranges, rotations, index, custom_func):\n    for i in range(rotations):\n        left, right = ranges[i]\n        if left <= index <= right:\n            direction = custom_func(left, right, index)\n            if direction == 'left':\n                if index == right:\n                    index = left\n                else:\n                    index += 1\n            else:\n                if index == left:\n                    index = right\n                else:\n                    index -= 1\n    return arr[index]", "task_id": "304_62d8d184-ed11-4b43-81f0-d6caf238027c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of two numbers.", "code": "def minimum(a: int, b: int) -> int:\n    if a <= b:\n        return a\n    else:\n        return b", "task_id": "309_83fe4a95-5d02-42ae-8157-1571cff403d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of three numbers.", "code": "def maximum_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "309_ddfb8b68-b079-4d5c-ba92-c1755f834db3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of three numbers.", "code": "def minimum_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "309_8885a375-efd1-4b06-b5d8-6f0377a9044a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def absolute_difference(a: int, b: int) -> int:\n    return abs(a - b)", "task_id": "309_d48e0ce1-9e95-4e4b-83de-1f2b0b152422", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "309_257fe4f9-687c-4608-a188-6d78185b66ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is odd.", "code": "def is_odd(n: int) -> bool:\n    return n % 2 != 0", "task_id": "309_9aef8ccd-699a-43c4-942e-6d724b6ce47b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def sum_of_two(a: int, b: int) -> int:\n    return a + b", "task_id": "309_33903f43-d8bb-4866-b796-f4647f502ef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def product_of_two(a: int, b: int) -> int:\n    return a * b", "task_id": "309_8847e26e-ce5e-4035-9de8-63799227d1b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is positive.", "code": "def is_positive(n: int) -> bool:\n    return n > 0", "task_id": "309_5b820d68-4b55-4e75-a9e3-f17b0f01660c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is negative.", "code": "def is_negative(n: int) -> bool:\n    return n < 0", "task_id": "309_df1a4c14-ad9a-432c-8d6c-9dae299f351d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of largest products from two given lists.", "code": "def sum_of_products(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\n    return sum(result)", "task_id": "308_7370ffb7-3def-402e-8010-bfe610a9def3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the specified number of smallest products from two given lists.", "code": "def smallest_product(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2])[:N]\n    return result", "task_id": "308_909a2039-b5a8-4c28-a219-5f0ca131122d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the specified number of unique largest products from two given lists.", "code": "def unique_largest_product(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]), reverse=True)[:N]\n    return result", "task_id": "308_60f6b628-aa7f-4237-8760-465dd27242c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique largest products from two given lists.", "code": "def sum_of_unique_products(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]), reverse=True)[:N]\n    return sum(result)", "task_id": "308_fedfb2e6-5fc2-42bf-b4bd-9d00f52e041a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the specified number of largest products and return the pairs that produce these products from two given lists.", "code": "def largest_product_pairs(nums1, nums2, N):\n    products = [(x, y, x*y) for x in nums1 for y in nums2]\n    products.sort(key=lambda x: x[2], reverse=True)\n    return [(x, y) for x, y, _ in products[:N]]", "task_id": "308_d3b573ea-583c-4674-a028-37406644e4be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of smallest products from two given lists.", "code": "def sum_of_smallest_products(nums1, nums2, N):\n    result = sorted([x*y for x in nums1 for y in nums2])[:N]\n    return sum(result)", "task_id": "308_065dc2a0-25db-4da0-9cdb-aef3029d9944", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the specified number of unique smallest products from two given lists.", "code": "def unique_smallest_product(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]))[:N]\n    return result", "task_id": "308_c7ad5781-3951-4436-840c-0e5865ac6c51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique smallest products from two given lists.", "code": "def sum_of_unique_smallest_products(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2]))[:N]\n    return sum(result)", "task_id": "308_ed277d38-303a-4c7e-9b21-3aa1af46cc54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the specified number of largest products and return the indices of the pairs that produce these products from two given lists.", "code": "def largest_product_with_indices(nums1, nums2, N):\n    products = [(i, j, x*y) for i, x in enumerate(nums1) for j, y in enumerate(nums2)]\n    products.sort(key=lambda x: x[2], reverse=True)\n    return [(i, j) for i, j, _ in products[:N]]", "task_id": "308_3f28feb6-4f5f-4d7c-b1ae-00147b186e34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the specified number of unique largest products from two given lists, but only if the product is even.", "code": "def unique_largest_product_sum(nums1, nums2, N):\n    result = sorted(set([x*y for x in nums1 for y in nums2 if (x*y) % 2 == 0]), reverse=True)[:N]\n    return sum(result)", "task_id": "308_2a84b1b9-618b-463a-8957-bccc2290cf38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and reverse the order of elements.", "code": "def reverse_string_tuple(s: str):\n    result = tuple(x for x in s[::-1] if not x.isspace())\n    return result", "task_id": "310_8521a118-edda-4ba2-ad60-598c33d54494", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and convert all characters to uppercase.", "code": "def string_to_tuple_upper(s: str):\n    result = tuple(x.upper() for x in s if not x.isspace())\n    return result", "task_id": "310_cad397a1-cf46-4171-8c3c-bcf5245c0dea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all vowels.", "code": "def string_to_tuple_no_vowels(s: str):\n    vowels = 'aeiouAEIOU'\n    result = tuple(x for x in s if x not in vowels and not x.isspace())\n    return result", "task_id": "310_0ded5b4e-72e6-4bfb-a66d-b495709ae4c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple containing only the digits.", "code": "def string_to_tuple_digits(s: str):\n    result = tuple(x for x in s if x.isdigit())\n    return result", "task_id": "310_b2f5ee54-484b-4fd1-bb71-1f1a98a0cc9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple containing only the alphabetic characters.", "code": "def string_to_tuple_alpha(s: str):\n    result = tuple(x for x in s if x.isalpha())\n    return result", "task_id": "310_0e8a9488-00c5-46cf-9b9f-8e2e8ae85b5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all punctuation.", "code": "import string\n\ndef string_to_tuple_no_punctuation(s: str):\n    result = tuple(x for x in s if x not in string.punctuation and not x.isspace())\n    return result", "task_id": "310_b29dc3d0-2e48-44e6-9b65-9e7c1fd81d3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and convert all characters to lowercase.", "code": "def string_to_tuple_lower(s: str):\n    result = tuple(x.lower() for x in s if not x.isspace())\n    return result", "task_id": "310_fd9ec28a-1b84-4f57-801b-2b06e5d03b4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all digits.", "code": "def string_to_tuple_no_digits(s: str):\n    result = tuple(x for x in s if not x.isdigit() and not x.isspace())\n    return result", "task_id": "310_b7e1a910-1f0f-4bfe-93e5-5950e78f7e0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all consonants.", "code": "def string_to_tuple_no_consonants(s: str):\n    vowels = 'aeiouAEIOU'\n    result = tuple(x for x in s if x in vowels and not x.isspace())\n    return result", "task_id": "310_a2de2baf-2ae1-4db4-a516-7c6e793e998a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given string to a tuple and remove all spaces.", "code": "def string_to_tuple_no_spaces(s: str):\n    result = tuple(x for x in s if not x.isspace())\n    return result", "task_id": "310_4d96afd9-cef9-4bd7-b31d-6004720198cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the right most unset bit.", "code": "def set_right_most_unset_bit(n):\n    if not (~n):\n        return n\n    pos = 0\n    while (n & (1 << pos)) != 0:\n        pos += 1\n    return n | (1 << pos)", "task_id": "311_182ba928-1053-49ce-af62-0ae22c4bee32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the left most set bit.", "code": "def clear_left_most_set_bit(n):\n    if n == 0:\n        return 0\n    pos = 0\n    temp = n\n    while temp:\n        pos = temp.bit_length() - 1\n        temp &= ~(1 << pos)\n    return n & ~(1 << pos)", "task_id": "311_696f8035-7e7e-4869-bd77-ee95025933d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the right most set bit.", "code": "def clear_right_most_set_bit(n):\n    if n == 0:\n        return 0\n    return n & (n - 1)", "task_id": "311_33733193-2a5e-4791-b773-b76475756e8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the left most set bit.", "code": "def toggle_left_most_set_bit(n):\n    if n == 0:\n        return 0\n    pos = n.bit_length() - 1\n    return n ^ (1 << pos)", "task_id": "311_923555ae-2464-471f-878d-59f8e07516eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the right most set bit.", "code": "def toggle_right_most_set_bit(n):\n    if n == 0:\n        return 0\n    return n ^ (n & -n)", "task_id": "311_fe0491ed-fe80-4dd4-8e6c-1e1786f281ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the left most unset bit within a given range.", "code": "def set_left_most_unset_bit_in_range(n, start, end):\n    for i in range(start, end + 1):\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    return n", "task_id": "311_4dce8f15-7897-4abb-a83f-c2170395f004", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the right most unset bit within a given range.", "code": "def set_right_most_unset_bit_in_range(n, start, end):\n    for i in range(start, end + 1):\n        if not (n & (1 << i)):\n            return n | (1 << i)\n    return n", "task_id": "311_499e3f33-8780-449d-bc93-1ad9522c754d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the left most set bit within a given range.", "code": "def clear_left_most_set_bit_in_range(n, start, end):\n    for i in range(end, start - 1, -1):\n        if n & (1 << i):\n            return n & ~(1 << i)\n    return n", "task_id": "311_acd34255-a304-48a0-a803-eadf8331fe12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the right most set bit within a given range.", "code": "def clear_right_most_set_bit_in_range(n, start, end):\n    for i in range(start, end + 1):\n        if n & (1 << i):\n            return n & ~(1 << i)\n    return n", "task_id": "311_d2a5bbb1-0695-4c21-a20d-466296bbab3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the left most unset bit.", "code": "def toggle_left_most_unset_bit(n):\n    if n == -1:\n        return n\n    pos = 0\n    temp = n\n    while temp & (1 << pos):\n        pos += 1\n    return n ^ (1 << pos)", "task_id": "311_1210167a-4a55-4783-b8be-b4bffd3b5183", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r, h):\n  volume = math.pi * r * r * h\n  return volume", "task_id": "312_bb8d236b-5395-4f88-9141-245c9344333f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surface_area_cone(r, h):\n  l = math.sqrt(r * r + h * h)\n  surface_area = math.pi * r * (r + l)\n  return surface_area", "task_id": "312_05c89dd3-0434-4f46-bc35-9b265e1080d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  volume = (4.0/3) * math.pi * r * r * r\n  return volume", "task_id": "312_03cea334-76ee-46ea-9e47-ae819c5ae0a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(r):\n  surface_area = 4 * math.pi * r * r\n  return surface_area", "task_id": "312_3de47575-83e7-4251-a1d1-79fa6b34be7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n  volume = l * w * h\n  return volume", "task_id": "312_d7bbe299-698b-4d47-9a50-52148e6a0b64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cuboid.", "code": "def surface_area_cuboid(l, w, h):\n  surface_area = 2 * (l * w + l * h + w * h)\n  return surface_area", "task_id": "312_fb5966f1-0754-4a20-918a-7bcbad495d32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular pyramid.", "code": "def volume_pyramid(l, w, h):\n  volume = (1.0/3) * l * w * h\n  return volume", "task_id": "312_09e60f4d-23be-47e2-8ccf-271dbe63e128", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surface_area_cylinder(r, h):\n  surface_area = 2 * math.pi * r * (r + h)\n  return surface_area", "task_id": "312_9a2dcfd6-a675-4757-9311-92354a82dba1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a triangular prism given the base area and height of the triangle and the length of the prism.", "code": "def volume_prism(b, h, l):\n  volume = b * h * l\n  return volume", "task_id": "312_44378e2f-d260-4445-9e76-9d05da453d87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a triangular prism given the base area and height of the triangle and the length of the prism.", "code": "def surface_area_prism(b, h, l):\n  surface_area = 2 * b + l * h\n  return surface_area", "task_id": "312_2fa4798d-5abc-4a8c-88f9-323154935576", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i.", "code": "def find_max_sum_subseq(arr, i, k):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_3acf796d-159c-4e8e-a230-d644dedd3629", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The array may contain negative numbers.", "code": "def find_max_sum_subseq_with_negatives(arr, i, k):\n    n = len(arr)\n    dp = [[float('-inf') for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_371f7a08-2fe2-4cfb-bc7c-17216cdf889a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a minimum length of min_length.", "code": "def find_max_sum_subseq_with_length(arr, i, k, min_length):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    max_sum = 0\n    for x in range(min_length - 1, i + 1):\n        max_sum = max(max_sum, dp[x][k])\n    return max_sum", "task_id": "306_13e23b5e-2229-45f1-ac3d-0f68069907d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must not include the element at the exclude index.", "code": "def find_max_sum_subseq_with_exclusion(arr, i, k, exclude):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0] and x != exclude:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x and y != exclude:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_8bf426c8-5d32-4309-95b4-8eed92034911", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must start with the element at the start index.", "code": "def find_max_sum_subseq_with_fixed_start(arr, i, k, start):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[start]:\n            dp[start][x] = arr[x] + arr[start]\n        else:\n            dp[start][x] = arr[x]\n    for x in range(start + 1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k]", "task_id": "306_928aec27-d2cf-4f74-90de-74ae0e688f73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must end with the element at the end index.", "code": "def find_max_sum_subseq_with_fixed_end(arr, i, k, end):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k] + arr[end]", "task_id": "306_dc1610ad-d947-4e09-b447-6146350b48df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must include all elements in the fixed_elements list.", "code": "def find_max_sum_subseq_with_fixed_elements(arr, i, k, fixed_elements):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    max_sum = dp[i][k]\n    for element in fixed_elements:\n        max_sum += arr[element]\n    return max_sum", "task_id": "306_8c11d8e3-deef-4cd1-9059-32dadd038a61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a sum equal to fixed_sum.", "code": "def find_max_sum_subseq_with_fixed_sum(arr, i, k, fixed_sum):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    return dp[i][k] if dp[i][k] == fixed_sum else -1", "task_id": "306_a111ad68-f3ea-4a29-8870-8bfc37fc1370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have a product equal to fixed_product.", "code": "def find_max_sum_subseq_with_fixed_product(arr, i, k, fixed_product):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    product = 1\n    for x in range(i + 1):\n        product *= arr[x]\n    return dp[i][k] if product == fixed_product else -1", "task_id": "306_29f229ed-c200-4c0f-9125-a4770e4e6afa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i. The subsequence must have an average equal to fixed_avg.", "code": "def find_max_sum_subseq_with_fixed_avg(arr, i, k, fixed_avg):\n    n = len(arr)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    for x in range(n):\n        if arr[x] > arr[0]:\n            dp[0][x] = arr[x] + arr[0]\n        else:\n            dp[0][x] = arr[x]\n    for x in range(1, n):\n        for y in range(n):\n            if arr[y] > arr[x] and y > x:\n                if dp[x - 1][x] + arr[y] > dp[x - 1][y]:\n                    dp[x][y] = dp[x - 1][x] + arr[y]\n                else:\n                    dp[x][y] = dp[x - 1][y]\n            else:\n                dp[x][y] = dp[x - 1][y]\n    total_sum = dp[i][k]\n    avg = total_sum / (i + 1)\n    return total_sum if avg == fixed_avg else -1", "task_id": "306_f7460169-745b-4033-926b-57368ab45884", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return even numbers in a list.", "code": "def even_nos(list1):\n    return [num for num in list1 if num % 2 == 0]", "task_id": "313_3746baf0-da07-42d3-a2dc-5810a705216d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return odd numbers in a list.", "code": "def odd_nos(list1):\n    return [num for num in list1 if num % 2 != 0]", "task_id": "313_e2908ec3-91cd-42e4-8b38-6e43a48b89bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of positive numbers in a list.", "code": "def positive_sum(list1):\n    return sum(num for num in list1 if num > 0)", "task_id": "313_d5885e5a-b140-477b-b3d2-e9ee2f34ad1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return negative numbers in a list.", "code": "def negative_nos(list1):\n    return [num for num in list1 if num < 0]", "task_id": "313_1940cba2-059c-4e4b-b37a-b8234bf3c37d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the square of each number in a list.", "code": "def square_nos(list1):\n    return [num ** 2 for num in list1]", "task_id": "313_11dd406f-4ab6-495a-8aad-68cab9be5f57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a list.", "code": "def positive_count(list1):\n    return len([num for num in list1 if num > 0])", "task_id": "313_b0b6665e-4847-4a66-b0c3-f42073f401ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return each number in a list doubled.", "code": "def double_nos(list1):\n    return [num * 2 for num in list1]", "task_id": "313_a4eba043-a9b2-4066-9e8a-ae093c3985dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the average of positive numbers in a list.", "code": "def positive_avg(list1):\n    positives = [num for num in list1 if num > 0]\n    return sum(positives) / len(positives) if positives else 0", "task_id": "313_43845d2b-78c5-4104-84c1-103cc30be25b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the absolute value of each number in a list.", "code": "def abs_nos(list1):\n    return [abs(num) for num in list1]", "task_id": "313_59e37408-37de-4e7b-911e-17ee35e2965e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the product of positive numbers in a list.", "code": "def positive_product(list1):\n    product = 1\n    for num in list1:\n        if num > 0:\n            product *= num\n    return product", "task_id": "313_9c3c97e5-0bcf-48a8-839d-0822514c7d56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that counts the number of consecutive identical elements in a list and returns a list of tuples where each tuple contains the element and its count.", "code": "from itertools import groupby\n\ndef count_consecutive_elements(alist):\n    return [(key, len(list(group))) for key, group in groupby(alist)]", "task_id": "317_77f83cb5-adb5-43f2-bf77-cbf5ec3dc40d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a string and returns a list of tuples where each tuple contains the character and its count.", "code": "from itertools import groupby\n\ndef run_length_encode_string(s):\n    return [(char, len(list(group))) for char, group in groupby(s)]", "task_id": "317_db64d3f0-5f5d-4e66-8f21-f985ae9baa47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a list of tuples where each tuple contains the element, its count, and the starting index of the sequence in the original list.", "code": "from itertools import groupby\n\ndef encode_with_positions(alist):\n    result = []\n    index = 0\n    for key, group in groupby(alist):\n        length = len(list(group))\n        result.append((key, length, index))\n        index += length\n    return result", "task_id": "317_84518c5d-eb3d-4557-b6d2-a2b843270325", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list but only includes sequences with a length greater than or equal to a given threshold.", "code": "from itertools import groupby\n\ndef modified_encode_with_threshold(alist, threshold):\n    def ctr_ele(el):\n        if len(el) >= threshold: return [len(el), el[0]]\n        else: return el[0]\n    return [ctr_ele(list(group)) for key, group in groupby(alist)]", "task_id": "317_dc209c39-8132-4c02-ae44-e13917ec756a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list but splits sequences longer than a given maximum length into multiple entries.", "code": "from itertools import groupby\n\ndef encode_with_max_length(alist, max_length):\n    result = []\n    for key, group in groupby(alist):\n        length = len(list(group))\n        while length > max_length:\n            result.append([max_length, key])\n            length -= max_length\n        if length > 0:\n            result.append([length, key])\n    return result", "task_id": "317_62cb33f9-8e45-4b58-bb50-441148a3bb70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and inserts a separator string between each encoded element.", "code": "from itertools import groupby\n\ndef encode_with_separator(alist, separator):\n    encoded = [[len(list(group)), key] for key, group in groupby(alist)]\n    result = []\n    for item in encoded:\n        result.extend(item)\n        result.append(separator)\n    return result[:-1]  # Remove the last separator", "task_id": "317_b1cab96c-08e8-49e4-a553-b5072a219557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and applies a custom function to each encoded element before returning the result.", "code": "from itertools import groupby\n\ndef encode_with_custom_function(alist, func):\n    return [func(len(list(group)), key) for key, group in groupby(alist)]", "task_id": "317_017195c2-159f-4cd7-98ed-828f81fcdeaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a dictionary where each key is an element and the value is the total count of that element in the list.", "code": "from itertools import groupby\n\ndef encode_with_element_count(alist):\n    result = {}\n    for key, group in groupby(alist):\n        result[key] = result.get(key, 0) + len(list(group))\n    return result", "task_id": "317_8a18c78c-02e4-4356-9634-74c8829aea4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a list and returns a list of run lengths only, without the elements.", "code": "from itertools import groupby\n\ndef encode_with_run_lengths(alist):\n    return [len(list(group)) for key, group in groupby(alist)]", "task_id": "317_eb611016-8fd8-42e6-832c-8fe8ab698a7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that performs run-length encoding on a string and returns a list of tuples where each tuple contains the character and its count, but the characters alternate between uppercase and lowercase.", "code": "from itertools import groupby\n\ndef encode_with_alternating_case(s):\n    result = []\n    for i, (char, group) in enumerate(groupby(s)):\n        count = len(list(group))\n        if i % 2 == 0:\n            result.append((char.upper(), count))\n        else:\n            result.append((char.lower(), count))\n    return result", "task_id": "317_31423995-9fb3-43c9-bc81-dfc47b424efb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given 1D array.", "code": "def max_sum_1d_array(arr):\n    incl = arr[0]\n    excl = 0\n    for i in range(1, len(arr)):\n        excl_new = max(excl, incl)\n        incl = excl + arr[i]\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_6c51571b-836c-44dc-bb14-045ad1cd0952", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 3 x n.", "code": "def max_sum_3xN_grid(grid, n):\n    incl = max(grid[0][0], grid[1][0], grid[2][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i], grid[2][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_188c0fc3-f9b0-405a-b43e-58787edabedb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given 2D array.", "code": "def max_sum_2d_array(arr):\n    incl = max(arr[0][0], arr[1][0])\n    excl = 0\n    for i in range(1, len(arr[0])):\n        excl_new = max(excl, incl)\n        incl = excl + max(arr[0][i], arr[1][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_dff2ce8f-1590-4a09-a765-3261d616781f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given circular array.", "code": "def max_sum_circular_array(arr):\n    def max_sum_non_adjacent(arr):\n        incl = arr[0]\n        excl = 0\n        for i in range(1, len(arr)):\n            excl_new = max(excl, incl)\n            incl = excl + arr[i]\n            excl = excl_new\n        return max(excl, incl)\n    return max(max_sum_non_adjacent(arr[:-1]), max_sum_non_adjacent(arr[1:]))", "task_id": "314_f1020f7b-274a-4be1-935e-816c69f17eae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent (including diagonals) for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_diagonals(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_1527988e-bc6c-4118-87f7-f9a078c696df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and you can skip one row for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_skip(grid, n):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_883140c1-02ff-4b60-b9d7-b2cce20bd9ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a penalty for choosing adjacent numbers for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_penalty(grid, n, penalty):\n    incl = max(grid[0][0], grid[1][0])\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i]) - penalty\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_b55f7887-8a2b-4549-9e87-422c8fb80ecf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a bonus for choosing non-adjacent numbers for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_bonus(grid, n, bonus):\n    incl = max(grid[0][0], grid[1][0]) + bonus\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(grid[0][i], grid[1][i]) + bonus\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_65bac10d-1cff-4c5e-9369-3a8c96be0534", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there is a restriction on the maximum value for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_restriction(grid, n, restriction):\n    incl = max(min(grid[0][0], restriction), min(grid[1][0], restriction))\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(min(grid[0][i], restriction), min(grid[1][i], restriction))\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_a1ee2e31-28f9-4fce-8f0a-f8430e797b9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent and there are multiple restrictions on the maximum values for the given rectangular grid of dimension 2 x n.", "code": "def max_sum_2d_grid_with_multiple_restrictions(grid, n, restrictions):\n    incl = max(min(grid[0][0], restrictions[0]), min(grid[1][0], restrictions[1]))\n    excl = 0\n    for i in range(1, n):\n        excl_new = max(excl, incl)\n        incl = excl + max(min(grid[0][i], restrictions[0]), min(grid[1][i], restrictions[1]))\n        excl = excl_new\n    return max(excl, incl)", "task_id": "314_34bd7499-3b35-43fd-a11e-13e60aba7070", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a given number in a sorted array.", "code": "def find_first_occurrence(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            right = mid - 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_cc12d671-4af5-472b-a821-26a3bbbccd46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a number greater than a given number in a sorted array.", "code": "def find_last_occurrence_greater_than(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_eb551150-a649-4510-bfea-8a0270491ca9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a number less than a given number in a sorted array.", "code": "def find_first_occurrence_less_than(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_7bb413a0-f009-493d-97c5-40135cf2e28d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the number closest to a given number in a sorted array.", "code": "def find_closest_number(A, x):\n    left, right = 0, len(A) - 1\n    closest_index = -1\n    min_diff = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        if abs(A[mid] - x) < min_diff:\n            min_diff = abs(A[mid] - x)\n            closest_index = mid\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return closest_index", "task_id": "316_08330e40-e24f-40fe-a11d-983deb7cfb9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a multiple of a given number in a sorted array.", "code": "def find_first_occurrence_of_multiple(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % x == 0:\n            result = mid\n            right = mid - 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_f116523e-0019-4ad2-a73d-ac80171ebecc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a multiple of a given number in a sorted array.", "code": "def find_last_occurrence_of_multiple(A, x):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % x == 0:\n            result = mid\n            left = mid + 1\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_49e2368b-cec2-45b0-bfd9-d10a45fda7a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of an even number in a sorted array.", "code": "def find_first_occurrence_of_even(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 == 0:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_ad13e09f-58ba-4b77-91e0-cdef6b01c252", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of an odd number in a sorted array.", "code": "def find_last_occurrence_of_odd(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 != 0:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_e4f267a4-3cdd-4799-8817-9d4da4c41856", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a prime number in a sorted array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_occurrence_of_prime(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_prime(A[mid]):\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "316_8c39b364-29f5-4584-bf0d-9751b4fb272f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a prime number in a sorted array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_last_occurrence_of_prime(A):\n    left, right = 0, len(A) - 1\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_prime(A[mid]):\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "316_2dc1e6a2-de12-43bf-87c6-ea669a960aa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain at least one vowel (a, e, i, o, u) using regex.", "code": "import re\ndef find_words_with_vowels(text):\n  return re.findall(r'\\b\\w*[aeiou]\\w*\\b', text)", "task_id": "319_89f56819-1ffa-4cc6-a487-7dcbced78205", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all capitalized words in the given string using regex.", "code": "import re\ndef find_capitalized_words(text):\n  return re.findall(r'\\b[A-Z][a-z]*\\b', text)", "task_id": "319_f921def8-4180-46d3-b97f-42b56c7d04b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain at least one digit using regex.", "code": "import re\ndef find_words_with_numbers(text):\n  return re.findall(r'\\b\\w*\\d\\w*\\b', text)", "task_id": "319_96b1267d-a576-47c5-b42b-5f57ac7b3c71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that end with the letter 's' using regex.", "code": "import re\ndef find_words_ending_with_s(text):\n  return re.findall(r'\\b\\w*s\\b', text)", "task_id": "319_e6224d60-90b2-40c3-b003-215782baaa5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that start with a consonant using regex.", "code": "import re\ndef find_words_starting_with_consonant(text):\n  return re.findall(r'\\b[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\\w*\\b', text)", "task_id": "319_03d8c377-3251-4a1f-a09e-48c25ed48f8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words (words that read the same backward as forward) in the given string using regex.", "code": "import re\ndef find_palindromic_words(text):\n  return [word for word in re.findall(r'\\b\\w+\\b', text) if word == word[::-1]]", "task_id": "319_a4a55d78-3665-4e2d-87aa-3d5807bc341a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain double letters (e.g., 'letter') using regex.", "code": "import re\ndef find_words_with_double_letters(text):\n  return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "319_6f38a960-c6cf-49fa-912d-6e56ec804b07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that contain special characters (e.g., 'hello!') using regex.", "code": "import re\ndef find_words_with_special_characters(text):\n  return re.findall(r'\\b\\w*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?]+\\w*\\b', text)", "task_id": "319_c1ecaceb-3225-4e7b-8129-9a77d2037771", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that start with a given prefix using regex.", "code": "import re\ndef find_words_with_prefix(text, prefix):\n  return re.findall(r'\\b' + re.escape(prefix) + r'\\w*\\b', text)", "task_id": "319_e18a8bf7-2bcb-4b72-a79b-1501f83ad8d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words in the given string that end with a given suffix using regex.", "code": "import re\ndef find_words_with_suffix(text, suffix):\n  return re.findall(r'\\b\\w*' + re.escape(suffix) + r'\\b', text)", "task_id": "319_efbd8925-7811-47fa-900c-e1231e8342a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum area of a rectangle with given perimeter.", "code": "def max_area(a: int, b: int) -> int:\n    return (a // 2) * (b // 2)", "task_id": "318_58818b7a-a038-4e44-9dae-8a1519c2132d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of a contiguous subarray.", "code": "def max_sum_subarray(arr: list) -> int:\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "318_1f5085c4-5ede-44dd-8186-2bf038da4902", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum product of a contiguous subarray.", "code": "def max_product_subarray(arr: list) -> int:\n    max_product = float('-inf')\n    min_product = float('inf')\n    current_product = 1\n    for num in arr:\n        if num == 0:\n            current_product = 1\n            continue\n        current_product *= num\n        max_product = max(max_product, current_product)\n        min_product = min(min_product, current_product)\n    return max_product", "task_id": "318_bda3163b-a36b-4569-b9cd-58719791fc21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum profit from buying and selling a stock given a list of prices.", "code": "def max_profit(prices: list) -> int:\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit", "task_id": "318_222eb8c1-6182-4440-941f-71579793374a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of non-adjacent elements in a list.", "code": "def max_sum_non_adjacent(arr: list) -> int:\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)", "task_id": "318_36095bc8-930f-4e8c-b47d-3837d53fbbe0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum path sum in a grid from the top-left to the bottom-right corner.", "code": "def max_path_sum(grid: list) -> int:\n    rows = len(grid)\n    cols = len(grid[0])\n    for i in range(1, rows):\n        grid[i][0] += grid[i-1][0]\n    for j in range(1, cols):\n        grid[0][j] += grid[0][j-1]\n    for i in range(1, rows):\n        for j in range(1, cols):\n            grid[i][j] += max(grid[i-1][j], grid[i][j-1])\n    return grid[rows-1][cols-1]", "task_id": "318_c4f92c24-67a3-4571-b50d-96464d2de8a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum path sum in a triangle from the top to the bottom.", "code": "def max_sum_path(triangle: list) -> int:\n    for i in range(len(triangle)-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "318_3cf88bfd-66cb-48d8-b7ce-1f46649b806b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of elements in a list that is divisible by a given integer k.", "code": "def max_sum_divisible_by_k(arr: list, k: int) -> int:\n    dp = [0] * k\n    for num in arr:\n        for i in dp[:]:\n            dp[(i + num) % k] = max(dp[(i + num) % k], i + num)\n    return dp[0]", "task_id": "318_56e1b148-4953-46c8-aae2-3400cecba772", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of an increasing subsequence in a list.", "code": "def max_sum_increasing_subsequence(arr: list) -> int:\n    n = len(arr)\n    dp = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + arr[i])\n    return max(dp)", "task_id": "318_9fb304cc-fa0a-44d4-b864-f19b50caee83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of k consecutive elements in a list.", "code": "def max_sum_of_k_elements(arr: list, k: int) -> int:\n    max_sum = sum(arr[:k])\n    current_sum = max_sum\n    for i in range(k, len(arr)):\n        current_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "318_f16ca679-ad0d-41bd-b426-321e1bb49044", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the cubed sum of first n natural numbers and the sum of cubed first n natural numbers.", "code": "def sum_of_cubes_difference(n):\n    sumofcubes = 0\n    cubeofsum = 0\n    for num in range(1, n+1):\n        sumofcubes += num ** 3\n        cubeofsum += num\n    cubeofsum = cubeofsum ** 3\n    return cubeofsum - sumofcubes", "task_id": "320_1ecd58e3-b675-4542-a078-39beea23ecd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the fourth power sum of first n natural numbers and the sum of fourth powers of first n natural numbers.", "code": "def sum_of_fourth_powers_difference(n):\n    sumoffourthpowers = 0\n    fourthpowerofsum = 0\n    for num in range(1, n+1):\n        sumoffourthpowers += num ** 4\n        fourthpowerofsum += num\n    fourthpowerofsum = fourthpowerofsum ** 4\n    return fourthpowerofsum - sumoffourthpowers", "task_id": "320_3dc619e8-d580-46b6-8083-35569cf1f7cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the product of first n natural numbers and the sum of first n natural numbers.", "code": "def product_difference(n):\n    product = 1\n    summation = 0\n    for num in range(1, n+1):\n        product *= num\n        summation += num\n    return product - summation", "task_id": "320_b3e57ffa-1dc3-479a-974a-fda1644b5f3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the difference between the sum of first n even natural numbers and the sum of first n odd natural numbers.", "code": "def sum_of_even_odd_difference(n):\n    sum_even = 0\n    sum_odd = 0\n    for num in range(1, 2*n+1):\n        if num % 2 == 0:\n            sum_even += num\n        else:\n            sum_odd += num\n    return sum_even - sum_odd", "task_id": "320_09a9d11c-9223-4f17-b2a3-cb837055b1b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n even natural numbers.", "code": "def sum_of_squares_of_evens(n):\n    sumofsquares = 0\n    for num in range(2, 2*n+1, 2):\n        sumofsquares += num ** 2\n    return sumofsquares", "task_id": "320_45b5f442-3387-4750-9c97-4a6c922f32e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n odd natural numbers.", "code": "def sum_of_cubes_of_odds(n):\n    sumofcubes = 0\n    for num in range(1, 2*n, 2):\n        sumofcubes += num ** 3\n    return sumofcubes", "task_id": "320_26544a99-8350-4bba-9876-3c70aa65f90c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    sumoffactorials = 0\n    for num in range(1, n+1):\n        sumoffactorials += factorial(num)\n    return sumoffactorials", "task_id": "320_5fad5015-cc71-4fbe-b054-021759d07ea6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n prime numbers.", "code": "def sum_of_squares_of_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sumofsquares = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sumofsquares += num ** 2\n            count += 1\n        num += 1\n    return sumofsquares", "task_id": "320_75e815a2-2f5f-42d8-93d8-965e891f7ab9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n Fibonacci numbers.", "code": "def sum_of_cubes_of_fibonacci(n):\n    def fibonacci(x):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return fibonacci(x - 1) + fibonacci(x - 2)\n    sumofcubes = 0\n    for num in range(n):\n        sumofcubes += fibonacci(num) ** 3\n    return sumofcubes", "task_id": "320_e808858d-3ac4-4a9f-989e-37d4e587e4f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n powers of two.", "code": "def sum_of_powers_of_two(n):\n    sumofpowers = 0\n    for num in range(n):\n        sumofpowers += 2 ** num\n    return sumofpowers", "task_id": "320_f6240dd2-66eb-41b0-ac57-9f63d7a9a214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a palindrome of digits up to the given number.", "code": "def find_palindrome(n):\n    res = ''.join(str(i) for i in range(1, n+1))\n    res += ''.join(str(i) for i in range(n-1, 0, -1))\n    return res", "task_id": "321_64e43d01-bf62-4896-8a02-9859a59b1419", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each character in the given string twice.", "code": "def repeat_characters(s):\n    return ''.join(c*2 for c in s)", "task_id": "321_e2275593-8357-4efb-a812-9db435356473", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])", "task_id": "321_ecb90a38-f73d-43d4-936c-11bcd08b1fa1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "321_a89cb1f6-a265-47bd-a829-979b52010dbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "321_6bcf01c9-ad43-4853-82f3-70a14cd4e568", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "task_id": "321_616041b8-4ab3-4adc-994b-84a753757d59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for c in s if c.lower() in 'aeiou')", "task_id": "321_228d949e-040e-41fb-b33a-2b6eeee4df85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "321_2433ccae-b865-49bd-a03c-f2bcab97a1d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "321_6f583389-bd18-4eb0-8a07-423af69b1a37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(a, b):\n    return sorted(a + b)", "task_id": "321_7362690c-5d05-4973-8bef-5f10e04227be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of the maximum values in a given list.", "code": "def find_max_positions(lst):\n    max_val = max(lst)\n    max_result = [i for i, j in enumerate(lst) if j == max_val]\n    return max_result", "task_id": "322_710e6b3b-1d9b-4a5c-b0b3-54fce1af394c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of even numbers in a given list.", "code": "def find_even_positions(lst):\n    even_result = [i for i, j in enumerate(lst) if j % 2 == 0]\n    return even_result", "task_id": "322_014da445-ad32-4cb5-ab72-f53eecb7ffad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of odd numbers in a given list.", "code": "def find_odd_positions(lst):\n    odd_result = [i for i, j in enumerate(lst) if j % 2 != 0]\n    return odd_result", "task_id": "322_f8e870f9-70ab-46d1-b527-4997e2a7da3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of negative numbers in a given list.", "code": "def find_negative_positions(lst):\n    negative_result = [i for i, j in enumerate(lst) if j < 0]\n    return negative_result", "task_id": "322_92af255c-9282-49f4-b832-9a07a3620e8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of positive numbers in a given list.", "code": "def find_positive_positions(lst):\n    positive_result = [i for i, j in enumerate(lst) if j > 0]\n    return positive_result", "task_id": "322_f47dd7ca-98fe-40ca-a5fb-bf960ffcb8c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of zeros in a given list.", "code": "def find_zero_positions(lst):\n    zero_result = [i for i, j in enumerate(lst) if j == 0]\n    return zero_result", "task_id": "322_9c76f504-c2d4-487e-b88f-aa0f31ea942c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of prime numbers in a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_prime_positions(lst):\n    prime_result = [i for i, j in enumerate(lst) if is_prime(j)]\n    return prime_result", "task_id": "322_e6f855eb-a2f8-4078-9f52-d6bfc1a9ddb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of palindrome numbers in a given list.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_palindrome_positions(lst):\n    palindrome_result = [i for i, j in enumerate(lst) if is_palindrome(j)]\n    return palindrome_result", "task_id": "322_b7427bc8-53ff-4a8d-9cb6-21b6a54e99e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of numbers divisible by a given divisor in a given list.", "code": "def find_divisible_positions(lst, divisor):\n    divisible_result = [i for i, j in enumerate(lst) if j % divisor == 0]\n    return divisible_result", "task_id": "322_009e0334-2f50-4541-835a-2fba5016f2b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all index positions of unique numbers (numbers that appear only once) in a given list.", "code": "def find_unique_positions(lst):\n    unique_result = [i for i, j in enumerate(lst) if lst.count(j) == 1]\n    return unique_result", "task_id": "322_5dae210a-68fc-4529-823f-8a58068af773", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of squares of alternate elements in a tuple.", "code": "def sum_of_squares_of_alternates(test_tuple: tuple[int]) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele ** 2\n    else:\n      sum2 += ele ** 2\n  return (sum1, sum2)", "task_id": "324_700fd82f-1bb1-45c5-834e-a4699c56f59a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate alternate strings in a tuple.", "code": "def sum_of_alternate_strings(test_tuple: tuple[str]) -> tuple[str, str]:\n  str1 = ''\n  str2 = ''\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      str1 += ele\n    else:\n      str2 += ele\n  return (str1, str2)", "task_id": "324_9abbf58b-2fb4-4124-8d71-811cae6863a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the product of alternate elements in a tuple.", "code": "def product_of_alternates(test_tuple: tuple[int]) -> tuple[int, int]:\n  prod1 = 1\n  prod2 = 1\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      prod1 *= ele\n    else:\n      prod2 *= ele\n  return (prod1, prod2)", "task_id": "324_b80ca8f8-e1c1-49e2-b50f-8822e5e0d3bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting from a given offset.", "code": "def sum_of_alternates_with_offset(test_tuple: tuple[int], offset: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[offset:]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_e53da373-335a-468a-9a27-09fdbe4b82e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, with a given step size.", "code": "def sum_of_alternates_with_step(test_tuple: tuple[int], step: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[::step]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_7c3afd02-881e-47a3-9471-b3c10fbdc36b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting with an initial value.", "code": "def sum_of_alternates_with_initial(test_tuple: tuple[int], initial: int) -> tuple[int, int]:\n  sum1 = initial\n  sum2 = initial\n  for idx, ele in enumerate(test_tuple):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_29df14c9-c11a-4277-813a-796de81f595a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, considering only elements greater than a given condition.", "code": "def sum_of_alternates_with_condition(test_tuple: tuple[int], condition: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele > condition:\n      if idx % 2:\n        sum1 += ele\n      else:\n        sum2 += ele\n  return (sum1, sum2)", "task_id": "324_e121dbeb-1fb2-47f8-8918-04809e4ff8ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, starting from a given index.", "code": "def sum_of_alternates_with_index(test_tuple: tuple[int], index: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple[index:]):\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_c8990e09-7bad-46f7-8db5-b49a0769d56e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, excluding a specific value.", "code": "def sum_of_alternates_with_exclusion(test_tuple: tuple[int], exclude: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele != exclude:\n      if idx % 2:\n        sum1 += ele\n      else:\n        sum2 += ele\n  return (sum1, sum2)", "task_id": "324_bb84af00-4c18-428c-b646-94f8aac0fc1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the sum of alternate elements in a tuple, replacing a specific value with another value.", "code": "def sum_of_alternates_with_replacement(test_tuple: tuple[int], replace: int, replacement: int) -> tuple[int, int]:\n  sum1 = 0\n  sum2 = 0\n  for idx, ele in enumerate(test_tuple):\n    if ele == replace:\n      ele = replacement\n    if idx % 2:\n      sum1 += ele\n    else:\n      sum2 += ele\n  return (sum1, sum2)", "task_id": "324_b4db2c17-ead6-428f-8bab-545249173204", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of cubes whose sum is equal to a given number.", "code": "def min_squares_sum(n):\n    if n <= 1:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum(n - temp))\n    return res", "task_id": "325_0c91899a-721a-4b3c-898a-0a9254aeb99b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but the number of squares used cannot exceed a given limit.", "code": "def min_squares_sum_with_limit(n, limit):\n    if n <= 3:\n        return n if n <= limit else float('inf')\n    if limit == 0:\n        return float('inf')\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_limit(n - temp, limit - 1))\n    return res", "task_id": "325_ac4cc9d7-b4ea-4a0b-ada9-e87dc06cbe9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number using memoization to optimize the solution.", "code": "def min_squares_sum_memo(n, memo):\n    if n in memo:\n        return memo[n]\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_memo(n - temp, memo))\n    memo[n] = res\n    return res", "task_id": "325_2c20b3ad-8da6-49b2-858b-9d71c61c294f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number using dynamic programming.", "code": "def min_squares_sum_dp(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]", "task_id": "325_0603647a-e51e-4f2a-a52c-d31f2ab9536e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but certain squares are excluded from being used.", "code": "def min_squares_sum_with_exclusion(n, exclude):\n    exclude_set = set(exclude)\n    def helper(n):\n        if n <= 3:\n            return n\n        res = n\n        for x in range(1, n + 1):\n            temp = x * x\n            if temp > n:\n                break\n            if temp not in exclude_set:\n                res = min(res, 1 + helper(n - temp))\n        return res\n    return helper(n)", "task_id": "325_e1403872-a85d-48ba-97ad-97a0cd029acb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, starting from a given square.", "code": "def min_squares_sum_with_start(n, start):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(start, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_start(n - temp, start))\n    return res", "task_id": "325_2a5ce57e-3c05-4a0a-87c9-c421cd3b1787", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but only using squares that are multiples of a given step.", "code": "def min_squares_sum_with_step(n, step):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, n + 1):\n        temp = (x * step) * (x * step)\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_step(n - temp, step))\n    return res", "task_id": "325_9e18ebb5-d0b8-4260-89db-5dec4e1fe6ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but the squares used cannot exceed a given maximum square.", "code": "def min_squares_sum_with_max_square(n, max_square):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(1, max_square + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_max_square(n - temp, max_square))\n    return res", "task_id": "325_7c526165-4aa7-403c-8a31-23d953e086f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but the squares used cannot be less than a given minimum square.", "code": "def min_squares_sum_with_min_square(n, min_square):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(min_square, n + 1):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_min_square(n - temp, min_square))\n    return res", "task_id": "325_2ac7fa6a-cb31-476f-bfc5-029b38b4b938", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of squares whose sum is equal to a given number, but only using even squares.", "code": "def min_squares_sum_with_even_squares(n):\n    if n <= 3:\n        return n\n    res = n\n    for x in range(2, n + 1, 2):\n        temp = x * x\n        if temp > n:\n            break\n        else:\n            res = min(res, 1 + min_squares_sum_with_even_squares(n - temp))\n    return res", "task_id": "325_8daf57fe-9c8c-406f-a738-4c3df193c717", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list and return the word along with its length.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_length(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res), len(res))", "task_id": "326_37dffd12-398e-4811-90a6-80c972ab4351", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, ignoring case.", "code": "from collections import defaultdict\n\ndef most_occurrences_ignore_case(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.lower().split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9baac05b-020e-4f8b-b3c7-43bce8e3cfaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list and return the word along with its count.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_count(test_list):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return (str(res), temp[res])", "task_id": "326_36b594cc-c08a-4148-be85-443fa144d60e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that is at least a given minimum length.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_min_length(test_list, min_length):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if len(wrd) >= min_length:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_fb9716d2-e625-4ee1-9a45-773455093460", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, excluding a list of specific words.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_exclusion(test_list, exclude):\n  temp = defaultdict(int)\n  exclude_set = set(exclude)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd not in exclude_set:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9f8deb67-8bb0-4f3a-8b4d-b7049f72fdb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that starts with a given prefix.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_prefix(test_list, prefix):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd.startswith(prefix):\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_0b4462ca-6665-4376-beb1-37efd1d75f87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list that ends with a given suffix.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_suffix(test_list, suffix):\n  temp = defaultdict(int)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd.endswith(suffix):\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9348b4ed-3aed-4f0e-bf3a-55e64a47bdd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list after replacing all occurrences of a specific word with another word.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_replacement(test_list, old, new):\n  temp = defaultdict(int)\n  for sub in test_list:\n    sub = sub.replace(old, new)\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_5ac3a99d-a08b-441c-9ae1-80e80df44f79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, ignoring punctuation.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_punctuation(test_list):\n  import string\n  temp = defaultdict(int)\n  for sub in test_list:\n    sub = sub.translate(str.maketrans('', '', string.punctuation))\n    for wrd in sub.split():\n      temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_ca7755a5-b504-415f-8d88-b0f387ab6f12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the word with the most number of occurrences in the given strings list, excluding common stopwords.", "code": "from collections import defaultdict\n\ndef most_occurrences_with_stopwords(test_list, stopwords):\n  temp = defaultdict(int)\n  stopwords_set = set(stopwords)\n  for sub in test_list:\n    for wrd in sub.split():\n      if wrd not in stopwords_set:\n        temp[wrd] += 1\n  res = max(temp, key=temp.get)\n  return str(res)", "task_id": "326_9bf85c5c-4331-48ec-a08f-c1d346eb0178", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is equilateral or not.", "code": "def is_equilateral(a, b, c):\n    return a == b == c", "task_id": "327_2fa88448-9598-4a2f-b0b9-7289c3bbab3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is scalene or not.", "code": "def is_scalene(a, b, c):\n    return a != b and b != c and a != c", "task_id": "327_e25a2086-89e5-48d7-aaa3-857a217f5ae1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is a right triangle or not.", "code": "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "327_d56369df-4d9b-4ef8-ae4d-fb83f45b1f3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an obtuse triangle or not.", "code": "def is_obtuse_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "327_820df8e4-a4dd-4cec-b60d-3555a9e142d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the triangle is an acute triangle or not.", "code": "def is_acute_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "327_0cf88f0d-a051-4a93-922c-5b608d5713f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a triangle.", "code": "def triangle_perimeter(a, b, c):\n    return a + b + c", "task_id": "327_accfb652-42cf-40bb-a22d-3afd45c77f1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle using Heron's formula.", "code": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))", "task_id": "327_aec03ea0-8554-4cd2-b4c8-01f7c45abb2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid triangle.", "code": "def is_valid_triangle(a, b, c):\n    return a + b > c and a + c > b and b + c > a", "task_id": "327_5424d45e-67ad-428b-adb3-efa880e8f939", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the type of triangle based on its sides (equilateral, isosceles, or scalene).", "code": "def triangle_type(a, b, c):\n    if a == b == c:\n        return 'equilateral'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'", "task_id": "327_34bf5029-bc5f-4d99-a3d8-fee41befc266", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the angles of a triangle given its sides using the Law of Cosines.", "code": "import math\n\ndef triangle_angles(a, b, c):\n    angle_A = math.degrees(math.acos((b**2 + c**2 - a**2) / (2 * b * c)))\n    angle_B = math.degrees(math.acos((a**2 + c**2 - b**2) / (2 * a * c)))\n    angle_C = 180 - angle_A - angle_B\n    return angle_A, angle_B, angle_C", "task_id": "327_25129d93-ff64-4c80-8ed3-4813e63179b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(lst: list) -> list:\n    return lst[::-1]", "task_id": "328_37ae0313-c4f8-4012-8608-5847db5d2496", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction.", "code": "def rotate_right(lst: list, n: int) -> list:\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]", "task_id": "328_e91aaded-07f9-4bb0-90ec-b8cfbbae39ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in a given list.", "code": "def sum_elements(lst: list) -> int:\n    return sum(lst)", "task_id": "328_069bbc51-9ac7-4ff5-a01b-3b5313b02e87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given list.", "code": "def find_max(lst: list) -> int:\n    return max(lst)", "task_id": "328_a16ea8e4-de64-4568-a774-b5be5b5e2be7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a given list.", "code": "def find_min(lst: list) -> int:\n    return min(lst)", "task_id": "328_01d9d6e0-3d55-4d6c-9bb5-f2b5d91ed774", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a given list.", "code": "def remove_duplicates(lst: list) -> list:\n    return list(dict.fromkeys(lst))", "task_id": "328_d978f819-87e3-400b-8a1d-bf2c40da71b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a specified element in a given list.", "code": "def count_occurrences(lst: list, x: int) -> int:\n    return lst.count(x)", "task_id": "328_1c6be04e-7b83-4ff3-9379-fd1b2ef70c2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given list is sorted in ascending order.", "code": "def is_sorted(lst: list) -> bool:\n    return lst == sorted(lst)", "task_id": "328_4643489f-e7b6-4599-8312-276b5db6dcc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second maximum element in a given list.", "code": "def find_second_max(lst: list) -> int:\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2] if len(unique_lst) >= 2 else None", "task_id": "328_4dbded0b-825c-4e83-b290-22f5ebd6467b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given lists into one.", "code": "def merge_lists(lst1: list, lst2: list) -> list:\n    return lst1 + lst2", "task_id": "328_9d653aa9-d990-4991-91e9-122fd21e4aa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating even and odd numbers.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_even_odd(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 2 == 0 and arr[out_of_place] % 2 != 0) or\n\t\t\t(arr[index] % 2 != 0 and arr[out_of_place] % 2 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 2 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 2 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_de204d4a-d7a6-4a63-8116-cf97f831bfbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating elements greater than and less than the previous element.", "code": "def rearrange_greater_less(arr):\n\tn = len(arr)\n\tfor i in range(1, n):\n\t\tif (i % 2 == 1 and arr[i] < arr[i - 1]) or (i % 2 == 0 and arr[i] > arr[i - 1]):\n\t\t\tarr[i], arr[i - 1] = arr[i - 1], arr[i]\n\treturn arr", "task_id": "323_8bd4ed6a-0134-4bd5-94e2-23825565e09c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating prime and non-prime numbers.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_prime_nonprime(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_prime(arr[index]) != is_prime(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_prime(arr[index]) and index % 2 == 1) or (not is_prime(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_936e1af8-4f0a-440e-8441-3b3d6d76a444", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of characters in alternating vowels and consonants.", "code": "def is_vowel(c):\n\treturn c.lower() in 'aeiou'\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_vowel_consonant(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_vowel(arr[index]) != is_vowel(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_vowel(arr[index]) and index % 2 == 1) or (not is_vowel(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_20f98138-dd2e-4511-aeaf-ac8e6b64d768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of characters in alternating uppercase and lowercase letters.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_upper_lower(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (arr[index].isupper() != arr[out_of_place].isupper()):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (arr[index].isupper() and index % 2 == 1) or (arr[index].islower() and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_54aeb0bd-a3ce-43a6-bb7c-95e649ee0aa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array such that elements at odd indices are greater than elements at even indices.", "code": "def rearrange_odd_even_index(arr):\n\tn = len(arr)\n\tfor i in range(1, n, 2):\n\t\tif arr[i] < arr[i - 1]:\n\t\t\tarr[i], arr[i - 1] = arr[i - 1], arr[i]\n\t\tif i + 1 < n and arr[i] < arr[i + 1]:\n\t\t\tarr[i], arr[i + 1] = arr[i + 1], arr[i]\n\treturn arr", "task_id": "323_05b91127-a30e-4a7c-8384-fa8b434e7527", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating increasing and decreasing order.", "code": "def rearrange_increasing_decreasing(arr):\n\tn = len(arr)\n\tarr.sort()\n\tresult = [0] * n\n\tleft, right = 0, n - 1\n\tfor i in range(n):\n\t\tif i % 2 == 0:\n\t\t\tresult[i] = arr[left]\n\t\t\tleft += 1\n\t\telse:\n\t\t\tresult[i] = arr[right]\n\t\t\tright -= 1\n\treturn result", "task_id": "323_969ca707-f3b5-4267-a9f6-c1f216e2f717", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating multiples of 5 and non-multiples of 5.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_multiple_five(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 5 == 0 and arr[out_of_place] % 5 != 0) or\n\t\t\t(arr[index] % 5 != 0 and arr[out_of_place] % 5 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 5 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 5 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_6c915bff-2d6a-46c3-af30-2c70c7d9b09b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array in alternating numbers divisible by 3 and not divisible by 3.", "code": "def right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_divisible_three(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif ((arr[index] % 3 == 0 and arr[out_of_place] % 3 != 0) or\n\t\t\t(arr[index] % 3 != 0 and arr[out_of_place] % 3 == 0)):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif ((arr[index] % 3 == 0 and index % 2 == 1) or\n\t\t\t(arr[index] % 3 != 0 and index % 2 == 0)):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_18477bd8-26b5-4b76-b3a8-3be053269447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to re-arrange the given array of strings in alternating palindromes and non-palindromes.", "code": "def is_palindrome(s):\n\treturn s == s[::-1]\n\ndef right_rotate(arr, n, out_of_place, cur):\n\ttemp = arr[cur]\n\tfor i in range(cur, out_of_place, -1):\n\t\tarr[i] = arr[i - 1]\n\tarr[out_of_place] = temp\n\treturn arr\n\ndef rearrange_palindrome_nonpalindrome(arr):\n\tn = len(arr)\n\tout_of_place = -1\n\tfor index in range(n):\n\t\tif (out_of_place >= 0):\n\t\t\tif (is_palindrome(arr[index]) != is_palindrome(arr[out_of_place])):\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\n\t\t\t\tif (index - out_of_place > 2):\n\t\t\t\t\tout_of_place += 2\n\t\t\t\telse:\n\t\t\t\t\tout_of_place = -1\n\t\tif (out_of_place == -1):\n\t\t\tif (is_palindrome(arr[index]) and index % 2 == 1) or (not is_palindrome(arr[index]) and index % 2 == 0):\n\t\t\t\tout_of_place = index\n\treturn arr", "task_id": "323_bbea02b5-2ef5-4993-812f-50baaad1e4a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count odd numbers in a list.", "code": "def count_odd_numbers(nums):\n    odd_count = 0\n    for num in nums:\n        if num % 2 != 0:\n            odd_count += 1\n    return odd_count", "task_id": "329_6792eaaa-58ee-4920-8495-698d6c5c6e3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count even numbers in a list.", "code": "def count_even_numbers(nums):\n    even_count = 0\n    for num in nums:\n        if num % 2 == 0:\n            even_count += 1\n    return even_count", "task_id": "329_2a3011d5-ce6a-4473-97be-6166be36bbf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count positive numbers in a list.", "code": "def count_positive_numbers(nums):\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count", "task_id": "329_c75d2cba-bded-484a-a77c-02f96bbd2009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count zeroes in a list.", "code": "def count_zeroes(nums):\n    zero_count = 0\n    for num in nums:\n        if num == 0:\n            zero_count += 1\n    return zero_count", "task_id": "329_eb2bdcb5-ed79-41ab-bb74-dfeb719cf09d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count prime numbers in a list.", "code": "def count_primes(nums):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    prime_count = 0\n    for num in nums:\n        if is_prime(num):\n            prime_count += 1\n    return prime_count", "task_id": "329_7bb58716-1af6-4bb1-897d-496376ab1571", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count palindromic words in a list.", "code": "def count_palindromes(words):\n    palindrome_count = 0\n    for word in words:\n        if word == word[::-1]:\n            palindrome_count += 1\n    return palindrome_count", "task_id": "329_f85b0d59-e100-419c-8443-e3559b26fe4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count vowels in a string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    vowel_count = 0\n    for char in s:\n        if char in vowels:\n            vowel_count += 1\n    return vowel_count", "task_id": "329_660922b8-11c7-4210-89d0-041869b3a3e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count uppercase letters in a string.", "code": "def count_uppercase(s):\n    uppercase_count = 0\n    for char in s:\n        if char.isupper():\n            uppercase_count += 1\n    return uppercase_count", "task_id": "329_cb99d193-2908-4c1f-9214-a2dd00c7e9a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count lowercase letters in a string.", "code": "def count_lowercase(s):\n    lowercase_count = 0\n    for char in s:\n        if char.islower():\n            lowercase_count += 1\n    return lowercase_count", "task_id": "329_1ae1bd16-e1a5-4a8b-b15e-d6350e4259a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count digits in a string.", "code": "def count_digits(s):\n    digit_count = 0\n    for char in s:\n        if char.isdigit():\n            digit_count += 1\n    return digit_count", "task_id": "329_0560dbf0-64fd-4d2c-ab9f-199ce23b44c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one vowel in the given string by using regex.", "code": "import re\ndef find_words_with_vowels(text):\n  return re.findall(r'\\b\\w*[aeiouAEIOU]+\\w*\\b', text)", "task_id": "330_5eabedf0-cf89-44b4-850d-4eff80be7b12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that start with a consonant in the given string by using regex.", "code": "import re\ndef find_words_starting_with_consonant(text):\n  return re.findall(r'\\b[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\\w*\\b', text)", "task_id": "330_326196e1-6c86-4003-87bf-c84ca5837a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that end with 'ing' in the given string by using regex.", "code": "import re\ndef find_words_ending_with_ing(text):\n  return re.findall(r'\\b\\w+ing\\b', text)", "task_id": "330_b27c68a5-5ec5-4d3d-a40c-7d86a022c25f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain double letters in the given string by using regex.", "code": "import re\ndef find_words_with_double_letters(text):\n  return re.findall(r'\\b\\w*(\\w)\\1\\w*\\b', text)", "task_id": "330_8767b644-a1f9-4e57-a278-dc598d3b5e46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain numbers in the given string by using regex.", "code": "import re\ndef find_words_with_numbers(text):\n  return re.findall(r'\\b\\w*\\d+\\w*\\b', text)", "task_id": "330_ee82c3c3-9b1f-4270-8d46-391f96804276", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain special characters (non-alphanumeric) in the given string by using regex.", "code": "import re\ndef find_words_with_special_characters(text):\n  return re.findall(r'\\b\\w*[^\\w\\s]+\\w*\\b', text)", "task_id": "330_5c9e5b2d-0b73-4c5a-ac6b-aa79f2f2ccb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindrome words in the given string by using regex.", "code": "import re\ndef find_palindrome_words(text):\n  return [word for word in re.findall(r'\\b\\w+\\b', text) if word == word[::-1]]", "task_id": "330_68bd41f0-6f22-44ad-85fa-b9a8c8ae17f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one capital letter in the given string by using regex.", "code": "import re\ndef find_words_with_capital_letters(text):\n  return re.findall(r'\\b\\w*[A-Z]+\\w*\\b', text)", "task_id": "330_868abd87-1d39-451a-96a6-d51fc8050ec8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain exactly two vowels in the given string by using regex.", "code": "import re\ndef find_words_with_exactly_two_vowels(text):\n  return re.findall(r'\\b\\w*[aeiouAEIOU]\\w*[aeiouAEIOU]\\w*\\b', text)", "task_id": "330_25aeb116-169a-4e15-b635-05bc90ee39d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain no vowels in the given string by using regex.", "code": "import re\ndef find_words_with_no_vowels(text):\n  return re.findall(r'\\b[^aeiouAEIOU\\W]+\\b', text)", "task_id": "330_b17209eb-3806-4341-b812-d5776cf9858a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count unset bits of a given number in its binary representation.", "code": "def count_unset_bits(n): \n    count = 0\n    x = 1\n    while(x < n + 1): \n        if ((x & n) == 0): \n            count += 1\n        x = x << 1\n    return count", "task_id": "331_53fed245-115b-40df-869a-7b6be151b750", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count set bits of a given number in its binary representation.", "code": "def count_set_bits(n): \n    count = 0\n    while (n): \n        count += n & 1\n        n >>= 1\n    return count", "task_id": "331_5fb36060-9807-4f3e-8b01-4a2e8d1f5a4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of differing bits between two given numbers.", "code": "def count_bits_difference(a, b): \n    count = 0\n    xor = a ^ b\n    while xor: \n        count += xor & 1\n        xor >>= 1\n    return count", "task_id": "331_724b2456-ea56-4300-bd75-7acd82370926", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(n): \n    return n > 0 and (n & (n - 1)) == 0", "task_id": "331_e0cc3450-a7dc-4e9a-86b1-49f5d13bc86f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given number.", "code": "def reverse_bits(n): \n    result = 0\n    while n: \n        result = (result << 1) | (n & 1)\n        n >>= 1\n    return result", "task_id": "331_ffde6590-4f67-4e4e-b088-cbd2bd49c8b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in the binary representation of a given number.", "code": "def count_leading_zeros(n): \n    if n == 0: \n        return 32\n    count = 0\n    while (n & (1 << 31)) == 0: \n        n <<= 1\n        count += 1\n    return count", "task_id": "331_9e466317-bab9-4ff7-8647-4d1b89949ed8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the binary representation of a given number.", "code": "def count_trailing_zeros(n): \n    if n == 0: \n        return 32\n    count = 0\n    while (n & 1) == 0: \n        n >>= 1\n        count += 1\n    return count", "task_id": "331_dbb24d88-b792-4e5e-93e0-8f8bab0e20b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is even.", "code": "def is_even(n): \n    return (n & 1) == 0", "task_id": "331_f650c3b8-e40f-407b-bd55-a0086c70b5e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the k-th bit of a given number.", "code": "def toggle_kth_bit(n, k): \n    return n ^ (1 << (k - 1))", "task_id": "331_bdf68237-5b6b-45b6-a823-9b7dd7c392d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the k-th bit of a given number is set.", "code": "def is_kth_bit_set(n, k): \n    return (n & (1 << (k - 1))) != 0", "task_id": "331_8aeb2f9e-298a-4bba-a132-134406861335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each vowel in a given string.", "code": "def count_vowels(s: str) -> dict:\n    vowels = 'aeiou'\n    freq = {v: 0 for v in vowels}\n    for char in s:\n        if char in vowels:\n            freq[char] += 1\n    return freq", "task_id": "332_2ba4e9fe-e9a1-4412-9b84-b6301a56dbaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each word in a given string.", "code": "def word_frequency(s: str) -> dict:\n    words = s.split()\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    return freq", "task_id": "332_a69b9fc7-758b-4769-877a-5cce0bbd1eff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each digit in a given string.", "code": "def count_digits(s: str) -> dict:\n    digits = '0123456789'\n    freq = {d: 0 for d in digits}\n    for char in s:\n        if char in digits:\n            freq[char] += 1\n    return freq", "task_id": "332_ad7cd9c9-ca1c-4c4d-accd-05d785632f30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each uppercase letter in a given string.", "code": "def count_uppercase(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if char.isupper():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_f9d4659c-4f7e-49fb-b89c-2e3c3e1bc04b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each lowercase letter in a given string.", "code": "def count_lowercase(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if char.islower():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_97c57b5d-da2b-4dad-a08e-5022b8b6fee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each punctuation mark in a given string.", "code": "def count_punctuation(s: str) -> dict:\n    import string\n    punctuation = string.punctuation\n    freq = {p: 0 for p in punctuation}\n    for char in s:\n        if char in punctuation:\n            freq[char] += 1\n    return freq", "task_id": "332_5fbdf19e-9bee-45f2-a423-9950dc9ccd64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each consonant in a given string.", "code": "def count_consonants(s: str) -> dict:\n    vowels = 'aeiou'\n    freq = {}\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_02f4f4ca-f436-40be-8eb3-00811c87f25a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each alphanumeric character in a given string.", "code": "def count_alphanumeric(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if char.isalnum():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_c9ef2d94-9f05-4895-a3d5-093767fda3a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of whitespace characters in a given string.", "code": "def count_whitespace(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isspace():\n            count += 1\n    return count", "task_id": "332_7e858545-c0d0-4ade-a3a0-7dcd1be52cf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each special character (non-alphanumeric and non-whitespace) in a given string.", "code": "def count_special_characters(s: str) -> dict:\n    freq = {}\n    for char in s:\n        if not char.isalnum() and not char.isspace():\n            if char in freq:\n                freq[char] += 1\n            else:\n                freq[char] = 1\n    return freq", "task_id": "332_d5bdfa8b-065c-48d1-b665-6988927b9b3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list according to the last element in sublist.", "code": "def sort_by_last_element(sub_li): \n    sub_li.sort(key = lambda x: x[-1]) \n    return sub_li", "task_id": "333_13eecf3c-0a4f-49c6-be5e-49804664c21e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the length of each string.", "code": "def sort_by_length(sub_li): \n    sub_li.sort(key = len) \n    return sub_li", "task_id": "333_e60eb757-5c29-45f9-99ca-697529c2a108", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of lists by the sum of elements in each sublist.", "code": "def sort_by_sum(sub_li): \n    sub_li.sort(key = lambda x: sum(x)) \n    return sub_li", "task_id": "333_c27dd34e-03dd-47a6-925f-5aa4061a9107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the second character in each string.", "code": "def sort_by_second_char(sub_li): \n    sub_li.sort(key = lambda x: x[1] if len(x) > 1 else '') \n    return sub_li", "task_id": "333_71f365e0-0112-4014-ab70-32356a35e91e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of integers by their absolute values.", "code": "def sort_by_absolute_value(sub_li): \n    sub_li.sort(key = abs) \n    return sub_li", "task_id": "333_9e70248d-3cc6-4b4b-8e37-501624c61ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of vowels in each string.", "code": "def sort_by_vowel_count(sub_li): \n    sub_li.sort(key = lambda x: sum(1 for char in x if char in 'aeiouAEIOU')) \n    return sub_li", "task_id": "333_8c60a00e-bafb-415b-809b-4b0784c8290f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the first digit found in each string.", "code": "def sort_by_first_digit(sub_li): \n    sub_li.sort(key = lambda x: next((char for char in x if char.isdigit()), '')) \n    return sub_li", "task_id": "333_217acccf-d451-484f-bb20-5db2513e20a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of words in each string.", "code": "def sort_by_word_count(sub_li): \n    sub_li.sort(key = lambda x: len(x.split())) \n    return sub_li", "task_id": "333_33f861e1-3d19-492d-bfc0-767b988f68ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by the number of unique characters in each string.", "code": "def sort_by_unique_chars(sub_li): \n    sub_li.sort(key = lambda x: len(set(x))) \n    return sub_li", "task_id": "333_8d6fd4e3-51e4-4e7a-abac-d2ff3bae5217", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list according to the first element in sublist.", "code": "def sort_by_first_element(sub_li): \n    sub_li.sort(key = lambda x: x[0]) \n    return sub_li", "task_id": "333_9bc23d17-b56c-4361-8038-0a6d2fc55911", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "335_b920df72-1a0d-41da-bf6e-756a8460ea0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "335_17bf5e73-a668-4333-90e2-4ae7830c4c36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n: int) -> int:\n    return n * (n + 1)", "task_id": "335_62e0d211-2e24-4327-a499-968200862d9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n: int) -> int:\n    return n * n", "task_id": "335_db0894c8-d0af-4b82-a3e5-e00b1784f30c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n multiples of k.", "code": "def sum_of_multiples_of_k(n: int, k: int) -> int:\n    return k * n * (n + 1) // 2", "task_id": "335_0a4d9540-3bd2-470e-9c79-13c52617bfdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of a geometric progression with first term a and common ratio r.", "code": "def sum_of_geometric_progression(a: int, r: int, n: int) -> float:\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) / (1 - r)", "task_id": "335_45f912e7-6db5-491f-8799-084727ac6621", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n: int) -> int:\n    from math import factorial\n    return sum(factorial(i) for i in range(1, n + 1))", "task_id": "335_fbe2d06e-55a3-4f13-8114-c5050bcc7a5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    a, b = 0, 1\n    total = a + b\n    for _ in range(2, n):\n        a, b = b, a + b\n        total += b\n    return total", "task_id": "335_706f114a-8b66-44e8-aa54-fba570ca71a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "335_b1c4846a-af14-438f-b81d-ab8615325061", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all divisors of a given number n.", "code": "def sum_of_divisors(n: int) -> int:\n    return sum(i for i in range(1, n + 1) if n % i == 0)", "task_id": "335_8d4da9da-e582-4bc7-a11b-f08753dd02ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False", "task_id": "336_54fbbb42-b126-4ae9-877c-a5031ccaa70a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(number: int) -> bool:\n    return number % 2 == 0", "task_id": "336_249ef447-1776-47f9-9658-763af6e10a86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(number: int) -> bool:\n    if number <= 1:\n        return False\n    for i in range(2, int(number ** 0.5) + 1):\n        if number % i == 0:\n            return False\n    return True", "task_id": "336_20f4c301-3cc7-4ac3-9774-d976834c1dcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given word is a palindrome or not.", "code": "def is_palindrome(word: str) -> bool:\n    return word == word[::-1]", "task_id": "336_8352d437-3e0a-479a-ba9e-02a277b65665", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is positive or not.", "code": "def is_positive(number: int) -> bool:\n    return number > 0", "task_id": "336_e04e58ac-48b2-4d3a-9616-baac4f82daf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(character: str) -> bool:\n    return character.lower() in 'aeiou'", "task_id": "336_1e82f39d-0b0f-4489-979a-ca606ee7607e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is an uppercase letter or not.", "code": "def is_uppercase(character: str) -> bool:\n    return character.isupper()", "task_id": "336_6a67f731-5a4c-4ea2-a29d-70e2a72d84a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 3 or not.", "code": "def is_divisible_by_3(number: int) -> bool:\n    return number % 3 == 0", "task_id": "336_6d3ef45b-12e2-4589-a840-a79d1701286b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given day is a weekend or not.", "code": "def is_weekend(day: str) -> bool:\n    return day.lower() in ['saturday', 'sunday']", "task_id": "336_44fe27c6-9bb5-452a-8240-ad471f4cb231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a consonant or not.", "code": "def is_consonant(character: str) -> bool:\n    return character.isalpha() and character.lower() not in 'aeiou'", "task_id": "336_d9d5b1ea-eabd-4ade-a556-7462f0a32fd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is a right triangle.", "code": "def is_right_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "334_e3986bcb-3105-45cc-9369-4d0173496ce6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an equilateral triangle.", "code": "def is_equilateral_triangle(a, b, c):\n    return a == b == c", "task_id": "334_5ea4e242-05a1-47cd-a1a1-0b5d705e150b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an isosceles triangle.", "code": "def is_isosceles_triangle(a, b, c):\n    return a == b or b == c or a == c", "task_id": "334_1610e778-0c6f-4f9a-a120-69a8334b8589", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to determine the type of triangle (equilateral, isosceles, or scalene) given its sides.", "code": "def triangle_type(a, b, c):\n    if a == b == c:\n        return 'equilateral'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'", "task_id": "334_9c75f970-4758-49c7-892e-ad3317a9bc30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the area of a triangle given its sides using Heron's formula.", "code": "import math\n\ndef triangle_area(a, b, c):\n    s = (a + b + c) / 2\n    return math.sqrt(s * (s - a) * (s - b) * (s - c))", "task_id": "334_2e254d27-f154-49ba-80b6-b39cbfb32e09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the perimeter of a triangle given its sides.", "code": "def triangle_perimeter(a, b, c):\n    return a + b + c", "task_id": "334_89d008ba-3033-4a15-9d6e-9fcbf249826e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an obtuse triangle.", "code": "def is_obtuse_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "334_4524ce21-0fe8-4015-b3ac-8daa8be4a66b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is an acute triangle.", "code": "def is_acute_triangle(a, b, c):\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "334_14d9926c-6ce6-4322-9967-15b39c3754e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a triangle with given sides is a scalene triangle.", "code": "def is_scalene_triangle(a, b, c):\n    return a != b and b != c and a != c", "task_id": "334_c148bf07-a7bf-4bd8-957c-c76ec271e518", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the angles of a triangle given its sides using the Law of Cosines.", "code": "import math\n\ndef triangle_angles(a, b, c):\n    angle_A = math.degrees(math.acos((b**2 + c**2 - a**2) / (2 * b * c)))\n    angle_B = math.degrees(math.acos((a**2 + c**2 - b**2) / (2 * a * c)))\n    angle_C = 180 - angle_A - angle_B\n    return (angle_A, angle_B, angle_C)", "task_id": "334_324d5cfb-7eff-4202-a018-bd7c520f6856", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring element in a list.", "code": "def max_occurring_element(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return count.most_common(1)[0][0]", "task_id": "339_b09dd298-3447-4c02-af0f-d8382fc58730", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "339_bb33a2d4-af12-445a-b9e0-1f75e181bc98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "339_c425659a-0514-4532-a8d1-aabae303fe5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "339_665be3ee-5fdd-479c-a2de-6f4949bfbe46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "339_11f3cfb2-8a0b-4344-accc-f2315f76fb80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "339_d3ae90b3-7bd3-435f-abb1-abcb96929435", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "339_d4916452-0c2b-4ae4-8674-cfad6ae60c8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "339_a23129c1-93c1-4776-84c8-83893dd85e00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "339_38f43d30-80a2-484d-88a4-05208af431ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "339_e16a965e-9e13-4b90-9183-b9e7cae570b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list into an ordered tuple.", "code": "def list_to_tuple(lst):\n    t = tuple(sorted(lst))\n    return t", "task_id": "341_40edea4e-8a51-4c28-acc2-548a5766192c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given set into an ordered list.", "code": "def set_to_list(s):\n    l = sorted(list(s))\n    return l", "task_id": "341_7117f0fe-3d85-4f68-ac7f-f30fdbfde383", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the characters of the given string into an ordered tuple.", "code": "def string_to_tuple(s):\n    t = tuple(sorted(s))\n    return t", "task_id": "341_5657f1c2-6690-483f-8af7-2fac72dbbe63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the keys of the given dictionary into an ordered tuple.", "code": "def dict_keys_to_tuple(d):\n    t = tuple(sorted(d.keys()))\n    return t", "task_id": "341_45ee90f7-6ee7-447f-a9c7-e54c867a0c71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the values of the given dictionary into an ordered tuple.", "code": "def dict_values_to_tuple(d):\n    t = tuple(sorted(d.values()))\n    return t", "task_id": "341_4a65efd2-b3af-4230-8c5a-33e8b6a6df84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a set.", "code": "def list_to_set(lst):\n    s = set(lst)\n    return s", "task_id": "341_c4928573-e375-47a8-97f5-9f8a389b69c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the characters of the given string into an ordered list.", "code": "def string_to_list(s):\n    l = sorted(list(s))\n    return l", "task_id": "341_60490470-062c-4ee7-a08f-2e01bd333e29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple into a set.", "code": "def tuple_to_set(t):\n    s = set(t)\n    return s", "task_id": "341_0849335d-c334-4b90-a34a-f625540dca94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given set into a string of ordered characters.", "code": "def set_to_string(s):\n    st = ''.join(sorted(s))\n    return st", "task_id": "341_7d1cf719-cf04-45c0-a063-5459b3f3523d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a string of ordered characters.", "code": "def list_to_string(lst):\n    st = ''.join(sorted(lst))\n    return st", "task_id": "341_e615b4d2-e416-4aea-a639-1d0f1685e1a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with a vowel.", "code": "def is_vowel(c):\n    return c in 'aeiouAEIOU'\n\ndef count_vowel_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_vowel(s[i]) and is_vowel(s[i+j-1]):\n                result += 1\n    return result", "task_id": "338_1b2cc197-19be-41d3-8c6f-73e5b105091c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic substrings in a given string.", "code": "def is_palindrome(sub):\n    return sub == sub[::-1]\n\ndef count_palindromic_substrings(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_palindrome(s[i:i+j]):\n                result += 1\n    return result", "task_id": "338_b448a4ac-4190-4959-97ae-3a0c13919aa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings with exactly k distinct characters.", "code": "def count_substrings_with_k_distinct_chars(s, k):\n    from collections import defaultdict\n    def at_most_k_distinct(s, k):\n        count = defaultdict(int)\n        left = 0\n        result = 0\n        for right in range(len(s)):\n            count[s[right]] += 1\n            while len(count) > k:\n                count[s[left]] -= 1\n                if count[s[left]] == 0:\n                    del count[s[left]]\n                left += 1\n            result += right - left + 1\n        return result\n    return at_most_k_distinct(s, k) - at_most_k_distinct(s, k-1)", "task_id": "338_50b6814b-3d4d-4133-bf8e-e2ec73911f85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with a consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c not in 'aeiouAEIOU'\n\ndef count_substrings_with_consonant_ends(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if is_consonant(s[i]) and is_consonant(s[i+j-1]):\n                result += 1\n    return result", "task_id": "338_9b418be7-7982-4843-a6ce-fef3db33fb8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where the middle character (if it exists) is the same as the first and last character.", "code": "def count_substrings_with_same_middle(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(3, n-i+1, 2):\n            mid = (j-1)//2\n            if s[i] == s[i+mid] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_8fa76549-7406-417a-b633-98f7e4127854", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings where all characters are distinct.", "code": "def count_substrings_with_distinct_chars(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        seen = set()\n        for j in range(i, n):\n            if s[j] in seen:\n                break\n            seen.add(s[j])\n            result += 1\n    return result", "task_id": "338_93bdddc4-2d56-4b2e-872d-0c9ab0aa856e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain at least one vowel.", "code": "def is_vowel(c):\n    return c in 'aeiouAEIOU'\n\ndef count_substrings_with_at_least_one_vowel(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        has_vowel = False\n        for j in range(i, n):\n            if is_vowel(s[j]):\n                has_vowel = True\n            if has_vowel:\n                result += 1\n    return result", "task_id": "338_a8311bb8-7dc7-46a6-9cb7-f00ea73e2110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that contain at least one consonant.", "code": "def is_consonant(c):\n    return c.isalpha() and c not in 'aeiouAEIOU'\n\ndef count_substrings_with_at_least_one_consonant(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        has_consonant = False\n        for j in range(i, n):\n            if is_consonant(s[j]):\n                has_consonant = True\n            if has_consonant:\n                result += 1\n    return result", "task_id": "338_e237c410-074f-46fa-aea0-21b7b2ca3147", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with the same digit.", "code": "def count_substrings_with_same_first_last_digit(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if s[i].isdigit() and s[i] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_1476bc59-e0f6-413c-ad74-69afb50da306", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of substrings that start and end with the same letter.", "code": "def count_substrings_with_same_first_last_letter(s):\n    result = 0\n    n = len(s)\n    for i in range(n):\n        for j in range(1, n-i+1):\n            if s[i].isalpha() and s[i] == s[i+j-1]:\n                result += 1\n    return result", "task_id": "338_1902c3bf-e39c-4871-8a64-59cc32a76217", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of vowels and consonants in a string.", "code": "def count_vowels_consonants(s):\n    vowels = 'aeiouAEIOU'\n    v = c = 0\n    for char in s:\n        if char.isalpha():\n            if char in vowels:\n                v += 1\n            else:\n                c += 1\n    return (v, c)", "task_id": "343_d1c99469-eaa2-4d48-84ae-0128205b7db3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of uppercase and lowercase letters in a string.", "code": "def count_upper_lower(s):\n    u = l = 0\n    for char in s:\n        if char.isupper():\n            u += 1\n        elif char.islower():\n            l += 1\n    return (u, l)", "task_id": "343_b609d742-ab44-4778-b1aa-ba43944232d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of spaces and punctuation marks in a string.", "code": "import string\n\ndef count_spaces_punctuation(s):\n    spaces = punct = 0\n    for char in s:\n        if char.isspace():\n            spaces += 1\n        elif char in string.punctuation:\n            punct += 1\n    return (spaces, punct)", "task_id": "343_41174470-2bde-43df-885a-c7d6d99528f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of words and sentences in a string.", "code": "def count_words_sentences(s):\n    words = len(s.split())\n    sentences = s.count('.') + s.count('!') + s.count('?')\n    return (words, sentences)", "task_id": "343_d89e5b41-6ba1-47fb-8f14-4b234c0c1e75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of digits and special characters (non-alphanumeric) in a string.", "code": "def count_digits_special(s):\n    digits = special = 0\n    for char in s:\n        if char.isdigit():\n            digits += 1\n        elif not char.isalnum():\n            special += 1\n    return (digits, special)", "task_id": "343_9f2f9678-01aa-4956-8289-090386480155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of alphabetic and numeric characters in a string.", "code": "def count_alpha_numeric(s):\n    alpha = numeric = 0\n    for char in s:\n        if char.isalpha():\n            alpha += 1\n        elif char.isdigit():\n            numeric += 1\n    return (alpha, numeric)", "task_id": "343_e415b3ec-7795-4f36-a3ef-35fe2e4e9731", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of words and characters in a string.", "code": "def count_words_characters(s):\n    words = len(s.split())\n    characters = len(s)\n    return (words, characters)", "task_id": "343_cf3b4a9b-c450-4131-8b6a-6c2867a6202e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of vowels and digits in a string.", "code": "def count_vowels_digits(s):\n    vowels = 'aeiouAEIOU'\n    v = d = 0\n    for char in s:\n        if char in vowels:\n            v += 1\n        elif char.isdigit():\n            d += 1\n    return (v, d)", "task_id": "343_40707509-0fc1-4fee-82af-0680b7b50af6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of consonants and spaces in a string.", "code": "def count_consonants_spaces(s):\n    vowels = 'aeiouAEIOU'\n    c = spaces = 0\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            c += 1\n        elif char.isspace():\n            spaces += 1\n    return (c, spaces)", "task_id": "343_c77127d5-217f-4dd8-ae69-8c5d7d8ce11e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of uppercase letters and digits in a string.", "code": "def count_upper_digits(s):\n    u = d = 0\n    for char in s:\n        if char.isupper():\n            u += 1\n        elif char.isdigit():\n            d += 1\n    return (u, d)", "task_id": "343_ee0d9e13-e81c-46df-9c1b-f3c3667c164d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements that appear in all the given arrays.", "code": "def find_common_elements(arrays):\n    if not arrays:\n        return []\n    common_elements = set(arrays[0])\n    for array in arrays[1:]:\n        common_elements.intersection_update(array)\n    return sorted(list(common_elements))", "task_id": "342_76116cf1-f255-4d2b-aab3-72bc265b02bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted arrays into a single sorted array.", "code": "from heapq import heappop, heappush\n\ndef merge_sorted_arrays(arrays):\n    min_heap = []\n    for i, array in enumerate(arrays):\n        if array:\n            heappush(min_heap, (array[0], i, 0))\n    result = []\n    while min_heap:\n        value, list_num, index = heappop(min_heap)\n        result.append(value)\n        if index + 1 < len(arrays[list_num]):\n            heappush(min_heap, (arrays[list_num][index + 1], list_num, index + 1))\n    return result", "task_id": "342_25acef12-e954-4dd4-a546-1830c8b97273", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest range that includes at-least one element from each of the given arrays.", "code": "from heapq import heappop, heappush\nclass Node:\n    def __init__(self, value, list_num, index):\n        self.value = value\n        self.list_num = list_num\n        self.index = index\n    def __lt__(self, other):\n        return self.value < other.value\n\ndef find_largest_range(arrays):\n    low = float('inf')\n    p = (float('-inf'), float('inf'))\n    pq = []\n    for i in range(len(arrays)):\n        heappush(pq, Node(arrays[i][0], i, 0))\n        low = min(low, arrays[i][0])\n    while True:\n        top = heappop(pq)\n        high = top.value\n        i = top.list_num\n        j = top.index\n        if high - low > p[1] - p[0]:\n            p = (low, high)\n        if j == len(arrays[i]) - 1:\n            return p\n        heappush(pq, Node(arrays[i][j + 1], i, j + 1))\n        low = min(low, arrays[i][j + 1])", "task_id": "342_ba74dbcc-f646-4bfc-9f91-03a025f10be7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element among all the elements in the given arrays.", "code": "from heapq import heappop, heappush\n\ndef find_kth_smallest_element(arrays, k):\n    min_heap = []\n    for i, array in enumerate(arrays):\n        if array:\n            heappush(min_heap, (array[0], i, 0))\n    count = 0\n    while min_heap:\n        value, list_num, index = heappop(min_heap)\n        count += 1\n        if count == k:\n            return value\n        if index + 1 < len(arrays[list_num]):\n            heappush(min_heap, (arrays[list_num][index + 1], list_num, index + 1))", "task_id": "342_f696cd6d-318c-4712-868f-fc7e8d61344e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element among all the elements in the given arrays.", "code": "from heapq import heappop, heappush\n\ndef find_kth_largest_element(arrays, k):\n    max_heap = []\n    for i, array in enumerate(arrays):\n        for num in array:\n            heappush(max_heap, -num)\n    count = 0\n    while max_heap:\n        value = -heappop(max_heap)\n        count += 1\n        if count == k:\n            return value", "task_id": "342_bf03a178-2e8a-4611-8146-af6b0e740b5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of all the elements in the given arrays.", "code": "def find_median_of_arrays(arrays):\n    all_elements = []\n    for array in arrays:\n        all_elements.extend(array)\n    all_elements.sort()\n    n = len(all_elements)\n    if n % 2 == 1:\n        return float(all_elements[n // 2])\n    else:\n        return (all_elements[n // 2 - 1] + all_elements[n // 2]) / 2", "task_id": "342_e4d5f942-8902-4397-8117-f28a65da1982", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements across the given arrays.", "code": "def find_unique_elements(arrays):\n    unique_elements = set()\n    for array in arrays:\n        unique_elements.update(array)\n    return sorted(list(unique_elements))", "task_id": "342_ca7b5076-6eaf-4f34-89af-1425f094aad0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of all the given arrays.", "code": "def find_intersection_of_arrays(arrays):\n    if not arrays:\n        return []\n    intersection = set(arrays[0])\n    for array in arrays[1:]:\n        intersection.intersection_update(array)\n    return sorted(list(intersection))", "task_id": "342_f63a4da6-30fd-4374-9f86-9439da8d761f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the union of all the given arrays.", "code": "def find_union_of_arrays(arrays):\n    union = set()\n    for array in arrays:\n        union.update(array)\n    return sorted(list(union))", "task_id": "342_53ad3e4b-9fa9-45ba-8a5f-efeac932a5a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of any subarray from the given arrays.", "code": "def find_max_sum_subarray(arrays):\n    def max_subarray_sum(array):\n        max_sum = float('-inf')\n        current_sum = 0\n        for num in array:\n            current_sum = max(num, current_sum + num)\n            max_sum = max(max_sum, current_sum)\n        return max_sum\n    return max(max_subarray_sum(array) for array in arrays)", "task_id": "342_c98a7387-07a8-414c-ae88-b3d9d910d25c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all integers in a given range [n, m].", "code": "def sum_of_squares(n, m):\n    return sum(i**2 for i in range(n, m+1))", "task_id": "344_980115ba-44ec-4219-9648-8cd4a14976b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime numbers in a given range [n, m].", "code": "def count_primes(n, m):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return sum(1 for i in range(n, m+1) if is_prime(i))", "task_id": "344_501844f3-6008-4104-8445-6c8a1869e670", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of all integers in a given range [n, m].", "code": "def sum_of_cubes(n, m):\n    return sum(i**3 for i in range(n, m+1))", "task_id": "344_b7c4d1d8-d4fe-44cd-9703-3a85007bbfd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given range [n, m].", "code": "def count_even_numbers(n, m):\n    return sum(1 for i in range(n, m+1) if i % 2 == 0)", "task_id": "344_c8755fa7-107b-471e-b0f4-06adfa043bd9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits of all integers in a given range [n, m].", "code": "def sum_of_digits(n, m):\n    return sum(sum(int(digit) for digit in str(i)) for i in range(n, m+1))", "task_id": "344_761cdc61-aea7-43e7-b8c0-4413ff92178f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all integers in a given range [n, m].", "code": "def product_of_range(n, m):\n    product = 1\n    for i in range(n, m+1):\n        product *= i\n    return product", "task_id": "344_36d6cb2c-d3d8-4aa2-8895-463eed8fd0b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic numbers in a given range [n, m].", "code": "def count_palindromes(n, m):\n    return sum(1 for i in range(n, m+1) if str(i) == str(i)[::-1])", "task_id": "344_0d27dc9c-2a58-48c4-b5ec-a44aafc4137f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd numbers in a given range [n, m].", "code": "def sum_of_odd_numbers(n, m):\n    return sum(i for i in range(n, m+1) if i % 2 != 0)", "task_id": "344_4d8f36d0-ce22-4fc4-84ca-9e8f0fd83f6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers in a given range [n, m] that are divisible by a given number k.", "code": "def count_divisors(n, m, k):\n    return sum(1 for i in range(n, m+1) if i % k == 0)", "task_id": "344_9de9503d-190b-4865-b215-e61d9deeb65d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of all integers in a given range [n, m].", "code": "import math\n\ndef sum_of_factorials(n, m):\n    return sum(math.factorial(i) for i in range(n, m+1))", "task_id": "344_73db4a78-4170-424a-aaba-3edbfd120ee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of two consecutive numbers in a given list.", "code": "def sum_consecutivenums(nums):\n    result = [a+b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_288e92d5-0902-4adf-a507-ce8f93fd2bf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of two consecutive numbers in a given list.", "code": "def product_consecutivenums(nums):\n    result = [a*b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_b0bce593-3211-495d-8dd9-bf9dff9b972a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two consecutive numbers in a given list.", "code": "def max_consecutivenums(nums):\n    result = [max(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_5df57b3f-4278-41bb-bbfb-f665ac7e09ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two consecutive numbers in a given list.", "code": "def min_consecutivenums(nums):\n    result = [min(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_e150a79d-14c8-446d-b1ed-13f28f9927f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of two consecutive numbers in a given list.", "code": "def avg_consecutivenums(nums):\n    result = [(a+b)/2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_c71d0a29-b91e-4753-838e-034dc932642e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between two consecutive numbers in a given list.", "code": "def diff_abs_consecutivenums(nums):\n    result = [abs(b-a) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_9eeec650-3596-4a76-a2a5-98e7d1b69f84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the square of the difference between two consecutive numbers in a given list.", "code": "def square_diff_consecutivenums(nums):\n    result = [(b-a)**2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_64ecbb36-0a3a-4be1-ae36-eb2cd6bdd657", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two consecutive numbers in a given list as strings.", "code": "def concat_consecutivenums(nums):\n    result = [str(a) + str(b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "345_70e4a955-abbf-4cb1-b2e1-6197225a2109", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference between two consecutive numbers in a given list and return the differences along with their indices.", "code": "def diff_consecutivenums_with_index(nums):\n    result = [(i, b-a) for i, (a, b) in enumerate(zip(nums[:-1], nums[1:]))]\n    return result", "task_id": "345_79f8955a-d4ab-4244-bddd-88ead7bcf140", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of two consecutive even numbers in a given list.", "code": "def sum_even_consecutivenums(nums):\n    result = [a+b for a, b in zip(nums[:-1], nums[1:]) if a % 2 == 0 and b % 2 == 0]\n    return result", "task_id": "345_747b1e9e-6df6-4526-ab68-073761d7c526", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two largest positive numbers from a given list of numbers.", "code": "def sum_two_largest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0], reverse=True)[:2])", "task_id": "340_8231c81e-159b-497f-ae66-009c97133291", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the three lowest positive numbers from a given list of numbers.", "code": "def product_three_smallest_nums(lst):\n\tfrom functools import reduce\n\treturn reduce(lambda x, y: x * y, sorted([x for x in lst if x > 0])[:3])", "task_id": "340_d5e6412a-56ba-4d23-a38b-0dd442162f73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three largest negative numbers from a given list of numbers.", "code": "def sum_three_largest_negative_nums(lst):\n\treturn sum(sorted([x for x in lst if x < 0], reverse=True)[:3])", "task_id": "340_04b60087-2dc4-4db9-aa0d-2c856234327e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two lowest positive numbers from a given list of numbers.", "code": "def sum_two_smallest_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:2])", "task_id": "340_1135139d-7e53-4013-8d79-25fe4221ee81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive even numbers from a given list of numbers.", "code": "def sum_three_smallest_even_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0 and x % 2 == 0])[:3])", "task_id": "340_ab0aa6c9-d6c5-4b85-b28c-65e0586de959", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive odd numbers from a given list of numbers.", "code": "def sum_three_smallest_odd_nums(lst):\n\treturn sum(sorted([x for x in lst if x > 0 and x % 2 != 0])[:3])", "task_id": "340_4edb3c75-c037-4a9d-a7e4-d488b7bfdddc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest unique positive numbers from a given list of numbers.", "code": "def sum_three_smallest_unique_nums(lst):\n\treturn sum(sorted(set([x for x in lst if x > 0]))[:3])", "task_id": "340_14db4fe8-4e76-4b5e-9a33-a82e5c352285", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers, including duplicates.", "code": "def sum_three_smallest_nums_with_duplicates(lst):\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "task_id": "340_7a89afa7-dd97-492d-b4de-108db43a9f4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers, excluding numbers present in another list.", "code": "def sum_three_smallest_nums_excluding(lst, exclude):\n\treturn sum(sorted([x for x in lst if x > 0 and x not in exclude])[:3])", "task_id": "340_bcf3f9c0-c9e1-4488-9733-0dc5d7d05d44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers that fall within a specified range.", "code": "def sum_three_smallest_nums_in_range(lst, low, high):\n\treturn sum(sorted([x for x in lst if low <= x <= high])[:3])", "task_id": "340_2207cea5-13f5-4cd8-a017-71dd31b58b77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "346_261c1819-b7c8-47cc-94f5-ae28d202167c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "346_759ea22c-9dbd-441c-b386-06cda1ace3c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the value at the nth row and kth column of Pascal's triangle.", "code": "def pascal_triangle(n: int, k: int) -> int:\n    if k == 0 or k == n:\n        return 1\n    return pascal_triangle(n-1, k-1) + pascal_triangle(n-1, k)", "task_id": "346_3995687d-05eb-43e3-b41c-7b3da933ae4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)", "task_id": "346_b0e58f2e-fa2a-40d5-8ae1-980df86863e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return abs(a*b) // gcd(a, b)", "task_id": "346_293174f4-2003-49d3-8cfa-93e7d274e5db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a number n.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digits(n // 10)", "task_id": "346_c33cbafd-495c-44d6-ab79-f07c173bf69b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find x raised to the power n.", "code": "def power(x: int, n: int) -> int:\n    if n == 0:\n        return 1\n    return x * power(x, n-1)", "task_id": "346_fd72aa86-6d7b-4844-9510-f99e284ce475", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    return reverse_string(s[1:]) + s[0]", "task_id": "346_d6d52341-b4ea-4e55-afe0-fb613d070b97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])", "task_id": "346_22cdb594-d15a-447d-a1dc-0a7467702ace", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to climb a staircase with n steps, taking 1 or 2 steps at a time.", "code": "def count_ways(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    return count_ways(n-1) + count_ways(n-2)", "task_id": "346_3b429306-404b-4578-aa5f-7e3ff4553e68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with odd side lengths in a rectangle.", "code": "def count_odd_squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1, 2):\n        count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_07dbe09e-5fcf-47bc-ace9-9f411954de8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle.", "code": "def count_rectangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 4", "task_id": "347_d51e91f5-ebf8-42e0-848c-49dc2f0ac4c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a rectangle where the squares' diagonals are also considered.", "code": "def count_squares_with_diagonal(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_ed042159-4152-4448-897a-cee856e59203", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with even side lengths in a rectangle.", "code": "def count_even_squares(m, n):\n    count = 0\n    for i in range(2, min(m, n) + 1, 2):\n        count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_dc3dfa60-8992-4ee6-a915-3a30ee68c726", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of L-shaped tiles that can fit in a rectangle.", "code": "def count_l_shapes(m, n):\n    return (m - 1) * (n - 1) * 2", "task_id": "347_66108ec2-f424-45e2-a426-db75251f57db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles that can fit in a rectangle.", "code": "def count_triangles(m, n):\n    return m * n * (m + 1) * (n + 1) // 4", "task_id": "347_02157079-5d7f-4a8e-a20d-82d2d0f40372", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle where the rectangles' diagonals are also considered.", "code": "def count_diagonal_rectangles(m, n):\n    return (m * (m + 1) * n * (n + 1)) // 4", "task_id": "347_79e10d5d-d553-4f95-8175-9fbab23ac11f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of perfect squares in a rectangle.", "code": "def count_perfect_squares(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if int(i**0.5)**2 == i:\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_203be02d-9a4b-4525-9e6e-fde1ec5376db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with prime side lengths in a rectangle.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_squares_with_prime_sides(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if is_prime(i):\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_bcaca0e4-7dcd-4a6d-86c4-79c4e7923e1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares with Fibonacci side lengths in a rectangle.", "code": "def is_fibonacci(num):\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a + b\n    return b == num\n\ndef count_squares_with_fibonacci_sides(m, n):\n    count = 0\n    for i in range(1, min(m, n) + 1):\n        if is_fibonacci(i):\n            count += (m - i + 1) * (n - i + 1)\n    return count", "task_id": "347_90d3ebb1-a980-4c59-aad8-dacf2f5aa052", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a hexadecimal string or not.", "code": "def is_hexadecimal_string(s: str) -> str:\n    hex_digits = set('0123456789abcdefABCDEF')\n    for char in s:\n        if char not in hex_digits:\n            return 'No'\n    return 'Yes'", "task_id": "349_12cc971c-2419-4618-9be6-41ba68ecdf6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is an octal string or not.", "code": "def is_octal_string(s: str) -> str:\n    octal_digits = set('01234567')\n    for char in s:\n        if char not in octal_digits:\n            return 'No'\n    return 'Yes'", "task_id": "349_cb4b8bd9-3080-4882-9343-4e2b23df8639", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_1e6e3318-800f-40ed-ab65-e1bd6d32d9d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all uppercase letters or not.", "code": "def is_all_uppercase(s: str) -> str:\n    if s.isupper():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_0c61ab0f-a255-4a64-9f32-9e6c5956f89b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all lowercase letters or not.", "code": "def is_all_lowercase(s: str) -> str:\n    if s.islower():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_5d2f27d2-228c-4047-92fd-851648ae5f40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only digits or not.", "code": "def is_digit_string(s: str) -> str:\n    if s.isdigit():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_025fa255-1163-4198-ba64-593ab89e4de0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only alphabetic characters or not.", "code": "def is_alpha_string(s: str) -> str:\n    if s.isalpha():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_5659403c-c560-410d-b593-7d6fa8f42f8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains only alphanumeric characters or not.", "code": "def is_alphanumeric_string(s: str) -> str:\n    if s.isalnum():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_73ec1aec-1c24-42db-b60a-d26fa5cef26c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains any space characters or not.", "code": "def contains_space(s: str) -> str:\n    if ' ' in s:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "349_ffd78602-1408-402d-93eb-cb5012cd0529", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string contains any vowels or not.", "code": "def contains_vowel(s: str) -> str:\n    vowels = set('aeiouAEIOU')\n    for char in s:\n        if char in vowels:\n            return 'Yes'\n    return 'No'", "task_id": "349_4987c727-f309-4767-936d-5cc7dcc47859", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of the character that appears the most in the string.", "code": "def remove_max_occurrence_char(s: str) -> str:\n    from collections import Counter\n    counter = Counter(s)\n    max_occ_char = max(counter, key=counter.get)\n    return s.replace(max_occ_char, '')", "task_id": "350_422f1e3a-c4d3-440a-97a8-efe4f05b91d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first occurrence of each character in the string.", "code": "def remove_first_occurrence_char(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n        else:\n            result.append(char)\n    return ''.join(result)", "task_id": "350_9cf3e9d3-4894-478a-aa97-2d78e2995515", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the last occurrence of each character in the string.", "code": "def remove_last_occurrence_char(s: str) -> str:\n    seen = set()\n    result = []\n    for char in reversed(s):\n        if char not in seen:\n            seen.add(char)\n        else:\n            result.append(char)\n    return ''.join(reversed(result))", "task_id": "350_d10d2ef3-27c7-4a6b-a317-c4dff4276aa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from the string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "350_586f45c4-eac9-4e46-a82c-ec01de262676", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from the string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char in vowels])", "task_id": "350_1d070a14-c04e-4be5-a3b7-ed5557c7b717", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove every other character from the string.", "code": "def remove_every_other_char(s: str) -> str:\n    return s[::2]", "task_id": "350_9859ec2e-36ea-46e1-8af7-b4b1bc186b40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate characters from the string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "350_6a1d9f13-c683-4197-b8bd-a1b8401678e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the character at the given index from the string.", "code": "def remove_char_at_index(s: str, index: int) -> str:\n    return s[:index] + s[index+1:]", "task_id": "350_15a6b853-7f18-4925-b971-bedee1082937", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given character from the string.", "code": "def remove_char_occurrences(s: str, char: str) -> str:\n    return s.replace(char, '')", "task_id": "350_170060f0-6ec4-4ad9-8d33-5d6e421f5c13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all characters that are present in a given set from the string.", "code": "def remove_chars_in_set(s: str, chars: set) -> str:\n    return ''.join([char for char in s if char not in chars])", "task_id": "350_46390f7a-9ca2-4cf2-955a-f493458b4a74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from 0 to k.", "code": "def count_sequences(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_4a41164e-813a-4e2a-8622-3040f3d10a43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by given values in the list.", "code": "def count_non_negative_sequences(n: int, values: list) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in values:\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_f523bd0c-18b8-43f6-b23d-aa8d1e85a4eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having positive prefix sums that can be generated by values from 1 to k.", "code": "def count_positive_sequences(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(1, k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_b18fd095-c2c5-42df-acb8-5b2d4ede7d66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having a prefix sum equal to target_sum that can be generated by values from 0 to k.", "code": "def count_sequences_with_sum(n: int, k: int, target_sum: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        if i * n == target_sum:\n            total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_02bc3598-55b8-440c-9810-1504d1e84df8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from 0 to k, with each value not exceeding max_value.", "code": "def count_sequences_with_max_value(n: int, k: int, max_value: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(min(k, max_value) + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_7251822d-f451-41bc-afe1-982f5cc8b7cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by values from min_value to k.", "code": "def count_sequences_with_min_value(n: int, k: int, min_value: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(min_value, k + 1):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_54809b4a-5936-40f2-b868-fbd91a00d700", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having an exact sum equal to exact_sum that can be generated by values from 0 to k.", "code": "def count_sequences_with_exact_sum(n: int, k: int, exact_sum: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(k + 1):\n        if i * n == exact_sum:\n            total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_0050473f-b7ad-43a9-a7ee-7845df28b279", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by distinct values in the list.", "code": "def count_sequences_with_distinct_values(n: int, values: list) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in values:\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_6c346903-3f11-45ce-b385-3d6f314d7829", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by even values from 0 to k.", "code": "def count_sequences_with_even_values(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(0, k + 1, 2):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_f5d06b20-bf7e-4d19-aa8c-b23dd4efe1bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count sequences of length n having non-negative prefix sums that can be generated by odd values from 1 to k.", "code": "def count_sequences_with_odd_values(n: int, k: int) -> int:\n    def bin_coff(n, r):\n        val = 1\n        if (r > (n - r)):\n            r = (n - r)\n        for i in range(0, r):\n            val *= (n - i)\n            val //= (i + 1)\n        return val\n    total = 0\n    for i in range(1, k + 1, 2):\n        total += bin_coff(n + i - 1, i)\n    return total", "task_id": "348_9309a292-33c1-41b3-bfc1-350954caa46f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring more than k times in a given array.", "code": "def first_element_greater_than_k(arr, n, k):\n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n    for i in range(n):\n        if count_map[arr[i]] > k:\n            return arr[i]\n    return -1", "task_id": "351_8924533c-21ef-447e-8d28-f0be7c4ea390", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring less than k times in a given array.", "code": "def first_element_less_than_k(arr, n, k):\n    count_map = {}\n    for i in range(n):\n        if arr[i] in count_map:\n            count_map[arr[i]] += 1\n        else:\n            count_map[arr[i]] = 1\n    for i in range(n):\n        if count_map[arr[i]] < k:\n            return arr[i]\n    return -1", "task_id": "351_e2892c65-0412-4320-bb6d-a47900a1d09b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring exactly k times in a given array.", "code": "def first_element_exactly_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k:\n            return elem\n    return -1", "task_id": "351_706bec1a-9bfb-4009-b109-4116edb7b5a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element that does not occur k times in a given array.", "code": "def first_element_not_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] != k:\n            return elem\n    return -1", "task_id": "351_e953ccab-6fe3-483a-b07e-ffba50d13dec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring at least k times in a given array.", "code": "def first_element_at_least_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] >= k:\n            return elem\n    return -1", "task_id": "351_1c5b5b4b-b822-48d3-abfe-6b6a68ed08de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring at most k times in a given array.", "code": "def first_element_at_most_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] <= k:\n            return elem\n    return -1", "task_id": "351_faf0d5ab-6e3b-406a-af24-25faf0b94500", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring not less than k times in a given array.", "code": "def first_element_not_less_than_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] >= k:\n            return elem\n    return -1", "task_id": "351_e20a819f-4473-4752-816c-488f5fb52d49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring not more than k times in a given array.", "code": "def first_element_not_greater_than_k_times(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] <= k:\n            return elem\n    return -1", "task_id": "351_fe073b79-a894-4b43-9d32-e61d6d4b4ca9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring k times and is an odd number in a given array.", "code": "def first_element_occurs_k_times_and_odd(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k and elem % 2 != 0:\n            return elem\n    return -1", "task_id": "351_2f0b900e-fbb8-45a3-99c8-3ab7fa981382", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first element occurring k times and is an even number in a given array.", "code": "def first_element_occurs_k_times_and_even(arr, k):\n    count_map = {}\n    for elem in arr:\n        if elem in count_map:\n            count_map[elem] += 1\n        else:\n            count_map[elem] = 1\n    for elem in arr:\n        if count_map[elem] == k and elem % 2 == 0:\n            return elem\n    return -1", "task_id": "351_0574112d-218f-4822-b390-f07efe10d0c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove a specified row from a given nested list.", "code": "def remove_row(matrix, row_index):\n    del matrix[row_index]\n    return matrix", "task_id": "353_e6e4988e-502d-4f09-a8ef-100c654ca57d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace a specified column in a given nested list with a new column.", "code": "def replace_column(matrix, col_index, new_col):\n    for i in range(len(matrix)):\n        matrix[i][col_index] = new_col[i]\n    return matrix", "task_id": "353_94d5af7d-1065-42c6-812f-3f59ecefb2f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to transpose a given nested list (matrix).", "code": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]", "task_id": "353_3008cf3c-08ca-49ee-ab19-5603486dc11c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a new column to a given nested list.", "code": "def add_column(matrix, new_col):\n    for i in range(len(matrix)):\n        matrix[i].append(new_col[i])\n    return matrix", "task_id": "353_37d4332f-5eb4-482c-bf5e-fff1aaeb7cea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a new row to a given nested list.", "code": "def add_row(matrix, new_row):\n    matrix.append(new_row)\n    return matrix", "task_id": "353_58d51c46-d383-47ad-b7fe-d091edf5fa25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove an element from a specified position in a given nested list.", "code": "def remove_element(matrix, row_index, col_index):\n    del matrix[row_index][col_index]\n    return matrix", "task_id": "353_d2657898-021d-4130-b49a-ce11a42e60a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace an element at a specified position in a given nested list with a new value.", "code": "def replace_element(matrix, row_index, col_index, new_value):\n    matrix[row_index][col_index] = new_value\n    return matrix", "task_id": "353_31335d94-efea-4cb4-a5d7-646ef0823155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list containing the sum of each column in a given nested list.", "code": "def sum_columns(matrix):\n    return [sum(col) for col in zip(*matrix)]", "task_id": "353_bb3553cd-df9e-4616-9942-0cd36a21b7ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list containing the sum of each row in a given nested list.", "code": "def sum_rows(matrix):\n    return [sum(row) for row in matrix]", "task_id": "353_a6cbc426-1d6b-4344-bcba-2574cc6d26f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list into a single list.", "code": "def flatten_matrix(matrix):\n    return [element for row in matrix for element in row]", "task_id": "353_530dfff8-f558-4d34-a573-559d4a9d66d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case.", "code": "def unique_Characters_ignore_case(s: str) -> bool:\n    s = s.lower()\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_d64110b5-0547-410f-8706-ca53632af3ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, considering spaces as characters.", "code": "def unique_Characters_with_spaces(s: str) -> bool:\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_05e9b4ad-6d63-4d13-9aac-d73ba91b6a6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring spaces.", "code": "def unique_Characters_ignore_spaces(s: str) -> bool:\n    s = s.replace(' ', '')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e5cce4a7-30b5-4315-b95c-d9f28b4c59f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring punctuation.", "code": "import string\n\ndef unique_Characters_ignore_punctuation(s: str) -> bool:\n    s = ''.join([c for c in s if c not in string.punctuation])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_4b385407-aabe-476c-aeed-ec8af5068316", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring digits.", "code": "def unique_Characters_ignore_digits(s: str) -> bool:\n    s = ''.join([c for c in s if not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_5a23c96b-a8c0-4cf1-99ae-3ae12d1c2ad0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, considering digits as characters.", "code": "def unique_Characters_with_digits(s: str) -> bool:\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e7ea5be0-592e-4f49-8d3d-7947e313e069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and spaces.", "code": "def unique_Characters_ignore_case_and_spaces(s: str) -> bool:\n    s = s.lower().replace(' ', '')\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_6d108aeb-3114-425d-ac87-2762d62fb70d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_1cc6eaf4-a0a3-41b0-ab43-d4a8b8b73bfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case and digits.", "code": "def unique_Characters_ignore_case_and_digits(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_f076235a-c4c5-4d0b-acdd-7bf27b764a73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case, spaces, and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_spaces_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation and c != ' '])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_142e96e1-410c-4bf1-9edd-aaace06008a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a given string are unique, ignoring case, spaces, digits, and punctuation.", "code": "import string\n\ndef unique_Characters_ignore_case_spaces_digits_and_punctuation(s: str) -> bool:\n    s = ''.join([c.lower() for c in s if c not in string.punctuation and c != ' ' and not c.isdigit()])\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                return False\n    return True", "task_id": "352_e8d30140-edb3-4a17-93b8-aa4ce4a7ccb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of an arithmetic progression.", "code": "def sum_of_ap(a: int, n: int, d: int) -> int:\n    return n * (2 * a + (n - 1) * d) // 2", "task_id": "354_8191e98b-7e55-410b-8ad3-579c783297a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th term of a geometric progression.", "code": "def nth_term_gp(a: int, r: int, n: int) -> int:\n    return a * (r ** (n - 1))", "task_id": "354_727cac81-7170-4b2b-97d9-566dc73d014f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of a geometric progression.", "code": "def sum_of_gp(a: int, r: int, n: int) -> int:\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) // (1 - r)", "task_id": "354_5c45f7bc-9893-4fa7-9cba-8302fff92569", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th term of the Fibonacci sequence.", "code": "def nth_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "354_4081bd62-7b73-4501-a2c2-6507a22e4d73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n terms of the Fibonacci sequence.", "code": "def sum_of_fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        sum_fib = 1\n        for _ in range(2, n):\n            a, b = b, a + b\n            sum_fib += b\n        return sum_fib", "task_id": "354_876d6bbf-1dc6-424f-9b09-f216357a63b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th triangular number.", "code": "def nth_triangular_number(n: int) -> int:\n    return n * (n + 1) // 2", "task_id": "354_9774289c-2d01-4b89-b3be-d85440bb5810", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n triangular numbers.", "code": "def sum_of_triangular_numbers(n: int) -> int:\n    return n * (n + 1) * (n + 2) // 6", "task_id": "354_c89bc3f7-f1c9-4c4d-86bc-58555c7f452a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th square number.", "code": "def nth_square_number(n: int) -> int:\n    return n * n", "task_id": "354_05f6dd15-7139-49fb-b800-04f62c33cd7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n square numbers.", "code": "def sum_of_square_numbers(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "354_9ad999db-6af1-4d4d-a02a-be55d146e793", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th cube number.", "code": "def nth_cube_number(n: int) -> int:\n    return n * n * n", "task_id": "354_c4355918-d1fe-4666-ad4d-ef8a11d358dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle in degrees, write a function to find the missing third angle.", "code": "def find_missing_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_b0b48ddd-539e-4717-8b39-1e6023e4928c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to calculate the remaining angle.", "code": "def find_remaining_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_72a11fff-8042-4288-afd5-89bdf0b6e8a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two angles of a triangle and returns the third angle.", "code": "def calculate_third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_3c224a47-5649-4278-90d0-be318b84b7cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to determine the third angle.", "code": "def third_triangle_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_4617278d-82b9-4210-ab6a-b7d857055b30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last angle of a triangle given the other two angles.", "code": "def find_last_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_59af22f6-9c71-49ec-a7c8-d0f925829715", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the missing angle.", "code": "def missing_triangle_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_45c8521c-22a5-492c-b335-7f53e1bef09d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the missing angle of a triangle given the other two angles.", "code": "def calculate_missing_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_7b586e86-f0b4-44ad-8af3-1f5a1405c887", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the third angle.", "code": "def find_third_triangle_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_a924eee2-d0e4-4a38-ae02-df81f2f1a985", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the third angle of a triangle given the other two angles.", "code": "def get_third_angle(angle1, angle2):\n    return 180 - (angle1 + angle2)", "task_id": "356_e627a73d-46cd-4f1c-a230-5f81007007df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Given two angles of a triangle, write a function to find the remaining angle.", "code": "def remaining_triangle_angle(a, b):\n    return 180 - (a + b)", "task_id": "356_78d74dc0-65be-4c88-8604-e69074806428", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a circle of radius r.", "code": "def count_Squares(radius):\n    squares = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            if a == b:\n                diagnalLengthSquare = (a * a + b * b)\n                if diagnalLengthSquare <= diameterSquare:\n                    squares += 1\n    return squares", "task_id": "355_09f65505-0838-4d33-9a5a-82c0fa156623", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles in a circle of radius r.", "code": "def count_Triangles(radius):\n    triangles = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            diagnalLengthSquare = (a * a + b * b)\n            if diagnalLengthSquare <= diameterSquare:\n                triangles += 1\n    return triangles", "task_id": "355_42e56a05-9a84-467c-929e-3d05b8d939ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a square of side length s.", "code": "def count_Rectangles_in_Square(side):\n    rectangles = 0\n    for a in range(1, side + 1):\n        for b in range(1, side + 1):\n            rectangles += (side - a + 1) * (side - b + 1)\n    return rectangles", "task_id": "355_5fd3ff6d-32a8-4731-b519-0cd5b3231c92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a rectangle of length l and width w.", "code": "def count_Squares_in_Rectangle(length, width):\n    squares = 0\n    for a in range(1, min(length, width) + 1):\n        squares += (length - a + 1) * (width - a + 1)\n    return squares", "task_id": "355_82acecf4-0627-4fbb-8802-81152331f448", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of circles of radius r that can fit inside a rectangle of length l and width w.", "code": "def count_Circles_in_Rectangle(length, width, radius):\n    diameter = 2 * radius\n    circles_in_length = length // diameter\n    circles_in_width = width // diameter\n    return circles_in_length * circles_in_width", "task_id": "355_73dacd8b-83a1-4880-96bc-bf5d10c890f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of circles of radius r that can fit inside a square of side length s.", "code": "def count_Circles_in_Square(side, radius):\n    diameter = 2 * radius\n    circles_in_side = side // diameter\n    return circles_in_side * circles_in_side", "task_id": "355_e204731d-00ec-481d-891c-127acae63e05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles in a rectangle of length l and width w.", "code": "def count_Rectangles_in_Rectangle(length, width):\n    rectangles = 0\n    for a in range(1, length + 1):\n        for b in range(1, width + 1):\n            rectangles += (length - a + 1) * (width - b + 1)\n    return rectangles", "task_id": "355_90cf5874-8810-4d89-94c0-ab5558be1e0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles in a square of side length s.", "code": "def count_Triangles_in_Square(side):\n    triangles = 0\n    for a in range(1, side + 1):\n        for b in range(1, side + 1):\n            if a == b:\n                triangles += (side - a + 1) * (side - b + 1)\n    return triangles", "task_id": "355_4ca03b7e-5b53-4f62-aa80-c677d8cc2ad9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares in a circle of radius r.", "code": "def count_Squares_in_Circle(radius):\n    squares = 0\n    diameter = 2 * radius\n    diameterSquare = diameter * diameter\n    for a in range(1, 2 * radius):\n        for b in range(1, 2 * radius):\n            if a == b:\n                diagnalLengthSquare = (a * a + b * b)\n                if diagnalLengthSquare <= diameterSquare:\n                    squares += 1\n    return squares", "task_id": "355_bf569b27-d2e4-47c9-9f48-635e99e19ce7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of right-angled triangles in a rectangle of length l and width w.", "code": "def count_Triangles_in_Rectangle(length, width):\n    triangles = 0\n    for a in range(1, length + 1):\n        for b in range(1, width + 1):\n            if a == b:\n                triangles += (length - a + 1) * (width - b + 1)\n    return triangles", "task_id": "355_97476e4b-fd1e-4697-be5b-4d493643b76f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in the given list of tuples.", "code": "def sum_of_tuples(tuples):\n    return sum(sum(t) for t in tuples)", "task_id": "357_9a00ee14-ccb4-4bbb-aa54-1075a868946b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element of all the given tuple records.", "code": "def min_of_tuples(tuples):\n    return min(min(t) for t in tuples)", "task_id": "357_08d13aac-b108-4c8b-95ff-89d3f5968d00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the mean of all elements in the given list of tuples.", "code": "def mean_of_tuples(tuples):\n    total_elements = sum(len(t) for t in tuples)\n    total_sum = sum(sum(t) for t in tuples)\n    return total_sum / total_elements", "task_id": "357_20094aa8-245e-4e83-9b30-428ae203a9f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element of each tuple in the given list of tuples.", "code": "def max_of_each_tuple(tuples):\n    return [max(t) for t in tuples]", "task_id": "357_84910120-d18f-4aa5-9ad8-bc543b67b738", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of elements of each tuple in the given list of tuples.", "code": "def sum_of_each_tuple(tuples):\n    return [sum(t) for t in tuples]", "task_id": "357_c81f15f3-3c07-4d39-8d55-fb6701210291", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of all elements in the given list of tuples.", "code": "def product_of_tuples(tuples):\n    product = 1\n    for t in tuples:\n        for num in t:\n            product *= num\n    return product", "task_id": "357_9312eec2-1904-4a34-b22e-6eeb72134f69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the total number of elements in the given list of tuples.", "code": "def count_elements(tuples):\n    return sum(len(t) for t in tuples)", "task_id": "357_b90cd32c-1590-4a02-bcd2-0778c29670a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten the given list of tuples into a single list of elements.", "code": "def flatten_tuples(tuples):\n    return [element for t in tuples for element in t]", "task_id": "357_9b711f25-0dce-4582-be44-83bb7e828781", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of all odd elements in the given list of tuples.", "code": "def max_of_odd_elements(tuples):\n    odd_elements = [element for t in tuples for element in t if element % 2 != 0]\n    return max(odd_elements)", "task_id": "357_6493f969-0226-48f3-8d07-0a75bcb1b5f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all even elements in the given list of tuples.", "code": "def sum_of_even_elements(tuples):\n    return sum(element for t in tuples for element in t if element % 2 == 0)", "task_id": "357_427b3232-b37c-4710-af24-d16edf22016d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of a list of integers using map and lambda function.", "code": "def sum_of_squares(nums):\n  result = map(lambda x: x**2, nums)\n  return sum(result)", "task_id": "358_bf37cb94-1746-433c-ad14-ede8b06acb63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate corresponding elements of two lists of strings using map and lambda function.", "code": "def concat_strings(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "358_ce65593f-b505-4e8b-97d3-8e329bad4bba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply corresponding elements of two lists of integers using map and lambda function.", "code": "def multiply_elements(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "358_9855b8d5-f6e5-4f82-a5d5-faa34b4e664a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all strings in a list to uppercase using map and lambda function.", "code": "def uppercase_strings(strs):\n  result = map(lambda x: x.upper(), strs)\n  return list(result)", "task_id": "358_e581e3e2-627e-4937-8c26-72799aa18b6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract corresponding elements of two lists of integers using map and lambda function.", "code": "def subtract_elements(nums1, nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": "358_ce270391-56c5-4b45-be77-2a10880070d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of each string in a list using map and lambda function.", "code": "def length_of_strings(strs):\n  result = map(lambda x: len(x), strs)\n  return list(result)", "task_id": "358_a5bbaafd-ae5c-4be3-b980-03d05bdda29a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide corresponding elements of two lists of integers using map and lambda function.", "code": "def divide_elements(nums1, nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "task_id": "358_6e35dde4-5246-4bf2-b5d1-caef265a96f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each string in a list using map and lambda function.", "code": "def reverse_strings(strs):\n  result = map(lambda x: x[::-1], strs)\n  return list(result)", "task_id": "358_73d988fb-e8fa-4bc2-8374-063f5abf1798", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment each element in a list of integers by 1 using map and lambda function.", "code": "def increment_elements(nums):\n  result = map(lambda x: x + 1, nums)\n  return list(result)", "task_id": "358_5bdcfa59-5653-469c-b523-b3f75862e5b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from a list of integers using map and lambda function.", "code": "def filter_even(nums):\n  result = filter(lambda x: x % 2 == 0, nums)\n  return list(result)", "task_id": "358_2775b1fb-ac7d-42cf-8e46-3b2565fdddf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the roots of the quadratic equation is equal to zero or not.", "code": "def check_sum_of_roots(a, b, c):\n    if b == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_10412454-38a0-4c2a-b59f-04a55ad8870a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the roots of the quadratic equation is equal to the constant term or not.", "code": "def check_product_of_roots(a, b, c):\n    if a * c == b * b:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_eb21fc2f-4cd9-46c8-961e-a1b744a27e30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are equal or not.", "code": "def check_roots_equal(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_627cfbcb-49af-4198-8f65-20b92f4bedd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are real or not.", "code": "def check_roots_real(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_0bb378ea-ffab-48eb-b83e-b7b42fe424f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation are imaginary or not.", "code": "def check_roots_imaginary(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant < 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "359_7940b5f1-4234-433d-8893-63af8b9cebca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are positive or not.", "code": "def check_roots_positive(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1 > 0 and root2 > 0:\n            return 'Yes'\n    return 'No'", "task_id": "359_2abaac35-d3fc-452c-9624-1a8356fbe679", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are negative or not.", "code": "def check_roots_negative(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1 < 0 and root2 < 0:\n            return 'Yes'\n    return 'No'", "task_id": "359_8c95e389-3822-4d76-9c74-545f31a511bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of the quadratic equation have opposite signs or not.", "code": "def check_roots_opposite_signs(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1 * root2 < 0:\n            return 'Yes'\n    return 'No'", "task_id": "359_59684927-2a3a-4c36-9526-ee9e0d8ba6e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are integers or not.", "code": "def check_roots_integer(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1.is_integer() and root2.is_integer():\n            return 'Yes'\n    return 'No'", "task_id": "359_36221b88-702d-454d-bb90-545f8c46c181", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether both roots of the quadratic equation are rational numbers or not.", "code": "def check_roots_rational(a, b, c):\n    discriminant = b * b - 4 * a * c\n    if discriminant >= 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        if root1.is_integer() and root2.is_integer():\n            return 'Yes'\n    return 'No'", "task_id": "359_a6340d7d-792f-409d-8824-1e1f6deba246", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Lucas number.", "code": "def get_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "360_2c1e6a56-2a1e-47b3-8ba7-defe7077aa06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Fibonacci number.", "code": "def get_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "360_defc20a1-6c43-4a38-803a-ed78fca31cc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th triangular number.", "code": "def get_triangular(n):\n    return n * (n + 1) // 2", "task_id": "360_a641feaa-3876-468f-bc0c-a7b14136d928", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th square number.", "code": "def get_square(n):\n    return n * n", "task_id": "360_986f87c8-432f-472c-94d6-a0cbf675954a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th pentagonal number.", "code": "def get_pentagonal(n):\n    return n * (3 * n - 1) // 2", "task_id": "360_89e81604-27a1-4238-a04a-257c62afe3d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th hexagonal number.", "code": "def get_hexagonal(n):\n    return n * (2 * n - 1)", "task_id": "360_65065b97-dcc1-4cd7-9a6c-6a21b57a0baa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th heptagonal number.", "code": "def get_heptagonal(n):\n    return n * (5 * n - 3) // 2", "task_id": "360_8f85f4aa-6b7a-474e-b59c-126dee257f02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th octagonal number.", "code": "def get_octagonal(n):\n    return n * (3 * n - 2)", "task_id": "360_ff2b829c-7c59-4d6c-a343-05a7f2c36433", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th Catalan number.", "code": "def get_catalan(n):\n    if n == 0:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    for i in range(1, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - 1 - j]\n    return catalan[n]", "task_id": "360_0d853a5f-7d61-4435-9bd0-d7e37a46a078", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n\u2019th harmonic number.", "code": "def get_harmonic(n):\n    harmonic = 0.0\n    for i in range(1, n + 1):\n        harmonic += 1 / i\n    return harmonic", "task_id": "360_ae140487-8871-418b-bac1-ba06733cd799", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove negative numbers from a given list of numbers.", "code": "def remove_negative(list1):\n    return [x for x in list1 if x >= 0]", "task_id": "361_f50afde4-9d8d-422d-a59c-f8a483bb4f54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove zeros from a given list of numbers.", "code": "def remove_zeros(list1):\n    return [x for x in list1 if x != 0]", "task_id": "361_d87ca610-d395-4f61-b3cd-1946e8b02e7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove None values from a given list.", "code": "def remove_none(list1):\n    return [x for x in list1 if x is not None]", "task_id": "361_3d1a100e-8cd3-408d-9edf-4b63ed6cfecf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove strings from a given list.", "code": "def remove_strings(list1):\n    return [x for x in list1 if not isinstance(x, str)]", "task_id": "361_4473d168-b2a4-40da-af37-a4757fefb378", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all falsy values (e.g., False, None, 0, '', etc.) from a given list.", "code": "def remove_falsy(list1):\n    return [x for x in list1 if x]", "task_id": "361_a1b31e8e-913b-4098-82a7-5e5069975b6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate values from a given list.", "code": "def remove_duplicates(list1):\n    return list(dict.fromkeys(list1))", "task_id": "361_57407c07-f4b0-4479-8ca8-ad3ffdd8dcb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove even numbers from a given list of numbers.", "code": "def remove_even_numbers(list1):\n    return [x for x in list1 if x % 2 != 0]", "task_id": "361_298320f3-831d-4596-ad3f-6f54dae5f1fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove strings shorter than a given length from a list of strings.", "code": "def remove_short_strings(list1, min_length):\n    return [x for x in list1 if len(x) >= min_length]", "task_id": "361_4728232b-925a-4d45-82ad-035f7ce88c83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "361_aba12073-0eaf-4434-b8cd-ee68f8a1bccf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "def remove_non_alpha(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "361_41b4d33a-a965-4019-a58c-ba40c4336da1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the character with maximum occurrences in a given string.", "code": "def most_frequent_char(s):\n    max_count = 0\n    result = s[0]\n    for char in s:\n        count = s.count(char)\n        if count > max_count:\n            max_count = count\n            result = char\n    return result", "task_id": "362_af422166-b6e3-4902-94f3-4b8b21dd9072", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the word with maximum occurrences in a given sentence.", "code": "def most_frequent_word(sentence):\n    words = sentence.split()\n    max_count = 0\n    result = words[0]\n    for word in words:\n        count = words.count(word)\n        if count > max_count:\n            max_count = count\n            result = word\n    return result", "task_id": "362_ac8a47d0-3336-483b-bfef-4fdb4c299b21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers.", "code": "def most_frequent_element(nums):\n    max_count = 0\n    result = nums[0]\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    return result", "task_id": "362_0a99409a-5eab-4273-b764-bef9c4f5957b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the pair with maximum occurrences in a given list of tuples.", "code": "def most_frequent_pair(pairs):\n    max_count = 0\n    result = pairs[0]\n    for pair in pairs:\n        count = pairs.count(pair)\n        if count > max_count:\n            max_count = count\n            result = pair\n    return result", "task_id": "362_11c34d48-3cff-4e2f-8543-a97bef815d46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the item with maximum occurrences in a given list of any type.", "code": "def most_frequent_item(items):\n    max_count = 0\n    result = items[0]\n    for item in items:\n        count = items.count(item)\n        if count > max_count:\n            max_count = count\n            result = item\n    return result", "task_id": "362_05998946-eaa7-4805-937e-3bb7214ab2d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the digit with maximum occurrences in a given integer.", "code": "def most_frequent_digit(n):\n    digits = str(n)\n    max_count = 0\n    result = digits[0]\n    for digit in digits:\n        count = digits.count(digit)\n        if count > max_count:\n            max_count = count\n            result = digit\n    return int(result)", "task_id": "362_71cc35bc-d760-4eb4-b3b5-b391542fd2ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the substring with maximum occurrences in a given string of a specified length.", "code": "def most_frequent_substring(s, length):\n    max_count = 0\n    result = s[:length]\n    for i in range(len(s) - length + 1):\n        substring = s[i:i+length]\n        count = s.count(substring)\n        if count > max_count:\n            max_count = count\n            result = substring\n    return result", "task_id": "362_fa5f29be-71b2-4062-ab14-3422d37b8726", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with its first occurrence index.", "code": "def most_frequent_element_with_index(nums):\n    max_count = 0\n    result = nums[0]\n    index = 0\n    for i, num in enumerate(nums):\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n            index = i\n    return (result, index)", "task_id": "362_bc3f9da7-4af2-4d96-b087-f010ff2c0abc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with its count.", "code": "def most_frequent_element_with_count(nums):\n    max_count = 0\n    result = nums[0]\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    return (result, max_count)", "task_id": "362_16caa5fe-cb3d-4d1b-b6ae-fe1cc702679c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element with maximum occurrences in a given list of integers and return the element along with all its occurrence indices.", "code": "def most_frequent_element_with_indices(nums):\n    max_count = 0\n    result = nums[0]\n    indices = []\n    for num in nums:\n        count = nums.count(num)\n        if count > max_count:\n            max_count = count\n            result = num\n    indices = [i for i, x in enumerate(nums) if x == result]\n    return (result, indices)", "task_id": "362_bcd974e2-3b41-4268-8e4e-350910026622", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the k elements to each element in the tuple.", "code": "def multiply_K_element(test_list, K):\n  res = [tuple(j * K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_db762dbe-2b02-44c4-9dfd-07771b818d85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the k elements from each element in the tuple.", "code": "def subtract_K_element(test_list, K):\n  res = [tuple(j - K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_db9c2593-e208-4ba9-8c52-8c9a756a5900", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide each element in the tuple by k.", "code": "def divide_K_element(test_list, K):\n  res = [tuple(j / K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_3ed1ec0b-3265-44be-b082-25e3091f3372", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise each element in the tuple to the power of k.", "code": "def power_K_element(test_list, K):\n  res = [tuple(j ** K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_dd1959e8-665e-42bd-96be-abf17ee525e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to take the modulus of each element in the tuple with k.", "code": "def mod_K_element(test_list, K):\n  res = [tuple(j % K for j in sub ) for sub in test_list]\n  return res", "task_id": "363_06a0f641-7f04-4edf-83f2-3bcb2297786e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add k to the first element in each tuple.", "code": "def add_K_to_first_element(test_list, K):\n  res = [tuple((sub[0] + K,) + sub[1:]) for sub in test_list]\n  return res", "task_id": "363_46f74264-8e6f-4737-9c6d-563f751aab1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply k to the last element in each tuple.", "code": "def multiply_K_to_last_element(test_list, K):\n  res = [tuple(sub[:-1] + (sub[-1] * K,)) for sub in test_list]\n  return res", "task_id": "363_c10b5550-965e-4e5f-9e89-5fb68d2051fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add k to each even element in the tuple.", "code": "def add_K_to_even_elements(test_list, K):\n  res = [tuple(j + K if j % 2 == 0 else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_929a169f-398d-4960-b16f-603974bfaa26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract k from each odd element in the tuple.", "code": "def subtract_K_from_odd_elements(test_list, K):\n  res = [tuple(j - K if j % 2 != 0 else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_90643c6d-6586-421e-8e4f-5a03ea91d45d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add k to each element in the tuple that is greater than N.", "code": "def add_K_to_elements_greater_than_N(test_list, K, N):\n  res = [tuple(j + K if j > N else j for j in sub ) for sub in test_list]\n  return res", "task_id": "363_1a640db4-4aac-49bd-8240-0e469e82a51a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of '1's in a given binary string.", "code": "def count_ones(s):\n    return s.count('1')", "task_id": "364_b7b8df16-2e2c-4f74-a694-9c7d01183b50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given binary string is already a sequence of alternate characters.", "code": "def is_alternating(s):\n    for i in range(1, len(s)):\n        if s[i] == s[i-1]:\n            return False\n    return True", "task_id": "364_a1b0b0a6-4668-49e9-8414-d9bbb3a7c562", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string the same.", "code": "def flip_count_to_make_all_same(s):\n    count_0 = s.count('0')\n    count_1 = s.count('1')\n    return min(count_0, count_1)", "task_id": "364_7cbbb6ca-7fd8-477b-ada2-5f3e8b42d3cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest alternating substring in a given binary string.", "code": "def max_alternating_substring_length(s):\n    max_len = 1\n    current_len = 1\n    for i in range(1, len(s)):\n        if s[i] != s[i-1]:\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 1\n    return max_len", "task_id": "364_f197d58a-1bfa-43d3-aa94-01170f03d79d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make a given binary string a palindrome.", "code": "def count_flips_to_make_palindrome(s):\n    n = len(s)\n    flips = 0\n    for i in range(n // 2):\n        if s[i] != s[n - i - 1]:\n            flips += 1\n    return flips", "task_id": "364_87ed9fcd-2d7d-4372-b5c6-730ef33c6db4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring of '1's in a given binary string.", "code": "def longest_ones_substring(s):\n    max_len = 0\n    current_len = 0\n    for ch in s:\n        if ch == '1':\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            current_len = 0\n    return max_len", "task_id": "364_83cefff4-7dd4-4069-823a-16aa11b1c52d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of flips required to make the prefix of a given binary string a sequence of alternate characters.", "code": "def flip_count_to_make_prefix_alternate(s):\n    def make_flip(ch):\n        return '1' if ch == '0' else '0'\n    def get_flip_with_starting_char(s, expected):\n        flip_count = 0\n        for i in range(len(s)):\n            if s[i] != expected:\n                flip_count += 1\n            expected = make_flip(expected)\n        return flip_count\n    return min(get_flip_with_starting_char(s, '0'), get_flip_with_starting_char(s, '1'))", "task_id": "364_b0e9bc60-4273-4f3d-a145-9d6de343991a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of flips required to make the suffix of a given binary string a sequence of alternate characters.", "code": "def count_flips_to_make_suffix_alternate(s):\n    def make_flip(ch):\n        return '1' if ch == '0' else '0'\n    def get_flip_with_starting_char(s, expected):\n        flip_count = 0\n        for i in range(len(s)-1, -1, -1):\n            if s[i] != expected:\n                flip_count += 1\n            expected = make_flip(expected)\n        return flip_count\n    return min(get_flip_with_starting_char(s, '0'), get_flip_with_starting_char(s, '1'))", "task_id": "364_7f3f9583-da9a-4039-beba-deb29a01826f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string '0'.", "code": "def flip_count_to_make_all_zeros(s):\n    return s.count('1')", "task_id": "364_2b4ee094-baf6-435a-a6ff-9079bb5ad38b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of flips required to make all characters in a binary string '1'.", "code": "def flip_count_to_make_all_ones(s):\n    return s.count('0')", "task_id": "364_bc995416-6aa8-4f23-9a1f-b7529450e71f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "365_1b0b18c7-1a5e-42f1-813c-8d064b8dc939", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(n):\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return reversed_num", "task_id": "365_c4f32bdf-d3d7-4671-ab5d-5ebf2ec83343", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n):\n    original = n\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num", "task_id": "365_419a5e85-4fcb-4352-b079-40fa8909500d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the digits of a given number.", "code": "def product_of_digits(n):\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product", "task_id": "365_a5bdb144-5b72-448c-b86c-2856e47f41cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even digits in a given number.", "code": "def count_even_digits(n):\n    count = 0\n    while n > 0:\n        if (n % 10) % 2 == 0:\n            count += 1\n        n //= 10\n    return count", "task_id": "365_86cfee59-88f0-4ddb-a491-231ca82020b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in a given number.", "code": "def count_odd_digits(n):\n    count = 0\n    while n > 0:\n        if (n % 10) % 2 != 0:\n            count += 1\n        n //= 10\n    return count", "task_id": "365_7253122b-c3f6-48ab-9d27-16b4c23b58a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the squares of the digits of a given number.", "code": "def sum_of_squares_of_digits(n):\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit * digit\n        n //= 10\n    return total", "task_id": "365_1b58a1d7-85be-4195-b54f-c4b9440c703e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a specific digit in a given number.", "code": "def count_digit_occurrences(n, digit):\n    count = 0\n    while n > 0:\n        if n % 10 == digit:\n            count += 1\n        n //= 10\n    return count", "task_id": "365_8eccf9bc-e064-4e7b-a88d-f8ec5b535a9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is an Armstrong number.", "code": "def is_armstrong_number(n):\n    original = n\n    total = 0\n    num_digits = len(str(n))\n    while n > 0:\n        total += (n % 10) ** num_digits\n        n //= 10\n    return total == original", "task_id": "365_485bf73b-9590-40f1-93dc-6202e6107981", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the alternating sum of the digits of a given number.", "code": "def alternating_sum_of_digits(n):\n    total = 0\n    sign = 1\n    while n > 0:\n        total += sign * (n % 10)\n        n //= 10\n        sign *= -1\n    return total", "task_id": "365_79d88bb1-51e7-4d9d-a521-2a37033652f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest sum of the pair of adjacent elements from a given list of integers.", "code": "def max_sum_adjacent(nums: List[int]) -> int:\n    return max(a + b for a, b in zip(nums, nums[1:]))", "task_id": "366_55b98d99-47c7-4fff-8f6c-b9af3da54c5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest product of the pair of adjacent elements from a given list of integers.", "code": "def min_product_adjacent(nums: List[int]) -> int:\n    return min(a * b for a, b in zip(nums, nums[1:]))", "task_id": "366_96ded8d1-d894-4f95-a5b6-cbf5cb7e0afd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest difference between the pair of adjacent elements from a given list of integers.", "code": "def max_diff_adjacent(nums: List[int]) -> int:\n    return max(abs(a - b) for a, b in zip(nums, nums[1:]))", "task_id": "366_19c2db84-75da-4874-9005-62b0c61c7929", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest sum of the pair of adjacent elements from a given list of integers.", "code": "def min_sum_adjacent(nums: List[int]) -> int:\n    return min(a + b for a, b in zip(nums, nums[1:]))", "task_id": "366_07b394e3-1d17-4899-b66c-12834bdb63c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest sum of the pair of non-adjacent elements from a given list of integers.", "code": "def max_sum_non_adjacent(nums: List[int]) -> int:\n    return max(nums[i] + nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_78e7df52-3cb0-4665-9cae-ffaf73136053", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest difference between the pair of adjacent elements from a given list of integers.", "code": "def min_diff_adjacent(nums: List[int]) -> int:\n    return min(abs(a - b) for a, b in zip(nums, nums[1:]))", "task_id": "366_c376a7c4-880e-42f8-a7ad-6b5e466c20a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest product of the pair of non-adjacent elements from a given list of integers.", "code": "def max_product_non_adjacent(nums: List[int]) -> int:\n    return max(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_caef74de-3d53-44de-9338-2598966c57b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest sum of the pair of non-adjacent elements from a given list of integers.", "code": "def min_sum_non_adjacent(nums: List[int]) -> int:\n    return min(nums[i] + nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_857563e2-52ca-4af9-b7af-18293adddd18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest difference between the pair of non-adjacent elements from a given list of integers.", "code": "def max_diff_non_adjacent(nums: List[int]) -> int:\n    return max(abs(nums[i] - nums[j]) for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_0da8fd2a-7bbb-4843-b86d-ed3ba78892c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest product of the pair of non-adjacent elements from a given list of integers.", "code": "def min_product_non_adjacent(nums: List[int]) -> int:\n    return min(nums[i] * nums[j] for i in range(len(nums)) for j in range(i+2, len(nums)))", "task_id": "366_bfd9f3b4-61f0-4c57-b0bb-764cc033ffd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given list n times.", "code": "def repeat_list_elements(lst, n):\n    return [elem for elem in lst for _ in range(n)]", "task_id": "368_c687403d-89c8-42ef-8393-0431209c6069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat the given string n times.", "code": "def repeat_string(s, n):\n    return s * n", "task_id": "368_7e5a599c-47c3-45cb-95fc-228538895789", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat the keys of the given dictionary n times, with the same values.", "code": "def repeat_dict_keys(d, n):\n    return {k * n: v for k, v in d.items()}", "task_id": "368_d1bd0c29-c2b2-42a7-a237-944c422c30e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given tuple n times.", "code": "def repeat_elements_in_tuple(t, n):\n    return tuple(elem for elem in t for _ in range(n))", "task_id": "368_0a0b32da-e2ab-42d2-b5ae-c4d609a3b833", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each tuple in the given list of tuples n times.", "code": "def repeat_list_of_tuples(lst, n):\n    return [tup for tup in lst for _ in range(n)]", "task_id": "368_5611f663-fb2a-4287-9169-78cad6344451", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given set n times and return as a list.", "code": "def repeat_set_elements(s, n):\n    return [elem for elem in s for _ in range(n)]", "task_id": "368_38323e68-d1d8-4aec-9926-cfcdf0361d95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each character in the given string n times.", "code": "def repeat_chars_in_string(s, n):\n    return ''.join([char * n for char in s])", "task_id": "368_d4d92b87-56e3-4b6d-992f-72e5fd2236e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given nested list n times.", "code": "def repeat_elements_in_nested_list(lst, n):\n    return [[elem for elem in sublist for _ in range(n)] for sublist in lst]", "task_id": "368_9c41e37d-a5ab-4c37-826d-e350499a668d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the values of the given dictionary n times.", "code": "def repeat_elements_in_dict_values(d, n):\n    return {k: [elem for elem in v for _ in range(n)] for k, v in d.items()}", "task_id": "368_36ec64c8-8b05-45ce-aa56-c95cbbc264b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the given list of lists n times.", "code": "def repeat_elements_in_list_of_lists(lst, n):\n    return [[elem for elem in sublist for _ in range(n)] for sublist in lst]", "task_id": "368_c0654e1d-b0d7-459f-ba3e-064f38b28e36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n    volume = l * w * h\n    return volume", "task_id": "369_c129875c-dd5f-4d27-9300-e500c1d38760", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the total surface area of a cuboid.", "code": "def surface_area_cuboid(l, w, h):\n    surface_area = 2 * (l * w + l * h + w * h)\n    return surface_area", "task_id": "369_1179f293-4b01-434c-8a1f-ff2ede497c6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n    perimeter = 2 * (l + w)\n    return perimeter", "task_id": "369_cf28797f-cb3f-4d5d-b362-dcbb3df20330", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(l, w):\n    area = l * w\n    return area", "task_id": "369_5f65eb86-e568-4bba-96a8-1483a95e92c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the diagonal of a rectangle.", "code": "def diagonal_rectangle(l, w):\n    diagonal = (l**2 + w**2) ** 0.5\n    return diagonal", "task_id": "369_3cf09944-8bca-4f87-9bad-015fb0d49c81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r, h):\n    volume = 3.14159 * r**2 * h\n    return volume", "task_id": "369_2d91d087-395a-4920-9243-8eda6b530c35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the total surface area of a cylinder.", "code": "def surface_area_cylinder(r, h):\n    surface_area = 2 * 3.14159 * r * (r + h)\n    return surface_area", "task_id": "369_0e78ed00-b759-418f-945f-cd74dcf67a49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n    volume = 4/3 * 3.14159 * r**3\n    return volume", "task_id": "369_6fd583e2-0bf5-4672-88af-df02afb582ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surface_area_sphere(r):\n    surface_area = 4 * 3.14159 * r**2\n    return surface_area", "task_id": "369_2ca75390-3573-4555-bd5e-819feaab880d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(r, h):\n    volume = 1/3 * 3.14159 * r**2 * h\n    return volume", "task_id": "369_543738ea-39ff-49e4-8cca-07479fa05038", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their length.", "code": "def sort_by_length(strings):\n    return sorted(strings, key=len)", "task_id": "370_f78fe90c-4b55-48cc-838c-01c6e9f40412", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by their last character.", "code": "def sort_by_last_char(strings):\n    return sorted(strings, key=lambda x: x[-1])", "task_id": "370_1c137ba7-a2d0-42f5-827f-204b147022c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples by their second element.", "code": "def sort_by_second_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "task_id": "370_e96d3aec-41d2-4311-9286-2bc519d22e6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by their absolute values.", "code": "def sort_by_abs_value(numbers):\n    return sorted(numbers, key=abs)", "task_id": "370_6cba7ab3-8cbb-43a9-993b-bef243e34675", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of sentences by the number of words in each sentence.", "code": "def sort_by_word_count(sentences):\n    return sorted(sentences, key=lambda x: len(x.split()))", "task_id": "370_efd22e29-e65d-4401-ad95-9b401db77f3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of vowels in each string.", "code": "def sort_by_vowel_count(strings):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return sorted(strings, key=count_vowels)", "task_id": "370_ef1d7d3e-d58f-47d2-83d6-24eaa2dc858c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers by the sum of their digits.", "code": "def sort_by_digit_sum(numbers):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return sorted(numbers, key=digit_sum)", "task_id": "370_a0deef31-6ec8-44ec-afd4-a5c7eab4ee8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings by the number of unique characters in each string.", "code": "def sort_by_unique_chars(strings):\n    return sorted(strings, key=lambda x: len(set(x)))", "task_id": "370_e9a02ff1-f9c4-46a5-8f15-e51cdc5d8d38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of full names by the first name.", "code": "def sort_by_first_name(names):\n    return sorted(names, key=lambda x: x.split()[0])", "task_id": "370_b9b4a9f9-de03-4f04-9465-aa6373a74f76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of full names by the last name.", "code": "def sort_by_last_name(names):\n    return sorted(names, key=lambda x: x.split()[-1])", "task_id": "370_63bb38ba-06da-4b89-ab2e-ff7be7bcf0e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is symmetric (a mirror of itself).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_mirror(left, right):\n\tif left is None and right is None:\n\t\treturn True\n\tif left is None or right is None:\n\t\treturn False\n\treturn left.data == right.data and is_mirror(left.left, right.right) and is_mirror(left.right, right.left)\n\ndef is_tree_symmetric(root):\n\tif root is None:\n\t\treturn True\n\treturn is_mirror(root.left, root.right)", "task_id": "367_e016de04-a514-4346-9d21-90bb937ee392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a full binary tree (every node has either 0 or 2 children).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_full(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is None and root.right is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn is_tree_full(root.left) and is_tree_full(root.right)\n\treturn False", "task_id": "367_1b72440d-6394-42f5-9375-1c2ff642c495", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a complete binary tree (all levels are completely filled except possibly the last level and the last level has all keys as left as possible).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_complete(root):\n\tif root is None:\n\t\treturn True\n\tqueue = [root]\n\tend = False\n\twhile queue:\n\t\tnode = queue.pop(0)\n\t\tif node is None:\n\t\t\tend = True\n\t\telse:\n\t\t\tif end:\n\t\t\t\treturn False\n\t\t\tqueue.append(node.left)\n\t\t\tqueue.append(node.right)\n\treturn True", "task_id": "367_7448df28-4e8c-4d7c-92ed-c0736937fd4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a perfect binary tree (all internal nodes have two children and all leaves are at the same level).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef depth(node):\n\td = 0\n\twhile node is not None:\n\t\tnode = node.left\n\t\td += 1\n\treturn d\n\ndef is_perfect(root, d, level=0):\n\tif root is None:\n\t\treturn True\n\tif root.left is None and root.right is None:\n\t\treturn d == level + 1\n\tif root.left is None or root.right is None:\n\t\treturn False\n\treturn is_perfect(root.left, d, level + 1) and is_perfect(root.right, d, level + 1)\n\ndef is_tree_perfect(root):\n\td = depth(root)\n\treturn is_perfect(root, d)", "task_id": "367_f4fa45ce-34f0-4eb6-b9c0-a75cc24af1cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is height-balanced (the height difference between left and right subtrees for every node is not more than 1).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef height_and_balance(root):\n\tif root is None:\n\t\treturn 0, True\n\tleft_height, left_balanced = height_and_balance(root.left)\n\tright_height, right_balanced = height_and_balance(root.right)\n\theight = max(left_height, right_height) + 1\n\tbalanced = left_balanced and right_balanced and abs(left_height - right_height) <= 1\n\treturn height, balanced\n\ndef is_tree_height_balanced(root):\n\t_, balanced = height_and_balance(root)\n\treturn balanced", "task_id": "367_fa7610ea-3cfc-4468-9674-0a620b07276d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a degenerate (or pathological) tree (each parent node has only one child).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_degenerate(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn False\n\tif root.left is not None:\n\t\treturn is_tree_degenerate(root.left)\n\tif root.right is not None:\n\t\treturn is_tree_degenerate(root.right)\n\treturn True", "task_id": "367_6d75ecd6-e591-4ce2-901b-fc5ab1a82c5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a skewed tree (all nodes are either to the left or to the right).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_skewed(root):\n\tif root is None:\n\t\treturn True\n\tif root.left is not None and root.right is not None:\n\t\treturn False\n\tif root.left is not None:\n\t\treturn is_tree_skewed(root.left)\n\tif root.right is not None:\n\t\treturn is_tree_skewed(root.right)\n\treturn True", "task_id": "367_d650b0b6-92c3-4e2f-8d0c-424fb52215e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a subtree of another binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_same_tree(s, t):\n\tif s is None and t is None:\n\t\treturn True\n\tif s is None or t is None:\n\t\treturn False\n\treturn s.data == t.data and is_same_tree(s.left, t.left) and is_same_tree(s.right, t.right)\n\ndef is_tree_subtree(s, t):\n\tif t is None:\n\t\treturn True\n\tif s is None:\n\t\treturn False\n\tif is_same_tree(s, t):\n\t\treturn True\n\treturn is_tree_subtree(s.left, t) or is_tree_subtree(s.right, t)", "task_id": "367_503d1300-d13b-447f-98dc-a7854d94f9a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two binary trees are identical.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_tree_identical(s, t):\n\tif s is None and t is None:\n\t\treturn True\n\tif s is None or t is None:\n\t\treturn False\n\treturn s.data == t.data and is_tree_identical(s.left, t.left) and is_tree_identical(s.right, t.right)", "task_id": "367_b2f07240-83dd-4fd4-a6cf-d3d1ee41c4e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a binary tree is a binary search tree (BST).", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef is_bst_util(root, left, right):\n\tif root is None:\n\t\treturn True\n\tif root.data <= left or root.data >= right:\n\t\treturn False\n\treturn is_bst_util(root.left, left, root.data) and is_bst_util(root.right, root.data, right)\n\ndef is_tree_bst(root):\n\treturn is_bst_util(root, float('-inf'), float('inf'))", "task_id": "367_64dae618-f844-4bce-afbd-cc0b491b0d22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length, width):\n  return length * width", "task_id": "373_6c7bcac6-ff9f-4279-aa04-04cd799e5e59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side):\n  return 4 * side", "task_id": "373_74ebc69a-df3b-46ca-862e-c708407d5cba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\n\ndef volume_sphere(radius):\n  return (4/3) * math.pi * (radius ** 3)", "task_id": "373_d3ffb1a0-6ddd-434b-b23d-281af6c20c9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base, height):\n  return 0.5 * base * height", "task_id": "373_5cbc55b0-b9aa-4a8e-bed7-feece402d3fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\n\ndef circumference_circle(radius):\n  return 2 * math.pi * radius", "task_id": "373_580cb599-38cb-473e-94d5-86a58b9a1e23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cuboid.", "code": "def surface_area_cuboid(length, width, height):\n  return 2 * (length * width + width * height + height * length)", "task_id": "373_5708545c-afc4-4766-88ee-7635ff9c9ca4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the diagonal of a rectangle.", "code": "import math\n\ndef diagonal_rectangle(length, width):\n  return math.sqrt(length ** 2 + width ** 2)", "task_id": "373_7e0a6b55-ee69-4caf-a4bc-37ef45d97d9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(base, height):\n  return base * height", "task_id": "373_48b96569-15a6-439e-9cb2-b58ff84a5637", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\n\ndef volume_cylinder(radius, height):\n  return math.pi * (radius ** 2) * height", "task_id": "373_99a33b64-6cd6-41d9-b6d6-fe320fb74a2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length, width):\n  return 2 * (length + width)", "task_id": "373_4a1cd455-dd08-4310-8015-0de4fdd6a9b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of elements in descending order using heap queue algorithm.", "code": "import heapq as hq\n\ndef sort_descending(nums):\n    nums = [-num for num in nums]\n    hq.heapify(nums)\n    s_result = [-hq.heappop(nums) for i in range(len(nums))]\n    return s_result", "task_id": "372_ec1a2e62-627f-4de0-8cde-1a1668f60d54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef find_kth_largest(nums, k):\n    return hq.nlargest(k, nums)[-1]", "task_id": "372_1ea7e0a9-0ef2-4564-939f-3866b90d0193", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge multiple sorted lists into one sorted list using heap queue algorithm.", "code": "import heapq as hq\n\ndef merge_sorted_lists(lists):\n    return list(hq.merge(*lists))", "task_id": "372_6a6f9705-49ae-41b4-bc25-f4a55026b52e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k smallest elements in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef find_smallest_elements(nums, k):\n    return hq.nsmallest(k, nums)", "task_id": "372_82896cc8-449c-4b72-a65c-2659cbee4be7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of elements in ascending order using heap queue algorithm and return the sorted list.", "code": "import heapq as hq\n\ndef heap_sort(nums):\n    hq.heapify(nums)\n    return [hq.heappop(nums) for _ in range(len(nums))]", "task_id": "372_c63f9218-9e66-4697-8e8f-d2c5943ef188", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k largest elements in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef k_largest_elements(nums, k):\n    return hq.nlargest(k, nums)", "task_id": "372_14b522eb-175e-4854-a0c2-c36e005ed8db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given list of elements into a heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heapify_list(nums):\n    hq.heapify(nums)\n    return nums", "task_id": "372_865c614a-e3f1-4b9c-88c3-0236273a3b34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element in a given list using heap queue algorithm.", "code": "import heapq as hq\n\ndef kth_smallest(nums, k):\n    return hq.nsmallest(k, nums)[-1]", "task_id": "372_684172f2-104c-4eef-b9a5-ca57dd4094ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push a new item onto the heap and then pop and return the smallest item from the heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heap_push_pop(nums, item):\n    hq.heapify(nums)\n    return hq.heappushpop(nums, item)", "task_id": "372_72abde8a-75a8-430b-8a95-453690672d2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pop and return the smallest item from the heap, and then push the new item onto the heap using heap queue algorithm.", "code": "import heapq as hq\n\ndef heap_replace(nums, item):\n    hq.heapify(nums)\n    return hq.heapreplace(nums, item)", "task_id": "372_02f4f3d9-ede8-4564-be72-54781d4cd552", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing positive integer in an unsorted array.", "code": "def smallest_missing_positive(arr):\n    arr = [x for x in arr if x > 0]\n    arr.sort()\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_d3c1938b-e511-455d-8f8c-fb6e9234d2c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing even number in a sorted array.", "code": "def smallest_missing_even(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "371_7662ca63-7f76-49b2-996f-aa75af391039", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing odd number in a sorted array.", "code": "def smallest_missing_odd(arr):\n    smallest_missing = 1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "371_96a684d2-6420-45ac-b761-d347b3ce27b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing multiple of k in a sorted array.", "code": "def smallest_missing_multiple(arr, k):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += k\n    return smallest_missing", "task_id": "371_d779fe09-15d0-438b-bdac-bc491c37e5f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing non-negative integer in a sorted array.", "code": "def smallest_missing_nonnegative(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_4cca2c25-dec4-4f6b-ab73-1041dd89ad06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing negative integer in a sorted array.", "code": "def smallest_missing_negative(arr):\n    smallest_missing = -1\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing -= 1\n    return smallest_missing", "task_id": "371_9f376d5c-2690-41dd-9463-c0cfd6340479", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer within a given range [low, high] in a sorted array.", "code": "def smallest_missing_in_range(arr, low, high):\n    for i in range(low, high + 1):\n        if i not in arr:\n            return i\n    return high + 1", "task_id": "371_dc54fa9c-a88e-4b76-b06e-85c42f6db2e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in an unsorted array.", "code": "def smallest_missing_in_unsorted(arr):\n    arr.sort()\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_3e7be476-bb67-481a-9100-d16d1a94f633", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in a rotated sorted array.", "code": "def smallest_missing_in_rotated(arr):\n    n = len(arr)\n    left, right = 0, n - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == mid:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left", "task_id": "371_2968ba66-e9ef-40eb-bdb9-a9cd86e6b231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest missing integer in a sorted array with repeated elements.", "code": "def smallest_missing_in_repeated(arr):\n    smallest_missing = 0\n    for num in arr:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "371_5880ae60-6926-47bb-9ef9-6b682574a353", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "374_9ac3e1fe-7700-4d45-9127-241d6a7f044e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "374_3ab9cdba-db4c-476a-a6d4-ad8f721386d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "374_d23cb83d-37e1-4936-ad0a-76d9f19c29a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    return ''.join(sorted(set(s), key=s.index))", "task_id": "374_03fa9821-3ff9-4fa2-8ecc-ddf3b97577bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s: str) -> str:\n    for char in s:\n        if s.count(char) == 1:\n            return char\n    return ''", "task_id": "374_63c5d78a-a9e7-406b-b233-9c30fdda9c4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def anagrams(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "374_9cd7c588-25fe-466b-8abc-c88c60150d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix string amongst an array of strings.", "code": "def longest_common_prefix(strs: list[str]) -> str:\n    if not strs:\n        return ''\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ''\n    return prefix", "task_id": "374_83feddc7-2121-4c31-b251-cc136fcd8014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a subsequence of string t.", "code": "def is_subsequence(s: str, t: str) -> bool:\n    it = iter(t)\n    return all(char in it for char in s)", "task_id": "374_02f201b0-d485-4e21-bf46-ac2f89224538", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compress a string such that 'aaabb' becomes 'a3b2'.", "code": "def compress_string(s: str) -> str:\n    if not s:\n        return ''\n    compressed = []\n    count = 1\n    for i in range(1, len(s)):\n        if s[i] == s[i - 1]:\n            count += 1\n        else:\n            compressed.append(s[i - 1] + str(count))\n            count = 1\n    compressed.append(s[-1] + str(count))\n    return ''.join(compressed)", "task_id": "374_a056258e-4578-4d96-ae3f-6d8b085c19ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to expand a compressed string such that 'a3b2' becomes 'aaabb'.", "code": "def expand_string(s: str) -> str:\n    expanded = []\n    i = 0\n    while i < len(s):\n        char = s[i]\n        count = ''\n        i += 1\n        while i < len(s) and s[i].isdigit():\n            count += s[i]\n            i += 1\n        expanded.append(char * int(count))\n    return ''.join(expanded)", "task_id": "374_9dfe9ee4-f9c4-42ec-8247-6e4f3e149cf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round the given number up to the nearest multiple of a specific number.", "code": "def round_up(n, m):\n    return ((n + m - 1) // m) * m", "task_id": "375_c049aa01-76af-4962-87f8-f9c24b5dc705", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round the given number down to the nearest multiple of a specific number.", "code": "def round_down(n, m):\n    return (n // m) * m", "task_id": "375_adf5f755-4945-43e1-9b34-35e27be85fbc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest integer, rounding half up.", "code": "def round_half_up(n):\n    return int(n + 0.5)", "task_id": "375_ab955fcc-433e-4507-af8f-6d0540626c70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest integer, rounding half down.", "code": "def round_half_down(n):\n    return int(n - 0.5) if n < 0 else int(n + 0.5)", "task_id": "375_a5f5337e-00c4-4b6e-829b-2a70111cc725", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest even integer.", "code": "def round_to_nearest_even(n):\n    return int(round(n / 2.0) * 2)", "task_id": "375_4e24a6f2-2f47-4e3f-bc14-285ece2a34c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest odd integer.", "code": "def round_to_nearest_odd(n):\n    rounded = round(n)\n    return rounded if rounded % 2 != 0 else rounded + 1", "task_id": "375_72961a20-0a82-4e78-a810-6725708fac6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest tenth.", "code": "def round_to_nearest_tenth(n):\n    return round(n, 1)", "task_id": "375_9f8469a5-a31c-4aa4-88b1-327d77908d6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest hundredth.", "code": "def round_to_nearest_hundredth(n):\n    return round(n, 2)", "task_id": "375_d439d60a-256f-443b-b5ec-99933b516874", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given floating-point number to the nearest thousandth.", "code": "def round_to_nearest_thousandth(n):\n    return round(n, 3)", "task_id": "375_718cdebe-a292-475c-a833-811356e3abae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a given integer to the nearest power of two.", "code": "def round_to_nearest_power_of_two(n):\n    if n < 1:\n        return 1\n    lower = 1\n    while lower * 2 <= n:\n        lower *= 2\n    upper = lower * 2\n    return lower if n - lower < upper - n else upper", "task_id": "375_9016714d-0739-46f9-99f3-5b260102ee41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "377_d3aad9f2-5741-423e-8f1f-22476d924eb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all digits from a given string.", "code": "def remove_digits(s: str) -> str:\n    return ''.join([char for char in s if not char.isdigit()])", "task_id": "377_ac914501-caba-49a7-9aa7-13111700ac3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return ''.join(s.split())", "task_id": "377_e6258906-7ad5-4ed5-a307-356616161288", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    return ''.join([char for char in s if char not in consonants])", "task_id": "377_d77c9828-c5b5-4803-b088-6b9e0cc53b44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all special characters from a given string.", "code": "def remove_special_characters(s: str) -> str:\n    return ''.join([char for char in s if char.isalnum() or char.isspace()])", "task_id": "377_8f70262e-7753-4c63-8a2b-a69e6e1dd48f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all uppercase letters from a given string.", "code": "def remove_uppercase(s: str) -> str:\n    return ''.join([char for char in s if not char.isupper()])", "task_id": "377_cbab7f33-3c68-4e8f-9e0e-090219f908ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all lowercase letters from a given string.", "code": "def remove_lowercase(s: str) -> str:\n    return ''.join([char for char in s if not char.islower()])", "task_id": "377_64c2f996-08d5-465c-abb3-25d20d5e59b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all punctuation from a given string.", "code": "import string\n\ndef remove_punctuation(s: str) -> str:\n    return ''.join([char for char in s if char not in string.punctuation])", "task_id": "377_416f0624-74f5-4be6-a655-b254cb9ccfab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given substring from a string.", "code": "def remove_substring(s: str, sub: str) -> str:\n    return s.replace(sub, '')", "task_id": "377_6eb8d906-9d38-4cf8-9246-d770393bb539", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the nth occurrence of a character in a given string.", "code": "def remove_nth_occurrence(s: str, c: str, n: int) -> str:\n    count = 0\n    result = []\n    for char in s:\n        if char == c:\n            count += 1\n            if count == n:\n                continue\n        result.append(char)\n    return ''.join(result)", "task_id": "377_5e3a75ff-4d32-4775-bc88-b6934a8b5d81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements of a given list.", "code": "def reverse_list(lst):\n  return lst[::-1]", "task_id": "378_1ac04d0b-56ad-474b-ba27-609a347dda5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the left by k positions.", "code": "def rotate_left(lst, k):\n  k = k % len(lst)\n  return lst[k:] + lst[:k]", "task_id": "378_479c0f91-ccaf-43fa-9a18-6994d2249f00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the right by k positions.", "code": "def rotate_right(lst, k):\n  k = k % len(lst)\n  return lst[-k:] + lst[:-k]", "task_id": "378_d6eb42a7-4134-4e5f-91a4-2d523e00d8b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap the first and last elements of a given list.", "code": "def swap_first_last(lst):\n  if len(lst) < 2:\n    return lst\n  lst[0], lst[-1] = lst[-1], lst[0]\n  return lst", "task_id": "378_6ce851fe-5743-4215-810f-793987b300aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to double each element in a given list.", "code": "def double_elements(lst):\n  return [x * 2 for x in lst]", "task_id": "378_3dc5757d-281d-4ddb-a2d7-f867abc62cc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from a given list while preserving the order.", "code": "def remove_duplicates(lst):\n  seen = set()\n  return [x for x in lst if not (x in seen or seen.add(x))]", "task_id": "378_8141fd49-649c-48d7-a7b8-799783e2f363", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all elements in a given list.", "code": "def sum_elements(lst):\n  return sum(lst)", "task_id": "378_c4a4d1ac-66d6-4ede-b9bf-6be5af5d6e7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a given list.", "code": "def find_max(lst):\n  return max(lst)", "task_id": "378_d4ead154-c369-483d-af9a-c338a8fffc33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a given list.", "code": "def find_min(lst):\n  return min(lst)", "task_id": "378_a7bbc434-f10a-4e04-98d7-97dfa23bdc4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a given element in a list.", "code": "def count_occurrences(lst, x):\n  return lst.count(x)", "task_id": "378_5b753714-85c0-4f2b-9f4b-e234125fd6a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and replace the duplicates with a custom value.", "code": "def remove_duplicates(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else 'DUP' for ele in lst]\n    return res", "task_id": "376_35e9a23a-97bc-4064-acac-cc4a6472ac0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with their index in the list.", "code": "def replace_duplicates_with_index(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else idx for idx, ele in enumerate(lst)]\n    return res", "task_id": "376_41f83a67-d967-4a49-bfc8-e3edee4fc411", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and return a tuple of the modified list and the count of removed duplicates.", "code": "def remove_duplicates_and_count(lst):\n    temp = set()\n    count = 0\n    res = []\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n        else:\n            count += 1\n    return (res, count)", "task_id": "376_45f48d7a-f1d6-4ec5-90ef-938440fbce7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the length of the list.", "code": "def replace_duplicates_with_length(lst):\n    temp = set()\n    res = [ele if ele not in temp and not temp.add(ele) else len(lst) for ele in lst]\n    return res", "task_id": "376_1093137f-8954-4c39-805a-1f612fda6a99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and return the modified list in reverse order.", "code": "def remove_duplicates_and_reverse(lst):\n    temp = set()\n    res = [ele for ele in lst if ele not in temp and not temp.add(ele)]\n    return res[::-1]", "task_id": "376_303efdee-d6d5-4c1f-b7fe-33e7396b0d18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the previous element in the list.", "code": "def replace_duplicates_with_previous(lst):\n    temp = set()\n    res = []\n    prev = None\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n            prev = ele\n        else:\n            res.append(prev)\n    return res", "task_id": "376_e3c40953-2597-48b6-b3d9-5b1851ccd0f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and double the remaining elements.", "code": "def remove_duplicates_and_double(lst):\n    temp = set()\n    res = [ele * 2 for ele in lst if ele not in temp and not temp.add(ele)]\n    return res", "task_id": "376_04fb9763-ae45-4577-a4f2-8b6301efac2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the sum of all unique elements seen so far.", "code": "def replace_duplicates_with_sum(lst):\n    temp = set()\n    unique_sum = 0\n    res = []\n    for ele in lst:\n        if ele not in temp:\n            temp.add(ele)\n            unique_sum += ele\n            res.append(ele)\n        else:\n            res.append(unique_sum)\n    return res", "task_id": "376_8d377123-fbb6-4c53-bac8-6009b14bb31b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove list elements that occur more than once and square the remaining elements.", "code": "def remove_duplicates_and_square(lst):\n    temp = set()\n    res = [ele ** 2 for ele in lst if ele not in temp and not temp.add(ele)]\n    return res", "task_id": "376_9e47ccd3-e253-403e-8ab0-a36ff8fcfa35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace list elements that occur more than once with the next element in the list.", "code": "def replace_duplicates_with_next(lst):\n    temp = set()\n    res = []\n    for i, ele in enumerate(lst):\n        if ele not in temp:\n            temp.add(ele)\n            res.append(ele)\n        else:\n            res.append(lst[i+1] if i+1 < len(lst) else None)\n    return res", "task_id": "376_1e075464-0cb1-42f0-b878-eb8643bb060f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(l, w, h):\n  return l * w * h", "task_id": "379_44b3e0cf-ce11-46b2-b6ad-97d12258ab3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surfacearea_cylinder(r, h):\n  return 2 * math.pi * r * (r + h)", "task_id": "379_c9e62833-26e3-4931-9108-ba1a79fa9259", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  return (4/3) * math.pi * r**3", "task_id": "379_9172ac42-0fca-41f7-99ba-d3bc2b9d0ef6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surfacearea_sphere(r):\n  return 4 * math.pi * r**2", "task_id": "379_a44810ca-b889-40fd-8d18-d184f2c064c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r, h):\n  return (1/3) * math.pi * r**2 * h", "task_id": "379_6f4dcaa1-727c-42aa-879f-792f6a947fd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "import math\ndef surfacearea_cone(r, h):\n  l = math.sqrt(r**2 + h**2)\n  return math.pi * r * (r + l)", "task_id": "379_34a88425-393e-49c4-8283-1b048309c8bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(l, w):\n  return 2 * (l + w)", "task_id": "379_b44e5e6d-49b9-4b9a-a5e0-2f58c1783fee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(b, h):\n  return 0.5 * b * h", "task_id": "379_48666090-12d8-430a-bd0f-347219b9d4ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\ndef circumference_circle(r):\n  return 2 * math.pi * r", "task_id": "379_d32f3788-cd54-472f-b6c7-678dd57cc744", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(b, h):\n  return b * h", "task_id": "379_df601b04-d0a3-46c9-aa12-79fdc192b466", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the length of the inner lists.", "code": "def sort_by_length(list_data):\n    result = sorted(list_data, key=len)\n    return result", "task_id": "381_2ddc239b-89dd-432e-b4f3-fed7988aeb72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the sum of the elements in the inner lists.", "code": "def sort_by_sum(list_data):\n    result = sorted(list_data, key=sum)\n    return result", "task_id": "381_4b58a38e-e6a3-42fa-bda7-77b6b12f206c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the last element of the inner lists.", "code": "def sort_by_last_element(list_data):\n    result = sorted(list_data, key=lambda x: x[-1])\n    return result", "task_id": "381_9625db8c-a956-41e8-9ea6-57b09087b3f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the first element of the inner lists.", "code": "def sort_by_first_element(list_data):\n    result = sorted(list_data, key=lambda x: x[0])\n    return result", "task_id": "381_0a9f4a07-9b67-492e-aab6-dddde4e60826", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the maximum element of the inner lists.", "code": "def sort_by_max_element(list_data):\n    result = sorted(list_data, key=lambda x: max(x))\n    return result", "task_id": "381_36116c4a-23b4-481a-b9d1-749ccff4fda5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the minimum element of the inner lists.", "code": "def sort_by_min_element(list_data):\n    result = sorted(list_data, key=lambda x: min(x))\n    return result", "task_id": "381_8e1c1ff4-3614-4659-8a83-b2892f88e489", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the product of the elements in the inner lists.", "code": "from functools import reduce\nimport operator\n\ndef sort_by_product(list_data):\n    result = sorted(list_data, key=lambda x: reduce(operator.mul, x, 1))\n    return result", "task_id": "381_d7f0b452-d0d3-4bb0-b5d5-ee9ea11f29a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of even elements in the inner lists.", "code": "def sort_by_even_count(list_data):\n    result = sorted(list_data, key=lambda x: sum(1 for i in x if i % 2 == 0))\n    return result", "task_id": "381_dcb2f56f-106f-4eaa-bc5e-34542b138335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of odd elements in the inner lists.", "code": "def sort_by_odd_count(list_data):\n    result = sorted(list_data, key=lambda x: sum(1 for i in x if i % 2 != 0))\n    return result", "task_id": "381_727d1320-7944-4554-b51b-44b095fae68f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the number of unique elements in the inner lists.", "code": "def sort_by_unique_elements(list_data):\n    result = sorted(list_data, key=lambda x: len(set(x)))\n    return result", "task_id": "381_bd3ad94b-3908-459a-802c-712869f7ef7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n identity matrix.", "code": "def create_identity_matrix(n: int) -> list[list[int]]:\n    return [[1 if i == j else 0 for j in range(n)] for i in range(n)]", "task_id": "380_70353bbf-4349-42e0-9095-3c3c5727cebf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix with a given value on the diagonal and zeros elsewhere.", "code": "def create_diagonal_matrix(n: int, value: int) -> list[list[int]]:\n    return [[value if i == j else 0 for j in range(n)] for i in range(n)]", "task_id": "380_2ba1b9b7-35fa-45f4-96d3-5c2ddc5c12d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n upper triangular matrix filled with 1s.", "code": "def create_upper_triangular_matrix(n: int) -> list[list[int]]:\n    return [[1 if j >= i else 0 for j in range(n)] for i in range(n)]", "task_id": "380_581fffde-197e-4163-8138-e4892100a4dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n lower triangular matrix filled with 1s.", "code": "def create_lower_triangular_matrix(n: int) -> list[list[int]]:\n    return [[1 if j <= i else 0 for j in range(n)] for i in range(n)]", "task_id": "380_873439b8-05eb-4f24-916c-f06ca5185acf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n checkerboard matrix of 0s and 1s, starting with 0 in the top-left corner.", "code": "def create_checkerboard_matrix(n: int) -> list[list[int]]:\n    return [[(i + j) % 2 for j in range(n)] for i in range(n)]", "task_id": "380_6167472f-e5cc-4ea3-b079-fb394635bd05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix filled with numbers from 1 to n^2 in a spiral order.", "code": "def create_spiral_matrix(n: int) -> list[list[int]]:\n    matrix = [[0] * n for _ in range(n)]\n    num = 1\n    left, right, top, bottom = 0, n - 1, 0, n - 1\n    while left <= right and top <= bottom:\n        for i in range(left, right + 1):\n            matrix[top][i] = num\n            num += 1\n        top += 1\n        for i in range(top, bottom + 1):\n            matrix[i][right] = num\n            num += 1\n        right -= 1\n        for i in range(right, left - 1, -1):\n            matrix[bottom][i] = num\n            num += 1\n        bottom -= 1\n        for i in range(bottom, top - 1, -1):\n            matrix[i][left] = num\n            num += 1\n        left += 1\n    return matrix", "task_id": "380_5cc6fe3c-1d0b-473e-9efb-530351a6f03f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n multiplication table.", "code": "def create_multiplication_table(n: int) -> list[list[int]]:\n    return [[(i + 1) * (j + 1) for j in range(n)] for i in range(n)]", "task_id": "380_e20bfab2-69e8-4276-9eb1-ac6a850d0828", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n rows of Pascal's triangle.", "code": "def create_pascals_triangle(n: int) -> list[list[int]]:\n    triangle = []\n    for i in range(n):\n        row = [1] * (i + 1)\n        for j in range(1, i):\n            row[j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n        triangle.append(row)\n    return triangle", "task_id": "380_b533e11d-94ae-4d5e-a2bd-a3b1e048cdc5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n matrix where each element is the Fibonacci number at that position.", "code": "def create_fibonacci_matrix(n: int) -> list[list[int]]:\n    def fibonacci(k: int) -> int:\n        if k == 0:\n            return 0\n        elif k == 1:\n            return 1\n        else:\n            a, b = 0, 1\n            for _ in range(2, k + 1):\n                a, b = b, a + b\n            return b\n    return [[fibonacci(i * n + j) for j in range(n)] for i in range(n)]", "task_id": "380_5e84a355-ae23-400d-a6f9-f4858fb9bd86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate an n x n Hilbert matrix.", "code": "def create_hilbert_matrix(n: int) -> list[list[float]]:\n    return [[1 / (i + j + 1) for j in range(n)] for i in range(n)]", "task_id": "380_93c0740c-8680-4841-91b6-c7741fdf15cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all even bits of a given number.", "code": "def toggle_even_bits(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 2 == 1:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_8f991a8c-1cb1-4194-a423-687fc4d95cf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in a specified range [start, end].", "code": "def toggle_bits_in_range(n, start, end):\n    res = 0\n    for i in range(start, end + 1):\n        res = res | (1 << i)\n    return n ^ res", "task_id": "383_513c80cd-9b0c-465d-9d02-d36b06721dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number except the first and last bits.", "code": "def toggle_bits_except_first_last(n):\n    if n == 0:\n        return 0\n    num_bits = n.bit_length()\n    res = 0\n    for i in range(1, num_bits - 1):\n        res = res | (1 << i)\n    return n ^ res", "task_id": "383_f44f9224-4ac8-4577-a5a6-b5af944ce34b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at prime indices.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef toggle_prime_index_bits(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if is_prime(count):\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_584e76fc-00a5-4c06-9838-7b89f18db6d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions which are multiples of three.", "code": "def toggle_bits_multiple_of_three(n):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count % 3 == 0:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_76431f17-bd3d-451e-8568-614b1b42934b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in alternating blocks of a specified size.", "code": "def toggle_bits_in_alternating_blocks(n, block_size):\n    res = 0\n    count = 0\n    temp = n\n    toggle = True\n    while temp > 0:\n        for i in range(block_size):\n            if toggle and temp > 0:\n                res = res | (1 << count)\n            count += 1\n            temp >>= 1\n        toggle = not toggle\n    return n ^ res", "task_id": "383_95f4d28f-b738-4554-977f-a00f66041c52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions greater than k.", "code": "def toggle_bits_greater_than_k(n, k):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count > k:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_210a7e07-229d-48f2-81cb-cdb52d5be532", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions less than k.", "code": "def toggle_bits_less_than_k(n, k):\n    res = 0\n    count = 0\n    temp = n\n    while temp > 0:\n        if count < k:\n            res = res | (1 << count)\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_4e2d644f-5d11-460f-b182-8d3bdac67c56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at Fibonacci sequence indices.", "code": "def fibonacci_indices(limit):\n    fibs = [0, 1]\n    while fibs[-1] < limit:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[:-1]\n\ndef toggle_bits_at_fibonacci_indices(n):\n    res = 0\n    fibs = fibonacci_indices(n.bit_length())\n    for i in fibs:\n        res = res | (1 << i)\n    return n ^ res", "task_id": "383_a84d86fa-f36e-483b-9d09-6fce31ef7307", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in reverse order.", "code": "def toggle_bits_in_reverse(n):\n    res = 0\n    count = 0\n    temp = n\n    num_bits = n.bit_length()\n    while temp > 0:\n        if temp & 1:\n            res = res | (1 << (num_bits - count - 1))\n        count += 1\n        temp >>= 1\n    return n ^ res", "task_id": "383_c479db2b-fcce-48bc-b20e-b76e351250ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the frequency of the largest value in a given array.", "code": "def frequency_Of_Largest(n, arr): \n    mx = arr[0] \n    freq = 1\n    for i in range(1, n): \n        if (arr[i] > mx): \n            mx = arr[i] \n            freq = 1\n        elif (arr[i] == mx): \n            freq += 1\n    return freq", "task_id": "384_aee933a3-b05b-4d14-8988-c9e54df4ee61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the smallest value in a given array.", "code": "def sum_Of_Smallest(n, arr): \n    mn = arr[0] \n    for i in range(1, n): \n        if (arr[i] < mn): \n            mn = arr[i] \n    return mn * arr.count(mn)", "task_id": "384_2b24f69a-6350-4136-84d4-867a72d4dce2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given array.", "code": "def count_Even_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] % 2 == 0: \n            count += 1\n    return count", "task_id": "384_d4bb2419-b94f-4fb5-9faf-c18e1728ab0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in a given array.", "code": "def count_Odd_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] % 2 != 0: \n            count += 1\n    return count", "task_id": "384_55caa6a8-852f-4961-91a3-30328a6a60d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at even indices in a given array.", "code": "def sum_Of_Even_Indexed_Elements(n, arr): \n    total = 0\n    for i in range(0, n, 2): \n        total += arr[i]\n    return total", "task_id": "384_21c9fa06-5a2f-433d-ba05-b8282a9c124a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at odd indices in a given array.", "code": "def sum_Of_Odd_Indexed_Elements(n, arr): \n    total = 0\n    for i in range(1, n, 2): \n        total += arr[i]\n    return total", "task_id": "384_834aea14-8e1b-4a8a-a58a-ebe50d746db2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in a given array.", "code": "def product_Of_All_Elements(n, arr): \n    product = 1\n    for i in range(n): \n        product *= arr[i]\n    return product", "task_id": "384_51ef8f05-c5fc-4272-a44b-372bde833318", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of all elements in a given array.", "code": "def average_Of_All_Elements(n, arr): \n    total = sum(arr)\n    return total / n", "task_id": "384_24792aa0-4e3a-452a-bc57-149294f98516", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in a given array.", "code": "def count_Negative_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] < 0: \n            count += 1\n    return count", "task_id": "384_3edd25a6-e1bc-4355-9c91-77ad3d5c9fe9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a given array.", "code": "def count_Positive_Numbers(n, arr): \n    count = 0\n    for i in range(n): \n        if arr[i] > 0: \n            count += 1\n    return count", "task_id": "384_f48178b2-d004-4371-a65e-ee9971e54c75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a circularly sorted array.", "code": "def find_min_element(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return A[left]\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return A[mid]\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_c19d1b5e-6078-4d99-a8e0-2355d6e15706", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a circularly sorted array.", "code": "def find_max_element(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return A[right]\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] >= A[next] and A[mid] >= A[prev]:\n            return A[mid]\n        elif A[mid] >= A[left]:\n            left = mid + 1\n        elif A[mid] <= A[right]:\n            right = mid - 1\n    return -1", "task_id": "382_c749b08f-1c90-4fcd-9941-87f34720603a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain duplicates.", "code": "def find_rotation_count_with_duplicates(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] < A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        if A[mid] == A[left] == A[right]:\n            left += 1\n            right -= 1\n        elif A[mid] <= A[right] or A[mid] == A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left] or A[mid] == A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_f507fecb-39c3-4b51-ae5d-617b48121b0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array sorted in descending order.", "code": "def find_rotation_count_descending(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] >= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] >= A[next] and A[mid] >= A[prev]:\n            return mid\n        elif A[mid] >= A[right]:\n            right = mid - 1\n        elif A[mid] <= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_0914a5cf-6b45-42e4-9874-2a9a8963f9da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain negative numbers.", "code": "def find_rotation_count_with_negatives(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_30525e34-d149-442f-b5cb-2fba802a1198", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain floating point numbers.", "code": "def find_rotation_count_with_floats(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_980923ae-ec17-4031-92a8-4c058de4b9fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array of strings.", "code": "def find_rotation_count_with_strings(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_880f5813-044c-49e0-ad5e-8f3f49610a24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may contain very large numbers.", "code": "def find_rotation_count_with_large_numbers(A):\n    (left, right) = (0, len(A) - 1)\n    while left <= right:\n        if A[left] <= A[right]:\n            return left\n        mid = (left + right) // 2\n        next = (mid + 1) % len(A)\n        prev = (mid - 1 + len(A)) % len(A)\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\n            return mid\n        elif A[mid] <= A[right]:\n            right = mid - 1\n        elif A[mid] >= A[left]:\n            left = mid + 1\n    return -1", "task_id": "382_f445ee31-5e55-4fad-8313-6c8605ee5d2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that contains only one element.", "code": "def find_rotation_count_with_single_element(A):\n    return 0 if len(A) == 1 else -1", "task_id": "382_a3c45c08-ca3b-4034-8c94-af5ac2b22014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of rotations in a circularly sorted array that may be empty.", "code": "def find_rotation_count_with_empty_array(A):\n    return -1 if len(A) == 0 else 0", "task_id": "382_cb1fd4fe-4a9c-48e3-b02b-7856203cb6bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the hexadecimal number is a palindrome.", "code": "def is_hex_palindrome(N: str) -> bool:\n    return N == N[::-1]", "task_id": "387_82d4de1b-9e42-40eb-8a87-2451d7d3f4ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to a decimal number.", "code": "def hex_to_decimal(N: str) -> int:\n    return int(N, 16)", "task_id": "387_dc6c4e26-825a-4e70-9439-b5ed095ce090", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a hexadecimal number.", "code": "def count_hex_digits(N: str) -> int:\n    return len(N)", "task_id": "387_bf9fef12-7e0d-4513-be35-00f16ba43896", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to a binary number.", "code": "def hex_to_binary(N: str) -> str:\n    return bin(int(N, 16))[2:]", "task_id": "387_a9e9f6f3-2f66-46b1-845b-cfcae6e5c0ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a hexadecimal number to an octal number.", "code": "def hex_to_octal(N: str) -> str:\n    return oct(int(N, 16))[2:]", "task_id": "387_430e218a-a6bd-458d-aadf-3019df46b29b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add two hexadecimal numbers and return the result as a hexadecimal number.", "code": "def hex_sum(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) + int(N2, 16))[2:].upper()", "task_id": "387_0e51e566-9ca4-4677-b24e-27a04465f6ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to subtract one hexadecimal number from another and return the result as a hexadecimal number.", "code": "def hex_difference(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) - int(N2, 16))[2:].upper()", "task_id": "387_d0258a4f-650e-477c-8fc1-619ae64c50c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to multiply two hexadecimal numbers and return the result as a hexadecimal number.", "code": "def hex_product(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) * int(N2, 16))[2:].upper()", "task_id": "387_c6550f66-fcf0-4668-80bf-7b2758ed3bbc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to divide one hexadecimal number by another and return the result as a hexadecimal number.", "code": "def hex_division(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) // int(N2, 16))[2:].upper()", "task_id": "387_b8356520-cddd-4e8d-b883-19ab94355b2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the modulus of one hexadecimal number by another and return the result as a hexadecimal number.", "code": "def hex_modulus(N1: str, N2: str) -> str:\n    return hex(int(N1, 16) % int(N2, 16))[2:].upper()", "task_id": "387_336320d3-ba57-48d3-94d1-892d50f42c1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fibonacci number using recursion.", "code": "def get_fibonacci(n):\n  if n <= 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return get_fibonacci(n-1) + get_fibonacci(n-2)", "task_id": "385_f7a5c16f-8450-4f8f-b7e6-4acce39f03d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Tribonacci number using recursion. The Tribonacci sequence starts with 0, 1, 1 and each subsequent number is the sum of the previous three.", "code": "def get_tribonacci(n):\n  if n == 0:\n    return 0\n  elif n == 1 or n == 2:\n    return 1\n  else:\n    return get_tribonacci(n-1) + get_tribonacci(n-2) + get_tribonacci(n-3)", "task_id": "385_1bf5f71e-f1c9-4eb3-9f2f-cdb8301cc544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Lucas number using recursion. The Lucas sequence starts with 2, 1 and each subsequent number is the sum of the previous two.", "code": "def get_lucas(n):\n  if n == 0:\n    return 2\n  elif n == 1:\n    return 1\n  else:\n    return get_lucas(n-1) + get_lucas(n-2)", "task_id": "385_91ca5687-ffd5-4053-85f6-2c88cb18b470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Padovan number using recursion. The Padovan sequence starts with 1, 1, 1 and each subsequent number is the sum of the (n-2)th and (n-3)th numbers.", "code": "def get_padovan(n):\n  if n == 0 or n == 1 or n == 2:\n    return 1\n  else:\n    return get_padovan(n-2) + get_padovan(n-3)", "task_id": "385_dfec1465-775d-4657-9b27-6d6605c8cebf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Tetranacci number using recursion. The Tetranacci sequence starts with 0, 0, 0, 1 and each subsequent number is the sum of the previous four.", "code": "def get_tetranacci(n):\n  if n == 0 or n == 1 or n == 2:\n    return 0\n  elif n == 3:\n    return 1\n  else:\n    return get_tetranacci(n-1) + get_tetranacci(n-2) + get_tetranacci(n-3) + get_tetranacci(n-4)", "task_id": "385_dd524dd1-5a0e-4812-880a-60d00b74d580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Pell number using recursion. The Pell sequence starts with 0, 1 and each subsequent number is 2 times the (n-1)th number plus the (n-2)th number.", "code": "def get_pell(n):\n  if n == 0:\n    return 0\n  elif n == 1:\n    return 1\n  else:\n    return 2 * get_pell(n-1) + get_pell(n-2)", "task_id": "385_1b343578-eee3-491b-b8a7-5f3803d2704a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Hofstadter Q number using recursion. The Hofstadter Q sequence is defined as Q(n) = Q(n - Q(n-1)) + Q(n - Q(n-2)) with initial values Q(1) = Q(2) = 1.", "code": "def get_hofstadter_q(n):\n  if n == 1 or n == 2:\n    return 1\n  else:\n    return get_hofstadter_q(n - get_hofstadter_q(n-1)) + get_hofstadter_q(n - get_hofstadter_q(n-2))", "task_id": "385_c9c3ebaa-2890-45cb-b407-405cac2093d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fermat number using recursion. The Fermat sequence is defined as F(n) = 2^(2^n) + 1.", "code": "def get_fermat(n):\n  if n == 0:\n    return 3\n  else:\n    return 2 ** (2 ** n) + 1", "task_id": "385_215dd0da-fdb5-4093-9cc0-c5710866456e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Catalan number using recursion. The Catalan sequence is defined as C(n) = (2n)! / ((n+1)!n!).", "code": "def get_catalan(n):\n  if n == 0:\n    return 1\n  else:\n    return int((2 * (2 * n - 1) / (n + 1)) * get_catalan(n - 1))", "task_id": "385_cba6c775-8520-4104-a5f7-fbe71e0197f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Hofstadter Female sequence number using recursion. The Hofstadter Female sequence is defined as F(n) = n - M(F(n-1)) where M is the Hofstadter Male sequence.", "code": "def get_hofstadter_female(n):\n  def get_hofstadter_male(m):\n    if m == 0:\n      return 0\n    else:\n      return m - get_hofstadter_female(get_hofstadter_male(m-1))\n  if n == 0:\n    return 1\n  else:\n    return n - get_hofstadter_male(get_hofstadter_female(n-1))", "task_id": "385_5dab1045-b728-465b-acd5-34814139de62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 3 that is less than or equal to n.", "code": "def highest_power_of_3(n): \n    res = 1 \n    while res * 3 <= n: \n        res *= 3 \n    return res", "task_id": "388_a43de93c-d798-4652-acc1-ae45fdc85643", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is a power of 2.", "code": "def is_power_of_2(n): \n    return n > 0 and (n & (n - 1)) == 0", "task_id": "388_a8b24529-1083-4536-b4da-71ad58748eae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 that is strictly less than n.", "code": "def highest_power_of_2_less_than(n): \n    res = 1 \n    while res * 2 < n: \n        res *= 2 \n    return res", "task_id": "388_eccdd8c4-3a42-4bd9-9659-edaa1220be01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 5 that is less than or equal to n.", "code": "def highest_power_of_5(n): \n    res = 1 \n    while res * 5 <= n: \n        res *= 5 \n    return res", "task_id": "388_ab43e495-5e90-4044-b8a7-384583d35f83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is a power of 3.", "code": "def is_power_of_3(n): \n    if n <= 0: \n        return False \n    while n % 3 == 0: \n        n //= 3 \n    return n == 1", "task_id": "388_31e29bab-55a8-4387-b514-0d46fb6d2909", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nearest power of 2 to a given number n.", "code": "def nearest_power_of_2(n): \n    if n <= 0: \n        return 1 \n    lower, upper = 1, 1 \n    while upper < n: \n        lower = upper \n        upper *= 2 \n    return lower if n - lower < upper - n else upper", "task_id": "388_7668bf78-263e-4bdf-8152-ae3ddb0a537b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 2 that divides n.", "code": "def highest_power_of_2_divisor(n): \n    res = 1 \n    while n % (res * 2) == 0: \n        res *= 2 \n    return res", "task_id": "388_ff9191a9-9420-4a32-8834-962a18508e82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 10 that is less than or equal to n.", "code": "def highest_power_of_10(n): \n    res = 1 \n    while res * 10 <= n: \n        res *= 10 \n    return res", "task_id": "388_5e87cfa6-1956-4f7d-b6a3-49c9a088b9b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is a power of 10.", "code": "def is_power_of_10(n): \n    if n <= 0: \n        return False \n    while n % 10 == 0: \n        n //= 10 \n    return n == 1", "task_id": "388_23cb4ef9-79ee-4280-ad20-3c6c2f99a3c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the highest power of 4 that is less than or equal to n.", "code": "def highest_power_of_4(n): \n    res = 1 \n    while res * 4 <= n: \n        res *= 4 \n    return res", "task_id": "388_456f95b7-6427-4db5-8dc3-c41921d7465f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to append a given string at the end of all items in a list.", "code": "def add_suffix(lst, suffix):\n    return [i + suffix for i in lst]", "task_id": "390_ac781650-e1a1-4dc0-bef6-687ef81c0746", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace a given substring with another substring in all items in a list.", "code": "def replace_in_list(lst, old, new):\n    return [i.replace(old, new) for i in lst]", "task_id": "390_84d740f1-6e9b-4153-8d72-ecf20dfdaf8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize all items in a list.", "code": "def capitalize_list(lst):\n    return [i.capitalize() for i in lst]", "task_id": "390_05086951-a338-4a95-ae03-6321fe688b43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a given prefix and suffix to all items in a list.", "code": "def add_prefix_suffix(lst, prefix, suffix):\n    return [prefix + i + suffix for i in lst]", "task_id": "390_bd1267c8-c5b1-4707-9c9f-1475fb710f84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse all strings in a list.", "code": "def reverse_strings(lst):\n    return [i[::-1] for i in lst]", "task_id": "390_efce90ff-9836-482f-996c-a113ba23cd76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out items in a list that are shorter than a given length.", "code": "def filter_by_length(lst, length):\n    return [i for i in lst if len(i) >= length]", "task_id": "390_de9f1b73-d3fc-4a82-b00e-29c47c2b3197", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to append the index of each item to the item itself in a list.", "code": "def add_index(lst):\n    return [f'{i}{idx}' for idx, i in enumerate(lst)]", "task_id": "390_e4bb0ff8-bcfe-4190-96e3-0b7391424089", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each string in a list.", "code": "def double_strings(lst):\n    return [i * 2 for i in lst]", "task_id": "390_616f17d8-e4ab-45c3-8f3a-0c1092d1554a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to append the length of each string to the string itself in a list.", "code": "def add_length(lst):\n    return [f'{i}{len(i)}' for i in lst]", "task_id": "390_362cddf5-33d9-45e8-8ec5-bde5cbaa4968", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a given string at a specified position in all items in a list.", "code": "def insert_at_position(lst, string, position):\n    return [i[:position] + string + i[position:] for i in lst]", "task_id": "390_e6117ee3-094c-4cf5-ae7f-5711fc34264d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Fibonacci number.", "code": "def nth_fibonacci(n):\n\tif n == 0:\n\t\treturn 0\n\tif n == 1:\n\t\treturn 1\n\treturn nth_fibonacci(n - 1) + nth_fibonacci(n - 2)", "task_id": "389_829896c8-9d9e-4f07-9548-c74fb13785b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th triangular number.", "code": "def nth_triangular(n):\n\tif n == 0:\n\t\treturn 0\n\treturn n + nth_triangular(n - 1)", "task_id": "389_0395b562-5dff-40ac-9ba4-e70b0aab4946", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th square number.", "code": "def nth_square(n):\n\treturn n * n", "task_id": "389_1918b47a-555b-4a9b-a3e5-192504af6236", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th pentagonal number.", "code": "def nth_pentagonal(n):\n\treturn n * (3 * n - 1) // 2", "task_id": "389_d15f6d92-60ea-436d-ad7e-a80c17bfb7d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th hexagonal number.", "code": "def nth_hexagonal(n):\n\treturn n * (2 * n - 1)", "task_id": "389_434b0bda-d153-4973-bf21-bada5d502630", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Catalan number.", "code": "def nth_catalan(n):\n\tif n == 0:\n\t\treturn 1\n\tres = 0\n\tfor i in range(n):\n\t\tres += nth_catalan(i) * nth_catalan(n - i - 1)\n\treturn res", "task_id": "389_b5db7641-1b2c-47c9-b2b0-5a84c943959e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th harmonic number.", "code": "def nth_harmonic(n):\n\tif n == 1:\n\t\treturn 1.0\n\treturn 1.0 / n + nth_harmonic(n - 1)", "task_id": "389_b6483350-f4a6-4cf6-9fa7-8263625e9a0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of n.", "code": "def nth_factorial(n):\n\tif n == 0 or n == 1:\n\t\treturn 1\n\treturn n * nth_factorial(n - 1)", "task_id": "389_7d65c52a-e3f8-4a6a-beff-f364459de069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the double factorial of n.", "code": "def nth_double_factorial(n):\n\tif n == 0 or n == 1:\n\t\treturn 1\n\treturn n * nth_double_factorial(n - 2)", "task_id": "389_bf7dde1e-e75c-4803-997a-bc133cd6c62e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n'th Motzkin number.", "code": "def nth_motzkin(n):\n\tif n == 0 or n == 1:\n\t\treturn 1\n\tres = 0\n\tfor k in range(n):\n\t\tres += nth_motzkin(k) * nth_motzkin(n - k - 1)\n\treturn res", "task_id": "389_ba584041-1939-475b-a061-19935bd352b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to sort the given array.", "code": "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key = lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arrpos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "task_id": "386_e4bc8a1f-182d-4ad6-8068-a0dc229bde1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given string a palindrome.", "code": "def min_swaps_to_palindrome(s):\n    def is_palindrome_possible(s):\n        count = [0] * 256\n        for char in s:\n            count[ord(char)] += 1\n        odd = 0\n        for i in range(256):\n            if count[i] % 2 != 0:\n                odd += 1\n        return odd <= 1\n\n    if not is_palindrome_possible(s):\n        return -1\n\n    s = list(s)\n    n = len(s)\n    ans = 0\n    for i in range(n // 2):\n        left = i\n        right = n - left - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            else:\n                right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            ans += 1\n            left -= 1\n        else:\n            for j in range(right, n - left - 1):\n                s[j], s[j + 1] = s[j + 1], s[j]\n                ans += 1\n    return ans", "task_id": "386_40135ce0-6daf-4895-bb5c-c8d7192ea16d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to group all 1's together in the given binary array.", "code": "def min_swaps_to_group_ones(arr):\n    ones = arr.count(1)\n    if ones == 0:\n        return 0\n    max_ones_in_window = 0\n    current_ones_in_window = 0\n    for i in range(ones):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n    max_ones_in_window = current_ones_in_window\n    for i in range(ones, len(arr)):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n        if arr[i - ones] == 1:\n            current_ones_in_window -= 1\n        max_ones_in_window = max(max_ones_in_window, current_ones_in_window)\n    return ones - max_ones_in_window", "task_id": "386_4c38f762-039c-4cb2-9bbc-9757ef679ee8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given binary string alternating.", "code": "def min_swaps_to_make_binary_alternating(s):\n    def count_swaps(s, start):\n        swaps = 0\n        for i in range(len(s)):\n            if int(s[i]) != (start + i) % 2:\n                swaps += 1\n        return swaps // 2\n    return min(count_swaps(s, 0), count_swaps(s, 1))", "task_id": "386_ca00d873-0fdd-40b3-80e8-1f4bc8b3e829", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two strings anagrams of each other.", "code": "def min_swaps_to_make_anagram(s1, s2):\n    if sorted(s1) != sorted(s2):\n        return -1\n    swaps = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            j = i\n            while s1[j] != s2[i]:\n                j += 1\n            while j > i:\n                s1[j], s1[j - 1] = s1[j - 1], s1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_b57da008-0bab-4559-8de0-b7e7239ad8f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two arrays equal.", "code": "def min_swaps_to_make_equal(arr1, arr2):\n    if sorted(arr1) != sorted(arr2):\n        return -1\n    swaps = 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            j = i\n            while arr1[j] != arr2[i]:\n                j += 1\n            while j > i:\n                arr1[j], arr1[j - 1] = arr1[j - 1], arr1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_d463f307-eee6-47af-bbd8-09ae427afef1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make any substring of length k in the given string a palindrome.", "code": "def min_swaps_to_make_substring_palindrome(s, k):\n    def min_swaps_to_palindrome(sub):\n        n = len(sub)\n        ans = 0\n        for i in range(n // 2):\n            left = i\n            right = n - left - 1\n            while left < right:\n                if sub[left] == sub[right]:\n                    break\n                else:\n                    right -= 1\n            if left == right:\n                sub[left], sub[left + 1] = sub[left + 1], sub[left]\n                ans += 1\n                left -= 1\n            else:\n                for j in range(right, n - left - 1):\n                    sub[j], sub[j + 1] = sub[j + 1], sub[j]\n                    ans += 1\n        return ans\n    min_swaps = float('inf')\n    for i in range(len(s) - k + 1):\n        sub = list(s[i:i + k])\n        min_swaps = min(min_swaps, min_swaps_to_palindrome(sub))\n    return min_swaps", "task_id": "386_fe9c912c-fa5d-43cf-9d04-6064df367487", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make all elements in the given array equal.", "code": "def min_swaps_to_make_all_elements_equal(arr):\n    from collections import Counter\n    count = Counter(arr)\n    most_common = count.most_common(1)[0][0]\n    swaps = 0\n    for i in range(len(arr)):\n        if arr[i] != most_common:\n            j = i\n            while arr[j] != most_common:\n                j += 1\n            while j > i:\n                arr[j], arr[j - 1] = arr[j - 1], arr[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_064da52d-8257-4bc1-80d1-182aad2b11eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make the given two strings equal.", "code": "def min_swaps_to_make_string_equal(s1, s2):\n    if sorted(s1) != sorted(s2):\n        return -1\n    swaps = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            j = i\n            while s1[j] != s2[i]:\n                j += 1\n            while j > i:\n                s1[j], s1[j - 1] = s1[j - 1], s1[j]\n                swaps += 1\n                j -= 1\n    return swaps", "task_id": "386_0021d855-4e18-4c7d-909a-f174e2ce4668", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the minimum number of swaps required to make all elements in the given array unique.", "code": "def min_swaps_to_make_all_elements_unique(arr):\n    arr.sort()\n    swaps = 0\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i - 1]:\n            j = i\n            while j < len(arr) and arr[j] == arr[j - 1]:\n                j += 1\n            if j < len(arr):\n                arr[i], arr[j] = arr[j], arr[i]\n                swaps += 1\n    return swaps", "task_id": "386_5289b351-ea5c-4fa0-b89b-d359ae068778", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists into a dictionary where elements of the first list are keys and elements of the second list are values.", "code": "def merge_lists_to_dict(l1, l2):\n    return dict(zip(l1, l2))", "task_id": "391_1d648481-ca69-42f9-a446-c8da5dec88dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine three lists into a dictionary where elements of the first list are keys, elements of the second list are values, and elements of the third list are nested values.", "code": "def combine_lists_to_dict(l1, l2, l3):\n    return {x: {y: z} for x, y, z in zip(l1, l2, l3)}", "task_id": "391_82f8c476-c2b8-4d08-869a-e3903a4b60eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list to a dictionary where the keys are the indices and the values are the elements of the list.", "code": "def list_to_dict_with_index(l1):\n    return {i: x for i, x in enumerate(l1)}", "task_id": "391_cc0ba670-d72e-4f96-beab-c86257538561", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert two lists into a dictionary where the elements of the first list are keys and the elements of the second list are values in a list.", "code": "def lists_to_dict_of_lists(l1, l2):\n    return {x: [y] for x, y in zip(l1, l2)}", "task_id": "391_e7845f78-914d-4455-a9b6-77d4bcbd5c3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a nested dictionary from two lists where elements of the first list are keys and elements of the second list are dictionaries with a single key-value pair.", "code": "def nested_dict_from_lists(l1, l2):\n    return {x: {y: None} for x, y in zip(l1, l2)}", "task_id": "391_0d524041-9faf-42f0-857a-5c4801618b18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of pairs into a dictionary where the first element of each pair is the key and the second element is the value.", "code": "def dict_from_list_pairs(pairs):\n    return {x: y for x, y in pairs}", "task_id": "391_e61318ac-8cc3-47fb-a1c1-08fc5037b704", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge a list of dictionaries into a single dictionary.", "code": "def dict_from_list_of_dicts(l):\n    result = {}\n    for d in l:\n        result.update(d)\n    return result", "task_id": "391_3695742f-fca3-49f7-8918-5182d1064987", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a dictionary from two lists where the first list contains keys and the second list contains lists of values.", "code": "def dict_from_two_lists(l1, l2):\n    return {x: [y] for x, y in zip(l1, l2)}", "task_id": "391_08e29a46-8f07-4a81-9f51-b69c461d0fb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.", "code": "def dict_from_list_of_tuples(tuples):\n    return dict(tuples)", "task_id": "391_b53ba1ae-e7ae-4928-9404-470fae3b361e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list into a dictionary where each element of the list is a key and all values are set to a default value.", "code": "def dict_from_list_with_default(l1, default_value):\n    return {x: default_value for x in l1}", "task_id": "391_0d277a57-e73b-45f2-82f6-181f6ddd9b26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with minimum length using lambda function.", "code": "def min_length_list(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: len(i))\n    return (min_length, min_list)", "task_id": "393_b3fb688a-3df9-4522-b27f-878b465fd05c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest string in a list of strings using lambda function.", "code": "def longest_string(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_string = max(input_list, key=lambda i: len(i))\n    return (max_length, max_string)", "task_id": "393_0797131c-2210-4ddb-bccf-ab361823b846", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the shortest string in a list of strings using lambda function.", "code": "def shortest_string(input_list):\n    min_length = min(len(x) for x in input_list)\n    min_string = min(input_list, key=lambda i: len(i))\n    return (min_length, min_string)", "task_id": "393_29140ebf-92ce-46b6-979a-69c1367e472a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum sum of elements using lambda function.", "code": "def max_sum_list(input_list):\n    max_sum = max(sum(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: sum(i))\n    return (max_sum, max_list)", "task_id": "393_64c77091-902b-4dea-94b1-e547d211d727", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum sum of elements using lambda function.", "code": "def min_sum_list(input_list):\n    min_sum = min(sum(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: sum(i))\n    return (min_sum, min_list)", "task_id": "393_b2ab24af-1658-42b1-b2a8-033c3eb0dd95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum average of elements using lambda function.", "code": "def max_avg_list(input_list):\n    max_avg = max(sum(x)/len(x) for x in input_list)\n    max_list = max(input_list, key=lambda i: sum(i)/len(i))\n    return (max_avg, max_list)", "task_id": "393_7670f9a7-6e07-45d2-9eb0-35b7b37d249d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum average of elements using lambda function.", "code": "def min_avg_list(input_list):\n    min_avg = min(sum(x)/len(x) for x in input_list)\n    min_list = min(input_list, key=lambda i: sum(i)/len(i))\n    return (min_avg, min_list)", "task_id": "393_1552dd27-4012-404a-85b4-21d3fe60db93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum product of elements using lambda function.", "code": "def max_product_list(input_list):\n    from functools import reduce\n    max_product = max(reduce(lambda x, y: x * y, lst) for lst in input_list)\n    max_list = max(input_list, key=lambda i: reduce(lambda x, y: x * y, i))\n    return (max_product, max_list)", "task_id": "393_a6e347c6-f715-4615-86cb-2a2df2a80d4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum product of elements using lambda function.", "code": "def min_product_list(input_list):\n    from functools import reduce\n    min_product = min(reduce(lambda x, y: x * y, lst) for lst in input_list)\n    min_list = min(input_list, key=lambda i: reduce(lambda x, y: x * y, i))\n    return (min_product, min_list)", "task_id": "393_392d614b-e5e6-435d-8d0a-675928059c8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the string with maximum length in a list of strings using lambda function.", "code": "def max_length_string(input_list):\n    max_length = max(len(x) for x in input_list)\n    max_string = max(input_list, key=lambda i: len(i))\n    return (max_length, max_string)", "task_id": "393_5441aa4e-6b8b-440c-a702-859cef34a446", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/4) + f(n/6) + f(n/8)), n) for even numbers.", "code": "def get_max_sum_even(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 4] + res[i // 6] + res[i // 8])))\n\treturn res[n]", "task_id": "392_dd850b5e-dbf9-4596-a761-2d3bfc432eb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//3) + f(n//5) + f(n//7) + f(n//9)), n) for odd numbers.", "code": "def get_max_sum_odd(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 3] + res[i // 5] + res[i // 7] + res[i // 9])))\n\treturn res[n]", "task_id": "392_f0d60a24-92ae-4267-9ace-3c8027e8cf3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n-1) + f(n-2)), n) where n is a Fibonacci number.", "code": "def get_max_sum_fib(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i - 1] + res[i - 2])))\n\treturn res[n]", "task_id": "392_0638d7bf-6ab2-4f23-9045-af826e50441d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//5)), n) for prime numbers.", "code": "def get_max_sum_prime(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 5])))\n\treturn res[n]", "task_id": "392_09068c98-66f2-4d21-bdc2-0ad9eb8c66db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//4) + f(n//8)), n) where n is a perfect square.", "code": "def get_max_sum_square(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 4] + res[i // 8])))\n\treturn res[n]", "task_id": "392_f1fb2789-84eb-4136-ae4e-5dc6979b48d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//3) + f(n//6) + f(n//9)), n) where n is a perfect cube.", "code": "def get_max_sum_cube(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 3] + res[i // 6] + res[i // 9])))\n\treturn res[n]", "task_id": "392_bc47a2e5-65c6-4ef8-b584-953159b97848", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//6)), n) where n is a factorial number.", "code": "def get_max_sum_factorial(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 6])))\n\treturn res[n]", "task_id": "392_e3954805-835f-4724-b8fb-a17093abb7c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//5)), n) where n is a triangular number.", "code": "def get_max_sum_triangular(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 5])))\n\treturn res[n]", "task_id": "392_1b2e2af7-73c1-4420-b625-cf181f1d53af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//4)), n) where n is a hexagonal number.", "code": "def get_max_sum_hexagonal(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 4])))\n\treturn res[n]", "task_id": "392_6adca44e-1814-48b2-8b8b-8a873f6d54be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n//2) + f(n//3) + f(n//5)), n) where n is a pentagonal number.", "code": "def get_max_sum_pentagonal(n):\n\tres = [0, 1]\n\tfor i in range(2, n + 1):\n\t\tres.append(max(i, (res[i // 2] + res[i // 3] + res[i // 5])))\n\treturn res[n]", "task_id": "392_8905333c-faf8-4ccb-b684-ed52a3243769", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string.", "code": "def first_repeated_character(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None", "task_id": "395_125300b6-ccd2-48dc-90b1-2a50062c8d5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_non_repeating_word(s: str) -> str:\n    words = s.split()\n    word_order = []\n    ctr = {}\n    for word in words:\n        if word in ctr:\n            ctr[word] += 1\n        else:\n            ctr[word] = 1\n            word_order.append(word)\n    for word in word_order:\n        if ctr[word] == 1:\n            return word\n    return None", "task_id": "395_3da37958-46ab-49e3-b253-d2e27cc52820", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_repeated_word(s: str) -> str:\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return None", "task_id": "395_89cd54e6-cfff-4699-82f3-319735c63a15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last non-repeated character in a given string.", "code": "def last_non_repeating_character(s: str) -> str:\n    char_order = []\n    ctr = {}\n    for char in s:\n        if char in ctr:\n            ctr[char] += 1\n        else:\n            ctr[char] = 1\n            char_order.append(char)\n    for char in reversed(char_order):\n        if ctr[char] == 1:\n            return char\n    return None", "task_id": "395_01ed3538-99c5-45cf-aaea-892e4ff223df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last repeated character in a given string.", "code": "def last_repeated_character(s: str) -> str:\n    seen = set()\n    last_repeated = None\n    for char in s:\n        if char in seen:\n            last_repeated = char\n        seen.add(char)\n    return last_repeated", "task_id": "395_f79dcb8e-6eda-4acc-8764-86d448596f34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated digit in a given string.", "code": "def first_non_repeating_digit(s: str) -> str:\n    digit_order = []\n    ctr = {}\n    for char in s:\n        if char.isdigit():\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                digit_order.append(char)\n    for digit in digit_order:\n        if ctr[digit] == 1:\n            return digit\n    return None", "task_id": "395_9b88a206-edb5-4884-88ec-bcf4df4d5dbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated digit in a given string.", "code": "def first_repeated_digit(s: str) -> str:\n    seen = set()\n    for char in s:\n        if char.isdigit():\n            if char in seen:\n                return char\n            seen.add(char)\n    return None", "task_id": "395_029b6827-90cf-49c5-a5ea-4ddf536be25d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated vowel in a given string.", "code": "def first_non_repeating_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    vowel_order = []\n    ctr = {}\n    for char in s:\n        if char in vowels:\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                vowel_order.append(char)\n    for vowel in vowel_order:\n        if ctr[vowel] == 1:\n            return vowel\n    return None", "task_id": "395_10d9a4af-37cd-4c34-9a78-94d5471eb4e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated vowel in a given string.", "code": "def first_repeated_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    seen = set()\n    for char in s:\n        if char in vowels:\n            if char in seen:\n                return char\n            seen.add(char)\n    return None", "task_id": "395_7aa38beb-bec4-4c4f-bbb7-5e5cfc1d2c41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated consonant in a given string.", "code": "def first_non_repeating_consonant(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    consonant_order = []\n    ctr = {}\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            if char in ctr:\n                ctr[char] += 1\n            else:\n                ctr[char] = 1\n                consonant_order.append(char)\n    for consonant in consonant_order:\n        if ctr[consonant] == 1:\n            return consonant\n    return None", "task_id": "395_c1693bec-0430-4ed0-aff6-ccd2ec5f809c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a vowel using regex.", "code": "import re\nregex = r'^[aeiouAEIOU].*[aeiouAEIOU]$'\ndef check_vowel(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_50a6b4b9-e4df-4871-8e42-113ff41bb8b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a digit using regex.", "code": "import re\nregex = r'^\\d.*\\d$'\ndef check_digit(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_e78d7227-cda4-480c-949f-44be6722605c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with the same character and has a length of at least 3 using regex.", "code": "import re\nregex = r'^([a-zA-Z]).*\\1$'\ndef check_same_length(string):\n\tif len(string) >= 3 and re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_d7fe9bb6-3f17-4146-a2d8-e174ca0b1c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with an uppercase letter and ends with a lowercase letter using regex.", "code": "import re\nregex = r'^[A-Z].*[a-z]$'\ndef check_uppercase(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_065c4fc6-35df-41f6-aa8e-a747d3e9d2ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with an alphanumeric character and ends with a special character using regex.", "code": "import re\nregex = r'^[a-zA-Z0-9].*[^a-zA-Z0-9]$'\ndef check_alphanumeric(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_1063e4b3-267a-494d-9590-0360f12bab80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome using regex.", "code": "import re\nregex = r'^(.)(.)(.).*\\3\\2\\1$'\ndef check_palindrome(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_c5260e52-e2c0-4047-a856-374d122a61a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with an alphabetic character using regex.", "code": "import re\nregex = r'^[a-zA-Z].*[a-zA-Z]$'\ndef check_alpha(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_d557d652-933c-4d69-812a-d722806d236b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a special character using regex.", "code": "import re\nregex = r'^[^a-zA-Z0-9].*[^a-zA-Z0-9]$'\ndef check_special(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_75aa6cf9-5c68-4ac2-b5bd-e96cae323376", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with the same digit using regex.", "code": "import re\nregex = r'^(\\d).*(\\1)$'\ndef check_same_digit(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_24872ee3-7c15-410a-8f01-724d7c6a44f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts and ends with a consonant using regex.", "code": "import re\nregex = r'^[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ].*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$'\ndef check_consonant(string):\n\tif re.search(regex, string):\n\t\treturn 'Valid'\n\telse:\n\t\treturn 'Invalid'", "task_id": "396_b518f9c7-66c6-499b-80fc-02ba291687ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of three specific numbers, but if two numbers are the same, return that number.", "code": "def find_median(a, b, c):\n    if a == b or a == c:\n        return a\n    if b == c:\n        return b\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_6f22da53-47fe-4d9a-a04d-4144455a2221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the middle value of three specific numbers, but if all numbers are the same, return -1.", "code": "def middle_value(a, b, c):\n    if a == b == c:\n        return -1\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return b\n        else:\n            return c\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_078b1a07-cc72-494a-be8e-f404a522a917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest number among three specific numbers.", "code": "def second_largest(a, b, c):\n    if a > b:\n        if a < c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b\n    else:\n        if a > c:\n            return a\n        elif b < c:\n            return b\n        else:\n            return c", "task_id": "397_5aed81d8-d8d6-476a-97c7-e4e8fb0950c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the middle value of five specific numbers.", "code": "def middle_of_five(a, b, c, d, e):\n    nums = [a, b, c, d, e]\n    nums.sort()\n    return nums[2]", "task_id": "397_d8417f88-3990-43f0-b34c-2c202a1fa5ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of four specific numbers.", "code": "def median_of_four(a, b, c, d):\n    nums = [a, b, c, d]\n    nums.sort()\n    return (nums[1] + nums[2]) / 2", "task_id": "397_caf6f4dd-09c2-4b69-8676-4501efdd51bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the mode of three specific numbers. If there is no mode, return -1.", "code": "def find_mode(a, b, c):\n    if a == b == c:\n        return a\n    if a == b or a == c:\n        return a\n    if b == c:\n        return b\n    return -1", "task_id": "397_29799615-de9b-45dd-a91f-baf31c50ef9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest number among three specific numbers.", "code": "def second_smallest(a, b, c):\n    if a > b:\n        if b > c:\n            return b\n        elif a > c:\n            return c\n        else:\n            return a\n    else:\n        if a > c:\n            return a\n        elif b > c:\n            return c\n        else:\n            return b", "task_id": "397_d6802b9c-f21f-4f75-89c8-87807f89fdc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the range (difference between the largest and smallest number) of three specific numbers.", "code": "def find_range(a, b, c):\n    return max(a, b, c) - min(a, b, c)", "task_id": "397_e5ad1bc5-f69e-4ad7-8ee4-95a5e998ba4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of three specific numbers.", "code": "def find_average(a, b, c):\n    return (a + b + c) / 3", "task_id": "397_7ae68ce7-ec40-48fc-bf42-36c249d370b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of three specific numbers.", "code": "def find_sum(a, b, c):\n    return a + b + c", "task_id": "397_fec8a38e-321c-4599-9fda-52e731bd3601", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the squares of the digits of each number in a given list.", "code": "def sum_of_squared_digits(nums):\n    return sum(int(el)**2 for n in nums for el in str(n) if el.isdigit())", "task_id": "398_6f9ce08e-29f9-4120-85ad-559cbfbb7120", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the product of the digits of each number in a given list.", "code": "def product_of_digits(nums):\n    product = 1\n    for n in nums:\n        for el in str(n):\n            if el.isdigit():\n                product *= int(el)\n    return product", "task_id": "398_0645e5fc-1e3b-4976-a5cb-75d723de6f42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the even digits of each number in a given list.", "code": "def sum_of_even_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) % 2 == 0)", "task_id": "398_6b70c494-0bfd-4f91-861e-040abf55e091", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the odd digits of each number in a given list.", "code": "def sum_of_odd_digits(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) % 2 != 0)", "task_id": "398_9956f112-1186-4893-b417-24e099f5dd20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits at even positions (0-based index) of each number in a given list.", "code": "def sum_of_digits_at_even_positions(nums):\n    return sum(int(str(n)[i]) for n in nums for i in range(len(str(n))) if i % 2 == 0)", "task_id": "398_ed8da15a-6428-4105-8611-3d768b56701f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits at odd positions (0-based index) of each number in a given list.", "code": "def sum_of_digits_at_odd_positions(nums):\n    return sum(int(str(n)[i]) for n in nums for i in range(len(str(n))) if i % 2 != 0)", "task_id": "398_1b846d33-e508-49d0-bb6d-ab6028954280", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits of each even number in a given list.", "code": "def sum_of_digits_of_even_numbers(nums):\n    return sum(int(el) for n in nums if n % 2 == 0 for el in str(n) if el.isdigit())", "task_id": "398_ab035a95-0a2e-4ebe-a20d-7eb3fc3395de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits of each odd number in a given list.", "code": "def sum_of_digits_of_odd_numbers(nums):\n    return sum(int(el) for n in nums if n % 2 != 0 for el in str(n) if el.isdigit())", "task_id": "398_0ddd001a-7836-4e32-8b1c-24611e17b793", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits greater than five of each number in a given list.", "code": "def sum_of_digits_greater_than_five(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) > 5)", "task_id": "398_67498918-5479-4a22-be70-22351a5266f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of the digits less than five of each number in a given list.", "code": "def sum_of_digits_less_than_five(nums):\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit() and int(el) < 5)", "task_id": "398_a4d73206-ba69-4bf6-85f3-c90745d7adc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "394_4a43eb24-6b37-444f-bc49-e498192fb781", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in a list.", "code": "def sum_of_elements(lst: list) -> int:\n    return sum(lst)", "task_id": "394_6328dee9-d568-4cf4-80b5-516a218ca315", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "394_576335a5-f151-4e20-8277-d70334e3fab3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "394_eca1921e-0c35-41e4-ba49-ca5497dbfa29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(lst: list) -> list:\n    return lst[::-1]", "task_id": "394_5f28fc39-9abd-4ee6-8d39-2b3732e26ac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a list.", "code": "def find_max(lst: list) -> int:\n    return max(lst)", "task_id": "394_0bd7f548-c420-4600-a221-0cd1d7dc233a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "394_ae885703-f6ee-4789-baf0-837b152011a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n: int) -> list:\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n    return fib[:n]", "task_id": "394_cd9876df-e50f-46de-8127-fccdd66a5c9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "394_19146773-0fe8-42ed-9a3f-3d49443178c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from a given list.", "code": "def unique_elements(lst: list) -> list:\n    return list(set(lst))", "task_id": "394_e8438cc4-839a-498e-a5c2-a1e34271d023", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise AND operation across the given tuples.", "code": "def bitwise_and(test_tup1, test_tup2):\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_4e0026f7-a5e9-4bda-814e-d415dab60e15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise OR operation across the given tuples.", "code": "def bitwise_or(test_tup1, test_tup2):\n  res = tuple(ele1 | ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_8b6e897c-51c3-44c9-a6e1-a4bf2bc762a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise NOT operation on each element of the given tuple.", "code": "def bitwise_not(test_tup):\n  res = tuple(~ele for ele in test_tup)\n  return res", "task_id": "399_91b43957-dd5e-4d90-aaec-60fe57f7041c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise left shift operation on each element of the given tuple by a given number of positions.", "code": "def bitwise_shift_left(test_tup, shift):\n  res = tuple(ele << shift for ele in test_tup)\n  return res", "task_id": "399_4846c058-983a-4f35-bd3b-106d256b7ed4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the mathematical bitwise right shift operation on each element of the given tuple by a given number of positions.", "code": "def bitwise_shift_right(test_tup, shift):\n  res = tuple(ele >> shift for ele in test_tup)\n  return res", "task_id": "399_efbbc15f-3662-45b1-a088-4d1e3ca6f269", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise addition across the given tuples.", "code": "def add_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_68797837-83cf-46f2-8155-f85939bf7cc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise subtraction across the given tuples.", "code": "def subtract_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_e16c87d0-de9b-4bc2-a859-64deec678026", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise multiplication across the given tuples.", "code": "def multiply_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_92f22bbe-0ca0-4020-844e-2b09489009af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise division across the given tuples.", "code": "def divide_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_50475ab8-7b97-43fc-95ae-d111e8066d2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform element-wise modulus operation across the given tuples.", "code": "def mod_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "399_b2ac605e-394e-49b5-b52c-d269174991f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise multiplication of tuple elements in the given two nested tuples.", "code": "def multiply_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_89702d34-472b-4041-9bc2-069879833e9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise subtraction of tuple elements in the given two nested tuples.", "code": "def subtract_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_57cc109a-f0b0-496d-9b2c-7a1a5fa64ea6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise division of tuple elements in the given two nested tuples.", "code": "def divide_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a / b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_c77c5342-7d10-4c1a-a0d4-442bc0b8ff6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise maximum of tuple elements in the given two nested tuples.", "code": "def max_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_150c445b-bd51-4896-8175-be681d03389f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise minimum of tuple elements in the given two nested tuples.", "code": "def min_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(min(a, b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_58e4a144-ee44-48e2-915c-5679a39ed17d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise summation of tuple elements in the given nested tuple.", "code": "def sum_nested_tuples(test_tup):\n  res = tuple(sum(tup) for tup in test_tup)\n  return res", "task_id": "401_0396c9ec-ba85-4816-9f46-4f12e7fe29d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise product of tuple elements in the given nested tuple.", "code": "def product_nested_tuples(test_tup):\n  from functools import reduce\n  res = tuple(reduce(lambda x, y: x * y, tup) for tup in test_tup)\n  return res", "task_id": "401_886987ea-a034-45d9-8ea1-d6ec9b144379", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise concatenation of tuple elements in the given two nested tuples.", "code": "def concatenate_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(str(a) + str(b) for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_1f1d661f-d1fd-48d4-8861-aa90bc84e425", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise exponentiation of tuple elements in the given two nested tuples.", "code": "def power_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a ** b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_7ceb1f11-ee0e-4d0b-9b75-bf94a251f750", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise modulo of tuple elements in the given two nested tuples.", "code": "def modulo_nested_tuples(test_tup1, test_tup2):\n  res = tuple(tuple(a % b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "401_cc7d08cb-5849-4a3b-8727-e757c85b0a49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique tuples in the given list, where each tuple contains exactly two integers.", "code": "def count_unique_tuples(test_list):\n    return len(set(test_list))", "task_id": "400_24bdc917-0a46-4f26-9f89-14fa292df3db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, with each tuple sorted in ascending order.", "code": "def unique_sorted_tuples(test_list):\n    return list(set(tuple(sorted(sub)) for sub in test_list))", "task_id": "400_302ec25e-2110-461f-a969-1ccb6ff6a3d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is unique.", "code": "def unique_tuples_with_sum(test_list):\n    seen_sums = set()\n    result = []\n    for sub in test_list:\n        if sum(sub) not in seen_sums:\n            seen_sums.add(sum(sub))\n            result.append(sub)\n    return result", "task_id": "400_daa61928-751b-47d4-a362-6875ff3f0565", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the product of the integers in each tuple is unique.", "code": "def unique_tuples_with_product(test_list):\n    seen_products = set()\n    result = []\n    for sub in test_list:\n        product = sub[0] * sub[1]\n        if product not in seen_products:\n            seen_products.add(product)\n            result.append(sub)\n    return result", "task_id": "400_03574ec4-f12d-4ccc-b8c3-f461477a7c6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers, is sorted in ascending order, and the sum of the integers in each tuple is unique.", "code": "def unique_sorted_tuples_with_sum(test_list):\n    seen_sums = set()\n    result = []\n    for sub in test_list:\n        sorted_sub = tuple(sorted(sub))\n        if sum(sorted_sub) not in seen_sums:\n            seen_sums.add(sum(sorted_sub))\n            result.append(sorted_sub)\n    return result", "task_id": "400_44aa8e0d-6928-4363-a6ee-facd5ad55e25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is even.", "code": "def unique_tuples_with_even_sum(test_list):\n    result = []\n    for sub in test_list:\n        if sum(sub) % 2 == 0:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_55e32f8d-ceff-4637-bfba-c244b9084707", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is odd.", "code": "def unique_tuples_with_odd_sum(test_list):\n    result = []\n    for sub in test_list:\n        if sum(sub) % 2 != 0:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_4ceb6f2c-fe4a-4031-9f31-50ef503fd9ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the sum of the integers in each tuple is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef unique_tuples_with_prime_sum(test_list):\n    result = []\n    for sub in test_list:\n        if is_prime(sum(sub)):\n            result.append(sub)\n    return list(set(result))", "task_id": "400_072f2aac-63a1-4b6b-8b3b-b7390ba06021", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two integers and the product of the integers in each tuple is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef unique_tuples_with_prime_product(test_list):\n    result = []\n    for sub in test_list:\n        if is_prime(sub[0] * sub[1]):\n            result.append(sub)\n    return list(set(result))", "task_id": "400_6a2d4024-0188-4360-a0f4-8329d4cc9b20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique tuples from the given list, where each tuple contains exactly two distinct integers.", "code": "def unique_tuples_with_distinct_elements(test_list):\n    result = []\n    for sub in test_list:\n        if sub[0] != sub[1]:\n            result.append(sub)\n    return list(set(result))", "task_id": "400_efd3f41e-bfdd-4fbf-8999-decf8fe2c117", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of n modulo p.", "code": "def factorial_modp(n, p):\n    result = 1\n    for i in range(1, n + 1):\n        result = (result * i) % p\n    return result", "task_id": "402_bc206719-1c8d-441b-b60d-edac7201e1dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute (x^y) % p.", "code": "def power_modp(x, y, p):\n    result = 1\n    x = x % p\n    while y > 0:\n        if y % 2 == 1:\n            result = (result * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return result", "task_id": "402_d8ae74ca-c082-4b0f-9b52-6d7cdf4ca435", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (gcd) of a and b modulo p.", "code": "def gcd_modp(a, b, p):\n    while b != 0:\n        a, b = b, a % b\n    return a % p", "task_id": "402_2963de86-23d9-4918-bc1d-b88d31f15c33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number modulo p.", "code": "def fibonacci_modp(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % p\n    return b", "task_id": "402_5875fb3f-b2cf-475e-a2b6-93a82a773ce3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of squares of the first n natural numbers modulo p.", "code": "def sum_of_squares_modp(n, p):\n    return (n * (n + 1) * (2 * n + 1) // 6) % p", "task_id": "402_c2c004f0-92c7-49cf-872c-ec3f799a9a18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of cubes of the first n natural numbers modulo p.", "code": "def sum_of_cubes_modp(n, p):\n    sum_n = n * (n + 1) // 2\n    return (sum_n * sum_n) % p", "task_id": "402_47dbbb78-12c6-482c-903b-2fd98721fe62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the product of elements in an array modulo p.", "code": "def product_of_array_modp(arr, p):\n    result = 1\n    for num in arr:\n        result = (result * num) % p\n    return result", "task_id": "402_9dda189c-f7e7-4e8b-ad87-3b0b0ac33160", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of elements in an array modulo p.", "code": "def sum_of_array_modp(arr, p):\n    result = 0\n    for num in arr:\n        result = (result + num) % p\n    return result", "task_id": "402_2422ec5b-d6ab-4b31-a240-8ce9550fd3d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the modular inverse of a under modulo p.", "code": "def inverse_modp(a, p):\n    return pow(a, p - 2, p)", "task_id": "402_e7016609-b9fa-4806-ae30-d306fc4ba8ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the least common multiple (LCM) of a and b modulo p.", "code": "def lcm_modp(a, b, p):\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return (a * b // gcd(a, b)) % p", "task_id": "402_26552762-dee9-4222-99fe-f27f8c8a2763", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if an email address is valid or not using regex.", "code": "import re\n\ndef is_valid_email(email: str) -> bool:\n    regex = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(regex, email) is not None", "task_id": "403_b8b47783-5771-4ba5-a053-8ea16bf5f99c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a phone number is valid or not using regex. Assume valid phone numbers are in the format (123) 456-7890.", "code": "import re\n\ndef is_valid_phone_number(phone: str) -> bool:\n    regex = r'^\\(\\d{3}\\) \\d{3}-\\d{4}$'\n    return re.match(regex, phone) is not None", "task_id": "403_5c5024fb-b0ad-4882-956d-79be90689d5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a date is valid or not using regex. Assume valid dates are in the format YYYY-MM-DD.", "code": "import re\n\ndef is_valid_date(date: str) -> bool:\n    regex = r'^\\d{4}-\\d{2}-\\d{2}$'\n    return re.match(regex, date) is not None", "task_id": "403_9d7bc5f5-1979-44ab-9557-2fe841f57e4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a time is valid or not using regex. Assume valid times are in the format HH:MM.", "code": "import re\n\ndef is_valid_time(time: str) -> bool:\n    regex = r'^\\d{2}:\\d{2}$'\n    return re.match(regex, time) is not None", "task_id": "403_646dabe5-2369-42dc-af60-b3739fc4d9c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a hexadecimal color code is valid or not using regex. Assume valid hex color codes start with a '#' followed by exactly 6 hexadecimal digits.", "code": "import re\n\ndef is_valid_hex_color(color: str) -> bool:\n    regex = r'^#[0-9A-Fa-f]{6}$'\n    return re.match(regex, color) is not None", "task_id": "403_c3efe528-a431-4ee1-b99f-132e3e3ca132", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a credit card number is valid or not using regex. Assume valid credit card numbers are 16 digits long.", "code": "import re\n\ndef is_valid_credit_card(card: str) -> bool:\n    regex = r'^\\d{16}$'\n    return re.match(regex, card) is not None", "task_id": "403_9799b79c-d7ac-41ef-8882-80ed0ad6cbcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if an IP address is valid or not using regex. Assume valid IP addresses are in the format XXX.XXX.XXX.XXX where XXX is a number between 0 and 255.", "code": "import re\n\ndef is_valid_ip_address(ip: str) -> bool:\n    regex = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return re.match(regex, ip) is not None", "task_id": "403_0e38dac2-dfe7-463d-a7b9-e255282c8802", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a postal code is valid or not using regex. Assume valid postal codes are 5 digits long.", "code": "import re\n\ndef is_valid_postal_code(code: str) -> bool:\n    regex = r'^\\d{5}$'\n    return re.match(regex, code) is not None", "task_id": "403_9982f0a5-7d25-4d9a-aba8-4386aceaf894", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a password is valid or not using regex. Assume valid passwords are at least 8 characters long and contain at least one uppercase letter, one lowercase letter, and one digit.", "code": "import re\n\ndef is_valid_password(password: str) -> bool:\n    regex = r'^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$'\n    return re.match(regex, password) is not None", "task_id": "403_414fab1b-310e-4fc9-a56b-b022cfe1d4a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a username is valid or not using regex. Assume valid usernames are alphanumeric and between 3 and 16 characters long.", "code": "import re\n\ndef is_valid_username(username: str) -> bool:\n    regex = r'^[a-zA-Z0-9]{3,16}$'\n    return re.match(regex, username) is not None", "task_id": "403_1c529035-e064-4254-ba95-b5365b293072", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of two numbers.", "code": "def maximum(a: int, b: int) -> int:\n    if a >= b:\n        return a\n    else:\n        return b", "task_id": "404_36a15b20-73a8-43ca-85d9-99184ba74666", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "404_fb7a3ff2-9964-46e4-9f93-8a9b8f81a196", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "404_ae7764d6-c23c-447a-ae95-bce0e8cda866", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the absolute difference between two numbers.", "code": "def absolute_difference(a: int, b: int) -> int:\n    return abs(a - b)", "task_id": "404_3d205ed7-867a-46a8-8cd5-2951323a1e1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "404_8ffeb91c-0c8a-4af7-9966-e37985636817", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is odd.", "code": "def is_odd(n: int) -> bool:\n    return n % 2 != 0", "task_id": "404_3a42ef60-52b4-4908-bd52-0ffc8400a737", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of two numbers.", "code": "def sum_of_two(a: int, b: int) -> int:\n    return a + b", "task_id": "404_05f22119-3063-4da3-ae35-01cabb731116", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of two numbers.", "code": "def product_of_two(a: int, b: int) -> int:\n    return a * b", "task_id": "404_71b24bb7-afc4-4579-b540-c3b10eb807fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "404_fece8b2d-573f-409c-a579-4c2ed11eaa6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "404_44a05296-16a5-4a9c-802d-33259af88b22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is even.", "code": "def is_even(x: int) -> bool:\n    return x % 2 == 0", "task_id": "406_2998ac00-7f30-4f96-8e0b-b18695877314", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is odd.", "code": "def is_odd(x: int) -> bool:\n    return x % 2 != 0", "task_id": "406_5e548194-769c-45af-9dbb-f0242950f7a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(x: int) -> bool:\n    if x <= 1:\n        return False\n    for i in range(2, int(x**0.5) + 1):\n        if x % i == 0:\n            return False\n    return True", "task_id": "406_f218ab1d-8075-4ad0-b2a1-291c3bb8b5ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a given number.", "code": "def factorial(x: int) -> int:\n    if x == 0:\n        return 1\n    result = 1\n    for i in range(1, x + 1):\n        result *= i\n    return result", "task_id": "406_e24d96db-b031-4c2b-8d6c-e8214612e44f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "406_119e7685-fa06-42f7-8d6c-1eaaf2ee0d93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(x: int) -> int:\n    return sum(int(digit) for digit in str(x))", "task_id": "406_1b06c1c1-4497-4300-9dbc-a1e96df792fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(x: int) -> int:\n    return int(str(x)[::-1])", "task_id": "406_1709927f-6b8d-48b1-a843-f98e9022f47a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(x: int) -> bool:\n    return str(x) == str(x)[::-1]", "task_id": "406_1c60dd25-6e75-4ddf-b6db-b97988e12593", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "406_147b4525-0935-436f-b850-e51564e0e88e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "406_afa6768c-3bf1-4cd3-b2af-5d332e1a217c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a list.", "code": "def check_list_element(lst, element):\n    return element in lst", "task_id": "405_91b8744e-25b3-4bcd-b16e-608560ea2397", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a key exists within a dictionary.", "code": "def check_dict_key(d, key):\n    return key in d", "task_id": "405_8c83ee64-7cb8-4c6f-9f16-0ae3d0d7cbe4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a set.", "code": "def check_set_element(s, element):\n    return element in s", "task_id": "405_2f554193-a6c6-45af-9fb1-aca3dbb03607", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a substring exists within a string.", "code": "def check_string_substring(s, substring):\n    return substring in s", "task_id": "405_3d6f8feb-e3ae-48b4-87dd-8a6b75efe2e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a dictionary with a specific key-value pair exists within a list of dictionaries.", "code": "def check_list_of_dicts(lst, key, value):\n    return any(d.get(key) == value for d in lst)", "task_id": "405_471e532e-b48f-46a8-b014-a10afd24d2b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether an element exists within a nested list.", "code": "def check_nested_list(lst, element):\n    return any(element in sublist for sublist in lst)", "task_id": "405_4c09abbb-1ef0-4f22-b98d-999b50480211", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specific inner tuple exists within a tuple of tuples.", "code": "def check_tuple_of_tuples(t, inner_tuple):\n    return inner_tuple in t", "task_id": "405_7b445b20-95dc-421f-9c03-b6de8ec7ce20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specific inner tuple exists within a list of tuples.", "code": "def check_list_of_tuples(lst, inner_tuple):\n    return inner_tuple in lst", "task_id": "405_49bff1e3-64a2-45db-9199-4508649ff782", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specific value exists within a dictionary.", "code": "def check_dict_value(d, value):\n    return value in d.values()", "task_id": "405_45e6a29e-8357-472f-b2bf-83b02b042c14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specific sublist exists within a list of lists.", "code": "def check_list_of_lists(lst, sublist):\n    return sublist in lst", "task_id": "405_8497f626-3a9d-48a8-88d9-e8d6c22646fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the digits of a given number.", "code": "def reverse_digits(n: int) -> int:\n    return int(str(n)[::-1])", "task_id": "407_c9cb674a-b749-45d4-a5a8-1d78d4b927e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]", "task_id": "407_88cb500f-c9cd-49f1-ae32-501ce65d3996", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "407_91b71edb-d185-4325-9576-018fbf376364", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the product of the digits of a given number.", "code": "def product_of_digits(n: int) -> int:\n    product = 1\n    for digit in str(n):\n        product *= int(digit)\n    return product", "task_id": "407_6ad214c6-45db-4d29-ab18-13d06bf69628", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "407_4ddff2b9-7db0-405a-8fa5-1d8bed54a0d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the next prime number greater than a given number.", "code": "def next_prime(n: int) -> int:\n    def is_prime(x):\n        if x <= 1:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    n += 1\n    while not is_prime(n):\n        n += 1\n    return n", "task_id": "407_21396873-6b7a-406a-9393-7599ef0c5f8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "407_32eaad56-3400-41f9-86bc-09f449daa949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "407_8117b402-0564-424e-9930-a4623e76a3a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is an Armstrong number.", "code": "def is_armstrong(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)", "task_id": "407_7ffa3b7f-a2a1-41a1-9d8a-70cb3f9973db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "407_e8964959-f1c0-4a56-8edf-0d925d70d727", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum integer value in a given heterogeneous list.", "code": "def max_val(listval):\n    max_val = max(i for i in listval if isinstance(i, int))\n    return max_val", "task_id": "410_572e12f8-9bf9-4edf-b140-b62af115d9dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a given heterogeneous list.", "code": "def sum_integers(listval):\n    total = sum(i for i in listval if isinstance(i, int))\n    return total", "task_id": "410_9b9c0319-8339-4d63-abc1-8ffac7c36d04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of string elements in a given heterogeneous list.", "code": "def count_strings(listval):\n    count = sum(1 for i in listval if isinstance(i, str))\n    return count", "task_id": "410_3d594e09-3031-4ebc-b26a-c75424a477d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all string elements in a given heterogeneous list.", "code": "def concat_strings(listval):\n    result = ''.join(i for i in listval if isinstance(i, str))\n    return result", "task_id": "410_986566a9-3ac4-4318-8fb6-aa0c6206112e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of all integer values in a given heterogeneous list.", "code": "def average_integers(listval):\n    integers = [i for i in listval if isinstance(i, int)]\n    return sum(integers) / len(integers) if integers else 0", "task_id": "410_88832d7d-f410-404b-9e8a-32c42f90e226", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum length of string elements in a given heterogeneous list.", "code": "def min_string_length(listval):\n    min_length = min(len(i) for i in listval if isinstance(i, str))\n    return min_length", "task_id": "410_1c9aff4a-1f5a-4193-ac3c-58b2ad914161", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum length of string elements in a given heterogeneous list.", "code": "def max_string_length(listval):\n    max_length = max(len(i) for i in listval if isinstance(i, str))\n    return max_length", "task_id": "410_8602a230-7ad4-4dd0-9fb5-ccd4d5ae06c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of boolean elements in a given heterogeneous list.", "code": "def count_booleans(listval):\n    count = sum(1 for i in listval if isinstance(i, bool))\n    return count", "task_id": "410_9446e03e-08b4-4082-b3bf-5d0e6fc0d7b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all float values in a given heterogeneous list.", "code": "def sum_floats(listval):\n    total = sum(i for i in listval if isinstance(i, float))\n    return total", "task_id": "410_2b8179ce-5cf0-4fc9-88f0-a87c3d5a8626", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of None elements in a given heterogeneous list.", "code": "def count_none(listval):\n    count = sum(1 for i in listval if i is None)\n    return count", "task_id": "410_485164ff-3782-48f0-9f66-e5b45af4996f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum from the pairs of tuples within a given list.", "code": "def max_sum_tuple(list1):\n    result_max = max([x + y for x, y in list1])\n    return result_max", "task_id": "409_4958c67a-8cd6-480d-9dd2-49eabcaf6988", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum from the pairs of tuples within a given list.", "code": "def min_sum_tuple(list1):\n    result_min = min([x + y for x, y in list1])\n    return result_min", "task_id": "409_3238fef2-2830-444a-a700-6c3159178aa2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product from the pairs of tuples within a given list.", "code": "def max_product_tuple(list1):\n    result_max = max([x * y for x, y in list1])\n    return result_max", "task_id": "409_e35feb76-e03d-4341-a916-9ede87097d87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares from the pairs of tuples within a given list.", "code": "def sum_of_squares_tuple(list1):\n    result_sum = sum([x**2 + y**2 for x, y in list1])\n    return result_sum", "task_id": "409_2785c083-af21-4acb-8238-8c776c0d24ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum absolute difference from the pairs of tuples within a given list.", "code": "def min_difference_tuple(list1):\n    result_min = min([abs(x - y) for x, y in list1])\n    return result_min", "task_id": "409_1309b0b3-487c-449d-8197-f637d478ac28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute difference from the pairs of tuples within a given list.", "code": "def max_difference_tuple(list1):\n    result_max = max([abs(x - y) for x, y in list1])\n    return result_max", "task_id": "409_392aa087-ebaf-4c4c-982f-dab58ffe64bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of products from the pairs of tuples within a given list.", "code": "def sum_of_products_tuple(list1):\n    result_sum = sum([x * y for x, y in list1])\n    return result_sum", "task_id": "409_2b920b80-04d3-4ee4-9799-ba791bd65cc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of squares from the pairs of tuples within a given list.", "code": "def min_sum_of_squares_tuple(list1):\n    result_min = min([x**2 + y**2 for x, y in list1])\n    return result_min", "task_id": "409_43fc08c1-761f-4064-923f-a9ec0e6d73a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of squares from the pairs of tuples within a given list.", "code": "def max_sum_of_squares_tuple(list1):\n    result_max = max([x**2 + y**2 for x, y in list1])\n    return result_max", "task_id": "409_21e2e01e-2894-4fb9-882a-44b1f2379340", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of cubes from the pairs of tuples within a given list.", "code": "def min_sum_of_cubes_tuple(list1):\n    result_min = min([x**3 + y**3 for x, y in list1])\n    return result_min", "task_id": "409_4c0b8679-5406-4b5f-bcd8-e315545dd9b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given camel case string to snake case string by using regex.", "code": "import re\n\ndef camel_to_snake(word):\n    return re.sub(r'(?<!^)(?=[A-Z])', '_', word).lower()", "task_id": "411_25dd93f5-ea16-4042-9216-12d8af3b051c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given kebab case string to snake case string by using regex.", "code": "import re\n\ndef kebab_to_snake(word):\n    return word.replace('-', '_')", "task_id": "411_31b0077c-2df7-4441-aaf9-46fddc4734fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given snake case string to kebab case string by using regex.", "code": "import re\n\ndef snake_to_kebab(word):\n    return word.replace('_', '-')", "task_id": "411_508e06db-5cb3-49bd-9d8f-f2f933aa9471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given camel case string to kebab case string by using regex.", "code": "import re\n\ndef camel_to_kebab(word):\n    return re.sub(r'(?<!^)(?=[A-Z])', '-', word).lower()", "task_id": "411_acad00e7-add0-48d5-80ec-d76a92c9698b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the words in a given sentence.", "code": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])", "task_id": "411_1b0fe2f1-e308-4add-bac2-d8e956f50322", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(word):\n    return re.sub(r'[aeiouAEIOU]', '', word)", "task_id": "411_af19e61e-258e-45c4-8337-13b4ae009bf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(word):\n    return len(re.findall(r'[aeiouAEIOU]', word))", "task_id": "411_4b9fd692-11fb-43b1-883c-7d7e2f5d3c55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given sentence.", "code": "def capitalize_words(sentence):\n    return ' '.join(word.capitalize() for word in sentence.split())", "task_id": "411_b7100da5-f28f-4f48-9423-4565e580e03c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(word):\n    return word == word[::-1]", "task_id": "411_e051f71e-0b52-40d7-a121-bf5e54efcf68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a given list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "411_5d6339ac-24cc-4e0f-86c1-570680e453c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove even numbers from a given list.", "code": "def remove_even(nums):\n    return [num for num in nums if num % 2 != 0]", "task_id": "412_e15e9a53-834b-4e44-961d-98b7a358855f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove negative numbers from a given list.", "code": "def remove_negatives(nums):\n    return [num for num in nums if num >= 0]", "task_id": "412_f4807088-9c5f-497e-bc21-24caf8b6b239", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove numbers that are multiples of 5 from a given list.", "code": "def remove_multiples_of_five(nums):\n    return [num for num in nums if num % 5 != 0]", "task_id": "412_78178580-6874-411a-a0c2-fa2a480612b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove zeros from a given list.", "code": "def remove_zeros(nums):\n    return [num for num in nums if num != 0]", "task_id": "412_c93ae8a8-63ae-447d-9966-9ec3e38b386f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove numbers greater than 10 from a given list.", "code": "def remove_greater_than_ten(nums):\n    return [num for num in nums if num <= 10]", "task_id": "412_abfa23f7-3e0d-41a5-b033-8b33410fd159", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "412_46cca3ae-8881-4ec2-a1d7-696f42db717f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate numbers from a given list.", "code": "def remove_duplicates(nums):\n    return list(set(nums))", "task_id": "412_45fd6004-dc96-4519-9c44-cfedbbeca885", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove words with fewer than 4 characters from a given list.", "code": "def remove_short_words(words):\n    return [word for word in words if len(word) >= 4]", "task_id": "412_9419eded-94c4-4108-bb1f-b56ef4568a91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove uppercase letters from a given string.", "code": "def remove_uppercase(s):\n    return ''.join([char for char in s if not char.isupper()])", "task_id": "412_dacf89e8-88bf-408a-a927-deff8110844f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove non-alphabetic characters from a given string.", "code": "def remove_non_alpha(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "412_9a18e657-6189-4bce-9c03-72c612746f25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given integer value exists in a list or not.", "code": "def contains_value(sequence: list, value: int) -> bool:\n    return value in sequence", "task_id": "414_dd278740-82d2-469c-ac9b-e62fe8bc08e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all common elements between two lists.", "code": "def common_elements(list1: list, list2: list) -> list:\n    return [element for element in list1 if element in list2]", "task_id": "414_db844d4a-d63e-409d-934f-aee8a9f6df2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given integer value in a list.", "code": "def count_occurrences(sequence: list, value: int) -> int:\n    return sequence.count(value)", "task_id": "414_2035d0e6-1bb7-4085-903a-e9c1b56eec85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of unique elements from the input list.", "code": "def unique_elements(sequence: list) -> list:\n    return list(set(sequence))", "task_id": "414_f2259545-aee0-425b-b8f1-7723fa8197c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum value in a list of integers.", "code": "def find_max(sequence: list) -> int:\n    return max(sequence)", "task_id": "414_0bb36edf-4022-4d17-8efc-ec095bfab5c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum value in a list of integers.", "code": "def find_min(sequence: list) -> int:\n    return min(sequence)", "task_id": "414_8d075696-e040-4825-ac6d-1542818b0187", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements of a list.", "code": "def reverse_list(sequence: list) -> list:\n    return sequence[::-1]", "task_id": "414_a59529f7-b54e-4f04-ba71-9fe54d52bfd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of all elements in a list.", "code": "def sum_elements(sequence: list) -> int:\n    return sum(sequence)", "task_id": "414_707239d7-d85a-4d44-991b-e53715c86431", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of all elements in a list.", "code": "def product_elements(sequence: list) -> int:\n    product = 1\n    for element in sequence:\n        product *= element\n    return product", "task_id": "414_0d9b7837-17ae-4831-9ae5-18d41dddf86b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a list of integers is sorted in ascending order.", "code": "def is_sorted(sequence: list) -> bool:\n    return sequence == sorted(sequence)", "task_id": "414_0e255a01-7a2e-49f0-8a89-f67fb4904205", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the last element from each tuple in a given list of tuples.", "code": "def extract_last_element(list1):\n    result = [x[-1] for x in list1]\n    return result", "task_id": "413_a13314be-24ed-4250-97dc-ba6b67161ff7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the first element from each tuple in a given list of tuples.", "code": "def extract_first_element(list1):\n    result = [x[0] for x in list1]\n    return result", "task_id": "413_022088fc-b57b-40d4-97fc-a94695e59ef7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each tuple in a given list of tuples that are greater than a given number n.", "code": "def extract_elements_greater_than_n(list1, n):\n    result = [[elem for elem in x if elem > n] for x in list1]\n    return result", "task_id": "413_4bdd59e2-56db-4938-b6e0-40a6abe37fe3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from each tuple in a given list of tuples that are less than a given number n.", "code": "def extract_elements_less_than_n(list1, n):\n    result = [[elem for elem in x if elem < n] for x in list1]\n    return result", "task_id": "413_6b6e95d2-614e-4163-90c1-759b945a1197", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the nth element from each tuple in a nested list of tuples.", "code": "def extract_element_from_nested_list(list1, n):\n    result = [[x[n] for x in sublist] for sublist in list1]\n    return result", "task_id": "413_774563bf-dc76-40b1-8621-8c7716702d98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements at even indices from each tuple in a given list of tuples.", "code": "def extract_even_index_elements(list1):\n    result = [[x[i] for i in range(len(x)) if i % 2 == 0] for x in list1]\n    return result", "task_id": "413_d713e269-ada7-4865-a499-ef7fe9870ad2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements at odd indices from each tuple in a given list of tuples.", "code": "def extract_odd_index_elements(list1):\n    result = [[x[i] for i in range(len(x)) if i % 2 != 0] for x in list1]\n    return result", "task_id": "413_18d0979e-abbb-4f12-91fc-5f317d4741b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that start with a vowel from each tuple in a given list of tuples.", "code": "def extract_elements_starting_with_vowel(list1):\n    vowels = 'AEIOUaeiou'\n    result = [[elem for elem in x if str(elem)[0] in vowels] for x in list1]\n    return result", "task_id": "413_59143dfd-a8d3-438a-bdfc-9af6f7ef37c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements that end with a vowel from each tuple in a given list of tuples.", "code": "def extract_elements_ending_with_vowel(list1):\n    vowels = 'AEIOUaeiou'\n    result = [[elem for elem in x if str(elem)[-1] in vowels] for x in list1]\n    return result", "task_id": "413_29ff498c-b2a3-48c7-8bf8-b682dd799b80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements of length n from each tuple in a given list of tuples.", "code": "def extract_elements_of_length_n(list1, n):\n    result = [[elem for elem in x if len(str(elem)) == n] for x in list1]\n    return result", "task_id": "413_0057126b-0ff6-4b90-9b68-e59e0a552837", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-(nums1[i] + nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_c5f36a2c-a869-4320-b7d7-9ee87bde87e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the product of the pairs is the smallest.", "code": "import heapq\n\ndef k_smallest_pairs_product(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [nums1[i] * nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_f66643ae-3e17-4896-a987-861a4a07a432", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the product of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs_product(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-(nums1[i] * nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_b1ef0e1f-1094-4506-a18a-be53a4652067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is closest to a given target.", "code": "import heapq\n\ndef k_closest_pairs(nums1, nums2, k, target):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [abs(nums1[i] + nums2[j] - target), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_4a7a27c7-4471-4a98-bace-c4da809d5eb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is furthest from a given target.", "code": "import heapq\n\ndef k_furthest_pairs(nums1, nums2, k, target):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-abs(nums1[i] + nums2[j] - target), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_f1e3fdc7-7f7e-41be-bc2e-d2066a7517ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the absolute difference of the pairs is the smallest.", "code": "import heapq\n\ndef k_smallest_pairs_diff(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [abs(nums1[i] - nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_c5030927-c6a9-4df5-a548-93970a435e22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the absolute difference of the pairs is the largest.", "code": "import heapq\n\ndef k_largest_pairs_diff(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2):\n            heapq.heappush(queue, [-abs(nums1[i] - nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_b9574816-c7cc-4082-987a-e567f0dc4c9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the smallest and the sum is even.", "code": "import heapq\n\ndef k_smallest_pairs_sum_even(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and (nums1[i] + nums2[j]) % 2 == 0:\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_7ecbad1a-0fc7-480c-8252-20f599e13453", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the largest and the sum is odd.", "code": "import heapq\n\ndef k_largest_pairs_sum_odd(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and (nums1[i] + nums2[j]) % 2 != 0:\n            heapq.heappush(queue, [-(nums1[i] + nums2[j]), i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_67bbbabd-f678-43a8-8b85-2b6a232bec0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array, such that the sum of the pairs is the smallest and the sum is a prime number.", "code": "import heapq\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef k_smallest_pairs_sum_prime(nums1, nums2, k):\n    queue = []\n    def push(i, j):\n        if i < len(nums1) and j < len(nums2) and is_prime(nums1[i] + nums2[j]):\n            heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\n    push(0, 0)\n    pairs = []\n    while queue and len(pairs) < k:\n        _, i, j = heapq.heappop(queue)\n        pairs.append([nums1[i], nums2[j]])\n        push(i, j + 1)\n        if j == 0:\n            push(i + 1, 0)\n    return pairs", "task_id": "408_392aa731-f0c4-4bd3-86a1-c396154c6132", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of all numbers from 1 to n.", "code": "def sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))", "task_id": "416_22c57d17-bb52-4bef-bb67-48d3ae52beb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of all numbers from 1 to n.", "code": "def sum_of_cubes(n):\n    return sum(i**3 for i in range(1, n+1))", "task_id": "416_06ecf545-4740-4cc9-a56a-c4ca8a1c4ffd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "416_eace88a8-64e7-41ae-beb4-9afc2fbfddfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "416_6f8de2e4-0987-4524-9e10-2f532ca20d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "416_2ed436a0-2396-47a8-9d40-49304c82068b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "416_6881c161-d06d-4db2-9d6d-5563b2e3e4ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "416_d8038047-d231-4c5d-8722-409007d52fca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "416_a79df007-257a-4ef7-b956-021c190a447d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "416_add7a1b8-6bef-4e2b-9409-0c254867a6e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "416_9f6abd6b-3916-4904-adf1-ec7e7a5b9612", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common last element in given list of tuple.", "code": "def common_last_element(tuples):\n    out = {}\n    for elem in tuples:\n        try:\n            out[elem[-1]].extend(elem[:-1])\n        except KeyError:\n            out[elem[-1]] = list(elem)\n    return [tuple(values) for values in out.values()]", "task_id": "417_ebb9e06e-2e1b-4ca0-b261-003bc43c05fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group tuples by their second element.", "code": "def group_by_second_element(tuples):\n    out = {}\n    for elem in tuples:\n        try:\n            out[elem[1]].extend(elem[:1] + elem[2:])\n        except KeyError:\n            out[elem[1]] = list(elem)\n    return [tuple(values) for values in out.values()]", "task_id": "417_2620945a-704d-48cd-97b8-438d1c525f75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the first elements of tuples grouped by their second element.", "code": "def sum_first_elements(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[1] in out:\n            out[elem[1]] += elem[0]\n        else:\n            out[elem[1]] = elem[0]\n    return out", "task_id": "417_cf26d1bf-e58a-4079-89b0-db41f8533b6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate strings from tuples grouped by their first element.", "code": "def concatenate_strings(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] += elem[1]\n        else:\n            out[elem[0]] = elem[1]\n    return out", "task_id": "417_39381477-ddb6-4437-8f44-c4ebbe39bb37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of elements in tuples grouped by their first element.", "code": "def product_of_elements(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] *= elem[1]\n        else:\n            out[elem[0]] = elem[1]\n    return out", "task_id": "417_0c203786-9206-444d-8dc9-882a31272556", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of second elements in tuples grouped by their first element.", "code": "def average_of_second_elements(tuples):\n    out = {}\n    count = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] += elem[1]\n            count[elem[0]] += 1\n        else:\n            out[elem[0]] = elem[1]\n            count[elem[0]] = 1\n    for key in out:\n        out[key] /= count[key]\n    return out", "task_id": "417_156dbcf2-f6fe-41ed-9573-9951f17efe6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum second element in tuples grouped by their first element.", "code": "def max_second_element(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] = max(out[elem[0]], elem[1])\n        else:\n            out[elem[0]] = elem[1]\n    return out", "task_id": "417_3b1f92c0-af0b-4630-8247-ae27ab738e37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum second element in tuples grouped by their first element.", "code": "def min_second_element(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] = min(out[elem[0]], elem[1])\n        else:\n            out[elem[0]] = elem[1]\n    return out", "task_id": "417_8ee657ca-c799-4d4a-af05-dc9c3ba0641d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of each first element in the list of tuples.", "code": "def count_occurrences(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]] += 1\n        else:\n            out[elem[0]] = 1\n    return out", "task_id": "417_a4c3de99-3341-4ee1-85d6-aee5a2befdcd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find unique second elements in tuples grouped by their first element.", "code": "def unique_second_elements(tuples):\n    out = {}\n    for elem in tuples:\n        if elem[0] in out:\n            out[elem[0]].add(elem[1])\n        else:\n            out[elem[0]] = {elem[1]}\n    return {key: list(values) for key, values in out.items()}", "task_id": "417_51caba94-b8e5-4634-8326-36fa178726e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with highest sum from a given array of integers.", "code": "def max_Sum(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] + arr[j] > x + y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "415_f1b4f966-d2cd-484f-a9a8-3fadea33e055", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with lowest product from a given array of integers.", "code": "def min_Product(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] * arr[j] < x * y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "415_70fda33f-7c51-44d5-a900-5cbe9cf14f47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest difference (absolute value) from a given array of integers.", "code": "def max_Difference(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (abs(arr[i] - arr[j]) > abs(x - y)): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "415_1ea5acb0-9462-4d0f-8840-6f230f7d54ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the lowest sum from a given array of integers.", "code": "def min_Sum(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] + arr[j] < x + y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "415_e1b21c00-85fa-42e1-86b6-2c867f982e13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest sum from a given array of integers such that the sum is even.", "code": "def max_Sum_Even(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    found = False \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if ((arr[i] + arr[j]) % 2 == 0 and (not found or arr[i] + arr[j] > x + y)): \n                x = arr[i]; y = arr[j] \n                found = True \n    return (x,y) if found else ('No pairs with even sum exists')", "task_id": "415_57f4a7e5-7315-4add-ae5c-c3a8b698e3ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest product from a given array of integers such that the product is odd.", "code": "def max_Product_Odd(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    found = False \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if ((arr[i] * arr[j]) % 2 != 0 and (not found or arr[i] * arr[j] > x * y)): \n                x = arr[i]; y = arr[j] \n                found = True \n    return (x,y) if found else ('No pairs with odd product exists')", "task_id": "415_bde0d0ab-7710-4a8b-8f2b-e3cb42959c79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest sum from a given array of integers such that both elements are positive.", "code": "def max_Sum_Positive(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    found = False \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] > 0 and arr[j] > 0 and (not found or arr[i] + arr[j] > x + y)): \n                x = arr[i]; y = arr[j] \n                found = True \n    return (x,y) if found else ('No pairs with positive sum exists')", "task_id": "415_cff47aab-abf1-4d2d-a951-398b7b7b1161", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the lowest difference (absolute value) from a given array of integers.", "code": "def min_Difference(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (abs(arr[i] - arr[j]) < abs(x - y)): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "415_a81e09f3-1b1f-41f8-a25a-2a6c8415f91f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest product from a given array of integers such that both elements are negative.", "code": "def max_Product_Negative(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    found = False \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if (arr[i] < 0 and arr[j] < 0 and (not found or arr[i] * arr[j] > x * y)): \n                x = arr[i]; y = arr[j] \n                found = True \n    return (x,y) if found else ('No pairs with negative product exists')", "task_id": "415_8f1bf388-0422-4f4f-b64b-b705df2e82f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair with the highest sum from a given array of integers such that the sum is divisible by 3.", "code": "def max_Sum_Divisible_By_Three(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return ('No pairs exists') \n    x = arr[0]; y = arr[1] \n    found = False \n    for i in range(0,arr_len): \n        for j in range(i + 1,arr_len): \n            if ((arr[i] + arr[j]) % 3 == 0 and (not found or arr[i] + arr[j] > x + y)): \n                x = arr[i]; y = arr[j] \n                found = True \n    return (x,y) if found else ('No pairs with sum divisible by 3 exists')", "task_id": "415_71341609-fab5-4ee2-b0a2-c8c83675a5ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers, square each rounded number, and return the total sum of these squared numbers.", "code": "def round_and_sum_squared(list1):\n    rounded_numbers = [round(num) for num in list1]\n    squared_numbers = [num ** 2 for num in rounded_numbers]\n    return sum(squared_numbers)", "task_id": "419_337558f3-c3aa-44bc-a08c-8647f76463f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers, filter out the negative numbers, and return the total sum of the remaining numbers.", "code": "def round_and_sum_negatives(list1):\n    rounded_numbers = [round(num) for num in list1]\n    positive_numbers = [num for num in rounded_numbers if num >= 0]\n    return sum(positive_numbers)", "task_id": "419_a4054236-4012-43bc-81aa-7143b567df68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the count of even numbers in the list.", "code": "def round_and_count_evens(list1):\n    rounded_numbers = [round(num) for num in list1]\n    even_numbers = [num for num in rounded_numbers if num % 2 == 0]\n    return len(even_numbers)", "task_id": "419_5d4da906-be96-4623-a48b-8857677b5a41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the total sum of the odd numbers in the list.", "code": "def round_and_sum_odds(list1):\n    rounded_numbers = [round(num) for num in list1]\n    odd_numbers = [num for num in rounded_numbers if num % 2 != 0]\n    return sum(odd_numbers)", "task_id": "419_27ddcb08-6767-4bf1-96de-3f3b54cb7725", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the product of all the rounded numbers.", "code": "def round_and_product(list1):\n    rounded_numbers = [round(num) for num in list1]\n    product = 1\n    for num in rounded_numbers:\n        product *= num\n    return product", "task_id": "419_f3d10a63-7603-497b-8bae-d711b4f7cc07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the average of the rounded numbers.", "code": "def round_and_average(list1):\n    rounded_numbers = [round(num) for num in list1]\n    return sum(rounded_numbers) / len(rounded_numbers)", "task_id": "419_cfd892b4-6b14-4d7e-81de-ab7d638cefd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the maximum rounded number.", "code": "def round_and_max(list1):\n    rounded_numbers = [round(num) for num in list1]\n    return max(rounded_numbers)", "task_id": "419_79f897a0-c3f0-460b-88dd-dba80b0b3537", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers and return the minimum rounded number.", "code": "def round_and_min(list1):\n    rounded_numbers = [round(num) for num in list1]\n    return min(rounded_numbers)", "task_id": "419_d743535c-7db7-4006-bffc-fe34352f679d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers, take the absolute value of each rounded number, and return the total sum of these absolute values.", "code": "def round_and_sum_abs(list1):\n    rounded_numbers = [round(num) for num in list1]\n    abs_numbers = [abs(num) for num in rounded_numbers]\n    return sum(abs_numbers)", "task_id": "419_e18aa819-e501-468e-b801-8750f885e105", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round every number of a given list of numbers, sum the digits of each rounded number, and return the total sum of these digit sums.", "code": "def round_and_sum_digits(list1):\n    def sum_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    rounded_numbers = [round(num) for num in list1]\n    digit_sums = [sum_digits(num) for num in rounded_numbers]\n    return sum(digit_sums)", "task_id": "419_e0426c47-8afe-4011-96e2-5a33caeacfc0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum sum.", "code": "def find_max_sum_sublist(lst):\n    max_sum = float('-inf')\n    max_sublist = []\n    for sublist in lst:\n        current_sum = sum(sublist)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_677ffb0c-5139-4b7c-a10f-a9b284d0d1db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the minimum length.", "code": "def find_min_length_sublist(lst):\n    min_length = float('inf')\n    min_sublist = []\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n    return min_sublist", "task_id": "418_c6bba529-35e6-495e-870b-1fd8a8f92756", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum product of its elements.", "code": "def find_max_product_sublist(lst):\n    def product(sublist):\n        result = 1\n        for num in sublist:\n            result *= num\n        return result\n    max_product = float('-inf')\n    max_sublist = []\n    for sublist in lst:\n        current_product = product(sublist)\n        if current_product > max_product:\n            max_product = current_product\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_0700a5eb-0896-4665-84fc-3bb4028b3dfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum average of its elements.", "code": "def find_max_avg_sublist(lst):\n    max_avg = float('-inf')\n    max_sublist = []\n    for sublist in lst:\n        if sublist:\n            current_avg = sum(sublist) / len(sublist)\n            if current_avg > max_avg:\n                max_avg = current_avg\n                max_sublist = sublist\n    return max_sublist", "task_id": "418_665dc068-5706-4209-982a-950e6c9df22b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing only even numbers.", "code": "def find_max_length_even_sublist(lst):\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if all(num % 2 == 0 for num in sublist) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_b83eb31f-9030-4196-8b26-c8956fd9f630", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing only odd numbers.", "code": "def find_max_length_odd_sublist(lst):\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if all(num % 2 != 0 for num in sublist) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_02820530-7436-45d3-aaf1-c56efb8ebb65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing only prime numbers.", "code": "def find_max_length_prime_sublist(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if all(is_prime(num) for num in sublist) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_6dc629ef-bbcc-425b-8d8b-2f906ba0be35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing only palindrome numbers.", "code": "def find_max_length_palindrome_sublist(lst):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if all(is_palindrome(num) for num in sublist) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_d8cb5dfb-1e50-4702-8d5c-eba5d268861a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing only unique numbers.", "code": "def find_max_length_unique_sublist(lst):\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if len(sublist) == len(set(sublist)) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_c5c157ff-49f6-409c-9102-6a97c4c9928b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length and containing numbers in sorted order.", "code": "def find_max_length_sorted_sublist(lst):\n    max_length = 0\n    max_sublist = []\n    for sublist in lst:\n        if sublist == sorted(sublist) and len(sublist) > max_length:\n            max_length = len(sublist)\n            max_sublist = sublist\n    return max_sublist", "task_id": "418_88d254d0-f063-47dd-a52e-4d103a4735ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def sum_of_squares(n): \n    sum = 0 \n    for i in range(n): \n        sum += (2*i + 1)**2 \n    return sum", "task_id": "420_73c2920f-5a0d-47ee-90d3-55c8c177c480", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n natural numbers.", "code": "def sum_of_cubes(n): \n    sum = 0 \n    for i in range(1, n + 1): \n        sum += i**3 \n    return sum", "task_id": "420_e95fc3e1-d883-49da-b34d-091948af3427", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of first n natural numbers.", "code": "def sum_of_factorials(n): \n    def factorial(x): \n        if x == 0 or x == 1: \n            return 1 \n        else: \n            return x * factorial(x - 1) \n    sum = 0 \n    for i in range(1, n + 1): \n        sum += factorial(i) \n    return sum", "task_id": "420_5ceefe52-3c7e-4a28-8e2b-2bc3da181d3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n even natural numbers.", "code": "def sum_of_even_squares(n): \n    sum = 0 \n    for i in range(1, n + 1): \n        sum += (2*i)**2 \n    return sum", "task_id": "420_114a891e-06b6-4937-a8ef-890fa91e1cf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n odd natural numbers.", "code": "def sum_of_odd_cubes(n): \n    sum = 0 \n    for i in range(n): \n        sum += (2*i + 1)**3 \n    return sum", "task_id": "420_c396a7c3-b901-48cf-9e51-4794de0c53c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n prime numbers.", "code": "def sum_of_squares_of_primes(n): \n    def is_prime(x): \n        if x < 2: \n            return False \n        for i in range(2, int(x**0.5) + 1): \n            if x % i == 0: \n                return False \n        return True \n    sum = 0 \n    count = 0 \n    num = 2 \n    while count < n: \n        if is_prime(num): \n            sum += num**2 \n            count += 1 \n        num += 1 \n    return sum", "task_id": "420_26ac3b5e-9288-45bc-acc6-fe7999b049f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n): \n    if n <= 0: \n        return 0 \n    fib = [0, 1] \n    sum = 1 \n    for i in range(2, n): \n        fib.append(fib[-1] + fib[-2]) \n        sum += fib[-1] \n    return sum", "task_id": "420_b8329f98-1e55-448f-ad0a-842f15c9c49e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n Fibonacci numbers.", "code": "def sum_of_squares_of_fibonacci(n): \n    if n <= 0: \n        return 0 \n    fib = [0, 1] \n    sum = 1 \n    for i in range(2, n): \n        fib.append(fib[-1] + fib[-2]) \n        sum += fib[-1]**2 \n    return sum", "task_id": "420_d77a1baf-d426-43a6-920e-ea12a1b3082e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n powers of 2.", "code": "def sum_of_powers_of_2(n): \n    sum = 0 \n    for i in range(n): \n        sum += 2**i \n    return sum", "task_id": "420_adf2c336-a729-4ef0-94d6-9cdcc031e882", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n powers of 2.", "code": "def sum_of_cubes_of_powers_of_2(n): \n    sum = 0 \n    for i in range(n): \n        sum += (2**i)**3 \n    return sum", "task_id": "420_31a43d3f-8126-486a-9eb9-29468cae60c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter.", "code": "def concat_with_delimiter(tup, delim):\n    res = delim.join(map(str, tup))\n    return res", "task_id": "421_cc581521-cbd8-47b9-b220-72ee27588baf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and then reverse the resulting string.", "code": "def concat_and_reverse(tup, delim):\n    res = delim.join(map(str, tup))\n    return res[::-1]", "task_id": "421_a39ebb4b-64bf-4544-980a-5413e8b3a184", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and add a prefix to the resulting string.", "code": "def concat_with_prefix(tup, delim, prefix):\n    res = delim.join(map(str, tup))\n    return prefix + res", "task_id": "421_582036b3-7a2f-4f04-ae1b-e84076dd48a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and add a suffix to the resulting string.", "code": "def concat_with_suffix(tup, delim, suffix):\n    res = delim.join(map(str, tup))\n    return res + suffix", "task_id": "421_7d3b6ac9-d1c0-465d-861b-4fc87006a971", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by alternating between two given delimiters.", "code": "def concat_alternate(tup, delim1, delim2):\n    res = ''\n    for i, ele in enumerate(tup):\n        res += str(ele) + (delim1 if i % 2 == 0 else delim2)\n    return res[:-len(delim1)] if len(tup) % 2 == 0 else res[:-len(delim2)]", "task_id": "421_ba6e21b0-04af-48fa-85fc-88ef9179e56e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and include the index of each element in the resulting string.", "code": "def concat_with_index(tup, delim):\n    res = delim.join([f'{i}:{ele}' for i, ele in enumerate(tup)])\n    return res", "task_id": "421_f1e897b8-e473-4151-9f60-d9fb62f1ddff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and convert the resulting string to uppercase.", "code": "def concat_and_uppercase(tup, delim):\n    res = delim.join(map(str, tup))\n    return res.upper()", "task_id": "421_83fd5692-9e39-4b1f-b205-b640ac7bf228", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and convert the resulting string to lowercase.", "code": "def concat_and_lowercase(tup, delim):\n    res = delim.join(map(str, tup))\n    return res.lower()", "task_id": "421_10260d4a-7bc2-4732-8128-ecd2fdb79d59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and append the length of the resulting string.", "code": "def concat_with_length(tup, delim):\n    res = delim.join(map(str, tup))\n    return res + delim + str(len(res))", "task_id": "421_e0135018-a095-48c6-9fa2-4c8afbc1cf11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate each element of a tuple by a given delimiter and replace all occurrences of a given substring with another substring in the resulting string.", "code": "def concat_with_replacement(tup, delim, old, new):\n    res = delim.join(map(str, tup))\n    return res.replace(old, new)", "task_id": "421_ada2c1a5-f077-4ef2-bc22-2eef6a85fa72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum", "task_id": "422_d91e7009-9b66-4a31-a7bb-6cebd92b7657", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of first n natural numbers.", "code": "def product_of_first_n(n):\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product", "task_id": "422_457ff4f9-bd9d-4d83-ba05-bb3505162ebd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n odd natural numbers.", "code": "def sum_of_odd_numbers(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i\n    return sum", "task_id": "422_6811144a-d25c-4d75-83b8-88c034d00631", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of first n even natural numbers.", "code": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, 2*n + 1, 2):\n        sum += i\n    return sum", "task_id": "422_e8720374-602c-4f7e-acd2-abaa5f6fab9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    product = 1\n    for i in range(1, n + 1):\n        product *= i\n    return product", "task_id": "422_93d0fc43-8c08-484e-a023-732951a1b73a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number n.", "code": "def sum_of_digits(n):\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n //= 10\n    return sum", "task_id": "422_85557590-d57a-4d71-86eb-f0885424c3e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number n.", "code": "def reverse_number(n):\n    reversed_number = 0\n    while n > 0:\n        reversed_number = reversed_number * 10 + n % 10\n        n //= 10\n    return reversed_number", "task_id": "422_a9d81157-5368-439f-9be7-e7183c0503fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "422_e36473a8-e4e8-42e1-949d-469d78992e35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers a and b.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "422_8f4cc604-8646-402c-85f9-8aeaad6a1935", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers a and b.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "422_5684d70e-a4a1-475d-b40a-a7b2799c30e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract only the first index element of each string in the given tuple.", "code": "def extract_first(test_tuple):\n  res = [sub[0] for sub in test_tuple]\n  return res", "task_id": "424_442864e2-66f9-48e9-b6a2-936571e37d9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract only the second index element of each string in the given tuple.", "code": "def extract_second(test_tuple):\n  res = [sub[1] if len(sub) > 1 else '' for sub in test_tuple]\n  return res", "task_id": "424_49054f18-207b-4f02-b5f2-d40c4b115365", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the last two characters of each string in the given tuple.", "code": "def extract_last_two(test_tuple):\n  res = [sub[-2:] for sub in test_tuple]\n  return res", "task_id": "424_5ecbb3ac-4955-4f85-9a81-30402dd3ea44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the first two characters of each string in the given tuple.", "code": "def extract_first_two(test_tuple):\n  res = [sub[:2] for sub in test_tuple]\n  return res", "task_id": "424_c695a1c1-082f-4979-abe9-19be090cd581", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the middle character of each string in the given tuple. If the string length is even, return the character just before the middle.", "code": "def extract_middle(test_tuple):\n  res = [sub[(len(sub) - 1) // 2] for sub in test_tuple]\n  return res", "task_id": "424_26796881-b1c6-4101-98f7-f415531d37a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all vowels from each string in the given tuple.", "code": "def extract_vowels(test_tuple):\n  vowels = 'aeiouAEIOU'\n  res = [''.join([char for char in sub if char in vowels]) for sub in test_tuple]\n  return res", "task_id": "424_5a3316c9-1997-4d6e-b2ac-3e6beadc6605", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all consonants from each string in the given tuple.", "code": "def extract_consonants(test_tuple):\n  vowels = 'aeiouAEIOU'\n  res = [''.join([char for char in sub if char not in vowels and char.isalpha()]) for sub in test_tuple]\n  return res", "task_id": "424_947fa062-38df-47bf-b66c-30687533c179", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all uppercase letters from each string in the given tuple.", "code": "def extract_uppercase(test_tuple):\n  res = [''.join([char for char in sub if char.isupper()]) for sub in test_tuple]\n  return res", "task_id": "424_ae70f654-c5ee-457c-8604-515fc14fd621", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all lowercase letters from each string in the given tuple.", "code": "def extract_lowercase(test_tuple):\n  res = [''.join([char for char in sub if char.islower()]) for sub in test_tuple]\n  return res", "task_id": "424_a6ce666b-b1a8-41a2-80e1-1d385d72ad04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all digits from each string in the given tuple.", "code": "def extract_digits(test_tuple):\n  res = [''.join([char for char in sub if char.isdigit()]) for sub in test_tuple]\n  return res", "task_id": "424_bbf29608-6e92-4031-88a0-2b4787d344b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter even numbers using a lambda function.", "code": "def filter_even_numbers(nums):\n    even_nums = list(filter(lambda x: x % 2 == 0, nums))\n    return even_nums", "task_id": "426_1200c775-7a1d-4c7f-8bcb-789584ddcd9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter positive numbers using a lambda function.", "code": "def filter_positive_numbers(nums):\n    positive_nums = list(filter(lambda x: x > 0, nums))\n    return positive_nums", "task_id": "426_d07f5240-7f8d-4ea7-b976-18b494f3ca93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter negative numbers using a lambda function.", "code": "def filter_negative_numbers(nums):\n    negative_nums = list(filter(lambda x: x < 0, nums))\n    return negative_nums", "task_id": "426_c6830590-735b-4fcd-a6ac-cdd077025b17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter numbers divisible by 3 using a lambda function.", "code": "def filter_divisible_by_three(nums):\n    divisible_by_three = list(filter(lambda x: x % 3 == 0, nums))\n    return divisible_by_three", "task_id": "426_6ce39e80-56a5-481e-aa7e-e8c9144bb47a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter numbers greater than 5 using a lambda function.", "code": "def filter_greater_than_five(nums):\n    greater_than_five = list(filter(lambda x: x > 5, nums))\n    return greater_than_five", "task_id": "426_caf80807-2ba4-43fd-b7e9-ad820c11f7e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter numbers less than 10 using a lambda function.", "code": "def filter_less_than_ten(nums):\n    less_than_ten = list(filter(lambda x: x < 10, nums))\n    return less_than_ten", "task_id": "426_c5af8614-ac4d-4f3d-b33e-b80c39c3aa7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter non-zero numbers using a lambda function.", "code": "def filter_non_zero(nums):\n    non_zero_nums = list(filter(lambda x: x != 0, nums))\n    return non_zero_nums", "task_id": "426_cf5b824d-f54a-4da4-ad17-fdb1d6ffeb99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter palindromic words using a lambda function.", "code": "def filter_palindromes(words):\n    palindromes = list(filter(lambda x: x == x[::-1], words))\n    return palindromes", "task_id": "426_e63a3a1a-49d8-431a-86f9-09ff6c963134", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter words that start with a vowel using a lambda function.", "code": "def filter_vowel_start(words):\n    vowels = 'AEIOUaeiou'\n    vowel_start_words = list(filter(lambda x: x[0] in vowels, words))\n    return vowel_start_words", "task_id": "426_5a8d4535-5648-432a-8376-ab35235b0a4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter words with length greater than 3 using a lambda function.", "code": "def filter_length_greater_than_three(words):\n    long_words = list(filter(lambda x: len(x) > 3, words))\n    return long_words", "task_id": "426_465c90fb-28fa-4683-ae93-3ef3bc8c85a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of times a particular element appears in a nested list.", "code": "def count_element_in_nested_list(nested_list, x): \n    ctr = 0 \n    for sublist in nested_list: \n        ctr += sublist.count(x) \n    return ctr", "task_id": "425_71ef0b6f-0044-4e8f-90f4-003c830ba6cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists with a particular length in a nested list.", "code": "def count_sublists_with_length(nested_list, length): \n    ctr = 0 \n    for sublist in nested_list: \n        if len(sublist) == length: \n            ctr += 1 \n    return ctr", "task_id": "425_387d6180-31a5-4ef5-94e4-89f5d275f1a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists whose elements sum up to a particular value.", "code": "def count_sublists_with_sum(nested_list, target_sum): \n    ctr = 0 \n    for sublist in nested_list: \n        if sum(sublist) == target_sum: \n            ctr += 1 \n    return ctr", "task_id": "425_5d4d945e-1b3e-4910-9db4-3807811c2788", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain only unique elements.", "code": "def count_sublists_with_unique_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if len(sublist) == len(set(sublist)): \n            ctr += 1 \n    return ctr", "task_id": "425_f26e1606-d959-424f-b1d2-7cc31682d8d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain only even elements.", "code": "def count_sublists_with_even_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if all(element % 2 == 0 for element in sublist): \n            ctr += 1 \n    return ctr", "task_id": "425_17ae9522-258f-4aa7-a824-d46729e06b9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain only odd elements.", "code": "def count_sublists_with_odd_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if all(element % 2 != 0 for element in sublist): \n            ctr += 1 \n    return ctr", "task_id": "425_d51efd9d-41c3-4e51-be15-81e82e78c05f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain only positive elements.", "code": "def count_sublists_with_positive_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if all(element > 0 for element in sublist): \n            ctr += 1 \n    return ctr", "task_id": "425_5f7b855e-d57a-42e4-a865-56dee3e73742", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain only negative elements.", "code": "def count_sublists_with_negative_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if all(element < 0 for element in sublist): \n            ctr += 1 \n    return ctr", "task_id": "425_ac7701c3-3856-4ac3-8596-8744656c6f9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain both positive and negative elements.", "code": "def count_sublists_with_mixed_elements(nested_list): \n    ctr = 0 \n    for sublist in nested_list: \n        if any(element > 0 for element in sublist) and any(element < 0 for element in sublist): \n            ctr += 1 \n    return ctr", "task_id": "425_35a9313e-5acf-4621-9337-1a64e8ab5f7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of sublists that contain a specific target element.", "code": "def count_sublists_with_target_element(nested_list, target): \n    ctr = 0 \n    for sublist in nested_list: \n        if target in sublist: \n            ctr += 1 \n    return ctr", "task_id": "425_7f5d5d4e-fea1-4007-a4d0-6b483a77663e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of apples that can be collected in a grid from the top-left to the bottom-right corner, moving only right or down.", "code": "def max_apples(grid):\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[-1][-1]", "task_id": "423_26bc6da8-a4b1-4a0f-bddb-fea7d9d551f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum path sum in a triangle from top to bottom.", "code": "def max_path_sum(triangle):\n    n = len(triangle)\n    for i in range(n-2, -1, -1):\n        for j in range(len(triangle[i])):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "423_8c4ca567-200c-4ea6-81c8-8be9e23f0e51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum amount of money that can be robbed from a list of houses, where no two adjacent houses can be robbed.", "code": "def max_robbery(houses):\n    if not houses:\n        return 0\n    if len(houses) == 1:\n        return houses[0]\n    dp = [0] * len(houses)\n    dp[0] = houses[0]\n    dp[1] = max(houses[0], houses[1])\n    for i in range(2, len(houses)):\n        dp[i] = max(dp[i-1], dp[i-2] + houses[i])\n    return dp[-1]", "task_id": "423_cf26a45a-675a-4cc4-bb7a-2d4473b6a949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost to reach the top of a staircase, where you can either climb one or two steps at a time.", "code": "def min_cost_climbing_stairs(cost):\n    n = len(cost)\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = min(dp[i-1] + cost[i-1], dp[i-2] + cost[i-2])\n    return dp[-1]", "task_id": "423_66548b04-21f0-423f-a4d3-befea0405ebe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a list of integers.", "code": "def longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "423_f51c13fa-35ad-4ae2-b312-1a86515ea996", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray in a list of integers.", "code": "def max_subarray_sum(nums):\n    if not nums:\n        return 0\n    max_sum = current_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "423_c6c2f0db-2759-4519-9d3d-6242ed273b9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum path sum in a grid from the top-left to the bottom-right corner, moving only right or down.", "code": "def min_path_sum(grid):\n    m, n = len(grid), len(grid[0])\n    dp = [[0] * n for _ in range(m)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, m):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[-1][-1]", "task_id": "423_98f24188-6bc1-4078-9ef5-6d585f003c99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit that can be achieved from buying and selling a stock, where you can only complete at most one transaction.", "code": "def max_profit(prices):\n    if not prices:\n        return 0\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit", "task_id": "423_20c54b55-ae31-4d11-b953-3b5a472f9f9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to climb a staircase with n steps, where you can either climb one or two steps at a time.", "code": "def count_ways_to_climb(n):\n    if n <= 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i-1] + dp[i-2]\n    return dp[-1]", "task_id": "423_c06645da-7660-4088-9f7d-21dfe4b1e12a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of unique paths from the top-left to the bottom-right corner of an m x n grid, moving only right or down.", "code": "def unique_paths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[-1][-1]", "task_id": "423_f568e333-e02e-4b72-8198-4795d3a1e2d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "427_f4b5eaaf-0173-4f73-86d7-1231181d47aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "427_e7612127-1053-4255-b66b-ad2fa4151773", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "427_b24ff107-3ccf-489b-a268-4b2d22a13583", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list while preserving the order.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "task_id": "427_5bf88d78-948a-4d65-a1e2-2c487d561b4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a list of integers.", "code": "def find_max(lst):\n    return max(lst)", "task_id": "427_31046b18-b90c-4093-a9bd-b92068e2f2bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))", "task_id": "427_a5b5974f-6ed3-4759-b7aa-ad5189b541d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n):\n    fib_sequence = [0, 1]\n    while len(fib_sequence) < n:\n        fib_sequence.append(fib_sequence[-1] + fib_sequence[-2])\n    return fib_sequence[:n]", "task_id": "427_099aac89-b47f-47ae-a205-3a5f80514bfe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "427_963f9f63-819c-4cfc-bcd5-033658d8f684", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "427_4d0a6edb-055e-4fd7-b190-0b95618dba0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(lst1, lst2):\n    return sorted(lst1 + lst2)", "task_id": "427_dce1b750-44f1-451c-a546-87b408cbd772", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the elementwise OR tuples from the given two tuples.", "code": "def or_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 | ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_2c445844-4dc4-4b2c-ab0a-6022b1acbb8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the elementwise XOR tuples from the given two tuples.", "code": "def xor_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_2ffb5590-b3a1-494c-a616-159408abad86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the elements of the given two tuples elementwise.", "code": "def add_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_f3f92a93-5420-4459-8675-bd8b68c4f00b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the elements of the given two tuples elementwise.", "code": "def multiply_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_8670c011-9ec0-4738-8aa6-fbc5c881cef8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the elements of the second tuple from the first tuple elementwise.", "code": "def subtract_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_71b88e90-780e-4239-a4b4-c141ef4469c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the elements of the first tuple by the elements of the second tuple elementwise.", "code": "def divide_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_34257cad-c6ec-4820-b4af-25b5b0f3eb54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the elements of the first tuple by the elements of the second tuple elementwise.", "code": "def mod_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_f8fc3b16-d0e7-48ac-b14d-414618868848", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the elements of the given two tuples elementwise.", "code": "def max_tuples(test_tup1, test_tup2):\n  res = tuple(max(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_1e81c15c-ca54-4514-a7d6-e6ec2684b470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the elements of the given two tuples elementwise.", "code": "def min_tuples(test_tup1, test_tup2):\n  res = tuple(min(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_305ab6f9-66f8-4186-b3d1-6f4ecce6eb48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise the elements of the first tuple to the power of the elements of the second tuple elementwise.", "code": "def power_tuples(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "429_4e7636f1-66d1-4a94-810e-d347e6ac7514", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the vertex of a parabola given its coefficients a, b, and c.", "code": "def parabola_vertex(a, b, c): \n  h = -b / (2 * a) \n  k = a * h * h + b * h + c \n  return (h, k)", "task_id": "430_7e34ee45-627c-4bfe-88bb-76024db8cc60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the focus of a parabola given its coefficients a, b, and c.", "code": "def parabola_focus(a, b, c): \n  h = -b / (2 * a) \n  k = (1 - b * b + 4 * a * c) / (4 * a) \n  return (h, k + 1 / (4 * a))", "task_id": "430_9632ccdf-1cc2-4d98-9ca4-d8aeaaa4f6f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the axis of symmetry of a parabola given its coefficients a and b.", "code": "def parabola_axis_of_symmetry(a, b): \n  return -b / (2 * a)", "task_id": "430_62eef54c-ffcc-4d99-83af-1407f888e582", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the y-intercept of a parabola given its coefficients a, b, and c.", "code": "def parabola_y_intercept(a, b, c): \n  return c", "task_id": "430_9fb992b6-393a-4807-a907-0b25437d39b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the x-intercepts of a parabola given its coefficients a, b, and c.", "code": "def parabola_x_intercepts(a, b, c): \n  discriminant = b * b - 4 * a * c \n  if discriminant < 0: \n    return () \n  elif discriminant == 0: \n    x = -b / (2 * a) \n    return (x,) \n  else: \n    x1 = (-b + discriminant ** 0.5) / (2 * a) \n    x2 = (-b - discriminant ** 0.5) / (2 * a) \n    return (x1, x2)", "task_id": "430_28d87a56-2175-4208-b834-271a3bea46f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the opening direction of a parabola given its coefficient a.", "code": "def parabola_opening_direction(a): \n  return 'up' if a > 0 else 'down'", "task_id": "430_442f8469-2147-43c7-9a2e-f650eaeb7898", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a parabola is narrow or wide given its coefficient a.", "code": "def parabola_width(a): \n  return 'narrow' if abs(a) > 1 else 'wide'", "task_id": "430_6d0066ab-1fdc-4844-a4cb-4fa904e86f69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the equation of a parabola given its vertex (h, k) and coefficient a.", "code": "def parabola_equation(h, k, a): \n  return f'y = {a}(x - {h})^2 + {k}'", "task_id": "430_28860c05-b2df-414a-9695-5a2323a1935c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the discriminant of a parabola given its coefficients a, b, and c.", "code": "def parabola_discriminant(a, b, c): \n  return b * b - 4 * a * c", "task_id": "430_2adf2035-9078-4368-b096-171f393f79ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a parabola has real roots given its coefficients a, b, and c.", "code": "def parabola_is_real(a, b, c): \n  return b * b - 4 * a * c >= 0", "task_id": "430_51e3ea4e-2d01-40e4-9bf2-b5e51fe84ca8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "428_602972ec-72d7-42f6-8bb5-2a367e396078", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "428_dc684bbd-327c-4760-b258-4ca260d8446b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "428_f6a0ece1-5ef5-4e04-8e03-16db1cfb79e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using merge sort.", "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr", "task_id": "428_1c9d48b7-9720-4820-8506-0728fcb91d72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "428_bbc6354e-0a09-43ff-aa5b-3ca4a93c7320", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using heap sort.", "code": "def heapify(arr, n, i):\n    largest = i\n    l = 2 * i + 1\n    r = 2 * i + 2\n    if l < n and arr[i] < arr[l]:\n        largest = l\n    if r < n and arr[largest] < arr[r]:\n        largest = r\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr", "task_id": "428_c3637a01-2310-430d-badc-fc07cff06577", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using counting sort.", "code": "def counting_sort(arr):\n    max_val = max(arr)\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n    return arr", "task_id": "428_af5a0881-05a6-4861-b97b-535fffc053cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using radix sort.", "code": "def counting_sort_for_radix(arr, exp1):\n    n = len(arr)\n    output = [0] * (n)\n    count = [0] * (10)\n    for i in range(0, n):\n        index = arr[i] // exp1\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp1\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    i = 0\n    for i in range(0, len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr", "task_id": "428_0316fa82-5e0e-4529-aee3-fee71f2dd817", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bucket sort.", "code": "def bucket_sort(arr):\n    bucket = [[] for _ in range(len(arr))]\n    for num in arr:\n        index = int(len(arr) * num / (max(arr) + 1))\n        bucket[index].append(num)\n    for i in range(len(arr)):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(len(arr)):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n    return arr", "task_id": "428_19c2c2e5-0680-4286-8e2e-7acc553b8128", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using gnome sort.", "code": "def gnome_sort(arr):\n    index = 0\n    while index < len(arr):\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr", "task_id": "428_23e38c39-48f2-4019-8211-c51196d28419", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of integers and returns true if the sum of any two elements (one from each list) is even.", "code": "def common_element_sum(list1, list2):\n    for x in list1:\n        for y in list2:\n            if (x + y) % 2 == 0:\n                return True\n    return False", "task_id": "431_d84d9ce9-7fe9-42ea-90dd-e3e04eb13d5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of integers and returns true if the product of any two elements (one from each list) is odd.", "code": "def common_element_product(list1, list2):\n    for x in list1:\n        for y in list2:\n            if (x * y) % 2 == 1:\n                return True\n    return False", "task_id": "431_876062ba-5b17-40a9-8ec2-a1606d787324", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of integers and a threshold value, and returns true if the sum of any two elements (one from each list) is greater than the threshold.", "code": "def common_element_greater_than(list1, list2, threshold):\n    for x in list1:\n        for y in list2:\n            if (x + y) > threshold:\n                return True\n    return False", "task_id": "431_ebd6581f-03a6-4bd1-a8d1-4974309e54c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of integers and returns true if any element from the first list is divisible by any element from the second list.", "code": "def common_element_divisible(list1, list2):\n    for x in list1:\n        for y in list2:\n            if y != 0 and x % y == 0:\n                return True\n    return False", "task_id": "431_ab76ed84-c4c3-4e2f-ab80-5d95071143d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if they have at least one string of the same length.", "code": "def common_element_length(list1, list2):\n    lengths1 = set(len(s) for s in list1)\n    lengths2 = set(len(s) for s in list2)\n    return not lengths1.isdisjoint(lengths2)", "task_id": "431_ada44801-2020-46ba-bec4-b78d73359634", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if any string from the first list is a prefix of any string from the second list.", "code": "def common_element_prefix(list1, list2):\n    for s1 in list1:\n        for s2 in list2:\n            if s2.startswith(s1):\n                return True\n    return False", "task_id": "431_8103c990-6231-4f60-8b5f-08007c9bd08e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if any string from the first list is a suffix of any string from the second list.", "code": "def common_element_suffix(list1, list2):\n    for s1 in list1:\n        for s2 in list2:\n            if s2.endswith(s1):\n                return True\n    return False", "task_id": "431_44309c9a-4397-4856-acc5-b3353557be24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if any string from the first list is an anagram of any string from the second list.", "code": "def common_element_anagram(list1, list2):\n    def sorted_str(s):\n        return ''.join(sorted(s))\n    sorted_list1 = set(sorted_str(s) for s in list1)\n    sorted_list2 = set(sorted_str(s) for s in list2)\n    return not sorted_list1.isdisjoint(sorted_list2)", "task_id": "431_c961cd3a-0368-4289-b0b3-3e7082b2711b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if any string from the first list is a palindrome of any string from the second list.", "code": "def common_element_palindrome(list1, list2):\n    def is_palindrome(s):\n        return s == s[::-1]\n    palindromes1 = set(s for s in list1 if is_palindrome(s))\n    palindromes2 = set(s for s in list2 if is_palindrome(s))\n    return not palindromes1.isdisjoint(palindromes2)", "task_id": "431_9c7a2a91-3784-4d14-bf82-eccf849b63d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes two lists of strings and returns true if any string from the first list is a substring of any string from the second list.", "code": "def common_element_substring(list1, list2):\n    for s1 in list1:\n        for s2 in list2:\n            if s1 in s2:\n                return True\n    return False", "task_id": "431_030d9ccf-b167-42a5-8bd5-85b63d5655f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is smaller than the elements of the given array.", "code": "def check_smaller(arr, number):\n  arr.sort()\n  if number < arr[0]:\n    return ('Yes, the entered number is smaller than those in the array')\n  else:\n    return ('No, entered number is not smaller than those in the array')", "task_id": "433_2321b7a9-dd87-496f-8deb-535ac1ff003c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is equal to any of the elements of the given array.", "code": "def check_equal(arr, number):\n  if number in arr:\n    return ('Yes, the entered number is equal to an element in the array')\n  else:\n    return ('No, entered number is not equal to any element in the array')", "task_id": "433_bf371693-f2a2-4c4a-94fe-f3f505eec6a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is greater than or equal to the elements of the given array.", "code": "def check_greater_or_equal(arr, number):\n  arr.sort()\n  if number >= arr[-1]:\n    return ('Yes, the entered number is greater than or equal to those in the array')\n  else:\n    return ('No, entered number is less than those in the array')", "task_id": "433_8e277aa8-a81a-422d-8564-627c46e4d4d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is smaller than or equal to the elements of the given array.", "code": "def check_smaller_or_equal(arr, number):\n  arr.sort()\n  if number <= arr[0]:\n    return ('Yes, the entered number is smaller than or equal to those in the array')\n  else:\n    return ('No, entered number is greater than those in the array')", "task_id": "433_924f8732-c049-4c4e-85cd-41b270705d04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is within the range of the minimum and maximum elements of the given array.", "code": "def check_in_range(arr, number):\n  arr.sort()\n  if arr[0] <= number <= arr[-1]:\n    return ('Yes, the entered number is within the range of the array')\n  else:\n    return ('No, entered number is out of the range of the array')", "task_id": "433_9297d46b-4a27-42d9-8e9f-5fe50636cc83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is outside the range of the minimum and maximum elements of the given array.", "code": "def check_outside_range(arr, number):\n  arr.sort()\n  if number < arr[0] or number > arr[-1]:\n    return ('Yes, the entered number is outside the range of the array')\n  else:\n    return ('No, entered number is within the range of the array')", "task_id": "433_eff6c343-641f-4552-a2d9-ecf6657d22c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest number to the entered number in the given array.", "code": "def check_closest(arr, number):\n  return min(arr, key=lambda x: abs(x - number))", "task_id": "433_ae013951-895c-4bf6-b7e0-5c3507d02c0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many elements in the given array are greater than the entered number.", "code": "def check_greater_count(arr, number):\n  return sum(1 for x in arr if x > number)", "task_id": "433_4466b87e-2eac-4547-8c1a-d0172a3b26a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many elements in the given array are smaller than the entered number.", "code": "def check_smaller_count(arr, number):\n  return sum(1 for x in arr if x < number)", "task_id": "433_073f1953-b6d8-44f4-89aa-d7b32171c7be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the entered number is greater than the average of the elements in the given array.", "code": "def check_greater_than_average(arr, number):\n  average = sum(arr) / len(arr)\n  if number > average:\n    return ('Yes, the entered number is greater than the average of the array')\n  else:\n    return ('No, entered number is less than or equal to the average of the array')", "task_id": "433_9aba0590-109d-4a2d-8529-5f87bef71e2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a trapezium given the lengths of its two bases and its height.", "code": "def area_trapezium(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    return area", "task_id": "432_a4c6d951-c1fb-44fb-a855-3647d1849a4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a trapezium given the lengths of its two bases and its two sides.", "code": "def perimeter_trapezium(base1, base2, side1, side2):\n    perimeter = base1 + base2 + side1 + side2\n    return perimeter", "task_id": "432_81de6314-0c8b-4ece-9fbd-97add5ef948d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the height of an isosceles trapezium given the lengths of its two bases and one of its equal sides.", "code": "import math\n\ndef isosceles_trapezium_height(base1, base2, side):\n    height = math.sqrt(side**2 - ((base2 - base1) / 2)**2)\n    return height", "task_id": "432_1981db85-38ea-4951-b4d6-315df94372b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of the diagonal of a trapezium given the lengths of its two bases and its height.", "code": "import math\n\ndef trapezium_diagonal(base1, base2, height):\n    diagonal = math.sqrt(height**2 + ((base2 - base1) / 2)**2)\n    return diagonal", "task_id": "432_b30684da-caae-4053-941e-3f5bf58178d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if four given lengths can form a trapezium.", "code": "def is_trapezium(base1, base2, side1, side2):\n    return base1 != base2 and side1 + side2 > abs(base1 - base2)", "task_id": "432_4d3180bb-44c9-4376-b5da-d7b3999cbeff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of the midsegment of a trapezium given the lengths of its two bases.", "code": "def trapezium_midsegment(base1, base2):\n    midsegment = 0.5 * (base1 + base2)\n    return midsegment", "task_id": "432_f1b201f3-dadb-44bc-8a23-37e7ceec5a29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a trapezium given the length of its midsegment and its height.", "code": "def trapezium_area_with_midsegment(midsegment, height):\n    area = midsegment * height\n    return area", "task_id": "432_587525bb-8a0d-473a-8055-459bf79d83aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the height of a trapezium given the lengths of its two bases and its area.", "code": "def trapezium_height_with_area(base1, base2, area):\n    height = (2 * area) / (base1 + base2)\n    return height", "task_id": "432_0cd23dd2-41ed-45f1-8a91-af67bd2277cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of one of the equal sides of an isosceles trapezium given the lengths of its two bases and its height.", "code": "import math\n\ndef trapezium_side_with_height(base1, base2, height):\n    side = math.sqrt(height**2 + ((base2 - base1) / 2)**2)\n    return side", "task_id": "432_92afd7fa-d3c5-4992-b9d3-125ae9bdee8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of the other base of an isosceles trapezium given the length of one base, its height, and one of its equal sides.", "code": "import math\n\ndef trapezium_base_with_height_and_side(base1, height, side):\n    base2 = 2 * math.sqrt(side**2 - height**2) + base1\n    return base2", "task_id": "432_b823858f-9f4e-4f28-8f25-8626cce4dbd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or more b's.", "code": "import re\ndef text_match_two(text):\n    patterns = 'ab*?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_e5a2c9b8-e500-4a93-a707-30ced4f7be5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by exactly two b's.", "code": "import re\ndef text_match_three(text):\n    patterns = 'ab{2}?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_cfd77978-c549-47c9-a5d1-81c0358380a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and ends with c.", "code": "import re\ndef text_match_four(text):\n    patterns = 'ab+c$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_1b00cfea-d5ea-4c93-8e17-f42bdfa1a2ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and optionally followed by c.", "code": "import re\ndef text_match_five(text):\n    patterns = 'ab+c?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_d1f314b4-ad10-4ee2-9cd1-d44254573a94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and exactly one c.", "code": "import re\ndef text_match_six(text):\n    patterns = 'ab+c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_a35b3874-5632-4d3f-99ce-ad691804489d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and at least one c.", "code": "import re\ndef text_match_seven(text):\n    patterns = 'ab+c+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_208fa879-eec4-4d71-821d-dff62b0445a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and at most one c.", "code": "import re\ndef text_match_eight(text):\n    patterns = 'ab+c?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_973f1ae7-9f69-4b5f-b842-99b752d38771", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and exactly two c's.", "code": "import re\ndef text_match_nine(text):\n    patterns = 'ab+c{2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_028767f4-87b6-43d8-8f14-4795915e152b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and ends with exactly three c's.", "code": "import re\ndef text_match_ten(text):\n    patterns = 'ab+c{3}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_e368cfe5-ebaf-45d7-ba14-bfdabac93a1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and at least two c's.", "code": "import re\ndef text_match_eleven(text):\n    patterns = 'ab+c{2,}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "434_1fd96c09-91ba-488d-b3fb-e8bcdfebc6f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "435_af1238bb-0b8d-4657-9a58-24594695b320", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is even.", "code": "def is_even(n):\n    return n % 2 == 0", "task_id": "435_7af74e1b-5154-48cb-8b12-68eb29d9214f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(n):\n    return int(str(n)[::-1])", "task_id": "435_09fc40cc-fda3-4f01-8154-d64522117868", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n):\n    s = str(n)\n    return s == s[::-1]", "task_id": "435_4489ee84-8972-4788-b968-ee0ac8a5d03f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a given number.", "code": "def count_digits(n):\n    return len(str(n))", "task_id": "435_9f137c09-700c-40ae-8ba6-17dacee365cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first digit of a given number.", "code": "def first_digit(n):\n    return int(str(n)[0])", "task_id": "435_9830b98c-b2db-4885-8f61-1a047947386e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of a given number.", "code": "def product_of_digits(n):\n    product = 1\n    for digit in str(n):\n        product *= int(digit)\n    return product", "task_id": "435_864b60f8-a75a-4d23-8258-23d36c9ef04b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the digits of a given number.", "code": "def sum_of_squares_of_digits(n):\n    return sum(int(digit)**2 for digit in str(n))", "task_id": "435_7cc794c7-cf52-4a7c-b6bb-1cff810366c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "435_b94c68bd-70f0-45b2-8924-52372f93cfa1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a specific digit in a given number.", "code": "def digit_occurrences(n, digit):\n    return str(n).count(str(digit))", "task_id": "435_8b591a61-26db-49e5-9194-fc8e43cd8a36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all even numbers in a list.", "code": "def find_even_numbers(lst):\n    return [num for num in lst if num % 2 == 0]", "task_id": "436_63782b29-0b73-45a4-8485-e9475bb2cfad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all odd numbers in a list.", "code": "def find_odd_numbers(lst):\n    return [num for num in lst if num % 2 != 0]", "task_id": "436_6b124f85-9760-4e27-823f-16a1bca81f18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all positive numbers in a list.", "code": "def find_positive_numbers(lst):\n    return [num for num in lst if num > 0]", "task_id": "436_3968d716-4c24-4778-85d4-6f5f75163f40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all numbers greater than five in a list.", "code": "def find_numbers_greater_than_five(lst):\n    return [num for num in lst if num > 5]", "task_id": "436_c44ee265-088d-4607-a3b8-5a56d5e250d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all numbers less than ten in a list.", "code": "def find_numbers_less_than_ten(lst):\n    return [num for num in lst if num < 10]", "task_id": "436_b962a009-f3d4-4067-8f4e-f728c832741a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all prime numbers in a list.", "code": "def find_prime_numbers(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return [num for num in lst if is_prime(num)]", "task_id": "436_49d0ffbb-04be-42d8-b939-b9b4dcdd03f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all numbers divisible by three in a list.", "code": "def find_numbers_divisible_by_three(lst):\n    return [num for num in lst if num % 3 == 0]", "task_id": "436_6fd0b5ea-cd68-45ee-8695-f0c52211b86f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all numbers within a given range in a list.", "code": "def find_numbers_within_range(lst, lower, upper):\n    return [num for num in lst if lower <= num <= upper]", "task_id": "436_83fa496c-f21b-4dde-928b-6540d76e9ee4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the squares of all numbers in a list.", "code": "def find_squares_of_numbers(lst):\n    return [num**2 for num in lst]", "task_id": "436_a2461886-95b8-4075-b360-750b69c790c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return all numbers with an even number of digits in a list.", "code": "def find_numbers_with_even_digits(lst):\n    return [num for num in lst if len(str(abs(num))) % 2 == 0]", "task_id": "436_b829884e-43fa-4e49-b949-2920afeca13f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove even characters in a string.", "code": "def remove_even(str1):\n str2 = ''\n for i in range(1, len(str1) + 1):\n    if(i % 2 != 0):\n        str2 = str2 + str1[i - 1]\n return str2", "task_id": "437_4050f262-7c47-4b37-82c7-953846483ec5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(str1):\n vowels = 'aeiouAEIOU'\n str2 = ''\n for char in str1:\n    if char not in vowels:\n        str2 += char\n return str2", "task_id": "437_1f550fc5-2ae5-4166-bffe-8ad579eb337e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a string.", "code": "def remove_consonants(str1):\n vowels = 'aeiouAEIOU'\n str2 = ''\n for char in str1:\n    if char in vowels:\n        str2 += char\n return str2", "task_id": "437_d21e6925-c33d-4b78-948c-b3a79cd63100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase characters from a string.", "code": "def remove_uppercase(str1):\n str2 = ''\n for char in str1:\n    if not char.isupper():\n        str2 += char\n return str2", "task_id": "437_e81e9026-54c0-41ab-8504-7a26e104e585", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase characters from a string.", "code": "def remove_lowercase(str1):\n str2 = ''\n for char in str1:\n    if not char.islower():\n        str2 += char\n return str2", "task_id": "437_4efea441-26a6-4c21-8dfa-4e32a0a27a4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a string.", "code": "def remove_digits(str1):\n str2 = ''\n for char in str1:\n    if not char.isdigit():\n        str2 += char\n return str2", "task_id": "437_634e0569-789a-458d-a477-8ff5111fa7de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a string.", "code": "def remove_non_alpha(str1):\n str2 = ''\n for char in str1:\n    if char.isalpha():\n        str2 += char\n return str2", "task_id": "437_c7e7791a-e374-42b6-98d2-90135310c61c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a string.", "code": "def remove_whitespace(str1):\n str2 = ''\n for char in str1:\n    if not char.isspace():\n        str2 += char\n return str2", "task_id": "437_5050e9c9-4210-403e-9a1d-5a99d275fec0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters (non-alphanumeric) from a string.", "code": "def remove_special_chars(str1):\n str2 = ''\n for char in str1:\n    if char.isalnum():\n        str2 += char\n return str2", "task_id": "437_e4920d2f-3c6c-474b-920b-6585dcc1a39f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate characters from a string, keeping only the first occurrence.", "code": "def remove_duplicates(str1):\n seen = set()\n str2 = ''\n for char in str1:\n    if char not in seen:\n        str2 += char\n        seen.add(char)\n return str2", "task_id": "437_45696ed0-7643-4f1f-8a67-75a0e7a71b7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of digits of a given integer.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "439_7481ae88-245a-4732-bf51-4462ff4a7800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "439_7a017d4c-1800-4f8a-af88-7b8375837ab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "439_8914f594-166f-4a7f-8e14-6389645056b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "439_350996f7-fba3-41b3-bf9f-d2acac6b4c35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "439_43f1ec45-b86d-400d-95d2-d0be79aae2b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "439_97a9db31-3305-4c2a-895e-c677f4188e62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "439_6362ad82-6cf9-4b41-9ce9-da30b39e48bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "439_3d07d4d4-a1f4-48ae-ae5a-6e040e88773a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "439_68f965d5-d1b6-4ba8-9499-8eb60f22014c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "439_1e78d28f-b758-435d-b98a-4c23154ffdcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count symmetric pairs in a list of tuples.", "code": "def count_symmetric_pairs(test_list):\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                res += 1\n    return res", "task_id": "438_1e0120c2-5e82-4140-aee0-52246066d902", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count tuples in a list that are palindromic.", "code": "def count_palindromic_tuples(test_list):\n    res = 0\n    for tup in test_list:\n        if tup == tup[::-1]:\n            res += 1\n    return res", "task_id": "438_c6d01409-454d-44cf-ac73-fa0c36b262be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count unique pairs in a list of tuples.", "code": "def count_unique_pairs(test_list):\n    return len(set(test_list))", "task_id": "438_bed93047-7796-4d8e-b18e-03beb3a0c105", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples that have their reverse also present in the list.", "code": "def count_reversed_pairs(test_list):\n    res = 0\n    seen = set()\n    for tup in test_list:\n        if tup[::-1] in seen:\n            res += 1\n        seen.add(tup)\n    return res", "task_id": "438_5db2d8ed-b7a6-4481-8800-d602d9c36c37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples whose elements sum up to a given target.", "code": "def count_pairs_with_sum(test_list, target_sum):\n    res = 0\n    for tup in test_list:\n        if sum(tup) == target_sum:\n            res += 1\n    return res", "task_id": "438_b218808b-c4f9-4dfb-b7b9-26506656d62a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples whose elements' product equals a given target.", "code": "def count_pairs_with_product(test_list, target_product):\n    res = 0\n    for tup in test_list:\n        if tup[0] * tup[1] == target_product:\n            res += 1\n    return res", "task_id": "438_fbbb1069-4bf1-4ca1-b9d2-e4c8bb49863e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples whose elements' difference equals a given target.", "code": "def count_pairs_with_difference(test_list, target_diff):\n    res = 0\n    for tup in test_list:\n        if abs(tup[0] - tup[1]) == target_diff:\n            res += 1\n    return res", "task_id": "438_e409b8e2-a6c6-4458-b7d6-c719769d3a80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples that share at least one common element.", "code": "def count_pairs_with_common_element(test_list):\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if set(test_list[i]) & set(test_list[j]):\n                res += 1\n    return res", "task_id": "438_afbc05ab-dd26-4a16-b981-5ef6ea0ac206", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples whose elements' sum is even.", "code": "def count_pairs_with_even_sum(test_list):\n    res = 0\n    for tup in test_list:\n        if (tup[0] + tup[1]) % 2 == 0:\n            res += 1\n    return res", "task_id": "438_2fffc63b-74c8-4351-9f6d-a118498f6cb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count pairs in a list of tuples whose elements' product is odd.", "code": "def count_pairs_with_odd_product(test_list):\n    res = 0\n    for tup in test_list:\n        if (tup[0] * tup[1]) % 2 != 0:\n            res += 1\n    return res", "task_id": "438_198ef346-8328-40f6-955f-1c11ef09757d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(l):\n  volume = l ** 3\n  return volume", "task_id": "441_97d7e389-8c82-4f03-8d53-63afdcb6eb13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere given its radius.", "code": "import math\ndef surfacearea_sphere(r):\n  surface_area = 4 * math.pi * r ** 2\n  return surface_area", "task_id": "441_7154d9d1-7fec-4c52-b516-deba667acc6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "import math\ndef volume_sphere(r):\n  volume = (4/3) * math.pi * r ** 3\n  return volume", "task_id": "441_b157dbcd-4073-4909-a712-e88c08191adf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder given its radius and height.", "code": "import math\ndef surfacearea_cylinder(r, h):\n  surface_area = 2 * math.pi * r * (r + h)\n  return surface_area", "task_id": "441_fabcabc3-a472-4b86-ac29-5023fed40c23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder given its radius and height.", "code": "import math\ndef volume_cylinder(r, h):\n  volume = math.pi * r ** 2 * h\n  return volume", "task_id": "441_0ab63a0f-4aca-45e3-bb9f-bfba6b710e96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone given its radius and height.", "code": "import math\ndef surfacearea_cone(r, h):\n  l = math.sqrt(r ** 2 + h ** 2)\n  surface_area = math.pi * r * (r + l)\n  return surface_area", "task_id": "441_c44c601a-95d7-4f9c-94a9-01183ba1f7ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone given its radius and height.", "code": "import math\ndef volume_cone(r, h):\n  volume = (1/3) * math.pi * r ** 2 * h\n  return volume", "task_id": "441_770bbed1-ad1b-41a3-b5c5-4aaa6e330839", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a rectangular prism given its length, width, and height.", "code": "def surfacearea_rectangular_prism(l, w, h):\n  surface_area = 2 * (l * w + l * h + w * h)\n  return surface_area", "task_id": "441_230568f6-8114-4733-97f1-28317470bcf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism given its length, width, and height.", "code": "def volume_rectangular_prism(l, w, h):\n  volume = l * w * h\n  return volume", "task_id": "441_a1a3b0ce-e77b-4986-bf48-a91367cb3566", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a pyramid given its base length, base width, and slant height.", "code": "def surfacearea_pyramid(base_length, base_width, slant_height):\n  base_area = base_length * base_width\n  lateral_area = base_length * slant_height + base_width * slant_height\n  surface_area = base_area + lateral_area\n  return surface_area", "task_id": "441_9d1267a0-8fde-4b47-ac87-c8312fcd8131", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all nouns and their positions in a given sentence.", "code": "import re\ndef find_nouns(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b[A-Z][a-z]*\\b', text)]", "task_id": "440_d45f2204-b9ca-45b3-a520-e184fe74e873", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all verbs ending with 'ing' and their positions in a given sentence.", "code": "import re\ndef find_verbs(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b\\w+ing\\b', text)]", "task_id": "440_bfab04b4-ff35-414b-838d-86c8dfd2684e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all numbers and their positions in a given sentence.", "code": "import re\ndef find_numbers(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b\\d+\\b', text)]", "task_id": "440_b84eaf9c-830c-4e27-b877-7c30ead4e5b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all dates in the format 'dd-mm-yyyy' and their positions in a given sentence.", "code": "import re\ndef find_dates(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b\\d{2}-\\d{2}-\\d{4}\\b', text)]", "task_id": "440_156642ee-2231-4584-bc8c-7950d6e5b249", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all email addresses and their positions in a given sentence.", "code": "import re\ndef find_emails(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b[\\w.-]+@[\\w.-]+\\.\\w+\\b', text)]", "task_id": "440_c3c99a7e-e102-4385-b1f2-5ff85efefc2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all URLs and their positions in a given sentence.", "code": "import re\ndef find_urls(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\bhttps?://[\\w.-]+(?:/[\\w.-]*)*\\b', text)]", "task_id": "440_d2ea25df-7a24-4abe-9e94-12278d0dc50e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hashtags and their positions in a given sentence.", "code": "import re\ndef find_hashtags(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\B#\\w+\\b', text)]", "task_id": "440_755d1086-b4ce-46ba-a34f-0730cfd5b848", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all mentions (e.g., @username) and their positions in a given sentence.", "code": "import re\ndef find_mentions(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\B@\\w+\\b', text)]", "task_id": "440_da2450bf-7c82-4abc-97c7-30924d26c955", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all capitalized words and their positions in a given sentence.", "code": "import re\ndef find_capitalized_words(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b[A-Z][a-z]*\\b', text)]", "task_id": "440_5a298306-94ac-4539-8d05-313c2bafca7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic words and their positions in a given sentence.", "code": "import re\ndef find_palindromes(text):\n    return [(m.start(), m.end(), m.group(0)) for m in re.finditer(r'\\b(\\w)\\w?\\1\\b', text)]", "task_id": "440_83c3d453-847a-45e3-b3e0-ccc36c91d3b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest positive number from the given list.", "code": "def smallest_positive(numbers):\n    min_positive = float('inf')\n    for num in numbers:\n        if 0 < num < min_positive:\n            min_positive = num\n    return min_positive if min_positive != float('inf') else None", "task_id": "443_40378e1d-d2ad-44da-8068-026cda7756c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even numbers in the given list.", "code": "def sum_of_evens(numbers):\n    return sum(num for num in numbers if num % 2 == 0)", "task_id": "443_24623e04-1f02-4fdf-b5c3-2fd7071f089f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in the given list.", "code": "def count_negatives(numbers):\n    return sum(1 for num in numbers if num < 0)", "task_id": "443_69427230-a20e-48e8-a6fe-42761808a8ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all positive numbers in the given list.", "code": "def product_of_positives(numbers):\n    product = 1\n    for num in numbers:\n        if num > 0:\n            product *= num\n    return product", "task_id": "443_8f9d7fa5-5ffa-46e0-af3a-fe956493b1ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of all odd numbers in the given list.", "code": "def average_of_odds(numbers):\n    odds = [num for num in numbers if num % 2 != 0]\n    return sum(odds) / len(odds) if odds else 0", "task_id": "443_88cad600-6a03-48ef-af18-8d60e9828d19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest number in the given list.", "code": "def second_largest(numbers):\n    first, second = float('-inf'), float('-inf')\n    for num in numbers:\n        if num > first:\n            first, second = num, first\n        elif first > num > second:\n            second = num\n    return second", "task_id": "443_fd00ecae-50d9-4aa5-9dab-fdc22778a5aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all numbers in the given list.", "code": "def sum_of_squares(numbers):\n    return sum(num ** 2 for num in numbers)", "task_id": "443_e616e38d-34b1-4ab3-b014-91124c059b21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime numbers in the given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(numbers):\n    return sum(1 for num in numbers if is_prime(num))", "task_id": "443_26a8deca-b010-46c1-9960-21e2f900a5fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest string in the given list of strings.", "code": "def longest_string(strings):\n    return max(strings, key=len) if strings else ''", "task_id": "443_3c3b07ab-2b4b-4ca1-a192-83db70aa2865", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given list.", "code": "def reverse_list(numbers):\n    return numbers[::-1]", "task_id": "443_d9383903-5c9e-4bce-adfc-1e1e2b9e773b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of negative numbers in an array of integers.", "code": "def count_negatives(nums):\n    n = len(nums)\n    n_neg = 0\n    for x in nums:\n        if x < 0:\n            n_neg += 1\n    return round(n_neg / n, 2)", "task_id": "442_da7d0f49-bf4d-4e18-8e98-3b9c627e2bce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of zeros in an array of integers.", "code": "def count_zeros(nums):\n    n = len(nums)\n    n_zero = 0\n    for x in nums:\n        if x == 0:\n            n_zero += 1\n    return round(n_zero / n, 2)", "task_id": "442_524f246d-e1d3-4587-ab77-55017f0a69ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of even numbers in an array of integers.", "code": "def count_even(nums):\n    n = len(nums)\n    n_even = 0\n    for x in nums:\n        if x % 2 == 0:\n            n_even += 1\n    return round(n_even / n, 2)", "task_id": "442_9da2e8d8-5aa5-4119-bc7f-71ecb6836db3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of odd numbers in an array of integers.", "code": "def count_odd(nums):\n    n = len(nums)\n    n_odd = 0\n    for x in nums:\n        if x % 2 != 0:\n            n_odd += 1\n    return round(n_odd / n, 2)", "task_id": "442_ff4efa49-416f-4a70-a239-58202a5a2a4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers greater than a given threshold in an array of integers.", "code": "def count_greater_than(nums, threshold):\n    n = len(nums)\n    n_gt = 0\n    for x in nums:\n        if x > threshold:\n            n_gt += 1\n    return round(n_gt / n, 2)", "task_id": "442_951bf4e6-3229-4de5-91d1-ee1e62ca5640", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers less than a given threshold in an array of integers.", "code": "def count_less_than(nums, threshold):\n    n = len(nums)\n    n_lt = 0\n    for x in nums:\n        if x < threshold:\n            n_lt += 1\n    return round(n_lt / n, 2)", "task_id": "442_dac147c6-0a43-42cb-941d-de07d72016d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of numbers divisible by a given divisor in an array of integers.", "code": "def count_divisible_by(nums, divisor):\n    n = len(nums)\n    n_div = 0\n    for x in nums:\n        if x % divisor == 0:\n            n_div += 1\n    return round(n_div / n, 2)", "task_id": "442_7f0bba2c-0190-4017-a339-fbbcf9377179", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of prime numbers in an array of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime(nums):\n    n = len(nums)\n    n_prime = 0\n    for x in nums:\n        if is_prime(x):\n            n_prime += 1\n    return round(n_prime / n, 2)", "task_id": "442_84187992-ea80-4375-9c18-ab71ea98daf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of palindrome numbers in an array of integers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef count_palindromes(nums):\n    n = len(nums)\n    n_palindrome = 0\n    for x in nums:\n        if is_palindrome(x):\n            n_palindrome += 1\n    return round(n_palindrome / n, 2)", "task_id": "442_8ff0cf61-0696-4256-99ad-48d39be9bcd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the ratio of perfect square numbers in an array of integers.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n\n\ndef count_perfect_squares(nums):\n    n = len(nums)\n    n_ps = 0\n    for x in nums:\n        if is_perfect_square(x):\n            n_ps += 1\n    return round(n_ps / n, 2)", "task_id": "442_c62720cb-4d47-4ad3-9dc3-cabfc765f4ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise addition of tuple elements in the given two tuples.", "code": "def index_addition(test_tup1, test_tup2):\n  res = tuple(a + b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_e0d82940-159d-4878-bfbc-fa02f2de5300", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise subtraction of tuple elements in the given two tuples.", "code": "def index_subtraction(test_tup1, test_tup2):\n  res = tuple(a - b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_2adf387a-b146-4fac-bae3-c2c2524197d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise division of tuple elements in the given two tuples.", "code": "def index_division(test_tup1, test_tup2):\n  res = tuple(a / b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_fd0e2352-b065-4160-911e-fcd615d9147c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise power calculation of tuple elements in the given two tuples.", "code": "def index_power(test_tup1, test_tup2):\n  res = tuple(a ** b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_184f320d-575a-488c-bebe-1cf21a57c3bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise modulus of tuple elements in the given two tuples.", "code": "def index_modulus(test_tup1, test_tup2):\n  res = tuple(a % b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_2621bc8a-90cd-4211-8370-b741dd2e868e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise concatenation of string elements in the given two tuples.", "code": "def index_concatenation(test_tup1, test_tup2):\n  res = tuple(a + b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_ef2cd7f5-46af-4304-b200-e49b4179a60a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value index wise from the given two tuples.", "code": "def index_max(test_tup1, test_tup2):\n  res = tuple(max(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_cdde948e-5adc-4670-8f59-cf150c6eaf30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value index wise from the given two tuples.", "code": "def index_min(test_tup1, test_tup2):\n  res = tuple(min(a, b) for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_ef600500-5365-4f04-b61f-23a013cf805b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise concatenation of string elements in the given two tuples with a separator.", "code": "def index_concat_with_separator(test_tup1, test_tup2, sep):\n  res = tuple(a + sep + b for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_7238082b-dbcc-4ce0-a283-104dc71ed7ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform index wise sum of squares of tuple elements in the given two tuples.", "code": "def index_sum_of_squares(test_tup1, test_tup2):\n  res = tuple(a**2 + b**2 for a, b in zip(test_tup1, test_tup2))\n  return res", "task_id": "445_92e45caa-8e01-4e4f-a0a4-d4ec8e9a9cab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k from the end in the given tuple list.", "code": "def trim_tuple_reverse(test_list, K):\n  res = []\n  for ele in test_list:\n    res.append(tuple(list(ele)[:-K]))\n  return str(res)", "task_id": "444_1e647e7b-92f6-43b2-81c8-0fd79f738303", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k from the start in the given tuple list.", "code": "def trim_tuple_start(test_list, K):\n  res = []\n  for ele in test_list:\n    res.append(tuple(list(ele)[K:]))\n  return str(res)", "task_id": "444_3c3bd338-6f44-45df-b4c6-cc2bb31fb3e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k from both ends alternately in the given tuple list.", "code": "def trim_tuple_alternate(test_list, K):\n  res = []\n  for i, ele in enumerate(test_list):\n    if i % 2 == 0:\n      res.append(tuple(list(ele)[K:]))\n    else:\n      res.append(tuple(list(ele)[:-K]))\n  return str(res)", "task_id": "444_0dac60bd-d404-4571-a3ba-ef8ca0c0c378", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim k elements from the middle of each tuple in the given tuple list.", "code": "def trim_tuple_middle(test_list, K):\n  res = []\n  for ele in test_list:\n    N = len(ele)\n    mid = N // 2\n    res.append(tuple(list(ele)[:mid - K//2] + list(ele)[mid + K//2 + K%2:]))\n  return str(res)", "task_id": "444_dcc9b37b-0192-4bee-8d06-653f62bac1d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k if the length of the tuple is odd in the given tuple list.", "code": "def trim_tuple_odd(test_list, K):\n  res = []\n  for ele in test_list:\n    if len(ele) % 2 != 0:\n      res.append(tuple(list(ele)[K:]))\n    else:\n      res.append(ele)\n  return str(res)", "task_id": "444_3a4281fb-0a8a-4997-af74-028e901156cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k if the length of the tuple is even in the given tuple list.", "code": "def trim_tuple_even(test_list, K):\n  res = []\n  for ele in test_list:\n    if len(ele) % 2 == 0:\n      res.append(tuple(list(ele)[K:]))\n    else:\n      res.append(ele)\n  return str(res)", "task_id": "444_36a2763b-1c26-4384-afa5-4b5dba0d5f65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim k elements from the first and last positions of each tuple in the given tuple list.", "code": "def trim_tuple_first_last(test_list, K):\n  res = []\n  for ele in test_list:\n    res.append(tuple(list(ele)[K:-K]))\n  return str(res)", "task_id": "444_0b1fbb0c-0bd5-4c86-a72b-c25eff290229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by 2*k in the given tuple list.", "code": "def trim_tuple_double(test_list, K):\n  res = []\n  for ele in test_list:\n    res.append(tuple(list(ele)[2*K:]))\n  return str(res)", "task_id": "444_1a8ee73c-e802-4b06-b584-e8775d1c104a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by half of k in the given tuple list.", "code": "def trim_tuple_half(test_list, K):\n  res = []\n  for ele in test_list:\n    res.append(tuple(list(ele)[K//2:]))\n  return str(res)", "task_id": "444_976e058e-023f-4dd7-8160-fb0123a672bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to trim each tuple by k, skipping every other tuple in the given tuple list.", "code": "def trim_tuple_skip(test_list, K):\n  res = []\n  for i, ele in enumerate(test_list):\n    if i % 2 == 0:\n      res.append(tuple(list(ele)[K:]))\n    else:\n      res.append(ele)\n  return str(res)", "task_id": "444_ad3a828d-6186-4d88-8c01-f95a0f5a5ade", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find squares of individual elements in a list using lambda function.", "code": "def square_nums(nums):\n    square_nums = list(map(lambda x: x ** 2, nums))\n    return square_nums", "task_id": "447_db87e6b3-c1b3-4e5e-8a31-48133e694c0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double individual elements in a list using lambda function.", "code": "def double_nums(nums):\n    double_nums = list(map(lambda x: x * 2, nums))\n    return double_nums", "task_id": "447_7b4d5c92-9f8d-49b6-8c3c-b68d62134884", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find half of individual elements in a list using lambda function.", "code": "def half_nums(nums):\n    half_nums = list(map(lambda x: x / 2, nums))\n    return half_nums", "task_id": "447_1fb30a6c-d7be-49d8-99b7-9df016ceb9b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment individual elements in a list by 1 using lambda function.", "code": "def increment_nums(nums):\n    increment_nums = list(map(lambda x: x + 1, nums))\n    return increment_nums", "task_id": "447_4f17ac37-02bf-4c40-bf7e-ecd66b0c4462", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to decrement individual elements in a list by 1 using lambda function.", "code": "def decrement_nums(nums):\n    decrement_nums = list(map(lambda x: x - 1, nums))\n    return decrement_nums", "task_id": "447_04b0fddd-3d85-4b21-a134-be80628f7ed5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to negate individual elements in a list using lambda function.", "code": "def negate_nums(nums):\n    negate_nums = list(map(lambda x: -x, nums))\n    return negate_nums", "task_id": "447_b306db43-75e1-49c0-af3c-d3b335f7f0fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of individual elements in a list using lambda function.", "code": "def absolute_nums(nums):\n    absolute_nums = list(map(lambda x: abs(x), nums))\n    return absolute_nums", "task_id": "447_107559a1-6e98-4564-a4da-9f25e145b0ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert individual elements in a list to strings using lambda function.", "code": "def stringify_nums(nums):\n    stringify_nums = list(map(lambda x: str(x), nums))\n    return stringify_nums", "task_id": "447_bd9ff652-351b-4a19-aa60-95b48cdd0732", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if individual elements in a list are even using lambda function.", "code": "def is_even(nums):\n    is_even = list(map(lambda x: x % 2 == 0, nums))\n    return is_even", "task_id": "447_f8c9a1a9-cee9-4537-9427-2ab571cbb528", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if individual elements in a list are odd using lambda function.", "code": "def is_odd(nums):\n    is_odd = list(map(lambda x: x % 2 != 0, nums))\n    return is_odd", "task_id": "447_55db9b89-1c44-4d7b-ba32-aa5b6aeff58f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a string.", "code": "def count_occurrences_in_string(s, lst):\n    count = 0\n    for item in lst:\n        count += s.count(item)\n    return count", "task_id": "446_fc24886c-1b6e-4dbd-bee2-73914114f579", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in the values of a dictionary.", "code": "def count_occurrences_in_dict(d, lst):\n    count = 0\n    for value in d.values():\n        for item in lst:\n            count += str(value).count(item)\n    return count", "task_id": "446_da913b81-7c7a-4ed1-8e29-932a2fb8dbac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a set.", "code": "def count_occurrences_in_set(s, lst):\n    count = 0\n    for item in lst:\n        if item in s:\n            count += 1\n    return count", "task_id": "446_0bdc34b6-d5c0-4ebc-b9ef-5bfe4444fdb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a nested list.", "code": "def count_occurrences_in_nested_list(nested_lst, lst):\n    count = 0\n    for sublist in nested_lst:\n        for item in lst:\n            count += sublist.count(item)\n    return count", "task_id": "446_bc3139eb-9696-44bb-b9c3-1f34eccce769", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a 2D matrix.", "code": "def count_occurrences_in_matrix(matrix, lst):\n    count = 0\n    for row in matrix:\n        for item in lst:\n            count += row.count(item)\n    return count", "task_id": "446_b9982a22-dd1d-43f1-9010-ffb247248718", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a list of strings.", "code": "def count_occurrences_in_string_list(str_lst, lst):\n    count = 0\n    for string in str_lst:\n        for item in lst:\n            count += string.count(item)\n    return count", "task_id": "446_b683f990-03b1-4ab4-aaf5-e45048b76a12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in the keys of a dictionary.", "code": "def count_occurrences_in_dict_keys(d, lst):\n    count = 0\n    for key in d.keys():\n        for item in lst:\n            count += str(key).count(item)\n    return count", "task_id": "446_83acd2f7-8fca-4bbf-9f75-802bc5a03b69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in the values of a dictionary.", "code": "def count_occurrences_in_dict_values(d, lst):\n    count = 0\n    for value in d.values():\n        for item in lst:\n            count += str(value).count(item)\n    return count", "task_id": "446_8cd1eb07-66b5-417e-b5c3-5756c3021bc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a list of tuples.", "code": "def count_occurrences_in_tuple_list(tup_lst, lst):\n    count = 0\n    for tup in tup_lst:\n        for item in lst:\n            count += tup.count(item)\n    return count", "task_id": "446_69b246d2-9947-4a9c-84b3-21e682b67511", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrence of all elements of a list in a nested dictionary.", "code": "def count_occurrences_in_nested_dict(nested_dict, lst):\n    count = 0\n    for key, value in nested_dict.items():\n        if isinstance(value, dict):\n            count += count_occurrences_in_nested_dict(value, lst)\n        else:\n            for item in lst:\n                count += str(value).count(item)\n    return count", "task_id": "446_3fc1c088-9262-40aa-846c-ab9c825a721f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def fib_sum(n):\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "448_359639f2-4a3e-40dd-9c06-50cea24ed344", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Tribonacci numbers.", "code": "def tribonacci_sum(n):\n    a, b, c = 0, 1, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b, c = b, c, a + b + c\n    return total", "task_id": "448_e012d3d3-8ab8-47ed-bc49-0b48557bdbc7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Lucas numbers.", "code": "def lucas_sum(n):\n    a, b = 2, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "448_8fc9302d-bc4f-43ae-a491-a514021fd05d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Pell numbers.", "code": "def pell_sum(n):\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, 2 * b + a\n    return total", "task_id": "448_731f9a16-bef5-4e28-951b-ea5599ec8efe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Jacobsthal numbers.", "code": "def jacobsthal_sum(n):\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + 2 * b\n    return total", "task_id": "448_7dd1a0c2-1fe6-4497-8d9f-024f8b7f61dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Padovan numbers.", "code": "def padovan_sum(n):\n    a, b, c = 1, 1, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b, c = b, c, a + b\n    return total", "task_id": "448_72964101-a9b6-49b0-9c9f-d67edb6c92c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Hamming numbers.", "code": "def hamming_sum(n):\n    hamming = [1]\n    i2 = i3 = i5 = 0\n    next2, next3, next5 = 2, 3, 5\n    total = 1\n    for _ in range(1, n):\n        next_hamming = min(next2, next3, next5)\n        hamming.append(next_hamming)\n        total += next_hamming\n        if next_hamming == next2:\n            i2 += 1\n            next2 = hamming[i2] * 2\n        if next_hamming == next3:\n            i3 += 1\n            next3 = hamming[i3] * 3\n        if next_hamming == next5:\n            i5 += 1\n            next5 = hamming[i5] * 5\n    return total", "task_id": "448_a582d718-6032-4c7d-822f-b436e2532b26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Catalan numbers.", "code": "def catalan_sum(n):\n    def catalan_number(k):\n        if k == 0 or k == 1:\n            return 1\n        res = 0\n        for i in range(k):\n            res += catalan_number(i) * catalan_number(k - 1 - i)\n        return res\n    total = 0\n    for i in range(n):\n        total += catalan_number(i)\n    return total", "task_id": "448_f8d7102d-e151-4074-8aa8-7957228c42b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n even Fibonacci numbers.", "code": "def fibonacci_even_sum(n):\n    a, b = 0, 2\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, 4 * b + a\n    return total", "task_id": "448_914336c1-2423-49a6-ad75-97893ed22452", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n odd Fibonacci numbers.", "code": "def fibonacci_odd_sum(n):\n    a, b = 1, 1\n    total = 0\n    count = 0\n    while count < n:\n        if a % 2 != 0:\n            total += a\n            count += 1\n        a, b = b, a + b\n    return total", "task_id": "448_dd5aea7f-3713-4429-af5b-09abc8181067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also start with a given prefix.", "code": "def extract_string_with_prefix(str_list, length, prefix):\n    result = [s for s in str_list if len(s) == length and s.startswith(prefix)]\n    return result", "task_id": "450_07087b4a-1b43-4e02-bdfc-27b91cb5d5df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also end with a given suffix.", "code": "def extract_string_with_suffix(str_list, length, suffix):\n    result = [s for s in str_list if len(s) == length and s.endswith(suffix)]\n    return result", "task_id": "450_4f35fb9d-4c0e-4873-89f0-d299d89f7b11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain a given substring.", "code": "def extract_string_with_substring(str_list, length, substring):\n    result = [s for s in str_list if len(s) == length and substring in s]\n    return result", "task_id": "450_70b38fef-6e8e-4d76-90e9-42fd26e46c1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one vowel.", "code": "def extract_string_with_vowels(str_list, length):\n    vowels = set('aeiouAEIOU')\n    result = [s for s in str_list if len(s) == length and any(char in vowels for char in s)]\n    return result", "task_id": "450_b580cd4e-ad60-4990-b2bd-d6136b74bf68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one consonant.", "code": "def extract_string_with_consonants(str_list, length):\n    vowels = set('aeiouAEIOU')\n    result = [s for s in str_list if len(s) == length and any(char not in vowels for char in s)]\n    return result", "task_id": "450_ce79bca2-1832-452a-8f75-562adeaf3823", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one digit.", "code": "def extract_string_with_digits(str_list, length):\n    result = [s for s in str_list if len(s) == length and any(char.isdigit() for char in s)]\n    return result", "task_id": "450_ac955c51-419b-4a59-9407-e216e9471113", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one uppercase letter.", "code": "def extract_string_with_uppercase(str_list, length):\n    result = [s for s in str_list if len(s) == length and any(char.isupper() for char in s)]\n    return result", "task_id": "450_18d0aef9-ef3f-45eb-8017-3f4084c21a44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one lowercase letter.", "code": "def extract_string_with_lowercase(str_list, length):\n    result = [s for s in str_list if len(s) == length and any(char.islower() for char in s)]\n    return result", "task_id": "450_c2da4a42-42a3-4cc2-831c-ce762d383e87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that also contain at least one special character (non-alphanumeric).", "code": "def extract_string_with_special_chars(str_list, length):\n    result = [s for s in str_list if len(s) == length and any(not char.isalnum() for char in s)]\n    return result", "task_id": "450_ec896edf-d433-4dd1-a8d6-829db2f9e72a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract strings of a specified size from a given list of string values that are also palindromes.", "code": "def extract_string_with_palindrome(str_list, length):\n    result = [s for s in str_list if len(s) == length and s == s[::-1]]\n    return result", "task_id": "450_29ca5915-bd97-4c5e-9adb-0e18f251b3ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that gives profit amount if the given amount has profit else return 0.", "code": "def profit_amount(actual_cost, sale_amount): \n  if sale_amount > actual_cost: \n    amount = sale_amount - actual_cost \n    return amount \n  else: \n    return 0", "task_id": "452_e3f27244-9b43-41cf-8154-9ad7ad54413d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns True if there is a loss, otherwise False.", "code": "def is_loss(actual_cost, sale_amount): \n  return sale_amount < actual_cost", "task_id": "452_d5cd0611-6eb6-46ab-8157-c42b59719b6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the loss percentage if there is a loss, otherwise return 0.0.", "code": "def loss_percentage(actual_cost, sale_amount): \n  if sale_amount < actual_cost: \n    loss = actual_cost - sale_amount \n    return (loss / actual_cost) * 100 \n  else: \n    return 0.0", "task_id": "452_d029449c-daa6-418f-9e32-f65173c14145", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns 'Profit' if there is a profit, 'Loss' if there is a loss, and 'No Profit No Loss' if neither.", "code": "def profit_or_loss(actual_cost, sale_amount): \n  if sale_amount > actual_cost: \n    return 'Profit' \n  elif sale_amount < actual_cost: \n    return 'Loss' \n  else: \n    return 'No Profit No Loss'", "task_id": "452_428675b3-fc0d-4bec-ad24-cadc1df266eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns the profit amount if there is a profit, the loss amount if there is a loss, and 0 if neither.", "code": "def profit_or_loss_amount(actual_cost, sale_amount): \n  if sale_amount > actual_cost: \n    return sale_amount - actual_cost \n  elif sale_amount < actual_cost: \n    return actual_cost - sale_amount \n  else: \n    return 0", "task_id": "452_38cee5bd-770a-4682-bbd3-5fd7035c7ff9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns the profit percentage if there is a profit, the loss percentage if there is a loss, and 0.0 if neither.", "code": "def profit_or_loss_percentage(actual_cost, sale_amount): \n  if sale_amount > actual_cost: \n    profit = sale_amount - actual_cost \n    return (profit / actual_cost) * 100 \n  elif sale_amount < actual_cost: \n    loss = actual_cost - sale_amount \n    return (loss / actual_cost) * 100 \n  else: \n    return 0.0", "task_id": "452_795e05e5-3c96-4c81-aea7-b472bb8e487e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns True if there is a profit, otherwise False.", "code": "def is_profit(actual_cost, sale_amount): \n  return sale_amount > actual_cost", "task_id": "452_9d75614b-4479-47d3-8c20-a302f5294a06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a message 'Profit of X' if there is a profit, 'Loss of X' if there is a loss, and 'No Profit No Loss' if neither, where X is the amount.", "code": "def profit_or_loss_message(actual_cost, sale_amount): \n  if sale_amount > actual_cost: \n    return f'Profit of {sale_amount - actual_cost}' \n  elif sale_amount < actual_cost: \n    return f'Loss of {actual_cost - sale_amount}' \n  else: \n    return 'No Profit No Loss'", "task_id": "452_88f0b3c0-0ae8-4504-9c36-5855651f5551", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns the net gain (positive) or net loss (negative) amount.", "code": "def net_gain_or_loss(actual_cost, sale_amount): \n  return sale_amount - actual_cost", "task_id": "452_c55d93c6-0c93-4a82-9e62-0ab1fc099d3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns True if there is no profit and no loss, otherwise False.", "code": "def is_no_profit_no_loss(actual_cost, sale_amount): \n  return sale_amount == actual_cost", "task_id": "452_b8b2b754-230f-4a0a-9cec-2a6661540645", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form a right triangle or not.", "code": "def is_right_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    if d1 == 0 or d2 == 0 or d3 == 0:\n        return 'No'\n    sides = sorted([d1, d2, d3])\n    if sides[0] + sides[1] == sides[2]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_3e01164c-f307-498f-b5da-0939539ae1da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points are collinear or not.", "code": "def is_collinear(x1, y1, x2, y2, x3, y3):\n    area = x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)\n    if area == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_b802ac62-6268-4939-8ca1-e47f7215ec17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form an isosceles triangle or not.", "code": "def is_isosceles_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    if d1 == d2 or d2 == d3 or d3 == d1:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_817edb31-b66a-4891-9602-3ce235e02293", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form an equilateral triangle or not.", "code": "def is_equilateral_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    if d1 == d2 == d3:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_4d6b041e-ec8f-4fcd-bfd6-25926c30fd45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form a scalene triangle or not.", "code": "def is_scalene_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    if d1 != d2 and d2 != d3 and d3 != d1:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_a34b0d42-96da-4377-ba42-1c7767dcbd96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form an obtuse triangle or not.", "code": "def is_obtuse_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    sides = sorted([d1, d2, d3])\n    if sides[2] > sides[0] + sides[1]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_bc3e2edd-827d-4516-8a00-ced2c6c45564", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form an acute triangle or not.", "code": "def is_acute_triangle(x1, y1, x2, y2, x3, y3):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x1, y1)\n    sides = sorted([d1, d2, d3])\n    if sides[2] < sides[0] + sides[1]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_05088f0c-8301-4517-9297-c964e8f5f169", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form a parallelogram or not.", "code": "def is_parallelogram(x1, y1, x2, y2, x3, y3, x4, y4):\n    def midpoint(x1, y1, x2, y2):\n        return ((x1 + x2) / 2, (y1 + y2) / 2)\n    mid1 = midpoint(x1, y1, x3, y3)\n    mid2 = midpoint(x2, y2, x4, y4)\n    if mid1 == mid2:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_45890dec-d7c2-49b8-96d1-fb4c247639ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form a rectangle or not.", "code": "def is_rectangle(x1, y1, x2, y2, x3, y3, x4, y4):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x4, y4)\n    d4 = distance_sq(x4, y4, x1, y1)\n    diag1 = distance_sq(x1, y1, x3, y3)\n    diag2 = distance_sq(x2, y2, x4, y4)\n    if d1 == d3 and d2 == d4 and diag1 == diag2:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_b44ec88a-8c51-42bd-99e6-93432913bf40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given points form a square or not.", "code": "def is_square(x1, y1, x2, y2, x3, y3, x4, y4):\n    def distance_sq(x1, y1, x2, y2):\n        return (x2 - x1) ** 2 + (y2 - y1) ** 2\n    d1 = distance_sq(x1, y1, x2, y2)\n    d2 = distance_sq(x2, y2, x3, y3)\n    d3 = distance_sq(x3, y3, x4, y4)\n    d4 = distance_sq(x4, y4, x1, y1)\n    diag1 = distance_sq(x1, y1, x3, y3)\n    diag2 = distance_sq(x2, y2, x4, y4)\n    if d1 == d2 == d3 == d4 and diag1 == diag2:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "449_d3ef9113-ef07-412b-8740-2d92d44fffec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'q'.", "code": "import re\ndef text_match_wordq(text):\n    patterns = '\\\\w*q.\\\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_90440a93-4d47-4ec5-bade-14c025eb2e92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'x'.", "code": "import re\ndef text_match_wordx(text):\n    patterns = '\\\\w*x.\\\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_6ef285f8-562e-4d6a-a2bb-def4e42f0b88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'y'.", "code": "import re\ndef text_match_wordy(text):\n    patterns = '\\\\w*y.\\\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_73d5996d-bf87-4389-8c09-b941ec203ff1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'v'.", "code": "import re\ndef text_match_wordv(text):\n    patterns = '\\\\w*v.\\\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_d8ec7c80-a604-4728-9e4f-d9cc6bbb512e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing 'w'.", "code": "import re\ndef text_match_wordw(text):\n    patterns = '\\\\w*w.\\\\w*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_1b8a26c2-2405-426f-bd8c-ec8e134b1b2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least two vowels.", "code": "import re\ndef text_match_word2vowels(text):\n    patterns = '\\\\b\\\\w*[aeiou]{2,}\\\\w*\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_aedd4cd0-4238-47d3-8768-a24c7d474646", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least two consonants.", "code": "import re\ndef text_match_word2consonants(text):\n    patterns = '\\\\b\\\\w*[^aeiou]{2,}\\\\w*\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_04bcbe7d-c57d-4e69-8c23-34a978fc1e20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least one digit.", "code": "import re\ndef text_match_word_digits(text):\n    patterns = '\\\\b\\\\w*\\\\d+\\\\w*\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_4a1ba679-e637-4561-8f37-d9354dfa154d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least one uppercase letter.", "code": "import re\ndef text_match_word_uppercase(text):\n    patterns = '\\\\b\\\\w*[A-Z]+\\\\w*\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_3942b76b-bdf0-4117-91ee-213194e3950b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least one special character (e.g., @, #, $, etc.).", "code": "import re\ndef text_match_word_specialchar(text):\n    patterns = '\\\\b\\\\w*[@#$%^&*()_+!~`\\\\-=\\\\[\\\\]\\\\{};:\\\\'\\\\\"\\\\|\\\\,.<>?/]+\\\\w*\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "454_c6d64ca9-4a09-4d6d-8066-acc5aed265db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd factors of a number.", "code": "import math\ndef sum_of_odd_factors(n):\n    if n % 2 == 0:\n        n = n // 2\n    res = 1\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        curr_sum = 1\n        curr_term = 1\n        while n % i == 0:\n            n = n // i\n            curr_term *= i\n            curr_sum += curr_term\n        res *= curr_sum\n    if n >= 2:\n        res *= (1 + n)\n    return res", "task_id": "453_0f3507d5-6d2b-4dd5-9c1b-fd8711d8002e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of even factors of a number.", "code": "import math\ndef product_of_even_factors(n):\n    if n % 2 != 0:\n        return 1\n    res = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            res *= i\n    return res", "task_id": "453_9f832e3a-3942-4ca3-9c1d-4e12ef612c44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime factors of a number.", "code": "import math\ndef sum_of_prime_factors(n):\n    res = 0\n    while n % 2 == 0:\n        res += 2\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            res += i\n            n = n // i\n    if n > 2:\n        res += n\n    return res", "task_id": "453_b1f86677-fc8f-42e4-8dd4-3198679fd7e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even factors of a number.", "code": "def count_of_even_factors(n):\n    count = 0\n    for i in range(2, n + 1, 2):\n        if n % i == 0:\n            count += 1\n    return count", "task_id": "453_280c42b8-477d-479f-8ba7-38d57025a566", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all factors of a number.", "code": "import math\ndef sum_of_factors(n):\n    res = 0\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            if i == n // i:\n                res += i\n            else:\n                res += i + n // i\n    return res", "task_id": "453_239818cb-4d9e-4777-ba14-d694b2777caf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of odd factors of a number.", "code": "import math\ndef product_of_odd_factors(n):\n    res = 1\n    if n % 2 == 0:\n        n = n // 2\n    for i in range(1, n + 1, 2):\n        if n % i == 0:\n            res *= i\n    return res", "task_id": "453_150c6567-e8d5-484c-9058-7f29e3523a7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a number.", "code": "import math\ndef sum_of_divisors(n):\n    res = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            res += i\n    return res", "task_id": "453_2a069ce7-5645-4628-8b81-b95033f1229f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime factors of a number.", "code": "import math\ndef count_of_prime_factors(n):\n    count = 0\n    while n % 2 == 0:\n        count += 1\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            count += 1\n            n = n // i\n    if n > 2:\n        count += 1\n    return count", "task_id": "453_c25c2d91-c5bc-4d38-bd9f-d1ceeed5b9d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique prime factors of a number.", "code": "import math\ndef sum_of_unique_prime_factors(n):\n    res = 0\n    if n % 2 == 0:\n        res += 2\n        while n % 2 == 0:\n            n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            res += i\n            while n % i == 0:\n                n = n // i\n    if n > 2:\n        res += n\n    return res", "task_id": "453_afd47f76-002d-4013-b643-eebb0d01f393", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of unique prime factors of a number.", "code": "import math\ndef product_of_unique_prime_factors(n):\n    res = 1\n    if n % 2 == 0:\n        res *= 2\n        while n % 2 == 0:\n            n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            res *= i\n            while n % i == 0:\n                n = n // i\n    if n > 2:\n        res *= n\n    return res", "task_id": "453_b74a0c7f-ae52-4df9-86bf-3ecf21294a7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False", "task_id": "455_2f019f0b-5869-4c96-9a61-c71bc3856365", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given day number (1 for Monday, 7 for Sunday) is a weekend or not.", "code": "def is_weekend(day: int) -> bool:\n    return day == 6 or day == 7", "task_id": "455_bf4df920-fe0f-459a-b928-49605a9cc037", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "455_808c8e60-e758-4e71-a46d-48e833b2e804", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(char: str) -> bool:\n    return char.lower() in 'aeiou'", "task_id": "455_98de5a35-459a-4e08-bf77-12d9acc66353", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "455_6493b423-5d6d-4c4c-b24a-e8a58363cf8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(num: int) -> bool:\n    return num % 2 == 0", "task_id": "455_7b40cba2-dd0e-407a-852a-54a08c72adad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is an uppercase letter or not.", "code": "def is_uppercase(char: str) -> bool:\n    return char.isupper()", "task_id": "455_5ffc5b22-6f52-4327-9265-35e0f6b69806", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 5 or not.", "code": "def is_divisible_by_5(num: int) -> bool:\n    return num % 5 == 0", "task_id": "455_e465b39b-f4a4-48cf-b978-6befb7b54d53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square or not.", "code": "def is_square(num: int) -> bool:\n    return int(num**0.5)**2 == num", "task_id": "455_4a5e0dff-c9dd-491f-9664-13dc209e8493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a Fibonacci number or not.", "code": "def is_fibonacci(num: int) -> bool:\n    a, b = 0, 1\n    while b < num:\n        a, b = b, a + b\n    return b == num or num == 0", "task_id": "455_637107f3-0f3f-4771-b002-792e49deb015", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each string in a given list of string values.", "code": "def capitalize_string_list(stringlist):\n    result = [x.capitalize() for x in stringlist]\n    return result", "task_id": "456_ec3aeae8-bb61-44ab-96ee-310c1e32594b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all strings in a given list of string values to lowercase.", "code": "def lowercase_string_list(stringlist):\n    result = [x.lower() for x in stringlist]\n    return result", "task_id": "456_00147522-60e5-4c78-8f02-0676a2f3a310", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert all strings in a given list of string values to uppercase.", "code": "def uppercase_string_list(stringlist):\n    result = [x.upper() for x in stringlist]\n    return result", "task_id": "456_181c608f-48e0-4c97-bf4e-078464d0ee9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the length of each string in a given list of string values.", "code": "def length_of_string_list(stringlist):\n    result = [len(x) for x in stringlist]\n    return result", "task_id": "456_de16c4ba-a78f-4d7a-a07b-ade06247b116", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove vowels from each string in a given list of string values.", "code": "def remove_vowels_string_list(stringlist):\n    vowels = 'aeiouAEIOU'\n    result = [''.join([char for char in x if char not in vowels]) for x in stringlist]\n    return result", "task_id": "456_0e267794-a5fa-444b-84f0-217af1028f3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each character in each string in a given list of string values.", "code": "def double_char_string_list(stringlist):\n    result = [''.join([char*2 for char in x]) for x in stringlist]\n    return result", "task_id": "456_979b2e3b-3c55-488e-bd2c-d5a889148845", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in each string in a given list of string values.", "code": "def reverse_words_string_list(stringlist):\n    result = [' '.join(x.split()[::-1]) for x in stringlist]\n    return result", "task_id": "456_2a04113c-7eff-47fd-ac02-dcc781360830", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add an exclamation mark at the end of each string in a given list of string values.", "code": "def add_exclamation_string_list(stringlist):\n    result = [x + '!' for x in stringlist]\n    return result", "task_id": "456_0568bb54-5f25-4d67-b7b4-c2576e69d984", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace spaces with underscores in each string in a given list of string values.", "code": "def replace_spaces_string_list(stringlist):\n    result = [x.replace(' ', '_') for x in stringlist]\n    return result", "task_id": "456_3f3dd147-cf5f-4eb6-980e-a1535e45cfeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from each string in a given list of string values.", "code": "def remove_duplicates_string_list(stringlist):\n    result = [''.join(sorted(set(x), key=x.index)) for x in stringlist]\n    return result", "task_id": "456_77548f22-2ce1-4705-b861-6f127febf231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def triangle_area(base: float, height: float) -> float:\n    area = 0.5 * base * height\n    return area", "task_id": "458_308c220f-43ca-4655-a478-f8ff0b5b1bf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def circle_area(radius: float) -> float:\n    import math\n    area = math.pi * radius ** 2\n    return area", "task_id": "458_f89d17d1-8f06-448f-917e-83f28d66a92d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def square_area(side: float) -> float:\n    area = side ** 2\n    return area", "task_id": "458_bbdf5c9c-4128-4365-9097-bae55eb531cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def parallelogram_area(base: float, height: float) -> float:\n    area = base * height\n    return area", "task_id": "458_069da550-a1ea-4a92-9b78-d83abb1e0670", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid.", "code": "def trapezoid_area(base1: float, base2: float, height: float) -> float:\n    area = 0.5 * (base1 + base2) * height\n    return area", "task_id": "458_79894cb2-db53-48e8-93a6-3c8213eb92cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rhombus.", "code": "def rhombus_area(diagonal1: float, diagonal2: float) -> float:\n    area = 0.5 * diagonal1 * diagonal2\n    return area", "task_id": "458_9372a015-288f-48dc-836a-06878faa3aa1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def cube_volume(side: float) -> float:\n    volume = side ** 3\n    return volume", "task_id": "458_bed7102c-3225-49ad-ab84-d66ceb170885", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def cylinder_volume(radius: float, height: float) -> float:\n    import math\n    volume = math.pi * radius ** 2 * height\n    return volume", "task_id": "458_92087c82-6f66-45cb-b8d9-a3d36916c1d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def sphere_volume(radius: float) -> float:\n    import math\n    volume = (4/3) * math.pi * radius ** 3\n    return volume", "task_id": "458_4676efc7-bd84-4c22-88ac-17fc89ac2dd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def cone_volume(radius: float, height: float) -> float:\n    import math\n    volume = (1/3) * math.pi * radius ** 2 * height\n    return volume", "task_id": "458_58d78f74-f56b-4097-9676-2cbdfd9d7507", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a given string using regex.", "code": "import re\ndef remove_digits(s):\n    return re.sub(r'\\d', '', s)", "task_id": "459_f189ff29-18f0-4b47-b9ea-94c165cb6110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string using regex.", "code": "import re\ndef remove_vowels(s):\n    return re.sub(r'[aeiouAEIOU]', '', s)", "task_id": "459_49e614aa-46d0-418b-8331-1901e3e6be87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters from a given string using regex.", "code": "import re\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]', '', s)", "task_id": "459_6a4fa502-f060-4c41-9975-a86948f09df8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase letters from a given string using regex.", "code": "import re\ndef remove_lowercase(s):\n    return re.sub(r'[a-z]', '', s)", "task_id": "459_6d907974-56b6-4f87-8347-5300d479a3ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a given string using regex.", "code": "import re\ndef remove_whitespace(s):\n    return re.sub(r'\\s', '', s)", "task_id": "459_96ea188f-745e-401f-bf64-56fbb698b1f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string using regex.", "code": "import re\ndef remove_consonants(s):\n    return re.sub(r'[^aeiouAEIOU\\d\\W]', '', s)", "task_id": "459_ffffbcb5-d0c2-4a29-89eb-fb00d1d186d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphanumeric characters from a given string using regex.", "code": "import re\ndef remove_non_alphanumeric(s):\n    return re.sub(r'[^\\w]', '', s)", "task_id": "459_3e84dec3-96dc-4c4d-8a35-5ea22b158647", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all words containing digits from a given string using regex.", "code": "import re\ndef remove_words_with_digits(s):\n    return re.sub(r'\\b\\w*\\d\\w*\\b', '', s)", "task_id": "459_e39fcb45-5926-4d8c-a9c6-31afd214001d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate spaces from a given string using regex.", "code": "import re\ndef remove_duplicate_spaces(s):\n    return re.sub(r'\\s+', ' ', s).strip()", "task_id": "459_e953b2c0-143f-41e9-b932-4255433ed89f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove HTML tags from a given string using regex.", "code": "import re\ndef remove_html_tags(s):\n    return re.sub(r'<.*?>', '', s)", "task_id": "459_8ca1817a-cfee-4612-a385-354f1123a4ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having maximum length.", "code": "def find_max_sublist(lst):\n    maxList = max(lst, key=len)\n    return maxList", "task_id": "457_a87e986a-5d69-4a26-ab59-321fad306221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the minimum sum of its elements.", "code": "def find_min_sum_sublist(lst):\n    minSumList = min(lst, key=sum)\n    return minSumList", "task_id": "457_8e071137-5208-427a-9229-1bbec02b22c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum sum of its elements.", "code": "def find_max_sum_sublist(lst):\n    maxSumList = max(lst, key=sum)\n    return maxSumList", "task_id": "457_fca88636-eb01-4b09-abe4-dcf73bc87938", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the minimum average of its elements.", "code": "def find_min_avg_sublist(lst):\n    minAvgList = min(lst, key=lambda x: sum(x)/len(x) if len(x) > 0 else float('inf'))\n    return minAvgList", "task_id": "457_eab98b30-36a3-458a-a2ee-41a234cf470c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum average of its elements.", "code": "def find_max_avg_sublist(lst):\n    maxAvgList = max(lst, key=lambda x: sum(x)/len(x) if len(x) > 0 else float('-inf'))\n    return maxAvgList", "task_id": "457_8e725bad-5c7a-41c1-a89e-03f23d38083b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the minimum product of its elements.", "code": "def find_min_product_sublist(lst):\n    from functools import reduce\n    minProductList = min(lst, key=lambda x: reduce(lambda a, b: a*b, x, 1))\n    return minProductList", "task_id": "457_84b35e7c-648d-40a4-9eb0-4820df03c45e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum product of its elements.", "code": "def find_max_product_sublist(lst):\n    from functools import reduce\n    maxProductList = max(lst, key=lambda x: reduce(lambda a, b: a*b, x, 1))\n    return maxProductList", "task_id": "457_f72a38c0-87ae-4062-b875-e28dbae549cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the minimum length whose sum of elements is greater than a given target sum.", "code": "def find_min_length_sublist_with_sum(lst, target_sum):\n    valid_sublists = [sublist for sublist in lst if sum(sublist) > target_sum]\n    if not valid_sublists:\n        return []\n    minLengthList = min(valid_sublists, key=len)\n    return minLengthList", "task_id": "457_b8656369-27e6-402a-a8d8-cda28b7039fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist having the maximum length whose sum of elements is less than a given target sum.", "code": "def find_max_length_sublist_with_sum(lst, target_sum):\n    valid_sublists = [sublist for sublist in lst if sum(sublist) < target_sum]\n    if not valid_sublists:\n        return []\n    maxLengthList = max(valid_sublists, key=len)\n    return maxLengthList", "task_id": "457_43f6ce47-9b12-4289-9332-324fad58f1db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist whose sum of elements is closest to a given target sum.", "code": "def find_sublist_with_closest_sum(lst, target_sum):\n    closestList = min(lst, key=lambda x: abs(sum(x) - target_sum))\n    return closestList", "task_id": "457_4a4a6601-d490-468e-8855-e344c8ac6623", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the last element of each sublist.", "code": "def get_last_elements(lst):\n    return [item[-1] for item in lst]", "task_id": "460_ade98151-0c52-4f59-9b8b-a83c2c078d67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the second element of each sublist.", "code": "def get_second_elements(lst):\n    return [item[1] for item in lst if len(item) > 1]", "task_id": "460_cf9145e1-f494-4370-a9b7-a730d64c98ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist that has an even number of elements.", "code": "def get_first_elements_of_even_sublists(lst):\n    return [item[0] for item in lst if len(item) % 2 == 0]", "task_id": "460_36ec5e52-4c76-4c3e-8700-0c73d852fa11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each non-empty sublist.", "code": "def get_first_elements_of_non_empty_sublists(lst):\n    return [item[0] for item in lst if item]", "task_id": "460_a9ae1877-1e47-4ba9-9fce-97dc8a0fd3f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist that has at least a given minimum length.", "code": "def get_first_elements_of_sublists_with_min_length(lst, min_length):\n    return [item[0] for item in lst if len(item) >= min_length]", "task_id": "460_bba105d5-d8e1-4bbf-bb97-a259befec345", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first and last element of each sublist.", "code": "def get_first_and_last_elements(lst):\n    return [(item[0], item[-1]) for item in lst]", "task_id": "460_c70511c5-91b6-431f-beca-b6f41ceb738c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist where the first element starts with the letter 'a'.", "code": "def get_first_elements_of_sublists_starting_with_a(lst):\n    return [item[0] for item in lst if item[0].startswith('a')]", "task_id": "460_bfa59871-542d-444c-9fce-f11642cc0d4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist where the first element is an integer.", "code": "def get_first_elements_of_sublists_with_integers(lst):\n    return [item[0] for item in lst if isinstance(item[0], int)]", "task_id": "460_3b83c0ef-8cbe-4a31-a9c1-a9344666f43c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist where the first element is a positive number.", "code": "def get_first_elements_of_sublists_with_positive_numbers(lst):\n    return [item[0] for item in lst if item[0] > 0]", "task_id": "460_206178e9-9151-4873-a3f6-efd22308348a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist where the first element is a string.", "code": "def get_first_elements_of_sublists_with_strings(lst):\n    return [item[0] for item in lst if isinstance(item[0], str)]", "task_id": "460_6249d6bb-ad23-4b4c-ac32-499c6450e22f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the lower case characters in a given string.", "code": "def count_lowercase(s: str) -> int:\n    lower_ctr = 0\n    for char in s:\n        if 'a' <= char <= 'z':\n            lower_ctr += 1\n    return lower_ctr", "task_id": "461_a20ffefa-ebbe-4aa8-8767-3b1e09a9852d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the digits in a given string.", "code": "def count_digits(s: str) -> int:\n    digit_ctr = 0\n    for char in s:\n        if char.isdigit():\n            digit_ctr += 1\n    return digit_ctr", "task_id": "461_30feb118-5f37-484f-8490-e3b1ec27d6b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    vowel_ctr = 0\n    for char in s:\n        if char in vowels:\n            vowel_ctr += 1\n    return vowel_ctr", "task_id": "461_84ca3448-6212-40ea-ac11-411ccbf5cc64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the consonants in a given string.", "code": "def count_consonants(s: str) -> int:\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    consonant_ctr = 0\n    for char in s:\n        if char in consonants:\n            consonant_ctr += 1\n    return consonant_ctr", "task_id": "461_38bbd820-fe77-4006-ba1e-7e66659d8460", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the spaces in a given string.", "code": "def count_spaces(s: str) -> int:\n    space_ctr = 0\n    for char in s:\n        if char == ' ':\n            space_ctr += 1\n    return space_ctr", "task_id": "461_1f02faf9-aa98-42ff-b3a7-3a28dc4a9489", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the special characters (non-alphanumeric) in a given string.", "code": "def count_special_characters(s: str) -> int:\n    special_ctr = 0\n    for char in s:\n        if not char.isalnum():\n            special_ctr += 1\n    return special_ctr", "task_id": "461_908f7bce-d563-4a81-87f4-8be58475043b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the words in a given string.", "code": "def count_words(s: str) -> int:\n    words = s.split()\n    return len(words)", "task_id": "461_459de3dc-a071-486f-8c53-4b9e7390475a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the sentences in a given string. Assume sentences end with '.', '!', or '?'.", "code": "def count_sentences(s: str) -> int:\n    sentence_endings = '.!?'\n    sentence_ctr = 0\n    for char in s:\n        if char in sentence_endings:\n            sentence_ctr += 1\n    return sentence_ctr", "task_id": "461_9bbb12e1-9ad4-461b-aad3-21e4a01dcba3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the uppercase vowels in a given string.", "code": "def count_uppercase_vowels(s: str) -> int:\n    uppercase_vowels = 'AEIOU'\n    uppercase_vowel_ctr = 0\n    for char in s:\n        if char in uppercase_vowels:\n            uppercase_vowel_ctr += 1\n    return uppercase_vowel_ctr", "task_id": "461_725a7f01-81cf-4df3-bd10-821c55f2e7c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the lowercase consonants in a given string.", "code": "def count_lowercase_consonants(s: str) -> int:\n    lowercase_consonants = 'bcdfghjklmnpqrstvwxyz'\n    lowercase_consonant_ctr = 0\n    for char in s:\n        if char in lowercase_consonants:\n            lowercase_consonant_ctr += 1\n    return lowercase_consonant_ctr", "task_id": "461_a457752b-5c66-4960-819d-6cc79c61cb23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a specific key exists in a dictionary.", "code": "def check_keys(dict, key):\n    return key in dict", "task_id": "464_a123161b-31c5-4edd-93dd-f90cd2b30e21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all values in a dictionary are greater than a given number.", "code": "def check_value_greater_than(dict, n):\n    return all(x > n for x in dict.values())", "task_id": "464_84fcc647-7408-4942-b4c9-bac62562933e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all keys in a dictionary have a length greater than a given number.", "code": "def check_key_length(dict, length):\n    return all(len(key) > length for key in dict.keys())", "task_id": "464_4ef3fc5a-44bd-4cbe-9f4b-95b7d3e68f56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all values in a dictionary are of a specific type.", "code": "def check_value_type(dict, value_type):\n    return all(isinstance(x, value_type) for x in dict.values())", "task_id": "464_27e9295d-7e6f-4db7-bb22-198598517272", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all keys in a dictionary start with a specific prefix.", "code": "def check_key_prefix(dict, prefix):\n    return all(key.startswith(prefix) for key in dict.keys())", "task_id": "464_a8802afe-4b0f-468e-bdb3-52416f79d036", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all values in a dictionary are within a specific range.", "code": "def check_value_in_range(dict, low, high):\n    return all(low <= x <= high for x in dict.values())", "task_id": "464_c9cbafd4-e8ed-4ff4-b4ad-a8aedc469eb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all keys in a dictionary end with a specific suffix.", "code": "def check_key_suffix(dict, suffix):\n    return all(key.endswith(suffix) for key in dict.keys())", "task_id": "464_19fd9312-15c9-4373-b94e-6e3e7c828df9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all values in a dictionary contain a specific substring.", "code": "def check_value_contains(dict, substring):\n    return all(substring in x for x in dict.values() if isinstance(x, str))", "task_id": "464_1189ff0e-da23-488c-b60d-d2fe9ed13140", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all keys in a dictionary are numeric strings.", "code": "def check_key_is_digit(dict):\n    return all(key.isdigit() for key in dict.keys())", "task_id": "464_02f55ba7-9ab8-4e24-b0b2-a52f820dba44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all values in a dictionary are even numbers.", "code": "def check_value_is_even(dict):\n    return all(x % 2 == 0 for x in dict.values() if isinstance(x, int))", "task_id": "464_7388808e-6898-4ef1-b44e-4afefb3e0db7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible permutations of the elements of a given list.", "code": "def permutations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for i in range(len(list1)):\n        for p in permutations_list(list1[:i] + list1[i+1:]):\n            result.append([list1[i]] + p)\n    return result", "task_id": "462_25a11e28-82d6-4b82-84ee-159dd5fe9132", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible subsets of the elements of a given list.", "code": "def subsets_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in subsets_list(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "task_id": "462_a520b27a-5140-4cee-9991-9ab5e3aa22a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the power set of a given list.", "code": "def power_set(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in power_set(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "task_id": "462_ef6e539f-2d64-4886-ac4e-da5e803896c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique combinations of the elements of a given list.", "code": "def unique_combinations_list(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in unique_combinations_list(list1[1:]):\n        if el not in result:\n            result += [el, el+[list1[0]]]\n    return result", "task_id": "462_f8c69000-ec00-407f-a2d7-11d1e1e537f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations with replacement of the elements of a given list.", "code": "def combinations_with_replacement(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_with_replacement(list1[1:]):\n        result += [el, el+[list1[0]]]\n    for el in combinations_with_replacement(list1):\n        result += [el, el+[list1[0]]]\n    return result", "task_id": "462_5deec070-1de9-46b4-ab96-b1b263259543", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations of k elements from a given list.", "code": "def k_combinations_list(list1, k):\n    if k == 0:\n        return [[]]\n    if len(list1) == 0:\n        return []\n    result = []\n    for el in k_combinations_list(list1[1:], k-1):\n        result.append([list1[0]] + el)\n    result += k_combinations_list(list1[1:], k)\n    return result", "task_id": "462_30c7f48d-adfb-4cd3-8358-af435ade6fbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations of the elements of a given list that sum to k.", "code": "def combinations_sum_to_k(list1, k):\n    if k == 0:\n        return [[]]\n    if len(list1) == 0 or k < 0:\n        return []\n    result = []\n    for el in combinations_sum_to_k(list1[1:], k-list1[0]):\n        result.append([list1[0]] + el)\n    result += combinations_sum_to_k(list1[1:], k)\n    return result", "task_id": "462_452d8c83-a701-4b6c-9583-3571223bbdb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations of the elements of a given list with a specific length.", "code": "def combinations_with_length(list1, length):\n    if length == 0:\n        return [[]]\n    if len(list1) == 0:\n        return []\n    result = []\n    for el in combinations_with_length(list1[1:], length-1):\n        result.append([list1[0]] + el)\n    result += combinations_with_length(list1[1:], length)\n    return result", "task_id": "462_e342c051-aa34-4d45-bd18-e72fee32fcf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations of the elements of a given list, including duplicates.", "code": "def combinations_with_duplicates(list1):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_with_duplicates(list1[1:]):\n        result += [el, el+[list1[0]]]\n    return result", "task_id": "462_792f23ac-632e-4b2a-9608-69795ecefc51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all possible combinations of the elements of a given list with a minimum length.", "code": "def combinations_with_min_length(list1, min_length):\n    if len(list1) == 0:\n        return [[]]\n    result = []\n    for el in combinations_with_min_length(list1[1:], min_length):\n        if len(el) >= min_length:\n            result.append(el)\n        if len(el+[list1[0]]) >= min_length:\n            result.append(el+[list1[0]])\n    return result", "task_id": "462_bd275ea1-9985-4d4b-a3f9-950fb5591783", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with zero values from a given dictionary.", "code": "def remove_zeros(d):\n    return {k: v for k, v in d.items() if v != 0}", "task_id": "465_09191017-4184-4d9b-8ce2-566cbef602b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with negative values from a given dictionary.", "code": "def remove_negative_values(d):\n    return {k: v for k, v in d.items() if v >= 0}", "task_id": "465_1150bbd2-3c50-4da9-8eed-0f89303b87c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with empty string values from a given dictionary.", "code": "def remove_empty_strings(d):\n    return {k: v for k, v in d.items() if v != ''}", "task_id": "465_db3e205a-7522-404f-8004-8cfaa843dad9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with boolean False values from a given dictionary.", "code": "def remove_false_values(d):\n    return {k: v for k, v in d.items() if v is not False}", "task_id": "465_17285d21-7f65-4ce3-b498-206b8c75ca6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with None values from a given dictionary.", "code": "def remove_none_values(d):\n    return {k: v for k, v in d.items() if v is not None}", "task_id": "465_7fe0d046-415d-44a7-bd39-2e646c34a8cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with empty list values from a given dictionary.", "code": "def remove_empty_lists(d):\n    return {k: v for k, v in d.items() if v != []}", "task_id": "465_5f48bca1-c1b5-4550-8181-da2f1effab5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with empty tuple values from a given dictionary.", "code": "def remove_empty_tuples(d):\n    return {k: v for k, v in d.items() if v != ()}", "task_id": "465_473070d6-e36a-4151-8fd9-0286ca01fefc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with empty set values from a given dictionary.", "code": "def remove_empty_sets(d):\n    return {k: v for k, v in d.items() if v != set()}", "task_id": "465_e88c1854-7347-4d8a-8c20-a470f63c44ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with empty dictionary values from a given dictionary.", "code": "def remove_empty_dicts(d):\n    return {k: v for k, v in d.items() if v != {}}", "task_id": "465_bfc23707-e6a8-4556-8986-cb773d263641", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove items with values less than a given threshold from a dictionary.", "code": "def remove_values_less_than(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}", "task_id": "465_452e0e0f-2127-425b-98de-8360fc44a94a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum subarray of the given array.", "code": "def find_max_sum_subarray(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "task_id": "463_a3e32707-dae3-4e86-a328-4924f1ff7901", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum subarray of the given array.", "code": "def find_min_sum_subarray(arr):\n    min_so_far = arr[0]\n    min_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        min_ending_here = min(arr[i], min_ending_here + arr[i])\n        min_so_far = min(min_so_far, min_ending_here)\n    return min_so_far", "task_id": "463_86780aa2-f58d-476f-8abf-2a0ce84471a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum subsequence of the given array.", "code": "def find_max_sum_subsequence(arr):\n    max_sum = 0\n    for num in arr:\n        if num > 0:\n            max_sum += num\n    return max_sum if max_sum > 0 else max(arr)", "task_id": "463_d896ea73-5785-455e-beb3-0b48ca773d0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product subsequence of the given array.", "code": "def find_max_product_subsequence(arr):\n    max_product = 1\n    has_positive = False\n    for num in arr:\n        if num > 0:\n            max_product *= num\n            has_positive = True\n    if not has_positive:\n        return max(arr)\n    return max_product", "task_id": "463_f435a82b-175a-469e-a226-53678a63b544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of non-adjacent subsequence of the given array.", "code": "def find_max_sum_non_adjacent_subsequence(arr):\n    incl = 0\n    excl = 0\n    for num in arr:\n        new_excl = max(incl, excl)\n        incl = excl + num\n        excl = new_excl\n    return max(incl, excl)", "task_id": "463_5ea3f24d-de2d-4233-983a-e9d53434d8ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum length of a subarray with all positive numbers.", "code": "def find_max_length_positive_subarray(arr):\n    max_length = 0\n    current_length = 0\n    for num in arr:\n        if num > 0:\n            current_length += 1\n            max_length = max(max_length, current_length)\n        else:\n            current_length = 0\n    return max_length", "task_id": "463_90a82eec-f2b0-4ca4-87b6-ead2aa239a81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a circular subarray of the given array.", "code": "def find_max_sum_circular_subarray(arr):\n    def kadane(arr):\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(arr)\n    max_wrap = sum(arr) - kadane([-x for x in arr])\n    return max(max_kadane, max_wrap)", "task_id": "463_b5a9144f-ea5a-4d6b-bd2f-6749eefb6ed7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a circular subarray of the given array.", "code": "def find_max_product_circular_subarray(arr):\n    def max_product_subarray(arr):\n        max_ending_here = 1\n        min_ending_here = 1\n        max_so_far = 0\n        for num in arr:\n            if num > 0:\n                max_ending_here *= num\n                min_ending_here = min(min_ending_here * num, 1)\n            elif num == 0:\n                max_ending_here = 1\n                min_ending_here = 1\n            else:\n                temp = max_ending_here\n                max_ending_here = max(min_ending_here * num, 1)\n                min_ending_here = temp * num\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = max_product_subarray(arr)\n    max_wrap = 1\n    for i in range(len(arr)):\n        arr[i] = -arr[i]\n    max_wrap *= max_product_subarray(arr)\n    for i in range(len(arr)):\n        arr[i] = -arr[i]\n    return max(max_kadane, max_wrap)", "task_id": "463_e708e2ae-3bc5-4a8e-8d72-2c8b58a30f1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a subarray with at most one deletion.", "code": "def find_max_sum_subarray_with_one_deletion(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_ending_here = [0] * n\n    max_starting_here = [0] * n\n    max_ending_here[0] = arr[0]\n    max_starting_here[-1] = arr[-1]\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i - 1] + arr[i])\n    for i in range(n - 2, -1, -1):\n        max_starting_here[i] = max(arr[i], max_starting_here[i + 1] + arr[i])\n    max_sum = max(max_ending_here)\n    for i in range(1, n - 1):\n        max_sum = max(max_sum, max_ending_here[i - 1] + max_starting_here[i + 1])\n    return max_sum", "task_id": "463_079c14a1-fe98-49f6-b1ac-04c3dacee011", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a subarray with at most one deletion.", "code": "def find_max_product_subarray_with_one_deletion(arr):\n    n = len(arr)\n    if n == 1:\n        return arr[0]\n    max_ending_here = [0] * n\n    max_starting_here = [0] * n\n    max_ending_here[0] = arr[0]\n    max_starting_here[-1] = arr[-1]\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i - 1] * arr[i])\n    for i in range(n - 2, -1, -1):\n        max_starting_here[i] = max(arr[i], max_starting_here[i + 1] * arr[i])\n    max_product = max(max_ending_here)\n    for i in range(1, n - 1):\n        max_product = max(max_product, max_ending_here[i - 1] * max_starting_here[i + 1])\n    return max_product", "task_id": "463_ab9dc607-c9d1-4f3d-873e-c9a4527c6215", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first peak element in the given array.", "code": "def find_first_peak(arr):\n    for i in range(1, len(arr) - 1):\n        if arr[i] > arr[i - 1] and arr[i] > arr[i + 1]:\n            return i\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[-1] >= arr[-2]:\n        return len(arr) - 1\n    return -1", "task_id": "466_2212c265-96cb-409d-aa11-79952446ded5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first valley element in the given array.", "code": "def find_valley(arr):\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            return i\n    if arr[0] <= arr[1]:\n        return 0\n    if arr[-1] <= arr[-2]:\n        return len(arr) - 1\n    return -1", "task_id": "466_e4984daf-cd65-4688-a3cd-7151514c6221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first peak or valley element in the given array.", "code": "def find_peak_or_valley(arr):\n    for i in range(1, len(arr) - 1):\n        if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]):\n            return i\n    if arr[0] != arr[1]:\n        return 0\n    if arr[-1] != arr[-2]:\n        return len(arr) - 1\n    return -1", "task_id": "466_41689937-1beb-4dac-a991-1e4eba2a1111", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the peak element in the given array using recursion.", "code": "def find_peak_recursive(arr, low, high):\n    mid = low + (high - low) // 2\n    if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] <= arr[mid]):\n        return mid\n    elif mid > 0 and arr[mid - 1] > arr[mid]:\n        return find_peak_recursive(arr, low, mid - 1)\n    else:\n        return find_peak_recursive(arr, mid + 1, high)", "task_id": "466_52ad448d-926e-470e-98ce-4620ae30c3db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the peak element in the given array without using recursion.", "code": "def find_peak_non_recursive(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1", "task_id": "466_f3a7d7dc-4030-4ba3-8c18-8ee943a0f372", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a peak element in a 2D array.", "code": "def find_peak_2d(arr):\n    def find_max_column_index(mid):\n        max_index = 0\n        for i in range(len(arr)):\n            if arr[i][mid] > arr[max_index][mid]:\n                max_index = i\n        return max_index\n    def find_peak_2d_util(low, high):\n        mid = low + (high - low) // 2\n        max_index = find_max_column_index(mid)\n        if (mid == 0 or arr[max_index][mid - 1] <= arr[max_index][mid]) and (mid == len(arr[0]) - 1 or arr[max_index][mid + 1] <= arr[max_index][mid]):\n            return (max_index, mid)\n        elif mid > 0 and arr[max_index][mid - 1] > arr[max_index][mid]:\n            return find_peak_2d_util(low, mid - 1)\n        else:\n            return find_peak_2d_util(mid + 1, high)\n    return find_peak_2d_util(0, len(arr[0]) - 1)", "task_id": "466_7d024739-5088-472a-add0-d3c9cc733d0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a local minimum element in the given array.", "code": "def find_local_min(arr):\n    for i in range(1, len(arr) - 1):\n        if arr[i] < arr[i - 1] and arr[i] < arr[i + 1]:\n            return i\n    if arr[0] <= arr[1]:\n        return 0\n    if arr[-1] <= arr[-2]:\n        return len(arr) - 1\n    return -1", "task_id": "466_5454d8fa-4bbb-41f8-ac1e-68ae1550844c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first peak or valley element in the given array.", "code": "def find_first_peak_or_valley(arr):\n    for i in range(1, len(arr) - 1):\n        if (arr[i] > arr[i - 1] and arr[i] > arr[i + 1]) or (arr[i] < arr[i - 1] and arr[i] < arr[i + 1]):\n            return i\n    if arr[0] != arr[1]:\n        return 0\n    if arr[-1] != arr[-2]:\n        return len(arr) - 1\n    return -1", "task_id": "466_feb1818a-ea17-4f51-bf74-2c8e3470cf5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a peak element in the given array that may contain duplicates.", "code": "def find_peak_with_duplicates(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif mid > 0 and arr[mid - 1] > arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1", "task_id": "466_0887ffb0-1cd4-4120-9430-756ff7fc7eee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a peak element in a rotated sorted array.", "code": "def find_peak_in_rotated(arr):\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if (mid == 0 or arr[mid - 1] <= arr[mid]) and (mid == len(arr) - 1 or arr[mid + 1] <= arr[mid]):\n            return mid\n        elif arr[low] <= arr[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1", "task_id": "466_bdd52982-2426-4965-a783-e780583c5656", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert binary number to decimal number.", "code": "def binary_to_decimal(binaryNum):\n    decimalNum = 0\n    base = 1\n    while binaryNum > 0:\n        last_digit = binaryNum % 10\n        binaryNum = binaryNum // 10\n        decimalNum += last_digit * base\n        base = base * 2\n    return decimalNum", "task_id": "467_e92c5bb4-b588-4a35-9b71-c6275135679d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert decimal number to hexadecimal number.", "code": "def decimal_to_hexadecimal(deciNum):\n    hex_chars = '0123456789ABCDEF'\n    hexNum = ''\n    while deciNum > 0:\n        remainder = deciNum % 16\n        hexNum = hex_chars[remainder] + hexNum\n        deciNum = deciNum // 16\n    return hexNum", "task_id": "467_4ace664e-6922-47b3-8dbf-ad5654f838b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert octal number to decimal number.", "code": "def octal_to_decimal(octalNum):\n    decimalNum = 0\n    base = 1\n    while octalNum > 0:\n        last_digit = octalNum % 10\n        octalNum = octalNum // 10\n        decimalNum += last_digit * base\n        base = base * 8\n    return decimalNum", "task_id": "467_90109b92-5e08-4e36-9eb2-d7183f121ea7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert decimal number to binary number.", "code": "def decimal_to_binary(deciNum):\n    binaryNum = 0\n    countval = 1\n    while deciNum > 0:\n        remainder = deciNum % 2\n        binaryNum += remainder * countval\n        countval *= 10\n        deciNum //= 2\n    return binaryNum", "task_id": "467_1d7615ad-43f9-48fe-be30-a4751997e3e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert hexadecimal number to decimal number.", "code": "def hexadecimal_to_decimal(hexNum):\n    hex_chars = '0123456789ABCDEF'\n    decimalNum = 0\n    base = 1\n    for digit in hexNum[::-1]:\n        decimalNum += hex_chars.index(digit) * base\n        base *= 16\n    return decimalNum", "task_id": "467_7b3b29da-560d-40dd-8c28-cc528766c4b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert binary number to octal number.", "code": "def binary_to_octal(binaryNum):\n    decimalNum = binary_to_decimal(binaryNum)\n    return decimal_to_Octal(decimalNum)\n\ndef binary_to_decimal(binaryNum):\n    decimalNum = 0\n    base = 1\n    while binaryNum > 0:\n        last_digit = binaryNum % 10\n        binaryNum = binaryNum // 10\n        decimalNum += last_digit * base\n        base = base * 2\n    return decimalNum\n\ndef decimal_to_Octal(deciNum):\n    octalNum = 0\n    countval = 1\n    while deciNum > 0:\n        remainder = deciNum % 8\n        octalNum += remainder * countval\n        countval *= 10\n        deciNum //= 8\n    return octalNum", "task_id": "467_5d71273c-b451-456b-9c47-2050a91e4354", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert octal number to binary number.", "code": "def octal_to_binary(octalNum):\n    decimalNum = octal_to_decimal(octalNum)\n    return decimal_to_binary(decimalNum)\n\ndef octal_to_decimal(octalNum):\n    decimalNum = 0\n    base = 1\n    while octalNum > 0:\n        last_digit = octalNum % 10\n        octalNum = octalNum // 10\n        decimalNum += last_digit * base\n        base = base * 8\n    return decimalNum\n\ndef decimal_to_binary(deciNum):\n    binaryNum = 0\n    countval = 1\n    while deciNum > 0:\n        remainder = deciNum % 2\n        binaryNum += remainder * countval\n        countval *= 10\n        deciNum //= 2\n    return binaryNum", "task_id": "467_a14e40c6-6c31-488e-b06c-7c4de40a7cc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert hexadecimal number to binary number.", "code": "def hexadecimal_to_binary(hexNum):\n    decimalNum = hexadecimal_to_decimal(hexNum)\n    return decimal_to_binary(decimalNum)\n\ndef hexadecimal_to_decimal(hexNum):\n    hex_chars = '0123456789ABCDEF'\n    decimalNum = 0\n    base = 1\n    for digit in hexNum[::-1]:\n        decimalNum += hex_chars.index(digit) * base\n        base *= 16\n    return decimalNum\n\ndef decimal_to_binary(deciNum):\n    binaryNum = 0\n    countval = 1\n    while deciNum > 0:\n        remainder = deciNum % 2\n        binaryNum += remainder * countval\n        countval *= 10\n        deciNum //= 2\n    return binaryNum", "task_id": "467_e78d15d3-0992-44b4-8ac2-aa744529ab49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert binary number to hexadecimal number.", "code": "def binary_to_hexadecimal(binaryNum):\n    decimalNum = binary_to_decimal(binaryNum)\n    return decimal_to_hexadecimal(decimalNum)\n\ndef binary_to_decimal(binaryNum):\n    decimalNum = 0\n    base = 1\n    while binaryNum > 0:\n        last_digit = binaryNum % 10\n        binaryNum = binaryNum // 10\n        decimalNum += last_digit * base\n        base = base * 2\n    return decimalNum\n\ndef decimal_to_hexadecimal(deciNum):\n    hex_chars = '0123456789ABCDEF'\n    hexNum = ''\n    while deciNum > 0:\n        remainder = deciNum % 16\n        hexNum = hex_chars[remainder] + hexNum\n        deciNum = deciNum // 16\n    return hexNum", "task_id": "467_d0f03b44-2ce2-4981-8583-04d7f4a9c699", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert octal number to hexadecimal number.", "code": "def octal_to_hexadecimal(octalNum):\n    decimalNum = octal_to_decimal(octalNum)\n    return decimal_to_hexadecimal(decimalNum)\n\ndef octal_to_decimal(octalNum):\n    decimalNum = 0\n    base = 1\n    while octalNum > 0:\n        last_digit = octalNum % 10\n        octalNum = octalNum // 10\n        decimalNum += last_digit * base\n        base = base * 8\n    return decimalNum\n\ndef decimal_to_hexadecimal(deciNum):\n    hex_chars = '0123456789ABCDEF'\n    hexNum = ''\n    while deciNum > 0:\n        remainder = deciNum % 16\n        hexNum = hex_chars[remainder] + hexNum\n        deciNum = deciNum // 16\n    return hexNum", "task_id": "467_e567cf36-ecb5-4b6b-b79c-5f3fd01be200", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum formed by adding numbers of an increasing subsequence of that array.", "code": "def max_sum_increasing_subsequence(arr, n):\n    msis = [0] * n\n    for i in range(n):\n        msis[i] = arr[i]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and msis[i] < msis[j] + arr[i]:\n                msis[i] = msis[j] + arr[i]\n    return max(msis)", "task_id": "468_77740fc6-ff8c-4bcc-8830-96c5935bd356", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in an array.", "code": "def max_length_increasing_subsequence(arr, n):\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)", "task_id": "468_a797af77-1173-428e-a152-ac532077b805", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of non-adjacent elements in an array.", "code": "def max_sum_non_adjacent(arr, n):\n    incl = 0\n    excl = 0\n    for i in arr:\n        new_excl = max(incl, excl)\n        incl = excl + i\n        excl = new_excl\n    return max(incl, excl)", "task_id": "468_9a8d2ae0-5c19-452d-b596-e062f637dade", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a subarray in an array.", "code": "def max_product_subarray(arr, n):\n    max_end = min_end = max_so_far = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_end, min_end = min_end, max_end\n        max_end = max(arr[i], max_end * arr[i])\n        min_end = min(arr[i], min_end * arr[i])\n        max_so_far = max(max_so_far, max_end)\n    return max_so_far", "task_id": "468_5f207156-87f3-482d-93c0-1fbb571b64e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a subarray in an array.", "code": "def max_sum_subarray(arr, n):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "task_id": "468_462bc082-3ab0-491d-bb33-4c4a6d341d4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a circular subarray in an array.", "code": "def max_sum_circular_subarray(arr, n):\n    def kadane(arr):\n        max_so_far = arr[0]\n        max_ending_here = arr[0]\n        for i in range(1, len(arr)):\n            max_ending_here = max(arr[i], max_ending_here + arr[i])\n            max_so_far = max(max_so_far, max_ending_here)\n        return max_so_far\n    max_kadane = kadane(arr)\n    max_wrap = sum(arr) - kadane([-x for x in arr])\n    return max(max_kadane, max_wrap)", "task_id": "468_b93fb00b-790c-4140-a5a1-6dffaef6d9a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path in a triangle of numbers.", "code": "def max_sum_path_triangle(triangle, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]", "task_id": "468_bcf6b608-3d7e-4b6d-afcf-899c8e3c63ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path in a matrix from top-left to bottom-right.", "code": "def max_sum_path_matrix(matrix, n, m):\n    dp = [[0]*m for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n    return dp[n-1][m-1]", "task_id": "468_ef7ab1da-8413-4b39-9471-f7f1f8b2cfd8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path in a grid from top-left to bottom-right, moving only right or down.", "code": "def max_sum_path_grid(grid, n, m):\n    dp = [[0]*m for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, m):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, m):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][m-1]", "task_id": "468_ec80c136-3d76-4918-b9a5-cabf0202f739", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum path in a pyramid of numbers.", "code": "def max_sum_path_pyramid(pyramid, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            pyramid[i][j] += max(pyramid[i+1][j], pyramid[i+1][j+1])\n    return pyramid[0][0]", "task_id": "468_3c3c4b82-173d-44e0-af9a-aaff7dfcdd0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise multiplication of the elements of the given tuples.", "code": "def multiply_pairwise(test_tup):\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_223b0015-d450-49da-8afd-7a29b51e3103", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise subtraction of the elements of the given tuples.", "code": "def subtract_pairwise(test_tup):\n  res = tuple(i - j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_74cfbf1a-8d18-4544-8d77-0fc6bef85fa6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise division of the elements of the given tuples.", "code": "def divide_pairwise(test_tup):\n  res = tuple(i / j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_eb4b3718-c997-4a16-a775-2b314ad5ccb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise maximum of the elements of the given tuples.", "code": "def max_pairwise(test_tup):\n  res = tuple(max(i, j) for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_2a221af6-84ff-4889-aab7-0438f9b3ae39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise minimum of the elements of the given tuples.", "code": "def min_pairwise(test_tup):\n  res = tuple(min(i, j) for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_66a1d18a-5d9b-475d-af77-58f88e2e163e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of each element with the next element in the given tuples.", "code": "def sum_pairwise_with_next(test_tup):\n  res = tuple(test_tup[i] + test_tup[i + 1] for i in range(len(test_tup) - 1))\n  return (res)", "task_id": "470_58fc1cb7-874c-472b-a7eb-509426e19f38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of each element with the next element in the given tuples.", "code": "def diff_pairwise_with_next(test_tup):\n  res = tuple(test_tup[i] - test_tup[i + 1] for i in range(len(test_tup) - 1))\n  return (res)", "task_id": "470_fadb26f7-b17f-4d30-adb8-5805b2cfa8eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of each element with the next element in the given tuples.", "code": "def product_pairwise_with_next(test_tup):\n  res = tuple(test_tup[i] * test_tup[i + 1] for i in range(len(test_tup) - 1))\n  return (res)", "task_id": "470_0d3ad8da-cd1d-4a0b-ba9f-8de320adf6d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the quotient of each element with the next element in the given tuples.", "code": "def quotient_pairwise_with_next(test_tup):\n  res = tuple(test_tup[i] / test_tup[i + 1] for i in range(len(test_tup) - 1))\n  return (res)", "task_id": "470_0f0b4919-b4dd-4dba-beca-5da5f66a962f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pairwise power of the elements of the given tuples.", "code": "def power_pairwise(test_tup):\n  res = tuple(i ** j for i, j in zip(test_tup, test_tup[1:]))\n  return (res)", "task_id": "470_3769ea74-134b-410e-8e56-e1c4152ee6e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, considering a transaction fee for each transaction.", "code": "def max_profit_with_fee(price, k, fee):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0] - fee\n        for j in range(1, n):\n            final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, final_profit[i-1][j] - price[j] - fee)\n    return final_profit[k][n-1]", "task_id": "469_bef419fa-4f98-466f-ae45-c2250e8b1042", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, considering a cooldown period of 1 day after each transaction.", "code": "def max_profit_with_cooldown(price, k):\n    n = len(price)\n    if n == 0: return 0\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            if j > 1:\n                final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n                max_diff = max(max_diff, final_profit[i-1][j-2] - price[j])\n            else:\n                final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n                max_diff = max(max_diff, final_profit[i-1][j-1] - price[j])\n    return final_profit[k][n-1]", "task_id": "469_eac8d604-9a66-443f-84b3-bfb338bfe7ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, considering a minimum price threshold for buying stocks.", "code": "def max_profit_with_min_price(price, k, min_price):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -min_price\n        for j in range(1, n):\n            if price[j] >= min_price:\n                final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n                max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n            else:\n                final_profit[i][j] = final_profit[i][j-1]\n    return final_profit[k][n-1]", "task_id": "469_eb944336-0677-428d-855b-ce9444a50bae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from exactly k stock transactions.", "code": "def max_profit_with_fixed_transactions(price, k, fixed_transactions):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(fixed_transactions + 1)]\n    for i in range(1, fixed_transactions + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n    return final_profit[fixed_transactions][n-1]", "task_id": "469_b00e0beb-c47e-4015-b3ac-7c528acd3ec7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions within a given start and end day.", "code": "def max_profit_with_start_end(price, k, start, end):\n    n = end - start + 1\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[start]\n        for j in range(1, n):\n            final_profit[i][j] = max(final_profit[i][j-1], price[start + j] + max_diff)\n            max_diff = max(max_diff, final_profit[i-1][j] - price[start + j])\n    return final_profit[k][n-1]", "task_id": "469_a2c0ec52-9e74-405c-ae8b-342f5e51754f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions across multiple stocks.", "code": "def max_profit_with_multiple_stocks(prices, k):\n    n = len(prices[0])\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = [-prices[0][0]] * len(prices)\n        for j in range(1, n):\n            for m in range(len(prices)):\n                final_profit[i][j] = max(final_profit[i][j], prices[m][j] + max_diff[m])\n                max_diff[m] = max(max_diff[m], final_profit[i-1][j] - prices[m][j])\n    return final_profit[k][n-1]", "task_id": "469_f56ea1ef-8528-4c8b-9b34-ff3704f05137", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, considering a limit on the maximum profit that can be earned.", "code": "def max_profit_with_limit(price, k, limit):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            final_profit[i][j] = min(max(final_profit[i][j-1], price[j] + max_diff), limit)\n            max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n    return final_profit[k][n-1]", "task_id": "469_92b25d90-762c-4a9f-bff9-e7ffe7e388de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from varying maximum stock transactions for each day.", "code": "def max_profit_with_varying_k(price, k_values):\n    n = len(price)\n    max_k = max(k_values)\n    final_profit = [[0] * n for _ in range(max_k + 1)]\n    for i in range(1, max_k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n            max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n    return [final_profit[k][n-1] for k in k_values]", "task_id": "469_d4e9a614-7d0d-4684-966a-d9f28e5c3f05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, considering a limit on the number of transactions that can be performed in a day.", "code": "def max_profit_with_transaction_limit(price, k, transaction_limit):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            if j <= transaction_limit:\n                final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n                max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n            else:\n                final_profit[i][j] = final_profit[i][j-1]\n    return final_profit[k][n-1]", "task_id": "469_906c8cda-88d9-42d9-9eae-83408d7053d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit earned from a maximum of k stock transactions, ensuring each transaction yields at least a fixed profit.", "code": "def max_profit_with_fixed_profit(price, k, fixed_profit):\n    n = len(price)\n    final_profit = [[0] * n for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        max_diff = -price[0]\n        for j in range(1, n):\n            if price[j] - price[j-1] >= fixed_profit:\n                final_profit[i][j] = max(final_profit[i][j-1], price[j] + max_diff)\n                max_diff = max(max_diff, final_profit[i-1][j] - price[j])\n            else:\n                final_profit[i][j] = final_profit[i][j-1]\n    return final_profit[k][n-1]", "task_id": "469_0836e550-ba73-4c78-a245-c1402f8dabde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the remainder of the sum of array elements divided by n.", "code": "def sum_remainder(arr, n):\n    total_sum = sum(arr)\n    return total_sum % n", "task_id": "471_f96f8991-6a48-4fc8-941f-4117991840e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of array elements modulo n.", "code": "def product_modulo(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "task_id": "471_28efce9e-12b5-4d51-9f2f-a70a2c30beaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of array elements modulo n.", "code": "def sum_of_squares_modulo(arr, n):\n    total_sum = sum(x**2 for x in arr)\n    return total_sum % n", "task_id": "471_9f11d484-99a0-4e24-94cb-d5960cc27e29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of squares of array elements modulo n.", "code": "def product_of_squares_modulo(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * (num**2)) % n\n    return product", "task_id": "471_43f20157-4e84-4694-b8f4-4e45d8b57d8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of array elements modulo n.", "code": "def sum_of_cubes_modulo(arr, n):\n    total_sum = sum(x**3 for x in arr)\n    return total_sum % n", "task_id": "471_26521b5d-798d-4fce-ba8c-d3299bf642a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of cubes of array elements modulo n.", "code": "def product_of_cubes_modulo(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * (num**3)) % n\n    return product", "task_id": "471_533bbb0a-fc99-4a1a-b22e-fa0062dcb11d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of absolute values of array elements modulo n.", "code": "def sum_of_abs_modulo(arr, n):\n    total_sum = sum(abs(x) for x in arr)\n    return total_sum % n", "task_id": "471_df144610-2cd0-45a6-ac72-e299aa83c987", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of absolute values of array elements modulo n.", "code": "def product_of_abs_modulo(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * abs(num)) % n\n    return product", "task_id": "471_6d351db6-a3db-41be-897f-9f5bcdde702d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even numbers in the array modulo n.", "code": "def sum_of_even_modulo(arr, n):\n    total_sum = sum(x for x in arr if x % 2 == 0)\n    return total_sum % n", "task_id": "471_52b0ea18-6d0b-4710-aff5-8ca33327f719", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of odd numbers in the array modulo n.", "code": "def product_of_odd_modulo(arr, n):\n    product = 1\n    for num in arr:\n        if num % 2 != 0:\n            product = (product * num) % n\n    return product", "task_id": "471_c2796c1d-2930-441e-9ca0-56cb2f97c25e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive positive numbers or not.", "code": "def check_Consecutive_And_Positive(l):\n    return all(x > 0 for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_f43868b0-364b-4666-9aff-4f91e592392a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive negative numbers or not.", "code": "def check_Consecutive_And_Negative(l):\n    return all(x < 0 for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_1cdd0dc7-565a-4e17-bc1d-06427475e868", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive even numbers or not.", "code": "def check_Consecutive_And_Even(l):\n    return all(x % 2 == 0 for x in l) and sorted(l) == list(range(min(l), max(l)+1, 2))", "task_id": "472_eae3a87e-a072-4d66-a70c-d2190d9cc94e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive odd numbers or not.", "code": "def check_Consecutive_And_Odd(l):\n    return all(x % 2 != 0 for x in l) and sorted(l) == list(range(min(l), max(l)+1, 2))", "task_id": "472_85ae8750-7fbd-48c8-a414-22cb0e97cc76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive prime numbers or not.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef check_Consecutive_And_Prime(l):\n    return all(is_prime(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_c44a016e-a840-4ddc-87b3-ec20f672db1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive square numbers or not.", "code": "def is_square(n):\n    return int(n**0.5)**2 == n\n\ndef check_Consecutive_And_Square(l):\n    return all(is_square(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_e63a4ad4-e55b-4edc-ac4e-8559075694a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive cube numbers or not.", "code": "def is_cube(n):\n    return int(n**(1/3))**3 == n\n\ndef check_Consecutive_And_Cube(l):\n    return all(is_cube(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_3cd04182-212a-4ac8-8209-b6786e5ec835", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive Fibonacci numbers or not.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef check_Consecutive_And_Fibonacci(l):\n    return all(is_fibonacci(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_a246b6dc-ecd6-48b5-90f0-0f0355f7fa81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive palindrome numbers or not.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef check_Consecutive_And_Palindrome(l):\n    return all(is_palindrome(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_d4c7b216-e0ac-4f9a-8619-4eff7fffdc9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given list contains consecutive Armstrong numbers or not.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)\n\ndef check_Consecutive_And_Armstrong(l):\n    return all(is_armstrong(x) for x in l) and sorted(l) == list(range(min(l), max(l)+1))", "task_id": "472_6376093d-59b7-474d-afe3-fdff0d243f31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "474_f6f8d046-8503-495e-a41f-29d1f759fbc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "474_c512ddd5-b1e8-49be-add2-55032c1eec40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "474_af7c10ea-8841-4724-a76d-0eb84a5516ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "474_35c4f52f-14a5-44d0-8237-2abe576c015b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace from a string.", "code": "def remove_whitespace(s: str) -> str:\n    return ''.join(s.split())", "task_id": "474_9c19d71c-4515-45f3-b304-53d7bfa485e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "474_131843cf-47df-4ecb-97b0-a1e29cba12d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap the case of each character in a string.", "code": "def swap_case(s: str) -> str:\n    return s.swapcase()", "task_id": "474_67a358de-ed5b-4c9c-8549-4a4d2ec5600d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "474_835f9385-543b-44d2-b09c-070e598a27fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "474_52777409-d262-42d3-bd60-7ce6a7141ab3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat a string n times.", "code": "def repeat_string(s: str, n: int) -> str:\n    return s * n", "task_id": "474_375dd4a2-b4af-4974-a2a7-795e47559e59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by value in ascending order.", "code": "from collections import Counter\ndef sort_counter_ascending(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: item[1])\n    return sort_counter", "task_id": "475_5cf60326-0fb8-42ad-83dc-4e8b6e77a895", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by keys in ascending order.", "code": "from collections import Counter\ndef sort_counter_keys(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items())\n    return sort_counter", "task_id": "475_30f351ca-692b-4f01-827e-eb0a01accef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by value in descending order.", "code": "from collections import Counter\ndef sort_counter_descending(dict1):\n    x = Counter(dict1)\n    sort_counter = x.most_common()\n    return sort_counter", "task_id": "475_8e26fe2b-1998-4d30-bed8-c8e3adc32221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by keys in descending order.", "code": "from collections import Counter\ndef sort_counter_by_keys_descending(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: item[0], reverse=True)\n    return sort_counter", "task_id": "475_5e430147-3eba-44d5-981a-9ae9c626f3af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by the length of the values.", "code": "from collections import Counter\ndef sort_counter_by_value_length(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: len(str(item[1])))\n    return sort_counter", "task_id": "475_4def1d17-3a9e-4534-b66c-b4a69fddae92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter first by value and then by key.", "code": "from collections import Counter\ndef sort_counter_by_value_and_key(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: (item[1], item[0]))\n    return sort_counter", "task_id": "475_cb3a10d0-bba6-47e9-9fef-ae3cf1623ccd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by the length of the keys.", "code": "from collections import Counter\ndef sort_counter_by_key_length(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: len(str(item[0])))\n    return sort_counter", "task_id": "475_f1f08709-5211-40b6-a152-e62f94e83612", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by value, placing even values before odd values.", "code": "from collections import Counter\ndef sort_counter_by_value_even_odd(dict1):\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: (item[1] % 2, item[1]))\n    return sort_counter", "task_id": "475_5e88f518-d470-4a20-9e35-cdffba50fbd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by the number of vowels in the keys.", "code": "from collections import Counter\ndef sort_counter_by_key_vowel_count(dict1):\n    def count_vowels(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: count_vowels(item[0]))\n    return sort_counter", "task_id": "475_30246cf1-9a2a-4989-9724-59f38f260287", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a counter by value, placing prime values before non-prime values.", "code": "from collections import Counter\ndef sort_counter_by_value_prime_first(dict1):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    x = Counter(dict1)\n    sort_counter = sorted(x.items(), key=lambda item: (not is_prime(item[1]), item[1]))\n    return sort_counter", "task_id": "475_fdddb2de-2f71-46a7-958e-04f423e44c4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "477_2b4a3720-94a3-408a-b496-7a415c44a2a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "477_ab07619c-8202-42b6-b322-d7a4b42231da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all spaces from the given string.", "code": "def remove_spaces(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "477_33af3903-8e08-4bf5-b079-02c641c85b6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "477_e4f28c00-7d6e-47dc-98da-d0bb87fef4e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in the given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "477_ec9d3565-7d17-4f3a-9180-3e3fe2bf5d37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in the given string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "477_d2446a16-c351-4778-a99c-c178167b2c6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in the given string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "477_f8bfcc3f-e86c-485c-b0ef-881e7ed32e01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from the given string.", "code": "def remove_vowels(s: str) -> str:\n    return ''.join(char for char in s if char.lower() not in 'aeiou')", "task_id": "477_e9142b5e-4b4e-4d55-b921-efa350db4231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in the given string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "477_a1836e3a-880a-4f4c-9d67-ba2d0fadd457", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in the given string.", "code": "def count_consonants(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'bcdfghjklmnpqrstvwxyz')", "task_id": "477_bcddbdd9-1b09-4aac-a447-3e12a0e0530a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a given string.", "code": "import re\ndef remove_digits(s):\n    return re.sub(r'\\d', '', s)", "task_id": "478_188bbd4d-07fa-4c04-bcaa-7b5474da5fc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "import re\ndef remove_vowels(s):\n    return re.sub(r'[aeiouAEIOU]', '', s)", "task_id": "478_b0ac026e-b4ee-4c70-b068-b00e50d30d84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove uppercase substrings from a given string.", "code": "import re\ndef remove_uppercase(s):\n    return re.sub(r'[A-Z]', '', s)", "task_id": "478_64130553-9be8-4706-84d0-c84df86e791f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters from a given string.", "code": "import re\ndef remove_special_chars(s):\n    return re.sub(r'[^\\w\\s]', '', s)", "task_id": "478_e446bc36-691e-472b-8f5d-ececadd32417", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace from a given string.", "code": "import re\ndef remove_whitespace(s):\n    return re.sub(r'\\s', '', s)", "task_id": "478_6b2bb875-e507-4f8d-9bc9-48e13482e3b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string.", "code": "import re\ndef remove_consonants(s):\n    return re.sub(r'[^aeiouAEIOU\\d\\W]', '', s)", "task_id": "478_5ae91937-f493-4557-a7db-0c7472c1a579", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all number substrings from a given string.", "code": "import re\ndef remove_numbers(s):\n    return re.sub(r'\\d+', '', s)", "task_id": "478_c9e45dfb-5877-4e61-934d-a703d1016db1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphabetic characters from a given string.", "code": "import re\ndef remove_non_alpha(s):\n    return re.sub(r'[^a-zA-Z]', '', s)", "task_id": "478_4f49a24a-ffef-4cdc-9bb7-73680ea2d49c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphanumeric characters from a given string.", "code": "import re\ndef remove_non_alphanumeric(s):\n    return re.sub(r'[^a-zA-Z0-9]', '', s)", "task_id": "478_8c6c4f92-64f8-4a85-874f-51599f1b86ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all repeated characters from a given string, leaving only the first occurrence.", "code": "import re\ndef remove_repeated_chars(s):\n    return re.sub(r'(.)\\1+', r'\\1', s)", "task_id": "478_34916a60-6a0e-4fba-96ec-7ac13b996a48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the second largest and smallest value in a given array.", "code": "def sum_of_second_largest_and_smallest(nums):\n    nums_sorted = sorted(nums)\n    return nums_sorted[-2] + nums_sorted[0]", "task_id": "476_524188cb-e586-45bb-b026-921bea872415", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the largest and smallest value in a given array.", "code": "def product_of_largest_and_smallest(nums):\n    return max(nums) * min(nums)", "task_id": "476_f968605e-8f92-4fc9-90d3-5e6ed8934283", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest and second smallest value in a given array.", "code": "def sum_of_largest_and_second_smallest(nums):\n    nums_sorted = sorted(nums)\n    return nums_sorted[-1] + nums_sorted[1]", "task_id": "476_26ec7a55-b65e-42e1-8d67-33afbca60b2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two largest values in a given array.", "code": "def sum_of_two_largest(nums):\n    nums_sorted = sorted(nums)\n    return nums_sorted[-1] + nums_sorted[-2]", "task_id": "476_13a82a39-6e43-46cc-8ff2-3a435d78415d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two smallest values in a given array.", "code": "def sum_of_two_smallest(nums):\n    nums_sorted = sorted(nums)\n    return nums_sorted[0] + nums_sorted[1]", "task_id": "476_910cd023-bc41-426e-9da4-3621fcc9f5be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the difference between the largest and smallest value in a given array.", "code": "def difference_of_largest_and_smallest(nums):\n    return max(nums) - min(nums)", "task_id": "476_9079435c-2277-4479-8465-0fe7fa46a288", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest value and the median value in a given array.", "code": "def sum_of_largest_and_median(nums):\n    nums_sorted = sorted(nums)\n    median = nums_sorted[len(nums_sorted) // 2]\n    return max(nums) + median", "task_id": "476_4eee475a-a361-497d-8207-29391527ea18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the smallest value and the average of all values in a given array.", "code": "def sum_of_smallest_and_average(nums):\n    average = sum(nums) / len(nums)\n    return min(nums) + average", "task_id": "476_aaf0894b-2c1e-4a3b-ae45-f7c21761b6c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest value and the first value in a given array.", "code": "def sum_of_largest_and_first(nums):\n    return max(nums) + nums[0]", "task_id": "476_8b3cd684-d666-42b0-9bb1-ef09aadc3ca0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest value and the last value in a given array.", "code": "def sum_of_largest_and_last(nums):\n    return max(nums) + nums[-1]", "task_id": "476_b275b862-b70d-4524-bdb5-edf6481ab234", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last digit of a given number.", "code": "def last_digit(n: int) -> int:\n    return n % 10", "task_id": "479_44ce6382-a11f-483a-b21c-11d837997b1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total", "task_id": "479_cd68c1f9-83db-48a0-862e-2d2299d0b768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of a given number.", "code": "def product_of_digits(n: int) -> int:\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n = n // 10\n    return product", "task_id": "479_3f9b29b4-9f29-4523-8089-da9d38b685b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a given number.", "code": "def count_digits(n: int) -> int:\n    count = 0\n    while n > 0:\n        count += 1\n        n = n // 10\n    return count", "task_id": "479_46a9ef97-7e22-49c7-8cef-48fdd094f4c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(n: int) -> int:\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n = n // 10\n    return reversed_num", "task_id": "479_420aa3d2-66cb-41b3-8d3b-19fea503d6d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    original = n\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n = n // 10\n    return original == reversed_num", "task_id": "479_a52f43f8-b716-449e-b4c5-dc8a050f8475", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a specific digit in a given number.", "code": "def digit_occurrences(n: int, digit: int) -> int:\n    count = 0\n    while n > 0:\n        if n % 10 == digit:\n            count += 1\n        n = n // 10\n    return count", "task_id": "479_34d250ba-367a-425c-9d90-c19ffc34d5fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum digit in a given number.", "code": "def max_digit(n: int) -> int:\n    max_d = 0\n    while n > 0:\n        max_d = max(max_d, n % 10)\n        n = n // 10\n    return max_d", "task_id": "479_51508320-d3d3-4916-83cf-b8ce9f2fcc9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum digit in a given number.", "code": "def min_digit(n: int) -> int:\n    min_d = 9\n    while n > 0:\n        min_d = min(min_d, n % 10)\n        n = n // 10\n    return min_d", "task_id": "479_d599b0ca-69b4-46ce-b6f7-f018a22fae9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of even digits and the sum of odd digits of a given number as a tuple.", "code": "def digit_sum_even_odd(n: int) -> tuple:\n    even_sum = 0\n    odd_sum = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n        n = n // 10\n    return (even_sum, odd_sum)", "task_id": "479_e34f1871-a304-4cf9-bc1f-1260066b8f4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists.", "code": "def common_elements(list1, list2):\n    return set(list1).intersection(set(list2))", "task_id": "473_9d4609e0-392f-4542-b9d2-8a4a7091b642", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common keys between two dictionaries.", "code": "def common_keys(dict1, dict2):\n    return set(dict1.keys()).intersection(set(dict2.keys()))", "task_id": "473_1c1a3658-f9a8-4583-8324-4d556f64a44c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common characters between two strings.", "code": "def common_characters(str1, str2):\n    return set(str1).intersection(set(str2))", "task_id": "473_734b3595-c670-4dc1-8fbe-a4fa27db5dc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists and return them in sorted order.", "code": "def common_elements_sorted(list1, list2):\n    return sorted(list(set(list1).intersection(set(list2))))", "task_id": "473_111293a8-296b-4ee9-ae7b-8e0b0a5b569a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common words between two sentences.", "code": "def common_words(sentence1, sentence2):\n    words1 = set(sentence1.split())\n    words2 = set(sentence2.split())\n    return words1.intersection(words2)", "task_id": "473_8a36c2bb-c8c3-4bcd-b133-6fc5f0ed5d02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists and return a dictionary with the element as the key and the count of occurrences in both lists as the value.", "code": "from collections import Counter\n\ndef common_elements_with_count(list1, list2):\n    counter1 = Counter(list1)\n    counter2 = Counter(list2)\n    common_elements = set(list1).intersection(set(list2))\n    return {element: counter1[element] + counter2[element] for element in common_elements}", "task_id": "473_5f37d346-3c74-4a83-9b06-09aee95bb4b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of tuples.", "code": "def common_elements_in_tuples(tuples1, tuples2):\n    return set(tuples1).intersection(set(tuples2))", "task_id": "473_5054c42d-49a7-4fb1-809f-3ed5138fb7ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists of strings, ignoring case.", "code": "def common_elements_ignore_case(list1, list2):\n    list1_lower = [element.lower() for element in list1]\n    list2_lower = [element.lower() for element in list2]\n    return set(list1_lower).intersection(set(list2_lower))", "task_id": "473_08a0f2e2-155b-4a2c-aa96-a684c92a01de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists and return a dictionary with the element as the key and a tuple of indices (index in list1, index in list2) as the value.", "code": "def common_elements_with_indices(list1, list2):\n    common_elements = set(list1).intersection(set(list2))\n    return {element: (list1.index(element), list2.index(element)) for element in common_elements}", "task_id": "473_72568216-708c-4d6f-aaf9-b6704b4d3105", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements between two lists and return a list of tuples where each tuple contains the element and its positions in both lists.", "code": "def common_elements_with_positions(list1, list2):\n    common_elements = set(list1).intersection(set(list2))\n    return [(element, list1.index(element), list2.index(element)) for element in common_elements]", "task_id": "473_70d27422-aea8-4994-be98-5bc7152a376c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of vowels in the given string by using regex.", "code": "import re\ndef find_vowels(text):\n    pattern = r'[aeiouAEIOU]+'\n    return re.findall(pattern, text)", "task_id": "482_b05ea2f4-ada6-42f8-baa7-c9667780ef05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of digits in the given string by using regex.", "code": "import re\ndef find_numbers(text):\n    pattern = r'\\d+'\n    return re.findall(pattern, text)", "task_id": "482_304ca7ff-c841-4abd-91b7-ea73e975549c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of alphabetic characters in the given string by using regex.", "code": "import re\ndef find_words(text):\n    pattern = r'[a-zA-Z]+'\n    return re.findall(pattern, text)", "task_id": "482_5d01743f-3c15-46fb-a1c8-692b5def8b64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of capitalized words in the given string by using regex.", "code": "import re\ndef find_capitalized_words(text):\n    pattern = r'\\b[A-Z][a-z]*\\b'\n    return re.findall(pattern, text)", "task_id": "482_597bf7c8-08b1-497c-b641-9b351f7fb069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of non-alphanumeric characters in the given string by using regex.", "code": "import re\ndef find_non_alphanumeric(text):\n    pattern = r'[^a-zA-Z0-9]+'\n    return re.findall(pattern, text)", "task_id": "482_05cf17fd-ee86-4205-945f-21e4c2d1ec2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sequences of words that contain both letters and digits in the given string by using regex.", "code": "import re\ndef find_words_with_numbers(text):\n    pattern = r'\\b\\w*\\d+\\w*\\b'\n    return re.findall(pattern, text)", "task_id": "482_c54dfaaf-d80e-4692-a9f6-47d9ce1e01cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all email addresses in the given string by using regex.", "code": "import re\ndef find_emails(text):\n    pattern = r'\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b'\n    return re.findall(pattern, text)", "task_id": "482_e515b8e7-0d62-4866-8021-3f0cfcfe459f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all dates in the format YYYY-MM-DD in the given string by using regex.", "code": "import re\ndef find_dates(text):\n    pattern = r'\\b\\d{4}-\\d{2}-\\d{2}\\b'\n    return re.findall(pattern, text)", "task_id": "482_ab674025-7c6f-4ab7-86ec-99bee91b7513", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hashtags in the given string by using regex.", "code": "import re\ndef find_hashtags(text):\n    pattern = r'#\\w+'\n    return re.findall(pattern, text)", "task_id": "482_936922be-0e5c-4628-a05e-a7a8fc2fd5e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all URLs in the given string by using regex.", "code": "import re\ndef find_urls(text):\n    pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'\n    return re.findall(pattern, text)", "task_id": "482_40b4da9b-e68a-4f48-a534-7719c58fefeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum occurring character in a given string.", "code": "def get_min_occuring_char(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  min = float('inf')\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1\n  for i in str1:\n    if ctr[ord(i)] < min and ctr[ord(i)] > 0:\n      min = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_75284e36-511f-4ba3-885e-aff1bbbfe1f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a given string, ignoring case.", "code": "def get_max_occuring_char_case_insensitive(str1):\n  str1 = str1.lower()\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_122e1ca1-bf8c-429a-907f-d1285e5c0712", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring digit in a given string.", "code": "def get_max_occuring_digit(str1):\n  ctr = [0] * 10\n  max = -1\n  digit = ''\n  for i in str1:\n    if i.isdigit():\n      ctr[int(i)]+=1\n  for i in str1:\n    if i.isdigit() and max < ctr[int(i)]:\n      max = ctr[int(i)]\n      digit = i\n  return digit", "task_id": "480_c9e92f0b-8bc8-4343-8c64-f0940604c3d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a given string, excluding spaces.", "code": "def get_max_occuring_char_except_space(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    if i != ' ':\n      ctr[ord(i)]+=1\n  for i in str1:\n    if i != ' ' and max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_0b34417b-d464-433e-83b3-c4e071826fb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring vowel in a given string.", "code": "def get_max_occuring_vowel(str1):\n  vowels = 'aeiouAEIOU'\n  ctr = {v: 0 for v in vowels}\n  max = -1\n  ch = ''\n  for i in str1:\n    if i in vowels:\n      ctr[i] += 1\n  for v in vowels:\n    if max < ctr[v]:\n      max = ctr[v]\n      ch = v\n  return ch", "task_id": "480_e93c1fbe-d73b-44ce-8a0c-74dbfac837b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a given string, including punctuation.", "code": "def get_max_occuring_char_with_punctuation(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_fb9a6408-869b-4697-94c3-f45ab8c8195c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a given string, excluding digits.", "code": "def get_max_occuring_char_excluding_digits(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    if not i.isdigit():\n      ctr[ord(i)]+=1\n  for i in str1:\n    if not i.isdigit() and max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_1283a2c0-9b27-4762-b95d-3d490df769d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring alphabetic character in a given string.", "code": "def get_max_occuring_char_alpha_only(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    if i.isalpha():\n      ctr[ord(i)]+=1\n  for i in str1:\n    if i.isalpha() and max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_a39d894f-24bf-459a-942e-8bed02c39c8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a given string, including spaces.", "code": "def get_max_occuring_char_with_spaces(str1):\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in str1:\n    ctr[ord(i)]+=1\n  for i in str1:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_e913740b-afd6-4ee9-bc93-2ac0f721875e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum occurring character in a substring of a given string, defined by start and end indices.", "code": "def get_max_occuring_char_in_substring(str1, start, end):\n  substring = str1[start:end]\n  ASCII_SIZE = 256\n  ctr = [0] * ASCII_SIZE\n  max = -1\n  ch = ''\n  for i in substring:\n    ctr[ord(i)]+=1\n  for i in substring:\n    if max < ctr[ord(i)]:\n      max = ctr[ord(i)]\n      ch = i\n  return ch", "task_id": "480_22fbd013-aff1-40a1-93f3-74b2596412e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum and with exactly the given length.", "code": "def is_subset_sum_with_length(arr, n, sum, length):\n\tif sum == 0 and length == 0:\n\t\treturn True\n\tif n == 0 or length == 0:\n\t\treturn False\n\tif arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_length(arr, n - 1, sum, length)\n\treturn is_subset_sum_with_length(arr, n - 1, sum, length) or is_subset_sum_with_length(arr, n - 1, sum - arr[n - 1], length - 1)", "task_id": "481_5d5fe30b-052d-4aab-9965-c6d1835d5526", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum and with at least the given minimum number of elements.", "code": "def is_subset_sum_with_min_elements(arr, n, sum, min_elements):\n\tif sum == 0 and min_elements <= 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_min_elements(arr, n - 1, sum, min_elements)\n\treturn is_subset_sum_with_min_elements(arr, n - 1, sum, min_elements) or is_subset_sum_with_min_elements(arr, n - 1, sum - arr[n - 1], min_elements - 1)", "task_id": "481_bffa9b04-afa2-4b27-a835-8142098ba385", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum and with at most the given maximum number of elements.", "code": "def is_subset_sum_with_max_elements(arr, n, sum, max_elements):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0 or max_elements == 0:\n\t\treturn False\n\tif arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_max_elements(arr, n - 1, sum, max_elements)\n\treturn is_subset_sum_with_max_elements(arr, n - 1, sum, max_elements) or is_subset_sum_with_max_elements(arr, n - 1, sum - arr[n - 1], max_elements - 1)", "task_id": "481_1dd0dbcd-7ec5-4cd2-80bb-6331ba07977d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are distinct.", "code": "def is_subset_sum_with_distinct_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_distinct_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_distinct_elements(arr, n - 1, sum) or is_subset_sum_with_distinct_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_cebeabed-dabb-476e-93e1-f7f7bd27de17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are even.", "code": "def is_subset_sum_with_even_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] % 2 != 0 or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_even_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_even_elements(arr, n - 1, sum) or is_subset_sum_with_even_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_f90a91a9-fbac-4d20-82bb-27540bb06ce8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are odd.", "code": "def is_subset_sum_with_odd_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] % 2 == 0 or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_odd_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_odd_elements(arr, n - 1, sum) or is_subset_sum_with_odd_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_f2f43ec8-d7a3-43c8-a578-5b2f7dc45d8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are prime numbers.", "code": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef is_subset_sum_with_prime_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif not is_prime(arr[n - 1]) or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_prime_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_prime_elements(arr, n - 1, sum) or is_subset_sum_with_prime_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_7afc68a9-a5ec-47e8-9a0c-e75881f8ed6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are multiples of a given number k.", "code": "def is_subset_sum_with_multiples_of_k(arr, n, sum, k):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] % k != 0 or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_multiples_of_k(arr, n - 1, sum, k)\n\treturn is_subset_sum_with_multiples_of_k(arr, n - 1, sum, k) or is_subset_sum_with_multiples_of_k(arr, n - 1, sum - arr[n - 1], k)", "task_id": "481_60378d4e-9333-48a2-82fb-709d03c54d23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are non-negative.", "code": "def is_subset_sum_with_non_negative_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] < 0 or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_non_negative_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_non_negative_elements(arr, n - 1, sum) or is_subset_sum_with_non_negative_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_f4c1f136-2ff8-48a9-9ee1-4a878c10700a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if there is a subset of the given set with sum equal to the given sum, where all elements in the subset are positive.", "code": "def is_subset_sum_with_positive_elements(arr, n, sum):\n\tif sum == 0:\n\t\treturn True\n\tif n == 0:\n\t\treturn False\n\tif arr[n - 1] <= 0 or arr[n - 1] > sum:\n\t\treturn is_subset_sum_with_positive_elements(arr, n - 1, sum)\n\treturn is_subset_sum_with_positive_elements(arr, n - 1, sum) or is_subset_sum_with_positive_elements(arr, n - 1, sum - arr[n - 1])", "task_id": "481_08e221ee-258c-417d-aede-5245864d15c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial is greater than x.", "code": "def find_first_factorial_greater_than(x):\n    i = 1\n    fact = 1\n    while fact <= x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_b9564bb1-505a-493d-a8b3-eb384c37f111", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial ends with x.", "code": "def find_first_factorial_ending_with(x):\n    def factorial(n):\n        if n == 0 or n == 1:\n            return 1\n        else:\n            return n * factorial(n - 1)\n    i = 1\n    while True:\n        if str(factorial(i)).endswith(str(x)):\n            return i\n        i += 1", "task_id": "483_7f63b8ee-bd6b-4dd4-9305-7fbbe816e924", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x digits.", "code": "def find_first_factorial_with_digits(x):\n    i = 1\n    fact = 1\n    while len(str(fact)) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_2f51af7d-b31e-4303-8453-f40ac876a126", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has a digit sum greater than x.", "code": "def find_first_factorial_with_sum_greater_than(x):\n    def digit_sum(n):\n        return sum(int(d) for d in str(n))\n    i = 1\n    fact = 1\n    while digit_sum(fact) <= x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_32beeb5e-5067-47d3-b3b6-c0e1ca2c8797", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x distinct prime factors.", "code": "def find_first_factorial_with_prime_factors(x):\n    def prime_factors(n):\n        i = 2\n        factors = set()\n        while i * i <= n:\n            if n % i:\n                i += 1\n            else:\n                n //= i\n                factors.add(i)\n        if n > 1:\n            factors.add(n)\n        return factors\n    i = 1\n    fact = 1\n    while len(prime_factors(fact)) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_591e2ae8-6bf4-4547-8692-06af242f8a7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x even digits.", "code": "def find_first_factorial_with_even_digits(x):\n    def count_even_digits(n):\n        return sum(1 for d in str(n) if int(d) % 2 == 0)\n    i = 1\n    fact = 1\n    while count_even_digits(fact) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_ac3db99a-1833-4be4-82fa-ee42ab74725c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x odd digits.", "code": "def find_first_factorial_with_odd_digits(x):\n    def count_odd_digits(n):\n        return sum(1 for d in str(n) if int(d) % 2 != 0)\n    i = 1\n    fact = 1\n    while count_odd_digits(fact) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_eef46719-7831-4b4d-b50f-a61aab0f0b0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x trailing zeroes.", "code": "def find_first_factorial_with_zeroes(x):\n    def count_trailing_zeroes(n):\n        count = 0\n        while n % 10 == 0 and n != 0:\n            n //= 10\n            count += 1\n        return count\n    i = 1\n    fact = 1\n    while count_trailing_zeroes(fact) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_7b5db16a-30e5-4975-844d-d9c080f6d54e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x non-zero digits.", "code": "def find_first_factorial_with_nonzero_digits(x):\n    def count_nonzero_digits(n):\n        return sum(1 for d in str(n) if d != '0')\n    i = 1\n    fact = 1\n    while count_nonzero_digits(fact) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_6e4af73e-9d00-4ecd-91d1-0f223f6abdd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first natural number whose factorial has at least x palindromic digits.", "code": "def find_first_factorial_with_palindromic_digits(x):\n    def count_palindromic_digits(n):\n        return sum(1 for d in str(n) if d == d[::-1])\n    i = 1\n    fact = 1\n    while count_palindromic_digits(fact) < x:\n        i += 1\n        fact *= i\n    return i", "task_id": "483_68388939-61e2-48f9-9f23-eeccbb957a99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the matching elements from the given two lists.", "code": "def remove_matching_elements(list1, list2):\n    return [item for item in list1 if item not in list2]", "task_id": "484_aa70752d-fc74-482a-904a-e7bb68ebd2e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the characters in the first string that are present in the second string.", "code": "def remove_matching_strings(str1, str2):\n    return ''.join([ch for ch in str1 if ch not in str2])", "task_id": "484_3128a725-28a3-4f01-8750-8d4b1bb33063", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the keys from the first dictionary that are present in the second dictionary.", "code": "def remove_matching_dict_keys(dict1, dict2):\n    return {k: v for k, v in dict1.items() if k not in dict2}", "task_id": "484_6803bb98-6eda-4a32-8dc1-f92f1e95169e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the elements from the first set that are present in the second set.", "code": "def remove_matching_set_elements(set1, set2):\n    return set1 - set2", "task_id": "484_b52224a0-f5d5-4b26-9785-adfcd996a45f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the elements from the first list whose indices are present in the second list.", "code": "def remove_matching_indices(list1, list2):\n    return [item for i, item in enumerate(list1) if i not in list2]", "task_id": "484_87de756b-6a72-4ccd-b9f9-d1f01a98a0f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the words from the first sentence that are present in the second sentence.", "code": "def remove_matching_words(sentence1, sentence2):\n    words1 = sentence1.split()\n    words2 = set(sentence2.split())\n    return ' '.join([word for word in words1 if word not in words2])", "task_id": "484_2c6043d6-c5ca-4b48-8fd9-650a5a5c3015", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the matching elements from the given two nested lists.", "code": "def remove_matching_elements_nested(list1, list2):\n    return [[item for item in sublist if item not in list2] for sublist in list1]", "task_id": "484_a0b3437a-69f2-4ed1-b083-cbe577e9b7e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the key-value pairs from the first dictionary whose values are present in the second dictionary.", "code": "def remove_matching_dict_values(dict1, dict2):\n    values2 = set(dict2.values())\n    return {k: v for k, v in dict1.items() if v not in values2}", "task_id": "484_78149536-1279-4871-8f2c-d31f1160aa44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the substrings from the first string that are present in the second string.", "code": "def remove_matching_substrings(str1, str2):\n    for sub in str2.split():\n        str1 = str1.replace(sub, '')\n    return str1", "task_id": "484_f67bb74f-6c73-4829-8c02-fc882eae588d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the matching tuples from the given two lists of tuples.", "code": "def remove_matching_elements_from_lists_of_tuples(list1, list2):\n    return [tup for tup in list1 if tup not in list2]", "task_id": "484_6d80319f-0603-4012-8441-1d2702913326", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest even number in the given array.", "code": "def largest_even_number(arr: list) -> int:\n    largest_even = -1\n    for num in arr:\n        if num % 2 == 0 and num > largest_even:\n            largest_even = num\n    return largest_even", "task_id": "485_d3d7ccd4-e64d-43e6-91fb-37379af66a56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest odd number in the given array.", "code": "def smallest_odd_number(arr: list) -> int:\n    smallest_odd = float('inf')\n    for num in arr:\n        if num % 2 != 0 and num < smallest_odd:\n            smallest_odd = num\n    return smallest_odd if smallest_odd != float('inf') else -1", "task_id": "485_a82b1cbc-4b45-4531-94c1-9e069c9f8f60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all prime numbers in the given array.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(arr: list) -> int:\n    return sum(num for num in arr if is_prime(num))", "task_id": "485_1e8462cc-e8ce-49e9-9514-14132a62b8fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic numbers in the given array.", "code": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef count_palindromes(arr: list) -> int:\n    return sum(1 for num in arr if is_palindrome(num))", "task_id": "485_e67b3c2b-f3a4-4f3b-bc47-2056d8487a5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest prime number in the given array.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef largest_prime(arr: list) -> int:\n    largest_prime = -1\n    for num in arr:\n        if is_prime(num) and num > largest_prime:\n            largest_prime = num\n    return largest_prime", "task_id": "485_ee774183-d308-4675-922d-e2038971937a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of all numbers in the given array.", "code": "def sum_of_squares(arr: list) -> int:\n    return sum(num**2 for num in arr)", "task_id": "485_b1c3b8b9-9e79-4232-89bc-1dc9d091c6fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest number in the given array that is a multiple of three.", "code": "def largest_multiple_of_three(arr: list) -> int:\n    largest_multiple = -1\n    for num in arr:\n        if num % 3 == 0 and num > largest_multiple:\n            largest_multiple = num\n    return largest_multiple", "task_id": "485_5b1aef0d-a8be-468d-a406-0ededfca71ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in the given array.", "code": "def count_even_numbers(arr: list) -> int:\n    return sum(1 for num in arr if num % 2 == 0)", "task_id": "485_8be81c58-9abc-44c9-94f6-941ff18168df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of all odd numbers in the given array.", "code": "def product_of_odds(arr: list) -> int:\n    product = 1\n    has_odd = False\n    for num in arr:\n        if num % 2 != 0:\n            product *= num\n            has_odd = True\n    return product if has_odd else 0", "task_id": "485_bb7678ed-ab90-4ef8-9372-16c92425edd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest palindromic number in the given array.", "code": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]\n\ndef smallest_palindrome(arr: list) -> int:\n    smallest_palindrome = float('inf')\n    for num in arr:\n        if is_palindrome(num) and num < smallest_palindrome:\n            smallest_palindrome = num\n    return smallest_palindrome if smallest_palindrome != float('inf') else -1", "task_id": "485_d1c9d369-9704-4a6a-9868-a1a30bfe3a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result", "task_id": "486_20fed5cf-da2b-4974-a531-2869db62f3e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the number of combinations (n choose r) for given n and r.", "code": "def combinations(n: int, r: int) -> int:\n    def factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    return factorial(n) // (factorial(r) * factorial(n - r))", "task_id": "486_4082f26f-2b97-471a-8066-2ce9c4a60441", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the number of permutations (nPr) for given n and r.", "code": "def permutations(n: int, r: int) -> int:\n    def factorial(n: int) -> int:\n        if n == 0 or n == 1:\n            return 1\n        result = 1\n        for i in range(2, n + 1):\n            result *= i\n        return result\n    return factorial(n) // factorial(n - r)", "task_id": "486_7804ea23-22c6-4cc1-8f2e-1e6805866ac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the nth row of Pascal's triangle.", "code": "def pascal_triangle_row(n: int) -> list[int]:\n    row = [1]\n    for k in range(1, n + 1):\n        row.append(row[-1] * (n - k + 1) // k)\n    return row", "task_id": "486_47eaf391-88d6-405b-9d73-d8b5e174a141", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b != 0:\n        a, b = b, a % b\n    return a", "task_id": "486_4cb58e52-bae8-47ef-b43f-696999216ade", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b != 0:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "486_f0b0cc65-5c56-4afc-8561-cd67a4989dba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "486_dae14611-ba24-4d1d-aa80-d24c6c04b3c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "task_id": "486_b7c53660-3fed-4fd6-97e2-4134d446bb0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the prime factors of a given number.", "code": "def prime_factors(n: int) -> list[int]:\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n //= 2\n    for i in range(3, int(n**0.5) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n    if n > 2:\n        factors.append(n)\n    return factors", "task_id": "486_6c964ecc-54f7-44d8-9e85-465f44f7491c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of all divisors of a given number.", "code": "def sum_of_divisors(n: int) -> int:\n    total = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            total += i\n    return total", "task_id": "486_3e008a2d-fe96-4b73-8060-8d04ff848c38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the second element in each tuple.", "code": "def sort_by_second_element(tup): \n    return sorted(tup, key=lambda x: x[1])", "task_id": "487_583cc1c6-d3a1-4aa2-be70-63a268382dda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the sum of elements in each tuple.", "code": "def sort_by_sum_of_elements(tup): \n    return sorted(tup, key=lambda x: sum(x))", "task_id": "487_44570c42-5724-42d4-b08c-b8bae4856cc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the length of the first element in each tuple.", "code": "def sort_by_length_of_elements(tup): \n    return sorted(tup, key=lambda x: len(x[0]))", "task_id": "487_015ebbf4-510e-4629-83fd-c063c6ebf21b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the first character of the first element in each tuple.", "code": "def sort_by_first_character(tup): \n    return sorted(tup, key=lambda x: x[0][0])", "task_id": "487_f9f08e8b-6de1-49a0-a222-06273fd159e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the product of elements in each tuple.", "code": "def sort_by_product_of_elements(tup): \n    return sorted(tup, key=lambda x: x[0] * x[1])", "task_id": "487_fdfad355-b6fd-4924-9404-d476d729868d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the absolute difference between the first and second elements in each tuple.", "code": "def sort_by_absolute_difference(tup): \n    return sorted(tup, key=lambda x: abs(x[0] - x[1]))", "task_id": "487_57dceb27-ce6d-453f-b7a6-636db1e9ccaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the last character of the first element in each tuple.", "code": "def sort_by_last_character(tup): \n    return sorted(tup, key=lambda x: x[0][-1])", "task_id": "487_7f39a311-4fb7-473a-a8f8-b4dfdce19fe3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the second to last element in each tuple.", "code": "def sort_by_second_to_last_element(tup): \n    return sorted(tup, key=lambda x: x[-2])", "task_id": "487_5807b8b3-c016-437c-8115-7c0503f8ea15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the number of vowels in the first element of each tuple.", "code": "def sort_by_number_of_vowels(tup): \n    return sorted(tup, key=lambda x: sum(1 for char in x[0] if char in 'aeiouAEIOU'))", "task_id": "487_3d91c76e-2530-4bc6-96fd-d7004fa46c1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the length of the first element in each tuple, assuming the first element is a string.", "code": "def sort_by_first_element_length(tup): \n    return sorted(tup, key=lambda x: len(x[0]))", "task_id": "487_7c010f2c-8324-4396-81be-ccfb3b7c8206", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a hexagon.", "code": "import math\ndef area_hexagon(a):\n  area=(3*math.sqrt(3)*pow(a,2))/2.0\n  return area", "task_id": "488_3a0c191f-da5c-40cb-8cab-8a95df09d312", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  area = 0.5 * base * height\n  return area", "task_id": "488_675c8e1e-4f66-4321-8178-845ecd672a6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef area_circle(radius):\n  area = math.pi * pow(radius, 2)\n  return area", "task_id": "488_b5a0caa3-8646-4646-ba2f-58ec0d3a1be7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle given its length and width.", "code": "def area_rectangle(length, width):\n  area = length * width\n  return area", "task_id": "488_b15681d8-18b8-40e7-bcc5-63e49612f5ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid given its two bases and height.", "code": "def area_trapezoid(base1, base2, height):\n  area = 0.5 * (base1 + base2) * height\n  return area", "task_id": "488_7a2d6c0d-a77b-497a-bec5-e404791e463f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base, height):\n  area = base * height\n  return area", "task_id": "488_c5afb1dc-fe6b-4138-933b-062f2763fac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of an ellipse given its semi-major axis and semi-minor axis.", "code": "import math\ndef area_ellipse(a, b):\n  area = math.pi * a * b\n  return area", "task_id": "488_dd2eaaa3-a64e-448d-8dd0-951ea8ee6b8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square given its side length.", "code": "def area_square(side):\n  area = pow(side, 2)\n  return area", "task_id": "488_ec56cc69-faa1-48f6-90c9-3c7f3d1e290c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rhombus given its diagonals.", "code": "def area_rhombus(diagonal1, diagonal2):\n  area = 0.5 * diagonal1 * diagonal2\n  return area", "task_id": "488_353b766e-73eb-4cb2-8827-43bc606bbeab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a sector of a circle given its radius and central angle in radians.", "code": "import math\ndef area_sector(radius, angle):\n  area = 0.5 * pow(radius, 2) * angle\n  return area", "task_id": "488_96c7f702-e7ca-446e-ab1a-c38b483029b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the frequency of the smallest value in a given array.", "code": "def frequency_of_smallest(n, arr): \n    mn = arr[0] \n    freq = 1\n    for i in range(1, n): \n        if (arr[i] < mn): \n            mn = arr[i] \n            freq = 1\n        elif (arr[i] == mn): \n            freq += 1\n    return freq", "task_id": "489_ae125f5f-c3a7-44b4-be14-def0dcc60320", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest value in a given array.", "code": "def sum_of_largest(n, arr): \n    mn = arr[0] \n    for i in range(1, n): \n        if (arr[i] > mn): \n            mn = arr[i] \n    return mn", "task_id": "489_dae777d5-aa46-4cd0-80ec-12f37095ea83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the smallest value in a given array.", "code": "def sum_of_smallest(n, arr): \n    mn = arr[0] \n    for i in range(1, n): \n        if (arr[i] < mn): \n            mn = arr[i] \n    return mn", "task_id": "489_783d6585-e6e4-4117-879d-150aa9385e26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given array.", "code": "def count_even_numbers(n, arr): \n    count = 0 \n    for i in range(n): \n        if arr[i] % 2 == 0: \n            count += 1 \n    return count", "task_id": "489_d6e1e862-91b6-4e43-ac5c-e0a0c511ef71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in a given array.", "code": "def count_odd_numbers(n, arr): \n    count = 0 \n    for i in range(n): \n        if arr[i] % 2 != 0: \n            count += 1 \n    return count", "task_id": "489_82fc895f-f195-4436-ae72-b52bb814fb37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even numbers in a given array.", "code": "def sum_of_even_numbers(n, arr): \n    total = 0 \n    for i in range(n): \n        if arr[i] % 2 == 0: \n            total += arr[i] \n    return total", "task_id": "489_0ee9c4f7-6c15-4ef2-a6f1-3036bfb89fd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd numbers in a given array.", "code": "def sum_of_odd_numbers(n, arr): \n    total = 0 \n    for i in range(n): \n        if arr[i] % 2 != 0: \n            total += arr[i] \n    return total", "task_id": "489_9991d7a2-6547-47c9-bb18-4cdd428dba90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def max_difference(n, arr): \n    max_diff = 0 \n    for i in range(n): \n        for j in range(i + 1, n): \n            diff = abs(arr[i] - arr[j]) \n            if diff > max_diff: \n                max_diff = diff \n    return max_diff", "task_id": "489_f65c8d06-7da0-4bb4-8b75-cefbd13f2e92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array.", "code": "def min_difference(n, arr): \n    min_diff = float('inf') \n    for i in range(n): \n        for j in range(i + 1, n): \n            diff = abs(arr[i] - arr[j]) \n            if diff < min_diff: \n                min_diff = diff \n    return min_diff", "task_id": "489_acf6be17-a58e-4298-8864-ec19608c57f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in a given array.", "code": "def product_of_elements(n, arr): \n    product = 1 \n    for i in range(n): \n        product *= arr[i] \n    return product", "task_id": "489_e8077761-05a0-43a5-aae5-1147a79e3a9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of an arithmetic progression series.", "code": "def sum_ap(a, d, n):\n    total = (n / 2) * (2 * a + (n - 1) * d)\n    return int(total)", "task_id": "491_1d351992-42c9-4f57-b5e0-9218a2c62405", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a geometric progression series including the nth term.", "code": "import math\ndef sum_gp_inclusive(a, n, r):\n    total = (a * (1 - math.pow(r, n + 1))) / (1 - r)\n    return total", "task_id": "491_f1adf755-2a93-4e6b-a027-2f112d2f8fa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a recursive function to find the sum of a geometric progression series.", "code": "def sum_gp_recursive(a, n, r):\n    if n == 0:\n        return a\n    return a + r * sum_gp_recursive(a, n - 1, r)", "task_id": "491_92a0e0aa-9f48-422a-88d7-217c13788f85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a geometric progression series where the common ratio alternates between positive and negative.", "code": "import math\ndef sum_gp_alternate(a, n, r):\n    total = (a * (1 - math.pow(-r, n))) / (1 + r)\n    return total", "task_id": "491_1ed97c04-843f-4746-a5c3-f7a5a73cf73c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a geometric progression series with fractional terms.", "code": "import math\ndef sum_gp_fractional(a, n, r):\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return total", "task_id": "491_ed5c1194-e923-4015-a3d9-bf4149b5aa34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a geometric progression series modulo m.", "code": "import math\ndef sum_gp_modulo(a, n, r, m):\n    total = (a * (1 - math.pow(r, n))) / (1 - r)\n    return int(total) % m", "task_id": "491_bf90d858-21a3-46de-b39b-2a03068cad41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the odd terms of a geometric progression series.", "code": "import math\ndef sum_gp_odd_terms(a, n, r):\n    total = 0\n    for i in range(n):\n        if i % 2 == 0:\n            total += a * math.pow(r, i)\n    return total", "task_id": "491_8d7470d0-5c9c-45fe-8247-9ba1b0aa0a22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the even terms of a geometric progression series.", "code": "import math\ndef sum_gp_even_terms(a, n, r):\n    total = 0\n    for i in range(n):\n        if i % 2 != 0:\n            total += a * math.pow(r, i)\n    return total", "task_id": "491_2cd79f3c-55f5-42cd-8499-c032ad539ee0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a partial geometric progression series from the start term to the end term.", "code": "import math\ndef sum_gp_partial(a, n, r, start, end):\n    total = 0\n    for i in range(start, end + 1):\n        total += a * math.pow(r, i)\n    return total", "task_id": "491_e993a72a-f777-477f-b59a-d49088ac80b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of a geometric progression series in reverse order.", "code": "import math\ndef sum_gp_reverse(a, n, r):\n    total = 0\n    for i in range(n - 1, -1, -1):\n        total += a * math.pow(r, i)\n    return total", "task_id": "491_04814cf9-d456-4d5b-bcdb-2b504bf138a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of words in a list that form palindromes when concatenated.", "code": "def find_palindromic_pairs(words):\n    res = []\n    for i in range(len(words)):\n        for j in range(len(words)):\n            if i != j and words[i] + words[j] == (words[i] + words[j])[::-1]:\n                res.append((words[i], words[j]))\n    return res", "task_id": "490_b5b8c24e-9dc0-4def-87dc-7c14cd154451", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of words in a list that are anagrams of each other.", "code": "def find_anagram_pairs(words):\n    res = []\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if sorted(words[i]) == sorted(words[j]):\n                res.append((words[i], words[j]))\n    return res", "task_id": "490_dad12a75-2f58-4c84-a37b-3c371cfab7b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of indices (i, j) in a square matrix where matrix[i][j] == matrix[j][i].", "code": "def find_symmetric_pairs(matrix):\n    res = []\n    n = len(matrix)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if matrix[i][j] == matrix[j][i]:\n                res.append((i, j))\n    return res", "task_id": "490_87697442-6e41-4200-9e4c-4af0de0ba4f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of keys (a, b) in a dictionary where d[a] == b and d[b] == a.", "code": "def find_symmetric_pairs_in_dict(d):\n    res = []\n    for a in d:\n        b = d[a]\n        if b in d and d[b] == a and a < b:\n            res.append((a, b))\n    return res", "task_id": "490_d7bae03e-8002-4ca9-ae0f-a24bc1f78c13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of indices (i, j) in a string where s[i] == s[j].", "code": "def find_symmetric_pairs_in_string(s):\n    res = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s)):\n            if s[i] == s[j]:\n                res.append((i, j))\n    return res", "task_id": "490_e6e1c5f1-5680-419f-b9aa-b41454471114", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all substrings of a string that are palindromes.", "code": "def find_palindromic_substrings(s):\n    res = []\n    for i in range(len(s)):\n        for j in range(i + 1, len(s) + 1):\n            if s[i:j] == s[i:j][::-1]:\n                res.append(s[i:j])\n    return res", "task_id": "490_53d40d4a-0e59-416c-8d48-6818a6652826", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of indices (i, j) in a list where nums[i] == nums[j].", "code": "def find_symmetric_pairs_in_list(nums):\n    res = []\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] == nums[j]:\n                res.append((i, j))\n    return res", "task_id": "490_b42c94d6-ea88-4cd0-a34d-733056bd1cc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in a set of tuples that are symmetric.", "code": "def find_symmetric_pairs_in_set(s):\n    res = set()\n    for a, b in s:\n        if (b, a) in s and (b, a) not in res:\n            res.add((a, b))\n    return res", "task_id": "490_4ae66017-ac44-4b30-9b94-75ac95cf1187", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of nodes (a, b) in a graph where there is an edge from a to b and from b to a.", "code": "def find_symmetric_pairs_in_graph(graph):\n    res = []\n    for a in graph:\n        for b in graph[a]:\n            if a in graph.get(b, []):\n                res.append((a, b))\n    return res", "task_id": "490_b866f22f-58ae-4584-8711-df8adc2b005c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs of indices (i, j) in a 2D list where lst[i][j] == lst[j][i].", "code": "def find_symmetric_pairs_in_2d_list(lst):\n    res = []\n    n = len(lst)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i][j] == lst[j][i]:\n                res.append((i, j))\n    return res", "task_id": "490_9cee2cca-8e3a-4b50-86b2-801b31cbe123", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given hexadecimal string to integer.", "code": "def hex_to_integer(test_str: str) -> int:\n    return int(test_str, 16)", "task_id": "494_d7ed471b-c409-4cab-847a-fb309de9020b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given octal string to integer.", "code": "def octal_to_integer(test_str: str) -> int:\n    return int(test_str, 8)", "task_id": "494_c23f683c-ba0b-4644-affa-66682a766424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list of binary digits to an integer.", "code": "def binary_list_to_integer(test_list: list) -> int:\n    res = int(''.join(map(str, test_list)), 2)\n    return res", "task_id": "494_9184556e-426e-4669-b7f1-482f1c01562d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary string to an integer.", "code": "def binary_string_to_integer(test_str: str) -> int:\n    return int(test_str, 2)", "task_id": "494_f8ba0409-22e9-4930-b5af-0461949fefe4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary tuple to a hexadecimal string.", "code": "def binary_tuple_to_hex(test_tup: tuple) -> str:\n    res = int(''.join(map(str, test_tup)), 2)\n    return hex(res)[2:]", "task_id": "494_a26bc731-878b-4090-876d-7ea03f64372d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary tuple to an octal string.", "code": "def binary_tuple_to_octal(test_tup: tuple) -> str:\n    res = int(''.join(map(str, test_tup)), 2)\n    return oct(res)[2:]", "task_id": "494_278a0110-a067-4fb1-ad7f-31767e575e98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given integer to a binary string.", "code": "def integer_to_binary_string(n: int) -> str:\n    return bin(n)[2:]", "task_id": "494_aa70b651-7a00-4942-a2ce-ddead5eb1ce6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given integer to a hexadecimal string.", "code": "def integer_to_hex_string(n: int) -> str:\n    return hex(n)[2:]", "task_id": "494_85029c41-de05-4990-8c6c-cff76aea01b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given integer to an octal string.", "code": "def integer_to_octal_string(n: int) -> str:\n    return oct(n)[2:]", "task_id": "494_aa56c7eb-a2cb-4907-91ab-dcdbd4e7d889", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given binary string to a hexadecimal string.", "code": "def binary_string_to_hex(test_str: str) -> str:\n    res = int(test_str, 2)\n    return hex(res)[2:]", "task_id": "494_947c4dbc-8f39-4e7c-bea0-9ba39c56aec7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first occurrence of a target element in a sorted array using binary search. If the target is not found, return -1.", "code": "def find_first_occurrence(arr: list, target: int) -> int:\n    first, last = 0, len(arr) - 1\n    result = -1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == target:\n            result = mid\n            last = mid - 1\n        elif arr[mid] < target:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return result", "task_id": "492_f7f3118c-89f4-4738-b803-7103206b0a82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a target element in a sorted array using binary search. If the target is not found, return -1.", "code": "def find_last_occurrence(arr: list, target: int) -> int:\n    first, last = 0, len(arr) - 1\n    result = -1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == target:\n            result = mid\n            first = mid + 1\n        elif arr[mid] < target:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return result", "task_id": "492_47b803a6-ff86-4af6-bba8-3b6016cd2d86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a target element in a sorted array using binary search.", "code": "def count_occurrences(arr: list, target: int) -> int:\n    def find_first_occurrence(arr, target):\n        first, last = 0, len(arr) - 1\n        result = -1\n        while first <= last:\n            mid = (first + last) // 2\n            if arr[mid] == target:\n                result = mid\n                last = mid - 1\n            elif arr[mid] < target:\n                first = mid + 1\n            else:\n                last = mid - 1\n        return result\n    \n    def find_last_occurrence(arr, target):\n        first, last = 0, len(arr) - 1\n        result = -1\n        while first <= last:\n            mid = (first + last) // 2\n            if arr[mid] == target:\n                result = mid\n                first = mid + 1\n            elif arr[mid] < target:\n                first = mid + 1\n            else:\n                last = mid - 1\n        return result\n    \n    first_occurrence = find_first_occurrence(arr, target)\n    if first_occurrence == -1:\n        return 0\n    last_occurrence = find_last_occurrence(arr, target)\n    return last_occurrence - first_occurrence + 1", "task_id": "492_946ff79c-1bed-4431-a30c-072c38b51a52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the element in a sorted array that is closest to a given target using binary search.", "code": "def find_closest_element(arr: list, target: int) -> int:\n    first, last = 0, len(arr) - 1\n    closest = arr[0]\n    while first <= last:\n        mid = (first + last) // 2\n        if abs(arr[mid] - target) < abs(closest - target):\n            closest = arr[mid]\n        if arr[mid] < target:\n            first = mid + 1\n        elif arr[mid] > target:\n            last = mid - 1\n        else:\n            return arr[mid]\n    return closest", "task_id": "492_e1d6d952-215e-48f5-8f74-a72d6a35abcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a peak element in an array using binary search. A peak element is an element that is greater than its neighbors.", "code": "def find_peak_element(arr: list) -> int:\n    first, last = 0, len(arr) - 1\n    while first < last:\n        mid = (first + last) // 2\n        if arr[mid] < arr[mid + 1]:\n            first = mid + 1\n        else:\n            last = mid\n    return arr[first]", "task_id": "492_b7b76eca-9f6e-425d-a745-b8711d308d6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search for a target element in a rotated sorted array using binary search. If the target is not found, return -1.", "code": "def search_rotated_array(arr: list, target: int) -> int:\n    first, last = 0, len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[first] <= arr[mid]:\n            if arr[first] <= target < arr[mid]:\n                last = mid - 1\n            else:\n                first = mid + 1\n        else:\n            if arr[mid] < target <= arr[last]:\n                first = mid + 1\n            else:\n                last = mid - 1\n    return -1", "task_id": "492_f64a7632-b6b0-4729-8fa2-6bac7211c741", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a rotated sorted array using binary search.", "code": "def find_min_in_rotated_array(arr: list) -> int:\n    first, last = 0, len(arr) - 1\n    while first < last:\n        mid = (first + last) // 2\n        if arr[mid] > arr[last]:\n            first = mid + 1\n        else:\n            last = mid\n    return arr[first]", "task_id": "492_39a88c92-6982-4653-99cb-994423b407c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a fixed point in a sorted array using binary search. A fixed point is an index i such that arr[i] == i. If no such index exists, return -1.", "code": "def find_fixed_point(arr: list) -> int:\n    first, last = 0, len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] < mid:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return -1", "task_id": "492_40ed3b76-8390-4283-ad33-9c5be6ee425b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in a sorted array of unique integers from 0 to n using binary search.", "code": "def find_missing_number(arr: list) -> int:\n    first, last = 0, len(arr) - 1\n    while first <= last:\n        mid = (first + last) // 2\n        if arr[mid] == mid:\n            first = mid + 1\n        else:\n            last = mid - 1\n    return first", "task_id": "492_4d5280da-39d3-4d77-9d41-f8014a932d05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search for a target element in an infinite sorted array using binary search. Assume you can only access elements up to a certain index at a time.", "code": "def find_element_in_infinite_array(arr: list, target: int) -> int:\n    def binary_search(arr, target, first, last):\n        while first <= last:\n            mid = (first + last) // 2\n            if arr[mid] == target:\n                return mid\n            elif arr[mid] < target:\n                first = mid + 1\n            else:\n                last = mid - 1\n        return -1\n    \n    first, last = 0, 1\n    while arr[last] < target:\n        first = last\n        last *= 2\n    return binary_search(arr, target, first, last)", "task_id": "492_923a0c50-33ca-47e8-8371-f22570aaa0fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a given string using regex.", "code": "import re\ndef remove_digits(s):\n  return re.sub(r'\\d', '', s)", "task_id": "495_1fe1d4ff-50ac-4a78-9a9a-b28fee39efa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string using regex.", "code": "import re\ndef remove_vowels(s):\n  return re.sub(r'[aeiouAEIOU]', '', s)", "task_id": "495_59ca9a0b-5d05-4531-be3c-a1060602736b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters (non-alphanumeric) from a given string using regex.", "code": "import re\ndef remove_special_chars(s):\n  return re.sub(r'[^\\w\\s]', '', s)", "task_id": "495_cc8e2f1a-6814-4def-8859-62658b1472f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase letters from a given string using regex.", "code": "import re\ndef remove_uppercase(s):\n  return re.sub(r'[A-Z]', '', s)", "task_id": "495_b76dfacd-992e-4055-90d1-b12c692e144a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string using regex.", "code": "import re\ndef remove_consonants(s):\n  return re.sub(r'[^aeiouAEIOU\\d\\W]', '', s)", "task_id": "495_0e3f70dc-d703-4bd8-9441-3392cc870566", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a given string using regex.", "code": "import re\ndef remove_whitespace(s):\n  return re.sub(r'\\s', '', s)", "task_id": "495_4d716d02-b138-441e-ad3e-683b0de8c959", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-digit characters from a given string using regex.", "code": "import re\ndef remove_non_digits(s):\n  return re.sub(r'\\D', '', s)", "task_id": "495_6bb6d04d-8ce7-4500-bd37-6bc9a5e92f64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-alphanumeric characters from a given string using regex.", "code": "import re\ndef remove_non_alphanumeric(s):\n  return re.sub(r'\\W', '', s)", "task_id": "495_4916ae64-edde-4c63-8aa0-7363ea4afe1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all words containing digits from a given string using regex.", "code": "import re\ndef remove_words_with_digits(s):\n  return re.sub(r'\\b\\w*\\d\\w*\\b', '', s)", "task_id": "495_fcbaec45-d99b-4a09-af27-39fe584a56b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-ASCII characters from a given string using regex.", "code": "import re\ndef remove_non_ascii(s):\n  return re.sub(r'[\\x80-\\xFF]', '', s)", "task_id": "495_589d341b-009a-4209-8044-7dee74c109d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_elements(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return largest_nums", "task_id": "496_76837196-e76a-4392-b792-c081e49604e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the smallest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_elements_sum(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  return sum(smallest_nums)", "task_id": "496_caf30c9a-9181-4de7-9e31-085796c94d6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the largest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_elements_sum(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  return sum(largest_nums)", "task_id": "496_1e87f58b-4591-41e3-a4e5-64b138416cc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest integer from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_kth_smallest(nums, k):\n  smallest_nums = hq.nsmallest(k, nums)\n  return smallest_nums[-1]", "task_id": "496_d0b07ada-25e4-4211-a8f5-58b9ced86619", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest integer from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_kth_largest(nums, k):\n  largest_nums = hq.nlargest(k, nums)\n  return largest_nums[-1]", "task_id": "496_018e21c2-9cde-49e0-97d2-53c1667d09a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_median(nums):\n  nums.sort()\n  n = len(nums)\n  if n % 2 == 0:\n    return (nums[n//2 - 1] + nums[n//2]) / 2\n  else:\n    return nums[n//2]", "task_id": "496_725f3f98-c8be-471e-a3a0-dbbd739cad5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the top n largest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_top_n_elements_product(nums, n):\n  largest_nums = hq.nlargest(n, nums)\n  product = 1\n  for num in largest_nums:\n    product *= num\n  return product", "task_id": "496_fbf4727a-b91c-498a-87d6-573463e99efb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the bottom n smallest integers from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_bottom_n_elements_product(nums, n):\n  smallest_nums = hq.nsmallest(n, nums)\n  product = 1\n  for num in smallest_nums:\n    product *= num\n  return product", "task_id": "496_ed9ef409-ed79-4a3f-9cc3-db7a20ec5d7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest integer from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_largest_element(nums):\n  return hq.nlargest(1, nums)[0]", "task_id": "496_631facd1-5057-4b27-8875-fdc48fb494a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest integer from a given list of numbers using heap queue algorithm.", "code": "import heapq as hq\ndef find_smallest_element(nums):\n  return hq.nsmallest(1, nums)[0]", "task_id": "496_128db0c9-5a01-4651-a48d-85a3f269a775", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two positive integers.", "code": "def lcm(x, y):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(x * y) // gcd(x, y)", "task_id": "498_fd485ab3-504d-45d8-87d1-26fb3f337a23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given positive integer is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "498_c04ef66d-65c0-4ec0-8c70-c780fdea2566", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "498_572b9dc8-7ff2-4ee1-8975-d33e6da85e3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given positive integer.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "498_4f69766f-053e-4ee7-8106-b435215b5e54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given positive integer.", "code": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "498_e425cb33-9558-453e-9e4f-beca98e4d1ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "498_ebbd86bb-13c3-4b96-b552-f3e9ea2dbfc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "498_cac38a76-4707-4e5d-bcff-defa1d2e699d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "498_7b493224-e6e8-4727-bcc1-611202f7449d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "498_6f7aa4e1-63d4-4417-b063-9870f1520a5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from a given list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "498_835c0ce9-6ee4-42a2-bf5a-0c2c34943965", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of square coordinates where each square is represented by 4 tuples of x, y point coordinates.", "code": "def calculate_square_grid(startx, starty, endx, endy, side_length):\n    squares = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            square = [\n                (x, y),\n                (x + side_length, y),\n                (x + side_length, y + side_length),\n                (x, y + side_length)\n            ]\n            squares.append(square)\n            x += side_length\n        y += side_length\n    return squares", "task_id": "493_1e9f74c3-a55b-447f-a8b8-01f996a45c30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of equilateral triangle coordinates where each triangle is represented by 3 tuples of x, y point coordinates.", "code": "import math\ndef calculate_triangle_grid(startx, starty, endx, endy, side_length):\n    height = math.sqrt(3) / 2 * side_length\n    triangles = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            triangle1 = [\n                (x, y),\n                (x + side_length / 2, y + height),\n                (x - side_length / 2, y + height)\n            ]\n            triangles.append(triangle1)\n            triangle2 = [\n                (x, y),\n                (x + side_length / 2, y - height),\n                (x - side_length / 2, y - height)\n            ]\n            triangles.append(triangle2)\n            x += side_length\n        y += height\n    return triangles", "task_id": "493_9c21dc0a-be0f-48ed-9cf0-fd0dcedae4c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of regular pentagon coordinates where each pentagon is represented by 5 tuples of x, y point coordinates.", "code": "import math\ndef calculate_pentagon_grid(startx, starty, endx, endy, side_length):\n    angle = 72\n    pentagons = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            pentagon = []\n            for i in range(5):\n                theta = math.radians(i * angle)\n                px = x + side_length * math.cos(theta)\n                py = y + side_length * math.sin(theta)\n                pentagon.append((px, py))\n            pentagons.append(pentagon)\n            x += side_length * 2\n        y += side_length * 2\n    return pentagons", "task_id": "493_43d612fc-2438-42c5-b1b2-f81bceec4762", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of hexagon coordinates where each hexagon is represented by a dictionary containing 6 tuples of x, y point coordinates and a random color.", "code": "import math\nimport random\ndef calculate_hexagon_grid_with_color(startx, starty, endx, endy, radius):\n    sl = (2 * radius) * math.tan(math.pi / 6)\n    p = sl * 0.5\n    b = sl * math.cos(math.radians(30))\n    w = b * 2\n    h = 2 * sl\n    startx = startx - w\n    starty = starty - h\n    endx = endx + w\n    endy = endy + h\n    origx = startx\n    origy = starty\n    xoffset = b\n    yoffset = 3 * p\n    hexagons = []\n    row = 1\n    while starty < endy:\n        if row % 2 == 0:\n            startx = origx + xoffset\n        else:\n            startx = origx\n        while startx < endx:\n            p1x = startx\n            p1y = starty + p\n            p2x = startx\n            p2y = starty + (3 * p)\n            p3x = startx + b\n            p3y = starty + h\n            p4x = startx + w\n            p4y = starty + (3 * p)\n            p5x = startx + w\n            p5y = starty + p\n            p6x = startx + b\n            p6y = starty\n            hexagon = {\n                'points': [\n                    (p1x, p1y),\n                    (p2x, p2y),\n                    (p3x, p3y),\n                    (p4x, p4y),\n                    (p5x, p5y),\n                    (p6x, p6y)\n                ],\n                'color': \"#%06x\" % random.randint(0, 0xFFFFFF)\n            }\n            hexagons.append(hexagon)\n            startx += w\n        starty += yoffset\n        row += 1\n    return hexagons", "task_id": "493_29aeef12-27d1-4cf4-a879-1cd9124e5eef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of circle coordinates where each circle is represented by its center point and radius.", "code": "def calculate_circle_grid(startx, starty, endx, endy, radius):\n    circles = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            circle = [\n                (x, y),\n                radius\n            ]\n            circles.append(circle)\n            x += 2 * radius\n        y += 2 * radius\n    return circles", "task_id": "493_b3cf6e62-124b-4e59-b7f0-2edc549d3800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of regular octagon coordinates where each octagon is represented by 8 tuples of x, y point coordinates.", "code": "import math\ndef calculate_octagon_grid(startx, starty, endx, endy, side_length):\n    angle = 45\n    octagons = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            octagon = []\n            for i in range(8):\n                theta = math.radians(i * angle)\n                px = x + side_length * math.cos(theta)\n                py = y + side_length * math.sin(theta)\n                octagon.append((px, py))\n            octagons.append(octagon)\n            x += side_length * 2\n        y += side_length * 2\n    return octagons", "task_id": "493_b0a723b9-601d-450a-900a-880673032cbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of star coordinates where each star is represented by 10 tuples of x, y point coordinates (5 outer and 5 inner points).", "code": "import math\ndef calculate_star_grid(startx, starty, endx, endy, outer_radius, inner_radius):\n    stars = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            star = []\n            for i in range(10):\n                angle = math.radians(i * 36)\n                if i % 2 == 0:\n                    radius = outer_radius\n                else:\n                    radius = inner_radius\n                px = x + radius * math.cos(angle)\n                py = y + radius * math.sin(angle)\n                star.append((px, py))\n            stars.append(star)\n            x += 2 * outer_radius\n        y += 2 * outer_radius\n    return stars", "task_id": "493_68794d19-bc54-4c5a-8832-f725962910b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of rectangle coordinates where each rectangle is represented by 4 tuples of x, y point coordinates.", "code": "def calculate_rectangle_grid(startx, starty, endx, endy, width, height):\n    rectangles = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            rectangle = [\n                (x, y),\n                (x + width, y),\n                (x + width, y + height),\n                (x, y + height)\n            ]\n            rectangles.append(rectangle)\n            x += width\n        y += height\n    return rectangles", "task_id": "493_eaab2b06-e700-448f-9ea2-298ec74dbc54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of diamond coordinates where each diamond is represented by 4 tuples of x, y point coordinates.", "code": "def calculate_diamond_grid(startx, starty, endx, endy, side_length):\n    diamonds = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            diamond = [\n                (x, y),\n                (x + side_length, y + side_length),\n                (x, y + 2 * side_length),\n                (x - side_length, y + side_length)\n            ]\n            diamonds.append(diamond)\n            x += 2 * side_length\n        y += 2 * side_length\n    return diamonds", "task_id": "493_06de0a4c-86ef-496c-b6ff-51d00128f93b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate a grid of parallelogram coordinates where each parallelogram is represented by 4 tuples of x, y point coordinates.", "code": "def calculate_parallelogram_grid(startx, starty, endx, endy, base, height):\n    parallelograms = []\n    y = starty\n    while y < endy:\n        x = startx\n        while x < endx:\n            parallelogram = [\n                (x, y),\n                (x + base, y),\n                (x + base + height, y + height),\n                (x + height, y + height)\n            ]\n            parallelograms.append(parallelogram)\n            x += base + height\n        y += height\n    return parallelograms", "task_id": "493_b5d1fda4-959a-4570-8aa1-1ce7031f4a57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r, h):\n  V = (1/3) * math.pi * r * r * h\n  return V", "task_id": "497_37d3b5e0-7270-4f66-bc3e-8794cadf7b04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surfacearea_cylinder(r, h):\n  SA = 2 * math.pi * r * (r + h)\n  return SA", "task_id": "497_b127c3d6-4f44-462a-a2d1-8695a638d951", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r, h):\n  V = math.pi * r * r * h\n  return V", "task_id": "497_00d29ff1-27cc-45f7-aedd-7b91e7a1eef4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surfacearea_sphere(r):\n  SA = 4 * math.pi * r * r\n  return SA", "task_id": "497_f774ab8b-31c3-4ad9-9344-8535bcd004e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  V = (4/3) * math.pi * r * r * r\n  return V", "task_id": "497_e070ac52-2c13-4d9f-8812-4fe1605cba87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surfacearea_cube(a):\n  SA = 6 * a * a\n  return SA", "task_id": "497_4f0041f4-9fbc-4b34-8c46-5a655c4cfbf8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a):\n  V = a * a * a\n  return V", "task_id": "497_bad67b9a-e1f8-4512-a686-2133652973c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a rectangular prism.", "code": "def surfacearea_rectangular_prism(l, w, h):\n  SA = 2 * (l * w + l * h + w * h)\n  return SA", "task_id": "497_a33e4c65-843c-42cd-8a9d-d667edd7242c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(l, w, h):\n  V = l * w * h\n  return V", "task_id": "497_601d34c7-7b60-44ed-90af-10448419f258", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a pyramid with a rectangular base.", "code": "def surfacearea_pyramid(base_length, base_width, slant_height):\n  base_area = base_length * base_width\n  lateral_area = base_length * slant_height + base_width * slant_height\n  SA = base_area + lateral_area\n  return SA", "task_id": "497_0092c38a-82c9-4ddc-abb5-7eff2e7cc0b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "def circumference_circle(r):\n  circumference = 2 * 3.14159 * r\n  return circumference", "task_id": "499_364dd039-e3a1-4792-8ba7-9dffda2c09ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "def area_circle(r):\n  area = 3.14159 * r * r\n  return area", "task_id": "499_111d8aa6-b883-4ba0-a560-c01b0dbc7735", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "def volume_sphere(r):\n  volume = (4/3) * 3.14159 * r**3\n  return volume", "task_id": "499_ade81205-1dda-4f12-b89c-e081abd2e520", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere given its radius.", "code": "def surface_area_sphere(r):\n  surface_area = 4 * 3.14159 * r**2\n  return surface_area", "task_id": "499_ea73bad3-510e-47b3-8baa-e0035d0c9a3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square given the length of one side.", "code": "def perimeter_square(side):\n  perimeter = 4 * side\n  return perimeter", "task_id": "499_53d96c5a-9862-47e8-949d-134a004cd523", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square given the length of one side.", "code": "def area_square(side):\n  area = side * side\n  return area", "task_id": "499_4760aace-d60d-402c-b264-d5a4cac1b5db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle given its length and width.", "code": "def perimeter_rectangle(length, width):\n  perimeter = 2 * (length + width)\n  return perimeter", "task_id": "499_7cea9213-9a40-463b-baca-659f21321130", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle given its length and width.", "code": "def area_rectangle(length, width):\n  area = length * width\n  return area", "task_id": "499_8c2fd3c2-93d9-439b-9408-5358a5b63e79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder given its radius and height.", "code": "def volume_cylinder(r, h):\n  volume = 3.14159 * r**2 * h\n  return volume", "task_id": "499_93b75213-93ea-43fb-90ff-3e655040e071", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder given its radius and height.", "code": "def surface_area_cylinder(r, h):\n  surface_area = 2 * 3.14159 * r * (r + h)\n  return surface_area", "task_id": "499_e63a45e4-2f1a-4982-a0d1-186f7e6ce57e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string in reverse order.", "code": "def reverse_concatenate_elements(lst):\n    return ' '.join(lst[::-1])", "task_id": "500_a80a5206-0eb4-4af6-adc4-0df79b971423", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, separated by commas.", "code": "def concatenate_elements_with_comma(lst):\n    return ', '.join(lst)", "task_id": "500_a24df906-0e13-433d-87fd-5e2e69791ecc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, each element prefixed by its index.", "code": "def concatenate_elements_with_index(lst):\n    return ' '.join(f'{i}:{elem}' for i, elem in enumerate(lst))", "task_id": "500_40a21659-182b-4007-b30b-e714a2c1a878", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, each element suffixed by its length.", "code": "def concatenate_elements_with_length(lst):\n    return ' '.join(f'{elem}({len(elem)})' for elem in lst)", "task_id": "500_1d815d39-103f-4a04-8c1a-f5887d8a9116", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, converting each element to uppercase.", "code": "def concatenate_elements_uppercase(lst):\n    return ' '.join(elem.upper() for elem in lst)", "task_id": "500_62714c77-fb7d-434d-9570-55f57b9a3ab5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, converting each element to alternating case.", "code": "def concatenate_elements_alternate_case(lst):\n    return ' '.join(''.join(c.lower() if i % 2 else c.upper() for i, c in enumerate(elem)) for elem in lst)", "task_id": "500_96f15ac0-6145-4c04-93f8-540d52835392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, separated by dashes.", "code": "def concatenate_elements_with_dash(lst):\n    return '-'.join(lst)", "task_id": "500_d9b1c0f5-e9c5-4f9d-ad69-9d46afff14e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, reversing each element.", "code": "def concatenate_elements_reverse_each(lst):\n    return ' '.join(elem[::-1] for elem in lst)", "task_id": "500_f713d6e5-6594-4e88-87ac-2f6dbd2169f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, each element prefixed by a given string.", "code": "def concatenate_elements_with_prefix(lst, prefix):\n    return ' '.join(f'{prefix}{elem}' for elem in lst)", "task_id": "500_6d8496f2-6c6d-4b4b-95c9-1b58a5449834", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all elements of the given list into a string, each element suffixed by a given string.", "code": "def concatenate_elements_with_suffix(lst, suffix):\n    return ' '.join(f'{elem}{suffix}' for elem in lst)", "task_id": "500_7a2654dd-5c97-457e-a0cf-7349b03a9b43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum and remainder of two numbers.", "code": "def add_and_remainder(a, b):\n  sum_ab = a + b\n  remainder_ab = a % b\n  return (sum_ab, remainder_ab)", "task_id": "502_c2dc9a1b-b245-4e9b-896f-efc1fb4f6492", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the product and remainder of two numbers.", "code": "def product_and_remainder(a, b):\n  product_ab = a * b\n  remainder_ab = a % b\n  return (product_ab, remainder_ab)", "task_id": "502_6bfc9827-6176-469c-91ce-c87b3b53efd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the difference and remainder of two numbers.", "code": "def difference_and_remainder(a, b):\n  difference_ab = a - b\n  remainder_ab = a % b\n  return (difference_ab, remainder_ab)", "task_id": "502_c7cff74f-cb90-4aec-b837-21b8dac58cb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the quotient and remainder of two numbers.", "code": "def quotient_and_remainder(a, b):\n  quotient_ab = a // b\n  remainder_ab = a % b\n  return (quotient_ab, remainder_ab)", "task_id": "502_c3145108-6996-4fe0-a34b-e82be38bfc03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of digits of the first number and the remainder when the first number is divided by the second number.", "code": "def sum_of_digits_and_remainder(a, b):\n  sum_of_digits = sum(int(digit) for digit in str(a))\n  remainder_ab = a % b\n  return (sum_of_digits, remainder_ab)", "task_id": "502_9515476a-e86d-4e9e-bded-1bec4f27561a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of squares of two numbers and the remainder when the first number is divided by the second number.", "code": "def sum_of_squares_and_remainder(a, b):\n  sum_of_squares = a**2 + b**2\n  remainder_ab = a % b\n  return (sum_of_squares, remainder_ab)", "task_id": "502_bcb90cd4-62da-44e1-b57c-9edf5c56419a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of cubes of two numbers and the remainder when the first number is divided by the second number.", "code": "def sum_of_cubes_and_remainder(a, b):\n  sum_of_cubes = a**3 + b**3\n  remainder_ab = a % b\n  return (sum_of_cubes, remainder_ab)", "task_id": "502_99324c00-3547-40c3-8bf5-01226d7ddc91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the absolute difference and remainder of two numbers.", "code": "def absolute_difference_and_remainder(a, b):\n  absolute_difference = abs(a - b)\n  remainder_ab = a % b\n  return (absolute_difference, remainder_ab)", "task_id": "502_1edabc8f-99c9-454f-85f8-dc9e9e4e0fb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of cubes of three numbers and the sum of the remainders when each number is divided by the next number.", "code": "def sum_of_cubes_and_sum_of_remainders(a, b, c):\n  sum_of_cubes = a**3 + b**3 + c**3\n  remainder_ab = a % b\n  remainder_bc = b % c\n  remainder_ca = c % a\n  sum_of_remainders = remainder_ab + remainder_bc + remainder_ca\n  return (sum_of_cubes, sum_of_remainders)", "task_id": "502_2cc11c3f-02b4-4d03-ab61-aadaf4eb476e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of squares of three numbers and the sum of the remainders when each number is divided by the next number.", "code": "def sum_of_squares_and_sum_of_remainders(a, b, c):\n  sum_of_squares = a**2 + b**2 + c**2\n  remainder_ab = a % b\n  remainder_bc = b % c\n  remainder_ca = c % a\n  sum_of_remainders = remainder_ab + remainder_bc + remainder_ca\n  return (sum_of_squares, sum_of_remainders)", "task_id": "502_c7ec935e-b513-4131-bb93-de499171815f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply consecutive numbers of a given list.", "code": "def multiply_consecutive_nums(nums):\n    result = [a * b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "503_18d5970f-3a90-459f-9a5d-29345a772fd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract consecutive numbers of a given list.", "code": "def subtract_consecutive_nums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "503_e0ffac88-238b-4215-abe4-bc251fbeb341", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add every 'step' consecutive numbers of a given list.", "code": "def add_consecutive_nums_with_step(nums, step):\n    result = [sum(nums[i:i+step]) for i in range(len(nums)-step+1)]\n    return result", "task_id": "503_c695561c-d33a-46a7-abc6-0816e6fdbb6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return pairs of consecutive numbers and their sum.", "code": "def add_consecutive_pairs(nums):\n    result = [(a, b, a + b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "503_7620317e-2387-40f1-bf43-063e3b8b3972", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add consecutive numbers of a given list, using a default value if the list has less than two elements.", "code": "def add_consecutive_nums_with_default(nums, default):\n    if len(nums) < 2:\n        return [default]\n    result = [b + a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "503_3eb772a4-cf60-46ec-83d3-5e9c6bd4d173", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add consecutive numbers of a given list, wrapping around to the start of the list.", "code": "def add_consecutive_nums_with_wrap(nums):\n    result = [b + a for a, b in zip(nums, nums[1:] + [nums[0]])]\n    return result", "task_id": "503_1ed7a1f1-5d26-42f8-89bd-120556316d55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add consecutive numbers of a given list, but only include sums greater than a given threshold.", "code": "def add_consecutive_nums_with_filter(nums, threshold):\n    result = [b + a for a, b in zip(nums[:-1], nums[1:]) if b + a > threshold]\n    return result", "task_id": "503_ab64841b-97ef-461b-ab09-3606e27d975f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the index and sum of consecutive numbers of a given list.", "code": "def add_consecutive_nums_with_index(nums):\n    result = [(i, b + a) for i, (a, b) in enumerate(zip(nums[:-1], nums[1:]))]\n    return result", "task_id": "503_0f012479-cc7f-467f-9dfb-1ad56743408d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add every other 'skip' consecutive numbers of a given list.", "code": "def add_consecutive_nums_with_skip(nums, skip):\n    result = [nums[i] + nums[i + skip] for i in range(len(nums) - skip)]\n    return result", "task_id": "503_4247dfdf-8fec-45b4-929a-8f564e0ec85b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add consecutive numbers of a given list, but in reverse order.", "code": "def add_consecutive_nums_with_reverse(nums):\n    result = [b + a for a, b in zip(nums[::-1][:-1], nums[::-1][1:])]\n    return result", "task_id": "503_34de5e7e-efaf-4ed7-a129-a23753242817", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors(x, y):\n    n = ngcd(x, y)\n    divisors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors", "task_id": "501_a88cc523-6e42-4419-a8fe-0dba5d3faefb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef sum_common_divisors(x, y):\n    n = ngcd(x, y)\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            total += i\n    return total", "task_id": "501_d48570ee-1f06-42a0-a040-4468db2c081d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef product_common_divisors(x, y):\n    n = ngcd(x, y)\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0:\n            product *= i\n    return product", "task_id": "501_5a789fdd-db56-4c15-bf21-b7951286e761", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef count_common_divisors(x, y):\n    n = ngcd(x, y)\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "task_id": "501_44580b53-25db-498f-9011-c29f7618f420", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_sum_even(x, y):\n    n = ngcd(x, y)\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            total += i\n    return total", "task_id": "501_ceb224f5-a797-4868-adde-9f009c832178", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_sum_odd(x, y):\n    n = ngcd(x, y)\n    total = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 != 0:\n            total += i\n    return total", "task_id": "501_237f7dd2-5ca1-41fd-b737-2a579aca075a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all even common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_product_even(x, y):\n    n = ngcd(x, y)\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            product *= i\n    return product", "task_id": "501_904b1405-d46c-4c69-b54e-0d001a811cb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all odd common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_product_odd(x, y):\n    n = ngcd(x, y)\n    product = 1\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 != 0:\n            product *= i\n    return product", "task_id": "501_aca243d3-9676-419c-b74a-bcd117a9e9a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_count_even(x, y):\n    n = ngcd(x, y)\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            count += 1\n    return count", "task_id": "501_9cc730d3-2416-4685-bead-c7f85f6d34e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd common divisors between two numbers in a given pair.", "code": "def ngcd(x,y):\n    i=1\n    while(i<=x and i<=y):\n        if(x%i==0 and y%i == 0):\n            gcd=i;\n        i+=1\n    return gcd;\ndef common_divisors_count_odd(x, y):\n    n = ngcd(x, y)\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 != 0:\n            count += 1\n    return count", "task_id": "501_6c10f541-a010-4843-ac78-35bec5fbc0b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i * i\n    return sum", "task_id": "504_647b87f7-a4ee-4c5a-9af8-52a4ea16b122", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i\n    return sum", "task_id": "504_15eb94b9-c1e8-4f46-9e42-a0622d9b670b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(2, 2*n + 1, 2):\n        sum += i\n    return sum", "task_id": "504_e5896e73-a6f3-41ad-b779-d0bc16524f4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    sum = 0\n    for i in range(1, n + 1):\n        sum += factorial(i)\n    return sum", "task_id": "504_9ee35994-0a28-451b-835d-5cd7bc672d97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n):\n    a, b = 0, 1\n    sum = 0\n    for _ in range(n):\n        sum += a\n        a, b = b, a + b\n    return sum", "task_id": "504_83eb4b1c-5842-48c6-b287-17374bd53c33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of the first n even natural numbers.", "code": "def sum_of_cubes_of_even_numbers(n):\n    sum = 0\n    for i in range(2, 2*n + 1, 2):\n        sum += i * i * i\n    return sum", "task_id": "504_63567535-dfce-4e86-b804-b22d90065b24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the first n odd natural numbers.", "code": "def sum_of_squares_of_odd_numbers(n):\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i * i\n    return sum", "task_id": "504_27eb2bbd-0645-4433-a316-b3cea355ff94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n natural numbers each raised to the power of p.", "code": "def sum_of_powers(n, p):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** p\n    return sum", "task_id": "504_cc419b50-d143-494f-b5f0-80a7510bacbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the reciprocals of the first n natural numbers.", "code": "def sum_of_reciprocals(n):\n    sum = 0.0\n    for i in range(1, n + 1):\n        sum += 1 / i\n    return sum", "task_id": "504_58cdc647-92a5-43fd-ad97-1169aee73578", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n natural numbers with alternating signs.", "code": "def sum_of_alternating_series(n):\n    sum = 0\n    for i in range(1, n + 1):\n        if i % 2 == 0:\n            sum -= i\n        else:\n            sum += i\n    return sum", "task_id": "504_3bcf052a-7701-43d0-8ad7-0d4209996e97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all negative numbers to the end of the given array.", "code": "def move_negatives_to_end(arr):\n    k = 0\n    for i in arr:\n        if i >= 0:\n            arr[k] = i\n            k += 1\n    for i in range(k, len(arr)):\n        arr[i] = -1\n    return arr", "task_id": "505_b34b3ee2-9882-45ae-b054-6f39cf638a1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all ones to the start of the given array.", "code": "def move_ones_to_start(arr):\n    k = len(arr) - 1\n    for i in reversed(arr):\n        if i != 1:\n            arr[k] = i\n            k -= 1\n    for i in range(k + 1):\n        arr[i] = 1\n    return arr", "task_id": "505_655f5905-daf9-477a-9852-76e429a8cf9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all even numbers to the end of the given array.", "code": "def move_evens_to_end(arr):\n    k = 0\n    for i in arr:\n        if i % 2 != 0:\n            arr[k] = i\n            k += 1\n    for i in range(k, len(arr)):\n        arr[i] = 0\n    return arr", "task_id": "505_aebc2ee3-7763-4ba8-8053-f17c67dad0d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all vowels to the end of the given string.", "code": "def move_vowels_to_end(s):\n    vowels = 'aeiouAEIOU'\n    result = [c for c in s if c not in vowels]\n    result.extend([c for c in s if c in vowels])\n    return ''.join(result)", "task_id": "505_017497e7-f9a0-4f46-b36a-02d84179e9ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all uppercase letters to the end of the given string.", "code": "def move_uppercase_to_end(s):\n    result = [c for c in s if not c.isupper()]\n    result.extend([c for c in s if c.isupper()])\n    return ''.join(result)", "task_id": "505_b90156f0-b40b-49aa-bdca-f38a331745d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all multiples of three to the end of the given array.", "code": "def move_multiples_of_three_to_end(arr):\n    k = 0\n    for i in arr:\n        if i % 3 != 0:\n            arr[k] = i\n            k += 1\n    for i in range(k, len(arr)):\n        arr[i] = 0\n    return arr", "task_id": "505_cdb0dd82-e3ec-4538-87d5-eb90f5b7f9ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all prime numbers to the end of the given array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef move_primes_to_end(arr):\n    k = 0\n    for i in arr:\n        if not is_prime(i):\n            arr[k] = i\n            k += 1\n    for i in range(k, len(arr)):\n        arr[i] = 0\n    return arr", "task_id": "505_818a32a3-5821-4ab8-9d9e-87c461ce58e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all odd numbers to the start of the given array.", "code": "def move_odd_to_start(arr):\n    k = len(arr) - 1\n    for i in reversed(arr):\n        if i % 2 == 0:\n            arr[k] = i\n            k -= 1\n    for i in range(k + 1):\n        arr[i] = 1\n    return arr", "task_id": "505_400ae60b-d637-499e-b9da-04588de3f6e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all uppercase letters to the start of the given string.", "code": "def move_uppercase_to_start(s):\n    result = [c for c in s if c.isupper()]\n    result.extend([c for c in s if not c.isupper()])\n    return ''.join(result)", "task_id": "505_ad975b09-5592-465e-b38e-00d3351c5a60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all digits to the end of the given string.", "code": "def move_digits_to_end(s):\n    result = [c for c in s if not c.isdigit()]\n    result.extend([c for c in s if c.isdigit()])\n    return ''.join(result)", "task_id": "505_4cfab2f9-7930-422b-8ff4-39c688141ad8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the combination coefficient of given c(n, k).", "code": "def combination_coefficient(n, k): \n\tC = [[0 for i in range(k + 1)] for j in range(n + 1)] \n\tfor i in range(n + 1): \n\t\tfor j in range(min(i, k) + 1): \n\t\t\tif j == 0 or j == i: \n\t\t\t\tC[i][j] = 1 \n\t\t\telse: \n\t\t\t\tC[i][j] = C[i - 1][j - 1] + C[i - 1][j] \n\treturn C[n][k]", "task_id": "506_de50ad40-8aa7-491a-8ba4-6cedf229ffcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number n.", "code": "def factorial(n): \n\tif n == 0: \n\t\treturn 1 \n\telse: \n\t\treturn n * factorial(n - 1)", "task_id": "506_b7560687-0b35-4021-a5b9-13dd615abc9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth Fibonacci number.", "code": "def fibonacci(n): \n\tif n <= 0: \n\t\treturn 0 \n\telif n == 1: \n\t\treturn 1 \n\telse: \n\t\treturn fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "506_51b2517e-462a-4a88-9495-231398ea5d54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two given numbers a and b.", "code": "def gcd(a, b): \n\twhile b: \n\t\ta, b = b, a % b \n\treturn a", "task_id": "506_c9af6404-72ea-42dd-aa29-aa2a773be3aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the least common multiple (LCM) of two given numbers a and b.", "code": "def lcm(a, b): \n\tdef gcd(a, b): \n\t\twhile b: \n\t\t\ta, b = b, a % b \n\t\treturn a \n\treturn abs(a * b) // gcd(a, b)", "task_id": "506_943ef657-5e74-409b-983d-5cceb3b68250", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is a prime number.", "code": "def is_prime(n): \n\tif n <= 1: \n\t\treturn False \n\tfor i in range(2, int(n ** 0.5) + 1): \n\t\tif n % i == 0: \n\t\t\treturn False \n\treturn True", "task_id": "506_d775c33e-8cfe-4990-91a8-d91bda084fd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number n.", "code": "def sum_of_digits(n): \n\tsum = 0 \n\twhile n > 0: \n\t\tsum += n % 10 \n\t\tn = n // 10 \n\treturn sum", "task_id": "506_455ece39-c508-4105-a327-dc04131c5562", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s): \n\treturn s[::-1]", "task_id": "506_f84a69b9-c414-4c0c-8574-c56b54050790", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s): \n\treturn s == s[::-1]", "task_id": "506_68a78d5b-5004-4dcf-b836-cf9849b2779d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the power of a given base raised to a given exponent.", "code": "def power(base, exp): \n\tif exp == 0: \n\t\treturn 1 \n\telse: \n\t\treturn base * power(base, exp - 1)", "task_id": "506_5d38bc4f-dd28-4fa9-8482-521a659f5c55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words of a specific length from a given list.", "code": "def remove_words_with_length(list1, length):\n    return [word for word in list1 if len(word) != length]", "task_id": "507_3bf01653-fbf0-4911-aa4c-bb078feba7d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words starting with a specific letter from a given list.", "code": "def remove_words_starting_with(list1, letter):\n    return [word for word in list1 if not word.startswith(letter)]", "task_id": "507_8b307ea8-1f50-4987-b87c-dedc5a4831d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words ending with a specific letter from a given list.", "code": "def remove_words_ending_with(list1, letter):\n    return [word for word in list1 if not word.endswith(letter)]", "task_id": "507_c0a26a49-fe67-4571-8fc4-d85851f0df9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words containing a specific substring from a given list.", "code": "def remove_words_containing(list1, substring):\n    return [word for word in list1 if substring not in word]", "task_id": "507_75835ac0-9f79-417c-b452-84e553cf6c68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words that contain any vowels from a given list.", "code": "def remove_words_with_vowels(list1):\n    vowels = 'aeiouAEIOU'\n    return [word for word in list1 if not any(vowel in word for vowel in vowels)]", "task_id": "507_90f7399f-642f-42dd-b1f9-74d512039868", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words with an even length from a given list.", "code": "def remove_words_with_even_length(list1):\n    return [word for word in list1 if len(word) % 2 != 0]", "task_id": "507_c3b780c2-791d-43d5-bf8c-51cf10e107ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words with an odd length from a given list.", "code": "def remove_words_with_odd_length(list1):\n    return [word for word in list1 if len(word) % 2 == 0]", "task_id": "507_6cbce20b-a9e6-4bf6-ba69-827da8947446", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words that contain any digits from a given list.", "code": "def remove_words_with_digit(list1):\n    return [word for word in list1 if not any(char.isdigit() for char in word)]", "task_id": "507_3b657fb0-5311-400c-8fe3-c739e8d7cf1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words that contain any special characters from a given list.", "code": "def remove_words_with_special_chars(list1):\n    return [word for word in list1 if word.isalnum()]", "task_id": "507_de817a6a-58dd-4f26-b28e-63e1cc5c476d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove words that contain any uppercase letters from a given list.", "code": "def remove_words_with_uppercase(list1):\n    return [word for word in list1 if word.islower()]", "task_id": "507_e6e0c176-50f7-4768-9a62-6d22b7b51127", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists, including duplicates, are in the same order or not.", "code": "def same_order_with_duplicates(l1, l2):\n    common_elements = [e for e in l1 if e in l2]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return common_elements == l2_filtered", "task_id": "508_7e949d7e-dd5d-4661-8ed6-86fa1f809113", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists of strings are in the same order, ignoring case.", "code": "def same_order_ignore_case(l1, l2):\n    l1_lower = [e.lower() for e in l1]\n    l2_lower = [e.lower() for e in l2]\n    common_elements = set(l1_lower) & set(l2_lower)\n    l1_filtered = [e for e in l1_lower if e in common_elements]\n    l2_filtered = [e for e in l2_lower if e in common_elements]\n    return l1_filtered == l2_filtered", "task_id": "508_f68cb3bc-856f-4c8f-968b-6ef917caf3c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order, considering only elements that appear more than a given threshold number of times.", "code": "def same_order_with_threshold(l1, l2, threshold):\n    from collections import Counter\n    l1_count = Counter(l1)\n    l2_count = Counter(l2)\n    common_elements = {e for e in l1_count if l1_count[e] > threshold and l2_count[e] > threshold}\n    l1_filtered = [e for e in l1 if e in common_elements]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return l1_filtered == l2_filtered", "task_id": "508_dc2f5197-9b32-42a5-a042-a1c1f9808394", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order, but also return the indices of these common elements in both lists.", "code": "def same_order_with_indices(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1_filtered = [(i, e) for i, e in enumerate(l1) if e in common_elements]\n    l2_filtered = [(i, e) for i, e in enumerate(l2) if e in common_elements]\n    return [e for _, e in l1_filtered] == [e for _, e in l2_filtered], l1_filtered, l2_filtered", "task_id": "508_410fff6d-4d43-47b9-a3fb-60243ecb9fbc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order, or in reverse order.", "code": "def same_order_with_reversed(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1_filtered = [e for e in l1 if e in common_elements]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return l1_filtered == l2_filtered or l1_filtered == l2_filtered[::-1]", "task_id": "508_9e07e024-959f-41ff-a52f-ab4a1a3d0269", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists appear in the same order as any subsequence of the other list.", "code": "def same_order_with_any_subsequence(l1, l2):\n    def is_subsequence(larger, smaller):\n        it = iter(larger)\n        return all(e in it for e in smaller)\n    common_elements = set(l1) & set(l2)\n    l1_filtered = [e for e in l1 if e in common_elements]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return is_subsequence(l1_filtered, l2_filtered) or is_subsequence(l2_filtered, l1_filtered)", "task_id": "508_12ddb95d-6ca4-4db9-9f09-12d0dac0d729", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common unique elements between two given lists are in the same order or not.", "code": "def same_order_with_unique(l1, l2):\n    l1_unique = list(dict.fromkeys(l1))\n    l2_unique = list(dict.fromkeys(l2))\n    common_elements = set(l1_unique) & set(l2_unique)\n    l1_filtered = [e for e in l1_unique if e in common_elements]\n    l2_filtered = [e for e in l2_unique if e in common_elements]\n    return l1_filtered == l2_filtered", "task_id": "508_ddf73057-df10-4c68-aa6b-5a1dbd691af4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order after sorting both lists.", "code": "def same_order_with_sorted(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1_filtered = sorted([e for e in l1 if e in common_elements])\n    l2_filtered = sorted([e for e in l2 if e in common_elements])\n    return l1_filtered == l2_filtered", "task_id": "508_2f75882d-b241-402a-bd6c-5fce5495adb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order, allowing interleaved elements from the other list.", "code": "def same_order_with_interleaved(l1, l2):\n    common_elements = set(l1) & set(l2)\n    l1_filtered = [e for e in l1 if e in common_elements]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return l1_filtered == l2_filtered", "task_id": "508_bc307e81-c80d-453a-b2f4-881287a2570e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the common elements between two given lists are in the same order, considering one list may be a rotated version of the other.", "code": "def same_order_with_rotated(l1, l2):\n    def is_rotated(larger, smaller):\n        return any(smaller == larger[i:] + larger[:i] for i in range(len(larger)))\n    common_elements = set(l1) & set(l2)\n    l1_filtered = [e for e in l1 if e in common_elements]\n    l2_filtered = [e for e in l2 if e in common_elements]\n    return is_rotated(l1_filtered, l2_filtered) or is_rotated(l2_filtered, l1_filtered)", "task_id": "508_dbe75322-1892-4374-b96c-ad7713ec3e09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number.", "code": "def sum_of_digits(num: int) -> int:\n    return sum(int(digit) for digit in str(num))", "task_id": "511_8c57b043-6f0b-4dc8-a89f-4de7c69ead82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of a given number.", "code": "def product_of_digits(num: int) -> int:\n    product = 1\n    for digit in str(num):\n        product *= int(digit)\n    return product", "task_id": "511_2cfce971-8b2b-467b-b42b-650d62959fc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "511_491b8f4c-691f-4387-81f1-c085c0a1b5f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(num: int) -> int:\n    return int(str(num)[::-1])", "task_id": "511_a18a4dab-659d-4a1e-8b2f-f94a9381a99f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(num: int) -> bool:\n    return str(num) == str(num)[::-1]", "task_id": "511_0a32dae9-c012-4952-8d11-b521e29638cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(num: int) -> int:\n    if num == 0:\n        return 1\n    return num * factorial(num - 1)", "task_id": "511_0e4b7339-ea20-4156-8931-b3ee1b9a86d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "511_a2acd120-f63a-4cf0-856e-4e778dea9955", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "511_7c97b090-c553-4a5b-81d5-49c4a858ac66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "511_2a655765-25ad-48f2-98a5-0899e9a77491", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    return sum(i * i for i in range(1, n + 1))", "task_id": "511_0f00262a-3afa-4df5-82a5-d197eb240a5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all odd numbers till a given odd number.", "code": "def sum_of_squares(n: int) -> int:\n    if n % 2 == 0:\n        return -1\n    total = 0\n    while n >= 1:\n        total += n ** 2\n        n -= 2\n    return total", "task_id": "509_3c9d04ac-dbdf-42f8-8402-8c449bce1190", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all odd numbers till a given odd number.", "code": "def product_of_odds(n: int) -> int:\n    if n % 2 == 0:\n        return -1\n    product = 1\n    while n >= 1:\n        product *= n\n        n -= 2\n    return product", "task_id": "509_299c9dc2-6121-4d12-b377-7cda61e144b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of all odd numbers till a given odd number.", "code": "def sum_of_cubes(n: int) -> int:\n    if n % 2 == 0:\n        return -1\n    total = 0\n    while n >= 1:\n        total += n ** 3\n        n -= 2\n    return total", "task_id": "509_f64db22f-dacd-4c10-8e65-9170cc37683b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers till a given odd number.", "code": "def count_odds(n: int) -> int:\n    if n % 2 == 0:\n        return -1\n    count = 0\n    while n >= 1:\n        count += 1\n        n -= 2\n    return count", "task_id": "509_93cb80ea-79d9-4962-8d84-1a2abe5351c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all even numbers till a given even number.", "code": "def sum_of_even_squares(n: int) -> int:\n    if n % 2 != 0:\n        return -1\n    total = 0\n    while n >= 0:\n        total += n ** 2\n        n -= 2\n    return total", "task_id": "509_82c02548-0ea5-4ba6-8888-2e30dcf2bfa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all multiples of 3 till a given number.", "code": "def sum_of_multiples_of_three(n: int) -> int:\n    if n < 3:\n        return 0\n    total = 0\n    for i in range(3, n+1, 3):\n        total += i\n    return total", "task_id": "509_f9baa9c6-c0cb-4706-8da3-ef0cac92ee71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of even numbers till a given even number.", "code": "def average_of_even(n: int) -> float:\n    if n % 2 != 0:\n        return -1.0\n    total = 0\n    count = 0\n    while n >= 0:\n        total += n\n        count += 1\n        n -= 2\n    return total / count", "task_id": "509_67ab831b-0fb2-460c-bd9f-5509d9b71aa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd digits in a given number.", "code": "def sum_of_odd_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            total += digit\n        n //= 10\n    return total", "task_id": "509_85ec2cea-2141-4639-82c3-34e10cf6c4c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all even digits in a given number.", "code": "def product_of_even_digits(n: int) -> int:\n    product = 1\n    has_even = False\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            product *= digit\n            has_even = True\n        n //= 10\n    return product if has_even else 0", "task_id": "509_e31e08f3-d52f-4c59-829a-aff872dbee41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all digits in a given number.", "code": "def sum_of_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "509_bd5c276a-79e2-4d7a-ae93-ff88d1c6e36e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all subsequences having product smaller than k for the given non-negative array.", "code": "def sum_of_subsequences(arr, k):\n    n = len(arr)\n    dp = [[0 for _ in range(n + 1)] for _ in range(k + 1)]\n    for i in range(1, k + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = dp[i][j - 1]\n            if arr[j - 1] <= i and arr[j - 1] > 0:\n                dp[i][j] += dp[i // arr[j - 1]][j - 1] + arr[j - 1]\n    return dp[k][n]", "task_id": "510_e02f8877-a883-4d77-9e8a-e118d30c0109", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having sum equal to s for the given non-negative array.", "code": "def count_subsequences_with_sum(arr, s):\n    n = len(arr)\n    dp = [[0 for _ in range(s + 1)] for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, s + 1):\n            dp[i][j] = dp[i - 1][j]\n            if arr[i - 1] <= j:\n                dp[i][j] += dp[i - 1][j - arr[i - 1]]\n    return dp[n][s]", "task_id": "510_532bc717-45dd-4d1b-b8b5-5e7adce43a12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having maximum element less than or equal to m for the given non-negative array.", "code": "def count_subsequences_with_max(arr, m):\n    n = len(arr)\n    dp = [0] * (m + 1)\n    dp[0] = 1\n    for num in arr:\n        if num <= m:\n            for j in range(m, num - 1, -1):\n                dp[j] += dp[j - num]\n    return sum(dp) - 1", "task_id": "510_4197b8f1-5f7e-4c20-b2b1-a858d3448332", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having minimum element greater than or equal to m for the given non-negative array.", "code": "def count_subsequences_with_min(arr, m):\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        subseq = [arr[j] for j in range(n) if i & (1 << j)]\n        if subseq and min(subseq) >= m:\n            count += 1\n    return count", "task_id": "510_da31c4fc-a038-4409-95f6-eb1936ab7254", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having length exactly l for the given non-negative array.", "code": "def count_subsequences_with_length(arr, l):\n    from itertools import combinations\n    return sum(1 for _ in combinations(arr, l))", "task_id": "510_e72e17e7-e0b8-4594-a709-3fcb920d49b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having an odd sum for the given non-negative array.", "code": "def count_subsequences_with_odd_sum(arr):\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        subseq_sum = sum(arr[j] for j in range(n) if i & (1 << j))\n        if subseq_sum % 2 == 1:\n            count += 1\n    return count", "task_id": "510_0bfa3e77-c246-438e-8031-447a3655cf56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having an even sum for the given non-negative array.", "code": "def count_subsequences_with_even_sum(arr):\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        subseq_sum = sum(arr[j] for j in range(n) if i & (1 << j))\n        if subseq_sum % 2 == 0:\n            count += 1\n    return count", "task_id": "510_8b5a7c3f-6470-46b0-8313-6e1b1b482950", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having a prime sum for the given non-negative array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_subsequences_with_prime_sum(arr):\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        subseq_sum = sum(arr[j] for j in range(n) if i & (1 << j))\n        if is_prime(subseq_sum):\n            count += 1\n    return count", "task_id": "510_96305a9c-f706-4223-9b83-21b5e36fb13c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having all distinct elements for the given non-negative array.", "code": "def count_subsequences_with_distinct_elements(arr):\n    from itertools import combinations\n    n = len(arr)\n    count = 0\n    for i in range(1, n + 1):\n        for comb in combinations(arr, i):\n            if len(set(comb)) == len(comb):\n                count += 1\n    return count", "task_id": "510_cc0c832f-914f-4568-b0f7-a9555ae4cc6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of subsequences having sum divisible by k for the given non-negative array.", "code": "def count_subsequences_with_sum_divisible_by_k(arr, k):\n    n = len(arr)\n    count = 0\n    for i in range(1, 1 << n):\n        subseq_sum = sum(arr[j] for j in range(n) if i & (1 << j))\n        if subseq_sum % k == 0:\n            count += 1\n    return count", "task_id": "510_bdc51a67-d85d-4548-8a56-553fa3c0fe6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to append the given string to each element in the list.", "code": "def append_str_to_list_elements(lst, s):\n    return [str(ele) + s for ele in lst]", "task_id": "513_67f2a8bf-3f56-4d24-9809-abef14b8abfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert the given string between each element in the list.", "code": "def insert_str_between_elements(lst, s):\n    res = []\n    for i in range(len(lst)):\n        res.append(lst[i])\n        if i != len(lst) - 1:\n            res.append(s)\n    return res", "task_id": "513_744f1380-67c1-4781-9ffc-f01213fba930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to each value in the dictionary.", "code": "def add_str_to_dict_values(d, s):\n    return {k: str(v) + s for k, v in d.items()}", "task_id": "513_26c0b302-f475-47be-a576-6d1d83c139c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to each element in the set.", "code": "def add_str_to_set_elements(st, s):\n    return {str(ele) + s for ele in st}", "task_id": "513_4b8437f7-dc7d-46ea-96eb-80f1c887d0b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to elements at even indices in the list.", "code": "def add_str_to_even_indices(lst, s):\n    return [str(ele) + s if i % 2 == 0 else ele for i, ele in enumerate(lst)]", "task_id": "513_d52ea04e-1aed-4e7a-b6b0-d90bf797641e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to elements at odd indices in the list.", "code": "def add_str_to_odd_indices(lst, s):\n    return [str(ele) + s if i % 2 != 0 else ele for i, ele in enumerate(lst)]", "task_id": "513_9b1893dd-e519-4024-9de2-4f9f05e090d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to each element in a list of tuples.", "code": "def add_str_to_list_of_tuples(lst, s):\n    return [(str(ele) + s for ele in tup) for tup in lst]", "task_id": "513_59fe8451-594b-4807-8588-e8016e4bb5e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to each element in a list of lists.", "code": "def add_str_to_list_of_lists(lst, s):\n    return [[str(ele) + s for ele in sublist] for sublist in lst]", "task_id": "513_dd8e3648-e4f5-4b0c-a7b0-2524840dfb85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to each value in a nested dictionary.", "code": "def add_str_to_nested_dict_values(d, s):\n    return {k: {sub_k: str(sub_v) + s for sub_k, sub_v in v.items()} for k, v in d.items()}", "task_id": "513_ea2ae966-a284-4099-9176-ffd6f72ca592", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the given string to every other element in the list.", "code": "def add_str_to_every_other_element(lst, s):\n    return [str(ele) + s if i % 2 == 0 else ele for i, ele in enumerate(lst)]", "task_id": "513_a5402200-aeee-4479-affd-67dd62369f15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of the squares of tuple elements in the given tuple.", "code": "def sum_of_squares(test_tup: tuple) -> int:\n    res = sum(x**2 for x in test_tup)\n    return res", "task_id": "514_f9a1cb9e-29a3-4510-a82d-8bee56549e55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of tuple elements in the given tuple.", "code": "def product_elements(test_tup: tuple) -> int:\n    res = 1\n    for x in test_tup:\n        res *= x\n    return res", "task_id": "514_57a974d6-90db-4500-982e-9de53112da75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of even elements in the given tuple.", "code": "def sum_even_elements(test_tup: tuple) -> int:\n    res = sum(x for x in test_tup if x % 2 == 0)\n    return res", "task_id": "514_4550d3b8-d143-4e44-95dd-83ea3a252ad1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of odd elements in the given tuple.", "code": "def sum_odd_elements(test_tup: tuple) -> int:\n    res = sum(x for x in test_tup if x % 2 != 0)\n    return res", "task_id": "514_08cfdf2d-6849-4a46-af8f-b1e243e6fbf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of positive elements in the given tuple.", "code": "def sum_positive_elements(test_tup: tuple) -> int:\n    res = sum(x for x in test_tup if x > 0)\n    return res", "task_id": "514_3c2b4792-7fa1-44ff-aa21-f3c6c221611d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of negative elements in the given tuple.", "code": "def sum_negative_elements(test_tup: tuple) -> int:\n    res = sum(x for x in test_tup if x < 0)\n    return res", "task_id": "514_d6bb02d5-d3d5-4060-9319-62501a437a80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of elements greater than a given number n in the given tuple.", "code": "def sum_elements_greater_than_n(test_tup: tuple, n: int) -> int:\n    res = sum(x for x in test_tup if x > n)\n    return res", "task_id": "514_d47d0a5b-7793-43a6-b2f3-564aa8c62c5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of elements less than a given number n in the given tuple.", "code": "def sum_elements_less_than_n(test_tup: tuple, n: int) -> int:\n    res = sum(x for x in test_tup if x < n)\n    return res", "task_id": "514_d83e1e34-3119-42bd-bddb-4635b8e89b98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of elements at odd indices in the given tuple.", "code": "def sum_elements_at_odd_indices(test_tup: tuple) -> int:\n    res = sum(test_tup[i] for i in range(len(test_tup)) if i % 2 != 0)\n    return res", "task_id": "514_7bb7a7dc-1040-494d-a26c-afde995a43bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the summation of elements at even indices in the given tuple.", "code": "def sum_elements_at_even_indices(test_tup: tuple) -> int:\n    res = sum(test_tup[i] for i in range(len(test_tup)) if i % 2 == 0)\n    return res", "task_id": "514_e1516df1-ebf5-4198-8dda-66d2a5a87eff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include elements that appear more than a given threshold.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_with_threshold(test_tuple, threshold): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif ele not in res: \n\t\t\tres[ele] = 0 \n\t\tres[ele] += 1 \n\treturn {k: v for k, v in res.items() if v > threshold}", "task_id": "512_1a7f09c1-a2e3-4f00-bc7c-2bbfea1d224c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, ignoring case for string elements.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_ignore_case(test_tuple): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, str): \n\t\t\tele = ele.lower() \n\t\tif ele not in res: \n\t\t\tres[ele] = 0 \n\t\tres[ele] += 1 \n\treturn res", "task_id": "512_4b134142-b92f-4c93-85a1-3ab3e926af87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include even numbers.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_even_only(test_tuple): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, int) and ele % 2 == 0: \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_579b6bea-0aa5-4368-aa14-75de81c1cc86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include string elements.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_strings_only(test_tuple): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, str): \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_89e46c84-55e2-4778-b2c8-02ffc45d73fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include odd numbers.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_odd_only(test_tuple): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, int) and ele % 2 != 0: \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_b2e0b1a0-aec0-4b6f-9851-d30c0637cc67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include numbers greater than a given threshold.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_greater_than(test_tuple, threshold): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, int) and ele > threshold: \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_793e05cf-7d1c-486f-906c-4013e83ce414", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include numbers less than a given threshold.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_less_than(test_tuple, threshold): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, int) and ele < threshold: \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_9d3b021a-25b1-4677-94ed-05c693b46f3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include string elements that start with a given character.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_start_with(test_tuple, char): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, str) and ele.startswith(char): \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_8cef15ae-ffc2-486a-9208-716a82cf1507", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include string elements that end with a given character.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_end_with(test_tuple, char): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, str) and ele.endswith(char): \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_9688a6d0-9920-4824-840d-332c6a64b46f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the element frequency in the mixed nested tuple, but only include string elements with length greater than a given value.", "code": "def flatten(test_tuple): \n\tfor tup in test_tuple: \n\t\tif isinstance(tup, tuple): \n\t\t\tyield from flatten(tup) \n\t\telse: \n\t\t\tyield tup \ndef count_element_freq_length_greater_than(test_tuple, length): \n\tres = {} \n\tfor ele in flatten(test_tuple): \n\t\tif isinstance(ele, str) and len(ele) > length: \n\t\t\tif ele not in res: \n\t\t\t\tres[ele] = 0 \n\t\t\tres[ele] += 1 \n\treturn res", "task_id": "512_5799c64d-fcd5-49dd-8f42-71058500c240", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest positive number from the given list.", "code": "def smallest_pos(list1):\n    min_val = float('inf')\n    for x in list1:\n        if x > 0 and x < min_val:\n            min_val = x\n    return min_val", "task_id": "517_70cf8f1d-2979-4394-a652-dac5f1020300", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all positive numbers from the given list.", "code": "def sum_positive_numbers(list1):\n    total = 0\n    for x in list1:\n        if x > 0:\n            total += x\n    return total", "task_id": "517_a8b9b219-1aba-48ff-af19-8d2f48d73d2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in the given list.", "code": "def count_positive_numbers(list1):\n    count = 0\n    for x in list1:\n        if x > 0:\n            count += 1\n    return count", "task_id": "517_e6bbfbcc-577c-4c5c-8d29-75c19d76e828", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of all positive numbers in the given list.", "code": "def average_positive_numbers(list1):\n    total = 0\n    count = 0\n    for x in list1:\n        if x > 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "517_60385141-0e17-4618-bc27-c2fcbadd8afc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest negative number from the given list.", "code": "def largest_negative(list1):\n    max_val = float('-inf')\n    for x in list1:\n        if x < 0 and x > max_val:\n            max_val = x\n    return max_val", "task_id": "517_3542d552-f202-4a52-b8a4-f6c7fbdd122b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest negative number from the given list.", "code": "def smallest_negative(list1):\n    min_val = float('inf')\n    for x in list1:\n        if x < 0 and x < min_val:\n            min_val = x\n    return min_val", "task_id": "517_9ff2cd8c-e620-483c-be37-1fd23784f25c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in the given list.", "code": "def count_negative_numbers(list1):\n    count = 0\n    for x in list1:\n        if x < 0:\n            count += 1\n    return count", "task_id": "517_bfc9117b-0148-4ef4-bd11-4b45ed13a1b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all negative numbers from the given list.", "code": "def sum_negative_numbers(list1):\n    total = 0\n    for x in list1:\n        if x < 0:\n            total += x\n    return total", "task_id": "517_b540271d-99d8-4b29-b131-252c285ac48f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all positive numbers from the given list.", "code": "def product_positive_numbers(list1):\n    product = 1\n    for x in list1:\n        if x > 0:\n            product *= x\n    return product", "task_id": "517_86cb7112-9ca7-445e-b305-1001328e2820", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all negative numbers from the given list.", "code": "def product_negative_numbers(list1):\n    product = 1\n    for x in list1:\n        if x < 0:\n            product *= x\n    return product", "task_id": "517_606df0bc-5d2b-409f-ac0a-0a07d4fa115e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using bucket sort.", "code": "def bucket_sort(arr):\n    if len(arr) == 0:\n        return arr\n    bucket_count = len(arr)\n    max_value = max(arr)\n    min_value = min(arr)\n    bucket_range = (max_value - min_value) / bucket_count\n    buckets = [[] for _ in range(bucket_count)]\n    for i in range(len(arr)):\n        diff = (arr[i] - min_value) / bucket_range - int((arr[i] - min_value) / bucket_range)\n        if diff == 0 and arr[i] != min_value:\n            buckets[int((arr[i] - min_value) / bucket_range) - 1].append(arr[i])\n        else:\n            buckets[int((arr[i] - min_value) / bucket_range)].append(arr[i])\n    for i in range(len(buckets)):\n        buckets[i] = sorted(buckets[i])\n    result = []\n    for i in range(len(buckets)):\n        result = result + buckets[i]\n    return result", "task_id": "516_46922c93-6c0a-439a-89fc-2baf4eaf4a77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using merge sort.", "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n        merge_sort(left_half)\n        merge_sort(right_half)\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n    return arr", "task_id": "516_4585ed12-6323-464a-b636-3af78fff2e4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "516_ecf39eaa-0c80-4482-aa15-63d3d971dc8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using heap sort.", "code": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n    if left < n and arr[i] < arr[left]:\n        largest = left\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\ndef heap_sort(arr):\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    for i in range(n-1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n    return arr", "task_id": "516_f4a767a7-8eab-4c3f-80eb-6357fbeb4f36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "516_f2814785-2a3a-40cb-bc50-7e1bde4fc2d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[min_idx] > arr[j]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "516_22b76c9b-b6ec-4db7-9168-97b990a44f29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using counting sort.", "code": "def counting_sort(arr):\n    max_val = max(arr)\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n    return arr", "task_id": "516_f67a22b3-8aad-4e31-b8e4-11e0a292f286", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "516_fea1af24-aa5e-42bd-abf1-8844b618904b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using shell sort.", "code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "task_id": "516_f0370df0-6689-40e4-ad12-c919d0ea8a2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of elements using gnome sort.", "code": "def gnome_sort(arr):\n    index = 0\n    n = len(arr)\n    while index < n:\n        if index == 0 or arr[index] >= arr[index - 1]:\n            index += 1\n        else:\n            arr[index], arr[index - 1] = arr[index - 1], arr[index]\n            index -= 1\n    return arr", "task_id": "516_fe7668d7-1c3d-4e77-9538-026d83597b4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if there is a subset with sum equal to a given target.", "code": "def is_subset_with_sum(arr, target):\n    n = len(arr)\n    dp = [[False] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "task_id": "515_2c4ba3d9-f3ef-4786-be85-16d2d119b475", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if there is a subset with sum greater than a given target.", "code": "def has_subset_with_sum_greater_than(arr, target):\n    total_sum = sum(arr)\n    if total_sum <= target:\n        return False\n    n = len(arr)\n    dp = [[False] * (total_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, total_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    for j in range(target + 1, total_sum + 1):\n        if dp[n][j]:\n            return True\n    return False", "task_id": "515_18e198e4-b55d-463a-8375-74e18c78685a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of subsets with sum equal to a given target.", "code": "def count_subsets_with_sum(arr, target):\n    n = len(arr)\n    dp = [[0] * (target + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, target + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    return dp[n][target]", "task_id": "515_010866a0-8501-4012-8672-21414e37799d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum difference between the sums of two subsets of a given array.", "code": "def min_subset_sum_difference(arr):\n    total_sum = sum(arr)\n    n = len(arr)\n    dp = [[False] * (total_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, total_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    min_diff = float('inf')\n    for j in range(total_sum // 2 + 1):\n        if dp[n][j]:\n            min_diff = min(min_diff, total_sum - 2 * j)\n    return min_diff", "task_id": "515_3d4d5027-88a8-4e96-b265-a93f036fdad3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the subset which is closest to a given target.", "code": "def subset_with_sum_closest_to_target(arr, target):\n    total_sum = sum(arr)\n    n = len(arr)\n    dp = [[False] * (total_sum + 1) for _ in range(n + 1)]\n    for i in range(n + 1):\n        dp[i][0] = True\n    for i in range(1, n + 1):\n        for j in range(1, total_sum + 1):\n            if arr[i - 1] <= j:\n                dp[i][j] = dp[i - 1][j] or dp[i - 1][j - arr[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j]\n    closest_sum = 0\n    for j in range(total_sum + 1):\n        if dp[n][j] and abs(j - target) < abs(closest_sum - target):\n            closest_sum = j\n    return closest_sum", "task_id": "515_fa6765c7-033c-4091-b425-c1a62b2b6ee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if there is a subset with sum that is a multiple of a given number k.", "code": "def is_subset_with_sum_multiple_of_k(arr, k):\n    n = len(arr)\n    dp = [False] * k\n    dp[0] = True\n    for num in arr:\n        temp = dp[:]\n        for i in range(k):\n            if dp[i]:\n                temp[(i + num) % k] = True\n        dp = temp\n    return dp[0]", "task_id": "515_5ad163c7-2deb-48a5-83d5-4c68a443b7c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a subset that is less than a given target.", "code": "def max_subset_sum_less_than_target(arr, target):\n    n = len(arr)\n    dp = [0] * (target + 1)\n    for num in arr:\n        for j in range(target, num - 1, -1):\n            dp[j] = max(dp[j], dp[j - num] + num)\n    return dp[target]", "task_id": "515_8c3f131e-ee48-4970-80c6-bfdfea1206fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if there is a subset with sum divisible by a given number k.", "code": "def subset_with_sum_divisible_by_k(arr, k):\n    n = len(arr)\n    if n > k:\n        return True\n    dp = [False] * k\n    for num in arr:\n        temp = dp[:]\n        for i in range(k):\n            if dp[i]:\n                temp[(i + num) % k] = True\n        dp = temp\n        dp[num % k] = True\n    return dp[0]", "task_id": "515_cc8514ff-72e7-44a3-a900-2eb19d9ae6df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest subset with sum greater than a given target.", "code": "def smallest_subset_with_sum_greater_than_target(arr, target):\n    arr.sort(reverse=True)\n    current_sum = 0\n    count = 0\n    for num in arr:\n        current_sum += num\n        count += 1\n        if current_sum > target:\n            return count\n    return -1", "task_id": "515_cca6260c-68cb-4cf3-9a82-4776119e6492", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the subset which is closest to half of the total sum of the array.", "code": "def subset_with_sum_closest_to_half(arr):\n    total_sum = sum(arr)\n    target = total_sum // 2\n    n = len(arr)\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in arr:\n        for j in range(target, num - 1, -1):\n            dp[j] = dp[j] or dp[j - num]\n    for j in range(target, -1, -1):\n        if dp[j]:\n            return j\n    return 0", "task_id": "515_c8350e3d-8e05-48e6-a0cf-0e421f055191", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cube root of a perfect cube number.", "code": "import math\ndef cube_root(num):\n    return math.pow(num, 1/3)", "task_id": "518_4ba39bb0-a3b9-4857-9f94-4c201083ee24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the square of a number.", "code": "def square(num):\n    return num * num", "task_id": "518_2aaf363f-daeb-4e0f-83b4-c9f16b16c4d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number.", "code": "def factorial(num):\n    if num == 0:\n        return 1\n    else:\n        return num * factorial(num-1)", "task_id": "518_6497e2b1-1151-40da-8b0b-68ece345b319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number is a prime number.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "518_f844d253-8643-4b9f-9742-7ec28e5533ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "518_4b014ca6-7ad9-40f0-b385-e6e5953ae57f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "518_66e41fbb-74a5-4d69-93e4-fea2f339360d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "518_a59b21a2-ba5b-4c73-9fdb-2bfce910ecf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a number.", "code": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))", "task_id": "518_57fe6ea0-a7d0-4dda-a4f2-24549627ad18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "518_a8883d8f-c5db-4141-8a4f-63b75f3c3021", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "518_498361f2-040b-488c-a9ae-a3e95a6064f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a tetrahedron given the edge length.", "code": "import math\ndef surface_area_tetrahedron(edge_length: float) -> float:\n\tsurface_area = math.sqrt(3) * (edge_length ** 2)\n\treturn round(surface_area, 2)", "task_id": "519_137555bd-31c9-4feb-9d3f-1690b68c22b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cube given the edge length.", "code": "def volume_cube(edge_length: float) -> float:\n\tvolume = edge_length ** 3\n\treturn round(volume, 2)", "task_id": "519_5ef693eb-20fc-4962-bdb9-d8a033c9daf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a cube given the edge length.", "code": "def surface_area_cube(edge_length: float) -> float:\n\tsurface_area = 6 * (edge_length ** 2)\n\treturn round(surface_area, 2)", "task_id": "519_c2451fad-70f4-4c20-b3f2-0adc3cc7ba58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a sphere given the radius.", "code": "import math\ndef volume_sphere(radius: float) -> float:\n\tvolume = (4/3) * math.pi * (radius ** 3)\n\treturn round(volume, 2)", "task_id": "519_8c99432f-c68c-41cf-a3fe-166f5a43d9a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a sphere given the radius.", "code": "import math\ndef surface_area_sphere(radius: float) -> float:\n\tsurface_area = 4 * math.pi * (radius ** 2)\n\treturn round(surface_area, 2)", "task_id": "519_589bb1ac-a977-4642-9903-22692b1c8c2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cylinder given the radius and height.", "code": "import math\ndef volume_cylinder(radius: float, height: float) -> float:\n\tvolume = math.pi * (radius ** 2) * height\n\treturn round(volume, 2)", "task_id": "519_94f9ff3a-ece7-443a-a4e3-9358d41cf0fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a cylinder given the radius and height.", "code": "import math\ndef surface_area_cylinder(radius: float, height: float) -> float:\n\tbase_area = math.pi * (radius ** 2)\n\tlateral_area = 2 * math.pi * radius * height\n\tsurface_area = 2 * base_area + lateral_area\n\treturn round(surface_area, 2)", "task_id": "519_405e6242-2102-4d04-bdca-e104187ac994", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cone given the radius and height.", "code": "import math\ndef volume_cone(radius: float, height: float) -> float:\n\tvolume = (1/3) * math.pi * (radius ** 2) * height\n\treturn round(volume, 2)", "task_id": "519_aaae21a6-6771-4fa1-95bc-3c01b44be8ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a cone given the radius and height.", "code": "import math\ndef surface_area_cone(radius: float, height: float) -> float:\n\tslant_height = math.sqrt((radius ** 2) + (height ** 2))\n\tbase_area = math.pi * (radius ** 2)\n\tlateral_area = math.pi * radius * slant_height\n\tsurface_area = base_area + lateral_area\n\treturn round(surface_area, 2)", "task_id": "519_3af02319-7872-4f05-9b08-cf18c19927f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a prism given the base area and height.", "code": "def volume_prism(base_area: float, height: float) -> float:\n\tvolume = base_area * height\n\treturn round(volume, 2)", "task_id": "519_d22df565-9ffb-4aec-a383-4cf0cbdcb50e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the sum of three integers is even.", "code": "def is_even_sum(a, b, c):\n    return (a + b + c) % 2 == 0", "task_id": "521_8f3298db-659d-436f-8e54-3c5656869c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "521_b10bc818-a685-4dd0-83a4-3a84bff3b542", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "521_470db91e-4088-4c0e-9328-9e15cb8dece0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "521_2d7db1a9-d7af-4d5f-a683-47944f23a768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a Fibonacci number.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "521_e0e47292-90a2-45b4-a31d-cf64842fdbf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect square.", "code": "def is_perfect_square(n):\n    return int(n**0.5)**2 == n", "task_id": "521_1f526679-abc9-413a-97ce-99172e55ec76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given year is a leap year.", "code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "task_id": "521_2bdf37a4-4427-4c16-968c-85f01e5c73d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a pangram.", "code": "def is_pangram(s):\n    alphabet = set('abcdefghijklmnopqrstuvwxyz')\n    return set(s.lower()) >= alphabet", "task_id": "521_d9f4a45f-3f25-472a-9d6f-1c3cec48228d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is an Armstrong number.", "code": "def is_armstrong_number(n):\n    digits = [int(d) for d in str(n)]\n    return sum(d**len(digits) for d in digits) == n", "task_id": "521_439e591e-6806-4bc6-be60-47ae06b70039", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a Harshad number.", "code": "def is_harshad_number(n):\n    return n % sum(int(d) for d in str(n)) == 0", "task_id": "521_8ac82954-2e0e-45f0-af00-88c2e6936e0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in the given array.", "code": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)", "task_id": "522_5a254aee-ffed-4022-89d3-fc7d39da6cfc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest decreasing subsequence in the given array.", "code": "def longest_decreasing_subsequence(arr):\n    n = len(arr)\n    lds = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] < arr[j] and lds[i] < lds[j] + 1:\n                lds[i] = lds[j] + 1\n    return max(lds)", "task_id": "522_88a9d305-3e40-4cac-a002-341971424239", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest alternating subsequence in the given array.", "code": "def longest_alternating_subsequence(arr):\n    n = len(arr)\n    inc = [1] * n\n    dec = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                inc[i] = max(inc[i], dec[j] + 1)\n            elif arr[i] < arr[j]:\n                dec[i] = max(dec[i], inc[j] + 1)\n    return max(max(inc), max(dec))", "task_id": "522_ac418c4e-fa01-4749-8f26-d7bb251545ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where the difference between adjacent elements is one.", "code": "def longest_subsequence_with_diff_one(arr):\n    n = len(arr)\n    lsd = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == 1 and lsd[i] < lsd[j] + 1:\n                lsd[i] = lsd[j] + 1\n    return max(lsd)", "task_id": "522_70644542-e5bd-42e7-985c-ca92ff6cab78", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where the sum of the elements is equal to k.", "code": "def longest_subsequence_with_sum_k(arr, k):\n    from itertools import combinations\n    max_len = 0\n    for i in range(1, len(arr) + 1):\n        for comb in combinations(arr, i):\n            if sum(comb) == k:\n                max_len = max(max_len, len(comb))\n    return max_len", "task_id": "522_926d76c4-5ef7-4285-9118-1d43aaa6f1c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where no two elements are adjacent in the original array.", "code": "def longest_subsequence_no_adjacent(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    dp = [0] * n\n    dp[0] = 1\n    dp[1] = 1\n    for i in range(2, n):\n        dp[i] = max(dp[i-1], dp[i-2] + 1)\n    return dp[-1]", "task_id": "522_a32b0559-a044-40fe-b6a0-685c553c5572", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence with no repeated elements.", "code": "def longest_subsequence_with_no_repeats(arr):\n    seen = set()\n    max_len = 0\n    current_len = 0\n    for num in arr:\n        if num not in seen:\n            seen.add(num)\n            current_len += 1\n            max_len = max(max_len, current_len)\n        else:\n            seen.clear()\n            seen.add(num)\n            current_len = 1\n    return max_len", "task_id": "522_a14519a8-1fa7-493e-a103-2918fec74110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where elements alternate between even and odd.", "code": "def longest_subsequence_with_even_odd(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if (arr[i] % 2 == 0 and arr[j] % 2 != 0) or (arr[i] % 2 != 0 and arr[j] % 2 == 0):\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "522_d2469fdd-cba1-41f2-96a9-1b4ce8fab23b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where all elements are prime numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef longest_subsequence_with_prime(arr):\n    primes = [num for num in arr if is_prime(num)]\n    return len(primes)", "task_id": "522_b2ec26f3-5f84-441c-b2fc-3eb06a6ade5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest subsequence where no two adjacent elements are the same.", "code": "def longest_subsequence_with_distinct_adjacent(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [1] * n\n    for i in range(1, n):\n        if arr[i] != arr[i-1]:\n            dp[i] = dp[i-1] + 1\n        else:\n            dp[i] = dp[i-1]\n    return max(dp)", "task_id": "522_64c39776-2596-4879-b6dd-65512b2581ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the gcd of the given array elements.", "code": "def find_gcd(num1, num2):\n\twhile num2:\n\t\tnum1, num2 = num2, num1 % num2\n\treturn num1\n\ndef get_gcd(arr):\n\tgcd = arr[0]\n\tfor num in arr[1:]:\n\t\tgcd = find_gcd(gcd, num)\n\treturn gcd", "task_id": "520_e436722c-dc36-4107-9e0b-9aece1808202", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all numbers in a given range [start, end].", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_range(start, end):\n\tlcm = start\n\tfor i in range(start + 1, end + 1):\n\t\tlcm = find_lcm(lcm, i)\n\treturn lcm", "task_id": "520_453ab823-843e-47ac-a275-65e037bd00ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all elements from two given lists.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_two_lists(list1, list2):\n\tcombined_list = list1 + list2\n\tlcm = combined_list[0]\n\tfor num in combined_list[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_cd5fec9e-c3eb-445b-a2d0-c545e0317452", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all even numbers in the given array.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_even_numbers(arr):\n\teven_numbers = [num for num in arr if num % 2 == 0]\n\tif not even_numbers:\n\t\treturn 0\n\tlcm = even_numbers[0]\n\tfor num in even_numbers[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_0247c349-3d28-4c25-aa4e-9c62e29deab9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all odd numbers in the given array.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_odd_numbers(arr):\n\todd_numbers = [num for num in arr if num % 2 != 0]\n\tif not odd_numbers:\n\t\treturn 0\n\tlcm = odd_numbers[0]\n\tfor num in odd_numbers[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_5f813690-95fd-44d6-9fdf-1816a76e4d3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all prime numbers in the given array.", "code": "def is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num**0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_primes(arr):\n\tprime_numbers = [num for num in arr if is_prime(num)]\n\tif not prime_numbers:\n\t\treturn 0\n\tlcm = prime_numbers[0]\n\tfor num in prime_numbers[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_8823ff5f-0893-4eda-b4bf-002d68a58685", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all numbers in the given array that are multiples of a given number n.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_multiples(arr, n):\n\tmultiples = [num for num in arr if num % n == 0]\n\tif not multiples:\n\t\treturn 0\n\tlcm = multiples[0]\n\tfor num in multiples[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_d8cdb91a-6302-4b5e-9642-22e62871043f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all numbers in the given array that are not multiples of a given number n.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_non_multiples(arr, n):\n\tnon_multiples = [num for num in arr if num % n != 0]\n\tif not non_multiples:\n\t\treturn 0\n\tlcm = non_multiples[0]\n\tfor num in non_multiples[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_4d111db1-74dc-471c-a81d-b5191ada4148", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all positive numbers in the given array.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_positive_numbers(arr):\n\tpositive_numbers = [num for num in arr if num > 0]\n\tif not positive_numbers:\n\t\treturn 0\n\tlcm = positive_numbers[0]\n\tfor num in positive_numbers[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_70850ac2-cbb8-4283-940b-38ca026d3f09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lcm of all negative numbers in the given array.", "code": "def find_lcm(num1, num2):\n\tif num1 > num2:\n\t\tnum = num1\n\t\tden = num2\n\telse:\n\t\tnum = num2\n\t\tden = num1\n\trem = num % den\n\twhile rem != 0:\n\t\tnum = den\n\t\tden = rem\n\t\trem = num % den\n\tgcd = den\n\tlcm = int(num1 * num2 / gcd)\n\treturn lcm\n\ndef find_lcm_of_negative_numbers(arr):\n\tnegative_numbers = [num for num in arr if num < 0]\n\tif not negative_numbers:\n\t\treturn 0\n\tlcm = negative_numbers[0]\n\tfor num in negative_numbers[1:]:\n\t\tlcm = find_lcm(lcm, num)\n\treturn lcm", "task_id": "520_81d4569b-07e8-400b-8611-36896ab4e171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given password has at least one uppercase letter, one lowercase letter, one number, one special character, and is at least 8 characters long using lambda functions.", "code": "def check_password(password):\n    checks = [\n        lambda password: any(x.isupper() for x in password) or 'Password must have at least one uppercase letter.',\n        lambda password: any(x.islower() for x in password) or 'Password must have at least one lowercase letter.',\n        lambda password: any(x.isdigit() for x in password) or 'Password must have at least one number.',\n        lambda password: any(x in '!@#$%^&*()-_+=' for x in password) or 'Password must have at least one special character.',\n        lambda password: len(password) >= 8 or 'Password must be at least 8 characters long.'\n    ]\n    result = [check(password) for check in checks if check(password) != True]\n    if not result:\n        result.append('Valid password.')\n    return result", "task_id": "523_a8b406da-7772-4863-b90d-8278fad180ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given username has only alphanumeric characters, starts with a letter, and is between 5 and 15 characters long using lambda functions.", "code": "def validate_username(username):\n    checks = [\n        lambda username: username.isalnum() or 'Username must contain only alphanumeric characters.',\n        lambda username: username[0].isalpha() or 'Username must start with a letter.',\n        lambda username: 5 <= len(username) <= 15 or 'Username must be between 5 and 15 characters long.'\n    ]\n    result = [check(username) for check in checks if check(username) != True]\n    if not result:\n        result.append('Valid username.')\n    return result", "task_id": "523_97b0d8d2-3137-4169-b7dd-137d5d036be3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given email address contains an '@' symbol, a domain name, and a top-level domain using lambda functions.", "code": "def check_email(email):\n    checks = [\n        lambda email: '@' in email or 'Email must contain an @ symbol.',\n        lambda email: '.' in email.split('@')[-1] or 'Email must contain a domain name.',\n        lambda email: len(email.split('@')[-1].split('.')[-1]) >= 2 or 'Email must contain a top-level domain.'\n    ]\n    result = [check(email) for check in checks if check(email) != True]\n    if not result:\n        result.append('Valid email.')\n    return result", "task_id": "523_95da0f0b-afb7-4e80-9dee-6e32298bfb99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given date string is in the format 'YYYY-MM-DD' and represents a valid date using lambda functions.", "code": "from datetime import datetime\n\ndef validate_date(date):\n    checks = [\n        lambda date: len(date) == 10 and date[4] == '-' and date[7] == '-' or 'Date must be in the format YYYY-MM-DD.',\n        lambda date: all(part.isdigit() for part in date.split('-')) or 'Date must contain only digits and hyphens.',\n        lambda date: datetime.strptime(date, '%Y-%m-%d') or 'Date must be a valid date.'\n    ]\n    result = [check(date) for check in checks if check(date) != True]\n    if not result:\n        result.append('Valid date.')\n    return result", "task_id": "523_727ee180-8c68-4972-9d8a-9b2e5b7845bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given phone number is exactly 10 digits long and contains only numbers using lambda functions.", "code": "def check_phone_number(phone_number):\n    checks = [\n        lambda phone_number: phone_number.isdigit() or 'Phone number must contain only digits.',\n        lambda phone_number: len(phone_number) == 10 or 'Phone number must be exactly 10 digits long.'\n    ]\n    result = [check(phone_number) for check in checks if check(phone_number) != True]\n    if not result:\n        result.append('Valid phone number.')\n    return result", "task_id": "523_0e1fd4e4-1eb9-4094-824e-2ecd8c88b802", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given URL starts with 'http://' or 'https://', contains a domain name, and ends with a valid top-level domain using lambda functions.", "code": "def validate_url(url):\n    checks = [\n        lambda url: url.startswith('http://') or url.startswith('https://') or 'URL must start with http:// or https://.',\n        lambda url: '.' in url.split('//')[-1] or 'URL must contain a domain name.',\n        lambda url: len(url.split('.')[-1]) >= 2 or 'URL must end with a valid top-level domain.'\n    ]\n    result = [check(url) for check in checks if check(url) != True]\n    if not result:\n        result.append('Valid URL.')\n    return result", "task_id": "523_399498f9-09a3-4579-9e8b-e82d5735bcdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given credit card number is exactly 16 digits long and contains only numbers using lambda functions.", "code": "def check_credit_card(card_number):\n    checks = [\n        lambda card_number: card_number.isdigit() or 'Credit card number must contain only digits.',\n        lambda card_number: len(card_number) == 16 or 'Credit card number must be exactly 16 digits long.'\n    ]\n    result = [check(card_number) for check in checks if check(card_number) != True]\n    if not result:\n        result.append('Valid credit card number.')\n    return result", "task_id": "523_7c700bf3-dabe-4059-87a2-27835eb2fb46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given postal code is exactly 5 digits long and contains only numbers using lambda functions.", "code": "def validate_postal_code(postal_code):\n    checks = [\n        lambda postal_code: postal_code.isdigit() or 'Postal code must contain only digits.',\n        lambda postal_code: len(postal_code) == 5 or 'Postal code must be exactly 5 digits long.'\n    ]\n    result = [check(postal_code) for check in checks if check(postal_code) != True]\n    if not result:\n        result.append('Valid postal code.')\n    return result", "task_id": "523_676f2802-7516-4ef7-9e16-10a377067d68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a valid hex color code (starts with '#' and is followed by exactly 6 hexadecimal digits) using lambda functions.", "code": "def check_hex_color(color):\n    checks = [\n        lambda color: color.startswith('#') or 'Hex color must start with #.',\n        lambda color: len(color) == 7 or 'Hex color must be exactly 7 characters long.',\n        lambda color: all(c in '0123456789abcdefABCDEF' for c in color[1:]) or 'Hex color must contain only hexadecimal digits.'\n    ]\n    result = [check(color) for check in checks if check(color) != True]\n    if not result:\n        result.append('Valid hex color.')\n    return result", "task_id": "523_a019c776-5a60-4cdb-ba37-78bb5f7282a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a valid IPv4 address (four octets separated by dots, each octet between 0 and 255) using lambda functions.", "code": "def validate_ip_address(ip_address):\n    checks = [\n        lambda ip_address: len(ip_address.split('.')) == 4 or 'IP address must have four octets.',\n        lambda ip_address: all(octet.isdigit() and 0 <= int(octet) <= 255 for octet in ip_address.split('.')) or 'Each octet must be a number between 0 and 255.'\n    ]\n    result = [check(ip_address) for check in checks if check(ip_address) != True]\n    if not result:\n        result.append('Valid IP address.')\n    return result", "task_id": "523_9dad8d03-677c-4f64-b38f-17d5d1679f2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given lines are perpendicular or not.", "code": "def is_perpendicular(line1, line2):\n    return line1[0] * line2[0] + line1[1] * line2[1] == 0", "task_id": "525_bc983fa3-3a40-488d-999e-167eb1b04173", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the slope of a given line.", "code": "def slope(line):\n    return line[0] / line[1]", "task_id": "525_6196810a-c4f2-458b-bd9d-818da652881a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether three given points are collinear or not.", "code": "def is_collinear(point1, point2, point3):\n    return (point2[1] - point1[1]) * (point3[0] - point2[0]) == (point3[1] - point2[1]) * (point2[0] - point1[0])", "task_id": "525_1181d14d-a33c-472e-8723-e2bb95b1d738", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the midpoint of a line segment defined by two given points.", "code": "def midpoint(point1, point2):\n    return ((point1[0] + point2[0]) / 2, (point1[1] + point2[1]) / 2)", "task_id": "525_c3c201b3-25c8-418a-8ea2-ce85021c2568", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the distance between two given points.", "code": "def distance(point1, point2):\n    return ((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2) ** 0.5", "task_id": "525_7562d1eb-6890-41da-b532-c7d38691fcf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reflect a given point across a specified axis ('x' or 'y').", "code": "def reflect_point(point, axis):\n    if axis == 'x':\n        return (point[0], -point[1])\n    elif axis == 'y':\n        return (-point[0], point[1])", "task_id": "525_6890b648-e988-420b-8479-24961bca6b1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the intersection point of two given lines, if they intersect.", "code": "def line_intersection(line1, line2):\n    a1, b1, c1 = line1\n    a2, b2, c2 = line2\n    determinant = a1 * b2 - a2 * b1\n    if determinant == 0:\n        return None\n    else:\n        x = (b2 * c1 - b1 * c2) / determinant\n        y = (a1 * c2 - a2 * c1) / determinant\n        return (x, y)", "task_id": "525_cd082ae5-45b1-493f-943f-42f9b0bd5695", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the length of a line segment defined by two given points.", "code": "def line_length(point1, point2):\n    return ((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2) ** 0.5", "task_id": "525_5e052eb3-1217-4312-a4cb-31e8107cd6e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given point lies on a given line.", "code": "def is_point_on_line(point, line):\n    a, b, c = line\n    x, y = point\n    return a * x + b * y + c == 0", "task_id": "525_13f29125-0ca3-4c11-964a-9b7c02d5c3c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the angle between two given lines.", "code": "import math\n\ndef angle_between_lines(line1, line2):\n    slope1 = -line1[0] / line1[1]\n    slope2 = -line2[0] / line2[1]\n    angle = math.atan(abs((slope2 - slope1) / (1 + slope1 * slope2)))\n    return math.degrees(angle)", "task_id": "525_186f6353-e3ff-4263-ab58-a4f956c25cbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse each word in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(word[::-1] for word in s.split())", "task_id": "526_3c78be81-d151-489d-9f99-fdff71b84925", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize all vowels in a given string.", "code": "def capitalize_vowels(s: str) -> str:\n    vowels = 'aeiou'\n    return ''.join(char.upper() if char in vowels else char for char in s)", "task_id": "526_2efc6f72-f717-4f59-aa23-7824d44308f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "526_75a76515-4402-4102-ab23-f5af74958373", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to double each consonant in a given string.", "code": "def double_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char*2 if char not in vowels and char.isalpha() else char for char in s)", "task_id": "526_593a27d5-9b35-4936-8dbd-b5924615df50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in a given string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "526_3ecfc792-0257-410d-ada4-2b3b37800d75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "526_5436de34-bf84-41be-806d-b15880e602c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the entire string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "526_d4e0edf6-e4ad-4147-8bec-80b1b4601e3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize every alternate letter in a given string.", "code": "def capitalize_alternate_letters(s: str) -> str:\n    return ''.join(char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(s))", "task_id": "526_8ee6bcfd-a47f-4eff-8513-fdb31d5b333d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from a given string.", "code": "def remove_duplicate_characters(s: str) -> str:\n    seen = set()\n    return ''.join(char for char in s if not (char in seen or seen.add(char)))", "task_id": "526_269415ed-30cb-4a7c-a872-8994252bbfc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap the case of each letter in a given string.", "code": "def swap_case(s: str) -> str:\n    return s.swapcase()", "task_id": "526_abc41f50-e873-461f-ab5d-fe880b4cb0af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum decreasing subsequence of the given array.", "code": "def max_sum_decreasing_subsequence(arr, n): \n\tmax_sum = 0\n\tmsds = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsds[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] < arr[j] and msds[i] < msds[j] + arr[i]): \n\t\t\t\tmsds[i] = msds[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msds[i]: \n\t\t\tmax_sum = msds[i] \n\treturn max_sum", "task_id": "524_2b813f62-7c8b-416f-9bfb-83443f1cdd3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum non-adjacent subsequence of the given array.", "code": "def max_sum_non_adjacent_subsequence(arr, n): \n\tif n == 0: \n\t\treturn 0 \n\tif n == 1: \n\t\treturn arr[0] \n\tincl = arr[0] \n\texcl = 0 \n\tfor i in range(1, n): \n\t\tnum = arr[i] \n\t\tnew_excl = max(incl, excl) \n\t\tincl = excl + num \n\t\texcl = new_excl \n\treturn max(incl, excl)", "task_id": "524_34834256-783f-4f1e-b299-12d8cbcb310b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of maximum increasing subsequence of the given array.", "code": "def max_product_increasing_subsequence(arr, n): \n\tmax_product = 0 \n\tmpis = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmpis[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] > arr[j] and mpis[i] < mpis[j] * arr[i]): \n\t\t\t\tmpis[i] = mpis[j] * arr[i] \n\tfor i in range(n): \n\t\tif max_product < mpis[i]: \n\t\t\tmax_product = mpis[i] \n\treturn max_product", "task_id": "524_d35845c3-7378-4e09-9872-756f45262ee0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are even.", "code": "def max_sum_even_subsequence(arr, n): \n\tmax_sum = 0 \n\tmses = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif arr[i] % 2 == 0: \n\t\t\tmses[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] % 2 == 0 and arr[j] % 2 == 0 and mses[i] < mses[j] + arr[i]): \n\t\t\t\tmses[i] = mses[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < mses[i]: \n\t\t\tmax_sum = mses[i] \n\treturn max_sum", "task_id": "524_0b32a29c-6a6b-4e55-bc16-41ca840aed1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are odd.", "code": "def max_sum_odd_subsequence(arr, n): \n\tmax_sum = 0 \n\tmsos = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif arr[i] % 2 != 0: \n\t\t\tmsos[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (arr[i] % 2 != 0 and arr[j] % 2 != 0 and msos[i] < msos[j] + arr[i]): \n\t\t\t\tmsos[i] = msos[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msos[i]: \n\t\t\tmax_sum = msos[i] \n\treturn max_sum", "task_id": "524_26e68548-253f-4309-9bcb-8e3ed98d91b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum alternating subsequence of the given array where elements alternate between increasing and decreasing.", "code": "def max_sum_alternating_subsequence(arr, n): \n\tmax_sum = 0 \n\tmsas = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tmsas[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif ((arr[i] > arr[j] or arr[i] < arr[j]) and msas[i] < msas[j] + arr[i]): \n\t\t\t\tmsas[i] = msas[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msas[i]: \n\t\t\tmax_sum = msas[i] \n\treturn max_sum", "task_id": "524_8c9fd87d-db63-48a3-a73f-bfe8d501116c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are prime numbers.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num ** 0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef max_sum_prime_subsequence(arr, n): \n\tmax_sum = 0 \n\tmsps = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif is_prime(arr[i]): \n\t\t\tmsps[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (is_prime(arr[i]) and is_prime(arr[j]) and msps[i] < msps[j] + arr[i]): \n\t\t\t\tmsps[i] = msps[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msps[i]: \n\t\t\tmax_sum = msps[i] \n\treturn max_sum", "task_id": "524_d045c2d4-b2f4-44f7-a964-dcd4c9207be0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are Fibonacci numbers.", "code": "def is_fibonacci(num): \n\tif num == 0 or num == 1: \n\t\treturn True \n\ta, b = 0, 1 \n\twhile b < num: \n\t\ta, b = b, a + b \n\treturn b == num \n\ndef max_sum_fibonacci_subsequence(arr, n): \n\tmax_sum = 0 \n\tmsfs = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif is_fibonacci(arr[i]): \n\t\t\tmsfs[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (is_fibonacci(arr[i]) and is_fibonacci(arr[j]) and msfs[i] < msfs[j] + arr[i]): \n\t\t\t\tmsfs[i] = msfs[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msfs[i]: \n\t\t\tmax_sum = msfs[i] \n\treturn max_sum", "task_id": "524_62c3f978-9808-4746-b5b5-908002a29086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are perfect squares.", "code": "def is_square(num): \n\troot = int(num ** 0.5) \n\treturn root * root == num \n\ndef max_sum_square_subsequence(arr, n): \n\tmax_sum = 0 \n\tmsss = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif is_square(arr[i]): \n\t\t\tmsss[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (is_square(arr[i]) and is_square(arr[j]) and msss[i] < msss[j] + arr[i]): \n\t\t\t\tmsss[i] = msss[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < msss[i]: \n\t\t\tmax_sum = msss[i] \n\treturn max_sum", "task_id": "524_43c2bc2b-2f9f-438b-a088-d1bbd1b7bb07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of maximum subsequence of the given array where all elements are perfect cubes.", "code": "def is_cubic(num): \n\troot = round(num ** (1/3)) \n\treturn root * root * root == num \n\ndef max_sum_cubic_subsequence(arr, n): \n\tmax_sum = 0 \n\tmscs = [0 for x in range(n)] \n\tfor i in range(n): \n\t\tif is_cubic(arr[i]): \n\t\t\tmscs[i] = arr[i] \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tif (is_cubic(arr[i]) and is_cubic(arr[j]) and mscs[i] < mscs[j] + arr[i]): \n\t\t\t\tmscs[i] = mscs[j] + arr[i] \n\tfor i in range(n): \n\t\tif max_sum < mscs[i]: \n\t\t\tmax_sum = mscs[i] \n\treturn max_sum", "task_id": "524_cd42fc53-6275-4012-98ed-41345555271f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list of lists with maximum length.", "code": "def max_length(list1):\n    max_length = max(len(x) for x in list1)\n    max_list = max(list1, key=len)\n    return (max_length, max_list)", "task_id": "528_63d45cc9-56e1-4044-a468-6c89cbd5ff9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of lengths of all lists in a list of lists.", "code": "def sum_of_lengths(list1):\n    return sum(len(x) for x in list1)", "task_id": "528_87cbb2e2-d0a8-4637-a197-bf571b795433", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average length of lists in a list of lists.", "code": "def avg_length(list1):\n    return sum(len(x) for x in list1) / len(list1)", "task_id": "528_4b901d2c-b5f0-4e88-9ba5-a8e238f7c961", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the most elements in a list of lists.", "code": "def list_with_most_elements(list1):\n    return max(list1, key=len)", "task_id": "528_0c4c0f4c-56d7-4c62-b38e-8375ac642401", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the least elements in a list of lists.", "code": "def list_with_least_elements(list1):\n    return min(list1, key=len)", "task_id": "528_424f6927-a40c-4fb0-a7e4-f95b808e39f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the total number of elements in a list of lists.", "code": "def total_elements(list1):\n    return sum(len(x) for x in list1)", "task_id": "528_3380f7fc-c33c-419a-8d22-39f88b92dc6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of empty lists in a list of lists.", "code": "def count_empty_lists(list1):\n    return sum(1 for x in list1 if len(x) == 0)", "task_id": "528_d53f2c85-dd7e-404c-bdc6-ce93a8644b21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all lists in a list of lists.", "code": "def concatenate_all_lists(list1):\n    result = []\n    for sublist in list1:\n        result.extend(sublist)\n    return result", "task_id": "528_cb2178e0-343c-4534-b2ea-89956bd37b62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the maximum sum of elements in a list of lists.", "code": "def list_with_max_sum(list1):\n    return max(list1, key=sum)", "task_id": "528_54dc2ef8-2d02-42eb-9e39-537dc77bafe0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list with the minimum sum of elements in a list of lists.", "code": "def list_with_min_sum(list1):\n    return min(list1, key=sum)", "task_id": "528_9d6cbaf7-618a-406d-9373-6f64b27a845c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose difference is equal to a given number.", "code": "def find_pairs_with_difference(arr, diff):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == diff:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_6b72ece8-921f-4b97-8532-874560f14381", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose product is equal to a given number.", "code": "def find_pairs_with_product(arr, product):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] == product:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_e919a31a-0091-4cd3-9ec9-ff2e5a2237e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all triplets in an integer array whose sum is equal to a given number.", "code": "def find_triplets_with_sum(arr, sum):\n    triplets = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            for k in range(j + 1, len(arr)):\n                if arr[i] + arr[j] + arr[k] == sum:\n                    triplets.append((arr[i], arr[j], arr[k]))\n    return triplets", "task_id": "527_c552880f-2f9e-4cba-bf56-f24c7c760890", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum falls within a given range.", "code": "def find_pairs_with_sum_in_range(arr, sum_range):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if sum_range[0] <= arr[i] + arr[j] <= sum_range[1]:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_61a7be33-7a22-44e5-9a27-35467fd1a5d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is an even number.", "code": "def find_pairs_with_even_sum(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 == 0:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_a147bf17-9481-4fd5-a556-6d946cb6171d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is an odd number.", "code": "def find_pairs_with_odd_sum(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % 2 != 0:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_ae14d8e5-8dda-4386-a412-3a4ce9411e6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is divisible by a given number k.", "code": "def find_pairs_with_sum_divisible_by_k(arr, k):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] + arr[j]) % k == 0:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_16800302-5ab5-46f3-bde5-e4048909275a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is greater than a given number k.", "code": "def find_pairs_with_sum_greater_than_k(arr, k):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] > k:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_0688f2d7-e3ab-4b56-bf39-03b8a2d623ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is less than a given number k.", "code": "def find_pairs_with_sum_less_than_k(arr, k):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] < k:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_3a4d0b4f-7615-489f-8b6c-f02d8242683e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all pairs in an integer array whose sum is equal to their index in the array.", "code": "def find_pairs_with_sum_equal_to_index(arr):\n    pairs = []\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == i + j:\n                pairs.append((arr[i], arr[j]))\n    return pairs", "task_id": "527_84fa7a9b-bbaa-47e8-b352-8040fc2cb9f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in an array of integers.", "code": "def count_even_numbers(arr):\n    count = 0\n    for num in arr:\n        if num % 2 == 0:\n            count += 1\n    return count", "task_id": "530_e809635e-f6f9-4c3f-80a1-8a8a97afdaff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all positive numbers in an array of integers.", "code": "def sum_of_positives(arr):\n    total = 0\n    for num in arr:\n        if num > 0:\n            total += num\n    return total", "task_id": "530_1f688d70-f275-4c70-8f29-4e91da07d4d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "530_a285fd95-36df-43a3-a368-02fa747e4555", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "530_b7138da1-19f8-429f-a4ca-6448e02979be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "530_909e9d5b-f840-429f-a4dd-d836d3c0a37d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in an array of integers.", "code": "def find_max(arr):\n    return max(arr)", "task_id": "530_802f7804-8160-4f81-b92e-ec6238e9f032", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number in an array of integers.", "code": "def find_min(arr):\n    return min(arr)", "task_id": "530_b6d8a0b7-7214-4e7f-af9b-a6dd8e49fb45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a given number in an array of integers.", "code": "def count_occurrences(arr, x):\n    return arr.count(x)", "task_id": "530_5cd2b292-c9b2-464c-babf-3b4dbcdcafae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of all numbers in an array of integers.", "code": "def sum_of_squares(arr):\n    return sum(x**2 for x in arr)", "task_id": "530_7395b66f-4504-43bf-b3de-ca61bebb4a07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from an array of integers.", "code": "def remove_duplicates(arr):\n    return list(set(arr))", "task_id": "530_8eeee356-4d7c-41e4-add6-bfe3c5d5d289", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n): \n\tif n <= 0: \n\t\treturn 0 \n\telif n == 1: \n\t\treturn 1 \n\telse: \n\t\treturn fibonacci(n-1) + fibonacci(n-2)", "task_id": "529_56393271-7f31-4c39-949f-338df2e25ebb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tribonacci number.", "code": "def tribonacci(n): \n\tif n == 0: \n\t\treturn 0 \n\telif n == 1 or n == 2: \n\t\treturn 1 \n\telse: \n\t\treturn tribonacci(n-1) + tribonacci(n-2) + tribonacci(n-3)", "task_id": "529_04bb645e-2f2a-4be6-98ba-9f9a01b12fbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Pell number.", "code": "def pell(n): \n\tif n == 0: \n\t\treturn 0 \n\telif n == 1: \n\t\treturn 1 \n\telse: \n\t\treturn 2 * pell(n-1) + pell(n-2)", "task_id": "529_f723091c-3999-46be-97bc-7c9bc93bfe30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Lucas number.", "code": "def lucas(n): \n\tif n == 0: \n\t\treturn 2 \n\telif n == 1: \n\t\treturn 1 \n\telse: \n\t\treturn lucas(n-1) + lucas(n-2)", "task_id": "529_53d9154a-15d9-408d-91ae-6a8e44380ea3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Catalan number.", "code": "def catalan(n): \n\tif n == 0: \n\t\treturn 1 \n\tcatalan_numbers = [0] * (n + 1) \n\tcatalan_numbers[0] = 1 \n\tfor i in range(1, n + 1): \n\t\tcatalan_numbers[i] = 0 \n\t\tfor j in range(i): \n\t\t\tcatalan_numbers[i] += catalan_numbers[j] * catalan_numbers[i - 1 - j] \n\treturn catalan_numbers[n]", "task_id": "529_9ee22b6a-9d20-4c78-9d00-f3ee99e1ab5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Padovan number.", "code": "def padovan(n): \n\tif n == 0 or n == 1 or n == 2: \n\t\treturn 1 \n\telse: \n\t\treturn padovan(n-2) + padovan(n-3)", "task_id": "529_c050de19-856a-4875-937b-163d6e5fcac1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Perrin number.", "code": "def perrin(n): \n\tif n == 0: \n\t\treturn 3 \n\telif n == 1: \n\t\treturn 0 \n\telif n == 2: \n\t\treturn 2 \n\telse: \n\t\treturn perrin(n-2) + perrin(n-3)", "task_id": "529_faa964d9-2e99-4830-9b03-b11ddc406d38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tetranacci number.", "code": "def tetranacci(n): \n\tif n == 0: \n\t\treturn 0 \n\telif n == 1 or n == 2: \n\t\treturn 0 \n\telif n == 3: \n\t\treturn 1 \n\telse: \n\t\treturn tetranacci(n-1) + tetranacci(n-2) + tetranacci(n-3) + tetranacci(n-4)", "task_id": "529_d7b4b54c-f217-4d90-840e-6375ead47665", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Narayana's cows number.", "code": "def narayana_cows(n): \n\tif n == 0 or n == 1 or n == 2: \n\t\treturn 1 \n\telse: \n\t\treturn narayana_cows(n-1) + narayana_cows(n-3)", "task_id": "529_d2ee3131-866d-4909-bf18-f2e358747f5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Motzkin number.", "code": "def motzkin(n): \n\tif n == 0: \n\t\treturn 1 \n\telif n == 1: \n\t\treturn 1 \n\telse: \n\t\tmotzkin_numbers = [0] * (n + 1) \n\t\tmotzkin_numbers[0] = 1 \n\t\tmotzkin_numbers[1] = 1 \n\t\tfor i in range(2, n + 1): \n\t\t\tmotzkin_numbers[i] = ((2 * i + 1) * motzkin_numbers[i - 1] + (3 * i - 3) * motzkin_numbers[i - 2]) // (i + 2) \n\t\treturn motzkin_numbers[n]", "task_id": "529_34184bca-bfcb-4720-a614-530cca01a28d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "532_d6ec486f-516b-498f-9bfc-3522d9aa93d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if one string is a rotation of another string.", "code": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1", "task_id": "532_f9ed1aa2-5fe7-453c-aef5-51e3594400cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "532_8ee4363b-fb24-4d66-ba09-c05be22ecc8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string has all unique characters.", "code": "def is_unique(s):\n    return len(s) == len(set(s))", "task_id": "532_cfb42866-05ef-4b6d-a195-dbca688a12b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "532_57fd3187-fd86-42d0-a41b-2bd2aaebe0e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "532_11e2dfc2-3d69-4c26-82d9-8ec2e61fd5df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeating character in a given string.", "code": "def first_non_repeating_char(s):\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return ''", "task_id": "532_12b5f5cb-6f1f-4017-a3a7-9e59bf21a581", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if one string is a substring of another string.", "code": "def is_substring(s1, s2):\n    return s1 in s2", "task_id": "532_bf4f20aa-bd6c-47d4-b773-8f32475db8e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s):\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "532_c7cda133-17fb-410c-a5f1-afde527a400c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any permutation of a given string is a palindrome.", "code": "def is_permutation_palindrome(s):\n    from collections import Counter\n    count = Counter(s)\n    odd_count = sum(1 for char in count if count[char] % 2 != 0)\n    return odd_count <= 1", "task_id": "532_a38e5253-14b0-4269-816e-24b83c798710", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that are greater than a specified threshold.", "code": "def remove_elements_greater_than(test_tuple, threshold):\n  res = [ele for ele in test_tuple if ele <= threshold]\n  return tuple(res)", "task_id": "533_622de6e3-4415-4f9c-ad40-20a6908fdd4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove strings from the given tuple that have a specific length.", "code": "def remove_strings_with_length(test_tuple, length):\n  res = [ele for ele in test_tuple if not (isinstance(ele, str) and len(ele) == length)]\n  return tuple(res)", "task_id": "533_42fcd681-7a4b-4903-8556-33214ceb90ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all negative numbers from the given tuple.", "code": "def remove_negative_numbers(test_tuple):\n  res = [ele for ele in test_tuple if not (isinstance(ele, (int, float)) and ele < 0)]\n  return tuple(res)", "task_id": "533_7fd65bba-5aee-486f-b121-f662a5735d49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that are strings starting with a specific character.", "code": "def remove_elements_starting_with(test_tuple, char):\n  res = [ele for ele in test_tuple if not (isinstance(ele, str) and ele.startswith(char))]\n  return tuple(res)", "task_id": "533_ed6c6702-ee85-4529-8f4f-e4d962ad3475", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that have a specific length.", "code": "def remove_elements_of_length(test_tuple, length):\n  res = [ele for ele in test_tuple if not (len(str(ele)) == length)]\n  return tuple(res)", "task_id": "533_10c3d902-c5a9-4743-b80d-5ce7cdc610a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that are strings containing a specific substring.", "code": "def remove_elements_containing_substring(test_tuple, substring):\n  res = [ele for ele in test_tuple if not (isinstance(ele, str) and substring in ele)]\n  return tuple(res)", "task_id": "533_7d9529fd-2b74-4d05-ba63-ba8fe30a934a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that are divisible by a specific number.", "code": "def remove_elements_divisible_by(test_tuple, divisor):\n  res = [ele for ele in test_tuple if not (isinstance(ele, int) and ele % divisor == 0)]\n  return tuple(res)", "task_id": "533_5dcd1605-5a26-4142-8961-95155fc3eee2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all float elements from the given tuple.", "code": "def remove_floats(test_tuple):\n  res = [ele for ele in test_tuple if not isinstance(ele, float)]\n  return tuple(res)", "task_id": "533_17c1c3cc-853d-4a95-9f92-cfeed52c9d97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that are strings ending with a specific character.", "code": "def remove_elements_ending_with(test_tuple, char):\n  res = [ele for ele in test_tuple if not (isinstance(ele, str) and ele.endswith(char))]\n  return tuple(res)", "task_id": "533_5adb03c3-c4e5-4f8d-9bca-f6ddd71b8edc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove elements from the given tuple that have an even length.", "code": "def remove_elements_with_even_length(test_tuple):\n  res = [ele for ele in test_tuple if not (len(str(ele)) % 2 == 0)]\n  return tuple(res)", "task_id": "533_66ae773a-3723-41b4-9e9d-964461f09fb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder given its radius and height.", "code": "def volume_of_cylinder(r, h):\n  volume = 3.1415 * r * r * h\n  return volume", "task_id": "535_cc84a9be-aec6-4ab2-8eb4-552b5c0ca376", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lateral surface area of a cylinder given its radius and height.", "code": "def lateral_surface_area_cylinder(r, h):\n  lateral_area = 2 * 3.1415 * r * h\n  return lateral_area", "task_id": "535_0595e5e4-c131-42d5-969c-d56cdc802df1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the total surface area of a cylinder given its radius and height.", "code": "def total_surface_area_cylinder(r, h):\n  total_area = 2 * 3.1415 * r * (r + h)\n  return total_area", "task_id": "535_88b1bea4-0aa9-42c4-a129-e8dc83e9c7d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "def circumference_of_circle(r):\n  circumference = 2 * 3.1415 * r\n  return circumference", "task_id": "535_6564ca68-1786-48b2-a1ba-720a34bed544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle given its length and width.", "code": "def area_of_rectangle(l, w):\n  area = l * w\n  return area", "task_id": "535_bf9f3d9d-5dc0-43fd-8fdb-fb5e07b72ab6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle given its length and width.", "code": "def perimeter_of_rectangle(l, w):\n  perimeter = 2 * (l + w)\n  return perimeter", "task_id": "535_06f98a6a-9f19-4a8e-b08f-94a7fb98aae0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_of_triangle(b, h):\n  area = 0.5 * b * h\n  return area", "task_id": "535_1a188698-6df1-48f1-8e4d-de29b504a802", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere given its radius.", "code": "def volume_of_sphere(r):\n  volume = (4/3) * 3.1415 * r**3\n  return volume", "task_id": "535_05c460b8-2197-4015-bc65-f6082beb5824", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere given its radius.", "code": "def surface_area_of_sphere(r):\n  surface_area = 4 * 3.1415 * r**2\n  return surface_area", "task_id": "535_2e847166-7923-46d0-a6d7-e99ba02716a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone given its radius and height.", "code": "def volume_of_cone(r, h):\n  volume = (1/3) * 3.1415 * r**2 * h\n  return volume", "task_id": "535_841c772e-4efe-4bc9-9a6d-6d1a25711874", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of all starting indices of a substring in a given string.", "code": "def find_substring_indices(s, sub):\n    indices = []\n    i = s.find(sub)\n    while i != -1:\n        indices.append(i)\n        i = s.find(sub, i + 1)\n    return indices", "task_id": "534_a6689dd6-44bd-404f-ac95-d73e7d1b5a07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that counts the number of times a substring occurs in a given string.", "code": "def count_substring_occurrences(s, sub):\n    count = 0\n    i = s.find(sub)\n    while i != -1:\n        count += 1\n        i = s.find(sub, i + 1)\n    return count", "task_id": "534_628e2e6e-6945-42f6-97bd-30ab87b45ca0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that replaces all occurrences of a substring with another substring in a given string.", "code": "def replace_substring(s, old, new):\n    return s.replace(old, new)", "task_id": "534_0091f691-88f0-47cc-bc52-f00fb469d18d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that checks if a given substring is a palindrome within a string.", "code": "def is_substring_palindrome(s, sub):\n    i = s.find(sub)\n    if i != -1:\n        return sub == sub[::-1]\n    return False", "task_id": "534_625bb9e5-850d-4cea-91ab-381af9dc03ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds the longest word in a given string.", "code": "def find_longest_word(s):\n    words = s.split()\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest", "task_id": "534_4b4cd709-2e61-4a75-9445-2b4726db2418", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that reverses the order of words in a given string.", "code": "def reverse_words(s):\n    words = s.split()\n    return ' '.join(words[::-1])", "task_id": "534_41b2325f-7add-473b-8e69-b76286482d09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds all unique words in a given string.", "code": "def find_unique_words(s):\n    words = s.split()\n    return set(words)", "task_id": "534_6b160f8d-a4f8-4bec-acb6-32eda0250230", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that capitalizes the first letter of each word in a given string.", "code": "def capitalize_words(s):\n    words = s.split()\n    return ' '.join(word.capitalize() for word in words)", "task_id": "534_103a3b44-85e2-45a8-b6e6-d3e62ca7f3f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that finds the most frequent word in a given string.", "code": "def find_most_frequent_word(s):\n    words = s.split()\n    frequency = {}\n    for word in words:\n        if word in frequency:\n            frequency[word] += 1\n        else:\n            frequency[word] = 1\n    most_frequent = max(frequency, key=frequency.get)\n    return most_frequent", "task_id": "534_96342448-5dc0-479a-8e82-61cda960691b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that removes all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "534_2fcb736b-1fa6-47e5-a152-512b9644f9f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of coins that make a given value.", "code": "def max_coins(coins, m, V): \n    if V == 0: \n        return 0 \n    res = -1 \n    for i in range(m): \n        if coins[i] <= V: \n            sub_res = max_coins(coins, m, V - coins[i]) \n            if sub_res != -1 and sub_res + 1 > res: \n                res = sub_res + 1 \n    return res", "task_id": "531_e139eabc-9e29-46e9-9873-78be833c1a66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but you can use each coin at most 'limit' times.", "code": "def min_coins_with_limit(coins, m, V, limit): \n    if V == 0: \n        return 0 \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V and limit > 0: \n            sub_res = min_coins_with_limit(coins, m, V - coins[i], limit - 1) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_2d687913-944f-49b1-aebb-2d4ac027d21a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but you cannot use the coins listed in 'exclude'.", "code": "def min_coins_with_exclusion(coins, m, V, exclude): \n    if V == 0: \n        return 0 \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V and coins[i] not in exclude: \n            sub_res = min_coins_with_exclusion(coins, m, V - coins[i], exclude) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_3be77868-5648-420e-a6ca-a9b46b8668f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but the total number of coins used must be exactly 'target'.", "code": "def min_coins_with_target(coins, m, V, target): \n    if V == 0 and target == 0: \n        return 0 \n    if target == 0: \n        return float('inf') \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V: \n            sub_res = min_coins_with_target(coins, m, V - coins[i], target - 1) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_09c00307-8ed4-4950-b025-7ae045c3be4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but no single coin can exceed 'max_value'.", "code": "def min_coins_with_max_value(coins, m, V, max_value): \n    if V == 0: \n        return 0 \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V and coins[i] <= max_value: \n            sub_res = min_coins_with_max_value(coins, m, V - coins[i], max_value) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_89c71aa7-a86e-4a20-8cfe-7733202e2b38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but no single coin can be less than 'min_value'.", "code": "def min_coins_with_min_value(coins, m, V, min_value): \n    if V == 0: \n        return 0 \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V and coins[i] >= min_value: \n            sub_res = min_coins_with_min_value(coins, m, V - coins[i], min_value) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_a2d1cb8c-e1b6-4418-b1fe-a90b856d8185", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but the total value of coins used must be exactly 'exact_value'.", "code": "def min_coins_with_exact_value(coins, m, V, exact_value): \n    if V == exact_value: \n        return 0 \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V: \n            sub_res = min_coins_with_exact_value(coins, m, V - coins[i], exact_value) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_33557a5c-30f8-45f4-a431-04fd2acef466", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make each value in a list of given values.", "code": "def min_coins_with_multiple_values(coins, m, V): \n    def min_coins(coins, m, V): \n        if V == 0: \n            return 0 \n        res = float('inf') \n        for i in range(m): \n            if coins[i] <= V: \n                sub_res = min_coins(coins, m, V - coins[i]) \n                if sub_res != float('inf') and sub_res + 1 < res: \n                    res = sub_res + 1 \n        return res \n    return [min_coins(coins, m, v) for v in V]", "task_id": "531_52000ce2-1dd7-4666-aedc-ec26b6c38fd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but you can use at most 'denomination_limit' different denominations of coins.", "code": "def min_coins_with_denomination_limit(coins, m, V, denomination_limit): \n    if V == 0: \n        return 0 \n    if denomination_limit == 0: \n        return float('inf') \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V: \n            sub_res = min_coins_with_denomination_limit(coins, m, V - coins[i], denomination_limit - 1) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_0575d08e-ea2d-49c3-92fd-d8f649c2cb8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, but you can use at most 'max_denomination' different denominations of coins.", "code": "def min_coins_with_max_denomination(coins, m, V, max_denomination): \n    if V == 0: \n        return 0 \n    if max_denomination == 0: \n        return float('inf') \n    res = float('inf') \n    for i in range(m): \n        if coins[i] <= V: \n            sub_res = min_coins_with_max_denomination(coins, m, V - coins[i], max_denomination - 1) \n            if sub_res != float('inf') and sub_res + 1 < res: \n                res = sub_res + 1 \n    return res", "task_id": "531_af056bb0-e686-47d1-b5b3-e79b619ef153", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the nth items of a list.", "code": "def sum_of_nth_items(lst, n):\n    return sum(lst[::n])", "task_id": "536_d055d57c-2c54-4296-ae0b-72bc3cd816f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list but in reverse order.", "code": "def nth_items_reversed(lst, n):\n    return lst[::-n]", "task_id": "536_f4bc12e2-87a5-4fd0-b821-5e0264c47599", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list and return their squares.", "code": "def nth_items_squared(lst, n):\n    return [x**2 for x in lst[::n]]", "task_id": "536_6b27cdf2-eadc-4ba6-9506-0553c9004306", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list and return their cubes.", "code": "def nth_items_cubed(lst, n):\n    return [x**3 for x in lst[::n]]", "task_id": "536_ea594b0a-24aa-42f7-8a9a-1f975bd832e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list and convert them to strings.", "code": "def nth_items_strings(lst, n):\n    return [str(x) for x in lst[::n]]", "task_id": "536_6b36845a-08b1-48f9-b1a1-9a8214345ce4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the number of nth items in a list.", "code": "def nth_items_length(lst, n):\n    return len(lst[::n])", "task_id": "536_97f7bbe0-19ef-41e5-84e2-a605054e946f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of the squares of the nth items of a list.", "code": "def nth_items_sum_of_squares(lst, n):\n    return sum(x**2 for x in lst[::n])", "task_id": "536_5ccdc9ce-23ec-4af3-8664-7d19d95bee2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the product of the nth items of a list.", "code": "def nth_items_product(lst, n):\n    from functools import reduce\n    import operator\n    return reduce(operator.mul, lst[::n], 1)", "task_id": "536_4d9a0577-5720-47c1-b4dd-8ade523f6ca8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list and return only the even ones.", "code": "def nth_items_even(lst, n):\n    return [x for x in lst[::n] if x % 2 == 0]", "task_id": "536_a87a43a3-6c0c-4d3f-adae-79bbcd515fa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to select the nth items of a list and return only the odd ones.", "code": "def nth_items_odd(lst, n):\n    return [x for x in lst[::n] if x % 2 != 0]", "task_id": "536_fce67e89-f625-4ca7-90f6-5838b604c226", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse each string in a given list of strings.", "code": "def reverse_string_list(str_list):\n    return [s[::-1] for s in str_list]", "task_id": "538_eb51dcf0-66f5-4028-bb27-f99bf83038d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize each string in a given list of strings.", "code": "def capitalize_string_list(str_list):\n    return [s.capitalize() for s in str_list]", "task_id": "538_ea526d18-033f-4dfb-9556-1bc53e8ab1fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to filter out strings that contain a specific character from a given list of strings.", "code": "def filter_string_list(str_list, char):\n    return [s for s in str_list if char not in s]", "task_id": "538_b7070bd4-353d-4fe3-b6ae-2a9b24967448", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of the lengths of each string in a given list of strings.", "code": "def string_lengths(str_list):\n    return [len(s) for s in str_list]", "task_id": "538_6d1c6bfe-b181-4f16-bec3-27edc8642936", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to concatenate all strings in a given list of strings into a single string.", "code": "def concatenate_string_list(str_list):\n    return ''.join(str_list)", "task_id": "538_f1ad7d07-62f7-446f-86e5-18aed305c988", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert all strings in a given list of strings to uppercase.", "code": "def string_list_to_upper(str_list):\n    return [s.upper() for s in str_list]", "task_id": "538_bd31e2ee-5e56-4383-9cdf-9d05a692bdbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert all strings in a given list of strings to lowercase.", "code": "def string_list_to_lower(str_list):\n    return [s.lower() for s in str_list]", "task_id": "538_473213f3-9634-4595-a49d-11577b1b7ee0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of strings from a given list that contain a specific substring.", "code": "def string_list_contains_substring(str_list, substring):\n    return [s for s in str_list if substring in s]", "task_id": "538_572f413c-e06a-4f09-bd0c-32eb26004133", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a given list of strings to a tuple of their lengths.", "code": "def string_list_to_lengths_tuple(str_list):\n    return tuple(len(s) for s in str_list)", "task_id": "538_54e6e53c-d456-4acd-81b8-12e7bfacf728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a given list of strings to a set of unique strings.", "code": "def string_list_to_set(str_list):\n    return set(str_list)", "task_id": "538_8fd11f7f-ac02-4b73-9bbb-f3ef624c3249", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the squares of each element in the input list using map function.", "code": "def squares_of_elements(nums):\n  result = list(map(lambda x: x**2, nums))\n  return result", "task_id": "539_1d73a676-ee4d-40ac-bfcc-859c4733ff18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the sum of corresponding elements from two input lists using map function.", "code": "def add_corresponding_elements(list1, list2):\n  result = list(map(lambda x, y: x + y, list1, list2))\n  return result", "task_id": "539_84801dc5-c385-45df-bdb9-f60de4419847", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the product of corresponding elements from two input lists using map function.", "code": "def multiply_corresponding_elements(list1, list2):\n  result = list(map(lambda x, y: x * y, list1, list2))\n  return result", "task_id": "539_52f0f15d-ecb3-4fe4-9ea5-5c61f8e01cda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the uppercase version of each string in the input list using map function.", "code": "def convert_to_uppercase(strings):\n  result = list(map(str.upper, strings))\n  return result", "task_id": "539_57032632-e9db-46de-b820-d95256f0e13d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the lengths of each string in the input list using map function.", "code": "def lengths_of_strings(strings):\n  result = list(map(len, strings))\n  return result", "task_id": "539_c6130c17-5de7-412d-81a6-fcc379e01e8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing each element of the input list incremented by 1 using map function.", "code": "def increment_elements(nums):\n  result = list(map(lambda x: x + 1, nums))\n  return result", "task_id": "539_afa5fba4-6899-4f82-99a5-d82df55d6fd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing each string in the input list concatenated with a given suffix using map function.", "code": "def concatenate_strings(strings, suffix):\n  result = list(map(lambda s: s + suffix, strings))\n  return result", "task_id": "539_3ce4c833-4d15-44ed-b5ec-6e0d62da963a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing the absolute values of each element in the input list using map function.", "code": "def absolute_values(nums):\n  result = list(map(abs, nums))\n  return result", "task_id": "539_ae55f6ce-4a1a-43d6-a2d7-8146d87c4610", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing each string in the input list reversed using map function.", "code": "def reverse_strings(strings):\n  result = list(map(lambda s: s[::-1], strings))\n  return result", "task_id": "539_f8ccd441-0343-48f3-91df-fca7cafe5112", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list containing only the even numbers from the input list using filter function.", "code": "def filter_even_numbers(nums):\n  result = list(filter(lambda x: x % 2 == 0, nums))\n  return result", "task_id": "539_52377179-b537-4a6a-b1c5-1ee87228849d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_non_repeated_word(s: str) -> str:\n    words = s.split()\n    word_count = {}\n    for word in words:\n        word_count[word] = word_count.get(word, 0) + 1\n    for word in words:\n        if word_count[word] == 1:\n            return word\n    return 'None'", "task_id": "537_f61d6d4d-34d8-48d0-8294-6bbe4647a21c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated character in a given string.", "code": "def first_repeated_char(s: str) -> str:\n    temp = set()\n    for char in s:\n        if char in temp:\n            return char\n        else:\n            temp.add(char)\n    return 'None'", "task_id": "537_ef973b73-b03e-4008-8f25-0e9d5415c46f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_non_repeated_char(s: str) -> str:\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return 'None'", "task_id": "537_5f49e372-9b99-450e-ae95-bd82889ec5e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string, ignoring case.", "code": "def first_repeated_word_ignore_case(s: str) -> str:\n    temp = set()\n    for word in s.lower().split():\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'", "task_id": "537_d4c36ea8-9e10-4e41-8be7-a7cc140d8360", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string, considering punctuation.", "code": "import string\n\ndef first_repeated_word_with_punctuation(s: str) -> str:\n    temp = set()\n    words = s.translate(str.maketrans('', '', string.punctuation)).split()\n    for word in words:\n        if word in temp:\n            return word\n        else:\n            temp.add(word)\n    return 'None'", "task_id": "537_b35ac044-35ae-4051-b1ca-707c34a34397", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string that has a minimum length.", "code": "def first_repeated_word_with_min_length(s: str, min_length: int) -> str:\n    temp = set()\n    for word in s.split():\n        if len(word) >= min_length:\n            if word in temp:\n                return word\n            else:\n                temp.add(word)\n    return 'None'", "task_id": "537_ae58d8b9-e20d-4705-ba52-c231387a5ba8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string that has a maximum length.", "code": "def first_repeated_word_with_max_length(s: str, max_length: int) -> str:\n    temp = set()\n    for word in s.split():\n        if len(word) <= max_length:\n            if word in temp:\n                return word\n            else:\n                temp.add(word)\n    return 'None'", "task_id": "537_8035c1d9-d4fd-4466-904c-9f2d30a64d3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string that has an exact length.", "code": "def first_repeated_word_with_exact_length(s: str, exact_length: int) -> str:\n    temp = set()\n    for word in s.split():\n        if len(word) == exact_length:\n            if word in temp:\n                return word\n            else:\n                temp.add(word)\n    return 'None'", "task_id": "537_9064ec65-ac29-411a-a8ab-88292c90ea7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string that starts with a given prefix.", "code": "def first_repeated_word_with_prefix(s: str, prefix: str) -> str:\n    temp = set()\n    for word in s.split():\n        if word.startswith(prefix):\n            if word in temp:\n                return word\n            else:\n                temp.add(word)\n    return 'None'", "task_id": "537_0673cc78-d730-4e2d-968a-7a0d4a5cc3ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string that ends with a given suffix.", "code": "def first_repeated_word_with_suffix(s: str, suffix: str) -> str:\n    temp = set()\n    for word in s.split():\n        if word.endswith(suffix):\n            if word in temp:\n                return word\n            else:\n                temp.add(word)\n    return 'None'", "task_id": "537_106e0e12-34f9-4672-b7aa-d80fdc9c330a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the maximum and minimum values in a given array.", "code": "def find_max_min_sum(arr):\n    return max(arr) + min(arr)", "task_id": "540_43c2ec92-82e5-4fe3-936f-d9fb47e9e084", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest number in a given array.", "code": "def find_second_largest(arr):\n    unique_arr = list(set(arr))\n    unique_arr.sort()\n    return unique_arr[-2]", "task_id": "540_a64c4670-d097-4b8c-a980-cafc1210172c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the most frequent number in a given array.", "code": "def find_most_frequent(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return count.most_common(1)[0][0]", "task_id": "540_9550a638-3ff1-4c5e-b403-3173be8ea26c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all unique elements in a given array.", "code": "def find_unique_elements(arr):\n    from collections import Counter\n    count = Counter(arr)\n    return [x for x in count if count[x] == 1]", "task_id": "540_0e8dbf09-8c98-4f3e-aa4c-12a088a5c296", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr, n):\n    return sum(range(1, n+1)) - sum(arr)", "task_id": "540_4b13c70e-deaf-4b04-b2d9-e3caa38cd494", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair of numbers in a given array that add up to a target sum.", "code": "def find_pair_with_sum(arr, target):\n    seen = {}\n    for num in arr:\n        if target - num in seen:\n            return (target - num, num)\n        seen[num] = True\n    return ()", "task_id": "540_bebb3ab1-2b92-4f73-8953-1b01ecc69268", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest subarray with all elements equal in a given array.", "code": "def find_longest_subarray(arr):\n    max_len = 0\n    max_elem = None\n    current_len = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1]:\n            current_len += 1\n        else:\n            if current_len > max_len:\n                max_len = current_len\n                max_elem = arr[i-1]\n            current_len = 1\n    if current_len > max_len:\n        max_len = current_len\n        max_elem = arr[-1]\n    return [max_elem] * max_len", "task_id": "540_8b079867-380d-48ac-b105-cc866400723b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated element in a given array.", "code": "def find_first_repeated(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "540_8fd704ec-e3c9-4886-a418-846718549b82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the k-th largest element in a given array.", "code": "def find_kth_largest(arr, k):\n    arr.sort(reverse=True)\n    return arr[k-1]", "task_id": "540_2c117179-4e41-4029-bca3-c77275d384a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the element with the highest sum of digits in a given array.", "code": "def find_element_with_highest_sum_of_digits(arr):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n    return max(arr, key=sum_of_digits)", "task_id": "540_400079bf-82e0-4ed0-8014-d44c25cf6703", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect square.", "code": "import math\ndef is_perfect_square(n: int) -> bool:\n    if n < 0:\n        return False\n    root = int(math.sqrt(n))\n    return root * root == n", "task_id": "541_8db9dbbd-801d-4c85-a363-519fc87d4b59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "541_30f5fcf7-501f-4b5d-b877-11e0048d86dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a Fibonacci number.", "code": "import math\ndef is_fibonacci(n: int) -> bool:\n    def is_perfect_square(x):\n        s = int(math.sqrt(x))\n        return s * s == x\n    return is_perfect_square(5 * n * n + 4) or is_perfect_square(5 * n * n - 4)", "task_id": "541_00aded48-07c7-4fdb-bf67-598d44dfd464", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a happy number.", "code": "def is_happy_number(n: int) -> bool:\n    def get_next(number):\n        return sum(int(char) ** 2 for char in str(number))\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_next(n)\n    return n == 1", "task_id": "541_2c1840bd-0f5b-4cfe-a8bf-0e2fd0da79c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is an Armstrong number.", "code": "def is_armstrong_number(n: int) -> bool:\n    num_str = str(n)\n    power = len(num_str)\n    return n == sum(int(digit) ** power for digit in num_str)", "task_id": "541_c7f14335-8677-495f-b218-81c07a857039", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    num_str = str(n)\n    return num_str == num_str[::-1]", "task_id": "541_37b8522c-f47a-44e0-adc4-3870b6f03176", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect number.", "code": "def is_perfect_number(n: int) -> bool:\n    if n < 2:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors == n", "task_id": "541_51c9c6d8-82ee-4dac-8ef7-7441cce2ca8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a deficient number.", "code": "def is_deficient(n: int) -> bool:\n    if n < 1:\n        return False\n    sum_divisors = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum_divisors += i\n    return sum_divisors < n", "task_id": "541_b7b1d0c3-ead4-45b5-8aed-9dfa142b6ea2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a Harshad number.", "code": "def is_harshad_number(n: int) -> bool:\n    if n == 0:\n        return False\n    digit_sum = sum(int(digit) for digit in str(n))\n    return n % digit_sum == 0", "task_id": "541_91070587-da5c-46c0-9995-9e388bf1f2e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a narcissistic number.", "code": "def is_narcissistic(n: int) -> bool:\n    num_str = str(n)\n    power = len(num_str)\n    return n == sum(int(digit) ** power for digit in num_str)", "task_id": "541_3d1e0749-b9a3-45b7-82ed-99df2826ec8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of vowels (a, e, i, o, u) with a dash in the given string by using regex.", "code": "import re\ndef replace_vowels(text):\n  return re.sub('[aeiouAEIOU]', '-', text)", "task_id": "542_624addf0-8029-41e7-9b9c-5c24ea9dce06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of digits with a hash symbol in the given string by using regex.", "code": "import re\ndef replace_digits(text):\n  return re.sub('\\d', '#', text)", "task_id": "542_4be2c36c-e729-44dc-9bf1-02b536e60cac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of special characters (anything that is not a letter or digit) with an underscore in the given string by using regex.", "code": "import re\ndef replace_special_chars(text):\n  return re.sub('[^a-zA-Z0-9]', '_', text)", "task_id": "542_02e1685d-d5f8-4cf2-8ece-67c3edc5a533", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of consonants with an asterisk in the given string by using regex.", "code": "import re\ndef replace_consonants(text):\n  return re.sub('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', '*', text)", "task_id": "542_c02022db-4943-4f49-8ffa-d2e795f21c29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of uppercase letters with a lowercase letter 'x' in the given string by using regex.", "code": "import re\ndef replace_uppercase(text):\n  return re.sub('[A-Z]', 'x', text)", "task_id": "542_143bde54-f61b-4f5e-a38a-a263fa3261b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of lowercase letters with an uppercase letter 'Y' in the given string by using regex.", "code": "import re\ndef replace_lowercase(text):\n  return re.sub('[a-z]', 'Y', text)", "task_id": "542_f6bc8ccf-c5f3-4053-a9f1-96dab71d94e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of whitespace characters (spaces, tabs, newlines) with a plus sign in the given string by using regex.", "code": "import re\ndef replace_whitespace(text):\n  return re.sub('\\s', '+', text)", "task_id": "542_18db5e95-169f-4a67-9845-00950de9ecac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of non-alphanumeric characters (anything that is not a letter or digit) with a tilde in the given string by using regex.", "code": "import re\ndef replace_non_alphanumeric(text):\n  return re.sub('[^a-zA-Z0-9]', '~', text)", "task_id": "542_ad4912f4-438c-45e6-a526-738ed07381b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of hexadecimal digits (0-9, a-f, A-F) with a percent sign in the given string by using regex.", "code": "import re\ndef replace_hex_digits(text):\n  return re.sub('[0-9a-fA-F]', '%', text)", "task_id": "542_cc7cb0cb-868d-4cbc-ab20-9734a189dc90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of non-vowel characters with a caret symbol in the given string by using regex.", "code": "import re\ndef replace_non_vowels(text):\n  return re.sub('[^aeiouAEIOU]', '^', text)", "task_id": "542_dd0d6a05-9af8-491c-af0a-d1cee0edf288", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of even digits in the sum.", "code": "def add_and_count_even_digits(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit % 2 == 0:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_f7451f57-db77-4da9-b1fe-a15ec6c2a9a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of odd digits in the sum.", "code": "def add_and_count_odd_digits(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit % 2 != 0:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_fd429a8a-47ac-4606-bed3-fee937b4ea40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of prime digits in the sum.", "code": "def add_and_count_prime_digits(num1, num2):\n    def is_prime(digit):\n        if digit < 2:\n            return False\n        for i in range(2, digit):\n            if digit % i == 0:\n                return False\n        return True\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if is_prime(digit):\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_982c000d-522e-4130-8e8a-e806cdf3914c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of zero digits in the sum.", "code": "def add_and_count_zeros(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit == 0:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_70bcaffc-5932-49ba-95a3-7dd068829406", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of vowel digits (1, 3, 5, 7, 9) in the sum.", "code": "def add_and_count_vowels(num1, num2):\n    vowels = {1, 3, 5, 7, 9}\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit in vowels:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_95b88bdc-9d0f-434f-8514-713cb9c98f4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of consonant digits (2, 4, 6, 8) in the sum.", "code": "def add_and_count_consonants(num1, num2):\n    consonants = {2, 4, 6, 8}\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit in consonants:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_692d51d1-ecec-478a-a728-720948807361", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of non-zero digits in the sum.", "code": "def add_and_count_nonzero_digits(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit != 0:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_937e6342-3fca-4003-9642-08835d0c0897", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of digits divisible by 3 in the sum.", "code": "def add_and_count_divisible_by_three(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit % 3 == 0:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_0326b1e7-3e46-4321-9e89-5b39ff426146", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of digits greater than 5 in the sum.", "code": "def add_and_count_greater_than_five(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit > 5:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_ff8c3f53-7f00-4bfc-8082-4585888eaab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two numbers and return the number of digits less than 5 in the sum.", "code": "def add_and_count_less_than_five(num1, num2):\n    number = num1 + num2\n    count = 0\n    while number > 0:\n        digit = number % 10\n        if digit < 5:\n            count += 1\n        number = number // 10\n    return count", "task_id": "543_043e1320-4de5-463c-93f9-8bad94d98de5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all the integers in a list of tuples.", "code": "def sum_of_tuples(test_list):\n  return sum([x + y for x, y in test_list])", "task_id": "544_956b66a2-3084-4ec1-8fff-c6d2100354b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all the strings in a list of string tuples.", "code": "def concatenate_tuple_strings(test_list):\n  return ''.join([x + y for x, y in test_list])", "task_id": "544_2e649dc3-83af-459b-85ef-e4588b6b23aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum integer in a list of tuples.", "code": "def max_in_tuples(test_list):\n  return max([max(x, y) for x, y in test_list])", "task_id": "544_dab57eaa-11b3-47b4-ba57-b6c2970e7449", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of the lengths of the concatenated strings in each tuple.", "code": "def tuple_lengths(test_list):\n  return [len(x + y) for x, y in test_list]", "task_id": "544_020a0687-aa83-4fd0-be61-a0ebf6281b8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out tuples where the sum of the integers is even.", "code": "def filter_even_sum_tuples(test_list):\n  return [tup for tup in test_list if (tup[0] + tup[1]) % 2 != 0]", "task_id": "544_ff4bc021-31e9-4333-9eb8-9e83b43814c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of elements in each tuple in the list.", "code": "def reverse_tuple_elements(test_list):\n  return [(y, x) for x, y in test_list]", "task_id": "544_9a3d92a0-dd36-4a47-8cfa-95616d914437", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the product of all integers in a list of tuples.", "code": "def tuple_product(test_list):\n  product = 1\n  for x, y in test_list:\n    product *= x * y\n  return product", "task_id": "544_8d21b2a0-2170-4d59-a69f-a19e14a60bf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples to a dictionary.", "code": "def tuple_to_dict(test_list):\n  return {x: y for x, y in test_list}", "task_id": "544_d5baa547-ef1e-48b2-8336-6c272bc953ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a list of string tuples to a single string and convert it to uppercase.", "code": "def flatten_and_uppercase(test_list):\n  return ' '.join([x + y for x, y in test_list]).upper()", "task_id": "544_65ca9d2d-ad1b-49d7-a526-2418ff7d130c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the average of all integers in a list of tuples.", "code": "def tuple_average(test_list):\n  total_sum = sum([x + y for x, y in test_list])\n  total_count = len(test_list) * 2\n  return total_sum / total_count", "task_id": "544_14660643-ac49-48d1-9be9-c901c86af8ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any vowel in a string.", "code": "def find_last_vowel(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i] in vowels:\n            last_pos = i\n    return last_pos", "task_id": "546_43f54f94-a82c-412a-9238-f2066ab2ffe8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a word in a string.", "code": "def find_last_word(s: str, word: str) -> int:\n    last_pos = s.rfind(word)\n    return last_pos", "task_id": "546_62715986-8d5a-4591-863e-5829a69587e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any digit in a string.", "code": "def find_last_digit(s: str) -> int:\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i].isdigit():\n            last_pos = i\n    return last_pos", "task_id": "546_d9eed64c-ed69-474b-81c7-b74b31a6c7ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any uppercase letter in a string.", "code": "def find_last_uppercase(s: str) -> int:\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i].isupper():\n            last_pos = i\n    return last_pos", "task_id": "546_834f963a-2fa5-44dd-9c54-3ae9b75433a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a substring in a string.", "code": "def find_last_substring(s: str, sub: str) -> int:\n    last_pos = s.rfind(sub)\n    return last_pos", "task_id": "546_a6a18541-b882-4b7c-91b1-7b68b0b8649a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any non-alphanumeric character in a string.", "code": "def find_last_non_alphanumeric(s: str) -> int:\n    last_pos = -1\n    for i in range(len(s)):\n        if not s[i].isalnum():\n            last_pos = i\n    return last_pos", "task_id": "546_cd992658-0420-4c35-86f7-5bc7a089fca4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a space in a string.", "code": "def find_last_space(s: str) -> int:\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i] == ' ':\n            last_pos = i\n    return last_pos", "task_id": "546_52734459-1bd1-4043-a940-75e39de6cc74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any consonant in a string.", "code": "def find_last_consonant(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i].isalpha() and s[i] not in vowels:\n            last_pos = i\n    return last_pos", "task_id": "546_35dcc533-3368-4499-8955-5e14aa6fb229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any punctuation mark in a string.", "code": "import string\n\ndef find_last_punctuation(s: str) -> int:\n    punctuation = string.punctuation\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i] in punctuation:\n            last_pos = i\n    return last_pos", "task_id": "546_592584bf-5e54-4a7b-8ee6-ea4d0aacf884", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of any lowercase letter in a string.", "code": "def find_last_lowercase(s: str) -> int:\n    last_pos = -1\n    for i in range(len(s)):\n        if s[i].islower():\n            last_pos = i\n    return last_pos", "task_id": "546_8874076c-fdf4-49c7-a7d5-85ed20527de4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle only the first and last bits of a given number.", "code": "def toggle_first_and_last_bits(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    first_bit_mask = 1 << (bit_length - 1)\n    last_bit_mask = 1\n    return n ^ (first_bit_mask | last_bit_mask)", "task_id": "545_1b7547cc-2484-469f-a56f-a692f527e986", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle only the second and penultimate bits of a given number.", "code": "def toggle_second_and_penultimate_bits(n: int) -> int:\n    if n == 0:\n        return 2\n    bit_length = n.bit_length()\n    second_bit_mask = 1 << (bit_length - 2)\n    penultimate_bit_mask = 1 << 1\n    return n ^ (second_bit_mask | penultimate_bit_mask)", "task_id": "545_b9ea1dc7-78fa-4196-9d78-82a798e1140f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle only the middle bit of a given number. If the number has an even number of bits, toggle the lower middle bit.", "code": "def toggle_middle_bit(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    middle_bit_mask = 1 << (bit_length // 2)\n    return n ^ middle_bit_mask", "task_id": "545_b47f677e-d2e0-4bbc-985c-e0297972f768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number except the first and last bits.", "code": "def toggle_all_bits_except_first_and_last(n: int) -> int:\n    if n == 0:\n        return 1\n    bit_length = n.bit_length()\n    first_bit_mask = 1 << (bit_length - 1)\n    last_bit_mask = 1\n    all_bits_mask = (1 << bit_length) - 1\n    return n ^ (all_bits_mask ^ (first_bit_mask | last_bit_mask))", "task_id": "545_7ad6d4d7-6274-4957-ada8-8e589fd00502", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number in a specified range [start, end].", "code": "def toggle_bits_in_range(n: int, start: int, end: int) -> int:\n    if start > end or start < 0 or end >= n.bit_length():\n        return n\n    mask = ((1 << (end - start + 1)) - 1) << start\n    return n ^ mask", "task_id": "545_0c67ef19-0bce-4c80-8213-fa4e9757df23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits at even positions of a given number.", "code": "def toggle_even_position_bits(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 2):\n        mask |= (1 << i)\n    return n ^ mask", "task_id": "545_53df8d7c-8d88-425f-ac8d-0ada706c7138", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits at odd positions of a given number.", "code": "def toggle_odd_position_bits(n: int) -> int:\n    mask = 0\n    for i in range(1, n.bit_length(), 2):\n        mask |= (1 << i)\n    return n ^ mask", "task_id": "545_f129d383-1eb1-4373-bbc7-d7be179b4e17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are at positions divisible by three.", "code": "def toggle_bits_divisible_by_three(n: int) -> int:\n    mask = 0\n    for i in range(0, n.bit_length(), 3):\n        mask |= (1 << i)\n    return n ^ mask", "task_id": "545_d65cb290-71b7-4449-a49d-254771fd50c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a given number that are not at positions divisible by three.", "code": "def toggle_bits_not_divisible_by_three(n: int) -> int:\n    mask = 0\n    for i in range(n.bit_length()):\n        if i % 3 != 0:\n            mask |= (1 << i)\n    return n ^ mask", "task_id": "545_f9a92d40-b900-40b8-a120-3904361666ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle bits of a given number in an alternating pattern (e.g., toggle every other bit).", "code": "def toggle_bits_in_alternating_pattern(n: int) -> int:\n    mask = 0\n    for i in range(n.bit_length()):\n        if i % 2 == 0:\n            mask |= (1 << i)\n    return n ^ mask", "task_id": "545_5d3e4d8b-9b6e-4912-9cdd-57daf85718b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all numbers from 1 to n.", "code": "def sum_of_squares(n: int) -> int:\n    return sum(i**2 for i in range(1, n+1))", "task_id": "547_2b589050-f20c-4fe4-a360-74bcb57f7d22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "547_017efa08-4150-4b0b-b827-8f0885a5c868", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a given number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n-1)", "task_id": "547_f7abe630-1574-4762-9b92-03c2d935cbff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "547_6cb0b42e-b5b9-4fba-bd14-0145232070f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)", "task_id": "547_54de5c4b-f207-4f9f-89a8-878a058396ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "547_71220344-b3f3-4cb7-9f43-c7d50b0e8433", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "547_38a29f24-fd1f-419a-b1d5-1c2f6964a0b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a given character in a string.", "code": "def count_occurrences(s: str, char: str) -> int:\n    return s.count(char)", "task_id": "547_c84c41a4-17af-4e14-99d1-a296af99b71c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "547_89a21a9c-cf8d-45cc-a1cd-1097e806e231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "547_76e61545-0fe1-4beb-9eed-e21f18560e30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the fourth power of the first n even natural numbers.", "code": "def even_Num_Sum(n: int) -> int:\n    sm = 0\n    for i in range(1, n+1):\n        j = 2 * i\n        sm += j ** 4\n    return sm", "task_id": "549_13657069-50e8-4228-bac2-269b9794ee4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the first n natural numbers.", "code": "def square_Num_Sum(n: int) -> int:\n    sm = 0\n    for i in range(1, n+1):\n        sm += i ** 2\n    return sm", "task_id": "549_c4eec2f4-c01b-4a30-ba96-58f0deca20c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of the first n natural numbers.", "code": "def cube_Num_Sum(n: int) -> int:\n    sm = 0\n    for i in range(1, n+1):\n        sm += i ** 3\n    return sm", "task_id": "549_9171772f-2451-44c2-bf00-698e90a6153a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "def factorial_Sum(n: int) -> int:\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    sm = 0\n    for i in range(1, n+1):\n        sm += factorial(i)\n    return sm", "task_id": "549_72592e39-dda8-499c-ba49-03691f4a89f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def fibonacci_Sum(n: int) -> int:\n    a, b = 0, 1\n    sm = 0\n    for _ in range(n):\n        sm += a\n        a, b = b, a + b\n    return sm", "task_id": "549_1694e658-89c3-4bd0-b943-706bb259d39d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n prime numbers.", "code": "def prime_Sum(n: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    count, num, sm = 0, 2, 0\n    while count < n:\n        if is_prime(num):\n            sm += num\n            count += 1\n        num += 1\n    return sm", "task_id": "549_a027c5e7-14dd-4414-ba7b-93d5431d40f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n triangular numbers.", "code": "def triangular_Num_Sum(n: int) -> int:\n    sm = 0\n    for i in range(1, n+1):\n        sm += i * (i + 1) // 2\n    return sm", "task_id": "549_81c1255d-3fc7-4c08-86c5-9485039c8b77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the square roots of the first n natural numbers.", "code": "def square_root_Sum(n: int) -> float:\n    sm = 0.0\n    for i in range(1, n+1):\n        sm += i ** 0.5\n    return sm", "task_id": "549_95afe6d3-49d6-4d6e-a732-61db56b35ca3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n terms of the harmonic series.", "code": "def harmonic_Sum(n: int) -> float:\n    sm = 0.0\n    for i in range(1, n+1):\n        sm += 1 / i\n    return sm", "task_id": "549_a7a4fc1b-4f22-494c-a620-52d72f92ad3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n terms of a geometric series with common ratio r.", "code": "def geometric_Sum(n: int, r: float) -> float:\n    sm = 0.0\n    for i in range(n):\n        sm += r ** i\n    return sm", "task_id": "549_89c7ff11-3127-4fcb-b9ef-9c74c50f8b86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract a specified row from a given nested list.", "code": "def extract_row(matrix, row_index):\n    return matrix[row_index]", "task_id": "551_4a44ac59-6a72-4c87-bcf3-10fdb264deaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the main diagonal from a given square matrix.", "code": "def extract_diagonal(matrix):\n    return [matrix[i][i] for i in range(len(matrix))]", "task_id": "551_b93f38e0-352e-4630-a94d-7fdcad373aeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum up all the elements in a specified column from a given nested list.", "code": "def sum_column(matrix, col_index):\n    return sum(row[col_index] for row in matrix)", "task_id": "551_16b53f13-307c-4ff0-b275-69111caf85a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum up all the elements in a specified row from a given nested list.", "code": "def sum_row(matrix, row_index):\n    return sum(matrix[row_index])", "task_id": "551_5d95d3f5-e50a-41f0-8f84-93cef90f98a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a specified column from a given nested list.", "code": "def max_in_column(matrix, col_index):\n    return max(row[col_index] for row in matrix)", "task_id": "551_83d2a477-e475-499f-ad8c-1b8079df78a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a specified row from a given nested list.", "code": "def max_in_row(matrix, row_index):\n    return max(matrix[row_index])", "task_id": "551_0703fbcb-06ff-4811-9786-18edd8ef750d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to transpose a given matrix.", "code": "def transpose_matrix(matrix):\n    return [list(row) for row in zip(*matrix)]", "task_id": "551_9156cf9d-4c47-475e-91ee-b54613786052", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given nested list into a single list.", "code": "def flatten_matrix(matrix):\n    return [element for row in matrix for element in row]", "task_id": "551_a073870e-2361-438a-a92f-c3b1d21055e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of elements in each row of a given nested list.", "code": "def reverse_rows(matrix):\n    return [row[::-1] for row in matrix]", "task_id": "551_951fdc06-c35c-48d8-bfda-df78e4431107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of elements in each column of a given nested list.", "code": "def reverse_columns(matrix):\n    return [list(reversed(col)) for col in zip(*matrix)]", "task_id": "551_4326d87a-8395-4d61-be07-4fe809d6e628", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in a sorted and rotated array.", "code": "def find_min(arr, low, high): \n    if high < low: \n        return arr[0] \n    if high == low: \n        return arr[low] \n    mid = low + (high - low) // 2 \n    if mid < high and arr[mid + 1] < arr[mid]: \n        return arr[mid + 1] \n    if mid > low and arr[mid] < arr[mid - 1]: \n        return arr[mid] \n    if arr[high] > arr[mid]: \n        return find_min(arr, low, mid - 1) \n    return find_min(arr, mid + 1, high)", "task_id": "550_ff571647-f41c-4c0f-9876-9bfa70e954bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of a contiguous subarray in an array using Kadane's Algorithm.", "code": "def find_max_sum_subarray(arr): \n    max_so_far = arr[0] \n    max_ending_here = arr[0] \n    for i in range(1, len(arr)): \n        max_ending_here = max(arr[i], max_ending_here + arr[i]) \n        max_so_far = max(max_so_far, max_ending_here) \n    return max_so_far", "task_id": "550_64a2d33a-d60b-40ef-ba4f-8c1db6348a52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a peak element in an array. A peak element is an element that is greater than its neighbors.", "code": "def find_peak_element(arr): \n    low, high = 0, len(arr) - 1 \n    while low < high: \n        mid = (low + high) // 2 \n        if arr[mid] < arr[mid + 1]: \n            low = mid + 1 \n        else: \n            high = mid \n    return arr[low]", "task_id": "550_4f9a07ee-6fc4-4171-b960-d9afc0376bd8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array containing n distinct numbers taken from 0, 1, 2, ..., n.", "code": "def find_missing_number(arr): \n    n = len(arr) \n    total = (n * (n + 1)) // 2 \n    return total - sum(arr)", "task_id": "550_544ad20b-9ea0-4c5f-b731-10e9ff0cb1a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the duplicate number in an array containing n+1 integers where each integer is between 1 and n (inclusive).", "code": "def find_duplicate_number(arr): \n    slow = fast = arr[0] \n    while True: \n        slow = arr[slow] \n        fast = arr[arr[fast]] \n        if slow == fast: \n            break \n    slow = arr[0] \n    while slow != fast: \n        slow = arr[slow] \n        fast = arr[fast] \n    return slow", "task_id": "550_03813981-57a9-48a9-9804-3b4f3b024cdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first and last position of an element in a sorted array.", "code": "def find_first_and_last(arr, target): \n    def binary_search_left(arr, target): \n        low, high = 0, len(arr) - 1 \n        while low <= high: \n            mid = (low + high) // 2 \n            if arr[mid] < target: \n                low = mid + 1 \n            else: \n                high = mid - 1 \n        return low \n    def binary_search_right(arr, target): \n        low, high = 0, len(arr) - 1 \n        while low <= high: \n            mid = (low + high) // 2 \n            if arr[mid] <= target: \n                low = mid + 1 \n            else: \n                high = mid - 1 \n        return high \n    left, right = binary_search_left(arr, target), binary_search_right(arr, target) \n    if left <= right: \n        return (left, right) \n    return (-1, -1)", "task_id": "550_ebda165d-d7db-4be3-a94d-ad6b951a9348", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the majority element in an array. A majority element is an element that appears more than n/2 times.", "code": "def find_majority_element(arr): \n    count = 0 \n    candidate = None \n    for num in arr: \n        if count == 0: \n            candidate = num \n        count += (1 if num == candidate else -1) \n    return candidate", "task_id": "550_619b7b1b-f8a5-4c54-90d3-b290de5d18c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the k-th largest element in an unsorted array.", "code": "import heapq \n\ndef find_kth_largest(arr, k): \n    return heapq.nlargest(k, arr)[-1]", "task_id": "550_97514067-6769-4dc7-ad75-c16ece73f379", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2): \n    return list(set(arr1) & set(arr2))", "task_id": "550_e471c10e-e0d6-4e3d-8e72-ec3368b1c1ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the union of two arrays.", "code": "def find_union(arr1, arr2): \n    return list(set(arr1) | set(arr2))", "task_id": "550_4d9df46f-80cc-4013-8795-78f47d138eac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest decreasing subsequence of the given sequence.", "code": "def longest_decreasing_subsequence(arr):\n    n = len(arr)\n    longest_decreasing_subsequence = [1]*n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] < arr[j] and longest_decreasing_subsequence[i] < longest_decreasing_subsequence[j] + 1:\n                longest_decreasing_subsequence[i] = longest_decreasing_subsequence[j] + 1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, longest_decreasing_subsequence[i])\n    return maximum", "task_id": "548_e08bc070-e8ec-4467-a026-14e9c318014f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest non-decreasing subsequence of the given sequence.", "code": "def longest_non_decreasing_subsequence(arr):\n    n = len(arr)\n    longest_non_decreasing_subsequence = [1]*n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] >= arr[j] and longest_non_decreasing_subsequence[i] < longest_non_decreasing_subsequence[j] + 1:\n                longest_non_decreasing_subsequence[i] = longest_non_decreasing_subsequence[j] + 1\n    maximum = 0\n    for i in range(n):\n        maximum = max(maximum, longest_non_decreasing_subsequence[i])\n    return maximum", "task_id": "548_2f2e4620-94d6-4a66-a6b5-6d67d2fd1cf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest alternating subsequence of the given sequence.", "code": "def longest_alternating_subsequence(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    up = [1] * n\n    down = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                up[i] = max(up[i], down[j] + 1)\n            elif arr[i] < arr[j]:\n                down[i] = max(down[i], up[j] + 1)\n    return max(max(up), max(down))", "task_id": "548_ccfa85c1-725d-43fb-bc3a-6649548c94d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    lis_sum = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis_sum[i] < lis_sum[j] + arr[i]:\n                lis_sum[i] = lis_sum[j] + arr[i]\n    return max(lis_sum)", "task_id": "548_631426e2-afff-42cf-846b-16b90cf60c6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the indices of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence_indices(arr):\n    n = len(arr)\n    if n == 0:\n        return []\n    lis = [1] * n\n    prev_index = [-1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n                prev_index[i] = j\n    max_index = 0\n    for i in range(1, n):\n        if lis[i] > lis[max_index]:\n            max_index = i\n    result = []\n    while max_index != -1:\n        result.append(max_index)\n        max_index = prev_index[max_index]\n    return result[::-1]", "task_id": "548_c03b6afc-3a14-4022-9686-8bfbdfca421f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence_product(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    lis_product = arr[:]\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis_product[i] < lis_product[j] * arr[i]:\n                lis_product[i] = lis_product[j] * arr[i]\n    return max(lis_product)", "task_id": "548_ad71f99e-4cc4-43a2-87dc-061a2aed0787", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence_elements(arr):\n    n = len(arr)\n    if n == 0:\n        return []\n    lis = [1] * n\n    prev_index = [-1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n                prev_index[i] = j\n    max_index = 0\n    for i in range(1, n):\n        if lis[i] > lis[max_index]:\n            max_index = i\n    result = []\n    while max_index != -1:\n        result.append(arr[max_index])\n        max_index = prev_index[max_index]\n    return result[::-1]", "task_id": "548_4f806449-0e60-4770-b98a-061b57b85dac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length and elements of the longest increasing subsequence of the given sequence.", "code": "def longest_increasing_subsequence_length_and_elements(arr):\n    n = len(arr)\n    if n == 0:\n        return (0, [])\n    lis = [1] * n\n    prev_index = [-1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n                prev_index[i] = j\n    max_index = 0\n    for i in range(1, n):\n        if lis[i] > lis[max_index]:\n            max_index = i\n    result = []\n    while max_index != -1:\n        result.append(arr[max_index])\n        max_index = prev_index[max_index]\n    return (max(lis), result[::-1])", "task_id": "548_095fbbe7-ce97-45ad-8433-eac3a612b7e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence of the given sequence where you can replace at most k elements.", "code": "def longest_increasing_subsequence_with_replacement(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i][j] = 1\n            for m in range(i):\n                if arr[m] < arr[i]:\n                    dp[i][j] = max(dp[i][j], dp[m][j] + 1)\n                elif j > 0:\n                    dp[i][j] = max(dp[i][j], dp[m][j - 1] + 1)\n    return max(max(row) for row in dp)", "task_id": "548_9a9ec7d2-314c-4a4f-9576-03734a7278f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence of the given sequence where you can remove at most k elements.", "code": "def longest_increasing_subsequence_with_removal(arr, k):\n    n = len(arr)\n    if n == 0:\n        return 0\n    dp = [[0] * (k + 1) for _ in range(n)]\n    for i in range(n):\n        for j in range(k + 1):\n            dp[i][j] = 1\n            for m in range(i):\n                if arr[m] < arr[i]:\n                    dp[i][j] = max(dp[i][j], dp[m][j] + 1)\n                elif j > 0:\n                    dp[i][j] = max(dp[i][j], dp[m][j - 1] + 1)\n    return max(max(row) for row in dp)", "task_id": "548_4f22eb72-6cec-4497-9455-e8703d6731ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is an arithmetic sequence or not.", "code": "def is_arithmetic_sequence(seq):\n    if len(seq) < 2:\n        return 'Arithmetic Sequence'\n    diff = seq[1] - seq[0]\n    for i in range(2, len(seq)):\n        if seq[i] - seq[i-1] != diff:\n            return 'Non Arithmetic Sequence'\n    return 'Arithmetic Sequence'", "task_id": "552_2642d200-782a-42f4-b55a-6372c7a24cb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is a geometric sequence or not.", "code": "def is_geometric_sequence(seq):\n    if len(seq) < 2:\n        return 'Geometric Sequence'\n    ratio = seq[1] / seq[0]\n    for i in range(2, len(seq)):\n        if seq[i] / seq[i-1] != ratio:\n            return 'Non Geometric Sequence'\n    return 'Geometric Sequence'", "task_id": "552_f8ab8bdc-7532-4c24-8f4f-623c3eb46171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is a Fibonacci sequence or not.", "code": "def is_fibonacci_sequence(seq):\n    if len(seq) < 3:\n        return 'Fibonacci Sequence'\n    for i in range(2, len(seq)):\n        if seq[i] != seq[i-1] + seq[i-2]:\n            return 'Non Fibonacci Sequence'\n    return 'Fibonacci Sequence'", "task_id": "552_4f6d41df-61b5-4053-a0e8-92f7140775de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is a palindromic sequence or not.", "code": "def is_palindromic_sequence(seq):\n    if seq == seq[::-1]:\n        return 'Palindromic Sequence'\n    return 'Non Palindromic Sequence'", "task_id": "552_ef9320c4-a254-46eb-ae6e-39172493a42e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is strictly increasing or not.", "code": "def is_increasing_sequence(seq):\n    for i in range(1, len(seq)):\n        if seq[i] <= seq[i-1]:\n            return 'Non Increasing Sequence'\n    return 'Increasing Sequence'", "task_id": "552_47376b09-3d8e-42a6-9872-c22d71a5c76b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is strictly decreasing or not.", "code": "def is_decreasing_sequence(seq):\n    for i in range(1, len(seq)):\n        if seq[i] >= seq[i-1]:\n            return 'Non Decreasing Sequence'\n    return 'Decreasing Sequence'", "task_id": "552_c856d4da-d027-4de8-9ca7-15262fe15a23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given sequence is a constant sequence or not.", "code": "def is_constant_sequence(seq):\n    if len(set(seq)) == 1:\n        return 'Constant Sequence'\n    return 'Non Constant Sequence'", "task_id": "552_7d5e8f45-4a68-436d-9d4f-d9ce8122e709", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a given sequence are prime numbers or not.", "code": "def is_prime_sequence(seq):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for num in seq:\n        if not is_prime(num):\n            return 'Non Prime Sequence'\n    return 'Prime Sequence'", "task_id": "552_6dc57356-0f24-49d9-a882-4a4c146a5864", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a given sequence are even numbers or not.", "code": "def is_even_sequence(seq):\n    for num in seq:\n        if num % 2 != 0:\n            return 'Non Even Sequence'\n    return 'Even Sequence'", "task_id": "552_c23ca168-e294-4e38-8ea4-728927046319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in a given sequence are odd numbers or not.", "code": "def is_odd_sequence(seq):\n    for num in seq:\n        if num % 2 == 0:\n            return 'Non Odd Sequence'\n    return 'Odd Sequence'", "task_id": "552_0b101c0a-f2bb-4a99-9581-09bba7096e2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a floating-point number.", "code": "def list_to_float(lst):\n  res = float('.'.join(str(ele) for ele in lst))\n  return res", "task_id": "553_a6a9e701-4e5e-443b-a91b-64756cbd372b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to an integer by concatenating its elements.", "code": "def tuple_to_int(test_tup):\n  res = int(''.join(str(ele) for ele in test_tup))\n  return res", "task_id": "553_1518b9e6-e5df-4712-861e-56ae9d83f069", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to an integer by concatenating its elements.", "code": "def list_to_int(lst):\n  res = int(''.join(str(ele) for ele in lst))\n  return res", "task_id": "553_b9439270-de37-4599-8e35-7a6c92d93845", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a string by concatenating its elements.", "code": "def tuple_to_string(test_tup):\n  res = ''.join(str(ele) for ele in test_tup)\n  return res", "task_id": "553_c42483f5-5e9f-44de-9bb2-acf87072832e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a string by concatenating its elements.", "code": "def list_to_string(lst):\n  res = ''.join(str(ele) for ele in lst)\n  return res", "task_id": "553_948c362d-d9b4-4fb2-a205-4cd9ac047afa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a floating-point number using a specified separator.", "code": "def tuple_to_float_with_separator(test_tup, sep):\n  res = float(sep.join(str(ele) for ele in test_tup))\n  return res", "task_id": "553_9f3dcc48-3574-4056-aeec-9c8e1786d567", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a floating-point number using a specified separator.", "code": "def list_to_float_with_separator(lst, sep):\n  res = float(sep.join(str(ele) for ele in lst))\n  return res", "task_id": "553_f434ee53-eeb5-4de0-836e-91d33f29fe62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a string using a specified separator.", "code": "def tuple_to_string_with_separator(test_tup, sep):\n  res = sep.join(str(ele) for ele in test_tup)\n  return res", "task_id": "553_af8cfe9a-729f-4f9a-8a8c-3286aee7410f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a string using a specified separator.", "code": "def list_to_string_with_separator(lst, sep):\n  res = sep.join(str(ele) for ele in lst)\n  return res", "task_id": "553_a54706f1-ac96-4fcb-bd7c-11ca6b14e317", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a hexadecimal string by concatenating its elements.", "code": "def tuple_to_hex_string(test_tup):\n  res = ''.join(hex(ele)[2:] for ele in test_tup)\n  return res", "task_id": "553_5efee0b5-b847-497f-b4fc-6aa4e1a6a937", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find even numbers from a mixed list.", "code": "def find_even_numbers(lst): \n    even_numbers = [] \n    for i in lst: \n        if isinstance(i, int) and i % 2 == 0: \n            even_numbers.append(i) \n    return even_numbers", "task_id": "554_adb15c62-8646-45d0-a067-2cd94c7b3acc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find positive numbers from a mixed list.", "code": "def find_positive_numbers(lst): \n    positive_numbers = [] \n    for i in lst: \n        if isinstance(i, (int, float)) and i > 0: \n            positive_numbers.append(i) \n    return positive_numbers", "task_id": "554_35157032-a1d6-48d7-bc45-21da9bfed836", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find negative numbers from a mixed list.", "code": "def find_negative_numbers(lst): \n    negative_numbers = [] \n    for i in lst: \n        if isinstance(i, (int, float)) and i < 0: \n            negative_numbers.append(i) \n    return negative_numbers", "task_id": "554_b1b03a86-a238-4e34-95c8-c8a3766b469a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all string elements from a mixed list.", "code": "def find_strings(lst): \n    strings = [] \n    for i in lst: \n        if isinstance(i, str): \n            strings.append(i) \n    return strings", "task_id": "554_f454d5f6-be01-4821-b11b-e999c84890ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all float elements from a mixed list.", "code": "def find_floats(lst): \n    floats = [] \n    for i in lst: \n        if isinstance(i, float): \n            floats.append(i) \n    return floats", "task_id": "554_2c3ca17e-c439-49fc-9734-59f9adef2a67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all integer elements from a mixed list.", "code": "def find_integers(lst): \n    integers = [] \n    for i in lst: \n        if isinstance(i, int): \n            integers.append(i) \n    return integers", "task_id": "554_b85ac006-8ecd-452a-aa7f-0dfde680588f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all uppercase string elements from a mixed list.", "code": "def find_uppercase_strings(lst): \n    uppercase_strings = [] \n    for i in lst: \n        if isinstance(i, str) and i.isupper(): \n            uppercase_strings.append(i) \n    return uppercase_strings", "task_id": "554_af39df31-2822-4c21-80c5-f346d2d6c39c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all lowercase string elements from a mixed list.", "code": "def find_lowercase_strings(lst): \n    lowercase_strings = [] \n    for i in lst: \n        if isinstance(i, str) and i.islower(): \n            lowercase_strings.append(i) \n    return lowercase_strings", "task_id": "554_03814e70-68f2-4f09-ae62-4dd85b0bd98b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all palindromic string elements from a mixed list.", "code": "def find_palindromes(lst): \n    palindromes = [] \n    for i in lst: \n        if isinstance(i, str) and i == i[::-1]: \n            palindromes.append(i) \n    return palindromes", "task_id": "554_99411e66-4895-472b-8e0f-fc38cc8d314e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all string elements from a mixed list that are longer than a given length.", "code": "def find_long_strings(lst, length): \n    long_strings = [] \n    for i in lst: \n        if isinstance(i, str) and len(i) > length: \n            long_strings.append(i) \n    return long_strings", "task_id": "554_e15de1da-ad00-46b1-9c95-7eec02e10023", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the difference between the sum of squares of the first n natural numbers and the square of the sum of the first n natural numbers.", "code": "def sum_of_squares_difference(n):\n    sum_of_squares = sum(i**2 for i in range(1, n+1))\n    square_of_sum = sum(range(1, n+1)) ** 2\n    return square_of_sum - sum_of_squares", "task_id": "555_ba96e22c-5ce3-4b3e-9eb6-c0d57508e997", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    return sum(i**3 for i in range(1, n+1))", "task_id": "555_b5f1090f-ca8c-41fc-a1a3-8e1c223ef9b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the sum of the first n natural numbers and the sum of the first n even numbers.", "code": "def product_of_sums(n):\n    sum_natural = sum(range(1, n+1))\n    sum_even = sum(2*i for i in range(1, n+1))\n    return sum_natural * sum_even", "task_id": "555_e7f3050e-6b61-450c-999f-9d110af4eba6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "import math\n\ndef sum_of_factorials(n):\n    return sum(math.factorial(i) for i in range(1, n+1))", "task_id": "555_b61b15d1-e9f2-4dae-b580-84d8398460f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the first n even natural numbers.", "code": "def sum_of_squares_of_evens(n):\n    return sum((2*i)**2 for i in range(1, n+1))", "task_id": "555_5ff852e0-e38e-4811-92fa-a37e67651133", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the alternating sum of the first n natural numbers. (i.e., 1 - 2 + 3 - 4 + ...)", "code": "def alternating_sum(n):\n    return sum(i if i % 2 != 0 else -i for i in range(1, n+1))", "task_id": "555_c744152c-488c-4523-9d6d-254fcd209999", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the first n odd natural numbers.", "code": "def sum_of_odd_squares(n):\n    return sum((2*i-1)**2 for i in range(1, n+1))", "task_id": "555_89f7cd75-2c90-49e9-9932-62c16984d53e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of the first n odd natural numbers.", "code": "def sum_of_cubes_of_odds(n):\n    return sum((2*i-1)**3 for i in range(1, n+1))", "task_id": "555_6e210e1e-d966-414c-b90f-ff5dbbb0a76f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n prime numbers.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return sum(primes)", "task_id": "555_b6565fae-b6c5-4a75-90e4-f0bdf678dec5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n):\n    a, b = 0, 1\n    fibonacci_sum = 0\n    for _ in range(n):\n        fibonacci_sum += a\n        a, b = b, a + b\n    return fibonacci_sum", "task_id": "555_7c9a8c70-ddde-4902-8ce5-6d3ed1919099", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the characters in a string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "557_8779e734-7381-4594-95c3-464151b33917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "557_f0bed311-b6d8-4b2b-a939-8b9334fe301a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all spaces from a string.", "code": "def remove_spaces(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "557_4a67c5bb-b5ae-480c-b800-c374670a827e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "557_874456b1-b27a-43d7-90a2-de307d770221", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "557_ed01c2f3-6894-4db3-b9dd-7a7e8c02067d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "557_f76747ab-493b-487c-996a-a9258acab142", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "557_843a49a8-d8ea-4fac-aad4-71f491132fa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "557_e3ca1edb-772f-41f0-9df8-ea0bf66d7cfb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "557_e46fde3f-aba2-4200-a91a-7bc6c0de024c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "557_288da6bb-5889-476e-80ed-8f84c8c487da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of an integer.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(map(int, str(abs(n))))", "task_id": "558_060d077d-5438-4ee8-a241-11c71d35761b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of an integer.", "code": "def product_of_digits(n: int) -> int:\n    result = 1\n    for digit in str(abs(n)):\n        result *= int(digit)\n    return result", "task_id": "558_b00e29ff-8489-45eb-98a9-d5073b4fc414", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of an integer.", "code": "def reverse_digits(n: int) -> int:\n    return int(str(abs(n))[::-1]) * (-1 if n < 0 else 1)", "task_id": "558_9ae12485-b871-4018-b048-8e51300223c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even digits in an integer.", "code": "def count_even_digits(n: int) -> int:\n    return sum(1 for digit in str(abs(n)) if int(digit) % 2 == 0)", "task_id": "558_b58988e1-a81d-4d95-a55b-81ab5e5e31ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in an integer.", "code": "def count_odd_digits(n: int) -> int:\n    return sum(1 for digit in str(abs(n)) if int(digit) % 2 != 0)", "task_id": "558_503e2dbc-cf5a-4bd5-8a1a-56fdc5bfee18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of the digits of an integer.", "code": "def sum_of_squares_of_digits(n: int) -> int:\n    return sum(int(digit)**2 for digit in str(abs(n)))", "task_id": "558_2ddfeb1c-0da4-40f2-b090-82a4b0c41db4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of the digits of an integer.", "code": "def sum_of_cubes_of_digits(n: int) -> int:\n    return sum(int(digit)**3 for digit in str(abs(n)))", "task_id": "558_a23b6447-f036-41ea-aef0-61aec9246580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the alternating sum of the digits of an integer (i.e., subtract the second digit from the first, add the third, subtract the fourth, etc.).", "code": "def alternating_sum_of_digits(n: int) -> int:\n    digits = list(map(int, str(abs(n))))\n    return sum(digit if i % 2 == 0 else -digit for i, digit in enumerate(digits))", "task_id": "558_ed2031dc-0b13-4b45-b403-94588e0057a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the prime digits (2, 3, 5, 7) of an integer.", "code": "def sum_of_prime_digits(n: int) -> int:\n    prime_digits = {'2', '3', '5', '7'}\n    return sum(int(digit) for digit in str(abs(n)) if digit in prime_digits)", "task_id": "558_e8df4b83-1046-4602-965b-6a95821f2d7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digit distances between two integers.", "code": "def digit_distance_sum(n1: int, n2: int) -> int:\n    return sum(abs(int(d1) - int(d2)) for d1, d2 in zip(str(n1), str(n2)))", "task_id": "558_34a33da1-fd7a-4984-b094-c3a34f0ba384", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of elements of the given tuples.", "code": "def intersection_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).intersection(set(test_tup2)))\n  return res", "task_id": "560_00f3a235-7879-427a-8412-459ca4e247b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of elements of the first tuple from the second tuple.", "code": "def difference_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).difference(set(test_tup2)))\n  return res", "task_id": "560_0f6617c1-016f-42a5-a8f1-aa21db8f49f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the symmetric difference of elements of the given tuples.", "code": "def symmetric_difference_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).symmetric_difference(set(test_tup2)))\n  return res", "task_id": "560_4be927b7-f220-4055-ac20-f23c57676d4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the unique elements of the given tuple.", "code": "def unique_elements(test_tup):\n  res = tuple(set(test_tup))\n  return res", "task_id": "560_ee31574f-9260-4784-81b4-41d325b2de45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements of the given tuples.", "code": "def common_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) & set(test_tup2))\n  return res", "task_id": "560_55f4c82a-94bf-4c6e-b1c0-0ed16ebd26e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge and sort the elements of the given tuples.", "code": "def merge_and_sort_elements(test_tup1, test_tup2):\n  res = tuple(sorted(test_tup1 + test_tup2))\n  return res", "task_id": "560_c8029fdd-2566-49fd-ab8b-5fd979ba3c08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from the given tuple.", "code": "def remove_duplicates(test_tup):\n  res = tuple(set(test_tup))\n  return res", "task_id": "560_fba122ae-93d0-45b0-83ff-e76265a35feb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum and minimum elements of the given tuple.", "code": "def find_max_min_elements(test_tup):\n  return (max(test_tup), min(test_tup))", "task_id": "560_4544d9f2-e6ee-41c3-ae4f-b7e072cb9928", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of each element in the given tuple.", "code": "def count_elements(test_tup):\n  from collections import Counter\n  return dict(Counter(test_tup))", "task_id": "560_a3361170-54ec-4ed4-85d2-9dfe900b796f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all indices of a given element in the tuple.", "code": "def find_element_indices(test_tup, element):\n  return [i for i, x in enumerate(test_tup) if x == element]", "task_id": "560_13bf9341-d3e4-4039-9bde-f1eb7c8aea96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an odd number.", "code": "def count_odd_sum_pairs(arr: list[int]) -> int:\n    odd_sum_pairs = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % 2 != 0:\n                odd_sum_pairs += 1\n    return odd_sum_pairs", "task_id": "556_026c5c04-e2d3-4eca-b09f-720ffdfedb58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with xor as an even number.", "code": "def count_even_xor_pairs(arr: list[int]) -> int:\n    even_xor_pairs = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 == 0:\n                even_xor_pairs += 1\n    return even_xor_pairs", "task_id": "556_017a05d2-417c-4b33-b4d8-796e1f951ead", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with product as an odd number.", "code": "def count_odd_product_pairs(arr: list[int]) -> int:\n    odd_product_pairs = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] * arr[j]) % 2 != 0:\n                odd_product_pairs += 1\n    return odd_product_pairs", "task_id": "556_95aa6240-99bd-45e3-b948-f48ec0543239", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with sum as an even number.", "code": "def count_even_sum_pairs(arr: list[int]) -> int:\n    even_sum_pairs = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % 2 == 0:\n                even_sum_pairs += 1\n    return even_sum_pairs", "task_id": "556_4944f0cf-e22c-489a-990e-9a4e5fec7a8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with a difference of k.", "code": "def count_pairs_with_diff_k(arr: list[int], k: int) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                count += 1\n    return count", "task_id": "556_7d841614-440e-4105-b3a6-f1c2857735f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with a sum of k.", "code": "def count_pairs_with_sum_k(arr: list[int], k: int) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == k:\n                count += 1\n    return count", "task_id": "556_fa7c7741-c42b-41cc-8e67-4cd3f1ce9259", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with a product of k.", "code": "def count_pairs_with_product_k(arr: list[int], k: int) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] == k:\n                count += 1\n    return count", "task_id": "556_af32ee1d-7e2f-45f5-a505-87781d983110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with a GCD of 1.", "code": "import math\n\ndef count_pairs_with_gcd_one(arr: list[int]) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if math.gcd(arr[i], arr[j]) == 1:\n                count += 1\n    return count", "task_id": "556_594935ef-a695-4f54-a1b5-48c171476df6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with an LCM of k.", "code": "import math\n\ndef lcm(a, b):\n    return abs(a*b) // math.gcd(a, b)\n\ndef count_pairs_with_lcm_k(arr: list[int], k: int) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lcm(arr[i], arr[j]) == k:\n                count += 1\n    return count", "task_id": "556_cddbe2f9-bb04-4754-bf5f-13da7d7a0c52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the pairs with a sum divisible by k.", "code": "def count_pairs_with_sum_divisible_by_k(arr: list[int], k: int) -> int:\n    count = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                count += 1\n    return count", "task_id": "556_17b1fcf5-7d03-4231-b5bf-76e5900484a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a contiguous subarray in the given array.", "code": "def find_max_product_subarray(arr):\n  max_product = float('-inf')\n  min_product = float('inf')\n  current_max = 1\n  current_min = 1\n  for num in arr:\n    if num == 0:\n      current_max, current_min = 1, 1\n      continue\n    temp = current_max * num\n    current_max = max(num, temp, current_min * num)\n    current_min = min(num, temp, current_min * num)\n    max_product = max(max_product, current_max)\n  return max_product", "task_id": "559_790805c0-dc1c-46f7-a45a-95fb3009c9c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing contiguous subarray in the given array.", "code": "def find_longest_increasing_subarray(arr):\n  max_length = 1\n  current_length = 1\n  for i in range(1, len(arr)):\n    if arr[i] > arr[i-1]:\n      current_length += 1\n      max_length = max(max_length, current_length)\n    else:\n      current_length = 1\n  return max_length", "task_id": "559_162223b5-8f3f-488d-b428-e37b6a898392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of non-adjacent elements in the given array.", "code": "def find_max_sum_nonadjacent_subarray(arr):\n  incl = 0\n  excl = 0\n  for num in arr:\n    new_excl = max(incl, excl)\n    incl = excl + num\n    excl = new_excl\n  return max(incl, excl)", "task_id": "559_c930b930-6930-4332-b906-1e827aed147f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a circular subarray in the given array.", "code": "def find_max_sum_circular_subarray(arr):\n  def kadane(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for num in arr[1:]:\n      max_ending_here = max(num, max_ending_here + num)\n      max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n  max_kadane = kadane(arr)\n  max_wrap = sum(arr) - kadane([-num for num in arr])\n  return max(max_kadane, max_wrap)", "task_id": "559_0b62618c-c35b-4532-b77c-6a586636c3ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray with length less than or equal to the given limit.", "code": "def find_max_sum_subarray_with_limit(arr, limit):\n  max_sum = float('-inf')\n  for i in range(len(arr)):\n    current_sum = 0\n    for j in range(i, min(i + limit, len(arr))):\n      current_sum += arr[j]\n      max_sum = max(max_sum, current_sum)\n  return max_sum", "task_id": "559_1b4fcb71-03f5-4bb6-8670-6078ce82dcf8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray with exactly k elements.", "code": "def find_max_sum_subarray_with_k_elements(arr, k):\n  max_sum = sum(arr[:k])\n  current_sum = max_sum\n  for i in range(k, len(arr)):\n    current_sum += arr[i] - arr[i - k]\n    max_sum = max(max_sum, current_sum)\n  return max_sum", "task_id": "559_21cb836b-b6a4-4ec0-a22a-7c04db8a47c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray with at least k elements.", "code": "def find_max_sum_subarray_with_at_least_k_elements(arr, k):\n  max_sum = sum(arr[:k])\n  current_sum = max_sum\n  for i in range(k, len(arr)):\n    current_sum += arr[i] - arr[i - k]\n    max_sum = max(max_sum, current_sum)\n  return max_sum", "task_id": "559_8449c7f8-a985-4479-b110-58b10edb137f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray where all elements are even.", "code": "def find_max_sum_subarray_with_even_elements(arr):\n  max_sum = 0\n  current_sum = 0\n  for num in arr:\n    if num % 2 == 0:\n      current_sum += num\n      max_sum = max(max_sum, current_sum)\n    else:\n      current_sum = 0\n  return max_sum", "task_id": "559_17598cac-5f09-4331-83e4-5edf3008dcb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray where all elements are odd.", "code": "def find_max_sum_subarray_with_odd_elements(arr):\n  max_sum = 0\n  current_sum = 0\n  for num in arr:\n    if num % 2 != 0:\n      current_sum += num\n      max_sum = max(max_sum, current_sum)\n    else:\n      current_sum = 0\n  return max_sum", "task_id": "559_f048041f-a912-4556-9e9a-8ae26d21e81c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray with all distinct elements.", "code": "def find_max_sum_subarray_with_distinct_elements(arr):\n  max_sum = 0\n  current_sum = 0\n  seen = set()\n  start = 0\n  for end in range(len(arr)):\n    while arr[end] in seen:\n      seen.remove(arr[start])\n      current_sum -= arr[start]\n      start += 1\n    seen.add(arr[end])\n    current_sum += arr[end]\n    max_sum = max(max_sum, current_sum)\n  return max_sum", "task_id": "559_499643bf-d558-4efb-bdd9-13abf62e4761", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and groups elements by their first element.", "code": "def group_elements_by_key(test_list):\n    res = {}\n    for key, val in test_list:\n        if key not in res:\n            res[key] = []\n        res[key].append(val)\n    return res", "task_id": "561_21182c06-d36e-48cd-b861-091c1742b5d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and inverts each pair.", "code": "def invert_pairs(test_list):\n    return [(val, key) for key, val in test_list]", "task_id": "561_3b08057e-5b26-41ef-8be9-36ac1355d039", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and counts the occurrences of each element.", "code": "def count_elements(test_list):\n    res = {}\n    for key, val in test_list:\n        res[key] = res.get(key, 0) + 1\n        res[val] = res.get(val, 0) + 1\n    return res", "task_id": "561_a3c66a02-877b-44f2-922b-31e2933f8c7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and returns a set of unique elements.", "code": "def find_unique_elements(test_list):\n    res = set()\n    for key, val in test_list:\n        res.add(key)\n        res.add(val)\n    return res", "task_id": "561_89f74bde-42c5-4288-b69c-ca513b1c11c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and flattens it into a single list.", "code": "def flatten_pairs(test_list):\n    res = []\n    for key, val in test_list:\n        res.append(key)\n        res.append(val)\n    return res", "task_id": "561_d13bddbe-a8fe-4bd4-84bc-3fe882a2ac51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and returns the sum of all elements.", "code": "def sum_elements(test_list):\n    return sum(key + val for key, val in test_list)", "task_id": "561_8b0dc920-a79e-4e38-a5c5-ca95188d338a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and a threshold, and returns only those pairs where both elements are greater than the threshold.", "code": "def filter_pairs(test_list, threshold):\n    return [(key, val) for key, val in test_list if key > threshold and val > threshold]", "task_id": "561_2cdada52-ee26-471f-ac2b-f59b53b853d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and swaps the elements of each tuple.", "code": "def swap_elements(test_list):\n    return [(val, key) for key, val in test_list]", "task_id": "561_a4c412f8-b294-4359-8bed-2b80fb632c66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and returns the maximum element among all tuples.", "code": "def find_max_element(test_list):\n    return max(max(key, val) for key, val in test_list)", "task_id": "561_45df8686-9ec8-4074-b82f-c4ddcce2a1bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of tuples and concatenates the elements of each tuple into a string.", "code": "def concatenate_elements(test_list):\n    return [str(key) + str(val) for key, val in test_list]", "task_id": "561_c9d5ce79-c7a1-44a6-8501-03b3c48877b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum length of sublist.", "code": "def Find_Min_Length(lst):\n    minLength = min(len(x) for x in lst)\n    return minLength", "task_id": "562_88831ab5-d564-414d-bd13-efd86034c56c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average length of sublist.", "code": "def Find_Avg_Length(lst):\n    avgLength = sum(len(x) for x in lst) / len(lst)\n    return avgLength", "task_id": "562_397812ae-6ab7-4f35-9114-f7a6bd6d0cbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of empty sublists.", "code": "def Count_Empty_Sublists(lst):\n    count = sum(1 for x in lst if len(x) == 0)\n    return count", "task_id": "562_fd3ebdd7-d82c-429e-94bb-0cb9fc6814ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the total number of elements in all sublists.", "code": "def Find_Total_Elements(lst):\n    totalElements = sum(len(x) for x in lst)\n    return totalElements", "task_id": "562_d3f3c612-9eb4-4888-8ea5-f5ebc2877dfe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist with the maximum sum of elements.", "code": "def Find_Max_Sum_Sublist(lst):\n    maxSumSublist = max(lst, key=sum)\n    return maxSumSublist", "task_id": "562_78a24688-16eb-45ab-9d20-6e93ed81d2fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sublist with the minimum sum of elements.", "code": "def Find_Min_Sum_Sublist(lst):\n    minSumSublist = min(lst, key=sum)\n    return minSumSublist", "task_id": "562_60f6ca07-67ca-4182-9e2f-e0b73d7dc415", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest sublist.", "code": "def Find_Longest_Sublist(lst):\n    longestSublist = max(lst, key=len)\n    return longestSublist", "task_id": "562_450cf9ac-7c13-4d21-846d-b5db93033d87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the shortest sublist.", "code": "def Find_Shortest_Sublist(lst):\n    shortestSublist = min(lst, key=len)\n    return shortestSublist", "task_id": "562_9f2e2e84-8a71-4376-8f41-9ccc2127689a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first sublist containing a specific element.", "code": "def Find_Sublist_Containing_Element(lst, element):\n    for sublist in lst:\n        if element in sublist:\n            return sublist\n    return []", "task_id": "562_8c81b7fc-ed0f-4e75-8af9-827d89f9b5ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all sublists with a specific length.", "code": "def Find_Sublists_With_Length(lst, length):\n    result = [sublist for sublist in lst if len(sublist) == length]\n    return result", "task_id": "562_55cd413a-50e0-4260-8248-06d6b9ecfff6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract words that start with a capital letter from a string.", "code": "import re\ndef extract_words(text):\n    return re.findall(r'\\b[A-Z][a-z]*\\b', text)", "task_id": "563_c62ab3e8-39d7-4093-bdb9-4fd9b926a800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numbers from a string.", "code": "import re\ndef extract_numbers(text):\n    return re.findall(r'\\d+', text)", "task_id": "563_3e22882f-7561-408c-ae72-f6e97906efce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract email addresses from a string.", "code": "import re\ndef extract_emails(text):\n    return re.findall(r'[\\w\\.-]+@[\\w\\.-]+', text)", "task_id": "563_75e2bd83-2a44-47f1-bd93-a0edd10cddb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract hashtags from a string.", "code": "import re\ndef extract_hashtags(text):\n    return re.findall(r'#(\\w+)', text)", "task_id": "563_ce953d59-8768-40c3-ab44-c9b0256b807f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract URLs from a string.", "code": "import re\ndef extract_urls(text):\n    return re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)", "task_id": "563_42146e2d-a75f-4db1-8c2e-c06ebf00c6a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract dates in the format DD/MM/YYYY from a string.", "code": "import re\ndef extract_dates(text):\n    return re.findall(r'\\b\\d{2}/\\d{2}/\\d{4}\\b', text)", "task_id": "563_469520a4-5c35-40a6-8b80-ec27c30064e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract phone numbers in the format (XXX) XXX-XXXX from a string.", "code": "import re\ndef extract_phone_numbers(text):\n    return re.findall(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)", "task_id": "563_17e9c5bb-f051-455e-a798-f3cb0c10882c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract words that contain at least one vowel from a string.", "code": "import re\ndef extract_words_with_vowels(text):\n    return re.findall(r'\\b\\w*[aeiouAEIOU]\\w*\\b', text)", "task_id": "563_75c1210e-fcbf-487e-8cca-7aa56f7cf31e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract hex color codes from a string.", "code": "import re\ndef extract_hex_colors(text):\n    return re.findall(r'#[0-9a-fA-F]{6}', text)", "task_id": "563_2aef1963-8567-462e-8f74-7d7448e22870", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract sentences from a string.", "code": "import re\ndef extract_sentences(text):\n    return re.findall(r'[^.!?]*[.!?]', text)", "task_id": "563_294fcbfd-d141-4453-a055-b403d2351a92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "565_7eaca9dd-0750-44fb-8169-6b42acead289", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "565_f6d6a0c3-5b27-4a35-bd11-84d8992991f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "565_4a20321a-e823-4921-bdd8-f66f79c82b1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace from a given string.", "code": "def remove_whitespace(s):\n    return ''.join(s.split())", "task_id": "565_e295feb2-d80e-47c7-b2fd-9833e5ee70a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "565_2723f7e2-6d64-47dc-a3a6-1bd559c32cf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s):\n    return len(s.split())", "task_id": "565_23ca5d07-911e-48e1-a9eb-77d4962e6886", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all vowels in a given string with a specified character.", "code": "def replace_vowels(s, replacement):\n    return ''.join(replacement if char.lower() in 'aeiou' else char for char in s)", "task_id": "565_1d85b7de-0ac2-42cd-9bde-278d7814ae5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a given string.", "code": "def find_longest_word(s):\n    words = s.split()\n    return max(words, key=len)", "task_id": "565_0d7934a4-1a6c-4e41-9da2-627a80ed285e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all punctuation from a given string.", "code": "import string\n\ndef remove_punctuation(s):\n    return s.translate(str.maketrans('', '', string.punctuation))", "task_id": "565_d8ad230f-f24a-4f2c-bbe0-1e7240e6f9c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a given string to alternate case, starting with uppercase.", "code": "def alternate_case(s):\n    return ''.join(char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(s))", "task_id": "565_cb8fc257-bb9f-4797-aa5d-219991c105bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where the first element is greater than the second element from the given array.", "code": "def count_greater_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] > arr[j]:\n                cnt += 1\n    return cnt", "task_id": "564_b7f1600b-9a7a-493e-a092-99bfeb7a3d7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where the first element is smaller than the second element from the given array.", "code": "def count_smaller_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] < arr[j]:\n                cnt += 1\n    return cnt", "task_id": "564_910d25e1-9bf8-47d5-9474-58b8db39c1f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where both elements are equal from the given array.", "code": "def count_equal_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]:\n                cnt += 1\n    return cnt", "task_id": "564_e4c45794-1134-4c32-9dbb-431e614b235d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where the first element is divisible by the second element from the given array.", "code": "def count_divisible_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] % arr[j] == 0:\n                cnt += 1\n    return cnt", "task_id": "564_3aa0537f-ab4c-4865-9911-00d2fc2a362d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements whose sum is equal to a given integer k from the given array.", "code": "def count_sum_pairs(arr, n, k):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == k:\n                cnt += 1\n    return cnt", "task_id": "564_167996b4-ae27-4cbf-b6e2-2104d28efeb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements whose difference is equal to a given integer k from the given array.", "code": "def count_diff_pairs(arr, n, k):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == k:\n                cnt += 1\n    return cnt", "task_id": "564_c8fac2a6-52ca-4212-82bd-32e7111e2a6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements whose product is equal to a given integer k from the given array.", "code": "def count_product_pairs(arr, n, k):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] == k:\n                cnt += 1\n    return cnt", "task_id": "564_a7fbe418-d8d3-4336-96a4-7163296afe68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where one element is odd and the other is even from the given array.", "code": "def count_odd_even_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] % 2 == 0 and arr[j] % 2 != 0) or (arr[i] % 2 != 0 and arr[j] % 2 == 0):\n                cnt += 1\n    return cnt", "task_id": "564_0fb6e0dd-bcc5-4ad8-a737-e878e24140ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where both elements are prime numbers from the given array.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_prime_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if is_prime(arr[i]) and is_prime(arr[j]):\n                cnt += 1\n    return cnt", "task_id": "564_9be6fcc8-2e52-45f1-a8b1-b0e00714de4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements where one element is the square of the other from the given array.", "code": "def count_square_pairs(arr, n):\n    cnt = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] == arr[j]**2 or arr[j] == arr[i]**2:\n                cnt += 1\n    return cnt", "task_id": "564_6bede445-36d3-4b53-a781-a9f8886191fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of zeros of given length.", "code": "def list_of_zeros(length):\n    return [0 for _ in range(length)]", "task_id": "568_8c2c045a-efc0-4fb2-a8e8-5ad199c625fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of ones of given length.", "code": "def list_of_ones(length):\n    return [1 for _ in range(length)]", "task_id": "568_a6301997-5089-4366-bbbe-c4c4880bf74d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of empty strings of given length.", "code": "def list_of_empty_strings(length):\n    return ['' for _ in range(length)]", "task_id": "568_1aefe658-1a3b-4c34-9e19-40de682523b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of False values of given length.", "code": "def list_of_false(length):\n    return [False for _ in range(length)]", "task_id": "568_ff0cb70e-f7c6-4b99-aa5b-397022da2c89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of True values of given length.", "code": "def list_of_true(length):\n    return [True for _ in range(length)]", "task_id": "568_412372fa-7ea6-48c8-91fb-70d89160b02c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of None values of given length.", "code": "def list_of_none(length):\n    return [None for _ in range(length)]", "task_id": "568_ead49b12-f844-4d6c-bf7c-93001f866be1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of tuples each containing a single zero of given length.", "code": "def list_of_zeros_tuples(length):\n    return [(0,) for _ in range(length)]", "task_id": "568_93960527-89e7-42a2-9557-10a129336f7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of empty lists of given length.", "code": "def list_of_empty_lists(length):\n    return [[] for _ in range(length)]", "task_id": "568_6294cc63-b161-4733-b591-81ad5de9d709", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of empty sets of given length.", "code": "def list_of_empty_sets(length):\n    return [set() for _ in range(length)]", "task_id": "568_e4b32067-418c-431e-977d-8e77033abc7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of empty tuples of given length.", "code": "def list_of_empty_tuples(length):\n    return [() for _ in range(length)]", "task_id": "568_5c7004a8-2868-4bee-abd2-55269b62d75a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the digits of a non-negative integer.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)", "task_id": "566_980fed24-23fd-40d6-b89e-85f8cefb71e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the product of the digits of a non-negative integer.", "code": "def product_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n < 10:\n        return n\n    else:\n        return (n % 10) * product_of_digits(n // 10)", "task_id": "566_d90e2409-b3bd-49b5-a51e-c1ec86aab9d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the digits of a non-negative integer.", "code": "def reverse_digits(n: int) -> int:\n    def helper(n, result):\n        if n == 0:\n            return result\n        else:\n            return helper(n // 10, result * 10 + n % 10)\n    return helper(n, 0)", "task_id": "566_2c7d6404-eaae-4095-b1ac-049d25f97ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of digits in a non-negative integer.", "code": "def count_digits(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return len(str(n))", "task_id": "566_84946381-4ba1-41d1-b1bf-6bba06ac5fa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the even digits of a non-negative integer.", "code": "def sum_even_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        if digit % 2 == 0:\n            return digit + sum_even_digits(n // 10)\n        else:\n            return sum_even_digits(n // 10)", "task_id": "566_c651712f-e085-4c06-bc86-ad0a2da3fcd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the odd digits of a non-negative integer.", "code": "def sum_odd_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        if digit % 2 != 0:\n            return digit + sum_odd_digits(n // 10)\n        else:\n            return sum_odd_digits(n // 10)", "task_id": "566_8e6578c4-80cc-4021-a738-69e3d8226a16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a non-negative integer is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    return str(n) == str(n)[::-1]", "task_id": "566_a3144839-dce0-4bb9-8cfd-074f33bac5f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the squares of the digits of a non-negative integer.", "code": "def sum_of_squares_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        return digit * digit + sum_of_squares_of_digits(n // 10)", "task_id": "566_34ffa8d7-6742-46b8-b27b-abfb4bbddc5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the cubes of the digits of a non-negative integer.", "code": "def sum_of_cubes_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        return digit * digit * digit + sum_of_cubes_of_digits(n // 10)", "task_id": "566_04ac3a06-fc25-4d4f-b93c-037def9472c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of the factorials of the digits of a non-negative integer.", "code": "def sum_of_factorials_of_digits(n: int) -> int:\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    if n == 0:\n        return 0\n    else:\n        digit = n % 10\n        return factorial(digit) + sum_of_factorials_of_digits(n // 10)", "task_id": "566_c23099ab-90f4-415c-9c74-004cb4195048", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list is sorted in descending order or not.", "code": "def is_sorted_descending(lst):\n    return all(lst[i] >= lst[i+1] for i in range(len(lst)-1))", "task_id": "567_fade9aa9-53e0-4f89-b595-dd3e10720993", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list is sorted based on the absolute values of its elements.", "code": "def is_sorted_abs(lst):\n    return all(abs(lst[i]) <= abs(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_365a82d9-6587-49ef-914c-62c2494ae9ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of strings is sorted by the length of the strings.", "code": "def is_sorted_by_length(lst):\n    return all(len(lst[i]) <= len(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_47716c9e-6d53-4a9b-9855-f407c4c5baf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of strings is sorted by the last character of each string.", "code": "def is_sorted_by_last_char(lst):\n    return all(lst[i][-1] <= lst[i+1][-1] for i in range(len(lst)-1))", "task_id": "567_81c4d978-7434-4d47-9e68-9051729ebd0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of lists is sorted by the sum of the elements in each sublist.", "code": "def is_sorted_by_sum(lst):\n    return all(sum(lst[i]) <= sum(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_ceb1e369-da1b-4d25-ba05-ad54ba72fd35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of lists is sorted by the first element of each sublist.", "code": "def is_sorted_by_first_element(lst):\n    return all(lst[i][0] <= lst[i+1][0] for i in range(len(lst)-1))", "task_id": "567_f00a6718-b366-4ffa-9e9a-e8b84892fa8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list is sorted such that all even numbers come before all odd numbers.", "code": "def is_sorted_by_even_odd(lst):\n    return all((lst[i] % 2 == 0 and lst[i+1] % 2 == 0) or (lst[i] % 2 == 0 and lst[i+1] % 2 != 0) or (lst[i] % 2 != 0 and lst[i+1] % 2 != 0) for i in range(len(lst)-1))", "task_id": "567_5ebd3ed7-4135-4236-a57f-280c8741cbf9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of strings is sorted by the number of vowels in each string.", "code": "def is_sorted_by_vowel_count(lst):\n    def vowel_count(s):\n        return sum(1 for char in s if char in 'aeiouAEIOU')\n    return all(vowel_count(lst[i]) <= vowel_count(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_8bd56a79-ecfd-4e5b-a505-dc264f771723", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of integers is sorted by the sum of their digits.", "code": "def is_sorted_by_digit_sum(lst):\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return all(digit_sum(lst[i]) <= digit_sum(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_57457692-3997-4ae8-a684-ff94044c9e4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a specified list of strings is sorted by the number of words in each string.", "code": "def is_sorted_by_word_count(lst):\n    def word_count(s):\n        return len(s.split())\n    return all(word_count(lst[i]) <= word_count(lst[i+1]) for i in range(len(lst)-1))", "task_id": "567_145dcbc3-a35b-4881-9a9e-25486a49a4aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each sublist of strings in a given list of lists.", "code": "def reverse_sublists(list1):\n    result = [sublist[::-1] for sublist in list1]\n    return result", "task_id": "569_1487ba73-2dbb-413e-b2b3-eb8b66f3e32b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize each string in each sublist of a given list of lists.", "code": "def capitalize_sublists(list1):\n    result = [[s.capitalize() for s in sublist] for sublist in list1]\n    return result", "task_id": "569_cb461e65-5ac9-44d7-88b8-3aad04c4ef4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the length of each sublist in a given list of lists.", "code": "def length_of_sublists(list1):\n    result = [len(sublist) for sublist in list1]\n    return result", "task_id": "569_25f79ed2-1b61-4549-b591-7286521c3d9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list(list1):\n    result = [item for sublist in list1 for item in sublist]\n    return result", "task_id": "569_ed1a7fee-4271-4d32-8713-d0e37286f629", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of each sublist of integers in a given list of lists.", "code": "def sum_of_sublists(list1):\n    result = [sum(sublist) for sublist in list1]\n    return result", "task_id": "569_5249efe2-1f75-4af0-aeed-5d374185bd66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the maximum value of each sublist of integers in a given list of lists.", "code": "def max_of_sublists(list1):\n    result = [max(sublist) for sublist in list1]\n    return result", "task_id": "569_ccbc4a1e-f63b-4295-a8dc-a4914d94d7e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the minimum value of each sublist of integers in a given list of lists.", "code": "def min_of_sublists(list1):\n    result = [min(sublist) for sublist in list1]\n    return result", "task_id": "569_75c8f697-823c-4bf7-8092-22cf9a0ac303", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out odd numbers from each sublist of integers in a given list of lists.", "code": "def filter_even_sublists(list1):\n    result = [[num for num in sublist if num % 2 == 0] for sublist in list1]\n    return result", "task_id": "569_327b9430-7f05-46a1-834b-a7630d7b25a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all strings in each sublist of a given list of lists.", "code": "def concatenate_sublists(list1):\n    result = [''.join(sublist) for sublist in list1]\n    return result", "task_id": "569_95ce5b5b-18ed-47be-82cf-e3b60e8f937a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return only unique elements in each sublist of a given list of lists.", "code": "def unique_elements_sublists(list1):\n    result = [list(set(sublist)) for sublist in list1]\n    return result", "task_id": "569_b17b88ec-fb91-4a1b-b38c-465d2c9b02f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words from a given list of strings that are shorter than a given length.", "code": "def filter_words_by_length(words, length):\n    return [word for word in words if len(word) >= length]", "task_id": "570_3043baa2-4fde-4856-a6d3-f4ea189e327a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace each word in a given list of strings with a given character.", "code": "def replace_words_with_char(words, char):\n    return [char for word in words]", "task_id": "570_50eac62c-d31f-46a1-aae9-15763d4087c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many words in a given list of strings contain a specific character.", "code": "def count_words_with_char(words, char):\n    return sum(1 for word in words if char in word)", "task_id": "570_ab9c0e61-a2d4-41b3-8c65-b2b37d4a6a24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each word in a given list of strings.", "code": "def reverse_each_word(words):\n    return [word[::-1] for word in words]", "task_id": "570_f0855b51-692c-4970-b196-2cd48edf0c2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize each word in a given list of strings.", "code": "def capitalize_words(words):\n    return [word.capitalize() for word in words]", "task_id": "570_ad53b926-498f-444c-bae8-e37fd66dddda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return words from a given list of strings that start with a specific character.", "code": "def words_starting_with_char(words, char):\n    return [word for word in words if word.startswith(char)]", "task_id": "570_d3ddbffd-0f60-4e59-a1d5-9037e598e138", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given list of strings.", "code": "def remove_duplicate_words(words):\n    return list(dict.fromkeys(words))", "task_id": "570_7b5141e8-b65b-4438-8b74-7d3556ae9b96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all words in a given list of strings into a single string.", "code": "def concatenate_words(words):\n    return ' '.join(words)", "task_id": "570_0ae8f6dc-cdbb-4a97-ac49-c6d78aa0dc86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given list of strings.", "code": "def find_longest_word(words):\n    return max(words, key=len)", "task_id": "570_dabe5358-50b4-48e2-a536-7a511b7844cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in each word from a given list of strings.", "code": "def count_vowels_in_words(words):\n    vowels = 'aeiouAEIOU'\n    return [sum(1 for char in word if char in vowels) for word in words]", "task_id": "570_358f310f-b023-4b6a-b7de-573d37c5138a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list.", "code": "def remove_duplicates(nums):\n    return list(set(nums))", "task_id": "572_cfc89776-ef87-4453-ab2e-36c492feaa6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list while preserving the order of first occurrences.", "code": "def remove_duplicates_keep_order(nums):\n    seen = set()\n    return [x for x in nums if not (x in seen or seen.add(x))]", "task_id": "572_8b032f07-f857-4d67-b994-8d925a0f3b5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all but one occurrence of each duplicate number from a given list.", "code": "def remove_duplicates_except_one(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            result.append(num)\n            seen.add(num)\n    return result", "task_id": "572_cd3f26db-8887-4480-9e14-f800d4e9afae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given sorted list.", "code": "def remove_duplicates_from_sorted(nums):\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "task_id": "572_692d41a1-3006-4fe1-8ffd-90fb076b5b99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all numbers that appear more than twice from a given list.", "code": "def remove_duplicates_with_count(nums):\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num in nums if counts[num] <= 2]", "task_id": "572_99000c40-e31c-4f6a-963b-1e3900a09947", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all numbers that appear more than a given threshold from a list.", "code": "def remove_duplicates_with_threshold(nums, threshold):\n    from collections import Counter\n    counts = Counter(nums)\n    return [num for num in nums if counts[num] <= threshold]", "task_id": "572_72ba7dd3-af19-41c5-a991-63185600f447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list and return the sorted list of unique numbers.", "code": "def remove_duplicates_and_sort(nums):\n    return sorted(set(nums))", "task_id": "572_eeae2728-162d-46af-87aa-3eb3c80fb02e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list and return the list of unique numbers in reverse order.", "code": "def remove_duplicates_and_reverse(nums):\n    return list(sorted(set(nums), reverse=True))", "task_id": "572_75e609e3-21f5-4e4a-9146-28e04f1b6a52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list and return the list of unique numbers squared.", "code": "def remove_duplicates_and_square(nums):\n    return [x**2 for x in set(nums)]", "task_id": "572_3d1917c1-494d-464c-b9a3-1eb67265d562", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate numbers from a given list and return the sum of the unique numbers.", "code": "def remove_duplicates_and_sum(nums):\n    return sum(set(nums))", "task_id": "572_2c10f8dc-ee53-495d-ba70-60b8dd156138", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the unique numbers of a given list.", "code": "def sum_unique_numbers(nums):\n    return sum(set(nums))", "task_id": "573_973c9f36-17bd-47ad-be6f-59e6b183e792", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique numbers in a given list.", "code": "def unique_numbers_count(nums):\n    return len(set(nums))", "task_id": "573_8234c05f-78d7-4ae6-b21a-316f58c7d73e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a sorted list of unique numbers from a given list.", "code": "def unique_numbers_sorted(nums):\n    return sorted(set(nums))", "task_id": "573_2dcb6dff-9ae9-4781-8392-37b1d670adb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of unique even numbers in a given list.", "code": "def unique_numbers_product_even(nums):\n    temp = [num for num in set(nums) if num % 2 == 0]\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "task_id": "573_de4dd42a-597e-4c31-a7ea-7a2ba66208e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of unique odd numbers in a given list.", "code": "def unique_numbers_sum_odd(nums):\n    return sum(num for num in set(nums) if num % 2 != 0)", "task_id": "573_86847a0d-6190-401d-8242-79ad712a2c19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of unique numbers greater than 10 in a given list.", "code": "def unique_numbers_product_greater_than_ten(nums):\n    temp = [num for num in set(nums) if num > 10]\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "task_id": "573_31cf16a9-8ea8-46b9-a52e-f37853935e9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of unique numbers less than 5 in a given list.", "code": "def unique_numbers_sum_less_than_five(nums):\n    return sum(num for num in set(nums) if num < 5)", "task_id": "573_ed1839c1-c7f6-4f92-a379-e64dde0f7e97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of unique prime numbers in a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef unique_numbers_product_prime(nums):\n    temp = [num for num in set(nums) if is_prime(num)]\n    p = 1\n    for i in temp:\n        p *= i\n    return p", "task_id": "573_2b2e775c-7233-4ae6-9a73-b3e3322cbf66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the squares of unique numbers in a given list.", "code": "def unique_numbers_sum_squares(nums):\n    return sum(num**2 for num in set(nums))", "task_id": "573_1bf712c9-6291-4d65-985e-2f6e30e003fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the cubes of unique numbers in a given list.", "code": "def unique_numbers_product_cubed(nums):\n    temp = list(set(nums))\n    p = 1\n    for i in temp:\n        p *= i**3\n    return p", "task_id": "573_cf83e97c-ea1c-4826-9ea8-15a630fcc7e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "def volume_cylinder(r, h):\n    volume = 3.1415 * r * r * h\n    return volume", "task_id": "574_1ca87abc-674c-4c87-82f4-0c3cff5037fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "def surfacearea_sphere(r):\n    surfacearea = 4 * 3.1415 * r * r\n    return surfacearea", "task_id": "574_71ce5982-4a81-47c4-8c02-7836974986c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "def volume_sphere(r):\n    volume = (4/3) * 3.1415 * r * r * r\n    return volume", "task_id": "574_322ce60f-df1c-4a35-81dc-0c164aa61edc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cone.", "code": "def surfacearea_cone(r, h):\n    import math\n    l = math.sqrt(r * r + h * h)\n    surfacearea = 3.1415 * r * (r + l)\n    return surfacearea", "task_id": "574_e0036c3c-0435-45f1-8565-adc65c0fb075", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "def volume_cone(r, h):\n    volume = (1/3) * 3.1415 * r * r * h\n    return volume", "task_id": "574_03aaffeb-af46-4ddc-8d93-304cc3cfaf2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cube.", "code": "def surfacearea_cube(a):\n    surfacearea = 6 * a * a\n    return surfacearea", "task_id": "574_05d90c86-9e50-41fa-88e8-adbb79e1f83b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(a):\n    volume = a * a * a\n    return volume", "task_id": "574_6677bfb8-22f9-4005-a796-f765dcbd82c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a rectangular prism.", "code": "def surfacearea_rectangular_prism(l, w, h):\n    surfacearea = 2 * (l * w + l * h + w * h)\n    return surfacearea", "task_id": "574_fd9cc0bd-3260-4d04-a3f9-ca0ee03a0cd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a rectangular prism.", "code": "def volume_rectangular_prism(l, w, h):\n    volume = l * w * h\n    return volume", "task_id": "574_c33fc204-5e99-49d3-8bbb-eac18307b469", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder with a cap on one end.", "code": "def surfacearea_cylinder_with_cap(r, h):\n    surfacearea = (2 * 3.1415 * r * r) + (3.1415 * r * h)\n    return surfacearea", "task_id": "574_9b4b39a7-064b-4c30-82e4-0b2487e49bcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether one array is a rotation of another array.", "code": "def is_rotation(A: list, B: list) -> bool:\n    if len(A) != len(B):\n        return False\n    return B in (A + A)", "task_id": "576_b7ab0770-3dd9-430e-86e4-e7c2a94dbd61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether one array is a subsequence of another array.", "code": "def is_subsequence(A: list, B: list) -> bool:\n    it = iter(A)\n    return all(x in it for x in B)", "task_id": "576_a766d03d-75ca-4ff4-9d23-1dfba928bcbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find common elements between two arrays.", "code": "def common_elements(A: list, B: list) -> list:\n    return list(set(A) & set(B))", "task_id": "576_4d503936-1180-4d35-b12c-dfc956e0e648", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array is a palindrome.", "code": "def is_palindrome_array(A: list) -> bool:\n    return A == A[::-1]", "task_id": "576_10787daf-b252-4e58-b5ae-a3ecfce71088", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted arrays into one sorted array.", "code": "def merge_sorted_arrays(A: list, B: list) -> list:\n    return sorted(A + B)", "task_id": "576_e9643037-c88f-4fdd-b2ea-3cbbb43fcf9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from an array.", "code": "def remove_duplicates(A: list) -> list:\n    return list(dict.fromkeys(A))", "task_id": "576_69bc4458-a035-44fa-87ac-f2de07e1379d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of a subarray.", "code": "def max_subarray_sum(A: list) -> int:\n    max_sum = current_sum = A[0]\n    for num in A[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "576_67080b9f-ea7a-4c79-b904-01abf326ca13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of size n containing numbers from 1 to n+1.", "code": "def find_missing_number(A: list, n: int) -> int:\n    total = (n + 1) * (n + 2) // 2\n    return total - sum(A)", "task_id": "576_f3110040-a652-45e8-9930-ab2ddbc9ff0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find a pair of numbers in an array that add up to a given target.", "code": "def find_pair_with_sum(A: list, target: int) -> tuple:\n    seen = {}\n    for num in A:\n        if target - num in seen:\n            return (target - num, num)\n        seen[num] = True\n    return ()", "task_id": "576_f3f95ee8-bd9f-452d-bb38-baa7d1c34d5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two strings are anagrams of each other.", "code": "def is_anagram(A: str, B: str) -> bool:\n    return sorted(A) == sorted(B)", "task_id": "576_ec5dc1f9-7956-4196-940f-502c8a7f3570", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x.", "code": "def find_nth_non_multiple(x: int, n: int) -> int:\n    count = 0\n    i = 1\n    while True:\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n        i += 1", "task_id": "575_f3df4d96-d637-4824-893b-4f65408cbdc0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x within a given range [start, end].", "code": "def find_nth_non_multiple_in_range(x: int, n: int, start: int, end: int) -> int:\n    count = 0\n    for i in range(start, end + 1):\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n    return -1", "task_id": "575_fe5342f1-1887-4cb7-8f49-b8a22dafea1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n numbers in a sequence which are not multiples of x.", "code": "def find_nth_non_multiple_sum(x: int, n: int) -> int:\n    count = 0\n    total_sum = 0\n    i = 1\n    while count < n:\n        if i % x != 0:\n            total_sum += i\n            count += 1\n        i += 1\n    return total_sum", "task_id": "575_a040272e-34de-4872-9efb-f247ef562396", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the first n numbers in a sequence which are not multiples of x.", "code": "def find_nth_non_multiple_product(x: int, n: int) -> int:\n    count = 0\n    product = 1\n    i = 1\n    while count < n:\n        if i % x != 0:\n            product *= i\n            count += 1\n        i += 1\n    return product", "task_id": "575_9db9171c-b959-4f7d-89a9-8c7c2a2f91a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of the first n numbers in a sequence which are not multiples of x.", "code": "def find_nth_non_multiple_list(x: int, n: int) -> list:\n    count = 0\n    result = []\n    i = 1\n    while count < n:\n        if i % x != 0:\n            result.append(i)\n            count += 1\n        i += 1\n    return result", "task_id": "575_1d723b09-4b97-49d4-abeb-caca8e177589", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x, starting from the end of the sequence.", "code": "def find_nth_non_multiple_reverse(x: int, n: int) -> int:\n    count = 0\n    i = -1\n    while True:\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n        i -= 1", "task_id": "575_aa6e91f4-18df-415f-9178-aca14605730f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x, skipping every skip-th number.", "code": "def find_nth_non_multiple_with_skip(x: int, n: int, skip: int) -> int:\n    count = 0\n    skip_count = 0\n    i = 1\n    while True:\n        if i % x != 0:\n            skip_count += 1\n            if skip_count % skip != 0:\n                count += 1\n        if count == n:\n            return i\n        i += 1", "task_id": "575_981d429c-095b-4dc2-8028-0055f7e3e831", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x, considering only every step-th number.", "code": "def find_nth_non_multiple_with_step(x: int, n: int, step: int) -> int:\n    count = 0\n    i = 1\n    while True:\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n        i += step", "task_id": "575_52665ae3-5ba0-448e-aebb-23ed2140fbf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x, starting from a given offset.", "code": "def find_nth_non_multiple_with_offset(x: int, n: int, offset: int) -> int:\n    count = 0\n    i = offset\n    while True:\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n        i += 1", "task_id": "575_5884ad8d-3209-4073-93d4-a8beb8875c65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth number in a sequence which is not a multiple of x, but stop searching after a given limit.", "code": "def find_nth_non_multiple_with_limit(x: int, n: int, limit: int) -> int:\n    count = 0\n    for i in range(1, limit + 1):\n        if i % x != 0:\n            count += 1\n        if count == n:\n            return i\n    return -1", "task_id": "575_916e4e08-5c77-439f-ad1d-ea727a416b50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number n.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "577_403b4148-44b9-48a6-bfe7-49f51ddcfaab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string s.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "577_b1f9c741-237d-4264-ae22-7c6a7d8b2b6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number n is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "577_6b562ee5-9cb7-4a0c-85a4-128458ae41e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a", "task_id": "577_7c5d10ee-7eb9-4785-9c29-06f089f0f2fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string s is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "577_71ac1904-b29b-44fb-84be-f5e1627a9a04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers a and b.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "577_b53d25af-9a58-40f7-af2b-7e7baab368ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers a and b.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "577_8ca49246-e929-49c3-ba79-5138eb9e2976", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "577_1ab3a0f6-e7e8-41c7-a749-c3daefb81f9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string s.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "577_2c5aed14-e01d-44ec-b766-23d8710c050c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings s1 and s2 are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "577_3e105d87-9ae5-4537-b70f-4342aff8f53c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the difference between the elements of each pair is greater than a given number K.", "code": "def max_sum_pair_diff_greater_than_K(arr, N, K): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] - arr[i-1] > K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_6ff2c719-dae0-4afa-90ed-32ba9cbca580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where each pair consists of one even and one odd number.", "code": "def max_sum_pair_even_odd(arr, N): \n\tevens = [x for x in arr if x % 2 == 0] \n\todds = [x for x in arr if x % 2 != 0] \n\tevens.sort() \n\todds.sort() \n\tpairs = min(len(evens), len(odds)) \n\tsum_pairs = 0 \n\tfor i in range(pairs): \n\t\tsum_pairs += evens[-(i+1)] + odds[-(i+1)] \n\treturn sum_pairs", "task_id": "571_2def8832-9c7f-4478-9216-6fb858ee4223", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where each pair consists of at least one prime number.", "code": "def is_prime(n): \n\tif n <= 1: \n\t\treturn False \n\tfor i in range(2, int(n**0.5) + 1): \n\t\tif n % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef max_sum_pair_prime(arr, N): \n\tprimes = [x for x in arr if is_prime(x)] \n\tnon_primes = [x for x in arr if not is_prime(x)] \n\tprimes.sort() \n\tnon_primes.sort() \n\tsum_pairs = 0 \n\twhile primes and non_primes: \n\t\tsum_pairs += primes.pop() + non_primes.pop() \n\treturn sum_pairs", "task_id": "571_68f902f4-aeb8-4517-b718-d38ee976ff49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the sum of each pair is a multiple of a given number K.", "code": "def max_sum_pair_multiple_of_k(arr, N, K): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif ((arr[i] + arr[i-1]) % K == 0): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_9e82b1c2-b0bd-4fbf-98fa-496010e4f313", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the difference between the elements of each pair is even.", "code": "def max_sum_pair_adjacent_diff_even(arr, N): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif ((arr[i] - arr[i-1]) % 2 == 0): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_e088c12a-fb99-415e-b326-eeb251e76d62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the difference between the elements of each pair is odd.", "code": "def max_sum_pair_adjacent_diff_odd(arr, N): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif ((arr[i] - arr[i-1]) % 2 != 0): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_507555f6-7212-4f04-a68a-6862be7623b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the sum of each pair is greater than a given number K.", "code": "def max_sum_pair_greater_than_K(arr, N, K): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] + arr[i-1] > K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_5ee25a14-2168-43fe-bc5d-fba8df97efbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where the sum of each pair is less than a given number K.", "code": "def max_sum_pair_less_than_K(arr, N, K): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (arr[i] + arr[i-1] < K): \n\t\t\tif (i >= 2): \n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\t\t\telse: \n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_8111ed9b-4748-43dd-9d50-3d326bc98b25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where no two elements of a pair are adjacent in the original array.", "code": "def max_sum_pair_no_adjacent(arr, N): \n\tarr.sort() \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (i >= 2): \n\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_e52fbdf2-d9af-4abf-b5f4-c0df13ec6b09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where all elements in the pairs are distinct.", "code": "def max_sum_pair_distinct(arr, N): \n\tarr = list(set(arr)) \n\tarr.sort() \n\tN = len(arr) \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (i >= 2): \n\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_326e5762-5ee4-4385-b7f9-9a9604230a92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers where all elements in the pairs are non-negative.", "code": "def max_sum_pair_non_negative(arr, N): \n\tarr = [x for x in arr if x >= 0] \n\tarr.sort() \n\tN = len(arr) \n\tdp = [0] * N \n\tdp[0] = 0\n\tfor i in range(1, N): \n\t\tdp[i] = dp[i-1] \n\t\tif (i >= 2): \n\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]) \n\treturn dp[N - 1]", "task_id": "571_d90032a2-f622-44f4-ab41-04f268c346b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the common elements in the given two tuples.", "code": "def find_common_elements(tup1, tup2):\n  res = tuple(set(tup1) & set(tup2))\n  return res", "task_id": "579_54ef58cc-9b94-4120-948c-b00d72216b79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the elements that are unique to each tuple (not common) in the given two tuples.", "code": "def find_unique_elements(tup1, tup2):\n  res = tuple(set(tup1).symmetric_difference(set(tup2)))\n  return res", "task_id": "579_7b962c6a-4c1f-4b5c-8bd6-04aeeda14e9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two tuples and return a sorted tuple.", "code": "def merge_and_sort_tuples(tup1, tup2):\n  res = tuple(sorted(tup1 + tup2))\n  return res", "task_id": "579_5ef81c6a-692d-4ced-86c2-3cea34b3a660", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in the given two tuples.", "code": "def find_max_in_tuples(tup1, tup2):\n  res = max(max(tup1), max(tup2))\n  return res", "task_id": "579_e9163629-7d93-4d79-a078-3202313a01b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in the given two tuples.", "code": "def find_min_in_tuples(tup1, tup2):\n  res = min(min(tup1), min(tup2))\n  return res", "task_id": "579_17fb9264-bec6-4d4c-b0d1-a774107cc07f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple that contains the element-wise sum of the given two tuples.", "code": "def tuple_elementwise_sum(tup1, tup2):\n  res = tuple(a + b for a, b in zip(tup1, tup2))\n  return res", "task_id": "579_cd51396a-38c6-4dcc-8fa9-95fe77a00801", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple that contains the element-wise product of the given two tuples.", "code": "def tuple_elementwise_product(tup1, tup2):\n  res = tuple(a * b for a, b in zip(tup1, tup2))\n  return res", "task_id": "579_c6286eed-a0b1-401e-a389-ab2cb4134929", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple with the elements in reverse order.", "code": "def reverse_tuple_elements(tup):\n  res = tup[::-1]\n  return res", "task_id": "579_50701152-963b-491e-b5f9-3bf4fe85daf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple of key-value pairs into a dictionary.", "code": "def tuple_to_dict(tup):\n  res = dict(tup)\n  return res", "task_id": "579_add1b360-98fa-4672-8861-93c648dd3691", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a tuple.", "code": "def remove_duplicates_from_tuple(tup):\n  res = tuple(set(tup))\n  return res", "task_id": "579_6bd10be4-54bf-4819-982d-9c21cfa1d8b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists by taking alternate elements from each list.", "code": "def merge_alternate(list1, list2):\n    result = [el for pair in zip(list1, list2) for el in pair]\n    return result", "task_id": "578_2dd9588a-7249-405d-b5be-653162cab975", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length with a separator between each pair of elements.", "code": "def interleave_with_separator(list1, list2, separator):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, separator, b])\n    return result", "task_id": "578_d26c03f7-0017-4c18-8ec1-c30b1b82860c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists of different lengths by taking alternate elements and padding the shorter list with a given value.", "code": "def merge_lists_with_padding(list1, list2, padding):\n    max_len = max(len(list1), len(list2))\n    list1.extend([padding] * (max_len - len(list1)))\n    list2.extend([padding] * (max_len - len(list2)))\n    result = [el for pair in zip(list1, list2) for el in pair]\n    return result", "task_id": "578_fe475a0e-a3b2-443c-8c00-4c985714ceac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length, but take elements from the second list in reverse order.", "code": "def interleave_reverse(list1, list2):\n    result = [el for pair in zip(list1, reversed(list2)) for el in pair]\n    return result", "task_id": "578_088f3efc-a508-4143-9f4d-ba8642514bd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and double each element from the second list.", "code": "def interleave_and_double(list1, list2):\n    result = [el for pair in zip(list1, [2 * x for x in list2]) for el in pair]\n    return result", "task_id": "578_87db4b44-dccd-4b39-9b6a-948170c2f8e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and include the index of each element in the resulting list.", "code": "def interleave_with_indices(list1, list2):\n    result = []\n    for i, (a, b) in enumerate(zip(list1, list2)):\n        result.extend([(i, a), (i, b)])\n    return result", "task_id": "578_0b378e2a-1372-4ccc-8930-96c8f5dacfb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and include the sum of each pair of elements in the resulting list.", "code": "def interleave_and_sum(list1, list2):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, b, a + b])\n    return result", "task_id": "578_fb582b98-0a4d-4b1f-ad84-a48f6200faf0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and include the square of each element from the first list in the resulting list.", "code": "def interleave_and_square(list1, list2):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, b, a ** 2])\n    return result", "task_id": "578_765cde61-19f5-4036-bb60-0a8c481c8176", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and include the product of each pair of elements in the resulting list.", "code": "def interleave_and_multiply(list1, list2):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, b, a * b])\n    return result", "task_id": "578_b826a089-ea61-4dc6-8e23-30168788b932", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to interleave two lists of the same length and include the concatenation of each pair of elements as strings in the resulting list.", "code": "def interleave_and_concat(list1, list2):\n    result = []\n    for a, b in zip(list1, list2):\n        result.extend([a, b, str(a) + str(b)])\n    return result", "task_id": "578_8226a155-2a68-454d-954b-cbc02727ba77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a square pyramid given the base length and height.", "code": "def volume_of_square_pyramid(b: float, h: float) -> float:\n    return (1/3) * b**2 * h", "task_id": "581_c2d56df2-7d71-43ca-8aef-063ed2f98056", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cube given the side length.", "code": "def surface_area_of_cube(a: float) -> float:\n    return 6 * a**2", "task_id": "581_aa11c48a-d52a-4769-8956-49bb322f8adf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cube given the side length.", "code": "def volume_of_cube(a: float) -> float:\n    return a**3", "task_id": "581_e11d5055-798d-4962-8bae-97f852e17d3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cylinder given the radius and height.", "code": "def surface_area_of_cylinder(r: float, h: float) -> float:\n    return 2 * 3.14159 * r * (r + h)", "task_id": "581_919934a6-b016-4e6c-8f3a-29c77aefc869", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cylinder given the radius and height.", "code": "def volume_of_cylinder(r: float, h: float) -> float:\n    return 3.14159 * r**2 * h", "task_id": "581_c8b8767e-31d8-4932-98a3-3646c7677e8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a cone given the radius and slant height.", "code": "def surface_area_of_cone(r: float, s: float) -> float:\n    return 3.14159 * r * (r + s)", "task_id": "581_6e1302b8-6602-4704-8b2b-9a3d1cf4f292", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a cone given the radius and height.", "code": "def volume_of_cone(r: float, h: float) -> float:\n    return (1/3) * 3.14159 * r**2 * h", "task_id": "581_ee279e6d-c172-4f3d-be31-48f0aa15537a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a sphere given the radius.", "code": "def surface_area_of_sphere(r: float) -> float:\n    return 4 * 3.14159 * r**2", "task_id": "581_42ac3406-001d-4e3b-89d3-e9062edac2e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the volume of a sphere given the radius.", "code": "def volume_of_sphere(r: float) -> float:\n    return (4/3) * 3.14159 * r**3", "task_id": "581_9c590c9e-e17c-4c4a-b81f-472cbb8fdfe4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the surface area of a rectangular prism given the length, width, and height.", "code": "def surface_area_of_rectangular_prism(l: float, w: float, h: float) -> float:\n    return 2 * (l*w + l*h + w*h)", "task_id": "581_d8b05215-c8a7-4c38-95bb-e62bf49ab761", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a list is empty or not.", "code": "def is_list_empty(lst: list) -> bool:\n    return len(lst) == 0", "task_id": "582_842b21db-b0d5-4a1f-aa89-edd87c0e0e81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a set is empty or not.", "code": "def is_set_empty(s: set) -> bool:\n    return len(s) == 0", "task_id": "582_69b418ba-ac07-44fe-b0bf-66cd9bab2a0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is empty or not.", "code": "def is_string_empty(s: str) -> bool:\n    return len(s) == 0", "task_id": "582_8ca6474e-ae12-418d-95a6-74c1f0ec11f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a tuple is empty or not.", "code": "def is_tuple_empty(t: tuple) -> bool:\n    return len(t) == 0", "task_id": "582_af0f18c0-bf4c-4afb-9afc-ccd0a1eaa615", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a queue (represented as a list) is empty or not.", "code": "def is_queue_empty(q: list) -> bool:\n    return len(q) == 0", "task_id": "582_034e750b-b6a7-4687-9a5c-092305e52e66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a stack (represented as a list) is empty or not.", "code": "def is_stack_empty(st: list) -> bool:\n    return len(st) == 0", "task_id": "582_0100498c-957b-4944-b3a1-17b06b312936", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given key is present in a dictionary.", "code": "def is_dict_key_present(d: dict, key: str) -> bool:\n    return key in d", "task_id": "582_c2ab9212-5869-4afd-9527-4752e3a1b206", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given element is present in a list.", "code": "def is_list_element_present(lst: list, element: int) -> bool:\n    return element in lst", "task_id": "582_fb863e72-e04d-4787-a7fc-35ea74c7448c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given element is present in a set.", "code": "def is_set_element_present(s: set, element: int) -> bool:\n    return element in s", "task_id": "582_08bd06ca-c2e1-40b9-b76f-fb11f0bae275", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given element is present in a tuple.", "code": "def is_tuple_element_present(t: tuple, element: int) -> bool:\n    return element in t", "task_id": "582_e5fb0672-18f5-45f0-ad91-7e463e2fc255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the odd elements in the nested mixed tuple.", "code": "def odd_ele(test_tuple, odd_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (odd_ele(ele, odd_fnc), )\n\t\telif odd_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_odd(test_tuple):\n\tres = odd_ele(test_tuple, lambda x: x % 2 != 0)\n\treturn res", "task_id": "580_c7a2178f-5740-4ce5-807e-2b3aafa02474", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the positive elements in the nested mixed tuple.", "code": "def positive_ele(test_tuple, positive_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (positive_ele(ele, positive_fnc), )\n\t\telif positive_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_positive(test_tuple):\n\tres = positive_ele(test_tuple, lambda x: x > 0)\n\treturn res", "task_id": "580_da90b2c9-bece-47b1-86ec-333451543352", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the negative elements in the nested mixed tuple.", "code": "def negative_ele(test_tuple, negative_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (negative_ele(ele, negative_fnc), )\n\t\telif negative_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_negative(test_tuple):\n\tres = negative_ele(test_tuple, lambda x: x < 0)\n\treturn res", "task_id": "580_be137322-7145-4dfd-b085-3b384a27bd75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the string elements in the nested mixed tuple.", "code": "def string_ele(test_tuple, string_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (string_ele(ele, string_fnc), )\n\t\telif string_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_strings(test_tuple):\n\tres = string_ele(test_tuple, lambda x: isinstance(x, str))\n\treturn res", "task_id": "580_9efd7b6f-a594-40ba-a05d-6282c1c9e5ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the float elements in the nested mixed tuple.", "code": "def float_ele(test_tuple, float_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (float_ele(ele, float_fnc), )\n\t\telif float_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_floats(test_tuple):\n\tres = float_ele(test_tuple, lambda x: isinstance(x, float))\n\treturn res", "task_id": "580_f38c1501-d5c3-4694-a339-5aa1b52456fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the integer elements in the nested mixed tuple.", "code": "def integer_ele(test_tuple, integer_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (integer_ele(ele, integer_fnc), )\n\t\telif integer_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_integers(test_tuple):\n\tres = integer_ele(test_tuple, lambda x: isinstance(x, int))\n\treturn res", "task_id": "580_02660345-46c7-417d-b82a-796e946e322e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the uppercase string elements in the nested mixed tuple.", "code": "def uppercase_string_ele(test_tuple, uppercase_string_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (uppercase_string_ele(ele, uppercase_string_fnc), )\n\t\telif uppercase_string_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_uppercase_strings(test_tuple):\n\tres = uppercase_string_ele(test_tuple, lambda x: isinstance(x, str) and x.isupper())\n\treturn res", "task_id": "580_1efd7535-8ed8-492d-978e-a4dfd4f061e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the lowercase string elements in the nested mixed tuple.", "code": "def lowercase_string_ele(test_tuple, lowercase_string_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (lowercase_string_ele(ele, lowercase_string_fnc), )\n\t\telif lowercase_string_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_lowercase_strings(test_tuple):\n\tres = lowercase_string_ele(test_tuple, lambda x: isinstance(x, str) and x.islower())\n\treturn res", "task_id": "580_f535f0cf-b464-424a-a2ec-ec70c0375d14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the non-empty string elements in the nested mixed tuple.", "code": "def non_empty_string_ele(test_tuple, non_empty_string_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (non_empty_string_ele(ele, non_empty_string_fnc), )\n\t\telif non_empty_string_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_non_empty_strings(test_tuple):\n\tres = non_empty_string_ele(test_tuple, lambda x: isinstance(x, str) and x != '')\n\treturn res", "task_id": "580_11f8f048-11a4-4604-b0eb-527f79bbbff0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the non-zero integer elements in the nested mixed tuple.", "code": "def non_zero_integer_ele(test_tuple, non_zero_integer_fnc):\n\tres = tuple()\n\tfor ele in test_tuple:\n\t\tif isinstance(ele, tuple):\n\t\t\tres += (non_zero_integer_ele(ele, non_zero_integer_fnc), )\n\t\telif non_zero_integer_fnc(ele):\n\t\t\tres += (ele, )\n\treturn res\n\ndef extract_non_zero_integers(test_tuple):\n\tres = non_zero_integer_ele(test_tuple, lambda x: isinstance(x, int) and x != 0)\n\treturn res", "task_id": "580_0712f494-ab1e-4c46-a868-6b721cee3b83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "583_579b5924-3eb2-4bff-8e41-8cda6df8622a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a given number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "583_7b18091c-506f-4c35-ab01-82fb66e8fb77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n * n + sum_of_squares(n-1)", "task_id": "583_1af28148-f541-4f5a-9ea2-ec41022ae56a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "task_id": "583_1e0eb478-a194-405f-bcfc-f08fe97821df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "583_456458e7-dbcb-4d28-a510-baeceb234742", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the power of a number base raised to the exponent exp.", "code": "def power(base: int, exp: int) -> int:\n    if exp == 0:\n        return 1\n    else:\n        return base * power(base, exp-1)", "task_id": "583_80dbe1fd-bea3-4362-acdd-4d5e1dc19247", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)", "task_id": "583_47d087dc-10c8-47ab-959f-2d3618091009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    else:\n        return reverse_string(s[1:]) + s[0]", "task_id": "583_6cfd37a1-478d-48d7-9942-667591636e32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    else:\n        return s[0] == s[-1] and is_palindrome(s[1:-1])", "task_id": "583_e2dfbfed-d631-40e6-874f-4e13718990b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string s.", "code": "def count_vowels(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    elif s[0].lower() in 'aeiou':\n        return 1 + count_vowels(s[1:])\n    else:\n        return count_vowels(s[1:])", "task_id": "583_caa09895-e06c-4deb-82a1-05dc432ee16b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all dates in the format 'dd-mm-yyyy' in a given text using regex.", "code": "import re\ndef find_dates(text):\n    return [m.group(0) for m in re.finditer(r'\\b\\d{2}-\\d{2}-\\d{4}\\b', text)]", "task_id": "584_c86ab243-41aa-4313-a87d-1c28bfdf19cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all email addresses in a given text using regex.", "code": "import re\ndef find_emails(text):\n    return [m.group(0) for m in re.finditer(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+', text)]", "task_id": "584_f94bebbe-15c4-48f8-9cca-17da0ff59a03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all hashtags in a given text using regex.", "code": "import re\ndef find_hashtags(text):\n    return [m.group(0) for m in re.finditer(r'#\\w+', text)]", "task_id": "584_7d5959b7-1e01-4095-a924-2334abc32e07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all URLs in a given text using regex.", "code": "import re\ndef find_urls(text):\n    return [m.group(0) for m in re.finditer(r'https?://\\S+', text)]", "task_id": "584_f0ae70ef-8b94-4c77-b72b-06406b8a2099", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all phone numbers in the format '(xxx) xxx-xxxx' in a given text using regex.", "code": "import re\ndef find_phone_numbers(text):\n    return [m.group(0) for m in re.finditer(r'\\(\\d{3}\\) \\d{3}-\\d{4}', text)]", "task_id": "584_b37287ce-fa25-4918-a817-c263de13bf28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words that contain at least one vowel in a given text using regex.", "code": "import re\ndef find_words_with_vowels(text):\n    return [m.group(0) for m in re.finditer(r'\\b\\w*[aeiouAEIOU]+\\w*\\b', text)]", "task_id": "584_4a1737ee-e02c-463a-9b89-5d4b9fecb727", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all capitalized words in a given text using regex.", "code": "import re\ndef find_capitalized_words(text):\n    return [m.group(0) for m in re.finditer(r'\\b[A-Z][a-z]*\\b', text)]", "task_id": "584_04a7d864-f5ae-4bda-9bcc-ca7290747208", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all numbers in a given text using regex.", "code": "import re\ndef find_numbers(text):\n    return [m.group(0) for m in re.finditer(r'\\b\\d+\\b', text)]", "task_id": "584_1a4a2e1c-d91d-4c4f-9490-6694843afb96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all words starting with a consonant in a given text using regex.", "code": "import re\ndef find_words_starting_with_consonants(text):\n    return [m.group(0) for m in re.finditer(r'\\b[b-df-hj-np-tv-zB-DF-HJ-NP-TV-Z]\\w*\\b', text)]", "task_id": "584_8e0b0338-7f2d-4eda-b980-d25bf3357fa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all sentences in a given text using regex. Assume sentences end with a period.", "code": "import re\ndef find_sentences(text):\n    return [m.group(0) for m in re.finditer(r'[^.!?]*[.!?]', text)]", "task_id": "584_a5725677-1fdd-4b21-8c60-db4a7d45a356", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a string to a list of characters.", "code": "def string_to_list(s: str) -> list:\n    return list(s)", "task_id": "587_884bb8ae-4535-45fa-825f-dd8f52761723", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list to a set.", "code": "def list_to_set(lst: list) -> set:\n    return set(lst)", "task_id": "587_c8cab826-8dc6-4cbd-9131-95538a431b4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a list.", "code": "def tuple_to_list(tpl: tuple) -> list:\n    return list(tpl)", "task_id": "587_d72d77ab-2a90-403c-b6f5-d5eccc96d52b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of characters to a string.", "code": "def list_to_string(lst: list) -> str:\n    return ''.join(lst)", "task_id": "587_c2c910a9-5b80-4d14-a090-4eb294cf1f59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a set to a list.", "code": "def set_to_list(st: set) -> list:\n    return list(st)", "task_id": "587_c68b3f95-a7b9-403d-a529-c007a20ec5a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples (key, value) to a dictionary.", "code": "def list_to_dict(lst: list) -> dict:\n    return dict(lst)", "task_id": "587_a995eb85-51d2-442f-8dcb-b56d9850e644", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer to a string.", "code": "def int_to_string(n: int) -> str:\n    return str(n)", "task_id": "587_ae448c76-9117-439c-99bc-1721f177c3fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a float to an integer.", "code": "def float_to_int(f: float) -> int:\n    return int(f)", "task_id": "587_b73e8ab2-c415-451d-bd15-7020c9e5b866", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a string to an integer.", "code": "def string_to_int(s: str) -> int:\n    return int(s)", "task_id": "587_44803935-bb5b-47a7-a751-01f43994f6be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer to a float.", "code": "def int_to_float(n: int) -> float:\n    return float(n)", "task_id": "587_9203ff00-3635-4276-95f8-215d4c899471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n highest salaries from a given list of employees using heap queue algorithm.", "code": "import heapq\ndef top_n_salaries(employees, n):\n  top_salaries = heapq.nlargest(n, employees, key=lambda e: e['salary'])\n  return top_salaries", "task_id": "585_00141588-2284-49df-a28f-e97b3ff50877", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n highest scores from a given list of students using heap queue algorithm.", "code": "import heapq\ndef top_n_scores(students, n):\n  top_scores = heapq.nlargest(n, students, key=lambda s: s['score'])\n  return top_scores", "task_id": "585_d43598dc-0680-419d-9a25-fb96f82d97fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n oldest ages from a given list of people using heap queue algorithm.", "code": "import heapq\ndef top_n_ages(people, n):\n  top_ages = heapq.nlargest(n, people, key=lambda p: p['age'])\n  return top_ages", "task_id": "585_862009e7-0f2c-462f-ac31-7de57d9b59cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n highest grades from a given list of students using heap queue algorithm.", "code": "import heapq\ndef top_n_grades(students, n):\n  top_grades = heapq.nlargest(n, students, key=lambda s: s['grade'])\n  return top_grades", "task_id": "585_304d7da3-ac10-4339-a8d6-7c4a6645367d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n longest distances from a given list of cities using heap queue algorithm.", "code": "import heapq\ndef top_n_distances(cities, n):\n  top_distances = heapq.nlargest(n, cities, key=lambda c: c['distance'])\n  return top_distances", "task_id": "585_72c5f3fc-a53b-471c-9b61-f0b224e892b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n heaviest weights from a given list of objects using heap queue algorithm.", "code": "import heapq\ndef top_n_weights(objects, n):\n  top_weights = heapq.nlargest(n, objects, key=lambda o: o['weight'])\n  return top_weights", "task_id": "585_eb249364-0dee-40f4-a682-10415a8d988c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n most populated countries from a given list of countries using heap queue algorithm.", "code": "import heapq\ndef top_n_populations(countries, n):\n  top_populations = heapq.nlargest(n, countries, key=lambda c: c['population'])\n  return top_populations", "task_id": "585_c7e3ad1b-26d6-4bfd-8a57-8dd2b201e0b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n highest revenues from a given list of companies using heap queue algorithm.", "code": "import heapq\ndef top_n_revenues(companies, n):\n  top_revenues = heapq.nlargest(n, companies, key=lambda c: c['revenue'])\n  return top_revenues", "task_id": "585_043e58cf-f9e4-442d-8c3a-c6bde26f5bf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n fastest speeds from a given list of vehicles using heap queue algorithm.", "code": "import heapq\ndef top_n_speeds(vehicles, n):\n  top_speeds = heapq.nlargest(n, vehicles, key=lambda v: v['speed'])\n  return top_speeds", "task_id": "585_74cc2a82-12a9-486d-9956-8afd1d4051f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n highest prices from a given list of products using heap queue algorithm.", "code": "import heapq\ndef top_n_prices(products, n):\n  top_prices = heapq.nlargest(n, products, key=lambda p: p['price'])\n  return top_prices", "task_id": "585_ee494f71-e499-488a-9ff9-82e248ad7330", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the list to the right by k steps.", "code": "def rotate_list(arr, k):\n    k = k % len(arr)\n    return arr[-k:] + arr[:-k]", "task_id": "586_9eae1458-38e7-4072-8edd-f422c21824a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the first k elements of the list.", "code": "def reverse_first_k_elements(arr, k):\n    return arr[:k][::-1] + arr[k:]", "task_id": "586_13125adc-1ff4-4321-b55d-71a2e06ccbcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all zeros in the list to the end while maintaining the order of other elements.", "code": "def move_zeros_to_end(arr):\n    return [x for x in arr if x != 0] + [x for x in arr if x == 0]", "task_id": "586_04fbb17c-86c3-40fe-a882-28572f159d6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from the list while maintaining the order.", "code": "def remove_duplicates(arr):\n    seen = set()\n    return [x for x in arr if not (x in seen or seen.add(x))]", "task_id": "586_10fc64e7-5389-465a-b6d1-30a96da3fefb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array of size n containing numbers from 1 to n.", "code": "def find_missing_number(arr, n):\n    return n * (n + 1) // 2 - sum(arr)", "task_id": "586_88545af7-9e8a-4c55-afd4-a1df34556088", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the pair of elements in the list that have the maximum product.", "code": "def find_max_product_pair(arr):\n    max_product = float('-inf')\n    max_pair = (None, None)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    return max_pair", "task_id": "586_906c9a77-0bc7-4ec5-a7ee-c684091d566b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in the list.", "code": "def second_largest(arr):\n    first, second = float('-inf'), float('-inf')\n    for num in arr:\n        if num > first:\n            first, second = num, first\n        elif first > num > second:\n            second = num\n    return second", "task_id": "586_54ba8f3d-f5f4-4d9d-a302-4663f0429de8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "586_49377493-22b7-489d-a401-5b082ab675b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted lists into one sorted list.", "code": "def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)", "task_id": "586_c42a4492-943f-499c-b741-14e4f676d1fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find common elements between two lists.", "code": "def find_common_elements(list1, list2):\n    return list(set(list1) & set(list2))", "task_id": "586_6d03675d-98d9-42ec-b047-c912662aeba4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the largest and smallest value in a given array.", "code": "def sum_of_extremes(nums):\n    return max(nums) + min(nums)", "task_id": "588_897df6a1-876a-45e7-8544-60184931dbeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the largest and smallest value in a given array.", "code": "def product_of_extremes(nums):\n    return max(nums) * min(nums)", "task_id": "588_2c23c44d-baf8-480a-b814-cf63f02430ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest value in a given array.", "code": "def second_largest(nums):\n    nums = list(set(nums))\n    nums.sort()\n    return nums[-2]", "task_id": "588_06946b98-186a-4de0-8e7c-49e5408b7d46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second smallest value in a given array.", "code": "def second_smallest(nums):\n    nums = list(set(nums))\n    nums.sort()\n    return nums[1]", "task_id": "588_6929da03-8e7f-462e-9893-1e2bdc09b5cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the range (difference between the largest and smallest value) of a given array.", "code": "def range_of_array(nums):\n    return max(nums) - min(nums)", "task_id": "588_60600db3-95b5-43ad-b3f6-8c317b3cca54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of the largest and smallest value in a given array.", "code": "def average_of_extremes(nums):\n    return (max(nums) + min(nums)) / 2", "task_id": "588_861e439a-f34e-463e-a0e7-01d84203dfea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two largest values in a given array.", "code": "def sum_of_two_largest(nums):\n    nums.sort()\n    return nums[-1] + nums[-2]", "task_id": "588_873aa7e5-bef9-450d-9bd5-85a3c0fa6b59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the two smallest values in a given array.", "code": "def sum_of_two_smallest(nums):\n    nums.sort()\n    return nums[0] + nums[1]", "task_id": "588_875ac739-79fe-4f70-a3e9-c58eb76751f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the two largest values in a given array.", "code": "def product_of_two_largest(nums):\n    nums.sort()\n    return nums[-1] * nums[-2]", "task_id": "588_ab99ab9a-196b-4517-93b7-3dd410ab7b98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the two smallest values in a given array.", "code": "def product_of_two_smallest(nums):\n    nums.sort()\n    return nums[0] * nums[1]", "task_id": "588_fa00259b-7305-4c12-90b9-57bfffbe3fb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all even numbers between two given numbers.", "code": "def even_numbers(a, b):\n    return [i for i in range(a, b+1) if i % 2 == 0]", "task_id": "589_f966cb73-3355-4bc6-b2b6-ff1ace996b77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all prime numbers between two given numbers.", "code": "def prime_numbers(a, b):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return [i for i in range(a, b+1) if is_prime(i)]", "task_id": "589_3aec9799-42c4-47a4-8799-abf9cf3404f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all Fibonacci numbers between two given numbers.", "code": "def fibonacci_numbers(a, b):\n    fibs = [0, 1]\n    while fibs[-1] + fibs[-2] <= b:\n        fibs.append(fibs[-1] + fibs[-2])\n    return [x for x in fibs if a <= x <= b]", "task_id": "589_ebc8db1e-34af-4e2d-93a9-67b066194057", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all odd numbers between two given numbers.", "code": "def odd_numbers(a, b):\n    return [i for i in range(a, b+1) if i % 2 != 0]", "task_id": "589_23d9f8fd-212c-464a-8226-502a4c76d6d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all multiples of 3 between two given numbers.", "code": "def multiples_of_three(a, b):\n    return [i for i in range(a, b+1) if i % 3 == 0]", "task_id": "589_e2837857-b3e9-45f8-8c7d-8444b0b0435d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic numbers between two given numbers.", "code": "def palindromic_numbers(a, b):\n    return [i for i in range(a, b+1) if str(i) == str(i)[::-1]]", "task_id": "589_4e80509a-8e6b-4418-9dec-5dafe5eaf93b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the squares of all odd numbers between two given numbers.", "code": "def squares_of_odd_numbers(a, b):\n    return [i**2 for i in range(a, b+1) if i % 2 != 0]", "task_id": "589_f2315b37-d700-45ab-b87c-5b77423a2919", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cubes of all even numbers between two given numbers.", "code": "def cubes_of_even_numbers(a, b):\n    return [i**3 for i in range(a, b+1) if i % 2 == 0]", "task_id": "589_8c226d7a-244c-440a-adfd-b28f309da155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of all numbers between two given numbers.", "code": "def sum_of_digits(a, b):\n    return [sum(int(digit) for digit in str(i)) for i in range(a, b+1)]", "task_id": "589_b613347d-5cce-489e-8431-133f76392120", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of all numbers between two given numbers.", "code": "import math\n\ndef factorial_numbers(a, b):\n    return [math.factorial(i) for i in range(a, b+1)]", "task_id": "589_e74c3ef8-9a62-4d36-9f36-17eaeec1b755", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a temperature from Celsius to Fahrenheit.", "code": "def convert_to_fahrenheit(celsius: float) -> float:\n    return (celsius * 9/5) + 32", "task_id": "590_50d41bce-6e54-48d9-be49-00fe3b897573", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle given its radius.", "code": "import math\n\ndef calculate_area(radius: float) -> float:\n    return math.pi * radius * radius", "task_id": "590_3529be9f-296a-487d-ad82-5af14111a03a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "590_94cf435e-7f49-4bff-a7a0-a12900cc9d41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "590_b6275ea9-5273-4b87-b024-7152b40edac9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    return sum(i**2 for i in range(1, n+1))", "task_id": "590_add7d142-b02c-46e1-bba2-5f175fe6b4cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n+1):\n        a, b = b, a + b\n    return b", "task_id": "590_0b7c4a6c-6426-412f-8e7c-2702839b128d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "590_1c2e82d7-4ab8-4e16-9c51-5a238192f4a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "590_f60f2640-14e2-4f0e-9366-c36926f132b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "task_id": "590_8d19b7e7-2cbf-4d97-8726-5fc47d2d1bf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "590_15dfd5ab-3815-44d2-99ce-824aacc79d68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements in the middle of a list, leaving the first and last elements unchanged.", "code": "def reverse_middle(lst):\n    if len(lst) <= 2:\n        return lst\n    return [lst[0]] + lst[1:-1][::-1] + [lst[-1]]", "task_id": "591_2d84ea5c-1696-4d64-8139-b34ead7bba0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap every pair of adjacent elements in a list.", "code": "def swap_adjacent(lst):\n    for i in range(0, len(lst)-1, 2):\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    return lst", "task_id": "591_413d3fb8-0b63-4d6c-aa66-bca11d8bc447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the right by k positions.", "code": "def rotate_right(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]", "task_id": "591_6cab57d3-7d00-450a-8642-0a4f2ed57118", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a list while preserving the order of the remaining elements.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "task_id": "591_abdc3a47-2229-4a8e-9698-93cf3c16e768", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of sums of adjacent pairs of elements in the input list.", "code": "def sum_pairs(lst):\n    return [lst[i] + lst[i+1] for i in range(len(lst)-1)]", "task_id": "591_d88f7c3b-94ba-4392-8c86-21474ee41483", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum and minimum elements in a list and return them as a tuple.", "code": "def find_max_min(lst):\n    return (max(lst), min(lst))", "task_id": "591_5021f96c-3cab-44cd-927f-de6a6da52eef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of cumulative sums of the elements in the input list.", "code": "def cumulative_sum(lst):\n    cum_sum = 0\n    result = []\n    for num in lst:\n        cum_sum += num\n        result.append(cum_sum)\n    return result", "task_id": "591_ffc8c642-f728-4950-84f7-8c93afbbfcc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all even numbers in a list with the string 'even'.", "code": "def replace_even(lst):\n    return ['even' if x % 2 == 0 else x for x in lst]", "task_id": "591_7788b463-df30-4964-9499-f03f6627b841", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in a list.", "code": "def second_largest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2]", "task_id": "591_c40ab2df-fa70-4001-9d55-d7e33839e1a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values.", "code": "def count_occurrences(lst):\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n    return counts", "task_id": "591_18da2326-46fc-4481-a910-a9de2908100f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove trailing zeroes from an IP address.", "code": "import re\ndef remove_trailing_zeroes(ip):\n    string = re.sub('0*\\.', '.', ip)\n    return string", "task_id": "593_cde6647d-a0fe-48b8-8544-70b1612992dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove both leading and trailing zeroes from an IP address.", "code": "import re\ndef remove_leading_and_trailing_zeroes(ip):\n    string = re.sub('(^0*|0*$)', '', ip)\n    return string", "task_id": "593_fe2e3142-f2a8-422b-91bd-43dc37aa00a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove zeroes from the middle of each octet in an IP address.", "code": "import re\ndef remove_zeroes_from_middle(ip):\n    string = re.sub('(?<=\\d)0+(?=\\d)', '', ip)\n    return string", "task_id": "593_0395a2cf-a1bf-4576-971b-a6cec3d23a13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all zeroes and dots from an IP address.", "code": "import re\ndef remove_zeroes_and_dots(ip):\n    string = re.sub('[0\\.]', '', ip)\n    return string", "task_id": "593_2571a53c-31de-4234-888f-051c67eaa60e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all zeroes in an IP address with ones.", "code": "import re\ndef replace_zeroes_with_ones(ip):\n    string = re.sub('0', '1', ip)\n    return string", "task_id": "593_0f7f2b6b-b229-4c8d-a9d9-da1aa54aff32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove leading zeroes from each octet in an IP address.", "code": "import re\ndef remove_leading_zeroes_from_octets(ip):\n    string = re.sub('\\b0+(\\d)', '\\1', ip)\n    return string", "task_id": "593_8b0b94ab-0ee3-48ea-a414-ee2c91d1e672", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all zeroes from an IP address and then reverse the string.", "code": "import re\ndef remove_zeroes_and_reverse(ip):\n    string = re.sub('0', '', ip)\n    return string[::-1]", "task_id": "593_af458dd6-e2fd-4c48-8190-273dc329c00e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all zeroes from an IP address and convert the string to uppercase.", "code": "import re\ndef remove_zeroes_and_uppercase(ip):\n    string = re.sub('0', '', ip)\n    return string.upper()", "task_id": "593_96f4b6b2-3a1d-4696-a67f-e8c0f1b71767", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all zeroes from an IP address and add a prefix 'IP:' to the string.", "code": "import re\ndef remove_zeroes_and_add_prefix(ip):\n    string = re.sub('0', '', ip)\n    return 'IP:' + string", "task_id": "593_1cef6349-85ef-4885-bcdc-395075006b37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all zeroes from an IP address and add a suffix ':END' to the string.", "code": "import re\ndef remove_zeroes_and_add_suffix(ip):\n    string = re.sub('0', '', ip)\n    return string + ':END'", "task_id": "593_c64da1e9-15d6-4c04-8033-07ee57598805", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number of a given list.", "code": "def sum_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return first_even + first_odd", "task_id": "594_9a3b71eb-06a8-4e2a-b79f-00acb803a3ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first even and odd number of a given list.", "code": "def product_first_even_odd(list1):\n    first_even = next((el for el in list1 if el%2==0), 1)\n    first_odd = next((el for el in list1 if el%2!=0), 1)\n    return first_even * first_odd", "task_id": "594_31ff8426-ed49-4b1f-a74e-b8e7af57a66b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of the last even and odd number of a given list.", "code": "def diff_last_even_odd(list1):\n    last_even = next((el for el in reversed(list1) if el%2==0), -1)\n    last_odd = next((el for el in reversed(list1) if el%2!=0), -1)\n    return last_even - last_odd", "task_id": "594_4a835ae0-efb8-495f-870f-e5455eb2c438", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the last even and odd number of a given list.", "code": "def sum_last_even_odd(list1):\n    last_even = next((el for el in reversed(list1) if el%2==0), 0)\n    last_odd = next((el for el in reversed(list1) if el%2!=0), 0)\n    return last_even + last_odd", "task_id": "594_b1db029a-dd11-4335-b0a8-3cdbc1fb9365", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even and odd numbers in a given list.", "code": "def count_even_odd(list1):\n    evens = sum(1 for el in list1 if el%2==0)\n    odds = sum(1 for el in list1 if el%2!=0)\n    return (evens, odds)", "task_id": "594_4c25bddb-8e2a-4976-9979-a74eaf37c8d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the indices of the first even and odd number in a given list.", "code": "def first_even_odd_indices(list1):\n    first_even_index = next((i for i, el in enumerate(list1) if el%2==0), -1)\n    first_odd_index = next((i for i, el in enumerate(list1) if el%2!=0), -1)\n    return (first_even_index, first_odd_index)", "task_id": "594_08ee028d-eaf0-4c16-83bd-437632e4a50e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all even and odd numbers in a given list.", "code": "def sum_all_even_odd(list1):\n    sum_even = sum(el for el in list1 if el%2==0)\n    sum_odd = sum(el for el in list1 if el%2!=0)\n    return (sum_even, sum_odd)", "task_id": "594_f1803199-3f20-4baf-9fcd-2901edfc730b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of the second even and odd number of a given list.", "code": "def diff_second_even_odd(list1):\n    evens = [el for el in list1 if el%2==0]\n    odds = [el for el in list1 if el%2!=0]\n    second_even = evens[1] if len(evens) > 1 else -1\n    second_odd = odds[1] if len(odds) > 1 else -1\n    return second_even - second_odd", "task_id": "594_56b1150e-f800-4887-a5f0-3e8a1a5d3ca5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the second even and odd number of a given list.", "code": "def sum_second_even_odd(list1):\n    evens = [el for el in list1 if el%2==0]\n    odds = [el for el in list1 if el%2!=0]\n    second_even = evens[1] if len(evens) > 1 else 0\n    second_odd = odds[1] if len(odds) > 1 else 0\n    return second_even + second_odd", "task_id": "594_d7f486d1-0ca6-4929-b87d-7ca7c2c9eb3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum and difference of the first even and odd number of a given list.", "code": "def first_even_odd_sum_diff(list1):\n    first_even = next((el for el in list1 if el%2==0), 0)\n    first_odd = next((el for el in list1 if el%2!=0), 0)\n    return (first_even + first_odd, first_even - first_odd)", "task_id": "594_0ccb9093-cd13-46f2-8375-ada4aa0aa33a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in a given tuple.", "code": "def count_elements(t: tuple) -> int:\n    return len(t)", "task_id": "596_321213c9-5a22-4ab9-852b-3556be122bd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all integer elements in a given tuple.", "code": "def sum_tuple_elements(t: tuple) -> int:\n    return sum(t)", "task_id": "596_908b9999-bb00-415a-adca-2cec3b88688f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple to a list.", "code": "def tuple_to_list(t: tuple) -> list:\n    return list(t)", "task_id": "596_f1397a33-9ade-4917-a770-9d5b81ffff3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in a given tuple of integers.", "code": "def max_tuple_element(t: tuple) -> int:\n    return max(t)", "task_id": "596_7c139f70-4150-407b-934d-ed6995948cb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the elements of a given tuple.", "code": "def reverse_tuple(t: tuple) -> tuple:\n    return t[::-1]", "task_id": "596_bfebfafb-4780-47d3-9aa6-79cde730e22a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two given tuples.", "code": "def concat_tuples(t1: tuple, t2: tuple) -> tuple:\n    return t1 + t2", "task_id": "596_f6670066-0209-4581-b787-2cbf5f2c6aa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given element exists in a tuple.", "code": "def tuple_contains(t: tuple, element: int) -> bool:\n    return element in t", "task_id": "596_33b4756f-39df-4d83-b55d-c7b34a9d4f83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a given tuple to a string.", "code": "def tuple_to_string(t: tuple) -> str:\n    return str(t)", "task_id": "596_02d77b7b-8bc7-4693-9900-c8b320269494", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of a given element in a tuple.", "code": "def tuple_index(t: tuple, element: int) -> int:\n    return t.index(element)", "task_id": "596_11f0cc66-23fb-4915-9a46-836212bb7fdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the unique elements of a given tuple.", "code": "def unique_elements(t: tuple) -> set:\n    return set(t)", "task_id": "596_198c4963-0993-4712-8461-2f6d12a6c131", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of binomial coefficients for a given n.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_squares_of_binomial_coeff(n):\n    total = 0\n    for k in range(n + 1):\n        coeff = binomial_coeff(n, k)\n        total += coeff * coeff\n    return total", "task_id": "592_6617fefb-c72f-465e-8d03-a2c5b39b10df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even binomial coefficients for a given n.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_even_binomial_coeff(n):\n    total = 0\n    for k in range(0, n + 1, 2):\n        total += binomial_coeff(n, k)\n    return total", "task_id": "592_3f19bad2-a3f4-4cc8-becd-4103778a1ada", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd binomial coefficients for a given n.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_odd_binomial_coeff(n):\n    total = 0\n    for k in range(1, n + 1, 2):\n        total += binomial_coeff(n, k)\n    return total", "task_id": "592_55825ccf-5b02-4cdc-9cb5-7500c87aa5c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all binomial coefficients for a given n.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef product_of_binomial_coeff(n):\n    product = 1\n    for k in range(n + 1):\n        product *= binomial_coeff(n, k)\n    return product", "task_id": "592_47b22e90-5f5a-4af6-abbf-90d9c184c9f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n that are divisible by k.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_binomial_coeff_divisible_by_k(n, k):\n    total = 0\n    for i in range(n + 1):\n        coeff = binomial_coeff(n, i)\n        if coeff % k == 0:\n            total += coeff\n    return total", "task_id": "592_314514af-c2d4-4730-87db-c6b602fa5888", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n that are greater than k.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_binomial_coeff_greater_than_k(n, k):\n    total = 0\n    for i in range(n + 1):\n        coeff = binomial_coeff(n, i)\n        if coeff > k:\n            total += coeff\n    return total", "task_id": "592_52c567be-1c14-4630-9b93-1eed3f0642ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n that are less than k.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_binomial_coeff_less_than_k(n, k):\n    total = 0\n    for i in range(n + 1):\n        coeff = binomial_coeff(n, i)\n        if coeff < k:\n            total += coeff\n    return total", "task_id": "592_a073cebc-818a-4b4e-bc2c-c7dddadb2d7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n at prime indices.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_binomial_coeff_at_prime_indices(n):\n    total = 0\n    for i in range(n + 1):\n        if is_prime(i):\n            total += binomial_coeff(n, i)\n    return total", "task_id": "592_f41eb32c-d7e7-4edb-a11f-2701c8269829", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n at even indices.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_binomial_coeff_at_even_indices(n):\n    total = 0\n    for i in range(0, n + 1, 2):\n        total += binomial_coeff(n, i)\n    return total", "task_id": "592_608f9f2d-bdd9-4bda-942f-d37aa44ee930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all binomial coefficients for a given n at odd indices.", "code": "def binomial_coeff(n, k):\n    C = [0] * (k + 1)\n    C[0] = 1\n    for i in range(1, n + 1):\n        for j in range(min(i, k), 0, -1):\n            C[j] = C[j] + C[j - 1]\n    return C[k]\n\ndef sum_of_binomial_coeff_at_odd_indices(n):\n    total = 0\n    for i in range(1, n + 1, 2):\n        total += binomial_coeff(n, i)\n    return total", "task_id": "592_2c6899b6-8422-4c9e-b115-c58b0976cd41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of bit flips required to convert one binary string to another.", "code": "def min_flips_to_convert(str1: str, str2: str) -> int:\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] != str2[i]:\n            count += 1\n    return count", "task_id": "595_3b4d7db3-55a8-4084-a7a9-146472e5d917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to sort an array of integers.", "code": "def min_swaps_to_sort(arr: list) -> int:\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key = lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arrpos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "task_id": "595_39cf6b0d-467a-4715-927b-972f4ab9c065", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to convert a string into a palindrome.", "code": "def min_swaps_to_palindrome(s: str) -> int:\n    def is_palindrome_possible(s):\n        return sum(v % 2 for v in collections.Counter(s).values()) <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        left, right = i, n - i - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            right = n - i - 1\n        for j in range(right, n - i - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "595_a0284aac-5c45-4197-8484-b708265e88f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to group all 1's together in a binary array.", "code": "def min_swaps_to_group_ones(arr: list) -> int:\n    total_ones = sum(arr)\n    max_ones_in_window = 0\n    current_ones_in_window = 0\n    for i in range(len(arr)):\n        current_ones_in_window += arr[i]\n        if i >= total_ones:\n            current_ones_in_window -= arr[i - total_ones]\n        max_ones_in_window = max(max_ones_in_window, current_ones_in_window)\n    return total_ones - max_ones_in_window", "task_id": "595_abd56be7-c15e-4949-8b37-1091552e3497", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make two strings anagrams of each other.", "code": "def min_swaps_to_make_anagram(s1: str, s2: str) -> int:\n    if sorted(s1) != sorted(s2):\n        return -1\n    count = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            for j in range(i + 1, len(s1)):\n                if s1[j] == s2[i]:\n                    s1[i], s1[j] = s1[j], s1[i]\n                    count += 1\n                    break\n    return count", "task_id": "595_d398ccb4-ad44-4980-87ee-cbc6571859cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make two arrays equal.", "code": "def min_swaps_to_make_equal(arr1: list, arr2: list) -> int:\n    if sorted(arr1) != sorted(arr2):\n        return -1\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            for j in range(i + 1, len(arr1)):\n                if arr1[j] == arr2[i]:\n                    arr1[i], arr1[j] = arr1[j], arr1[i]\n                    count += 1\n                    break\n    return count", "task_id": "595_c6764bf2-85db-47d4-8918-47e0a243d57b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make a string a palindrome.", "code": "def min_swaps_to_make_palindrome(s: str) -> int:\n    def is_palindrome_possible(s):\n        return sum(v % 2 for v in collections.Counter(s).values()) <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        left, right = i, n - i - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            right = n - i - 1\n        for j in range(right, n - i - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "595_5fa2b1ed-0e4d-46df-bf8a-2f271df06523", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make a string a palindrome.", "code": "def min_swaps_to_make_palindrome(s: str) -> int:\n    def is_palindrome_possible(s):\n        return sum(v % 2 for v in collections.Counter(s).values()) <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        left, right = i, n - i - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            right = n - i - 1\n        for j in range(right, n - i - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "595_043a9766-59f1-4edc-b8c4-6ce39255f295", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make a string a palindrome.", "code": "def min_swaps_to_make_palindrome(s: str) -> int:\n    def is_palindrome_possible(s):\n        return sum(v % 2 for v in collections.Counter(s).values()) <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        left, right = i, n - i - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            right = n - i - 1\n        for j in range(right, n - i - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "595_4d669b83-5c01-499f-8c1e-76e0166f61b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the minimum number of swaps required to make a string a palindrome.", "code": "def min_swaps_to_make_palindrome(s: str) -> int:\n    def is_palindrome_possible(s):\n        return sum(v % 2 for v in collections.Counter(s).values()) <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    count = 0\n    for i in range(n // 2):\n        left, right = i, n - i - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            right = n - i - 1\n        for j in range(right, n - i - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "595_e7c2ee14-ef59-4598-ad21-652b4a2a797f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "598_1b7a6f58-b8e8-4cad-8ad1-3ce6450d392d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "598_bdac4e8c-713e-4893-aae5-0bbbdf302812", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "598_4654ed5c-9169-437d-b7c6-8d59e45e99e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the factorial of the given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result", "task_id": "598_b0acc67c-74eb-4d52-bae7-00bbc4cff170", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square or not.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "598_b8e51e12-92ff-4f99-986b-188dbca4156f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the reverse of the given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "598_d78f5104-0b6f-4012-8ab4-3bf592a7a48e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of the digits of the given number.", "code": "def sum_of_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "598_4a55e6ce-1fb7-41fe-93c5-47deec5ff6b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "598_6d7ea57b-0cab-4c36-937d-7bc3f9ad1846", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the greatest common divisor (GCD) of the two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "598_0ea890fb-818c-4cc7-9681-e341b9ae2ce9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a happy number or not.", "code": "def is_happy_number(n: int) -> bool:\n    def get_next(number):\n        total_sum = 0\n        while number > 0:\n            number, digit = divmod(number, 10)\n            total_sum += digit ** 2\n        return total_sum\n\n    seen = set()\n    while n != 1 and n not in seen:\n        seen.add(n)\n        n = get_next(n)\n    return n == 1", "task_id": "598_2823f039-5907-4868-9eb4-51f980a52741", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n    total = 0\n    for value in range(1, n + 1):\n        total += value ** 2\n    return total", "task_id": "599_6fe80e60-c643-4341-aed0-b73f6dbc386e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    total = 0\n    for value in range(1, n + 1):\n        total += value ** 3\n    return total", "task_id": "599_5ba97700-4732-411b-8da9-772adf6fb8ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first n natural numbers.", "code": "def product_of_naturals(n):\n    product = 1\n    for value in range(1, n + 1):\n        product *= value\n    return product", "task_id": "599_b51a0d72-e8f0-4b5a-80eb-7649ec631f39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n):\n    total = 0\n    for value in range(1, n + 1):\n        total += 2 * value\n    return total", "task_id": "599_73f9bd97-92c0-4247-90fc-f5c641842d7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n):\n    total = 0\n    for value in range(n):\n        total += 2 * value + 1\n    return total", "task_id": "599_310effcc-578b-43d2-be77-02a538e445bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum and product of the first n natural numbers.", "code": "def sum_and_product(n):\n    total = 0\n    product = 1\n    for value in range(1, n + 1):\n        total += value\n        product *= value\n    return (total, product)", "task_id": "599_f06505e8-afa0-4d9a-accd-55062b1aae57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n multiples of 3.", "code": "def sum_of_multiples_of_three(n):\n    total = 0\n    for value in range(1, n + 1):\n        total += 3 * value\n    return total", "task_id": "599_af1898b7-f3d5-4b1e-a457-89f0eb265944", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    total = 0\n    for value in range(1, n + 1):\n        total += factorial(value)\n    return total", "task_id": "599_891917d1-6876-4307-8834-2a0428888d52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n):\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "599_d0fb24bf-96c8-4544-80fa-2b52928bf0cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n natural numbers each raised to the power of p.", "code": "def sum_of_powers(n, p):\n    total = 0\n    for value in range(1, n + 1):\n        total += value ** p\n    return total", "task_id": "599_8306a1d2-ca07-4291-808f-7d1487fd596f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest element from the given two sorted arrays.", "code": "def find_kth_largest(arr1, arr2, m, n, k):\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\treturn sorted1[-k]", "task_id": "597_f9769471-ac97-4798-ab9f-abf3a84be018", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of the given two sorted arrays.", "code": "def find_median(arr1, arr2, m, n):\n\tsorted1 = [0] * (m + n)\n\ti = 0\n\tj = 0\n\td = 0\n\twhile (i < m and j < n):\n\t\tif (arr1[i] < arr2[j]):\n\t\t\tsorted1[d] = arr1[i]\n\t\t\ti += 1\n\t\telse:\n\t\t\tsorted1[d] = arr2[j]\n\t\t\tj += 1\n\t\td += 1\n\twhile (i < m):\n\t\tsorted1[d] = arr1[i]\n\t\td += 1\n\t\ti += 1\n\twhile (j < n):\n\t\tsorted1[d] = arr2[j]\n\t\td += 1\n\t\tj += 1\n\tmid = (m + n) // 2\n\tif (m + n) % 2 == 0:\n\t\treturn (sorted1[mid - 1] + sorted1[mid]) / 2\n\telse:\n\t\treturn sorted1[mid]", "task_id": "597_cd2cb392-00c0-48a8-b8d5-5ecd8427c3e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest sum of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_smallest_sum(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, arr1[i] + arr2[j])\n\treturn heapq.nsmallest(k, heap)[-1]", "task_id": "597_fcc7a218-dfff-4003-a886-ef300bbc6898", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest sum of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_largest_sum(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, -(arr1[i] + arr2[j]))\n\treturn -heapq.nsmallest(k, heap)[-1]", "task_id": "597_2bd35c72-3ed1-423e-88f2-68775a2ce20d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest product of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_smallest_product(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, arr1[i] * arr2[j])\n\treturn heapq.nsmallest(k, heap)[-1]", "task_id": "597_cf6216b3-f8c5-4061-84bb-c20f2e1d9f6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest product of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_largest_product(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, -(arr1[i] * arr2[j]))\n\treturn -heapq.nsmallest(k, heap)[-1]", "task_id": "597_e05745d0-9c6a-46a3-aafd-fb4b268cadbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest absolute difference of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_smallest_difference(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, abs(arr1[i] - arr2[j]))\n\treturn heapq.nsmallest(k, heap)[-1]", "task_id": "597_9fa9f883-d265-47c8-b0e2-2461bc10d8e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest absolute difference of pairs (one element from each array) from the given two sorted arrays.", "code": "def find_kth_largest_difference(arr1, arr2, m, n, k):\n\timport heapq\n\theap = []\n\tfor i in range(m):\n\t\tfor j in range(n):\n\t\t\theapq.heappush(heap, -(abs(arr1[i] - arr2[j])))\n\treturn -heapq.nsmallest(k, heap)[-1]", "task_id": "597_dc228edb-a051-4adc-b5c9-817e3e5d1f95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest element in the union of the given two sorted arrays.", "code": "def find_kth_smallest_union(arr1, arr2, m, n, k):\n\tunion_set = sorted(set(arr1 + arr2))\n\treturn union_set[k - 1]", "task_id": "597_e32bc348-f801-4d0b-b784-d88105f07130", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest element in the union of the given two sorted arrays.", "code": "def find_kth_largest_union(arr1, arr2, m, n, k):\n\tunion_set = sorted(set(arr1 + arr2))\n\treturn union_set[-k]", "task_id": "597_4ec3f4b9-fbb8-4a6f-acbe-46e16a9c3f5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is odd or not using bitwise operator.", "code": "def is_odd(n: int) -> bool:\n    return (n & 1) == 1", "task_id": "600_6c954c8b-7725-4fef-8bb8-489022b2deed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a power of two using bitwise operator.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "600_eae211a1-8c2f-4781-96bd-18b8d6815f1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in the binary representation of a given number using bitwise operator.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "600_a5651337-ac25-4a13-84d2-655f695a4989", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap two numbers without using a temporary variable using bitwise operator.", "code": "def swap_numbers(a: int, b: int) -> tuple:\n    a = a ^ b\n    b = a ^ b\n    a = a ^ b\n    return (a, b)", "task_id": "600_acd8a2d8-ae3d-4b0a-a0b0-353b26a9865e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a multiple of four using bitwise operator.", "code": "def is_multiple_of_four(n: int) -> bool:\n    return (n & 3) == 0", "task_id": "600_d36f8c94-f2b2-492b-b1c6-928af15a5a9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the least significant k bits of a given number using bitwise operator.", "code": "def clear_lsb(n: int, k: int) -> int:\n    return n & (~((1 << k) - 1))", "task_id": "600_76c80c9d-038e-472e-ae2e-b76432e7d07e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the case of a given alphabetic character using bitwise operator.", "code": "def toggle_case(char: str) -> str:\n    return chr(ord(char) ^ 32)", "task_id": "600_333d4727-2fcd-4cfd-aa36-2ece9d7c5f21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to isolate the rightmost set bit of a given number using bitwise operator.", "code": "def isolate_rightmost_set_bit(n: int) -> int:\n    return n & -n", "task_id": "600_cb0464a8-9fee-4db6-aed5-abb01e284d80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the sign bit of a given integer is set using bitwise operator.", "code": "def is_sign_bit_set(n: int) -> bool:\n    return (n & (1 << (n.bit_length() - 1))) != 0", "task_id": "600_ea217fb7-1354-4a20-aaa3-4d0eac1785d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to compute the bitwise AND of two given numbers.", "code": "def bitwise_and(a: int, b: int) -> int:\n    return a & b", "task_id": "600_dd9a08f4-3b2b-40ba-bcff-9e77ff035dcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated character in a given string.", "code": "def first_non_repeated_char(s: str) -> str:\n    for c in s:\n        if s.count(c) == 1:\n            return c\n    return 'None'", "task_id": "602_f2078074-2ebb-4d93-8afa-a7689b1cc3ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated word in a given string.", "code": "def first_repeated_word(s: str) -> str:\n    words = s.split()\n    seen = set()\n    for word in words:\n        if word in seen:\n            return word\n        seen.add(word)\n    return 'None'", "task_id": "602_f52bfe13-94fc-4c8d-8c2f-1a18045cd027", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated word in a given string.", "code": "def first_non_repeated_word(s: str) -> str:\n    words = s.split()\n    for word in words:\n        if words.count(word) == 1:\n            return word\n    return 'None'", "task_id": "602_e27a3b40-fa56-4675-8881-65402422324b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated digit in a given integer.", "code": "def first_repeated_digit(n: int) -> str:\n    s = str(n)\n    for index, c in enumerate(s):\n        if s[:index+1].count(c) > 1:\n            return c\n    return 'None'", "task_id": "602_31b1c135-44ef-4efe-a14d-8d2efaebeb3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated digit in a given integer.", "code": "def first_non_repeated_digit(n: int) -> str:\n    s = str(n)\n    for c in s:\n        if s.count(c) == 1:\n            return c\n    return 'None'", "task_id": "602_eca94bdc-ad7f-44b4-a206-2d84b38c3601", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated element in a given list of integers.", "code": "def first_repeated_element(lst: list) -> int:\n    seen = set()\n    for num in lst:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "602_4cf35576-5b42-46de-9e42-bb1fa874d6b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated element in a given list of integers.", "code": "def first_non_repeated_element(lst: list) -> int:\n    for num in lst:\n        if lst.count(num) == 1:\n            return num\n    return -1", "task_id": "602_d2b46674-5265-4a63-9b4b-f1fccc100237", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated vowel in a given string.", "code": "def first_repeated_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    seen = set()\n    for c in s:\n        if c in vowels:\n            if c in seen:\n                return c\n            seen.add(c)\n    return 'None'", "task_id": "602_8f28d939-2095-4f69-9cb7-6009d5ba2baf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeated vowel in a given string.", "code": "def first_non_repeated_vowel(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    for c in s:\n        if c in vowels and s.count(c) == 1:\n            return c\n    return 'None'", "task_id": "602_91e9adf6-413c-41a4-8470-dbf809ad057a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first repeated consonant in a given string.", "code": "def first_repeated_consonant(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    seen = set()\n    for c in s:\n        if c.isalpha() and c not in vowels:\n            if c in seen:\n                return c\n            seen.add(c)\n    return 'None'", "task_id": "602_8b46054a-b187-44fb-8e92-c2ad05932ba0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given list of integers.", "code": "def longest_increasing_subsequence(arr):\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(0, i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis) if lis else 0", "task_id": "601_184822da-2f48-41e5-9ad6-4078c247d284", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two given strings.", "code": "def longest_common_subsequence(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "601_34f82539-4c02-47f9-8bba-fc2d25f4b2f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray in a given list of integers.", "code": "def max_sum_subarray(arr):\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n    for i in range(1, len(arr)):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far", "task_id": "601_cc4aa88f-7ffe-47b0-91bc-fd98da320476", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest palindromic substring in a given string.", "code": "def longest_palindromic_substring(s):\n    n = len(s)\n    if n == 0:\n        return ''\n    dp = [[False] * n for _ in range(n)]\n    start = 0\n    max_length = 1\n    for i in range(n):\n        dp[i][i] = True\n    for i in range(n-1):\n        if s[i] == s[i+1]:\n            dp[i][i+1] = True\n            start = i\n            max_length = 2\n    for length in range(3, n+1):\n        for i in range(n-length+1):\n            j = i + length - 1\n            if s[i] == s[j] and dp[i+1][j-1]:\n                dp[i][j] = True\n                start = i\n                max_length = length\n    return s[start:start+max_length]", "task_id": "601_98bce028-3d27-4894-b78d-503cc02d9a8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost to reach the top of a staircase, where each step has a cost associated with it.", "code": "def min_cost_climbing_stairs(cost):\n    n = len(cost)\n    if n == 0:\n        return 0\n    if n == 1:\n        return cost[0]\n    dp = [0] * n\n    dp[0] = cost[0]\n    dp[1] = cost[1]\n    for i in range(2, n):\n        dp[i] = cost[i] + min(dp[i-1], dp[i-2])\n    return min(dp[-1], dp[-2])", "task_id": "601_2b76ade8-0684-41fa-88a2-52e593c4b94d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid.", "code": "def unique_paths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[m-1][n-1]", "task_id": "601_8bb977a1-6846-4b6a-b8d1-c5cd00224c4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins needed to make up a given amount, given an array of coin denominations.", "code": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "task_id": "601_3ef9dd76-15c9-4ce1-9f8c-4aa4876aa605", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value that can be obtained from items with given weights and values, with a given capacity of the knapsack.", "code": "def knapsack(weights, values, capacity):\n    n = len(weights)\n    dp = [[0] * (capacity + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for w in range(1, capacity + 1):\n            if weights[i - 1] <= w:\n                dp[i][w] = max(dp[i - 1][w], dp[i - 1][w - weights[i - 1]] + values[i - 1])\n            else:\n                dp[i][w] = dp[i - 1][w]\n    return dp[n][capacity]", "task_id": "601_c1baffef-d57f-4fd6-8c08-40e3ff457bcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of operations required to convert one string into another, where the allowed operations are insertion, deletion, and substitution.", "code": "def edit_distance(s1, s2):\n    m, n = len(s1), len(s2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif s1[i - 1] == s2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]", "task_id": "601_bf110928-0f09-4251-ace4-054512f11004", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of a contiguous subarray in a given list of integers.", "code": "def max_product_subarray(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    max_prod = min_prod = result = arr[0]\n    for i in range(1, n):\n        if arr[i] < 0:\n            max_prod, min_prod = min_prod, max_prod\n        max_prod = max(arr[i], max_prod * arr[i])\n        min_prod = min(arr[i], min_prod * arr[i])\n        result = max(result, max_prod)\n    return result", "task_id": "601_4d644781-b41d-4431-aaee-313d01bdfb14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the characters in each word of a given string.", "code": "def reverse_characters(s):\n    return ' '.join(word[::-1] for word in s.split())", "task_id": "604_800128b1-788f-448f-903b-bd038cc23f90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "604_063e1b80-597c-4721-83af-0f3327e11d95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in s if char not in vowels)", "task_id": "604_589c9ea1-1309-4f7c-b4cb-6ae27acc9775", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a given string with underscores.", "code": "def replace_spaces(s):\n    return s.replace(' ', '_')", "task_id": "604_86c71e28-44ee-4524-b453-e4d374a10c24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s):\n    return len(s.split())", "task_id": "604_32c278c5-35bc-4269-a93e-36f736e50277", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the entire string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "604_f0fea1d5-f761-4e9b-b121-8ae905d82878", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    s = s.replace(' ', '').lower()\n    return s == s[::-1]", "task_id": "604_6ed6f6e7-dc07-4b28-90f1-97963a2627bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s):\n    seen = set()\n    return ''.join(seen.add(char) or char for char in s if char not in seen)", "task_id": "604_b687d298-fd9b-4f97-b77c-70328e986d3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s):\n    words = s.split()\n    return max(words, key=len)", "task_id": "604_dd2022fc-e534-4132-99b2-dfeb8d5deb53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of lengths of each word in a given string.", "code": "def word_lengths(s):\n    return [len(word) for word in s.split()]", "task_id": "604_618b6410-86c8-4e4c-a3f1-cc748542f86d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is an even number.", "code": "def is_even(num: int) -> bool:\n    return num % 2 == 0", "task_id": "605_bcaf0afd-cd86-4566-8dca-2d61bef15331", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is an odd number.", "code": "def is_odd(num: int) -> bool:\n    return num % 2 != 0", "task_id": "605_d2ab3f09-60f2-460a-9fc7-40388f70ca36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "605_5858f03f-9038-46cf-88f6-ae8e9fa6bb32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is a positive number.", "code": "def is_positive(num: int) -> bool:\n    return num > 0", "task_id": "605_45071b5f-5af4-4310-8722-2adf0a8429b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is a negative number.", "code": "def is_negative(num: int) -> bool:\n    return num < 0", "task_id": "605_a598746f-0c03-4da7-874a-f11b6a55eb5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is divisible by 3.", "code": "def is_divisible_by_3(num: int) -> bool:\n    return num % 3 == 0", "task_id": "605_d24e5611-cab4-4167-8127-decdade5c8cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given integer is divisible by 5.", "code": "def is_divisible_by_5(num: int) -> bool:\n    return num % 5 == 0", "task_id": "605_681f2486-14d9-4fee-b1f3-9788894909b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "605_168c6eb7-9c6f-4720-b94b-acb49755d7d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given character is a vowel.", "code": "def is_vowel(char: str) -> bool:\n    return char.lower() in 'aeiou'", "task_id": "605_e5865519-b313-4c76-9208-f615bf85e785", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given character is a consonant.", "code": "def is_consonant(char: str) -> bool:\n    return char.lower() in 'bcdfghjklmnpqrstvwxyz'", "task_id": "605_1a59316c-c34e-4170-87f1-83ee9ae1e97b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Fahrenheit to Celsius.", "code": "def fahrenheit_to_celsius(f):\n    return (f - 32) * 5.0/9.0", "task_id": "606_f448a4bd-853a-47b0-ba37-b05dc3444189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert miles to kilometers.", "code": "def miles_to_kilometers(miles):\n    return miles * 1.60934", "task_id": "606_5d83a43b-ed90-4b90-8ca6-c98c163aa6fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert seconds to minutes.", "code": "def seconds_to_minutes(seconds):\n    return seconds / 60.0", "task_id": "606_2212457a-e75c-4f0d-b0a7-365f41722524", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a square given the length of its side.", "code": "def square_area(side):\n    return side * side", "task_id": "606_6f3fd386-e352-46f4-8362-187c3f1a7deb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the circumference of a circle given its radius.", "code": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius", "task_id": "606_16a2883e-9817-4032-8d5a-0cdc9433f042", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Celsius to Kelvin.", "code": "def celsius_to_kelvin(c):\n    return c + 273.15", "task_id": "606_e849464c-b840-4c91-99af-db2719add7a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a triangle given its base and height.", "code": "def triangle_area(base, height):\n    return 0.5 * base * height", "task_id": "606_54245f5b-1f96-495a-aaf2-29003c78fad6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert minutes to hours.", "code": "def minutes_to_hours(minutes):\n    return minutes / 60.0", "task_id": "606_0d90004e-443c-45a9-b05d-4b9addf9ea08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert kilometers to meters.", "code": "def kilometers_to_meters(km):\n    return km * 1000", "task_id": "606_e976bc5c-2d2b-4f01-a898-1e98183e1112", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a rectangle given its length and width.", "code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)", "task_id": "606_0554d8b9-3fe0-48a7-9451-81870f02ec16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of all lucid numbers smaller than or equal to n.", "code": "def get_ludic_sum(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn sum(ludics)", "task_id": "603_0f827da7-812a-4b66-a709-7b4f1d00d4c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the count of all lucid numbers smaller than or equal to n.", "code": "def get_ludic_count(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn len(ludics)", "task_id": "603_1fee30cd-09cf-436a-961a-56c5e72da7c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get a list of all lucid numbers smaller than or equal to n.", "code": "def get_ludic_list(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics", "task_id": "603_43ede2cb-2b89-4501-9555-b5f040291184", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the product of all lucid numbers smaller than or equal to n.", "code": "def get_ludic_product(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\tproduct = 1\n\tfor num in ludics:\n\t\tproduct *= num\n\treturn product", "task_id": "603_618c26ca-682c-473d-82b8-3c949a2ab359", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the maximum lucid number smaller than or equal to n.", "code": "def get_ludic_max(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics[-1]", "task_id": "603_a953f6f6-e7f9-425e-8faf-90deaa25a380", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the minimum lucid number smaller than or equal to n.", "code": "def get_ludic_min(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn ludics[0]", "task_id": "603_37207e7f-6277-4a27-8c9b-aab3ccfa5d76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of all even lucid numbers smaller than or equal to n.", "code": "def get_ludic_even_sum(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn sum([num for num in ludics if num % 2 == 0])", "task_id": "603_4ac992cb-6096-4d94-b256-1c67fd016dd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of all odd lucid numbers smaller than or equal to n.", "code": "def get_ludic_odd_sum(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn sum([num for num in ludics if num % 2 != 0])", "task_id": "603_ce1c95fd-edc1-4a1c-8460-588c68c081cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of all prime lucid numbers smaller than or equal to n.", "code": "def is_prime(num):\n\tif num < 2:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef get_ludic_prime_sum(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn sum([num for num in ludics if is_prime(num)])", "task_id": "603_17800f84-4f55-43b1-8cee-dd7f989110bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of all Fibonacci lucid numbers smaller than or equal to n.", "code": "def is_fibonacci(num):\n\tif num == 0 or num == 1:\n\t\treturn True\n\ta, b = 0, 1\n\twhile b < num:\n\t\ta, b = b, a + b\n\treturn b == num\n\ndef get_ludic_fibonacci_sum(n):\n\tludics = []\n\tfor i in range(1, n + 1):\n\t\tludics.append(i)\n\tindex = 1\n\twhile(index != len(ludics)):\n\t\tfirst_ludic = ludics[index]\n\t\tremove_index = index + first_ludic\n\t\twhile(remove_index < len(ludics)):\n\t\t\tludics.remove(ludics[remove_index])\n\t\t\tremove_index = remove_index + first_ludic - 1\n\t\tindex += 1\n\treturn sum([num for num in ludics if is_fibonacci(num)])", "task_id": "603_ca7535d6-8290-45fc-b8fe-df15ae80b96b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the n-th occurrence of a given element from a list.", "code": "def remove_nth_occurrence(lst, n, elem):\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] == elem:\n            count += 1\n            if count == n:\n                return lst[:i] + lst[i+1:]\n    return lst", "task_id": "610_161d96d7-2bc5-45ca-842b-026195c7614e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all elements greater than k from a given list.", "code": "def remove_elements_greater_than_k(lst, k):\n    return [x for x in lst if x <= k]", "task_id": "610_cca84889-b63f-4275-b522-aa4e6f165488", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all elements less than k from a given list.", "code": "def remove_elements_less_than_k(lst, k):\n    return [x for x in lst if x >= k]", "task_id": "610_40209829-0e56-4ec0-b162-b0a179bb2efd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove every n-th element from a given list.", "code": "def remove_every_nth_element(lst, n):\n    return [x for i, x in enumerate(lst) if (i+1) % n != 0]", "task_id": "610_ab37ccf9-03ba-48b9-bc40-de5cb063f19d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a given list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "610_f2771893-3791-4b13-b4f5-84fc2aefa77b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove elements in a given range (inclusive) from a list.", "code": "def remove_elements_in_range(lst, start, end):\n    return [x for x in lst if x < start or x > end]", "task_id": "610_b6a049b6-c196-4745-8a1c-31d0a9cb8796", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove elements at specified indices from a list.", "code": "def remove_elements_at_indices(lst, indices):\n    return [x for i, x in enumerate(lst) if i not in indices]", "task_id": "610_2fd81a7a-c9f7-4aac-81ab-9f68bff80c15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the first n elements from a list.", "code": "def remove_first_n_elements(lst, n):\n    return lst[n:]", "task_id": "610_6bc90df3-c769-4b61-8a19-b24156a6498b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove the last n elements from a list.", "code": "def remove_last_n_elements(lst, n):\n    return lst[:-n]", "task_id": "610_5d01eee9-5ccf-4d86-865c-1e20a895d5d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all elements with a specific value from a list.", "code": "def remove_elements_by_value(lst, value):\n    return [x for x in lst if x != value]", "task_id": "610_0f2e1d02-16a5-45d6-b004-62ba21d6af25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string in a string and also find the location within the original string where the pattern occurs by using regex. Return the pattern, start index, and end index.", "code": "import re\n\ndef find_literals(text, pattern):\n  match = re.search(pattern, text)\n  if match:\n    s = match.start()\n    e = match.end()\n    return (match.re.pattern, s, e)\n  return (pattern, -1, -1)", "task_id": "607_05704d23-d286-41a1-87d0-e323dc99e6f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search all occurrences of a literal string in a string and find the start and end locations of each occurrence using regex. Return a list of tuples with start and end indices.", "code": "import re\n\ndef find_all_literals(text, pattern):\n  matches = re.finditer(pattern, text)\n  return [(match.start(), match.end()) for match in matches]", "task_id": "607_d2f807cf-bf55-4584-ab19-9d4dfcf9c326", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all occurrences of a literal string in a string with another string using regex. Return the modified string.", "code": "import re\n\ndef replace_literals(text, pattern, replacement):\n  return re.sub(pattern, replacement, text)", "task_id": "607_9f027ba4-44c3-4464-8050-3b2d55dd4a9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string by a given pattern using regex. Return a list of strings.", "code": "import re\n\ndef split_by_pattern(text, pattern):\n  return re.split(pattern, text)", "task_id": "607_45a474a8-1417-43bd-a17a-bcd1a2c51341", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string in a string ignoring case and find the location within the original string where the pattern occurs by using regex. Return the pattern, start index, and end index.", "code": "import re\n\ndef find_literals_ignore_case(text, pattern):\n  match = re.search(pattern, text, re.IGNORECASE)\n  if match:\n    s = match.start()\n    e = match.end()\n    return (match.re.pattern, s, e)\n  return (pattern, -1, -1)", "task_id": "607_c19ba82d-1d95-49b0-bafa-8214ae64ed08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string in a string with word boundaries and find the location within the original string where the pattern occurs by using regex. Return the pattern, start index, and end index.", "code": "import re\n\ndef find_literals_with_word_boundaries(text, pattern):\n  pattern = r'\\b' + re.escape(pattern) + r'\\b'\n  match = re.search(pattern, text)\n  if match:\n    s = match.start()\n    e = match.end()\n    return (match.re.pattern, s, e)\n  return (pattern, -1, -1)", "task_id": "607_2ca0dab4-03ed-4d8a-a18e-556ef51fcc3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a literal string in a string using regex. Return the count.", "code": "import re\n\ndef count_literals(text, pattern):\n  return len(re.findall(pattern, text))", "task_id": "607_2cf3635a-6545-42c5-a1ac-33193e0d3c07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string in a string and find the location within the original string where the pattern occurs by using regex. Additionally, return a few characters of context around each match. Return a list of tuples containing the match, start index, and end index.", "code": "import re\n\ndef find_literals_with_context(text, pattern, context):\n  matches = re.finditer(pattern, text)\n  result = []\n  for match in matches:\n    s = match.start()\n    e = match.end()\n    context_str = text[max(0, s-context):min(len(text), e+context)]\n    result.append((context_str, s, e))\n  return result", "task_id": "607_d68cd536-418c-49e2-97ed-2e9632f2d2cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string in each line of a multiline string and find the location within each line where the pattern occurs by using regex. Return a list of tuples containing the line, start index, and end index.", "code": "import re\n\ndef find_literals_in_lines(text, pattern):\n  lines = text.split('\\n')\n  result = []\n  for line in lines:\n    match = re.search(pattern, line)\n    if match:\n      s = match.start()\n      e = match.end()\n      result.append((line, s, e))\n  return result", "task_id": "607_a67ad4ea-2f3d-4b1f-862c-6fe6772fa6ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to search a literal string with capturing groups in a string and find the location within the original string where the pattern occurs by using regex. Return a list of tuples containing the group match, start index, and end index.", "code": "import re\n\ndef find_literals_with_groups(text, pattern):\n  matches = re.finditer(pattern, text)\n  result = []\n  for match in matches:\n    for group_num in range(0, len(match.groups()) + 1):\n      s = match.start(group_num)\n      e = match.end(group_num)\n      result.append((match.group(group_num), s, e))\n  return result", "task_id": "607_639608c3-94ae-412d-a329-c72ce6cc208a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function.", "code": "def floor_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x) // B", "task_id": "609_80ffc8e0-4244-415b-878d-29691c110100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum possible value for the given periodic function using ceiling instead of floor.", "code": "def ceil_Min(A, B, N):\n    x = max(B - 1, N)\n    return (A * x + B - 1) // B", "task_id": "609_4fc37f13-6506-4520-8d82-0fcc9c51c63e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function using ceiling instead of floor.", "code": "def ceil_Max(A, B, N):\n    x = min(B - 1, N)\n    return (A * x + B - 1) // B", "task_id": "609_17c543f7-4916-43a8-83e8-e9421cd523e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum possible value for the absolute value of the given periodic function.", "code": "def floor_Min_Abs(A, B, N):\n    x = max(B - 1, N)\n    return abs((A * x) // B)", "task_id": "609_3d0648ab-73bb-40ba-8228-b435b7b31237", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the absolute value of the given periodic function.", "code": "def floor_Max_Abs(A, B, N):\n    x = min(B - 1, N)\n    return abs((A * x) // B)", "task_id": "609_15d6e2b3-0214-40f4-91e2-d45ac5b1b036", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum possible value for the square of the given periodic function.", "code": "def floor_Min_Square(A, B, N):\n    x = max(B - 1, N)\n    return ((A * x) // B) ** 2", "task_id": "609_8b474412-f804-47e0-8f11-b5400ba9f840", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the square of the given periodic function.", "code": "def floor_Max_Square(A, B, N):\n    x = min(B - 1, N)\n    return ((A * x) // B) ** 2", "task_id": "609_6ec267b8-c71f-4e1f-a14b-e09292e34a35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum possible value for the cube of the given periodic function.", "code": "def floor_Min_Cube(A, B, N):\n    x = max(B - 1, N)\n    return ((A * x) // B) ** 3", "task_id": "609_e07101c3-814f-4801-b0cf-2811126b3175", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the cube of the given periodic function.", "code": "def floor_Max_Cube(A, B, N):\n    x = min(B - 1, N)\n    return ((A * x) // B) ** 3", "task_id": "609_a795325c-efac-4a16-a193-8de52008b92f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum possible value for the given periodic function using modulo instead of floor.", "code": "def floor_Min_Mod(A, B, N):\n    x = max(B - 1, N)\n    return (A * x) % B", "task_id": "609_4d115658-cf5b-4d28-9a03-8b098049e0dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the Stirling number of the second kind S(n, k).", "code": "def stirling_number(n, k): \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)] \n    dp[0][0] = 1 \n    for i in range(1, n+1): \n        for j in range(1, k+1): \n            dp[i][j] = j * dp[i-1][j] + dp[i-1][j-1] \n    return dp[n][k]", "task_id": "608_d8811da8-98a0-44bb-b244-b0f72fa0a2e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Catalan number.", "code": "def catalan_number(n): \n    if n == 0 or n == 1: \n        return 1 \n    catalan = [0] * (n+1) \n    catalan[0], catalan[1] = 1, 1 \n    for i in range(2, n+1): \n        for j in range(i): \n            catalan[i] += catalan[j] * catalan[i-j-1] \n    return catalan[n]", "task_id": "608_8a2fe4ce-f757-487f-b014-5f4b6a2acd95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number using dynamic programming.", "code": "def fibonacci(n): \n    if n <= 1: \n        return n \n    fib = [0] * (n+1) \n    fib[1] = 1 \n    for i in range(2, n+1): \n        fib[i] = fib[i-1] + fib[i-2] \n    return fib[n]", "task_id": "608_8d051e5f-3347-4971-a3e8-534030187436", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Tribonacci number.", "code": "def tribonacci(n): \n    if n == 0: \n        return 0 \n    elif n == 1 or n == 2: \n        return 1 \n    trib = [0] * (n+1) \n    trib[1], trib[2] = 1, 1 \n    for i in range(3, n+1): \n        trib[i] = trib[i-1] + trib[i-2] + trib[i-3] \n    return trib[n]", "task_id": "608_04339096-aea3-43f8-a713-914955630c6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth row of Pascal's triangle.", "code": "def pascal_triangle_row(n): \n    row = [1] \n    for k in range(1, n+1): \n        row.append(row[-1] * (n - k + 1) // k) \n    return row", "task_id": "608_4fa36d5e-dad3-4ad8-a9a3-860cde28eea2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the superfactorial of n (the product of the first n factorials).", "code": "def superfactorial(n): \n    def factorial(x): \n        if x == 0 or x == 1: \n            return 1 \n        return x * factorial(x-1) \n    superfact = 1 \n    for i in range(1, n+1): \n        superfact *= factorial(i) \n    return superfact", "task_id": "608_b3eb6797-185a-47f3-9a98-dde43555c183", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the number of derangements (permutations with no fixed points) of n items.", "code": "def derangement(n): \n    if n == 0: \n        return 1 \n    if n == 1: \n        return 0 \n    der = [0] * (n+1) \n    der[0], der[1] = 1, 0 \n    for i in range(2, n+1): \n        der[i] = (i-1) * (der[i-1] + der[i-2]) \n    return der[n]", "task_id": "608_3fd9399d-ef65-4a32-98a1-637055e6eab0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the number of ways to partition n items into k non-empty subsets.", "code": "def partition_number(n, k): \n    if k == 0 or k > n: \n        return 0 \n    if k == n or k == 1: \n        return 1 \n    dp = [[0 for _ in range(k+1)] for _ in range(n+1)] \n    for i in range(n+1): \n        dp[i][0] = 0 \n        dp[i][1] = 1 \n    for j in range(k+1): \n        dp[0][j] = 0 \n    for i in range(1, n+1): \n        for j in range(2, k+1): \n            dp[i][j] = j * dp[i-1][j] + dp[i-1][j-1] \n    return dp[n][k]", "task_id": "608_cc07ae54-97f8-48cb-b518-91c0405d8eab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to generate the Bell triangle up to the nth row.", "code": "def bell_triangle(n): \n    bell = [[0 for _ in range(i+1)] for i in range(n)] \n    bell[0][0] = 1 \n    for i in range(1, n): \n        bell[i][0] = bell[i-1][-1] \n        for j in range(1, i+1): \n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \n    return bell", "task_id": "608_6d81e3c6-2dc9-4799-b35c-f72ca953df97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Lucas number.", "code": "def lucas_number(n): \n    if n == 0: \n        return 2 \n    if n == 1: \n        return 1 \n    lucas = [0] * (n+1) \n    lucas[0], lucas[1] = 2, 1 \n    for i in range(2, n+1): \n        lucas[i] = lucas[i-1] + lucas[i-2] \n    return lucas[n]", "task_id": "608_f8ad5f8a-c071-483b-987f-3ad551e8a782", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the nth column from the given tuple list.", "code": "def sum_of_nth(test_list, N):\n  res = sum([sub[N] for sub in test_list])\n  return res", "task_id": "611_5d059374-7aed-4915-907b-364ff6ca49c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the nth column from the given tuple list.", "code": "def min_of_nth(test_list, N):\n  res = min([sub[N] for sub in test_list])\n  return res", "task_id": "611_bc6c6b6f-aa97-480e-b536-5fb14076e793", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of the nth column from the given tuple list.", "code": "def avg_of_nth(test_list, N):\n  res = sum([sub[N] for sub in test_list]) / len(test_list)\n  return res", "task_id": "611_4e885695-84f3-478d-b1e1-6c6921e16142", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the nth column from the given tuple list.", "code": "def product_of_nth(test_list, N):\n  res = 1\n  for sub in test_list:\n    res *= sub[N]\n  return res", "task_id": "611_828f1d2d-2fea-45e2-9fe0-e422aed5e5b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many elements in the nth column are greater than a given threshold.", "code": "def count_greater_than_nth(test_list, N, threshold):\n  res = sum(1 for sub in test_list if sub[N] > threshold)\n  return res", "task_id": "611_9f69efa2-62de-4d22-82d3-c0187399ea03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many elements in the nth column are less than a given threshold.", "code": "def count_less_than_nth(test_list, N, threshold):\n  res = sum(1 for sub in test_list if sub[N] < threshold)\n  return res", "task_id": "611_9ce38ce7-0395-4aeb-b3cd-59fd7b407947", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the nth column from the given tuple list and return it as a list.", "code": "def nth_column_to_list(test_list, N):\n  res = [sub[N] for sub in test_list]\n  return res", "task_id": "611_989ad61f-e11b-4206-af0f-fe58cc3f5533", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all unique elements in the nth column from the given tuple list.", "code": "def unique_elements_nth(test_list, N):\n  res = set(sub[N] for sub in test_list)\n  return res", "task_id": "611_17c36b4b-d7ba-4709-ba13-599082578238", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between any two elements in the nth column from the given tuple list.", "code": "def max_diff_nth(test_list, N):\n  col = [sub[N] for sub in test_list]\n  res = max(col) - min(col)\n  return res", "task_id": "611_3145503c-9b38-44da-98a7-9aea7facce79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth column from the given tuple list sorted in ascending order.", "code": "def nth_column_sorted(test_list, N):\n  res = sorted([sub[N] for sub in test_list])\n  return res", "task_id": "611_926b0ae3-e601-4a69-a0ab-6611f0d45e82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists, but only if the first and last elements are even numbers.", "code": "def merge_first_last(lst):\n    first_elements = [x[0] for x in lst if x[0] % 2 == 0]\n    last_elements = [x[-1] for x in lst if x[-1] % 2 == 0]\n    return [first_elements, last_elements]", "task_id": "612_c081cbf5-96e6-4036-924f-1bf6d9a57b76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the alternate elements in a list of lists.", "code": "def merge_alternate(lst):\n    first_elements = [x[0] for x in lst]\n    second_elements = [x[1] for x in lst if len(x) > 1]\n    return [first_elements, second_elements]", "task_id": "612_7bbe1d6f-1c86-4d4f-9ef3-12c5cdd34e49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists of strings.", "code": "def merge_first_last_strings(lst):\n    first_elements = [x[0] for x in lst]\n    last_elements = [x[-1] for x in lst]\n    return [first_elements, last_elements]", "task_id": "612_08d5994a-6e1a-4ad6-8239-4e6ba1bdfec6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists and return their sums.", "code": "def merge_first_last_sum(lst):\n    first_elements_sum = sum(x[0] for x in lst)\n    last_elements_sum = sum(x[-1] for x in lst)\n    return [first_elements_sum, last_elements_sum]", "task_id": "612_b020d9a1-3986-4e33-b4e3-3906f3baef67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists, but reverse the order of the merged lists.", "code": "def merge_first_last_reverse(lst):\n    first_elements = [x[0] for x in lst]\n    last_elements = [x[-1] for x in lst]\n    return [first_elements[::-1], last_elements[::-1]]", "task_id": "612_b67e314e-dabf-4038-a8f5-eb00e2c31eff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists, but only include unique elements.", "code": "def merge_first_last_unique(lst):\n    first_elements = list(set(x[0] for x in lst))\n    last_elements = list(set(x[-1] for x in lst))\n    return [first_elements, last_elements]", "task_id": "612_2452e3ab-b1a9-42c8-8bf3-92ea04770544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists and return them sorted.", "code": "def merge_first_last_sorted(lst):\n    first_elements = sorted(x[0] for x in lst)\n    last_elements = sorted(x[-1] for x in lst)\n    return [first_elements, last_elements]", "task_id": "612_b1380bfd-ec1c-4f6f-ae0f-9241363a1ab4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists, but double the values of the merged lists.", "code": "def merge_first_last_double(lst):\n    first_elements = [x[0] * 2 for x in lst]\n    last_elements = [x[-1] * 2 for x in lst]\n    return [first_elements, last_elements]", "task_id": "612_4eb76c19-6196-4cab-b747-fa5a9d197e0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists of strings and concatenate them into a single string.", "code": "def merge_first_last_strings_concat(lst):\n    first_elements = ''.join(x[0] for x in lst)\n    last_elements = ''.join(x[-1] for x in lst)\n    return [first_elements, last_elements]", "task_id": "612_0a670397-73a0-4728-9ed7-1f06f6772966", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge the first and last elements separately in a list of lists and include their original indices.", "code": "def merge_first_last_with_index(lst):\n    first_elements = [(i, x[0]) for i, x in enumerate(lst)]\n    last_elements = [(i, x[-1]) for i, x in enumerate(lst)]\n    return [first_elements, last_elements]", "task_id": "612_76811a0f-d772-45f4-a589-d00201dc25c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cumulative product of all the values that are present in the given tuple list.", "code": "def cumulative_product(test_list):\n    product = 1\n    for tpl in test_list:\n        for num in tpl:\n            product *= num\n    return product", "task_id": "614_670cb191-9e08-41a7-aad3-d340944af185", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value among all the values that are present in the given tuple list.", "code": "def max_value(test_list):\n    return max(max(tpl) for tpl in test_list)", "task_id": "614_73ce6718-f210-423a-a76e-969414bb57c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value among all the values that are present in the given tuple list.", "code": "def min_value(test_list):\n    return min(min(tpl) for tpl in test_list)", "task_id": "614_c2e161f9-3349-4741-b298-47021fa8bcf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of all the values that are present in the given tuple list.", "code": "def average_value(test_list):\n    total_sum = sum(sum(tpl) for tpl in test_list)\n    total_count = sum(len(tpl) for tpl in test_list)\n    return total_sum / total_count", "task_id": "614_671df016-0041-4570-a556-a872419c6c5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten the given tuple list into a single list of values.", "code": "def flatten_list(test_list):\n    return [num for tpl in test_list for num in tpl]", "task_id": "614_1b4a0bc7-2421-494b-a48c-f2b1a69b4a11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a given value x in the given tuple list.", "code": "def count_occurrences(test_list, x):\n    return sum(tpl.count(x) for tpl in test_list)", "task_id": "614_9b94adf6-5fe9-417f-ac37-f55b4543a9be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cumulative sum of squares of all the values that are present in the given tuple list.", "code": "def sum_of_squares(test_list):\n    return sum(num**2 for tpl in test_list for num in tpl)", "task_id": "614_26f74b6b-b285-405f-ad60-0516d3131e90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cumulative sum of all the even values that are present in the given tuple list.", "code": "def sum_of_evens(test_list):\n    return sum(num for tpl in test_list for num in tpl if num % 2 == 0)", "task_id": "614_071f0d16-8cb3-4223-8cb1-5b2c4233fa5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cumulative sum of all the odd values that are present in the given tuple list.", "code": "def sum_of_odds(test_list):\n    return sum(num for tpl in test_list for num in tpl if num % 2 != 0)", "task_id": "614_f33c1ebb-eda2-4d97-bd02-17a7f6009a33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the cumulative sum of all the prime values that are present in the given tuple list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(test_list):\n    return sum(num for tpl in test_list for num in tpl if is_prime(num))", "task_id": "614_8f4cc049-8582-4cff-94e1-7a4b4eaa7ba1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers in each tuple of a given tuple of tuples.", "code": "def sum_of_elements(nums):\n    result = [sum(x) for x in nums]\n    return result", "task_id": "615_daccfb47-b288-4164-8e1a-1c5be8b53df5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value of the numbers in each tuple of a given tuple of tuples.", "code": "def max_of_elements(nums):\n    result = [max(x) for x in nums]\n    return result", "task_id": "615_9c28a510-bc11-41cb-99ff-f345c1ad21f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value of the numbers in each tuple of a given tuple of tuples.", "code": "def min_of_elements(nums):\n    result = [min(x) for x in nums]\n    return result", "task_id": "615_8e049776-736d-4d60-b745-bf97b1dd9a8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the numbers in each tuple of a given tuple of tuples.", "code": "def product_of_elements(nums):\n    result = [eval('*'.join(map(str, x))) for x in nums]\n    return result", "task_id": "615_9fd64651-1019-48b3-8f67-ed380c1cbe15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the range (difference between maximum and minimum) of the numbers in each tuple of a given tuple of tuples.", "code": "def range_of_elements(nums):\n    result = [max(x) - min(x) for x in nums]\n    return result", "task_id": "615_aad840f9-6b8c-4589-844c-6ef0e0dd4681", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the numbers in each column of a given tuple of tuples.", "code": "def sum_of_columns(nums):\n    result = [sum(x) for x in zip(*nums)]\n    return result", "task_id": "615_6ca151be-aa24-4474-bba9-6965ba2a7891", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value of the numbers in each column of a given tuple of tuples.", "code": "def max_of_columns(nums):\n    result = [max(x) for x in zip(*nums)]\n    return result", "task_id": "615_d92a3536-e728-421c-a78e-4876ab038c19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value of the numbers in each column of a given tuple of tuples.", "code": "def min_of_columns(nums):\n    result = [min(x) for x in zip(*nums)]\n    return result", "task_id": "615_35027894-a152-43c2-aa4f-c59318640a98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the numbers in each column of a given tuple of tuples.", "code": "def product_of_columns(nums):\n    result = [eval('*'.join(map(str, x))) for x in zip(*nums)]\n    return result", "task_id": "615_609a6417-42ea-428a-861f-5b47295d23f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the range (difference between maximum and minimum) of the numbers in each column of a given tuple of tuples.", "code": "def range_of_columns(nums):\n    result = [max(x) - min(x) for x in zip(*nums)]\n    return result", "task_id": "615_d0ec4d02-88ff-49a2-99a9-9ae85b0b571a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the addition of tuple elements in the given two tuples.", "code": "def tuple_addition(test_tup1, test_tup2):\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_3bd3bc36-0e30-47a3-b54d-0c5741e65d5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the subtraction of tuple elements in the given two tuples.", "code": "def tuple_subtraction(test_tup1, test_tup2):\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_a662f0dc-554c-45f5-8acb-ed6f7a10fbaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the multiplication of tuple elements in the given two tuples.", "code": "def tuple_multiplication(test_tup1, test_tup2):\n  res = tuple(ele1 * ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_17aa6db7-cbf7-472f-8aeb-3e73d1b7d8aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the division of tuple elements in the given two tuples.", "code": "def tuple_division(test_tup1, test_tup2):\n  res = tuple(ele1 / ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_ee68d3ec-eefc-45a0-b384-28038bd86a59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform the power operation of tuple elements in the given two tuples.", "code": "def tuple_power(test_tup1, test_tup2):\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_bcb1ee9d-39fd-448f-8ab6-d263f5c97b7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of tuple elements in the given two tuples.", "code": "def tuple_max(test_tup1, test_tup2):\n  res = tuple(max(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_f330e0fa-8199-480c-99f2-13fe45df6ec8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of tuple elements in the given two tuples.", "code": "def tuple_min(test_tup1, test_tup2):\n  res = tuple(min(ele1, ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_b7daecd5-3180-4b7c-9c63-3b6b704cda01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of tuple elements in the given two tuples.", "code": "def tuple_absolute_difference(test_tup1, test_tup2):\n  res = tuple(abs(ele1 - ele2) for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_8ce4607b-30c4-4ba6-96da-d25c47171d20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if elements in the first tuple are greater than the corresponding elements in the second tuple.", "code": "def tuple_greater_than(test_tup1, test_tup2):\n  res = tuple(ele1 > ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_04c4950e-ab0f-49e5-bce3-6648df361acf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if elements in the first tuple are less than the corresponding elements in the second tuple.", "code": "def tuple_less_than(test_tup1, test_tup2):\n  res = tuple(ele1 < ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\n  return res", "task_id": "616_4b1742a8-4a6b-48d6-925b-827e8c6a8f19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two lists element-wise using map and lambda function.", "code": "def add_list(nums1, nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "task_id": "618_705f3e29-ae20-42dd-82bd-96ab5da831ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the second list from the first list element-wise using map and lambda function.", "code": "def sub_list(nums1, nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": "618_f87a10a3-46df-4ac9-ba4f-694bacd7f971", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply two lists element-wise using map and lambda function.", "code": "def mul_list(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "618_75ed85f1-909b-4fbd-bb28-ffb606cf5106", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise elements of the first list to the power of the corresponding elements in the second list using map and lambda function.", "code": "def pow_list(nums1, nums2):\n  result = map(lambda x, y: x ** y, nums1, nums2)\n  return list(result)", "task_id": "618_e304eea3-74ba-4647-97cc-1fb1303c1096", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of elements of the first list by the corresponding elements in the second list using map and lambda function.", "code": "def mod_list(nums1, nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "task_id": "618_74e2f31b-02a0-4aec-ab43-b824ff4e7be6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two lists of strings element-wise using map and lambda function.", "code": "def concat_list(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "618_9ce43752-002b-4f42-9454-6caeca24973b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of each pair of elements from two lists using map and lambda function.", "code": "def max_list(nums1, nums2):\n  result = map(lambda x, y: max(x, y), nums1, nums2)\n  return list(result)", "task_id": "618_57d95f37-a168-4c3b-aaaf-d45b2d75737b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of each pair of elements from two lists using map and lambda function.", "code": "def min_list(nums1, nums2):\n  result = map(lambda x, y: min(x, y), nums1, nums2)\n  return list(result)", "task_id": "618_e3b72d11-2b5c-43fe-9f9e-c8a8a6785ea2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between elements of two lists using map and lambda function.", "code": "def abs_diff_list(nums1, nums2):\n  result = map(lambda x, y: abs(x - y), nums1, nums2)\n  return list(result)", "task_id": "618_79fd74ad-6e95-4f01-bfee-746d4990c48f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide two lists element-wise using map and lambda function, but return 'inf' if division by zero occurs.", "code": "def div_list_safe(nums1, nums2):\n  result = map(lambda x, y: x / y if y != 0 else float('inf'), nums1, nums2)\n  return list(result)", "task_id": "618_b7202ea1-0d70-4bf0-9cc4-665d2fa854e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach a point of form (x, y) from origin in a 2d plane.", "code": "def min_jumps_to_point(x, y, d):\n    distance = (x**2 + y**2)**0.5\n    if distance == 0:\n        return 0\n    elif distance <= d:\n        return 1\n    else:\n        return int(distance // d) + (1 if distance % d != 0 else 0)", "task_id": "617_93721351-fd4b-40fc-81ee-d0cc5f0a35ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a circle of given radius from origin in a 2d plane.", "code": "def min_jumps_to_circle(radius, d):\n    if radius == 0:\n        return 0\n    elif radius <= d:\n        return 1\n    else:\n        return int(radius // d) + (1 if radius % d != 0 else 0)", "task_id": "617_c3b77a82-63b3-48b7-a173-47172c5b764a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a rectangle of given length and width from origin in a 2d plane.", "code": "def min_jumps_to_rectangle(length, width, d):\n    diagonal = (length**2 + width**2)**0.5\n    if diagonal == 0:\n        return 0\n    elif diagonal <= d:\n        return 1\n    else:\n        return int(diagonal // d) + (1 if diagonal % d != 0 else 0)", "task_id": "617_76cbc808-128e-48f5-8953-759a57dbcbd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a right-angled triangle of given base and height from origin in a 2d plane.", "code": "def min_jumps_to_triangle(base, height, d):\n    hypotenuse = (base**2 + height**2)**0.5\n    if hypotenuse == 0:\n        return 0\n    elif hypotenuse <= d:\n        return 1\n    else:\n        return int(hypotenuse // d) + (1 if hypotenuse % d != 0 else 0)", "task_id": "617_ea83a751-04d3-424f-b760-db25226fbb4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a line segment from (x1, y1) to (x2, y2) from origin in a 2d plane.", "code": "def min_jumps_to_line(x1, y1, x2, y2, d):\n    distance = ((x2 - x1)**2 + (y2 - y1)**2)**0.5\n    if distance == 0:\n        return 0\n    elif distance <= d:\n        return 1\n    else:\n        return int(distance // d) + (1 if distance % d != 0 else 0)", "task_id": "617_d46b1ce1-ee57-4f15-9965-5ded81f42c9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a polygon with given vertices from origin in a 2d plane.", "code": "def min_jumps_to_polygon(vertices, d):\n    max_distance = max((x**2 + y**2)**0.5 for x, y in vertices)\n    if max_distance == 0:\n        return 0\n    elif max_distance <= d:\n        return 1\n    else:\n        return int(max_distance // d) + (1 if max_distance % d != 0 else 0)", "task_id": "617_db5e37ae-2468-45d4-8b49-34646604432f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on an ellipse with semi-major axis a and semi-minor axis b from origin in a 2d plane.", "code": "def min_jumps_to_ellipse(a, b, d):\n    max_distance = (a**2 + b**2)**0.5\n    if max_distance == 0:\n        return 0\n    elif max_distance <= d:\n        return 1\n    else:\n        return int(max_distance // d) + (1 if max_distance % d != 0 else 0)", "task_id": "617_777af5b4-3cd7-4800-8bed-fc3a67344e11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a parabola y = ax^2 + bx from origin in a 2d plane.", "code": "def min_jumps_to_parabola(a, b, d):\n    max_distance = (a**2 + b**2)**0.5\n    if max_distance == 0:\n        return 0\n    elif max_distance <= d:\n        return 1\n    else:\n        return int(max_distance // d) + (1 if max_distance % d != 0 else 0)", "task_id": "617_7e65a350-4959-41a2-857d-0178a1e3605b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a hyperbola x^2/a^2 - y^2/b^2 = 1 from origin in a 2d plane.", "code": "def min_jumps_to_hyperbola(a, b, d):\n    max_distance = (a**2 + b**2)**0.5\n    if max_distance == 0:\n        return 0\n    elif max_distance <= d:\n        return 1\n    else:\n        return int(max_distance // d) + (1 if max_distance % d != 0 else 0)", "task_id": "617_ae44f9e9-b4a5-4493-9ab1-258c5e26f8c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check for the number of jumps required of given length to reach any point on a spiral r = a + b\u03b8 from origin in a 2d plane.", "code": "def min_jumps_to_spiral(a, b, d):\n    max_distance = (a**2 + b**2)**0.5\n    if max_distance == 0:\n        return 0\n    elif max_distance <= d:\n        return 1\n    else:\n        return int(max_distance // d) + (1 if max_distance % d != 0 else 0)", "task_id": "617_36d7e1a5-ca2d-41b6-b433-86ff77d7fa84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the uppercase letters in the given string to the end.", "code": "def move_uppercase(test_str):\n  res = ''\n  upper = ''\n  for ele in test_str:\n    if ele.isupper():\n      upper += ele\n    else:\n      res += ele\n  res += upper\n  return res", "task_id": "619_96186c75-57c7-4e17-a40d-fcace13750ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the vowels in the given string to the end.", "code": "def move_vowels(test_str):\n  res = ''\n  vowels = ''\n  for ele in test_str:\n    if ele in 'aeiouAEIOU':\n      vowels += ele\n    else:\n      res += ele\n  res += vowels\n  return res", "task_id": "619_4bbfbd6e-e263-4341-9ac2-11f42e64f238", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the special characters in the given string to the end.", "code": "def move_special_chars(test_str):\n  res = ''\n  special = ''\n  for ele in test_str:\n    if not ele.isalnum():\n      special += ele\n    else:\n      res += ele\n  res += special\n  return res", "task_id": "619_48011f44-5677-4e58-b65d-e6ddf439c685", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the spaces in the given string to the end.", "code": "def move_spaces(test_str):\n  res = ''\n  spaces = ''\n  for ele in test_str:\n    if ele == ' ':\n      spaces += ele\n    else:\n      res += ele\n  res += spaces\n  return res", "task_id": "619_68898c92-bb49-4afb-9f7e-2a51cbbf5059", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the consonants in the given string to the end.", "code": "def move_consonants(test_str):\n  res = ''\n  consonants = ''\n  for ele in test_str:\n    if ele.lower() not in 'aeiou' and ele.isalpha():\n      consonants += ele\n    else:\n      res += ele\n  res += consonants\n  return res", "task_id": "619_cb58f75e-1223-4c75-8f1d-9bc4cd41e770", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the digits in the given string to the start.", "code": "def move_digits_to_start(test_str):\n  res = ''\n  dig = ''\n  for ele in test_str:\n    if ele.isdigit():\n      dig += ele\n    else:\n      res += ele\n  res = dig + res\n  return res", "task_id": "619_51612dee-8345-4c1e-a1ed-da4d98906b20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the lowercase letters in the given string to the end.", "code": "def move_lowercase(test_str):\n  res = ''\n  lower = ''\n  for ele in test_str:\n    if ele.islower():\n      lower += ele\n    else:\n      res += ele\n  res += lower\n  return res", "task_id": "619_8e090856-b4b8-4b60-b4f3-a036d519bf0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the digits and special characters in the given string to the end.", "code": "def move_digits_and_special_chars(test_str):\n  res = ''\n  others = ''\n  for ele in test_str:\n    if ele.isdigit() or not ele.isalnum():\n      others += ele\n    else:\n      res += ele\n  res += others\n  return res", "task_id": "619_4ffc55ea-68f0-44ae-b652-0403467450a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the letters in the given string to the end.", "code": "def move_letters(test_str):\n  res = ''\n  letters = ''\n  for ele in test_str:\n    if ele.isalpha():\n      letters += ele\n    else:\n      res += ele\n  res += letters\n  return res", "task_id": "619_859b6aef-9714-4e84-b07c-1e41ea5b1ef1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all the non-alphanumeric characters in the given string to the end.", "code": "def move_non_alphanumeric(test_str):\n  res = ''\n  non_alpha = ''\n  for ele in test_str:\n    if not ele.isalnum():\n      non_alpha += ele\n    else:\n      res += ele\n  res += non_alpha\n  return res", "task_id": "619_1e4e64f8-7e15-4d8e-929c-43ad194c3d9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in record list as tuple attribute in the given tuple list.", "code": "def find_minimum_value(test_list):\n  res = [(key, min(lst)) for key, lst in test_list]\n  return res", "task_id": "613_05612f3f-f465-4eae-8ec6-2dff9431adae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of values in record list as tuple attribute in the given tuple list.", "code": "def sum_of_values(test_list):\n  res = [(key, sum(lst)) for key, lst in test_list]\n  return res", "task_id": "613_3ca63cab-a156-479e-ab25-c43d74b92da5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of values in record list as tuple attribute in the given tuple list.", "code": "def average_of_values(test_list):\n  res = [(key, sum(lst)/len(lst)) for key, lst in test_list]\n  return res", "task_id": "613_a032e82b-b851-4bdc-9014-6965a851d4d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of values in record list as tuple attribute in the given tuple list.", "code": "def count_of_values(test_list):\n  res = [(key, len(lst)) for key, lst in test_list]\n  return res", "task_id": "613_131a15e7-b86c-445a-a396-e6040b340462", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the string with maximum length in record list as tuple attribute in the given tuple list.", "code": "def find_maximum_length_string(test_list):\n  res = [(key, max(lst, key=len)) for key, lst in test_list]\n  return res", "task_id": "613_68f319af-af65-4750-b16d-84aa007b73b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the string with minimum length in record list as tuple attribute in the given tuple list.", "code": "def find_minimum_length_string(test_list):\n  res = [(key, min(lst, key=len)) for key, lst in test_list]\n  return res", "task_id": "613_cd663e5c-cf25-4d17-80ec-f0679ad39532", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate all strings in record list as tuple attribute in the given tuple list.", "code": "def concatenate_strings(test_list):\n  res = [(key, ''.join(lst)) for key, lst in test_list]\n  return res", "task_id": "613_0be69dd0-42e7-4c8c-a6cc-d83654cb688f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of maximum value in record list as tuple attribute in the given tuple list.", "code": "def find_maximum_value_index(test_list):\n  res = [(key, lst.index(max(lst))) for key, lst in test_list]\n  return res", "task_id": "613_130cab00-e938-4607-8039-a022bdaa8d12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of minimum value in record list as tuple attribute in the given tuple list.", "code": "def find_minimum_value_index(test_list):\n  res = [(key, lst.index(min(lst))) for key, lst in test_list]\n  return res", "task_id": "613_b627e2b3-763e-49b2-9c25-e4833ebf5fff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply each value in record list as tuple attribute in the given tuple list by a given factor.", "code": "def multiply_values(test_list, factor):\n  res = [(key, [x * factor for x in lst]) for key, lst in test_list]\n  return res", "task_id": "613_934d58be-1871-4c5e-9262-c6407d65428a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray.", "code": "def find_max_sum_subarray(arr):\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "620_d67a7c3b-757b-4255-9ec3-79c06924f03f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in an array.", "code": "def longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    dp = [1] * len(arr)\n    for i in range(1, len(arr)):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "620_37ba8f26-8303-4d81-8eeb-d7ba1c1abe48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two strings.", "code": "def longest_common_subsequence(a, b):\n    m, n = len(a), len(b)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if a[i - 1] == b[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "620_dba2c1f6-d039-4808-aaa0-e4db77d47502", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to climb a staircase with n steps, where you can take 1 or 2 steps at a time.", "code": "def count_ways_to_climb(n):\n    if n == 0 or n == 1:\n        return 1\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        dp[i] = dp[i - 1] + dp[i - 2]\n    return dp[n]", "task_id": "620_877345ef-672b-4ff8-a5cd-a379f4f59327", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum cost to reach the top of a staircase, where each step has a cost associated with it.", "code": "def min_cost_climbing_stairs(cost):\n    n = len(cost)\n    dp = [0] * (n + 1)\n    for i in range(2, n + 1):\n        dp[i] = min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2])\n    return dp[n]", "task_id": "620_59dd9c76-ed65-4db4-a122-e511bde41bff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the number of unique paths from the top-left corner to the bottom-right corner of a m x n grid.", "code": "def unique_paths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n    return dp[m - 1][n - 1]", "task_id": "620_d88f6574-5580-4807-819a-a1da1e5c7b45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum profit you can achieve by buying and selling a stock once.", "code": "def max_profit(prices):\n    min_price = float('inf')\n    max_profit = 0\n    for price in prices:\n        min_price = min(min_price, price)\n        max_profit = max(max_profit, price - min_price)\n    return max_profit", "task_id": "620_7a493712-962a-449f-ab69-59ecf5244675", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if you can partition an array into two subsets such that the sum of elements in both subsets is equal.", "code": "def can_partition(nums):\n    total_sum = sum(nums)\n    if total_sum % 2 != 0:\n        return False\n    target = total_sum // 2\n    dp = [False] * (target + 1)\n    dp[0] = True\n    for num in nums:\n        for i in range(target, num - 1, -1):\n            dp[i] = dp[i] or dp[i - num]\n    return dp[target]", "task_id": "620_bb425f4f-a578-4e0a-9d74-c7e89ba4539c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to decode a given string of digits.", "code": "def num_decodings(s):\n    if not s or s[0] == '0':\n        return 0\n    n = len(s)\n    dp = [0] * (n + 1)\n    dp[0], dp[1] = 1, 1\n    for i in range(2, n + 1):\n        if s[i - 1] != '0':\n            dp[i] += dp[i - 1]\n        if 10 <= int(s[i - 2:i]) <= 26:\n            dp[i] += dp[i - 2]\n    return dp[n]", "task_id": "620_8049f437-d71f-44cc-8f99-ec04f4d4a770", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins needed to make up a given amount.", "code": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    for coin in coins:\n        for x in range(coin, amount + 1):\n            dp[x] = min(dp[x], dp[x - coin] + 1)\n    return dp[amount] if dp[amount] != float('inf') else -1", "task_id": "620_590e94dc-5824-4272-9714-27eda37698a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is even.", "code": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and int(ele) % 2 == 0 else ele for ele in test_list]\n  return res", "task_id": "621_e083ed87-7a62-4fe6-889d-22619eda64d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is odd.", "code": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and int(ele) % 2 != 0 else ele for ele in test_list]\n  return res", "task_id": "621_faa40c3f-3287-4c4f-a988-3e6ab375959e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is greater than 10.", "code": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and int(ele) > 10 else ele for ele in test_list]\n  return res", "task_id": "621_77f0d565-05ed-4e8a-8c85-338e4d5d63d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is less than 5.", "code": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and int(ele) < 5 else ele for ele in test_list]\n  return res", "task_id": "621_c23a5a9d-b0a1-4dde-b2cd-b80ed3410c28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a multiple of 3.", "code": "def increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and int(ele) % 3 == 0 else ele for ele in test_list]\n  return res", "task_id": "621_68b79e74-e1e8-4746-97dd-23ad12b8c4db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a prime number.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and is_prime(int(ele)) else ele for ele in test_list]\n  return res", "task_id": "621_84546269-04c6-4487-92f5-04990ab2d543", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a perfect square.", "code": "def is_perfect_square(n):\n  return int(n**0.5) ** 2 == n\n\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and is_perfect_square(int(ele)) else ele for ele in test_list]\n  return res", "task_id": "621_9353acc6-b8c3-4077-bdd7-54f2dfc7d241", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a Fibonacci number.", "code": "def is_fibonacci(n):\n  x, y = 0, 1\n  while y < n:\n    x, y = y, x + y\n  return n == y\n\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and is_fibonacci(int(ele)) else ele for ele in test_list]\n  return res", "task_id": "621_404dfc8c-9471-4c1e-87a1-d34737bcd4f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a palindrome.", "code": "def is_palindrome(n):\n  s = str(n)\n  return s == s[::-1]\n\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and is_palindrome(int(ele)) else ele for ele in test_list]\n  return res", "task_id": "621_41442e6d-9cd7-462f-8a8c-5b757311ccf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment the numeric values in the given list of strings by k, but only if the numeric value is a power of 2.", "code": "def is_power_of_two(n):\n  return n > 0 and (n & (n - 1)) == 0\n\ndef increment_numerics(test_list, K):\n  res = [str(int(ele) + K) if ele.isdigit() and is_power_of_two(int(ele)) else ele for ele in test_list]\n  return res", "task_id": "621_fc6a13c4-e021-4f8b-900f-1a05e0097231", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of three sorted arrays of the same size.", "code": "def find_median_of_three_sorted_arrays(arr1, arr2, arr3, n):\n  merged = sorted(arr1 + arr2 + arr3)\n  mid = len(merged) // 2\n  return (merged[mid - 1] + merged[mid]) / 2 if len(merged) % 2 == 0 else merged[mid]", "task_id": "622_19645c85-f188-4046-8aac-efbd485b977e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of an unsorted array.", "code": "def find_median_of_unsorted_array(arr):\n  arr.sort()\n  n = len(arr)\n  mid = n // 2\n  return (arr[mid - 1] + arr[mid]) / 2 if n % 2 == 0 else arr[mid]", "task_id": "622_9e4c71ae-0ef8-4d27-a6cf-da06c328246c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of two arrays, one sorted and one unsorted.", "code": "def find_median_of_mixed_arrays(arr1, arr2):\n  arr2.sort()\n  merged = sorted(arr1 + arr2)\n  mid = len(merged) // 2\n  return (merged[mid - 1] + merged[mid]) / 2 if len(merged) % 2 == 0 else merged[mid]", "task_id": "622_ab13f1fe-3f07-42a4-be4e-26f02a074461", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a sorted array that may contain duplicate elements.", "code": "def find_median_of_sorted_array_with_duplicates(arr):\n  n = len(arr)\n  mid = n // 2\n  return (arr[mid - 1] + arr[mid]) / 2 if n % 2 == 0 else arr[mid]", "task_id": "622_0436e4c1-00f2-4a14-92d5-d527e9a4f53b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of an array with an even number of elements.", "code": "def find_median_of_even_length_array(arr):\n  arr.sort()\n  mid = len(arr) // 2\n  return (arr[mid - 1] + arr[mid]) / 2", "task_id": "622_293fd698-89d0-4275-8463-402f647a5c8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of an array with an odd number of elements.", "code": "def find_median_of_odd_length_array(arr):\n  arr.sort()\n  mid = len(arr) // 2\n  return arr[mid]", "task_id": "622_0aa67533-a5cb-4057-9247-dd460d0a1b6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of two sorted arrays of different sizes.", "code": "def find_median_of_two_sorted_arrays_different_sizes(arr1, arr2):\n  merged = sorted(arr1 + arr2)\n  mid = len(merged) // 2\n  return (merged[mid - 1] + merged[mid]) / 2 if len(merged) % 2 == 0 else merged[mid]", "task_id": "622_a2c6b6a3-31ab-4eae-841c-8b79315850a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of two unsorted arrays.", "code": "def find_median_of_two_unsorted_arrays(arr1, arr2):\n  merged = sorted(arr1 + arr2)\n  mid = len(merged) // 2\n  return (merged[mid - 1] + merged[mid]) / 2 if len(merged) % 2 == 0 else merged[mid]", "task_id": "622_b7854794-1b25-4ab2-ab96-84489968711e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a sorted array that may contain negative numbers.", "code": "def find_median_of_sorted_array_with_negative_numbers(arr):\n  n = len(arr)\n  mid = n // 2\n  return (arr[mid - 1] + arr[mid]) / 2 if n % 2 == 0 else arr[mid]", "task_id": "622_fefe2523-494c-4693-95e1-a6c751121517", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a sorted array that contains floating-point numbers.", "code": "def find_median_of_sorted_array_with_floats(arr):\n  n = len(arr)\n  mid = n // 2\n  return (arr[mid - 1] + arr[mid]) / 2 if n % 2 == 0 else arr[mid]", "task_id": "622_619fb60b-7ebc-45a6-814c-23416649c0bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "624_77ee4bc4-83b6-473e-96c7-534debe01319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "624_63348521-be02-4748-b639-5576da88a6f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "624_f1c81177-a9bb-406d-aa35-7e880f53efb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all spaces from the given string.", "code": "def remove_spaces(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "624_f0f07d30-d4ab-4598-a754-fdebbcb8c630", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all vowels in the given string with a specified character.", "code": "def replace_vowels(s: str, char: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char if c in vowels else c for c in s])", "task_id": "624_383dbed6-1cee-4aa1-b5a1-17a7492569a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in the given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "624_ad3b4799-6f17-4fe2-9f7b-b0f2ff80f31e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in the given string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "624_36b227b7-a8fe-4c6d-8c59-e1d53dfc5b7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "624_53468400-78db-4fda-8c6c-569662251dd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from the given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([c for c in s if c not in vowels])", "task_id": "624_b47d3a4f-a003-4ca5-b53d-48109189c7f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in the given string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "624_25b3e6ed-75d7-44f7-bc41-174dbb25e503", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of elements in the middle of a given list, leaving the first and last elements unchanged.", "code": "def reverse_middle(lst):\n    if len(lst) <= 2:\n        return lst\n    return [lst[0]] + lst[1:-1][::-1] + [lst[-1]]", "task_id": "625_790d11c7-591b-4ba8-bf43-a21b2d1f53df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a given list to the right by k positions.", "code": "def rotate_right(lst, k):\n    k = k % len(lst)\n    return lst[-k:] + lst[:-k]", "task_id": "625_88a4648c-63e5-4c1f-aaf2-d4bafc8e6110", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap every pair of adjacent elements in a given list.", "code": "def swap_adjacent(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst", "task_id": "625_060e48b1-ab21-4a23-a256-608c83702d79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all zeros in a given list to the end, maintaining the order of non-zero elements.", "code": "def move_zeros(lst):\n    return [x for x in lst if x != 0] + [0] * lst.count(0)", "task_id": "625_8bf6143c-2048-453e-9994-ecba5c1bbdb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to duplicate each element in a given list.", "code": "def duplicate_elements(lst):\n    return [x for x in lst for _ in range(2)]", "task_id": "625_9259679a-214c-4a7e-b134-e9e4348a462b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a given list while maintaining the original order.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for x in lst:\n        if x not in seen:\n            result.append(x)\n            seen.add(x)\n    return result", "task_id": "625_4af74b20-f370-4586-a36d-f2b77892246d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of sums of each pair of adjacent elements in a given list.", "code": "def sum_pairs(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "625_9478fae0-089b-4bcb-be05-26f16075b47c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to split a given list into two lists: one containing the elements at even indices and the other containing the elements at odd indices.", "code": "def split_list(lst):\n    return (lst[::2], lst[1::2])", "task_id": "625_b7cb8f49-fd7f-47c5-82aa-c3b7c56ab22e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of cumulative sums of elements in a given list.", "code": "def cumulative_sum(lst):\n    result = []\n    total = 0\n    for x in lst:\n        total += x\n        result.append(total)\n    return result", "task_id": "625_120d4d76-59e4-4d3a-bef9-9a4281f8ba8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum and minimum elements in a given list and return them as a tuple.", "code": "def find_max_min(lst):\n    return (max(lst), min(lst))", "task_id": "625_cf866b79-a39c-43cf-8bff-021e76025a08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest rectangle that can be inscribed in a semicircle of radius r.", "code": "def max_rectangle_area(r: float) -> float:\n    if r < 0:\n        return -1\n    return r * r", "task_id": "626_8a7e3542-3881-4b49-8ebc-bcd1c83263e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest square that can be inscribed in a semicircle of radius r.", "code": "def max_square_area(r: float) -> float:\n    if r < 0:\n        return -1\n    return (r * r) / 2", "task_id": "626_8884acb3-2956-4f3b-bb96-eb5f3e140457", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest volume of a cylinder that can be inscribed in a sphere of radius r and height h.", "code": "def max_cylinder_volume(r: float, h: float) -> float:\n    if r < 0 or h < 0:\n        return -1\n    return (3.14159 * r * r * h) / 2", "task_id": "626_752c5111-08fc-407e-8b32-64f0dac59ea3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest volume of a cuboid that can be inscribed in a sphere of radius r, given length l, width w, and height h.", "code": "def max_cuboid_volume(l: float, w: float, h: float) -> float:\n    if l < 0 or w < 0 or h < 0:\n        return -1\n    return l * w * h", "task_id": "626_73d07fc2-de44-45a9-81e6-f8dd2ca598da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest surface area of a cylinder that can be inscribed in a sphere of radius r and height h.", "code": "def max_cylinder_surface_area(r: float, h: float) -> float:\n    if r < 0 or h < 0:\n        return -1\n    return (2 * 3.14159 * r * h) + (2 * 3.14159 * r * r)", "task_id": "626_0588191e-d1eb-40d4-b331-5ed02baf533b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest volume of a cone that can be inscribed in a sphere of radius r and height h.", "code": "def max_cone_volume(r: float, h: float) -> float:\n    if r < 0 or h < 0:\n        return -1\n    return (1/3) * 3.14159 * r * r * h", "task_id": "626_e263752e-f16f-49c4-8fce-1f9f31eb10e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest surface area of a cone that can be inscribed in a sphere of radius r and height h.", "code": "def max_cone_surface_area(r: float, h: float) -> float:\n    if r < 0 or h < 0:\n        return -1\n    return 3.14159 * r * (r + (h**2 + r**2)**0.5)", "task_id": "626_5dac6ce7-fde8-4f30-9071-bff43c83790b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest volume of a pyramid that can be inscribed in a sphere of radius r, given base area b and height h.", "code": "def max_pyramid_volume(b: float, h: float) -> float:\n    if b < 0 or h < 0:\n        return -1\n    return (1/3) * b * h", "task_id": "626_da08ec73-758e-42dc-86b4-2ef1ff4a0a54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest surface area of a pyramid that can be inscribed in a sphere of radius r, given base area b and height h.", "code": "def max_pyramid_surface_area(b: float, h: float) -> float:\n    if b < 0 or h < 0:\n        return -1\n    return b + (1/2) * (4 * (b**0.5) * ((h**2 + (b**0.5)**2)**0.5))", "task_id": "626_fe2d065e-7a4a-49dd-a890-1868ea8ad209", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest volume of a sphere that can be inscribed in a cube of side length r.", "code": "def max_sphere_volume(r: float) -> float:\n    if r < 0:\n        return -1\n    return (4/3) * 3.14159 * (r/2)**3", "task_id": "626_a5354c45-f679-43c7-9500-f9c0af42ee92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all vowels in the given string with the character '*'.", "code": "def replace_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join(['*' if char in vowels else char for char in s])", "task_id": "628_218fae0f-3ef0-4d79-9fdc-8d7c4fab3078", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a given string.", "code": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])", "task_id": "628_260bad33-073f-404c-a5a6-131cf68b1173", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all duplicate characters from a given string.", "code": "def remove_duplicates(s):\n    seen = set()\n    result = []\n    for char in s:\n        if char not in seen:\n            seen.add(char)\n            result.append(char)\n    return ''.join(result)", "task_id": "628_ca244b10-07d1-4cc9-a25e-34da0cfecb88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s):\n    return ' '.join([word.capitalize() for word in s.split()])", "task_id": "628_8cea6041-d552-4573-810b-00658c9e8aac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    s = ''.join(filter(str.isalnum, s)).lower()\n    return s == s[::-1]", "task_id": "628_afab99a2-78f5-47c4-b15e-ab5da454892d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s):\n    return len(s.split())", "task_id": "628_f8e834ef-5598-4c4a-b695-4b8b07311785", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given string.", "code": "def longest_word(s):\n    words = s.split()\n    return max(words, key=len)", "task_id": "628_629f7eb4-1fba-46b1-95e1-c7a6f8481e8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a given string with the character '#'.", "code": "def replace_digit_with_hash(s):\n    return ''.join(['#' if char.isdigit() else char for char in s])", "task_id": "628_0dba09c0-2969-477e-8ee1-d579310b251c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "628_24264623-219c-414a-91b6-31b230dd2c74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(s):\n    return ''.join(s.split())", "task_id": "628_997cd7ec-763c-4077-842c-34fe99e5ada0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of individual elements in a list using lambda function.", "code": "def sum_of_squares(nums):\n    return sum(map(lambda x: x**2, nums))", "task_id": "623_7a26c43b-17c0-44c3-93fc-4d7bc4143fed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment each element in a list by a given value using lambda function.", "code": "def increment_elements(nums, increment):\n    return list(map(lambda x: x + increment, nums))", "task_id": "623_aebe7b74-adea-4e4a-9578-88df2e66f942", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from a list using lambda function.", "code": "def filter_even(nums):\n    return list(filter(lambda x: x % 2 == 0, nums))", "task_id": "623_73e2753e-a098-46ac-af23-5c710b52ca5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of all elements in a list using lambda function and reduce.", "code": "from functools import reduce\n\ndef product_of_elements(nums):\n    return reduce(lambda x, y: x * y, nums)", "task_id": "623_a875d985-bf23-4ead-a37d-58cbe2c4d634", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize each string in a list using lambda function.", "code": "def capitalize_strings(strings):\n    return list(map(lambda s: s.capitalize(), strings))", "task_id": "623_721e9d8e-1af5-410a-878c-c91e01d323e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out strings longer than a given length from a list using lambda function.", "code": "def filter_short_strings(strings, max_length):\n    return list(filter(lambda s: len(s) <= max_length, strings))", "task_id": "623_777d8206-e219-4125-9865-b876d920b22c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each string in a list using lambda function.", "code": "def reverse_strings(strings):\n    return list(map(lambda s: s[::-1], strings))", "task_id": "623_03b71a1f-93ac-4191-95c6-69b0e4b4d56d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of lengths of all strings in a list using lambda function.", "code": "def sum_of_lengths(strings):\n    return sum(map(lambda s: len(s), strings))", "task_id": "623_5939a323-9e52-47f2-b0c0-81db5e5dd4cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert each integer in a list to a float using lambda function.", "code": "def convert_to_floats(nums):\n    return list(map(lambda x: float(x), nums))", "task_id": "623_d340eaa5-501f-465f-912d-8e78ffb1890a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute value of each element in a list using lambda function.", "code": "def absolute_values(nums):\n    return list(map(lambda x: abs(x), nums))", "task_id": "623_adab6748-7e11-4442-82e4-d6b79f47f345", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing positive number from the given array.", "code": "def find_first_missing_positive(nums):\n    nums = [num for num in nums if num > 0]\n    nums.sort()\n    smallest_missing = 1\n    for num in nums:\n        if num == smallest_missing:\n            smallest_missing += 1\n    return smallest_missing", "task_id": "627_44d85ddf-7261-4dd4-b98b-9bf9888f0a07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing even number from the given array.", "code": "def find_first_missing_even(nums):\n    nums = [num for num in nums if num % 2 == 0]\n    nums.sort()\n    smallest_missing = 0\n    for num in nums:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "627_04eaf345-11c7-4c82-821a-96e43aa93a83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing odd number from the given array.", "code": "def find_first_missing_odd(nums):\n    nums = [num for num in nums if num % 2 != 0]\n    nums.sort()\n    smallest_missing = 1\n    for num in nums:\n        if num == smallest_missing:\n            smallest_missing += 2\n    return smallest_missing", "task_id": "627_2dc1597e-aaad-4b42-a739-0d29b68587e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing multiple of three from the given array.", "code": "def find_first_missing_multiple_of_three(nums):\n    nums = [num for num in nums if num % 3 == 0]\n    nums.sort()\n    smallest_missing = 3\n    for num in nums:\n        if num == smallest_missing:\n            smallest_missing += 3\n    return smallest_missing", "task_id": "627_2acb2307-84c7-41f0-a2af-1456b601a69d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing multiple of five from the given array.", "code": "def find_first_missing_multiple_of_five(nums):\n    nums = [num for num in nums if num % 5 == 0]\n    nums.sort()\n    smallest_missing = 5\n    for num in nums:\n        if num == smallest_missing:\n            smallest_missing += 5\n    return smallest_missing", "task_id": "627_ad496f98-1e91-4844-98d7-84b629f3e44b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing perfect square from the given array.", "code": "def find_first_missing_square(nums):\n    nums = [num for num in nums if int(num**0.5)**2 == num]\n    nums.sort()\n    smallest_missing = 1\n    while smallest_missing**2 in nums:\n        smallest_missing += 1\n    return smallest_missing**2", "task_id": "627_2ad891c5-2f29-4223-885c-d2af8974c01f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing prime number from the given array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_missing_prime(nums):\n    nums = [num for num in nums if is_prime(num)]\n    nums.sort()\n    smallest_missing = 2\n    while smallest_missing in nums:\n        smallest_missing += 1\n        while not is_prime(smallest_missing):\n            smallest_missing += 1\n    return smallest_missing", "task_id": "627_c76a20d5-5475-47b2-a49e-b9247d528809", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing Fibonacci number from the given array.", "code": "def fibonacci_sequence(limit):\n    fibs = [0, 1]\n    while fibs[-1] < limit:\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs\n\ndef find_first_missing_fibonacci(nums):\n    fibs = fibonacci_sequence(max(nums) if nums else 0)\n    nums = [num for num in nums if num in fibs]\n    nums.sort()\n    for fib in fibs:\n        if fib not in nums:\n            return fib\n    return fibs[-1] + fibs[-2]", "task_id": "627_90f69c96-d3ee-41ce-932a-5b71f836f771", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing power of two from the given array.", "code": "def find_first_missing_power_of_two(nums):\n    nums = [num for num in nums if (num & (num - 1)) == 0 and num != 0]\n    nums.sort()\n    smallest_missing = 1\n    while smallest_missing in nums:\n        smallest_missing *= 2\n    return smallest_missing", "task_id": "627_3c070775-3319-48c8-9527-b2d08b8d57f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest missing factorial number from the given array.", "code": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef find_first_missing_factorial(nums):\n    factorials = [factorial(i) for i in range(1, 11)]\n    nums = [num for num in nums if num in factorials]\n    nums.sort()\n    for fact in factorials:\n        if fact not in nums:\n            return fact\n    return factorials[-1] * (len(factorials) + 1)", "task_id": "627_65f950d3-25c0-46ce-af6b-07312d65efc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find even numbers from a list of integers.", "code": "def find_even_numbers(nums):\n    return [num for num in nums if num % 2 == 0]", "task_id": "629_475e1702-8883-4036-9303-0e7f64b7d623", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find odd numbers from a list of integers.", "code": "def find_odd_numbers(nums):\n    return [num for num in nums if num % 2 != 0]", "task_id": "629_a776f85f-e23c-4ed6-ba8c-dac970d8ba40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find positive numbers from a list of integers.", "code": "def find_positive_numbers(nums):\n    return [num for num in nums if num > 0]", "task_id": "629_1a2a832c-f2cf-45d2-b18c-cd4b8bc013fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find negative numbers from a list of integers.", "code": "def find_negative_numbers(nums):\n    return [num for num in nums if num < 0]", "task_id": "629_c492bd27-c109-4771-b201-87241a0faf2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find prime numbers from a list of integers.", "code": "def find_prime_numbers(nums):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return [num for num in nums if is_prime(num)]", "task_id": "629_70c9dcb3-078d-4b4a-8661-6dffb0cdd54d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find palindromic words from a list of strings.", "code": "def find_palindromes(words):\n    return [word for word in words if word == word[::-1]]", "task_id": "629_601c5345-19ca-4fdf-90f2-be4f9e061a53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find words longer than a given length from a list of strings.", "code": "def find_long_words(words, length):\n    return [word for word in words if len(word) > length]", "task_id": "629_22ad13ff-6916-44e3-9521-2505eb9981ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find words shorter than a given length from a list of strings.", "code": "def find_short_words(words, length):\n    return [word for word in words if len(word) < length]", "task_id": "629_8e56635f-5dd7-404c-8b3d-d26a48a421dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find words that are in uppercase from a list of strings.", "code": "def find_uppercase_words(words):\n    return [word for word in words if word.isupper()]", "task_id": "629_e5071f85-2729-4753-aa74-16ef7946458f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find words that are in lowercase from a list of strings.", "code": "def find_lowercase_words(words):\n    return [word for word in words if word.islower()]", "task_id": "629_ef338e11-4981-4280-891f-30db17a65c0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all vowels in a given string with a star (*) using regex.", "code": "import re\n\ndef replace_vowels_with_star(text: str) -> str:\n    return re.sub(r'[aeiouAEIOU]', '*', text)", "task_id": "631_cc90f09d-cfa9-48c2-927d-1aa1fe609c63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a given string with a hash (#) using regex.", "code": "import re\n\ndef replace_digits_with_hash(text: str) -> str:\n    return re.sub(r'\\d', '#', text)", "task_id": "631_c85b44f4-49ad-412d-9fbf-9b9ba0ec4cfe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters from a given string using regex.", "code": "import re\n\ndef remove_special_characters(text: str) -> str:\n    return re.sub(r'[^\\w\\s]', '', text)", "task_id": "631_9b524562-18aa-411d-91ee-c7d749bf7f45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all consonants in a given string with an at symbol (@) using regex.", "code": "import re\n\ndef replace_consonants_with_at(text: str) -> str:\n    return re.sub(r'[^aeiouAEIOU\\W\\d_]', '@', text)", "task_id": "631_acd04a60-fa27-4f4f-aff2-75845f96eb1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a given string with a dash (-) using regex.", "code": "import re\n\ndef replace_spaces_with_dash(text: str) -> str:\n    return re.sub(r'\\s', '-', text)", "task_id": "631_9d56e6b6-e222-41ee-96c9-49ed7f8ab424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all lowercase letters in a given string with their uppercase counterparts using regex.", "code": "import re\n\ndef replace_lowercase_with_uppercase(text: str) -> str:\n    return re.sub(r'[a-z]', lambda x: x.group().upper(), text)", "task_id": "631_a01f7f09-ba07-484c-be23-8b094fc3d6b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all uppercase letters in a given string with their lowercase counterparts using regex.", "code": "import re\n\ndef replace_uppercase_with_lowercase(text: str) -> str:\n    return re.sub(r'[A-Z]', lambda x: x.group().lower(), text)", "task_id": "631_b3affeb5-cafc-45f5-b6f0-5809d88e9527", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a given string with the word 'number' using regex.", "code": "import re\n\ndef replace_digits_with_word(text: str) -> str:\n    return re.sub(r'\\d', 'number', text)", "task_id": "631_3c9b5924-94c3-4d91-ad6c-1bc7c03c39ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace multiple consecutive spaces in a given string with a single space using regex.", "code": "import re\n\ndef replace_multiple_spaces_with_single(text: str) -> str:\n    return re.sub(r'\\s+', ' ', text)", "task_id": "631_f82ef8a8-43bc-4263-a110-05899dcbc533", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a given string using regex.", "code": "import re\n\ndef remove_digits(text: str) -> str:\n    return re.sub(r'\\d', '', text)", "task_id": "631_918ad01e-e487-40b0-a39a-1be5bea06983", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all negative numbers to the end of the given list.", "code": "def move_negative(nums):\n    negatives = [num for num in nums if num < 0]\n    non_negatives = [num for num in nums if num >= 0]\n    return non_negatives + negatives", "task_id": "632_2925edb5-9a13-41b0-949d-9617b6d8c3f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all odd numbers to the end of the given list.", "code": "def move_odd(nums):\n    odds = [num for num in nums if num % 2 != 0]\n    evens = [num for num in nums if num % 2 == 0]\n    return evens + odds", "task_id": "632_85790661-69ab-46b8-94fb-5bb9398926b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all vowels to the end of the given string.", "code": "def move_vowels(s):\n    vowels = [char for char in s if char in 'aeiouAEIOU']\n    consonants = [char for char in s if char not in 'aeiouAEIOU']\n    return ''.join(consonants + vowels)", "task_id": "632_f6e48d59-3cad-4c8e-90ac-7d102f7c101e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all uppercase letters to the end of the given string.", "code": "def move_uppercase(s):\n    uppercase = [char for char in s if char.isupper()]\n    lowercase = [char for char in s if not char.isupper()]\n    return ''.join(lowercase + uppercase)", "task_id": "632_972675ee-664c-4d29-aec4-0cd8d7b97db7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all numbers divisible by 3 to the end of the given list.", "code": "def move_divisible_by_three(nums):\n    divisible_by_three = [num for num in nums if num % 3 == 0]\n    not_divisible_by_three = [num for num in nums if num % 3 != 0]\n    return not_divisible_by_three + divisible_by_three", "task_id": "632_eab7022d-df68-497a-97f7-3324f850f8c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all strings containing the letter 'a' to the end of the given list.", "code": "def move_strings_with_a(strings):\n    with_a = [string for string in strings if 'a' in string]\n    without_a = [string for string in strings if 'a' not in string]\n    return without_a + with_a", "task_id": "632_b6f25736-0782-4c39-9963-210cfdcfd25b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all floating point numbers to the end of the given list.", "code": "def move_floats(nums):\n    floats = [num for num in nums if isinstance(num, float)]\n    integers = [num for num in nums if not isinstance(num, float)]\n    return integers + floats", "task_id": "632_9abf727f-da28-4d18-a26b-2ca60403f5d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all strings longer than a given length to the end of the list.", "code": "def move_long_strings(strings, length):\n    long_strings = [string for string in strings if len(string) > length]\n    short_strings = [string for string in strings if len(string) <= length]\n    return short_strings + long_strings", "task_id": "632_36fabc87-265b-4e11-b486-189356785e8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all palindromic strings to the end of the given list.", "code": "def move_palindromes(strings):\n    palindromes = [string for string in strings if string == string[::-1]]\n    non_palindromes = [string for string in strings if string != string[::-1]]\n    return non_palindromes + palindromes", "task_id": "632_520bcadc-5e29-45e7-90c4-a8ecb1b374ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to move all empty strings to the end of the given list.", "code": "def move_empty_strings(strings):\n    empty_strings = [string for string in strings if string == '']\n    non_empty_strings = [string for string in strings if string != '']\n    return non_empty_strings + empty_strings", "task_id": "632_1750a1d5-e308-43b4-9a3c-9a527f124cc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid.", "code": "def adjacent_coordinates(x: int, y: int) -> list:\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_e6da734f-1e3f-48dc-ae23-5fb74768bc0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y, z) on a 3D grid.", "code": "def adjacent_coordinates_3d(x: int, y: int, z: int) -> list:\n    directions = [(dx, dy, dz) for dx in [-1, 0, 1] for dy in [-1, 0, 1] for dz in [-1, 0, 1] if (dx, dy, dz) != (0, 0, 0)]\n    return [(x + dx, y + dy, z + dz) for dx, dy, dz in directions]", "task_id": "630_afc36315-64fc-48ca-b35f-5ae404de958c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid, ensuring the coordinates are within the bounds of the grid (0 to max_x and 0 to max_y).", "code": "def adjacent_coordinates_within_bounds(x: int, y: int, max_x: int, max_y: int) -> list:\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    return [(x + dx, y + dy) for dx, dy in directions if 0 <= x + dx <= max_x and 0 <= y + dy <= max_y]", "task_id": "630_e5c06cfb-596e-49fc-aa8a-b88f53f5848f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (excluding diagonals) of a given coordinate (x, y) on a 2D grid.", "code": "def adjacent_coordinates_no_diagonals(x: int, y: int) -> list:\n    directions = [(-1, 0), (0, -1), (0, 1), (1, 0)]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_d5e35e14-1091-4832-bc0e-7a775150118a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid within a given distance.", "code": "def adjacent_coordinates_with_distance(x: int, y: int, distance: int) -> list:\n    directions = [(dx, dy) for dx in range(-distance, distance + 1) for dy in range(-distance, distance + 1) if (dx, dy) != (0, 0)]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_b8e28759-b571-42fb-a493-827304ce15dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid, excluding coordinates that are in the obstacles list.", "code": "def adjacent_coordinates_with_obstacles(x: int, y: int, obstacles: list) -> list:\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    return [(x + dx, y + dy) for dx, dy in directions if (x + dx, y + dy) not in obstacles]", "task_id": "630_5eb773c3-00e8-4209-85bd-c42cbe3da6bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates of a given coordinate (x, y) on a hexagonal grid.", "code": "def adjacent_coordinates_hex(x: int, y: int) -> list:\n    directions = [(-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0)]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_10f93b11-f14c-45ba-b79b-4e014f98fea5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid within a given radius.", "code": "def adjacent_coordinates_within_radius(x: int, y: int, radius: int) -> list:\n    directions = [(dx, dy) for dx in range(-radius, radius + 1) for dy in range(-radius, radius + 1) if (dx, dy) != (0, 0) and abs(dx) + abs(dy) <= radius]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_8f8317b0-6fed-44f3-9a34-9bd627daa342", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid and return them along with their weights from a given dictionary.", "code": "def adjacent_coordinates_with_weights(x: int, y: int, weights: dict) -> list:\n    directions = [(-1, -1), (-1, 0), (-1, 1), (0, -1), (0, 1), (1, -1), (1, 0), (1, 1)]\n    return [((x + dx, y + dy), weights.get((x + dx, y + dy), 0)) for dx, dy in directions]", "task_id": "630_0f907372-a7a6-4226-9f25-e2bd0e41b429", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all the adjacent coordinates (including diagonals) of a given coordinate (x, y) on a 2D grid within a given circular radius.", "code": "def adjacent_coordinates_within_circle(x: int, y: int, radius: int) -> list:\n    directions = [(dx, dy) for dx in range(-radius, radius + 1) for dy in range(-radius, radius + 1) if (dx, dy) != (0, 0) and dx*dx + dy*dy <= radius*radius]\n    return [(x + dx, y + dy) for dx, dy in directions]", "task_id": "630_18eebc33-ebfb-498f-96e7-b6bb2eb30827", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of AND of all pairs of numbers in the given array.", "code": "def sum_of_and_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += arr[i] & arr[j]\n    return ans", "task_id": "633_e3c7e45f-a7e4-4366-87b0-741e24b77cfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of OR of all pairs of numbers in the given array.", "code": "def sum_of_or_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += arr[i] | arr[j]\n    return ans", "task_id": "633_6140ae97-9fd8-465e-8cbe-dde4c94c77d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the product of all pairs of numbers in the given array.", "code": "def sum_of_multiples(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += arr[i] * arr[j]\n    return ans", "task_id": "633_1745338e-4427-4338-8d18-d557d4af2e5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the absolute differences of all pairs of numbers in the given array.", "code": "def sum_of_differences(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += abs(arr[i] - arr[j])\n    return ans", "task_id": "633_193752a0-59e6-45a6-9567-52118d47ce19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all pairs of numbers in the given array.", "code": "def sum_of_squares(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += (arr[i] ** 2 + arr[j] ** 2)\n    return ans", "task_id": "633_bbe79072-3df6-4f6a-b06d-74d81dc6e850", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the minimum of all pairs of numbers in the given array.", "code": "def sum_of_min_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += min(arr[i], arr[j])\n    return ans", "task_id": "633_884e53dc-15f7-471a-b9ee-e32106a042ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the maximum of all pairs of numbers in the given array.", "code": "def sum_of_max_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += max(arr[i], arr[j])\n    return ans", "task_id": "633_abbf27cd-06ca-4676-8aed-8134e637ef8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the bitwise NOR of all pairs of numbers in the given array.", "code": "def sum_of_bitwise_nor_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += ~(arr[i] | arr[j])\n    return ans", "task_id": "633_f3615b0a-c1ff-4004-ba87-316edc55944b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the bitwise NAND of all pairs of numbers in the given array.", "code": "def sum_of_bitwise_nand_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += ~(arr[i] & arr[j])\n    return ans", "task_id": "633_bd4d5f7c-272a-4064-ae7b-74f9af0e2370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the bitwise XNOR of all pairs of numbers in the given array.", "code": "def sum_of_bitwise_xnor_pairs(arr: list[int]) -> int:\n    ans = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i + 1, n):\n            ans += ~(arr[i] ^ arr[j])\n    return ans", "task_id": "633_1c65e60c-2aae-46a6-8e9f-293f57caeed7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n odd natural numbers.", "code": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(n):\n        j = 2*i + 1\n        sum += j**3\n    return sum", "task_id": "634_a2ed7bcc-97fc-4cbe-b321-861b8820720f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n multiples of 3.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 3 * i\n        sum += j**2\n    return sum", "task_id": "634_63b892a2-393f-4c04-95fe-6b0350a521a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth powers of the first n natural numbers.", "code": "def sum_of_fifth_powers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i**5\n    return sum", "task_id": "634_5c34cd77-001c-4428-b542-63f555660c70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    sum = 0\n    for i in range(1, n + 1):\n        sum += factorial(i)\n    return sum", "task_id": "634_f87445e0-5a58-46a8-bdb4-0ca479173361", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n prime numbers.", "code": "def sum_of_squares_of_primes(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum = 0\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            sum += num**2\n            count += 1\n        num += 1\n    return sum", "task_id": "634_45308c31-0e49-4747-aeaa-4fc3724b0aa8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n Fibonacci numbers.", "code": "def sum_of_cubes_of_fibonacci(n):\n    def fibonacci(x):\n        if x == 0:\n            return 0\n        elif x == 1:\n            return 1\n        else:\n            return fibonacci(x - 1) + fibonacci(x - 2)\n    sum = 0\n    for i in range(n):\n        sum += fibonacci(i)**3\n    return sum", "task_id": "634_21081059-2557-4086-8b8b-09ce0c0a5af2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth powers of the first n multiples of 5.", "code": "def sum_of_fourth_powers_of_multiples_of_5(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 5 * i\n        sum += j**4\n    return sum", "task_id": "634_db83a730-ffda-4d52-baae-0dee2fa5d42d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n even natural numbers.", "code": "def sum_of_squares_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 2 * i\n        sum += j**2\n    return sum", "task_id": "634_4f3c2725-bb29-4515-a712-540398e9b886", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n multiples of 7.", "code": "def sum_of_cubes_of_multiples_of_7(n):\n    sum = 0\n    for i in range(1, n + 1):\n        j = 7 * i\n        sum += j**3\n    return sum", "task_id": "634_9e50ff5c-82f1-4068-99cf-06f8ed7487e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth powers of the first n odd natural numbers.", "code": "def sum_of_fourth_powers_of_odd_numbers(n):\n    sum = 0\n    for i in range(n):\n        j = 2 * i + 1\n        sum += j**4\n    return sum", "task_id": "634_33ee8765-c822-4f45-8b01-482692e1fef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is even.", "code": "def is_even(x: int) -> bool:\n    return x % 2 == 0", "task_id": "637_7fc85469-a59e-40a4-9bed-0934ea8665eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "637_5a97f543-cc19-4b24-a534-f5c6491fa967", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is positive.", "code": "def is_positive(n: int) -> bool:\n    return n > 0", "task_id": "637_559e6bd3-0e36-4ba7-a9e5-2730f5155c48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given character is a vowel.", "code": "def is_vowel(c: str) -> bool:\n    return c.lower() in 'aeiou'", "task_id": "637_1dfdd951-c71e-429a-af34-274fedfc32b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is in uppercase.", "code": "def is_uppercase(s: str) -> bool:\n    return s.isupper()", "task_id": "637_931eb73e-c690-4e0b-9f6b-1b23dc3f6703", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "task_id": "637_fd0b42ba-741c-4f34-80a8-f55b12ebd6f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "637_6fb17e50-c140-4f5b-b399-c342f7b87ac1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is divisible by 3.", "code": "def is_divisible_by_3(n: int) -> bool:\n    return n % 3 == 0", "task_id": "637_8e23e8f8-9fe8-497c-973c-445f99208b04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a perfect square.", "code": "def is_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "637_d832da95-7c69-4247-84b4-b086ebfc8952", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "637_b2a7a595-13bb-4345-8cd2-20e52cdd3ae6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a max heap and then pop off the largest values one at a time.", "code": "import heapq as hq\n\ndef reverse_heap_sort(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, -value)\n    return [-hq.heappop(h) for i in range(len(h))]", "task_id": "635_98edbe5a-b2dc-448b-b1b6-719b2772e470", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all string values into a heap and then pop off the smallest values one at a time.", "code": "import heapq as hq\n\ndef heap_sort_strings(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "task_id": "635_62e3e8ef-e012-4522-8ad1-fd1de77bf82e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all tuples (first element is the key) into a heap and then pop off the smallest key values one at a time.", "code": "import heapq as hq\n\ndef heap_sort_tuples(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "task_id": "635_d47b3b2e-b7c0-48b8-8e24-129507daca2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap and then pop off the largest values one at a time in descending order.", "code": "import heapq as hq\n\ndef heap_sort_descending(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, -value)\n    return [-hq.heappop(h) for i in range(len(h))]", "task_id": "635_409e2263-b932-4534-9e5e-37daf9917ad2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap based on their absolute values and then pop off the smallest absolute values one at a time.", "code": "import heapq as hq\n\ndef heap_sort_abs(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, (abs(value), value))\n    return [hq.heappop(h)[1] for i in range(len(h))]", "task_id": "635_dbfab063-79f8-4cd2-a947-483cc9ec9e09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap based on a custom key function and then pop off the smallest key values one at a time.", "code": "import heapq as hq\n\ndef heap_sort_custom_key(iterable, key):\n    h = []\n    for value in iterable:\n        hq.heappush(h, (key(value), value))\n    return [hq.heappop(h)[1] for i in range(len(h))]", "task_id": "635_582e2e79-f602-4f32-aadb-9c853c077c01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap and then pop off the smallest values one at a time, including duplicates.", "code": "import heapq as hq\n\ndef heap_sort_with_duplicates(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, value)\n    return [hq.heappop(h) for i in range(len(h))]", "task_id": "635_65bfc4f5-28d6-4cd7-990d-27789930ca54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap and then pop off the smallest values one at a time, but even numbers should come before odd numbers.", "code": "import heapq as hq\n\ndef heap_sort_even_first(iterable):\n    h = []\n    for value in iterable:\n        hq.heappush(h, (value % 2, value))\n    return [hq.heappop(h)[1] for i in range(len(h))]", "task_id": "635_e0e78fca-89d7-4e0c-8321-f1170d0a5b7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap along with their original indices and then pop off the smallest values one at a time, returning the sorted values along with their original indices.", "code": "import heapq as hq\n\ndef heap_sort_with_index(iterable):\n    h = []\n    for index, value in enumerate(iterable):\n        hq.heappush(h, (value, index))\n    return [(hq.heappop(h)[0], index) for index in range(len(h))]", "task_id": "635_9dc1392f-c061-448c-80ff-741a16d630e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to push all values into a heap and then pop off the smallest values one at a time, but return the sorted values along with the count of how many times each value appears.", "code": "import heapq as hq\n\ndef heap_sort_with_count(iterable):\n    h = []\n    count = {}\n    for value in iterable:\n        if value in count:\n            count[value] += 1\n        else:\n            count[value] = 1\n        hq.heappush(h, value)\n    sorted_values = [hq.heappop(h) for i in range(len(h))]\n    return [(value, count[value]) for value in sorted_values]", "task_id": "635_6aa1b43d-dba0-445b-bb4d-80fe37f1db44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the sum of the roots of a quadratic equation is zero.", "code": "def is_sum_of_roots_zero(a, b, c):\n    if b == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_72ba2d91-5388-4334-aace-0bcfda0bfbd9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the product of the roots of a quadratic equation is one.", "code": "def is_product_of_roots_one(a, b, c):\n    if a == c:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_d9b9155f-b8a6-4e46-9e2b-ab3287c40c30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the discriminant of a quadratic equation is positive.", "code": "def is_discriminant_positive(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_f80778ca-8407-410a-9b61-cdc46e0b4263", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the discriminant of a quadratic equation is zero.", "code": "def is_discriminant_zero(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_199b432d-2fd1-440b-aeab-e731a54d86d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the discriminant of a quadratic equation is negative.", "code": "def is_discriminant_negative(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_35f588c5-f541-44cb-9511-99e1488c8f4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the roots of a quadratic equation are integers.", "code": "def is_root_integer(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return 'No'\n    root1 = (-b + discriminant**0.5) / (2*a)\n    root2 = (-b - discriminant**0.5) / (2*a)\n    if root1.is_integer() and root2.is_integer():\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_637ec812-4552-4492-85c2-3a7d9fe5748e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the roots of a quadratic equation are real numbers.", "code": "def is_root_real(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_e0cae112-db1a-4a86-aa07-88ca6b7c7487", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the roots of a quadratic equation are equal.", "code": "def is_root_equal(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_09ba1c56-9901-4898-8da6-8096817bd93e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the sum of the coefficients of a quadratic equation is zero.", "code": "def is_coefficient_sum_zero(a, b, c):\n    if a + b + c == 0:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_2ec094f3-dc0e-4d01-9e16-dc0c8cceead8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the product of the coefficients of a quadratic equation is one.", "code": "def is_coefficient_product_one(a, b, c):\n    if a * b * c == 1:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "636_d9da1fc3-2f3e-4fea-89cd-ffecb7dfeeaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in a given list of integers.", "code": "def count_even_numbers(nums):\n    return sum(1 for num in nums if num % 2 == 0)", "task_id": "639_1678861f-676e-4257-8e9d-0132e3858067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all positive numbers in a given list of integers.", "code": "def sum_positive_numbers(nums):\n    return sum(num for num in nums if num > 0)", "task_id": "639_c11bfdf7-68a2-48ac-b99c-604b9d6bdeb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "639_af390ba6-8541-4c57-8449-dc710adf2fde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the words in a given string.", "code": "def reverse_words(s):\n    return ' '.join(s.split()[::-1])", "task_id": "639_f6badf15-ee0a-4bad-b576-0735936a8319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words that are shorter than a given length from a list of words.", "code": "def filter_short_words(words, n):\n    return [word for word in words if len(word) >= n]", "task_id": "639_d230015f-70e3-4b15-9b6d-adbdd02fb0a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply each element in a list of integers by a given factor.", "code": "def multiply_list_elements(nums, factor):\n    return [num * factor for num in nums]", "task_id": "639_7a36d573-7042-4aa7-92a2-024dd598eddc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in a given list of integers.", "code": "def find_max(nums):\n    return max(nums)", "task_id": "639_09898dc1-a703-4a59-a651-072915dd377c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s):\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "639_ff480c2f-4016-4c9f-9195-00ba42bd2c82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate numbers from a given list of integers.", "code": "def remove_duplicates(nums):\n    return list(dict.fromkeys(nums))", "task_id": "639_51e14781-f330-4741-ab64-857837abf02e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a given list of words.", "code": "def find_longest_word(words):\n    return max(words, key=len)", "task_id": "639_d967c9c4-0dd9-4e55-949e-3ff0e534f987", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth hexagonal number.", "code": "def nth_hexagonal_number(n):\n\treturn n * (2 * n - 1)", "task_id": "641_873fe472-0377-442c-86f2-857bb4d1168c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth pentagonal number.", "code": "def nth_pentagonal_number(n):\n\treturn n * (3 * n - 1) // 2", "task_id": "641_ccd8a160-eee1-47b4-89d6-97bf8c8bf042", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth triangular number.", "code": "def nth_triangular_number(n):\n\treturn n * (n + 1) // 2", "task_id": "641_9a2229a0-1640-4d0f-b699-d83275019142", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth square number.", "code": "def nth_square_number(n):\n\treturn n * n", "task_id": "641_93a599b4-8dcf-4967-b019-afea10b526cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth cube number.", "code": "def nth_cube_number(n):\n\treturn n * n * n", "task_id": "641_b201c988-9599-4fc9-8625-f7215a22f2d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth tetrahedral number.", "code": "def nth_tetrahedral_number(n):\n\treturn n * (n + 1) * (n + 2) // 6", "task_id": "641_90de18e0-d145-46bb-a2f2-b01d008fc93e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth heptagonal number.", "code": "def nth_heptagonal_number(n):\n\treturn n * (5 * n - 3) // 2", "task_id": "641_52f5fee6-d098-4a8d-9256-9f04a1bf80d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth octagonal number.", "code": "def nth_octagonal_number(n):\n\treturn n * (3 * n - 2)", "task_id": "641_ccee6325-d452-4fd0-a4ad-b2ab64eed853", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth dodecagonal number.", "code": "def nth_dodecagonal_number(n):\n\treturn n * (5 * n - 4)", "task_id": "641_9b5ec03d-29ea-4e71-bb01-a0b8f405cb3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth star number.", "code": "def nth_star_number(n):\n\treturn 6 * n * (n - 1) + 1", "task_id": "641_d66fb716-5087-494b-9b91-ab8ecbe9a56e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the heat index given temperature (t) in Fahrenheit and relative humidity (rh) in percentage.", "code": "def calculate_heat_index(t, rh):\n    hi = -42.379 + 2.04901523*t + 10.14333127*rh - 0.22475541*t*rh - 0.00683783*t*t - 0.05481717*rh*rh + 0.00122874*t*t*rh + 0.00085282*t*rh*rh - 0.00000199*t*t*rh*rh\n    return round(hi, 2)", "task_id": "638_4df787c0-6be8-4155-801d-61592927d64f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the dew point given temperature (t) in Celsius and relative humidity (rh) in percentage.", "code": "def calculate_dew_point(t, rh):\n    a = 17.27\n    b = 237.7\n    alpha = ((a * t) / (b + t)) + math.log(rh/100.0)\n    dew_point = (b * alpha) / (a - alpha)\n    return round(dew_point, 2)", "task_id": "638_18ac507b-c191-4484-8487-743c7ed49ad9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the Body Mass Index (BMI) given weight in kilograms and height in meters.", "code": "def calculate_bmi(weight, height):\n    bmi = weight / (height ** 2)\n    return round(bmi, 2)", "task_id": "638_081fe7f1-17b1-4c1c-a825-c0906dac823f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the simple interest given principal amount, rate of interest, and time in years.", "code": "def calculate_simple_interest(principal, rate, time):\n    simple_interest = (principal * rate * time) / 100\n    return round(simple_interest, 2)", "task_id": "638_6b1f5926-2d67-41b1-92a3-d956a0bdac2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the compound interest given principal amount, rate of interest, time in years, and number of times interest is compounded per year.", "code": "def calculate_compound_interest(principal, rate, time, n):\n    amount = principal * (1 + rate/(100*n))**(n*time)\n    compound_interest = amount - principal\n    return round(compound_interest, 2)", "task_id": "638_738f263d-a32d-4b7b-8cde-3ec7968b5d62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the future value of an investment given principal amount, annual interest rate, and time in years.", "code": "def calculate_future_value(principal, rate, time):\n    future_value = principal * (1 + rate/100)**time\n    return round(future_value, 2)", "task_id": "638_f9f3c679-5cbb-4467-8bab-d3a07f39c455", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate miles per gallon (MPG) given miles driven and gallons of fuel used.", "code": "def calculate_mpg(miles, gallons):\n    mpg = miles / gallons\n    return round(mpg, 2)", "task_id": "638_1645c52a-3160-445b-90ab-c634f25d9310", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate average speed given distance traveled and time taken.", "code": "def calculate_average_speed(distance, time):\n    average_speed = distance / time\n    return round(average_speed, 2)", "task_id": "638_c8f19c07-db9d-4cfe-81bf-c682aa89c7e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate gross salary given basic salary, house rent allowance (HRA), and dearness allowance (DA).", "code": "def calculate_gross_salary(basic, hra, da):\n    gross_salary = basic + hra + da\n    return round(gross_salary, 2)", "task_id": "638_36183074-d101-4830-8aab-5bde119975bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the discounted price given original price and discount percentage.", "code": "def calculate_discounted_price(price, discount):\n    discounted_price = price - (price * discount / 100)\n    return round(discounted_price, 2)", "task_id": "638_9f5b59f2-bcc0-4eff-a43d-e01862c26ba0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate columns from the given 2D list.", "code": "def remove_duplicate_columns(matrix: List[List[int]]) -> List[List[int]]:\n    transposed = list(zip(*matrix))\n    unique_columns = set(tuple(col) for col in transposed)\n    result = list(zip(*unique_columns))\n    return [list(row) for row in result]", "task_id": "642_934fb762-cd70-44d0-89bf-89065465b28b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from the given list.", "code": "def remove_duplicate_elements(lst: List[int]) -> List[int]:\n    return list(set(lst))", "task_id": "642_abf3d184-4b58-498f-b2ae-4a82c8478ee9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove similar strings from the given list of strings.", "code": "def remove_similar_strings(strings: List[str]) -> List[str]:\n    return list(set(strings))", "task_id": "642_0a3a6199-4b2b-4501-9f3c-56f53e4a9194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate tuples from the given list of tuples.", "code": "def remove_duplicate_tuples(tuples: List[Tuple[int, ...]]) -> List[Tuple[int, ...]]:\n    return list(set(tuples))", "task_id": "642_b8d70579-a167-48c8-ae0a-c704d2cc1d4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate dictionaries from the given list of dictionaries.", "code": "def remove_duplicate_dicts(dicts: List[Dict[str, int]]) -> List[Dict[str, int]]:\n    seen = set()\n    result = []\n    for d in dicts:\n        t = tuple(sorted(d.items()))\n        if t not in seen:\n            seen.add(t)\n            result.append(d)\n    return result", "task_id": "642_a2030328-4e9b-43f8-9200-b2c85362b58b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from the given sentence.", "code": "def remove_duplicate_words(sentence: str) -> str:\n    words = sentence.split()\n    unique_words = set(words)\n    return ' '.join(unique_words)", "task_id": "642_55db9ef6-206a-4216-8698-439fa3a8b549", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from the given string.", "code": "def remove_duplicate_chars(s: str) -> str:\n    return ''.join(sorted(set(s), key=s.index))", "task_id": "642_2e56d006-63ed-4bab-a2c9-181f5550c134", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate pairs from the given list of pairs.", "code": "def remove_duplicate_pairs(pairs: List[Tuple[int, int]]) -> List[Tuple[int, int]]:\n    return list(set(pairs))", "task_id": "642_ddb14081-b85c-4efe-8df9-260ce4865c8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from each nested list in the given list of lists.", "code": "def remove_duplicate_elements_nested(lst: List[List[int]]) -> List[List[int]]:\n    return [list(set(sublist)) for sublist in lst]", "task_id": "642_d6261fc1-90f1-4970-90f5-dd974e47353b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate substrings of a given length from the given string.", "code": "def remove_duplicate_substrings(s: str, length: int) -> str:\n    substrings = [s[i:i+length] for i in range(len(s) - length + 1)]\n    unique_substrings = set(substrings)\n    return ''.join(unique_substrings)", "task_id": "642_add78dde-ce45-4da5-957b-451a5947d5b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing any digit.", "code": "import re\ndef contains_digit(text):\n    patterns = '\\\\d'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_393612eb-02bd-4815-a815-bf7047b6b1ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing an uppercase letter.", "code": "import re\ndef contains_uppercase(text):\n    patterns = '[A-Z]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_fc085b3c-e8a9-4f3c-8e62-4548a9fb5469", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing any special character (non-alphanumeric).", "code": "import re\ndef contains_special_char(text):\n    patterns = '[^a-zA-Z0-9]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_2148c5ac-5b82-46c3-a275-16de49608596", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing any character repeated consecutively.", "code": "import re\ndef contains_repeated_char(text):\n    patterns = '(.)\\\\1'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_66c43093-910d-4420-af93-f5ce85550067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing at least one vowel.", "code": "import re\ndef contains_vowel(text):\n    patterns = '[aeiouAEIOU]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_a42dd651-c3d9-4744-93a4-71fce48013b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing a specific substring.", "code": "import re\ndef contains_substring(text, substring):\n    patterns = re.escape(substring)\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_56d370e4-7e0f-4de0-9b2c-a64dd61696d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing a palindrome of at least 3 characters.", "code": "import re\ndef contains_palindrome(text):\n    patterns = '\\\\b([a-zA-Z])([a-zA-Z])\\\\1\\\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_958f7342-bb96-467e-b219-7583326e759c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing alternating characters (e.g., 'abab').", "code": "import re\ndef contains_alternating_chars(text):\n    patterns = '(.)\\\\1'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_399e6118-ae41-4c99-b034-578d1ed99f5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing only non-repeating characters.", "code": "import re\ndef contains_non_repeating_chars(text):\n    patterns = '^(?!.*(.).*\\\\1).*$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_e0902831-a2a0-4f54-bcec-2daa3c5766a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a word containing three consecutive vowels.", "code": "import re\ndef contains_three_consecutive_vowels(text):\n    patterns = '[aeiouAEIOU]{3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "643_efb556e7-73a8-4b2c-abfd-c3b2f8045548", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the kth index in the given tuples.", "code": "def find_k_sum(test_list, K):\n    return sum(sub[K] for sub in test_list)", "task_id": "645_44cd290d-d981-4986-a5e7-e84d0d0de017", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value of the kth index in the given tuples.", "code": "def find_k_max(test_list, K):\n    return max(sub[K] for sub in test_list)", "task_id": "645_fd050fbc-73de-442d-8e42-fb2bd8c79f67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value of the kth index in the given tuples.", "code": "def find_k_min(test_list, K):\n    return min(sub[K] for sub in test_list)", "task_id": "645_3567d8ea-752d-471a-8f62-e36a98036f05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of the kth index in the given tuples.", "code": "def find_k_average(test_list, K):\n    return sum(sub[K] for sub in test_list) / len(test_list)", "task_id": "645_6d92e2ab-7769-430a-97f5-268f380172a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of the kth index in the given tuples.", "code": "def find_k_median(test_list, K):\n    sorted_values = sorted(sub[K] for sub in test_list)\n    n = len(sorted_values)\n    if n % 2 == 0:\n        return (sorted_values[n//2 - 1] + sorted_values[n//2]) / 2\n    else:\n        return sorted_values[n//2]", "task_id": "645_ece74854-7383-4180-a094-e79ecf681ed4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the mode of the kth index in the given tuples.", "code": "from collections import Counter\n\ndef find_k_mode(test_list, K):\n    count = Counter(sub[K] for sub in test_list)\n    return count.most_common(1)[0][0]", "task_id": "645_44b787f2-5a68-4819-8453-f2a6f491f2c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the range (max - min) of the kth index in the given tuples.", "code": "def find_k_range(test_list, K):\n    values = [sub[K] for sub in test_list]\n    return max(values) - min(values)", "task_id": "645_7ea1d434-c8c4-4eda-96c9-661aba41da8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the variance of the kth index in the given tuples.", "code": "def find_k_variance(test_list, K):\n    mean = sum(sub[K] for sub in test_list) / len(test_list)\n    return sum((sub[K] - mean) ** 2 for sub in test_list) / len(test_list)", "task_id": "645_669ee9ad-b6f4-4584-8051-1160393f03d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the standard deviation of the kth index in the given tuples.", "code": "import math\n\ndef find_k_std_dev(test_list, K):\n    variance = find_k_variance(test_list, K)\n    return math.sqrt(variance)", "task_id": "645_e59b49fb-e5f3-4772-9fbd-ec5616b5eab9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of all elements except the kth index in each tuple.", "code": "def find_k_product_except_self(test_list, K):\n    result = []\n    for sub in test_list:\n        product = 1\n        for i, val in enumerate(sub):\n            if i != K:\n                product *= val\n        result.append(product)\n    return result", "task_id": "645_dc14e597-7ccc-4f3d-9181-0ed699e3afa6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a segment of a list from index start to index end.", "code": "def reverse_list_segment(lst: list, start: int, end: int) -> list:\n    return lst[:start] + lst[start:end+1][::-1] + lst[end+1:]", "task_id": "644_1cf88481-51b7-4555-8949-9bbaf92ad20e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate an array to the right by k steps.", "code": "def rotate_array(arr: list, k: int) -> list:\n    k = k % len(arr)\n    return arr[-k:] + arr[:-k]", "task_id": "644_231c97d8-a157-4de9-8139-68cfb37068dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to shift all zeros in an array to the end while maintaining the order of non-zero elements.", "code": "def shift_zeros_to_end(arr: list) -> list:\n    non_zeros = [x for x in arr if x != 0]\n    zeros = [x for x in arr if x == 0]\n    return non_zeros + zeros", "task_id": "644_29f930d8-f76e-43a4-9bde-4ec81434029f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of a contiguous subarray in a given array.", "code": "def find_max_subarray_sum(arr: list) -> int:\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "644_a1ef21a8-a069-439c-9c61-c7b462e19358", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-repeating character in a string.", "code": "def find_first_unique_char(s: str) -> str:\n    from collections import Counter\n    count = Counter(s)\n    for char in s:\n        if count[char] == 1:\n            return char\n    return ''", "task_id": "644_b4e0dec1-7c7c-4ae2-b09d-848424a9ed8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted arrays into one sorted array.", "code": "def merge_sorted_arrays(arr1: list, arr2: list) -> list:\n    merged = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n    return merged", "task_id": "644_69745dc5-a74d-4031-8406-89a9550ff6e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr: list) -> int:\n    n = len(arr) + 1\n    total = n * (n + 1) // 2\n    return total - sum(arr)", "task_id": "644_2c746d1c-fe89-4bfe-b60b-8d9286197ef7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "644_751b2f00-6021-433f-ab06-57363f19f693", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a list of words.", "code": "def find_longest_word(words: list) -> str:\n    return max(words, key=len)", "task_id": "644_e78b021b-490f-4069-9363-1aa91bd65828", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "644_8f3ba873-1b1b-4583-91df-a07f6a67a905", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at lowercase letters.", "code": "import re\ndef split_lowerstring(text):\n    return re.findall('[a-z][^a-z]*', text)", "task_id": "647_5ca1a9b8-0e2d-4235-8ee3-0f98c68ba6b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at digits.", "code": "import re\ndef split_digitstring(text):\n    return re.findall('\\d[^\\d]*', text)", "task_id": "647_61aaea9c-9a12-4e10-acf6-cbd56b0279fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at vowels.", "code": "import re\ndef split_vowelstring(text):\n    return re.findall('[aeiouAEIOU][^aeiouAEIOU]*', text)", "task_id": "647_fc4791cb-6201-44c8-be32-ec8d64881444", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at consonants.", "code": "import re\ndef split_consonantstring(text):\n    return re.findall('[^aeiouAEIOU\\W\\d_][aeiouAEIOU\\W\\d_]*', text)", "task_id": "647_a58819a0-7498-4533-ad18-37e5dd0a3342", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at special characters.", "code": "import re\ndef split_specialcharstring(text):\n    return re.findall('[^\\w\\s][\\w\\s]*', text)", "task_id": "647_a285b611-5e1d-42aa-bbf9-3d50b818549a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at spaces.", "code": "def split_space(text):\n    return text.split(' ')", "task_id": "647_78bfd6b6-e233-4936-972d-257aa0613a44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at punctuation marks.", "code": "import re\ndef split_punctuation(text):\n    return re.findall('[\\w\\s]+|[\\W]', text)", "task_id": "647_56248aff-f4fa-4a09-879f-aa7d5c4ac9ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at transitions between uppercase and lowercase letters.", "code": "import re\ndef split_upper_lower(text):\n    return re.findall('[A-Z][a-z]*|[a-z]+', text)", "task_id": "647_b1b1adf8-ecb4-4659-aed9-e1c331901ef7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at transitions between digits and non-digits.", "code": "import re\ndef split_digit_non_digit(text):\n    return re.findall('\\d+|\\D+', text)", "task_id": "647_e03aa62e-223c-4b71-8ab6-37667132bf74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a string at word boundaries.", "code": "import re\ndef split_word_boundary(text):\n    return re.findall('\\b\\w+\\b', text)", "task_id": "647_889baddc-d4da-432c-9dbd-43282dca7253", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares of size k in a square of size n.", "code": "def count_squares_in_square(n: int, k: int) -> int:\n    return (n - k + 1) ** 2", "task_id": "646_02ea6093-3e48-42bb-a58c-25b2579c5e3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles of size k x l in a rectangle of size n x m.", "code": "def count_rectangles_in_rectangle(n: int, m: int, k: int, l: int) -> int:\n    return (n - k + 1) * (m - l + 1)", "task_id": "646_9ffc281a-97b4-41e2-98ba-1ed1441bdcb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of cubes of size k in a cuboid of size n x m x p.", "code": "def count_cubes_in_cuboid(n: int, m: int, p: int, k: int) -> int:\n    return (n - k + 1) * (m - k + 1) * (p - k + 1)", "task_id": "646_47445010-095e-4829-926b-67ae9518a2af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of squares of size k x k in a cube of size n x n x n.", "code": "def count_squares_in_cube(n: int, k: int) -> int:\n    return 6 * (n - k + 1) ** 2", "task_id": "646_cd607c5d-fcfa-43c3-8c4e-d7ccd7f6e805", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rectangles of size k x l in a cuboid of size n x m x p.", "code": "def count_rectangles_in_cuboid(n: int, m: int, p: int, k: int, l: int) -> int:\n    return 2 * ((n - k + 1) * (m - l + 1) + (n - k + 1) * (p - l + 1) + (m - k + 1) * (p - l + 1))", "task_id": "646_58dbce82-fbfd-4469-a197-ae5c59e84c21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lines of length k in a square of size n.", "code": "def count_lines_in_square(n: int, k: int) -> int:\n    return 2 * (n - k + 1)", "task_id": "646_54b331cc-9d85-4b5a-b693-ca3f360041f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lines of length k in a cube of size n.", "code": "def count_lines_in_cube(n: int, k: int) -> int:\n    return 3 * (n - k + 1)", "task_id": "646_aebf8c0f-7f0b-4062-8559-c6be00acf10f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of diagonals in a square of size n.", "code": "def count_diagonals_in_square(n: int) -> int:\n    return 2 * (n - 1)", "task_id": "646_a53ca97a-b98f-47b9-8d23-145c27e2181a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of diagonals in a cube of size n.", "code": "def count_diagonals_in_cube(n: int) -> int:\n    return 4 * (n - 1)", "task_id": "646_eb4b1212-6ede-4771-a2e9-86d9bf4db0ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of faces in a cube of size n.", "code": "def count_faces_in_cube(n: int) -> int:\n    return 6", "task_id": "646_7c78774b-d841-46c0-b0db-354f1b520f56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap every pair of adjacent elements in a given list of integers.", "code": "def swap_adjacent_elements(lst):\n    for i in range(0, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst", "task_id": "648_f3521528-1bc9-4cbd-9d18-6c64f8bdcc9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse every pair of adjacent elements in a given list of integers.", "code": "def reverse_pairs(lst):\n    result = []\n    for i in range(0, len(lst) - 1, 2):\n        result.extend([lst[i + 1], lst[i]])\n    if len(lst) % 2 != 0:\n        result.append(lst[-1])\n    return result", "task_id": "648_46b073b5-c5b2-4dfd-bbbf-99e46f28f01e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate every triplet of elements in a given list of integers.", "code": "def rotate_triplets(lst):\n    result = []\n    for i in range(0, len(lst) - 2, 3):\n        result.extend([lst[i + 2], lst[i], lst[i + 1]])\n    result.extend(lst[len(lst) - len(lst) % 3:])\n    return result", "task_id": "648_b40d2f70-89e6-41dd-a8b4-36f3d429e2ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap the first and last elements of a given list of integers.", "code": "def swap_first_last(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "task_id": "648_42a11498-cf84-4fa5-8896-2e0a7da0c751", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap elements at odd indices with the next even indexed element in a given list of integers.", "code": "def swap_odd_even_indexed(lst):\n    for i in range(1, len(lst) - 1, 2):\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    return lst", "task_id": "648_e16d3eac-a788-47de-af08-7259e3268e20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to move all zeros to the end of a given list of integers while maintaining the order of non-zero elements.", "code": "def move_zeros_to_end(lst):\n    non_zeros = [x for x in lst if x != 0]\n    zeros = [0] * (len(lst) - len(non_zeros))\n    return non_zeros + zeros", "task_id": "648_b9996de1-f82f-4677-b124-8287471fe1a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double every second element in a given list of integers.", "code": "def double_every_second(lst):\n    return [x * 2 if i % 2 == 1 else x for i, x in enumerate(lst)]", "task_id": "648_92c74536-4093-4490-8e21-0b79f6b59c3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment every odd element and decrement every even element in a given list of integers.", "code": "def increment_odd_decrement_even(lst):\n    return [x + 1 if x % 2 != 0 else x - 1 for x in lst]", "task_id": "648_2af961ad-5657-4120-a81d-1eb0be9d51fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of sums of every pair of adjacent elements in a given list of integers.", "code": "def sum_adjacent_pairs(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "648_fb221602-a890-4f4d-99c8-e213ccd38286", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace each element in a given list of integers with the sum of itself and the next element.", "code": "def replace_with_sum(lst):\n    return [lst[i] + lst[i + 1] if i < len(lst) - 1 else lst[i] for i in range(len(lst))]", "task_id": "648_bd512ba9-7e51-4eaa-b257-da6fbb50372b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the numbers in a list between the indices of a specified range.", "code": "def product_range_list(nums, m, n):\n    product_range = 1\n    for i in range(m, n+1):\n        product_range *= nums[i]\n    return product_range", "task_id": "649_b182226a-222d-4af3-bbcc-0a58871c8243", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list that are located at even indices.", "code": "def sum_even_indices(nums):\n    sum_even = 0\n    for i in range(0, len(nums), 2):\n        sum_even += nums[i]\n    return sum_even", "task_id": "649_3aa1a2ae-2dc6-41f7-ab18-39c29ab3cb8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list that are located at odd indices.", "code": "def sum_odd_indices(nums):\n    sum_odd = 0\n    for i in range(1, len(nums), 2):\n        sum_odd += nums[i]\n    return sum_odd", "task_id": "649_c28a1105-c3f7-41fa-84c3-4b7e45834d05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range, excluding the endpoints.", "code": "def sum_range_list_exclusive(nums, m, n):\n    sum_range = 0\n    for i in range(m+1, n):\n        sum_range += nums[i]\n    return sum_range", "task_id": "649_41ac2b31-87f0-40ff-b04c-8529982bf606", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range, with a specified step.", "code": "def sum_range_list_step(nums, m, n, step):\n    sum_range = 0\n    for i in range(m, n+1, step):\n        sum_range += nums[i]\n    return sum_range", "task_id": "649_59df0209-4d60-48dd-8bb6-70310b670cd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range, iterating in reverse order.", "code": "def sum_range_list_reverse(nums, m, n):\n    sum_range = 0\n    for i in range(n, m-1, -1):\n        sum_range += nums[i]\n    return sum_range", "task_id": "649_213291e2-74a2-4733-97bf-2de7486325fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the squares of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list_squared(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += nums[i] ** 2\n    return sum_range", "task_id": "649_b2d30c2c-8006-43d4-95a8-bdbc12d2d33c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the cubes of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list_cubed(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += nums[i] ** 3\n    return sum_range", "task_id": "649_e73bfea4-0158-4ecd-a87c-7beb98e82f6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the absolute values of the numbers in a list between the indices of a specified range.", "code": "def sum_range_list_abs(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1):\n        sum_range += abs(nums[i])\n    return sum_range", "task_id": "649_558ab3af-bc29-48b0-9954-3835a7c10967", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the even numbers in a list between the indices of a specified range.", "code": "def sum_range_list_even(nums, m, n):\n    sum_range = 0\n    for i in range(m, n+1):\n        if nums[i] % 2 == 0:\n            sum_range += nums[i]\n    return sum_range", "task_id": "649_2b5d5eef-f8e8-4fc3-aa3d-b6505c9f0112", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if one tuple is a superset of another tuple.", "code": "def check_superset(test_tup1, test_tup2):\n  res = set(test_tup1).issuperset(test_tup2)\n  return res", "task_id": "651_60461ffe-735f-4bdb-be7d-4d18745098ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements between two tuples.", "code": "def common_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).intersection(test_tup2))\n  return res", "task_id": "651_fd33cd26-6218-4655-96e7-5a20bb9e62d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find unique elements from two tuples.", "code": "def unique_elements(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).symmetric_difference(test_tup2))\n  return res", "task_id": "651_6cbd5d36-de47-4349-9f4e-ca767b02d2c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two tuples into one.", "code": "def merge_tuples(test_tup1, test_tup2):\n  res = test_tup1 + test_tup2\n  return res", "task_id": "651_8784b97d-3de7-4906-9990-a3d23a983f27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find elements in the first tuple that are not in the second tuple.", "code": "def tuple_difference(test_tup1, test_tup2):\n  res = tuple(set(test_tup1) - set(test_tup2))\n  return res", "task_id": "651_55d22e1c-9a57-4313-aa60-d33330633bc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the union of two tuples.", "code": "def tuple_union(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).union(test_tup2))\n  return res", "task_id": "651_db35a509-5f34-4812-be72-9e56b9b4a72c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two tuples.", "code": "def tuple_intersection(test_tup1, test_tup2):\n  res = tuple(set(test_tup1).intersection(test_tup2))\n  return res", "task_id": "651_945fd61d-f7cd-4fb0-b793-481a4c57338a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple to a set.", "code": "def tuple_to_set(test_tup):\n  res = set(test_tup)\n  return res", "task_id": "651_9d63ebc4-1bc8-4fd0-b1e2-e21b116d8dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a set to a tuple.", "code": "def set_to_tuple(test_set):\n  res = tuple(test_set)\n  return res", "task_id": "651_d71aaf85-1a62-4a8c-aec0-f0a3257b2960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a tuple contains a specific element.", "code": "def tuple_contains(test_tup, element):\n  res = element in test_tup\n  return res", "task_id": "651_7558e233-252a-452a-8743-8bffa415cd7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain nested lists.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    if len(arr1) != len(arr2):\n        return False\n    arr1.sort(key=str)\n    arr2.sort(key=str)\n    return arr1 == arr2", "task_id": "650_a95c71ba-0b58-4028-8010-3ee3eaf8b490", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, ignoring the order of elements.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1) == sorted(arr2)", "task_id": "650_3260471c-12f4-4e7a-b851-26bdef2b3773", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering only unique elements.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return set(arr1) == set(arr2)", "task_id": "650_f275d5fc-4ab3-456b-ad98-c7b3a5af6dcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain None values.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1, key=lambda x: (x is None, x)) == sorted(arr2, key=lambda x: (x is None, x))", "task_id": "650_0440ff95-ed6e-4104-89bf-7a8aba5511ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain negative numbers.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1) == sorted(arr2)", "task_id": "650_f343276b-02ee-4524-9b54-a5d896eb8644", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain strings and integers.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1, key=str) == sorted(arr2, key=str)", "task_id": "650_0c24ea09-e063-4f67-9118-517d5fc2fc43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain floating point numbers.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1) == sorted(arr2)", "task_id": "650_2b7d6f45-f5f8-4d34-a388-3e19fdecc8a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain duplicate elements.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1) == sorted(arr2)", "task_id": "650_f131ffe3-9e06-41d4-bee9-eef1619a07f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain boolean values.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1) == sorted(arr2)", "task_id": "650_ed63a9b9-98f3-413e-9fb2-527eb782e2c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two arrays are equal or not, considering the arrays may contain mixed data types.", "code": "def are_Equal(arr1: list, arr2: list) -> bool:\n    return sorted(arr1, key=str) == sorted(arr2, key=str)", "task_id": "650_903b4def-2041-476f-bbb9-1120a461a234", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of each element in a list and return a dictionary using collections module.", "code": "from collections import Counter\ndef count_occurrences(lst):\n    return dict(Counter(lst))", "task_id": "653_2fb2555f-082a-40a3-a983-02c38f5e2a48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group strings by their lengths into a dictionary of lists using collections module.", "code": "from collections import defaultdict\ndef group_by_length(lst):\n    d = defaultdict(list)\n    for s in lst:\n        d[len(s)].append(s)\n    return d", "task_id": "653_95da96d9-feac-4fa2-9a80-bbf2280d0398", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to invert a dictionary, where keys become values and values become keys. Assume all values are unique.", "code": "def invert_dictionary(d):\n    return {v: k for k, v in d.items()}", "task_id": "653_626dd2c6-a6fa-4b6e-b938-197b4056cfad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge a list of dictionaries into a single dictionary. If there are duplicate keys, sum their values.", "code": "from collections import defaultdict\ndef merge_dictionaries(dicts):\n    d = defaultdict(int)\n    for dic in dicts:\n        for k, v in dic.items():\n            d[k] += v\n    return d", "task_id": "653_98286f50-c7f6-46b9-9e25-0f42db567541", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements between two lists and return them as a list.", "code": "def common_elements(lst1, lst2):\n    return list(set(lst1) & set(lst2))", "task_id": "653_5925c54b-be76-494c-bb72-5ceadff1fbd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a list of lists into a single list.", "code": "def flatten_list(lst):\n    return [item for sublist in lst for item in sublist]", "task_id": "653_7388b14e-3651-46cd-bd91-167530e66a1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each character in a string and return a dictionary.", "code": "from collections import Counter\ndef char_frequency(s):\n    return dict(Counter(s))", "task_id": "653_df17b198-0dd5-42a7-bf4c-756da09f9135", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "from collections import Counter\ndef anagram_check(s1, s2):\n    return Counter(s1) == Counter(s2)", "task_id": "653_ce9eaceb-0b98-42e3-9933-5f76af1d31c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list by the frequency of its elements in ascending order.", "code": "from collections import Counter\ndef sort_by_frequency(lst):\n    return sorted(lst, key=lambda x: (Counter(lst)[x], x))", "task_id": "653_74ace2a7-5883-4f1f-8013-fdb3f988bd3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common element in a list.", "code": "from collections import Counter\ndef most_common_element(lst):\n    return Counter(lst).most_common(1)[0][0]", "task_id": "653_e1df49c6-24b4-4f5e-9afb-bd797cd8f68e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten the given 2D matrix into a single list.", "code": "def flatten_matrix(matrix: List[List[int]]) -> List[int]:\n    return [element for row in matrix for element in row]", "task_id": "652_e912dd2c-5fba-41a3-aae2-a8892a98afcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to transpose the given 2D matrix.", "code": "def transpose_matrix(matrix: List[List[int]]) -> List[List[int]]:\n    return [list(row) for row in zip(*matrix)]", "task_id": "652_c492ed9f-1c1c-454c-a1fd-df822c37f9b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of elements in each row of the given 2D matrix.", "code": "def reverse_rows(matrix: List[List[int]]) -> List[List[int]]:\n    return [row[::-1] for row in matrix]", "task_id": "652_25fdd53d-1b31-4467-ac91-2ecee756a8c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in the given 2D matrix.", "code": "def sum_matrix(matrix: List[List[int]]) -> int:\n    return sum(sum(row) for row in matrix)", "task_id": "652_16ff19e4-71bf-4076-899a-cb27bfbe0b3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the diagonal elements of the given 2D matrix.", "code": "def diagonal_elements(matrix: List[List[int]]) -> List[int]:\n    return [matrix[i][i] for i in range(len(matrix))]", "task_id": "652_6743b251-333f-4ab7-a0b9-44adc4ae4171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate the given 2D matrix by 90 degrees clockwise.", "code": "def rotate_matrix_90(matrix: List[List[int]]) -> List[List[int]]:\n    return [list(row) for row in zip(*matrix[::-1])]", "task_id": "652_249deec1-a670-4286-b329-d19f23b33bbf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of zeros in the given 2D matrix.", "code": "def count_zeros(matrix: List[List[int]]) -> int:\n    return sum(row.count(0) for row in matrix)", "task_id": "652_fdf647b6-caf9-4bf2-a03c-0b4e7e5f51ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in the given 2D matrix.", "code": "def max_element(matrix: List[List[int]]) -> int:\n    return max(max(row) for row in matrix)", "task_id": "652_36192262-bc03-42a7-afae-ca797aa02c4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of each column in the given 2D matrix.", "code": "def sum_of_columns(matrix: List[List[int]]) -> List[int]:\n    return [sum(column) for column in zip(*matrix)]", "task_id": "652_ab0aabb9-f9bb-4063-8ab0-e9ee5b759d55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given 2D matrix is symmetric.", "code": "def is_symmetric(matrix: List[List[int]]) -> bool:\n    return matrix == [list(row) for row in zip(*matrix)]", "task_id": "652_e186c7df-0fd0-4746-a8c6-a18f747ea652", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def rectangle_area(l: int, b: int) -> int:\n    area = l * b\n    return area", "task_id": "654_d50fecaf-de76-4dba-b3d6-2ec3112dc3a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(s: int) -> int:\n    perimeter = 4 * s\n    return perimeter", "task_id": "654_df667ea6-9178-4fb5-8387-e5cdb01093ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a square.", "code": "def square_area(s: int) -> int:\n    area = s * s\n    return area", "task_id": "654_e99fada7-6345-4da2-80bb-05fa16cfe219", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "def circle_circumference(r: int) -> float:\n    import math\n    circumference = 2 * math.pi * r\n    return circumference", "task_id": "654_acd6b47b-13f2-416b-81e6-9fe153afd3b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "def circle_area(r: int) -> float:\n    import math\n    area = math.pi * r * r\n    return area", "task_id": "654_f4c4d915-6549-44f2-86ab-1281a60de4a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given the lengths of its three sides.", "code": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    perimeter = a + b + c\n    return perimeter", "task_id": "654_45f290e8-48a5-463c-b7ac-db52c87adaf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def triangle_area(b: int, h: int) -> float:\n    area = 0.5 * b * h\n    return area", "task_id": "654_196b081e-a7f6-4e02-a5c1-f0f35397dcea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a parallelogram given the lengths of its two adjacent sides.", "code": "def parallelogram_perimeter(a: int, b: int) -> int:\n    perimeter = 2 * (a + b)\n    return perimeter", "task_id": "654_c13aeaee-004e-4308-9b11-0713d418266c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def parallelogram_area(b: int, h: int) -> int:\n    area = b * h\n    return area", "task_id": "654_a2f96d9d-f477-41f5-a911-b9f7932389b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a trapezoid given the lengths of its four sides.", "code": "def trapezoid_perimeter(a: int, b: int, c: int, d: int) -> int:\n    perimeter = a + b + c + d\n    return perimeter", "task_id": "654_b56248f1-5cf3-471f-91cf-81e657b5569a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of n natural numbers.", "code": "def sum_of_squares(n): \n    sm = 0 \n    for i in range(1, n+1): \n        sm += i*i \n    return sm", "task_id": "655_5b76f922-52af-418c-a1a5-cab12faaedfc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of n natural numbers.", "code": "def sum_of_cubes(n): \n    sm = 0 \n    for i in range(1, n+1): \n        sm += i*i*i \n    return sm", "task_id": "655_1f03b7ca-8208-42e1-bb1d-1e3ee226f37a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth powers of n natural numbers.", "code": "def sum_of_fourth_powers(n): \n    sm = 0 \n    for i in range(1, n+1): \n        sm += i*i*i*i \n    return sm", "task_id": "655_c9847d68-cc77-4024-8849-5763b620b97e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of sixth powers of n natural numbers.", "code": "def sum_of_sixth_powers(n): \n    sm = 0 \n    for i in range(1, n+1): \n        sm += i*i*i*i*i*i \n    return sm", "task_id": "655_2a527cca-51b7-46ec-ab85-ca75a54af5ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n): \n    sm = 0 \n    for i in range(1, 2*n, 2): \n        sm += i \n    return sm", "task_id": "655_ad131143-a264-4923-87b2-2365c46919d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n): \n    sm = 0 \n    for i in range(2, 2*n+1, 2): \n        sm += i \n    return sm", "task_id": "655_c89863d4-6162-4835-89d9-2a49d792e304", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n natural numbers.", "code": "def sum_of_natural_numbers(n): \n    sm = 0 \n    for i in range(1, n+1): \n        sm += i \n    return sm", "task_id": "655_b49fa855-51e8-4541-81d0-e153233d20b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n): \n    def factorial(x): \n        if x == 0: \n            return 1 \n        else: \n            return x * factorial(x-1) \n    sm = 0 \n    for i in range(1, n+1): \n        sm += factorial(i) \n    return sm", "task_id": "655_45a8e4b1-b640-40f5-ac9b-6848b417048f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n): \n    a, b = 0, 1 \n    sm = a \n    for _ in range(1, n): \n        a, b = b, a + b \n        sm += a \n    return sm", "task_id": "655_8bd913cb-dcbd-4bca-9d66-5b7afb0f8ef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n prime numbers.", "code": "def sum_of_primes(n): \n    def is_prime(x): \n        if x < 2: \n            return False \n        for i in range(2, int(x**0.5) + 1): \n            if x % i == 0: \n                return False \n        return True \n    sm, count, num = 0, 0, 2 \n    while count < n: \n        if is_prime(num): \n            sm += num \n            count += 1 \n        num += 1 \n    return sm", "task_id": "655_2f24d510-08cc-4671-b22d-f25ca682871e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits in the factorial of a given number.", "code": "import math\ndef sum_of_digits_factorial(n):\n    fact = math.factorial(n)\n    return sum(int(digit) for digit in str(fact))", "task_id": "657_386625a3-a266-4a2e-94a2-f8a54e55d680", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the factorial of a given number.", "code": "def count_trailing_zeros(n):\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count", "task_id": "657_7cf4d056-c880-4a0a-84c6-568ea35272c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last non-zero digit in the factorial of a given number.", "code": "def last_non_zero_digit(n):\n    fact = 1\n    for i in range(2, n + 1):\n        fact *= i\n        while fact % 10 == 0:\n            fact //= 10\n        fact %= 1000000\n    return fact % 10", "task_id": "657_56321837-af30-4ea2-9ac8-5d988558a705", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in the factorial of a given number.", "code": "import math\ndef factorial_digit_count(n):\n    if n == 0 or n == 1:\n        return 1\n    digits = 0\n    for i in range(2, n + 1):\n        digits += math.log10(i)\n    return math.floor(digits) + 1", "task_id": "657_1b29a7fa-2552-435e-ac22-111b831689e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the even digits in the factorial of a given number.", "code": "import math\ndef sum_of_even_digits_factorial(n):\n    fact = math.factorial(n)\n    return sum(int(digit) for digit in str(fact) if int(digit) % 2 == 0)", "task_id": "657_70df156e-a13e-4e9f-9b18-55f7c6e344d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the odd digits in the factorial of a given number.", "code": "import math\ndef sum_of_odd_digits_factorial(n):\n    fact = math.factorial(n)\n    return sum(int(digit) for digit in str(fact) if int(digit) % 2 != 0)", "task_id": "657_f0c6a172-b0a5-442d-8970-4735c2f0a32c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits in the factorial of a given number.", "code": "import math\nimport functools\ndef product_of_digits_factorial(n):\n    fact = math.factorial(n)\n    return functools.reduce(lambda x, y: x * y, [int(digit) for digit in str(fact)])", "task_id": "657_3b6a2e7b-368b-4ee7-bc86-cb44a579b608", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given prime number p is a factor in the factorial of a given number n.", "code": "def is_prime_in_factorial(n, p):\n    if p > n:\n        return False\n    count = 0\n    i = p\n    while n // i >= 1:\n        count += n // i\n        i *= p\n    return count > 0", "task_id": "657_e7c0274f-50f5-49f1-93a6-bb4a63d9ab17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the frequency of each digit in the factorial of a given number.", "code": "import math\ndef factorial_digit_frequency(n):\n    fact = str(math.factorial(n))\n    freq = {str(i): 0 for i in range(10)}\n    for digit in fact:\n        freq[digit] += 1\n    return freq", "task_id": "657_cd36995a-c9f1-4061-8d23-2b0219db461f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first two digits in the factorial of a given number.", "code": "import math\ndef first_two_digits_factorial(n):\n    fact = math.factorial(n)\n    while fact >= 100:\n        fact //= 10\n    return fact", "task_id": "657_e0a5bf8c-3951-486c-90ae-c67283aa1beb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of absolute differences of two arrays.", "code": "def find_Max_Sum(a, b, n): \n    a.sort() \n    b.sort(reverse=True) \n    sum = 0  \n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum", "task_id": "656_3145c2d5-0fc8-4c75-a2e7-c3d138019aba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of squared differences of two arrays.", "code": "def find_Min_Sum_Squared(a, b, n): \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum += (a[i] - b[i]) ** 2 \n    return sum", "task_id": "656_d1724ae2-a358-42b5-899f-89e7a9c6ead8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute differences of two arrays, with an offset added to each element of the second array.", "code": "def find_Min_Sum_With_Offset(a, b, n, offset): \n    a.sort() \n    b = [x + offset for x in b] \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum", "task_id": "656_f8d6752e-d833-4ae0-bb9d-5396a0ceb1a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute differences of two arrays, where the second array is reversed.", "code": "def find_Min_Sum_Reverse(a, b, n): \n    a.sort() \n    b.sort(reverse=True) \n    sum = 0  \n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum", "task_id": "656_bde024c3-d50a-4643-89eb-1bbba880dd98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute differences of two arrays, where the second array is alternately sorted.", "code": "def find_Min_Sum_Alternate(a, b, n): \n    a.sort() \n    b.sort() \n    b[1::2] = b[1::2][::-1] \n    sum = 0  \n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum", "task_id": "656_c634a31f-7c64-4c56-a80e-7f11bb188b42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute differences of two arrays, where each element of the second array is divided by a given divisor.", "code": "def find_Min_Sum_Divide(a, b, n, divisor): \n    a.sort() \n    b = [x // divisor for x in b] \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum += abs(a[i] - b[i]) \n    return sum", "task_id": "656_91446889-7938-464c-8c38-705d3a27db70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of squared differences of two arrays, where the second array is reversed.", "code": "def find_Min_Sum_Squared_Reverse(a, b, n): \n    a.sort() \n    b.sort(reverse=True) \n    sum = 0  \n    for i in range(n): \n        sum += (a[i] - b[i]) ** 2 \n    return sum", "task_id": "656_8040fae8-a25b-42a9-984e-f910636a46fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of squared differences of two arrays, with an offset added to each element of the second array.", "code": "def find_Min_Sum_Squared_With_Offset(a, b, n, offset): \n    a.sort() \n    b = [x + offset for x in b] \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum += (a[i] - b[i]) ** 2 \n    return sum", "task_id": "656_fa121599-b72a-4a2b-b641-500741a139cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum sum of squared differences of two arrays.", "code": "def find_Max_Sum_Squared(a, b, n): \n    a.sort() \n    b.sort(reverse=True) \n    sum = 0  \n    for i in range(n): \n        sum += (a[i] - b[i]) ** 2 \n    return sum", "task_id": "656_4398265e-20ee-47ca-b664-ebd5f6d90b26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum sum of absolute squared differences of two arrays.", "code": "def find_Min_Sum_Absolute_Squared(a, b, n): \n    a.sort() \n    b.sort() \n    sum = 0  \n    for i in range(n): \n        sum += abs((a[i] - b[i]) ** 2) \n    return sum", "task_id": "656_4c1e54cf-2e2e-45c1-be0a-cc2eea930be5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with the second maximum occurrences in a given list.", "code": "def second_max_occurrences(list1):\n    from collections import Counter\n    count = Counter(list1)\n    most_common = count.most_common()\n    if len(most_common) < 2:\n        return None\n    return most_common[1][0]", "task_id": "658_5b89d384-5b68-4878-a8b6-ce99aaca20cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the item with maximum occurrences in a given list.", "code": "def max_occurrences_index(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return list1.index(result)", "task_id": "658_8a4e9f24-371e-4a67-a5e5-fc6dd216c698", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all items with maximum occurrences in a given list, but each item should appear only once in the result.", "code": "def unique_max_occurrences(list1):\n    from collections import Counter\n    count = Counter(list1)\n    max_occurrence = max(count.values())\n    return [item for item, occu in count.items() if occu == max_occurrence]", "task_id": "658_7751ff43-f5e0-42db-8371-0a792ee4c2cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list and return a tuple of the item and its count.", "code": "def max_occurrences_with_count(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return (result, max_val)", "task_id": "658_b6912a25-d6cb-4a54-91fd-73b812b0ed91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with minimum occurrences in a given list.", "code": "def min_occurrences(list1):\n    min_val = float('inf')\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu < min_val:\n            min_val = occu\n            result = i\n    return result", "task_id": "658_3a33c966-b9fa-4650-8221-05e12b9280ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list of strings, ignoring case.", "code": "def max_occurrences_ignore_case(list1):\n    list1 = [x.lower() for x in list1]\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result", "task_id": "658_62624504-e6de-4207-9d06-315e00be1dc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the item with maximum occurrences in a given list of strings.", "code": "def max_occurrences_length(list1):\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return len(result)", "task_id": "658_51dea26a-f4c2-413c-86ac-f34664e9cd6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list of integers, considering only even numbers.", "code": "def max_occurrences_even(list1):\n    list1 = [x for x in list1 if x % 2 == 0]\n    if not list1:\n        return None\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result", "task_id": "658_93ba0d48-7079-4d51-bd2b-592877cf4c14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list of integers, considering only odd numbers.", "code": "def max_occurrences_odd(list1):\n    list1 = [x for x in list1 if x % 2 != 0]\n    if not list1:\n        return None\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result", "task_id": "658_170913bc-ea48-4c7a-8fd1-a520cc3017fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the item with maximum occurrences in a given list of integers, considering only negative numbers.", "code": "def max_occurrences_negative(list1):\n    list1 = [x for x in list1 if x < 0]\n    if not list1:\n        return None\n    max_val = 0\n    result = list1[0]\n    for i in list1:\n        occu = list1.count(i)\n        if occu > max_val:\n            max_val = occu\n            result = i\n    return result", "task_id": "658_e8dd1b80-5b25-4457-9b41-b0efe79d04ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find unique elements from a list of integers.", "code": "def find_unique(x): \n    unique = [] \n    for i in x: \n        if x.count(i) == 1: \n            unique.append(i) \n    return unique", "task_id": "659_82ac054a-0f8f-4207-bd44-b12628cbbc58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find duplicates from a list of integers and return a dictionary with the integer as the key and the count of duplicates as the value.", "code": "def find_duplicates_with_count(x): \n    duplicates = {} \n    for i in x: \n        if x.count(i) > 1: \n            duplicates[i] = x.count(i) \n    return duplicates", "task_id": "659_f16fd6bb-3fc2-4690-ac1c-06fa751246ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first duplicate element from a list of integers.", "code": "def find_first_duplicate(x): \n    seen = set() \n    for i in x: \n        if i in seen: \n            return i \n        seen.add(i) \n    return -1", "task_id": "659_ef0e130f-4e99-4402-b317-bd8984d1c757", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find elements that are not duplicated in a list of integers.", "code": "def find_non_duplicates(x): \n    non_duplicates = [] \n    for i in x: \n        if x.count(i) == 1: \n            non_duplicates.append(i) \n    return non_duplicates", "task_id": "659_6fe8bc1d-c29c-4364-8d13-f6a4a4bb34d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of duplicate elements from a list of integers.", "code": "def find_duplicates_indices(x): \n    indices = [] \n    seen = {} \n    for idx, i in enumerate(x): \n        if i in seen: \n            indices.append(seen[i]) \n            indices.append(idx) \n        else: \n            seen[i] = idx \n    return indices", "task_id": "659_0c8f9fce-1a57-4db6-9a7e-2eba92a89f89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find duplicate elements from a list of integers and return them in sorted order.", "code": "def find_duplicates_sorted(x): \n    repeated = [] \n    for i in range(len(x)): \n        if x.count(x[i]) > 1 and x[i] not in repeated: \n            repeated.append(x[i]) \n    return sorted(repeated)", "task_id": "659_14c8ed2b-4161-45b7-87aa-9ffab0efbf17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find duplicate elements from a list of integers and return a dictionary with the integer as the key and a list of positions as the value.", "code": "def find_duplicates_with_positions(x): \n    duplicates = {} \n    for idx, i in enumerate(x): \n        if x.count(i) > 1: \n            if i not in duplicates: \n                duplicates[i] = [] \n            duplicates[i].append(idx) \n    return duplicates", "task_id": "659_e460a252-f6c3-4522-a500-cf7730dbd6a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find duplicate elements from a list of integers within a specified range of indices.", "code": "def find_duplicates_within_range(x, start, end): \n    repeated = [] \n    for i in range(start, end + 1): \n        if x.count(x[i]) > 1 and x[i] not in repeated: \n            repeated.append(x[i]) \n    return repeated", "task_id": "659_853baf5f-662c-4153-9d5b-609ca7c4f134", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find duplicate elements from a list of integers that are within a specified distance from each other.", "code": "def find_duplicates_within_distance(x, distance): \n    repeated = [] \n    for i in range(len(x)): \n        for j in range(i + 1, min(i + distance + 1, len(x))): \n            if x[i] == x[j] and x[i] not in repeated: \n                repeated.append(x[i]) \n    return repeated", "task_id": "659_6db5cca8-1d20-4fbc-b59f-d3fda43f6f75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find elements from a list of integers that appear exactly a specified number of times.", "code": "def find_duplicates_with_frequency(x, frequency): \n    repeated = [] \n    for i in x: \n        if x.count(i) == frequency and i not in repeated: \n            repeated.append(i) \n    return repeated", "task_id": "659_ae06ebae-bdd5-4a6c-864c-6d0210192a89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points in ascending order.", "code": "def find_unique_points(a: int, b: int, c: int, d: int) -> tuple:\n    x = min(a, c) if (a != c) else -1\n    y = max(b, d) if (b != d) else -1\n    return (min(x, y), max(x, y))", "task_id": "660_c255b83c-9681-4006-9c7d-5b45dcf1d520", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points in descending order.", "code": "def find_non_overlapping_points(p: int, q: int, r: int, s: int) -> tuple:\n    x = min(p, r) if (p != r) else -1\n    y = max(q, s) if (q != s) else -1\n    return (max(x, y), min(x, y))", "task_id": "660_47fd0cfa-78d0-4c87-a935-1335a93681b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a list.", "code": "def find_distinct_points(m: int, n: int, o: int, p: int) -> list:\n    x = min(m, o) if (m != o) else -1\n    y = max(n, p) if (n != p) else -1\n    return [x, y]", "task_id": "660_f9f73d11-c5ff-4963-8563-aedb7d883e33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a tuple.", "code": "def find_separate_points(u: int, v: int, w: int, x: int) -> tuple:\n    a = min(u, w) if (u != w) else -1\n    b = max(v, x) if (v != x) else -1\n    return (a, b)", "task_id": "660_36cbd496-fac4-415e-a362-dd0242098839", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a tuple of integers.", "code": "def find_exclusive_points(i: int, j: int, k: int, l: int) -> tuple:\n    p = min(i, k) if (i != k) else -1\n    q = max(j, l) if (j != l) else -1\n    return (p, q)", "task_id": "660_8ec50d90-22d0-4b6d-b0f6-c625f86bdc2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a set.", "code": "def find_non_intersecting_points(a1: int, b1: int, a2: int, b2: int) -> set:\n    x = min(a1, a2) if (a1 != a2) else -1\n    y = max(b1, b2) if (b1 != b2) else -1\n    return {x, y}", "task_id": "660_df5a51b1-2668-4fc2-8305-678cd129655b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a tuple of floats.", "code": "def find_unique_range_points(x1: int, y1: int, x2: int, y2: int) -> tuple:\n    a = float(min(x1, x2)) if (x1 != x2) else -1.0\n    b = float(max(y1, y2)) if (y1 != y2) else -1.0\n    return (a, b)", "task_id": "660_870d7421-7741-4a97-8ab7-32a20aba3192", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a list of integers.", "code": "def find_non_shared_points(m1: int, n1: int, m2: int, n2: int) -> list:\n    x = min(m1, m2) if (m1 != m2) else -1\n    y = max(n1, n2) if (n1 != n2) else -1\n    return [x, y]", "task_id": "660_4c35cc61-a20b-4c8a-afa2-ff413f303b86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a tuple of integers.", "code": "def find_non_overlapping_range_points(p1: int, q1: int, p2: int, q2: int) -> tuple:\n    a = min(p1, p2) if (p1 != p2) else -1\n    b = max(q1, q2) if (q1 != q2) else -1\n    return (a, b)", "task_id": "660_00143c54-029d-46e2-8b16-268fe4481580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to choose points from two ranges such that no point lies in both the ranges, and return the points as a set of integers.", "code": "def find_distinct_range_points(a1: int, b1: int, a2: int, b2: int) -> set:\n    x = min(a1, a2) if (a1 != a2) else -1\n    y = max(b1, b2) if (b1 != b2) else -1\n    return {x, y}", "task_id": "660_d857e936-1201-466d-adbf-c3923abf7eeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list in a dictionary in reverse order.", "code": "def reverse_sorted_dict(dict1):\n  reverse_sorted_dict = {x: sorted(y, reverse=True) for x, y in dict1.items()}\n  return reverse_sorted_dict", "task_id": "662_018686f5-eabc-49c8-9200-72a31f05a09f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the values in each list of a dictionary.", "code": "def sum_dict_values(dict1):\n  sum_dict = {x: sum(y) for x, y in dict1.items()}\n  return sum_dict", "task_id": "662_c18fe5c6-7d23-4308-a386-2b5860dac3ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from the lists in a dictionary.", "code": "def filter_even_dict(dict1):\n  filtered_dict = {x: [num for num in y if num % 2 != 0] for x, y in dict1.items()}\n  return filtered_dict", "task_id": "662_4f075e74-2bef-4890-8561-285bafa5975f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply each value in the lists of a dictionary by a given factor.", "code": "def multiply_dict_values(dict1, factor):\n  multiplied_dict = {x: [num * factor for num in y] for x, y in dict1.items()}\n  return multiplied_dict", "task_id": "662_1bf53645-9cac-4752-92c7-150ef43a82e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in each list of a dictionary.", "code": "def count_dict_values(dict1):\n  count_dict = {x: len(y) for x, y in dict1.items()}\n  return count_dict", "task_id": "662_999a38d2-3669-4a82-b665-85c7830a4982", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten the lists in a dictionary into a single list.", "code": "def flatten_dict_values(dict1):\n  flattened_dict = {x: [item for sublist in y for item in sublist] for x, y in dict1.items()}\n  return flattened_dict", "task_id": "662_4ee23f4e-aa98-4a11-bb65-cb1c3897ae7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate values from the lists in a dictionary.", "code": "def unique_dict_values(dict1):\n  unique_dict = {x: list(set(y)) for x, y in dict1.items()}\n  return unique_dict", "task_id": "662_a017d66e-4627-45cd-a5af-ee1bd3c2c175", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to square each value in the lists of a dictionary.", "code": "def square_dict_values(dict1):\n  squared_dict = {x: [num ** 2 for num in y] for x, y in dict1.items()}\n  return squared_dict", "task_id": "662_1179bcd0-9248-4fe3-97d7-c111c8e88949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out positive numbers from the lists in a dictionary.", "code": "def filter_positive_dict(dict1):\n  filtered_dict = {x: [num for num in y if num <= 0] for x, y in dict1.items()}\n  return filtered_dict", "task_id": "662_c803c57f-40ac-4f22-aa6e-f2ab792e3260", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each value in the lists of a dictionary.", "code": "def double_dict_values(dict1):\n  doubled_dict = {x: [num * 2 for num in y] for x, y in dict1.items()}\n  return doubled_dict", "task_id": "662_87c2fbff-2356-41f7-8135-753f17edba63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be even.", "code": "import sys\ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(0, n + 1, 2): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_64574491-5684-40d3-ba31-8d35e48d4b59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a multiple of 3.", "code": "import sys\ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(0, n + 1, 3): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_682ede32-69be-435d-8844-ac10785d8b11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a prime number.", "code": "import sys\n\ndef is_prime(num):\n\tif num <= 1:\n\t\treturn False\n\tfor i in range(2, int(num ** 0.5) + 1):\n\t\tif num % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef find_max_val(n, x, y):\n\tans = -sys.maxsize\n\tfor k in range(n + 1):\n\t\tif is_prime(k) and (k % x == y):\n\t\t\tans = max(ans, k)\n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_029810aa-3278-4164-aec5-97602c50c933", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a perfect square.", "code": "import sys\n\ndef is_perfect_square(num):\n\treturn int(num ** 0.5) ** 2 == num\n\ndef find_max_val(n, x, y):\n\tans = -sys.maxsize\n\tfor k in range(n + 1):\n\t\tif is_perfect_square(k) and (k % x == y):\n\t\t\tans = max(ans, k)\n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_80225221-6665-4afd-8813-7931e7772f4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a Fibonacci number.", "code": "import sys\n\ndef is_fibonacci(num):\n\tif num == 0 or num == 1:\n\t\treturn True\n\ta, b = 0, 1\n\twhile b < num:\n\t\ta, b = b, a + b\n\treturn b == num\n\ndef find_max_val(n, x, y):\n\tans = -sys.maxsize\n\tfor k in range(n + 1):\n\t\tif is_fibonacci(k) and (k % x == y):\n\t\t\tans = max(ans, k)\n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_2ba60bfc-0be2-4157-983d-88d8654065e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a palindrome.", "code": "import sys\n\ndef is_palindrome(num):\n\treturn str(num) == str(num)[::-1]\n\ndef find_max_val(n, x, y):\n\tans = -sys.maxsize\n\tfor k in range(n + 1):\n\t\tif is_palindrome(k) and (k % x == y):\n\t\t\tans = max(ans, k)\n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_03b78790-cc36-4648-96ff-3cc11b8140f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a power of 2.", "code": "import sys\n\ndef is_power_of_two(num):\n\treturn (num & (num - 1)) == 0 and num != 0\n\ndef find_max_val(n, x, y):\n\tans = -sys.maxsize\n\tfor k in range(n + 1):\n\t\tif is_power_of_two(k) and (k % x == y):\n\t\t\tans = max(ans, k)\n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_6d325b4b-32a4-4bde-95be-6c3668352cb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a multiple of 5.", "code": "import sys\ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(0, n + 1, 5): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_bc5b0ce1-6ff3-4690-9038-f3feb71334d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be a multiple of 7.", "code": "import sys\ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(0, n + 1, 7): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_f071b446-3dbc-4c96-9498-14ea0da1ca72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest possible value of k such that k modulo x is y, but k must be an odd number.", "code": "import sys\ndef find_max_val(n, x, y): \n\tans = -sys.maxsize \n\tfor k in range(1, n + 1, 2): \n\t\tif (k % x == y): \n\t\t\tans = max(ans, k) \n\treturn (ans if (ans >= 0 and ans <= n) else -1)", "task_id": "663_52a50527-2a33-49ee-bad2-a242f2bee5f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of odd numbers till a given odd number.", "code": "def sum_of_odds(n: int) -> int:\n    if n % 2 == 0:\n        return \"Invalid Input\"\n    total = 0\n    for i in range(1, n+1, 2):\n        total += i\n    return total", "task_id": "664_23ae9d51-4e58-4a1c-b365-411ad6fa9643", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of even numbers till a given even number.", "code": "def product_of_evens(n: int) -> int:\n    if n % 2 != 0:\n        return \"Invalid Input\"\n    product = 1\n    for i in range(2, n+1, 2):\n        product *= i\n    return product", "task_id": "664_f11df496-cf0e-4b4e-b3be-9f66bbb35a50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of numbers till a given number.", "code": "def sum_of_squares(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i**2\n    return total", "task_id": "664_f5ba5819-c2e3-4501-b676-da31b4c04251", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of multiples of three till a given number.", "code": "def average_of_multiples_of_three(n: int) -> float:\n    total = 0\n    count = 0\n    for i in range(3, n+1, 3):\n        total += i\n        count += 1\n    return total / count if count != 0 else 0", "task_id": "664_4b0b64df-a1e5-481a-80f6-ab379afedfbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of numbers till a given number.", "code": "def sum_of_cubes(n: int) -> int:\n    total = 0\n    for i in range(1, n+1):\n        total += i**3\n    return total", "task_id": "664_252080c1-27d4-43b5-ab24-dd18100ae0c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of squares of odd numbers till a given odd number.", "code": "def average_of_odd_squares(n: int) -> float:\n    if n % 2 == 0:\n        return \"Invalid Input\"\n    total = 0\n    count = 0\n    for i in range(1, n+1, 2):\n        total += i**2\n        count += 1\n    return total / count", "task_id": "664_394945a1-c78d-4bca-b4d0-a803505bd129", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers till a given number.", "code": "def sum_of_primes(n: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    total = 0\n    for i in range(2, n+1):\n        if is_prime(i):\n            total += i\n    return total", "task_id": "664_638e3265-e38e-4acc-ac74-9ff3d97f82f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of odd numbers till a given odd number.", "code": "def product_of_odd_numbers(n: int) -> int:\n    if n % 2 == 0:\n        return \"Invalid Input\"\n    product = 1\n    for i in range(1, n+1, 2):\n        product *= i\n    return product", "task_id": "664_d2213651-8bf1-49b2-8319-2ed4257f75ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of Fibonacci numbers till the nth Fibonacci number.", "code": "def sum_of_fibonacci(n: int) -> int:\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "664_40e92e1b-5e5c-43bd-837c-6af9fe878b64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of squares of even numbers till a given even number.", "code": "def average_of_even_squares(n: int) -> float:\n    if n % 2 != 0:\n        return \"Invalid Input\"\n    total = 0\n    count = 0\n    for i in range(2, n+1, 2):\n        total += i**2\n        count += 1\n    return total / count", "task_id": "664_4f432496-eae0-4aa4-8dcf-de252dba3c20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to rotate the elements of a list to the right by one position.", "code": "def rotate_right(lst):\n    if not lst:\n        return lst\n    return [lst[-1]] + lst[:-1]", "task_id": "665_8f9a6e7b-d665-49bf-a71e-6b50a4386000", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all duplicate elements from a list while maintaining the order of the first occurrence.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "task_id": "665_bc72ff7c-24b4-45ab-a596-7928fbcc77dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements of a given list.", "code": "def reverse_list(lst):\n    return lst[::-1]", "task_id": "665_a4f7fd17-216a-4642-b32f-25b2124232a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of elements at even indices in a given list.", "code": "def sum_even_indices(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2))", "task_id": "665_c9681de1-c19a-4b0e-8660-5b4c06c96e10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all negative numbers in a list with zero.", "code": "def replace_negatives(lst):\n    return [0 if x < 0 else x for x in lst]", "task_id": "665_db97112e-5074-4330-aa43-d9084089fd08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest number in a list.", "code": "def second_largest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2] if len(unique_lst) > 1 else None", "task_id": "665_96c2b3bc-5351-49a9-8629-0e3e16e47bef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of occurrences of a given element in a list.", "code": "def count_occurrences(lst, x):\n    return lst.count(x)", "task_id": "665_59a3156a-b9f8-43fe-a6f0-d45f983592d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given list is sorted in ascending order.", "code": "def is_sorted(lst):\n    return lst == sorted(lst)", "task_id": "665_51e16ed6-bb07-4cda-aa94-dad8ff7290c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two lists by alternating their elements.", "code": "def merge_lists(lst1, lst2):\n    merged = []\n    for a, b in zip(lst1, lst2):\n        merged.extend([a, b])\n    merged.extend(lst1[len(lst2):])\n    merged.extend(lst2[len(lst1):])\n    return merged", "task_id": "665_7a9656cb-bb68-4d03-a4f2-f47945a8e94e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing number in a list of integers from 1 to n.", "code": "def find_missing_number(lst):\n    n = len(lst) + 1\n    total = n * (n + 1) // 2\n    return total - sum(lst)", "task_id": "665_04d10f26-0192-45a1-846e-fd77631560a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive elements present.", "code": "def max_sum_no_two_consecutive(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_2a368042-2462-4740-98c4-dc58f03ac3ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no four consecutive elements present.", "code": "def max_sum_no_four_consecutive(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n >= 3: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tif n > 3: \n\t\tsum[3] = max(sum[2], max(arr[0] + arr[1] + arr[3], arr[0] + arr[2] + arr[3])) \n\tfor i in range(4, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), max(arr[i] + arr[i-1] + sum[i-3], arr[i] + arr[i-1] + arr[i-2] + sum[i-4])) \n\treturn sum[n-1]", "task_id": "661_7c91b4cc-e357-4a8e-a1fd-be7376cea51c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two adjacent elements present.", "code": "def max_sum_no_two_adjacent(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_e9544487-36f9-4547-9c8d-5b6b7abe1a67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no three adjacent elements present.", "code": "def max_sum_no_three_adjacent(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] \n\tif n > 2: \n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \n\tfor i in range(3, n): \n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \n\treturn sum[n-1]", "task_id": "661_955c9312-38d9-474a-8f49-3d442944f1b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive even elements present.", "code": "def max_sum_no_two_consecutive_even(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if arr[0] % 2 != 0 or arr[1] % 2 != 0 else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif arr[i] % 2 == 0 and arr[i-1] % 2 == 0: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_4b62d068-396d-4d9c-ba16-22b0f2d41049", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive odd elements present.", "code": "def max_sum_no_two_consecutive_odd(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if arr[0] % 2 == 0 or arr[1] % 2 == 0 else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif arr[i] % 2 != 0 and arr[i-1] % 2 != 0: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_ee8f7e92-123f-4d0d-90aa-6f8a816c649c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive prime elements present.", "code": "def is_prime(num): \n\tif num <= 1: \n\t\treturn False \n\tfor i in range(2, int(num ** 0.5) + 1): \n\t\tif num % i == 0: \n\t\t\treturn False \n\treturn True \n\ndef max_sum_no_two_consecutive_primes(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if not (is_prime(arr[0]) and is_prime(arr[1])) else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif is_prime(arr[i]) and is_prime(arr[i-1]): \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_e106c928-c3b0-4962-be6d-30d3c4d9c78c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive multiples of three present.", "code": "def max_sum_no_two_consecutive_multiples_of_three(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if arr[0] % 3 != 0 or arr[1] % 3 != 0 else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif arr[i] % 3 == 0 and arr[i-1] % 3 == 0: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_904b7aed-7261-4b62-b2d7-ff25e65fbae2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive Fibonacci numbers present.", "code": "def is_fibonacci(num): \n\tif num == 0 or num == 1: \n\t\treturn True \n\ta, b = 0, 1 \n\twhile b < num: \n\t\ta, b = b, a + b \n\treturn b == num \n\ndef max_sum_no_two_consecutive_fibonacci(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if not (is_fibonacci(arr[0]) and is_fibonacci(arr[1])) else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif is_fibonacci(arr[i]) and is_fibonacci(arr[i-1]): \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_8dca53a7-6aa6-46a6-b8e0-afa9dbe1d91e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum that can be formed which has no two consecutive perfect squares present.", "code": "def is_perfect_square(num): \n\treturn int(num ** 0.5) ** 2 == num \n\ndef max_sum_no_two_consecutive_squares(arr, n): \n\tsum = [0 for k in range(n)] \n\tif n >= 1: \n\t\tsum[0] = arr[0] \n\tif n >= 2: \n\t\tsum[1] = arr[0] + arr[1] if not (is_perfect_square(arr[0]) and is_perfect_square(arr[1])) else max(arr[0], arr[1]) \n\tfor i in range(2, n): \n\t\tif is_perfect_square(arr[i]) and is_perfect_square(arr[i-1]): \n\t\t\tsum[i] = max(sum[i-1], sum[i-2]) \n\t\telse: \n\t\t\tsum[i] = max(sum[i-1], sum[i-2] + arr[i]) \n\treturn sum[n-1]", "task_id": "661_39b28f32-556f-4111-b50e-f29134718b3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    consonants = [char for char in s if char.isalpha() and char not in vowels]\n    return len(consonants)", "task_id": "667_44f2578c-8c2c-438f-8c61-4c42ce1b67e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a string.", "code": "def count_uppercase(s: str) -> int:\n    return sum(1 for char in s if char.isupper())", "task_id": "667_f79d9105-427e-429f-9955-3e46d3a88390", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a string.", "code": "def count_lowercase(s: str) -> int:\n    return sum(1 for char in s if char.islower())", "task_id": "667_c7e2fadd-bc9b-4dad-9749-45d02e555c1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a string.", "code": "def count_digits(s: str) -> int:\n    return sum(1 for char in s if char.isdigit())", "task_id": "667_8b4d0bc5-cd5c-4581-bf15-21146a06e13e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of special characters in a string.", "code": "def count_special_characters(s: str) -> int:\n    return sum(1 for char in s if not char.isalnum())", "task_id": "667_77037c6e-255b-4ca6-be7e-e4bfac92207f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "667_67dc592a-a791-42c7-a2bf-6b6ee67d6119", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in a string.", "code": "def count_spaces(s: str) -> int:\n    return s.count(' ')", "task_id": "667_c8d8b8c0-d532-487d-a74c-038d0e8b2da5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a substring in a string.", "code": "def count_substring(s: str, sub: str) -> int:\n    return s.count(sub)", "task_id": "667_0b6bd5bc-f86a-487f-9a71-97190c7b4fc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique characters in a string.", "code": "def count_unique_characters(s: str) -> int:\n    return len(set(s))", "task_id": "667_ac3ad0d5-aade-4b44-a2df-91bbe1c01fe5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of palindromic words in a list of words.", "code": "def count_palindromes(words: list) -> int:\n    return sum(1 for word in words if word == word[::-1])", "task_id": "667_884a8c9a-d52b-4421-9bfa-87a2184d4850", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has an increasing trend or not.", "code": "def is_increasing(nums):\n    return nums == sorted(nums)", "task_id": "670_92157e3a-4020-46a5-bb7c-92a6d458621e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is non-decreasing (i.e., each number is greater than or equal to the previous number).", "code": "def is_non_decreasing(nums):\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "task_id": "670_ed8bfed5-50f6-4dec-a92b-45cf3f390631", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is non-increasing (i.e., each number is less than or equal to the previous number).", "code": "def is_non_increasing(nums):\n    return all(nums[i] >= nums[i+1] for i in range(len(nums)-1))", "task_id": "670_2806bc9b-e7cd-4d11-ad6c-44785272968f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is strictly increasing (i.e., each number is greater than the previous number).", "code": "def is_strictly_increasing(nums):\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))", "task_id": "670_5b6f3bb3-9a9d-4257-bdc6-6c27de3fe9f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is strictly decreasing (i.e., each number is less than the previous number).", "code": "def is_strictly_decreasing(nums):\n    return all(nums[i] > nums[i+1] for i in range(len(nums)-1))", "task_id": "670_63c1f55e-f811-4698-ba71-1444bb423ba2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all numbers in a sequence are the same.", "code": "def has_constant_trend(nums):\n    return all(num == nums[0] for num in nums)", "task_id": "670_40a650cf-3c44-48c9-920c-0610dc196b72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers alternates between increasing and decreasing.", "code": "def has_alternating_trend(nums):\n    return all((nums[i] < nums[i+1] and nums[i+1] > nums[i+2]) or (nums[i] > nums[i+1] and nums[i+1] < nums[i+2]) for i in range(len(nums)-2))", "task_id": "670_baecdd8c-d649-4c11-84f9-2b49fb9ef7ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is a palindrome (i.e., it reads the same forward and backward).", "code": "def is_palindrome(nums):\n    return nums == nums[::-1]", "task_id": "670_00a66248-0f92-4c59-bdf2-ffe6386f4b87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers forms an arithmetic sequence (i.e., the difference between consecutive numbers is constant).", "code": "def is_arithmetic_sequence(nums):\n    if len(nums) < 2:\n        return True\n    diff = nums[1] - nums[0]\n    return all(nums[i+1] - nums[i] == diff for i in range(len(nums)-1))", "task_id": "670_0e8cd146-aa75-4890-b456-daf3cb9bb15b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers forms a geometric sequence (i.e., the ratio between consecutive numbers is constant).", "code": "def is_geometric_sequence(nums):\n    if len(nums) < 2:\n        return True\n    ratio = nums[1] / nums[0]\n    return all(nums[i+1] / nums[i] == ratio for i in range(len(nums)-1))", "task_id": "670_18e3656b-87fc-4ac3-8bb9-2445d8329725", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the rightmost bit of a given integer.", "code": "def toggle_rightmost_bit(n: int) -> int:\n    return n ^ 1", "task_id": "671_0def5809-dfb9-40b9-88c5-edd59b42557f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the rightmost set bit of a given integer.", "code": "def clear_rightmost_set_bit(n: int) -> int:\n    return n & (n - 1)", "task_id": "671_cf8ef598-239b-45a2-9567-aa2ff6e9ba91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in a given integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "671_68bc3b82-2990-4bbf-a473-bb6086674d6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "671_327d58bf-6499-4621-8271-bb79ccfe4471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the position of the rightmost set bit in a given integer.", "code": "def get_rightmost_set_bit_position(n: int) -> int:\n    if n == 0:\n        return -1\n    position = 1\n    while (n & 1) == 0:\n        n >>= 1\n        position += 1\n    return position", "task_id": "671_86998387-551c-48ea-be64-9f30cdc9b1c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the k-th bit of a given integer.", "code": "def set_kth_bit(n: int, k: int) -> int:\n    return n | (1 << (k - 1))", "task_id": "671_0baa7a8b-664c-411a-a4c3-1dfb034cec4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the k-th bit of a given integer.", "code": "def clear_kth_bit(n: int, k: int) -> int:\n    return n & ~(1 << (k - 1))", "task_id": "671_ab65c526-40c3-49c0-8cf0-27763e750baa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the k-th bit of a given integer.", "code": "def toggle_kth_bit(n: int, k: int) -> int:\n    return n ^ (1 << (k - 1))", "task_id": "671_41c00e0e-39da-4c73-b410-8e4996712668", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the k-th bit of a given integer is set.", "code": "def is_kth_bit_set(n: int, k: int) -> bool:\n    return (n & (1 << (k - 1))) != 0", "task_id": "671_a0ceca19-132f-424b-865f-c28790467c4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the position of the highest set bit in a given integer.", "code": "def get_highest_set_bit_position(n: int) -> int:\n    if n == 0:\n        return -1\n    position = 0\n    while n != 0:\n        n >>= 1\n        position += 1\n    return position", "task_id": "671_608388ad-ce29-44c6-a966-9d12993b66e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(num1, num2, num3):\n    if (num1 >= num2) and (num1 >= num3):\n       lnum = num1\n    elif (num2 >= num1) and (num2 >= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum", "task_id": "672_625dc3da-913c-40d8-9690-bb0e6e0f157c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of four numbers.", "code": "def max_of_four(num1, num2, num3, num4):\n    return max(num1, num2, num3, num4)", "task_id": "672_5ff43bf2-7fd0-4c57-93b0-bee479b4e104", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(num1, num2, num3):\n    if (num1 <= num2) and (num1 <= num3):\n       lnum = num1\n    elif (num2 <= num1) and (num2 <= num3):\n       lnum = num2\n    else:\n       lnum = num3\n    return lnum", "task_id": "672_8aec84d9-ab4c-45a0-93be-69002036d229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second maximum of three numbers.", "code": "def second_max_of_three(num1, num2, num3):\n    nums = [num1, num2, num3]\n    nums.sort()\n    return nums[1]", "task_id": "672_762b5033-25a5-4cab-b66f-d6a369b5a9c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in a list of integers.", "code": "def max_of_list(nums):\n    return max(nums)", "task_id": "672_b1155280-9569-4209-b794-d09ffafcd575", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number in a list of integers.", "code": "def min_of_list(nums):\n    return min(nums)", "task_id": "672_3e95c0ee-923a-4531-b9bd-7747d38ab464", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of three numbers.", "code": "def sum_of_three(num1, num2, num3):\n    return num1 + num2 + num3", "task_id": "672_382ca43d-2235-453f-875e-abcc369aba69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of three numbers.", "code": "def average_of_three(num1, num2, num3):\n    return (num1 + num2 + num3) / 3", "task_id": "672_2815df46-1f56-4c9a-b5da-305b284dd1d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of three numbers.", "code": "def product_of_three(num1, num2, num3):\n    return num1 * num2 * num3", "task_id": "672_4f847d9b-bb40-42b8-a06a-1585a475396f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two numbers.", "code": "def max_of_two(num1, num2):\n    return num1 if num1 >= num2 else num2", "task_id": "672_fc72cf46-0b7d-48a0-ac7c-cb4759c4376d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of all digits in a list of integers.", "code": "def sum_of_digits(lst):\n    return sum(int(digit) for num in lst for digit in str(num))", "task_id": "673_c3a15090-6e6d-454f-baa9-305cfc52f2db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of each integer in a list.", "code": "def reverse_digits(lst):\n    return [int(str(num)[::-1]) for num in lst]", "task_id": "673_f390c0c7-f86f-4ea9-b0d1-72a8493347ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to concatenate a list of integers into a single string with a given separator.", "code": "def concatenate_with_separator(lst, sep):\n    return sep.join(map(str, lst))", "task_id": "673_a4579772-7483-46b9-bf92-3212a4225be8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to split a list of integers into two lists: one containing even numbers and the other containing odd numbers.", "code": "def even_odd_split(lst):\n    evens = [num for num in lst if num % 2 == 0]\n    odds = [num for num in lst if num % 2 != 0]\n    return (evens, odds)", "task_id": "673_6e9ce099-1615-46c5-b516-b8cac1416f00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of digits in a list of integers.", "code": "def count_digits(lst):\n    return sum(len(str(num)) for num in lst)", "task_id": "673_56d411df-1600-451c-9185-fc38ea36504b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of all digits in a list of integers.", "code": "def product_of_digits(lst):\n    product = 1\n    for num in lst:\n        for digit in str(num):\n            product *= int(digit)\n    return product", "task_id": "673_06c2fe9b-c20e-42d8-b251-be82e97ef1f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to filter out prime numbers from a list of integers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef filter_primes(lst):\n    return [num for num in lst if is_prime(num)]", "task_id": "673_cb464054-1159-4c7a-a394-b653187c036a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the frequency of each digit in a list of integers.", "code": "def digit_frequency(lst):\n    freq = {}\n    for num in lst:\n        for digit in str(num):\n            if digit in freq:\n                freq[digit] += 1\n            else:\n                freq[digit] = 1\n    return freq", "task_id": "673_ee20b517-a945-4cee-9eb3-8576a8ffbb9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list where each integer is replaced by the square of its digits concatenated together.", "code": "def square_digits(lst):\n    return [int(''.join(str(int(digit)**2) for digit in str(num))) for num in lst]", "task_id": "673_85ab7119-d2a4-448c-a9ad-cedf70f5ba0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the alternating sum of a list of integers (subtracting every second number).", "code": "def alternating_sum(lst):\n    return sum(num if i % 2 == 0 else -num for i, num in enumerate(lst))", "task_id": "673_b4ee75e6-5c11-4f0f-b3be-ac96d3de5b1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from the given string using regex.", "code": "import re\ndef remove_vowels(text: str) -> str:\n    pattern = re.compile('[aeiouAEIOU]')\n    return pattern.sub('', text)", "task_id": "676_3df5575a-f000-425c-ac9f-21de77d5dee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from the given string using regex.", "code": "import re\ndef remove_digits(text: str) -> str:\n    pattern = re.compile('[0-9]')\n    return pattern.sub('', text)", "task_id": "676_1e108f2c-459c-469b-b739-4eff750449cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from the given string using regex.", "code": "import re\ndef remove_consonants(text: str) -> str:\n    pattern = re.compile('[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]')\n    return pattern.sub('', text)", "task_id": "676_e5e4f4ea-da26-4ae6-9953-1e925ffffbf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from the given string using regex.", "code": "import re\ndef remove_whitespace(text: str) -> str:\n    pattern = re.compile('\\s+')\n    return pattern.sub('', text)", "task_id": "676_ab392dee-a8d8-4ab7-8d60-44de5ee6054f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters (non-alphanumeric and non-space) from the given string using regex.", "code": "import re\ndef remove_special_characters(text: str) -> str:\n    pattern = re.compile('[^\\w\\s]')\n    return pattern.sub('', text)", "task_id": "676_73c5bda1-a3f9-4483-9f4a-f0a5c04cf07e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase letters from the given string using regex.", "code": "import re\ndef remove_uppercase(text: str) -> str:\n    pattern = re.compile('[A-Z]')\n    return pattern.sub('', text)", "task_id": "676_9ad91df1-334e-4ea0-95bb-0b2a00cbd073", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase letters from the given string using regex.", "code": "import re\ndef remove_lowercase(text: str) -> str:\n    pattern = re.compile('[a-z]')\n    return pattern.sub('', text)", "task_id": "676_f4dcae21-ad80-483f-8960-e133163dd44c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-ASCII characters from the given string using regex.", "code": "import re\ndef remove_non_ascii(text: str) -> str:\n    pattern = re.compile('[^\\x00-\\x7F]')\n    return pattern.sub('', text)", "task_id": "676_373b078c-f078-43b2-8528-79630464f08f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation characters from the given string using regex.", "code": "import re\ndef remove_punctuation(text: str) -> str:\n    pattern = re.compile('[\\p{P}]')\n    return pattern.sub('', text)", "task_id": "676_5c49dfab-f3e3-47cc-bd6f-0241a6be6abe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all HTML tags from the given string using regex.", "code": "import re\ndef remove_html_tags(text: str) -> str:\n    pattern = re.compile('<.*?>')\n    return pattern.sub('', text)", "task_id": "676_40e3c5f1-bed8-49f7-a71d-0a835280d87d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string while maintaining the order of their first occurrence.", "code": "def remove_duplicate_chars(string):\n    result = ''.join(OrderedDict((c, c) for c in string).keys())\n    return result", "task_id": "674_1b1c3f45-7bbf-47aa-8940-6ea322e6d037", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string in a case-insensitive manner.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_case_insensitive(string):\n    words = string.split()\n    result = ' '.join(OrderedDict((w.lower(), w) for w in words).values())\n    return result", "task_id": "674_53da95fa-6dec-4cc3-aabf-9e0285c211ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate integers from a given list while maintaining the order of their first occurrence.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_integers(lst):\n    result = list(OrderedDict((x, x) for x in lst).keys())\n    return result", "task_id": "674_d6d8e49e-34b3-4e7e-a398-c67a0eb1239b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string, considering punctuation marks as part of the words.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_with_punctuation(string):\n    words = string.split()\n    result = ' '.join(OrderedDict((w, w) for w in words).keys())\n    return result", "task_id": "674_d85edea6-3e20-497b-b089-4858817d1e9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate lines from a given multi-line string while maintaining the order of their first occurrence.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_lines(text):\n    lines = text.split('\\n')\n    result = '\\n'.join(OrderedDict((line, line) for line in lines).keys())\n    return result", "task_id": "674_ed2f0175-df68-4e3b-bc49-722faff98122", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate tuples from a given list of tuples while maintaining the order of their first occurrence.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_tuples(lst):\n    result = list(OrderedDict((t, t) for t in lst).keys())\n    return result", "task_id": "674_c954a8bf-caaf-424c-b37c-2e492c3c6cf3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string where the words have a specified minimum length.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_length(string, length):\n    words = string.split()\n    result = ' '.join(OrderedDict((w, w) for w in words if len(w) >= length).keys())\n    return result", "task_id": "674_f7e3175e-d29d-47eb-8404-d3966dcf190f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string and return the remaining words in reverse order.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_reverse(string):\n    words = string.split()\n    unique_words = list(OrderedDict((w, w) for w in words).keys())\n    result = ' '.join(unique_words[::-1])\n    return result", "task_id": "674_b7afe89c-5890-41a8-86e7-58ada331cb18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string and return the remaining words in alphabetical order.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_sorted(string):\n    words = string.split()\n    unique_words = list(OrderedDict((w, w) for w in words).keys())\n    result = ' '.join(sorted(unique_words))\n    return result", "task_id": "674_6cfbbdb7-5602-47aa-aead-21aebc521047", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string and return the remaining words separated by a custom separator.", "code": "from collections import OrderedDict\n\ndef remove_duplicate_words_custom_separator(string, separator):\n    words = string.split()\n    result = separator.join(OrderedDict((w, w) for w in words).keys())\n    return result", "task_id": "674_a99d6f73-d734-4cff-ae8f-aff6d23fc022", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply two integers. However, if the product is between the given range it will return 50.", "code": "def multiply_nums(a: int, b: int, m: int, n: int) -> int:\n    product = a * b\n    if product in range(m, n):\n        return 50\n    else:\n        return product", "task_id": "675_b0f13746-5f78-4467-8f3d-b277f1f3eb68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract two integers. However, if the difference is between the given range it will return -10.", "code": "def subtract_nums(a: int, b: int, m: int, n: int) -> int:\n    difference = a - b\n    if difference in range(m, n):\n        return -10\n    else:\n        return difference", "task_id": "675_0c78f0fd-07d7-4f41-920f-5e46aeb324cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide two integers. However, if the quotient is between the given range it will return 1.5.", "code": "def divide_nums(a: int, b: int, m: int, n: int) -> float:\n    if b == 0:\n        raise ValueError('Division by zero is not allowed')\n    quotient = a / b\n    if quotient >= m and quotient < n:\n        return 1.5\n    else:\n        return quotient", "task_id": "675_6aac8629-e03e-4fc2-820f-43cf553215e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum a list of integers. However, if the sum is between the given range it will return 100.", "code": "def sum_list(nums: list, m: int, n: int) -> int:\n    total = sum(nums)\n    if total in range(m, n):\n        return 100\n    else:\n        return total", "task_id": "675_edd51ae0-22d3-47f4-a01f-178529baadb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a list of integers. However, if the maximum value is between the given range it will return 0.", "code": "def max_in_list(nums: list, m: int, n: int) -> int:\n    max_val = max(nums)\n    if max_val in range(m, n):\n        return 0\n    else:\n        return max_val", "task_id": "675_22fa69a7-65e5-493b-b2c6-f8407a8c4484", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in a list of integers. However, if the minimum value is between the given range it will return -1.", "code": "def min_in_list(nums: list, m: int, n: int) -> int:\n    min_val = min(nums)\n    if min_val in range(m, n):\n        return -1\n    else:\n        return min_val", "task_id": "675_30ed7c68-b82f-4ddb-ae1a-c1f66d2f1524", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between two integers. However, if the absolute difference is between the given range it will return 5.", "code": "def abs_difference(a: int, b: int, m: int, n: int) -> int:\n    abs_diff = abs(a - b)\n    if abs_diff in range(m, n):\n        return 5\n    else:\n        return abs_diff", "task_id": "675_020a3bd4-42a4-489e-a89c-bf364b479264", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of two integers. However, if the sum of squares is between the given range it will return 30.", "code": "def sum_of_squares(a: int, b: int, m: int, n: int) -> int:\n    sum_squares = a**2 + b**2\n    if sum_squares in range(m, n):\n        return 30\n    else:\n        return sum_squares", "task_id": "675_3459ea22-461e-4a14-8e32-eb53f62d8b16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of two integers. However, if the sum of cubes is between the given range it will return 40.", "code": "def sum_of_cubes(a: int, b: int, m: int, n: int) -> int:\n    sum_cubes = a**3 + b**3\n    if sum_cubes in range(m, n):\n        return 40\n    else:\n        return sum_cubes", "task_id": "675_8724cd4e-0604-4031-97e4-04726e9c2f12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of a list of integers. However, if the product is between the given range it will return 60.", "code": "def product_of_list(nums: list, m: int, n: int) -> int:\n    product = 1\n    for num in nums:\n        product *= num\n    if product in range(m, n):\n        return 60\n    else:\n        return product", "task_id": "675_b201f902-4523-4d94-80dd-8a015d463d7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a right triangle.", "code": "def is_right_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "677_b0d49569-b00a-49f5-b210-a87d50110c9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form an equilateral triangle.", "code": "def is_equilateral_triangle(a: int, b: int, c: int) -> bool:\n    return a == b == c", "task_id": "677_3fc21cd5-fe82-47b6-b7f3-f653d6bf8690", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form an isosceles triangle.", "code": "def is_isosceles_triangle(a: int, b: int, c: int) -> bool:\n    return a == b or b == c or a == c", "task_id": "677_54a289cc-a712-4609-9cf6-8af51f3ac937", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a scalene triangle.", "code": "def is_scalene_triangle(a: int, b: int, c: int) -> bool:\n    return a != b and b != c and a != c", "task_id": "677_b626e3e0-f7b6-438b-a79d-85b934a461d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form an obtuse triangle.", "code": "def is_obtuse_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "677_8799c1a7-94c6-46c0-b3e1-4868a488f4f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form an acute triangle.", "code": "def is_acute_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "677_6358086c-3645-49e2-be34-19a5846ca339", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid triangle.", "code": "def is_valid_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and a + c > b and b + c > a", "task_id": "677_60307039-64b1-4f92-9df3-7142b2031f81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid polygon.", "code": "def is_valid_polygon(sides: list) -> bool:\n    n = len(sides)\n    if n < 3:\n        return False\n    sides.sort()\n    return sum(sides[:-1]) > sides[-1]", "task_id": "677_94036d9e-aaa1-4023-a557-076d998f9401", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid quadrilateral.", "code": "def is_valid_quadrilateral(a: int, b: int, c: int, d: int) -> bool:\n    sides = [a, b, c, d]\n    sides.sort()\n    return sum(sides[:-1]) > sides[-1]", "task_id": "677_e72e661e-12f5-4773-acab-c56bd645de52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given sides can form a valid parallelogram.", "code": "def is_valid_parallelogram(a: int, b: int, c: int, d: int) -> bool:\n    return a == c and b == d", "task_id": "677_1a23a88d-3d19-4ef9-b18c-7436f13791e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "678_77af7811-2334-4e01-8f93-24b9ee87ffda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "678_2ac9331e-f0e9-4dc3-aa56-a596324fd31c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join([word.capitalize() for word in s.split()])", "task_id": "678_481c5a11-24c6-4d2e-82c4-1926d8fdc2f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "678_22c2337c-4152-49df-96cf-ec81a06f618a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    s = s.replace(' ', '').lower()\n    return s == s[::-1]", "task_id": "678_c3d68ffa-3d4b-4118-903d-dfa2dd54e7e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all digits from a given string.", "code": "def remove_digits(s: str) -> str:\n    return ''.join([char for char in s if not char.isdigit()])", "task_id": "678_7eebe873-2fd5-488a-bfe3-080a865898ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in a given string with underscores.", "code": "def replace_spaces_with_underscore(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "678_c9bbbde4-a336-4253-9545-d7808ca951e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum([1 for char in s if char in vowels])", "task_id": "678_db71fb63-9d09-4023-a604-e736767db259", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all consonants from a given string.", "code": "def remove_consonants(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char in vowels or not char.isalpha()])", "task_id": "678_0ccfee61-ade6-46d9-81cb-030fff4eb15d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to alternate the case of each letter in a given string.", "code": "def alternate_case(s: str) -> str:\n    return ''.join([char.upper() if char.islower() else char.lower() for char in s])", "task_id": "678_e18ea59b-bd27-42b6-bb49-31c09f4c2a37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.", "code": "def is_decreasing(nums):\n    return nums == sorted(nums, reverse=True)", "task_id": "680_d0c4aa2c-912f-4a20-8fe0-1dab0f8e1be0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a non-decreasing trend or not.", "code": "def is_non_decreasing(nums):\n    return all(nums[i] <= nums[i+1] for i in range(len(nums)-1))", "task_id": "680_b1cb0732-b1a5-4b9a-8e5e-00606e9cc5e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a non-increasing trend or not.", "code": "def is_non_increasing(nums):\n    return all(nums[i] >= nums[i+1] for i in range(len(nums)-1))", "task_id": "680_9e3c2ac5-21ec-4b20-8496-dff38b55e0ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a strictly increasing trend or not.", "code": "def is_strictly_increasing(nums):\n    return all(nums[i] < nums[i+1] for i in range(len(nums)-1))", "task_id": "680_08727323-b22e-4a4b-a04c-09eb0eb2e62f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a strictly decreasing trend or not.", "code": "def is_strictly_decreasing(nums):\n    return all(nums[i] > nums[i+1] for i in range(len(nums)-1))", "task_id": "680_0fec99b2-94a9-4c85-b3c5-5f6a1dcf6988", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers has a peak (a number that is greater than its neighbors) or not.", "code": "def has_peak(nums):\n    return any(nums[i] > nums[i-1] and nums[i] > nums[i+1] for i in range(1, len(nums)-1))", "task_id": "680_56578a79-a996-4300-b055-8339a44e1dd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is a palindrome or not.", "code": "def is_palindrome_sequence(nums):\n    return nums == nums[::-1]", "task_id": "680_0ad2fa8c-3148-4715-abe0-808a28be85e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a sequence of numbers is alternating (i.e., each number is different from the previous one) or not.", "code": "def is_alternating(nums):\n    return all(nums[i] != nums[i+1] for i in range(len(nums)-1))", "task_id": "680_f9856633-2da7-4caa-91b5-a03bf74e2280", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all numbers in a sequence are even or not.", "code": "def is_all_even(nums):\n    return all(num % 2 == 0 for num in nums)", "task_id": "680_648d4953-8d3f-48e6-8204-bcb024006f4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all numbers in a sequence are odd or not.", "code": "def is_all_odd(nums):\n    return all(num % 2 != 0 for num in nums)", "task_id": "680_e603dc98-8318-4876-acc5-58b1db100a1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the value of a dictionary by the index of its keys.", "code": "def get_value_by_index(d: dict, index: int):\n    return list(d.values())[index]", "task_id": "679_38e2e591-0fc9-4e90-a1cc-f37ad9d43e95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the key of a dictionary by its value.", "code": "def get_key_by_value(d: dict, value: any):\n    for k, v in d.items():\n        if v == value:\n            return k", "task_id": "679_0f4cc3e2-4c96-4157-870c-e03720d473b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the key of a dictionary by the index of its values.", "code": "def get_key_by_index(d: dict, index: int):\n    return list(d.keys())[index]", "task_id": "679_d45ac7b6-0e20-4288-a288-1fa7463bf84b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the key-value pair of a dictionary by the index of its keys.", "code": "def get_item_by_index(d: dict, index: int):\n    key = list(d.keys())[index]\n    return (key, d[key])", "task_id": "679_d1a6b3f3-6a85-4d2b-a1a5-dd0c4bf1fb78", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the value of a dictionary by a prefix of its key.", "code": "def get_value_by_key_prefix(d: dict, prefix: str):\n    for k in d.keys():\n        if k.startswith(prefix):\n            return d[k]", "task_id": "679_a4f24c2c-1838-4cbd-90ed-93a8e24323ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all keys of a dictionary that contain a given substring.", "code": "def get_keys_containing_substring(d: dict, substring: str):\n    return [k for k in d.keys() if substring in k]", "task_id": "679_8d2fa260-4fa0-4228-b17a-51898222af9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all values of a dictionary whose keys contain a given substring.", "code": "def get_values_containing_substring(d: dict, substring: str):\n    return [v for k, v in d.items() if substring in k]", "task_id": "679_8ade0556-a1c7-4412-88c5-626a0d227a0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the key of a dictionary by the index of its values.", "code": "def get_key_by_value_index(d: dict, index: int):\n    value = list(d.values())[index]\n    for k, v in d.items():\n        if v == value:\n            return k", "task_id": "679_4102f1a5-4d0a-485d-803f-264c3386a8e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the value of a dictionary by a suffix of its key.", "code": "def get_value_by_key_suffix(d: dict, suffix: str):\n    for k in d.keys():\n        if k.endswith(suffix):\n            return d[k]", "task_id": "679_fc9183e3-f8f7-4202-ab80-a3b27df11018", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the key and value of a dictionary by the index of its keys.", "code": "def get_key_value_by_index(d: dict, index: int):\n    key = list(d.keys())[index]\n    return (key, d[key])", "task_id": "679_692117a4-899e-4f65-b77b-644d98763b37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest odd divisor of a number.", "code": "def find_smallest_odd_divisor(n):\n    if n % 2 != 0:\n        return n\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "task_id": "681_7019dde4-9963-4341-8f02-b6d37b8b4f11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest prime divisor of a number.", "code": "def find_largest_prime_divisor(n):\n    def is_prime(x):\n        if x <= 1:\n            return False\n        if x <= 3:\n            return True\n        if x % 2 == 0 or x % 3 == 0:\n            return False\n        i = 5\n        while i * i <= x:\n            if x % i == 0 or x % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    largest_prime = -1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                largest_prime = i\n            if is_prime(n // i):\n                largest_prime = n // i\n        i += 1\n    if is_prime(n):\n        return n\n    return largest_prime", "task_id": "681_ac98447c-cbf2-4732-8edb-dd1a1e95bfff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest even divisor of a number.", "code": "def find_smallest_even_divisor(n):\n    if n % 2 == 0:\n        return 2\n    return -1", "task_id": "681_42a3b5af-8522-4246-abfb-654b72cff849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest divisor of a number greater than one.", "code": "def find_smallest_divisor_greater_than_one(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "task_id": "681_bc18154e-6cda-4ce8-a4f5-dcbc518d8275", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest divisor of a number less than the number itself.", "code": "def find_largest_divisor_less_than_n(n):\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "task_id": "681_a40cfafa-59cc-4d81-8701-ad86225e9aa6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest prime factor of a number.", "code": "def find_smallest_prime_factor(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "task_id": "681_b333134d-fb0b-47bf-80d9-04177e76827c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest odd divisor of a number.", "code": "def find_largest_odd_divisor(n):\n    if n % 2 != 0:\n        return n\n    for i in range(n // 2, 0, -1):\n        if i % 2 != 0 and n % i == 0:\n            return i\n    return 1", "task_id": "681_f478e705-d207-4e6b-b9a4-74efcaa09523", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest divisor of a number that is not one.", "code": "def find_smallest_divisor_not_one(n):\n    if n % 2 == 0:\n        return 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "task_id": "681_595e7a3b-990a-45dc-bb17-0796c61fcc5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest divisor of a number that is not the number itself.", "code": "def find_largest_divisor_not_n(n):\n    for i in range(n // 2, 0, -1):\n        if n % i == 0:\n            return i\n    return 1", "task_id": "681_ba0dd975-3d6c-4f50-9c38-8bf5e7ee4d05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest prime divisor of a number that is greater than two.", "code": "def find_smallest_prime_divisor_greater_than_two(n):\n    if n % 2 == 0:\n        n //= 2\n    i = 3\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 2\n    return n", "task_id": "681_b5dfb712-32d8-4402-bcb0-6f61e1b218d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add two lists element-wise using map and lambda function.", "code": "def add_lists(nums1, nums2):\n  result = map(lambda x, y: x + y, nums1, nums2)\n  return list(result)", "task_id": "682_61c6b49c-b9c2-4968-8fe5-fa038cb267a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the second list from the first list element-wise using map and lambda function.", "code": "def subtract_lists(nums1, nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": "682_a5cabe1f-cac6-4158-acd7-8669792c42f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the first list by the second list element-wise using map and lambda function.", "code": "def divide_lists(nums1, nums2):\n  result = map(lambda x, y: x / y if y != 0 else None, nums1, nums2)\n  return list(result)", "task_id": "682_42916377-fb58-42a5-83c9-17cf37d1c7f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise elements of the first list to the power of the corresponding elements in the second list using map and lambda function.", "code": "def power_lists(nums1, nums2):\n  result = map(lambda x, y: x ** y, nums1, nums2)\n  return list(result)", "task_id": "682_5b1c0952-19f8-41a7-871a-498c44c08957", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the first list by the second list element-wise using map and lambda function.", "code": "def mod_lists(nums1, nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "task_id": "682_d200dd72-ed3e-4c7f-a674-bdf0f123f5d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of corresponding elements from two lists using map and lambda function.", "code": "def max_lists(nums1, nums2):\n  result = map(lambda x, y: max(x, y), nums1, nums2)\n  return list(result)", "task_id": "682_404036d6-544f-4ae2-9770-c72fdf04dd1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of corresponding elements from two lists using map and lambda function.", "code": "def min_lists(nums1, nums2):\n  result = map(lambda x, y: min(x, y), nums1, nums2)\n  return list(result)", "task_id": "682_1ca579d1-21aa-4e35-895f-198cb7cb9e83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate corresponding elements from two lists of strings using map and lambda function.", "code": "def concat_lists(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "682_03da3743-405d-4c77-ae72-160e5215289b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compare corresponding elements from two lists and return a list of booleans indicating if elements in the first list are greater than those in the second list using map and lambda function.", "code": "def compare_lists(nums1, nums2):\n  result = map(lambda x, y: x > y, nums1, nums2)\n  return list(result)", "task_id": "682_d7e7f5f0-f3a4-4548-93b2-22c3584011a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if corresponding elements from two lists are equal using map and lambda function.", "code": "def equal_lists(nums1, nums2):\n  result = map(lambda x, y: x == y, nums1, nums2)\n  return list(result)", "task_id": "682_22276549-6439-42c9-a8fb-8ca0a4ae5b09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "684_c0ae8a66-a8ab-4b52-893f-a8181fd2def1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    words = s.split()\n    return len(words)", "task_id": "684_9488c697-1f39-4ca4-b069-ad0250be41c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique characters in a given string.", "code": "def count_unique_chars(s: str) -> int:\n    return len(set(s))", "task_id": "684_4e2b16ea-631d-429d-aecb-2abffc05ba00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digit characters in a given string.", "code": "def count_digit_occurrences(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count", "task_id": "684_5d3e4640-1951-42a8-b579-866bc3d8b2cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a character in a list of strings.", "code": "def count_char_in_list(lst: list, x: str) -> int:\n    count = 0\n    for string in lst:\n        count += string.count(x)\n    return count", "task_id": "684_b4d553a8-fbbc-4e7b-b58e-7fd1424bfc98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a substring in a given string.", "code": "def count_substring(s: str, sub: str) -> int:\n    return s.count(sub)", "task_id": "684_c43911c0-f9d9-43c0-9a82-237a58e631cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of uppercase letters in a given string.", "code": "def count_uppercase(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "task_id": "684_bd3dc653-8133-4356-9293-e4259b60a930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a given string.", "code": "def count_lowercase(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return count", "task_id": "684_cc2ed9f0-e18d-467c-9207-8b596938231f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in a given string.", "code": "def count_spaces(s: str) -> int:\n    count = 0\n    for char in s:\n        if char == ' ':\n            count += 1\n    return count", "task_id": "684_b98968f7-d1c9-4dad-bd80-0bae049fca82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of punctuation characters in a given string.", "code": "import string\n\ndef count_punctuation(s: str) -> int:\n    count = 0\n    for char in s:\n        if char in string.punctuation:\n            count += 1\n    return count", "task_id": "684_828dc351-bedf-4132-afac-2fa36b0066a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "683_2fc59ca8-c8cc-4d21-98b4-53e5034efac8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "683_cb69bfd4-560b-4b63-b796-6555f7c77556", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "683_5356d2b3-389b-45fc-9559-9d71e659f92a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other or not.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "683_5cefb7c3-892d-4a06-8611-b42617c2ecb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "683_fa2cae00-f168-46d9-8471-e5a86360c1aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a perfect square or not.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5)**2 == n", "task_id": "683_eef135c1-57b0-4d24-a4b3-f8aded9bb250", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "683_84b7c793-e086-4920-a1ee-6100b690e956", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "683_0e02415a-ca13-454f-9fc8-386d1b249e3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "683_40965c22-0dbd-4ef9-a808-9615caaea09c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is an Armstrong number or not.", "code": "def is_armstrong(n: int) -> bool:\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)", "task_id": "683_f22a0141-fb28-467b-9cc3-e6af704ab3ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from the given list.", "code": "def unique_elements(lst):\n    return list(set(lst))", "task_id": "686_d3ccf9f0-ec74-485d-9e3e-87ede13dd6ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in the given list.", "code": "def sum_elements(lst):\n    return sum(lst)", "task_id": "686_719fff21-21a4-4df2-a254-d34a8da5ac49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the maximum element in the given list.", "code": "def max_element(lst):\n    return max(lst)", "task_id": "686_e4bc5b15-8d9d-49e0-a248-865d848b41c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the minimum element in the given list.", "code": "def min_element(lst):\n    return min(lst)", "task_id": "686_f28fdf04-3e55-4937-b489-d510f1eddce2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the given list in reverse order.", "code": "def reverse_list(lst):\n    return lst[::-1]", "task_id": "686_d52eb89e-f840-441a-ac61-fcef227972fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a given element in the list.", "code": "def count_occurrences(lst, x):\n    return lst.count(x)", "task_id": "686_443fa75c-09cf-4982-8f22-12826975a02c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from the given list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "686_eb94a5d1-e75c-4afa-a76f-30e85d950d4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the second largest element in the given list.", "code": "def second_largest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2]", "task_id": "686_5e00137b-e773-43c4-ba3d-d43f8d8758b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given list is sorted in ascending order.", "code": "def is_sorted(lst):\n    return lst == sorted(lst)", "task_id": "686_30d4ed12-bd0a-43a9-828e-a2b81f57a018", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists into one.", "code": "def merge_lists(lst1, lst2):\n    return lst1 + lst2", "task_id": "686_b97cd3ed-27ab-44fd-8693-367e4a2bf182", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the sum of two complex numbers represented by their real and imaginary parts.", "code": "def sum_of_complex(a, b, c, d):\n  cn1 = complex(a, b)\n  cn2 = complex(c, d)\n  return cn1 + cn2", "task_id": "688_5e084140-5ba8-4950-9a65-165ae05636c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the product of two complex numbers represented by their real and imaginary parts.", "code": "def product_of_complex(a, b, c, d):\n  cn1 = complex(a, b)\n  cn2 = complex(c, d)\n  return cn1 * cn2", "task_id": "688_6ac4c81e-969e-407b-9c9f-23cba607d62e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the conjugate of a complex number represented by its real and imaginary parts.", "code": "def conjugate_of_complex(a, b):\n  cn = complex(a, b)\n  return cn.conjugate()", "task_id": "688_7f57b96e-6ef2-4579-92dc-d16d3a55c65a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the phase of a complex number represented by its real and imaginary parts.", "code": "import cmath\n\ndef phase_of_complex(a, b):\n  cn = complex(a, b)\n  return cmath.phase(cn)", "task_id": "688_5d769827-6483-4926-9c18-7bb38c7432da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the real part of a complex number represented by its real and imaginary parts.", "code": "def real_part_of_complex(a, b):\n  cn = complex(a, b)\n  return cn.real", "task_id": "688_c76df2f1-e668-47d4-ae5d-c18a579d5474", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the imaginary part of a complex number represented by its real and imaginary parts.", "code": "def imaginary_part_of_complex(a, b):\n  cn = complex(a, b)\n  return cn.imag", "task_id": "688_8d962eac-862f-4f56-b0ac-523a51b2dbf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the polar coordinates (r, theta) of a complex number represented by its real and imaginary parts.", "code": "import cmath\n\ndef polar_coordinates_of_complex(a, b):\n  cn = complex(a, b)\n  return cmath.polar(cn)", "task_id": "688_aff32fa7-15ef-47cd-9a2f-6b1f5df99dbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the exponential of a complex number represented by its real and imaginary parts.", "code": "import cmath\n\ndef exp_of_complex(a, b):\n  cn = complex(a, b)\n  return cmath.exp(cn)", "task_id": "688_8cea17b3-e049-43f0-b157-4d975581cee2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the natural logarithm of a complex number represented by its real and imaginary parts.", "code": "import cmath\n\ndef log_of_complex(a, b):\n  cn = complex(a, b)\n  return cmath.log(cn)", "task_id": "688_4f3e9e2b-1c13-410b-b7f8-3d43b0e35402", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the square root of a complex number represented by its real and imaginary parts.", "code": "import cmath\n\ndef sqrt_of_complex(a, b):\n  cn = complex(a, b)\n  return cmath.sqrt(cn)", "task_id": "688_4cb17a0d-983e-4105-b646-f05a3309284e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two integers using recursion.", "code": "def recur_lcm(a, b):\n    def gcd(x, y):\n        if y == 0:\n            return x\n        else:\n            return gcd(y, x % y)\n    return abs(a * b) // gcd(a, b)", "task_id": "687_884d9aec-b892-443e-aa62-a413847b4472", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first n natural numbers using recursion.", "code": "def recur_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return n + recur_sum(n-1)", "task_id": "687_f903187c-a2c2-40bc-9865-98f865f1d425", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a number using recursion.", "code": "def recur_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * recur_factorial(n-1)", "task_id": "687_ce227576-4ac1-4a08-b9c5-f10f05ecfc58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number using recursion.", "code": "def recur_fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return recur_fibonacci(n-1) + recur_fibonacci(n-2)", "task_id": "687_9df65171-394c-455f-8489-31d4d954ac31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the power of a number using recursion.", "code": "def recur_power(base, exp):\n    if exp == 0:\n        return 1\n    else:\n        return base * recur_power(base, exp-1)", "task_id": "687_189568fa-5dee-4c26-b96d-1a6dd839d99b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a string using recursion.", "code": "def recur_reverse_string(s):\n    if len(s) == 0:\n        return s\n    else:\n        return s[-1] + recur_reverse_string(s[:-1])", "task_id": "687_226e0d85-d136-47e9-920c-0b4dcebbd76d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of digits in an integer using recursion.", "code": "def recur_count_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return 1 + recur_count_digits(n // 10)", "task_id": "687_4e35e99a-68d5-4a36-83a0-13a3a0d51e19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of an integer using recursion.", "code": "def recur_sum_digits(n):\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + recur_sum_digits(n // 10)", "task_id": "687_7afdf27f-400e-4ce0-a58c-b4b8a68d0f6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome using recursion.", "code": "def recur_is_palindrome(s):\n    if len(s) <= 1:\n        return True\n    elif s[0] != s[-1]:\n        return False\n    else:\n        return recur_is_palindrome(s[1:-1])", "task_id": "687_11d962d8-0df9-4281-92e4-347b26d20e57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a list using recursion.", "code": "def recur_find_min(arr):\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return min(arr[0], recur_find_min(arr[1:]))", "task_id": "687_d315393f-3090-4a5e-ad47-7638c1976e24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even prime numbers between 1 to n.", "code": "def sum_of_even_primes(n):\n    if n < 2:\n        return 0\n    return 2 if n >= 2 else 0", "task_id": "685_4fd2311f-6019-4328-99e3-75a532d8eee8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime numbers between 1 to n.", "code": "def count_primes(n):\n    if n < 2:\n        return 0\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    return sum(prime[2:])", "task_id": "685_05b7ae37-3c77-41c9-b2dd-4f552709933d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of all prime numbers between 1 to n.", "code": "def sum_of_primes_digits(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    total_sum = 0\n    for num in range(2, n + 1):\n        if is_prime(num):\n            total_sum += sum(int(digit) for digit in str(num))\n    return total_sum", "task_id": "685_19c3eb26-4b31-4d66-813c-885fbef3391d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers between a and b.", "code": "def sum_of_primes_in_range(a, b):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    total_sum = 0\n    for num in range(a, b + 1):\n        if is_prime(num):\n            total_sum += num\n    return total_sum", "task_id": "685_c43cb6d6-e588-4b74-91c4-1ce5f62ab97d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of prime numbers between 1 to n.", "code": "def product_of_primes(n):\n    if n < 2:\n        return 1\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    product = 1\n    for i in range(2, n + 1):\n        if prime[i]:\n            product *= i\n    return product", "task_id": "685_5435a880-2ede-4f75-9c60-7d73cbab7f58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of non-prime numbers between 1 to n.", "code": "def sum_of_non_primes(n):\n    if n < 2:\n        return sum(range(1, n + 1))\n    prime = [True] * (n + 1)\n    p = 2\n    while p * p <= n:\n        if prime[p]:\n            for i in range(p * p, n + 1, p):\n                prime[i] = False\n        p += 1\n    total_sum = sum(range(1, n + 1))\n    prime_sum = sum(i for i in range(2, n + 1) if prime[i])\n    return total_sum - prime_sum", "task_id": "685_a158e8a8-7fef-4ade-8ca3-cc0af4808883", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements in an array whose indices are prime numbers.", "code": "def sum_of_prime_indices(arr):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    total_sum = 0\n    for index in range(len(arr)):\n        if is_prime(index):\n            total_sum += arr[index]\n    return total_sum", "task_id": "685_551e95d2-281d-4744-a637-dcabd68aad43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime factors of a given number n.", "code": "def sum_of_prime_factors(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    total_sum = 0\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            total_sum += i\n    return total_sum", "task_id": "685_bde35fe5-b32c-4737-931a-090cbc79d32a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers less than n.", "code": "def sum_of_primes_below(n):\n    if n <= 2:\n        return 0\n    prime = [True] * n\n    p = 2\n    while p * p < n:\n        if prime[p]:\n            for i in range(p * p, n, p):\n                prime[i] = False\n        p += 1\n    return sum(i for i in range(2, n) if prime[i])", "task_id": "685_37fd0dd5-91f8-4162-a9f4-df1809c1da65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime numbers in a given list.", "code": "def sum_of_primes_in_list(lst):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return sum(x for x in lst if is_prime(x))", "task_id": "685_e1a8c3c0-c9bf-49ab-8c2a-c8012de627c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum consecutive numbers of a given list.", "code": "def sum_consecutive_nums(nums):\n    result = [a + b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_ba0cf95d-54a9-44a2-9433-6c2234765a1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference between consecutive numbers of a given list.", "code": "def diff_consecutive_nums(nums):\n    result = [b - a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_ffa10c71-77c0-4470-9c32-52d2104c2c95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide consecutive numbers of a given list.", "code": "def div_consecutive_nums(nums):\n    result = [b / a for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_1395b955-c48c-4596-a205-1b4b87027c4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate consecutive strings of a given list.", "code": "def concat_consecutive_strings(strings):\n    result = [a + b for a, b in zip(strings[:-1], strings[1:])]\n    return result", "task_id": "690_9666806f-9eb0-4a7a-9ce7-c0ec3c022b0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of consecutive numbers of a given list.", "code": "def max_consecutive_nums(nums):\n    result = [max(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_7036de60-86df-4fdd-96a8-48eeac45dd3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of consecutive numbers of a given list.", "code": "def min_consecutive_nums(nums):\n    result = [min(a, b) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_87d48519-5394-46c3-99d0-4c11a71fd628", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of consecutive numbers of a given list.", "code": "def avg_consecutive_nums(nums):\n    result = [(a + b) / 2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_ffc290d4-6290-466b-bcb4-7a1e3741784e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of consecutive numbers of a given list.", "code": "def prod_consecutive_nums(nums):\n    result = [a * b for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_61300657-55f4-475d-b7f9-8af999a4ab90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between consecutive numbers of a given list.", "code": "def abs_diff_consecutive_nums(nums):\n    result = [abs(b - a) for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_2e4468b9-0837-4b53-ba6b-a6672538fb85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of consecutive numbers of a given list.", "code": "def sum_squares_consecutive_nums(nums):\n    result = [a**2 + b**2 for a, b in zip(nums[:-1], nums[1:])]\n    return result", "task_id": "690_bcea4134-fc74-4624-ad36-6ff3f59e610e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of the factorial of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    import math\n    factorial = math.factorial(n)\n    return sum(int(digit) for digit in str(factorial))", "task_id": "692_3b11f989-fb38-49a4-bed6-d7ab44dfe424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in the factorial of a given number.", "code": "def count_trailing_zeros(n: int) -> int:\n    count = 0\n    i = 5\n    while n // i >= 1:\n        count += n // i\n        i *= 5\n    return count", "task_id": "692_76794604-dc43-4a14-9bde-7fec0e1fa24e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the factorial of a given number is even.", "code": "def is_factorial_even(n: int) -> bool:\n    return n > 0", "task_id": "692_59637a7e-3a83-4b5c-af6d-ebe5d4dae498", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the even digits of the factorial of a given number.", "code": "def sum_of_even_digits(n: int) -> int:\n    import math\n    factorial = math.factorial(n)\n    return sum(int(digit) for digit in str(factorial) if int(digit) % 2 == 0)", "task_id": "692_32c581d8-b3ec-4411-8424-5cc1c6519ba4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of the factorial of a given number.", "code": "def product_of_digits(n: int) -> int:\n    import math\n    factorial = math.factorial(n)\n    product = 1\n    for digit in str(factorial):\n        product *= int(digit)\n    return product", "task_id": "692_7fbd853a-9e0c-4230-ae4f-08499aaef368", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number modulo another given number.", "code": "def factorial_modulo(n: int, m: int) -> int:\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial = (factorial * i) % m\n    return factorial", "task_id": "692_7081d358-4998-4022-a89b-2a0d8753bcaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of the factorial of a given number.", "code": "def sum_of_factorial_digits(n: int) -> int:\n    import math\n    factorial = math.factorial(n)\n    return sum(int(digit) for digit in str(factorial))", "task_id": "692_5031efd5-590a-4007-9f17-c8439a696d87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in the factorial of a given number.", "code": "def factorial_digit_count(n: int) -> int:\n    import math\n    factorial = math.factorial(n)\n    return len(str(factorial))", "task_id": "692_77d1c8da-b897-4ba7-9d74-867b3fd210a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the factorial of a given number is a prime number.", "code": "def is_factorial_prime(n: int) -> bool:\n    import math\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n    factorial = math.factorial(n)\n    return is_prime(factorial)", "task_id": "692_50be4418-16cb-4c8b-969e-365b36d1d530", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the digits of the factorial of a given number in reverse order.", "code": "def reverse_factorial_digits(n: int) -> str:\n    import math\n    factorial = math.factorial(n)\n    return str(factorial)[::-1]", "task_id": "692_76b4aea6-b264-43ff-bb30-90dedcf36252", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(text: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in text if char not in vowels])", "task_id": "693_62284fe2-54f6-4311-b15b-3f83f8ec33c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all digits in a string with a '#' symbol.", "code": "def replace_digits(text: str) -> str:\n    return ''.join(['#' if char.isdigit() else char for char in text])", "task_id": "693_9d445e9c-c308-470e-9ab6-f1a6e6379637", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a string.", "code": "def reverse_words(text: str) -> str:\n    return ' '.join(text.split()[::-1])", "task_id": "693_b8214aa0-500f-471e-9677-b5f71ceff8a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(text: str) -> str:\n    return ' '.join([word.capitalize() for word in text.split()])", "task_id": "693_26471e9e-9f0c-41dd-9335-60ef49a20273", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation from a string.", "code": "import string\n\ndef remove_punctuation(text: str) -> str:\n    return text.translate(str.maketrans('', '', string.punctuation))", "task_id": "693_b3596893-6914-4d9b-9557-946dd11a2a02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(text: str) -> int:\n    return len(text.split())", "task_id": "693_8bff7d22-f4d4-492d-aec7-e05abfd69ec2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with underscores.", "code": "def replace_spaces_with_underscore(text: str) -> str:\n    return text.replace(' ', '_')", "task_id": "693_60e8ce3e-d8cf-4c56-9e54-9084a2ce91f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a string.", "code": "def find_longest_word(text: str) -> str:\n    words = text.split()\n    return max(words, key=len)", "task_id": "693_fcbf3e23-586b-4216-b315-b9ebe52fe33a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a string.", "code": "def remove_duplicates(text: str) -> str:\n    seen = set()\n    return ''.join([char for char in text if not (char in seen or seen.add(char))])", "task_id": "693_f2215d05-dc7e-42b7-995c-a4acbbbf7033", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap the case of each character in a string.", "code": "def swap_case(text: str) -> str:\n    return text.swapcase()", "task_id": "693_d9bd1a57-e6b8-4f0d-9872-b79700674728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the unique values from the given dictionary values.", "code": "def sum_unique(test_dict):\n  res = sum({ele for val in test_dict.values() for ele in val})\n  return res", "task_id": "694_3e2400d6-93cb-4096-9af3-06d55f535eab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique values from the given dictionary values.", "code": "def count_unique(test_dict):\n  res = len({ele for val in test_dict.values() for ele in val})\n  return res", "task_id": "694_fd9b11e6-896c-4d45-ab89-9a92eecbd97e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique values from the given dictionary values and return them as a sorted list.", "code": "def unique_sorted(test_dict):\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\n  return res", "task_id": "694_8c350b46-af9e-4f20-8152-83afd8567e69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique values from the given dictionary values and return a list of their lengths.", "code": "def unique_values_length(test_dict):\n  res = [len(str(ele)) for ele in {ele for val in test_dict.values() for ele in val}]\n  return res", "task_id": "694_3ec4bbc8-0707-490d-8bb9-4cad5992b83a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique string values from the given dictionary values and return them in uppercase.", "code": "def unique_values_upper(test_dict):\n  res = [str(ele).upper() for ele in {ele for val in test_dict.values() for ele in val} if isinstance(ele, str)]\n  return res", "task_id": "694_654f3d1a-eecd-4d42-9494-83bd5ba2a5b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of unique values from the given dictionary values and return a dictionary with the unique values as keys and their counts as values.", "code": "def unique_values_count(test_dict):\n  from collections import Counter\n  res = Counter([ele for val in test_dict.values() for ele in val])\n  return dict(res)", "task_id": "694_eb6e511f-3f42-421d-9893-349ba2dcb89a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique even values from the given dictionary values and return them as a list.", "code": "def unique_values_even(test_dict):\n  res = [ele for ele in {ele for val in test_dict.values() for ele in val} if isinstance(ele, int) and ele % 2 == 0]\n  return res", "task_id": "694_e3607347-5af5-4d4b-924d-d567ff8c76fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique values from the given dictionary values and return them in reverse order.", "code": "def unique_values_reverse(test_dict):\n  res = list({ele for val in test_dict.values() for ele in val})\n  res.reverse()\n  return res", "task_id": "694_559015c5-63c1-49c0-ba09-e4b687a3a547", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique integer values from the given dictionary values and return their squares.", "code": "def unique_values_squared(test_dict):\n  res = [ele**2 for ele in {ele for val in test_dict.values() for ele in val} if isinstance(ele, int)]\n  return res", "task_id": "694_511de4f4-83a9-4026-9efa-2c102bad06dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract unique string values from the given dictionary values and return them concatenated into a single string.", "code": "def unique_values_concat(test_dict):\n  res = ''.join([str(ele) for ele in {ele for val in test_dict.values() for ele in val} if isinstance(ele, str)])\n  return res", "task_id": "694_3340e458-493d-42b0-a5be-9936db1d114c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group words by their lengths in the given list of words.", "code": "from itertools import groupby\n\ndef group_by_length(words):\n    words.sort(key=len)\n    res = {}\n    for length, group in groupby(words, key=len):\n        res[length] = list(group)\n    return res", "task_id": "691_bc9dc566-c249-48a1-9882-c4d7b44567bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group words by their first letter in the given list of words.", "code": "from itertools import groupby\n\ndef group_by_first_letter(words):\n    words.sort(key=lambda x: x[0])\n    res = {}\n    for letter, group in groupby(words, key=lambda x: x[0]):\n        res[letter] = list(group)\n    return res", "task_id": "691_4073fd51-df89-411e-b029-630c22f8d192", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by their parity (even or odd) in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_parity(numbers):\n    numbers.sort(key=lambda x: x % 2)\n    res = {}\n    for parity, group in groupby(numbers, key=lambda x: x % 2):\n        res['even' if parity == 0 else 'odd'] = list(group)\n    return res", "task_id": "691_8cfc8bbd-738c-44bb-8b4e-2e8da5fafcdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group words by whether they start with a vowel or a consonant in the given list of words.", "code": "from itertools import groupby\n\ndef group_by_vowel_consonant(words):\n    words.sort(key=lambda x: x[0].lower() in 'aeiou')\n    res = {}\n    for is_vowel, group in groupby(words, key=lambda x: x[0].lower() in 'aeiou'):\n        res['vowel' if is_vowel else 'consonant'] = list(group)\n    return res", "task_id": "691_d5543d57-62ec-4fc6-bed2-fb4b8a771a4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by their sign (positive, negative, or zero) in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_sign(numbers):\n    numbers.sort(key=lambda x: (x > 0) - (x < 0))\n    res = {}\n    for sign, group in groupby(numbers, key=lambda x: (x > 0) - (x < 0)):\n        res['positive' if sign == 1 else 'negative' if sign == -1 else 'zero'] = list(group)\n    return res", "task_id": "691_5ada2a13-48c8-47d3-93d3-f71896e80824", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by their last digit in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_last_digit(numbers):\n    numbers.sort(key=lambda x: x % 10)\n    res = {}\n    for last_digit, group in groupby(numbers, key=lambda x: x % 10):\n        res[last_digit] = list(group)\n    return res", "task_id": "691_97c27093-ceaa-4713-9910-afd6ba9754cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by their first digit in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_first_digit(numbers):\n    numbers.sort(key=lambda x: str(x)[0])\n    res = {}\n    for first_digit, group in groupby(numbers, key=lambda x: str(x)[0]):\n        res[int(first_digit)] = list(group)\n    return res", "task_id": "691_669ab0ff-2c3a-48f4-ab6f-44c72fb368d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group words by their length and first letter in the given list of words.", "code": "from itertools import groupby\n\ndef group_by_length_and_first_letter(words):\n    words.sort(key=lambda x: (len(x), x[0]))\n    res = {}\n    for key, group in groupby(words, key=lambda x: (len(x), x[0])):\n        res[key] = list(group)\n    return res", "task_id": "691_eec996c0-4252-45be-8b6d-23389af8ecae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by the sum of their digits in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_sum_of_digits(numbers):\n    numbers.sort(key=lambda x: sum(int(digit) for digit in str(x)))\n    res = {}\n    for sum_digits, group in groupby(numbers, key=lambda x: sum(int(digit) for digit in str(x))):\n        res[sum_digits] = list(group)\n    return res", "task_id": "691_07d67b5b-07ae-4e5a-906c-a362b553e0a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group numbers by their divisibility by a given divisor in the given list of numbers.", "code": "from itertools import groupby\n\ndef group_by_divisibility(numbers, divisor):\n    numbers.sort(key=lambda x: x % divisor == 0)\n    res = {}\n    for divisible, group in groupby(numbers, key=lambda x: x % divisor == 0):\n        res[divisible] = list(group)\n    return res", "task_id": "691_6836e8c4-690c-4684-a070-a70b189e0e80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if both tuples have the same length.", "code": "def check_equal_length(tup1, tup2):\n  return len(tup1) == len(tup2)", "task_id": "695_c244c0a3-6fab-40a9-b121-30e1b5a7c051", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any element of the second tuple is greater than its corresponding index in the first tuple.", "code": "def check_any_greater(tup1, tup2):\n  return any(x < y for x, y in zip(tup1, tup2))", "task_id": "695_a0ae5c72-5096-4c97-8b92-9d1155c789b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the first tuple are equal to their corresponding elements in the second tuple.", "code": "def check_all_equal(tup1, tup2):\n  return all(x == y for x, y in zip(tup1, tup2))", "task_id": "695_44d3d550-347d-464f-803c-05c850ec504a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the sum of elements in the second tuple is greater than the sum of elements in the first tuple.", "code": "def check_sum_greater(tup1, tup2):\n  return sum(tup2) > sum(tup1)", "task_id": "695_9a6d49b9-c98a-4430-b1c8-09b28ef356ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the product of elements in the second tuple is greater than the product of elements in the first tuple.", "code": "def check_product_greater(tup1, tup2):\n  from functools import reduce\n  import operator\n  product1 = reduce(operator.mul, tup1, 1)\n  product2 = reduce(operator.mul, tup2, 1)\n  return product2 > product1", "task_id": "695_9a7c9944-8834-4761-9164-b29a9b9e3b69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the second tuple is the reverse of the first tuple.", "code": "def check_reverse_equal(tup1, tup2):\n  return tup1 == tup2[::-1]", "task_id": "695_0b850d4d-131d-4010-a413-4ae278a96f9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are odd.", "code": "def check_all_odd(tup):\n  return all(x % 2 != 0 for x in tup)", "task_id": "695_1925a7b0-fc2c-44ba-8a56-15b75c505462", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are positive.", "code": "def check_all_positive(tup):\n  return all(x > 0 for x in tup)", "task_id": "695_5135aecd-35de-4e2e-aea2-3769cfd3a509", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any element in the tuple is negative.", "code": "def check_any_negative(tup):\n  return any(x < 0 for x in tup)", "task_id": "695_512dff6a-dc83-4e4e-91fe-0e0dfad17c49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are unique.", "code": "def check_all_unique(tup):\n  return len(tup) == len(set(tup))", "task_id": "695_bb815aa9-525c-47f3-b2ca-766a7c016d7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and sum the corresponding elements.", "code": "def zip_and_sum(list1, list2):\n    return [[a + b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_48982d2d-f128-45a1-b6ad-e72c886e4dd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and multiply the corresponding elements.", "code": "def zip_and_multiply(list1, list2):\n    return [[a * b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_b6d0ff73-cef7-4fca-9de5-5b75d9ec48df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and concatenate the corresponding string elements.", "code": "def zip_and_concatenate(list1, list2):\n    return [[str(a) + str(b) for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_fefa8f90-d0b7-4565-8b10-f838694ae6ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and find the maximum of the corresponding elements.", "code": "def zip_and_find_max(list1, list2):\n    return [[max(a, b) for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_353ed60f-d159-42d7-a294-3124a275e100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and find the minimum of the corresponding elements.", "code": "def zip_and_find_min(list1, list2):\n    return [[min(a, b) for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_d9e5511b-9978-4240-af51-695475d44e21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and subtract the corresponding elements of the second list from the first list.", "code": "def zip_and_subtract(list1, list2):\n    return [[a - b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_35a594b5-b7aa-4be2-a90d-cb1c82a83cb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and divide the corresponding elements of the first list by the second list.", "code": "def zip_and_divide(list1, list2):\n    return [[a / b if b != 0 else None for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_8870d12e-3258-4f00-a9ca-18072dc184a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and find the modulo of the corresponding elements of the first list by the second list.", "code": "def zip_and_modulo(list1, list2):\n    return [[a % b if b != 0 else None for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_a11266b4-244d-4e72-9014-61de8193cd21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and check if the corresponding elements of the first list are greater than the second list.", "code": "def zip_and_greater_than(list1, list2):\n    return [[a > b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_8867fac6-1ec0-49a8-9141-420130c1d827", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to zip two given lists of lists and check if the corresponding elements of the first list are equal to the second list.", "code": "def zip_and_equal(list1, list2):\n    return [[a == b for a, b in zip(sub1, sub2)] for sub1, sub2 in zip(list1, list2)]", "task_id": "696_6a9e3870-414f-4556-bbfa-efd39b49f8a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of odd elements in the given list using lambda function.", "code": "def count_odd(array_nums):\n    count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\n    return count_odd", "task_id": "697_1820ba90-8787-4a73-b6f8-ced87721c5bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of positive elements in the given list using lambda function.", "code": "def count_positive(array_nums):\n    count_positive = len(list(filter(lambda x: (x > 0) , array_nums)))\n    return count_positive", "task_id": "697_2a46f4fb-f709-4a64-893d-56afddd7c8d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of negative elements in the given list using lambda function.", "code": "def count_negative(array_nums):\n    count_negative = len(list(filter(lambda x: (x < 0) , array_nums)))\n    return count_negative", "task_id": "697_df1254dd-8e30-4887-9d97-a71cc81ea071", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of elements divisible by 5 in the given list using lambda function.", "code": "def count_divisible_by_five(array_nums):\n    count_divisible_by_five = len(list(filter(lambda x: (x % 5 == 0) , array_nums)))\n    return count_divisible_by_five", "task_id": "697_a8b3a5b6-fcc7-4b47-9e48-f42abd6c5c62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of elements greater than 10 in the given list using lambda function.", "code": "def count_greater_than_ten(array_nums):\n    count_greater_than_ten = len(list(filter(lambda x: (x > 10) , array_nums)))\n    return count_greater_than_ten", "task_id": "697_17b5f851-107b-4b16-9a92-d61ec87646dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of elements less than 0 in the given list using lambda function.", "code": "def count_less_than_zero(array_nums):\n    count_less_than_zero = len(list(filter(lambda x: (x < 0) , array_nums)))\n    return count_less_than_zero", "task_id": "697_227bf77c-c4e9-490e-b7b8-cb29abff0086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of strings with odd length in the given list using lambda function.", "code": "def count_odd_length_strings(array_strs):\n    count_odd_length_strings = len(list(filter(lambda x: (len(x) % 2 != 0) , array_strs)))\n    return count_odd_length_strings", "task_id": "697_47499e46-12e0-4f15-956f-e78839897375", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of strings with even length in the given list using lambda function.", "code": "def count_even_length_strings(array_strs):\n    count_even_length_strings = len(list(filter(lambda x: (len(x) % 2 == 0) , array_strs)))\n    return count_even_length_strings", "task_id": "697_0b522f33-f6c7-4d43-93de-de15e6c941de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of palindromic strings in the given list using lambda function.", "code": "def count_palindromes(array_strs):\n    count_palindromes = len(list(filter(lambda x: (x == x[::-1]) , array_strs)))\n    return count_palindromes", "task_id": "697_2e6e8ed7-202f-4538-93ae-f0c7db6d6870", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find number of strings that are fully uppercase in the given list using lambda function.", "code": "def count_uppercase_strings(array_strs):\n    count_uppercase_strings = len(list(filter(lambda x: (x.isupper()) , array_strs)))\n    return count_uppercase_strings", "task_id": "697_20855ab4-ab65-4623-95b0-25f09d60811a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element.", "code": "def max_jumps(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('-inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('-inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('-inf')):\n\t\t\t\tjumps[i] = max(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_0dc4a22e-7107-452f-8890-55cfedc3dc7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, there are obstacles at certain indices which cannot be stepped on.", "code": "def min_jumps_with_obstacles(arr, n, obstacles):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')) and (i not in obstacles):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_5bdb9969-4c90-4a4a-9aef-5326117ade51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, each jump incurs a penalty which needs to be added to the total number of jumps.", "code": "def min_jumps_with_penalty(arr, n, penalty):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1 + penalty)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_81ed2f3a-6c5f-4eab-a043-216e7f678194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, each jump provides a bonus which needs to be subtracted from the total number of jumps.", "code": "def min_jumps_with_bonus(arr, n, bonus):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1 - bonus)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_b4ad6496-c404-4307-afa1-c444f16f53b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, there is a restriction on the maximum number of jumps that can be made.", "code": "def min_jumps_with_restriction(arr, n, restriction):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')) and (jumps[j] < restriction):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_e8dbc43a-ebe6-4f33-9f28-15c5e1eed272", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, every 'skip' number of jumps, one jump can be skipped.", "code": "def min_jumps_with_skip(arr, n, skip):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tif jumps[j] % skip == 0:\n\t\t\t\t\tjumps[i] = min(jumps[i], jumps[j])\n\t\t\t\telse:\n\t\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_ed0369cb-0e05-46a6-bc0a-67fd2d708f07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, every jump can be doubled once.", "code": "def min_jumps_with_double_jump(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\tif (i <= j + 2 * arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_b8e02a96-d2d9-4573-95cf-ec660a954734", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, you can make one reverse jump.", "code": "def min_jumps_with_reverse(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\treverse_used = False\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\t\t\tif not reverse_used and (i >= j - arr[j]) and (jumps[j] != float('inf')):\n\t\t\t\treverse_used = True\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\treturn jumps[n-1]", "task_id": "689_83a65a4b-d756-4d9c-ba6a-597e6c9214e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, each jump consumes a certain amount of energy.", "code": "def min_jumps_with_energy(arr, n, energy):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')) and (energy > 0):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tenergy -= 1\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_a86fc313-0827-436c-9180-a612c037f4eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. Additionally, each jump can randomly increase or decrease by one step.", "code": "import random\n\ndef min_jumps_with_random(arr, n):\n\tjumps = [0 for i in range(n)]\n\tif (n == 0) or (arr[0] == 0):\n\t\treturn float('inf')\n\tjumps[0] = 0\n\tfor i in range(1, n):\n\t\tjumps[i] = float('inf')\n\t\tfor j in range(i):\n\t\t\tif (i <= j + arr[j] + random.choice([-1, 0, 1])) and (jumps[j] != float('inf')):\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\n\t\t\t\tbreak\n\treturn jumps[n-1]", "task_id": "689_d623c614-35b8-4770-bff7-bb9277200a81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the sum of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_sum(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: ele[0] + ele[1])}\n    return res", "task_id": "698_4050a0ce-539a-460c-bb47-a40cf337f35a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the difference of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_difference(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: ele[0] - ele[1])}\n    return res", "task_id": "698_b5acfd34-c3be-4113-a1ee-a4b8d36ea389", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the maximum value in tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_max_key(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: max(ele))}\n    return res", "task_id": "698_122102d1-2127-4506-9af8-77bee439c1af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the minimum value in tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_min_key(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: min(ele))}\n    return res", "task_id": "698_b0f0a966-3edb-42a0-a120-5496fd3ac70c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the length of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_length_of_keys(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: len(ele))}\n    return res", "task_id": "698_1db7e7a8-4248-4de8-8603-67071b5b4f9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the first element of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_first_element(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: ele[0])}\n    return res", "task_id": "698_a687839d-f9ff-4a5e-be37-15fe8d40008b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the second element of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_second_element(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: ele[1])}\n    return res", "task_id": "698_c4e25827-1e2c-40a4-be26-ab00dd5c4a58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the absolute difference of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_abs_difference(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: abs(ele[0] - ele[1]))}\n    return res", "task_id": "698_b74d352b-eca6-4d3b-86ec-d2554b39c323", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the product of the squares of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_product_of_squares(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: (ele[0]**2) * (ele[1]**2))}\n    return res", "task_id": "698_77e8f3be-3cb3-43d4-8e89-2c893c811413", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort dictionary items by the sum of the squares of tuple keys for the given dictionary with tuple keys.", "code": "def sort_dict_by_sum_of_squares(test_dict):\n    res = {key: test_dict[key] for key in sorted(test_dict.keys(), key=lambda ele: (ele[0]**2) + (ele[1]**2))}\n    return res", "task_id": "698_1f02c561-eb16-435d-b97e-f418cba8b346", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in a list.", "code": "def count_even_numbers(li):\n\tctr = 0\n\tfor x in li:\n\t\tif x % 2 == 0:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_c95db8d8-62de-438c-a745-e24d230631ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of odd numbers in a list.", "code": "def count_odd_numbers(li):\n\tctr = 0\n\tfor x in li:\n\t\tif x % 2 != 0:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_03b8ac41-6833-4129-953f-9cb9b3abc7f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in a list.", "code": "def count_positive_numbers(li):\n\tctr = 0\n\tfor x in li:\n\t\tif x > 0:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_5bc2d321-4504-4c9f-8026-b761b75c2568", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of negative numbers in a list.", "code": "def count_negative_numbers(li):\n\tctr = 0\n\tfor x in li:\n\t\tif x < 0:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_cb75c39d-fca0-4d24-8a71-7a849373b331", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in a list which are divisible by a given number k.", "code": "def count_numbers_divisible_by_k(li, k):\n\tctr = 0\n\tfor x in li:\n\t\tif x % k == 0:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_78602bb4-430f-40f0-8f42-0cb2cb82384d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n\tvowels = 'aeiouAEIOU'\n\tctr = 0\n\tfor char in s:\n\t\tif char in vowels:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_1ff21f36-f3c9-4577-a50b-71d13f519dbc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of consonants in a given string.", "code": "def count_consonants(s):\n\tvowels = 'aeiouAEIOU'\n\tctr = 0\n\tfor char in s:\n\t\tif char.isalpha() and char not in vowels:\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_c4af56e1-cfe1-47df-8658-70625133ac3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in a given string.", "code": "def count_uppercase_letters(s):\n\tctr = 0\n\tfor char in s:\n\t\tif char.isupper():\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_79d7deff-86e3-4536-a1da-aa745a18bde0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of lowercase letters in a given string.", "code": "def count_lowercase_letters(s):\n\tctr = 0\n\tfor char in s:\n\t\tif char.islower():\n\t\t\tctr += 1\n\treturn ctr", "task_id": "700_30a1fe15-6ebb-4d5a-8c6f-ad41199b8b9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s):\n\twords = s.split()\n\treturn len(words)", "task_id": "700_ed32e191-5401-43dc-8fae-23ccffab5be3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the sum of the remaining elements is less than or equal to k.", "code": "def remove_elements(arr, k):\n    arr.sort(reverse=True)\n    total = sum(arr)\n    count = 0\n    for num in arr:\n        if total <= k:\n            break\n        total -= num\n        count += 1\n    return count", "task_id": "702_48126854-b460-47bb-b7ad-b40f34e4ab53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the sum of the remaining elements is even.", "code": "def remove_elements_to_make_even(arr):\n    total = sum(arr)\n    if total % 2 == 0:\n        return 0\n    for num in arr:\n        if num % 2 != 0:\n            return 1\n    return -1", "task_id": "702_f434474c-c5f9-4a92-bbfb-c023134eea53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the sum of the remaining elements is odd.", "code": "def remove_elements_to_make_odd(arr):\n    total = sum(arr)\n    if total % 2 != 0:\n        return 0\n    for num in arr:\n        if num % 2 != 0:\n            return 1\n    return -1", "task_id": "702_d532e694-14f5-4fb7-8435-e660f102eff2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the remaining elements form a palindrome.", "code": "def remove_elements_to_make_palindrome(arr):\n    def is_palindrome(lst):\n        return lst == lst[::-1]\n    n = len(arr)\n    for i in range(n):\n        for j in range(i, n):\n            if is_palindrome(arr[:i] + arr[j+1:]):\n                return j - i + 1\n    return n", "task_id": "702_9e5958e2-aa3d-49e0-8961-bdde0cc173a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the remaining elements are in non-decreasing order.", "code": "def remove_elements_to_make_non_decreasing(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] >= arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return n - max(dp)", "task_id": "702_afa1cdd2-fa07-44cd-a987-635fd4a9556f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the remaining elements are in non-increasing order.", "code": "def remove_elements_to_make_non_increasing(arr):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] <= arr[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return n - max(dp)", "task_id": "702_b7a54dda-3d7e-43c1-903a-9bd3278d4900", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that all remaining elements are unique.", "code": "def remove_elements_to_make_unique(arr):\n    from collections import Counter\n    count = Counter(arr)\n    removals = 0\n    for value in count.values():\n        if value > 1:\n            removals += value - 1\n    return removals", "task_id": "702_67c253e9-fa4b-47da-bbf1-156638c1b4f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the sum of the remaining elements is divisible by k.", "code": "def remove_elements_to_make_sum_divisible_by_k(arr, k):\n    total = sum(arr)\n    if total % k == 0:\n        return 0\n    for num in arr:\n        if (total - num) % k == 0:\n            return 1\n    return -1", "task_id": "702_e35718de-5fa4-4ef1-81c9-70d3d91cb399", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the product of the remaining elements is even.", "code": "def remove_elements_to_make_product_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return 0\n    return 1", "task_id": "702_37115441-fdf1-4eec-aef3-c42161e3f1f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of elements that should be removed such that the product of the remaining elements is odd.", "code": "def remove_elements_to_make_product_odd(arr):\n    removals = 0\n    for num in arr:\n        if num % 2 == 0:\n            removals += 1\n    return removals", "task_id": "702_82786425-5658-45e9-be67-3c1ed9deab90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a peak element in the given array. A peak element is an element that is greater than its neighbors.", "code": "def find_peak_element(arr):\n    n = len(arr)\n    if n == 1:\n        return 0\n    if arr[0] >= arr[1]:\n        return 0\n    if arr[n-1] >= arr[n-2]:\n        return n-1\n    for i in range(1, n-1):\n        if arr[i] >= arr[i-1] and arr[i] >= arr[i+1]:\n            return i\n    return -1", "task_id": "701_437b29da-dd5f-4443-b997-1c58822ecd68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in an array containing numbers from 1 to n.", "code": "def find_missing_number(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    arr_sum = sum(arr)\n    return total_sum - arr_sum", "task_id": "701_f8dfd603-06cd-4350-b6eb-ada14ccceb6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in an array containing numbers from 1 to n with one duplicate.", "code": "def find_duplicate_number(arr):\n    slow = arr[0]\n    fast = arr[0]\n    while True:\n        slow = arr[slow]\n        fast = arr[arr[fast]]\n        if slow == fast:\n            break\n    slow = arr[0]\n    while slow != fast:\n        slow = arr[slow]\n        fast = arr[fast]\n    return slow", "task_id": "701_1b5e6373-83aa-4a4f-b949-043261ea7742", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeating character in a string.", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "701_3b0f3eac-bc34-4c26-a4ca-ed3a1d7389a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the majority element in an array. A majority element is an element that appears more than n/2 times.", "code": "def find_majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate", "task_id": "701_3165aa4c-134a-4a65-95d4-c5920e4fb66c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters.", "code": "def find_longest_substring_without_repeating_chars(s):\n    char_index = {}\n    start = max_length = 0\n    for i, char in enumerate(s):\n        if char in char_index and char_index[char] >= start:\n            start = char_index[char] + 1\n        char_index[char] = i\n        max_length = max(max_length, i - start + 1)\n    return max_length", "task_id": "701_1d7af20b-c786-4da2-bf8e-5475df89a1bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in an array.", "code": "import heapq\n\ndef find_kth_largest_element(arr, k):\n    return heapq.nlargest(k, arr)[-1]", "task_id": "701_82a88581-b1fe-4cb1-90b8-a3b4e7ed16f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray.", "code": "def find_max_subarray_sum(arr):\n    max_sum = current_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "701_9a9589cb-4ae9-450b-bcc6-8327aab7ea13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in a rotated sorted array.", "code": "def find_minimum_in_rotated_sorted_array(arr):\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid\n    return arr[left]", "task_id": "701_c198f126-7ad9-463e-9481-deb702349385", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing ranges in a sorted array of integers within a given range.", "code": "def find_missing_ranges(arr, lower, upper):\n    result = []\n    prev = lower - 1\n    for num in arr + [upper + 1]:\n        if num == prev + 2:\n            result.append(f'{prev + 1}')\n        elif num > prev + 2:\n            result.append(f'{prev + 1}->{num - 1}')\n        prev = num\n    return result", "task_id": "701_38a45372-c01e-4d3e-a85e-e493d9065529", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given value is present in the dictionary or not.", "code": "def is_value_present(d, v):\n  return v in d.values()", "task_id": "703_0320fc29-b6ba-4b44-bad7-4201f3f72cd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of keys that have the given value in the dictionary.", "code": "def get_keys_with_value(d, v):\n  return [k for k, val in d.items() if val == v]", "task_id": "703_cfbce420-39ca-4bb3-880c-1eb06d9a8f3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of keys in the dictionary.", "code": "def count_keys(d):\n  return len(d.keys())", "task_id": "703_f5c7c3e9-b165-4e57-8a78-66bc033b3680", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If there are duplicate keys, the values from the second dictionary should overwrite the values from the first dictionary.", "code": "def merge_dicts(d1, d2):\n  result = d1.copy()\n  result.update(d2)\n  return result", "task_id": "703_0939b62a-b9a3-4ff6-afca-ebfa645328d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to invert a dictionary, swapping keys and values. Assume all values are unique.", "code": "def invert_dict(d):\n  return {v: k for k, v in d.items()}", "task_id": "703_4222c158-9e86-4a1b-b862-b647ad175761", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove a key from the dictionary. If the key is not present, return the dictionary unchanged.", "code": "def remove_key(d, k):\n  if k in d:\n    del d[k]\n  return d", "task_id": "703_e9a0b629-a836-41a9-a3c4-67d49de828d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the key with the maximum value in the dictionary. Assume all values are comparable.", "code": "def get_max_value_key(d):\n  return max(d, key=d.get)", "task_id": "703_e1d76147-3a67-4f38-a6c3-ced19dd56ac1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the key with the minimum value in the dictionary. Assume all values are comparable.", "code": "def get_min_value_key(d):\n  return min(d, key=d.get)", "task_id": "703_b1eaf716-5a78-4773-926b-87944f7ef577", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all values in the dictionary. Assume all values are integers.", "code": "def sum_dict_values(d):\n  return sum(d.values())", "task_id": "703_847da9c7-b94d-4b3c-ab32-58ed1a6550a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter the dictionary by values, returning a new dictionary with only the items that have values greater than the given threshold.", "code": "def filter_dict_by_value(d, threshold):\n  return {k: v for k, v in d.items() if v > threshold}", "task_id": "703_25f8ea0c-2476-4303-96d8-857626e91a72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of factorials up to n.", "code": "def factorial_sum(n):\n    def factorial(x):\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n    return sum(factorial(i) for i in range(1, n + 1))", "task_id": "704_6adbd25d-f6c2-465a-bc5a-9fa6fc949a5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def fibonacci_sum(n):\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += a\n        a, b = b, a + b\n    return total", "task_id": "704_937500a5-ce55-4f1f-bc04-5616676cecb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the nth triangular number.", "code": "def triangular_number(n):\n    return n * (n + 1) // 2", "task_id": "704_6a550833-c334-4abe-b5e9-9973d571d1f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n    return sum(i * i for i in range(1, n + 1))", "task_id": "704_620ccca3-9f33-45f6-a292-1b1f46b97a8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the alternating sum of the first n natural numbers.", "code": "def alternating_sum(n):\n    return sum((-1)**(i+1) * i for i in range(1, n + 1))", "task_id": "704_a8893939-59a3-4964-a7bd-b60bb4fad7bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    return sum(i ** 3 for i in range(1, n + 1))", "task_id": "704_1b1c07b0-3600-4320-9d05-2cea0a3a4255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of reciprocals of the first n natural numbers.", "code": "def sum_of_reciprocals(n):\n    return sum(1 / i for i in range(1, n + 1))", "task_id": "704_194607bb-b7d4-412d-971f-a2ad9ad6a9ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n even numbers.", "code": "def sum_of_evens(n):\n    return sum(2 * i for i in range(1, n + 1))", "task_id": "704_a1de3ec0-1df1-4388-94ff-ebb7a29c6c55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n odd numbers.", "code": "def sum_of_odds(n):\n    return sum(2 * i - 1 for i in range(1, n + 1))", "task_id": "704_43d11d34-c143-40b9-bdc8-6511ff793ba0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a number n.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "704_65c61869-56eb-49cf-a2b7-bcebcf9cd84d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the sum of their elements.", "code": "def sort_by_sum(list1):\n    return sorted(list1, key=sum)", "task_id": "705_7ee1da8d-ee4d-44a0-a24d-abffefa16825", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the maximum element in each sublist.", "code": "def sort_by_max_element(list1):\n    return sorted(list1, key=lambda x: max(x))", "task_id": "705_309b0fe8-fc3a-4cb2-9deb-dcb98cc8ea08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the minimum element in each sublist.", "code": "def sort_by_min_element(list1):\n    return sorted(list1, key=lambda x: min(x))", "task_id": "705_4e9e54f2-3c6c-4056-9046-995f254a4686", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the first element in each sublist.", "code": "def sort_by_first_element(list1):\n    return sorted(list1, key=lambda x: x[0])", "task_id": "705_905da3a8-d6f8-4359-921e-e567d854b6c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists by the last element in each sublist.", "code": "def sort_by_last_element(list1):\n    return sorted(list1, key=lambda x: x[-1])", "task_id": "705_7fe76164-b2e4-474c-9edf-e63811a9ad63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists first by length and then by the sum of their elements.", "code": "def sort_by_length_and_sum(list1):\n    list1.sort(key=sum)\n    list1.sort(key=len)\n    return list1", "task_id": "705_fe0ff406-c9d3-4dc0-a8a8-4bdf3d7557e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists first by length and then by the maximum element in each sublist.", "code": "def sort_by_length_and_max(list1):\n    list1.sort(key=lambda x: max(x))\n    list1.sort(key=len)\n    return list1", "task_id": "705_b0f772a3-9b48-40e8-8975-0a438bad36d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists first by length and then by the minimum element in each sublist.", "code": "def sort_by_length_and_min(list1):\n    list1.sort(key=lambda x: min(x))\n    list1.sort(key=len)\n    return list1", "task_id": "705_a0a75249-7632-4d85-850a-101c56734f69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists first by length and then by the first element in each sublist.", "code": "def sort_by_length_and_first(list1):\n    list1.sort(key=lambda x: x[0])\n    list1.sort(key=len)\n    return list1", "task_id": "705_c614442c-8e10-4c6a-b3ee-7d9128ed67b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of lists first by length and then by the last element in each sublist.", "code": "def sort_by_length_and_last(list1):\n    list1.sort(key=lambda x: x[-1])\n    list1.sort(key=len)\n    return list1", "task_id": "705_8d8c683d-e4fe-496d-8981-18ebbca7ce93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "708_503dab7a-4e5c-4717-a9f3-5eb2aa55c2a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "708_bd54bff4-2eaa-4c8a-9e73-c93c4f89b9d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "708_7afa25f9-4ffd-4cc9-893d-034341de4009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all whitespace from a given string.", "code": "def remove_whitespace(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "708_87784cf0-e7a0-46d2-9404-1150355e74ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "708_b95ac598-4b72-46d7-b711-ea7e15194dcd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a given string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "708_74c44f06-c9e7-4d46-bec8-5fa79326b7e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "708_d6b28ffa-8c3c-4f01-a0a2-8d81aa7e122e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all vowels in a given string with a specified character.", "code": "def replace_vowels(s: str, replacement: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join(replacement if char in vowels else char for char in s)", "task_id": "708_7dd66338-6c26-4c56-86db-3b9b6c1d5bff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the words in a given string alphabetically.", "code": "def sort_words(s: str) -> str:\n    return ' '.join(sorted(s.split()))", "task_id": "708_cc0e7be5-c86f-47d0-875b-d7f48c34536d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from a given string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    return ''.join(seen.add(char) or char for char in s if char not in seen)", "task_id": "708_b5313a19-c4a7-4d6c-80c7-e3cda3224d3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether the sum of elements in one array is a subset of the sum of elements in another array.", "code": "def is_subset_sum(arr1, m, arr2, n):\n\tsum1 = sum(arr1)\n\tsum2 = sum(arr2)\n\treturn sum1 <= sum2", "task_id": "706_29009704-65a9-4ba3-b835-abedee6da281", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether the product of elements in one array is a subset of the product of elements in another array.", "code": "def is_subset_product(arr1, m, arr2, n):\n\tproduct1 = 1\n\tfor num in arr1:\n\t\tproduct1 *= num\n\tproduct2 = 1\n\tfor num in arr2:\n\t\tproduct2 *= num\n\treturn product1 <= product2", "task_id": "706_55968317-6cbe-4cea-986c-9bc06f759032", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all even elements in one array are present in another array.", "code": "def is_subset_even(arr1, m, arr2, n):\n\teven_set = {num for num in arr1 if num % 2 == 0}\n\tfor num in even_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_f77c3fe6-e904-4065-ab07-88598cbeb8d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all odd elements in one array are present in another array.", "code": "def is_subset_odd(arr1, m, arr2, n):\n\todd_set = {num for num in arr1 if num % 2 != 0}\n\tfor num in odd_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_b0de58b0-127d-4a7e-b3cf-bd8b9f8edb50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all elements in one array divisible by k are present in another array.", "code": "def is_subset_divisible(arr1, m, arr2, n, k):\n\tdiv_set = {num for num in arr1 if num % k == 0}\n\tfor num in div_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_31e95213-72d5-4060-8720-7b09ffc8e76c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all elements in one array greater than x are present in another array.", "code": "def is_subset_greater(arr1, m, arr2, n, x):\n\tgreater_set = {num for num in arr1 if num > x}\n\tfor num in greater_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_16ac6eff-6b8c-44ec-a28b-12737c6390b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all elements in one array smaller than y are present in another array.", "code": "def is_subset_smaller(arr1, m, arr2, n, y):\n\tsmaller_set = {num for num in arr1 if num < y}\n\tfor num in smaller_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_49a0c5f6-6e87-44b7-a2b9-59dd2c683501", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all prime elements in one array are present in another array.", "code": "def is_subset_prime(arr1, m, arr2, n):\n\tdef is_prime(num):\n\t\tif num < 2:\n\t\t\treturn False\n\t\tfor i in range(2, int(num**0.5) + 1):\n\t\t\tif num % i == 0:\n\t\t\t\treturn False\n\t\treturn True\n\tprime_set = {num for num in arr1 if is_prime(num)}\n\tfor num in prime_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_075856ce-1557-484e-936f-f519a9cd3a79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all perfect square elements in one array are present in another array.", "code": "def is_subset_square(arr1, m, arr2, n):\n\tdef is_square(num):\n\t\treturn int(num**0.5)**2 == num\n\tsquare_set = {num for num in arr1 if is_square(num)}\n\tfor num in square_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_7d3bc1b2-a37d-4d92-ba3a-d5e3e506cb01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find whether all perfect cube elements in one array are present in another array.", "code": "def is_subset_cube(arr1, m, arr2, n):\n\tdef is_cube(num):\n\t\treturn int(num**(1/3))**3 == num\n\tcube_set = {num for num in arr1 if is_cube(num)}\n\tfor num in cube_set:\n\t\tif num not in arr2:\n\t\t\treturn False\n\treturn True", "task_id": "706_da6bded7-d5bd-459c-adce-2da3e253c0ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total even set bits from 1 to n.", "code": "def count_even_bits(n: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_even_bits = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 2 == 0:\n            total_even_bits += 1\n    return total_even_bits", "task_id": "707_49e32ae9-c7d9-443d-89ef-ab260ff8e4ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total odd set bits from 1 to n.", "code": "def count_odd_bits(n: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_odd_bits = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 2 != 0:\n            total_odd_bits += 1\n    return total_odd_bits", "task_id": "707_3a3fc07a-44af-4b95-9328-4e9d707ec9da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total numbers with prime set bits from 1 to n.", "code": "def count_prime_set_bits(n: int) -> int:\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_prime_bits = 0\n    for i in range(1, n + 1):\n        if is_prime(count_set_bits(i)):\n            total_prime_bits += 1\n    return total_prime_bits", "task_id": "707_9d198f91-dd08-4882-b84e-2fc524822a26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total numbers with set bits divisible by 3 from 1 to n.", "code": "def count_bits_divisible_by_3(n: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_divisible_by_3 = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) % 3 == 0:\n            total_divisible_by_3 += 1\n    return total_divisible_by_3", "task_id": "707_86852765-463a-4884-8e8e-3c45f894bca1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n that fall within a specified range [low, high].", "code": "def count_bits_in_range(n: int, low: int, high: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_bits_in_range = 0\n    for i in range(1, n + 1):\n        set_bits = count_set_bits(i)\n        if low <= set_bits <= high:\n            total_bits_in_range += 1\n    return total_bits_in_range", "task_id": "707_46f51436-8d4b-44c8-99b0-17cd36524d41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n where the number of set bits is within a given distance from the average number of set bits.", "code": "def count_bits_within_distance(n: int, dist: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_set_bits = sum(count_set_bits(i) for i in range(1, n + 1))\n    avg_set_bits = total_set_bits / n\n    total_within_distance = 0\n    for i in range(1, n + 1):\n        if abs(count_set_bits(i) - avg_set_bits) <= dist:\n            total_within_distance += 1\n    return total_within_distance", "task_id": "707_07662693-5440-413d-97eb-565ddf5d4370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total numbers from 1 to n that have exactly k set bits.", "code": "def count_bits_with_k_set_bits(n: int, k: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_with_k_set_bits = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) == k:\n            total_with_k_set_bits += 1\n    return total_with_k_set_bits", "task_id": "707_63ae4709-76ab-40c4-b9b1-252a1a8b62f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n where the sum of the set bits is less than or equal to a given sum s.", "code": "def count_bits_within_sum(n: int, s: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_within_sum = 0\n    for i in range(1, n + 1):\n        if count_set_bits(i) <= s:\n            total_within_sum += 1\n    return total_within_sum", "task_id": "707_d905a2af-9648-4aa0-a587-25204980aec8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n where the number of set bits is within a specified range [low, high].", "code": "def count_bits_within_range(n: int, low: int, high: int) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_within_range = 0\n    for i in range(1, n + 1):\n        set_bits = count_set_bits(i)\n        if low <= set_bits <= high:\n            total_within_range += 1\n    return total_within_range", "task_id": "707_235f575f-fb37-47d0-90ce-f8d5cc518269", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total set bits from 1 to n where the number of set bits is even or odd based on the boolean parameter.", "code": "def count_bits_within_even_odd(n: int, even: bool) -> int:\n    def count_set_bits(x):\n        count = 0\n        while x:\n            count += x & 1\n            x >>= 1\n        return count\n    total_even_odd = 0\n    for i in range(1, n + 1):\n        if (count_set_bits(i) % 2 == 0) == even:\n            total_even_odd += 1\n    return total_even_odd", "task_id": "707_aa602bbc-2f18-4119-8567-205fbc5deb2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and second last data of the given tuple record.", "code": "def first_and_second_last(test_tup):\n  res = (test_tup[0], test_tup[-2])\n  return res", "task_id": "710_5686bd0f-4745-4b65-ae93-e2033678be07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and middle data of the given tuple record.", "code": "def first_and_middle(test_tup):\n  mid_index = len(test_tup) // 2\n  res = (test_tup[0], test_tup[mid_index])\n  return res", "task_id": "710_ca4bef62-e734-419d-99cd-c0abbe8d6a7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the second and second last data of the given tuple record.", "code": "def second_and_second_last(test_tup):\n  res = (test_tup[1], test_tup[-2])\n  return res", "task_id": "710_2aa01318-256d-4695-b949-c30b67ede644", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last three data of the given tuple record.", "code": "def first_and_last_three(test_tup):\n  res = (test_tup[0], test_tup[-3:])\n  return res", "task_id": "710_958c3e83-c8d7-4778-b90e-3d041ddd3e3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last data of the given tuple record if the length of the tuple is even.", "code": "def first_and_last_if_even(test_tup):\n  if len(test_tup) % 2 == 0:\n    res = (test_tup[0], test_tup[-1])\n  else:\n    res = ()\n  return res", "task_id": "710_d9bf8bdb-da14-4577-a05a-ac964cf346f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last data of the given tuple record if the length of the tuple is odd.", "code": "def first_and_last_if_odd(test_tup):\n  if len(test_tup) % 2 != 0:\n    res = (test_tup[0], test_tup[-1])\n  else:\n    res = ()\n  return res", "task_id": "710_a028a545-cd84-4452-8038-598f5c85afcd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first two and last two data of the given tuple record.", "code": "def first_two_and_last_two(test_tup):\n  res = (test_tup[:2], test_tup[-2:])\n  return res", "task_id": "710_f8b6b000-a913-4662-bde7-c22c1f5cbe29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last three data of the given tuple record if the length of the tuple is even.", "code": "def first_and_last_three_if_even(test_tup):\n  if len(test_tup) % 2 == 0:\n    res = (test_tup[0], test_tup[-3:])\n  else:\n    res = ()\n  return res", "task_id": "710_dc134271-0873-4230-8e18-ad25b0cc44ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last three data of the given tuple record if the length of the tuple is odd.", "code": "def first_and_last_three_if_odd(test_tup):\n  if len(test_tup) % 2 != 0:\n    res = (test_tup[0], test_tup[-3:])\n  else:\n    res = ()\n  return res", "task_id": "710_d50ddaea-f403-4ef3-b133-5415300a8c82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to access the first and last data of the given tuple record, and also return the length of the tuple.", "code": "def first_last_and_length(test_tup):\n  res = (test_tup[0], test_tup[-1], len(test_tup))\n  return res", "task_id": "710_fa1f9131-fcb0-4e4a-8a7a-b098ded91d9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are strings.", "code": "from collections import defaultdict\n\ndef count_unique_keys(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, str):\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_4fce013f-b291-4db5-a5e5-c94e77f0291d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values whose length is greater than or equal to a given minimum length.", "code": "from collections import defaultdict\n\ndef count_keys_with_min_length(test_list, min_length):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if len(value) >= min_length:\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_af622b14-913c-4a59-a681-a8235029f1f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, ignoring case sensitivity for the values.", "code": "from collections import defaultdict\n\ndef count_unique_keys_ignore_case(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        res[value.lower()].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_0292c6ac-7164-4312-b799-5d2b3c0b47b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are even numbers.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_even_values(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, int) and value % 2 == 0:\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_4934a376-1c0d-4884-be5b-0f77ac515e2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are positive numbers.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_positive_values(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, (int, float)) and value > 0:\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_9c69257a-7252-4ca1-b601-82733de7f391", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are non-empty strings.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_non_empty_strings(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, str) and value:\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_ca87a006-9038-4c52-bce4-803e08d9716e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are strings representing numeric values.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_numeric_strings(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, str) and value.isdigit():\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_57d88e73-4e7f-45c9-acb4-f11caf5ef5b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are floating-point numbers.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_float_values(test_list):\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, float):\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_b98a8724-7da0-471a-a96a-dbcd02230264", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are strings starting with a vowel.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_values_starting_with_vowel(test_list):\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, str) and value[0].lower() in vowels:\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_1fc9f8fd-8ea9-4781-b2a4-0cccc565fc91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique keys for each value present in the list of tuples, but only for values that are strings containing special characters.", "code": "from collections import defaultdict\n\ndef count_unique_keys_for_values_with_special_characters(test_list):\n    import re\n    res = defaultdict(set)\n    for key, value in test_list:\n        if isinstance(value, str) and re.search(r'[^\\w\\s]', value):\n            res[value].add(key)\n    return {k: len(v) for k, v in res.items()}", "task_id": "709_85aba8b7-e5d1-4f40-8c67-b81cfd9cf036", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(x: int) -> int:\n    total = 0\n    while x > 0:\n        total += x % 10\n        x //= 10\n    return total", "task_id": "711_64e47d84-5f5a-414f-9da8-d69c4798be99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the digits of a given number.", "code": "def reverse_number(n: int) -> int:\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return reversed_num", "task_id": "711_6af73d4b-7429-48ef-a943-9c541fb15d4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a palindrome.", "code": "def is_palindrome(n: int) -> bool:\n    original = n\n    reversed_num = 0\n    while n > 0:\n        reversed_num = reversed_num * 10 + n % 10\n        n //= 10\n    return original == reversed_num", "task_id": "711_3f52d18c-fd38-4b72-afd1-784eea192330", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the even digits of a given number.", "code": "def sum_of_even_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 == 0:\n            total += digit\n        n //= 10\n    return total", "task_id": "711_8eb944c7-81a3-42c9-bb53-c91be492e3b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in a given number.", "code": "def count_odd_digits(n: int) -> int:\n    count = 0\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            count += 1\n        n //= 10\n    return count", "task_id": "711_e62a8137-1008-46fd-8857-2bf31e1f2067", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the product of the digits of a given number.", "code": "def product_of_digits(n: int) -> int:\n    product = 1\n    while n > 0:\n        product *= n % 10\n        n //= 10\n    return product", "task_id": "711_7744a0ae-da09-490c-9d90-a2b3498ca65d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the squares of the digits of a given number.", "code": "def sum_of_squares_of_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        digit = n % 10\n        total += digit * digit\n        n //= 10\n    return total", "task_id": "711_2d80f4b9-7026-4e87-990c-8ba52230840a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is an Armstrong number.", "code": "def is_armstrong_number(n: int) -> bool:\n    total = 0\n    num = n\n    num_digits = len(str(n))\n    while num > 0:\n        digit = num % 10\n        total += digit ** num_digits\n        num //= 10\n    return total == n", "task_id": "711_0d41ba54-2ad3-4453-9d31-fbb6b17acde2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the prime digits of a given number.", "code": "def sum_of_prime_digits(n: int) -> int:\n    prime_digits = {2, 3, 5, 7}\n    total = 0\n    while n > 0:\n        digit = n % 10\n        if digit in prime_digits:\n            total += digit\n        n //= 10\n    return total", "task_id": "711_b6f2c15a-08fe-4fe2-8544-0bbf5b3355c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a Harshad number.", "code": "def is_harshad_number(n: int) -> bool:\n    sum_digits = sum(int(digit) for digit in str(n))\n    return n % sum_digits == 0", "task_id": "711_5cf0be1f-d31d-4a23-8f68-6c3f89b9cdd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate strings from a list of strings.", "code": "def remove_duplicate_strings(strings: list[str]) -> list[str]:\n    return list(dict.fromkeys(strings))", "task_id": "712_9f3486c7-ab43-4ba8-8114-42ae3dea36d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate numbers from a list of integers.", "code": "def remove_duplicate_numbers(numbers: list[int]) -> list[int]:\n    return list(dict.fromkeys(numbers))", "task_id": "712_e35a1f4e-e05d-4cfd-8041-0de0f5ac8d0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate tuples from a list of tuples.", "code": "def remove_duplicate_tuples(tuples: list[tuple]) -> list[tuple]:\n    return list(dict.fromkeys(tuples))", "task_id": "712_8bbcb9fe-0969-4c42-be72-f5b7c864633a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate dictionaries from a list of dictionaries.", "code": "def remove_duplicate_dicts(dicts: list[dict]) -> list[dict]:\n    seen = []\n    result = []\n    for d in dicts:\n        if d not in seen:\n            seen.append(d)\n            result.append(d)\n    return result", "task_id": "712_e5fce630-ab24-4450-927d-409487202b5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a list of characters.", "code": "def remove_duplicate_chars(chars: list[str]) -> list[str]:\n    return list(dict.fromkeys(chars))", "task_id": "712_bfe470dd-99b1-4c4e-a80b-0592507234f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a list of words.", "code": "def remove_duplicate_words(words: list[str]) -> list[str]:\n    return list(dict.fromkeys(words))", "task_id": "712_dbb87b80-67dc-47a5-87ee-9fd8350493e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate floats from a list of floats.", "code": "def remove_duplicate_floats(floats: list[float]) -> list[float]:\n    return list(dict.fromkeys(floats))", "task_id": "712_837a67a5-55cb-4c70-8fd2-107a9e20c3f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate sets from a list of sets.", "code": "def remove_duplicate_sets(sets: list[set]) -> list[set]:\n    seen = []\n    result = []\n    for s in sets:\n        if s not in seen:\n            seen.append(s)\n            result.append(s)\n    return result", "task_id": "712_ba60f617-7abf-4703-a157-4f8febd54e03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate booleans from a list of booleans.", "code": "def remove_duplicate_bools(bools: list[bool]) -> list[bool]:\n    return list(dict.fromkeys(bools))", "task_id": "712_dcdee35c-b490-4549-b9a2-0f963c1b3a75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a list of mixed types.", "code": "def remove_duplicate_mixed(mixed: list) -> list:\n    return list(dict.fromkeys(mixed))", "task_id": "712_ad6f0105-9bd4-4927-b767-1bd16d8c1fbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are positive numbers.", "code": "def check_all_positive(test_tup):\n    return all(ele > 0 for ele in test_tup)", "task_id": "713_c96d79cf-039f-47b1-807c-906254e6a4da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are strings.", "code": "def check_all_strings(test_tup):\n    return all(isinstance(ele, str) for ele in test_tup)", "task_id": "713_062cd6f9-08ad-40bb-8c65-b0c6d1648f53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple contains no duplicate values.", "code": "def check_no_duplicates(test_tup):\n    return len(test_tup) == len(set(test_tup))", "task_id": "713_2e3ef335-f61b-4687-9b58-79f5877a12a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are even numbers.", "code": "def check_all_even(test_tup):\n    return all(ele % 2 == 0 for ele in test_tup)", "task_id": "713_40f74209-f24a-49fb-beb4-825655e60bdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are non-empty strings.", "code": "def check_all_non_empty_strings(test_tup):\n    return all(isinstance(ele, str) and ele for ele in test_tup)", "task_id": "713_beb5160d-7396-4efb-accc-3ed6ba2625f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are integers.", "code": "def check_all_integers(test_tup):\n    return all(isinstance(ele, int) for ele in test_tup)", "task_id": "713_9ea08bed-e409-4b8a-9148-56ada2ce0402", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are less than ten.", "code": "def check_all_less_than_ten(test_tup):\n    return all(ele < 10 for ele in test_tup)", "task_id": "713_7cd22ab1-56ee-4b31-a747-8f953805679b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all string elements in the given tuple are uppercase.", "code": "def check_all_uppercase(test_tup):\n    return all(isinstance(ele, str) and ele.isupper() for ele in test_tup)", "task_id": "713_0477fe29-a735-4e5d-a350-987f094fe647", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are floats.", "code": "def check_all_floats(test_tup):\n    return all(isinstance(ele, float) for ele in test_tup)", "task_id": "713_a47db1ee-f4f9-49e7-82ea-e0062dd088b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are non-negative numbers.", "code": "def check_all_non_negative(test_tup):\n    return all(ele >= 0 for ele in test_tup)", "task_id": "713_449e4cfb-4db6-4650-8cdc-7f8af23cc8a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a list.", "code": "def str_to_list(test_str):\n  res = list(map(int, test_str.split(', ')))\n  return res", "task_id": "715_8c2a47ee-fb0a-4d51-8d23-f8b25142cf5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a set.", "code": "def str_to_set(test_str):\n  res = set(map(int, test_str.split(', ')))\n  return res", "task_id": "715_75f57672-a182-4a81-b2c9-e16c32959fce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a dictionary where the keys are the integers and the values are their squares.", "code": "def str_to_dict(test_str):\n  res = {int(x): int(x)**2 for x in test_str.split(', ')}\n  return res", "task_id": "715_d21f2ea6-5886-4a55-9fc6-bfa96a59dae2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return the tuple along with the sum of its elements.", "code": "def str_to_tuple_sum(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return res, sum(res)", "task_id": "715_e8e230aa-ff24-41d2-839b-c0c3c16171b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return the tuple along with the average of its elements.", "code": "def str_to_tuple_avg(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return res, sum(res)/len(res)", "task_id": "715_f8b8ca85-0571-48fb-8a0e-251021c56b89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return the tuple along with the maximum value among its elements.", "code": "def str_to_tuple_max(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return res, max(res)", "task_id": "715_1315b3f2-cfe7-4112-98a2-7352e5f4ade0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return the tuple along with the minimum value among its elements.", "code": "def str_to_tuple_min(test_str):\n  res = tuple(map(int, test_str.split(', ')))\n  return res, min(res)", "task_id": "715_636b2bf3-a3e4-4815-85eb-c3a76644aab7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return a tuple containing only the even numbers.", "code": "def str_to_tuple_even(test_str):\n  res = tuple(filter(lambda x: x % 2 == 0, map(int, test_str.split(', '))))\n  return res", "task_id": "715_5babd82c-d5b1-4d85-be0b-672c5d066956", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return a tuple containing only the odd numbers.", "code": "def str_to_tuple_odd(test_str):\n  res = tuple(filter(lambda x: x % 2 != 0, map(int, test_str.split(', '))))\n  return res", "task_id": "715_23b2742d-5262-45de-af80-1b752d5810d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers into a tuple and return the tuple sorted in ascending order.", "code": "def str_to_tuple_sorted(test_str):\n  res = tuple(sorted(map(int, test_str.split(', '))))\n  return res", "task_id": "715_69aabb20-6129-49e7-9a39-49bdc39b3c8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "716_d018b2d4-ab55-427a-a4dd-9e66d6b0ed82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given its three sides.", "code": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "716_0255e03b-bd57-4ca4-8ead-cdad058c2ce5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def square_perimeter(side: int) -> int:\n    return 4 * side", "task_id": "716_be259194-dd98-4824-9fef-a1ab59a2a6b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle given its radius.", "code": "import math\n\ndef circle_circumference(radius: float) -> float:\n    return 2 * math.pi * radius", "task_id": "716_e4470e4f-b0a4-4967-af3e-d889e68c71de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a parallelogram given its base and side lengths.", "code": "def parallelogram_perimeter(base: int, side: int) -> int:\n    return 2 * (base + side)", "task_id": "716_7cd26d67-064b-450e-90b4-bd99c93c06de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a trapezoid given the lengths of its four sides.", "code": "def trapezoid_perimeter(a: int, b: int, c: int, d: int) -> int:\n    return a + b + c + d", "task_id": "716_2163d1a4-ba97-4945-b629-c41d634c8458", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular hexagon given the length of one side.", "code": "def hexagon_perimeter(side: int) -> int:\n    return 6 * side", "task_id": "716_819fee3a-b150-43cc-baeb-e384e92d89dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular octagon given the length of one side.", "code": "def octagon_perimeter(side: int) -> int:\n    return 8 * side", "task_id": "716_de2fd2ab-c919-48e5-81ab-df17d46ea893", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a regular pentagon given the length of one side.", "code": "def pentagon_perimeter(side: int) -> int:\n    return 5 * side", "task_id": "716_4ef48374-d906-425f-a078-7cedea05fe6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the approximate circumference of an ellipse given its semi-major axis (a) and semi-minor axis (b). Use the approximation formula: C \u2248 \u03c0 * [ 3(a + b) - sqrt((3a + b)(a + 3b)) ].", "code": "import math\n\ndef ellipse_circumference(a: float, b: float) -> float:\n    return math.pi * (3 * (a + b) - math.sqrt((3 * a + b) * (a + 3 * b)))", "task_id": "716_75a2f2e3-68f9-49b4-af7a-ed2270ae6f71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all distinct prime factors of a given number.", "code": "def sum_of_prime_factors(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    sum_primes = 0\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                sum_primes += i\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1 and is_prime(n):\n        sum_primes += n\n    return sum_primes", "task_id": "714_b810962b-7d42-4d33-b850-f31d07cf668b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the product of all distinct prime factors of a given number.", "code": "def product_of_prime_factors(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n\n    product_primes = 1\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            if is_prime(i):\n                product_primes *= i\n            while n % i == 0:\n                n //= i\n        i += 1\n    if n > 1 and is_prime(n):\n        product_primes *= n\n    return product_primes", "task_id": "714_b019936d-e741-4390-8d10-ec226d956602", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of prime factors (including multiplicities) of a given number.", "code": "def count_prime_factors(n):\n    count = 0\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            count += 1\n            n //= i\n        i += 1\n    if n > 1:\n        count += 1\n    return count", "task_id": "714_6c0902f0-a8c4-441f-9728-34d5ed3081ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the largest prime factor of a given number.", "code": "def largest_prime_factor(n):\n    i = 2\n    largest = 1\n    while i * i <= n:\n        while n % i == 0:\n            largest = i\n            n //= i\n        i += 1\n    if n > 1:\n        largest = n\n    return largest", "task_id": "714_2f276b43-7345-4a87-8250-94c915ef12fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the smallest prime factor of a given number.", "code": "def smallest_prime_factor(n):\n    if n <= 1:\n        return None\n    i = 2\n    while i * i <= n:\n        if n % i == 0:\n            return i\n        i += 1\n    return n", "task_id": "714_1d37d199-50b1-48ce-9f5c-d1cdfbacbf9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "714_77159537-9df0-4bd7-aba0-1e5a3d6e14e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of all prime factors of a given number (including multiplicities).", "code": "def prime_factors(n):\n    factors = []\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.append(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.append(n)\n    return factors", "task_id": "714_2fb2b743-86c1-4a74-a173-6d93810df4a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a set of all distinct prime factors of a given number.", "code": "def distinct_prime_factors(n):\n    factors = set()\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            factors.add(i)\n            n //= i\n        i += 1\n    if n > 1:\n        factors.add(n)\n    return factors", "task_id": "714_fa25dc81-dba5-4618-b76f-5ab5a2630757", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a dictionary with prime factors as keys and their exponents as values for a given number.", "code": "def prime_factor_exponents(n):\n    exponents = {}\n    i = 2\n    while i * i <= n:\n        while n % i == 0:\n            if i in exponents:\n                exponents[i] += 1\n            else:\n                exponents[i] = 1\n            n //= i\n        i += 1\n    if n > 1:\n        exponents[n] = 1\n    return exponents", "task_id": "714_32dcb575-c2f6-4c81-ad35-89fb8783ecfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of a prime number.", "code": "def is_power_of_prime(n):\n    if n <= 1:\n        return False\n    i = 2\n    while i * i <= n:\n        power = i\n        while power <= n:\n            if power == n:\n                return True\n            power *= i\n        i += 1\n    return False", "task_id": "714_e00c7108-1c9f-4080-ba8c-4c59d060e508", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the median of a list of numbers.", "code": "def median_calc(data):\n    data.sort()\n    n = len(data)\n    if n % 2 == 0:\n        median = (data[n//2 - 1] + data[n//2]) / 2\n    else:\n        median = data[n//2]\n    return median", "task_id": "717_d1f61701-e649-4678-87e5-7f88537e322d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the mode of a list of numbers.", "code": "from collections import Counter\n\ndef mode_calc(data):\n    count = Counter(data)\n    mode = max(count, key=count.get)\n    return mode", "task_id": "717_5a9b7c91-2ca7-4e64-bc85-d0f97384ae94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the range of a list of numbers.", "code": "def range_calc(data):\n    return max(data) - min(data)", "task_id": "717_3e4d3431-949b-476f-b71a-f7ac8d75d827", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the variance of a list of numbers.", "code": "def variance_calc(data):\n    n = len(data)\n    mean = sum(data) / n\n    variance = sum((x - mean) ** 2 for x in data) / n\n    return variance", "task_id": "717_e5591953-b7b5-4106-9d58-a5a4ea1ff372", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the mean absolute deviation of a list of numbers.", "code": "def mean_absolute_deviation(data):\n    mean = sum(data) / len(data)\n    mad = sum(abs(x - mean) for x in data) / len(data)\n    return mad", "task_id": "717_fb68af43-ba33-4447-8749-3e89b48d7246", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the geometric mean of a list of numbers.", "code": "import math\n\ndef geometric_mean(data):\n    product = 1\n    for num in data:\n        product *= num\n    return product ** (1 / len(data))", "task_id": "717_859dcbe7-bc4e-4c5b-b4b1-ae9c2b331716", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the harmonic mean of a list of numbers.", "code": "def harmonic_mean(data):\n    n = len(data)\n    return n / sum(1 / x for x in data)", "task_id": "717_fabdd43b-4e81-4fc2-8d7f-8e886658a263", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the first and third quartiles of a list of numbers.", "code": "def quartiles(data):\n    data.sort()\n    n = len(data)\n    q1 = data[n//4]\n    q3 = data[3*n//4]\n    return (q1, q3)", "task_id": "717_555fb9bc-1c3a-4e78-9693-af3367d00649", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the interquartile range of a list of numbers.", "code": "def interquartile_range(data):\n    data.sort()\n    n = len(data)\n    q1 = data[n//4]\n    q3 = data[3*n//4]\n    return q3 - q1", "task_id": "717_d705031e-bcfd-4831-b38b-cd1b701bac81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the z-score of a given value in a list of numbers.", "code": "def z_score(data, value):\n    mean = sum(data) / len(data)\n    variance = sum((x - mean) ** 2 for x in data) / len(data)\n    std_dev = variance ** 0.5\n    return (value - mean) / std_dev", "task_id": "717_5ff5ebe9-f412-48a7-81b6-d1418d065d70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list taking alternate elements from another given list, but in reverse order.", "code": "def alternate_elements_reverse(list1):\n    result = []\n    for item in list1[::-2]:\n        result.append(item)\n    return result", "task_id": "718_d3af6960-415d-4c81-9624-b0f9167080d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list taking every third element from another given list.", "code": "def alternate_elements_skip_two(list1):\n    result = []\n    for item in list1[::3]:\n        result.append(item)\n    return result", "task_id": "718_b8596f1e-3ef1-4376-9bc5-63c4da66ed5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list taking alternate elements from another given list, starting from the second element.", "code": "def alternate_elements_start_one(list1):\n    result = []\n    for item in list1[1::2]:\n        result.append(item)\n    return result", "task_id": "718_60c5260c-7b2f-48e2-b100-020bfef5ab24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list taking alternate elements from another given list, but each element should appear twice in the new list.", "code": "def alternate_elements_double(list1):\n    result = []\n    for item in list1[::2]:\n        result.extend([item, item])\n    return result", "task_id": "718_4aaf031f-d1a7-43b3-b275-32d87b4449ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of tuples, each containing an alternate element from another given list and its index.", "code": "def alternate_elements_with_index(list1):\n    result = []\n    for i, item in enumerate(list1[::2]):\n        result.append((i*2, item))\n    return result", "task_id": "718_f3f12fa7-ef7c-4073-97be-02ff73d417b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of alternate elements from another given list.", "code": "def alternate_elements_sum(list1):\n    return sum(list1[::2])", "task_id": "718_2cd2b419-175b-45aa-8bbb-4cee0534e2b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the product of alternate elements from another given list.", "code": "def alternate_elements_product(list1):\n    result = 1\n    for item in list1[::2]:\n        result *= item\n    return result", "task_id": "718_4cb49da6-f3f3-4fab-b5dd-1a2065dd6174", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a string by concatenating alternate elements from another given list of strings.", "code": "def alternate_elements_strings(list1):\n    result = ''\n    for item in list1[::2]:\n        result += item\n    return result", "task_id": "718_cb4db753-605c-46d9-b4df-161a7c329bab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of squares of alternate elements from another given list.", "code": "def alternate_elements_square(list1):\n    result = []\n    for item in list1[::2]:\n        result.append(item**2)\n    return result", "task_id": "718_a21437c9-45d3-4fcc-a1e6-bd45a68c5ceb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a list of alternate elements from another given list, but only include even numbers.", "code": "def alternate_elements_even(list1):\n    result = []\n    for item in list1[::2]:\n        if item % 2 == 0:\n            result.append(item)\n    return result", "task_id": "718_a76dc3c5-220c-435a-bfa9-5c2c1c263a64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by one or more 'b's.", "code": "import re\n\ndef match_ab_plus(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_8a8b0b35-b1ec-4d92-b349-990e912d212f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by zero or one 'b'.", "code": "import re\n\ndef match_ab_question(text):\n    patterns = 'ab?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_102336df-6113-44b1-97c9-faee99859a4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by zero or more 'b's and ends with a 'c'.", "code": "import re\n\ndef match_ab_star_c(text):\n    patterns = 'ab*c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_8c9776cb-353d-4c12-9f17-6ec54bab83ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by one or more 'b's and ends with a 'c'.", "code": "import re\n\ndef match_ab_plus_c(text):\n    patterns = 'ab+c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_88d0b254-8de4-42ff-8c64-ba446be9c730", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by zero or one 'b' and ends with a 'c'.", "code": "import re\n\ndef match_ab_question_c(text):\n    patterns = 'ab?c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_9d85c082-0959-4f02-983d-37b8c263310f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any digit.", "code": "import re\n\ndef match_a_digit(text):\n    patterns = 'a\\d'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_322b4a70-a7ed-4888-a139-39510d7e8d3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any non-digit character.", "code": "import re\n\ndef match_a_non_digit(text):\n    patterns = 'a\\D'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_54dc58d9-5fcd-436b-bde7-a87137591187", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any word character (alphanumeric or underscore).", "code": "import re\n\ndef match_a_word_char(text):\n    patterns = 'a\\w'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_2522f8b1-8510-4ad2-833b-c7ab535292e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any non-word character.", "code": "import re\n\ndef match_a_non_word_char(text):\n    patterns = 'a\\W'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_a7f987ba-b5ce-491d-a5eb-662f19b503bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any whitespace character.", "code": "import re\n\ndef match_a_space(text):\n    patterns = 'a\\s'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "719_e9561a31-8ac7-4582-862a-f2db4a0d3e58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to sort an array of integers in ascending order.", "code": "def min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key = lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arrpos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "task_id": "699_5f00efe5-9588-4a34-aab3-45f7af011114", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to convert a given string into a palindrome.", "code": "def min_swaps_to_palindrome(s):\n    def is_palindrome_possible(s):\n        count = [0] * 256\n        for char in s:\n            count[ord(char)] += 1\n        odd = 0\n        for c in count:\n            if c % 2 != 0:\n                odd += 1\n        return odd <= 1\n    if not is_palindrome_possible(s):\n        return -1\n    s = list(s)\n    n = len(s)\n    ans = 0\n    for i in range(n // 2):\n        left = i\n        right = n - left - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            else:\n                right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            ans += 1\n            right = n - left - 1\n        for j in range(right, n - left - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            ans += 1\n    return ans", "task_id": "699_7a6dd4e3-a9db-46ae-9f8b-c6e1da3af682", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to group all 1s together in a binary array.", "code": "def min_swaps_to_group_ones(arr):\n    ones_count = arr.count(1)\n    if ones_count == 0:\n        return 0\n    max_ones_in_window = 0\n    current_ones_in_window = 0\n    for i in range(ones_count):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n    max_ones_in_window = current_ones_in_window\n    for i in range(ones_count, len(arr)):\n        if arr[i] == 1:\n            current_ones_in_window += 1\n        if arr[i - ones_count] == 1:\n            current_ones_in_window -= 1\n        max_ones_in_window = max(max_ones_in_window, current_ones_in_window)\n    return ones_count - max_ones_in_window", "task_id": "699_5fa7e5ae-498b-4169-b54d-dc18d6e8e7e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make two strings anagrams of each other.", "code": "def min_swaps_to_make_anagram(s1, s2):\n    if sorted(s1) != sorted(s2):\n        return -1\n    count = 0\n    s1 = list(s1)\n    s2 = list(s2)\n    for i in range(len(s1)):\n        if s1[i] != s2[i]:\n            j = i + 1\n            while j < len(s2) and s2[j] != s1[i]:\n                j += 1\n            s2[i], s2[j] = s2[j], s2[i]\n            count += 1\n    return count", "task_id": "699_da5348a5-4dfa-47ee-8ef4-0c968061a3b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make two arrays equal.", "code": "def min_swaps_to_make_equal(arr1, arr2):\n    if sorted(arr1) != sorted(arr2):\n        return -1\n    count = 0\n    for i in range(len(arr1)):\n        if arr1[i] != arr2[i]:\n            j = i + 1\n            while j < len(arr2) and arr2[j] != arr1[i]:\n                j += 1\n            arr2[i], arr2[j] = arr2[j], arr2[i]\n            count += 1\n    return count", "task_id": "699_17c3ff6b-49c8-4743-ab2a-83ba9db2bc45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make a given subsequence appear in the array in the same order.", "code": "def min_swaps_to_make_subsequence(arr, subseq):\n    n = len(arr)\n    m = len(subseq)\n    j = 0\n    for i in range(n):\n        if j < m and arr[i] == subseq[j]:\n            j += 1\n    if j != m:\n        return -1\n    count = 0\n    i = 0\n    j = 0\n    while i < n and j < m:\n        if arr[i] == subseq[j]:\n            j += 1\n        else:\n            count += 1\n        i += 1\n    return count", "task_id": "699_b09aa7be-5463-4dfc-b416-ba9a480bd5a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make all elements equal to k consecutive in the array.", "code": "def min_swaps_to_make_k_consecutive(arr, k):\n    k_count = arr.count(k)\n    if k_count == 0:\n        return 0\n    max_k_in_window = 0\n    current_k_in_window = 0\n    for i in range(k_count):\n        if arr[i] == k:\n            current_k_in_window += 1\n    max_k_in_window = current_k_in_window\n    for i in range(k_count, len(arr)):\n        if arr[i] == k:\n            current_k_in_window += 1\n        if arr[i - k_count] == k:\n            current_k_in_window -= 1\n        max_k_in_window = max(max_k_in_window, current_k_in_window)\n    return k_count - max_k_in_window", "task_id": "699_32ba47d0-e6ca-4df6-8718-f7f8d4841154", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make all even numbers appear before all odd numbers in the array.", "code": "def min_swaps_to_make_all_even(arr):\n    even_count = 0\n    for num in arr:\n        if num % 2 == 0:\n            even_count += 1\n    odd_count = len(arr) - even_count\n    even_index = 0\n    odd_index = even_count\n    swaps = 0\n    while even_index < even_count and odd_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_index += 1\n        elif arr[odd_index] % 2 != 0:\n            odd_index += 1\n        else:\n            arr[even_index], arr[odd_index] = arr[odd_index], arr[even_index]\n            swaps += 1\n            even_index += 1\n            odd_index += 1\n    return swaps", "task_id": "699_553de625-138a-45eb-871b-ed038e8455b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make all vowels appear before all consonants in the string.", "code": "def min_swaps_to_make_all_vowels_first(s):\n    vowels = 'aeiouAEIOU'\n    vowel_count = sum(1 for char in s if char in vowels)\n    consonant_count = len(s) - vowel_count\n    vowel_index = 0\n    consonant_index = vowel_count\n    swaps = 0\n    s = list(s)\n    while vowel_index < vowel_count and consonant_index < len(s):\n        if s[vowel_index] in vowels:\n            vowel_index += 1\n        elif s[consonant_index] not in vowels:\n            consonant_index += 1\n        else:\n            s[vowel_index], s[consonant_index] = s[consonant_index], s[vowel_index]\n            swaps += 1\n            vowel_index += 1\n            consonant_index += 1\n    return swaps", "task_id": "699_0e2d5f41-3a92-4270-9b00-6fd28e850956", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of swaps required to make all prime numbers appear before all non-prime numbers in the array.", "code": "def min_swaps_to_make_all_primes_first(arr):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        if n <= 3:\n            return True\n        if n % 2 == 0 or n % 3 == 0:\n            return False\n        i = 5\n        while i * i <= n:\n            if n % i == 0 or n % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n    prime_count = sum(1 for num in arr if is_prime(num))\n    non_prime_count = len(arr) - prime_count\n    prime_index = 0\n    non_prime_index = prime_count\n    swaps = 0\n    while prime_index < prime_count and non_prime_index < len(arr):\n        if is_prime(arr[prime_index]):\n            prime_index += 1\n        elif not is_prime(arr[non_prime_index]):\n            non_prime_index += 1\n        else:\n            arr[prime_index], arr[non_prime_index] = arr[non_prime_index], arr[prime_index]\n            swaps += 1\n            prime_index += 1\n            non_prime_index += 1\n    return swaps", "task_id": "699_eede4283-c6c8-4544-89bc-222b0df74785", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a list to the tuple.", "code": "def add_list_to_tuple(test_tup, test_list):\n  test_tup = list(test_tup)\n  test_tup.append(test_list)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_9d5e07c8-46c3-4a46-9663-818fe09abdb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a set to the tuple.", "code": "def add_set_to_tuple(test_tup, test_set):\n  test_tup = list(test_tup)\n  test_tup.append(test_set)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_5e32a49b-bcc1-443d-a0b7-2886345ff9a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a tuple to the tuple.", "code": "def add_tuple_to_tuple(test_tup, new_tup):\n  test_tup = list(test_tup)\n  test_tup.append(new_tup)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_a74030c9-e5d1-4f0d-b052-025199564d83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a string to the tuple.", "code": "def add_string_to_tuple(test_tup, test_str):\n  test_tup = list(test_tup)\n  test_tup.append(test_str)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_ba6f73c4-ba5d-4868-a7f5-d1ec2f54440e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add an integer to the tuple.", "code": "def add_int_to_tuple(test_tup, test_int):\n  test_tup = list(test_tup)\n  test_tup.append(test_int)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_9e0f978a-37a4-49df-bf13-7b218c10445a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a float to the tuple.", "code": "def add_float_to_tuple(test_tup, test_float):\n  test_tup = list(test_tup)\n  test_tup.append(test_float)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_2e580992-69d8-4dd3-a781-4bae8a3d9993", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a boolean to the tuple.", "code": "def add_bool_to_tuple(test_tup, test_bool):\n  test_tup = list(test_tup)\n  test_tup.append(test_bool)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_f384f138-2f63-4a1a-8388-e45fea12213a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a None value to the tuple.", "code": "def add_none_to_tuple(test_tup):\n  test_tup = list(test_tup)\n  test_tup.append(None)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_51c0ab3f-3d6a-4951-80de-2268a928f96f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add multiple items from a list to the tuple.", "code": "def add_multiple_items_to_tuple(test_tup, items):\n  test_tup = list(test_tup)\n  test_tup.extend(items)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_945b296c-e98d-48aa-b59d-05125646b3eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add an element at a specific index in the tuple.", "code": "def add_element_at_index(test_tup, element, index):\n  test_tup = list(test_tup)\n  test_tup.insert(index, element)\n  test_tup = tuple(test_tup)\n  return test_tup", "task_id": "720_23f81a2f-edea-4d14-ab1d-22601dec4c23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a minimum age which are stored in a dictionary.", "code": "def filter_students_by_age(students, min_age):\n    result = {k: s for k, s in students.items() if s[2] >= min_age}\n    return result", "task_id": "722_bbfdf68e-7245-4b65-b0c1-60eba1fe7492", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a minimum grade which are stored in a dictionary.", "code": "def filter_students_by_grade(students, min_grade):\n    result = {k: s for k, s in students.items() if s[3] >= min_grade}\n    return result", "task_id": "722_5e761337-2e6d-4369-87d4-9d5888f898c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a minimum length of their names which are stored in a dictionary.", "code": "def filter_students_by_name_length(students, min_length):\n    result = {k: s for k, s in students.items() if len(k) >= min_length}\n    return result", "task_id": "722_c0f7568a-9678-43a0-90dc-3828d8f00a32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students whose names start with a specific letter which are stored in a dictionary.", "code": "def filter_students_by_first_letter(students, letter):\n    result = {k: s for k, s in students.items() if k.startswith(letter)}\n    return result", "task_id": "722_34772e8c-45aa-467f-bbd1-1eab869a2d2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a height range which are stored in a dictionary.", "code": "def filter_students_by_height_range(students, min_height, max_height):\n    result = {k: s for k, s in students.items() if min_height <= s[0] <= max_height}\n    return result", "task_id": "722_533b3637-3311-46c5-bb76-30861779b208", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a weight range which are stored in a dictionary.", "code": "def filter_students_by_weight_range(students, min_weight, max_weight):\n    result = {k: s for k, s in students.items() if min_weight <= s[1] <= max_weight}\n    return result", "task_id": "722_acf37408-fb06-49aa-8b13-a6db649c5aa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a minimum age and grade which are stored in a dictionary.", "code": "def filter_students_by_age_and_grade(students, min_age, min_grade):\n    result = {k: s for k, s in students.items() if s[2] >= min_age and s[3] >= min_grade}\n    return result", "task_id": "722_17f94368-3d55-49fb-9cd4-57ab5c8ab2f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students by a minimum height and weight which are stored in a dictionary.", "code": "def filter_students_by_height_and_weight(students, min_height, min_weight):\n    result = {k: s for k, s in students.items() if s[0] >= min_height and s[1] >= min_weight}\n    return result", "task_id": "722_83ffb54c-1f12-4aad-b934-7c0f95e20971", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students whose names contain a specific substring and are above a minimum age which are stored in a dictionary.", "code": "def filter_students_by_name_and_age(students, name_substring, min_age):\n    result = {k: s for k, s in students.items() if name_substring in k and s[2] >= min_age}\n    return result", "task_id": "722_d2f3baea-cea2-473b-9798-730cc982a87c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter students whose names contain a specific substring and have a minimum grade which are stored in a dictionary.", "code": "def filter_students_by_name_and_grade(students, name_substring, min_grade):\n    result = {k: s for k, s in students.items() if name_substring in k and s[3] >= min_grade}\n    return result", "task_id": "722_94660cdf-2c23-4c1b-9eba-421ef2a53787", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using list comprehension.", "code": "def count_same_pair(nums1, nums2):\n    result = sum([1 for x, y in zip(nums1, nums2) if x == y])\n    return result", "task_id": "723_99b9b317-2fa9-4db6-a37a-c7b8ce62c2bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using a for loop.", "code": "def count_same_pair(nums1, nums2):\n    result = 0\n    for x, y in zip(nums1, nums2):\n        if x == y:\n            result += 1\n    return result", "task_id": "723_5ba4f2d2-59b1-4151-90e8-e46d2cd2f4f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using the filter function.", "code": "def count_same_pair(nums1, nums2):\n    result = len(list(filter(lambda pair: pair[0] == pair[1], zip(nums1, nums2))))\n    return result", "task_id": "723_3c606e02-74f9-4de2-9092-6b336073f243", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using a while loop.", "code": "def count_same_pair(nums1, nums2):\n    result = 0\n    i = 0\n    while i < len(nums1) and i < len(nums2):\n        if nums1[i] == nums2[i]:\n            result += 1\n        i += 1\n    return result", "task_id": "723_62028c82-ea32-4d91-8f1c-010236aeb341", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using recursion.", "code": "def count_same_pair(nums1, nums2):\n    if not nums1 or not nums2:\n        return 0\n    return (1 if nums1[0] == nums2[0] else 0) + count_same_pair(nums1[1:], nums2[1:])", "task_id": "723_0b10c7ea-08fa-4f08-989d-edca580cd764", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using numpy.", "code": "import numpy as np\n\ndef count_same_pair(nums1, nums2):\n    return np.sum(np.array(nums1) == np.array(nums2))", "task_id": "723_4efc12a1-faaa-45c2-8174-588cf8bab2e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using a dictionary to store counts.", "code": "def count_same_pair(nums1, nums2):\n    count_dict = {}\n    for x, y in zip(nums1, nums2):\n        if x == y:\n            count_dict[(x, y)] = count_dict.get((x, y), 0) + 1\n    return sum(count_dict.values())", "task_id": "723_b4abd12f-0aea-4130-a8f6-6a44a256d5e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using a set to store unique pairs.", "code": "def count_same_pair(nums1, nums2):\n    pairs = set()\n    for x, y in zip(nums1, nums2):\n        if x == y:\n            pairs.add((x, y))\n    return len(pairs)", "task_id": "723_18e4ca0b-5e5d-4813-9275-8a281debce8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using itertools.", "code": "from itertools import starmap\nfrom operator import eq\n\ndef count_same_pair(nums1, nums2):\n    return sum(starmap(eq, zip(nums1, nums2)))", "task_id": "723_c1c5d38c-0891-40e5-96d6-51f577d2c746", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the same pair in two given lists using a generator expression.", "code": "def count_same_pair(nums1, nums2):\n    return sum(1 for x, y in zip(nums1, nums2) if x == y)", "task_id": "723_3ec534bb-5cf8-45c3-868b-eee9e5c82407", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "724_65bcbf72-918d-460f-8030-638069a7517d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the product of all digits of a given number.", "code": "def product_of_digits(n: int) -> int:\n    product = 1\n    for digit in str(n):\n        product *= int(digit)\n    return product", "task_id": "724_e8b7fb2c-f8a4-4fc6-a12b-7f0d73696702", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of all digits of a given number.", "code": "def sum_of_squares_of_digits(n: int) -> int:\n    return sum(int(digit)**2 for digit in str(n))", "task_id": "724_da37f347-1fde-4fab-b2ec-d30334252aff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits in the factorial of a given number.", "code": "import math\n\ndef sum_of_digits_in_factorial(n: int) -> int:\n    return sum(int(digit) for digit in str(math.factorial(n)))", "task_id": "724_7b4c3013-741c-4d34-b00c-7bc5c14cb83c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the sum of two given numbers.", "code": "def sum_of_digits_of_sum(a: int, b: int) -> int:\n    return sum(int(digit) for digit in str(a + b))", "task_id": "724_6a9cb295-c7aa-435a-beba-e8e2c9ea8dc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the product of two given numbers.", "code": "def sum_of_digits_of_product(a: int, b: int) -> int:\n    return sum(int(digit) for digit in str(a * b))", "task_id": "724_d460f3d0-95e8-4df3-8550-059fe02c5b5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of a raised to the power of b.", "code": "def sum_of_digits_of_power(a: int, b: int) -> int:\n    return sum(int(digit) for digit in str(a ** b))", "task_id": "724_39f372be-5265-4ee6-a058-b478e2008008", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the double of a given number.", "code": "def sum_of_digits_of_double(n: int) -> int:\n    return sum(int(digit) for digit in str(n * 2))", "task_id": "724_e2e690f5-1805-4209-bf05-0596d6388d1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the square of a given number.", "code": "def sum_of_digits_of_square(n: int) -> int:\n    return sum(int(digit) for digit in str(n ** 2))", "task_id": "724_5d4249a0-cda7-47c8-90c3-32866fbf7842", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all digits of the cube of a given number.", "code": "def sum_of_digits_of_cube(n: int) -> int:\n    return sum(int(digit) for digit in str(n ** 3))", "task_id": "724_36a411b5-4d21-47cd-89ba-8f617e0c6ada", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract values between parentheses of the given string by using regex.", "code": "import re\ndef extract_parentheses(text):\n  return re.findall(r'\\((.*?)\\)', text)", "task_id": "725_b14ef2e7-c090-4eb4-86c3-1f997b068e6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract values between square brackets of the given string by using regex.", "code": "import re\ndef extract_brackets(text):\n  return re.findall(r'\\[(.*?)\\]', text)", "task_id": "725_9f20c57d-f9d6-47ee-be30-6c3ec8a8c36b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract values between curly braces of the given string by using regex.", "code": "import re\ndef extract_curly_braces(text):\n  return re.findall(r'\\{(.*?)\\}', text)", "task_id": "725_89425b00-efd1-418e-bc0e-2b5dec85123f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract values between single quotation marks of the given string by using regex.", "code": "import re\ndef extract_single_quotes(text):\n  return re.findall(r\"'(.*?)'\", text)", "task_id": "725_ffec60e8-5255-4445-81e4-6a4d09ace266", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract values between angle brackets of the given string by using regex.", "code": "import re\ndef extract_angle_brackets(text):\n  return re.findall(r'<(.*?)>', text)", "task_id": "725_92772a90-ac71-42cf-a847-916d8b78753a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all sequences of digits from the given string by using regex.", "code": "import re\ndef extract_digits(text):\n  return re.findall(r'\\d+', text)", "task_id": "725_f8a744fc-41d5-4324-ba05-7ae73bc42225", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all words from the given string by using regex.", "code": "import re\ndef extract_words(text):\n  return re.findall(r'\\b\\w+\\b', text)", "task_id": "725_5d97ac82-65da-492b-8ef7-d5f1a12cf10d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all email addresses from the given string by using regex.", "code": "import re\ndef extract_emails(text):\n  return re.findall(r'[\\w\\.-]+@[\\w\\.-]+\\.\\w+', text)", "task_id": "725_64e97437-8d38-48a4-a187-bd051ecbe7c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all URLs from the given string by using regex.", "code": "import re\ndef extract_urls(text):\n  return re.findall(r'https?://\\S+', text)", "task_id": "725_67b7c6a0-67bc-4c16-8421-58fb76f2de5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all hashtags from the given string by using regex.", "code": "import re\ndef extract_hashtags(text):\n  return re.findall(r'#(\\w+)', text)", "task_id": "725_9446dadc-042c-4834-8fca-2e769985cbb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n.", "code": "def maxSumPath(grid):\n    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][n-1]", "task_id": "721_f0ab892a-bb37-4322-8d6e-9a9ebf6fba66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the minimum sum over all existing paths for the given square matrix of size n*n.", "code": "def minSumPath(grid):\n    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = min(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][n-1]", "task_id": "721_2ae2661e-0cdf-46c0-bce3-1fba021977a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum product over all existing paths for the given square matrix of size n*n.", "code": "def maxProductPath(grid):\n    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] * grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] * grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) * grid[i][j]\n    return dp[n-1][n-1]", "task_id": "721_a4cc0eb9-29d5-4b37-ba09-e7d23fd645ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where some cells contain obstacles represented by -1.", "code": "def maxSumPathWithObstacles(grid):\n    n = len(grid)\n    dp = [[-1]*n for _ in range(n)]\n    if grid[0][0] == -1 or grid[n-1][n-1] == -1:\n        return -1\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        if grid[i][0] != -1:\n            dp[i][0] = dp[i-1][0] + grid[i][0] if dp[i-1][0] != -1 else -1\n    for j in range(1, n):\n        if grid[0][j] != -1:\n            dp[0][j] = dp[0][j-1] + grid[0][j] if dp[0][j-1] != -1 else -1\n    for i in range(1, n):\n        for j in range(1, n):\n            if grid[i][j] != -1:\n                from_top = dp[i-1][j] if dp[i-1][j] != -1 else -1\n                from_left = dp[i][j-1] if dp[i][j-1] != -1 else -1\n                dp[i][j] = max(from_top, from_left) + grid[i][j] if max(from_top, from_left) != -1 else -1\n    return dp[n-1][n-1]", "task_id": "721_9fb4757f-574c-4210-87e1-dfec630e6762", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where you can move right, down, or diagonally (down-right).", "code": "def maxSumPathWithDiagonal(grid):\n    n = len(grid)\n    dp = [[0]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + grid[i][j]\n    return dp[n-1][n-1]", "task_id": "721_543c405d-7081-411c-9c93-ea5a9e4090b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where you can move right or down up to k steps at a time.", "code": "def maxSumPathWithKSteps(grid, k):\n    n = len(grid)\n    dp = [[-float('inf')]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(n):\n        for j in range(n):\n            for step in range(1, k+1):\n                if i+step < n:\n                    dp[i+step][j] = max(dp[i+step][j], dp[i][j] + grid[i+step][j])\n                if j+step < n:\n                    dp[i][j+step] = max(dp[i][j+step], dp[i][j] + grid[i][j+step])\n    return dp[n-1][n-1]", "task_id": "721_c3b88a22-64d1-4294-b9f2-ef4819f953e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where some cells may contain negative values.", "code": "def maxSumPathWithNegative(grid):\n    n = len(grid)\n    dp = [[-float('inf')]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + grid[i][0]\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + grid[0][j]\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + grid[i][j]\n    return dp[n-1][n-1]", "task_id": "721_cc08fa67-e0fa-4b71-abad-dffa076db0d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, starting from a given start cell and ending at a given end cell.", "code": "def maxSumPathWithStartEnd(grid, start, end):\n    n = len(grid)\n    dp = [[-float('inf')]*n for _ in range(n)]\n    dp[start[0]][start[1]] = grid[start[0]][start[1]]\n    for i in range(start[0], n):\n        for j in range(start[1], n):\n            if i > start[0]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + grid[i][j])\n            if j > start[1]:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + grid[i][j])\n    return dp[end[0]][end[1]]", "task_id": "721_78752228-a158-4b9a-b68a-d0a7aadd265b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where some cells contain obstacles represented by -1, and you can move right, down, or diagonally (down-right).", "code": "def maxSumPathWithObstaclesAndDiagonal(grid):\n    n = len(grid)\n    dp = [[-1]*n for _ in range(n)]\n    if grid[0][0] == -1 or grid[n-1][n-1] == -1:\n        return -1\n    dp[0][0] = grid[0][0]\n    for i in range(1, n):\n        if grid[i][0] != -1:\n            dp[i][0] = dp[i-1][0] + grid[i][0] if dp[i-1][0] != -1 else -1\n    for j in range(1, n):\n        if grid[0][j] != -1:\n            dp[0][j] = dp[0][j-1] + grid[0][j] if dp[0][j-1] != -1 else -1\n    for i in range(1, n):\n        for j in range(1, n):\n            if grid[i][j] != -1:\n                from_top = dp[i-1][j] if dp[i-1][j] != -1 else -1\n                from_left = dp[i][j-1] if dp[i][j-1] != -1 else -1\n                from_diag = dp[i-1][j-1] if dp[i-1][j-1] != -1 else -1\n                dp[i][j] = max(from_top, from_left, from_diag) + grid[i][j] if max(from_top, from_left, from_diag) != -1 else -1\n    return dp[n-1][n-1]", "task_id": "721_98745955-6f92-4244-b0db-6ff237b18dd8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the path with the maximum sum over all existing paths for the given square matrix of size n*n, where you can move right or down by a variable number of steps specified in a list.", "code": "def maxSumPathWithVariableSteps(grid, steps):\n    n = len(grid)\n    dp = [[-float('inf')]*n for _ in range(n)]\n    dp[0][0] = grid[0][0]\n    for i in range(n):\n        for j in range(n):\n            for step in steps:\n                if i+step < n:\n                    dp[i+step][j] = max(dp[i+step][j], dp[i][j] + grid[i+step][j])\n                if j+step < n:\n                    dp[i][j+step] = max(dp[i][j+step], dp[i][j] + grid[i][j+step])\n    return dp[n-1][n-1]", "task_id": "721_4afc1d2b-cf9a-4fd0-a8ed-4c4662848d0f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(S):\n    vowels = 'aeiouAEIOU'\n    result = ''.join([char for char in S if char not in vowels])\n    return result", "task_id": "727_5925f79b-679a-4709-9a03-428d5ab45bde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all digits from a given string.", "code": "def remove_digits(S):\n    result = ''.join([char for char in S if not char.isdigit()])\n    return result", "task_id": "727_ba55ec0a-296e-43c6-985d-f2cbbac20bf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all consonants from a given string.", "code": "def remove_consonants(S):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    result = ''.join([char for char in S if char not in consonants])\n    return result", "task_id": "727_4b2a73a8-07b1-4bf8-b932-6fee28648216", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all uppercase letters from a given string.", "code": "def remove_uppercase(S):\n    result = ''.join([char for char in S if not char.isupper()])\n    return result", "task_id": "727_c4bfc04d-4e79-47b7-853d-a7b47ae8da77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all lowercase letters from a given string.", "code": "def remove_lowercase(S):\n    result = ''.join([char for char in S if not char.islower()])\n    return result", "task_id": "727_6dbeb150-3d7f-4713-89f5-884c4cc1adac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all whitespace characters from a given string.", "code": "def remove_whitespace(S):\n    result = ''.join(S.split())\n    return result", "task_id": "727_476af1c1-add9-4afe-bb8f-4e77f2e21783", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation characters from a given string.", "code": "import string\n\ndef remove_punctuation(S):\n    result = ''.join([char for char in S if char not in string.punctuation])\n    return result", "task_id": "727_aafe18f4-4de7-48bb-b9d6-8f65e234dbe2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all non-ASCII characters from a given string.", "code": "def remove_non_ascii(S):\n    result = ''.join([char for char in S if ord(char) < 128])\n    return result", "task_id": "727_7aa5b148-b3da-4427-980d-ff92ebee83ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all special characters (non-alphanumeric) from a given string.", "code": "import re\n\ndef remove_special_characters(S):\n    result = re.sub('[^a-zA-Z0-9]', '', S)\n    return result", "task_id": "727_c2fbbf86-c8ee-4a56-9150-5a3f34ada9b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all repeated characters from a given string.", "code": "def remove_repeated_characters(S):\n    seen = set()\n    result = ''.join([char for char in S if not (char in seen or seen.add(char))])\n    return result", "task_id": "727_485784eb-358d-4373-a62e-fdb979e154e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the adjacent elements of the given tuple.", "code": "def add_elements(test_tup):\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_751ddcaa-697d-42ed-863f-399d5dd013e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the adjacent elements of the given tuple.", "code": "def subtract_elements(test_tup):\n  res = tuple(i - j for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_f3ba381a-132e-44d0-8604-8aea4e6408bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the adjacent elements of the given tuple.", "code": "def divide_elements(test_tup):\n  res = tuple(i / j for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_3f5730f6-923c-4561-93c8-248141be04ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise the first element to the power of the second element for adjacent elements of the given tuple.", "code": "def power_elements(test_tup):\n  res = tuple(i ** j for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_d82c40af-6836-4045-9fcd-2abeee64ac38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the adjacent elements of the given tuple.", "code": "def mod_elements(test_tup):\n  res = tuple(i % j for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_960c60eb-a70d-4f44-979c-3ae4cd2fbcb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the adjacent elements of the given tuple.", "code": "def max_elements(test_tup):\n  res = tuple(max(i, j) for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_84333bb9-0d56-4b6b-a5cd-fc181e3a68a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the adjacent elements of the given tuple.", "code": "def min_elements(test_tup):\n  res = tuple(min(i, j) for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_486abbde-005d-4012-95d1-6044862c48e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of the adjacent elements of the given tuple.", "code": "def sum_of_squares_elements(test_tup):\n  res = tuple(i**2 + j**2 for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_7590ad41-a4d1-46c7-be87-1434774348c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the squares of the adjacent elements of the given tuple.", "code": "def product_of_squares_elements(test_tup):\n  res = tuple((i**2) * (j**2) for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_6ca2029a-b3a4-4843-acd7-17e4b5e2206a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the cubes of the adjacent elements of the given tuple.", "code": "def sum_of_cubes_elements(test_tup):\n  res = tuple(i**3 + j**3 for i, j in zip(test_tup, test_tup[1:]))\n  return res", "task_id": "726_8ed04f50-0149-4a3a-ac7b-ee9683c292a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply elements in two lists.", "code": "def multiply_list(lst1, lst2):\n  res_list = [lst1[i] * lst2[i] for i in range(len(lst1))]\n  return res_list", "task_id": "728_5c64a9d7-280a-456e-852b-d264cb355fa4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract elements in the second list from the first list.", "code": "def subtract_list(lst1, lst2):\n  res_list = [lst1[i] - lst2[i] for i in range(len(lst1))]\n  return res_list", "task_id": "728_2b9d9519-9a65-43b4-a465-b9e580a117b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide elements in the first list by the corresponding elements in the second list.", "code": "def divide_list(lst1, lst2):\n  res_list = [lst1[i] / lst2[i] for i in range(len(lst1))]\n  return res_list", "task_id": "728_d55376c4-158d-442c-b4b0-ca0392d9eaeb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists. If one list is shorter, use a default value for missing elements.", "code": "def sum_list_with_default(lst1, lst2, default):\n  max_len = max(len(lst1), len(lst2))\n  res_list = [(lst1[i] if i < len(lst1) else default) + (lst2[i] if i < len(lst2) else default) for i in range(max_len)]\n  return res_list", "task_id": "728_9626a0c8-4692-4e4c-a971-fd0216b90a58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists, skipping any None values.", "code": "def sum_list_skip_none(lst1, lst2):\n  res_list = [(lst1[i] if lst1[i] is not None else 0) + (lst2[i] if lst2[i] is not None else 0) for i in range(len(lst1))]\n  return res_list", "task_id": "728_32c575a2-c694-44df-a728-93e67eb57b22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists, but add the index to each sum.", "code": "def sum_list_with_indices(lst1, lst2):\n  res_list = [lst1[i] + lst2[i] + i for i in range(len(lst1))]\n  return res_list", "task_id": "728_fcaefcc6-f489-4f96-9a73-9120576e2a1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists only if the sum is greater than a given condition.", "code": "def sum_list_with_condition(lst1, lst2, condition):\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1)) if lst1[i] + lst2[i] > condition]\n  return res_list", "task_id": "728_7b86c42f-1860-453a-b40f-d6e8d80e6dc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists, but replace sums greater than a threshold with the threshold value.", "code": "def sum_list_with_threshold(lst1, lst2, threshold):\n  res_list = [min(lst1[i] + lst2[i], threshold) for i in range(len(lst1))]\n  return res_list", "task_id": "728_7b1fc343-3add-4977-b976-ec4b2d7122d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists and then take the result modulo a given number.", "code": "def sum_list_with_modulo(lst1, lst2, modulo):\n  res_list = [(lst1[i] + lst2[i]) % modulo for i in range(len(lst1))]\n  return res_list", "task_id": "728_741b03d9-d978-438a-b563-3bcbee0af5d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum elements in two lists, but alternate the sign of the sums (positive, negative, positive, etc.).", "code": "def sum_list_with_alternating_sign(lst1, lst2):\n  res_list = [(lst1[i] + lst2[i]) * (-1)**i for i in range(len(lst1))]\n  return res_list", "task_id": "728_434ecfbb-f115-4ad7-a041-2345b58a334e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply two lists element-wise using map and lambda function.", "code": "def multiply_list(nums1, nums2):\n  result = map(lambda x, y: x * y, nums1, nums2)\n  return list(result)", "task_id": "729_593e1db1-e352-4658-a95f-3d1e428a2791", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the second list from the first list element-wise using map and lambda function.", "code": "def subtract_list(nums1, nums2):\n  result = map(lambda x, y: x - y, nums1, nums2)\n  return list(result)", "task_id": "729_3edbdca0-a486-40e0-964f-69bff36a04b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the first list by the second list element-wise using map and lambda function.", "code": "def divide_list(nums1, nums2):\n  result = map(lambda x, y: x / y, nums1, nums2)\n  return list(result)", "task_id": "729_f808b090-01f7-4036-afe1-d1bd4de14f7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise elements of the first list to the power of the corresponding elements in the second list using map and lambda function.", "code": "def power_list(nums1, nums2):\n  result = map(lambda x, y: x ** y, nums1, nums2)\n  return list(result)", "task_id": "729_33a34016-5572-4ea3-92e9-e6912f0ea719", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two lists of strings element-wise using map and lambda function.", "code": "def concat_list(strs1, strs2):\n  result = map(lambda x, y: x + y, strs1, strs2)\n  return list(result)", "task_id": "729_2b41138c-d9fc-4926-84b1-40430a45dcbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the first list by the second list element-wise using map and lambda function.", "code": "def mod_list(nums1, nums2):\n  result = map(lambda x, y: x % y, nums1, nums2)\n  return list(result)", "task_id": "729_94dec026-414e-42d0-8566-020e7f028797", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two lists element-wise using map and lambda function.", "code": "def max_list(nums1, nums2):\n  result = map(lambda x, y: max(x, y), nums1, nums2)\n  return list(result)", "task_id": "729_55c17b4b-b0df-4fda-bff8-e2749b34c2b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two lists element-wise using map and lambda function.", "code": "def min_list(nums1, nums2):\n  result = map(lambda x, y: min(x, y), nums1, nums2)\n  return list(result)", "task_id": "729_0d85d134-edc9-450a-9453-583c3341c40e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between two lists element-wise using map and lambda function.", "code": "def abs_diff_list(nums1, nums2):\n  result = map(lambda x, y: abs(x - y), nums1, nums2)\n  return list(result)", "task_id": "729_0dae0913-0401-4ea7-b40d-83c239322f97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate two lists of strings element-wise with a space between them using map and lambda function.", "code": "def concat_with_space_list(strs1, strs2):\n  result = map(lambda x, y: x + ' ' + y, strs1, strs2)\n  return list(result)", "task_id": "729_0a68dd76-125c-4332-a68e-0f2989b5ff6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a cylinder.", "code": "import math\ndef surface_area_cylinder(r, h):\n  SA = 2 * math.pi * r * (r + h)\n  return SA", "task_id": "731_ba6b569b-6bf0-4efc-a1ef-c5629d372290", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a sphere.", "code": "import math\ndef volume_sphere(r):\n  V = (4/3) * math.pi * r**3\n  return V", "task_id": "731_b08ba0e0-029f-4ab7-aa56-49f090a81107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(l, w):\n  A = l * w\n  return A", "task_id": "731_8bacdfc6-5213-43c0-8ff9-a54eecacd95d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a triangle given its three sides.", "code": "def perimeter_triangle(a, b, c):\n  P = a + b + c\n  return P", "task_id": "731_8e61718c-5db6-450b-afb0-dfc5e32ef767", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\ndef volume_cylinder(r, h):\n  V = math.pi * r**2 * h\n  return V", "task_id": "731_1d7b65a3-85c9-4dfc-8f6d-513896c9b239", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle given its base and height.", "code": "def area_triangle(base, height):\n  A = 0.5 * base * height\n  return A", "task_id": "731_e206564e-413f-455f-bac4-1001834b4736", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the circumference of a circle.", "code": "import math\ndef circumference_circle(r):\n  C = 2 * math.pi * r\n  return C", "task_id": "731_21a7bf81-8598-4e2e-98ce-89f562ad8da3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the surface area of a sphere.", "code": "import math\ndef surface_area_sphere(r):\n  SA = 4 * math.pi * r**2\n  return SA", "task_id": "731_29cc6f08-f66a-49ea-b46a-58fd82df3704", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def area_parallelogram(base, height):\n  A = base * height\n  return A", "task_id": "731_57aa859b-605e-4813-b967-333503e3a72d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cone.", "code": "import math\ndef volume_cone(r, h):\n  V = (1/3) * math.pi * r**2 * h\n  return V", "task_id": "731_99dff434-e449-4d80-9af6-edd2174a8ffa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate characters from a given string.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates(s):\n    return ''.join(key for key, group in groupby(s))", "task_id": "730_17dcc108-efa4-4d4c-a164-a49a8aab04c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate tuples from a given list of tuples.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_from_tuples(lst):\n    return [key for key, group in groupby(lst)]", "task_id": "730_2f1389e8-bcee-4156-9350-202ada31a27a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate characters from a given string, ignoring case.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_ignore_case(s):\n    return ''.join(key for key, group in groupby(s, key=str.lower))", "task_id": "730_68d19e2f-b946-49b2-8607-1fb7679dd3e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate nested lists from a given list of lists.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_nested_lists(lst):\n    return [key for key, group in groupby(lst)]", "task_id": "730_ed1c4d3e-2984-472e-be32-4f59d890640b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate dictionaries from a given list of dictionaries.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_dicts(lst):\n    return [key for key, group in groupby(lst)]", "task_id": "730_988fd3d9-97ba-4f82-9667-74b79adaf332", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate elements from a given list containing mixed data types.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_mixed(lst):\n    return [key for key, group in groupby(lst)]", "task_id": "730_d07ed95d-6ad8-46de-806b-0405ed60fa02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate elements from a given list, considering elements with the same length as duplicates.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_length(lst):\n    return [key for key, group in groupby(lst, key=len)]", "task_id": "730_c7f7b56d-c2ed-4b34-b282-a89c31acf056", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate elements from a given list, using a custom key function to determine duplicates.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_custom(lst, key_func):\n    return [key for key, group in groupby(lst, key=key_func)]", "task_id": "730_04fc2874-1dc2-4ea7-a1c1-50f1e62ed302", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate elements from a given list and return a list of tuples where each tuple contains the element and its count.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_with_count(lst):\n    return [(key, len(list(group))) for key, group in groupby(lst)]", "task_id": "730_b7ff96d5-5d31-485c-a93f-018a2aef4f94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicate elements from a given list and return a list of tuples where each tuple contains the element and its starting index in the original list.", "code": "from itertools import groupby\n\ndef remove_consecutive_duplicates_with_indices(lst):\n    result = []\n    index = 0\n    for key, group in groupby(lst):\n        result.append((key, index))\n        index += len(list(group))\n    return result", "task_id": "730_4444dcba-3e61-4e02-9557-2bad37cf3591", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a given number in a sorted array.", "code": "def find_last_occurrence(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if x == A[mid]:\n            result = mid\n            left = mid + 1\n        elif x < A[mid]:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_00dc92aa-d33b-406e-97b1-edb7639b26e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element greater than a given number in a sorted array.", "code": "def find_first_greater(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] > x:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_4049ea0c-7e13-4d15-9bab-de01e518c5df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element smaller than a given number in a sorted array.", "code": "def find_first_smaller(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] < x:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "733_e0a15ef4-1ca5-40a9-bb32-3d0bb627432a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the element closest to a given number in a sorted array.", "code": "def find_closest(A, x):\n    (left, right) = (0, len(A) - 1)\n    closest_index = -1\n    closest_diff = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        diff = abs(A[mid] - x)\n        if diff < closest_diff:\n            closest_diff = diff\n            closest_index = mid\n        if A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return closest_index", "task_id": "733_ff123aab-0efd-4b4a-ada6-9c3ce00781f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the start and end indices of a given number in a sorted array.", "code": "def find_range(A, x):\n    def find_first():\n        (left, right) = (0, len(A) - 1)\n        result = -1\n        while left <= right:\n            mid = (left + right) // 2\n            if x == A[mid]:\n                result = mid\n                right = mid - 1\n            elif x < A[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return result\n    def find_last():\n        (left, right) = (0, len(A) - 1)\n        result = -1\n        while left <= right:\n            mid = (left + right) // 2\n            if x == A[mid]:\n                result = mid\n                left = mid + 1\n            elif x < A[mid]:\n                right = mid - 1\n            else:\n                left = mid + 1\n        return result\n    return (find_first(), find_last())", "task_id": "733_0c8573de-e2a9-4db8-881d-a6c5f7de6c6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element not smaller than a given number in a sorted array.", "code": "def find_first_not_smaller(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] >= x:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_9ba52a38-79e7-40a1-857e-79ec84909f3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element not greater than a given number in a sorted array.", "code": "def find_first_not_greater(A, x):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] <= x:\n            result = mid\n            left = mid + 1\n        else:\n            right = mid - 1\n    return result", "task_id": "733_4bb03cc4-f479-4e33-9efd-68f51d0c4813", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first even number in a sorted array.", "code": "def find_first_even(A):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 == 0:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_043f6cc4-4744-4ead-94ec-7dd2749e4264", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first odd number in a sorted array.", "code": "def find_first_odd(A):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if A[mid] % 2 != 0:\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_f6453bbc-1973-4e61-930a-ad5ca58fa234", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first prime number in a sorted array.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_first_prime(A):\n    (left, right) = (0, len(A) - 1)\n    result = -1\n    while left <= right:\n        mid = (left + right) // 2\n        if is_prime(A[mid]):\n            result = mid\n            right = mid - 1\n        else:\n            left = mid + 1\n    return result", "task_id": "733_ec96c0e0-08c5-4eae-add4-166665cb2f7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the maximum elements of all possible subarrays.", "code": "def sum_of_subarray_max(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        max_val = arr[i]\n        for j in range(i, n):\n            max_val = max(max_val, arr[j])\n            result += max_val\n    return result", "task_id": "734_8973c5ba-49d7-434d-9525-9042644f44eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the minimum elements of all possible subarrays.", "code": "def sum_of_subarray_min(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        min_val = arr[i]\n        for j in range(i, n):\n            min_val = min(min_val, arr[j])\n            result += min_val\n    return result", "task_id": "734_a8774385-bc5b-488a-88c8-63d746bd11cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all possible subarrays.", "code": "def sum_of_subarray_squares(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            result += sum(x ** 2 for x in subarray)\n    return result", "task_id": "734_0692b200-3249-4b17-bc18-00f1b46bfa40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the lengths of all possible subarrays.", "code": "def sum_of_subarray_lengths(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            result += (j - i + 1)\n    return result", "task_id": "734_f5530ab6-744f-45a7-9931-139980015d6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the averages of all possible subarrays.", "code": "def sum_of_subarray_averages(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            result += sum(subarray) / len(subarray)\n    return result", "task_id": "734_82f54049-5a10-4920-8311-204c5b94e94d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the medians of all possible subarrays.", "code": "def sum_of_subarray_medians(arr):\n    from statistics import median\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            result += median(subarray)\n    return result", "task_id": "734_5ac66eff-1e75-49fd-bbea-a7d473f28777", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the variances of all possible subarrays.", "code": "def sum_of_subarray_variances(arr):\n    from statistics import variance\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            if len(subarray) > 1:\n                result += variance(subarray)\n    return result", "task_id": "734_fe9e739c-d881-4c0d-8b78-7faf372839aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the products of all possible subarrays.", "code": "def sum_of_subarray_products(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            product = 1\n            for num in subarray:\n                product *= num\n            result += product\n    return result", "task_id": "734_ee86b7b5-b6a6-4d5a-9a37-a9c3f4568302", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the differences between the maximum and minimum elements of all possible subarrays.", "code": "def sum_of_subarray_diffs(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            result += max(subarray) - min(subarray)\n    return result", "task_id": "734_8b24e271-5cbf-4d96-8a2c-3aee9c6481fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the sums of all possible subarrays.", "code": "def sum_of_subarray_sums(arr):\n    n = len(arr)\n    result = 0\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            result += sum(subarray)\n    return result", "task_id": "734_48b8238b-6611-41d7-b1e6-b0dcbd445960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first occurrence of a specified value in a sorted list.", "code": "import bisect\n\ndef find_first_occurrence(arr, target):\n    i = bisect.bisect_left(arr, target)\n    if i != len(arr) and arr[i] == target:\n        return i\n    return -1", "task_id": "736_13a11387-9792-46a5-8310-8d34b5bb5416", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last occurrence of a specified value in a sorted list.", "code": "import bisect\n\ndef find_last_occurrence(arr, target):\n    i = bisect.bisect_right(arr, target)\n    if i > 0 and arr[i-1] == target:\n        return i-1\n    return -1", "task_id": "736_7b90b02d-9a4b-417a-81ac-b83f9fb6963d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest value to a specified value in a sorted list.", "code": "import bisect\n\ndef find_closest_value(arr, target):\n    pos = bisect.bisect_left(arr, target)\n    if pos == 0:\n        return arr[0]\n    if pos == len(arr):\n        return arr[-1]\n    before = arr[pos - 1]\n    after = arr[pos]\n    if after - target < target - before:\n        return after\n    else:\n        return before", "task_id": "736_dd5bdc48-dd72-4a7d-85a1-bf209607982e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert a value into a sorted list while maintaining the list's sorted order.", "code": "import bisect\n\ndef insert_value(arr, value):\n    bisect.insort(arr, value)\n    return arr", "task_id": "736_4aeb82c6-019d-473a-b251-f7d1ef6574f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the starting and ending position of a given target value in a sorted list.", "code": "import bisect\n\ndef find_range(arr, target):\n    left = bisect.bisect_left(arr, target)\n    right = bisect.bisect_right(arr, target) - 1\n    if left <= right:\n        return (left, right)\n    return (-1, -1)", "task_id": "736_062116ee-2988-41c9-85c5-0307ac4d2bf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of a specified value in a sorted list.", "code": "import bisect\n\ndef count_occurrences(arr, target):\n    left = bisect.bisect_left(arr, target)\n    right = bisect.bisect_right(arr, target)\n    return right - left", "task_id": "736_69476cab-aee8-4fa9-9585-796eef6c0f65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the smallest value in a sorted list that is larger than a specified value.", "code": "import bisect\n\ndef find_smallest_larger(arr, target):\n    pos = bisect.bisect_right(arr, target)\n    if pos < len(arr):\n        return arr[pos]\n    return -1", "task_id": "736_7343dc3e-a8bd-444a-932e-8f66ea5fdb04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest value in a sorted list that is smaller than a specified value.", "code": "import bisect\n\ndef find_largest_smaller(arr, target):\n    pos = bisect.bisect_left(arr, target)\n    if pos > 0:\n        return arr[pos - 1]\n    return -1", "task_id": "736_b55c7004-0edb-4c94-aba9-d96af5dd810c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "import bisect\n\ndef merge_sorted_lists(a, b):\n    result = []\n    for x in a:\n        bisect.insort(result, x)\n    for x in b:\n        bisect.insort(result, x)\n    return result", "task_id": "736_f8167360-fb37-466a-b9b7-f1b67112727a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest element in a sorted list.", "code": "def find_kth_smallest(a, k):\n    if 0 <= k < len(a):\n        return a[k]\n    return -1", "task_id": "736_fa40f841-1f6b-4145-af03-7b5148fc3e42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a number except the first and the last bit.", "code": "def reverse_bits_except_first_and_last(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    reversed_middle_bits = middle_bits[::-1]\n    new_bin_str = bin_str[0] + reversed_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_e99a6376-3955-43b8-9554-b29711425b83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set all bits of a number except the first and the last bit.", "code": "def set_bits_except_first_and_last(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = '1' * (len(bin_str) - 2)\n    new_bin_str = bin_str[0] + middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_ce2140c9-c3fa-4829-aa51-df72e1d25445", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all bits of a number except the first and the last bit.", "code": "def clear_bits_except_first_and_last(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = '0' * (len(bin_str) - 2)\n    new_bin_str = bin_str[0] + middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_9b15df44-00c0-4d3c-95a7-03cd0f0e5246", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits of a number except the first and the last bit.", "code": "def toggle_bits_except_first_and_last(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = ''.join('1' if x == '0' else '0' for x in bin_str[1:-1])\n    new_bin_str = bin_str[0] + middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_cd705c60-29d8-42ed-9823-f5ffabc76bb5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap every two middle bits of a number except the first and the last bit.", "code": "def swap_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    swapped_middle_bits = ''.join(middle_bits[i:i+2][::-1] for i in range(0, len(middle_bits), 2))\n    new_bin_str = bin_str[0] + swapped_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_0704110c-5512-45ff-8149-19e235a8f6fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to left shift all middle bits of a number except the first and the last bit.", "code": "def shift_middle_bits_left(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    shifted_middle_bits = middle_bits[1:] + '0'\n    new_bin_str = bin_str[0] + shifted_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_b318d8b6-cdf8-4846-9cbd-16ad9186c789", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to right shift all middle bits of a number except the first and the last bit.", "code": "def shift_middle_bits_right(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    shifted_middle_bits = '0' + middle_bits[:-1]\n    new_bin_str = bin_str[0] + shifted_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_8a33b188-72cd-46b2-b26c-f5486b962763", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to left rotate all middle bits of a number except the first and the last bit.", "code": "def rotate_middle_bits_left(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    rotated_middle_bits = middle_bits[1:] + middle_bits[0]\n    new_bin_str = bin_str[0] + rotated_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_3aadb322-3b6b-48f8-9d01-501029da0f4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to right rotate all middle bits of a number except the first and the last bit.", "code": "def rotate_middle_bits_right(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = bin_str[1:-1]\n    rotated_middle_bits = middle_bits[-1] + middle_bits[:-1]\n    new_bin_str = bin_str[0] + rotated_middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_1d373424-e4a3-4809-b906-0e9238a5e38f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to invert all middle bits of a number except the first and the last bit.", "code": "def invert_middle_bits(n: int) -> int:\n    if n < 4:\n        return n\n    bin_str = bin(n)[2:]\n    middle_bits = ''.join('1' if x == '0' else '0' for x in bin_str[1:-1])\n    new_bin_str = bin_str[0] + middle_bits + bin_str[-1]\n    return int(new_bin_str, 2)", "task_id": "735_6b2a65f7-e850-4ebf-b078-d5fb225589ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "737_2fb9eae5-2771-4377-9f3f-850c91b65aac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "737_534bc4c1-7045-4696-9bbb-5099e8af0c4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "737_04568b27-8001-4e26-b37f-6f06877a7ad4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "737_e7db3ec8-6397-4814-8cef-f106973fbe67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "737_4d80cbe2-545a-4e12-97f9-0641b6a5ecb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "737_d230da34-ec26-4cb4-9e76-cece49aa4851", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a given string.", "code": "def remove_vowels(s: str) -> str:\n    return ''.join(char for char in s if char.lower() not in 'aeiou')", "task_id": "737_f0b1f2f7-dddf-4418-ba28-3079521e595f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether one string is a substring of another.", "code": "def is_substring(s1: str, s2: str) -> bool:\n    return s1 in s2", "task_id": "737_d919a3b0-be18-4c43-aede-6af603998a9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a given string with underscores.", "code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "737_8b3b2dda-2bbd-4b98-bb3f-df235cd9908a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a given character in a string.", "code": "def count_char(s: str, char: str) -> int:\n    return s.count(char)", "task_id": "737_51de7d32-e92e-4482-bac8-3c861c4efcd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of numbers from 0 to n.", "code": "def factorial_sum(n):\n  def factorial(x):\n    if x == 0:\n      return 1\n    else:\n      return x * factorial(x - 1)\n  return sum(factorial(i) for i in range(n + 1))", "task_id": "738_eee97124-3a7d-4228-b8f8-c091aaff5fe6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n natural numbers.", "code": "def arithmetic_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return n * (n + 1) // 2", "task_id": "738_d5c25527-2569-42eb-8c3a-0a5ab05ee84d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the harmonic sum of the first n natural numbers.", "code": "def harmonic_sum(n):\n  if n < 1:\n    return 0\n  else:\n    return sum(1 / i for i in range(1, n + 1))", "task_id": "738_d8b9597a-fe3e-48d2-a2aa-4e8b960a7a91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def fibonacci_sum(n):\n  a, b = 0, 1\n  total = 0\n  for _ in range(n):\n    total += a\n    a, b = b, a + b\n  return total", "task_id": "738_9f24a4ff-1075-4819-bba9-5e83da887f42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n natural numbers.", "code": "def square_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return sum(i * i for i in range(n + 1))", "task_id": "738_3b20d764-7c12-4607-bf2b-308041696ad4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of the first n natural numbers.", "code": "def cube_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return sum(i * i * i for i in range(n + 1))", "task_id": "738_859b995b-a3ea-4399-ac80-11721ffff94d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the alternating sum of the first n natural numbers (i.e., 1 - 2 + 3 - 4 + ...).", "code": "def alternating_sum(n):\n  if n < 0:\n    return 0\n  else:\n    return sum((-1) ** (i + 1) * i for i in range(1, n + 1))", "task_id": "738_a6f48fd1-664a-4636-b145-5539b49a19a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of n factorial.", "code": "def factorial_digit_sum(n):\n  def factorial(x):\n    if x == 0:\n      return 1\n    else:\n      return x * factorial(x - 1)\n  return sum(int(digit) for digit in str(factorial(n)))", "task_id": "738_11eee2da-437a-4fa7-ba01-5cfa8b6e3271", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n prime numbers.", "code": "def prime_sum(n):\n  def is_prime(x):\n    if x < 2:\n      return False\n    for i in range(2, int(x ** 0.5) + 1):\n      if x % i == 0:\n        return False\n    return True\n  primes = []\n  num = 2\n  while len(primes) < n:\n    if is_prime(num):\n      primes.append(num)\n    num += 1\n  return sum(primes)", "task_id": "738_b91c8b85-1eb3-40cd-b218-26f8ebc38605", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n triangular numbers.", "code": "def triangular_sum(n):\n  def triangular(x):\n    return x * (x + 1) // 2\n  return sum(triangular(i) for i in range(1, n + 1))", "task_id": "738_504aaec5-d913-4fae-a2f8-e0b7a2554e31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the largest triangular number with n digits.", "code": "import math\ndef find_index_of_largest_triangular_number(n):\n    x = math.sqrt(2 * (math.pow(10, n) - 1))\n    return round(x)", "task_id": "739_70db68c5-56bb-4bd1-b0ca-3642c5e69ea4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the smallest square number with n digits.", "code": "import math\ndef find_index_of_smallest_square_number(n):\n    x = math.ceil(math.sqrt(math.pow(10, n - 1)))\n    return x", "task_id": "739_de198ec2-e4d5-4cc2-b8b0-6473cba3de5b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the largest square number with n digits.", "code": "import math\ndef find_index_of_largest_square_number(n):\n    x = math.floor(math.sqrt(math.pow(10, n) - 1))\n    return x", "task_id": "739_9fd55300-b52e-491a-bd8d-41c7d718507b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the smallest pentagonal number with n digits.", "code": "import math\ndef find_index_of_smallest_pentagonal_number(n):\n    x = (1 + math.sqrt(1 + 24 * math.pow(10, n - 1))) / 6\n    return math.ceil(x)", "task_id": "739_8b3047fd-5ae8-4b81-9d7a-78467d1a60a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the largest pentagonal number with n digits.", "code": "import math\ndef find_index_of_largest_pentagonal_number(n):\n    x = (1 + math.sqrt(1 + 24 * (math.pow(10, n) - 1))) / 6\n    return math.floor(x)", "task_id": "739_20d69571-6723-465c-8ee3-68dcd8485a07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the smallest hexagonal number with n digits.", "code": "import math\ndef find_index_of_smallest_hexagonal_number(n):\n    x = (1 + math.sqrt(1 + 8 * math.pow(10, n - 1))) / 4\n    return math.ceil(x)", "task_id": "739_fc1769f1-2382-41f8-8049-833351ac0b94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the largest hexagonal number with n digits.", "code": "import math\ndef find_index_of_largest_hexagonal_number(n):\n    x = (1 + math.sqrt(1 + 8 * (math.pow(10, n) - 1))) / 4\n    return math.floor(x)", "task_id": "739_5c43bcc1-9a5f-439e-83dc-adbadf3a8630", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the smallest heptagonal number with n digits.", "code": "import math\ndef find_index_of_smallest_heptagonal_number(n):\n    x = (3 + math.sqrt(9 + 40 * math.pow(10, n - 1))) / 10\n    return math.ceil(x)", "task_id": "739_2489f75d-7218-4676-894b-9e6f046e69f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the largest heptagonal number with n digits.", "code": "import math\ndef find_index_of_largest_heptagonal_number(n):\n    x = (3 + math.sqrt(9 + 40 * (math.pow(10, n) - 1))) / 10\n    return math.floor(x)", "task_id": "739_e57a6b93-311f-4bfc-8cd4-0db846c6cac7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the smallest octagonal number with n digits.", "code": "import math\ndef find_index_of_smallest_octagonal_number(n):\n    x = (2 + math.sqrt(4 + 12 * math.pow(10, n - 1))) / 6\n    return math.ceil(x)", "task_id": "739_e61d9696-f6e2-4075-a0c5-6105edc3c412", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a key-value dictionary using adjacent elements.", "code": "def list_to_dict(lst):\n    res = {lst[i]: lst[i + 1] for i in range(0, len(lst), 2)}\n    return res", "task_id": "740_7a59f7fe-ce12-40a9-b150-3329bbc445b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string to a key-value dictionary using adjacent characters.", "code": "def string_to_dict(s):\n    res = {s[i]: s[i + 1] for i in range(0, len(s), 2)}\n    return res", "task_id": "740_15a15601-f41e-4a2a-a28c-71b27862fb9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements. If the tuple has an odd number of elements, use the given default value for the last key.", "code": "def tuple_to_dict_with_default(test_tup, default_value):\n    res = {test_tup[i]: test_tup[i + 1] if i + 1 < len(test_tup) else default_value for i in range(0, len(test_tup), 2)}\n    return res", "task_id": "740_5b6fc76d-827d-4d45-aa2f-20d4b24529a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a key-value dictionary using adjacent elements. If the list has an odd number of elements, use the given default value for the last key.", "code": "def list_to_dict_with_default(lst, default_value):\n    res = {lst[i]: lst[i + 1] if i + 1 < len(lst) else default_value for i in range(0, len(lst), 2)}\n    return res", "task_id": "740_c07fc67e-3d77-473c-a8f7-3e2e8faf879d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string to a key-value dictionary using adjacent characters. If the string has an odd number of characters, use the given default value for the last key.", "code": "def string_to_dict_with_default(s, default_value):\n    res = {s[i]: s[i + 1] if i + 1 < len(s) else default_value for i in range(0, len(s), 2)}\n    return res", "task_id": "740_0657dc04-2fff-4886-a80f-5ca39ca10fb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a key-value dictionary using every second element as the key and the next element as the value.", "code": "def tuple_to_dict_skip(test_tup):\n    res = {test_tup[i]: test_tup[i + 1] for i in range(0, len(test_tup) - 1, 2)}\n    return res", "task_id": "740_bc96155e-7798-4fcb-a8f0-4c5615c91bae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a key-value dictionary using every second element as the key and the next element as the value.", "code": "def list_to_dict_skip(lst):\n    res = {lst[i]: lst[i + 1] for i in range(0, len(lst) - 1, 2)}\n    return res", "task_id": "740_d3d9508e-51f0-483f-8b0e-28df768fb6d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string to a key-value dictionary using every second character as the key and the next character as the value.", "code": "def string_to_dict_skip(s):\n    res = {s[i]: s[i + 1] for i in range(0, len(s) - 1, 2)}\n    return res", "task_id": "740_0b42ad27-f88a-40f4-bc9a-e6787edf29e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements, but with the second element as the key and the first element as the value.", "code": "def tuple_to_dict_reverse(test_tup):\n    res = {test_tup[i + 1]: test_tup[i] for i in range(0, len(test_tup), 2)}\n    return res", "task_id": "740_49a5ad30-5a85-483f-a9cc-6209d380913e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list to a key-value dictionary using adjacent elements, but with the second element as the key and the first element as the value.", "code": "def list_to_dict_reverse(lst):\n    res = {lst[i + 1]: lst[i] for i in range(0, len(lst), 2)}\n    return res", "task_id": "740_a0fd8eb1-4654-4ac8-bb3a-d40689c4a130", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cube.", "code": "def volume_cube(side):\n  return side ** 3", "task_id": "742_0d3d4493-0f7f-4e40-8991-3d17d716183b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle.", "code": "import math\n\ndef area_circle(radius):\n  return math.pi * (radius ** 2)", "task_id": "742_ae471199-dc88-47fe-b324-a690a3864dda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a square.", "code": "def perimeter_square(side):\n  return 4 * side", "task_id": "742_5b7b49b7-1390-43d9-af7c-b833e4d5d1b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a sphere.", "code": "import math\n\ndef volume_sphere(radius):\n  return (4/3) * math.pi * (radius ** 3)", "task_id": "742_788ee7c1-d194-4322-8657-3a6f1744db7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a rectangle.", "code": "def area_rectangle(length, width):\n  return length * width", "task_id": "742_81fe3ad9-80f6-4a01-8d67-b7349f80a214", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a triangle given its three sides.", "code": "def perimeter_triangle(a, b, c):\n  return a + b + c", "task_id": "742_79ca0323-4c4c-4bf0-815d-ef4d36941240", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a parallelogram.", "code": "def area_parallelogram(base, height):\n  return base * height", "task_id": "742_4068f33b-01e0-4b00-b44f-509343d861e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the volume of a cylinder.", "code": "import math\n\ndef volume_cylinder(radius, height):\n  return math.pi * (radius ** 2) * height", "task_id": "742_a45ab20b-82e4-4145-a09d-a7660c64bf58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a trapezoid.", "code": "def area_trapezoid(a, b, height):\n  return 0.5 * (a + b) * height", "task_id": "742_62de0c1a-28ec-493c-81b4-6a185ffd9fd0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the surface area of a cube.", "code": "def surface_area_cube(side):\n  return 6 * (side ** 2)", "task_id": "742_7ec2c25d-1d96-4b74-9049-b4a24165ce43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring case.", "code": "def all_Characters_Same_Case_Insensitive(s: str) -> bool:\n    s = s.lower()\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_c9b3a527-ed72-433d-9a56-6614194e4aa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring spaces.", "code": "def all_Characters_Same_Except_Spaces(s: str) -> bool:\n    s = s.replace(' ', '')\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_33aef9ec-3a27-4817-852b-64316a0819ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring digits.", "code": "def all_Characters_Same_Ignore_Digits(s: str) -> bool:\n    s = ''.join([c for c in s if not c.isdigit()])\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_74749c45-f8f9-4578-85fd-ebb4ea2d06df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring punctuation.", "code": "import string\n\ndef all_Characters_Same_Ignore_Punctuation(s: str) -> bool:\n    s = ''.join([c for c in s if c not in string.punctuation])\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_73101651-4f93-4c21-970c-b6f4db19bef4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring vowels.", "code": "def all_Characters_Same_Ignore_Vowels(s: str) -> bool:\n    vowels = 'aeiouAEIOU'\n    s = ''.join([c for c in s if c not in vowels])\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_95e9a799-b449-4629-8818-62c11ea93f89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring consonants.", "code": "def all_Characters_Same_Ignore_Consonants(s: str) -> bool:\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    s = ''.join([c for c in s if c not in consonants])\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_e4cfddb4-e116-4317-a1a1-bbdd1d99da15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring case and spaces.", "code": "def all_Characters_Same_Ignore_Case_And_Spaces(s: str) -> bool:\n    s = s.replace(' ', '').lower()\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_2bef0913-bd1a-4976-89c4-e492c925e3f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring case and digits.", "code": "def all_Characters_Same_Ignore_Case_And_Digits(s: str) -> bool:\n    s = ''.join([c for c in s if not c.isdigit()]).lower()\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_fd437dee-47ba-4c53-be74-12fae1f78274", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring case and punctuation.", "code": "import string\n\ndef all_Characters_Same_Ignore_Case_And_Punctuation(s: str) -> bool:\n    s = ''.join([c for c in s if c not in string.punctuation]).lower()\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_a431cbc6-b9d8-47f1-a4f7-d50f02a6cad6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all the characters in a string are the same, ignoring case and vowels.", "code": "def all_Characters_Same_Ignore_Case_And_Vowels(s: str) -> bool:\n    vowels = 'aeiou'\n    s = ''.join([c for c in s if c.lower() not in vowels]).lower()\n    n = len(s)\n    for i in range(1, n):\n        if s[i] != s[0]:\n            return False\n    return True", "task_id": "741_39e5e3ea-0024-4161-b54c-8603d9235498", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are None.", "code": "def check_all_none(test_tup):\n  return all(ele is None for ele in test_tup)", "task_id": "744_37f8d120-95df-496b-84eb-d66b0bcb7e90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any zero value or not.", "code": "def check_any_zero(test_tup):\n  return any(ele == 0 for ele in test_tup)", "task_id": "744_41f225e4-6348-4f5c-aec6-a319b21fcca5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are zero.", "code": "def check_all_zero(test_tup):\n  return all(ele == 0 for ele in test_tup)", "task_id": "744_de5f7eb2-4588-43cc-8ae2-b81126784335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any negative value or not.", "code": "def check_any_negative(test_tup):\n  return any(ele < 0 for ele in test_tup)", "task_id": "744_252ac998-fb03-4bbf-9e36-0cc6ecc0d31c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are positive.", "code": "def check_all_positive(test_tup):\n  return all(ele > 0 for ele in test_tup)", "task_id": "744_924d5943-db0e-4317-8d91-a3a7f278c6b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any even number.", "code": "def check_any_even(test_tup):\n  return any(ele % 2 == 0 for ele in test_tup)", "task_id": "744_2bee5dc1-43a5-47cd-9efb-8e7b384df32f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are odd numbers.", "code": "def check_all_odd(test_tup):\n  return all(ele % 2 != 0 for ele in test_tup)", "task_id": "744_21c829b7-b81e-47c0-b4dc-4d80f6e6bfe3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any string value.", "code": "def check_any_string(test_tup):\n  return any(isinstance(ele, str) for ele in test_tup)", "task_id": "744_e6bd7841-4c96-4025-8ba2-2f6ae38ec2e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are integers.", "code": "def check_all_integers(test_tup):\n  return all(isinstance(ele, int) for ele in test_tup)", "task_id": "744_f7d1c01c-bcc5-4c12-8cd5-0012330dea48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple has any float value.", "code": "def check_any_float(test_tup):\n  return any(isinstance(ele, float) for ele in test_tup)", "task_id": "744_760a6408-de55-480c-bfc8-4551dcbcc171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the left direction.", "code": "def rotate_left(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n]", "task_id": "743_db273f01-ff1d-4c7a-806a-537412c852c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given list.", "code": "def reverse_list(lst):\n    return lst[::-1]", "task_id": "743_6fe835ae-cece-45f3-b14b-d7cc701974c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by one item to the right.", "code": "def rotate_right_by_one(lst):\n    return [lst[-1]] + lst[:-1]", "task_id": "743_fc41875f-4d9c-46d2-ac56-a575e78837b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by one item to the left.", "code": "def rotate_left_by_one(lst):\n    return lst[1:] + [lst[0]]", "task_id": "743_929c4bc8-e65c-4f61-b4ba-06866639a83e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction in specified steps.", "code": "def rotate_right_with_steps(lst, n, steps):\n    for _ in range(steps):\n        lst = [lst[-n]] + lst[:-n]\n    return lst", "task_id": "743_2a98f1da-f2ce-418c-bfea-b10b271a8b78", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the left direction in specified steps.", "code": "def rotate_left_with_steps(lst, n, steps):\n    for _ in range(steps):\n        lst = lst[n:] + lst[:n]\n    return lst", "task_id": "743_e3962ce4-9676-460d-872c-0c9bffdf9014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction and then reverse the list.", "code": "def rotate_right_and_reverse(lst, n):\n    n = n % len(lst)\n    rotated = lst[-n:] + lst[:-n]\n    return rotated[::-1]", "task_id": "743_104f0d1b-6a01-47b1-9e96-4a466394dc15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the left direction and then reverse the list.", "code": "def rotate_left_and_reverse(lst, n):\n    n = n % len(lst)\n    rotated = lst[n:] + lst[:n]\n    return rotated[::-1]", "task_id": "743_60b981f3-d555-4749-8f9f-52676e19cbe9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the right direction, wrapping around the list.", "code": "def rotate_right_with_wrap(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]", "task_id": "743_2897633f-69f1-4d4c-9a54-090807e4254b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rotate a given list by specified number of items to the left direction, wrapping around the list.", "code": "def rotate_left_with_wrap(lst, n):\n    n = n % len(lst)\n    return lst[n:] + lst[:n]", "task_id": "743_761b8f07-7633-4394-b72f-6235fdcc7f69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def rectangle_area(length, width):\n    return length * width", "task_id": "746_00aae1d2-5826-442e-bb09-1fcab34b4d36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def triangle_area(base, height):\n    return 0.5 * base * height", "task_id": "746_a5418429-5ce5-4832-a82c-6952c32c2060", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "def circle_area(radius):\n    pi = 22/7\n    return pi * radius * radius", "task_id": "746_187e7ed0-e502-4c56-a364-827e7f582512", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid.", "code": "def trapezoid_area(base1, base2, height):\n    return 0.5 * (base1 + base2) * height", "task_id": "746_fd0c7040-5076-4b80-b6f7-bd6699b1c920", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def parallelogram_area(base, height):\n    return base * height", "task_id": "746_d7b1be2a-05d4-4d18-b12d-083c79061200", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of an ellipse given its semi-major axis (a) and semi-minor axis (b).", "code": "def ellipse_area(a, b):\n    pi = 22/7\n    return pi * a * b", "task_id": "746_2a92b693-77cc-48f8-a517-7091ba4244d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rhombus given its diagonals.", "code": "def rhombus_area(diagonal1, diagonal2):\n    return 0.5 * diagonal1 * diagonal2", "task_id": "746_0cd1e70f-63cc-48a4-acc9-c858f23b196a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a regular polygon given its side length and number of sides.", "code": "def regular_polygon_area(side_length, num_sides):\n    import math\n    return (num_sides * side_length**2) / (4 * math.tan(math.pi / num_sides))", "task_id": "746_9eab4c9e-cca5-4efa-ab84-19285061bb3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a sector given its radius and angle.", "code": "def sector_perimeter(radius, angle):\n    pi = 22/7\n    arc_length = (pi * radius * angle) / 180\n    return 2 * radius + arc_length", "task_id": "746_c363a31a-27de-4a6e-ba68-15c3a925246c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def rectangle_perimeter(length, width):\n    return 2 * (length + width)", "task_id": "746_d9ef15da-66f5-4899-978d-72510425797c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindrome numbers within a given range.", "code": "def find_palindromes(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) if str(n) == str(n)[::-1]]", "task_id": "745_5ce06547-0231-4349-b9c9-2d773e78828e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all prime numbers within a given range.", "code": "def find_prime_numbers(startnum, endnum):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return [n for n in range(startnum, endnum+1) if is_prime(n)]", "task_id": "745_274d1973-82f0-4bd3-9654-2fa7c922234e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all even numbers within a given range.", "code": "def find_even_numbers(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) if n % 2 == 0]", "task_id": "745_6f507b88-363c-4bae-8f79-b42674aeeb32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all odd numbers within a given range.", "code": "def find_odd_numbers(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) if n % 2 != 0]", "task_id": "745_1bdd3cdb-dedf-459f-92ce-772920ce9107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all Fibonacci numbers within a given range.", "code": "def find_fibonacci_numbers(startnum, endnum):\n    def is_fibonacci(n):\n        a, b = 0, 1\n        while b < n:\n            a, b = b, a + b\n        return b == n or n == 0\n    return [n for n in range(startnum, endnum+1) if is_fibonacci(n)]", "task_id": "745_197037c7-7b7a-49db-8de7-453c24bed886", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all perfect squares within a given range.", "code": "def find_perfect_squares(startnum, endnum):\n    return [n for n in range(startnum, endnum+1) if int(n**0.5)**2 == n]", "task_id": "745_bde37404-ee09-4de6-84e8-1e426f2ab6d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all Armstrong numbers within a given range.", "code": "def find_armstrong_numbers(startnum, endnum):\n    def is_armstrong(n):\n        num_str = str(n)\n        num_len = len(num_str)\n        return n == sum(int(digit)**num_len for digit in num_str)\n    return [n for n in range(startnum, endnum+1) if is_armstrong(n)]", "task_id": "745_0cee6e13-dd11-4495-8aeb-33d320047bf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all Harshad numbers within a given range.", "code": "def find_harshad_numbers(startnum, endnum):\n    def is_harshad(n):\n        return n % sum(int(digit) for digit in str(n)) == 0\n    return [n for n in range(startnum, endnum+1) if is_harshad(n)]", "task_id": "745_7a9e1945-e9d9-470b-a7b1-d871d5e76539", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all perfect numbers within a given range.", "code": "def find_perfect_numbers(startnum, endnum):\n    def is_perfect(n):\n        return n == sum(i for i in range(1, n) if n % i == 0)\n    return [n for n in range(startnum, endnum+1) if is_perfect(n)]", "task_id": "745_51dc4e33-92ca-4c36-ac96-7615d95b3a79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all abundant numbers within a given range.", "code": "def find_abundant_numbers(startnum, endnum):\n    def is_abundant(n):\n        return sum(i for i in range(1, n) if n % i == 0) > n\n    return [n for n in range(startnum, endnum+1) if is_abundant(n)]", "task_id": "745_e8815a56-00e8-47f1-b16b-2ee41005a112", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert underscores between words starting with capital letters in a given string by using regex.", "code": "import re\ndef insert_underscores(s: str) -> str:\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1_\\2\", s)", "task_id": "748_1d0763db-f678-47ca-b8cb-031c9669c7a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert spaces between numbers in a given string by using regex.", "code": "import re\ndef separate_numbers(s: str) -> str:\n    return re.sub(r\"(\\d)(\\d)\", r\"\\1 \\2\", s)", "task_id": "748_4849bdaa-0cde-485d-9825-989a16475dd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert hyphens between words starting with capital letters in a given string by using regex.", "code": "import re\ndef insert_hyphens(s: str) -> str:\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1-\\2\", s)", "task_id": "748_e568f59d-8e18-4783-aa04-811bc8ad543a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert spaces before each vowel in a given string by using regex.", "code": "import re\ndef split_on_vowels(s: str) -> str:\n    return re.sub(r\"([aeiouAEIOU])\", r\" \\1\", s)", "task_id": "748_0d2b6fc7-bcd7-4db4-940c-70c1e3228c76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert commas between words starting with capital letters in a given string by using regex.", "code": "import re\ndef insert_commas(s: str) -> str:\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1,\\2\", s)", "task_id": "748_e95413f0-01d8-42d3-b480-dd7719d495da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert spaces between digits and letters in a given string by using regex.", "code": "import re\ndef separate_digits_and_letters(s: str) -> str:\n    return re.sub(r\"(\\d)(\\D)\", r\"\\1 \\2\", s)", "task_id": "748_ed8031cc-50c7-400d-b117-699bc1c13dd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert colons between words starting with capital letters in a given string by using regex.", "code": "import re\ndef insert_colons(s: str) -> str:\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1:\\2\", s)", "task_id": "748_449be08c-b5d8-4579-9737-8e6265263db6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert spaces before each consonant in a given string by using regex.", "code": "import re\ndef split_on_consonants(s: str) -> str:\n    return re.sub(r\"([bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ])\", r\" \\1\", s)", "task_id": "748_72996d74-4941-4570-ab9e-0de1a250d2f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert semicolons between words starting with capital letters in a given string by using regex.", "code": "import re\ndef insert_semicolons(s: str) -> str:\n    return re.sub(r\"(\\w)([A-Z])\", r\"\\1;\\2\", s)", "task_id": "748_c1337a44-8f9f-4f37-90f1-905935981487", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert spaces between lowercase and uppercase letters in a given string by using regex.", "code": "import re\ndef separate_lowercase_and_uppercase(s: str) -> str:\n    return re.sub(r\"([a-z])([A-Z])\", r\"\\1 \\2\", s)", "task_id": "748_467e959f-09c2-4498-b7d5-89b63377d941", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to append an integer element to the given list.", "code": "def append_element(lst: list, elem: int) -> list:\n    lst.append(elem)\n    return lst", "task_id": "750_e741f682-aa90-4001-971e-d1987d60f8e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extend the first list with elements from the second list.", "code": "def extend_list(lst1: list, lst2: list) -> list:\n    lst1.extend(lst2)\n    return lst1", "task_id": "750_794a23ec-7ace-4360-8a9d-9947653d4088", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to insert an integer element at a specified index in the given list.", "code": "def insert_element(lst: list, index: int, elem: int) -> list:\n    lst.insert(index, elem)\n    return lst", "task_id": "750_73181875-19ba-4b7b-9565-7c2536dd3795", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the first occurrence of an integer element from the given list.", "code": "def remove_element(lst: list, elem: int) -> list:\n    lst.remove(elem)\n    return lst", "task_id": "750_7d1b7601-7426-462d-acb8-15f75ae57dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pop an element at a specified index from the given list.", "code": "def pop_element(lst: list, index: int) -> list:\n    lst.pop(index)\n    return lst", "task_id": "750_eaea0e37-fecf-4e8b-8a9d-5f44447d4213", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the given list.", "code": "def reverse_list(lst: list) -> list:\n    lst.reverse()\n    return lst", "task_id": "750_230e58f8-eb0f-40b9-b095-20b181af4e19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given list in ascending order.", "code": "def sort_list(lst: list) -> list:\n    lst.sort()\n    return lst", "task_id": "750_30d2bf13-5274-4da9-a450-327891af902f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear all elements from the given list.", "code": "def clear_list(lst: list) -> list:\n    lst.clear()\n    return lst", "task_id": "750_3ea92f13-917e-48e3-b92f-2dde8ac6a6bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of an integer element in the given list.", "code": "def count_element(lst: list, elem: int) -> int:\n    return lst.count(elem)", "task_id": "750_217760bb-b66a-4858-b042-d1384daed4b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of an integer element in the given list.", "code": "def index_of_element(lst: list, elem: int) -> int:\n    return lst.index(elem)", "task_id": "750_cbf48d71-b6ae-4a08-a893-1feda2046605", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically in descending order.", "code": "def sort_numeric_strings_desc(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(reverse=True)\n    return result", "task_id": "749_41358ff4-a6f9-40f2-aa99-72ef641d1edb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, ignoring negative signs.", "code": "def sort_numeric_strings_ignore_negatives(nums_str):\n    result = [abs(int(x)) for x in nums_str]\n    result.sort()\n    return result", "task_id": "749_9c0238c9-d155-40b0-99a1-7a76f5de956d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, with even numbers first.", "code": "def sort_numeric_strings_even_first(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(key=lambda x: (x % 2, x))\n    return result", "task_id": "749_ad28ed7f-ac7c-48db-a5a9-1b97163fd0a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, but by the length of the string first.", "code": "def sort_numeric_strings_by_length(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(key=lambda x: (len(str(x)), x))\n    return result", "task_id": "749_95e0666e-4bef-452e-b4bc-168e589e53ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, with odd numbers first.", "code": "def sort_numeric_strings_odd_first(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(key=lambda x: (x % 2 == 0, x))\n    return result", "task_id": "749_f1373bce-0594-4d79-8724-6a1c2fefa6bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers alphabetically.", "code": "def sort_numeric_strings_alphabetically(nums_str):\n    return sorted(nums_str)", "task_id": "749_84ad956e-b1d5-4ffc-9955-872dba7084d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers by their absolute values.", "code": "def sort_numeric_strings_abs(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(key=abs)\n    return result", "task_id": "749_21bbae35-7a24-43fb-a6d8-315cf493247f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, but keep duplicates.", "code": "def sort_numeric_strings_with_duplicates(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort()\n    return result", "task_id": "749_1c3b4dc1-98a0-4a0c-9f12-720334558bd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, but remove duplicates.", "code": "def sort_numeric_strings_remove_duplicates(nums_str):\n    result = sorted(set(int(x) for x in nums_str))\n    return result", "task_id": "749_b8b6fbb4-17fb-44d2-9eb5-b29367e202c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a given list of strings of numbers numerically, but by the last digit first.", "code": "def sort_numeric_strings_by_last_digit(nums_str):\n    result = [int(x) for x in nums_str]\n    result.sort(key=lambda x: (x % 10, x))\n    return result", "task_id": "749_ee60a779-3497-4fae-ac66-0d6e147567aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a max heap or not.", "code": "def is_max_heap(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] >= arr[2 * i + 1]) and is_max_heap(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] >= arr[2 * i + 2] and is_max_heap(arr, 2 * i + 2))\n    return left_child and right_child", "task_id": "751_5b3b3bc6-a3df-4d1c-858b-a03d72a91344", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a complete binary tree.", "code": "def is_complete_binary_tree(arr):\n    n = len(arr)\n    for i in range(n):\n        if 2 * i + 1 < n and arr[i] is None:\n            return False\n        if 2 * i + 2 < n and arr[i] is None:\n            return False\n    return True", "task_id": "751_6731ec10-e21c-4d40-a43e-1463f971afa6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a full binary tree.", "code": "def is_full_binary_tree(arr):\n    n = len(arr)\n    for i in range(n):\n        if (2 * i + 1 < n and arr[2 * i + 1] is None) != (2 * i + 2 < n and arr[2 * i + 2] is None):\n            return False\n    return True", "task_id": "751_e63fe8d4-5db0-474a-8289-3401faa33b4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a perfect binary tree.", "code": "def is_perfect_binary_tree(arr):\n    n = len(arr)\n    level = 0\n    while (1 << level) - 1 < n:\n        level += 1\n    return (1 << level) - 1 == n", "task_id": "751_e8c58ce8-6a66-4556-8741-79babc6b716f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a balanced binary tree.", "code": "def is_balanced_binary_tree(arr):\n    def height(i):\n        if i >= len(arr) or arr[i] is None:\n            return 0\n        left_height = height(2 * i + 1)\n        right_height = height(2 * i + 2)\n        if left_height == -1 or right_height == -1 or abs(left_height - right_height) > 1:\n            return -1\n        return max(left_height, right_height) + 1\n    return height(0) != -1", "task_id": "751_352fbe82-8489-4065-95fd-9e7b1fc15145", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a binary search tree (BST).", "code": "def is_bst(arr):\n    def check_bst(i, min_val, max_val):\n        if i >= len(arr) or arr[i] is None:\n            return True\n        if arr[i] <= min_val or arr[i] >= max_val:\n            return False\n        return check_bst(2 * i + 1, min_val, arr[i]) and check_bst(2 * i + 2, arr[i], max_val)\n    return check_bst(0, float('-inf'), float('inf'))", "task_id": "751_24dea589-d847-477d-a204-375522842f4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a min heap, allowing duplicate values.", "code": "def is_min_heap_with_duplicates(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] <= arr[2 * i + 1]) and is_min_heap_with_duplicates(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] and is_min_heap_with_duplicates(arr, 2 * i + 2))\n    return left_child and right_child", "task_id": "751_b6326eac-48e9-46e4-b9be-a44689156365", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a max heap, allowing duplicate values.", "code": "def is_max_heap_with_duplicates(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    left_child = (arr[i] >= arr[2 * i + 1]) and is_max_heap_with_duplicates(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] >= arr[2 * i + 2] and is_max_heap_with_duplicates(arr, 2 * i + 2))\n    return left_child and right_child", "task_id": "751_e62990bd-f37b-468b-b36c-5609fc66257e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a min heap, allowing None values as placeholders.", "code": "def is_min_heap_with_none(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    if arr[i] is None:\n        return True\n    left_child = (arr[2 * i + 1] is None or arr[i] <= arr[2 * i + 1]) and is_min_heap_with_none(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[2 * i + 2] is None or arr[i] <= arr[2 * i + 2] and is_min_heap_with_none(arr, 2 * i + 2))\n    return left_child and right_child", "task_id": "751_2c77bd2a-224c-45ad-b6f0-6d98542283f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given array represents a max heap, allowing None values as placeholders.", "code": "def is_max_heap_with_none(arr, i):\n    if 2 * i + 2 > len(arr):\n        return True\n    if arr[i] is None:\n        return True\n    left_child = (arr[2 * i + 1] is None or arr[i] >= arr[2 * i + 1]) and is_max_heap_with_none(arr, 2 * i + 1)\n    right_child = (2 * i + 2 == len(arr)) or (arr[2 * i + 2] is None or arr[i] >= arr[2 * i + 2] and is_max_heap_with_none(arr, 2 * i + 2))\n    return left_child and right_child", "task_id": "751_1937c1cc-3834-492c-a3e5-33ba65363245", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum k records from tuple list.", "code": "def max_k(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1], reverse=True)[:K]\n  return res", "task_id": "753_fc7dde6e-1cf1-4240-b1e2-af48d3d0e824", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from tuple list based on the sum of the tuple elements.", "code": "def min_k_sum(test_list, K):\n  res = sorted(test_list, key = lambda x: sum(x))[:K]\n  return res", "task_id": "753_25cd9cbe-eb77-48dd-8d1b-19f2719573e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum k records from tuple list based on the sum of the tuple elements.", "code": "def max_k_sum(test_list, K):\n  res = sorted(test_list, key = lambda x: sum(x), reverse=True)[:K]\n  return res", "task_id": "753_0c7d09d7-c027-4a5e-bb33-d1972f723d3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from tuple list based on the first element of the tuple.", "code": "def min_k_first(test_list, K):\n  res = sorted(test_list, key = lambda x: x[0])[:K]\n  return res", "task_id": "753_5075438d-76b2-427b-90ec-dcb921c98db2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum k records from tuple list based on the first element of the tuple.", "code": "def max_k_first(test_list, K):\n  res = sorted(test_list, key = lambda x: x[0], reverse=True)[:K]\n  return res", "task_id": "753_38241606-ffec-41c1-977a-e12ea165c5a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from tuple list based on the second element of the tuple.", "code": "def min_k_second(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1])[:K]\n  return res", "task_id": "753_94d7edad-cab2-4e5e-8333-8aada8255ba3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum k records from tuple list based on the second element of the tuple.", "code": "def max_k_second(test_list, K):\n  res = sorted(test_list, key = lambda x: x[1], reverse=True)[:K]\n  return res", "task_id": "753_6d98bedd-73b4-4da3-9579-7d73eebbe7ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from a list of strings based on their length.", "code": "def min_k_length(test_list, K):\n  res = sorted(test_list, key = lambda x: len(x))[:K]\n  return res", "task_id": "753_081e8ad7-6230-4062-ad89-20fe2eb3dccd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find maximum k records from a list of strings based on their length.", "code": "def max_k_length(test_list, K):\n  res = sorted(test_list, key = lambda x: len(x), reverse=True)[:K]\n  return res", "task_id": "753_b554ceb7-1dea-4cc7-b00d-053d63a38427", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find minimum k records from a list of integers based on their absolute values.", "code": "def min_k_abs(test_list, K):\n  res = sorted(test_list, key = lambda x: abs(x))[:K]\n  return res", "task_id": "753_1d868045-1ee4-40fd-900d-c0e747f0912c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Lucas number.", "code": "def lucas_num(n):\n\tif n == 0:\n\t\treturn 2\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn lucas_num(n - 1) + lucas_num(n - 2)", "task_id": "752_83d59cb0-e4ef-498d-9889-a4dd5e436e18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Pell number.", "code": "def pell_num(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\treturn 2 * pell_num(n - 1) + pell_num(n - 2)", "task_id": "752_4ff461d9-96aa-46b7-b036-b05fb7a4dead", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tribonacci number.", "code": "def tribonacci_num(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn tribonacci_num(n - 1) + tribonacci_num(n - 2) + tribonacci_num(n - 3)", "task_id": "752_6642013a-c6fa-43c3-ab18-6f20d648ff4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Tetranacci number.", "code": "def tetranacci_num(n):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1 or n == 2 or n == 3:\n\t\treturn 1\n\telse:\n\t\treturn tetranacci_num(n - 1) + tetranacci_num(n - 2) + tetranacci_num(n - 3) + tetranacci_num(n - 4)", "task_id": "752_935cc3df-18cb-4601-8731-5de807b58820", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Padovan number.", "code": "def padovan_num(n):\n\tif n == 0 or n == 1 or n == 2:\n\t\treturn 1\n\telse:\n\t\treturn padovan_num(n - 2) + padovan_num(n - 3)", "task_id": "752_35ab95cf-3ad0-43d6-8d08-7f71c3e33b81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Perrin number.", "code": "def perrin_num(n):\n\tif n == 0:\n\t\treturn 3\n\telif n == 1:\n\t\treturn 0\n\telif n == 2:\n\t\treturn 2\n\telse:\n\t\treturn perrin_num(n - 2) + perrin_num(n - 3)", "task_id": "752_35b3a6b9-9ff7-42af-bd6a-3954a9e775cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number modulo m.", "code": "def fibonacci_mod(n, m):\n\tif n == 0:\n\t\treturn 0\n\telif n == 1:\n\t\treturn 1\n\telse:\n\t\tf1, f2 = 0, 1\n\t\tfor _ in range(2, n+1):\n\t\t\tf1, f2 = f2, (f1 + f2) % m\n\t\treturn f2", "task_id": "752_8ae5886e-7c47-487e-aaa3-38af43a99af4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Catalan number.", "code": "def catalan_num(n):\n\tif n == 0:\n\t\treturn 1\n\telse:\n\t\tc = 0\n\t\tfor i in range(n):\n\t\t\tc += catalan_num(i) * catalan_num(n - 1 - i)\n\t\treturn c", "task_id": "752_a862a8b0-0faf-4136-b8f4-85f04ee35a58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Motzkin number.", "code": "def motzkin_num(n):\n\tif n == 0 or n == 1:\n\t\treturn 1\n\telse:\n\t\tm = [1, 1] + [0] * (n - 1)\n\t\tfor i in range(2, n + 1):\n\t\t\tm[i] = m[i - 1] + sum(m[j] * m[i - 2 - j] for j in range(i - 1))\n\t\treturn m[n]", "task_id": "752_2d9e9a20-4311-4bc8-a47c-d6d5d203d35a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the (n, k)th Narayana number.", "code": "def narayana_num(n, k):\n\tif k == 1 or k == n:\n\t\treturn 1\n\telse:\n\t\treturn (n - k + 1) * narayana_num(n - 1, k - 1) // k", "task_id": "752_51562e89-f0a5-4bea-9ace-cccf7c52d850", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Bell number.", "code": "def bell_num(n):\n\tbell = [[0 for i in range(n+1)] for j in range(n+1)]\n\tbell[0][0] = 1\n\tfor i in range(1, n+1):\n\t\tbell[i][0] = bell[i-1][i-1]\n\t\tfor j in range(1, i+1):\n\t\t\tbell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\treturn bell[n][0]", "task_id": "752_eb014677-38dc-4e38-a1ff-a0f662425db9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common substring between two given strings.", "code": "def longest_common_substring(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    result = 0\n    end = 0\n    length = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[i-1] == s2[j-1]:\n                length[i][j] = length[i-1][j-1] + 1\n                if length[i][j] > result:\n                    result = length[i][j]\n                    end = i - 1\n            else:\n                length[i][j] = 0\n    return s1[end - result + 1: end + 1]", "task_id": "747_4f87ee47-de51-4779-beab-d9a9563505f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common prefix string amongst an array of strings.", "code": "def longest_common_prefix(strs):\n    if not strs:\n        return \"\"\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest", "task_id": "747_c8e295fe-708c-4803-9288-07a4a0921309", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest palindromic substring in a given string.", "code": "def longest_palindromic_substring(s):\n    n = len(s)\n    if n == 0:\n        return \"\"\n    result = s[0]\n    for i in range(n):\n        for j in range(i, n):\n            substring = s[i:j+1]\n            if substring == substring[::-1] and len(substring) > len(result):\n                result = substring\n    return result", "task_id": "747_7b5849c4-d96d-4928-ad1f-a88a6f078497", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in a given list of integers.", "code": "def longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    dp = [1] * len(nums)\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] > nums[j]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)", "task_id": "747_e9c9a083-2ff6-4b81-8c75-96dc6a406bff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence for the given two string sequences.", "code": "def longest_common_subsequence_of_two(X, Y):\n    m = len(X)\n    n = len(Y)\n    L = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                L[i][j] = 0\n            elif X[i - 1] == Y[j - 1]:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]", "task_id": "747_d102f054-371a-45a1-9991-91016bc963a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common suffix between two given strings.", "code": "def longest_common_suffix(s1, s2):\n    m = len(s1)\n    n = len(s2)\n    result = 0\n    end = 0\n    length = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if s1[m-i] == s2[n-j]:\n                length[i][j] = length[i-1][j-1] + 1\n                if length[i][j] > result:\n                    result = length[i][j]\n                    end = i - 1\n            else:\n                length[i][j] = 0\n    return s1[m-end-1:m-end-1+result]", "task_id": "747_952a2f18-923a-4215-bcfa-274f13ac3b41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subarray between two given arrays of integers.", "code": "def longest_common_subarray(arr1, arr2):\n    m = len(arr1)\n    n = len(arr2)\n    result = 0\n    end = 0\n    length = [[0 for j in range(n+1)] for i in range(m+1)]\n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            if arr1[i-1] == arr2[j-1]:\n                length[i][j] = length[i-1][j-1] + 1\n                if length[i][j] > result:\n                    result = length[i][j]\n                    end = i - 1\n            else:\n                length[i][j] = 0\n    return arr1[end - result + 1: end + 1]", "task_id": "747_953830c8-2968-4153-b7e2-c84a13a098f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence for the given two string sequences, with up to k deletions allowed in each sequence.", "code": "def longest_common_subsequence_with_k_deletions(X, Y, k):\n    m = len(X)\n    n = len(Y)\n    L = [[[0 for _ in range(k+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for d in range(k+1):\n                if i == 0 or j == 0:\n                    L[i][j][d] = 0\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][d] = L[i-1][j-1][d] + 1\n                else:\n                    L[i][j][d] = max(L[i-1][j][d], L[i][j-1][d])\n                    if d > 0:\n                        L[i][j][d] = max(L[i][j][d], L[i-1][j-1][d-1] + 1)\n    return L[m][n][k]", "task_id": "747_ee229211-524e-4b30-9ff2-c4719b9af42c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence for the given two string sequences, with up to k replacements allowed in each sequence.", "code": "def longest_common_subsequence_with_replacement(X, Y, k):\n    m = len(X)\n    n = len(Y)\n    L = [[[0 for _ in range(k+1)] for _ in range(n+1)] for _ in range(m+1)]\n    for i in range(m+1):\n        for j in range(n+1):\n            for r in range(k+1):\n                if i == 0 or j == 0:\n                    L[i][j][r] = 0\n                elif X[i-1] == Y[j-1]:\n                    L[i][j][r] = L[i-1][j-1][r] + 1\n                else:\n                    L[i][j][r] = max(L[i-1][j][r], L[i][j-1][r])\n                    if r > 0:\n                        L[i][j][r] = max(L[i][j][r], L[i-1][j-1][r-1] + 1)\n    return L[m][n][k]", "task_id": "747_c6c88d9f-3094-4391-9265-362d6cd200c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest common subsequence for the given two string sequences, with a gap constraint that no two matching characters can be more than 'gap' positions apart.", "code": "def longest_common_subsequence_with_gap(X, Y, gap):\n    m = len(X)\n    n = len(Y)\n    L = [[0] * (n + 1) for i in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if X[i - 1] == Y[j - 1] and abs(i - j) <= gap:\n                L[i][j] = L[i - 1][j - 1] + 1\n            else:\n                L[i][j] = max(L[i - 1][j], L[i][j - 1])\n    return L[m][n]", "task_id": "747_ff185848-e464-42a4-bfeb-b77560d5a518", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements from three lists.", "code": "def find_common_elements(l1, l2, l3):\n    return list(set(l1) & set(l2) & set(l3))", "task_id": "754_dce8a71a-40d9-476f-a93c-da6847fae538", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists, but only include elements that are even numbers.", "code": "def find_common_index_elements(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o and m % 2 == 0:\n            result.append(m)\n    return result", "task_id": "754_6437b78e-faae-4ac9-a0ea-fb14d9c21046", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists and return their sum.", "code": "def find_common_index_elements_sum(l1, l2, l3):\n    result = 0\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result += m\n    return result", "task_id": "754_5fc42bee-7146-4fa3-990c-60a3013a959a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements from three lists and return a list of tuples containing the element and its index from the first list.", "code": "def find_common_elements_with_indices(l1, l2, l3):\n    common_elements = list(set(l1) & set(l2) & set(l3))\n    return [(elem, l1.index(elem)) for elem in common_elements]", "task_id": "754_1d6fb2c9-7dd5-40f1-a6af-9ac90afc8c97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements from three lists and return them sorted in ascending order.", "code": "def find_common_elements_sorted(l1, l2, l3):\n    return sorted(list(set(l1) & set(l2) & set(l3)))", "task_id": "754_98ef8880-b42d-4bf1-bf32-6a4bed8ff215", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements from three lists and return the count of these common elements.", "code": "def find_common_elements_count(l1, l2, l3):\n    return len(set(l1) & set(l2) & set(l3))", "task_id": "754_ebf9d721-4f1d-45d1-a06e-c73a0fdd808f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists and return their product.", "code": "def find_common_index_elements_product(l1, l2, l3):\n    result = 1\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result *= m\n    return result", "task_id": "754_01c85e94-17e9-4b67-a84e-465ba7e996b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists of strings.", "code": "def find_common_index_elements_strings(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o:\n            result.append(m)\n    return result", "task_id": "754_07ccb2cd-4ba4-4b45-af76-3d333966fc4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common elements from three lists and return them without duplicates.", "code": "def find_common_elements_no_duplicates(l1, l2, l3):\n    return list(set(l1) & set(l2) & set(l3))", "task_id": "754_f33d9c30-d25b-49eb-954e-9fa064f08b2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find common index elements from three lists, but only include elements that are odd numbers.", "code": "def find_common_index_elements_odd(l1, l2, l3):\n    result = []\n    for m, n, o in zip(l1, l2, l3):\n        if m == n == o and m % 2 != 0:\n            result.append(m)\n    return result", "task_id": "754_5cba324e-0df8-4c53-b4f0-f7b35f1fc7d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'c' followed by zero or one 'd'.", "code": "import re\ndef match_string_with_c(text):\n    patterns = 'cd?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_5e063e5e-09b4-4fd3-bc1c-23d7e37e9843", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'e' followed by zero or one 'f'.", "code": "import re\ndef match_string_with_e(text):\n    patterns = 'ef?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_c5811ded-bcd1-42d1-9925-a8414c681c10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'g' followed by zero or one 'h'.", "code": "import re\ndef match_string_with_g(text):\n    patterns = 'gh?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_9b3e0030-f55c-4dec-aa98-3a74eb373412", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'i' followed by zero or one 'j'.", "code": "import re\ndef match_string_with_i(text):\n    patterns = 'ij?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_f13ff18c-2032-4e05-9728-98da377d2fad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'k' followed by zero or one 'l'.", "code": "import re\ndef match_string_with_k(text):\n    patterns = 'kl?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_f1a5c35c-1754-4ea7-9c45-6f97165da447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'm' followed by zero or one 'n'.", "code": "import re\ndef match_string_with_m(text):\n    patterns = 'mn?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_42d594df-2918-4031-b4c6-770c35c50248", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'o' followed by zero or one 'p'.", "code": "import re\ndef match_string_with_o(text):\n    patterns = 'op?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_80793019-bdad-413e-8590-c76745e587b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'q' followed by zero or one 'r'.", "code": "import re\ndef match_string_with_q(text):\n    patterns = 'qr?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_37b2e4c8-04dc-4589-8a30-f68a084c51ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 's' followed by zero or one 't'.", "code": "import re\ndef match_string_with_s(text):\n    patterns = 'st?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_1d85afbf-ef32-4a30-8c92-3ec60ff3f97a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a 'u' followed by zero or one 'v'.", "code": "import re\ndef match_string_with_u(text):\n    patterns = 'uv?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "756_a825f999-8699-4c01-a68e-9343fedfaf2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the third largest number in a list.", "code": "def third_largest(numbers):\n  if len(numbers) < 3:\n    return\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort(reverse=True)\n  return unique_numbers[2]", "task_id": "755_8c1b7924-661a-470e-91a1-f61d6fd71042", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest number in a list.", "code": "def second_largest(numbers):\n  if len(numbers) < 2:\n    return\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort(reverse=True)\n  return unique_numbers[1]", "task_id": "755_cb835c44-3cb3-42c6-b760-1f3e157b71a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest even number in a list.", "code": "def second_smallest_even(numbers):\n  even_numbers = [num for num in numbers if num % 2 == 0]\n  if len(even_numbers) < 2:\n    return\n  unique_even_numbers = list(set(even_numbers))\n  unique_even_numbers.sort()\n  return unique_even_numbers[1]", "task_id": "755_ccf14b91-8ebb-47b5-8c73-91505e0f90aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest odd number in a list.", "code": "def second_largest_odd(numbers):\n  odd_numbers = [num for num in numbers if num % 2 != 0]\n  if len(odd_numbers) < 2:\n    return\n  unique_odd_numbers = list(set(odd_numbers))\n  unique_odd_numbers.sort(reverse=True)\n  return unique_odd_numbers[1]", "task_id": "755_9cc01ebb-42dd-4cbf-aae0-ded30a3bbbf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest positive number in a list.", "code": "def second_smallest_positive(numbers):\n  positive_numbers = [num for num in numbers if num > 0]\n  if len(positive_numbers) < 2:\n    return\n  unique_positive_numbers = list(set(positive_numbers))\n  unique_positive_numbers.sort()\n  return unique_positive_numbers[1]", "task_id": "755_be5521b7-69e4-4e8b-8652-ae20a1d34927", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest negative number in a list.", "code": "def second_largest_negative(numbers):\n  negative_numbers = [num for num in numbers if num < 0]\n  if len(negative_numbers) < 2:\n    return\n  unique_negative_numbers = list(set(negative_numbers))\n  unique_negative_numbers.sort(reverse=True)\n  return unique_negative_numbers[1]", "task_id": "755_06f12109-3734-4786-b9c1-62fdfef81c72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest number by absolute value in a list.", "code": "def second_smallest_absolute(numbers):\n  if len(numbers) < 2:\n    return\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort(key=abs)\n  return unique_numbers[1]", "task_id": "755_d1789646-6eb2-44e7-8ab2-c2719e56a9db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest number by absolute value in a list.", "code": "def second_largest_absolute(numbers):\n  if len(numbers) < 2:\n    return\n  unique_numbers = list(set(numbers))\n  unique_numbers.sort(key=abs, reverse=True)\n  return unique_numbers[1]", "task_id": "755_63f919dc-92f7-4478-bb35-37aab0d1c6be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest prime number in a list.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef second_smallest_prime(numbers):\n  prime_numbers = [num for num in numbers if is_prime(num)]\n  if len(prime_numbers) < 2:\n    return\n  unique_prime_numbers = list(set(prime_numbers))\n  unique_prime_numbers.sort()\n  return unique_prime_numbers[1]", "task_id": "755_a93a101d-cf80-42ba-8cac-bc2690166745", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest prime number in a list.", "code": "def is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True\n\ndef second_largest_prime(numbers):\n  prime_numbers = [num for num in numbers if is_prime(num)]\n  if len(prime_numbers) < 2:\n    return\n  unique_prime_numbers = list(set(prime_numbers))\n  unique_prime_numbers.sort(reverse=True)\n  return unique_prime_numbers[1]", "task_id": "755_8100a74d-e09e-4538-b80a-3ade35dfe30e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic strings in the given list of strings.", "code": "def count_palindromes(words):\n    return sum(1 for word in words if word == word[::-1])", "task_id": "757_0ade8b86-c991-4da9-b52b-da486f885e64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of anagram pairs in the given list of strings.", "code": "def count_anagrams(words):\n    from collections import Counter\n    count = 0\n    for i in range(len(words)):\n        for j in range(i + 1, len(words)):\n            if Counter(words[i]) == Counter(words[j]):\n                count += 1\n    return count", "task_id": "757_e73a6d77-b21a-4afa-a6b5-d8d7b239cfa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique pairs of integers in the given list that sum up to an even number.", "code": "def count_unique_pairs(nums):\n    count = 0\n    seen = set()\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % 2 == 0 and (nums[i], nums[j]) not in seen and (nums[j], nums[i]) not in seen:\n                count += 1\n                seen.add((nums[i], nums[j]))\n    return count", "task_id": "757_564be7d1-7933-4734-b73a-f63f1450f75c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in the given list that start and end with a vowel.", "code": "def count_vowel_strings(words):\n    vowels = set('aeiouAEIOU')\n    return sum(1 for word in words if word[0] in vowels and word[-1] in vowels)", "task_id": "757_726c1a8a-1475-46ec-8f7b-7c5b6035d759", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of times a given substring appears in the given string.", "code": "def count_substrings(s, sub):\n    return s.count(sub)", "task_id": "757_c8fbe2de-92d9-4016-9520-9f8b9560ff60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of pairs of integers in the given list that are divisible by a given integer k.", "code": "def count_divisible_pairs(nums, k):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[i] + nums[j]) % k == 0:\n                count += 1\n    return count", "task_id": "757_fa8de668-d4ba-4fde-90be-aaa47d95c7e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in the given list that start and end with a consonant.", "code": "def count_consonant_strings(words):\n    vowels = set('aeiouAEIOU')\n    return sum(1 for word in words if word[0] not in vowels and word[-1] not in vowels)", "task_id": "757_d378aeee-a21b-4505-b0cf-d221611605b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of distinct elements in the given list of integers.", "code": "def count_distinct_elements(nums):\n    return len(set(nums))", "task_id": "757_368e23b1-6ba5-4b68-a649-c7a9385b0f3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in the given list that are entirely in uppercase.", "code": "def count_uppercase_strings(words):\n    return sum(1 for word in words if word.isupper())", "task_id": "757_d0af1953-79b6-4e05-996a-0dc42f89883d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in the given list that are entirely in lowercase.", "code": "def count_lowercase_strings(words):\n    return sum(1 for word in words if word.islower())", "task_id": "757_c5f35c4d-73c8-4265-a795-c9886961a905", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique strings within a list.", "code": "def count_unique_strings(list1):\n    return len(set(list1))", "task_id": "758_c625b0bb-6431-4772-934f-c8e6c47660e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of each unique element in a list.", "code": "def unique_elements_count(list1):\n    result = {}\n    for item in list1:\n        result[item] = result.get(item, 0) + 1\n    return result", "task_id": "758_407a9ed4-dcc9-40d3-a1ce-68612b614a01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique tuples within a list.", "code": "def unique_tuples_count(list1):\n    return len(set(tuple(x) for x in list1))", "task_id": "758_377f93ab-c717-4a31-a3b8-d14121b0f147", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list and return their lengths.", "code": "def unique_lists_count_with_length(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), []).append(len(l))\n    for k, v in result.items():\n        result[k] = sum(v)\n    return result", "task_id": "758_6dcc0d88-c89c-46fd-ae1f-06f364223c99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of each unique element in a list, grouped by their type.", "code": "def unique_elements_count_by_type(list1):\n    result = {'int': {}, 'str': {}, 'other': {}}\n    for item in list1:\n        if isinstance(item, int):\n            result['int'][item] = result['int'].get(item, 0) + 1\n        elif isinstance(item, str):\n            result['str'][item] = result['str'].get(item, 0) + 1\n        else:\n            result['other'][item] = result['other'].get(item, 0) + 1\n    return result", "task_id": "758_1fe35814-226a-4bce-b31b-121f6eed39c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list and return the sum of their elements.", "code": "def unique_lists_with_sum(list1):\n    result = {}\n    for l in list1:\n        result.setdefault(tuple(l), []).append(sum(l))\n    for k, v in result.items():\n        result[k] = sum(v)\n    return result", "task_id": "758_deda7265-08ac-4d94-9525-d5c3905ca01d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of each unique element in a list and return their indices.", "code": "def unique_elements_with_indices(list1):\n    result = {}\n    for idx, item in enumerate(list1):\n        if item not in result:\n            result[item] = []\n        result[item].append(idx)\n    return result", "task_id": "758_16eaa47d-a7bc-49fb-ba8f-b46d129a3ffe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list and return their indices.", "code": "def unique_lists_with_indices(list1):\n    result = {}\n    for idx, l in enumerate(list1):\n        result.setdefault(tuple(l), []).append(idx)\n    return result", "task_id": "758_aebd3631-a371-45c9-a37e-a5d3776ea1d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list and return the maximum element of each list.", "code": "def unique_lists_with_max_element(list1):\n    result = {}\n    for l in list1:\n        result[tuple(l)] = max(l)\n    return result", "task_id": "758_2290fb44-e187-439e-9a2b-5f3abe936a28", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of occurrences of each unique element in a list and return their counts and indices.", "code": "def unique_elements_with_counts_and_indices(list1):\n    result = {}\n    for idx, item in enumerate(list1):\n        if item not in result:\n            result[item] = {'count': 0, 'indices': []}\n        result[item]['count'] += 1\n        result[item]['indices'].append(idx)\n    return result", "task_id": "758_ba663518-1b3e-48ee-a97b-61c9350c7d51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid hexadecimal number.", "code": "def is_hexadecimal(num):\n    import re\n    hexre = re.compile(r'^[0-9a-fA-F]+$')\n    result = hexre.search(num)\n    return bool(result)", "task_id": "759_e6b2ec13-fe28-4ce8-8463-9eb4f9aea14a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid binary number.", "code": "def is_binary(num):\n    import re\n    binre = re.compile(r'^[01]+$')\n    result = binre.search(num)\n    return bool(result)", "task_id": "759_b6145c29-7273-4d20-8053-5b6e195e3d88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid email address.", "code": "def is_valid_email(email):\n    import re\n    emailre = re.compile(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$')\n    result = emailre.search(email)\n    return bool(result)", "task_id": "759_78a5af33-85d2-499d-8b01-7e65ecd62b02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid date in the format YYYY-MM-DD.", "code": "def is_valid_date(date):\n    import re\n    datere = re.compile(r'^\\d{4}-\\d{2}-\\d{2}$')\n    result = datere.search(date)\n    return bool(result)", "task_id": "759_38a3ab69-42d8-466e-849b-6482943ce155", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid time in the format HH:MM.", "code": "def is_valid_time(time):\n    import re\n    timere = re.compile(r'^([01]\\d|2[0-3]):([0-5]\\d)$')\n    result = timere.search(time)\n    return bool(result)", "task_id": "759_9b14cd3f-751f-4871-899b-db5ff73322cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid phone number in the format (XXX) XXX-XXXX.", "code": "def is_valid_phone_number(phone):\n    import re\n    phonere = re.compile(r'^\\(\\d{3}\\) \\d{3}-\\d{4}$')\n    result = phonere.search(phone)\n    return bool(result)", "task_id": "759_c8cee367-6993-40d5-871d-8c51f6729efa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid URL.", "code": "def is_valid_url(url):\n    import re\n    urlre = re.compile(r'^(http|https)://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/.*)?$')\n    result = urlre.search(url)\n    return bool(result)", "task_id": "759_6783df9a-9518-4054-bce1-6ec68454e269", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid IPv4 address.", "code": "def is_valid_ipv4(ip):\n    import re\n    ipre = re.compile(r'^((25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$')\n    result = ipre.search(ip)\n    return bool(result)", "task_id": "759_6a15b371-e0c0-4a8a-a3af-b8fd1963b56d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid credit card number (16 digits).", "code": "def is_valid_credit_card(card):\n    import re\n    cardre = re.compile(r'^\\d{16}$')\n    result = cardre.search(card)\n    return bool(result)", "task_id": "759_10298632-a04d-4e7d-a248-5f5924431865", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a valid postal code (5 digits).", "code": "def is_valid_postal_code(postal):\n    import re\n    postalre = re.compile(r'^\\d{5}$')\n    result = postalre.search(postal)\n    return bool(result)", "task_id": "759_3165434c-8f72-4a44-9fa0-04fec9803e2b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in an array are positive or not.", "code": "def all_elements_positive(arr: list) -> str:\n    for num in arr:\n        if num <= 0:\n            return 'NO'\n    return 'YES'", "task_id": "760_e649f716-d278-46e8-bc40-27684d826f45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array contains at least one even number.", "code": "def contains_even_number(arr: list) -> str:\n    for num in arr:\n        if num % 2 == 0:\n            return 'YES'\n    return 'NO'", "task_id": "760_a3ef260d-6320-45a3-9d6e-c7f05939bf94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in an array are unique.", "code": "def all_elements_unique(arr: list) -> str:\n    if len(arr) == len(set(arr)):\n        return 'YES'\n    return 'NO'", "task_id": "760_fc083d88-f0bc-4920-9665-86167f54be59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array contains at least one prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef contains_prime_number(arr: list) -> str:\n    for num in arr:\n        if is_prime(num):\n            return 'YES'\n    return 'NO'", "task_id": "760_ade146c2-a527-4cd2-9650-7f7a942b8050", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether any string in a list contains a given substring.", "code": "def contains_substring(strings: list, substring: str) -> str:\n    for string in strings:\n        if substring in string:\n            return 'YES'\n    return 'NO'", "task_id": "760_6153896d-4a2d-4fae-bce3-b424674784bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in an array are greater than a given number x.", "code": "def all_elements_greater_than(arr: list, x: int) -> str:\n    for num in arr:\n        if num <= x:\n            return 'NO'\n    return 'YES'", "task_id": "760_90aed261-b1e0-4afd-b448-b6171fbac81c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array contains at least one negative number.", "code": "def contains_negative_number(arr: list) -> str:\n    for num in arr:\n        if num < 0:\n            return 'YES'\n    return 'NO'", "task_id": "760_c32df862-6821-4c04-8c86-ced89de83ab7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in an array are even.", "code": "def all_elements_even(arr: list) -> str:\n    for num in arr:\n        if num % 2 != 0:\n            return 'NO'\n    return 'YES'", "task_id": "760_95f475a5-6fb7-41f2-8896-871a309f3c3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether any string in a list is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]\n\ndef contains_palindrome(strings: list) -> str:\n    for string in strings:\n        if is_palindrome(string):\n            return 'YES'\n    return 'NO'", "task_id": "760_b19f1735-2133-4ed6-987f-5295e5de6182", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all elements in an array are less than a given number x.", "code": "def all_elements_less_than(arr: list, x: int) -> str:\n    for num in arr:\n        if num >= x:\n            return 'NO'\n    return 'YES'", "task_id": "760_a60e0271-64ef-41ab-8b8d-203a5921762c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False", "task_id": "762_1c376815-5c1e-4f2e-bc5c-c4d5ec2a84a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given day number (1 for Monday, 2 for Tuesday, ..., 7 for Sunday) is a weekend or not.", "code": "def is_weekend(day: int) -> bool:\n    return day == 6 or day == 7", "task_id": "762_d05b0534-eb0a-4da5-af09-b518f36209d5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given character is a vowel or not.", "code": "def is_vowel(char: str) -> bool:\n    return char.lower() in 'aeiou'", "task_id": "762_dcbde6de-d191-4a6b-891d-c5538f234d73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a prime number or not.", "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "762_6e4e5873-71b8-4be3-a2d8-e54505915eb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "762_2bd4ab8d-50de-4b89-84d3-e8b43feda958", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is even or not.", "code": "def is_even(num: int) -> bool:\n    return num % 2 == 0", "task_id": "762_017241bd-ce7a-4897-b6ec-2c7bbb97ee23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given character is uppercase or not.", "code": "def is_uppercase(char: str) -> bool:\n    return char.isupper()", "task_id": "762_9222dede-5794-43ed-b52b-4c829eff4bdb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a multiple of five or not.", "code": "def is_multiple_of_five(num: int) -> bool:\n    return num % 5 == 0", "task_id": "762_1d9f710d-fac9-4a74-a05c-0b3e347117b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given substring is present in a given main string or not.", "code": "def is_substring(sub: str, main: str) -> bool:\n    return sub in main", "task_id": "762_55daf062-6d4b-453d-a896-9c662e1d7124", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is positive or not.", "code": "def is_positive(num: int) -> bool:\n    return num > 0", "task_id": "762_623029a8-576f-4f4d-9a3c-7d93494ec658", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the arc length of an angle in radians.", "code": "def calculate_arc_length(diameter, angle):\n    pi = 22/7\n    if angle >= 2 * pi:\n        return None\n    arclength = (pi * diameter) * (angle / (2 * pi))\n    return arclength", "task_id": "761_e032dcdc-432f-48c4-b99c-56118f2d71b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a sector given the radius and angle in degrees.", "code": "def calculate_sector_area(radius, angle):\n    pi = 22/7\n    if angle >= 360:\n        return None\n    area = (pi * radius ** 2) * (angle / 360)\n    return area", "task_id": "761_713b3d95-71f6-4014-be1b-05fc218ca418", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of a chord given the radius and angle in degrees.", "code": "def calculate_chord_length(radius, angle):\n    import math\n    if angle >= 360:\n        return None\n    angle_rad = math.radians(angle)\n    chord_length = 2 * radius * math.sin(angle_rad / 2)\n    return chord_length", "task_id": "761_c9292337-8349-47f0-8dbc-dda3d1bde93e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the circumference of a circle given the diameter.", "code": "def calculate_circumference(diameter):\n    pi = 22/7\n    circumference = pi * diameter\n    return circumference", "task_id": "761_01d7a6f7-664c-4bea-bbf1-ab893ecef13a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a circle given the radius.", "code": "def calculate_area_of_circle(radius):\n    pi = 22/7\n    area = pi * radius ** 2\n    return area", "task_id": "761_6b79f8c0-011b-4a37-9d08-5aa578dc9f55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the arc length of an angle given the radius.", "code": "def calculate_arc_length_from_radius(radius, angle):\n    pi = 22/7\n    if angle >= 360:\n        return None\n    arclength = (2 * pi * radius) * (angle / 360)\n    return arclength", "task_id": "761_08aaa7e9-9d6d-4750-b3bd-7111cb637524", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a segment given the radius and angle in degrees.", "code": "def calculate_segment_area(radius, angle):\n    pi = 22/7\n    if angle >= 360:\n        return None\n    angle_rad = (pi / 180) * angle\n    segment_area = (radius ** 2 / 2) * (angle_rad - math.sin(angle_rad))\n    return segment_area", "task_id": "761_edf78147-c5f6-4252-bc7f-cbdcc01045ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the approximate circumference of an ellipse given the semi-major axis (a) and semi-minor axis (b).", "code": "def calculate_ellipse_circumference(a, b):\n    import math\n    pi = 22/7\n    h = ((a - b) ** 2) / ((a + b) ** 2)\n    circumference = pi * (a + b) * (1 + (3 * h) / (10 + math.sqrt(4 - 3 * h)))\n    return circumference", "task_id": "761_0b920e44-217f-4b9c-acaa-cb7522c53ae5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of an ellipse given the semi-major axis (a) and semi-minor axis (b).", "code": "def calculate_ellipse_area(a, b):\n    pi = 22/7\n    area = pi * a * b\n    return area", "task_id": "761_6cf3fc72-22b2-4c53-8b0a-3f87dc30674a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the arc length of an angle given the circumference of the circle.", "code": "def calculate_arc_length_from_circumference(circumference, angle):\n    if angle >= 360:\n        return None\n    arclength = circumference * (angle / 360)\n    return arclength", "task_id": "761_188ca1cd-61c3-4e5a-90f2-2372c3a696aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int: return sum(int(digit) for digit in str(n))", "task_id": "765_4db214f0-72ad-4bab-95fc-32fdad2d0326", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str: return s[::-1]", "task_id": "765_947b2356-8f45-4131-895a-cb0b4a8a3b8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool: if n <= 1: return False for i in range(2, int(n**0.5) + 1): if n % i == 0: return False return True", "task_id": "765_eee5736c-f3be-4f90-a882-e15cbce20ff8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int: if n <= 0: return 0 elif n == 1: return 1 else: a, b = 0, 1 for _ in range(2, n+1): a, b = b, a + b return b", "task_id": "765_9615ca8b-5323-4796-a27b-b259bc966a9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int: if n == 0: return 1 else: return n * factorial(n-1)", "task_id": "765_c65c9b5e-81d6-4d89-8203-7f820ad884bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool: return s == s[::-1]", "task_id": "765_ac6e35dd-edbf-4770-be00-62200412d53a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int: while b: a, b = b, a % b return a", "task_id": "765_de1d082d-9644-4f4b-9e8d-280412a3b8cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int: def gcd(a, b): while b: a, b = b, a % b return a return abs(a*b) // gcd(a, b)", "task_id": "765_44c739e1-06b0-4c5b-859f-26bd3293ad1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int: return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "765_96661130-3158-43ed-b8f5-e6a3afe5080a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> bool: return sorted(s1) == sorted(s2)", "task_id": "765_6d05d545-4f49-43c2-9175-cf0dfe52f33d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count uppercase letters in a given string.", "code": "def count_uppercase_letters(s):\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "task_id": "764_d41416a3-8f3b-48c3-b7b8-b8b8d82510a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "764_9046a395-4f61-4c52-bad4-21062840e7b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of consonants in a given string.", "code": "def count_consonants(s):\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            count += 1\n    return count", "task_id": "764_bda39006-cbab-4bb2-a182-d21ff1dee581", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of spaces in a given string.", "code": "def count_spaces(s):\n    count = 0\n    for char in s:\n        if char == ' ':\n            count += 1\n    return count", "task_id": "764_aea4433d-60d1-4262-b61e-072a422b40a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of special characters in a given string.", "code": "def count_special_characters(s):\n    count = 0\n    for char in s:\n        if not char.isalnum() and not char.isspace():\n            count += 1\n    return count", "task_id": "764_c2b28177-42b9-4e9c-8736-019e36431fc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s):\n    words = s.split()\n    return len(words)", "task_id": "764_8f479701-b307-435c-ac7f-e995282319b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of sentences in a given string. Assume sentences end with '.', '!', or '?'.", "code": "def count_sentences(s):\n    count = 0\n    for char in s:\n        if char in '.!?':\n            count += 1\n    return count", "task_id": "764_3956b9c5-40ac-47c8-8752-5506cd61a19a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of digits in a given string.", "code": "def count_digits(s):\n    count = 0\n    for char in s:\n        if char.isdigit():\n            count += 1\n    return count", "task_id": "764_eafb39a5-406b-4883-8489-e5739064f9e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of lowercase letters in a given string.", "code": "def count_lowercase_letters(s):\n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return count", "task_id": "764_8e9d2490-cb2b-4865-a4d0-8ec24c9c9946", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of alphanumeric characters in a given string.", "code": "def count_alphanumeric(s):\n    count = 0\n    for char in s:\n        if char.isalnum():\n            count += 1\n    return count", "task_id": "764_0f70698e-8082-415f-995f-8174890c0a56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum difference between any two elements in a given array.", "code": "def find_Max_Diff(arr, n): \n    arr = sorted(arr) \n    diff = 0 \n    for i in range(n-1): \n        if arr[i+1] - arr[i] > diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_da585624-34df-4b4c-9d6b-abfa7958537d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum positive difference between any two elements in a given array.", "code": "def find_Min_Positive_Diff(arr, n): \n    arr = sorted(arr) \n    diff = float('inf') \n    for i in range(n-1): \n        if 0 < arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_217aa4b8-026f-452b-a56f-5588d8c82f49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum absolute difference between any two elements in a given array.", "code": "def find_Min_Abs_Diff(arr, n): \n    arr = sorted(arr) \n    diff = float('inf') \n    for i in range(n-1): \n        if abs(arr[i+1] - arr[i]) < diff: \n            diff = abs(arr[i+1] - arr[i])  \n    return diff", "task_id": "763_18ee9a89-b347-4fc0-a024-4dd7358c3f7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given sorted array.", "code": "def find_Min_Diff_Sorted(arr): \n    diff = float('inf') \n    for i in range(len(arr)-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_6ee6d71c-9d77-49ac-9289-b5de8037b6af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given unsorted array.", "code": "def find_Min_Diff_Unsorted(arr): \n    arr = sorted(arr) \n    diff = float('inf') \n    for i in range(len(arr)-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_dcce2d71-f8ae-4a70-8412-c9973fbc3684", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the indices of the two elements with the minimum difference in a given array.", "code": "def find_Min_Diff_Indices(arr, n): \n    arr = sorted((val, idx) for idx, val in enumerate(arr)) \n    diff = float('inf') \n    min_pair = (0, 0) \n    for i in range(n-1): \n        if arr[i+1][0] - arr[i][0] < diff: \n            diff = arr[i+1][0] - arr[i][0] \n            min_pair = (arr[i][1], arr[i+1][1]) \n    return min_pair", "task_id": "763_b1bb4777-5fbc-475d-b6fe-683dff06acfc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between the sums of any two non-overlapping subarrays of length 2 in a given array.", "code": "def find_Min_Diff_Sum(arr, n): \n    arr = sorted(arr) \n    diff = float('inf') \n    for i in range(n-3): \n        for j in range(i+2, n-1): \n            sum1 = arr[i] + arr[i+1] \n            sum2 = arr[j] + arr[j+1] \n            if abs(sum1 - sum2) < diff: \n                diff = abs(sum1 - sum2) \n    return diff", "task_id": "763_253eab14-87ef-4f27-b06e-d1a6389c3bec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array where one element is even and the other is odd.", "code": "def find_Min_Diff_Even_Odd(arr, n): \n    evens = sorted([x for x in arr if x % 2 == 0]) \n    odds = sorted([x for x in arr if x % 2 != 0]) \n    diff = float('inf') \n    for e in evens: \n        for o in odds: \n            if abs(e - o) < diff: \n                diff = abs(e - o) \n    return diff", "task_id": "763_41b4b0c2-d58e-4b0f-8ed8-a36b9d1a7dc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array that is greater than a given threshold.", "code": "def find_Min_Diff_Threshold(arr, n, threshold): \n    arr = sorted(arr) \n    diff = float('inf') \n    for i in range(n-1): \n        if arr[i+1] - arr[i] > threshold and arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_87763188-b30c-4007-a939-cac4dfddfe4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum difference between any two elements in a given array where both elements are greater than a given value.", "code": "def find_Min_Diff_Above_Value(arr, n, value): \n    arr = sorted([x for x in arr if x > value]) \n    diff = float('inf') \n    for i in range(len(arr)-1): \n        if arr[i+1] - arr[i] < diff: \n            diff = arr[i+1] - arr[i]  \n    return diff", "task_id": "763_ebf27fd4-f3e7-49b3-bd1a-39256883ba75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of sums of all pairs of consecutive items in a given list.", "code": "def sum_of_pairs(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "766_43fb20d4-9021-4c8a-9e17-2c75bb32b8a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of products of all pairs of consecutive items in a given list.", "code": "def product_of_pairs(lst):\n    return [lst[i] * lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "766_3e1d011c-2452-4d53-a3b8-172ab2fcca26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of differences of all pairs of consecutive items in a given list.", "code": "def difference_of_pairs(lst):\n    return [lst[i] - lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "766_82dff064-86c7-4339-b9c8-86a99aa8e8b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of concatenated strings of all pairs of consecutive items in a given list.", "code": "def concatenate_pairs(lst):\n    return [lst[i] + lst[i + 1] for i in range(len(lst) - 1)]", "task_id": "766_5c36931c-6335-4ddb-990c-91c9957a1c53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of averages of all pairs of consecutive items in a given list.", "code": "def average_of_pairs(lst):\n    return [(lst[i] + lst[i + 1]) / 2 for i in range(len(lst) - 1)]", "task_id": "766_75159f9a-3c3e-4fd3-9f58-6a4c68210520", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of maximum values of all pairs of consecutive items in a given list.", "code": "def max_of_pairs(lst):\n    return [max(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]", "task_id": "766_2c25a569-ec47-44f9-8fff-4a762d70cbb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of minimum values of all pairs of consecutive items in a given list.", "code": "def min_of_pairs(lst):\n    return [min(lst[i], lst[i + 1]) for i in range(len(lst) - 1)]", "task_id": "766_67312b17-5e97-43ed-a21d-a5d24acfc9c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of sums of all triplets of consecutive items in a given list.", "code": "def sum_of_triplets(lst):\n    return [lst[i] + lst[i + 1] + lst[i + 2] for i in range(len(lst) - 2)]", "task_id": "766_29906169-9361-4015-892c-df407c6ad258", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of products of all triplets of consecutive items in a given list.", "code": "def product_of_triplets(lst):\n    return [lst[i] * lst[i + 1] * lst[i + 2] for i in range(len(lst) - 2)]", "task_id": "766_284ac999-6a1d-404d-941d-de0b7bb0ec11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a list of concatenated strings of all triplets of consecutive items in a given list.", "code": "def concatenate_triplets(lst):\n    return [lst[i] + lst[i + 1] + lst[i + 2] for i in range(len(lst) - 2)]", "task_id": "766_d6c11ca0-bf2d-478d-80ad-58cec61cd626", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check for even parity of a given number.", "code": "def check_Even_Parity(x): \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    return parity % 2 == 0", "task_id": "768_a81124f1-20d4-432e-894b-008659b3718e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in the binary representation of a given number.", "code": "def count_Set_Bits(x): \n    count = 0\n    while (x != 0): \n        x = x & (x - 1) \n        count += 1\n    return count", "task_id": "768_6aefc949-182d-4c03-b432-352b47996e26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_Power_Of_Two(x): \n    return x > 0 and (x & (x - 1)) == 0", "task_id": "768_3a21b0c1-3760-47d4-a8ca-161510722a86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the bit at a given position in an integer.", "code": "def toggle_Bit(x, pos): \n    return x ^ (1 << pos)", "task_id": "768_c24c3137-d675-4b6f-9485-ba161e2d2dc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the bit at a given position in an integer.", "code": "def clear_Bit(x, pos): \n    return x & ~(1 << pos)", "task_id": "768_81f84806-d793-45aa-af46-57efa892001d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the bit at a given position in an integer.", "code": "def set_Bit(x, pos): \n    return x | (1 << pos)", "task_id": "768_a4dd49e6-3d71-437b-a295-b4a32199d788", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the bit at a given position in an integer is set.", "code": "def is_Bit_Set(x, pos): \n    return (x & (1 << pos)) != 0", "task_id": "768_8327cd0f-393c-48e9-944c-f07443811921", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap two bits at given positions in an integer.", "code": "def swap_Bits(x, pos1, pos2): \n    bit1 = (x >> pos1) & 1\n    bit2 = (x >> pos2) & 1\n    if bit1 != bit2: \n        x ^= (1 << pos1) | (1 << pos2)\n    return x", "task_id": "768_adc8587a-2c11-4d5c-9dfc-55e4fcf24100", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given integer.", "code": "def reverse_Bits(x): \n    result = 0\n    while x > 0: \n        result = (result << 1) | (x & 1)\n        x >>= 1\n    return result", "task_id": "768_bac1962e-dee8-4372-b5b0-20da3113a164", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in the binary representation of a given number.", "code": "def count_Leading_Zeros(x): \n    if x == 0: \n        return 32\n    count = 0\n    while (x & (1 << 31)) == 0: \n        x <<= 1\n        count += 1\n    return count", "task_id": "768_8e93dd27-a8de-41ff-98e2-5ce48ab665db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose difference is equal to \u2018diff\u2019.", "code": "def count_pairs_with_difference(arr, n, diff):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if abs(arr[i] - arr[j]) == diff:\n                count += 1\n    return count", "task_id": "767_c56025e2-4538-4f61-a118-1cfbf34c8dea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose product is equal to \u2018product\u2019.", "code": "def count_pairs_with_product(arr, n, product):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] * arr[j] == product:\n                count += 1\n    return count", "task_id": "767_52009ab7-aaba-43ae-800f-8d944f3bf628", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is within the range [low, high].", "code": "def count_pairs_with_sum_in_range(arr, n, low, high):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if low <= arr[i] + arr[j] <= high:\n                count += 1\n    return count", "task_id": "767_2cf0636b-b248-4419-9d67-a1ef7e56cb8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is even.", "code": "def count_pairs_with_even_sum(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % 2 == 0:\n                count += 1\n    return count", "task_id": "767_37ea1297-048e-4a11-8156-7fc4dc77a1ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is odd.", "code": "def count_pairs_with_odd_sum(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % 2 != 0:\n                count += 1\n    return count", "task_id": "767_c2ff5153-00c4-43f3-b73d-e8310b19bce5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is divisible by \u2018k\u2019.", "code": "def count_pairs_with_sum_divisible_by_k(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] + arr[j]) % k == 0:\n                count += 1\n    return count", "task_id": "767_dee34725-693b-42e0-8f36-6dca9f29bfbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is greater than \u2018k\u2019.", "code": "def count_pairs_with_sum_greater_than_k(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] > k:\n                count += 1\n    return count", "task_id": "767_fc695924-5dd7-41aa-890e-c966dcb82744", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is less than \u2018k\u2019.", "code": "def count_pairs_with_sum_less_than_k(arr, n, k):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] < k:\n                count += 1\n    return count", "task_id": "767_b7736747-33ad-4093-9f5b-b91ef734a041", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is equal to the index of the second element in the pair.", "code": "def count_pairs_with_sum_equal_to_index(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == j:\n                count += 1\n    return count", "task_id": "767_81e72d54-ff2e-4a24-aff7-7a6b49d97db0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs whose sum is equal to the product of their indices.", "code": "def count_pairs_with_sum_equal_to_product(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if arr[i] + arr[j] == i * j:\n                count += 1\n    return count", "task_id": "767_b8757396-ee5f-4dee-9493-dc26847b644f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the common elements between two lists.", "code": "def common_elements(list1, list2):\n    return list(set(list1) & set(list2))", "task_id": "769_86a9c3c8-75ab-4161-ba1b-f5c407ad072a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the elements that are unique to each list.", "code": "def unique_elements(list1, list2):\n    return list(set(list1) ^ set(list2))", "task_id": "769_e1fbf4c3-9db7-4383-ad30-ee02e50c1008", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the union of two lists.", "code": "def list_union(list1, list2):\n    return list(set(list1) | set(list2))", "task_id": "769_34e50ff3-142d-433f-b1b3-0ab3a567d789", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the intersection of two lists.", "code": "def list_intersection(list1, list2):\n    return list(set(list1) & set(list2))", "task_id": "769_5ff6e72c-5fc1-4db3-98f0-bb79f30f3ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the elements in the first list that are not in the second list.", "code": "def list_difference(list1, list2):\n    return list(set(list1) - set(list2))", "task_id": "769_5a424bd5-a9aa-459c-9088-9abbbb4f4bdc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the symmetric difference between two lists.", "code": "def list_symmetric_difference(list1, list2):\n    return list(set(list1) ^ set(list2))", "task_id": "769_cec0a85d-baa4-4eb9-ad8b-358d24533758", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the first list is a subset of the second list.", "code": "def list_subset(list1, list2):\n    return set(list1).issubset(set(list2))", "task_id": "769_e3924ef1-b4e7-440d-878a-71058b3f1d56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the first list is a superset of the second list.", "code": "def list_superset(list1, list2):\n    return set(list1).issuperset(set(list2))", "task_id": "769_e85fd5f7-054a-4f0f-8ab2-6b6c14383bd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two lists are disjoint.", "code": "def list_disjoint(list1, list2):\n    return set(list1).isdisjoint(set(list2))", "task_id": "769_a430ff42-8931-4f7b-936b-536464f47796", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the Cartesian product of two lists.", "code": "def list_cartesian_product(list1, list2):\n    return [(a, b) for a in list1 for b in list2]", "task_id": "769_bdc0a60b-942f-4395-9373-c88d9203fea4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n even natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (2 * i) ** 2\n    return sm", "task_id": "770_807829c2-2ec0-4e27-a97c-002a38fad803", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n natural numbers.", "code": "def sum_of_cubes(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += i ** 3\n    return sm", "task_id": "770_08e1d45d-2d82-471a-8ef0-810c0d58387e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth power of first n even natural numbers.", "code": "def sum_of_fourth_powers_even(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (2 * i) ** 4\n    return sm", "task_id": "770_6d013b65-217b-4772-b4fc-4e5db61a8a4e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n odd natural numbers.", "code": "def sum_of_squares_odd(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (2 * i - 1) ** 2\n    return sm", "task_id": "770_eebbadfc-97cb-4abf-8152-cbdc3bf3da7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n even natural numbers.", "code": "def sum_of_cubes_even(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (2 * i) ** 3\n    return sm", "task_id": "770_61715f06-c8eb-4e14-9a23-a18d13886786", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of first n odd natural numbers.", "code": "def sum_of_fifth_powers_odd(n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (2 * i - 1) ** 5\n    return sm", "task_id": "770_850de1f3-56ba-4590-805d-c726e8efd9e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of first n multiples of a given number m.", "code": "def sum_of_squares_first_n_multiples(m: int, n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (m * i) ** 2\n    return sm", "task_id": "770_62bf4ba2-4615-4892-adbe-d60b80b2e064", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of first n multiples of a given number m.", "code": "def sum_of_cubes_first_n_multiples(m: int, n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (m * i) ** 3\n    return sm", "task_id": "770_aec2ec86-3154-4d75-9760-5025b460c916", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fourth power of first n multiples of a given number m.", "code": "def sum_of_fourth_powers_first_n_multiples(m: int, n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (m * i) ** 4\n    return sm", "task_id": "770_573704c9-ab46-4187-826c-99703bdcff17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of fifth power of first n multiples of a given number m.", "code": "def sum_of_fifth_powers_first_n_multiples(m: int, n: int) -> int:\n    sm = 0\n    for i in range(1, n + 1):\n        sm += (m * i) ** 5\n    return sm", "task_id": "770_185fe64c-c1d8-46d2-a5f7-970d20c41d16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "771_c9d22f0c-deb8-4bde-833b-7ecce61100f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "771_3bf4eb3a-bbbf-47e0-8955-fe2410685960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "771_0c642b43-6dc9-413f-9f3f-c20c39960113", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "771_e805d58a-9925-4eb4-beae-14497e78361a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "771_46822140-dbc0-4428-bfc6-a7ca98fec2a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "771_a0f857db-a41a-4030-b9f2-43cad4eeb20f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "771_6b7952e8-7049-4134-bffe-1c5fd3229639", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "771_12b19b8c-0bf8-4088-8261-94ef42650a06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "771_2e20aba4-723d-4b89-9538-4d7c75dc2237", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a given list.", "code": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))", "task_id": "771_61fe4bb1-0080-4c65-9a9c-bf7524fd6249", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all vowels in a given string.", "code": "def find_vowels_positions(text):\n    vowels = 'aeiouAEIOU'\n    positions = []\n    for i, char in enumerate(text):\n        if char in vowels:\n            positions.append(i)\n    return positions", "task_id": "773_2cef0c36-d6bc-4fad-869c-aebddbc09727", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all digits in a given string.", "code": "def find_digit_positions(text):\n    positions = []\n    for i, char in enumerate(text):\n        if char.isdigit():\n            positions.append(i)\n    return positions", "task_id": "773_bedcefe6-050c-47e8-a6fe-49461444a77e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all occurrences of a word in a given string.", "code": "def find_word_positions(text, word):\n    positions = []\n    start = 0\n    while True:\n        start = text.find(word, start)\n        if start == -1:\n            break\n        positions.append(start)\n        start += len(word)\n    return positions", "task_id": "773_f23e39e8-9af4-44ce-bf8e-d487ca884364", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all consonants in a given string.", "code": "def find_consonants_positions(text):\n    vowels = 'aeiouAEIOU'\n    positions = []\n    for i, char in enumerate(text):\n        if char.isalpha() and char not in vowels:\n            positions.append(i)\n    return positions", "task_id": "773_5ca693eb-969f-4840-9e0d-54d446b92749", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all uppercase letters in a given string.", "code": "def find_uppercase_positions(text):\n    positions = []\n    for i, char in enumerate(text):\n        if char.isupper():\n            positions.append(i)\n    return positions", "task_id": "773_d57863d6-3903-4f12-9afa-0aa9991f4cd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all lowercase letters in a given string.", "code": "def find_lowercase_positions(text):\n    positions = []\n    for i, char in enumerate(text):\n        if char.islower():\n            positions.append(i)\n    return positions", "task_id": "773_6445a140-e692-44a3-9896-a7b938308fda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all special characters (non-alphanumeric) in a given string.", "code": "def find_special_char_positions(text):\n    positions = []\n    for i, char in enumerate(text):\n        if not char.isalnum():\n            positions.append(i)\n    return positions", "task_id": "773_48e1e69f-d6b5-4f9d-8e97-bd3d82854aa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all occurrences of a substring in a given string.", "code": "def find_substring_positions(text, substring):\n    positions = []\n    start = 0\n    while True:\n        start = text.find(substring, start)\n        if start == -1:\n            break\n        positions.append(start)\n        start += len(substring)\n    return positions", "task_id": "773_ff4691bc-da09-4bae-aeef-ecf7c8912243", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all palindromic substrings in a given string.", "code": "def find_palindrome_positions(text):\n    def is_palindrome(s):\n        return s == s[::-1]\n    positions = []\n    for i in range(len(text)):\n        for j in range(i + 2, len(text) + 1):\n            if is_palindrome(text[i:j]):\n                positions.append((i, j))\n    return positions", "task_id": "773_1be0d1b3-7781-4ffc-9839-bffa9816da0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the positions of all repeated characters in a given string.", "code": "def find_repeated_char_positions(text):\n    from collections import Counter\n    char_count = Counter(text)\n    repeated_chars = {char for char, count in char_count.items() if count > 1}\n    positions = []\n    for i, char in enumerate(text):\n        if char in repeated_chars:\n            positions.append(i)\n    return positions", "task_id": "773_b2fd6cab-6947-4b6f-b9e2-af5977f3da1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words starting with a given character in the given string.", "code": "def remove_words_starting_with(test_str, char):\n  temp = test_str.split()\n  res = [ele for ele in temp if not ele.startswith(char)]\n  res = ' '.join(res)\n  return res", "task_id": "772_866a4d34-ee01-4831-84ec-cb69f9861a86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing a given character in the given string.", "code": "def remove_words_containing(test_str, char):\n  temp = test_str.split()\n  res = [ele for ele in temp if char not in ele]\n  res = ' '.join(res)\n  return res", "task_id": "772_c06caeb8-c467-4198-b566-b3d0741f1b4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing any vowels in the given string.", "code": "def remove_words_with_vowels(test_str):\n  vowels = 'aeiouAEIOU'\n  temp = test_str.split()\n  res = [ele for ele in temp if not any(v in ele for v in vowels)]\n  res = ' '.join(res)\n  return res", "task_id": "772_c25f5f30-4af8-43aa-9fa8-00296f4cdfac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing any digits in the given string.", "code": "def remove_words_with_digits(test_str):\n  temp = test_str.split()\n  res = [ele for ele in temp if not any(c.isdigit() for c in ele)]\n  res = ' '.join(res)\n  return res", "task_id": "772_d78e060f-4651-4a9b-857f-adbc0f3ec42e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words ending with a given character in the given string.", "code": "def remove_words_ending_with(test_str, char):\n  temp = test_str.split()\n  res = [ele for ele in temp if not ele.endswith(char)]\n  res = ' '.join(res)\n  return res", "task_id": "772_d59894d7-08cc-4021-a9cc-fd379dfa7e22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing any special characters in the given string.", "code": "def remove_words_with_special_chars(test_str):\n  import string\n  special_chars = string.punctuation\n  temp = test_str.split()\n  res = [ele for ele in temp if not any(c in special_chars for c in ele)]\n  res = ' '.join(res)\n  return res", "task_id": "772_a591e4d7-4901-46e0-b7a3-5b3ff419b286", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing any uppercase letters in the given string.", "code": "def remove_words_with_uppercase(test_str):\n  temp = test_str.split()\n  res = [ele for ele in temp if not any(c.isupper() for c in ele)]\n  res = ' '.join(res)\n  return res", "task_id": "772_bb67d71f-1ad7-4fce-966a-e4b96d692cb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words containing consecutive occurrences of a given character in the given string.", "code": "def remove_words_with_consecutive_chars(test_str, char):\n  temp = test_str.split()\n  res = [ele for ele in temp if char*2 not in ele]\n  res = ' '.join(res)\n  return res", "task_id": "772_ca63b171-ceeb-402c-9abb-03336bc43ce3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words with length greater than a given length in the given string.", "code": "def remove_words_with_length_greater_than(test_str, length):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) <= length]\n  res = ' '.join(res)\n  return res", "task_id": "772_cec1e0b0-1220-4d28-993d-0ad0dd381197", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all the words with length less than a given length in the given string.", "code": "def remove_words_with_length_less_than(test_str, length):\n  temp = test_str.split()\n  res = [ele for ele in temp if len(ele) >= length]\n  res = ' '.join(res)\n  return res", "task_id": "772_a7432bd1-bb44-42a6-b2e5-0bc100d027be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains even numbers of a given list.", "code": "def even_position(nums):\n\treturn all(nums[i] % 2 == 0 for i in range(len(nums)) if i % 2 == 0)", "task_id": "775_b2ef0007-b88b-430f-ba59-f8a2cbf5864a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains positive numbers of a given list.", "code": "def odd_position_positive(nums):\n\treturn all(nums[i] > 0 for i in range(len(nums)) if i % 2 != 0)", "task_id": "775_58c52866-c8c7-48b9-a9a5-1e462ca3f57e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains negative numbers of a given list.", "code": "def even_position_negative(nums):\n\treturn all(nums[i] < 0 for i in range(len(nums)) if i % 2 == 0)", "task_id": "775_135121ff-6c59-4819-a6a9-7315270a66c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains prime numbers of a given list.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef odd_position_prime(nums):\n\treturn all(is_prime(nums[i]) for i in range(len(nums)) if i % 2 != 0)", "task_id": "775_515ce887-0f9b-4fc5-a5d1-40d10ab07009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains numbers greater than five of a given list.", "code": "def even_position_greater_than_five(nums):\n\treturn all(nums[i] > 5 for i in range(len(nums)) if i % 2 == 0)", "task_id": "775_b36c77a0-eee3-447e-b3c8-926d8a401d95", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains numbers less than ten of a given list.", "code": "def odd_position_less_than_ten(nums):\n\treturn all(nums[i] < 10 for i in range(len(nums)) if i % 2 != 0)", "task_id": "775_4c809963-9b4a-4833-955f-9039df598e37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains numbers that are multiples of three of a given list.", "code": "def even_position_multiple_of_three(nums):\n\treturn all(nums[i] % 3 == 0 for i in range(len(nums)) if i % 2 == 0)", "task_id": "775_d1f0b9c2-ea69-4c06-aad8-0e73e4c85eb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains numbers that are multiples of five of a given list.", "code": "def odd_position_multiple_of_five(nums):\n\treturn all(nums[i] % 5 == 0 for i in range(len(nums)) if i % 2 != 0)", "task_id": "775_a54705ee-3775-4d86-86a6-022319f49f8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains palindromic strings of a given list.", "code": "def is_palindrome(s):\n\treturn s == s[::-1]\n\ndef even_position_palindrome(nums):\n\treturn all(is_palindrome(nums[i]) for i in range(len(nums)) if i % 2 == 0)", "task_id": "775_ec0f5e81-8b2f-4577-8c3f-4f893e8a2ddb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains strings of length three of a given list.", "code": "def odd_position_length_three(nums):\n\treturn all(len(nums[i]) == 3 for i in range(len(nums)) if i % 2 != 0)", "task_id": "775_b77f11bf-f5ef-4065-9a70-5f064f1ada46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique elements in a given array.", "code": "def sum_of_unique_elements(arr: list[int]) -> int:\n    return sum(set(arr))", "task_id": "777_20e34c18-4f86-4d9f-b6b8-e45fab624e10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of unique elements in a given array.", "code": "def product_of_unique_elements(arr: list[int]) -> int:\n    product = 1\n    for num in set(arr):\n        product *= num\n    return product", "task_id": "777_f9fe8ee4-17ee-4da8-9191-9741bda49253", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique even elements in a given array.", "code": "def sum_of_even_unique_elements(arr: list[int]) -> int:\n    return sum(num for num in set(arr) if num % 2 == 0)", "task_id": "777_160f4ef9-3861-449c-be33-7149e5de0052", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of unique odd elements in a given array.", "code": "def sum_of_odd_unique_elements(arr: list[int]) -> int:\n    return sum(num for num in set(arr) if num % 2 != 0)", "task_id": "777_f6f103fc-c58d-4cc1-b0d7-dcd210912d6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements that appear exactly once in a given array.", "code": "def sum_of_non_repeated_elements(arr: list[int]) -> int:\n    return sum(num for num in arr if arr.count(num) == 1)", "task_id": "777_6f3c848f-01c1-4560-928c-bb4bc670ded1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements greater than a given value k in a given array.", "code": "def sum_of_elements_greater_than_k(arr: list[int], k: int) -> int:\n    return sum(num for num in arr if num > k)", "task_id": "777_9a668021-cb18-410a-bc26-d70f9835b651", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements less than a given value k in a given array.", "code": "def sum_of_elements_less_than_k(arr: list[int], k: int) -> int:\n    return sum(num for num in arr if num < k)", "task_id": "777_1413cda0-8311-472b-a14d-884c426406f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at even indices in a given array.", "code": "def sum_of_elements_at_even_indices(arr: list[int]) -> int:\n    return sum(arr[i] for i in range(0, len(arr), 2))", "task_id": "777_1a45b644-e27b-40db-a23e-f0871d798fd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements at odd indices in a given array.", "code": "def sum_of_elements_at_odd_indices(arr: list[int]) -> int:\n    return sum(arr[i] for i in range(1, len(arr), 2))", "task_id": "777_d742f491-a97c-440e-9975-ddcdf92dc9e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of elements divisible by a given value k in a given array.", "code": "def sum_of_elements_divisible_by_k(arr: list[int], k: int) -> int:\n    return sum(num for num in arr if num % k == 0)", "task_id": "777_4fee7db5-964c-4843-8211-7b787879b31f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique strings within a list.", "code": "def count_unique_strings(strings):\n    return len(set(strings))", "task_id": "779_7e8f28dc-0fca-41e0-a288-5d42c3bc18ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of unique numbers in a list.", "code": "def sum_unique_numbers(numbers):\n    return sum(set(numbers))", "task_id": "779_b13b243e-9cef-4ebf-8d5f-3c62a20c425b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique tuples within a list.", "code": "def unique_tuples(tuples):\n    return len(set(tuples))", "task_id": "779_76e7b284-e72f-4125-a766-b9ddc1c88216", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique characters in a string.", "code": "def unique_characters(s):\n    return len(set(s))", "task_id": "779_5f44f715-4187-4db9-aab2-b87c298505de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique words in a sentence.", "code": "def unique_words(sentence):\n    return len(set(sentence.split()))", "task_id": "779_0f32a4cd-8f2a-4a68-a0d3-33954751923b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique elements in a 2D matrix.", "code": "def unique_elements(matrix):\n    unique_set = set()\n    for row in matrix:\n        unique_set.update(row)\n    return len(unique_set)", "task_id": "779_509f59fd-5af4-4fa4-a525-900083e86917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique pairs in a list of pairs.", "code": "def unique_pairs(pairs):\n    return len(set(map(tuple, pairs)))", "task_id": "779_a6d2803c-d255-4667-824e-6d12c936eb75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique numbers from a list.", "code": "def unique_numbers(numbers):\n    return list(set(numbers))", "task_id": "779_29ef231b-9dc4-4563-a270-7bd92bcc3c32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique lists within a list of lists.", "code": "def unique_lists(lists):\n    return len(set(map(tuple, lists)))", "task_id": "779_bedd5e73-4402-4a7f-91af-5292f3bab74e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique dictionaries within a list of dictionaries.", "code": "def unique_dicts(dicts):\n    return len({frozenset(d.items()) for d in dicts})", "task_id": "779_e5029c25-95cc-45ed-a041-40a2b2d3b478", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of products with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_product(test_list):\n  res = [(b1 * a1, b2 * a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_493358e0-5fb8-4928-af00-b3f5ff69b71f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of differences with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_difference(test_list):\n  res = [(b1 - a1, b2 - a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_9a9e2b25-727b-4c9c-8a0d-dd3264d14d14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums of squares with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_sum_of_squares(test_list):\n  res = [(b1**2 + a1**2, b2**2 + a2**2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_494f2167-42a1-4e76-b5e1-6eec5e0da8c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of absolute differences with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_absolute_difference(test_list):\n  res = [(abs(b1 - a1), abs(b2 - a2)) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_fb62b742-9538-4f78-875f-6597231082c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of maximum values with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_max(test_list):\n  res = [(max(b1, a1), max(b2, a2)) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_41969a1e-8dc4-4f4e-85a2-5225c6bd2d42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of minimum values with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_min(test_list):\n  res = [(min(b1, a1), min(b2, a2)) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_6b24d737-2863-43fa-bfb8-5ee925069c7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums of cubes with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_sum_of_cubes(test_list):\n  res = [(b1**3 + a1**3, b2**3 + a2**3) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_85292602-ca0a-4df8-ba44-911bd39b3394", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums of square roots with tuples in the given tuple list.", "code": "from itertools import combinations\nimport math\ndef find_combinations_with_sum_of_squares_root(test_list):\n  res = [(math.sqrt(b1) + math.sqrt(a1), math.sqrt(b2) + math.sqrt(a2)) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_e0bf8ce9-930f-443c-940d-22fefa7c6619", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums of reciprocals with tuples in the given tuple list.", "code": "from itertools import combinations\ndef find_combinations_with_sum_of_reciprocals(test_list):\n  res = [(1/b1 + 1/a1, 1/b2 + 1/a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_615dca4a-df81-47c7-bf71-702dea596161", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the combinations of sums of logarithms with tuples in the given tuple list.", "code": "from itertools import combinations\nimport math\ndef find_combinations_with_sum_of_logs(test_list):\n  res = [(math.log(b1) + math.log(a1), math.log(b2) + math.log(a2)) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\n  return res", "task_id": "780_d137e64f-9b8d-4c18-86d4-fdd90f413d39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove consecutive duplicates from a given list.", "code": "def remove_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result", "task_id": "778_c4eed82f-ba2a-427f-9188-627f1f2a323e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count consecutive duplicates in a given list and return a list of tuples where each tuple contains the element and its consecutive count.", "code": "def count_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append((lst[i-1], count))\n            count = 1\n    result.append((lst[-1], count))\n    return result", "task_id": "778_6c6c07ba-8746-4b8c-81f7-c4f855d0c416", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split a given list into sublists whenever a consecutive duplicate is found.", "code": "def split_by_consecutive_duplicates(lst):\n    if not lst:\n        return []\n    result = [[]]\n    for i in range(len(lst)):\n        if i > 0 and lst[i] == lst[i-1]:\n            result.append([])\n        result[-1].append(lst[i])\n    return result", "task_id": "778_e8cb1f53-611e-46f8-afff-f9ad5047d78a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pack non-consecutive duplicates of a given list elements into sublists.", "code": "def pack_non_consecutive_duplicates(lst):\n    result = []\n    seen = {}\n    for item in lst:\n        if item in seen:\n            result[seen[item]].append(item)\n        else:\n            seen[item] = len(result)\n            result.append([item])\n    return result", "task_id": "778_f8cc633c-8958-4ba6-b8d0-f1e79db4943d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group elements of a given list into sublists by their length.", "code": "def group_by_length(lst):\n    result = {}\n    for item in lst:\n        length = len(item)\n        if length in result:\n            result[length].append(item)\n        else:\n            result[length] = [item]\n    return list(result.values())", "task_id": "778_8cdfc784-2d17-4a6e-a7ee-dc851f4874c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pack consecutive duplicates of a given list elements into sublists and include the count of each sublist.", "code": "def pack_consecutive_duplicates_with_counts(lst):\n    if not lst:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            result.append((lst[i-1], count))\n            count = 1\n    result.append((lst[-1], count))\n    return result", "task_id": "778_e2bb3339-0966-4bce-aed4-5cc8208fc189", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the starting indices of consecutive duplicates in a given list.", "code": "def find_consecutive_duplicates_indices(lst):\n    result = []\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            result.append(i-1)\n    return result", "task_id": "778_3b1819e6-3389-43bb-89a5-54dcf389a355", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pack consecutive duplicates of a given list elements into sublists and include the starting index of each sublist.", "code": "def pack_consecutive_duplicates_with_indices(lst):\n    if not lst:\n        return []\n    result = []\n    start_index = 0\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append((start_index, lst[start_index:i]))\n            start_index = i\n    result.append((start_index, lst[start_index:]))\n    return result", "task_id": "778_6a25450c-544b-429d-8e4b-b642b68edf3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pack consecutive duplicates of a given list elements into sublists and include the sum of each sublist.", "code": "def pack_consecutive_duplicates_with_sums(lst):\n    if not lst:\n        return []\n    result = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append((sublist, sum(sublist)))\n            sublist = [lst[i]]\n    result.append((sublist, sum(sublist)))\n    return result", "task_id": "778_f560ada2-3148-4d83-b8ba-653dbe31edb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to pack consecutive duplicates of a given list elements into sublists and include the maximum value of each sublist.", "code": "def pack_consecutive_duplicates_with_max(lst):\n    if not lst:\n        return []\n    result = []\n    sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            sublist.append(lst[i])\n        else:\n            result.append((sublist, max(sublist)))\n            sublist = [lst[i]]\n    result.append((sublist, max(sublist)))\n    return result", "task_id": "778_6bdfcab3-57b1-41f7-80ef-0bfe06405c16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is prime or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "781_3740b830-f174-49f1-8e51-0c5a1227ef01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "781_71cd2812-df05-4350-bceb-4bb02cfeed71", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "781_7441296b-8a11-4d04-b622-0586f2598db2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b", "task_id": "781_160399e3-f342-4e26-ad23-0b71ca9851d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "781_4cc45e2b-a9e5-42af-b2a1-de60edc03ab4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "781_1f90f8bb-d2b5-4343-a481-8c3efe7c5783", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "781_cbb28268-d48a-472a-835a-f3e3bc305ebf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "781_035bcd3a-cc78-4217-bb1c-1084fd2aca93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "781_51cdc335-d4b0-4506-aba2-a8725be020fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given number is a perfect square or not.", "code": "def is_perfect_square(n: int) -> bool:\n    return int(n**0.5) ** 2 == n", "task_id": "781_333411a0-775a-4c6e-adae-7ed871119529", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which have consonants as their neighbors in the given string.", "code": "def count_consonants(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] in vow_list and (test_str[idx - 1] not in vow_list or test_str[idx + 1] not in vow_list):\n      res += 1\n  if test_str[0] in vow_list and test_str[1] not in vow_list:\n    res += 1\n  if test_str[-1] in vow_list and test_str[-2] not in vow_list:\n    res += 1\n  return res", "task_id": "776_756c3ec1-c718-48b6-aab3-37708fd3e13e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which have uppercase letters as their neighbors in the given string.", "code": "def count_uppercase_neighbors(test_str):\n  res = 0\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx].islower() and (test_str[idx - 1].isupper() or test_str[idx + 1].isupper()):\n      res += 1\n  if test_str[0].islower() and test_str[1].isupper():\n    res += 1\n  if test_str[-1].islower() and test_str[-2].isupper():\n    res += 1\n  return res", "task_id": "776_e138326c-c73b-49b8-87cc-9e5025ac72ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which have digits as their neighbors in the given string.", "code": "def count_digits_neighbors(test_str):\n  res = 0\n  for idx in range(1, len(test_str) - 1):\n    if not test_str[idx].isdigit() and (test_str[idx - 1].isdigit() or test_str[idx + 1].isdigit()):\n      res += 1\n  if not test_str[0].isdigit() and test_str[1].isdigit():\n    res += 1\n  if not test_str[-1].isdigit() and test_str[-2].isdigit():\n    res += 1\n  return res", "task_id": "776_ec20495f-2b6c-4b4e-8fe3-93058985885a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which have special characters (non-alphanumeric) as their neighbors in the given string.", "code": "def count_special_neighbors(test_str):\n  res = 0\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx].isalnum() and (not test_str[idx - 1].isalnum() or not test_str[idx + 1].isalnum()):\n      res += 1\n  if test_str[0].isalnum() and not test_str[1].isalnum():\n    res += 1\n  if test_str[-1].isalnum() and not test_str[-2].isalnum():\n    res += 1\n  return res", "task_id": "776_e6995443-b0f3-463e-b2ad-911c8bedd6ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which have vowels as their neighbors in the given string, but only if the character itself is a vowel.", "code": "def count_vowels_neighbors(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0] in vow_list and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1] in vow_list and test_str[-2] in vow_list:\n    res += 1\n  return res", "task_id": "776_1603d2a1-1d5f-4a35-ba37-2a9a81eb6d1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which are digits and have vowels as their neighbors in the given string.", "code": "def count_digits(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx].isdigit() and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\n      res += 1\n  if test_str[0].isdigit() and test_str[1] in vow_list:\n    res += 1\n  if test_str[-1].isdigit() and test_str[-2] in vow_list:\n    res += 1\n  return res", "task_id": "776_128a20ae-2399-44d9-94a8-bfa9c82f09eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which are lowercase letters and have uppercase letters as their neighbors in the given string.", "code": "def count_lowercase_neighbors(test_str):\n  res = 0\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx].islower() and (test_str[idx - 1].isupper() or test_str[idx + 1].isupper()):\n      res += 1\n  if test_str[0].islower() and test_str[1].isupper():\n    res += 1\n  if test_str[-1].islower() and test_str[-2].isupper():\n    res += 1\n  return res", "task_id": "776_55bf7067-c582-4029-a58f-a4c3a204c55b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which are non-alphanumeric and have alphanumeric characters as their neighbors in the given string.", "code": "def count_non_alnum_neighbors(test_str):\n  res = 0\n  for idx in range(1, len(test_str) - 1):\n    if not test_str[idx].isalnum() and (test_str[idx - 1].isalnum() or test_str[idx + 1].isalnum()):\n      res += 1\n  if not test_str[0].isalnum() and test_str[1].isalnum():\n    res += 1\n  if not test_str[-1].isalnum() and test_str[-2].isalnum():\n    res += 1\n  return res", "task_id": "776_d8320f30-162f-462b-b178-79ca28e3cb93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which are vowels and have exactly one vowel neighbor in the given string.", "code": "def count_vowels_in_middle(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  for idx in range(1, len(test_str) - 1):\n    if test_str[idx] in vow_list and ((test_str[idx - 1] in vow_list) != (test_str[idx + 1] in vow_list)):\n      res += 1\n  return res", "task_id": "776_1554100e-6adf-4124-9cd6-8ee14865223c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count those characters which are vowels and are at the ends of the string.", "code": "def count_vowels_at_ends(test_str):\n  res = 0\n  vow_list = ['a', 'e', 'i', 'o', 'u']\n  if len(test_str) > 0 and test_str[0] in vow_list:\n    res += 1\n  if len(test_str) > 1 and test_str[-1] in vow_list:\n    res += 1\n  return res", "task_id": "776_1565f6b9-a05c-4aae-98a3-935ab6485634", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a hex color code to an RGB color tuple.", "code": "def hex_to_rgb(hex_color: str):\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))", "task_id": "783_11012c1c-be50-41f2-a0a3-3e02b0a95ca9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an RGB color tuple to a hex color code.", "code": "def rgb_to_hex(r: int, g: int, b: int):\n    return '#{:02x}{:02x}{:02x}'.format(r, g, b)", "task_id": "783_b3f69dc7-cde5-44c1-9462-ec89c70ca3a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a temperature from Celsius to Fahrenheit.", "code": "def celsius_to_fahrenheit(celsius: float):\n    return celsius * 9/5 + 32", "task_id": "783_bb1a8a59-360a-4f88-9909-543b7131757d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a temperature from Fahrenheit to Celsius.", "code": "def fahrenheit_to_celsius(fahrenheit: float):\n    return (fahrenheit - 32) * 5/9", "task_id": "783_958f711a-8f42-4103-8979-2c7fe10f2644", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a distance from kilometers to miles.", "code": "def km_to_miles(km: float):\n    return km * 0.621371", "task_id": "783_c4a871f5-19d5-41e9-a19e-e883881aa76d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a distance from miles to kilometers.", "code": "def miles_to_km(miles: float):\n    return miles / 0.621371", "task_id": "783_a05a35ec-b385-4836-8925-a0f1be963784", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a binary string to a decimal integer.", "code": "def binary_to_decimal(binary: str):\n    return int(binary, 2)", "task_id": "783_ed072f54-46a1-4875-ab24-cc1092a6c4a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a decimal integer to a binary string.", "code": "def decimal_to_binary(decimal: int):\n    return bin(decimal)[2:]", "task_id": "783_39ac5482-1390-4607-89bd-903e80f42cf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a length from inches to centimeters.", "code": "def inches_to_cm(inches: float):\n    return inches * 2.54", "task_id": "783_a993fd1b-22f2-4d07-9e0a-79328ce231aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a length from centimeters to inches.", "code": "def cm_to_inches(cm: float):\n    return cm / 2.54", "task_id": "783_3f56f80f-8bc3-485e-8284-c959bcf9667e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even length subarrays.", "code": "def sum_even_length_subarrays(arr):\n    Sum = 0\n    l = len(arr)\n    for i in range(l):\n        Sum += (((i + 1) * (l - i)) // 2) * arr[i]\n    return Sum", "task_id": "782_653d1b42-b146-4f12-93ae-a456331b16a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements at odd indices.", "code": "def sum_odd_indexed_elements(arr):\n    return sum(arr[i] for i in range(1, len(arr), 2))", "task_id": "782_2442a9ea-3d6a-42b0-8e52-94b5aed4c5f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements at even indices.", "code": "def sum_even_indexed_elements(arr):\n    return sum(arr[i] for i in range(0, len(arr), 2))", "task_id": "782_824e3b7a-0b63-4c94-9cb0-ba3cea796eb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements at prime indices.", "code": "def sum_prime_indexed_elements(arr):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return sum(arr[i] for i in range(len(arr)) if is_prime(i))", "task_id": "782_249f7b1e-0cd7-4ac1-8738-d21590e2a93a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements at Fibonacci indices.", "code": "def sum_fibonacci_indexed_elements(arr):\n    fib = [0, 1]\n    while fib[-1] < len(arr):\n        fib.append(fib[-1] + fib[-2])\n    return sum(arr[i] for i in fib if i < len(arr))", "task_id": "782_c04ddc48-3b9e-4b5f-87a9-3c25381c3b30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements that are divisible by k.", "code": "def sum_elements_divisible_by_k(arr, k):\n    return sum(x for x in arr if x % k == 0)", "task_id": "782_4fdb72fd-4db8-492e-9960-3023bd82fd11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements that are greater than k.", "code": "def sum_elements_greater_than_k(arr, k):\n    return sum(x for x in arr if x > k)", "task_id": "782_c73b8eaa-b66e-4cd8-a324-fc3b335c3543", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements that are less than k.", "code": "def sum_elements_less_than_k(arr, k):\n    return sum(x for x in arr if x < k)", "task_id": "782_f1153f18-57cf-4522-80eb-d001a9bdc286", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements between two given indices (inclusive).", "code": "def sum_elements_between_indices(arr, start, end):\n    return sum(arr[start:end+1])", "task_id": "782_affd5ce2-c8f5-4940-aeda-82b6afb0b869", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all elements within a given range [low, high] (inclusive).", "code": "def sum_elements_within_range(arr, low, high):\n    return sum(x for x in arr if low <= x <= high)", "task_id": "782_68a161a6-d8e1-4913-b7f8-f6cb9e1c1007", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list string to an integer list.", "code": "def list_str_int(test_str):\n    res = [int(num) for num in test_str.replace('[', '').replace(']', '').split(', ')]\n    return res", "task_id": "785_31a7afc8-8493-42aa-a722-1a5de8ba7778", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple string to a float tuple.", "code": "def tuple_str_float(test_str):\n    res = tuple(float(num) for num in test_str.replace('(', '').replace(')', '').split(', '))\n    return res", "task_id": "785_c93aa7c4-ea5c-4190-92b5-b96f121af1d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list string to a float list.", "code": "def list_str_float(test_str):\n    res = [float(num) for num in test_str.replace('[', '').replace(']', '').split(', ')]\n    return res", "task_id": "785_42b4abe6-09bd-4e19-ac09-fa89284a9872", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a dictionary string to a dictionary with integer values.", "code": "def dict_str_int(test_str):\n    res = {k: int(v) for k, v in (item.split(': ') for item in test_str.replace('{', '').replace('}', '').split(', '))}\n    return res", "task_id": "785_2fd665cb-b0a9-4eec-b57d-dffed6423b93", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a set string to an integer set.", "code": "def set_str_int(test_str):\n    res = {int(num) for num in test_str.replace('{', '').replace('}', '').split(', ')}\n    return res", "task_id": "785_445c2a8c-4da5-47e2-adcc-1ce9fa2c89dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple string to a boolean tuple.", "code": "def tuple_str_bool(test_str):\n    res = tuple(bool(int(num)) for num in test_str.replace('(', '').replace(')', '').split(', '))\n    return res", "task_id": "785_d0a7f7fb-81a3-4840-b3d6-2353a3fa2194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list string to a boolean list.", "code": "def list_str_bool(test_str):\n    res = [bool(int(num)) for num in test_str.replace('[', '').replace(']', '').split(', ')]\n    return res", "task_id": "785_8a8cf757-0318-4e40-b333-9643b9698446", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a dictionary string to a dictionary with float values.", "code": "def dict_str_float(test_str):\n    res = {k: float(v) for k, v in (item.split(': ') for item in test_str.replace('{', '').replace('}', '').split(', '))}\n    return res", "task_id": "785_8d0d804f-2c68-40b2-b734-816d9bb61f47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a set string to a float set.", "code": "def set_str_float(test_str):\n    res = {float(num) for num in test_str.replace('{', '').replace('}', '').split(', ')}\n    return res", "task_id": "785_bdec2499-24f0-487e-9ea5-d3ab54c69cc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a tuple string to a tuple of strings.", "code": "def tuple_str_str(test_str):\n    res = tuple(num.strip() for num in test_str.replace('(', '').replace(')', '').split(', '))\n    return res", "task_id": "785_23a39224-382c-493d-96ce-a20a1ed283e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first even and odd number of a given list.", "code": "def sum_first_even_odd(lst):\n    first_even = next((el for el in lst if el % 2 == 0), 0)\n    first_odd = next((el for el in lst if el % 2 != 0), 0)\n    return first_even + first_odd", "task_id": "784_7b7fd8a2-fbf5-4bb4-8aa5-1e1312bc9b9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the first even and odd number of a given list as strings.", "code": "def concat_first_even_odd(lst):\n    first_even = next((str(el) for el in lst if el % 2 == 0), '')\n    first_odd = next((str(el) for el in lst if el % 2 != 0), '')\n    return first_even + first_odd", "task_id": "784_95e29c01-89e4-4aa3-b0f6-4f1a1619187a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple of the first even and odd number of a given list.", "code": "def first_even_odd_tuple(lst):\n    first_even = next((el for el in lst if el % 2 == 0), None)\n    first_odd = next((el for el in lst if el % 2 != 0), None)\n    return (first_even, first_odd)", "task_id": "784_271ae0f3-36ba-43b7-a046-10156d63f49f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple of the indices of the first even and odd number of a given list.", "code": "def first_even_odd_indices(lst):\n    first_even_idx = next((i for i, el in enumerate(lst if el % 2 == 0)), -1)\n    first_odd_idx = next((i for i, el in enumerate(lst if el % 2 != 0)), -1)\n    return (first_even_idx, first_odd_idx)", "task_id": "784_0b1ad5c8-546e-4885-a24a-fe7c0d7ba8f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the last even and odd number of a given list.", "code": "def sum_last_even_odd(lst):\n    last_even = next((el for el in reversed(lst) if el % 2 == 0), 0)\n    last_odd = next((el for el in reversed(lst) if el % 2 != 0), 0)\n    return last_even + last_odd", "task_id": "784_234e928d-8550-47b8-947b-5285e19a39ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the last even and odd number of a given list.", "code": "def product_last_even_odd(lst):\n    last_even = next((el for el in reversed(lst) if el % 2 == 0), 1)\n    last_odd = next((el for el in reversed(lst) if el % 2 != 0), 1)\n    return last_even * last_odd", "task_id": "784_18441021-1242-459b-abc5-fb98844c7a5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last even number of a given list.", "code": "def sum_first_last_even(lst):\n    first_even = next((el for el in lst if el % 2 == 0), 0)\n    last_even = next((el for el in reversed(lst) if el % 2 == 0), 0)\n    return first_even + last_even", "task_id": "784_85656dfa-8d68-476f-b9ee-6b7ef6efb621", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last odd number of a given list.", "code": "def sum_first_last_odd(lst):\n    first_odd = next((el for el in lst if el % 2 != 0), 0)\n    last_odd = next((el for el in reversed(lst) if el % 2 != 0), 0)\n    return first_odd + last_odd", "task_id": "784_b8c4b6ec-fd89-4273-8177-53613c9d2952", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first and last odd number of a given list.", "code": "def product_first_last_odd(lst):\n    first_odd = next((el for el in lst if el % 2 != 0), 1)\n    last_odd = next((el for el in reversed(lst) if el % 2 != 0), 1)\n    return first_odd * last_odd", "task_id": "784_8f84723a-11c4-4350-9a1a-4598ffeac933", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the first and last even number of a given list.", "code": "def product_first_last_even(lst):\n    first_even = next((el for el in lst if el % 2 == 0), 1)\n    last_even = next((el for el in reversed(lst) if el % 2 == 0), 1)\n    return first_even * last_even", "task_id": "784_1c5f0815-a630-4ca4-b129-27096eeeccde", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the closest value to a specified target in a sorted list.", "code": "def find_closest_index(arr, target):\n    closest_index = 0\n    min_diff = float('inf')\n    for i, num in enumerate(arr):\n        diff = abs(num - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_index = i\n    return closest_index", "task_id": "786_63f6ede8-3d1c-4693-8c36-6c89be7890b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element greater than a specified target in a sorted list.", "code": "def find_first_greater(arr, target):\n    for i, num in enumerate(arr):\n        if num > target:\n            return i\n    return -1", "task_id": "786_16f4020b-70da-4b92-a360-3569be1f07cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last element less than a specified target in a sorted list.", "code": "def find_last_less(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] < target:\n            return i\n    return -1", "task_id": "786_11dfcfbc-7807-4231-aee7-78a7229949ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first element that is equal to or greater than a specified target in a sorted list.", "code": "def find_first_equal_or_greater(arr, target):\n    for i, num in enumerate(arr):\n        if num >= target:\n            return i\n    return -1", "task_id": "786_6cbd5ea2-c0b1-4274-94bd-cc243ff72c05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last element that is equal to or less than a specified target in a sorted list.", "code": "def find_last_equal_or_less(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] <= target:\n            return i\n    return -1", "task_id": "786_1dcc66d2-814d-4cc3-b515-7bb558a01f68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index where a specified target should be inserted to maintain sorted order in a list.", "code": "def find_insert_position(arr, target):\n    for i, num in enumerate(arr):\n        if num >= target:\n            return i\n    return len(arr)", "task_id": "786_33becc07-014d-4aba-9f94-726b7f80ddad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the first occurrence of a specified target in a sorted list.", "code": "def find_first_occurrence(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return i\n    return -1", "task_id": "786_69fb2ecc-3dfb-4148-858d-a75ed094277a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the index of the last occurrence of a specified target in a sorted list.", "code": "def find_last_occurrence(arr, target):\n    for i in range(len(arr) - 1, -1, -1):\n        if arr[i] == target:\n            return i\n    return -1", "task_id": "786_70c8fcec-6d75-476b-9218-8471f2918f79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the start and end indices of a specified target in a sorted list.", "code": "def find_range(arr, target):\n    start, end = -1, -1\n    for i, num in enumerate(arr):\n        if num == target:\n            if start == -1:\n                start = i\n            end = i\n    return (start, end)", "task_id": "786_50f58373-7368-452e-bbaf-7b9e36228988", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all indices of a specified target in a sorted list.", "code": "def find_all_occurrences(arr, target):\n    indices = []\n    for i, num in enumerate(arr):\n        if num == target:\n            indices.append(i)\n    return indices", "task_id": "786_a20acade-c5a4-4877-8a2a-0093bafdc422", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by two 'b's and one 'c'.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{2}c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_5771b3c1-68d3-4fbd-b6e3-7d654a8c0cdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by any number of 'b's.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab*'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_eea3f98b-ab07-45f7-81cd-5010dffe89b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by one or more 'b's.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_c657d759-89a4-4246-846f-152bd647cd62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by exactly three 'b's and ends with 'c'.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}c$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_77afdf68-3837-498f-a26f-ef24d787c78b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by three 'b's or three 'c's.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}|ac{3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_29cfe97e-08fe-44a5-98ea-e3349b8fc162", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by three 'b's and then any character.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}.'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_ffcd9f9a-184d-4702-8a9a-5be19baf8b60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by exactly three 'b's and then any digit.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}\\d'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_665db5b8-6b8c-404f-827e-f38517a5dfa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by exactly three 'b's and then a word character.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}\\w'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_3624d8be-d380-45e9-85b9-93bf7e6e0ba1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by three 'b's and then a whitespace character.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}\\s'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_84ff0013-31ac-49f1-8cba-4c7ed5a92e06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an 'a' followed by exactly three 'b's and then a non-word character.", "code": "import re\ndef match_pattern(text):\n    patterns = 'ab{3}\\W'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "787_413bf154-a698-416b-ba76-d997697f2367", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by appending the given string to the end of the given list.", "code": "def combine_elements(lst, s):\n    return tuple(lst + [s])", "task_id": "788_1161ff26-4ef0-4c1a-99d6-c59d619b1f03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by prepending the given string to the start of the given list.", "code": "def prepend_string_to_list(lst, s):\n    return tuple([s] + lst)", "task_id": "788_efaf8c04-ad0d-43f7-9040-55181eeb28f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by interleaving the given string between each element of the given list.", "code": "def interleave_string_list(lst, s):\n    res = []\n    for item in lst:\n        res.append(item)\n        res.append(s)\n    return tuple(res[:-1])", "task_id": "788_cd444aec-2ca8-426e-bc87-071c68cafa9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by wrapping the given string around the given list (i.e., the string should be the first and last element).", "code": "def wrap_string_list(lst, s):\n    return tuple([s] + lst + [s])", "task_id": "788_a35d9963-e0d5-4810-9895-a1543ccffdcf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by alternating elements of the given list with the given string.", "code": "def alternate_string_list(lst, s):\n    res = []\n    for item in lst:\n        res.append(item)\n        res.append(s)\n    return tuple(res)", "task_id": "788_cd17fdad-4838-440f-87a1-707698fdf24e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by inserting the given string at the specified index in the given list.", "code": "def insert_string_at_index(lst, s, index):\n    return tuple(lst[:index] + [s] + lst[index:])", "task_id": "788_d5723b92-2aca-486f-83b9-8c71929da26a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by repeating the given string n times and appending it to the given list.", "code": "def repeat_string_list(lst, s, n):\n    return tuple(lst + [s] * n)", "task_id": "788_61aa4adf-7d1f-44b2-b057-bdc5c7d449c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by merging the given string and list, then sorting the result.", "code": "def merge_and_sort(lst, s):\n    return tuple(sorted(lst + [s]))", "task_id": "788_e0b14ff7-48b1-4a08-952b-3e62e96c3e31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by reversing the given list and then appending the given string.", "code": "def reverse_and_append(lst, s):\n    return tuple(lst[::-1] + [s])", "task_id": "788_862e5988-ab17-40f8-9351-153ec7ce3624", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to create a new tuple by converting the given list to a tuple and then appending the given string.", "code": "def string_list_to_tuple(lst, s):\n    return tuple(lst) + (s,)", "task_id": "788_c1074588-6673-47de-a688-58f8e5f4dc5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the area of a regular polygon given the number of sides and the length of each side.", "code": "from math import tan, pi\n\ndef area_polygon(s, l):\n    area = (s * l**2) / (4 * tan(pi / s))\n    return area", "task_id": "789_c3775fae-3f7e-4036-9fd7-7c4e442cfd4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the length of a diagonal of a regular polygon given the number of sides and the length of each side.", "code": "from math import sin, pi\n\ndef diagonal_polygon(s, l):\n    diagonal = l / (2 * sin(pi / s))\n    return diagonal", "task_id": "789_72a995e7-f68c-4546-8fa4-2f86d4c9ec8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the interior angle of a regular polygon given the number of sides.", "code": "def interior_angle(s):\n    angle = (s - 2) * 180 / s\n    return angle", "task_id": "789_52164b27-e7da-4dc0-8f56-59aeecfe11dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the exterior angle of a regular polygon given the number of sides.", "code": "def exterior_angle(s):\n    angle = 360 / s\n    return angle", "task_id": "789_2a7e0ad2-76f7-46ca-be86-b3e206558103", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the circumradius of a regular polygon given the number of sides and the length of each side.", "code": "from math import sin, pi\n\ndef circumradius_polygon(s, l):\n    circumradius = l / (2 * sin(pi / s))\n    return circumradius", "task_id": "789_692c2178-65f2-45b6-a14a-82dec4fd0c57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the apothem of a regular polygon given the number of sides and the length of each side.", "code": "from math import tan, pi\n\ndef apothem_polygon(s, l):\n    apothem = l / (2 * tan(pi / s))\n    return apothem", "task_id": "789_cb1f98f9-591e-416c-9e9c-225df11ecc1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the interior angles of a regular polygon given the number of sides.", "code": "def sum_interior_angles(s):\n    sum_angles = (s - 2) * 180\n    return sum_angles", "task_id": "789_3d6e980f-1015-42f2-9f42-68bc6b005733", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the side length of a regular polygon given the perimeter and the number of sides.", "code": "def side_length_polygon(perimeter, s):\n    side_length = perimeter / s\n    return side_length", "task_id": "789_173ff5b3-7130-4479-bee6-2dc87ac833e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of sides of a regular polygon given the perimeter and the length of each side.", "code": "def num_sides_polygon(perimeter, l):\n    num_sides = int(perimeter / l)\n    return num_sides", "task_id": "789_98b68437-2008-419d-ad3b-927039927d13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the type of a regular polygon (e.g., triangle, quadrilateral, pentagon) given the number of sides.", "code": "def polygon_type(s):\n    types = {3: 'triangle', 4: 'quadrilateral', 5: 'pentagon', 6: 'hexagon', 7: 'heptagon', 8: 'octagon', 9: 'nonagon', 10: 'decagon'}\n    return types.get(s, 'polygon with ' + str(s) + ' sides')", "task_id": "789_cc5649c1-2a11-4042-87d1-eea9eaba0faa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every character at an even index is uppercase in a given string.", "code": "def all_uppercase(s: str) -> bool:\n\treturn all(s[i].isupper() for i in range(0, len(s), 2))", "task_id": "790_d475cde7-5f6b-4856-a97a-70511d65a2ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains odd numbers in a given list.", "code": "def odd_position_odd(nums: list) -> bool:\n\treturn all(nums[i] % 2 == 1 for i in range(1, len(nums), 2))", "task_id": "790_f60e1615-2a8b-4210-a873-b48be79af002", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every word at an even index has an even length in a given list of words.", "code": "def even_length_words(words: list) -> bool:\n\treturn all(len(words[i]) % 2 == 0 for i in range(0, len(words), 2))", "task_id": "790_d785d675-6e94-485b-8f9d-b29753e4b448", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every character at an odd index is a vowel in a given string.", "code": "def odd_index_vowels(s: str) -> bool:\n\tvowels = 'aeiouAEIOU'\n\treturn all(s[i] in vowels for i in range(1, len(s), 2))", "task_id": "790_7a3d551d-3aa3-496c-a18e-142f56e5de34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains a prime number in a given list.", "code": "def is_prime(n):\n\tif n <= 1:\n\t\treturn False\n\tfor i in range(2, int(n**0.5) + 1):\n\t\tif n % i == 0:\n\t\t\treturn False\n\treturn True\n\ndef even_index_prime(nums: list) -> bool:\n\treturn all(is_prime(nums[i]) for i in range(0, len(nums), 2))", "task_id": "790_c0f3a47a-3b35-434f-8dc8-844d7d734afa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every character at an odd index is a consonant in a given string.", "code": "def odd_index_consonants(s: str) -> bool:\n\tvowels = 'aeiouAEIOU'\n\treturn all(s[i].isalpha() and s[i] not in vowels for i in range(1, len(s), 2))", "task_id": "790_3d5083e5-6d6e-457c-8e73-4e9892b845bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains a positive number in a given list.", "code": "def even_index_positive(nums: list) -> bool:\n\treturn all(nums[i] > 0 for i in range(0, len(nums), 2))", "task_id": "790_3da03ba0-7593-40f3-9043-b693e439e5e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains a negative number in a given list.", "code": "def odd_index_negative(nums: list) -> bool:\n\treturn all(nums[i] < 0 for i in range(1, len(nums), 2))", "task_id": "790_7212e371-4b59-48ef-839c-6374ebc6ed04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every even index contains a number divisible by 3 in a given list.", "code": "def even_index_divisible_by_three(nums: list) -> bool:\n\treturn all(nums[i] % 3 == 0 for i in range(0, len(nums), 2))", "task_id": "790_25002ed2-2f04-4477-8f55-fa528c0e3506", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether every odd index contains a number divisible by 5 in a given list.", "code": "def odd_index_divisible_by_five(nums: list) -> bool:\n\treturn all(nums[i] % 5 == 0 for i in range(1, len(nums), 2))", "task_id": "790_bab43e60-1666-4287-94e2-d61c5c6df723", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested lists from the given list.", "code": "def remove_nested_lists(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, list):\n      res.append(ele)\n  return res", "task_id": "791_753b158d-e5e7-4faf-9f08-62592b9ab82d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested dictionaries from the given dictionary.", "code": "def remove_nested_dicts(test_dict):\n  res = {}\n  for key, value in test_dict.items():\n    if not isinstance(value, dict):\n      res[key] = value\n  return res", "task_id": "791_1580986d-5ab8-4901-8881-3594da001757", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested sets from the given set.", "code": "def remove_nested_sets(test_set):\n  res = set()\n  for ele in test_set:\n    if not isinstance(ele, set):\n      res.add(ele)\n  return res", "task_id": "791_934df9db-d99c-4ab6-98fd-3ba68bbaa8ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested strings from the given list.", "code": "def remove_nested_strings(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, str):\n      res.append(ele)\n  return res", "task_id": "791_11335731-d476-415b-8d01-340c4d113b3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested integers from the given list.", "code": "def remove_nested_integers(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, int):\n      res.append(ele)\n  return res", "task_id": "791_2b37d998-7181-4e0e-894f-c4e3b22af002", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested floats from the given list.", "code": "def remove_nested_floats(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, float):\n      res.append(ele)\n  return res", "task_id": "791_077b21ba-9c4a-4e9a-93ab-0cebb1657e30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested booleans from the given list.", "code": "def remove_nested_booleans(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, bool):\n      res.append(ele)\n  return res", "task_id": "791_099bf426-3862-4b5c-b381-f07796aa86ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested tuples from the given list.", "code": "def remove_nested_tuples(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, tuple):\n      res.append(ele)\n  return res", "task_id": "791_96afa998-6f99-4219-898b-28d85c49de96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested lists from the given tuple.", "code": "def remove_nested_lists_from_tuple(test_tup):\n  res = tuple()\n  for ele in test_tup:\n    if not isinstance(ele, list):\n      res = res + (ele, )\n  return res", "task_id": "791_ef9a0b39-4981-43ef-a44b-02b5b622baa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove the nested dictionaries from the given list.", "code": "def remove_nested_dicts_from_list(test_list):\n  res = []\n  for ele in test_list:\n    if not isinstance(ele, dict):\n      res.append(ele)\n  return res", "task_id": "791_e145060a-3188-4664-a48e-599e4201b035", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of strings in a given list.", "code": "def count_strings(input_list): \n    return sum(1 for item in input_list if isinstance(item, str))", "task_id": "792_ac7a1bbf-e8e0-4a0a-ac85-0e66dcf3774b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers in a given list.", "code": "def count_integers(input_list): \n    return sum(1 for item in input_list if isinstance(item, int))", "task_id": "792_95d6d264-6cca-4133-ac1f-480aff3b9516", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers in a given list.", "code": "def count_even_numbers(input_list): \n    return sum(1 for item in input_list if isinstance(item, int) and item % 2 == 0)", "task_id": "792_62a09cec-17b4-4cc3-be84-af8d4e5252f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers in a given list.", "code": "def count_odd_numbers(input_list): \n    return sum(1 for item in input_list if isinstance(item, int) and item % 2 != 0)", "task_id": "792_2051c2d2-c597-4d2b-ab54-e50f1eb744c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of floats in a given list.", "code": "def count_floats(input_list): \n    return sum(1 for item in input_list if isinstance(item, float))", "task_id": "792_b871c231-e3da-4f8b-bfd0-8cc27a914f96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of positive numbers in a given list.", "code": "def count_positive_numbers(input_list): \n    return sum(1 for item in input_list if isinstance(item, (int, float)) and item > 0)", "task_id": "792_391f6285-365c-4588-9afe-d86f0440bea8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of negative numbers in a given list.", "code": "def count_negative_numbers(input_list): \n    return sum(1 for item in input_list if isinstance(item, (int, float)) and item < 0)", "task_id": "792_fd85261f-da5f-4338-9819-acb6515cff49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of boolean values in a given list.", "code": "def count_booleans(input_list): \n    return sum(1 for item in input_list if isinstance(item, bool))", "task_id": "792_aa5c83eb-bf71-4bec-89d4-3a31a1a41902", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of None values in a given list.", "code": "def count_none_values(input_list): \n    return sum(1 for item in input_list if item is None)", "task_id": "792_bf1a4b67-ceaf-4051-a952-4350f07e2fff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of dictionaries in a given list.", "code": "def count_dicts(input_list): \n    return sum(1 for item in input_list if isinstance(item, dict))", "task_id": "792_9f05c48c-29be-48db-b71f-7c5df334aaac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that starts with 'x' and ends with 'y'.", "code": "import re\ndef find_pattern(text):\n    patterns = '^x.*y$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "794_92714172-1d26-47f0-bf45-4a7be105247f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that checks if a string contains any digits.", "code": "import re\ndef contains_digit(text):\n    patterns = '\\d'\n    if re.search(patterns, text):\n        return 'Contains digit!'\n    else:\n        return 'No digit found!'", "task_id": "794_22189aab-caef-4be0-becc-d45cb7eedae5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains 'abc' anywhere in it.", "code": "import re\ndef match_abc(text):\n    patterns = 'abc'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "794_8fa561d4-e640-4b35-a917-abee4b385cf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that starts with 'start' and ends with 'end'.", "code": "import re\ndef match_start_end(text):\n    patterns = '^start.*end$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "794_e6775bcc-8874-444f-90b2-0428792638d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that starts with a vowel.", "code": "import re\ndef match_vowel(text):\n    patterns = '^[aeiouAEIOU]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "794_fa5410c3-1c5d-4216-8abf-36b288b6f63b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains at least one uppercase letter.", "code": "import re\ndef match_uppercase(text):\n    patterns = '[A-Z]'\n    if re.search(patterns, text):\n        return 'Contains uppercase!'\n    else:\n        return 'No uppercase found!'", "task_id": "794_67f2e21a-eec2-4307-8cff-8e035eeb337f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains an underscore.", "code": "import re\ndef match_underscore(text):\n    patterns = '_'\n    if re.search(patterns, text):\n        return 'Found an underscore!'\n    else:\n        return 'No underscore found!'", "task_id": "794_96e5818f-98e4-406a-ad2a-9c2e9bca1378", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains a hexadecimal number.", "code": "import re\ndef match_hex(text):\n    patterns = '\\b[0-9a-fA-F]+\\b'\n    if re.search(patterns, text):\n        return 'Found a hex number!'\n    else:\n        return 'No hex number found!'", "task_id": "794_f222aeed-bdd0-462e-9531-3c78a6f2ccf6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains a word boundary.", "code": "import re\ndef match_word_boundary(text):\n    patterns = '\\b'\n    if re.search(patterns, text):\n        return 'Found a word boundary!'\n    else:\n        return 'No word boundary found!'", "task_id": "794_4c0083ec-1755-479f-ac76-dd77f21c41bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains any character repeated three times in a row.", "code": "import re\ndef match_repeated_char(text):\n    patterns = '(.)\\1{2}'\n    if re.search(patterns, text):\n        return 'Found a repeated character!'\n    else:\n        return 'No repeated character found!'", "task_id": "794_231a2647-49a4-4014-83fb-0411f7e2f6ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all values in a given dictionary where the values are integers.", "code": "def sum_of_values(d: dict) -> int:\n    return sum(d.values())", "task_id": "796_90fa719d-9701-4240-9577-ae11fd595d2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all even values in a given dictionary where the values are integers.", "code": "def sum_of_even_values(d: dict) -> int:\n    return sum(value for value in d.values() if value % 2 == 0)", "task_id": "796_1a00cffb-9347-4f41-bd7e-9b9a5d9bce12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all keys in a given dictionary where the keys are integers.", "code": "def sum_of_keys(d: dict) -> int:\n    return sum(d.keys())", "task_id": "796_454a3ddf-2f1b-48f5-86fe-4149e272c296", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the lengths of all string values in a given dictionary.", "code": "def sum_of_string_lengths(d: dict) -> int:\n    return sum(len(value) for value in d.values() if isinstance(value, str))", "task_id": "796_cd749d08-a22c-4940-97b5-c2efa32c69fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all integer values in a given nested dictionary.", "code": "def sum_of_nested_values(d: dict) -> int:\n    total = 0\n    for value in d.values():\n        if isinstance(value, dict):\n            total += sum_of_nested_values(value)\n        elif isinstance(value, int):\n            total += value\n    return total", "task_id": "796_4ab2c9fd-8d14-4939-843b-c635111293e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all positive values in a given dictionary where the values are integers.", "code": "def sum_of_positive_values(d: dict) -> int:\n    return sum(value for value in d.values() if value > 0)", "task_id": "796_31d197eb-c230-4fcb-88cf-60b51ee456c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all negative values in a given dictionary where the values are integers.", "code": "def sum_of_negative_values(d: dict) -> int:\n    return sum(value for value in d.values() if value < 0)", "task_id": "796_9d2563c8-4a97-4eca-bd30-7fd67ad08467", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the squares of all values in a given dictionary where the values are integers.", "code": "def sum_of_squared_values(d: dict) -> int:\n    return sum(value ** 2 for value in d.values())", "task_id": "796_b4395fd9-b67a-4808-b315-c8597122d146", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all values greater than 10 in a given dictionary where the values are integers.", "code": "def sum_of_values_greater_than_ten(d: dict) -> int:\n    return sum(value for value in d.values() if value > 10)", "task_id": "796_e8e7e127-7957-4207-930b-b6b60c80481d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the absolute values of all values in a given dictionary where the values are integers.", "code": "def sum_of_absolute_values(d: dict) -> int:\n    return sum(abs(value) for value in d.values())", "task_id": "796_4806c064-aec1-4fc7-9ac3-799c030d469c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the top n students with the highest grades from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_top_students(students, n):\n    top_students = heapq.nlargest(n, students, key=lambda s: s['grade'])\n    return top_students", "task_id": "795_58fc6dca-31e8-46e6-83aa-6ce4af1292d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n cheapest products from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_cheapest_products(products, n):\n    cheapest_products = heapq.nsmallest(n, products, key=lambda s: s['price'])\n    return cheapest_products", "task_id": "795_57e33076-59ae-4945-ab7b-a71d6a47deab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n most expensive houses from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_most_expensive_houses(houses, n):\n    most_expensive_houses = heapq.nlargest(n, houses, key=lambda s: s['price'])\n    return most_expensive_houses", "task_id": "795_de714d0d-41b7-4682-86a6-d4c3e3744d46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n fastest cars from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_fastest_cars(cars, n):\n    fastest_cars = heapq.nlargest(n, cars, key=lambda s: s['speed'])\n    return fastest_cars", "task_id": "795_44192f46-14a3-4496-8c22-4d81c2a71f84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n cities with the lowest temperatures from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_lowest_temperatures(cities, n):\n    lowest_temperatures = heapq.nsmallest(n, cities, key=lambda s: s['temperature'])\n    return lowest_temperatures", "task_id": "795_f571672a-8a7c-4d3f-baf3-4f3069092916", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n players with the highest scores from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_highest_scores(players, n):\n    highest_scores = heapq.nlargest(n, players, key=lambda s: s['score'])\n    return highest_scores", "task_id": "795_c6f9a158-3291-49c4-9a60-2666cc69cce4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n shortest books from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_shortest_books(books, n):\n    shortest_books = heapq.nsmallest(n, books, key=lambda s: s['pages'])\n    return shortest_books", "task_id": "795_6ea7feb2-fa0e-4122-bb1a-13d2148f7587", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n tallest buildings from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_tallest_buildings(buildings, n):\n    tallest_buildings = heapq.nlargest(n, buildings, key=lambda s: s['height'])\n    return tallest_buildings", "task_id": "795_a918f51b-b779-479e-8178-db4441ce232d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n most populated countries from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_most_populated_countries(countries, n):\n    most_populated_countries = heapq.nlargest(n, countries, key=lambda s: s['population'])\n    return most_populated_countries", "task_id": "795_e72cb03a-feff-44c6-8ee0-de4324d39d1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n most expensive books from a given dataset using heap queue algorithm.", "code": "import heapq\n\ndef find_most_expensive_books(books, n):\n    most_expensive_books = heapq.nlargest(n, books, key=lambda s: s['price'])\n    return most_expensive_books", "task_id": "795_16ff594b-390e-4c54-b145-9b1eada71f8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element in a sorted array.", "code": "def find_first(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            high = mid - 1\n        elif arr[mid] < x:\n            low = mid + 1\n        else:\n            res = mid\n            high = mid - 1\n    return res", "task_id": "793_58dc0aa8-4c5f-4385-b594-dd142021508e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the closest element to a given value in a sorted array.", "code": "def find_closest(arr, x, n):\n    low = 0\n    high = n - 1\n    closest = -1\n    min_diff = float('inf')\n    while (low <= high):\n        mid = (low + high) // 2\n        diff = abs(arr[mid] - x)\n        if diff < min_diff:\n            min_diff = diff\n            closest = mid\n        if arr[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return closest", "task_id": "793_4d653763-d938-4ef0-95ad-1985eced951e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an even number in a sorted array.", "code": "def find_last_even(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 == 0:\n            res = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "793_8f921887-475b-4f20-9198-18f1d64adf52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an odd number in a sorted array.", "code": "def find_first_odd(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % 2 != 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "793_4bcd6a8e-2f51-40dd-8d7b-edc6f3e8b12d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an element less than a given value in a sorted array.", "code": "def find_last_less_than(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] < x:\n            res = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "793_ec4013c4-8e59-4c4d-a9ea-d374a6ab2e54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of an element greater than a given value in a sorted array.", "code": "def find_first_greater_than(arr, x, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > x:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "793_5ca9c0b9-90cd-4a49-bd79-51783c8af33a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last position of an element that is a multiple of a given number in a sorted array.", "code": "def find_last_multiple_of_k(arr, k, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] % k == 0:\n            res = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "793_25676136-d30c-453f-b25a-8f745ac3c893", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a prime number in a sorted array.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_first_prime(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if is_prime(arr[mid]):\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "793_0a94cfa6-cf5d-4a03-bae0-91517ff031c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the last position of a negative number in a sorted array.", "code": "def find_last_negative(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] < 0:\n            res = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n    return res", "task_id": "793_75927acf-5b8d-489a-809a-80a46df42852", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first position of a positive number in a sorted array.", "code": "def find_first_positive(arr, n):\n    low = 0\n    high = n - 1\n    res = -1\n    while (low <= high):\n        mid = (low + high) // 2\n        if arr[mid] > 0:\n            res = mid\n            high = mid - 1\n        else:\n            low = mid + 1\n    return res", "task_id": "793_feb810a4-ccb2-40ff-9ad7-ff720a53318b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even natural numbers within the range l and r.", "code": "def sum_even(n): \n    terms = n // 2 \n    sum1 = terms * (terms + 1) \n    return sum1 \ndef sum_in_Range(l, r): \n    return sum_even(r) - sum_even(l - 1)", "task_id": "797_3aed856a-d241-46e9-b2f6-24caffdcc75d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all natural numbers that are multiples of 3 within the range l and r.", "code": "def sum_multiples_of_three(n): \n    terms = n // 3 \n    sum1 = 3 * terms * (terms + 1) // 2 \n    return sum1 \ndef sum_in_Range(l, r): \n    return sum_multiples_of_three(r) - sum_multiples_of_three(l - 1)", "task_id": "797_a74ef520-69a3-4712-8578-8a891d363658", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all natural numbers within the range l and r.", "code": "def sum_squares(n): \n    return n * (n + 1) * (2 * n + 1) // 6 \ndef sum_in_Range(l, r): \n    return sum_squares(r) - sum_squares(l - 1)", "task_id": "797_ad616bb6-91ff-4d11-a12e-57f1b96fd5bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of all natural numbers within the range l and r.", "code": "def sum_cubes(n): \n    sum1 = (n * (n + 1) // 2) ** 2 \n    return sum1 \ndef sum_in_Range(l, r): \n    return sum_cubes(r) - sum_cubes(l - 1)", "task_id": "797_3591d5f6-20ed-40a7-b5e7-770ddd71a62a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime numbers within the range l and r.", "code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \ndef sum_primes(l, r): \n    return sum(i for i in range(l, r + 1) if is_prime(i))", "task_id": "797_4e8c6e1b-d441-4ff2-aa84-571920066b53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all Fibonacci numbers within the range l and r.", "code": "def fibonacci(n): \n    a, b = 0, 1 \n    while a <= n: \n        yield a \n        a, b = b, a + b \ndef sum_fibonacci(l, r): \n    return sum(i for i in fibonacci(r) if i >= l)", "task_id": "797_2468dd5e-1e0c-498e-ad0a-e68a819956cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of all natural numbers within the range l and r.", "code": "def sum_digits(n): \n    return sum(int(digit) for digit in str(n)) \ndef sum_in_Range(l, r): \n    return sum(sum_digits(i) for i in range(l, r + 1))", "task_id": "797_aa9c2936-fd3b-4e71-a6d7-18f751d439d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of all natural numbers within the range l and r.", "code": "def factorial(n): \n    if n == 0: \n        return 1 \n    return n * factorial(n - 1) \ndef sum_factorials(l, r): \n    return sum(factorial(i) for i in range(l, r + 1))", "task_id": "797_20b5f982-02f1-45d8-b4b4-0467e7f969fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all powers of 2 within the range l and r.", "code": "def sum_powers_of_two(l, r): \n    return sum(2**i for i in range(l, r + 1))", "task_id": "797_ade7ee85-e25d-4ca3-a2af-ff198045ce21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of an arithmetic sequence with first term a and common difference d within the range l and r.", "code": "def sum_arithmetic_sequence(a, d, l, r): \n    n = (r - a) // d + 1 \n    return n * (2 * a + (n - 1) * d) // 2", "task_id": "797_dd061b93-953b-4195-81f9-276986805797", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "800_5c625545-a6cb-4502-9bbb-a52aed43e36a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "800_175781e2-7596-4433-b214-7f91c9651b04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "800_4ea986a2-b4d7-4f9c-ae03-171d2e1154aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "800_22b7ba5a-ff92-4540-b09b-611b57851c34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "800_12f2c680-60db-4395-9f26-5f9f7eaac39b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with a given replacement string.", "code": "def replace_spaces(s: str, replacement: str) -> str:\n    return s.replace(' ', replacement)", "task_id": "800_569692fb-d844-4a8b-90f4-228047192c14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation from a string.", "code": "import string\n\ndef remove_punctuation(s: str) -> str:\n    return s.translate(str.maketrans('', '', string.punctuation))", "task_id": "800_76029614-3685-4c55-a1b8-274667fef64a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "800_a226a9b4-4ed3-4246-aa7b-d897fad2cb49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a string.", "code": "def remove_duplicates(s: str) -> str:\n    seen = set()\n    return ''.join([char for char in s if not (char in seen or seen.add(char))])", "task_id": "800_db0c81c7-4a2b-45bb-9fb8-01f03cd3bafc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a string.", "code": "def find_longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "800_0c6c1465-f9e3-46f7-84e8-3400191118c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of an array.", "code": "def product(arr):\n    result = 1\n    for i in arr:\n        result *= i\n    return result", "task_id": "798_785879ea-c5de-49fc-81eb-4a13c89ed41d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in an array.", "code": "def max_element(arr):\n    max_val = arr[0]\n    for i in arr:\n        if i > max_val:\n            max_val = i\n    return max_val", "task_id": "798_a57a18f3-de61-455c-b7c0-c99a03757d94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element in an array.", "code": "def min_element(arr):\n    min_val = arr[0]\n    for i in arr:\n        if i < min_val:\n            min_val = i\n    return min_val", "task_id": "798_8f269ab3-8304-4805-b6a7-fddff3fc595a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of an array.", "code": "def average(arr):\n    return sum(arr) / len(arr)", "task_id": "798_9c4f0e4f-9874-4e64-ad31-5ae6ec6d8ae7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even elements in an array.", "code": "def count_even(arr):\n    count = 0\n    for i in arr:\n        if i % 2 == 0:\n            count += 1\n    return count", "task_id": "798_b8dd8642-42d1-4b3f-b086-10c1bb5f8c14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd elements in an array.", "code": "def count_odd(arr):\n    count = 0\n    for i in arr:\n        if i % 2 != 0:\n            count += 1\n    return count", "task_id": "798_44d3c8d6-884c-44e1-9d0f-afe368cca6c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse an array.", "code": "def reverse_array(arr):\n    return arr[::-1]", "task_id": "798_4f78e426-5f0e-4752-8044-11008ee01613", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in an array.", "code": "def second_largest(arr):\n    first, second = float('-inf'), float('-inf')\n    for i in arr:\n        if i > first:\n            first, second = i, first\n        elif i > second and i != first:\n            second = i\n    return second", "task_id": "798_6947bb3d-b529-4870-a523-d6ea5054eb24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from an array.", "code": "def remove_duplicates(arr):\n    return list(set(arr))", "task_id": "798_98dfe811-39af-40e0-a8d6-5af8da1cac73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if an array is sorted in ascending order.", "code": "def is_sorted(arr):\n    return arr == sorted(arr)", "task_id": "798_cc2675f6-7ebc-403c-ac14-16fc2c5c3be3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to right rotate the bits of a given number.", "code": "INT_BITS = 32\n def right_Rotate(n,d):\n    return (n >> d)|(n << (INT_BITS - d)) & 0xFFFFFFFF", "task_id": "799_0750325c-aea8-4cfd-b1c5-03808187a6ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in a given number.", "code": "def count_set_bits(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "799_82580662-57e0-4317-b56e-a6eab9dbbaa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "799_d387f9f8-c1df-4908-b89a-b5dc0cb9af24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to flip all the bits of a given number.", "code": "def flip_bits(n):\n    return ~n & 0xFFFFFFFF", "task_id": "799_6ff3d601-6dbf-45eb-aa15-fcc6bb94dffd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap k bits starting at positions p1 and p2 in a given number.", "code": "def swap_bits(n, p1, p2, k):\n    set1 = (n >> p1) & ((1 << k) - 1)\n    set2 = (n >> p2) & ((1 << k) - 1)\n    xor = (set1 ^ set2)\n    xor = (xor << p1) | (xor << p2)\n    return n ^ xor", "task_id": "799_2d993272-2026-468e-b886-7e5044f1017b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the bits of a given number.", "code": "def reverse_bits(n):\n    result = 0\n    for i in range(32):\n        result <<= 1\n        result |= (n >> i) & 1\n    return result", "task_id": "799_75b41859-75ed-4a41-9170-1c0554e8ec2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check the parity (even or odd) of the number of set bits in a given number.", "code": "def parity_check(n):\n    parity = 0\n    while n:\n        parity ^= 1\n        n &= n - 1\n    return parity", "task_id": "799_b652aa5d-e974-4220-adb6-73c90b7662cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle all bits in a given range [l, r] of a number.", "code": "def toggle_bits_in_range(n, l, r):\n    mask = ((1 << (r - l + 1)) - 1) << l\n    return n ^ mask", "task_id": "799_58b995f5-c592-4100-adac-13d037f3f5f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of leading zeros in a given number.", "code": "def count_leading_zeros(n):\n    count = 0\n    for i in range(31, -1, -1):\n        if (n >> i) & 1 == 0:\n            count += 1\n        else:\n            break\n    return count", "task_id": "799_90b56a90-7836-4643-825f-7b29527449bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in a given number.", "code": "def count_trailing_zeros(n):\n    count = 0\n    while n & 1 == 0 and n != 0:\n        count += 1\n        n >>= 1\n    return count", "task_id": "799_01fbc60f-e3a9-4573-a072-5e1d2fc95006", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is even or not.", "code": "def is_even(n):\n    return n % 2 == 0", "task_id": "803_62007315-7b4e-4996-a9db-aeaa323d8eaa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is odd or not.", "code": "def is_odd(n):\n    return n % 2 != 0", "task_id": "803_919ed73e-23f4-44c6-85ab-ee1539858b41", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a prime number or not.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "803_bcd413e0-4c0a-4b67-a069-f405b310b2b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "803_c87ffa5e-91ce-45c9-9389-8b6414b013d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is an Armstrong number or not.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum(int(digit) ** num_len for digit in num_str)", "task_id": "803_ffa0a4a7-f753-4c71-a980-3858e2b935d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a Fibonacci number or not.", "code": "def is_fibonacci(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n or n == 0", "task_id": "803_8f717fab-4f22-456d-9b9d-33723a2fcd01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given two strings are anagrams of each other or not.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "803_9f36be6f-b06a-4a69-a35d-62781d2eedab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year):\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False", "task_id": "803_45064010-397d-41b7-97a6-07a4e0c5c778", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a power of two or not.", "code": "def is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0", "task_id": "803_b3df96c5-c974-4f81-8bbc-38559f4b07e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a perfect number or not.", "code": "def is_perfect_number(n):\n    if n <= 1:\n        return False\n    sum_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_divisors += i\n            if i != n // i:\n                sum_divisors += n // i\n    return sum_divisors == n", "task_id": "803_2ae54094-7ea6-4a97-b9a8-bab6b7fac158", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of equal numbers from three given integers, but return -1 if all three numbers are different.", "code": "def count_equal_numbers(a: int, b: int, c: int) -> int:\n    result = set([a, b, c])\n    if len(result) == 3:\n        return -1\n    else:\n        return 4 - len(result)", "task_id": "801_af75c7bd-d864-4939-9e2b-bcf02c9ce1fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of pairs of equal numbers from three given integers.", "code": "def count_equal_pairs(a: int, b: int, c: int) -> int:\n    pairs = 0\n    if a == b:\n        pairs += 1\n    if b == c:\n        pairs += 1\n    if a == c:\n        pairs += 1\n    return pairs", "task_id": "801_224d7824-8aa8-4889-b0ba-9e7cbc4aa6b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of distinct numbers from three given integers.", "code": "def count_distinct_numbers(a: int, b: int, c: int) -> int:\n    return len(set([a, b, c]))", "task_id": "801_36f954e7-87d3-45c6-b2cd-0bbeac4e5023", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers greater than the mean of three given integers.", "code": "def count_greater_than_mean(a: int, b: int, c: int) -> int:\n    mean = (a + b + c) / 3\n    return sum(1 for x in [a, b, c] if x > mean)", "task_id": "801_2f977f04-4977-4a45-afac-aecab4da742f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers less than the mean of three given integers.", "code": "def count_less_than_mean(a: int, b: int, c: int) -> int:\n    mean = (a + b + c) / 3\n    return sum(1 for x in [a, b, c] if x < mean)", "task_id": "801_1dbde9d6-7902-4742-95c0-6b6b459c2d51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers equal to the mean of three given integers.", "code": "def count_equal_to_mean(a: int, b: int, c: int) -> int:\n    mean = (a + b + c) / 3\n    return sum(1 for x in [a, b, c] if x == mean)", "task_id": "801_7a420731-2d93-429b-9cac-c0542fc0b3ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even numbers from three given integers.", "code": "def count_even_numbers(a: int, b: int, c: int) -> int:\n    return sum(1 for x in [a, b, c] if x % 2 == 0)", "task_id": "801_07316808-aa6a-4919-86c1-eb3b2d4af335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd numbers from three given integers.", "code": "def count_odd_numbers(a: int, b: int, c: int) -> int:\n    return sum(1 for x in [a, b, c] if x % 2 != 0)", "task_id": "801_772d847a-c994-44ee-a470-8af21fd5abee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers greater than a given integer x from three given integers.", "code": "def count_greater_than_x(a: int, b: int, c: int, x: int) -> int:\n    return sum(1 for num in [a, b, c] if num > x)", "task_id": "801_e427a993-e53c-4599-b50a-03b84ad84cb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of integers less than a given integer x from three given integers.", "code": "def count_less_than_x(a: int, b: int, c: int, x: int) -> int:\n    return sum(1 for num in [a, b, c] if num < x)", "task_id": "801_74c3cda4-5be5-48a2-8226-32ee6b3a9cb2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of numbers in an array is even or not.", "code": "def is_Sum_Even(arr, n): \n    total_sum = sum(arr) \n    return total_sum % 2 == 0", "task_id": "804_6e31774c-0440-4f5d-aa31-16e75fe01be2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of numbers in an array is positive or not.", "code": "def is_Product_Positive(arr, n): \n    product = 1 \n    for num in arr: \n        product *= num \n    return product > 0", "task_id": "804_e2a8714c-6c66-49d7-b1de-6f5685719c79", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether there is any odd number in an array.", "code": "def is_Any_Odd(arr, n): \n    for num in arr: \n        if num % 2 != 0: \n            return True \n    return False", "task_id": "804_640decc6-dad7-4574-8860-9e820147ce4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all numbers in an array are positive.", "code": "def is_All_Positive(arr, n): \n    for num in arr: \n        if num <= 0: \n            return False \n    return True", "task_id": "804_8de625a1-ecc3-4169-b23b-70758d9ad1c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether there is any negative number in an array.", "code": "def is_Any_Negative(arr, n): \n    for num in arr: \n        if num < 0: \n            return True \n    return False", "task_id": "804_ac57ab21-7e53-4004-81cb-5074a6c64983", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of numbers in an array is positive or not.", "code": "def is_Sum_Positive(arr, n): \n    total_sum = sum(arr) \n    return total_sum > 0", "task_id": "804_a5559a14-73f0-43da-84c1-66f0cdc284fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of numbers in an array is odd or not.", "code": "def is_Product_Odd(arr, n): \n    product = 1 \n    for num in arr: \n        product *= num \n    return product % 2 != 0", "task_id": "804_e533f433-7bef-4a23-93b0-d87bb61f87a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether there is any even number in an array.", "code": "def is_Any_Even(arr, n): \n    for num in arr: \n        if num % 2 == 0: \n            return True \n    return False", "task_id": "804_9a6ab28c-d506-4084-9534-b606a48068a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all numbers in an array are negative.", "code": "def is_All_Negative(arr, n): \n    for num in arr: \n        if num >= 0: \n            return False \n    return True", "task_id": "804_8b0ca907-a093-494d-936b-a3153f30346b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of numbers in an array is odd or not.", "code": "def is_Sum_Odd(arr, n): \n    total_sum = sum(arr) \n    return total_sum % 2 != 0", "task_id": "804_11259354-a845-402f-b51a-34101eba036d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to bring the smallest element to the front of the array.", "code": "def find_min_rotations(arr):\n    min_val = min(arr)\n    return arr.index(min_val)", "task_id": "802_4c2474ab-b825-4f69-9209-b2098e856ff8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rotations required to generate a sorted array in descending order.", "code": "def count_rotations_to_sort_desc(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] > arr[i - 1]:\n            return i\n    return 0", "task_id": "802_6b5d4635-17a6-436b-b26d-ae358f2fc2f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index where the array was rotated.", "code": "def find_rotation_index(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return i\n    return 0", "task_id": "802_6a3fe9e9-b50a-4463-a34f-ecee7683d915", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rotations required to bring the largest element to the front of the array.", "code": "def count_rotations_to_max(arr):\n    max_val = max(arr)\n    return arr.index(max_val)", "task_id": "802_e3aa3a46-95f8-4fc1-8649-dfd2f798ef34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the array can be sorted by a single rotation.", "code": "def is_sorted_after_rotation(arr):\n    n = len(arr)\n    for i in range(1, n):\n        if arr[i] < arr[i - 1]:\n            return arr[i:] + arr[:i] == sorted(arr)\n    return True", "task_id": "802_f09aa12d-d3b3-46bc-9012-d2f1ebbfbd46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to make the array a palindrome.", "code": "def rotation_to_palindrome(arr):\n    n = len(arr)\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if rotated == rotated[::-1]:\n            return i\n    return -1", "task_id": "802_c6f97f2b-b78e-462a-96aa-e084e3f116f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rotations required to arrange the array such that all even numbers come before odd numbers.", "code": "def count_rotations_to_even_odd(arr):\n    n = len(arr)\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if all(x % 2 == 0 for x in rotated[:rotated.index(next(filter(lambda x: x % 2 != 0, rotated)))]):\n            return i\n    return -1", "task_id": "802_7aa71231-717f-4561-a2b7-2fc09a264f54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to make the sum of the first half of the array equal to a given target.", "code": "def find_rotation_to_sum(arr, target):\n    n = len(arr)\n    half = n // 2\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if sum(rotated[:half]) == target:\n            return i\n    return -1", "task_id": "802_39161706-1769-48c6-9d41-2ebfc8e8e58c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of rotations required to make all elements in the array unique.", "code": "def count_rotations_to_unique(arr):\n    n = len(arr)\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if len(rotated) == len(set(rotated)):\n            return i\n    return -1", "task_id": "802_9dd4e19a-26ff-4fa0-b190-e32ccff123e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of rotations required to make the sum of the array a prime number.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef find_rotation_to_prime_sum(arr):\n    n = len(arr)\n    for i in range(n):\n        rotated = arr[i:] + arr[:i]\n        if is_prime(sum(rotated)):\n            return i\n    return -1", "task_id": "802_1fed1542-7641-4e51-a9e3-99c428e5cb22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose sum of elements is the highest. If there are multiple lists with the same sum, return the first one.", "code": "def max_sum_list(lists):\n    return max(lists, key=sum)", "task_id": "805_066f881d-e3ed-4272-8a7a-99f43e6ced05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose sum of elements is the lowest.", "code": "def min_sum_list(lists):\n    return min(lists, key=sum)", "task_id": "805_158bd39c-66e6-4fea-9247-fc7012c23167", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose product of elements is the highest.", "code": "def max_product_list(lists):\n    from functools import reduce\n    return max(lists, key=lambda x: reduce(lambda a, b: a * b, x))", "task_id": "805_73035df1-3e82-4469-93eb-5efffc19c480", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose product of elements is the lowest.", "code": "def min_product_list(lists):\n    from functools import reduce\n    return min(lists, key=lambda x: reduce(lambda a, b: a * b, x))", "task_id": "805_87faca22-43de-4ed6-8237-baf59ef03847", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose average of elements is the highest.", "code": "def max_avg_list(lists):\n    return max(lists, key=lambda x: sum(x)/len(x))", "task_id": "805_d8b2eec5-9217-4ceb-b243-e0a7714aa503", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose average of elements is the lowest.", "code": "def min_avg_list(lists):\n    return min(lists, key=lambda x: sum(x)/len(x))", "task_id": "805_7b28d7a0-bc79-49ca-81a0-1d3efe2abd47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists with the maximum number of elements.", "code": "def max_length_list(lists):\n    return max(lists, key=len)", "task_id": "805_86c065ad-3b1d-4ee6-aab1-971e5b877471", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists with the minimum number of elements.", "code": "def min_length_list(lists):\n    return min(lists, key=len)", "task_id": "805_02005e85-94dd-4304-83ca-7ca2c8fb35f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose sum of even elements is the highest.", "code": "def max_sum_even_list(lists):\n    return max(lists, key=lambda x: sum(e for e in x if e % 2 == 0))", "task_id": "805_a3be5716-708d-4ac4-a296-92a28b44380a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the list in a list of lists whose sum of odd elements is the highest.", "code": "def max_sum_odd_list(lists):\n    return max(lists, key=lambda x: sum(e for e in x if e % 2 != 0))", "task_id": "805_db49e6ea-bcc9-41be-9bca-942c82c5e291", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first even number in a given list of numbers.", "code": "def first_even(nums):\n  first_even = next((el for el in nums if el%2==0),-1)\n  return first_even", "task_id": "807_6eed6e52-be34-4e29-a3e3-c9eae591b580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first negative number in a given list of numbers.", "code": "def first_negative(nums):\n  first_negative = next((el for el in nums if el<0),-1)\n  return first_negative", "task_id": "807_cfa98733-ff6e-40f7-b8e4-94f0a4fc25e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first positive number in a given list of numbers.", "code": "def first_positive(nums):\n  first_positive = next((el for el in nums if el>0),-1)\n  return first_positive", "task_id": "807_29c03c04-d0b3-4138-8a09-eb4431fa088e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first prime number in a given list of numbers.", "code": "def first_prime(nums):\n  def is_prime(n):\n    if n <= 1:\n      return False\n    for i in range(2, int(n**0.5) + 1):\n      if n % i == 0:\n        return False\n    return True\n  first_prime = next((el for el in nums if is_prime(el)),-1)\n  return first_prime", "task_id": "807_cd7cc11f-3000-40db-962b-075f684bc6ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first palindrome number in a given list of numbers.", "code": "def first_palindrome(nums):\n  def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n  first_palindrome = next((el for el in nums if is_palindrome(el)),-1)\n  return first_palindrome", "task_id": "807_01e06fc9-bced-438a-bb34-86ae0e54bc7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number that is a multiple of five in a given list of numbers.", "code": "def first_multiple_of_five(nums):\n  first_multiple_of_five = next((el for el in nums if el%5==0),-1)\n  return first_multiple_of_five", "task_id": "807_9ce42bac-c41c-4717-87c4-ca93ca2b450d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number greater than ten in a given list of numbers.", "code": "def first_greater_than_ten(nums):\n  first_greater_than_ten = next((el for el in nums if el>10),-1)\n  return first_greater_than_ten", "task_id": "807_802b726c-f9d4-49db-b02d-976e07b89a10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number less than zero in a given list of numbers.", "code": "def first_less_than_zero(nums):\n  first_less_than_zero = next((el for el in nums if el<0),-1)\n  return first_less_than_zero", "task_id": "807_84f95222-dd2a-4760-8795-3733dd075f70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first number that is divisible by three in a given list of numbers.", "code": "def first_divisible_by_three(nums):\n  first_divisible_by_three = next((el for el in nums if el%3==0),-1)\n  return first_divisible_by_three", "task_id": "807_6e4e823d-87fd-45f3-8edc-a62b4bca11ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first square number in a given list of numbers.", "code": "def first_square_number(nums):\n  def is_square(n):\n    return int(n**0.5)**2 == n\n  first_square_number = next((el for el in nums if is_square(el)),-1)\n  return first_square_number", "task_id": "807_f8136439-53d3-4141-a272-721c0713c745", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given list contains the specified element or not.", "code": "def check_element_in_list(lst, element):\n    return element in lst", "task_id": "808_4fc4a342-34aa-4fe4-9bb9-4c5645cfff00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given dictionary contains the specified key or not.", "code": "def check_key_in_dict(d, key):\n    return key in d", "task_id": "808_9dc68908-5b1c-4423-ac56-44f70642ab6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given dictionary contains the specified value or not.", "code": "def check_value_in_dict(d, value):\n    return value in d.values()", "task_id": "808_7fd1d31a-8b02-42c7-aa54-9270b32b0e52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains the specified substring or not.", "code": "def check_substring_in_string(s, substring):\n    return substring in s", "task_id": "808_10ef26c0-d420-4119-b8bc-d17ea76a8f1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given set contains the specified element or not.", "code": "def check_element_in_set(s, element):\n    return element in s", "task_id": "808_2d17a896-2550-4603-aabe-c179594fbd7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given nested list contains the specified element or not.", "code": "def check_element_in_nested_list(nested_lst, element):\n    for lst in nested_lst:\n        if element in lst:\n            return True\n    return False", "task_id": "808_2c54eeaf-c6fd-4df9-9f83-589731e645d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given tuple of lists contains the specified element or not.", "code": "def check_element_in_tuple_of_lists(tup, element):\n    for lst in tup:\n        if element in lst:\n            return True\n    return False", "task_id": "808_491737fa-1c15-4b85-ba53-1745ef941cac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given list of tuples contains the specified element or not.", "code": "def check_element_in_list_of_tuples(lst, element):\n    for tup in lst:\n        if element in tup:\n            return True\n    return False", "task_id": "808_044ffe05-68fc-4dc9-aa4b-040780cbc15d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given list of dictionaries contains the specified key or not.", "code": "def check_key_in_list_of_dicts(lst, key):\n    for d in lst:\n        if key in d:\n            return True\n    return False", "task_id": "808_fe506f1c-f470-4bab-af69-29ef3e7fc85a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given list of dictionaries contains the specified value or not.", "code": "def check_value_in_list_of_dicts(lst, value):\n    for d in lst:\n        if value in d.values():\n            return True\n    return False", "task_id": "808_14a2678b-d4d5-4012-afe1-82a963c42a33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of lowercase characters in the given string.", "code": "def max_run_lowercase(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].islower():\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_b3475400-abf4-4dec-808d-31cf90d9dfd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of digit characters in the given string.", "code": "def max_run_digits(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isdigit():\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_5c55d382-3bbe-435d-bc0a-3b4e75f1aff4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of vowel characters in the given string.", "code": "def max_run_vowels(test_str):\n  cnt = 0\n  res = 0\n  vowels = 'aeiouAEIOU'\n  for idx in range(0, len(test_str)):\n    if test_str[idx] in vowels:\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_128c7dc4-ad82-4a3f-81c0-adf98223a467", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of consonant characters in the given string.", "code": "def max_run_consonants(test_str):\n  cnt = 0\n  res = 0\n  vowels = 'aeiouAEIOU'\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isalpha() and test_str[idx] not in vowels:\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_319b45b2-d1a1-48e0-bbfa-99f1d823df66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of space characters in the given string.", "code": "def max_run_spaces(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx] == ' ':\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_79c51707-8dd8-4b99-8717-ee1e64744b11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of special characters (non-alphanumeric) in the given string.", "code": "def max_run_special_chars(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if not test_str[idx].isalnum():\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_fe334fb7-3f53-43cc-bccb-05cb4c448f24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of alphanumeric characters in the given string.", "code": "def max_run_alphanumeric(test_str):\n  cnt = 0\n  res = 0\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isalnum():\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_14c2c189-88c2-4b28-9555-ce7d328da594", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of uppercase vowel characters in the given string.", "code": "def max_run_uppercase_vowels(test_str):\n  cnt = 0\n  res = 0\n  vowels = 'AEIOU'\n  for idx in range(0, len(test_str)):\n    if test_str[idx] in vowels:\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_8801fe2f-5207-4542-9845-d6731a23e572", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of lowercase consonant characters in the given string.", "code": "def max_run_lowercase_consonants(test_str):\n  cnt = 0\n  res = 0\n  vowels = 'aeiou'\n  for idx in range(0, len(test_str)):\n    if test_str[idx].islower() and test_str[idx] not in vowels:\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_77113e89-75ba-42b9-8f57-c74953a78c85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum run of uppercase consonant characters in the given string.", "code": "def max_run_uppercase_consonants(test_str):\n  cnt = 0\n  res = 0\n  vowels = 'AEIOU'\n  for idx in range(0, len(test_str)):\n    if test_str[idx].isupper() and test_str[idx] not in vowels:\n      cnt += 1\n    else:\n      res = max(res, cnt)\n      cnt = 0\n  res = max(res, cnt)\n  return res", "task_id": "806_38f309a5-1380-4273-888c-88d5ee110302", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if each element of the first tuple is greater than or equal to its corresponding index in the second tuple.", "code": "def compare_tuples(tup1, tup2):\n  return all(x >= y for x, y in zip(tup1, tup2))", "task_id": "809_1116ff86-9a5f-4127-b45b-43d65561718c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the sum of elements in the first tuple is greater than the sum of elements in the second tuple.", "code": "def sum_greater(tup1, tup2):\n  return sum(tup1) > sum(tup2)", "task_id": "809_b01d10b8-241c-4dcc-b762-48a304b1cb9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the product of elements in the first tuple is smaller than the product of elements in the second tuple.", "code": "def product_smaller(tup1, tup2):\n  from functools import reduce\n  import operator\n  product1 = reduce(operator.mul, tup1, 1)\n  product2 = reduce(operator.mul, tup2, 1)\n  return product1 < product2", "task_id": "809_4499d7dc-3795-4818-b4e3-86a0311c08df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are even numbers.", "code": "def all_even(tup):\n  return all(x % 2 == 0 for x in tup)", "task_id": "809_12d6d4be-bc7c-40b4-aebe-e37b5c65f74d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are odd numbers.", "code": "def all_odd(tup):\n  return all(x % 2 != 0 for x in tup)", "task_id": "809_41a1b9e1-c3a8-42c9-af21-64653de3cdcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the tuple contains at least one zero.", "code": "def contains_zero(tup):\n  return 0 in tup", "task_id": "809_e9253dfb-5eb5-47ae-bc6f-2374df07ca4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are positive numbers.", "code": "def all_positive(tup):\n  return all(x > 0 for x in tup)", "task_id": "809_6dd6177f-157b-493f-9350-1b02625d8580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the tuple are negative numbers.", "code": "def all_negative(tup):\n  return all(x < 0 for x in tup)", "task_id": "809_08843129-24a8-47ee-885d-72a60ee1b704", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the tuple contains any duplicate elements.", "code": "def contains_duplicates(tup):\n  return len(tup) != len(set(tup))", "task_id": "809_775071e8-af44-4c35-8ab0-914e292c4eb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the tuple is sorted in ascending order.", "code": "def is_sorted(tup):\n  return all(tup[i] <= tup[i+1] for i in range(len(tup)-1))", "task_id": "809_c18655d8-a216-4822-900c-612c3de4b190", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if one list of tuples is the reverse of the other.", "code": "def check_identical_reversed(test_list1, test_list2):\n    return test_list1 == test_list2[::-1]", "task_id": "811_1c418894-ca69-4056-8b18-6e4bf92e05ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two lists of tuples are identical when sorted.", "code": "def check_identical_sorted(test_list1, test_list2):\n    return sorted(test_list1) == sorted(test_list2)", "task_id": "811_891b6979-a589-47f2-b838-d6e881cf562f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two lists of tuples contain the same elements, ignoring order.", "code": "def check_identical_ignore_order(test_list1, test_list2):\n    return set(test_list1) == set(test_list2)", "task_id": "811_cbbd6d39-1d90-4e95-9e8b-3fc28565a44c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the first elements of each tuple in two lists are identical.", "code": "def check_identical_first_elements(test_list1, test_list2):\n    return [x[0] for x in test_list1] == [x[0] for x in test_list2]", "task_id": "811_a76cabec-5577-491d-977d-95989a710518", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two lists of tuples have the same length.", "code": "def check_identical_lengths(test_list1, test_list2):\n    return len(test_list1) == len(test_list2)", "task_id": "811_28263f67-cdc5-4575-b139-8a52efa935c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two lists of tuples are identical when flattened.", "code": "def check_identical_flattened(test_list1, test_list2):\n    flatten1 = [item for sublist in test_list1 for item in sublist]\n    flatten2 = [item for sublist in test_list2 for item in sublist]\n    return flatten1 == flatten2", "task_id": "811_8b338439-ddb3-4c00-88e3-5895a2914adb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the sum of elements in each tuple in two lists are identical.", "code": "def check_identical_sum_elements(test_list1, test_list2):\n    return [sum(x) for x in test_list1] == [sum(x) for x in test_list2]", "task_id": "811_64189ec9-7906-4364-a34f-6ee2523d453f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the lengths of each tuple in two lists are identical.", "code": "def check_identical_lengths_elements(test_list1, test_list2):\n    return [len(x) for x in test_list1] == [len(x) for x in test_list2]", "task_id": "811_d938e519-656d-466a-9d25-c8e293e531ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the first and last elements of each tuple in two lists are identical.", "code": "def check_identical_first_last_elements(test_list1, test_list2):\n    return [(x[0], x[-1]) for x in test_list1] == [(x[0], x[-1]) for x in test_list2]", "task_id": "811_984b2164-9fb2-47e6-9bb1-199fe0131ced", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the even-indexed and odd-indexed elements of each tuple in two lists are identical.", "code": "def check_identical_even_odd_elements(test_list1, test_list2):\n    return [(x[::2], x[1::2]) for x in test_list1] == [(x[::2], x[1::2]) for x in test_list2]", "task_id": "811_978b4508-862d-492c-b66e-d37cfc077d7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as its value.", "code": "def repeat_elements(arr: list[int]) -> list[int]:\n    result = []\n    for num in arr:\n        result.extend([num] * num)\n    return result", "task_id": "810_d178b43c-9d7b-417e-aaf5-cf5f2e28f5ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as its index.", "code": "def repeat_elements_by_index(arr: list[int]) -> list[int]:\n    result = []\n    for i, num in enumerate(arr):\n        result.extend([num] * i)\n    return result", "task_id": "810_71e898a2-d5e5-44ef-ab82-2cef59f28d9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the length of the list.", "code": "def repeat_elements_by_length(arr: list[int]) -> list[int]:\n    result = []\n    for num in arr:\n        result.extend([num] * len(arr))\n    return result", "task_id": "810_0299bace-41c4-4cae-a6ca-70ed0171aec2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the sum of the list.", "code": "def repeat_elements_by_sum(arr: list[int]) -> list[int]:\n    result = []\n    total_sum = sum(arr)\n    for num in arr:\n        result.extend([num] * total_sum)\n    return result", "task_id": "810_9971d3cd-cd3e-49fb-a119-ef539702bd07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the maximum value in the list.", "code": "def repeat_elements_by_max(arr: list[int]) -> list[int]:\n    result = []\n    max_val = max(arr)\n    for num in arr:\n        result.extend([num] * max_val)\n    return result", "task_id": "810_acd4468e-e90f-45b8-b39e-ddd473a855cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the minimum value in the list.", "code": "def repeat_elements_by_min(arr: list[int]) -> list[int]:\n    result = []\n    min_val = min(arr)\n    for num in arr:\n        result.extend([num] * min_val)\n    return result", "task_id": "810_b3d073f5-238a-4057-9aed-ac21e90f9bb9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as its parity (1 for odd, 2 for even).", "code": "def repeat_elements_by_parity(arr: list[int]) -> list[int]:\n    result = []\n    for num in arr:\n        repeat_count = 2 if num % 2 == 0 else 1\n        result.extend([num] * repeat_count)\n    return result", "task_id": "810_b4909f05-72ad-477f-b205-363a16dabbfd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the number of its divisors.", "code": "def repeat_elements_by_divisors(arr: list[int]) -> list[int]:\n    def count_divisors(n):\n        count = 0\n        for i in range(1, n + 1):\n            if n % i == 0:\n                count += 1\n        return count\n    result = []\n    for num in arr:\n        result.extend([num] * count_divisors(num))\n    return result", "task_id": "810_93faba8c-0ab5-4038-b15d-a5ffaddcfbf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the number of digits in the element.", "code": "def repeat_elements_by_digits(arr: list[int]) -> list[int]:\n    result = []\n    for num in arr:\n        digit_count = len(str(abs(num)))\n        result.extend([num] * digit_count)\n    return result", "task_id": "810_dfb4453d-9389-4292-9ccb-bfa78038440a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that takes a list of integers and repeats each element as many times as the number of prime numbers less than or equal to the element.", "code": "def repeat_elements_by_prime(arr: list[int]) -> list[int]:\n    def count_primes(n):\n        if n < 2:\n            return 0\n        primes = [True] * (n + 1)\n        primes[0], primes[1] = False, False\n        for i in range(2, int(n ** 0.5) + 1):\n            if primes[i]:\n                for j in range(i * i, n + 1, i):\n                    primes[j] = False\n        return sum(primes)\n    result = []\n    for num in arr:\n        result.extend([num] * count_primes(num))\n    return result", "task_id": "810_8de97b67-35f6-45de-8f69-362e9e453375", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'street' as 'st.' in a given string.", "code": "import re\ndef street_st(street):\n  return (re.sub('Street$', 'St.', street))", "task_id": "812_d410eb0b-8b72-4599-869a-f621bc83045c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'avenue' as 'ave.' in a given string.", "code": "import re\ndef avenue_ave(street):\n  return (re.sub('Avenue$', 'Ave.', street))", "task_id": "812_cd73dc8d-c57f-4034-bb01-8d9469b9663e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'boulevard' as 'blvd.' in a given string.", "code": "import re\ndef boulevard_blvd(street):\n  return (re.sub('Boulevard$', 'Blvd.', street))", "task_id": "812_7dd6d72a-9b65-41fa-b505-db78ad2b02ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'place' as 'pl.' in a given string.", "code": "import re\ndef place_pl(street):\n  return (re.sub('Place$', 'Pl.', street))", "task_id": "812_5424a8d9-af82-4904-9de5-b6e13deb6f50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'drive' as 'dr.' in a given string.", "code": "import re\ndef drive_dr(street):\n  return (re.sub('Drive$', 'Dr.', street))", "task_id": "812_4899e1a4-582f-4f16-87a5-ddc8de0f1981", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'lane' as 'ln.' in a given string.", "code": "import re\ndef lane_ln(street):\n  return (re.sub('Lane$', 'Ln.', street))", "task_id": "812_27690cff-9dba-4a23-a623-97d4dd2eeff8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'court' as 'ct.' in a given string.", "code": "import re\ndef court_ct(street):\n  return (re.sub('Court$', 'Ct.', street))", "task_id": "812_01da9330-f8ef-4eda-9b11-2c5d98cc8bc6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'terrace' as 'ter.' in a given string.", "code": "import re\ndef terrace_ter(street):\n  return (re.sub('Terrace$', 'Ter.', street))", "task_id": "812_addba4f9-c570-4cc2-88d3-39c6613ce1c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'circle' as 'cir.' in a given string.", "code": "import re\ndef circle_cir(street):\n  return (re.sub('Circle$', 'Cir.', street))", "task_id": "812_3d9ed56d-9da1-46da-b8b5-c4e529ade0bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to abbreviate 'highway' as 'hwy.' in a given string.", "code": "import re\ndef highway_hwy(street):\n  return (re.sub('Highway$', 'Hwy.', street))", "task_id": "812_5ec4be9d-cf7d-43a3-b72b-238c8c1d5c76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "task_id": "813_5ff10013-5d9a-4062-80e6-5a76cfab46f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of consonants in a string.", "code": "def count_consonants(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    count = 0\n    for char in s:\n        if char.isalpha() and char not in vowels:\n            count += 1\n    return count", "task_id": "813_1afcdd99-6c71-4b60-a5a3-3bd233000849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "813_e9ccaaa7-c383-41e9-9ac7-f41fd07522ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "813_c56278f3-f089-41a8-b1a8-6a2050317d69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "813_8fd3b467-9ce2-45e6-b6e8-69506b650461", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(s: str) -> str:\n    return s.title()", "task_id": "813_3a6e630e-5868-44c4-8062-6af52b58b2ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all spaces from a string.", "code": "def remove_spaces(s: str) -> str:\n    return s.replace(' ', '')", "task_id": "813_5ad10cd4-f22d-47b6-8394-709eba17eb30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in a string.", "code": "def count_uppercase(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.isupper():\n            count += 1\n    return count", "task_id": "813_1c7c1ce0-b814-4905-8caa-a357f22b80a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of lowercase letters in a string.", "code": "def count_lowercase(s: str) -> int:\n    count = 0\n    for char in s:\n        if char.islower():\n            count += 1\n    return count", "task_id": "813_cf35c3f2-f657-4d5d-91a7-b8a6cda9fa92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "813_4a79c821-9825-4029-b0ab-a4a049afe749", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def rectangle_area(length, width):\n    area = length * width\n    return area", "task_id": "814_9c92392f-0172-4073-897c-549335be1c6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def triangle_area(base, height):\n    area = 0.5 * base * height\n    return area", "task_id": "814_2c896e56-d5f7-4a27-9310-2fee688add5c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle given its radius.", "code": "import math\ndef circle_area(radius):\n    area = math.pi * radius ** 2\n    return area", "task_id": "814_caf01e01-87bb-4101-a2bd-63c0be927199", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a trapezoid given the lengths of its two bases and its height.", "code": "def trapezoid_area(base1, base2, height):\n    area = 0.5 * (base1 + base2) * height\n    return area", "task_id": "814_2401fd9b-9002-4805-897c-c14b75ebaf7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram given its base and height.", "code": "def parallelogram_area(base, height):\n    area = base * height\n    return area", "task_id": "814_37429927-feae-487f-a4a1-738746c4990f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a regular hexagon given the length of its side.", "code": "import math\ndef hexagon_area(side):\n    area = (3 * math.sqrt(3) * side ** 2) / 2\n    return area", "task_id": "814_ce8681b8-7b76-41ed-a699-3a4f617c0407", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of an ellipse given its semi-major axis (a) and semi-minor axis (b).", "code": "import math\ndef ellipse_area(a, b):\n    area = math.pi * a * b\n    return area", "task_id": "814_12fba467-6fee-443c-adcc-c2bb52c9674b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a kite given the lengths of its diagonals.", "code": "def kite_area(d1, d2):\n    area = 0.5 * d1 * d2\n    return area", "task_id": "814_50ef15bb-3631-4f53-ab01-8b44f9fcedce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a regular pentagon given the length of its side.", "code": "import math\ndef pentagon_area(side):\n    area = (1/4) * math.sqrt(5 * (5 + 2 * math.sqrt(5))) * side ** 2\n    return area", "task_id": "814_e9793d6b-4303-4a6a-8a89-54e3388e8117", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a regular octagon given the length of its side.", "code": "import math\ndef octagon_area(side):\n    area = 2 * (1 + math.sqrt(2)) * side ** 2\n    return area", "task_id": "814_7984944d-82ca-417e-8de7-928e9f278869", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of the given list.", "code": "def clear_list(test_list):\n  test_list.clear()\n  return test_list", "task_id": "816_3654d08c-5258-482b-a092-5c52bd6cbdc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of the given dictionary.", "code": "def clear_dict(test_dict):\n  test_dict.clear()\n  return test_dict", "task_id": "816_22506975-96a3-49d6-ab1b-20712ba33222", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of the given set.", "code": "def clear_set(test_set):\n  test_set.clear()\n  return test_set", "task_id": "816_c4bf6d63-eb9b-4d74-9917-0524587d86fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of the given string.", "code": "def clear_string(test_str):\n  return ''", "task_id": "816_ad32e131-2ba7-4c16-a4f2-cf0d2b2d92de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each tuple in the given list of tuples.", "code": "def clear_list_of_tuples(test_list):\n  return [tuple() for _ in test_list]", "task_id": "816_9c0c8212-0260-450c-9415-3042e4ef759a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each nested list in the given list of lists.", "code": "def clear_nested_list(test_list):\n  return [[] for _ in test_list]", "task_id": "816_70868d02-db6d-4fb7-b803-58577bda5b01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each key in the given dictionary.", "code": "def clear_dict_values(test_dict):\n  return {k: None for k in test_dict.keys()}", "task_id": "816_fecbf4df-2005-4b4b-b3c0-eee465e153fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each dictionary in the given list of dictionaries.", "code": "def clear_list_of_dicts(test_list):\n  return [{} for _ in test_list]", "task_id": "816_f698d0bd-5c2e-4442-8274-fa7f319f3798", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each list in the given dictionary of lists.", "code": "def clear_dict_of_lists(test_dict):\n  return {k: [] for k in test_dict.keys()}", "task_id": "816_0959946b-634c-43e3-ae9e-e9c73ea54073", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to clear the values of each list in the given tuple of lists.", "code": "def clear_tuple_of_lists(test_tup):\n  return tuple([] for _ in test_tup)", "task_id": "816_3adc1c06-db8a-422d-b914-ec36e84edd5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of 0s, 1s, and 2s in the given array.", "code": "def count_zeros_ones_twos(arr):\n  count_0 = arr.count(0)\n  count_1 = arr.count(1)\n  count_2 = arr.count(2)\n  return (count_0, count_1, count_2)", "task_id": "815_1732c93d-ee24-49f0-ad6a-a53852548973", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s by their frequency in descending order.", "code": "def sort_by_frequency(arr):\n  count_0 = arr.count(0)\n  count_1 = arr.count(1)\n  count_2 = arr.count(2)\n  sorted_arr = [2]*count_2 + [1]*count_1 + [0]*count_0\n  return sorted_arr", "task_id": "815_6973416d-437f-41a4-822d-4166d45f5b22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all 2s in the given array with 0s and then sort the array.", "code": "def replace_and_sort(arr):\n  arr = [0 if x == 2 else x for x in arr]\n  return sorted(arr)", "task_id": "815_ab3c7294-cf6c-467e-bcdc-cd4ec0e34f27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s in descending order.", "code": "def reverse_sort(arr):\n  count_0 = arr.count(0)\n  count_1 = arr.count(1)\n  count_2 = arr.count(2)\n  sorted_arr = [2]*count_2 + [1]*count_1 + [0]*count_0\n  return sorted_arr[::-1]", "task_id": "815_74c3944f-fec8-490c-a72c-608f04a2ddca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s and then remove all 1s.", "code": "def sort_and_remove_ones(arr):\n  arr = [x for x in arr if x != 1]\n  return sorted(arr)", "task_id": "815_fb6467b4-a6f7-4717-aed5-0d37ca9bf67a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of 0s, 1s, and 2s in the given array and then return the sorted array.", "code": "def count_and_sort(arr):\n  count_0 = arr.count(0)\n  count_1 = arr.count(1)\n  count_2 = arr.count(2)\n  sorted_arr = [0]*count_0 + [1]*count_1 + [2]*count_2\n  return sorted_arr", "task_id": "815_19b93ce7-79ca-4dfc-92bb-219899e971a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s and then replace all 0s with 2s.", "code": "def sort_and_replace_zeros(arr):\n  sorted_arr = sorted(arr)\n  sorted_arr = [2 if x == 0 else x for x in sorted_arr]\n  return sorted_arr", "task_id": "815_e701052a-acd6-4870-89e7-479a22550000", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s and then double the number of 1s.", "code": "def sort_and_double_ones(arr):\n  count_1 = arr.count(1)\n  sorted_arr = sorted(arr)\n  sorted_arr.extend([1]*count_1)\n  return sorted(sorted_arr)", "task_id": "815_2c4c6e00-ec87-4e60-bcab-cab7eebb67c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s and then return the sorted array along with the count of 2s.", "code": "def sort_and_count_twos(arr):\n  count_2 = arr.count(2)\n  sorted_arr = sorted(arr)\n  return (sorted_arr, count_2)", "task_id": "815_17d292fe-cc84-4cb6-a815-90f75dbe8b66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of 0s, 1s, and 2s and then swap all 0s with 2s.", "code": "def sort_and_swap_zeros_twos(arr):\n  sorted_arr = sorted(arr)\n  sorted_arr = [2 if x == 0 else 0 if x == 2 else x for x in sorted_arr]\n  return sorted_arr", "task_id": "815_543eda77-6f9c-4571-992b-fe1c7dd5cb55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from a list of numbers using a lambda function.", "code": "def filter_even(nums):\n    result = list(filter(lambda x: x % 2 == 0, nums))\n    return result", "task_id": "817_c8ebc326-837c-4394-89ce-ee034f21a1d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out odd numbers from a list of numbers using a lambda function.", "code": "def filter_odd(nums):\n    result = list(filter(lambda x: x % 2 != 0, nums))\n    return result", "task_id": "817_b30e298b-287e-4474-8d37-43de93708ad7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out positive numbers from a list of numbers using a lambda function.", "code": "def filter_positive(nums):\n    result = list(filter(lambda x: x > 0, nums))\n    return result", "task_id": "817_d4043919-2928-4ff6-a673-efeecaf2e8d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out negative numbers from a list of numbers using a lambda function.", "code": "def filter_negative(nums):\n    result = list(filter(lambda x: x < 0, nums))\n    return result", "task_id": "817_c224ec3e-00ab-4cb0-8d94-d8570bfb2682", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out numbers greater than a given threshold from a list of numbers using a lambda function.", "code": "def filter_greater_than(nums, threshold):\n    result = list(filter(lambda x: x > threshold, nums))\n    return result", "task_id": "817_becaf32c-246e-4bcf-a219-e9aa6aeb909b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out numbers less than a given threshold from a list of numbers using a lambda function.", "code": "def filter_less_than(nums, threshold):\n    result = list(filter(lambda x: x < threshold, nums))\n    return result", "task_id": "817_3cfc8d4f-b74b-41d1-8f34-b54f1c920749", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words with length greater than a given value from a list of words using a lambda function.", "code": "def filter_length(words, length):\n    result = list(filter(lambda x: len(x) > length, words))\n    return result", "task_id": "817_12c0931b-8807-4633-a344-1f8141be1fd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words starting with a given character from a list of words using a lambda function.", "code": "def filter_starting_with(words, char):\n    result = list(filter(lambda x: x.startswith(char), words))\n    return result", "task_id": "817_6faf0afb-035c-4160-858d-60229e4e49d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words ending with a given character from a list of words using a lambda function.", "code": "def filter_ending_with(words, char):\n    result = list(filter(lambda x: x.endswith(char), words))\n    return result", "task_id": "817_fc72f614-dca3-4123-99af-5bb975565f43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out words containing a given substring from a list of words using a lambda function.", "code": "def filter_containing(words, substring):\n    result = list(filter(lambda x: substring in x, words))\n    return result", "task_id": "817_9e4aaa58-b442-4c2d-b0d0-c200d5d27f6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count upper case letters in a given string.", "code": "def count_uppercase(s):\n    upper_ctr = 0\n    for char in s:\n        if 'A' <= char <= 'Z':\n            upper_ctr += 1\n    return upper_ctr", "task_id": "818_d6440bb6-2131-48cd-a6b1-f6e5fa2e3548", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count digits in a given string.", "code": "def count_digits(s):\n    digit_ctr = 0\n    for char in s:\n        if '0' <= char <= '9':\n            digit_ctr += 1\n    return digit_ctr", "task_id": "818_ae8ab617-c230-4eff-b50b-f3b7937e086b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    vowel_ctr = 0\n    for char in s:\n        if char in vowels:\n            vowel_ctr += 1\n    return vowel_ctr", "task_id": "818_26373506-b77a-4ce9-8589-4d627e0da099", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count consonants in a given string.", "code": "def count_consonants(s):\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    consonant_ctr = 0\n    for char in s:\n        if char in consonants:\n            consonant_ctr += 1\n    return consonant_ctr", "task_id": "818_ebb745e9-0d06-4bfd-805a-1ec6ef20b2a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count spaces in a given string.", "code": "def count_spaces(s):\n    space_ctr = 0\n    for char in s:\n        if char == ' ':\n            space_ctr += 1\n    return space_ctr", "task_id": "818_dba1c089-ac0f-45b2-b1f4-d0fc9237646b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count special characters (non-alphanumeric) in a given string.", "code": "def count_special_chars(s):\n    special_ctr = 0\n    for char in s:\n        if not char.isalnum():\n            special_ctr += 1\n    return special_ctr", "task_id": "818_73780b8d-ebd5-4505-a0a3-7977a8cb8da2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count words in a given string.", "code": "def count_words(s):\n    words = s.split()\n    return len(words)", "task_id": "818_d1d098da-7ffc-4b40-b86f-e1334108a493", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count sentences in a given string. Assume sentences end with a period ('.').", "code": "def count_sentences(s):\n    sentences = s.split('. ')\n    return len(sentences)", "task_id": "818_4ac53381-ea6e-4022-bf52-bfd7f362818d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count occurrences of a specific character in a given string.", "code": "def count_occurrences(s, char):\n    return s.count(char)", "task_id": "818_38f30364-3636-484a-aea1-bf56870ed6d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count occurrences of a specific substring in a given string.", "code": "def count_substring(s, sub):\n    return s.count(sub)", "task_id": "818_0625a073-cb78-4ac6-b765-e391aeea623c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    else:\n        return False", "task_id": "820_5edfcac1-04c2-4312-8dfa-529038a608c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given day number (1 for Monday, 2 for Tuesday, ..., 7 for Sunday) is a weekend or not.", "code": "def is_weekend(day: int) -> bool:\n    if day == 6 or day == 7:\n        return True\n    else:\n        return False", "task_id": "820_a2194e14-7a3f-49e0-8af5-633ed499d60d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is even or not.", "code": "def is_even(number: int) -> bool:\n    if number % 2 == 0:\n        return True\n    else:\n        return False", "task_id": "820_694c0f84-f0d3-4c4b-8b29-d56fee735eb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a prime number or not.", "code": "def is_prime(number: int) -> bool:\n    if number <= 1:\n        return False\n    for i in range(2, int(number**0.5) + 1):\n        if number % i == 0:\n            return False\n    return True", "task_id": "820_c2326846-2cb5-4381-b7ad-e9d5e274cfb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "820_5da060d2-c7fc-44b6-a7cd-e8a5807b7d4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is in uppercase or not.", "code": "def is_uppercase(s: str) -> bool:\n    return s.isupper()", "task_id": "820_df8990d9-bf40-472f-b7a9-7f48ac9bce60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given character is a vowel or not.", "code": "def is_vowel(c: str) -> bool:\n    return c.lower() in 'aeiou'", "task_id": "820_a91d1416-8639-47c5-811a-61674692e3ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is divisible by 3 or not.", "code": "def is_divisible_by_3(number: int) -> bool:\n    return number % 3 == 0", "task_id": "820_6cf1f680-51d1-40d6-aee8-02f9a75a7806", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given number is a perfect square or not.", "code": "def is_square(number: int) -> bool:\n    return int(number**0.5)**2 == number", "task_id": "820_e560a639-a339-41d7-aa3e-0de74f9ae192", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the two given strings are anagrams of each other or not.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "820_4052ed3b-3e3d-4cd1-aafb-15c076c87db2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists into a single list without duplicates.", "code": "def merge_lists(list1, list2):\n    return list(set(list1 + list2))", "task_id": "821_1d48b9e5-ba03-474b-ade4-3b5e62728fed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two strings by alternating characters from each string.", "code": "def merge_strings(str1, str2):\n    merged = ''.join(a + b for a, b in zip(str1, str2))\n    return merged + str1[len(str2):] + str2[len(str1):]", "task_id": "821_e5f14fc3-74d4-4b99-aa61-181c558b1f23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries by summing the values of common keys.", "code": "def merge_dicts_with_sum(dict1, dict2):\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        merged[key] = merged.get(key, 0) + value\n    return merged", "task_id": "821_02db9d53-188d-4167-8c07-cdc2fe1271ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into a single sorted list.", "code": "def merge_sorted_lists(list1, list2):\n    return sorted(list1 + list2)", "task_id": "821_0eaa6f2a-b040-4e9d-9f91-f1a412dca7f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sets into a single set.", "code": "def merge_sets(set1, set2):\n    return set1.union(set2)", "task_id": "821_6584e174-aed4-4413-9f7a-a2f33ff73d04", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists by alternating elements from each list.", "code": "def merge_lists_alternating(list1, list2):\n    merged = [item for pair in zip(list1, list2) for item in pair]\n    return merged + list1[len(list2):] + list2[len(list1):]", "task_id": "821_b001ec07-f08b-40b3-bcea-4e917029c629", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries by taking the maximum value for common keys.", "code": "def merge_dicts_with_max(dict1, dict2):\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        merged[key] = max(merged.get(key, value), value)\n    return merged", "task_id": "821_86801a00-15cc-4687-9ae0-90996f0bb546", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two strings and return the characters sorted in alphabetical order.", "code": "def merge_and_sort_strings(str1, str2):\n    return ''.join(sorted(str1 + str2))", "task_id": "821_fd0b77fa-9d15-4a99-b2e7-3f02b0062558", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries by taking the minimum value for common keys.", "code": "def merge_dicts_with_min(dict1, dict2):\n    merged = dict1.copy()\n    for key, value in dict2.items():\n        merged[key] = min(merged.get(key, value), value)\n    return merged", "task_id": "821_12b71d22-4ffe-42e3-9bc3-a2c79f9e190f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists by summing the elements at the same positions.", "code": "def merge_lists_with_sum(list1, list2):\n    return [a + b for a, b in zip(list1, list2)] + list1[len(list2):] + list2[len(list1):]", "task_id": "821_2118c272-d8aa-4e75-92e0-490c04aa68b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of unique elements in a given list of numbers.", "code": "def count_unique_elements(lst):\n    frequency = {}\n    for num in lst:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return frequency", "task_id": "819_ee49e1ec-bf13-489d-a4e7-d3cd33de686e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each vowel in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiou'\n    frequency = {v: 0 for v in vowels}\n    for char in s.lower():\n        if char in vowels:\n            frequency[char] += 1\n    return frequency", "task_id": "819_a19e971a-d065-4b1c-9bb0-ad1c12b95d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of word lengths in a given string.", "code": "def count_word_lengths(s):\n    words = s.split()\n    length_frequency = {}\n    for word in words:\n        length = len(word)\n        if length in length_frequency:\n            length_frequency[length] += 1\n        else:\n            length_frequency[length] = 1\n    return length_frequency", "task_id": "819_c7193dcc-059a-4d21-94d7-1879a3ddcfb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of each character in a given string.", "code": "def count_char_occurrences(s):\n    frequency = {}\n    for char in s:\n        if char in frequency:\n            frequency[char] += 1\n        else:\n            frequency[char] = 1\n    return frequency", "task_id": "819_d4707627-756b-4bfb-a7c9-640a45b8617d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive duplicate vowels in a given string.", "code": "def count_consecutive_vowels(s):\n    vowels = 'aeiou'\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(s)-1):\n        if s[i] in vowels and s[i] == s[i+1]:\n            running_count += 1\n        else:\n            if s[i] in vowels:\n                frequency.append(running_count)\n                element.append(s[i])\n                running_count = 1\n    if s[-1] in vowels:\n        frequency.append(running_count)\n        element.append(s[-1])\n    return element, frequency", "task_id": "819_2a2c2cf8-4fac-46be-a3ac-468db537702f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive duplicate words in a given string.", "code": "def count_consecutive_words(s):\n    words = s.split()\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(words)-1):\n        if words[i] == words[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(words[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(words[-1])\n    return element, frequency", "task_id": "819_1e256057-7dee-4ffc-8ebc-09f617d93319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive duplicate characters in a given string.", "code": "def count_consecutive_chars(s):\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(s)-1):\n        if s[i] == s[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(s[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(s[-1])\n    return element, frequency", "task_id": "819_ca20a9ff-7eb8-4ef5-9867-e8845f25e15b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive increasing numbers in a given list of numbers.", "code": "def count_consecutive_numbers(lst):\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(lst)-1):\n        if lst[i] + 1 == lst[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lst[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lst[-1])\n    return element, frequency", "task_id": "819_c948ec2c-e956-40bc-af91-60a04e32d0bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive decreasing numbers in a given list of numbers.", "code": "def count_consecutive_decreasing_numbers(lst):\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(lst)-1):\n        if lst[i] - 1 == lst[i+1]:\n            running_count += 1\n        else:\n            frequency.append(running_count)\n            element.append(lst[i])\n            running_count = 1\n    frequency.append(running_count)\n    element.append(lst[-1])\n    return element, frequency", "task_id": "819_cb77acf6-2839-408c-8534-2b242f998319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the frequency of consecutive even numbers in a given list of numbers.", "code": "def count_consecutive_even_numbers(lst):\n    element = []\n    frequency = []\n    running_count = 1\n    for i in range(len(lst)-1):\n        if lst[i] % 2 == 0 and lst[i+1] % 2 == 0:\n            running_count += 1\n        else:\n            if lst[i] % 2 == 0:\n                frequency.append(running_count)\n                element.append(lst[i])\n                running_count = 1\n    if lst[-1] % 2 == 0:\n        frequency.append(running_count)\n        element.append(lst[-1])\n    return element, frequency", "task_id": "819_034a5c73-7438-41d1-84b7-dbabc0e92c03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the email is valid. An email is considered valid if it contains exactly one '@' symbol, at least one '.' after the '@', and no spaces.", "code": "import re\ndef is_valid_email(email: str) -> bool:\n    if ' ' in email:\n        return False\n    if email.count('@') != 1:\n        return False\n    local, domain = email.split('@')\n    if '.' not in domain:\n        return False\n    return True", "task_id": "822_9e5fbcd1-3cfb-4a1d-a138-53b5f785b6f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the username is valid. A username is considered valid if it is between 5 and 15 characters long and contains only alphanumeric characters.", "code": "def is_valid_username(username: str) -> bool:\n    if not (5 <= len(username) <= 15):\n        return False\n    if not username.isalnum():\n        return False\n    return True", "task_id": "822_b32ccda6-7514-41a5-a422-20e19e1002d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the color code is a valid hex color. A valid hex color starts with '#' followed by exactly 6 hexadecimal characters (0-9, a-f, A-F).", "code": "import re\ndef is_valid_hex_color(color: str) -> bool:\n    if re.fullmatch(r'#[0-9a-fA-F]{6}', color):\n        return True\n    return False", "task_id": "822_b6ce8165-071a-489c-a8e9-111295d098a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the phone number is valid. A valid phone number contains exactly 10 digits and no other characters.", "code": "def is_valid_phone_number(phone: str) -> bool:\n    if len(phone) != 10:\n        return False\n    if not phone.isdigit():\n        return False\n    return True", "task_id": "822_f7791360-67f6-4b96-9ce5-9e8fac24e326", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the date is valid. A valid date is in the format 'YYYY-MM-DD' and must be a valid calendar date.", "code": "import datetime\ndef is_valid_date(date: str) -> bool:\n    try:\n        datetime.datetime.strptime(date, '%Y-%m-%d')\n        return True\n    except ValueError:\n        return False", "task_id": "822_4e5fadae-0969-4ae3-b70a-0295bb4a8f68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the IP address is valid. A valid IP address is in the format 'X.X.X.X' where X is a number between 0 and 255.", "code": "def is_valid_ip(ip: str) -> bool:\n    parts = ip.split('.')\n    if len(parts) != 4:\n        return False\n    for part in parts:\n        if not part.isdigit() or not (0 <= int(part) <= 255):\n            return False\n    return True", "task_id": "822_9d21b162-6af2-4abf-b712-9b704d3d5360", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the URL is valid. A valid URL starts with 'http://' or 'https://' and contains at least one '.' after the protocol.", "code": "import re\ndef is_valid_url(url: str) -> bool:\n    if re.match(r'^(http://|https://).+\\..+', url):\n        return True\n    return False", "task_id": "822_e3660d1b-9227-42d8-8a83-16a1f7d32fe6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the credit card number is valid. A valid credit card number contains exactly 16 digits.", "code": "def is_valid_credit_card(card: str) -> bool:\n    if len(card) != 16:\n        return False\n    if not card.isdigit():\n        return False\n    return True", "task_id": "822_96d6b3a4-f412-4a69-8537-b338258ae463", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the Social Security Number (SSN) is valid. A valid SSN is in the format 'XXX-XX-XXXX' where X is a digit.", "code": "import re\ndef is_valid_ssn(ssn: str) -> bool:\n    if re.fullmatch(r'\\d{3}-\\d{2}-\\d{4}', ssn):\n        return True\n    return False", "task_id": "822_ea529e56-a92b-4fde-b32e-bdc54d6cce66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the license plate is valid. A valid license plate contains exactly 7 characters, which can be either digits or uppercase letters.", "code": "def is_valid_license_plate(plate: str) -> bool:\n    if len(plate) != 7:\n        return False\n    if not plate.isalnum() or not plate.isupper():\n        return False\n    return True", "task_id": "822_6456c5b4-467e-4a03-86d8-3057469b6af2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove odd numbers from a given list.", "code": "def remove_odd(l):\n    return [i for i in l if i % 2 == 0]", "task_id": "824_5f051782-bd2d-4861-9ed8-c899b11ca98a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove numbers that are multiples of three from a given list.", "code": "def remove_multiples_of_three(l):\n    return [i for i in l if i % 3 != 0]", "task_id": "824_ea79743b-fdb2-499a-9ff3-b4e864e81524", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove negative numbers from a given list.", "code": "def remove_negative_numbers(l):\n    return [i for i in l if i >= 0]", "task_id": "824_4f6d1a65-d49a-40d2-8846-d1d801f6e4eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove non-prime numbers from a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef remove_non_prime(l):\n    return [i for i in l if is_prime(i)]", "task_id": "824_2c231c76-e46a-4225-bcfd-0c3fee15d449", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove vowels from a given string.", "code": "def remove_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "824_edf49961-6669-4034-a1e3-910566a13d11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove uppercase letters from a given string.", "code": "def remove_uppercase(s):\n    return ''.join([char for char in s if not char.isupper()])", "task_id": "824_cc7aaf27-3e85-45d8-be4b-e4666ddca23f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate elements from a given list.", "code": "def remove_duplicates(l):\n    return list(dict.fromkeys(l))", "task_id": "824_7e6abfbb-9e1e-4e72-ae1c-7ea86922bae3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove elements greater than ten from a given list.", "code": "def remove_elements_greater_than_ten(l):\n    return [i for i in l if i <= 10]", "task_id": "824_442be4ea-1844-40da-b91a-306abc76f5f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove words with less than 4 characters from a given string.", "code": "def remove_short_words(s):\n    return ' '.join([word for word in s.split() if len(word) >= 4])", "task_id": "824_9db9e482-4def-473e-9e00-e16928de9551", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove non-alphabetic characters from a given string.", "code": "def remove_non_alphabetic(s):\n    return ''.join([char for char in s if char.isalpha()])", "task_id": "824_1c07295a-e1c9-4a9c-ada1-451eba137ee5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to extract elements from a list based on given indices and return them in reverse order.", "code": "def extract_elements(nums, indices):\n    result = [nums[i] for i in indices]\n    return result[::-1]", "task_id": "825_80b99389-b557-4239-af52-965859e618a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sum the elements of a list at the specified indices.", "code": "def sum_elements(nums, indices):\n    return sum(nums[i] for i in indices)", "task_id": "825_2edcdc96-f503-4cb2-b650-77fa83bcc0c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to multiply the elements of a list at the specified indices.", "code": "def multiply_elements(nums, indices):\n    result = 1\n    for i in indices:\n        result *= nums[i]\n    return result", "task_id": "825_0e705fd7-17aa-4413-8aa1-4303a36f2a6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element from a list based on the specified indices.", "code": "def max_element(nums, indices):\n    return max(nums[i] for i in indices)", "task_id": "825_d2937690-cfff-45f1-b773-bf088efcb41d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum element from a list based on the specified indices.", "code": "def min_element(nums, indices):\n    return min(nums[i] for i in indices)", "task_id": "825_3a00320c-1f03-47e8-a6ec-eb9decae57c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the average of elements from a list based on the specified indices.", "code": "def average_elements(nums, indices):\n    return sum(nums[i] for i in indices) / len(indices)", "task_id": "825_8ac84b49-3061-4770-bd2e-4a78c11556f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of each element from a list based on the specified indices.", "code": "def count_occurrences(nums, indices):\n    from collections import Counter\n    return dict(Counter(nums[i] for i in indices))", "task_id": "825_798ce4a6-62ec-409b-bb5c-49620eb97dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return only the even elements from a list based on the specified indices.", "code": "def even_elements(nums, indices):\n    return [nums[i] for i in indices if nums[i] % 2 == 0]", "task_id": "825_a0398d90-f34f-4cbf-93b2-41d64d7d8ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return only the odd elements from a list based on the specified indices.", "code": "def odd_elements(nums, indices):\n    return [nums[i] for i in indices if nums[i] % 2 != 0]", "task_id": "825_d503515c-f801-4ea2-8fa0-28967f1953ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return unique elements from a list based on the specified indices.", "code": "def unique_elements(nums, indices):\n    return list(set(nums[i] for i in indices))", "task_id": "825_b60c056b-6225-4870-a0fe-bf0e45e02d32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring using regex, ignoring case sensitivity.", "code": "import re\ndef check_substring_case_insensitive(string, sample):\n    if sample.lower() in string.lower():\n        y = r'\\A' + re.escape(sample)\n        x = re.search(y, string, re.IGNORECASE)\n        if x:\n            return 'string starts with the given substring'\n        else:\n            return 'string doesnt start with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_86c13ea6-3900-41dd-907d-bbb0788726b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring using regex, ignoring leading whitespace in the string.", "code": "import re\ndef check_substring_with_whitespace(string, sample):\n    string = string.lstrip()\n    if sample in string:\n        y = r'\\A' + re.escape(sample)\n        x = re.search(y, string)\n        if x:\n            return 'string starts with the given substring'\n        else:\n            return 'string doesnt start with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_28bfb8df-4e75-46be-9a92-20ae65eed91b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring that includes digits using regex.", "code": "import re\ndef check_substring_with_digits(string, sample):\n    if sample in string:\n        y = r'\\A' + re.escape(sample)\n        x = re.search(y, string)\n        if x:\n            return 'string starts with the given substring'\n        else:\n            return 'string doesnt start with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_08721ccd-b5f2-4a60-abbe-8606a8e98258", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring that includes special characters using regex.", "code": "import re\ndef check_substring_with_special_chars(string, sample):\n    if sample in string:\n        y = r'\\A' + re.escape(sample)\n        x = re.search(y, string)\n        if x:\n            return 'string starts with the given substring'\n        else:\n            return 'string doesnt start with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_2dcb12ec-2b8a-47b1-ae63-b8316c8e363a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring that is a whole word using regex.", "code": "import re\ndef check_substring_with_word_boundary(string, sample):\n    if sample in string:\n        y = r'\\A\\b' + re.escape(sample) + r'\\b'\n        x = re.search(y, string)\n        if x:\n            return 'string starts with the given substring'\n        else:\n            return 'string doesnt start with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_727e49ec-e5a1-4318-bcff-da0233f424e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string ends with a substring using regex.", "code": "import re\ndef check_substring_with_end_boundary(string, sample):\n    if sample in string:\n        y = re.escape(sample) + r'\\Z'\n        x = re.search(y, string)\n        if x:\n            return 'string ends with the given substring'\n        else:\n            return 'string doesnt end with the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_a1127270-0766-4032-987a-d25b685a07eb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string contains a substring in the middle using regex.", "code": "import re\ndef check_substring_in_middle(string, sample):\n    if sample in string:\n        y = r'(?<!^)\\b' + re.escape(sample) + r'\\b(?!$)'\n        x = re.search(y, string)\n        if x:\n            return 'string contains the given substring in the middle'\n        else:\n            return 'string doesnt contain the given substring in the middle'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_41fe6d8c-5faa-4530-8049-a9f2fc8c24b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string exactly matches a substring using regex.", "code": "import re\ndef check_substring_with_exact_match(string, sample):\n    if sample in string:\n        y = r'\\A' + re.escape(sample) + r'\\Z'\n        x = re.search(y, string)\n        if x:\n            return 'string exactly matches the given substring'\n        else:\n            return 'string doesnt exactly match the given substring'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_4d70a4dd-4ae3-46ed-832d-2b38732c0096", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with one of multiple substrings using regex.", "code": "import re\ndef check_substring_with_alternation(string, sample):\n    samples = sample.split('|')\n    for s in samples:\n        if s in string:\n            y = r'\\A' + re.escape(s)\n            x = re.search(y, string)\n            if x:\n                return 'string starts with one of the given substrings'\n    return 'string doesnt start with any of the given substrings'", "task_id": "823_07167397-6c85-4269-9bbe-1ae8e0365133", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if the given string starts with a substring that may or may not include an optional character using regex.", "code": "import re\ndef check_substring_with_optional(string, sample):\n    if sample in string:\n        y = r'\\A' + re.escape(sample[:-1]) + r'?' + re.escape(sample[-1])\n        x = re.search(y, string)\n        if x:\n            return 'string starts with the given substring with an optional character'\n        else:\n            return 'string doesnt start with the given substring with an optional character'\n    else:\n        return 'entered string isnt a substring'", "task_id": "823_564ae6e9-f464-4bfa-81d1-0c1dfc8a79a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest of three given numbers.", "code": "def find_largest_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "826_04d8409c-ae94-4b07-93a9-cb8cfadad2ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is even or odd.", "code": "def is_even_or_odd(n: int) -> str:\n    return 'Even' if n % 2 == 0 else 'Odd'", "task_id": "826_84ac8ecb-c895-4f03-aeb2-d9a39710c1b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "826_e665ee38-a782-4405-bf37-9609612cd421", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "826_35df02de-8d5c-4b12-80d1-e3a363f30223", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "826_e7f33558-08ea-43ab-922c-486446d6134a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "826_643397df-b1de-4808-b8e0-dd5ae746b352", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)", "task_id": "826_b082c1ff-9c4c-47a0-93ae-a229af133531", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "826_69ff02f5-0ac2-4f7a-b510-cb6a0147d6fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "826_0066ea63-662f-4446-840b-652664662930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two given numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "826_cfce5d1a-468f-4a57-8078-4749c4f58a22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum a specific row of a list in a given list of lists.", "code": "def sum_row(matrix, R):\n    return sum(matrix[R])", "task_id": "827_f9f3abba-851f-448a-9375-b8282fb2a533", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the main diagonal of a square matrix.", "code": "def sum_diagonal(matrix):\n    return sum(matrix[i][i] for i in range(len(matrix)))", "task_id": "827_66b3aff7-9c02-4dd0-828e-aa4ee1ee86f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the anti-diagonal (from top-right to bottom-left) of a square matrix.", "code": "def sum_anti_diagonal(matrix):\n    n = len(matrix)\n    return sum(matrix[i][n-i-1] for i in range(n))", "task_id": "827_6a31508c-6c6a-4d63-8758-f997a8ea905b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements in even-indexed rows of a given list of lists.", "code": "def sum_even_rows(matrix):\n    return sum(sum(row) for i, row in enumerate(matrix) if i % 2 == 0)", "task_id": "827_05c47a78-5d98-4bd3-a737-b2de7ae659b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements in odd-indexed columns of a given list of lists.", "code": "def sum_odd_columns(matrix):\n    return sum(row[j] for row in matrix for j in range(len(row)) if j % 2 != 0)", "task_id": "827_613a84da-6ff2-42d9-a75f-40dbdb7a9c57", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements on the border of a given list of lists.", "code": "def sum_border(matrix):\n    if not matrix:\n        return 0\n    top = sum(matrix[0])\n    bottom = sum(matrix[-1])\n    middle = sum(row[0] + row[-1] for row in matrix[1:-1])\n    return top + bottom + middle", "task_id": "827_4db463c0-b135-49e5-abf0-6e081a64f168", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements above the main diagonal of a square matrix.", "code": "def sum_above_diagonal(matrix):\n    return sum(matrix[i][j] for i in range(len(matrix)) for j in range(i+1, len(matrix)))", "task_id": "827_44ff9982-24ae-471e-85a5-341c666cf50b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements below the main diagonal of a square matrix.", "code": "def sum_below_diagonal(matrix):\n    return sum(matrix[i][j] for i in range(len(matrix)) for j in range(i))", "task_id": "827_6ad17233-b56f-4ee2-b6fb-2431afc61e32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements in the upper triangle (including the diagonal) of a square matrix.", "code": "def sum_upper_triangle(matrix):\n    return sum(matrix[i][j] for i in range(len(matrix)) for j in range(i, len(matrix)))", "task_id": "827_74a7000e-2f6a-4cef-a36c-f5e2f907c31f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum all elements in the lower triangle (including the diagonal) of a square matrix.", "code": "def sum_lower_triangle(matrix):\n    return sum(matrix[i][j] for i in range(len(matrix)) for j in range(i+1))", "task_id": "827_e163f228-7a6b-4011-a977-8ab50783374b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second smallest number in the given list of integers.", "code": "def second_smallest(numbers):\n    unique_numbers = list(set(numbers))\n    unique_numbers.sort()\n    return unique_numbers[1]", "task_id": "829_ec3bf6c5-245e-49d6-b04e-3d7c1c336a05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second longest string in the given list of strings.", "code": "def second_longest(strings):\n    strings.sort(key=len, reverse=True)\n    return strings[1]", "task_id": "829_d8c9cd4f-7cdc-40c2-8fdc-7c360b1134ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second most frequent character in the given string.", "code": "from collections import Counter\n\ndef second_highest_frequency_char(s):\n    count = Counter(s)\n    most_common = count.most_common()\n    return most_common[1][0]", "task_id": "829_e45476c6-73bb-4642-87b4-a92abf1fab26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the pair with the second highest sum in the given list of integer pairs.", "code": "def second_highest_sum_pair(pairs):\n    pairs.sort(key=lambda x: x[0] + x[1], reverse=True)\n    return pairs[1]", "task_id": "829_c124032a-6b13-49fb-8345-d7895c0fab00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the word with the second most number of vowels in the given list of words.", "code": "def second_most_vowels(words):\n    def count_vowels(word):\n        return sum(1 for char in word if char in 'aeiouAEIOU')\n    words.sort(key=count_vowels, reverse=True)\n    return words[1]", "task_id": "829_48cd8968-f90f-4e55-bcb6-6f510ea7796f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second highest average score from the given list of lists of scores.", "code": "def second_highest_average(scores):\n    averages = [sum(score) / len(score) for score in scores]\n    averages.sort(reverse=True)\n    return averages[1]", "task_id": "829_53f348d9-a7ec-4ed1-b276-3d6d89e0db43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second most common word in the given sentence.", "code": "from collections import Counter\n\ndef second_most_common_word(sentence):\n    words = sentence.split()\n    count = Counter(words)\n    most_common = count.most_common()\n    return most_common[1][0]", "task_id": "829_c95d3fe5-38da-43f4-82b3-5fbbd00572aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second highest digit in the given integer.", "code": "def second_highest_digit(number):\n    digits = list(set(str(number)))\n    digits.sort(reverse=True)\n    return int(digits[1])", "task_id": "829_832b4cd1-5f55-4353-8988-ff971eaf7171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the second most common element in the given list of elements.", "code": "from collections import Counter\n\ndef second_most_common_element(elements):\n    count = Counter(elements)\n    most_common = count.most_common()\n    return most_common[1][0]", "task_id": "829_4b107e9d-1cdc-4c77-9b7f-1f372a08ab1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out the product name with the second highest price in the given list of product dictionaries.", "code": "def second_highest_price(products):\n    products.sort(key=lambda x: x['price'], reverse=True)\n    return products[1]['name']", "task_id": "829_e61f0416-d08a-45ff-b296-d57a88bf7c91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count uppercase letters, lowercase letters, and digits in a given string.", "code": "def count_upper_lower_digits(string):\n  upper = lower = digits = 0\n  for char in string:\n    if char.isupper():\n      upper += 1\n    elif char.islower():\n      lower += 1\n    elif char.isdigit():\n      digits += 1\n  return (upper, lower, digits)", "task_id": "828_14225d16-57ef-4aaa-8542-18ed252a59d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count vowels and consonants in a given string.", "code": "def count_vowels_consonants(string):\n  vowels = consonants = 0\n  for char in string:\n    if char.lower() in 'aeiou':\n      vowels += 1\n    elif char.isalpha():\n      consonants += 1\n  return (vowels, consonants)", "task_id": "828_58d5b0b1-eeb5-4c0b-97c0-a65d0cb32578", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count words and sentences in a given string. Sentences are separated by '.', '!', or '?'.", "code": "def count_words_sentences(string):\n  words = len(string.split())\n  sentences = sum(string.count(sep) for sep in '.!?')\n  return (words, sentences)", "task_id": "828_cb3b70b8-12fb-4451-a01b-9b8ebbf062fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count spaces, tabs, and newlines in a given string.", "code": "def count_spaces_tabs_newlines(string):\n  spaces = tabs = newlines = 0\n  for char in string:\n    if char == ' ':\n      spaces += 1\n    elif char == '\\t':\n      tabs += 1\n    elif char == '\\n':\n      newlines += 1\n  return (spaces, tabs, newlines)", "task_id": "828_f607f390-34c6-497b-aa03-fb85ef470c37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count uppercase letters, lowercase letters, and special characters in a given string.", "code": "def count_upper_lower_special(string):\n  upper = lower = special = 0\n  for char in string:\n    if char.isupper():\n      upper += 1\n    elif char.islower():\n      lower += 1\n    elif not char.isalnum():\n      special += 1\n  return (upper, lower, special)", "task_id": "828_1a46838c-c5bf-411d-b277-41176895ac53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count digits, spaces, and special characters in a given string.", "code": "def count_digits_spaces_special(string):\n  digits = spaces = special = 0\n  for char in string:\n    if char.isdigit():\n      digits += 1\n    elif char == ' ':\n      spaces += 1\n    elif not char.isalnum():\n      special += 1\n  return (digits, spaces, special)", "task_id": "828_da70875e-87d0-41c1-a5d4-9316629a7d0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count words and vowels in a given string.", "code": "def count_words_vowels(string):\n  words = len(string.split())\n  vowels = sum(1 for char in string if char.lower() in 'aeiou')\n  return (words, vowels)", "task_id": "828_fc79de21-2e12-4dd9-ba62-49f26ece440a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count consonants, digits, and special characters in a given string.", "code": "def count_consonants_digits_special(string):\n  consonants = digits = special = 0\n  for char in string:\n    if char.isalpha() and char.lower() not in 'aeiou':\n      consonants += 1\n    elif char.isdigit():\n      digits += 1\n    elif not char.isalnum():\n      special += 1\n  return (consonants, digits, special)", "task_id": "828_ab6f62f0-e833-43ea-acbd-e5a3cc2a2ae5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count uppercase letters, lowercase letters, digits, and special characters in a given string.", "code": "def count_upper_lower_digits_special(string):\n  upper = lower = digits = special = 0\n  for char in string:\n    if char.isupper():\n      upper += 1\n    elif char.islower():\n      lower += 1\n    elif char.isdigit():\n      digits += 1\n    elif not char.isalnum():\n      special += 1\n  return (upper, lower, digits, special)", "task_id": "828_f60d61f7-c18b-4ee0-a186-a23ae8041327", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count vowels, consonants, and digits in a given string.", "code": "def count_vowels_consonants_digits(string):\n  vowels = consonants = digits = 0\n  for char in string:\n    if char.lower() in 'aeiou':\n      vowels += 1\n    elif char.isalpha() and char.lower() not in 'aeiou':\n      consonants += 1\n    elif char.isdigit():\n      digits += 1\n  return (vowels, consonants, digits)", "task_id": "828_0721b3c0-e8f5-4860-b845-d7ec6408a70d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round down a number to specific digits.", "code": "import math\ndef round_down(a, digits):\n    n = 10**-digits\n    return round(math.floor(a / n) * n, digits)", "task_id": "830_fa691897-2531-48ed-a561-d90fac159399", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to the nearest specific digits.", "code": "def round_nearest(a, digits):\n    n = 10**-digits\n    return round(round(a / n) * n, digits)", "task_id": "830_8f474f81-7ada-4136-9cec-80ed7c4805db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to specific digits using half-up rounding.", "code": "def round_half_up(a, digits):\n    n = 10**-digits\n    return round(a + 0.5 * n, digits)", "task_id": "830_6da523db-e6bc-4741-b2a8-a9232d652336", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to specific digits using half-down rounding.", "code": "def round_half_down(a, digits):\n    n = 10**-digits\n    return round(a - 0.5 * n, digits)", "task_id": "830_963f5700-e67b-45e1-815a-1827944cd107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to specific digits using round half to even (bankers' rounding).", "code": "def round_to_even(a, digits):\n    n = 10**-digits\n    return round(a, digits)", "task_id": "830_14618d3b-c17c-4e5c-b2a1-d8b76e9ea2e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to specific digits such that the result is an odd number.", "code": "import math\ndef round_to_odd(a, digits):\n    n = 10**-digits\n    rounded = round(a, digits)\n    if rounded % 2 == 0:\n        return round(rounded + n, digits)\n    return rounded", "task_id": "830_0d1f5072-e559-4b42-ba47-9411aead7e7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round up a number to the nearest multiple of another number.", "code": "import math\ndef round_up_to_multiple(a, multiple):\n    return math.ceil(a / multiple) * multiple", "task_id": "830_5a5438c0-1b13-4e6e-9dce-3d11c68c3f32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round down a number to the nearest multiple of another number.", "code": "import math\ndef round_down_to_multiple(a, multiple):\n    return math.floor(a / multiple) * multiple", "task_id": "830_d55bd4d9-ed85-459f-a049-a5d33972f359", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to the nearest multiple of another number.", "code": "def round_to_nearest_multiple(a, multiple):\n    return round(a / multiple) * multiple", "task_id": "830_873fec43-2ff5-4033-8516-bfdad7ee2821", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to round a number to a specified number of significant figures.", "code": "import math\ndef round_to_significant_figures(a, sig_figs):\n    if a == 0:\n        return 0\n    d = math.ceil(math.log10(abs(a)))\n    factor = 10**(sig_figs - d)\n    return round(a * factor) / factor", "task_id": "830_f8f8195b-78f3-445c-85bf-63db444c422a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where both elements are odd.", "code": "def count_odd_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % 2 != 0 and arr[j] % 2 != 0:\n                cnt += 1\n    return cnt", "task_id": "831_0e775cc8-d856-43e8-a73a-1aba82b808f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where both elements are even.", "code": "def count_even_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % 2 == 0 and arr[j] % 2 == 0:\n                cnt += 1\n    return cnt", "task_id": "831_cd1965fa-3529-42dd-b4ab-360cbedaf719", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array whose sum is equal to a given target.", "code": "def count_sum_pairs(arr: list, target: int) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == target:\n                cnt += 1\n    return cnt", "task_id": "831_30607580-8546-4c9f-b7d1-23845636e4be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array whose difference is equal to a given value.", "code": "def count_diff_pairs(arr: list, diff: int) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if abs(arr[i] - arr[j]) == diff:\n                cnt += 1\n    return cnt", "task_id": "831_28748124-ca88-474d-9c1d-855c8e1e0c20", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where the first element is greater than the second element.", "code": "def count_greater_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                cnt += 1\n    return cnt", "task_id": "831_56789615-18c6-48d0-9a68-7429f542bec9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where the first element is smaller than the second element.", "code": "def count_smaller_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] < arr[j]:\n                cnt += 1\n    return cnt", "task_id": "831_f8b90eb0-604c-4273-aba2-fff17faa2b09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where the first element is divisible by the second element.", "code": "def count_divisible_pairs(arr: list, divisor: int) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % arr[j] == 0:\n                cnt += 1\n    return cnt", "task_id": "831_79cccfbc-8052-4687-947d-9fd591874542", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where one element is the square of the other.", "code": "def count_square_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] == arr[j] ** 2 or arr[j] == arr[i] ** 2:\n                cnt += 1\n    return cnt", "task_id": "831_f75c561c-dff8-41e6-a018-86854d31d638", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where one element is a multiple of the other.", "code": "def count_multiples_pairs(arr: list, factor: int) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] % arr[j] == 0 or arr[j] % arr[i] == 0:\n                cnt += 1\n    return cnt", "task_id": "831_83321258-7c1b-4aa0-9e86-7d393791b00d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count pairs of elements in the given array where both elements are prime numbers.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_prime_pairs(arr: list) -> int:\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if is_prime(arr[i]) and is_prime(arr[j]):\n                cnt += 1\n    return cnt", "task_id": "831_95c7e04c-bf53-4320-a203-6c9cf725332a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the minimum numeric value from a string by using regex.", "code": "import re\ndef extract_min(input):\n\tnumbers = re.findall('\\d+', input)\n\tnumbers = map(int, numbers)\n\treturn min(numbers)", "task_id": "832_3dfa126e-8e8c-4829-b3a0-02b4eefa5a23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numeric values from a string by using regex and return their sum.", "code": "import re\ndef extract_sum(input):\n\tnumbers = re.findall('\\d+', input)\n\tnumbers = map(int, numbers)\n\treturn sum(numbers)", "task_id": "832_dd102253-087c-4361-82e7-fd4e2a5c6690", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numeric values from a string by using regex and return their average.", "code": "import re\ndef extract_avg(input):\n\tnumbers = re.findall('\\d+', input)\n\tnumbers = list(map(int, numbers))\n\treturn sum(numbers) / len(numbers) if numbers else 0", "task_id": "832_d929a3a3-3133-4984-9e29-25a4e780386c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the first numeric value from a string by using regex.", "code": "import re\ndef extract_first(input):\n\tnumbers = re.findall('\\d+', input)\n\treturn int(numbers[0]) if numbers else None", "task_id": "832_88c3b241-4db6-4583-a270-a8556c3d7474", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract the last numeric value from a string by using regex.", "code": "import re\ndef extract_last(input):\n\tnumbers = re.findall('\\d+', input)\n\treturn int(numbers[-1]) if numbers else None", "task_id": "832_221c2517-aec0-443d-b5a8-fd980aca2f4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all even numeric values from a string by using regex.", "code": "import re\ndef extract_even(input):\n\tnumbers = re.findall('\\d+', input)\n\teven_numbers = [int(num) for num in numbers if int(num) % 2 == 0]\n\treturn even_numbers", "task_id": "832_0250ab1c-8375-4bbc-aa66-1f878f65b056", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all odd numeric values from a string by using regex.", "code": "import re\ndef extract_odd(input):\n\tnumbers = re.findall('\\d+', input)\n\todd_numbers = [int(num) for num in numbers if int(num) % 2 != 0]\n\treturn odd_numbers", "task_id": "832_e4d4379f-bb4c-4b45-b6a3-9fa8d2d515d7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all unique numeric values from a string by using regex.", "code": "import re\ndef extract_unique(input):\n\tnumbers = re.findall('\\d+', input)\n\tunique_numbers = list(set(map(int, numbers)))\n\treturn unique_numbers", "task_id": "832_8414658f-efaf-4f57-bb12-940fc7e81c53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numeric values from a string by using regex and return them sorted in ascending order.", "code": "import re\ndef extract_sorted(input):\n\tnumbers = re.findall('\\d+', input)\n\tsorted_numbers = sorted(map(int, numbers))\n\treturn sorted_numbers", "task_id": "832_ecd50d06-51ae-41d0-babf-81124dc0fdd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numeric values from a string by using regex and return them sorted in descending order.", "code": "import re\ndef extract_reverse_sorted(input):\n\tnumbers = re.findall('\\d+', input)\n\treverse_sorted_numbers = sorted(map(int, numbers), reverse=True)\n\treturn reverse_sorted_numbers", "task_id": "832_e3ddada1-c9a3-4b4a-98cd-27e41fd6a104", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get dictionary values as a list.", "code": "def get_values(d: dict) -> list:\n    values = []\n    for value in d.values():\n        values.append(value)\n    return values", "task_id": "833_657322cc-6c98-4cfe-a140-6e0c588b9e67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get dictionary items as a list of tuples.", "code": "def get_items(d: dict) -> list:\n    items = []\n    for item in d.items():\n        items.append(item)\n    return items", "task_id": "833_925b06a6-b2e9-4873-a63b-322347f4dfa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get dictionary keys as a sorted list.", "code": "def get_sorted_keys(d: dict) -> list:\n    keys = list(d.keys())\n    keys.sort()\n    return keys", "task_id": "833_a64b7679-35ca-4484-9521-2dd94208d5d8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get dictionary key-value pairs as a list of strings in the format 'key: value'.", "code": "def get_key_value_pairs(d: dict) -> list:\n    pairs = []\n    for key, value in d.items():\n        pairs.append(f'{key}: {value}')\n    return pairs", "task_id": "833_7b8eacdc-960a-49e3-9ef0-e64bb831619a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all keys that have a specific value in a dictionary.", "code": "def get_keys_of_value(d: dict, value) -> list:\n    keys = []\n    for key, val in d.items():\n        if val == value:\n            keys.append(key)\n    return keys", "task_id": "833_beea6821-6968-4b01-8fab-e45fafd550e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all keys that start with a specific prefix in a dictionary.", "code": "def get_keys_with_prefix(d: dict, prefix: str) -> list:\n    keys = []\n    for key in d.keys():\n        if key.startswith(prefix):\n            keys.append(key)\n    return keys", "task_id": "833_ec726529-8d15-4f43-a484-7e4b3262b229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all values that end with a specific suffix in a dictionary.", "code": "def get_values_with_suffix(d: dict, suffix: str) -> list:\n    values = []\n    for value in d.values():\n        if isinstance(value, str) and value.endswith(suffix):\n            values.append(value)\n    return values", "task_id": "833_37967185-f43f-4f05-b062-d4b39f70642a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all keys that have a specific length in a dictionary.", "code": "def get_keys_with_length(d: dict, length: int) -> list:\n    keys = []\n    for key in d.keys():\n        if len(key) == length:\n            keys.append(key)\n    return keys", "task_id": "833_6350f227-725d-4569-a4ca-f892ac196865", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all values that are greater than a specific threshold in a dictionary.", "code": "def get_values_greater_than(d: dict, threshold: int) -> list:\n    values = []\n    for value in d.values():\n        if isinstance(value, (int, float)) and value > threshold:\n            values.append(value)\n    return values", "task_id": "833_8ee0b3f2-1780-4f93-955c-de9676ceac9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get all keys that are of a specific type in a dictionary.", "code": "def get_keys_of_type(d: dict, type_: type) -> list:\n    keys = []\n    for key in d.keys():\n        if isinstance(key, type_):\n            keys.append(key)\n    return keys", "task_id": "833_4b71ef04-db70-41ad-8c87-125b572ff300", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the midpoint of a line segment.", "code": "def midpoint(x1, y1, x2, y2):\n    return ((x1 + x2) / 2, (y1 + y2) / 2)", "task_id": "835_6e7bcd13-4f58-4dcb-8fd8-969b58c97366", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the distance between two points.", "code": "import math\n\ndef distance(x1, y1, x2, y2):\n    return math.sqrt((x2 - x1)**2 + (y2 - y1)**2)", "task_id": "835_77743954-6bb7-482d-b3a3-26b8fb8c1619", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if three points are collinear.", "code": "def is_collinear(x1, y1, x2, y2, x3, y3):\n    return (y2 - y1) * (x3 - x2) == (y3 - y2) * (x2 - x1)", "task_id": "835_558c3997-d8a4-4219-813b-a3a954c610e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the area of a triangle given its vertices.", "code": "def area_of_triangle(x1, y1, x2, y2, x3, y3):\n    return abs(x1*(y2 - y3) + x2*(y3 - y1) + x3*(y1 - y2)) / 2", "task_id": "835_613d9a89-f9f1-4782-8764-1da291f0d765", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the slope and y-intercept of a line.", "code": "def slope_intercept_form(x1, y1, x2, y2):\n    slope = (y2 - y1) / (x2 - x1)\n    intercept = y1 - slope * x1\n    return (slope, intercept)", "task_id": "835_ae98945f-f17e-469c-8760-fbb861c7c6fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the slope of a line perpendicular to the given line.", "code": "def perpendicular_slope(x1, y1, x2, y2):\n    slope = (y2 - y1) / (x2 - x1)\n    return -1 / slope", "task_id": "835_13bf7541-4388-4112-8511-44b8febe8721", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two lines are parallel given their slopes.", "code": "def is_parallel(slope1, slope2):\n    return slope1 == slope2", "task_id": "835_d66edabf-4562-4535-a54c-29de4230fb6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two lines are perpendicular given their slopes.", "code": "def is_perpendicular(slope1, slope2):\n    return slope1 * slope2 == -1", "task_id": "835_d2bd3482-6220-45aa-be9f-3e13f699f199", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the equation of a line in the form 'y = mx + b'.", "code": "def line_equation(x1, y1, x2, y2):\n    slope = (y2 - y1) / (x2 - x1)\n    intercept = y1 - slope * x1\n    return f'y = {slope}x + {intercept}'", "task_id": "835_dcbaa30a-1ef2-4d52-ab52-490cd5b132ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the equation of a line in point-slope form 'y - y1 = m(x - x1)'.", "code": "def point_slope_form(x1, y1, x2, y2):\n    slope = (y2 - y1) / (x2 - x1)\n    return f'y - {y1} = {slope}(x - {x1})'", "task_id": "835_8d0af6e1-2dd6-498e-a9a1-461ba9533e17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n even natural numbers.", "code": "def sum_of_squares(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)*(2*i)\n    return sum", "task_id": "837_a1627f90-2ab4-4a5c-bdfc-79acfb284e81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += i*i*i\n    return sum", "task_id": "837_6f2d244c-db45-494c-a274-0cdee59c786d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n odd natural numbers.", "code": "def sum_of_odd_squares(n):\n    sum = 0\n    for i in range(n):\n        sum += (2*i+1)*(2*i+1)\n    return sum", "task_id": "837_e0058efc-7774-4b0d-8534-9d17ab5d8b2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n even natural numbers.", "code": "def sum_of_even_cubes(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)*(2*i)*(2*i)\n    return sum", "task_id": "837_4dffa284-5251-4839-9963-c4b7a9fd4b97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n natural numbers.", "code": "def sum_of_natural_numbers(n):\n    return n * (n + 1) // 2", "task_id": "837_3aaea48e-d1be-405a-b4e6-1f4e6da0ce19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n odd natural numbers.", "code": "def sum_of_odd_numbers(n):\n    sum = 0\n    for i in range(n):\n        sum += 2*i + 1\n    return sum", "task_id": "837_477b3114-3ab9-4d39-8280-72baa56017c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n even natural numbers.", "code": "def sum_of_even_numbers(n):\n    sum = 0\n    for i in range(1, n+1):\n        sum += 2*i\n    return sum", "task_id": "837_3277b168-56b0-4f8d-a642-004519a83ec0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n):\n    def factorial(x):\n        if x == 0:\n            return 1\n        result = 1\n        for i in range(1, x+1):\n            result *= i\n        return result\n    sum = 0\n    for i in range(1, n+1):\n        sum += factorial(i)\n    return sum", "task_id": "837_82db2db7-3658-4430-9ae3-9c07ccbf3f09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n):\n    a, b = 0, 1\n    sum = 0\n    for _ in range(n):\n        sum += a\n        a, b = b, a + b\n    return sum", "task_id": "837_e47b2309-31ee-40d8-866f-b01e0eb7805f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n prime numbers.", "code": "def sum_of_prime_numbers(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    sum, count, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            sum += num\n            count += 1\n        num += 1\n    return sum", "task_id": "837_35189f97-1138-4313-97d3-f6d632eb85f8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum product.", "code": "def max_sub_array_product(a, size):\n    max_product = float('-inf')\n    min_product = 1\n    max_length = 0\n    current_product = 1\n    start = 0\n    for i in range(size):\n        current_product *= a[i]\n        if current_product > max_product:\n            max_product = current_product\n            max_length = i - start + 1\n        if current_product == 0:\n            current_product = 1\n            start = i + 1\n    return max_length", "task_id": "836_15030249-3194-4afa-80b5-2d4f007b1a14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with at most k negative numbers.", "code": "def max_sub_array_sum_with_k(a, size, k):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    negative_count = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if a[i] < 0:\n            negative_count += 1\n        while negative_count > k:\n            if a[start] < 0:\n                negative_count -= 1\n            current_sum -= a[start]\n            start += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = i - start + 1\n    return max_length", "task_id": "836_2101cb28-42f2-41a3-b9e9-439a9a517a8b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with no two adjacent elements.", "code": "def max_sub_array_sum_no_adjacent(a, size):\n    incl = 0\n    excl = 0\n    for i in range(size):\n        new_excl = max(incl, excl)\n        incl = excl + a[i]\n        excl = new_excl\n    return max(incl, excl)", "task_id": "836_713b47e5-1ce1-401e-a7c9-2528c98e41e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with elements not exceeding a given limit.", "code": "def max_sub_array_sum_with_limit(a, size, limit):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    for i in range(size):\n        if a[i] > limit:\n            current_sum = 0\n            start = i + 1\n            continue\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = i - start + 1\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n    return max_length", "task_id": "836_cf74fbd4-6df6-4174-b36d-6300b46c87bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with at least a given minimum length.", "code": "def max_sub_array_sum_with_min_length(a, size, min_length):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if i - start + 1 >= min_length:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_length = i - start + 1\n            current_sum -= a[start]\n            start += 1\n    return max_length", "task_id": "836_3a2dc89a-c3ae-413b-9044-03e77ad361e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with an even number of elements.", "code": "def max_sub_array_sum_with_even_count(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if (i - start + 1) % 2 == 0:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_length = i - start + 1\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n    return max_length", "task_id": "836_d371db85-7c72-443d-891f-90932ee3a1ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with an odd number of elements.", "code": "def max_sub_array_sum_with_odd_count(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    for i in range(size):\n        current_sum += a[i]\n        if (i - start + 1) % 2 != 0:\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_length = i - start + 1\n        if current_sum < 0:\n            current_sum = 0\n            start = i + 1\n    return max_length", "task_id": "836_7a4a0ba3-2f06-4674-ae1e-ddecf6770a5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with all distinct elements.", "code": "def max_sub_array_sum_with_distinct_elements(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    seen = {}\n    for i in range(size):\n        if a[i] in seen and seen[a[i]] >= start:\n            start = seen[a[i]] + 1\n            current_sum = sum(a[start:i+1])\n        else:\n            current_sum += a[i]\n        seen[a[i]] = i\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = i - start + 1\n    return max_length", "task_id": "836_7cf604d1-ce41-4235-8dc9-0933934c55aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with no repeating elements.", "code": "def max_sub_array_sum_with_no_repeats(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    seen = {}\n    for i in range(size):\n        if a[i] in seen and seen[a[i]] >= start:\n            start = seen[a[i]] + 1\n            current_sum = sum(a[start:i+1])\n        else:\n            current_sum += a[i]\n        seen[a[i]] = i\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_length = i - start + 1\n    return max_length", "task_id": "836_a118ae47-2d12-42f6-b240-288ec65f3d77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the subarray having the maximum sum with all prime elements.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef max_sub_array_sum_with_prime_elements(a, size):\n    max_sum = float('-inf')\n    current_sum = 0\n    max_length = 0\n    start = 0\n    for i in range(size):\n        if is_prime(a[i]):\n            current_sum += a[i]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                max_length = i - start + 1\n        else:\n            current_sum = 0\n            start = i + 1\n    return max_length", "task_id": "836_ff651fd5-202b-476b-86ec-988b16007b3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples numerically by the second item of each tuple.", "code": "def sort_tuple_by_second_item(tup):\n\ttup.sort(key=lambda x: x[1])\n\treturn tup", "task_id": "839_fe55275b-bdfd-4d1b-aa09-416e0a76b8b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples by the length of each tuple.", "code": "def sort_tuple_by_length(tup):\n\ttup.sort(key=len)\n\treturn tup", "task_id": "839_b0b451f7-3c71-460d-80f5-5b82769fe913", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples by the sum of the elements in each tuple.", "code": "def sort_tuple_by_sum(tup):\n\ttup.sort(key=lambda x: sum(x))\n\treturn tup", "task_id": "839_176d4b6f-d9eb-460e-893c-1289e6d04401", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples by the last item of each tuple.", "code": "def sort_tuple_by_last_item(tup):\n\ttup.sort(key=lambda x: x[-1])\n\treturn tup", "task_id": "839_1d4ba0e6-908c-4748-88bc-09df860b7a8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples in descending order by the first item of each tuple.", "code": "def sort_tuple_by_first_item_desc(tup):\n\ttup.sort(key=lambda x: x[0], reverse=True)\n\treturn tup", "task_id": "839_a2c02f54-d68d-49a0-8173-131cc88e8487", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples in descending order by the second item of each tuple.", "code": "def sort_tuple_by_second_item_desc(tup):\n\ttup.sort(key=lambda x: x[1], reverse=True)\n\treturn tup", "task_id": "839_7558673a-1ae9-4aed-8b18-75435b4ef302", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples in descending order by the length of each tuple.", "code": "def sort_tuple_by_length_desc(tup):\n\ttup.sort(key=len, reverse=True)\n\treturn tup", "task_id": "839_e886104c-a59c-417c-a3fe-22ed423f8e8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples in descending order by the sum of the elements in each tuple.", "code": "def sort_tuple_by_sum_desc(tup):\n\ttup.sort(key=lambda x: sum(x), reverse=True)\n\treturn tup", "task_id": "839_9c996d8b-82cd-4fdd-94e1-f344b3ac8f98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples in descending order by the last item of each tuple.", "code": "def sort_tuple_by_last_item_desc(tup):\n\ttup.sort(key=lambda x: x[-1], reverse=True)\n\treturn tup", "task_id": "839_07b85e25-3458-4b6c-b01e-bf25d5a2e5b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the tuples by the length of the first item of each tuple (assuming the first item is a string).", "code": "def sort_tuple_by_first_item_length(tup):\n\ttup.sort(key=lambda x: len(x[0]))\n\treturn tup", "task_id": "839_ad7e557c-8ec6-451e-9719-741a5533605f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "838_3bbc26dd-4613-4dcb-9a28-2bf6c7041a00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "838_a2ad6940-de06-4c3b-a568-f4fe924bfa67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "838_dff18b2e-70a1-45e1-bbbf-2ed3a387df63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of the first non-repeating character in a given string.", "code": "def first_unique_char(s: str) -> int:\n    from collections import Counter\n    count = Counter(s)\n    for i, char in enumerate(s):\n        if count[char] == 1:\n            return i\n    return -1", "task_id": "838_010abbaf-f4b5-42a2-94df-19f97284aea7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "838_ae103fc4-c420-4af4-8130-c4e8bf0df5b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest common prefix string amongst an array of strings.", "code": "def longest_common_prefix(strs: list[str]) -> str:\n    if not strs:\n        return ''\n    shortest = min(strs, key=len)\n    for i, char in enumerate(shortest):\n        for other in strs:\n            if other[i] != char:\n                return shortest[:i]\n    return shortest", "task_id": "838_7af15cd9-abf4-461e-943f-c096d080e797", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from a sorted list of integers.", "code": "def remove_duplicates(nums: list[int]) -> list[int]:\n    if not nums:\n        return []\n    result = [nums[0]]\n    for num in nums[1:]:\n        if num != result[-1]:\n            result.append(num)\n    return result", "task_id": "838_46852b6d-fd78-42f3-a0e4-9c1211f56fbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find two numbers in a list that add up to a given target.", "code": "def two_sum(nums: list[int], target: int) -> tuple[int, int]:\n    num_dict = {}\n    for i, num in enumerate(nums):\n        complement = target - num\n        if complement in num_dict:\n            return (num_dict[complement], i)\n        num_dict[num] = i\n    return ()", "task_id": "838_65feb570-50dc-4fce-8708-f2d4166a904f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the contiguous subarray with the largest sum.", "code": "def max_subarray(nums: list[int]) -> int:\n    current_sum = max_sum = nums[0]\n    for num in nums[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum", "task_id": "838_a025f84f-a7cf-4a86-8b10-295428af5558", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to merge two sorted arrays into one sorted array.", "code": "def merge_sorted_arrays(arr1: list[int], arr2: list[int]) -> list[int]:\n    result = []\n    i = j = 0\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            result.append(arr1[i])\n            i += 1\n        else:\n            result.append(arr2[j])\n            j += 1\n    result.extend(arr1[i:])\n    result.extend(arr2[j:])\n    return result", "task_id": "838_6ba9abb3-2a3e-47e7-b57d-9efacd8b357b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in diagonal order.", "code": "def generate_matrix_diagonal(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    current = 1\n    for d in range(2 * n - 1):\n        if d < n:\n            row, col = d, 0\n        else:\n            row, col = n - 1, d - n + 1\n        while row >= 0 and col < n:\n            matrix[row][col] = current\n            current += 1\n            row -= 1\n            col += 1\n    return matrix", "task_id": "834_fc135b19-9622-415b-bca6-e6391bb30835", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in anticlockwise spiral order.", "code": "def generate_matrix_anticlockwise(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    current = 1\n    while True:\n        if current > n * n:\n            break\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_st] = current\n            current += 1\n        col_st += 1\n        for c in range(col_st, col_ed + 1):\n            matrix[row_ed][c] = current\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_ed] = current\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_st][c] = current\n            current += 1\n        row_st += 1\n    return matrix", "task_id": "834_8649971e-8837-4c04-98db-3c9e27101df7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in zigzag order.", "code": "def generate_matrix_zigzag(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    current = 1\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(n):\n                matrix[i][j] = current\n                current += 1\n        else:\n            for j in range(n - 1, -1, -1):\n                matrix[i][j] = current\n                current += 1\n    return matrix", "task_id": "834_5d8a97ff-a070-4a9c-a007-af9b7867d509", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in a snake-like pattern.", "code": "def generate_matrix_snake(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    current = 1\n    for i in range(n):\n        if i % 2 == 0:\n            for j in range(n):\n                matrix[j][i] = current\n                current += 1\n        else:\n            for j in range(n - 1, -1, -1):\n                matrix[j][i] = current\n                current += 1\n    return matrix", "task_id": "834_a54f2997-343f-45cb-907d-fbe3b8368392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in spiral order, but place odd numbers first, then even numbers.", "code": "def generate_matrix_spiral_odd_even(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    odd, even = 1, 2\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = odd\n            odd += 2\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = odd\n            odd += 2\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = odd\n            odd += 2\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = odd\n            odd += 2\n        col_st += 1\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            if matrix[row_st][c] == 0:\n                matrix[row_st][c] = even\n                even += 2\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            if matrix[r][col_ed] == 0:\n                matrix[r][col_ed] = even\n                even += 2\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            if matrix[row_ed][c] == 0:\n                matrix[row_ed][c] = even\n                even += 2\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            if matrix[r][col_st] == 0:\n                matrix[r][col_st] = even\n                even += 2\n        col_st += 1\n    return matrix", "task_id": "834_55609caf-11ca-4066-8e8f-cbfc564f90f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in spiral order, but place prime numbers first, then non-prime numbers.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_matrix_prime_nonprime(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    primes, non_primes = [], []\n    for i in range(1, n * n + 1):\n        if is_prime(i):\n            primes.append(i)\n        else:\n            non_primes.append(i)\n    current_prime, current_non_prime = 0, 0\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            if current_prime < len(primes):\n                matrix[row_st][c] = primes[current_prime]\n                current_prime += 1\n            else:\n                matrix[row_st][c] = non_primes[current_non_prime]\n                current_non_prime += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            if current_prime < len(primes):\n                matrix[r][col_ed] = primes[current_prime]\n                current_prime += 1\n            else:\n                matrix[r][col_ed] = non_primes[current_non_prime]\n                current_non_prime += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            if current_prime < len(primes):\n                matrix[row_ed][c] = primes[current_prime]\n                current_prime += 1\n            else:\n                matrix[row_ed][c] = non_primes[current_non_prime]\n                current_non_prime += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            if current_prime < len(primes):\n                matrix[r][col_st] = primes[current_prime]\n                current_prime += 1\n            else:\n                matrix[r][col_st] = non_primes[current_non_prime]\n                current_non_prime += 1\n        col_st += 1\n    return matrix", "task_id": "834_97f7f080-1ed9-4e28-a59e-f6960c0e5a03", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with the first n^2 Fibonacci numbers in spiral order.", "code": "def generate_fibonacci_sequence(length):\n    fib = [0, 1]\n    while len(fib) < length:\n        fib.append(fib[-1] + fib[-2])\n    return fib[:length]\n\ndef generate_matrix_fibonacci(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    fibonacci_numbers = generate_fibonacci_sequence(n * n)\n    current = 0\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = fibonacci_numbers[current]\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = fibonacci_numbers[current]\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = fibonacci_numbers[current]\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = fibonacci_numbers[current]\n            current += 1\n        col_st += 1\n    return matrix", "task_id": "834_83fe2012-616f-4cc4-ac27-9f21f97a9da8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with the first n^2 letters of the alphabet in spiral order.", "code": "def generate_matrix_alphabet(n):\n    if n <= 0:\n        return []\n    matrix = [[\"\"] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    alphabet = [chr(i) for i in range(65, 65 + n * n)]\n    current = 0\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = alphabet[current]\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = alphabet[current]\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = alphabet[current]\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = alphabet[current]\n            current += 1\n        col_st += 1\n    return matrix", "task_id": "834_6786a7df-3b87-4b33-b9c5-6c7f3166dfef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with the first n^2 square numbers in spiral order.", "code": "def generate_matrix_square_numbers(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    row_st, row_ed = 0, n - 1\n    col_st, col_ed = 0, n - 1\n    square_numbers = [i * i for i in range(1, n * n + 1)]\n    current = 0\n    while row_st <= row_ed and col_st <= col_ed:\n        for c in range(col_st, col_ed + 1):\n            matrix[row_st][c] = square_numbers[current]\n            current += 1\n        row_st += 1\n        for r in range(row_st, row_ed + 1):\n            matrix[r][col_ed] = square_numbers[current]\n            current += 1\n        col_ed -= 1\n        for c in range(col_ed, col_st - 1, -1):\n            matrix[row_ed][c] = square_numbers[current]\n            current += 1\n        row_ed -= 1\n        for r in range(row_ed, row_st - 1, -1):\n            matrix[r][col_st] = square_numbers[current]\n            current += 1\n        col_st += 1\n    return matrix", "task_id": "834_09fda88c-3926-4f96-9940-bf0b1d755ec9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in diagonal order, but place odd numbers first, then even numbers.", "code": "def generate_matrix_odd_even_diagonal(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    odd, even = 1, 2\n    for d in range(2 * n - 1):\n        if d < n:\n            row, col = d, 0\n        else:\n            row, col = n - 1, d - n + 1\n        while row >= 0 and col < n:\n            if odd <= n * n:\n                matrix[row][col] = odd\n                odd += 2\n            else:\n                matrix[row][col] = even\n                even += 2\n            row -= 1\n            col += 1\n    return matrix", "task_id": "834_3f604001-2fa9-4170-b00c-f9ecf6704135", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate a square matrix filled with elements from 1 to n^2 in diagonal order, but place prime numbers first, then non-prime numbers.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef generate_matrix_prime_nonprime_diagonal(n):\n    if n <= 0:\n        return []\n    matrix = [[0] * n for _ in range(n)]\n    primes, non_primes = [], []\n    for i in range(1, n * n + 1):\n        if is_prime(i):\n            primes.append(i)\n        else:\n            non_primes.append(i)\n    current_prime, current_non_prime = 0, 0\n    for d in range(2 * n - 1):\n        if d < n:\n            row, col = d, 0\n        else:\n            row, col = n - 1, d - n + 1\n        while row >= 0 and col < n:\n            if current_prime < len(primes):\n                matrix[row][col] = primes[current_prime]\n                current_prime += 1\n            else:\n                matrix[row][col] = non_primes[current_non_prime]\n                current_non_prime += 1\n            row -= 1\n            col += 1\n    return matrix", "task_id": "834_3c6bfa23-ca4b-451e-bef3-f3f6053d2a9a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the roots of a quadratic equation is zero or not.", "code": "def is_sum_of_roots_zero(a, b, c):\n    if b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_71f7370d-439c-4b87-a9dc-a44852ec11dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the roots of a quadratic equation is positive or not.", "code": "def is_product_of_roots_positive(a, b, c):\n    if a * c > 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_bcaa1588-b5b9-4c8a-a391-58fc16ba03e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of a quadratic equation are real or not.", "code": "def are_roots_real(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant >= 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_2129a15a-2cf6-43a5-b6d4-932e53f269de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the roots of a quadratic equation are equal or not.", "code": "def are_roots_equal(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant == 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_5fef54ab-71eb-4b63-a660-8d918d551195", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the discriminant of a quadratic equation is positive or not.", "code": "def is_discriminant_positive(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant > 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_539b9441-fde3-497c-a17c-ebcf33a37946", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the discriminant of a quadratic equation is negative or not.", "code": "def is_discriminant_negative(a, b, c):\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_adec7e49-e76a-4b42-98d2-823c5f41b7ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the coefficient 'a' of a quadratic equation is positive or not.", "code": "def is_coefficient_a_positive(a):\n    if a > 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_2f9bc72c-4816-4b8e-ac55-e3a573975786", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the coefficient 'b' of a quadratic equation is zero or not.", "code": "def is_coefficient_b_zero(b):\n    if b == 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_f69fea6b-b384-45c4-86fe-051f3ee038b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the coefficient 'c' of a quadratic equation is negative or not.", "code": "def is_coefficient_c_negative(c):\n    if c < 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_4806759d-cfb7-4d47-befa-2b73e48acdf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given coefficient 'a' makes the equation a quadratic equation or not.", "code": "def is_quadratic_equation(a):\n    if a != 0:\n        return \"Yes\"\n    else:\n        return \"No\"", "task_id": "840_bdcffa2a-0b3b-45ec-8412-890f83ca65e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in the given array.", "code": "def count_even_numbers(arr: list[int]) -> int:\n    return len([x for x in arr if x % 2 == 0])", "task_id": "841_bbc575d7-23b5-403c-a843-d8a0202885f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of odd numbers in the given array.", "code": "def count_odd_numbers(arr: list[int]) -> int:\n    return len([x for x in arr if x % 2 != 0])", "task_id": "841_2b6056fe-4409-410b-bc94-f34a9a3d9ed9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in the given array.", "code": "def count_positive_numbers(arr: list[int]) -> int:\n    return len([x for x in arr if x > 0])", "task_id": "841_e4f743f0-b1ad-4354-9841-816f11f86bc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of negative numbers in the given array.", "code": "def count_negative_numbers(arr: list[int]) -> int:\n    return len([x for x in arr if x < 0])", "task_id": "841_cc0689e9-9a9a-45b0-9c5f-1096ba147d3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of prime numbers in the given array.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef count_primes(arr: list[int]) -> int:\n    return len([x for x in arr if is_prime(x)])", "task_id": "841_4ca01c00-b7df-4d2a-ac28-da33c871aa51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic strings in the given array.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]\n\ndef count_palindromes(arr: list[str]) -> int:\n    return len([s for s in arr if is_palindrome(s)])", "task_id": "841_f653dfd4-0c4c-4b37-a7da-0cfdc9b61949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in the given string.", "code": "def count_vowels(s: str) -> int:\n    return len([char for char in s if char.lower() in 'aeiou'])", "task_id": "841_8e952c3c-905b-4bc5-ad52-ef51c01ec4f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of consonants in the given string.", "code": "def count_consonants(s: str) -> int:\n    return len([char for char in s if char.lower() in 'bcdfghjklmnpqrstvwxyz'])", "task_id": "841_bdcc378c-001e-49ee-aecb-4e9b4ec9f174", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in the given string.", "code": "def count_uppercase(s: str) -> int:\n    return len([char for char in s if char.isupper()])", "task_id": "841_fc2c2212-b927-4238-abf2-5cacb532fa76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of lowercase letters in the given string.", "code": "def count_lowercase(s: str) -> int:\n    return len([char for char in s if char.islower()])", "task_id": "841_a6484bac-cd26-44be-80f9-53e3e346154a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the unique number in the given array where every other number occurs twice.", "code": "def find_unique(arr):\n    unique = 0\n    for num in arr:\n        unique ^= num\n    return unique", "task_id": "842_d63fcd4e-de41-408d-89dd-fd32a2e3b1e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the missing number in an array of integers from 1 to n.", "code": "def find_missing_number(arr):\n    n = len(arr) + 1\n    total_sum = n * (n + 1) // 2\n    array_sum = sum(arr)\n    return total_sum - array_sum", "task_id": "842_e2712707-6e3d-4b9d-b2ba-6b5b35bf079a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the duplicate number in an array where every number except one appears exactly once.", "code": "def find_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "842_8654f551-e0d2-4b17-b157-84f02927e8e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first non-repeating character in a string.", "code": "def find_first_non_repeating_char(s):\n    char_count = {}\n    for char in s:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return ''", "task_id": "842_716d4feb-9a05-4d2e-a1b1-7fe205f432bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the intersection of two arrays.", "code": "def find_intersection(arr1, arr2):\n    set1 = set(arr1)\n    set2 = set(arr2)\n    return list(set1 & set2)", "task_id": "842_51eca63a-8604-48db-b686-9f48e06a3afd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest substring without repeating characters.", "code": "def find_longest_substring_without_repeating_chars(s):\n    char_index = {}\n    longest = 0\n    start = 0\n    for i, char in enumerate(s):\n        if char in char_index and char_index[char] >= start:\n            start = char_index[char] + 1\n        char_index[char] = i\n        longest = max(longest, i - start + 1)\n    return longest", "task_id": "842_f430d41d-333c-4e92-b8c3-26be91a0d8d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the majority element in an array (an element that appears more than n/2 times).", "code": "def find_majority_element(arr):\n    count = 0\n    candidate = None\n    for num in arr:\n        if count == 0:\n            candidate = num\n        count += (1 if num == candidate else -1)\n    return candidate", "task_id": "842_7d8413a3-1052-41f7-a62d-002b79264f70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th largest element in an array.", "code": "def find_kth_largest(arr, k):\n    arr.sort(reverse=True)\n    return arr[k-1]", "task_id": "842_cabf286d-6ae5-4cbc-bb22-4c65c2d3a671", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all the missing numbers from 1 to n in an array.", "code": "def find_missing_elements(arr, n):\n    full_set = set(range(1, n+1))\n    arr_set = set(arr)\n    return list(full_set - arr_set)", "task_id": "842_07c13df4-069c-4c4a-a2c5-5f1eefca2549", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first repeating element in an array.", "code": "def find_first_repeating_element(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "842_d46aea78-4aea-40c9-9acd-2ababd5191c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest element in an unsorted array using a heap queue algorithm.", "code": "import heapq\n\ndef find_kth_smallest(nums, k):\n    return heapq.nsmallest(k, nums)[-1]", "task_id": "843_9f469ee4-43f6-4cc2-a589-4330c195f3f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge k sorted linked lists and return it as one sorted list using a heap queue algorithm.", "code": "import heapq\n\ndef merge_k_sorted_lists(lists):\n    merged = []\n    for l in lists:\n        merged.extend(l)\n    heapq.heapify(merged)\n    return [heapq.heappop(merged) for _ in range(len(merged))]", "task_id": "843_061fc080-42fb-41e7-ba9b-cb83d571c2df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k largest elements in an unsorted array using a heap queue algorithm.", "code": "import heapq\n\ndef k_largest_elements(nums, k):\n    return heapq.nlargest(k, nums)", "task_id": "843_d78bc002-8433-4666-bde6-a447eb1abfae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the median of a list of numbers using a heap queue algorithm.", "code": "import heapq\n\ndef find_median(nums):\n    nums.sort()\n    n = len(nums)\n    if n % 2 == 1:\n        return float(nums[n // 2])\n    else:\n        return (nums[n // 2 - 1] + nums[n // 2]) / 2", "task_id": "843_70882026-140f-4c51-9913-336ade17b785", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k closest points to the origin (0, 0) in a 2D plane using a heap queue algorithm.", "code": "import heapq\n\ndef k_closest_points(points, k):\n    return heapq.nsmallest(k, points, key=lambda p: p[0]**2 + p[1]**2)", "task_id": "843_fdfc91e7-b249-42f5-ab8a-c5bf3bdcf6af", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k most frequent elements in an array using a heap queue algorithm.", "code": "import heapq\n\ndef top_k_frequent_elements(nums, k):\n    count = collections.Counter(nums)\n    return heapq.nlargest(k, count.keys(), key=count.get)", "task_id": "843_efa4a2a7-0a37-426e-937c-112e6d878ad8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth largest element in an unsorted array using a heap queue algorithm.", "code": "import heapq\n\ndef kth_largest_element(nums, k):\n    return heapq.nlargest(k, nums)[-1]", "task_id": "843_53d6389d-5088-43da-a033-f82333f36446", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge k sorted arrays and return it as one sorted array using a heap queue algorithm.", "code": "import heapq\n\ndef merge_k_sorted_arrays(arrays):\n    merged = []\n    for array in arrays:\n        merged.extend(array)\n    heapq.heapify(merged)\n    return [heapq.heappop(merged) for _ in range(len(merged))]", "task_id": "843_45a98a45-e70e-4726-88de-0671e7354ea3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the kth smallest element in a sorted matrix using a heap queue algorithm.", "code": "import heapq\n\ndef kth_smallest_in_matrix(matrix, k):\n    flat_list = [item for sublist in matrix for item in sublist]\n    return heapq.nsmallest(k, flat_list)[-1]", "task_id": "843_e3475831-0b41-443d-9a92-78f4b1fbb65b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k closest numbers to a given number x in an array using a heap queue algorithm.", "code": "import heapq\n\ndef k_closest_numbers(nums, x, k):\n    return heapq.nsmallest(k, nums, key=lambda num: abs(num - x))", "task_id": "843_e5de3cff-1930-4e02-a8be-59db1323890a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth prime number in the first n prime numbers.", "code": "def find_kth_prime(n, k):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if is_prime(num):\n            primes.append(num)\n        num += 1\n    return primes[k - 1]", "task_id": "844_55c287ab-8a71-4d9a-b71a-5d8fbe8df9b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n Fibonacci numbers.", "code": "def find_kth_fibonacci(n, k):\n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[-1] + fib[-2])\n    return fib[k - 1]", "task_id": "844_b8102bbb-ee07-4a0b-8649-81d3ffb3fad9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n square numbers.", "code": "def find_kth_square(n, k):\n    squares = [i ** 2 for i in range(1, n + 1)]\n    return squares[k - 1]", "task_id": "844_c98e6264-2615-4d06-ad80-c3915c40302d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n cube numbers.", "code": "def find_kth_cube(n, k):\n    cubes = [i ** 3 for i in range(1, n + 1)]\n    return cubes[k - 1]", "task_id": "844_8bd48040-c86a-4bc6-8f1c-a9408c95aa87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n factorial numbers.", "code": "def find_kth_factorial(n, k):\n    factorials = [1]\n    for i in range(1, n):\n        factorials.append(factorials[-1] * i)\n    return factorials[k - 1]", "task_id": "844_f1c5f8f7-0cb3-4016-b4ac-b323ab3bc30e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n triangular numbers.", "code": "def find_kth_triangle_number(n, k):\n    triangulars = [(i * (i + 1)) // 2 for i in range(1, n + 1)]\n    return triangulars[k - 1]", "task_id": "844_5462d8fc-904d-440e-a33f-1e390700bee8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n powers of 2.", "code": "def find_kth_power_of_two(n, k):\n    powers_of_two = [2 ** i for i in range(n)]\n    return powers_of_two[k - 1]", "task_id": "844_28ead2e2-1465-450c-8d42-be7fcc65351a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n powers of 3.", "code": "def find_kth_power_of_three(n, k):\n    powers_of_three = [3 ** i for i in range(n)]\n    return powers_of_three[k - 1]", "task_id": "844_df9e4836-73cf-406a-a369-8fe184d3c83c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n powers of 4.", "code": "def find_kth_power_of_four(n, k):\n    powers_of_four = [4 ** i for i in range(n)]\n    return powers_of_four[k - 1]", "task_id": "844_05693cea-23c3-48a0-b1a3-06c29ed76b42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the kth element in the first n powers of 5.", "code": "def find_kth_power_of_five(n, k):\n    powers_of_five = [5 ** i for i in range(n)]\n    return powers_of_five[k - 1]", "task_id": "844_3a01f8e8-ba19-4e0b-aaca-6309ff2f00be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of the factorial of a given number.", "code": "import math \ndef sum_of_digits(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return sum(int(digit) for digit in str(factorial))", "task_id": "845_e4ba91e0-7f4d-49a5-ad3a-c5136ba41268", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even digits in the factorial of a given number.", "code": "import math \ndef count_even_digits(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return sum(1 for digit in str(factorial) if int(digit) % 2 == 0)", "task_id": "845_132296bc-9489-4854-9095-a9afeb292255", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd digits in the factorial of a given number.", "code": "import math \ndef count_odd_digits(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return sum(1 for digit in str(factorial) if int(digit) % 2 != 0)", "task_id": "845_291951ac-fbce-4aff-aa46-3ff331b18bc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the largest digit in the factorial of a given number.", "code": "import math \ndef largest_digit(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return max(int(digit) for digit in str(factorial))", "task_id": "845_3ccbd558-f6d3-4e56-8b9c-7b73a7952215", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the smallest digit in the factorial of a given number.", "code": "import math \ndef smallest_digit(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return min(int(digit) for digit in str(factorial))", "task_id": "845_a5655f2a-c509-4c3d-a00c-ba6a48ce4c42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a specific digit in the factorial of a given number.", "code": "import math \ndef count_digit_occurrences(n, digit): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    return str(factorial).count(str(digit))", "task_id": "845_c9ad34c2-4a53-4dfe-a56c-2787a6065981", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the digits of the factorial of a given number in reverse order.", "code": "import math \ndef reverse_factorial_digits(n): \n    if n < 0: \n        return '' \n    factorial = math.factorial(n) \n    return str(factorial)[::-1]", "task_id": "845_d0425fee-cd6e-46a3-8f12-229681b06c84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the digits of the factorial of a given number form a palindrome.", "code": "import math \ndef is_factorial_palindrome(n): \n    if n < 0: \n        return False \n    factorial = math.factorial(n) \n    factorial_str = str(factorial) \n    return factorial_str == factorial_str[::-1]", "task_id": "845_d5f2d2c1-34cc-482b-b964-7a7e14ffe2d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of the digits of the factorial of a given number.", "code": "import math \ndef factorial_digit_product(n): \n    if n < 0: \n        return 0 \n    factorial = math.factorial(n) \n    product = 1 \n    for digit in str(factorial): \n        product *= int(digit) \n    return product", "task_id": "845_09fd3234-3683-4efa-a12b-a31add69e0b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average of the digits of the factorial of a given number.", "code": "import math \ndef factorial_digit_average(n): \n    if n < 0: \n        return 0.0 \n    factorial = math.factorial(n) \n    digits = [int(digit) for digit in str(factorial)] \n    return sum(digits) / len(digits)", "task_id": "845_7fc97339-0e60-4e86-9745-a71714ea0b50", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to double each element in a list.", "code": "def double_elements(xs: list[int]) -> list[int]:\n    return [x * 2 for x in xs]", "task_id": "847_b8531c6d-dd49-4e68-9206-ca8dd89c7184", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a list.", "code": "def reverse_list(xs: list[int]) -> list[int]:\n    return xs[::-1]", "task_id": "847_9bdb8b32-b1d0-45dc-a079-2d21b79e6c0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sum all elements in a list.", "code": "def sum_list(xs: list[int]) -> int:\n    return sum(xs)", "task_id": "847_51c96beb-814f-46a7-9bfd-497c89439281", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicates from a list.", "code": "def remove_duplicates(xs: list[int]) -> list[int]:\n    return list(set(xs))", "task_id": "847_e37e3157-c611-48c4-821c-e921a447d775", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "847_8d627a59-6312-4d72-bf85-721946936c01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to square each element in a list.", "code": "def square_elements(xs: list[int]) -> list[int]:\n    return [x ** 2 for x in xs]", "task_id": "847_9f752f86-62cc-4b60-9043-6c09b8a8acf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the length of a list.", "code": "def list_length(xs: list[int]) -> int:\n    return len(xs)", "task_id": "847_6681b867-31b7-48c4-a512-306b7b200ca8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum element in a list.", "code": "def find_max(xs: list[int]) -> int:\n    return max(xs)", "task_id": "847_4d92566b-fb85-4c2a-aab3-6a48c5fedaa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a target element in a list.", "code": "def count_occurrences(xs: list[int], target: int) -> int:\n    return xs.count(target)", "task_id": "847_41cfa00f-99ee-42cc-a967-99f511551eed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to concatenate two lists.", "code": "def concatenate_lists(xs: list[int], ys: list[int]) -> list[int]:\n    return xs + ys", "task_id": "847_2879ef2e-1f1f-43af-9cc7-6a52c2390046", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a parallelogram.", "code": "def area_parallelogram(base, height):\n    return base * height", "task_id": "848_c9884684-99ed-4915-b8a0-e2c79a5e3087", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a triangle.", "code": "def area_triangle(base, height):\n    return 0.5 * base * height", "task_id": "848_84de0225-8c2e-49c1-afc3-a54896add40c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rectangle.", "code": "def area_rectangle(length, width):\n    return length * width", "task_id": "848_98460109-2442-4e5a-a63b-be4127345c00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a circle.", "code": "import math\n\ndef area_circle(radius):\n    return math.pi * radius * radius", "task_id": "848_46fa0f90-2110-4243-9580-a00ad3d624ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a rectangle.", "code": "def perimeter_rectangle(length, width):\n    return 2 * (length + width)", "task_id": "848_56843320-beaa-4340-b552-3d14396d96ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the perimeter of a square.", "code": "def perimeter_square(side):\n    return 4 * side", "task_id": "848_b67bbbea-71f1-47d1-981f-77edefbbdc74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cuboid.", "code": "def volume_cuboid(length, width, height):\n    return length * width * height", "task_id": "848_e5f859b5-13e9-4aef-bfe7-bc5330f6fc87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cube.", "code": "def volume_cube(side):\n    return side ** 3", "task_id": "848_ab0e6eb0-05b8-494a-bf56-3841e598266d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the volume of a cylinder.", "code": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius ** 2 * height", "task_id": "848_646419d6-9c72-4961-996a-0792edbdb2ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the area of a rhombus.", "code": "def area_rhombus(diagonal1, diagonal2):\n    return 0.5 * diagonal1 * diagonal2", "task_id": "848_a6335e18-d4c8-43db-ac9f-0d9002196d29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even divisors of a given number.", "code": "def sum_of_even_divisors(n):\n    return sum(i for i in range(2, n+1, 2) if n % i == 0)", "task_id": "849_b90db662-dd80-4000-a131-68d3ea39014a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd divisors of a given number.", "code": "def sum_of_odd_divisors(n):\n    return sum(i for i in range(1, n+1, 2) if n % i == 0)", "task_id": "849_5223bc24-c1fd-484f-a9f3-74843b7033bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime factors of a given number.", "code": "def sum_of_prime_factors(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return sum(i for i in range(2, n+1) if n % i == 0 and is_prime(i))", "task_id": "849_25fd1b2d-5f85-4b03-bba9-7398368e2e5d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number.", "code": "def sum_of_divisors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0)", "task_id": "849_bd45fbe3-933a-44ab-98fb-a46266965b88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are perfect squares.", "code": "def sum_of_square_divisors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0 and int(i**0.5)**2 == i)", "task_id": "849_f55ff48c-8594-499f-a455-83b6419918b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are perfect cubes.", "code": "def sum_of_cubic_divisors(n):\n    return sum(i for i in range(1, n+1) if n % i == 0 and int(i**(1/3))**3 == i)", "task_id": "849_c00975f0-e0ee-4ed8-a7fd-53c249184f60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all indices of a given number that are prime numbers.", "code": "def sum_of_prime_indices(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x**0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    return sum(i for i in range(2, n+1) if is_prime(i))", "task_id": "849_7e9ee126-c356-48c3-ab24-6ba935b77fa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are Fibonacci numbers.", "code": "def sum_of_fibonacci_divisors(n):\n    def is_fibonacci(x):\n        a, b = 0, 1\n        while b < x:\n            a, b = b, a + b\n        return b == x\n    return sum(i for i in range(1, n+1) if n % i == 0 and is_fibonacci(i))", "task_id": "849_3e983200-7645-4053-a575-4d733057874d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are palindromic numbers.", "code": "def sum_of_palindromic_divisors(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    return sum(i for i in range(1, n+1) if n % i == 0 and is_palindrome(i))", "task_id": "849_54e8e11e-f194-4b57-b22e-7614b7dfc058", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are triangular numbers.", "code": "def sum_of_triangular_divisors(n):\n    def is_triangular(x):\n        return ((8*x + 1)**0.5).is_integer()\n    return sum(i for i in range(1, n+1) if n % i == 0 and is_triangular(i))", "task_id": "849_573e5631-6ef6-41c8-80b3-c8792f2c25fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with positive area is possible with the given side lengths.", "code": "def is_valid_triangle(a: int, b: int, c: int) -> bool:\n    return a + b > c and b + c > a and a + c > b", "task_id": "850_1f056014-4b11-47b0-b23a-6c508f75a902", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is a right triangle.", "code": "def is_right_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 == sides[2]**2", "task_id": "850_871410d4-bccb-4c12-b62f-faf9ee7001cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is an equilateral triangle.", "code": "def is_equilateral_triangle(a: int, b: int, c: int) -> bool:\n    return a == b == c", "task_id": "850_c336d6d0-9502-4c02-9330-ed3e94615837", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is an isosceles triangle.", "code": "def is_isosceles_triangle(a: int, b: int, c: int) -> bool:\n    return a == b or b == c or a == c", "task_id": "850_4aeb0aa8-f65d-4e91-a465-512201a61c37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is a scalene triangle.", "code": "def is_scalene_triangle(a: int, b: int, c: int) -> bool:\n    return a != b and b != c and a != c", "task_id": "850_0261960f-b05e-4716-b3e3-5d05999b97e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is an obtuse triangle.", "code": "def is_obtuse_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 < sides[2]**2", "task_id": "850_24c90840-02fb-4db1-b9e9-fe6cc8b3fae8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the type of triangle (equilateral, isosceles, scalene) with given side lengths.", "code": "def triangle_type(a: int, b: int, c: int) -> str:\n    if a == b == c:\n        return 'equilateral'\n    elif a == b or b == c or a == c:\n        return 'isosceles'\n    else:\n        return 'scalene'", "task_id": "850_00c168b2-9b3e-4c97-be58-8d7fa7216d83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a triangle with given side lengths is an acute triangle.", "code": "def is_acute_triangle(a: int, b: int, c: int) -> bool:\n    sides = sorted([a, b, c])\n    return sides[0]**2 + sides[1]**2 > sides[2]**2", "task_id": "850_df0f2f51-9bd2-459c-9114-33f8806ffaf0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a polygon with given side lengths is valid.", "code": "def is_valid_polygon(sides: list) -> bool:\n    n = len(sides)\n    if n < 3:\n        return False\n    sides.sort()\n    return sum(sides[:-1]) > sides[-1]", "task_id": "850_de433aef-db2a-4463-a5c9-87ec496e57ed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a quadrilateral with given side lengths is valid.", "code": "def is_valid_quadrilateral(a: int, b: int, c: int, d: int) -> bool:\n    sides = [a, b, c, d]\n    sides.sort()\n    return sum(sides[:-1]) > sides[-1]", "task_id": "850_c3db498a-82e5-4f5b-a53c-5dbe494a1b58", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all divisors of a given number.", "code": "def sum_of_squares_of_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(d ** 2 for d in divisors)", "task_id": "851_39c2ab81-6cdf-464a-af6d-1d34f8813131", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all divisors of a given number.", "code": "def product_of_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    product = 1\n    for d in divisors:\n        product *= d\n    return product", "task_id": "851_64f0aca2-2369-4dee-ac45-375352e2de5e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd divisors of a given number.", "code": "def sum_of_odd_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and i % 2 != 0]\n    return sum(divisors)", "task_id": "851_f1989821-2c20-4e3b-b4bc-b0d42c80944b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of even divisors of a given number.", "code": "def count_of_even_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and i % 2 == 0]\n    return len(divisors)", "task_id": "851_bb3c0c2f-c392-4dc8-95ff-b23b3f054e9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime divisors of a given number.", "code": "def is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_prime_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and is_prime(i)]\n    return sum(divisors)", "task_id": "851_c1b55049-b177-42e2-af0c-bea85d91919b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of all divisors of a given number.", "code": "def sum_of_cubed_divisors(n: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0]\n    return sum(d ** 3 for d in divisors)", "task_id": "851_3b381c44-d664-4b3c-9a0d-bc5be8e15f6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that are greater than a given value k.", "code": "def sum_of_divisors_greater_than_k(n: int, k: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and i > k]\n    return sum(divisors)", "task_id": "851_2f580913-51ae-4266-99b8-64f1ea323d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of divisors of a given number that are less than a given value k.", "code": "def count_of_divisors_less_than_k(n: int, k: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and i < k]\n    return len(divisors)", "task_id": "851_c2e76a8f-ef4d-4008-bfe4-cef10a1dcc46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number that lie within a specified range [start, end].", "code": "def sum_of_divisors_in_range(n: int, start: int, end: int) -> int:\n    divisors = [i for i in range(1, n + 1) if n % i == 0 and start <= i <= end]\n    return sum(divisors)", "task_id": "851_4c644e50-0c91-4fc1-aee3-82d4240cf512", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all divisors of a given number excluding the number itself.", "code": "def sum_of_divisors_excluding_self(n: int) -> int:\n    divisors = [i for i in range(1, n) if n % i == 0]\n    return sum(divisors)", "task_id": "851_e803b988-dbbe-4de0-804c-e8f30737088d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given in 24-hour format as strings.", "code": "def find_platform(arr, dep, n):\n    arr = [int(time.replace(':', '')) for time in arr]\n    dep = [int(time.replace(':', '')) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_9176cb5a-10de-49d4-8d07-a4e7ed613c3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given in minutes from midnight.", "code": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_b44a804d-70fc-4942-84a6-1a78788f22c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as tuples of (hour, minute).", "code": "def find_platform(arr, dep, n):\n    arr = [hour * 60 + minute for hour, minute in arr]\n    dep = [hour * 60 + minute for hour, minute in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_ce58b9aa-a989-4527-94cb-fb30f3b41d91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as a list of tuples (hour, minute, am/pm).", "code": "def convert_to_24hr(hour, minute, period):\n    if period == 'PM' and hour != 12:\n        hour += 12\n    if period == 'AM' and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef find_platform(arr, dep, n):\n    arr = [convert_to_24hr(hour, minute, period) for hour, minute, period in arr]\n    dep = [convert_to_24hr(hour, minute, period) for hour, minute, period in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_c64ce008-9c08-433e-917d-87562d2a5149", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as strings in the format 'HH:MM am/pm'.", "code": "def convert_to_24hr(time_str):\n    time, period = time_str.split()\n    hour, minute = map(int, time.split(':'))\n    if period == 'PM' and hour != 12:\n        hour += 12\n    if period == 'AM' and hour == 12:\n        hour = 0\n    return hour * 60 + minute\n\ndef find_platform(arr, dep, n):\n    arr = [convert_to_24hr(time) for time in arr]\n    dep = [convert_to_24hr(time) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_24cc5bd8-6650-4be3-9c5d-a79c988895ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of integers representing minutes from midnight.", "code": "def find_platform(arr, dep, n):\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_0079df16-8d0d-4402-ad7a-072614632f9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of strings in the format 'HHMM'.", "code": "def find_platform(arr, dep, n):\n    arr = [int(time) for time in arr]\n    dep = [int(time) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_42d08c8e-027b-4381-97e6-407b698e8d38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of floats representing hours since midnight.", "code": "def find_platform(arr, dep, n):\n    arr = [int(time * 60) for time in arr]\n    dep = [int(time * 60) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_e4c30d5f-72e3-4036-bcf3-a5cfd565b19f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of integers representing seconds from midnight.", "code": "def find_platform(arr, dep, n):\n    arr = [time // 60 for time in arr]\n    dep = [time // 60 for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_9726ccd5-6f9a-44b3-a1e6-e8444e2bdd7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of strings in the format 'HH:MM:SS'.", "code": "def convert_to_minutes(time_str):\n    hour, minute, second = map(int, time_str.split(':'))\n    return hour * 60 + minute\n\ndef find_platform(arr, dep, n):\n    arr = [convert_to_minutes(time) for time in arr]\n    dep = [convert_to_minutes(time) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_d0248905-6415-49c0-ad3c-173bd76e474c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of platforms required for a railway/bus station, but the arrival and departure times are given as lists of strings in the format 'HHMMSS'.", "code": "def find_platform(arr, dep, n):\n    arr = [int(time[:2]) * 60 + int(time[2:4]) for time in arr]\n    dep = [int(time[:2]) * 60 + int(time[2:4]) for time in dep]\n    arr.sort()\n    dep.sort()\n    plat_needed = 1\n    result = 1\n    i = 1\n    j = 0\n    while (i < n and j < n):\n        if (arr[i] <= dep[j]):\n            plat_needed += 1\n            i += 1\n        elif (arr[i] > dep[j]):\n            plat_needed -= 1\n            j += 1\n        if (plat_needed > result):\n            result = plat_needed\n    return result", "task_id": "846_d764524d-63e9-4733-bca6-b67111e35c09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove even numbers from a list.", "code": "def remove_even_numbers(num_list):\n    return [item for item in num_list if item % 2 != 0]", "task_id": "852_4b88cfa8-1821-48df-aa32-6256a8361dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove odd numbers from a list.", "code": "def remove_odd_numbers(num_list):\n    return [item for item in num_list if item % 2 == 0]", "task_id": "852_39fff525-ab27-41ac-abb9-ccb7e370a8fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove strings that contain vowels from a list.", "code": "def remove_strings_with_vowels(str_list):\n    vowels = set('aeiouAEIOU')\n    return [s for s in str_list if not any(char in vowels for char in s)]", "task_id": "852_6aca8b46-4c6b-454a-b77d-f30dc1d7768b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove strings shorter than a given length from a list.", "code": "def remove_short_strings(str_list, min_length):\n    return [s for s in str_list if len(s) >= min_length]", "task_id": "852_edb77061-75b0-4250-8009-09c1bf55e983", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove numbers larger than a given threshold from a list.", "code": "def remove_large_numbers(num_list, threshold):\n    return [num for num in num_list if num <= threshold]", "task_id": "852_01a05daa-c7aa-43ac-9054-66c744dbe808", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove strings that contain non-alphabetic characters from a list.", "code": "def remove_non_alpha_chars(str_list):\n    return [s for s in str_list if s.isalpha()]", "task_id": "852_17a608e3-b38e-4425-91a2-d6e96a1b2061", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate numbers from a list.", "code": "def remove_duplicates(num_list):\n    return list(dict.fromkeys(num_list))", "task_id": "852_44a6cb5c-3eea-49b6-a6d6-ab8636229d86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove empty strings from a list.", "code": "def remove_empty_strings(str_list):\n    return [s for s in str_list if s]", "task_id": "852_fad52a63-0ff0-4a9f-acf3-d5cf1dd72b02", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove numbers that are divisible by a given number k from a list.", "code": "def remove_numbers_divisible_by_k(num_list, k):\n    return [num for num in num_list if num % k != 0]", "task_id": "852_1fa3cf3c-e998-451f-8f73-68d448bdb3cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove palindromic strings from a list.", "code": "def remove_palindromes(str_list):\n    return [s for s in str_list if s != s[::-1]]", "task_id": "852_2aae9de7-d613-4be7-adf0-a6577160e47b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the list sorted in ascending order.", "code": "def sort_list(nums):\n    return sorted(nums)", "task_id": "854_81d1ddca-3111-419b-89b3-0f435235092e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the maximum element in the list.", "code": "def max_element(nums):\n    return max(nums)", "task_id": "854_ec3a3e87-7f37-45c0-889a-b1fe616350e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the minimum element in the list.", "code": "def min_element(nums):\n    return min(nums)", "task_id": "854_43943ddf-fa8b-47d8-9a7d-8d26882c9c7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the sum of all elements in the list.", "code": "def sum_elements(nums):\n    return sum(nums)", "task_id": "854_46e2b7ea-82c7-4e27-91e4-0b50de8b94d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the average of the elements in the list.", "code": "def average(nums):\n    return sum(nums) / len(nums)", "task_id": "854_19d5e906-4c34-4a9c-9e59-1c89ba2c76f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the list in reverse order.", "code": "def reverse_list(nums):\n    return nums[::-1]", "task_id": "854_6acbaac8-8d88-4e93-aa03-cfe7b18286e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns a list of unique elements.", "code": "def unique_elements(nums):\n    return list(set(nums))", "task_id": "854_9627ec21-77aa-44ed-94de-42d4989f3322", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and a target integer, and returns the number of occurrences of the target integer in the list.", "code": "def count_occurrences(nums, target):\n    return nums.count(target)", "task_id": "854_f2e7c266-8b0e-42db-b70c-bc409abc94f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and a target integer, and returns the index of the first occurrence of the target integer in the list. If the target is not found, return -1.", "code": "def find_index(nums, target):\n    try:\n        return nums.index(target)\n    except ValueError:\n        return -1", "task_id": "854_d719820e-0004-4eb9-be66-57f9b77feb15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that accepts a list of integers and returns the list with all duplicate elements removed, preserving the original order.", "code": "def remove_duplicates(nums):\n    seen = set()\n    result = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result", "task_id": "854_a47a634e-a9dd-48f5-9271-e5ac732afc66", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of even factors of a number.", "code": "import math\ndef sum_of_even_factors(n): \n    res = 0\n    for i in range(2, n + 1, 2): \n        if n % i == 0: \n            res += i\n    return res", "task_id": "853_d7c85780-2c46-4c30-b825-9b3386550fbc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of odd factors of a number.", "code": "import math\ndef product_of_odd_factors(n): \n    res = 1\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(3, int(math.sqrt(n) + 1), 2): \n        while n % i == 0: \n            res *= i\n            n = n // i \n    if n >= 2: \n        res *= n \n    return res", "task_id": "853_13240738-e679-4be1-aeb2-1ec71e69a335", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of prime factors of a number.", "code": "import math\ndef sum_of_prime_factors(n): \n    res = 0\n    while n % 2 == 0: \n        res += 2\n        n = n // 2 \n    for i in range(3, int(math.sqrt(n) + 1), 2): \n        while n % i == 0: \n            res += i\n            n = n // i \n    if n > 2: \n        res += n \n    return res", "task_id": "853_96bacd2b-7f63-4324-8a68-150dcafbb57a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of odd factors of a number.", "code": "import math\ndef count_of_odd_factors(n): \n    count = 0\n    while n % 2 == 0: \n        n = n // 2 \n    for i in range(1, n + 1, 2): \n        if n % i == 0: \n            count += 1\n    return count", "task_id": "853_2b610931-a8e2-46c1-810c-b49fc5829f15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all factors of a number.", "code": "import math\ndef sum_of_factors(n): \n    res = 0\n    for i in range(1, n + 1): \n        if n % i == 0: \n            res += i\n    return res", "task_id": "853_b2e06d07-d6a4-4f49-8c87-a910f098235b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all factors of a number.", "code": "import math\ndef product_of_factors(n): \n    res = 1\n    for i in range(1, n + 1): \n        if n % i == 0: \n            res *= i\n    return res", "task_id": "853_4aca0fd7-e138-4833-b60f-4635cc8d9681", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd digits of a number.", "code": "def sum_of_odd_digits(n): \n    res = 0\n    while n > 0: \n        digit = n % 10\n        if digit % 2 != 0: \n            res += digit\n        n = n // 10\n    return res", "task_id": "853_1752f7e2-f20b-4338-9e64-85337cbd670c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all even digits of a number.", "code": "def sum_of_even_digits(n): \n    res = 0\n    while n > 0: \n        digit = n % 10\n        if digit % 2 == 0: \n            res += digit\n        n = n // 10\n    return res", "task_id": "853_8f004b75-2a5d-4d40-bf07-4a93ea37c985", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all prime factors of a number.", "code": "import math\ndef product_of_prime_factors(n): \n    res = 1\n    while n % 2 == 0: \n        res *= 2\n        n = n // 2 \n    for i in range(3, int(math.sqrt(n) + 1), 2): \n        while n % i == 0: \n            res *= i\n            n = n // i \n    if n > 2: \n        res *= n \n    return res", "task_id": "853_bac5c8bf-afd2-4e47-80cc-f52f433596c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of prime factors of a number.", "code": "import math\ndef count_of_prime_factors(n): \n    count = 0\n    while n % 2 == 0: \n        count += 1\n        n = n // 2 \n    for i in range(3, int(math.sqrt(n) + 1), 2): \n        while n % i == 0: \n            count += 1\n            n = n // i \n    if n > 2: \n        count += 1 \n    return count", "task_id": "853_cb99d408-f85c-4ca6-a564-1bf64f532c61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check for odd parity of a given number.", "code": "def is_odd_parity(x): \n    parity = 0\n    while (x != 0): \n        x = x & (x - 1) \n        parity += 1\n    return parity % 2 != 0", "task_id": "855_35048eef-94fa-4aa1-9c26-5d45b4fd3808", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits (1s) in the binary representation of a given number.", "code": "def count_set_bits(x): \n    count = 0\n    while (x != 0): \n        x = x & (x - 1) \n        count += 1\n    return count", "task_id": "855_8587503b-025a-43b1-bced-770fd00b66df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a power of two.", "code": "def is_power_of_two(x): \n    return x > 0 and (x & (x - 1)) == 0", "task_id": "855_c7f8da98-20f0-4728-a45c-f5fb5e0268cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the k-th bit of a given number.", "code": "def toggle_kth_bit(x, k): \n    return x ^ (1 << (k - 1))", "task_id": "855_bb23e40c-24d7-430e-b381-43374884c209", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to isolate the rightmost set bit of a given number.", "code": "def isolate_rightmost_set_bit(x): \n    return x & -x", "task_id": "855_f8ed298a-62f6-4206-b147-09fc5cc7e5c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the rightmost set bit of a given number.", "code": "def clear_rightmost_set_bit(x): \n    return x & (x - 1)", "task_id": "855_f55d7bfa-7a63-49a0-9a20-576ec3d984ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to isolate the rightmost unset bit of a given number.", "code": "def isolate_rightmost_unset_bit(x): \n    return ~x & (x + 1)", "task_id": "855_fa7f1b67-1dd9-4e92-9e86-8ddc52fd3ffa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all bits from the most significant bit to the k-th bit of a given number.", "code": "def clear_bits_msb_to_k(x, k): \n    return x & ((1 << k) - 1)", "task_id": "855_61ee678b-f2b3-4076-90d2-cf19ba87ba9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear all bits from the least significant bit to the k-th bit of a given number.", "code": "def clear_bits_lsb_to_k(x, k): \n    return x & ~((1 << (k + 1)) - 1)", "task_id": "855_df741abf-c583-4e21-ba9c-e697c4daf1bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap adjacent bits of a given number.", "code": "def swap_adjacent_bits(x): \n    return ((x & 0xAAAAAAAA) >> 1) | ((x & 0x55555555) << 1)", "task_id": "855_d46783d7-2166-4f0f-a587-3f9aac555a68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each string in a list using the map function.", "code": "def reverse_strings(strings):\n    return list(map(lambda s: s[::-1], strings))", "task_id": "857_c9d78b54-fa39-406f-9a28-d62e1c00503a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of each string in a list using the map function.", "code": "def length_of_strings(strings):\n    return list(map(len, strings))", "task_id": "857_f1ce96fe-25ee-4466-99e9-c74d67c67f40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert each string in a list to uppercase using the map function.", "code": "def uppercase_strings(strings):\n    return list(map(str.upper, strings))", "task_id": "857_35f855f6-ae51-4d3c-a2fe-63cf0cb18276", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert each string in a list to lowercase using the map function.", "code": "def lowercase_strings(strings):\n    return list(map(str.lower, strings))", "task_id": "857_77da56de-c8ed-4e87-bc31-20e5804645d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to strip leading and trailing whitespace from each string in a list using the map function.", "code": "def strip_strings(strings):\n    return list(map(str.strip, strings))", "task_id": "857_f6e2bfe4-ebd0-47a6-b6e7-90a661665e72", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize each string in a list using the map function.", "code": "def capitalize_strings(strings):\n    return list(map(str.capitalize, strings))", "task_id": "857_673ce718-469c-4dd2-96ad-41ee4c6d6c38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each string in a list n times using the map function.", "code": "def repeat_strings(strings, n):\n    return list(map(lambda s: s * n, strings))", "task_id": "857_942207e4-41f3-4068-844a-09113cd81483", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all vowels in each string in a list with a given character using the map function.", "code": "def replace_vowels(strings, char):\n    vowels = 'aeiouAEIOU'\n    return list(map(lambda s: ''.join([char if c in vowels else c for c in s]), strings))", "task_id": "857_d5bb1fa9-fcfb-4ec9-a84e-38e32ccb9aee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each number in a list using the map function.", "code": "def double_numbers(numbers):\n    return list(map(lambda x: x * 2, numbers))", "task_id": "857_b36be28f-f8dc-42ba-801e-7baaa5a0dd46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to square each number in a list using the map function.", "code": "def square_numbers(numbers):\n    return list(map(lambda x: x ** 2, numbers))", "task_id": "857_f488c677-1e20-44a2-a3a7-ef4af78d19b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "859_2cb49f3c-ce3d-4426-a0c1-f779ef905073", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "859_4cd8889a-c640-4b5a-a870-b0250bf691c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "859_bb904d77-fbf8-437c-9415-0c000ba22b61", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "859_1f8e4eff-7b74-4490-9d74-e9c8cf829846", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "859_fbca8075-15a0-4d9b-ba2f-c5837fe62e8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of unique elements from a given list.", "code": "def unique_elements(lst: list) -> list:\n    return list(set(lst))", "task_id": "859_be209138-182d-45f2-9c89-642d45ab4ecb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of common elements between two given lists.", "code": "def common_elements(lst1: list, lst2: list) -> list:\n    return list(set(lst1) & set(lst2))", "task_id": "859_97cf0659-c415-40a3-b99f-7945b013c200", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two given strings are anagrams.", "code": "def anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "859_50220eb9-55df-4fb5-af47-58354cab6f64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into a single sorted list.", "code": "def merge_sorted_lists(lst1: list, lst2: list) -> list:\n    return sorted(lst1 + lst2)", "task_id": "859_6bb42d59-0f8d-4744-a956-0bee127c926d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(nested_list: list) -> list:\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "task_id": "859_a4c55423-47bf-4657-ad83-93547eea2c8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of strings in a given list and return the count squared.", "code": "def count_strings(input_list):\n    return sum(isinstance(i, str) for i in input_list) ** 2", "task_id": "858_c397499e-c1d1-4d85-b9f8-1f0b76b62698", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in a given list and return the count squared.", "code": "def count_even_numbers(input_list):\n    return sum(1 for i in input_list if isinstance(i, int) and i % 2 == 0) ** 2", "task_id": "858_db342fa7-a26a-493e-9081-564b6f3a256b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in a given list and return the count squared.", "code": "def count_positive_numbers(input_list):\n    return sum(1 for i in input_list if isinstance(i, (int, float)) and i > 0) ** 2", "task_id": "858_30ef54ce-b58e-46eb-b958-c8b3b35d649d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string and return the count squared.", "code": "def count_vowels(input_string):\n    return sum(1 for char in input_string if char.lower() in 'aeiou') ** 2", "task_id": "858_81f3bbfc-0cd8-4617-88ac-7b1f31fac46b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of lists in a given list of lists that have a specific length and return the count squared.", "code": "def count_lists_with_length(input_list, length):\n    return sum(1 for lst in input_list if isinstance(lst, list) and len(lst) == length) ** 2", "task_id": "858_b238a2a0-212d-49db-8d16-7f0c5a3efdd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique elements in a given list and return the count squared.", "code": "def count_unique_elements(input_list):\n    return len(set(input_list)) ** 2", "task_id": "858_df789389-f57d-41f5-81d1-1fc86bbf0534", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of uppercase letters in a given string and return the count squared.", "code": "def count_uppercase_letters(input_string):\n    return sum(1 for char in input_string if char.isupper()) ** 2", "task_id": "858_bd267da7-e0ee-4215-b73b-2144d66aa2b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string and return the count squared.", "code": "def count_words(input_string):\n    return len(input_string.split()) ** 2", "task_id": "858_702daaaa-4f49-43cb-9f93-0a5e83f8cbcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of elements in a given list that are greater than a specified threshold and return the count squared.", "code": "def count_elements_greater_than(input_list, threshold):\n    return sum(1 for i in input_list if isinstance(i, (int, float)) and i > threshold) ** 2", "task_id": "858_18c63871-46d0-473e-b144-fe83b17bc579", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of palindromic strings in a given list and return the count squared.", "code": "def count_palindromes(input_list):\n    return sum(1 for s in input_list if isinstance(s, str) and s == s[::-1]) ** 2", "task_id": "858_1175ac10-8c2d-40bd-b4fc-300e2cc59b22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromes in a given list of strings using a lambda function.", "code": "def find_palindromes(words):\n  return list(filter(lambda x: x == x[::-1], words))", "task_id": "861_5bc9370a-5a1d-4733-a42c-8023bc35cbd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all odd numbers from a given list of integers using a lambda function.", "code": "def filter_odd_numbers(numbers):\n  return list(filter(lambda x: x % 2 != 0, numbers))", "task_id": "861_cf3a0679-f4e4-4087-a78f-63aeffdd5708", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all strings longer than a given length from a list of strings using a lambda function.", "code": "def filter_long_strings(strings, length):\n  return list(filter(lambda x: len(x) > length, strings))", "task_id": "861_49747eca-35ab-4b99-acbb-249773a41a7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all positive numbers from a given list of integers using a lambda function.", "code": "def filter_positive_numbers(numbers):\n  return list(filter(lambda x: x > 0, numbers))", "task_id": "861_d48af120-1c5a-46ba-abfa-d77371180fd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all numbers divisible by a given divisor from a list of integers using a lambda function.", "code": "def filter_divisible_by(numbers, divisor):\n  return list(filter(lambda x: x % divisor == 0, numbers))", "task_id": "861_911dcbd0-1c57-4fab-bfab-134c4fd96344", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all words starting with a vowel from a given list of strings using a lambda function.", "code": "def filter_vowel_starting_words(words):\n  return list(filter(lambda x: x[0].lower() in 'aeiou', words))", "task_id": "861_cbc003ff-7a9f-426c-9bb5-54b33b2300f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all strings that are in uppercase from a given list of strings using a lambda function.", "code": "def filter_uppercase_strings(strings):\n  return list(filter(lambda x: x.isupper(), strings))", "task_id": "861_9b298856-0c42-455b-b1f3-fa275c61ed7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all strings with an even length from a given list of strings using a lambda function.", "code": "def filter_even_length_strings(strings):\n  return list(filter(lambda x: len(x) % 2 == 0, strings))", "task_id": "861_f902c563-d710-4adf-8688-f78238fd5d54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all non-alphanumeric strings from a given list of strings using a lambda function.", "code": "def filter_non_alphanumeric_strings(strings):\n  return list(filter(lambda x: not x.isalnum(), strings))", "task_id": "861_7f3783e8-965d-42b3-a450-ce44a5699bb6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out all non-empty strings from a given list of strings using a lambda function.", "code": "def filter_non_empty_strings(strings):\n  return list(filter(lambda x: x != '', strings))", "task_id": "861_3e6c764e-0c87-48e1-aa9a-60925d004507", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with an uppercase letter using regex.", "code": "import re\nregex = '^[A-Z]'\ndef check_uppercase(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_35ea3780-4e0b-4c7e-be4b-c58d8f3b8dab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string contains at least one digit using regex.", "code": "import re\nregex = '\\d'\ndef check_digit(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_8e2dba10-276d-4689-953c-3b2cb2a65338", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string ends with a special character using regex.", "code": "import re\nregex = '[^a-zA-Z0-9]$'\ndef check_special_char(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_b5709052-f61a-49ad-9502-7a6396a8263c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string contains any whitespace characters using regex.", "code": "import re\nregex = '\\s'\ndef check_whitespace(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_02e4379f-a7ee-4a9c-ac78-5a4fe8956a54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string contains a word boundary using regex.", "code": "import re\nregex = '\\b'\ndef check_word_boundary(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_b8fba9d8-f71b-4383-8955-bc491a98b45d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string starts with a vowel using regex.", "code": "import re\nregex = '^[aeiouAEIOU]'\ndef check_vowel(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_37e74dea-194c-4c75-980c-bc57a5b1764a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string ends with a consonant using regex.", "code": "import re\nregex = '[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]$'\ndef check_consonant(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_0a569b4f-210b-4337-82da-7f0133f891e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string contains any repeated characters using regex.", "code": "import re\nregex = '(.)\\1'\ndef check_repeated_char(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_488630eb-2526-4a18-80af-f42b5c629a9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a valid hexadecimal number using regex.", "code": "import re\nregex = '^[0-9a-fA-F]+$'\ndef check_hexadecimal(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_220b1133-cbd9-4c49-b04c-17a3197ce042", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether the given string is a valid email address using regex.", "code": "import re\nregex = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\ndef check_email(string):\n\tif(re.search(regex, string)):\n\t\treturn ('Accept')\n\telse:\n\t\treturn ('Discard')", "task_id": "860_fadddf05-9c6e-4b4e-8799-2d4b0b345399", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array of 0s, 1s, and 2s.", "code": "def find_min_swaps(arr, n):\n    noOfZeroes = [0] * n\n    noOfTwos = [0] * n\n    count = 0\n    noOfZeroes[n - 1] = 1 if arr[n - 1] == 0 else 0\n    noOfTwos[n - 1] = 1 if arr[n - 1] == 2 else 0\n    for i in range(n-2, -1, -1):\n        noOfZeroes[i] = noOfZeroes[i + 1]\n        noOfTwos[i] = noOfTwos[i + 1]\n        if arr[i] == 0:\n            noOfZeroes[i] += 1\n        elif arr[i] == 2:\n            noOfTwos[i] += 1\n    for i in range(n):\n        if arr[i] == 1:\n            count += noOfZeroes[i]\n        elif arr[i] == 2:\n            count += noOfZeroes[i] + noOfTwos[i]\n    return count", "task_id": "856_2f5df805-e0c1-4105-9839-98d5c6f07908", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to make a string palindrome.", "code": "def find_min_swaps_to_palindrome(s):\n    def is_palindrome(s):\n        return s == s[::-1]\n    if is_palindrome(s):\n        return 0\n    n = len(s)\n    s = list(s)\n    count = 0\n    for i in range(n//2):\n        left = i\n        right = n - left - 1\n        while left < right:\n            if s[left] == s[right]:\n                break\n            right -= 1\n        if left == right:\n            s[left], s[left + 1] = s[left + 1], s[left]\n            count += 1\n            continue\n        for j in range(right, n - left - 1):\n            s[j], s[j + 1] = s[j + 1], s[j]\n            count += 1\n    return count", "task_id": "856_35e82a50-8ed0-450d-8776-7bc5a69ebd96", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array of integers.", "code": "def find_min_swaps_to_sort(arr):\n    n = len(arr)\n    arrpos = [*enumerate(arr)]\n    arrpos.sort(key=lambda it: it[1])\n    vis = {k: False for k in range(n)}\n    ans = 0\n    for i in range(n):\n        if vis[i] or arrpos[i][0] == i:\n            continue\n        cycle_size = 0\n        j = i\n        while not vis[j]:\n            vis[j] = True\n            j = arrpos[j][0]\n            cycle_size += 1\n        if cycle_size > 0:\n            ans += (cycle_size - 1)\n    return ans", "task_id": "856_848d131a-ed99-48e7-bbc3-aa29f0327737", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to group all 1s together in a binary array.", "code": "def find_min_swaps_to_group_ones(arr):\n    ones = arr.count(1)\n    max_ones = 0\n    current_ones = 0\n    for i in range(ones):\n        if arr[i] == 1:\n            current_ones += 1\n    max_ones = current_ones\n    for i in range(ones, len(arr)):\n        if arr[i] == 1:\n            current_ones += 1\n        if arr[i - ones] == 1:\n            current_ones -= 1\n        max_ones = max(max_ones, current_ones)\n    return ones - max_ones", "task_id": "856_1f417275-2ed6-42af-aed3-bf16660c1656", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array such that all odd numbers come before all even numbers.", "code": "def find_min_swaps_to_sort_odd_even(arr):\n    n = len(arr)\n    odd_count = sum(1 for x in arr if x % 2 != 0)\n    even_count = n - odd_count\n    swaps = 0\n    for i in range(odd_count):\n        if arr[i] % 2 == 0:\n            for j in range(odd_count, n):\n                if arr[j] % 2 != 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_20d6f3ef-5b2c-46f1-a5d7-2e1557219e3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array such that the first half is in ascending order and the second half is in descending order.", "code": "def find_min_swaps_to_sort_ascending_descending(arr):\n    n = len(arr)\n    mid = n // 2\n    first_half = sorted(arr[:mid])\n    second_half = sorted(arr[mid:], reverse=True)\n    sorted_arr = first_half + second_half\n    swaps = 0\n    for i in range(n):\n        if arr[i] != sorted_arr[i]:\n            for j in range(i + 1, n):\n                if arr[j] == sorted_arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_f08304c8-0315-4808-97ce-cdb59bc4e45c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array such that elements alternate between even and odd numbers.", "code": "def find_min_swaps_to_sort_alternating(arr):\n    n = len(arr)\n    even = [x for x in arr if x % 2 == 0]\n    odd = [x for x in arr if x % 2 != 0]\n    if abs(len(even) - len(odd)) > 1:\n        return -1\n    swaps = 0\n    if len(even) > len(odd):\n        arr[::2], arr[1::2] = even, odd\n    else:\n        arr[::2], arr[1::2] = odd, even\n    for i in range(n):\n        if arr[i] != (even if i % 2 == 0 else odd)[i // 2]:\n            for j in range(i + 1, n):\n                if arr[j] == (even if i % 2 == 0 else odd)[i // 2]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_5d7b499f-9842-4d78-badd-2cf845d32463", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array by the frequency of elements (most frequent first).", "code": "from collections import Counter\n\ndef find_min_swaps_to_sort_by_frequency(arr):\n    freq = Counter(arr)\n    sorted_arr = sorted(arr, key=lambda x: (-freq[x], x))\n    swaps = 0\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            for j in range(i + 1, len(arr)):\n                if arr[j] == sorted_arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_2ce50be7-9399-4f9f-a1e6-63d38b45c3b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array by the absolute value of elements.", "code": "def find_min_swaps_to_sort_by_absolute_value(arr):\n    sorted_arr = sorted(arr, key=abs)\n    swaps = 0\n    for i in range(len(arr)):\n        if arr[i] != sorted_arr[i]:\n            for j in range(i + 1, len(arr)):\n                if arr[j] == sorted_arr[i]:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_ca53309b-f2ec-4a67-8f05-c3d3bd21c250", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find minimum adjacent swaps required to sort an array such that all even numbers come before all odd numbers.", "code": "def find_min_swaps_to_sort_by_parity(arr):\n    n = len(arr)\n    even_count = sum(1 for x in arr if x % 2 == 0)\n    swaps = 0\n    for i in range(even_count):\n        if arr[i] % 2 != 0:\n            for j in range(even_count, n):\n                if arr[j] % 2 == 0:\n                    arr[i], arr[j] = arr[j], arr[i]\n                    swaps += 1\n                    break\n    return swaps", "task_id": "856_715b3a32-8163-450f-938d-97aa7bf6dacd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the occurrences of n least common words in a given text.", "code": "from collections import Counter\nimport re\ndef n_least_common_words(text, n):\n  words = re.findall('\\w+', text)\n  word_counts = Counter(words)\n  least_common_words = word_counts.most_common()[:-n-1:-1]\n  return list(least_common_words)", "task_id": "862_b3c0d6f8-4d8b-4573-b26f-77c69aac9d7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n longest words in a given text.", "code": "import re\ndef n_longest_words(text, n):\n  words = re.findall('\\w+', text)\n  longest_words = sorted(words, key=len, reverse=True)[:n]\n  return longest_words", "task_id": "862_029f9a93-2604-4fae-8fd5-a91a08c9cc8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n shortest words in a given text.", "code": "import re\ndef n_shortest_words(text, n):\n  words = re.findall('\\w+', text)\n  shortest_words = sorted(words, key=len)[:n]\n  return shortest_words", "task_id": "862_a57c980d-3f85-4664-82cb-73cd90dbde7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n unique words in a given text.", "code": "import re\ndef n_unique_words(text, n):\n  words = re.findall('\\w+', text)\n  seen = set()\n  unique_words = []\n  for word in words:\n    if word not in seen:\n      seen.add(word)\n      unique_words.append(word)\n    if len(unique_words) == n:\n      break\n  return unique_words", "task_id": "862_41e1fa47-361e-42d0-b802-4cc5cc834460", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words starting with a given letter in a given text.", "code": "import re\ndef n_words_starting_with(text, n, letter):\n  words = re.findall('\\w+', text)\n  starting_with_letter = [word for word in words if word.startswith(letter)][:n]\n  return starting_with_letter", "task_id": "862_da33ee20-ffd8-4f40-8fe2-8fc625f336ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words ending with a given letter in a given text.", "code": "import re\ndef n_words_ending_with(text, n, letter):\n  words = re.findall('\\w+', text)\n  ending_with_letter = [word for word in words if word.endswith(letter)][:n]\n  return ending_with_letter", "task_id": "862_5a9adb8d-1164-4f2e-8a24-4c2139996977", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words containing a given substring in a given text.", "code": "import re\ndef n_words_containing(text, n, substring):\n  words = re.findall('\\w+', text)\n  containing_substring = [word for word in words if substring in word][:n]\n  return containing_substring", "task_id": "862_871ad3ee-1954-44f6-828c-600dbebe8f76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words of a given length in a given text.", "code": "import re\ndef n_words_with_length(text, n, length):\n  words = re.findall('\\w+', text)\n  words_with_length = [word for word in words if len(word) == length][:n]\n  return words_with_length", "task_id": "862_4a736ded-81d1-4ba7-93df-9fc1de536dbd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words containing at least one vowel in a given text.", "code": "import re\ndef n_words_with_vowels(text, n):\n  words = re.findall('\\w+', text)\n  words_with_vowels = [word for word in words if any(vowel in word for vowel in 'aeiouAEIOU')][:n]\n  return words_with_vowels", "task_id": "862_17a276d7-ae07-471f-8461-94979a9f1e84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first n words containing no vowels in a given text.", "code": "import re\ndef n_words_without_vowels(text, n):\n  words = re.findall('\\w+', text)\n  words_without_vowels = [word for word in words if all(vowel not in word for vowel in 'aeiouAEIOU')][:n]\n  return words_without_vowels", "task_id": "862_e22e32bf-e7c9-42eb-9490-dd7ef856a2c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to repeat each element in the list n times and return the new list.", "code": "def repeat_elements(nums, n):\n    return [x for x in nums for _ in range(n)]", "task_id": "865_71092e53-44f0-4c0b-9750-ed355291da8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply each element in the list by a given factor and return the new list.", "code": "def multiply_elements(nums, factor):\n    return [x * factor for x in nums]", "task_id": "865_fe921a9d-36b3-4c7a-b91b-80a732b0c0a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a new list with the square of each element in the input list.", "code": "def square_elements(nums):\n    return [x ** 2 for x in nums]", "task_id": "865_85125d48-ce3d-4dc3-963b-95b638d87b94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to increment each element in the list by a given value and return the new list.", "code": "def increment_elements(nums, increment):\n    return [x + increment for x in nums]", "task_id": "865_c44186c9-25f6-4490-88ea-dde33238c234", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out the even numbers from the list and return the new list.", "code": "def filter_even(nums):\n    return [x for x in nums if x % 2 == 0]", "task_id": "865_f4c3bbaa-44a8-42a4-a903-e50a72ca4c59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out the odd numbers from the list and return the new list.", "code": "def filter_odd(nums):\n    return [x for x in nums if x % 2 != 0]", "task_id": "865_24b346c9-75ca-410a-b1f7-81c0296d9ff3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each element in the list and return the new list.", "code": "def double_elements(nums):\n    return [x * 2 for x in nums]", "task_id": "865_2c63b83d-11e6-4fae-9f3e-62ca20fa1210", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each element in the list and return the new list.", "code": "def reverse_elements(nums):\n    return [str(x)[::-1] for x in nums]", "task_id": "865_ad6e866c-8386-4652-be36-c3c0103a1139", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the sum of all elements in the list.", "code": "def sum_elements(nums):\n    return sum(nums)", "task_id": "865_4b3eba26-2bbf-49be-88ed-000a055bd29a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the product of all elements in the list.", "code": "def product_elements(nums):\n    result = 1\n    for x in nums:\n        result *= x\n    return result", "task_id": "865_61c80560-47e4-46dd-9809-caac1dadbbb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all even numbers in a given list of integers using a lambda function.", "code": "def find_even_numbers(nums):\n  result = list(filter(lambda x: x % 2 == 0, nums))\n  return result", "task_id": "864_78fdbd64-6d62-468e-b304-c561538bf8b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings longer than a given length in a list of strings using a lambda function.", "code": "def find_long_strings(strings, length):\n  result = list(filter(lambda x: len(x) > length, strings))\n  return result", "task_id": "864_ab967e21-2754-4cfd-a44e-d0bb8b086a8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all positive numbers in a given list of integers using a lambda function.", "code": "def find_positive_numbers(nums):\n  result = list(filter(lambda x: x > 0, nums))\n  return result", "task_id": "864_db14b665-4ace-4bca-929c-f13fee2cdaa0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings that are in uppercase in a given list of strings using a lambda function.", "code": "def find_uppercase_strings(strings):\n  result = list(filter(lambda x: x.isupper(), strings))\n  return result", "task_id": "864_6b25fb07-26d7-4aa3-b676-98881b079fcb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings that start with a vowel in a given list of strings using a lambda function.", "code": "def find_vowel_starting_strings(strings):\n  vowels = 'AEIOUaeiou'\n  result = list(filter(lambda x: x[0] in vowels, strings))\n  return result", "task_id": "864_fe8c47a4-7bb6-4273-8517-e02f514519c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all numbers divisible by 5 in a given list of integers using a lambda function.", "code": "def find_divisible_by_five(nums):\n  result = list(filter(lambda x: x % 5 == 0, nums))\n  return result", "task_id": "864_9c8106bb-0ddb-4ec4-b535-da20bada1964", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic numbers in a given list of integers using a lambda function.", "code": "def find_palindromic_numbers(nums):\n  result = list(filter(lambda x: str(x) == str(x)[::-1], nums))\n  return result", "task_id": "864_3966acae-d0cc-4744-947d-5fe808ecbdd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings with an odd number of characters in a given list of strings using a lambda function.", "code": "def find_odd_length_strings(strings):\n  result = list(filter(lambda x: len(x) % 2 != 0, strings))\n  return result", "task_id": "864_833447f9-f8bc-4078-b663-ad03027b2e88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all non-empty strings in a given list of strings using a lambda function.", "code": "def find_non_empty_strings(strings):\n  result = list(filter(lambda x: x != '', strings))\n  return result", "task_id": "864_68684d66-215c-4a22-a154-92abb78ac085", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all numbers that are perfect squares in a given list of integers using a lambda function.", "code": "import math\n\ndef find_square_numbers(nums):\n  result = list(filter(lambda x: math.isqrt(x) ** 2 == x, nums))\n  return result", "task_id": "864_41cf03b5-a704-4740-a19b-07bc1b1492ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given year is a leap year or not.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "866_01a8ca77-55b4-4dff-92fa-b48ffbcc2c10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the number of days in a given month of a specific year.", "code": "def days_in_month(month: str, year: int) -> int:\n    if month in ['January', 'March', 'May', 'July', 'August', 'October', 'December']:\n        return 31\n    elif month in ['April', 'June', 'September', 'November']:\n        return 30\n    elif month == 'February':\n        return 29 if is_leap_year(year) else 28\n    return 0", "task_id": "866_8dadf613-5772-4a58-b80a-dd7f89ae6997", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given day is a weekend or not.", "code": "def is_weekend(day: str) -> bool:\n    return day in ['Saturday', 'Sunday']", "task_id": "866_24159c44-ae63-4183-9244-7594c4554fc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given number is a prime number or not.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "866_f8a1a642-0b56-4af1-80ea-b6e4fc9e787a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "866_46aab569-7b32-465d-b87f-3fe2e6ac92d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether a given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "866_0e6840bc-f216-4379-a897-0ff777295f10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "866_c42c0baf-7e0b-4809-996a-9b3d6b47f7f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "866_c268db60-9ae2-46ba-85ca-f1880eede218", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "866_c685d55d-cd42-4cef-aa91-c1424d6189d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check whether two given strings are anagrams of each other or not.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "866_0b2af5a3-b2cc-4462-b2bf-d74cc7fc0a14", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the first word in a given string.", "code": "def length_of_first_word(s: str) -> int:\n    words = s.strip().split()\n    return len(words[0]) if words else 0", "task_id": "868_0dcf3e99-2f98-4a7a-9f2c-c9ccfbcc56e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word in a given string.", "code": "def length_of_longest_word(s: str) -> int:\n    words = s.split()\n    return max(map(len, words)) if words else 0", "task_id": "868_e55c0400-786c-4ee3-ba14-4fa61d5bfdf1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the shortest word in a given string.", "code": "def length_of_shortest_word(s: str) -> int:\n    words = s.split()\n    return min(map(len, words)) if words else 0", "task_id": "868_d4c2b1e6-ab56-439d-bf49-a720fe7d9404", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a given string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "868_bc623231-d861-4fad-b9b3-190f3d394557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the words in a given string.", "code": "def reverse_words(s: str) -> str:\n    return ' '.join(s.split()[::-1])", "task_id": "868_7aa0d76d-18a4-48fd-bffc-1af1642d88f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in a given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "868_5f033006-babb-4c6d-89ee-56ab9079f736", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given word is present in a string.", "code": "def find_word(s: str, word: str) -> bool:\n    return word in s.split()", "task_id": "868_3af1cf0f-552c-4def-97ea-2e68efffa8ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all occurrences of a given word from a string.", "code": "def remove_word(s: str, word: str) -> str:\n    return ' '.join(w for w in s.split() if w != word)", "task_id": "868_fa9ac4e2-2b39-498d-a9ea-093a7d9f0eea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all occurrences of a given word in a string with another word.", "code": "def replace_word(s: str, old: str, new: str) -> str:\n    return ' '.join(new if w == old else w for w in s.split())", "task_id": "868_5e21c98d-19ae-45a5-8322-dfdcc691dd08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome (ignoring spaces).", "code": "def is_palindrome(s: str) -> bool:\n    s = s.replace(' ', '')\n    return s == s[::-1]", "task_id": "868_bfa2aef3-a0cc-4cb7-9773-70b8b3434678", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive even integers.", "code": "def find_longest_even_subseq(arr):\n    arr = [x for x in arr if x % 2 == 0]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 2:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_96463e93-cb52-4be9-ba12-3c853d2654ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive odd integers.", "code": "def find_longest_odd_subseq(arr):\n    arr = [x for x in arr if x % 2 != 0]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 2:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_ff92eb8f-135d-4a47-a9f4-305d6f3abb4f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive prime numbers.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef find_longest_prime_subseq(arr):\n    arr = [x for x in arr if is_prime(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 2:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_e115f118-cbd4-4c7f-95c6-4f3ad2444d11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive Fibonacci numbers.", "code": "def is_fib(n):\n    a, b = 0, 1\n    while b < n:\n        a, b = b, a + b\n    return b == n\n\ndef find_longest_fib_subseq(arr):\n    arr = [x for x in arr if is_fib(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + arr[i-2]:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_77f4e5bf-27d8-4b79-aa43-d8748fd1b3b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive perfect squares.", "code": "def is_square(n):\n    return int(n**0.5)**2 == n\n\ndef find_longest_square_subseq(arr):\n    arr = [x for x in arr if is_square(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_6a474d22-531c-415d-9916-1823cdf71cfa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive perfect cubes.", "code": "def is_cube(n):\n    return int(n**(1/3))**3 == n\n\ndef find_longest_cube_subseq(arr):\n    arr = [x for x in arr if is_cube(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_a4296446-00af-428c-8561-6a30b5622800", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive palindromic numbers.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef find_longest_palindrome_subseq(arr):\n    arr = [x for x in arr if is_palindrome(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_883c2021-6484-42ba-9ba4-ae878730ce64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are numbers whose digits are all prime numbers.", "code": "def is_prime_digit(n):\n    prime_digits = {'2', '3', '5', '7'}\n    return all(d in prime_digits for d in str(n))\n\ndef find_longest_prime_digit_subseq(arr):\n    arr = [x for x in arr if is_prime_digit(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] + 1:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_cac9d5a3-450d-4dfb-8931-8196e0cb2f1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive powers of two.", "code": "def is_power_of_two(n):\n    return (n & (n - 1)) == 0 and n != 0\n\ndef find_longest_power_of_two_subseq(arr):\n    arr = [x for x in arr if is_power_of_two(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] * 2:\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_19ac4f1b-6f76-442a-a14e-1163e6cdd602", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive factorial numbers.", "code": "def is_factorial(n):\n    fact = 1\n    i = 1\n    while fact < n:\n        i += 1\n        fact *= i\n    return fact == n\n\ndef find_longest_factorial_subseq(arr):\n    arr = [x for x in arr if is_factorial(x)]\n    arr.sort()\n    ans = 0\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] == arr[i-1] * (i+1):\n            count += 1\n        else:\n            count = 1\n        ans = max(ans, count)\n    return ans", "task_id": "863_e9e5d210-bca8-4cd9-a804-215412da6db0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes odd.", "code": "def min_Num_to_make_sum_odd(arr, n):\n    total_sum = sum(arr)\n    if total_sum % 2 == 0:\n        return 1\n    return 2", "task_id": "867_d1009987-cfb1-4efd-98e7-3e44e79ac1ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the product of array becomes even.", "code": "def min_Num_to_make_product_even(arr, n):\n    for num in arr:\n        if num % 2 == 0:\n            return 0\n    return 2", "task_id": "867_4ba5c292-485e-459e-9a97-3d950c0cbbf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the product of array becomes odd.", "code": "def min_Num_to_make_product_odd(arr, n):\n    for num in arr:\n        if num % 2 == 0:\n            return 1\n    return 0", "task_id": "867_a80f56eb-123c-41ed-a3c7-10a5eb70b0e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that all elements in the array become even.", "code": "def min_Num_to_make_all_elements_even(arr, n):\n    for num in arr:\n        if num % 2 != 0:\n            return 1\n    return 0", "task_id": "867_e7d83313-9ea4-4b27-9517-6190f65492c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that all elements in the array become odd.", "code": "def min_Num_to_make_all_elements_odd(arr, n):\n    for num in arr:\n        if num % 2 == 0:\n            return 1\n    return 0", "task_id": "867_6bf1ebac-5a06-4ced-a1de-f9b01c78e447", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes divisible by 3.", "code": "def min_Num_to_make_sum_divisible_by_3(arr, n):\n    total_sum = sum(arr)\n    remainder = total_sum % 3\n    if remainder == 0:\n        return 0\n    return 3 - remainder", "task_id": "867_1bc65cb8-fb8b-4b8c-8827-061ff4ed7d47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes divisible by 5.", "code": "def min_Num_to_make_sum_divisible_by_5(arr, n):\n    total_sum = sum(arr)\n    remainder = total_sum % 5\n    if remainder == 0:\n        return 0\n    return 5 - remainder", "task_id": "867_9ec2dcaa-c581-4930-804e-ee546e72ea8e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes a prime number.", "code": "def min_Num_to_make_sum_prime(arr, n):\n    def is_prime(num):\n        if num <= 1:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n    total_sum = sum(arr)\n    add_num = 0\n    while not is_prime(total_sum + add_num):\n        add_num += 1\n    return add_num", "task_id": "867_dfbdfa88-5b2e-45df-9c87-0151746a3d8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes a perfect square.", "code": "def min_Num_to_make_sum_perfect_square(arr, n):\n    import math\n    total_sum = sum(arr)\n    add_num = 0\n    while math.isqrt(total_sum + add_num)**2 != total_sum + add_num:\n        add_num += 1\n    return add_num", "task_id": "867_d2ff8b9b-33be-4896-ab7d-eb491db4123f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to add a minimum number such that the sum of array becomes a Fibonacci number.", "code": "def min_Num_to_make_sum_fibonacci(arr, n):\n    def is_fibonacci(num):\n        x1 = 5 * num * num + 4\n        x2 = 5 * num * num - 4\n        return int(x1**0.5)**2 == x1 or int(x2**0.5)**2 == x2\n    total_sum = sum(arr)\n    add_num = 0\n    while not is_fibonacci(total_sum + add_num):\n        add_num += 1\n    return add_num", "task_id": "867_b4a01294-548b-4797-b245-4e21433c86f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have lengths within a given range.", "code": "def remove_list_length_range(list1, min_length, max_length):\n    result = [i for i in list1 if min_length <= len(i) <= max_length]\n    return result", "task_id": "869_4c92b9d5-2032-4897-a3eb-72a5fe08eb07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have sums within a given range.", "code": "def remove_list_sum_range(list1, min_sum, max_sum):\n    result = [i for i in list1 if min_sum <= sum(i) <= max_sum]\n    return result", "task_id": "869_35242490-8e14-4c59-9fdc-ddb63a227728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have averages within a given range.", "code": "def remove_list_avg_range(list1, min_avg, max_avg):\n    result = [i for i in list1 if min_avg <= sum(i)/len(i) <= max_avg]\n    return result", "task_id": "869_fd19d8a2-ff6a-4bae-9b25-432dba74602f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have medians within a given range.", "code": "def remove_list_median_range(list1, min_median, max_median):\n    def median(lst):\n        n = len(lst)\n        s = sorted(lst)\n        return (s[n//2] if n % 2 != 0 else (s[n//2 - 1] + s[n//2]) / 2)\n    result = [i for i in list1 if min_median <= median(i) <= max_median]\n    return result", "task_id": "869_d41f880f-610a-4173-a70f-06f7f8a1f955", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have maximum values within a given range.", "code": "def remove_list_max_range(list1, min_max, max_max):\n    result = [i for i in list1 if min_max <= max(i) <= max_max]\n    return result", "task_id": "869_7802a7d0-e20d-4e3a-80e8-3668762c474e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have minimum values within a given range.", "code": "def remove_list_min_range(list1, min_min, max_min):\n    result = [i for i in list1 if min_min <= min(i) <= max_min]\n    return result", "task_id": "869_9ea89e99-b77b-4223-8c8b-b517872345de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have a number of even elements within a given range.", "code": "def remove_list_even_count(list1, min_even, max_even):\n    result = [i for i in list1 if min_even <= sum(1 for x in i if x % 2 == 0) <= max_even]\n    return result", "task_id": "869_3b32e585-a8bc-411b-a8a1-cb0b8c95ad48", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have a number of odd elements within a given range.", "code": "def remove_list_odd_count(list1, min_odd, max_odd):\n    result = [i for i in list1 if min_odd <= sum(1 for x in i if x % 2 != 0) <= max_odd]\n    return result", "task_id": "869_43e1b8e7-9ae6-463a-b9dc-d7b82ad08086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have a number of prime elements within a given range.", "code": "def remove_list_prime_count(list1, min_prime, max_prime):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    result = [i for i in list1 if min_prime <= sum(1 for x in i if is_prime(x)) <= max_prime]\n    return result", "task_id": "869_82f023e4-b6b2-492f-8e8c-92035cb006dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove sublists from a given list of lists, which do not have a number of unique elements within a given range.", "code": "def remove_list_unique_count(list1, min_unique, max_unique):\n    result = [i for i in list1 if min_unique <= len(set(i)) <= max_unique]\n    return result", "task_id": "869_7756d582-5545-400b-be2e-2de43d3768f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the even numbers of a given list of numbers using lambda function.", "code": "def sum_even_numbers(nums):\n  even_nums = list(filter(lambda x: x % 2 == 0, nums))\n  return sum(even_nums)", "task_id": "870_154f055f-34a3-43fb-879d-0e41c0722f55", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the odd numbers of a given list of numbers using lambda function.", "code": "def sum_odd_numbers(nums):\n  odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n  return sum(odd_nums)", "task_id": "870_08837806-ae68-43f3-8e2d-19c43d2e5c7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.", "code": "def sum_negative_numbers(nums):\n  negative_nums = list(filter(lambda x: x < 0, nums))\n  return sum(negative_nums)", "task_id": "870_06dc28ae-6b92-43d5-9e1c-44524192a2fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of positive numbers in a given list of numbers using lambda function.", "code": "def count_positive_numbers(nums):\n  positive_nums = list(filter(lambda x: x > 0, nums))\n  return len(positive_nums)", "task_id": "870_75d9dcb1-44ba-4e3d-ad78-297fea5417f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of even numbers in a given list of numbers using lambda function.", "code": "def count_even_numbers(nums):\n  even_nums = list(filter(lambda x: x % 2 == 0, nums))\n  return len(even_nums)", "task_id": "870_c5a29f05-fd3b-4a9d-a4a1-a0b3b6cf129a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of odd numbers in a given list of numbers using lambda function.", "code": "def count_odd_numbers(nums):\n  odd_nums = list(filter(lambda x: x % 2 != 0, nums))\n  return len(odd_nums)", "task_id": "870_1318eb5e-4a57-4531-8839-95ac67fe80d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of positive numbers in a given list of numbers using lambda function.", "code": "def sum_squares_of_positive_numbers(nums):\n  positive_nums = list(filter(lambda x: x > 0, nums))\n  return sum(map(lambda x: x**2, positive_nums))", "task_id": "870_69b85954-eee8-4ff9-81d9-435ecbb7ef11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the cubes of negative numbers in a given list of numbers using lambda function.", "code": "def sum_cubes_of_negative_numbers(nums):\n  negative_nums = list(filter(lambda x: x < 0, nums))\n  return sum(map(lambda x: x**3, negative_nums))", "task_id": "870_e88665d8-097c-4510-8762-71a9241bd893", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the absolute values of a given list of numbers using lambda function.", "code": "def sum_absolute_values(nums):\n  absolute_values = list(map(lambda x: abs(x), nums))\n  return sum(absolute_values)", "task_id": "870_cf521c58-1fd0-40a6-9e11-05b25c0ee720", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the positive even numbers of a given list of numbers using lambda function.", "code": "def sum_positive_even_numbers(nums):\n  positive_even_nums = list(filter(lambda x: x > 0 and x % 2 == 0, nums))\n  return sum(positive_even_nums)", "task_id": "870_fbe22d6d-fa25-4f4c-8c2a-7eb5276c942e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list up to a certain depth.", "code": "def check_subset_with_depth(list1, list2, depth):\n    if depth == 0:\n        return True\n    if isinstance(list1, list) and isinstance(list2, list):\n        return all(check_subset_with_depth(list1, elem, depth-1) for elem in list2)\n    return list2 in list1", "task_id": "872_b0cb602a-af1b-4191-9b72-36ba5ab118f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ignoring the order of elements.", "code": "def check_subset_ignore_order(list1, list2):\n    return all(any(elem == sublist for sublist in list1) for elem in list2)", "task_id": "872_a8893867-897d-4683-be33-da01105ef0cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering duplicates.", "code": "def check_subset_with_duplicates(list1, list2):\n    from collections import Counter\n    return all(Counter(list1)[elem] >= count for elem, count in Counter(list2).items())", "task_id": "872_55686ecf-850c-43bb-addf-e971258a97e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for a certain number of mismatches.", "code": "def check_subset_with_tolerance(list1, list2, tolerance):\n    mismatches = sum(1 for elem in list2 if elem not in list1)\n    return mismatches <= tolerance", "task_id": "872_64e367d7-5f3d-431c-b1dd-46265e9ea08a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list after flattening both lists.", "code": "def flatten(lst):\n    for elem in lst:\n        if isinstance(elem, list):\n            yield from flatten(elem)\n        else:\n            yield elem\n\ndef check_subset_with_flattening(list1, list2):\n    flat_list1 = list(flatten(list1))\n    flat_list2 = list(flatten(list2))\n    return all(elem in flat_list1 for elem in flat_list2)", "task_id": "872_596ae516-8b27-4b6c-8c07-898a7ae8b0c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list using a custom comparator function.", "code": "def check_subset_with_custom_comparator(list1, list2, comparator):\n    return all(any(comparator(elem, sublist) for sublist in list1) for elem in list2)", "task_id": "872_4681ce46-f7a0-4f61-9b59-ddfa293ccdaf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, ensuring type consistency.", "code": "def check_subset_with_type_check(list1, list2):\n    return all(any(isinstance(elem, type(sublist)) and elem == sublist for sublist in list1) for elem in list2)", "task_id": "872_ebe1b658-6030-40f8-b2d8-3481f88e8724", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering only elements of the same length.", "code": "def check_subset_with_length(list1, list2):\n    return all(any(len(elem) == len(sublist) and elem == sublist for sublist in list1) for elem in list2)", "task_id": "872_620770fc-237a-42eb-8cdc-b9c745cbfc15", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, considering only unique elements.", "code": "def check_subset_with_unique_elements(list1, list2):\n    unique_list1 = list(set(map(tuple, list1)))\n    unique_list2 = list(set(map(tuple, list2)))\n    return all(elem in unique_list1 for elem in unique_list2)", "task_id": "872_ef5c20c6-2385-4521-9628-9ca2c57eca64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a nested list is a subset of another nested list, allowing for partial matches based on a percentage.", "code": "def check_subset_with_partial_match(list1, list2, match_percentage):\n    matches = sum(1 for elem in list2 if any(elem == sublist for sublist in list1))\n    return (matches / len(list2)) >= match_percentage", "task_id": "872_073c2478-a358-4b9e-b294-dba6628fe4e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "871_c6599142-592d-4acc-b213-fbd31df8454b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given strings are anagrams of each other or not.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "871_d048cf96-ce3c-4920-82c3-90c57230c62d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the second string is a substring of the first string or not.", "code": "def is_substring(s1: str, s2: str) -> bool:\n    return s2 in s1", "task_id": "871_77e96ea7-21ae-456a-863e-45160df9ef36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string has all unique characters or not.", "code": "def has_unique_characters(s: str) -> bool:\n    return len(s) == len(set(s))", "task_id": "871_ad4334cf-c5ff-4752-ad04-0a9a792ae73f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "871_a0c5f665-235b-4724-a7dc-382746b6eefd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "871_80a053cd-e77f-45c7-8c17-d6172e2eab1b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a pangram or not.", "code": "def is_pangram(s: str) -> bool:\n    return set('abcdefghijklmnopqrstuvwxyz').issubset(set(s.lower()))", "task_id": "871_87c7de73-a941-47c9-b4bf-95c34de0acd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in the given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "871_de79cde2-c999-430b-89dc-dfa74260a0e3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is an isogram or not.", "code": "def is_isogram(s: str) -> bool:\n    return len(s) == len(set(s.lower()))", "task_id": "871_570abe92-5ef8-4294-9742-67351dcde0a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in the given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "871_8f69aae9-bf22-4976-98cc-10f6c8fc3539", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if one string is a rotation of another string.", "code": "def is_rotation(s1, s2):\n    if len(s1) != len(s2):\n        return False\n    return s2 in s1 + s1", "task_id": "874_d5c3aa22-76e4-4af7-9c30-234cbd9c6a0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "874_402ef1ba-2d94-4bd1-bf87-02dc6e7c33c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "874_1d53584e-851a-479a-bf72-790eaf73d684", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string has all unique characters.", "code": "def has_unique_chars(s):\n    return len(s) == len(set(s))", "task_id": "874_ff8e4ba0-1e98-4ca7-b037-69f6571f6790", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if one string is a subsequence of another string.", "code": "def is_subsequence(s1, s2):\n    it = iter(s2)\n    return all(c in it for c in s1)", "task_id": "874_e185ddb3-a474-412e-b02b-c7efcc0e5171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string is a pangram (contains every letter of the alphabet at least once).", "code": "def is_pangram(s):\n    return set('abcdefghijklmnopqrstuvwxyz') <= set(s.lower())", "task_id": "874_c1f52476-83f4-4bce-9607-183b63c9bbc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string is an isogram (no repeating letters).", "code": "def is_isogram(s):\n    s = s.lower()\n    return len(s) == len(set(s))", "task_id": "874_07b3482c-cbd2-4d6f-b8d9-bd61812b7253", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string is a permutation of a palindrome.", "code": "def is_permutation_palindrome(s):\n    from collections import Counter\n    s = s.replace(' ', '').lower()\n    counts = Counter(s)\n    odd_count = sum(1 for count in counts.values() if count % 2 != 0)\n    return odd_count <= 1", "task_id": "874_5592c91c-fa79-4331-b35d-d48c0645d776", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a string of parentheses is valid (properly closed and nested).", "code": "def is_valid_parentheses(s):\n    stack = []\n    mapping = {')': '(', '}': '{', ']': '['}\n    for char in s:\n        if char in mapping:\n            top_element = stack.pop() if stack else '#'\n            if mapping[char] != top_element:\n                return False\n        else:\n            stack.append(char)\n    return not stack", "task_id": "874_92b54fc7-2aad-4aa3-a555-dd0cae873b38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if one string is the mirror image of another string.", "code": "def is_mirror_image(s1, s2):\n    return s1 == s2[::-1]", "task_id": "874_29060fe6-b977-4875-8aeb-8189a87ada4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a number using recursion.", "code": "def factorial(n):\n  if n == 0 or n == 1:\n    return 1\n  else:\n    return n * factorial(n - 1)", "task_id": "873_dc97c7ed-05c7-4a47-b193-3af83e170b8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of digits of a number using recursion.", "code": "def sum_of_digits(n):\n  if n == 0:\n    return 0\n  else:\n    return n % 10 + sum_of_digits(n // 10)", "task_id": "873_cd2f226b-4537-4ec6-87bc-c19a4e5fba5a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a string using recursion.", "code": "def reverse_string(s):\n  if len(s) == 0:\n    return ''\n  else:\n    return s[-1] + reverse_string(s[:-1])", "task_id": "873_ac21e7bc-0801-4d1e-ba66-09aec2cccabc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers using recursion.", "code": "def gcd(a, b):\n  if b == 0:\n    return a\n  else:\n    return gcd(b, a % b)", "task_id": "873_8071b162-e1c4-4707-bfd6-9bbfeb42917c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the power of a number using recursion.", "code": "def power(base, exp):\n  if exp == 0:\n    return 1\n  else:\n    return base * power(base, exp - 1)", "task_id": "873_f309ad28-6d6c-4cb2-b511-22f61ff5eb9d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome using recursion.", "code": "def is_palindrome(s):\n  if len(s) <= 1:\n    return True\n  elif s[0] != s[-1]:\n    return False\n  else:\n    return is_palindrome(s[1:-1])", "task_id": "873_fceeb9f9-6ece-4633-835b-ea9baa93a0b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all elements in an array using recursion.", "code": "def sum_array(arr):\n  if len(arr) == 0:\n    return 0\n  else:\n    return arr[0] + sum_array(arr[1:])", "task_id": "873_434bebd4-0abf-4aab-9eed-afdcb98e09dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the occurrences of a number in an array using recursion.", "code": "def count_occurrences(arr, x):\n  if len(arr) == 0:\n    return 0\n  elif arr[0] == x:\n    return 1 + count_occurrences(arr[1:], x)\n  else:\n    return count_occurrences(arr[1:], x)", "task_id": "873_7ebcc461-f73c-49ae-8245-83624033c544", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in an array using recursion.", "code": "def find_min(arr):\n  if len(arr) == 1:\n    return arr[0]\n  else:\n    return min(arr[0], find_min(arr[1:]))", "task_id": "873_01680824-732d-423d-b8c5-37f21b627854", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list using recursion.", "code": "def flatten_list(nested_list):\n  if not nested_list:\n    return []\n  elif isinstance(nested_list[0], list):\n    return flatten_list(nested_list[0]) + flatten_list(nested_list[1:])\n  else:\n    return [nested_list[0]] + flatten_list(nested_list[1:])", "task_id": "873_9dc8d2b8-bad9-4ece-b938-6a5af1e63864", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference in the tuple pairs of given tuples.", "code": "def max_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = max(temp)\n  return res", "task_id": "875_a374e570-023f-467b-9fe9-da853a06cdb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of differences in the tuple pairs of given tuples.", "code": "def sum_of_differences(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = sum(temp)\n  return res", "task_id": "875_8a67fffc-ae14-47ea-949c-67be778ec18a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average difference in the tuple pairs of given tuples.", "code": "def avg_difference(test_list):\n  temp = [abs(b - a) for a, b in test_list]\n  res = sum(temp) / len(temp)\n  return res", "task_id": "875_a36e86ca-f493-4dd9-98f7-ce72bff38960", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of the tuple pairs of given tuples.", "code": "def min_sum_of_pairs(test_list):\n  temp = [a + b for a, b in test_list]\n  res = min(temp)\n  return res", "task_id": "875_5dcd2bce-ee77-4c82-a89a-a2e64a41c314", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of the tuple pairs of given tuples.", "code": "def max_sum_of_pairs(test_list):\n  temp = [a + b for a, b in test_list]\n  res = max(temp)\n  return res", "task_id": "875_dad0d583-1079-4d3c-abde-8e7bfc93bb42", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of differences in the tuple pairs of given tuples.", "code": "def sum_of_squares(test_list):\n  temp = [(b - a) ** 2 for a, b in test_list]\n  res = sum(temp)\n  return res", "task_id": "875_1d3cda13-2243-4b3f-b344-ada9cbfcc71a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of the tuple pairs of given tuples.", "code": "def product_of_pairs(test_list):\n  res = [a * b for a, b in test_list]\n  return res", "task_id": "875_2475dc2c-a909-49bc-9655-549d59794731", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum product of the tuple pairs of given tuples.", "code": "def min_product_of_pairs(test_list):\n  temp = [a * b for a, b in test_list]\n  res = min(temp)\n  return res", "task_id": "875_8fac65e1-f0f2-44eb-91fa-c95af4c43791", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum product of the tuple pairs of given tuples.", "code": "def max_product_of_pairs(test_list):\n  temp = [a * b for a, b in test_list]\n  res = max(temp)\n  return res", "task_id": "875_9bd02bab-1a12-4cdb-bcfd-aecb36044b9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum absolute difference in the tuple pairs of given tuples.", "code": "def min_absolute_difference(test_list):\n  temp = [abs(a - b) for a, b in test_list]\n  res = min(temp)\n  return res", "task_id": "875_c9f02707-feb5-4351-ae79-3b58595e64e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (gcd) of two positive integers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "876_6c8c88eb-497d-4259-9beb-8040b9763292", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given positive integer is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "876_6297b05c-6046-4512-83b3-866da0cf197a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the factorial of a given positive integer.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "876_f9ff60b3-895c-4176-9e56-0d9fee5f9d07", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "876_53a4591a-20a3-474d-bd0a-561e8236bea1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given positive integer.", "code": "def sum_of_digits(n):\n    total = 0\n    while n > 0:\n        total += n % 10\n        n //= 10\n    return total", "task_id": "876_347fd8ac-2875-4f03-8a57-f49281b0f1bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "876_f724101a-7c8a-4026-805e-f0c1e80146f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "876_2179571c-b5fa-42a8-94c0-50ee40c35f91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "876_830c77e5-aeb4-44bd-aa1e-cac77b5483f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum value in a given list of integers.", "code": "def find_max(arr):\n    if not arr:\n        return None\n    max_val = arr[0]\n    for num in arr:\n        if num > max_val:\n            max_val = num\n    return max_val", "task_id": "876_cb14d337-6318-4d27-802f-bada424644b6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "876_0a64ba07-8ffc-4c90-ab22-21795955ab4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string in reverse order.", "code": "def reverse_sort_string(s: str) -> str:\n    return ''.join(sorted(s, reverse=True))", "task_id": "877_5d5b62dc-c7b6-465d-b160-c6ade4e5266d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string ignoring case.", "code": "def sort_string_ignore_case(s: str) -> str:\n    return ''.join(sorted(s, key=lambda c: c.lower()))", "task_id": "877_e60016d7-db8d-492d-bae1-34138d21e867", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string and remove duplicate characters.", "code": "def sort_string_remove_duplicates(s: str) -> str:\n    return ''.join(sorted(set(s)))", "task_id": "877_2a654f54-0715-4de6-bb62-1ca05443baae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort a list of strings by their lengths.", "code": "def sort_string_by_length(words: list) -> list:\n    return sorted(words, key=len)", "task_id": "877_3dcaa991-b8e1-4de4-8728-d703818397c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string with vowels first, followed by consonants.", "code": "def sort_string_vowels_first(s: str) -> str:\n    vowels = ''.join([c for c in s if c in 'aeiouAEIOU'])\n    consonants = ''.join([c for c in s if c not in 'aeiouAEIOU'])\n    return ''.join(sorted(vowels) + sorted(consonants))", "task_id": "877_4267cd77-4868-4b65-83ac-e8b38dd76f01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string by ASCII values.", "code": "def sort_string_by_ascii(s: str) -> str:\n    return ''.join(sorted(s, key=lambda c: ord(c)))", "task_id": "877_c280377b-7846-4826-b757-ba22aa7f2cc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given alphanumeric string with digits first followed by letters.", "code": "def sort_string_alphanumeric(s: str) -> str:\n    digits = ''.join([c for c in s if c.isdigit()])\n    letters = ''.join([c for c in s if c.isalpha()])\n    return ''.join(sorted(digits) + sorted(letters))", "task_id": "877_3879ba2d-199e-4304-a94f-c70204fa07a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the given string by the frequency of characters (least frequent first).", "code": "from collections import Counter\n\ndef sort_string_by_frequency(s: str) -> str:\n    freq = Counter(s)\n    return ''.join(sorted(s, key=lambda c: (freq[c], c)))", "task_id": "877_4f75a774-76e6-4987-941e-27c0494a1d2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the words in the given string by their lengths.", "code": "def sort_string_by_word_length(s: str) -> str:\n    words = s.split()\n    return ' '.join(sorted(words, key=len))", "task_id": "877_a7a3c1dd-580d-46a0-8393-3d89d60b50e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sort the words in the given string by the number of vowels they contain.", "code": "def sort_string_by_vowel_count(s: str) -> str:\n    def vowel_count(word):\n        return sum(1 for c in word if c in 'aeiouAEIOU')\n    words = s.split()\n    return ' '.join(sorted(words, key=vowel_count))", "task_id": "877_c87872c2-1048-4df1-8f1a-c7ff3e9f366a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are present in the given set K.", "code": "def contains_only_k_elements(test_tuple, K):\n    return all(ele in K for ele in test_tuple)", "task_id": "878_688718e0-a045-4abf-a45a-e19002e061d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many elements in the given tuple are present in the given set K.", "code": "def count_elements_in_k(test_tuple, K):\n    return sum(1 for ele in test_tuple if ele in K)", "task_id": "878_3af83e2c-2aab-4684-aea3-e6462ba04009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a set of unique elements from the tuple that are present in the given set K.", "code": "def unique_elements_in_k(test_tuple, K):\n    return {ele for ele in test_tuple if ele in K}", "task_id": "878_3745d7fc-3608-4eac-b994-180e229fc5b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first element in the tuple that is present in the given set K. If no such element exists, return -1.", "code": "def first_element_in_k(test_tuple, K):\n    for ele in test_tuple:\n        if ele in K:\n            return ele\n    return -1", "task_id": "878_d749186b-dbe7-444c-aeba-efdb881af51e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are present in the given set K, and the tuple is not empty.", "code": "def all_elements_in_k(test_tuple, K):\n    return bool(test_tuple) and all(ele in K for ele in test_tuple)", "task_id": "878_1ce1b2ca-f1e8-4f13-b36c-59cdc51bbc30", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of elements from the tuple that are not present in the given set K.", "code": "def elements_not_in_k(test_tuple, K):\n    return [ele for ele in test_tuple if ele not in K]", "task_id": "878_c0a22316-1f19-4a1e-b7ed-1b3de8ea63b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of unique elements in the tuple that are present in the given set K.", "code": "def count_unique_elements_in_k(test_tuple, K):\n    return len({ele for ele in test_tuple if ele in K})", "task_id": "878_3a0323bb-92bd-416a-ba55-6f3096602cea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a tuple of two lists: the first list contains elements from the tuple that are in the set K, and the second list contains elements that are not in the set K.", "code": "def elements_in_k_and_not_in_k(test_tuple, K):\n    in_k = [ele for ele in test_tuple if ele in K]\n    not_in_k = [ele for ele in test_tuple if ele not in K]\n    return (in_k, not_in_k)", "task_id": "878_cc45f577-aee1-47b2-8354-aeaf09a9c505", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if all elements in the given tuple are greater than the given integer K.", "code": "def all_elements_greater_than_k(test_tuple, K):\n    return all(ele > K for ele in test_tuple)", "task_id": "878_0cac51dc-1e65-43fc-874c-76f59e5e39d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a list of elements from the tuple that are greater than the given integer K.", "code": "def elements_greater_than_k(test_tuple, K):\n    return [ele for ele in test_tuple if ele > K]", "task_id": "878_a281c13c-8349-435a-be8c-92a9a4b08d77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that starts with 'x' and ends with 'y' using regex.", "code": "import re\n\ndef find_pattern(text):\n    patterns = '^x.*y$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_b70e3fc6-377c-4038-b211-133296a944aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains exactly three digits using regex.", "code": "import re\n\ndef match_digits(text):\n    patterns = '\\d{3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_eb131d67-0363-4630-9496-7240f6b64db9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains at least one uppercase letter using regex.", "code": "import re\n\ndef match_uppercase(text):\n    patterns = '[A-Z]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_cdab67fe-2ce7-4c28-a2aa-d68bf6cf0ccb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that contains the word 'python' as a whole word using regex.", "code": "import re\n\ndef match_word_boundary(text):\n    patterns = '\\bpython\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_f226c918-c355-4fa2-ba04-f89e4a1f5c34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that starts with a vowel using regex.", "code": "import re\n\ndef match_vowel_start(text):\n    patterns = '^[AEIOUaeiou]'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_945f599a-9b76-43d5-a1fd-913f880fe98e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that is a valid phone number in the format XXX-XXX-XXXX using regex.", "code": "import re\n\ndef match_phone_number(text):\n    patterns = '^\\d{3}-\\d{3}-\\d{4}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_eadaefcc-1c82-47ea-8dd8-d563b17260ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that is a valid email address using regex.", "code": "import re\n\ndef match_email(text):\n    patterns = '^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_45c1e171-db75-4c9a-a8f8-9fec95f3dfc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that is a valid hex color code using regex.", "code": "import re\n\ndef match_hex_color(text):\n    patterns = '^#(?:[0-9a-fA-F]{3}){1,2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_d26f541a-c6f8-48fe-a58f-97e767821cf4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that is a valid date in the format YYYY-MM-DD using regex.", "code": "import re\n\ndef match_date(text):\n    patterns = '^\\d{4}-\\d{2}-\\d{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_c8b4d0b2-d8b5-4954-8cbc-09b773b3e205", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that is a valid time in the format HH:MM using regex.", "code": "import re\n\ndef match_time(text):\n    patterns = '^\\d{2}:\\d{2}$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "879_e0d3c737-340f-4e0b-bf2b-49875ce1ea99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a perfect square.", "code": "def is_perfect_square(n: int) -> str:\n    if n < 0:\n        return 'No'\n    root = int(n**0.5)\n    if root * root == n:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "880_43417ed4-46ab-458a-8568-5c258606a588", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given number is a prime number.", "code": "def is_prime(n: int) -> str:\n    if n <= 1:\n        return 'No'\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return 'No'\n    return 'Yes'", "task_id": "880_921e7d2c-ff8b-458e-8005-eef51bee0458", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> str:\n    if s == s[::-1]:\n        return 'Yes'\n    else:\n        return 'No'", "task_id": "880_7160d90d-d9dc-44d7-a7c2-675dad7aa8c7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "880_deeaa345-238f-4c52-8ffe-fdbed484fc3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "880_7d8608ee-13d1-490f-9f0d-2862b29a0a44", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "880_0c0c95dd-bf4b-481a-a934-6de438c59af2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(x, y):\n        while y:\n            x, y = y, x % y\n        return x\n    return abs(a * b) // gcd(a, b)", "task_id": "880_af14f690-230a-415c-9f80-08d9af6df424", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of the digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "880_0d788f45-fc4e-4204-ae25-bd752dc92129", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "880_2446546c-02f6-4f3f-9c81-2b6aac189575", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if two given strings are anagrams.", "code": "def is_anagram(s1: str, s2: str) -> str:\n    return 'Yes' if sorted(s1) == sorted(s2) else 'No'", "task_id": "880_f5d1f26d-5554-41ac-a1bb-2a9b49ca03be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a rectangle.", "code": "def rectangle_perimeter(length: int, width: int) -> int:\n    return 2 * (length + width)", "task_id": "882_0d4b54f0-5fe9-4afe-aee9-4cf5cf46d149", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a triangle given its three sides.", "code": "def triangle_perimeter(a: int, b: int, c: int) -> int:\n    return a + b + c", "task_id": "882_c84b4296-372f-43b0-a1eb-f4874375c28f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a square.", "code": "def square_perimeter(side: int) -> int:\n    return 4 * side", "task_id": "882_198928b7-1ea8-4b9f-a2a8-94921ffc97e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the circumference of a circle given its radius. Use 3.14 for Pi.", "code": "def circle_circumference(radius: int) -> float:\n    return 2 * 3.14 * radius", "task_id": "882_e1158db1-93d2-43a1-88ab-50dedebbf7a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a trapezoid given the lengths of its four sides.", "code": "def trapezoid_perimeter(a: int, b: int, c: int, d: int) -> int:\n    return a + b + c + d", "task_id": "882_dee91b28-2ff4-4d50-94cf-5e94732a9f22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a rhombus given the length of one of its sides.", "code": "def rhombus_perimeter(side: int) -> int:\n    return 4 * side", "task_id": "882_2efc8b1c-6850-405a-b79d-d756419ef426", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a regular hexagon given the length of one of its sides.", "code": "def hexagon_perimeter(side: int) -> int:\n    return 6 * side", "task_id": "882_c95dfd48-c521-4ef4-968e-7505369e7d7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a regular pentagon given the length of one of its sides.", "code": "def pentagon_perimeter(side: int) -> int:\n    return 5 * side", "task_id": "882_ed2eb312-8ecf-4162-981f-71182dcf6728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a regular octagon given the length of one of its sides.", "code": "def octagon_perimeter(side: int) -> int:\n    return 8 * side", "task_id": "882_90f35a99-9921-4987-b8ef-201945edea8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the perimeter of a kite given the lengths of its two distinct pairs of adjacent sides.", "code": "def kite_perimeter(a: int, b: int) -> int:\n    return 2 * (a + b)", "task_id": "882_8070b52d-e11f-42cc-947e-d9c60e01b88c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last even numbers of a given list.", "code": "def sum_first_and_last_even(list1):\n    first_even = next((el for el in list1 if el % 2 == 0), -1)\n    last_even = next((el for el in reversed(list1) if el % 2 == 0), -1)\n    return first_even + last_even", "task_id": "881_90525062-1f11-4fe0-9a0c-8e99694e8655", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last odd numbers of a given list.", "code": "def sum_first_and_last_odd(list1):\n    first_odd = next((el for el in list1 if el % 2 != 0), -1)\n    last_odd = next((el for el in reversed(list1) if el % 2 != 0), -1)\n    return first_odd + last_odd", "task_id": "881_17179710-b46f-41a6-a970-8862421add6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first positive and first negative number of a given list.", "code": "def sum_first_positive_negative(list1):\n    first_positive = next((el for el in list1 if el > 0), -1)\n    first_negative = next((el for el in list1 if el < 0), -1)\n    return first_positive + first_negative", "task_id": "881_14dc0a5f-8821-4c1d-9647-129f6e107f3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last positive numbers of a given list.", "code": "def sum_first_and_last_positive(list1):\n    first_positive = next((el for el in list1 if el > 0), -1)\n    last_positive = next((el for el in reversed(list1) if el > 0), -1)\n    return first_positive + last_positive", "task_id": "881_71cdd0a3-d079-420b-be63-75c72836e014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last negative numbers of a given list.", "code": "def sum_first_and_last_negative(list1):\n    first_negative = next((el for el in list1 if el < 0), -1)\n    last_negative = next((el for el in reversed(list1) if el < 0), -1)\n    return first_negative + last_negative", "task_id": "881_d45ed4f6-388f-460d-893b-fee641660837", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last prime numbers of a given list.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_first_and_last_prime(list1):\n    first_prime = next((el for el in list1 if is_prime(el)), -1)\n    last_prime = next((el for el in reversed(list1) if is_prime(el)), -1)\n    return first_prime + last_prime", "task_id": "881_75819845-327d-40ce-b7e5-f994e3150fac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the ASCII values of the first and last vowels in a given string.", "code": "def sum_first_and_last_vowel(string):\n    vowels = 'aeiouAEIOU'\n    first_vowel = next((ord(ch) for ch in string if ch in vowels), -1)\n    last_vowel = next((ord(ch) for ch in reversed(string) if ch in vowels), -1)\n    return first_vowel + last_vowel", "task_id": "881_09ae699e-ba84-4c79-9062-4752e76c0f06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the ASCII values of the first and last uppercase letters in a given string.", "code": "def sum_first_and_last_uppercase(string):\n    first_upper = next((ord(ch) for ch in string if ch.isupper()), -1)\n    last_upper = next((ord(ch) for ch in reversed(string) if ch.isupper()), -1)\n    return first_upper + last_upper", "task_id": "881_1f4648b5-2feb-4f23-946d-67d544d41d4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the first and last digits in a given string.", "code": "def sum_first_and_last_digit(string):\n    first_digit = next((int(ch) for ch in string if ch.isdigit()), -1)\n    last_digit = next((int(ch) for ch in reversed(string) if ch.isdigit()), -1)\n    return first_digit + last_digit", "task_id": "881_2475c9bf-cf09-4b79-9a0b-50e8642bcae8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the ASCII values of the first and last consonants in a given string.", "code": "def sum_first_and_last_consonant(string):\n    vowels = 'aeiouAEIOU'\n    first_consonant = next((ord(ch) for ch in string if ch.isalpha() and ch not in vowels), -1)\n    last_consonant = next((ord(ch) for ch in reversed(string) if ch.isalpha() and ch not in vowels), -1)\n    return first_consonant + last_consonant", "task_id": "881_87303b8a-0c59-45fc-a340-aa30e48c1e01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all even numbers from a list of numbers using a lambda function.", "code": "def find_even_numbers(nums):\n    result = list(filter(lambda x: x % 2 == 0, nums))\n    return result", "task_id": "883_a8853cf6-0446-4742-ab57-58c3da80304e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all odd numbers from a list of numbers using a lambda function.", "code": "def find_odd_numbers(nums):\n    result = list(filter(lambda x: x % 2 != 0, nums))\n    return result", "task_id": "883_22088fda-6c77-466e-afaf-2b356632f222", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all positive numbers from a list of numbers using a lambda function.", "code": "def find_positive_numbers(nums):\n    result = list(filter(lambda x: x > 0, nums))\n    return result", "task_id": "883_da2e23b6-b1c5-4d6c-ad97-e0a6ffc02a85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all negative numbers from a list of numbers using a lambda function.", "code": "def find_negative_numbers(nums):\n    result = list(filter(lambda x: x < 0, nums))\n    return result", "task_id": "883_65562829-9b89-4a5c-918f-660e63b41901", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all prime numbers from a list of numbers using a lambda function.", "code": "def find_prime_numbers(nums):\n    is_prime = lambda x: x > 1 and all(x % i != 0 for i in range(2, int(x**0.5) + 1))\n    result = list(filter(is_prime, nums))\n    return result", "task_id": "883_1f48f492-74a0-4807-83e7-1b36659ccb6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all palindromic strings from a list of strings using a lambda function.", "code": "def find_palindromes(strings):\n    result = list(filter(lambda x: x == x[::-1], strings))\n    return result", "task_id": "883_0e76141e-424d-4199-9e1c-42e2f7b6f8d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings longer than a given length from a list of strings using a lambda function.", "code": "def find_long_strings(strings, length):\n    result = list(filter(lambda x: len(x) > length, strings))\n    return result", "task_id": "883_93f3ef7b-7772-44f9-8669-6f9b9ef62ed0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings that start with a vowel from a list of strings using a lambda function.", "code": "def find_vowel_starting_strings(strings):\n    vowels = 'AEIOUaeiou'\n    result = list(filter(lambda x: x[0] in vowels, strings))\n    return result", "task_id": "883_0b8eb957-107c-4013-8f21-b5a4ab526ba5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings that are in uppercase from a list of strings using a lambda function.", "code": "def find_uppercase_strings(strings):\n    result = list(filter(lambda x: x.isupper(), strings))\n    return result", "task_id": "883_d4974f8b-0b91-4bf0-a7ad-62dcf98e2e53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all strings that are in lowercase from a list of strings using a lambda function.", "code": "def find_lowercase_strings(strings):\n    result = list(filter(lambda x: x.islower(), strings))\n    return result", "task_id": "883_141d59e7-a477-46d2-80ba-569416622580", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to check if a given number is a prime number.", "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "884_2089b2ec-721d-4ba6-8d49-4a7160e40f5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "884_4ec629f2-37b4-4259-8cd5-818fa705eb7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to return the n-th Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b", "task_id": "884_28837d14-34ab-49ba-bf5e-97be5d12f364", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to check if two given strings are anagrams of each other.", "code": "def is_anagram(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "884_c906ff6e-bd3d-464e-a2d2-d3b5e80d7dae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to return the factorial of a given number.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "task_id": "884_7606eaac-4f9e-4088-a9f0-213638f55844", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to check if a given number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "884_3d0451d6-33f1-4480-b868-cc1308f0fd4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "884_66900d2e-3baa-467b-ad88-b67f206c16f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to return the sum of digits of a given number.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "884_ceddaad5-f512-41a9-ad7c-894ae87707ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to check if a given number is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "884_433aa15f-ba81-451a-b6ae-39a55b9a6ab9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a Python function to return the greatest common divisor (GCD) of two given numbers.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "884_d6d4639e-faf8-4074-81b6-e1dbebb3f646", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two given strings are anagrams of each other or not.", "code": "def are_anagrams(s1: str, s2: str) -> bool:\n    return sorted(s1) == sorted(s2)", "task_id": "885_04e23f5f-e851-4996-b910-db4accb708cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "885_d1ef2075-6475-4892-a85b-ef7ef364590d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string has all unique characters or not.", "code": "def unique_characters(s: str) -> bool:\n    return len(s) == len(set(s))", "task_id": "885_749f406a-f34b-4c90-b434-971bb0d4b15e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "885_51bda522-4b1e-4e7e-9ab9-81617f639c38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s: str) -> int:\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "885_2cf85633-6303-4b66-957e-211c3a5006bd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first string is a substring of the second string.", "code": "def is_substring(s1: str, s2: str) -> bool:\n    return s1 in s2", "task_id": "885_cd3fdb2f-acdf-4b95-961f-22ec4f09807e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether one string is a rotation of another string.", "code": "def is_rotation(s1: str, s2: str) -> bool:\n    return len(s1) == len(s2) and s1 in s2 + s2", "task_id": "885_5129cf44-67a1-425e-bfdf-418b3dc5d368", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from the given string.", "code": "def remove_duplicates(s: str) -> str:\n    return ''.join(sorted(set(s), key=s.index))", "task_id": "885_ce599a8e-2f34-47ac-a4e1-0e7e3f596c1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in the given string.", "code": "def longest_word(s: str) -> str:\n    words = s.split()\n    return max(words, key=len)", "task_id": "885_aa7f898e-d933-4fe3-9c84-578b8ee45a54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in the given string.", "code": "def capitalize_words(s: str) -> str:\n    return ' '.join(word.capitalize() for word in s.split())", "task_id": "885_7a8159e7-9e9b-48f9-9941-14a93d861117", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is even or not using bitwise operator.", "code": "def is_even(n):\n    return n & 1 == 0", "task_id": "887_074bb6dd-0768-4297-b934-453a309fd266", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a power of two using bitwise operator.", "code": "def is_power_of_two(n):\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "887_96cb84c5-5bb2-424b-92a1-fa27e273e958", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of 1s in the binary representation of a given number.", "code": "def count_ones(n):\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "887_946b879d-bb6a-4cb5-8cba-6a8c35179550", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is negative using bitwise operator.", "code": "def is_negative(n):\n    return (n >> 31) & 1 == 1", "task_id": "887_24b25d1b-93d6-49f7-8a9b-abfb13236bd6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to swap two numbers using bitwise operators.", "code": "def swap_bits(x, y):\n    x = x ^ y\n    y = x ^ y\n    x = x ^ y\n    return x, y", "task_id": "887_9bfe25a3-664f-4210-923f-316d94666e6c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the k-th bit of a number is set (1) or not (0).", "code": "def is_bit_set(n, k):\n    return (n & (1 << k)) != 0", "task_id": "887_19c6c234-6dc5-4f63-8883-c06342b201e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the k-th bit of a number.", "code": "def toggle_bit(n, k):\n    return n ^ (1 << k)", "task_id": "887_0d89ec25-f17e-4a25-9724-8f7584941b9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear (set to 0) the k-th bit of a number.", "code": "def clear_bit(n, k):\n    return n & ~(1 << k)", "task_id": "887_a6f7a079-0166-429b-b1b7-7b53708572a5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set (set to 1) the k-th bit of a number.", "code": "def set_bit(n, k):\n    return n | (1 << k)", "task_id": "887_6458f74a-8af8-4578-84b7-5f9865d95916", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given number is a multiple of four using bitwise operator.", "code": "def is_multiple_of_four(n):\n    return (n & 3) == 0", "task_id": "887_fb8f38a2-99d7-4190-b623-c25a195c3171", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of a list of integers.", "code": "def sum_of_squares(nums):\n    return sum(x**2 for x in nums)", "task_id": "889_3016a40a-5074-4647-ba9c-6caee5f36b13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse each string in a given list of strings.", "code": "def reverse_strings(strings):\n    return [s[::-1] for s in strings]", "task_id": "889_17b6e4dd-ddeb-44e8-a301-c44f76e685f9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize each word in a given list of words.", "code": "def capitalize_words(words):\n    return [word.capitalize() for word in words]", "task_id": "889_8333068e-e60d-4bfe-8e37-cb983c842615", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out even numbers from a given list of integers.", "code": "def filter_even_numbers(nums):\n    return [num for num in nums if num % 2 != 0]", "task_id": "889_a1c5c96a-d201-4992-8e00-8353af591b94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to double each element in a given list of integers.", "code": "def double_elements(nums):\n    return [num * 2 for num in nums]", "task_id": "889_bbbaa0f1-8cb6-4009-b879-35005682b090", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a given list of lists into a single list.", "code": "def flatten_list_of_lists(lists):\n    return [item for sublist in lists for item in sublist]", "task_id": "889_239e0eb6-4473-4da0-8ae3-5bb48e288852", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a given list of integers.", "code": "def remove_duplicates(nums):\n    return list(set(nums))", "task_id": "889_77a715de-f444-4bb0-8758-50929e365c1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "889_e41d5c46-42c9-445c-b149-4dbaab57063d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two sorted lists into one sorted list.", "code": "def merge_two_lists(list1, list2):\n    return sorted(list1 + list2)", "task_id": "889_33d5b1a4-6766-4f68-91f2-7df3048f5e51", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "889_89a3f569-0742-4863-a337-d4fe64f7f9b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply all the numbers in a list and divide it by the length of the list.", "code": "def multiply_and_average(numbers):\n    product = 1\n    for x in numbers:\n        product *= x\n    return product / len(numbers)", "task_id": "886_885a21c1-43a5-498f-baa6-0a96dda9ea80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the squares of all the numbers in a list and divide it by the length of the list.", "code": "def sum_of_squares(numbers):\n    total = 0\n    for x in numbers:\n        total += x ** 2\n    return total / len(numbers)", "task_id": "886_8c749131-6357-4db8-bc1b-80a371ed660b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the cubes of all the numbers in a list and divide it by the length of the list.", "code": "def sum_of_cubes(numbers):\n    total = 0\n    for x in numbers:\n        total += x ** 3\n    return total / len(numbers)", "task_id": "886_6a678973-4b29-4136-88c4-93d9e2a6d046", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the absolute values of all the numbers in a list and divide it by the length of the list.", "code": "def sum_of_absolute_values(numbers):\n    total = 0\n    for x in numbers:\n        total += abs(x)\n    return total / len(numbers)", "task_id": "886_891259d6-345f-401d-a547-ae5949adaabc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the even numbers in a list and divide it by the length of the list.", "code": "def sum_of_even_numbers(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x % 2 == 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_d3ef5eb1-7553-44aa-bdc9-dde0ca89b835", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the odd numbers in a list and divide it by the length of the list.", "code": "def sum_of_odd_numbers(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x % 2 != 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_94aa6ee6-e5da-4b89-b2c7-3ea5f3af6cb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the positive numbers in a list and divide it by the length of the list.", "code": "def sum_of_positive_numbers(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x > 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_12ee6949-dac3-4a48-a331-8c7d5f963acf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the negative numbers in a list and divide it by the length of the list.", "code": "def sum_of_negative_numbers(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x < 0:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_e1c058eb-9ca8-4ed8-a7d5-a60feaf48cb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the numbers greater than five in a list and divide it by the length of the list.", "code": "def sum_of_numbers_greater_than_five(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x > 5:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_bcc4bcce-60ec-4671-9c3b-247c375ea5ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add all the numbers less than ten in a list and divide it by the length of the list.", "code": "def sum_of_numbers_less_than_ten(numbers):\n    total = 0\n    count = 0\n    for x in numbers:\n        if x < 10:\n            total += x\n            count += 1\n    return total / count if count != 0 else 0", "task_id": "886_96f2f7c3-6781-4df8-afc4-a7e566a68942", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the elements of the given nested tuples.", "code": "def multiply_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_fb0b3ab3-afde-4f4a-b7d9-2b1c2734db6f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to divide the elements of the given nested tuples.", "code": "def divide_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a / b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_11a346fa-873c-44b1-92a7-850f7c4b6e35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add the elements of the given nested tuples.", "code": "def add_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_4a045d1d-0dc3-4ece-8e77-c985050d2319", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the modulus of the elements of the given nested tuples.", "code": "def mod_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a % b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_f7353a0f-a59c-462e-bd08-29c471bcddbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to raise the elements of the first nested tuple to the power of the elements of the second nested tuple.", "code": "def power_elements(test_tup1, test_tup2):\n  res = tuple(tuple(a ** b for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_0c4f8b83-89ae-4579-903a-5f03db04a4a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of the elements of the given nested tuples.", "code": "def max_elements(test_tup1, test_tup2):\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_b20d842d-b479-4a78-a586-ea38b9b1762c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of the elements of the given nested tuples.", "code": "def min_elements(test_tup1, test_tup2):\n  res = tuple(tuple(min(a, b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_73b9f56e-e8c0-4956-9cd8-5539e9416e7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the elements of the given nested tuples.", "code": "def concat_elements(test_tup1, test_tup2):\n  res = tuple(tuple(str(a) + str(b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_30ddcfa7-c69e-48cb-aeba-29d3bc296c29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference of the elements of the given nested tuples.", "code": "def abs_diff_elements(test_tup1, test_tup2):\n  res = tuple(tuple(abs(a - b) for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_4313b2b9-4136-49ed-ae63-7a414f55abef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of the elements of the given nested tuples.", "code": "def avg_elements(test_tup1, test_tup2):\n  res = tuple(tuple((a + b) / 2 for a, b in zip(tup1, tup2))\n   for tup1, tup2 in zip(test_tup1, test_tup2))\n  return (res)", "task_id": "888_8ae05f34-f68a-498d-b80b-8544a7c00303", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of words in a string.", "code": "def reverse_words(text):\n    return ' '.join(text.split()[::-1])", "task_id": "892_b961480a-f2dc-4b55-8596-3d3e6e94d552", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to capitalize the first letter of each word in a string.", "code": "def capitalize_words(text):\n    return ' '.join(word.capitalize() for word in text.split())", "task_id": "892_b6e25cac-dc41-48f3-8e44-e06898edceed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all vowels from a string.", "code": "def remove_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return ''.join(char for char in text if char not in vowels)", "task_id": "892_4c4e9bcd-be97-4878-ade3-fbf4e6411dd8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a string.", "code": "def count_words(text):\n    return len(text.split())", "task_id": "892_08793ddd-1c60-45cf-a350-81e7cdd539d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all spaces in a string with underscores.", "code": "def replace_spaces_with_underscore(text):\n    return text.replace(' ', '_')", "task_id": "892_ace0d6cf-0558-4bee-89dd-e766fa7f2cc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all punctuation from a string.", "code": "import string\n\ndef remove_punctuation(text):\n    return text.translate(str.maketrans('', '', string.punctuation))", "task_id": "892_65d47608-c067-42c3-b0c6-6c9835a4903a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string is a palindrome (reads the same forwards and backwards).", "code": "def is_palindrome(text):\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n    return cleaned_text == cleaned_text[::-1]", "task_id": "892_72391795-503a-4718-8918-8730cb75f033", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a string.", "code": "def count_vowels(text):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in text if char in vowels)", "task_id": "892_65200a07-d1ec-4fc6-9a8e-f6b98d047fe3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a string.", "code": "def remove_duplicate_words(text):\n    words = text.split()\n    seen = set()\n    result = []\n    for word in words:\n        if word not in seen:\n            seen.add(word)\n            result.append(word)\n    return ' '.join(result)", "task_id": "892_a1b0ca16-427b-425e-b855-0b48d547be11", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest word in a string.", "code": "def find_longest_word(text):\n    words = text.split()\n    longest_word = max(words, key=len)\n    return longest_word", "task_id": "892_cdd6afd6-32b7-447d-8cf0-ef7a61b25d7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the sum of the digits of two given numbers are equal or not.", "code": "def same_length_sum(A: int, B: int) -> bool:\n    def digit_sum(n):\n        return sum(int(digit) for digit in str(n))\n    return digit_sum(A) == digit_sum(B)", "task_id": "891_a6308b75-13c6-45db-bb4c-b71cb05901f4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the product of the digits of two given numbers are equal or not.", "code": "def same_length_product(A: int, B: int) -> bool:\n    def digit_product(n):\n        product = 1\n        for digit in str(n):\n            product *= int(digit)\n        return product\n    return digit_product(A) == digit_product(B)", "task_id": "891_2d3aa6a4-caf6-4869-8f0e-f45079702bed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the number of even digits in two given numbers are equal or not.", "code": "def same_length_even_digits(A: int, B: int) -> bool:\n    def count_even_digits(n):\n        return sum(1 for digit in str(n) if int(digit) % 2 == 0)\n    return count_even_digits(A) == count_even_digits(B)", "task_id": "891_dcd3abd0-60c2-4753-8fee-4962afbc6c56", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the number of odd digits in two given numbers are equal or not.", "code": "def same_length_odd_digits(A: int, B: int) -> bool:\n    def count_odd_digits(n):\n        return sum(1 for digit in str(n) if int(digit) % 2 != 0)\n    return count_odd_digits(A) == count_odd_digits(B)", "task_id": "891_4961babc-b09c-4848-8e12-5c45755b8ce1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the number of prime digits (2, 3, 5, 7) in two given numbers are equal or not.", "code": "def same_length_prime_digits(A: int, B: int) -> bool:\n    def count_prime_digits(n):\n        prime_digits = {'2', '3', '5', '7'}\n        return sum(1 for digit in str(n) if digit in prime_digits)\n    return count_prime_digits(A) == count_prime_digits(B)", "task_id": "891_65527bc8-8871-46bd-b85d-c002cef24586", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two given numbers are palindromes of each other.", "code": "def same_length_palindrome(A: int, B: int) -> bool:\n    return str(A) == str(B)[::-1]", "task_id": "891_ca945381-2c82-4600-85be-75fc5f609191", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the reverse of the first number is equal to the second number.", "code": "def same_length_reverse(A: int, B: int) -> bool:\n    return str(A)[::-1] == str(B)", "task_id": "891_9bb77a3c-b0b2-4053-815c-99081f7021f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the digits of two given numbers, when sorted, are the same.", "code": "def same_length_sorted_digits(A: int, B: int) -> bool:\n    return sorted(str(A)) == sorted(str(B))", "task_id": "891_f625b1f0-d8ea-4d57-abad-0d88c654d175", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the leading digit of two given numbers are the same.", "code": "def same_length_leading_digit(A: int, B: int) -> bool:\n    return str(A)[0] == str(B)[0]", "task_id": "891_ca7192ea-b757-43c8-b4c3-98c98787cb97", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the trailing digit of two given numbers are the same.", "code": "def same_length_trailing_digit(A: int, B: int) -> bool:\n    return str(A)[-1] == str(B)[-1]", "task_id": "891_537c3bd8-cd81-40bb-ab41-30e3a86050a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the missing element in the second sorted array.", "code": "def find_missing_element(arr1, arr2): \n    for i in range(len(arr1)): \n        if i >= len(arr2) or arr1[i] != arr2[i]: \n            return arr1[i] \n    return arr1[-1]", "task_id": "890_90f6c5f7-c2b4-4636-aef3-7a6c5706dec5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the first non-matching element between two sorted arrays.", "code": "def find_first_non_matching(arr1, arr2): \n    for i in range(min(len(arr1), len(arr2))): \n        if arr1[i] != arr2[i]: \n            return i \n    return -1", "task_id": "890_2ecb368f-a155-4708-aba2-dedce70f12e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one unsorted array.", "code": "def find_extra_element_unsorted(arr1, arr2): \n    arr1.sort() \n    arr2.sort() \n    for i in range(len(arr2)): \n        if arr1[i] != arr2[i]: \n            return i \n    return len(arr1) - 1", "task_id": "890_5cc416aa-897a-4290-98fe-f4dcd213d5a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of a missing element in the second array.", "code": "def find_missing_index(arr1, arr2): \n    for i in range(len(arr1)): \n        if i >= len(arr2) or arr1[i] != arr2[i]: \n            return i \n    return -1", "task_id": "890_6e001146-ef59-4a62-87fe-544dfc69ce6b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one sorted array, starting from the end.", "code": "def find_extra_element_reverse(arr1, arr2): \n    n = len(arr1) \n    for i in range(n): \n        if arr1[n-1-i] != arr2[n-1-i]: \n            return n-1-i \n    return n", "task_id": "890_7f06e47b-7a41-4724-ad45-28ccc0587ed1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one sorted array with possible duplicates.", "code": "def find_extra_element_with_duplicates(arr1, arr2): \n    for i in range(len(arr1)): \n        if i >= len(arr2) or arr1[i] != arr2[i]: \n            return i \n    return len(arr1) - 1", "task_id": "890_95a5eba1-8d1b-4534-b4d9-05c05dc28a7b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in the middle of one sorted array.", "code": "def find_extra_element_in_middle(arr1, arr2): \n    for i in range(len(arr1)//2, len(arr1)): \n        if arr1[i] != arr2[i]: \n            return i \n    return len(arr1) - 1", "task_id": "890_41ef9e0f-76d4-4a2a-bab5-688112434f2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one sorted array, considering an offset.", "code": "def find_extra_element_with_offset(arr1, arr2, offset): \n    for i in range(offset, len(arr1)): \n        if arr1[i] != arr2[i - offset]: \n            return i \n    return len(arr1) - 1", "task_id": "890_bccdcc6d-72f7-4875-bb91-4f4f968268d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one rotated sorted array.", "code": "def find_extra_element_in_rotated(arr1, arr2): \n    arr2.sort() \n    for i in range(len(arr1)): \n        if arr1[i] != arr2[i % len(arr2)]: \n            return i \n    return len(arr1) - 1", "task_id": "890_7a0781d4-7c9c-4a29-ba90-2b5027162951", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of an extra element present in one sorted array that includes negative numbers.", "code": "def find_extra_element_with_negative(arr1, arr2): \n    for i in range(len(arr1)): \n        if i >= len(arr2) or arr1[i] != arr2[i]: \n            return i \n    return len(arr1) - 1", "task_id": "890_025dfea3-cdd6-4ba6-82db-63b662d8aa3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist.", "code": "def get_first_elements(lst): \n    return [item[0] for item in lst]", "task_id": "893_3828fc1b-967d-4d19-94e0-88e04c3f6d32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the second element of each sublist.", "code": "def get_second_elements(lst): \n    return [item[1] for item in lst if len(item) > 1]", "task_id": "893_ea9f6fcd-1e6d-4d91-98c5-37d9d5eec5f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the last element of each sublist that has an even number of elements.", "code": "def get_last_elements_of_even_sublists(lst): \n    return [item[-1] for item in lst if len(item) % 2 == 0]", "task_id": "893_00fa52c6-a440-4888-8d1e-7ec158ed7817", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist that has an odd number of elements.", "code": "def get_first_elements_of_odd_sublists(lst): \n    return [item[0] for item in lst if len(item) % 2 != 0]", "task_id": "893_83c7662f-0ac1-4b4a-9aaf-f4c43ce2a99d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the last element of each non-empty sublist.", "code": "def get_last_elements_of_non_empty_sublists(lst): \n    return [item[-1] for item in lst if item]", "task_id": "893_695aeb5f-57e2-42dd-9b15-f1685b498bcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the second last element of each sublist.", "code": "def get_second_last_elements(lst): \n    return [item[-2] for item in lst if len(item) > 1]", "task_id": "893_1cadfe2c-0463-4440-b6ce-6a4b72b4b317", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the last element of each sublist that has at least a given minimum length.", "code": "def get_last_elements_of_sublists_with_min_length(lst, min_length): \n    return [item[-1] for item in lst if len(item) >= min_length]", "task_id": "893_e1fb3a23-12b8-4816-8af1-ec080e174918", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist that has at most a given maximum length.", "code": "def get_first_elements_of_sublists_with_max_length(lst, max_length): \n    return [item[0] for item in lst if len(item) <= max_length]", "task_id": "893_9bd86d68-802f-4d9d-9b28-624ecae4d003", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the last element of each sublist that has an odd number of elements.", "code": "def get_last_elements_of_sublists_with_odd_length(lst): \n    return [item[-1] for item in lst if len(item) % 2 != 0]", "task_id": "893_f8b87243-5a80-4044-82a6-f7c797d00db2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to get the first element of each sublist that has an even number of elements.", "code": "def get_first_elements_of_sublists_with_even_length(lst): \n    return [item[0] for item in lst if len(item) % 2 == 0]", "task_id": "893_38a775a0-72d3-460c-a882-a01155558971", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers separated by commas into a tuple of integers.", "code": "def int_list_to_tuple(int_str):\n    res = tuple(map(int, int_str.split(',')))\n    return res", "task_id": "894_a657c42c-2383-4b96-8890-384b689e85dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of words separated by spaces into a tuple of strings.", "code": "def str_list_to_tuple(str_list):\n    res = tuple(str_list.split(' '))\n    return res", "task_id": "894_4e099429-d2e8-4750-b7f5-256906f35d06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of boolean values ('True' or 'False') separated by commas into a tuple of booleans.", "code": "def bool_list_to_tuple(bool_str):\n    res = tuple(map(lambda x: x == 'True', bool_str.split(',')))\n    return res", "task_id": "894_89540b82-a8da-4098-a51e-a78ea8eb3975", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of hexadecimal numbers separated by commas into a tuple of integers.", "code": "def hex_list_to_tuple(hex_str):\n    res = tuple(map(lambda x: int(x, 16), hex_str.split(',')))\n    return res", "task_id": "894_f7d77a46-ccc7-4443-8cd2-c006ad7744b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string into a tuple of its characters.", "code": "def str_to_char_tuple(char_str):\n    res = tuple(char_str)\n    return res", "task_id": "894_3dd8577a-c3a0-4ae3-8080-efc0b1bcff1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of dates in 'YYYY-MM-DD' format separated by commas into a tuple of date strings.", "code": "def date_list_to_tuple(date_str):\n    res = tuple(date_str.split(','))\n    return res", "task_id": "894_207a122d-c601-4ff2-994a-8a9188b15107", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of binary numbers separated by commas into a tuple of integers.", "code": "def binary_list_to_tuple(binary_str):\n    res = tuple(map(lambda x: int(x, 2), binary_str.split(',')))\n    return res", "task_id": "894_77acf5f1-edf2-4993-a1e6-96a76ed52494", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of float numbers separated by commas into a single string where each float is separated by a space.", "code": "def float_list_to_str(float_str):\n    res = ' '.join(float_str.split(','))\n    return res", "task_id": "894_97bd962e-2217-4e82-9075-df73f4c5f411", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of integers separated by commas into a single string where each integer is separated by a space.", "code": "def int_list_to_str(int_str):\n    res = ' '.join(int_str.split(','))\n    return res", "task_id": "894_8924dca4-435b-41cb-9d2b-264b45b8d4a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string of words separated by spaces into a set of strings.", "code": "def str_list_to_set(str_list):\n    res = set(str_list.split(' '))\n    return res", "task_id": "894_9c82bc04-00a1-4efe-ac8b-3df16c32d396", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list in increasing order by the first element in each tuple from a given list of non-empty tuples.", "code": "def sort_list_first(tuples):\n    return sorted(tuples, key=lambda x: x[0])", "task_id": "896_a5314804-d98d-43f3-97b4-15a88b8cb421", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the length of each string.", "code": "def sort_list_length(strings):\n    return sorted(strings, key=len)", "task_id": "896_d60e34ba-f714-4368-8caf-99f94951d563", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of integers in increasing order by their absolute values.", "code": "def sort_list_abs(numbers):\n    return sorted(numbers, key=abs)", "task_id": "896_e5d41540-c90e-4b94-ba77-8943570d55b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the sum of elements in each tuple.", "code": "def sort_list_sum(tuples):\n    return sorted(tuples, key=lambda x: sum(x))", "task_id": "896_79073202-61f5-4ca1-8102-9e4cc40f3981", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples in increasing order by the second element in each tuple.", "code": "def sort_list_second(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "task_id": "896_ff77915d-8e1a-4c17-abde-08a4f1f55820", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the reverse of each string.", "code": "def sort_list_reverse(strings):\n    return sorted(strings, key=lambda x: x[::-1])", "task_id": "896_8a7a3526-0fa3-434e-a402-5b0f1bd86f6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the number of vowels in each string.", "code": "def sort_list_vowels(strings):\n    vowels = 'aeiouAEIOU'\n    return sorted(strings, key=lambda x: sum(1 for char in x if char in vowels))", "task_id": "896_85969eda-52c2-4055-8f51-8cf5f1c9fd32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the number of digits in each string.", "code": "def sort_list_digits(strings):\n    return sorted(strings, key=lambda x: sum(1 for char in x if char.isdigit()))", "task_id": "896_b63a94fd-7767-43c7-b139-ee4ebc45dacb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the number of words in each string.", "code": "def sort_list_words(strings):\n    return sorted(strings, key=lambda x: len(x.split()))", "task_id": "896_78d6c285-8bef-491c-b9c2-887c58fa4fd4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of strings in increasing order by the number of unique characters in each string.", "code": "def sort_list_unique_chars(strings):\n    return sorted(strings, key=lambda x: len(set(x)))", "task_id": "896_7b82b403-3397-4ec8-84f1-85435b32fb80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, ignoring case sensitivity.", "code": "def is_word_present_case_insensitive(sentence: str, word: str) -> bool:\n    s = sentence.lower().split(\" \")\n    word = word.lower()\n    for i in s:\n        if (i == word):\n            return True\n    return False", "task_id": "897_daa7e719-2ecd-4066-9bb9-7d85d172289a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering punctuation.", "code": "import string\n\ndef is_word_present_with_punctuation(sentence: str, word: str) -> bool:\n    translator = str.maketrans('', '', string.punctuation)\n    sentence = sentence.translate(translator)\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word):\n            return True\n    return False", "task_id": "897_deed98f2-b0f7-403f-b785-983e932f0444", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, but the word can be in reverse order.", "code": "def is_word_present_in_reverse(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    reverse_word = word[::-1]\n    for i in s:\n        if (i == word or i == reverse_word):\n            return True\n    return False", "task_id": "897_14bb4dde-4655-4ff1-8f17-7301ca67dd90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering a prefix before the word.", "code": "def is_word_present_with_prefix(sentence: str, word: str, prefix: str) -> bool:\n    s = sentence.split(\" \")\n    prefixed_word = prefix + word\n    for i in s:\n        if (i == word or i == prefixed_word):\n            return True\n    return False", "task_id": "897_268923bd-5417-426b-b8e1-d07702846a23", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering a suffix after the word.", "code": "def is_word_present_with_suffix(sentence: str, word: str, suffix: str) -> bool:\n    s = sentence.split(\" \")\n    suffixed_word = word + suffix\n    for i in s:\n        if (i == word or i == suffixed_word):\n            return True\n    return False", "task_id": "897_ba1fc398-86b4-4ed5-958b-d0c26dd28f0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering any case (upper, lower, mixed).", "code": "def is_word_present_with_any_case(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    for i in s:\n        if (i.lower() == word.lower()):\n            return True\n    return False", "task_id": "897_6f7f755d-22f7-46e9-ace0-e42312db6604", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present as a substring in any word of a given sentence or not.", "code": "def is_word_present_with_substring(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    for i in s:\n        if (word in i):\n            return True\n    return False", "task_id": "897_3a86da85-1b25-4445-8f59-3efa2c64f88c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering words with repeated characters.", "code": "def is_word_present_with_repeated_chars(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    for i in s:\n        if (i.replace(word, '') == ''):\n            return True\n    return False", "task_id": "897_d139ea92-1016-4549-993f-30d0b6c05eed", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering words with numbers.", "code": "def is_word_present_with_numbers(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word or any(char.isdigit() for char in i)):\n            return True\n    return False", "task_id": "897_c2651854-ad6e-4968-8680-05e732430cb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the word is present in a given sentence or not, considering words with special characters.", "code": "def is_word_present_with_special_chars(sentence: str, word: str) -> bool:\n    s = sentence.split(\" \")\n    for i in s:\n        if (i == word or any(not char.isalnum() for char in i)):\n            return True\n    return False", "task_id": "897_590f4e72-c3bc-41ee-b210-73ff40b80779", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but you can skip up to 'skip' elements.", "code": "def max_sum_subseq_with_skip(A, skip):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0]\n    look_up = [0] * n\n    look_up[0] = A[0]\n    for i in range(1, n):\n        look_up[i] = max(look_up[i - 1], (look_up[i - skip - 1] if i - skip - 1 >= 0 else 0) + A[i])\n    return look_up[-1]", "task_id": "895_332f8139-e76e-42db-afd8-7563e2000995", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but the subsequence can have at most 'k' elements.", "code": "def max_sum_subseq_with_k_elements(A, k):\n    n = len(A)\n    if n == 0 or k == 0:\n        return 0\n    if n == 1:\n        return A[0] if k >= 1 else 0\n    look_up = [0] * (k + 1)\n    for i in range(n):\n        for j in range(k, 0, -1):\n            if j == 1:\n                look_up[j] = max(look_up[j], A[i])\n            else:\n                look_up[j] = max(look_up[j], look_up[j - 1] + A[i])\n    return max(look_up)", "task_id": "895_fe78fe11-bb0d-4792-add9-cba68be2f3bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but the subsequence must have at least 'min_length' elements.", "code": "def max_sum_subseq_with_min_length(A, min_length):\n    n = len(A)\n    if n < min_length:\n        return 0\n    if n == min_length:\n        return sum(A)\n    look_up = [0] * n\n    look_up[0] = A[0]\n    look_up[1] = max(A[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n    return max(look_up[min_length - 1:])", "task_id": "895_db7ea8e4-027c-46c8-814a-a3c45520aa2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but only considering elements at even indices.", "code": "def max_sum_subseq_with_even_indices(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0] if 0 % 2 == 0 else 0\n    look_up = [0] * n\n    for i in range(0, n, 2):\n        look_up[i] = max(look_up[i - 2] + A[i] if i - 2 >= 0 else A[i], look_up[i - 1] if i - 1 >= 0 else 0)\n    return max(look_up)", "task_id": "895_abacabd4-6010-4b52-b035-f2887888919a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but only considering elements at odd indices.", "code": "def max_sum_subseq_with_odd_indices(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    look_up = [0] * n\n    for i in range(1, n, 2):\n        look_up[i] = max(look_up[i - 2] + A[i] if i - 2 >= 0 else A[i], look_up[i - 1] if i - 1 >= 0 else 0)\n    return max(look_up)", "task_id": "895_aabc7160-b689-46f9-8c74-b6be56f0f229", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, considering that the array may contain negative numbers.", "code": "def max_sum_subseq_with_negative(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(0, A[0])\n    look_up = [0] * n\n    look_up[0] = max(0, A[0])\n    look_up[1] = max(look_up[0], A[1])\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\n    return look_up[-1]", "task_id": "895_63001e02-d014-4781-a3c6-5b856f7a7e59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but you can replace one element with a given 'replacement' value.", "code": "def max_sum_subseq_with_replacement(A, replacement):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return max(A[0], replacement)\n    look_up = [0] * n\n    look_up[0] = max(A[0], replacement)\n    look_up[1] = max(look_up[0], A[1], replacement)\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + max(A[i], replacement))\n    return look_up[-1]", "task_id": "895_e796abee-f41f-44ca-8251-0f40a139da88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but you can double one element's value.", "code": "def max_sum_subseq_with_double(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0] * 2\n    look_up = [0] * n\n    look_up[0] = A[0] * 2\n    look_up[1] = max(look_up[0], A[1] * 2)\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + max(A[i], A[i] * 2))\n    return look_up[-1]", "task_id": "895_146daa16-5af8-43a9-a0b0-6bc1915a73b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but you can triple one element's value.", "code": "def max_sum_subseq_with_triplet(A):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0] * 3\n    look_up = [0] * n\n    look_up[0] = A[0] * 3\n    look_up[1] = max(look_up[0], A[1] * 3)\n    for i in range(2, n):\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + max(A[i], A[i] * 3))\n    return look_up[-1]", "task_id": "895_158a6127-1baa-431c-b1b3-df047b58c317", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of subsequences of a given array with no adjacent elements, but only include elements greater than a given 'threshold'.", "code": "def max_sum_subseq_with_threshold(A, threshold):\n    n = len(A)\n    if n == 0:\n        return 0\n    if n == 1:\n        return A[0] if A[0] > threshold else 0\n    look_up = [0] * n\n    look_up[0] = A[0] if A[0] > threshold else 0\n    for i in range(1, n):\n        if A[i] > threshold:\n            look_up[i] = max(look_up[i - 1], (look_up[i - 2] if i - 2 >= 0 else 0) + A[i])\n        else:\n            look_up[i] = look_up[i - 1]\n    return look_up[-1]", "task_id": "895_ac5bdad4-9614-425b-9530-3d8cff853df7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and have a specific value.", "code": "from itertools import groupby\n\ndef extract_elements_with_value(numbers, n, value):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and i == value]\n    return result", "task_id": "898_d978f57a-4cac-4a7f-ac3a-e304492d9abc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from a given list that follow each other continuously with a minimum specified length.", "code": "from itertools import groupby\n\ndef extract_elements_with_min_length(numbers, min_length):\n    result = [i for i, j in groupby(numbers) if len(list(j)) >= min_length]\n    return result", "task_id": "898_49ceda4d-5190-407b-9a37-53806a6f9013", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from a given list that follow each other continuously with a maximum specified length.", "code": "from itertools import groupby\n\ndef extract_elements_with_max_length(numbers, max_length):\n    result = [i for i, j in groupby(numbers) if len(list(j)) <= max_length]\n    return result", "task_id": "898_12119f88-b083-4f3b-aee6-f249e3a438a3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract elements from a given list that follow each other continuously with a length within a specified range.", "code": "from itertools import groupby\n\ndef extract_elements_with_range(numbers, min_length, max_length):\n    result = [i for i, j in groupby(numbers) if min_length <= len(list(j)) <= max_length]\n    return result", "task_id": "898_106ed091-0d03-4f90-9d32-8c01afaa3fd5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously with a specified step between them.", "code": "from itertools import groupby\n\ndef extract_elements_with_step(numbers, n, step):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and (i - numbers[0]) % step == 0]\n    return result", "task_id": "898_815a8a87-96fd-47fc-8f02-2ffcdbcadaf9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and their sum equals a target value.", "code": "from itertools import groupby\n\ndef extract_elements_with_sum(numbers, n, target_sum):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and sum(list(j)) == target_sum]\n    return result", "task_id": "898_3e437abd-9128-41c5-8b00-aa3b562f329a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and their product equals a target value.", "code": "from itertools import groupby\n\ndef extract_elements_with_product(numbers, n, target_product):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and prod(list(j)) == target_product]\n    return result\n\ndef prod(lst):\n    result = 1\n    for num in lst:\n        result *= num\n    return result", "task_id": "898_84ef529e-ba05-4bf2-a866-1aaebeaafd2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and contain an odd count of elements.", "code": "from itertools import groupby\n\ndef extract_elements_with_odd_count(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and len(list(j)) % 2 != 0]\n    return result", "task_id": "898_b128f501-0daa-4ae9-95a4-3bd9ae1b6756", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and contain an even count of elements.", "code": "from itertools import groupby\n\ndef extract_elements_with_even_count(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and len(list(j)) % 2 == 0]\n    return result", "task_id": "898_4ed27559-82d8-42ba-9beb-94599c2b9ae4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract specified number of elements from a given list that follow each other continuously and contain a prime count of elements.", "code": "from itertools import groupby\n\ndef extract_elements_with_prime_count(numbers, n):\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n and is_prime(len(list(j)))]\n    return result\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "898_75d50520-70e2-4987-b0b3-87c3db176fac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be sorted in non-decreasing order by reversing at most one subarray.", "code": "def can_be_sorted(arr):\n    n = len(arr)\n    sorted_arr = sorted(arr)\n    l, r = 0, n - 1\n    while l < n and arr[l] == sorted_arr[l]:\n        l += 1\n    while r >= 0 and arr[r] == sorted_arr[r]:\n        r -= 1\n    if l >= r:\n        return True\n    arr[l:r+1] = arr[l:r+1][::-1]\n    return arr == sorted_arr", "task_id": "899_cd8e4f2d-4d79-444a-830d-44f74f7442d2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether it is possible to rearrange the characters of a string to form a palindrome.", "code": "def is_palindrome_possible(s):\n    from collections import Counter\n    count = Counter(s)\n    odd_count = sum(1 for v in count.values() if v % 2 != 0)\n    return odd_count <= 1", "task_id": "899_3e6f8dad-df05-44ac-929b-e7229daa2086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be rearranged to form an arithmetic sequence.", "code": "def can_form_arithmetic_sequence(arr):\n    arr.sort()\n    diff = arr[1] - arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] - arr[i-1] != diff:\n            return False\n    return True", "task_id": "899_4137f189-f558-490a-984a-dbde8bb81985", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be sorted by swapping at most one pair of elements.", "code": "def is_one_swap_enough(arr):\n    sorted_arr = sorted(arr)\n    diff = [(i, j) for i, j in zip(arr, sorted_arr) if i != j]\n    return len(diff) == 0 or (len(diff) == 2 and diff[0] == diff[1][::-1])", "task_id": "899_93731ed3-f4ff-4996-8990-98705ea8d4c5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a string can be made a palindrome by removing at most one character.", "code": "def can_be_palindrome_by_removing_one_char(s):\n    def is_palindrome_range(i, j):\n        return all(s[k] == s[j-k+i] for k in range(i, j))\n    for i in range(len(s) // 2):\n        if s[i] != s[~i]:\n            j = len(s) - 1 - i\n            return is_palindrome_range(i+1, j) or is_palindrome_range(i, j-1)\n    return True", "task_id": "899_46645266-89fe-41eb-9d34-2e167f73977a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be split into two subarrays with equal sum.", "code": "def can_be_split_equal_sum(arr):\n    total = sum(arr)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    current_sum = 0\n    for num in arr:\n        current_sum += num\n        if current_sum == target:\n            return True\n    return False", "task_id": "899_7b204bc5-8a41-4465-9ca0-6c73c90ed27f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be rearranged to form a geometric sequence.", "code": "def can_form_geometric_sequence(arr):\n    arr.sort()\n    if arr[0] == 0:\n        return False\n    ratio = arr[1] / arr[0]\n    for i in range(2, len(arr)):\n        if arr[i] / arr[i-1] != ratio:\n            return False\n    return True", "task_id": "899_5e598e7b-3ea7-4bd4-a310-7c7ad76b6fd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a list of weights can be split into two parts with equal sum.", "code": "def can_balance_weights(weights):\n    total = sum(weights)\n    if total % 2 != 0:\n        return False\n    target = total // 2\n    current_sum = 0\n    for weight in weights:\n        current_sum += weight\n        if current_sum == target:\n            return True\n    return False", "task_id": "899_2db4f9c5-e830-4766-bcbd-ad44d63385c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether an array can be rearranged to form a Fibonacci sequence.", "code": "def can_form_fibonacci_sequence(arr):\n    arr.sort()\n    if len(arr) < 3:\n        return False\n    for i in range(2, len(arr)):\n        if arr[i] != arr[i-1] + arr[i-2]:\n            return False\n    return True", "task_id": "899_9e74d547-bdb0-4462-acd2-ce1799116d7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether a given 2D list can be rearranged to form a square matrix.", "code": "def can_form_square_matrix(matrix):\n    total_elements = sum(len(row) for row in matrix)\n    n = int(total_elements ** 0.5)\n    return n * n == total_elements", "task_id": "899_82254bbe-e7a5-428f-b7dd-d39cf02a09ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string will end with a specific number.", "code": "import re\ndef ends_with_num(string):\n    text = re.compile(r\"5$\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_50690fa8-8164-4f36-a981-16fec5544635", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string contains a specific number anywhere in the string.", "code": "import re\ndef contains_num(string):\n    text = re.compile(r\"5\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_f8e3f673-0512-41a4-b842-c2a0d558d0c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string starts with a vowel.", "code": "import re\ndef starts_with_vowel(string):\n    text = re.compile(r\"^[AEIOUaeiou]\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "900_c0bf1590-4dc1-48d3-9de3-ec8b31279cea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string ends with a vowel.", "code": "import re\ndef ends_with_vowel(string):\n    text = re.compile(r\"[AEIOUaeiou]$\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_cc7d9039-f0b6-4af2-87bb-7095a27fdc53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string starts with a consonant.", "code": "import re\ndef starts_with_consonant(string):\n    text = re.compile(r\"^[^AEIOUaeiou]\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "900_ff0d4746-349e-4166-952c-3b5f59e43e7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string ends with a consonant.", "code": "import re\ndef ends_with_consonant(string):\n    text = re.compile(r\"[^AEIOUaeiou]$\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_45048d77-94cc-497b-9329-980899180eac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string contains any special character.", "code": "import re\ndef contains_special_char(string):\n    text = re.compile(r\"[!@#$%^&*(),.?\":{}|<>]\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_ef73ab94-9544-4b5c-8cc0-192970cfb377", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string starts with an uppercase letter.", "code": "import re\ndef starts_with_uppercase(string):\n    text = re.compile(r\"^[A-Z]\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "900_3a90c336-75d2-4a2c-b67b-e27d197e1ba0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string ends with an uppercase letter.", "code": "import re\ndef ends_with_uppercase(string):\n    text = re.compile(r\"[A-Z]$\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_8259c2bf-903f-4cbd-a75e-d8c384f49166", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function where a string contains any digit.", "code": "import re\ndef contains_digit(string):\n    text = re.compile(r\"\\d\")\n    if text.search(string):\n        return True\n    else:\n        return False", "task_id": "900_7f0b1d7f-48b3-4142-a900-0e3ae9c3edb4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n):\n    return sum(i**2 for i in range(1, n+1))", "task_id": "901_560611ea-68df-4315-93ba-a4ec415410dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "901_41cb4f7e-9227-4d69-a56e-d3eeb7dcade1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "901_e8d8bfe3-82c0-45fb-9800-50513b0629b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "901_e3432806-4904-49ec-b14b-f65b544d2f85", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "901_3159fb69-ef1d-4ce0-98b8-756f6ccea52e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "901_165e887c-4d0c-4986-9bad-9a8630b283c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "901_5e524eb1-fd91-42e2-b8e5-6b3078cb462b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a*b) // gcd(a, b)", "task_id": "901_876dce39-4952-41b3-bd89-5932733722ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char.lower() in 'aeiou')", "task_id": "901_cf31a0b9-890f-4a95-8c8e-33cda6442bae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of digits of a given number n.", "code": "def sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))", "task_id": "901_45473314-08e8-44b2-90d4-eeccad7a0f6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is odd else return false.", "code": "def is_odd(x):\n  return x % 2 != 0", "task_id": "904_0dce3bd0-d589-44f4-8f00-01a0f88ebf08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is positive else return false.", "code": "def is_positive(x):\n  return x > 0", "task_id": "904_3e7e28e2-ae5b-49c8-83dc-c68f8fdc55a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is negative else return false.", "code": "def is_negative(x):\n  return x < 0", "task_id": "904_a3f1f204-ff44-45a1-a957-6d7af5542df8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is divisible by 3 else return false.", "code": "def is_divisible_by_3(x):\n  return x % 3 == 0", "task_id": "904_b12d0c43-5e3c-44a3-be2a-1c15cab56881", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is divisible by 5 else return false.", "code": "def is_divisible_by_5(x):\n  return x % 5 == 0", "task_id": "904_7d1cca5c-0d28-4b33-baab-827f0b5fdc92", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given number is a prime number else return false.", "code": "def is_prime(x):\n  if x <= 1:\n    return False\n  for i in range(2, int(x**0.5) + 1):\n    if x % i == 0:\n      return False\n  return True", "task_id": "904_31194887-6018-44bc-9c9d-419be01506fa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given string is a palindrome else return false.", "code": "def is_palindrome(s):\n  return s == s[::-1]", "task_id": "904_3dd02bdf-4edb-4daa-b673-50f6f30df56a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given character is a vowel else return false.", "code": "def is_vowel(c):\n  return c.lower() in 'aeiou'", "task_id": "904_0de4e069-3319-48f2-ac15-94b7665d50cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given character is a consonant else return false.", "code": "def is_consonant(c):\n  return c.lower() in 'bcdfghjklmnpqrstvwxyz'", "task_id": "904_3e02e5b3-9bf4-4b68-b9d3-8189690df592", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return true if the given character is an uppercase letter else return false.", "code": "def is_uppercase(c):\n  return c.isupper()", "task_id": "904_657f602a-87d7-41a8-8bf4-548fc46b96fc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both dictionaries, concatenate the values as strings.", "code": "def merge_dicts(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = str(result[key]) + str(value)\n        else:\n            result[key] = value\n    return result", "task_id": "902_3233fa41-a7fd-4df7-aa9b-63a7953019a1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract the values of the second dictionary from the first dictionary for common keys.", "code": "def subtract_dicts(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] -= value\n    return result", "task_id": "902_5a2de5f9-3c67-4d1e-a293-3df990a608e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine two dictionaries by taking the maximum value for common keys.", "code": "def max_dicts(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = max(result[key], value)\n        else:\n            result[key] = value\n    return result", "task_id": "902_1f0f66f3-0d58-468f-9614-8b8e2276f22a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine two dictionaries by taking the minimum value for common keys.", "code": "def min_dicts(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = min(result[key], value)\n        else:\n            result[key] = value\n    return result", "task_id": "902_2df226f9-4c2a-4071-b919-30fc96d0e888", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the values of two dictionaries for common keys.", "code": "def multiply_dicts(d1, d2):\n    result = {}\n    for key in d1.keys() & d2.keys():\n        result[key] = d1[key] * d2[key]\n    return result", "task_id": "902_0066ffc8-5d15-41c9-8285-0e5857fe2897", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both dictionaries, add the values. If a key exists in only one dictionary, use a default value for the missing key.", "code": "def merge_dicts_with_default(d1, d2, default):\n    result = {}\n    keys = set(d1.keys()).union(d2.keys())\n    for key in keys:\n        result[key] = d1.get(key, default) + d2.get(key, default)\n    return result", "task_id": "902_b6b66b98-4804-48b4-bdce-f6124bfeffc8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine two dictionaries using a custom function for common keys.", "code": "def combine_dicts_with_function(d1, d2, func):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = func(result[key], value)\n        else:\n            result[key] = value\n    return result", "task_id": "902_e63bfc0d-eb9b-4680-946e-ca09253d5a9e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the values of two dictionaries for common keys, and keep the values from both dictionaries for unique keys.", "code": "def sum_dicts(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] += value\n        else:\n            result[key] = value\n    return result", "task_id": "902_7918f004-fdc1-4467-b8a6-e1236b990fac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both dictionaries, store the values as a list.", "code": "def merge_dicts_with_list(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = [result[key], value]\n        else:\n            result[key] = value\n    return result", "task_id": "902_101834eb-3dbb-4449-8005-20d0964829a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two dictionaries. If a key exists in both dictionaries, store the values as a set.", "code": "def merge_dicts_with_set(d1, d2):\n    result = d1.copy()\n    for key, value in d2.items():\n        if key in result:\n            result[key] = {result[key], value}\n        else:\n            result[key] = value\n    return result", "task_id": "902_666be9bc-ba28-40c1-be1f-43fa2695d2ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of odd digits from 1 to n.", "code": "def count_odd_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if (temp % 10) % 2 != 0:\n                cnt += 1\n            temp = temp // 10\n    return cnt", "task_id": "903_813e9d54-2e04-444a-90ff-379d17bf6afe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of even digits from 1 to n.", "code": "def count_even_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if (temp % 10) % 2 == 0:\n                cnt += 1\n            temp = temp // 10\n    return cnt", "task_id": "903_fdf24579-49c7-4f8f-861f-94420acdc81a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of prime digits from 1 to n.", "code": "def count_prime_digits(n):\n    prime_digits = {2, 3, 5, 7}\n    cnt = 0\n    for i in range(1, n + 1):\n        temp = i\n        while temp:\n            if temp % 10 in prime_digits:\n                cnt += 1\n            temp = temp // 10\n    return cnt", "task_id": "903_f3dcd858-7785-4462-a0cd-fb30d8fe9078", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of palindromic numbers from 1 to n.", "code": "def count_palindromic_numbers(n):\n    def is_palindrome(x):\n        return str(x) == str(x)[::-1]\n    cnt = 0\n    for i in range(1, n + 1):\n        if is_palindrome(i):\n            cnt += 1\n    return cnt", "task_id": "903_438d9381-6a56-4242-9391-dc0c4ce4891f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have an odd sum of digits.", "code": "def count_numbers_with_odd_sum_of_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        digit_sum = sum(int(d) for d in str(i))\n        if digit_sum % 2 != 0:\n            cnt += 1\n    return cnt", "task_id": "903_ad9214df-90b1-455c-a93b-113ff0923fd7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have an even sum of digits.", "code": "def count_numbers_with_even_sum_of_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        digit_sum = sum(int(d) for d in str(i))\n        if digit_sum % 2 == 0:\n            cnt += 1\n    return cnt", "task_id": "903_9a566d40-1cb5-4c0e-929f-1d97ce5f5ab2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have a prime sum of digits.", "code": "def count_numbers_with_prime_sum_of_digits(n):\n    def is_prime(x):\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    cnt = 0\n    for i in range(1, n + 1):\n        digit_sum = sum(int(d) for d in str(i))\n        if is_prime(digit_sum):\n            cnt += 1\n    return cnt", "task_id": "903_ee674153-bf3f-45b4-9797-e6305014cfa9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have no repeated digits.", "code": "def count_numbers_with_no_repeated_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        digits = str(i)\n        if len(digits) == len(set(digits)):\n            cnt += 1\n    return cnt", "task_id": "903_8aa8a85c-3b66-484d-9404-85ac1467e09b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have at least one zero in their digits.", "code": "def count_numbers_with_at_least_one_zero(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        if '0' in str(i):\n            cnt += 1\n    return cnt", "task_id": "903_4e242cd1-18a1-4c11-bfdb-d737fcc5d7b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the total number of numbers from 1 to n that have all the same digits.", "code": "def count_numbers_with_all_same_digits(n):\n    cnt = 0\n    for i in range(1, n + 1):\n        digits = str(i)\n        if all(d == digits[0] for d in digits):\n            cnt += 1\n    return cnt", "task_id": "903_ad839512-32bc-4bde-994c-15bbf9483758", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n: int) -> int:\n    return sum(i**3 for i in range(1, n+1))", "task_id": "905_ba59819c-e848-4c8d-b174-c334e1ecc2b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n even numbers.", "code": "def sum_of_even_squares(n: int) -> int:\n    return sum((2*i)**2 for i in range(1, n+1))", "task_id": "905_1e220100-12d6-4097-b10b-e507a186bb65", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n odd numbers.", "code": "def sum_of_odd_squares(n: int) -> int:\n    return sum((2*i-1)**2 for i in range(1, n+1))", "task_id": "905_e45e9b7d-b918-47a5-bc92-282eb57529e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of factorials of the first n natural numbers.", "code": "def factorial(x: int) -> int:\n    if x == 0 or x == 1:\n        return 1\n    return x * factorial(x-1)\n\ndef sum_of_factorials(n: int) -> int:\n    return sum(factorial(i) for i in range(1, n+1))", "task_id": "905_a285885b-50c1-4e18-9859-e85757bca878", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n natural numbers raised to the power of p.", "code": "def sum_of_powers(n: int, p: int) -> int:\n    return sum(i**p for i in range(1, n+1))", "task_id": "905_5c985707-af05-40ea-ad5d-2615791a345c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of the first n Fibonacci numbers.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\ndef sum_of_fibonacci_squares(n: int) -> int:\n    return sum(fibonacci(i)**2 for i in range(n))", "task_id": "905_3f5383a4-6d73-4273-a3f7-2152246691b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n prime numbers.", "code": "def is_prime(num: int) -> bool:\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef sum_of_primes(n: int) -> int:\n    count, num, total = 0, 2, 0\n    while count < n:\n        if is_prime(num):\n            total += num\n            count += 1\n        num += 1\n    return total", "task_id": "905_9698eb1b-0747-4c01-b5cb-127727dcd6a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of digits of a given number n.", "code": "def sum_of_squares_of_digits(n: int) -> int:\n    return sum(int(digit)**2 for digit in str(n))", "task_id": "905_739fa544-55aa-4c12-8cbc-84fd59e03409", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of all divisors of a given number n.", "code": "def sum_of_squares_of_divisors(n: int) -> int:\n    return sum(i**2 for i in range(1, n+1) if n % i == 0)", "task_id": "905_5fc60b89-1056-4340-853f-0f73fb7cb0b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of digits of all numbers in a given range [start, end].", "code": "def sum_of_squares_of_digits_in_range(start: int, end: int) -> int:\n    return sum(int(digit)**2 for num in range(start, end+1) for digit in str(num))", "task_id": "905_48ffcf45-7792-4d53-9d94-e9790e163730", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n prime numbers.", "code": "def prime_numbers(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        for p in primes:\n            if num % p == 0:\n                break\n        else:\n            primes.append(num)\n        num += 1\n    return primes", "task_id": "907_70c567ec-329b-49be-a5bf-3a19045b25cf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n Fibonacci numbers.", "code": "def fibonacci(n):\n    fibs = [0, 1]\n    for i in range(2, n):\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs[:n]", "task_id": "907_ff1a998c-8410-4816-b6e5-e8059471ead2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n square numbers.", "code": "def square_numbers(n):\n    return [i**2 for i in range(1, n+1)]", "task_id": "907_7e40537f-e4de-4eb5-a04e-11c8977b77bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n cube numbers.", "code": "def cube_numbers(n):\n    return [i**3 for i in range(1, n+1)]", "task_id": "907_07ab38a6-cee2-49f8-9368-a8c4839e1df0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n triangular numbers.", "code": "def triangular_numbers(n):\n    return [(i*(i+1))//2 for i in range(1, n+1)]", "task_id": "907_91eb4a09-26a4-43fd-bd6b-0decc3f24c1d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n pentagonal numbers.", "code": "def pentagonal_numbers(n):\n    return [(i*(3*i-1))//2 for i in range(1, n+1)]", "task_id": "907_cd81cce1-eac7-445c-8aa6-f75538050417", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n hexagonal numbers.", "code": "def hexagonal_numbers(n):\n    return [i*(2*i-1) for i in range(1, n+1)]", "task_id": "907_40df9394-1545-40a8-a427-94a745bec6ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n heptagonal numbers.", "code": "def heptagonal_numbers(n):\n    return [(i*(5*i-3))//2 for i in range(1, n+1)]", "task_id": "907_ff6a8295-9bed-4e44-b934-a7bc4efb77b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n octagonal numbers.", "code": "def octagonal_numbers(n):\n    return [i*(3*i-2) for i in range(1, n+1)]", "task_id": "907_95fa1d2e-e1a8-4db8-8274-30be4a31b005", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the first n factorial numbers.", "code": "def factorial_numbers(n):\n    fact = 1\n    result = []\n    for i in range(1, n+1):\n        fact *= i\n        result.append(fact)\n    return result", "task_id": "907_b4a3aeb6-a437-4d0c-9055-c224026dea06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first negative number in the given array.", "code": "def find_first_negative(arr):\n    for num in arr:\n        if num < 0:\n            return num\n    return -1", "task_id": "908_3fbb5865-b5fc-40d3-b286-7e7aa99b9929", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first even number in the given array.", "code": "def find_first_even(arr):\n    for num in arr:\n        if num % 2 == 0:\n            return num\n    return -1", "task_id": "908_1655ed2f-69f5-448f-bbcc-052b66ea1d90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first vowel in the given string.", "code": "def find_first_vowel(s):\n    vowels = 'aeiouAEIOU'\n    for char in s:\n        if char in vowels:\n            return char\n    return ''", "task_id": "908_62a413bc-ba25-421d-95b3-b8a089035a4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first uppercase letter in the given string.", "code": "def find_first_uppercase(s):\n    for char in s:\n        if char.isupper():\n            return char\n    return ''", "task_id": "908_267ae2f5-f0a3-4fee-afc3-fd0520a2230f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first duplicate number in the given array.", "code": "def find_first_duplicate(arr):\n    seen = set()\n    for num in arr:\n        if num in seen:\n            return num\n        seen.add(num)\n    return -1", "task_id": "908_f6614e24-2fbc-453d-bcad-fd65eb9618e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first palindrome in the given list of strings.", "code": "def find_first_palindrome(arr):\n    for word in arr:\n        if word == word[::-1]:\n            return word\n    return ''", "task_id": "908_8352274b-b731-4721-9fae-2cf6f532fccf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first prime number in the given array.", "code": "def find_first_prime(arr):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    for num in arr:\n        if is_prime(num):\n            return num\n    return -1", "task_id": "908_79b97ebc-c6e5-4f71-ad20-75469382a161", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first word in the given list of strings that is longer than a given length.", "code": "def find_first_long_word(arr, length):\n    for word in arr:\n        if len(word) > length:\n            return word\n    return ''", "task_id": "908_cc1d5743-8c18-4a29-be07-71f2cd815d1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first number in the given array that is a multiple of a given number n.", "code": "def find_first_multiple(arr, n):\n    for num in arr:\n        if num % n == 0:\n            return num\n    return -1", "task_id": "908_73d627ba-d839-491f-bbe2-02142ab3d438", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first number in the given array that is greater than a given number n.", "code": "def find_first_greater(arr, n):\n    for num in arr:\n        if num > n:\n            return num\n    return -1", "task_id": "908_22ed6101-b0b4-4416-ad60-4a6eff751412", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the next palindrome of a specified number.", "code": "def next_palindrome(num):\n    x = num + 1\n    while True:\n        if str(x) == str(x)[::-1]:\n            return x\n        x += 1", "task_id": "909_fd8ec93c-44bd-4b78-be61-c64dd86dc655", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a specified number is a prime number.", "code": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True", "task_id": "909_453ee779-21ad-40a7-9d80-f527dbcb1a7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the next prime number greater than a specified number.", "code": "def next_prime(num):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    x = num + 1\n    while True:\n        if is_prime(x):\n            return x\n        x += 1", "task_id": "909_24463c1b-749d-499a-8563-0756b6cbf541", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "909_8dcc4206-2737-4f8b-92dc-b6510655d81e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "909_b9b0aebb-8a23-429c-829e-5761537e3df0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return b", "task_id": "909_94e97bf7-0206-4809-a33f-26f6a935809e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result", "task_id": "909_6c8ec3f1-4f12-4192-9ede-f9fbcaf20a59", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "909_38e73ac6-6732-42c8-a510-b410c1d4451b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number.", "code": "def sum_of_digits(num):\n    return sum(int(digit) for digit in str(num))", "task_id": "909_50307d16-7e59-4c68-90ff-b23e28814f00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number is a perfect square.", "code": "def is_perfect_square(num):\n    return int(num**0.5)**2 == num", "task_id": "909_f68758f9-9f84-43c9-9355-787145403d52", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the maximum sum of three numbers from a given array of integers.", "code": "def max_sum_of_three(nums):\n    import heapq\n    return sum(heapq.nlargest(3, nums))", "task_id": "911_8f1667f7-0363-4bba-b354-09680619b20a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the minimum product of three numbers from a given array of integers.", "code": "def min_product_of_three(nums):\n    import heapq\n    a, b = heapq.nsmallest(3, nums), heapq.nlargest(2, nums)\n    return min(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "task_id": "911_b9611d5f-6d4b-4fe9-b724-341f32173f2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second largest number in a given array of integers.", "code": "def second_largest(nums):\n    import heapq\n    return heapq.nlargest(2, nums)[1]", "task_id": "911_941c2603-4fbe-4725-826b-55a095d50e73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the k-th smallest number in a given array of integers.", "code": "def kth_smallest(nums, k):\n    import heapq\n    return heapq.nsmallest(k, nums)[-1]", "task_id": "911_bfee2bd5-9cd1-43d3-8a78-f9693288268b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the maximum sum of k numbers from a given array of integers.", "code": "def max_sum_of_k(nums, k):\n    import heapq\n    return sum(heapq.nlargest(k, nums))", "task_id": "911_c0753147-9d1e-429e-914a-b238a09a0236", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the minimum sum of k numbers from a given array of integers.", "code": "def min_sum_of_k(nums, k):\n    import heapq\n    return sum(heapq.nsmallest(k, nums))", "task_id": "911_b92e3b44-456f-4d21-9d19-dd5edc1ce863", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum difference between two numbers in a given array of integers.", "code": "def max_diff_of_two(nums):\n    return max(nums) - min(nums)", "task_id": "911_ea6cc296-e2ca-4a78-bab0-8d2b94688dca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the third largest number in a given array of integers.", "code": "def third_largest(nums):\n    import heapq\n    return heapq.nlargest(3, nums)[2]", "task_id": "911_ef3fa31c-4f60-4c41-9580-db6155e24a29", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second smallest number in a given array of integers.", "code": "def second_smallest(nums):\n    import heapq\n    return heapq.nsmallest(2, nums)[1]", "task_id": "911_6848772c-7377-4f2a-89ef-c2b53908ca87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the maximum product of two numbers from a given array of integers.", "code": "def max_product_of_two(nums):\n    import heapq\n    a, b = heapq.nlargest(2, nums), heapq.nsmallest(2, nums)\n    return max(a[0] * a[1], b[0] * b[1])", "task_id": "911_b243a270-1eb0-432c-b350-25a4504a95ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given year is a leap year.", "code": "def is_leap_year(year: int) -> bool:\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "910_8c8fd32a-7ebe-4c0e-9a72-84d3b684b59c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the number of days in a given month of a specific year.", "code": "def days_in_month(month: int, year: int) -> int:\n    if month == 2:\n        if is_leap_year(year):\n            return 29\n        return 28\n    elif month in [4, 6, 9, 11]:\n        return 30\n    else:\n        return 31", "task_id": "910_26bc12d7-b027-484c-a8ae-7f6e29273ecd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to validate a given time in 24-hour format.", "code": "def is_valid_time(hour: int, minute: int, second: int) -> bool:\n    if 0 <= hour < 24 and 0 <= minute < 60 and 0 <= second < 60:\n        return True\n    return False", "task_id": "910_fdd7ca9c-678d-447e-8ad5-2b223f690b90", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day: int, month: int, year: int) -> str:\n    try:\n        date = datetime.date(year, month, day)\n        return date.strftime('%A')\n    except ValueError:\n        return 'Invalid date'", "task_id": "910_b5c59b55-3cff-42a1-b387-9d02b7df4874", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days between two dates.", "code": "import datetime\n\ndef days_between_dates(day1: int, month1: int, year1: int, day2: int, month2: int, year2: int) -> int:\n    date1 = datetime.date(year1, month1, day1)\n    date2 = datetime.date(year2, month2, day2)\n    return abs((date2 - date1).days)", "task_id": "910_c11e7e2c-3e1e-45b3-b8e8-fcc24c577dbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the next day for a given date.", "code": "import datetime\n\ndef next_day(day: int, month: int, year: int) -> tuple:\n    date = datetime.date(year, month, day)\n    next_date = date + datetime.timedelta(days=1)\n    return (next_date.day, next_date.month, next_date.year)", "task_id": "910_368a0f3f-b026-451e-9fce-3cad40fc9e21", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the previous day for a given date.", "code": "import datetime\n\ndef previous_day(day: int, month: int, year: int) -> tuple:\n    date = datetime.date(year, month, day)\n    previous_date = date - datetime.timedelta(days=1)\n    return (previous_date.day, previous_date.month, previous_date.year)", "task_id": "910_dcc10f42-e8dc-40a1-9875-f4505592949d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given date falls on a weekend.", "code": "import datetime\n\ndef is_weekend(day: int, month: int, year: int) -> bool:\n    date = datetime.date(year, month, day)\n    return date.weekday() >= 5", "task_id": "910_c026cd1f-9a3a-46d1-a17d-866b55b50b6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to add a given number of days to a specific date.", "code": "import datetime\n\ndef add_days(day: int, month: int, year: int, days_to_add: int) -> tuple:\n    date = datetime.date(year, month, day)\n    new_date = date + datetime.timedelta(days=days_to_add)\n    return (new_date.day, new_date.month, new_date.year)", "task_id": "910_9da07365-6c0c-488a-b378-0e8be41bb609", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to subtract a given number of days from a specific date.", "code": "import datetime\n\ndef subtract_days(day: int, month: int, year: int, days_to_subtract: int) -> tuple:\n    date = datetime.date(year, month, day)\n    new_date = date - datetime.timedelta(days=days_to_subtract)\n    return (new_date.day, new_date.month, new_date.year)", "task_id": "910_4cf020f1-df71-48f6-aa03-9372e103e884", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Catalan number.", "code": "def catalan_number(n: int) -> int:\n    if n == 0 or n == 1:\n        return 1\n    catalan = [0] * (n + 1)\n    catalan[0], catalan[1] = 1, 1\n    for i in range(2, n + 1):\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n    return catalan[n]", "task_id": "912_939c3e9e-2180-426c-8688-98093cc29f2c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b", "task_id": "912_ef79a0f5-4285-46cb-8755-b53743874f24", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of a number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result", "task_id": "912_6db6de20-b3f8-446c-9bab-3184f01a7c6a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "912_f9373341-8165-42ec-961e-61e0477a8729", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "912_ad0a4119-3d91-4bde-be00-7b17fcf4d5f5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number n is prime.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "task_id": "912_67fe2837-9232-4077-b8d3-2dec5ffdc102", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "912_f8deac3f-d20e-40ec-b585-633a878685bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of cubes of the first n natural numbers.", "code": "def sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "912_d9d3abcd-493e-4caf-81d4-e195fe0f29a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth row of Pascal's triangle.", "code": "def pascal_triangle_row(n: int) -> List[int]:\n    row = [1]\n    for k in range(1, n + 1):\n        row.append(row[-1] * (n - k + 1) // k)\n    return row", "task_id": "912_f726b0cd-f873-49b4-8c15-85a4bc073579", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "912_3184e1bd-1b2f-4f91-ab77-6ff50700cfff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string ends with a vowel.", "code": "import re\ndef has_vowel_at_end(string):\n    text = re.compile(r\".*[aeiouAEIOU]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_fce2733b-e48a-49bb-ad84-c06fe20b77a6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string ends with a special character (non-alphanumeric).", "code": "import re\ndef has_special_char_at_end(string):\n    text = re.compile(r\".*[^a-zA-Z0-9]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_60c735ad-6293-4b55-8bdd-aa7187f7d0ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string ends with an uppercase letter.", "code": "import re\ndef has_uppercase_at_end(string):\n    text = re.compile(r\".*[A-Z]$\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_2684b600-a810-4663-a3ff-9945e5c140d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with a digit.", "code": "import re\ndef has_digit_at_start(string):\n    text = re.compile(r\"^[0-9].*\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_78f2747b-7025-4bc6-b274-924eb8c0bcdf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with a vowel.", "code": "import re\ndef has_vowel_at_start(string):\n    text = re.compile(r\"^[aeiouAEIOU].*\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_899fc537-c187-4fd3-af1a-f32552e52aa5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with a special character (non-alphanumeric).", "code": "import re\ndef has_special_char_at_start(string):\n    text = re.compile(r\"^[^a-zA-Z0-9].*\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_918c361b-3b1f-40f8-b9a2-ba4baf32443e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string starts with an uppercase letter.", "code": "import re\ndef has_uppercase_at_start(string):\n    text = re.compile(r\"^[A-Z].*\")\n    if text.match(string):\n        return True\n    else:\n        return False", "task_id": "913_30beca18-6c5d-49c9-9477-72ea7ab0b90f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string contains a digit in the middle (not at the start or end).", "code": "import re\ndef has_digit_in_middle(string):\n    text = re.compile(r\"^.*[0-9].*$\")\n    if text.match(string) and not string[0].isdigit() and not string[-1].isdigit():\n        return True\n    else:\n        return False", "task_id": "913_1258f1d0-b445-4202-83c3-4c244db7dcae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string contains a vowel in the middle (not at the start or end).", "code": "import re\ndef has_vowel_in_middle(string):\n    text = re.compile(r\"^.*[aeiouAEIOU].*$\")\n    if text.match(string) and string[0].lower() not in 'aeiou' and string[-1].lower() not in 'aeiou':\n        return True\n    else:\n        return False", "task_id": "913_b8036b5f-6784-479c-a911-a4ca6327aa31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a string contains a special character (non-alphanumeric) in the middle (not at the start or end).", "code": "import re\ndef has_special_char_in_middle(string):\n    text = re.compile(r\"^.*[^a-zA-Z0-9].*$\")\n    if text.match(string) and string[0].isalnum() and string[-1].isalnum():\n        return True\n    else:\n        return False", "task_id": "913_175299fd-526b-4fb6-8c50-b364e41a314e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a palindrome or not.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "914_0e3453c6-c8de-4454-b85a-cf50ae3c1bab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string has all unique characters or not.", "code": "def has_unique_characters(s):\n    return len(s) == len(set(s))", "task_id": "914_ee9a08af-45a1-4d02-9bb5-0ec9ace2fa01", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the two given strings are anagrams of each other or not.", "code": "def is_anagram(s1, s2):\n    return sorted(s1) == sorted(s2)", "task_id": "914_20bc0058-c898-4414-aea6-0282cf246e68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the first string is a substring of the second string or not.", "code": "def is_substring(s1, s2):\n    return s1 in s2", "task_id": "914_612e3ee8-a0db-4701-9cf4-76d649f75849", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of vowels in the given string.", "code": "def count_vowels(s):\n    return sum(1 for char in s if char in 'aeiouAEIOU')", "task_id": "914_f07cecd5-5939-481a-b6ab-f3386b5b2134", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "914_82f58148-8e46-4cec-a145-7c05ad04e1de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is a binary string (contains only '0' and '1') or not.", "code": "def is_binary_string(s):\n    return all(char in '01' for char in s)", "task_id": "914_f5c68866-95eb-4af5-931d-7f4097cdf6bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all uppercase letters or not.", "code": "def is_all_uppercase(s):\n    return s.isupper()", "task_id": "914_e318c954-6cb1-4927-afd0-1aa124b07f3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is in all lowercase letters or not.", "code": "def is_all_lowercase(s):\n    return s.islower()", "task_id": "914_448bc711-2a37-4047-8a86-744e5ac6db2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the given string is made up of alternating uppercase and lowercase characters or not.", "code": "def is_alternating_case(s):\n    for i in range(len(s) - 1):\n        if s[i].islower() == s[i + 1].islower():\n            return False\n    return True", "task_id": "914_82011114-dcc4-4edc-92a0-3b322de087dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of one vowel followed by one or more consonants.", "code": "import re\n\ndef find_vowel_consonant_sequence(text):\n    patterns = '[aeiouAEIOU][bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_bd30e0d5-d483-46b3-9ea7-8faf631cf42c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of one digit followed by one or more letters.", "code": "import re\n\ndef find_digit_sequence(text):\n    patterns = '\\d+[a-zA-Z]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_415f8cae-a9d6-43b6-a938-25fe23cca39a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of one special character followed by one or more digits.", "code": "import re\n\ndef find_special_char_sequence(text):\n    patterns = '[!@#$%^&*()][0-9]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_4b5e3810-ede2-4250-8b5e-87617aa50821", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of one upper case letter followed by one or more digits.", "code": "import re\n\ndef find_uppercase_digit_sequence(text):\n    patterns = '[A-Z][0-9]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_2c324c70-b9b3-4ad9-9f42-bfbdde7a1945", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of one lower case letter followed by one or more special characters.", "code": "import re\n\ndef find_lowercase_special_sequence(text):\n    patterns = '[a-z][!@#$%^&*()]+$'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_9055bb3b-2106-4814-825e-09d50e0de0f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of alternating upper and lower case letters.", "code": "import re\n\ndef find_alternating_case_sequence(text):\n    patterns = '([A-Z][a-z])+|([a-z][A-Z])+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_31b5f491-b296-495f-9c17-94c80e3e3a34", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if a given string is a palindrome.", "code": "def find_palindrome(text):\n    if text == text[::-1]:\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_9939afeb-02f5-4b4f-8f16-ef0226a60347", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of repeated characters.", "code": "import re\n\ndef find_repeated_sequence(text):\n    patterns = r'(.)\\1+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_dc351a12-c50d-4f00-b951-93ed142dec10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of words separated by spaces.", "code": "import re\n\ndef find_word_boundary_sequence(text):\n    patterns = '\\b\\w+\\b'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_2b683026-b535-4fe0-ba83-5540975aa12c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find sequences of valid hexadecimal numbers.", "code": "import re\n\ndef find_hexadecimal_sequence(text):\n    patterns = '0[xX][0-9a-fA-F]+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "917_6f823909-8152-4337-ba6a-114db6764d69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange even and odd numbers in a given array using lambda function.", "code": "def rearrange_even_odd(array_nums):\n  result = sorted(array_nums, key = lambda x: x % 2)\n  return result", "task_id": "915_a6bf072b-9bb0-4994-9263-10e8063be46d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange words in a given list by their lengths using lambda function.", "code": "def rearrange_by_length(words):\n  result = sorted(words, key = lambda x: len(x))\n  return result", "task_id": "915_b37047dd-13ed-4032-8ed3-eb6704d3a781", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange numbers in a given array by their last digit using lambda function.", "code": "def rearrange_by_last_digit(array_nums):\n  result = sorted(array_nums, key = lambda x: x % 10)\n  return result", "task_id": "915_95451826-63a7-4e01-98be-8e267dd1a299", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange numbers in a given array by their absolute values using lambda function.", "code": "def rearrange_by_absolute_value(array_nums):\n  result = sorted(array_nums, key = lambda x: abs(x))\n  return result", "task_id": "915_56a519cb-d206-47b6-bcea-482dd9e5e678", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange words in a given list by the number of vowels they contain using lambda function.", "code": "def rearrange_by_vowel_count(words):\n  result = sorted(words, key = lambda x: sum(1 for char in x if char in 'aeiouAEIOU'))\n  return result", "task_id": "915_910b7623-abb7-4465-ab5c-2231f87b1f54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange words in a given list by their first character using lambda function.", "code": "def rearrange_by_first_char(words):\n  result = sorted(words, key = lambda x: x[0])\n  return result", "task_id": "915_cfa7ce69-98bd-4fc6-9deb-d8ebd95cb53e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange numbers in a given array by the sum of their digits using lambda function.", "code": "def rearrange_by_digit_sum(array_nums):\n  result = sorted(array_nums, key = lambda x: sum(int(digit) for digit in str(x)))\n  return result", "task_id": "915_81cf0629-5926-4801-922b-06607c9b7f43", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange numbers in a given array by their square values using lambda function.", "code": "def rearrange_by_square_value(array_nums):\n  result = sorted(array_nums, key = lambda x: x * x)\n  return result", "task_id": "915_fb5f2b50-276f-439d-85a3-e4c5c981f435", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange numbers in a given array by the number of factors they have using lambda function.", "code": "def rearrange_by_factor_count(array_nums):\n  def factor_count(n):\n    return len([i for i in range(1, n + 1) if n % i == 0])\n  result = sorted(array_nums, key = lambda x: factor_count(x))\n  return result", "task_id": "915_e1c4505a-37c4-499a-b43e-971be32e4103", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to rearrange words in a given list by the number of consonants they contain using lambda function.", "code": "def rearrange_by_consonant_count(words):\n  result = sorted(words, key = lambda x: sum(1 for char in x if char not in 'aeiouAEIOU' and char.isalpha()))\n  return result", "task_id": "915_2b385f05-18b5-40e6-b222-ad993080d860", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a pair in the array whose sum is equal to a given value.", "code": "def find_pair_with_sum(arr, target):\n    seen = set()\n    for num in arr:\n        if target - num in seen:\n            return (target - num, num)\n        seen.add(num)\n    return ()", "task_id": "916_2b136a39-c617-4a80-b29d-2f80250ab5d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose product is equal to a given value.", "code": "def find_triplet_product(arr, target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] * arr[j] * arr[k] == target:\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_684dd4f1-8a15-42b0-a4bd-6001fe4492bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a quadruplet in the array whose sum is equal to a given value.", "code": "def find_quadruplet_sum(arr, target):\n    n = len(arr)\n    for i in range(n-3):\n        for j in range(i+1, n-2):\n            for k in range(j+1, n-1):\n                for l in range(k+1, n):\n                    if arr[i] + arr[j] + arr[k] + arr[l] == target:\n                        return (arr[i], arr[j], arr[k], arr[l])\n    return ()", "task_id": "916_c790572b-d37e-44bb-8e6f-b704eee76b33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose difference is equal to a given value.", "code": "def find_triplet_with_diff(arr, target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if abs(arr[i] - arr[j] - arr[k]) == target:\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_1fb6bc2f-5824-4dd3-a0d4-26ca74361f22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a triplet in the array whose sum is closest to a given value.", "code": "def find_triplet_with_sum_closest(arr, target):\n    arr.sort()\n    closest_sum = float('inf')\n    closest_triplet = ()\n    n = len(arr)\n    for i in range(n-2):\n        left, right = i+1, n-1\n        while left < right:\n            current_sum = arr[i] + arr[left] + arr[right]\n            if abs(current_sum - target) < abs(closest_sum - target):\n                closest_sum = current_sum\n                closest_triplet = (arr[i], arr[left], arr[right])\n            if current_sum < target:\n                left += 1\n            else:\n                right -= 1\n    return closest_triplet", "task_id": "916_c12f9bff-06eb-4452-8925-f7309d0c8980", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a pair in the array whose product is equal to a given value.", "code": "def find_pair_with_product(arr, target):\n    seen = set()\n    for num in arr:\n        if target % num == 0 and target // num in seen:\n            return (num, target // num)\n        seen.add(num)\n    return ()", "task_id": "916_d9e873bd-d800-4024-a1ad-3b1ba2859ee0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value and whose product is equal to another given value.", "code": "def find_triplet_with_sum_and_product(arr, sum_target, product_target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == sum_target and arr[i] * arr[j] * arr[k] == product_target:\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_9774c779-002a-4836-834b-afa6bbf2d949", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value and whose difference is equal to another given value.", "code": "def find_triplet_with_sum_and_diff(arr, sum_target, diff_target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == sum_target and abs(arr[i] - arr[j] - arr[k]) == diff_target:\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_aefe2f09-14ed-49a4-8ace-9df860f63b69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value and two of the numbers in the triplet add up to another given value.", "code": "def find_triplet_with_sum_and_pair_sum(arr, sum_target, pair_sum_target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == sum_target and (arr[i] + arr[j] == pair_sum_target or arr[i] + arr[k] == pair_sum_target or arr[j] + arr[k] == pair_sum_target):\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_8e7caa18-217e-4b4a-843c-c6437b8130fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find if there is a triplet in the array whose sum is equal to a given value and two of the numbers in the triplet have a difference equal to another given value.", "code": "def find_triplet_with_sum_and_pair_diff(arr, sum_target, pair_diff_target):\n    n = len(arr)\n    for i in range(n-2):\n        for j in range(i+1, n-1):\n            for k in range(j+1, n):\n                if arr[i] + arr[j] + arr[k] == sum_target and (abs(arr[i] - arr[j]) == pair_diff_target or abs(arr[i] - arr[k]) == pair_diff_target or abs(arr[j] - arr[k]) == pair_diff_target):\n                    return (arr[i], arr[j], arr[k])\n    return ()", "task_id": "916_174a773a-f1f0-4cb9-a05e-dff5bc382bdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to sum all items in the list.", "code": "def sum_list(items):\n    tot = 0\n    for x in items:\n        tot += x\n    return tot", "task_id": "919_37548cb9-ceeb-4f40-b7ca-a1d799bd5684", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum item in the list.", "code": "def max_list(items):\n    max_item = items[0]\n    for x in items:\n        if x > max_item:\n            max_item = x\n    return max_item", "task_id": "919_fa6351fb-8ded-4158-ae69-6a5fbed5f12b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum item in the list.", "code": "def min_list(items):\n    min_item = items[0]\n    for x in items:\n        if x < min_item:\n            min_item = x\n    return min_item", "task_id": "919_911556ba-aa19-449f-8728-789f61fa5b3c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the average of all items in the list.", "code": "def average_list(items):\n    tot = sum(items)\n    return tot / len(items)", "task_id": "919_64bbecae-765a-45da-8c7b-1065f779efa1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the occurrences of a target value in the list.", "code": "def count_occurrences(items, target):\n    count = 0\n    for x in items:\n        if x == target:\n            count += 1\n    return count", "task_id": "919_d9544942-f995-4981-b966-86ca47ab3d73", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the order of items in the list.", "code": "def reverse_list(items):\n    return items[::-1]", "task_id": "919_05bf8f05-2ec4-42b7-b01e-598c5a57f9c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate items from the list.", "code": "def remove_duplicates(items):\n    return list(set(items))", "task_id": "919_d609786a-c390-4e35-a426-afdc6fb59624", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the index of a target value in the list.", "code": "def find_index(items, target):\n    for i, x in enumerate(items):\n        if x == target:\n            return i\n    return -1", "task_id": "919_1f6af0f3-caa7-4b38-a490-a0453070e58e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the list is sorted in ascending order.", "code": "def is_sorted(items):\n    return items == sorted(items)", "task_id": "919_28b66be3-9797-400e-9683-5013e5b102bf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest item in the list.", "code": "def second_largest(items):\n    unique_items = list(set(items))\n    unique_items.sort()\n    return unique_items[-2]", "task_id": "919_d2e16f96-2562-4361-a65b-b0eba7f4418f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all empty strings in the given tuple list.", "code": "def remove_empty_strings(test_list):\n  res = [sub for sub in test_list if not all(ele == '' for ele in sub)]\n  return str(res)", "task_id": "920_11297385-9071-49cc-a4a9-40e62f5184e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all zero values in the given tuple list.", "code": "def remove_zero_tuples(test_list):\n  res = [sub for sub in test_list if not all(ele == 0 for ele in sub)]\n  return str(res)", "task_id": "920_0fba1e04-ce09-4403-9f1d-9732de07e928", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all False values in the given tuple list.", "code": "def remove_false_tuples(test_list):\n  res = [sub for sub in test_list if not all(ele == False for ele in sub)]\n  return str(res)", "task_id": "920_ff4fc8db-a7f5-47ed-80b5-cd0452f12250", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all empty lists in the given tuple list.", "code": "def remove_empty_lists(test_list):\n  res = [sub for sub in test_list if not all(ele == [] for ele in sub)]\n  return str(res)", "task_id": "920_75a4646b-f00e-4683-926c-aed541711370", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all empty dictionaries in the given tuple list.", "code": "def remove_empty_dicts(test_list):\n  res = [sub for sub in test_list if not all(ele == {} for ele in sub)]\n  return str(res)", "task_id": "920_b4fd9792-7ca1-402f-a52c-d9a14fc636ea", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all empty sets in the given tuple list.", "code": "def remove_empty_sets(test_list):\n  res = [sub for sub in test_list if not all(ele == set() for ele in sub)]\n  return str(res)", "task_id": "920_e2c3daf4-e01f-4457-94ab-0a8840bb811b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all None or empty string values in the given tuple list.", "code": "def remove_none_or_empty_strings(test_list):\n  res = [sub for sub in test_list if not all(ele in (None, '') for ele in sub)]\n  return str(res)", "task_id": "920_24882a5e-44a3-4fe0-9b11-5887ad50e560", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all None or zero values in the given tuple list.", "code": "def remove_none_or_zero(test_list):\n  res = [sub for sub in test_list if not all(ele in (None, 0) for ele in sub)]\n  return str(res)", "task_id": "920_33d9533f-aa86-4255-8fb2-b2344a14d496", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all None or False values in the given tuple list.", "code": "def remove_none_or_false(test_list):\n  res = [sub for sub in test_list if not all(ele in (None, False) for ele in sub)]\n  return str(res)", "task_id": "920_e8d0dade-eb08-4aa2-89a9-40af6a6c2687", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all tuples with all None or empty list values in the given tuple list.", "code": "def remove_none_or_empty_lists(test_list):\n  res = [sub for sub in test_list if not all(ele in (None, []) for ele in sub)]\n  return str(res)", "task_id": "920_eb0beacb-dfa1-426b-a482-856b043bb6c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of lists each of size n.", "code": "def chunk_list(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]", "task_id": "921_4159434c-f668-40d5-b7f9-e34c728a9919", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of a string into substrings each of size n.", "code": "def chunk_string(s, n):\n    return [s[i:i + n] for i in range(0, len(s), n)]", "task_id": "921_2fdba096-c12b-4888-8801-e6af47f13fb7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of lists each of size n, including the remainder as the last chunk if it is smaller than n.", "code": "def chunk_list_with_remainder(lst, n):\n    return [lst[i:i + n] for i in range(0, len(lst), n)]", "task_id": "921_0dc76a9e-7464-4c47-9aa7-9bb30c2f39f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of a string into substrings each of size n, including the remainder as the last chunk if it is smaller than n.", "code": "def chunk_string_with_remainder(s, n):\n    return [s[i:i + n] for i in range(0, len(s), n)]", "task_id": "921_5a3e9711-1f1f-4092-9efb-7b49d4d94392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of lists each of size n, padding the last chunk with a specified value if it is smaller than n.", "code": "def chunk_list_with_padding(lst, n, pad_value):\n    res = [lst[i:i + n] for i in range(0, len(lst), n)]\n    if len(res[-1]) < n:\n        res[-1].extend([pad_value] * (n - len(res[-1])))\n    return res", "task_id": "921_f82cd6ff-ae0f-477c-b4d6-c25ee412410c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of a string into substrings each of size n, padding the last chunk with a specified character if it is smaller than n.", "code": "def chunk_string_with_padding(s, n, pad_char):\n    res = [s[i:i + n] for i in range(0, len(s), n)]\n    if len(res[-1]) < n:\n        res[-1] += pad_char * (n - len(res[-1]))\n    return res", "task_id": "921_2443db87-bba2-40ff-b5ac-ae1058ca3d86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of lists each of size n and return a dictionary with chunk indices as keys.", "code": "def chunk_list_to_dict(lst, n):\n    return {i: lst[i:i + n] for i in range(0, len(lst), n)}", "task_id": "921_3636d813-e8a3-4e7f-87ba-78ce51779afd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of a string into substrings each of size n and return a dictionary with chunk indices as keys.", "code": "def chunk_string_to_dict(s, n):\n    return {i: s[i:i + n] for i in range(0, len(s), n)}", "task_id": "921_82b476b0-c4a3-4452-81a7-07ce3b5d88ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of lists each of size n and include the starting index of each chunk.", "code": "def chunk_list_with_indices(lst, n):\n    return [(i, lst[i:i + n]) for i in range(0, len(lst), n)]", "task_id": "921_5ad9d632-5ca8-46ea-bd34-8ce3a8d006b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform chunking of a string into substrings each of size n and include the starting index of each chunk.", "code": "def chunk_string_with_indices(s, n):\n    return [(i, s[i:i + n]) for i in range(0, len(s), n)]", "task_id": "921_751b7e36-4860-4584-b210-9dd69920eb63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of two numbers.", "code": "def min_of_two(a: int, b: int) -> int:\n    if a < b:\n        return a\n    return b", "task_id": "924_cbd8e108-feae-4cae-aed7-a069f7a55599", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "924_f9f148e1-b0e9-4bae-91d7-c17a0e79a797", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "924_4b8b9012-0ca4-4456-aa6e-ef80f1920331", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compare two strings and return the one that comes first alphabetically.", "code": "def compare_strings(s1: str, s2: str) -> str:\n    if s1 < s2:\n        return s1\n    return s2", "task_id": "924_bd682bad-6d76-49d4-a985-794c4437cae3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the longest of two strings.", "code": "def longest_string(s1: str, s2: str) -> str:\n    if len(s1) > len(s2):\n        return s1\n    return s2", "task_id": "924_7b6e5dfe-7c10-4c80-9f8a-1c621fad4c86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the shortest of two strings.", "code": "def shortest_string(s1: str, s2: str) -> str:\n    if len(s1) < len(s2):\n        return s1\n    return s2", "task_id": "924_d39aff89-460a-49e7-a678-888072c47c31", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the absolute difference between two numbers.", "code": "def absolute_difference(a: int, b: int) -> int:\n    return abs(a - b)", "task_id": "924_489f92e0-11fb-4358-8c69-7c84b52dece7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of two numbers.", "code": "def sum_of_two(a: int, b: int) -> int:\n    return a + b", "task_id": "924_25bfd5ab-98fe-424d-830b-900f07b49a0b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of two numbers.", "code": "def product_of_two(a: int, b: int) -> int:\n    return a * b", "task_id": "924_a8edf19a-0e83-4d13-a89a-6d71004d4254", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number is even.", "code": "def is_even(n: int) -> bool:\n    return n % 2 == 0", "task_id": "924_2484f4a5-14bb-472e-aec1-a2ac0cdbf4cc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair with the highest sum from a given array of integers.", "code": "def max_sum_pair(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None \n    x = arr[0]; y = arr[1] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] + arr[j] > x + y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "922_f42baf41-d462-42f1-b15e-485fc08c741c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair with the lowest product from a given array of integers.", "code": "def min_product_pair(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None \n    x = arr[0]; y = arr[1] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] * arr[j] < x * y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "922_2b735a0a-a848-4084-9867-37943991b8ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a triplet with the highest sum from a given array of integers.", "code": "def max_sum_triplet(arr): \n    arr_len = len(arr) \n    if (arr_len < 3): \n        return None \n    x = arr[0]; y = arr[1]; z = arr[2] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            for k in range(j + 1, arr_len): \n                if (arr[i] + arr[j] + arr[k] > x + y + z): \n                    x = arr[i]; y = arr[j]; z = arr[k] \n    return x,y,z", "task_id": "922_cfa176c5-7f69-41ae-a1cb-f7f241827271", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a triplet with the highest product from a given array of integers.", "code": "def max_product_triplet(arr): \n    arr_len = len(arr) \n    if (arr_len < 3): \n        return None \n    x = arr[0]; y = arr[1]; z = arr[2] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            for k in range(j + 1, arr_len): \n                if (arr[i] * arr[j] * arr[k] > x * y * z): \n                    x = arr[i]; y = arr[j]; z = arr[k] \n    return x,y,z", "task_id": "922_c63e13b3-446f-41da-8b95-e1056a5a26b9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair with the lowest sum from a given array of integers.", "code": "def min_sum_pair(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None \n    x = arr[0]; y = arr[1] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (arr[i] + arr[j] < x + y): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "922_636113f8-28fb-42ed-992d-33b99649450b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a triplet with the lowest sum from a given array of integers.", "code": "def min_sum_triplet(arr): \n    arr_len = len(arr) \n    if (arr_len < 3): \n        return None \n    x = arr[0]; y = arr[1]; z = arr[2] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            for k in range(j + 1, arr_len): \n                if (arr[i] + arr[j] + arr[k] < x + y + z): \n                    x = arr[i]; y = arr[j]; z = arr[k] \n    return x,y,z", "task_id": "922_b471b178-ea17-4b63-b520-f67628b862ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair with the highest absolute difference from a given array of integers.", "code": "def max_abs_diff_pair(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None \n    x = arr[0]; y = arr[1] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (abs(arr[i] - arr[j]) > abs(x - y)): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "922_e15300c7-c281-4ce8-9d3c-4e2035fab09f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find a pair with the lowest absolute difference from a given array of integers.", "code": "def min_abs_diff_pair(arr): \n    arr_len = len(arr) \n    if (arr_len < 2): \n        return None \n    x = arr[0]; y = arr[1] \n    for i in range(0, arr_len): \n        for j in range(i + 1, arr_len): \n            if (abs(arr[i] - arr[j]) < abs(x - y)): \n                x = arr[i]; y = arr[j] \n    return x,y", "task_id": "922_1cfa6eb2-ff50-49d4-8d43-b9e5d917dabc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum sum of a contiguous subarray from a given array of integers.", "code": "def max_sum_subarray(arr): \n    max_sum = arr[0] \n    current_sum = arr[0] \n    for i in range(1, len(arr)): \n        current_sum = max(arr[i], current_sum + arr[i]) \n        max_sum = max(max_sum, current_sum) \n    return max_sum", "task_id": "922_ff65f305-cbc4-4416-9c51-e620caad0ccf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum sum of a contiguous subarray from a given array of integers.", "code": "def min_sum_subarray(arr): \n    min_sum = arr[0] \n    current_sum = arr[0] \n    for i in range(1, len(arr)): \n        current_sum = min(arr[i], current_sum + arr[i]) \n        min_sum = min(min_sum, current_sum) \n    return min_sum", "task_id": "922_9c3a6044-a5e6-46f0-9ce6-8975e7ab228a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the sum of all the numbers of a given tuple.", "code": "def sum_tuple(nums):\n    return sum(nums)", "task_id": "925_a15dcdb3-0ffb-40c0-9369-7c82a236d402", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum number in a given tuple.", "code": "def max_tuple(nums):\n    return max(nums)", "task_id": "925_5eb6c0ab-baea-4e3f-bd9b-6bacffd971df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number in a given tuple.", "code": "def min_tuple(nums):\n    return min(nums)", "task_id": "925_25c92e38-940d-49a2-881d-72e339933a54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to calculate the average of all the numbers of a given tuple.", "code": "def average_tuple(nums):\n    return sum(nums) / len(nums)", "task_id": "925_53a5918e-9f2d-4eb1-95e1-99a24e89ee98", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of zeros in a given tuple.", "code": "def count_zeros(nums):\n    return nums.count(0)", "task_id": "925_d2420bdb-1161-4aa4-a8e9-6592bce6b282", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the elements of a given tuple.", "code": "def reverse_tuple(nums):\n    return nums[::-1]", "task_id": "925_dddeaa2c-895a-454c-89d1-7e0fcf6d27ac", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a tuple containing only the even numbers from a given tuple.", "code": "def even_numbers_tuple(nums):\n    return tuple(x for x in nums if x % 2 == 0)", "task_id": "925_a4ca048c-7208-4f42-8cfc-4020363aa76c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a tuple containing only the odd numbers from a given tuple.", "code": "def odd_numbers_tuple(nums):\n    return tuple(x for x in nums if x % 2 != 0)", "task_id": "925_368c5a38-f921-4d92-b1d2-7c935de3a9f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a given tuple to a list.", "code": "def tuple_to_list(nums):\n    return list(nums)", "task_id": "925_443b9452-4728-46c6-837e-f04fb3188789", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert a given tuple of integers to a string, with each integer separated by a comma.", "code": "def tuple_to_string(nums):\n    return ','.join(map(str, nums))", "task_id": "925_55a288d0-6dad-416e-b11d-8b4037aa26bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest common subsequence between two strings.", "code": "def common_subseq_length(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[m][n]", "task_id": "923_f5a00b59-d07d-406e-9df8-da71588323dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the shortest common supersequence of two strings.", "code": "def shortest_common_supersequence(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    i, j = m, n\n    scs = []\n    while i > 0 and j > 0:\n        if str1[i - 1] == str2[j - 1]:\n            scs.append(str1[i - 1])\n            i -= 1\n            j -= 1\n        elif dp[i - 1][j] > dp[i][j - 1]:\n            scs.append(str1[i - 1])\n            i -= 1\n        else:\n            scs.append(str2[j - 1])\n            j -= 1\n    while i > 0:\n        scs.append(str1[i - 1])\n        i -= 1\n    while j > 0:\n        scs.append(str2[j - 1])\n        j -= 1\n    return ''.join(reversed(scs))", "task_id": "923_6dea0c3e-7b74-4d50-aa70-0cd5ea10784c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if one string is a subsequence of another string.", "code": "def is_subsequence(s, t):\n    it = iter(t)\n    return all(c in it for c in s)", "task_id": "923_fd11ce04-f1cc-496c-9d76-e9294bb4a9e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest palindromic subsequence in a string.", "code": "def longest_palindromic_subsequence(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i][j - 1], dp[i + 1][j])\n    return dp[0][n - 1]", "task_id": "923_aa3f1bd0-11ae-4257-8fdd-f79f8a7acc69", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of insertions needed to make a string a palindrome.", "code": "def min_insertions_to_palindrome(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n    return dp[0][n - 1]", "task_id": "923_50d85f57-d09e-47f5-85fa-5b9d90beb7da", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of deletions needed to make a string a palindrome.", "code": "def min_deletions_to_palindrome(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1]\n            else:\n                dp[i][j] = min(dp[i][j - 1], dp[i + 1][j]) + 1\n    return dp[0][n - 1]", "task_id": "923_67955015-711a-4f3c-9368-a93dc01ffb1f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest repeating subsequence in a string.", "code": "def longest_repeating_subsequence(s):\n    n = len(s)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            if s[i - 1] == s[j - 1] and i != j:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n    return dp[n][n]", "task_id": "923_5f664a33-fa66-4fde-9703-4f85a3c6b4a7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of operations (insertions, deletions, or substitutions) required to convert one string into another.", "code": "def min_operations_to_convert(str1, str2):\n    m, n = len(str1), len(str2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0:\n                dp[i][j] = j\n            elif j == 0:\n                dp[i][j] = i\n            elif str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1]\n            else:\n                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1], dp[i - 1][j - 1])\n    return dp[m][n]", "task_id": "923_f46e3a8c-6fd7-47e3-87d6-300c430ebb45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the length of the longest increasing subsequence in an array of integers.", "code": "def longest_increasing_subsequence(arr):\n    if not arr:\n        return 0\n    n = len(arr)\n    lis = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and lis[i] < lis[j] + 1:\n                lis[i] = lis[j] + 1\n    return max(lis)", "task_id": "923_a8e4f27d-3cea-4caf-9195-19afad098d76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of jumps required to reach the end of an array, where each element in the array represents the maximum jump length at that position.", "code": "def min_jumps_to_end(arr):\n    n = len(arr)\n    if n <= 1:\n        return 0\n    if arr[0] == 0:\n        return float('inf')\n    max_reach = arr[0]\n    step = arr[0]\n    jump = 1\n    for i in range(1, n):\n        if i == n - 1:\n            return jump\n        max_reach = max(max_reach, i + arr[i])\n        step -= 1\n        if step == 0:\n            jump += 1\n            if i >= max_reach:\n                return float('inf')\n            step = max_reach - i\n    return float('inf')", "task_id": "923_34e57f5d-d7a1-405b-bbdb-23390f688c7f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the n-th Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)", "task_id": "926_1da308a5-a419-4cba-9ad4-f01ca6e27596", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "926_454ea165-0ba9-4800-b796-1f76f12a5b13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of squares of the first n natural numbers.", "code": "def sum_of_squares(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n * n + sum_of_squares(n-1)", "task_id": "926_9cd782f2-0218-4c14-b8d2-f4b7a182ccf5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers a and b.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    else:\n        return gcd(b, a % b)", "task_id": "926_640a3bc3-b2dd-439f-ac11-f3f47e490ccd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers a and b.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        else:\n            return gcd(b, a % b)\n    return abs(a * b) // gcd(a, b)", "task_id": "926_93fb8915-3dde-42eb-9e8a-7eead93872c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given number n is a prime number.", "code": "def is_prime(n: int) -> bool:\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "926_e0e85560-df90-4faa-bdc6-48c86a781e76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string s.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "926_37fc86e0-fb5f-433f-8ebe-cfa92834b086", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string s is a palindrome.", "code": "def palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "926_4cbed38e-4633-41e5-88a7-8b7bf513014c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_of_digits(n // 10)", "task_id": "926_7c5721ac-613f-41fc-a696-965e38da1215", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate x raised to the power n.", "code": "def power(x: int, n: int) -> int:\n    if n == 0:\n        return 1\n    else:\n        return x * power(x, n-1)", "task_id": "926_14fadcd8-7b25-4108-946b-fb336516821c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the depth of the given binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef depth_of_tree(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\tleft_depth = depth_of_tree(root.left)\n\t\tright_depth = depth_of_tree(root.right)\n\t\treturn max(left_depth, right_depth) + 1", "task_id": "927_350111a7-3062-453f-a0c8-e7ce4fbae372", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of nodes in a given binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef count_nodes(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn 1 + count_nodes(root.left) + count_nodes(root.right)", "task_id": "927_450c558b-663f-4c46-8cb5-ca80d74bee39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of all nodes' values in a given binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef sum_of_nodes(root):\n\tif root is None:\n\t\treturn 0\n\telse:\n\t\treturn root.data + sum_of_nodes(root.left) + sum_of_nodes(root.right)", "task_id": "927_b4aac3fa-8c5c-429c-845c-ce14ac456a3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given binary tree is balanced. A balanced tree is defined as one where the heights of the two subtrees of any node never differ by more than one.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef height(node):\n\tif node is None:\n\t\treturn 0\n\tleft_height = height(node.left)\n\tright_height = height(node.right)\n\treturn max(left_height, right_height) + 1\n\ndef is_balanced(root):\n\tif root is None:\n\t\treturn True\n\tleft_height = height(root.left)\n\tright_height = height(root.right)\n\tif abs(left_height - right_height) > 1:\n\t\treturn False\n\telse:\n\t\treturn is_balanced(root.left) and is_balanced(root.right)", "task_id": "927_2b913f2f-8f8e-4aaa-8520-c271c8bbf8dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum value in a given binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef find_min_value(root):\n\tif root is None:\n\t\treturn float('inf')\n\tleft_min = find_min_value(root.left)\n\tright_min = find_min_value(root.right)\n\treturn min(root.data, left_min, right_min)", "task_id": "927_ad435e83-9679-45a7-8577-34c68443c5cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum value in a given binary tree.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef find_max_value(root):\n\tif root is None:\n\t\treturn float('-inf')\n\tleft_max = find_max_value(root.left)\n\tright_max = find_max_value(root.right)\n\treturn max(root.data, left_max, right_max)", "task_id": "927_6a02fab5-e502-4604-b431-1fbd26cb384a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform a preorder traversal of a given binary tree and return the list of visited nodes.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef preorder_traversal(root):\n\tif root is None:\n\t\treturn []\n\treturn [root.data] + preorder_traversal(root.left) + preorder_traversal(root.right)", "task_id": "927_cc1692e2-fcda-47de-ba2e-94d455f11e6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform an inorder traversal of a given binary tree and return the list of visited nodes.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef inorder_traversal(root):\n\tif root is None:\n\t\treturn []\n\treturn inorder_traversal(root.left) + [root.data] + inorder_traversal(root.right)", "task_id": "927_d5469be3-8b70-4f98-9bea-22a03022b08e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform a postorder traversal of a given binary tree and return the list of visited nodes.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef postorder_traversal(root):\n\tif root is None:\n\t\treturn []\n\treturn postorder_traversal(root.left) + postorder_traversal(root.right) + [root.data]", "task_id": "927_5592330d-fb2f-43dc-a689-22005915ff46", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to perform a level-order traversal (breadth-first traversal) of a given binary tree and return the list of visited nodes.", "code": "class Node:\n\tdef __init__(self, data):\n\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\ndef level_order_traversal(root):\n\tif root is None:\n\t\treturn []\n\tqueue = [root]\n\tresult = []\n\twhile queue:\n\t\tnode = queue.pop(0)\n\t\tresult.append(node.data)\n\t\tif node.left:\n\t\t\tqueue.append(node.left)\n\t\tif node.right:\n\t\t\tqueue.append(node.right)\n\treturn result", "task_id": "927_aae84f7e-b7c0-4a11-ac5c-7a350d538cab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count repeated items of a list.", "code": "def count_listx(lst, value):\n  count = lst.count(value)\n  return count", "task_id": "929_93ee5952-41a3-4402-b24a-5f610e9f5806", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in the values of a dictionary.", "code": "def count_dictx(d, value):\n  count = list(d.values()).count(value)\n  return count", "task_id": "929_64d45ff0-8f32-4f2a-af92-c65c9302e574", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a value appears in a set.", "code": "def count_setx(s, value):\n  return 1 if value in s else 0", "task_id": "929_673002fd-c41d-4c34-ba61-d72bb7c15b6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count repeated characters in a string.", "code": "def count_strx(s, char):\n  count = s.count(char)\n  return count", "task_id": "929_83ac7cac-d932-4281-9ef7-e0d316ee199a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in a list of tuples.", "code": "def count_list_of_tuples(lst, value):\n  count = sum(t.count(value) for t in lst)\n  return count", "task_id": "929_53060dcf-36e8-4645-8ab1-1f379d83e592", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in a nested list.", "code": "def count_nested_list(lst, value):\n  count = sum(sublist.count(value) for sublist in lst)\n  return count", "task_id": "929_4616813b-16ba-4ddb-8ccd-e24baa978c9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a key appears in a dictionary.", "code": "def count_dict_keys(d, key):\n  return 1 if key in d else 0", "task_id": "929_d243abaf-9434-4aae-a52e-7ae12c8c9f26", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in a tuple of lists.", "code": "def count_tuple_of_lists(t, value):\n  count = sum(lst.count(value) for lst in t)\n  return count", "task_id": "929_5a36714e-e0f8-4d96-a5a9-8d5137a0293d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in the values of a list of dictionaries.", "code": "def count_list_of_dicts(lst, value):\n  count = sum(d.values().count(value) for d in lst)\n  return count", "task_id": "929_c860259c-40ac-423f-8d40-aaa58771574d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count how many times a value appears in the values of a tuple of dictionaries.", "code": "def count_tuple_of_dicts(t, value):\n  count = sum(list(d.values()).count(value) for d in t)\n  return count", "task_id": "929_9ed13029-f7af-4bbb-a7b3-36d963596285", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date of yyyy/mm/dd format to dd/mm/yyyy format.", "code": "import re\ndef convert_date_format(date):\n    return re.sub(r'(\\d{4})/(\\d{1,2})/(\\d{1,2})', '\\\\3/\\\\2/\\\\1', date)", "task_id": "928_06bd6d34-2f82-4fd6-929b-24b0b331de88", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date of dd-mm-yyyy format to yyyy-mm-dd format.", "code": "import re\ndef swap_date_format(date):\n    return re.sub(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})', '\\\\3-\\\\2-\\\\1', date)", "task_id": "928_b0677258-853b-4c9f-8fbb-255329fde392", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert time from hh:mm:ss format to ss:mm:hh format.", "code": "import re\ndef convert_time_format(time):\n    return re.sub(r'(\\d{1,2}):(\\d{1,2}):(\\d{1,2})', '\\\\3:\\\\2:\\\\1', time)", "task_id": "928_3796022a-6bc3-49f9-b53e-8ec86e03c762", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a datetime from yyyy-mm-dd hh:mm:ss format to dd-mm-yyyy ss:mm:hh format.", "code": "import re\ndef convert_datetime_format(datetime):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2}) (\\d{1,2}):(\\d{1,2}):(\\d{1,2})', '\\\\3-\\\\2-\\\\1 \\\\6:\\\\5:\\\\4', datetime)", "task_id": "928_3ce7d608-b7e4-4cf9-bd1d-6090c8e6aff6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the date format from yyyy-mm-dd to yyyy-dd-mm.", "code": "import re\ndef reverse_date_format(date):\n    return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\1-\\\\3-\\\\2', date)", "task_id": "928_1543f8e3-d83e-4afc-937e-8d5b3728ba86", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date from mm/dd/yyyy format to dd/mm/yyyy format.", "code": "import re\ndef convert_us_to_eu_date(date):\n    return re.sub(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})', '\\\\2/\\\\1/\\\\3', date)", "task_id": "928_99191b3c-6b3d-455e-92d4-b67fea8229dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date from dd/mm/yyyy format to mm/dd/yyyy format.", "code": "import re\ndef convert_eu_to_us_date(date):\n    return re.sub(r'(\\d{1,2})/(\\d{1,2})/(\\d{4})', '\\\\2/\\\\1/\\\\3', date)", "task_id": "928_4473ac90-0c91-46d2-b41e-52462ff5e577", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date from 'yyyy month dd' format to 'dd month yyyy' format.", "code": "import re\ndef convert_date_with_words(date):\n    return re.sub(r'(\\d{4}) (\\w+) (\\d{1,2})', '\\\\3 \\\\2 \\\\1', date)", "task_id": "928_0b0abd64-1254-4351-ae0f-629e9498739f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date from yyyy.mm.dd format to dd.mm.yyyy format.", "code": "import re\ndef convert_date_with_dots(date):\n    return re.sub(r'(\\d{4})\\.(\\d{1,2})\\.(\\d{1,2})', '\\\\3.\\\\2.\\\\1', date)", "task_id": "928_fcf8a41c-b173-4122-bd0a-8484297f1359", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a date from yyyy mm dd format to dd mm yyyy format.", "code": "import re\ndef convert_date_with_spaces(date):\n    return re.sub(r'(\\d{4}) (\\d{1,2}) (\\d{1,2})', '\\\\3 \\\\2 \\\\1', date)", "task_id": "928_3d8e8026-680a-4c87-bdf8-c3031c03cce9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has a b followed by one or more a's by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ba+'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_14e041bd-96f1-455d-910c-b0d42868ac10", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by exactly two b's by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab{2}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_9272c894-39f9-48dd-9d13-c20ff84d4ae4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and then a c by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab+c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_79f8f8aa-e109-42b3-ac4c-5c6041860d81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or one b's by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab?'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_19348782-56e6-4965-863e-1079b630c66a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by exactly three b's by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab{3}'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_622d8b3c-da94-4878-8cf5-c0ba74d57076", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or more b's and ends with a c by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab*c'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_9c0072b1-58bb-40ae-982a-acd0258e1e17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and ends with a d by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab+d'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_89c7878a-d4ae-4adb-af0b-d8ece5fba4bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by exactly two b's and ends with an e by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab{2}e'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_25aea262-8b03-49a2-ac0f-4aaf4b37813e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by zero or more b's and then an f by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab*f'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_f364a9fb-0d9d-4c5c-b03f-bdb8236f3306", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that matches a string that has an a followed by one or more b's and then a g by using regex.", "code": "import re\ndef match_string(text):\n    patterns = 'ab+g'\n    if re.search(patterns, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'", "task_id": "930_63367df6-a243-4051-b51a-ef7d2535b459", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "code": "def sum_of_squares(n: int) -> int:\n    return n * (n + 1) * (2 * n + 1) // 6", "task_id": "931_af09120d-4943-4310-9f93-e08fa3f04046", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n even numbers.", "code": "def sum_even_numbers(n: int) -> int:\n    return n * (n + 1)", "task_id": "931_40201443-9595-44e6-9860-f81b031401e8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n odd numbers.", "code": "def sum_odd_numbers(n: int) -> int:\n    return n * n", "task_id": "931_fa172be8-3197-46cf-91d0-ed99b077512f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of an arithmetic series with first term a and common difference d.", "code": "def sum_arithmetic_series(a: int, d: int, n: int) -> int:\n    return n * (2 * a + (n - 1) * d) // 2", "task_id": "931_2cabc9a7-4c57-48a5-b61d-06fef76d1009", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n terms of a geometric series with first term a and common ratio r.", "code": "def sum_geometric_series(a: int, r: int, n: int) -> int:\n    if r == 1:\n        return a * n\n    return a * (1 - r ** n) // (1 - r)", "task_id": "931_4aca06f6-f771-44cd-801e-90536a953c13", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n natural numbers.", "code": "def factorial_sum(n: int) -> int:\n    def factorial(x: int) -> int:\n        if x == 0 or x == 1:\n            return 1\n        return x * factorial(x - 1)\n    return sum(factorial(i) for i in range(1, n + 1))", "task_id": "931_6cac2911-1e18-4d94-abff-b84affad5fe1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def sum_fibonacci(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    total = 1\n    for _ in range(2, n):\n        a, b = b, a + b\n        total += b\n    return total", "task_id": "931_465ca385-cec3-4180-ac9d-8ad4dff9953b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    return sum(int(digit) for digit in str(n))", "task_id": "931_03408650-c9db-49db-8512-5b7a78dcd125", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n prime numbers.", "code": "def sum_of_primes(n: int) -> int:\n    def is_prime(x: int) -> bool:\n        if x < 2:\n            return False\n        for i in range(2, int(x ** 0.5) + 1):\n            if x % i == 0:\n                return False\n        return True\n    count, total, num = 0, 0, 2\n    while count < n:\n        if is_prime(num):\n            total += num\n            count += 1\n        num += 1\n    return total", "task_id": "931_f59ef728-3a5f-40f6-a47c-38c60b3414b5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n multiples of a given number k.", "code": "def sum_of_multiples(k: int, n: int) -> int:\n    return k * n * (n + 1) // 2", "task_id": "931_00c8f366-a982-45d2-9d9c-a4bc4d950c81", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate numbers from a given list of integers.", "code": "def remove_duplic_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_f5798b8d-ae1f-40d7-b352-b88acb5c6338", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given string.", "code": "def unique_chars(s):\n    temp = ''\n    for x in s:\n        if x not in temp:\n            temp += x\n    return temp", "task_id": "932_0d25ca7f-48ac-4d4f-a8c2-c74e59ad59aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate tuples from a given list of tuples.", "code": "def remove_duplic_tuples(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_373a9c2d-df47-4e27-a818-7281f76d8f3d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate dictionaries from a given list of dictionaries.", "code": "def remove_duplic_dicts(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_747a9fa7-e70b-489c-8d6d-19c45944f62c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate lists from a given list of lists.", "code": "def remove_duplic_lists(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_9a835f37-30df-466d-ae33-7a655a5b358a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate sets from a given list of sets.", "code": "def remove_duplic_sets(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_f19be57b-3f02-4b9b-af82-1774be30b425", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate floating-point numbers from a given list of floats.", "code": "def remove_duplic_floats(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_89282fcc-b16e-4061-9b79-73c69d61858f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate words from a given string.", "code": "def remove_duplic_words(s):\n    words = s.split()\n    temp = []\n    for word in words:\n        if word not in temp:\n            temp.append(word)\n    return ' '.join(temp)", "task_id": "932_ccf32003-417f-4e27-b0a0-12c4988e483f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate characters from a given list of characters.", "code": "def remove_duplic_chars_list(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_09b28869-83be-45fd-8be7-228dbf334728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicate elements from a given list of mixed data types.", "code": "def remove_duplic_mixed(l):\n    temp = []\n    for x in l:\n        if x not in temp:\n            temp.append(x)\n    return temp", "task_id": "932_e18ff84a-ce44-42b2-85cf-0fcd7169c6a9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value.", "code": "def min_coins(coins, m, V):\n    table = [0] + [float('inf')] * V\n    for i in range(1, V + 1):\n        for j in range(m):\n            if coins[j] <= i:\n                sub_res = table[i - coins[j]]\n                if sub_res != float('inf') and sub_res + 1 < table[i]:\n                    table[i] = sub_res + 1\n    return table[V] if table[V] != float('inf') else -1", "task_id": "918_acf21639-796b-4e8a-bd5d-f5eaeeed2f2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount using the given coin denominations.", "code": "def count_ways_to_make_change(coins, m, n):\n    table = [0] * (n + 1)\n    table[0] = 1\n    for i in range(m):\n        for j in range(coins[i], n + 1):\n            table[j] += table[j - coins[i]]\n    return table[n]", "task_id": "918_3268447e-35b6-4b27-b3c7-1fa9128f3cee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return all unique combinations of coin denominations that sum up to a given amount.", "code": "def coin_combinations(coins, m, n):\n    def backtrack(start, target, path):\n        if target == 0:\n            result.append(path)\n            return\n        for i in range(start, m):\n            if coins[i] <= target:\n                backtrack(i, target - coins[i], path + [coins[i]])\n    result = []\n    backtrack(0, n, [])\n    return result", "task_id": "918_0f42aa7c-efdd-488e-9d59-e339625467f7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value, considering a limit on the number of each coin.", "code": "def min_coins_with_limit(coins, limits, n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(len(coins)):\n        for j in range(n, coins[i] - 1, -1):\n            for k in range(1, limits[i] + 1):\n                if j >= k * coins[i]:\n                    dp[j] = min(dp[j], dp[j - k * coins[i]] + k)\n    return dp[n] if dp[n] != float('inf') else -1", "task_id": "918_8b89add8-1b16-4cb9-9b98-19ed4163b484", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount, considering a limit on the number of each coin.", "code": "def ways_to_make_change_with_limit(coins, limits, n):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(len(coins)):\n        for j in range(n, coins[i] - 1, -1):\n            for k in range(1, limits[i] + 1):\n                if j >= k * coins[i]:\n                    dp[j] += dp[j - k * coins[i]]\n    return dp[n]", "task_id": "918_43f0fab3-0bb7-4ddd-ae73-3b9b54244557", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount using exactly k coins.", "code": "def coin_change_with_exactly_k_coins(coins, m, n, k):\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i][j] += dp[i - coin][j - 1]\n    return dp[n][k]", "task_id": "918_dc61626b-4156-4345-a903-18d1d60c150a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number of coins that make a given value using exactly k coins.", "code": "def min_coins_to_make_change_with_exactly_k_coins(coins, m, n, k):\n    dp = [[float('inf')] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 0\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i][j] = min(dp[i][j], dp[i - coin][j - 1] + 1)\n    return dp[n][k] if dp[n][k] != float('inf') else -1", "task_id": "918_22d54dd1-e66d-4c7c-83bf-09f86d93bcec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount using at least min_coins and at most max_coins.", "code": "def coin_change_with_min_and_max_coins(coins, m, n, min_coins, max_coins):\n    dp = [[0] * (max_coins + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, max_coins + 1):\n            for coin in coins:\n                if i >= coin:\n                    dp[i][j] += dp[i - coin][j - 1]\n    return sum(dp[n][min_coins:max_coins + 1])", "task_id": "918_62405913-d74c-4062-af2a-9034bc7c9d12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount using exactly k distinct coins.", "code": "def coin_change_with_exactly_k_distinct_coins(coins, m, n, k):\n    from itertools import combinations\n    count = 0\n    for comb in combinations(coins, k):\n        dp = [0] * (n + 1)\n        dp[0] = 1\n        for coin in comb:\n            for j in range(coin, n + 1):\n                dp[j] += dp[j - coin]\n        count += dp[n]\n    return count", "task_id": "918_c8286d80-7e01-4096-9613-d4fb72de9ca3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for a given amount using coins with denominations up to a given maximum value.", "code": "def coin_change_with_max_denomination(coins, m, n, max_denomination):\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for coin in coins:\n        if coin <= max_denomination:\n            for j in range(coin, n + 1):\n                dp[j] += dp[j - coin]\n    return dp[n]", "task_id": "918_a60bf46b-6ca8-41ba-ad21-62b9195db6bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert kebab case string to snake case string.", "code": "def kebab_to_snake(text):\n  return text.replace('-', '_')", "task_id": "933_83d54448-2740-44fe-af0b-d6a285b6d2e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert snake case string to camel case string.", "code": "def snake_to_camel(text):\n  components = text.split('_')\n  return components[0] + ''.join(x.title() for x in components[1:])", "task_id": "933_a84f000f-628e-4024-8428-7a01d7de4315", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert camel case string to kebab case string by using regex.", "code": "import re\n\ndef camel_to_kebab(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1-\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', str1).lower()", "task_id": "933_5b21fc0b-b548-4f7b-b232-2ff7957e0054", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Pascal case string to snake case string by using regex.", "code": "import re\n\ndef pascal_to_snake(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "task_id": "933_3a88f546-c08e-4b01-9303-8468e4646007", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert snake case string to kebab case string.", "code": "def snake_to_kebab(text):\n  return text.replace('_', '-')", "task_id": "933_b205774d-f077-438e-b7d0-48f304bc527f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert kebab case string to camel case string.", "code": "def kebab_to_camel(text):\n  components = text.split('-')\n  return components[0] + ''.join(x.title() for x in components[1:])", "task_id": "933_1c305da4-d4e4-41af-b31e-3363d16e47ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert camel case string to Pascal case string.", "code": "def camel_to_pascal(text):\n  return text[0].upper() + text[1:]", "task_id": "933_2d6fb03c-b319-452e-9413-9a7ee42041c4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Pascal case string to kebab case string by using regex.", "code": "import re\n\ndef pascal_to_kebab(text):\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1-\\2', text)\n  return re.sub('([a-z0-9])([A-Z])', r'\\1-\\2', str1).lower()", "task_id": "933_b9621542-2eb2-4954-9c2f-74a7e4d4983a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert Pascal case string to camel case string.", "code": "def pascal_to_camel(text):\n  return text[0].lower() + text[1:]", "task_id": "933_3bc8b01b-923b-415d-b0c0-5a7ac6da269a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert snake case string to Pascal case string.", "code": "def snake_to_pascal(text):\n  components = text.split('_')\n  return ''.join(x.title() for x in components)", "task_id": "933_b7632db6-7899-4c97-a3a4-62939cdf1584", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the nth Fibonacci number.", "code": "def fibonacci(n: int) -> int:\n    if n <= 1:\n        return n\n    return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "934_9868a7ab-a685-416f-afd2-fa96350bce22", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the factorial of a given number n.", "code": "def factorial(n: int) -> int:\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)", "task_id": "934_a60272f7-0ce5-4c58-8194-af86811aff64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a: int, b: int) -> int:\n    if b == 0:\n        return a\n    return gcd(b, a % b)", "task_id": "934_898d7f16-119b-43fc-a2b5-17dc27f5f920", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common multiple (LCM) of two numbers.", "code": "def lcm(a: int, b: int) -> int:\n    def gcd(a: int, b: int) -> int:\n        if b == 0:\n            return a\n        return gcd(b, a % b)\n    return abs(a * b) // gcd(a, b)", "task_id": "934_d875450f-dbe5-4c2c-b34b-3a0e8a23f670", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number n.", "code": "def sum_of_digits(n: int) -> int:\n    if n == 0:\n        return 0\n    return n % 10 + sum_of_digits(n // 10)", "task_id": "934_f03dee0d-3138-4585-be64-880095ce76b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s: str) -> str:\n    if len(s) == 0:\n        return s\n    return reverse_string(s[1:]) + s[0]", "task_id": "934_a5f314e0-97b5-4520-b7e9-df566808d6fd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    if len(s) <= 1:\n        return True\n    if s[0] != s[-1]:\n        return False\n    return is_palindrome(s[1:-1])", "task_id": "934_b6077b2c-421f-46ac-8c36-d20ceafa6a53", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate x raised to the power n.", "code": "def power(x: int, n: int) -> int:\n    if n == 0:\n        return 1\n    return x * power(x, n - 1)", "task_id": "934_dcea5bc7-382e-4dc8-be36-8f22d52edb16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all elements in a given array.", "code": "def sum_of_array(arr: list) -> int:\n    if len(arr) == 0:\n        return 0\n    return arr[0] + sum_of_array(arr[1:])", "task_id": "934_7a723046-1011-4706-8819-9267b96fdd1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s: str) -> int:\n    if len(s) == 0:\n        return 0\n    if s[0].lower() in 'aeiou':\n        return 1 + count_vowels(s[1:])\n    return count_vowels(s[1:])", "task_id": "934_44d9a952-c2e1-46e6-b471-285f9780198b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "code": "def sum_of_cubes(n: int) -> int:\n    return (n * (n + 1) // 2) ** 3", "task_id": "935_373179dd-13d3-4344-9595-2ac5c448db47", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n odd numbers.", "code": "def sum_of_odds(n: int) -> int:\n    return n * n", "task_id": "935_7a6318b6-ddbb-422f-903c-85b4563a6764", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n even numbers.", "code": "def sum_of_evens(n: int) -> int:\n    return n * (n + 1)", "task_id": "935_352fdddd-a1e8-4a07-9901-27fb7932644b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the factorials of the first n natural numbers.", "code": "def sum_of_factorials(n: int) -> int:\n    from math import factorial\n    return sum(factorial(i) for i in range(1, n + 1))", "task_id": "935_d0234048-ffd6-4351-b89f-34d2abaa6df9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n Fibonacci numbers.", "code": "def sum_of_fibonacci(n: int) -> int:\n    a, b = 0, 1\n    total = 0\n    for _ in range(n):\n        total += b\n        a, b = b, a + b\n    return total", "task_id": "935_db0c72ba-07a7-4f85-aaab-fcf32f5dd999", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n odd numbers.", "code": "def sum_of_squares_of_odds(n: int) -> int:\n    return sum((2 * i + 1) ** 2 for i in range(n))", "task_id": "935_b9e7a5e1-d6b3-48b0-816d-77d73b0c0565", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the squares of the first n even numbers.", "code": "def sum_of_squares_of_evens(n: int) -> int:\n    return sum((2 * i) ** 2 for i in range(1, n + 1))", "task_id": "935_ada9c666-4d00-4ca7-ae15-30d9aec1ec9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the first n natural numbers raised to the power of p.", "code": "def sum_of_powers(n: int, p: int) -> int:\n    return sum(i ** p for i in range(1, n + 1))", "task_id": "935_017894b7-b628-40cd-b1cf-a7f3ca02de67", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the reciprocals of the first n natural numbers.", "code": "def sum_of_reciprocals(n: int) -> float:\n    return sum(1 / i for i in range(1, n + 1))", "task_id": "935_25e2295e-74bc-4268-978e-0960e51c8e37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of the series 1-2+3-4+5-6+...\u00b1n.", "code": "def sum_of_alternating_series(n: int) -> int:\n    return sum(i if i % 2 != 0 else -i for i in range(1, n + 1))", "task_id": "935_6dfd0149-6d77-4c80-bfc6-7b6e5bfa82ef", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the second element of each tuple.", "code": "def sort_tuples_by_second_element(tuples):\n    return sorted(tuples, key=lambda x: x[1])", "task_id": "936_fe403856-bdfa-431f-8895-97cbcfd58417", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to filter out tuples where the second element is less than a given threshold.", "code": "def filter_tuples_by_threshold(tuples, threshold):\n    return [t for t in tuples if t[1] >= threshold]", "task_id": "936_f87cacbf-100d-4c14-a687-c6b81999cc27", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to swap the elements of each tuple in a list of tuples.", "code": "def swap_tuple_elements(tuples):\n    return [(y, x) for x, y in tuples]", "task_id": "936_6d31e9ab-b947-4af2-8d4f-b8484a03613c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two lists of tuples by concatenating the tuples at the same index.", "code": "def merge_tuples(tuples1, tuples2):\n    return [(a + b) for a, b in zip(tuples1, tuples2)]", "task_id": "936_4e863357-7310-4c9c-8fa5-c8809f7a68b0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sum the elements of each tuple in a list of tuples.", "code": "def sum_tuple_elements(tuples):\n    return [sum(t) for t in tuples]", "task_id": "936_f0aa3980-fadc-4112-9e90-a0096ae98d4d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to multiply the elements of each tuple in a list of tuples.", "code": "def multiply_tuple_elements(tuples):\n    return [x * y for x, y in tuples]", "task_id": "936_129fa5fa-ff1c-4904-88ea-68269fd66efd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum element in each tuple in a list of tuples.", "code": "def find_max_in_tuples(tuples):\n    return [max(t) for t in tuples]", "task_id": "936_80a9bd4f-b8c7-47dc-a950-2a7b3b0867cb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum element in each tuple in a list of tuples.", "code": "def find_min_in_tuples(tuples):\n    return [min(t) for t in tuples]", "task_id": "936_ba9cf0ae-f113-4cad-a2b0-2175921dbd19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples into a dictionary where the first element of each tuple is the key and the second element is the value.", "code": "def tuples_to_dict(tuples):\n    return {k: v for k, v in tuples}", "task_id": "936_bff786b0-2961-46e6-89ba-170339254cf7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the order of elements in each tuple in a list of tuples.", "code": "def reverse_tuples(tuples):\n    return [t[::-1] for t in tuples]", "task_id": "936_5d328403-46ce-468c-98e9-d0062dd37e35", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the least common character in a given string.", "code": "from collections import Counter \ndef min_char(s): \n    temp = Counter(s) \n    min_char = min(temp, key = temp.get) \n    return min_char", "task_id": "937_46ff514f-50a7-4491-a696-7c71f84704f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return a dictionary with the frequency of each character in a given string.", "code": "from collections import Counter \ndef char_frequency(s): \n    return dict(Counter(s))", "task_id": "937_bd59d81f-b31b-4aac-bc13-e9c2126c6bc3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second most common character in a given string.", "code": "from collections import Counter \ndef second_most_common_char(s): \n    temp = Counter(s) \n    most_common_chars = temp.most_common(2) \n    return most_common_chars[1][0] if len(most_common_chars) > 1 else None", "task_id": "937_c738672a-cd9d-43e7-b8b2-b65a48a220fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the character with the highest ASCII value in a given string.", "code": "def char_with_max_ascii(s): \n    return max(s, key=ord)", "task_id": "937_def03993-5854-4403-8d88-48e91ae135dc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the character with the lowest ASCII value in a given string.", "code": "def char_with_min_ascii(s): \n    return min(s, key=ord)", "task_id": "937_0765ce90-4dca-4222-b03f-55d86119f13f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common vowel in a given string.", "code": "from collections import Counter \ndef most_common_vowel(s): \n    vowels = 'aeiouAEIOU' \n    temp = Counter(char for char in s if char in vowels) \n    return max(temp, key=temp.get) if temp else None", "task_id": "937_8599f1de-b2d2-401a-98d5-7f5a1be834d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common consonant in a given string.", "code": "from collections import Counter \ndef most_common_consonant(s): \n    vowels = 'aeiouAEIOU' \n    temp = Counter(char for char in s if char.isalpha() and char not in vowels) \n    return max(temp, key=temp.get) if temp else None", "task_id": "937_ccf0d9cd-7676-4bd2-84ec-769379e7c90f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common digit in a given string.", "code": "from collections import Counter \ndef most_common_digit(s): \n    temp = Counter(char for char in s if char.isdigit()) \n    return max(temp, key=temp.get) if temp else None", "task_id": "937_03c9204e-4609-4b23-b046-91bee6eff351", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common uppercase letter in a given string.", "code": "from collections import Counter \ndef most_common_uppercase(s): \n    temp = Counter(char for char in s if char.isupper()) \n    return max(temp, key=temp.get) if temp else None", "task_id": "937_a35bb719-c472-4e23-b02b-4f378715d0aa", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common lowercase letter in a given string.", "code": "from collections import Counter \ndef most_common_lowercase(s): \n    temp = Counter(char for char in s if char.islower()) \n    return max(temp, key=temp.get) if temp else None", "task_id": "937_4a60b285-7b59-45f4-8f66-44d12e9e629a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'age' key using a lambda function.", "code": "def sort_by_age(people):\n    sorted_people = sorted(people, key=lambda x: x['age'])\n    return sorted_people", "task_id": "939_a99904f1-810a-45a5-8dbe-febd5e5d1a33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the length of the 'name' key using a lambda function.", "code": "def sort_by_name_length(names):\n    sorted_names = sorted(names, key=lambda x: len(x['name']))\n    return sorted_names", "task_id": "939_e9ffc7fb-466f-48db-abfd-53d2fadfb416", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'price' key using a lambda function.", "code": "def sort_by_price(products):\n    sorted_products = sorted(products, key=lambda x: x['price'])\n    return sorted_products", "task_id": "939_f96f3259-b5a2-494b-965d-2194bfa1e084", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'last_name' key using a lambda function.", "code": "def sort_by_last_name(people):\n    sorted_people = sorted(people, key=lambda x: x['last_name'])\n    return sorted_people", "task_id": "939_d441d599-467e-43a3-986b-a8eea2b225b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'height' key using a lambda function.", "code": "def sort_by_height(people):\n    sorted_people = sorted(people, key=lambda x: x['height'])\n    return sorted_people", "task_id": "939_0aafc169-d010-459b-adf2-7a3ac060143f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'score' key using a lambda function.", "code": "def sort_by_score(students):\n    sorted_students = sorted(students, key=lambda x: x['score'])\n    return sorted_students", "task_id": "939_fda505ac-6273-44bc-953e-763f62124631", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'birthdate' key using a lambda function.", "code": "def sort_by_birthdate(people):\n    sorted_people = sorted(people, key=lambda x: x['birthdate'])\n    return sorted_people", "task_id": "939_fe6f85f1-157b-402c-a9d6-b0556206b1cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'salary' key using a lambda function.", "code": "def sort_by_salary(employees):\n    sorted_employees = sorted(employees, key=lambda x: x['salary'])\n    return sorted_employees", "task_id": "939_3d1afadf-9835-4993-9726-215d0375a07f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'duration' key using a lambda function.", "code": "def sort_by_duration(events):\n    sorted_events = sorted(events, key=lambda x: x['duration'])\n    return sorted_events", "task_id": "939_56c5f88e-13a2-417a-86e2-1228bcb4a9ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of dictionaries by the 'rating' key using a lambda function.", "code": "def sort_by_rating(movies):\n    sorted_movies = sorted(movies, key=lambda x: x['rating'])\n    return sorted_movies", "task_id": "939_6f9bbbb7-394b-4758-9778-b85107f0c598", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the string elements in a list until an element is a tuple.", "code": "def count_strings_until_tuple(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, tuple):\n            break\n        if isinstance(elem, str):\n            count += 1\n    return count", "task_id": "941_6fe8ad57-b20a-4b7d-9d8d-7fcefca6691e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is a dictionary.", "code": "def count_until_dict(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, dict):\n            break\n        count += 1\n    return count", "task_id": "941_3c2290ec-cf4c-4ae8-847a-71551455ef0c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the integer elements in a list until an element is a float.", "code": "def count_integers_until_float(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, float):\n            break\n        if isinstance(elem, int):\n            count += 1\n    return count", "task_id": "941_d87fa35a-3757-4101-98d1-158e561d83f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is a negative number.", "code": "def count_until_negative(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, (int, float)) and elem < 0:\n            break\n        count += 1\n    return count", "task_id": "941_8211480c-f1fe-4c38-9089-2b95b8358a18", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is a string.", "code": "def count_until_string(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, str):\n            break\n        count += 1\n    return count", "task_id": "941_a565b9c8-c8fb-4230-b297-5862973e1f3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is an even number.", "code": "def count_until_even(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, int) and elem % 2 == 0:\n            break\n        count += 1\n    return count", "task_id": "941_f7d075c8-e427-4c19-8609-7b2ebe50c4ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is another list.", "code": "def count_until_list(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, list):\n            break\n        count += 1\n    return count", "task_id": "941_6d355972-0505-4875-b907-5c9d90bf1538", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is None.", "code": "def count_until_none(lst):\n    count = 0\n    for elem in lst:\n        if elem is None:\n            break\n        count += 1\n    return count", "task_id": "941_166cffff-1583-49a0-8358-b1300b0e430f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is greater than ten.", "code": "def count_until_greater_than_ten(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, (int, float)) and elem > 10:\n            break\n        count += 1\n    return count", "task_id": "941_7a140755-b4d6-4e82-a9a1-7a3568757631", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the elements in a list until an element is a boolean.", "code": "def count_until_boolean(lst):\n    count = 0\n    for elem in lst:\n        if isinstance(elem, bool):\n            break\n        count += 1\n    return count", "task_id": "941_06c3b34b-312e-48d2-a3e4-2c8c8aadb2bb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using merge sort.", "code": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        L = arr[:mid]\n        R = arr[mid:]\n        merge_sort(L)\n        merge_sort(R)\n        i = j = k = 0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return arr", "task_id": "940_917632a8-e4b7-44d9-ac2f-f0b2b09ef5ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using quick sort.", "code": "def quick_sort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quick_sort(left) + middle + quick_sort(right)", "task_id": "940_d595fce8-6977-4dd6-9f71-aaa14d17129a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using bubble sort.", "code": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr", "task_id": "940_79e762be-574a-41c2-b7b8-0028b42d74dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using insertion sort.", "code": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n    return arr", "task_id": "940_6c7183e0-2c42-46e5-84a0-b314539e96e0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using selection sort.", "code": "def selection_sort(arr):\n    for i in range(len(arr)):\n        min_idx = i\n        for j in range(i+1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    return arr", "task_id": "940_975ebf08-5d35-42a2-9954-9f974639ee3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using counting sort. Assume all elements are non-negative and less than or equal to max_val.", "code": "def counting_sort(arr, max_val):\n    m = max_val + 1\n    count = [0] * m\n    for a in arr:\n        count[a] += 1\n    i = 0\n    for a in range(m):\n        for c in range(count[a]):\n            arr[i] = a\n            i += 1\n    return arr", "task_id": "940_34024a59-1a1d-4648-9e7b-0de4fb792d7d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using radix sort.", "code": "def counting_sort_for_radix(arr, exp):\n    n = len(arr)\n    output = [0] * n\n    count = [0] * 10\n    for i in range(n):\n        index = arr[i] // exp\n        count[index % 10] += 1\n    for i in range(1, 10):\n        count[i] += count[i - 1]\n    i = n - 1\n    while i >= 0:\n        index = arr[i] // exp\n        output[count[index % 10] - 1] = arr[i]\n        count[index % 10] -= 1\n        i -= 1\n    for i in range(len(arr)):\n        arr[i] = output[i]\n\ndef radix_sort(arr):\n    max1 = max(arr)\n    exp = 1\n    while max1 // exp > 0:\n        counting_sort_for_radix(arr, exp)\n        exp *= 10\n    return arr", "task_id": "940_2258ee35-317c-40f1-b17f-00a3b429d921", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using shell sort.", "code": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr", "task_id": "940_e9cb8ff0-64ec-4879-af77-1fc1e7a2f686", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array of floating-point numbers by using bucket sort.", "code": "def bucket_sort(arr):\n    bucket = [[] for _ in range(len(arr))]\n    for num in arr:\n        index = int(num * len(arr))\n        bucket[index].append(num)\n    for i in range(len(arr)):\n        bucket[i] = sorted(bucket[i])\n    k = 0\n    for i in range(len(arr)):\n        for j in range(len(bucket[i])):\n            arr[k] = bucket[i][j]\n            k += 1\n    return arr", "task_id": "940_5b6c02ca-45b1-46b6-8838-bab369784dad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort the given array by using cocktail shaker sort.", "code": "def cocktail_sort(arr):\n    n = len(arr)\n    swapped = True\n    start = 0\n    end = n - 1\n    while swapped:\n        swapped = False\n        for i in range(start, end):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                swapped = True\n        if not swapped:\n            break\n        swapped = False\n        end -= 1\n        for i in range(end - 1, start - 1, -1):\n            if arr[i] > arr[i + 1]:\n                arr[i], arr[i + 1] = arr[i + 1], arr[i]\n                swapped = True\n        start += 1\n    return arr", "task_id": "940_fdef2acd-b1d9-44f3-9c58-e69ee2e9f292", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest pair of elements from two sorted arrays.", "code": "def find_closest_pair(A, B):\n    i, j = 0, 0\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j < len(B):\n        diff = abs(A[i] - B[j])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if A[i] < B[j]:\n            i += 1\n        else:\n            j += 1\n    return closest_pair", "task_id": "938_b8b99647-8a76-4bea-831e-591946157570", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements from two sorted arrays whose sum is closest to a given target.", "code": "def find_closest_sum_pair(A, B, target):\n    i, j = 0, len(B) - 1\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j >= 0:\n        sum_val = A[i] + B[j]\n        diff = abs(sum_val - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if sum_val < target:\n            i += 1\n        else:\n            j -= 1\n    return closest_pair", "task_id": "938_cf9bd492-a578-45f5-86db-c928286cfe6e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the triplet of elements from three sorted arrays whose sum is closest to a given target.", "code": "def find_closest_triplet(A, B, C, target):\n    closest_triplet = (A[0], B[0], C[0])\n    min_diff = float('inf')\n    for i in range(len(A)):\n        j, k = 0, len(C) - 1\n        while j < len(B) and k >= 0:\n            sum_val = A[i] + B[j] + C[k]\n            diff = abs(sum_val - target)\n            if diff < min_diff:\n                min_diff = diff\n                closest_triplet = (A[i], B[j], C[k])\n            if sum_val < target:\n                j += 1\n            else:\n                k -= 1\n    return closest_triplet", "task_id": "938_96fb520a-d318-4f23-ab6b-c8d8a152903e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the closest element to a given target in a sorted array.", "code": "def find_closest_element(A, target):\n    left, right = 0, len(A) - 1\n    closest = A[0]\n    min_diff = float('inf')\n    while left <= right:\n        mid = (left + right) // 2\n        diff = abs(A[mid] - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest = A[mid]\n        if A[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return closest", "task_id": "938_195ea363-0910-4041-8ba7-16c1c972cfbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements in a sorted array whose sum is closest to a given target.", "code": "def find_closest_pair_sum(A, target):\n    left, right = 0, len(A) - 1\n    closest_pair = (A[0], A[1])\n    min_diff = float('inf')\n    while left < right:\n        sum_val = A[left] + A[right]\n        diff = abs(sum_val - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[left], A[right])\n        if sum_val < target:\n            left += 1\n        else:\n            right -= 1\n    return closest_pair", "task_id": "938_6eefc90b-507d-446e-a7a7-304bf5bf65b2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements from two sorted arrays whose product is closest to a given target.", "code": "def find_closest_pair_product(A, B, target):\n    i, j = 0, len(B) - 1\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j >= 0:\n        product = A[i] * B[j]\n        diff = abs(product - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if product < target:\n            i += 1\n        else:\n            j -= 1\n    return closest_pair", "task_id": "938_a61c958f-7a9e-4bdd-bc44-0df0a72b5701", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements from two sorted arrays whose difference is closest to a given target.", "code": "def find_closest_pair_diff(A, B, target):\n    i, j = 0, 0\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j < len(B):\n        diff = abs((A[i] - B[j]) - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if A[i] - B[j] < target:\n            i += 1\n        else:\n            j += 1\n    return closest_pair", "task_id": "938_cda5d36f-d21c-4375-90df-d9e7d5feb18c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements from two sorted arrays whose ratio is closest to a given target.", "code": "def find_closest_pair_ratio(A, B, target):\n    i, j = 0, 0\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j < len(B):\n        if B[j] == 0:\n            j += 1\n            continue\n        ratio = A[i] / B[j]\n        diff = abs(ratio - target)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if ratio < target:\n            i += 1\n        else:\n            j += 1\n    return closest_pair", "task_id": "938_37c64e9b-5da1-4f0d-9c1d-335636a734e4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the pair of elements from two sorted arrays whose sum is closest to a given target sum and whose difference is closest to a given target difference.", "code": "def find_closest_pair_sum_diff(A, B, target_sum, target_diff):\n    i, j = 0, 0\n    min_diff = float('inf')\n    closest_pair = (A[0], B[0])\n    while i < len(A) and j < len(B):\n        sum_val = A[i] + B[j]\n        diff_val = A[i] - B[j]\n        diff = abs(sum_val - target_sum) + abs(diff_val - target_diff)\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (A[i], B[j])\n        if sum_val < target_sum:\n            i += 1\n        else:\n            j += 1\n    return closest_pair", "task_id": "938_0a2cea43-cb53-4a50-abdc-7595f688b952", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the triplet of elements from three sorted arrays whose sum is closest to a given target.", "code": "def find_closest_triplet_sum(A, B, C, target):\n    closest_triplet = (A[0], B[0], C[0])\n    min_diff = float('inf')\n    for i in range(len(A)):\n        j, k = 0, len(C) - 1\n        while j < len(B) and k >= 0:\n            sum_val = A[i] + B[j] + C[k]\n            diff = abs(sum_val - target)\n            if diff < min_diff:\n                min_diff = diff\n                closest_triplet = (A[i], B[j], C[k])\n            if sum_val < target:\n                j += 1\n            else:\n                k -= 1\n    return closest_triplet", "task_id": "938_bece9a5a-0d11-4cc4-9e07-f4c65aff5402", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in the given set.", "code": "def check_element_in_set(test_set, check_list):\n  for ele in check_list:\n    if ele in test_set:\n      return True\n  return False", "task_id": "942_d5cba688-73f0-401b-9cd7-4da180b866d9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in the given string.", "code": "def check_element_in_string(test_str, check_list):\n  for ele in check_list:\n    if ele in test_str:\n      return True\n  return False", "task_id": "942_edeb4628-1811-454a-9478-d1c0fa6031c9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present as a key in the given dictionary.", "code": "def check_element_in_dict(test_dict, check_list):\n  for ele in check_list:\n    if ele in test_dict.keys():\n      return True\n  return False", "task_id": "942_c25aeafd-44bc-43af-8214-58af2e7dd352", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in any sublist of the given nested list.", "code": "def check_element_in_nested_list(nested_list, check_list):\n  for sublist in nested_list:\n    for ele in check_list:\n      if ele in sublist:\n        return True\n  return False", "task_id": "942_17d86397-18ad-41fc-b9bd-199fe61b5b25", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in the given tuple.", "code": "def check_element_in_tuple(test_tup, check_list):\n  for ele in check_list:\n    if ele in test_tup:\n      return True\n  return False", "task_id": "942_55791d16-9920-4e1e-b26c-de3623184d32", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present as a key in any dictionary within the given list of dictionaries.", "code": "def check_element_in_list_of_dicts(list_of_dicts, check_list):\n  for d in list_of_dicts:\n    for ele in check_list:\n      if ele in d.keys():\n        return True\n  return False", "task_id": "942_28d8d260-6733-48cf-b78b-41b6f2eb164b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in any set within the given list of sets.", "code": "def check_element_in_list_of_sets(list_of_sets, check_list):\n  for s in list_of_sets:\n    for ele in check_list:\n      if ele in s:\n        return True\n  return False", "task_id": "942_84821a7b-c1ef-4f60-a212-3fb214a9eee2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in any string within the given list of strings.", "code": "def check_element_in_list_of_strings(list_of_strings, check_list):\n  for s in list_of_strings:\n    for ele in check_list:\n      if ele in s:\n        return True\n  return False", "task_id": "942_61a5b7f1-14cf-4a6f-b079-0a24546f4aad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in any tuple within the given list of tuples.", "code": "def check_element_in_list_of_tuples(list_of_tuples, check_list):\n  for t in list_of_tuples:\n    for ele in check_list:\n      if ele in t:\n        return True\n  return False", "task_id": "942_0c4a698d-758d-4f9c-a76f-016bc58b9f8a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if any list element is present in any list within the given list of lists.", "code": "def check_element_in_list_of_lists(list_of_lists, check_list):\n  for l in list_of_lists:\n    for ele in check_list:\n      if ele in l:\n        return True\n  return False", "task_id": "942_31418958-0051-4418-a342-2839cc3fec9c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a set.", "code": "def list_to_set(lst):\n    return set(lst)", "task_id": "945_002ebf92-000a-4e97-8503-079f002cf5b3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given string into a set of characters.", "code": "def string_to_set(s):\n    return set(s)", "task_id": "945_4d9c5851-197b-4673-9f0a-ba9c6e48cf3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the keys of the given dictionary into a set.", "code": "def dict_keys_to_set(d):\n    return set(d.keys())", "task_id": "945_d9fb736f-04ec-4837-a18c-da5d635d5bd1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the values of the given dictionary into a set.", "code": "def dict_values_to_set(d):\n    return set(d.values())", "task_id": "945_3bef2be9-3048-444a-bbda-b4332049129b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of tuples into a set of tuples.", "code": "def list_of_tuples_to_set(lst):\n    return set(lst)", "task_id": "945_fc14f77d-2f4f-464f-9f19-47d78563b23a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a list of lists into a set of tuples.", "code": "def list_of_lists_to_set(lst):\n    return set(tuple(sublist) for sublist in lst)", "task_id": "945_a72aa72c-9297-416b-aba2-e23d2bfa1a0a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given set into a list.", "code": "def set_to_list(s):\n    return list(s)", "task_id": "945_84ac49d4-9d14-4cc5-a2fc-daf11facadb8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given set into a tuple.", "code": "def set_to_tuple(s):\n    return tuple(s)", "task_id": "945_adbc0740-f9b4-4852-96e1-7d034823a3e5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given tuple into a list.", "code": "def tuple_to_list(t):\n    return list(t)", "task_id": "945_f34dd341-0f06-4957-a22f-f0df881291ad", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert the given list into a tuple.", "code": "def list_to_tuple(lst):\n    return tuple(lst)", "task_id": "945_d408fc50-6379-4356-b44a-15184d912da1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to separate the numbers and their positions from a given string and return them as a list of tuples.", "code": "import re\ndef separate_numbers(text):\n    return [(m.group(), m.start()) for m in re.finditer(r'\\d+', text)]", "task_id": "944_e9c8249d-8f54-4a30-a1d3-430bed6eaea9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find all numbers in a given string and return their sum.", "code": "import re\ndef sum_numbers(text):\n    return sum(int(m.group()) for m in re.finditer(r'\\d+', text))", "task_id": "944_6885933f-fb95-4fa2-ab73-1bd3de655ec4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of numeric substrings in a given string.", "code": "import re\ndef count_numbers(text):\n    return len(re.findall(r'\\d+', text))", "task_id": "944_c9a7d20a-f4ef-4a1d-a9c2-abf45d83bd54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to extract all numbers from a given string and return them as a list.", "code": "import re\ndef extract_numbers(text):\n    return [int(m.group()) for m in re.finditer(r'\\d+', text)]", "task_id": "944_c4d02011-a7f2-4a78-9002-dba0a8fc9d75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all numbers in a given string with a specified replacement string.", "code": "import re\ndef replace_numbers(text, replacement):\n    return re.sub(r'\\d+', replacement, text)", "task_id": "944_0befdd55-db25-4cdc-b812-31215ae735df", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the first number in a given string and return it along with its position.", "code": "import re\ndef find_first_number(text):\n    m = re.search(r'\\d+', text)\n    return (m.group(), m.start()) if m else (None, -1)", "task_id": "944_4b4575ce-1170-473c-8659-2df282bc854f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the last number in a given string and return it along with its position.", "code": "import re\ndef find_last_number(text):\n    matches = list(re.finditer(r'\\d+', text))\n    return (matches[-1].group(), matches[-1].start()) if matches else (None, -1)", "task_id": "944_523735e7-4203-4940-b43e-c220752e1bdf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to replace all numeric substrings in a given string with their corresponding English words.", "code": "import re\nfrom num2words import num2words\ndef numbers_to_words(text):\n    return re.sub(r'\\d+', lambda x: num2words(int(x.group())), text)", "task_id": "944_3ca1774f-a3cc-480a-a7ea-d66845cda8f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if there is at least one number present in a given string.", "code": "import re\ndef is_number_present(text):\n    return bool(re.search(r'\\d+', text))", "task_id": "944_68126fa6-4970-48b6-b7c9-b48fd750ea1a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the largest number in a given string and return it.", "code": "import re\ndef largest_number(text):\n    numbers = [int(m.group()) for m in re.finditer(r'\\d+', text)]\n    return max(numbers) if numbers else None", "task_id": "944_01bee2c6-95ae-4340-a0ae-34e2f00c1fdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common words and their counts in a given text.", "code": "from collections import Counter\ndef most_common_words(s: str, n: int) -> list:\n    words = s.split()\n    most_common_words = Counter(words).most_common(n)\n    return most_common_words", "task_id": "946_09fb8b6c-37d4-4dd8-bc69-c76925d15192", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the least common elements and their counts in a specified text.", "code": "from collections import Counter\ndef least_common_elem(s: str, n: int) -> list:\n    least_common_elem = Counter(s).most_common()[:-n-1:-1]\n    return least_common_elem", "task_id": "946_3c53cfa9-9fa2-4916-a5de-e53bf79f4c8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the frequency of each character in a given text.", "code": "from collections import Counter\ndef char_frequency(s: str) -> dict:\n    frequency = dict(Counter(s))\n    return frequency", "task_id": "946_7b0f58fe-dfb6-4aee-b562-1360c11550e1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the frequency of each word in a given text.", "code": "from collections import Counter\ndef word_frequency(s: str) -> dict:\n    words = s.split()\n    frequency = dict(Counter(words))\n    return frequency", "task_id": "946_0cec1848-9f38-4964-b80e-0ccc277689d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common vowels and their counts in a given text.", "code": "from collections import Counter\ndef most_common_vowels(s: str, n: int) -> list:\n    vowels = 'aeiouAEIOU'\n    filtered_vowels = [char for char in s if char in vowels]\n    most_common_vowels = Counter(filtered_vowels).most_common(n)\n    return most_common_vowels", "task_id": "946_1b90a722-e064-4bee-ae8d-9bc29cbdaa7e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common consonants and their counts in a given text.", "code": "from collections import Counter\ndef most_common_consonants(s: str, n: int) -> list:\n    consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n    filtered_consonants = [char for char in s if char in consonants]\n    most_common_consonants = Counter(filtered_consonants).most_common(n)\n    return most_common_consonants", "task_id": "946_941bca01-9150-4b3c-8e24-4959f6bd2285", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common pairs of characters and their counts in a given text.", "code": "from collections import Counter\ndef most_common_pairs(s: str, n: int) -> list:\n    pairs = [s[i:i+2] for i in range(len(s)-1)]\n    most_common_pairs = Counter(pairs).most_common(n)\n    return most_common_pairs", "task_id": "946_ddd57c13-6a75-4560-93ed-7f6fe0f6c1ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common trigrams (three consecutive characters) and their counts in a given text.", "code": "from collections import Counter\ndef most_common_trigrams(s: str, n: int) -> list:\n    trigrams = [s[i:i+3] for i in range(len(s)-2)]\n    most_common_trigrams = Counter(trigrams).most_common(n)\n    return most_common_trigrams", "task_id": "946_19008e8c-6127-4dbd-a338-94cab5ffed9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common word lengths and their counts in a given text.", "code": "from collections import Counter\ndef most_common_words_length(s: str, n: int) -> list:\n    words = s.split()\n    word_lengths = [len(word) for word in words]\n    most_common_lengths = Counter(word_lengths).most_common(n)\n    return most_common_lengths", "task_id": "946_40405ed1-3ac0-4de6-83cc-0f69876e4d74", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the most common starting letters of words and their counts in a given text.", "code": "from collections import Counter\ndef most_common_starting_letter(s: str, n: int) -> list:\n    words = s.split()\n    starting_letters = [word[0] for word in words if word]\n    most_common_starting_letters = Counter(starting_letters).most_common(n)\n    return most_common_starting_letters", "task_id": "946_e3947939-6617-408c-ac5e-18c57fc9c1e9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the shortest word in a list of words.", "code": "def shortest_word_length(words: list) -> int:\n    return min(len(word) for word in words)", "task_id": "947_ce712ef0-a766-4131-806d-d103f435e984", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the length of the longest word in a list of words.", "code": "def longest_word_length(words: list) -> int:\n    return max(len(word) for word in words)", "task_id": "947_935a5a6e-14ca-414c-9462-24be07f3a930", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of shortest words in a list of words.", "code": "def count_shortest_words(words: list) -> int:\n    min_length = min(len(word) for word in words)\n    return sum(1 for word in words if len(word) == min_length)", "task_id": "947_8a687122-ad70-43a3-a9ac-746520b97777", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of longest words in a list of words.", "code": "def count_longest_words(words: list) -> int:\n    max_length = max(len(word) for word in words)\n    return sum(1 for word in words if len(word) == max_length)", "task_id": "947_b287b538-ef50-4916-94fd-38dd4daeaf7a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the shortest word in a list of words.", "code": "def shortest_word(words: list) -> str:\n    return min(words, key=len)", "task_id": "947_31f4045b-2229-49e4-9bb8-ec252b4ad1f2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the longest word in a list of words.", "code": "def longest_word(words: list) -> str:\n    return max(words, key=len)", "task_id": "947_5b0f90ac-57e0-4809-affc-64243df83da3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the average length of words in a list of words.", "code": "def average_word_length(words: list) -> float:\n    return sum(len(word) for word in words) / len(words)", "task_id": "947_8e7693c4-25d9-45cc-b720-826aee10a52f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all words in a list of words that have a specific length.", "code": "def words_with_length(words: list, length: int) -> list:\n    return [word for word in words if len(word) == length]", "task_id": "947_f0bb336e-a146-4bb3-8475-0acb30b7852f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all words in a list of words that start with a specific character.", "code": "def words_starting_with(words: list, char: str) -> list:\n    return [word for word in words if word.startswith(char)]", "task_id": "947_49ea74eb-2093-4963-a2f6-f92cabc291f3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find all words in a list of words that end with a specific character.", "code": "def words_ending_with(words: list, char: str) -> list:\n    return [word for word in words if word.endswith(char)]", "task_id": "947_c4ee792a-8988-4e54-b881-51b5787153d0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists without using any built-in sorting functions.", "code": "def merge_sorted_lists(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    return merged_list", "task_id": "943_f0da3edc-c7d6-488b-a119-036625419194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and remove duplicates.", "code": "def merge_sorted_lists_with_duplicates(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            if not merged_list or merged_list[-1] != lst1[i]:\n                merged_list.append(lst1[i])\n            i += 1\n        elif lst1[i] > lst2[j]:\n            if not merged_list or merged_list[-1] != lst2[j]:\n                merged_list.append(lst2[j])\n            j += 1\n        else:\n            if not merged_list or merged_list[-1] != lst1[i]:\n                merged_list.append(lst1[i])\n            i += 1\n            j += 1\n    while i < len(lst1):\n        if not merged_list or merged_list[-1] != lst1[i]:\n            merged_list.append(lst1[i])\n        i += 1\n    while j < len(lst2):\n        if not merged_list or merged_list[-1] != lst2[j]:\n            merged_list.append(lst2[j])\n        j += 1\n    return merged_list", "task_id": "943_5fd693c7-2d86-4597-b335-e948e4eceef0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return the result in descending order.", "code": "def merge_sorted_lists_descending(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] > lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    return merged_list[::-1]", "task_id": "943_95af7dcb-df51-435b-93d7-9e18fa4bf233", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists by alternating elements from each list.", "code": "def merge_sorted_lists_alternate(lst1, lst2):\n    merged_list = []\n    i, j = 0, 0\n    while i < len(lst1) and j < len(lst2):\n        merged_list.append(lst1[i])\n        merged_list.append(lst2[j])\n        i += 1\n        j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    return merged_list", "task_id": "943_d07d0b96-9159-4cc8-a0cd-4075ac08d040", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a list of tuples containing the elements and their original indices.", "code": "def merge_sorted_lists_with_indices(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append((lst1[i], i))\n            i += 1\n        else:\n            merged_list.append((lst2[j], j))\n            j += 1\n    while i < len(lst1):\n        merged_list.append((lst1[i], i))\n        i += 1\n    while j < len(lst2):\n        merged_list.append((lst2[j], j))\n        j += 1\n    return merged_list", "task_id": "943_6738b102-0eae-487d-8e9e-c4042ac785e7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a tuple containing the merged list and the sum of all elements.", "code": "def merge_sorted_lists_with_sum(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    total_sum = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            total_sum += lst1[i]\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            total_sum += lst2[j]\n            j += 1\n    while i < len(lst1):\n        merged_list.append(lst1[i])\n        total_sum += lst1[i]\n        i += 1\n    while j < len(lst2):\n        merged_list.append(lst2[j])\n        total_sum += lst2[j]\n        j += 1\n    return (merged_list, total_sum)", "task_id": "943_8f38ca19-1197-41f3-8221-f4cc7ae93ff5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a tuple containing the merged list and the average of all elements.", "code": "def merge_sorted_lists_with_average(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    total_sum = 0\n    count = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            total_sum += lst1[i]\n            count += 1\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            total_sum += lst2[j]\n            count += 1\n            j += 1\n    while i < len(lst1):\n        merged_list.append(lst1[i])\n        total_sum += lst1[i]\n        count += 1\n        i += 1\n    while j < len(lst2):\n        merged_list.append(lst2[j])\n        total_sum += lst2[j]\n        count += 1\n        j += 1\n    average = total_sum / count if count != 0 else 0\n    return (merged_list, average)", "task_id": "943_b3ddc90a-f83a-4ba5-bd87-55730f17ae9b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a tuple containing the merged list and the median of all elements.", "code": "def merge_sorted_lists_with_median(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    n = len(merged_list)\n    if n % 2 == 1:\n        median = merged_list[n // 2]\n    else:\n        median = (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n    return (merged_list, median)", "task_id": "943_ebc671b5-ff03-4b89-bc1c-a2e0d0b8b3cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a tuple containing the merged list, the minimum, and the maximum element.", "code": "def merge_sorted_lists_with_min_max(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    min_element = min(merged_list) if merged_list else None\n    max_element = max(merged_list) if merged_list else None\n    return (merged_list, min_element, max_element)", "task_id": "943_8d74c893-29ce-419e-b886-4b459afa2819", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge two given sorted lists and return a tuple containing the merged list, a list of even numbers, and a list of odd numbers.", "code": "def merge_sorted_lists_with_even_odd(lst1, lst2):\n    i, j = 0, 0\n    merged_list = []\n    evens = []\n    odds = []\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] < lst2[j]:\n            merged_list.append(lst1[i])\n            i += 1\n        else:\n            merged_list.append(lst2[j])\n            j += 1\n    merged_list.extend(lst1[i:])\n    merged_list.extend(lst2[j:])\n    for num in merged_list:\n        if num % 2 == 0:\n            evens.append(num)\n        else:\n            odds.append(num)\n    return (merged_list, evens, odds)", "task_id": "943_a5bb7e27-a918-4777-bf75-c5fe602aab62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the last item of a tuple.", "code": "def get_last_item(tup: tuple) -> any:\n    return tup[-1]", "task_id": "948_350cc8bb-77c8-48c6-a438-7f2f639d1e3b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the first item of a tuple.", "code": "def get_first_item(tup: tuple) -> any:\n    return tup[0]", "task_id": "948_f59591d6-3715-448f-ba2d-9dd129130425", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the middle item of a tuple. If the tuple has an even number of items, return the item just before the middle.", "code": "def get_middle_item(tup: tuple) -> any:\n    middle_index = (len(tup) - 1) // 2\n    return tup[middle_index]", "task_id": "948_cf20a5f3-82dc-485a-9c9d-a857f172f6a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the second item of a tuple.", "code": "def get_second_item(tup: tuple) -> any:\n    return tup[1]", "task_id": "948_5aa173d7-5df0-466c-8b3d-c89b0b128ec4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get the second last item of a tuple.", "code": "def get_second_last_item(tup: tuple) -> any:\n    return tup[-2]", "task_id": "948_8dd1e4c1-1dca-4620-877a-476a3bd6a623", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get an item of a tuple by index. If the index is out of range, return a default value.", "code": "def get_item_with_default(tup: tuple, index: int, default: any) -> any:\n    if 0 <= index < len(tup):\n        return tup[index]\n    else:\n        return default", "task_id": "948_80c2f9d6-0aa1-458a-bee2-75dd73f8dd5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get an item from a nested tuple by specifying the outer and inner index.", "code": "def get_item_from_nested_tuple(tup: tuple, outer_index: int, inner_index: int) -> any:\n    return tup[outer_index][inner_index]", "task_id": "948_c86dc447-7525-4ee7-88ff-9dd89d0f16d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get an item of a tuple by index. If the index is out of range, return None.", "code": "def get_item_if_exists(tup: tuple, index: int) -> any:\n    if 0 <= index < len(tup):\n        return tup[index]\n    else:\n        return None", "task_id": "948_2374c428-6010-4f60-b20f-24b50323a97b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get a sub-tuple from a tuple by specifying the start and end indices.", "code": "def get_items_in_range(tup: tuple, start: int, end: int) -> tuple:\n    return tup[start:end]", "task_id": "948_477f7cef-cb6f-4705-8dbe-2c69a0d2d124", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to get an item of a tuple using a negative index.", "code": "def get_item_with_negative_index(tup: tuple, neg_index: int) -> any:\n    return tup[neg_index]", "task_id": "948_8b7bb2f3-bd72-4ac9-a910-8cc63c5f824e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the sum of the elements in each tuple.", "code": "def sort_by_sum_of_elements(tuples):\n  tuples.sort(key=lambda x: sum(x))\n  return tuples", "task_id": "949_d762e308-4a73-49e7-aeb3-0e5f41568047", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the maximum element in each tuple.", "code": "def sort_by_max_element(tuples):\n  tuples.sort(key=lambda x: max(x))\n  return tuples", "task_id": "949_5528ba35-3ea5-474b-9c97-48a4e7678eb0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the minimum element in each tuple.", "code": "def sort_by_min_element(tuples):\n  tuples.sort(key=lambda x: min(x))\n  return tuples", "task_id": "949_7b873e0b-6c06-45ea-9e38-ce8a8edfe5ae", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the length of each tuple.", "code": "def sort_by_length_of_tuple(tuples):\n  tuples.sort(key=lambda x: len(x))\n  return tuples", "task_id": "949_42a1e8c7-5f46-4575-bb99-9a51141e70d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the first element in each tuple.", "code": "def sort_by_first_element(tuples):\n  tuples.sort(key=lambda x: x[0])\n  return tuples", "task_id": "949_eadaf1b8-19be-49c5-9eaa-0998667fed2d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the last element in each tuple.", "code": "def sort_by_last_element(tuples):\n  tuples.sort(key=lambda x: x[-1])\n  return tuples", "task_id": "949_e33a0349-6845-478c-8ef3-d75d453bd334", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the product of the elements in each tuple.", "code": "def sort_by_product_of_elements(tuples):\n  tuples.sort(key=lambda x: eval('*'.join(map(str, x))))\n  return tuples", "task_id": "949_0795a4a0-b2b4-4d43-b0c5-820f4735420d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the second element in each tuple.", "code": "def sort_by_second_element(tuples):\n  tuples.sort(key=lambda x: x[1] if len(x) > 1 else float('inf'))\n  return tuples", "task_id": "949_ae85f0d8-1057-47c0-877d-76fe69eb30de", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the absolute difference between the first and last elements in each tuple.", "code": "def sort_by_absolute_difference(tuples):\n  tuples.sort(key=lambda x: abs(x[0] - x[-1]))\n  return tuples", "task_id": "949_a68d55aa-65bf-469c-8526-4a89c0acab64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to sort a list of tuples based on the sum of the digits of all elements in each tuple.", "code": "def digit_sum(n):\n  return sum(int(digit) for digit in str(n))\n\ndef sort_by_digit_sum(tuples):\n  tuples.sort(key=lambda x: sum(digit_sum(ele) for ele in x))\n  return tuples", "task_id": "949_4ec441f2-0585-4d67-83ae-9c3cc5b95fc9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of similar indices in two lists of tuples.", "code": "def max_similar_indices(test_list1, test_list2):\n  res = [(min(x[0], y[0]), min(x[1], y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_885e26e0-7618-478a-8b43-234aa6c3856f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of similar indices in two lists of tuples.", "code": "def sum_similar_indices(test_list1, test_list2):\n  res = [(x[0] + y[0], x[1] + y[1])\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_fe4da33e-2e43-400d-ad8c-2b0ed051f882", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the product of similar indices in two lists of tuples.", "code": "def product_similar_indices(test_list1, test_list2):\n  res = [(x[0] * y[0], x[1] * y[1])\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_f14ce448-6aa1-4da5-8fcd-52fd593c2154", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the difference of similar indices in two lists of tuples.", "code": "def difference_similar_indices(test_list1, test_list2):\n  res = [(x[0] - y[0], x[1] - y[1])\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_4f7f52a6-312c-4e24-a641-852ab73cdc2a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the average of similar indices in two lists of tuples.", "code": "def average_similar_indices(test_list1, test_list2):\n  res = [((x[0] + y[0]) / 2, (x[1] + y[1]) / 2)\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_98c77b82-ea08-42e2-b7c4-a19df9c20434", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum absolute difference of similar indices in two lists of tuples.", "code": "def max_abs_difference_similar_indices(test_list1, test_list2):\n  res = [(abs(x[0] - y[0]), abs(x[1] - y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_1eb10f83-da87-43a9-a5e0-8d9b3e78bc8c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the string representations of similar indices in two lists of tuples.", "code": "def concat_similar_indices(test_list1, test_list2):\n  res = [(str(x[0]) + str(y[0]), str(x[1]) + str(y[1]))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_beb33dc4-d2c9-4cbd-aacb-072a06bcc2bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum length of string representations of similar indices in two lists of tuples.", "code": "def max_len_similar_indices(test_list1, test_list2):\n  res = [(max(len(str(x[0])), len(str(y[0]))), max(len(str(x[1])), len(str(y[1]))))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_e747953f-05c6-4616-aaf1-c357d7fe1a3f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum digit sum of similar indices in two lists of tuples.", "code": "def max_digit_sum_similar_indices(test_list1, test_list2):\n  def digit_sum(n):\n    return sum(int(d) for d in str(n))\n  res = [(max(digit_sum(x[0]), digit_sum(y[0])), max(digit_sum(x[1]), digit_sum(y[1])))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_f8c5e50a-71f1-4054-8cf5-302930277987", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum squared value of similar indices in two lists of tuples.", "code": "def max_squared_similar_indices(test_list1, test_list2):\n  res = [(max(x[0]**2, y[0]**2), max(x[1]**2, y[1]**2))\n   for x, y in zip(test_list1, test_list2)]\n  return res", "task_id": "951_d260e02c-0391-43d4-bef7-a14ca9430500", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to display the element (Wood, Fire, Earth, Metal, Water) of the Chinese zodiac for a given year.", "code": "def zodiac_element(year):\n    elements = ['Wood', 'Fire', 'Earth', 'Metal', 'Water']\n    index = (year - 2000) % 10 // 2\n    return elements[index]", "task_id": "950_edb0ec68-5eb7-4637-b7b0-be8e74abf3be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to display the Western zodiac sign for a given day and month.", "code": "def western_zodiac(day, month):\n    if (month == 1 and day >= 20) or (month == 2 and day <= 18):\n        return 'Aquarius'\n    elif (month == 2 and day >= 19) or (month == 3 and day <= 20):\n        return 'Pisces'\n    elif (month == 3 and day >= 21) or (month == 4 and day <= 19):\n        return 'Aries'\n    elif (month == 4 and day >= 20) or (month == 5 and day <= 20):\n        return 'Taurus'\n    elif (month == 5 and day >= 21) or (month == 6 and day <= 20):\n        return 'Gemini'\n    elif (month == 6 and day >= 21) or (month == 7 and day <= 22):\n        return 'Cancer'\n    elif (month == 7 and day >= 23) or (month == 8 and day <= 22):\n        return 'Leo'\n    elif (month == 8 and day >= 23) or (month == 9 and day <= 22):\n        return 'Virgo'\n    elif (month == 9 and day >= 23) or (month == 10 and day <= 22):\n        return 'Libra'\n    elif (month == 10 and day >= 23) or (month == 11 and day <= 21):\n        return 'Scorpio'\n    elif (month == 11 and day >= 22) or (month == 12 and day <= 21):\n        return 'Sagittarius'\n    else:\n        return 'Capricorn'", "task_id": "950_e8c48791-0614-44e4-a316-e5dc4ded965e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to display the day of the week for a given date.", "code": "import datetime\n\ndef day_of_week(day, month, year):\n    date = datetime.date(year, month, day)\n    return date.strftime('%A')", "task_id": "950_74c02402-6e91-4192-8557-a36d63fd7b77", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a given year is a leap year.", "code": "def is_leap_year(year):\n    if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n        return True\n    return False", "task_id": "950_4b29f106-9eb8-4001-a2a4-e40aa245b357", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine the number of days in a given month of a given year.", "code": "def days_in_month(month, year):\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        return 31\n    elif month in [4, 6, 9, 11]:\n        return 30\n    elif month == 2:\n        if is_leap_year(year):\n            return 29\n        else:\n            return 28\n    else:\n        return 0", "task_id": "950_322f7a61-cf4e-4fbd-806e-ee3a8121960d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the next leap year after a given year.", "code": "def next_leap_year(year):\n    year += 1\n    while not is_leap_year(year):\n        year += 1\n    return year", "task_id": "950_a9698573-7add-415b-b516-dbbe1e27bca5", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days between two given dates.", "code": "from datetime import date\n\ndef days_between_dates(day1, month1, year1, day2, month2, year2):\n    d1 = date(year1, month1, day1)\n    d2 = date(year2, month2, day2)\n    return abs((d2 - d1).days)", "task_id": "950_6a991e53-af3e-4ee8-ba89-6161669ce3f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the age in days for a person born on a given date.", "code": "from datetime import date\n\ndef age_in_days(day, month, year):\n    birth_date = date(year, month, day)\n    today = date.today()\n    return (today - birth_date).days", "task_id": "950_123399c0-643f-4b5a-aaf1-e789dade2a39", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a given date is valid.", "code": "def is_valid_date(day, month, year):\n    try:\n        date(year, month, day)\n        return True\n    except ValueError:\n        return False", "task_id": "950_621af856-4dea-435e-9378-021b503c9014", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the number of days remaining in the year from a given date.", "code": "from datetime import date\n\ndef days_till_end_of_year(day, month, year):\n    given_date = date(year, month, day)\n    end_of_year = date(year, 12, 31)\n    return (end_of_year - given_date).days", "task_id": "950_947f60ef-66f6-4f54-b3a5-4e42eaab4d54", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the factorial of n mod p.", "code": "def factorial_mod_p(n, p):\n    result = 1\n    for i in range(2, n + 1):\n        result = (result * i) % p\n    return result", "task_id": "952_bcdcee68-c2cd-462a-b2cf-e59e09231a3a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute (base^exp) mod p.", "code": "def power_mod_p(base, exp, p):\n    result = 1\n    base = base % p\n    while exp > 0:\n        if exp % 2 == 1:\n            result = (result * base) % p\n        exp = exp >> 1\n        base = (base * base) % p\n    return result", "task_id": "952_3fa74284-de3a-40de-8e78-84d6a57e3ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the modular inverse of a under modulo p.", "code": "def inverse_mod_p(a, p):\n    return power_mod_p(a, p - 2, p)\n\ndef power_mod_p(base, exp, p):\n    result = 1\n    base = base % p\n    while exp > 0:\n        if exp % 2 == 1:\n            result = (result * base) % p\n        exp = exp >> 1\n        base = (base * base) % p\n    return result", "task_id": "952_2f1c037e-0d30-45a8-87a2-40e33a197d08", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the greatest common divisor (GCD) of two integers a and b.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "952_e43510ee-b52a-43e9-85c9-9d0eb320b9fe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the least common multiple (LCM) of two integers a and b.", "code": "def lcm(a, b):\n    return a * b // gcd(a, b)\n\ndef gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "952_f1c208a9-50b6-4270-83ae-d1ede882be49", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to determine if a given integer n is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True", "task_id": "952_49e6cf94-1d98-4423-8fcf-03db427dc881", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the nth Fibonacci number mod p.", "code": "def fibonacci_mod_p(n, p):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, (a + b) % p\n    return b", "task_id": "952_7fd55266-e327-4de1-a9b2-d1decebb948c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of squares of the first n natural numbers mod p.", "code": "def sum_of_squares_mod_p(n, p):\n    return (n * (n + 1) * (2 * n + 1) // 6) % p", "task_id": "952_65095a53-027c-4101-8d84-56da16048667", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the sum of cubes of the first n natural numbers mod p.", "code": "def sum_of_cubes_mod_p(n, p):\n    sum_n = n * (n + 1) // 2\n    return (sum_n * sum_n) % p", "task_id": "952_58170a7d-1324-4c52-bb05-909c32134267", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to compute the binomial coefficient C(n, k).", "code": "def binomial_coefficient(n, k):\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    k = min(k, n - k)\n    c = 1\n    for i in range(k):\n        c = c * (n - i) // (i + 1)\n    return c", "task_id": "952_e362ff51-aeb4-4c4b-9d46-7ab856b716f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum number of subsets where each subset has distinct elements.", "code": "def find_max_subsets(arr):\n    return len(set(arr))", "task_id": "953_0c6d1bce-a8db-49df-8f7c-40f75fd2f5ba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of unique elements in the given array.", "code": "def find_unique_elements(arr):\n    return list(set(arr))", "task_id": "953_0fd850d1-52dd-4013-9b37-7fab8c3730c3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of unique elements in the given array.", "code": "def count_unique_elements(arr):\n    return len(set(arr))", "task_id": "953_c1a8ba41-e046-42b5-90e7-6ff2450ac62c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the minimum number of subsets where each subset contains at least one distinct element from the given array.", "code": "def find_min_subsets(arr):\n    return len(set(arr))", "task_id": "953_32985e36-cd08-4edd-8978-20fb45dae03c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of tuples where each tuple contains pairs of distinct elements from the given array.", "code": "def find_distinct_pairs(arr):\n    unique_elements = list(set(arr))\n    return [(unique_elements[i], unique_elements[j]) for i in range(len(unique_elements)) for j in range(i + 1, len(unique_elements))]", "task_id": "953_5d0069e4-fd95-48ee-b0e6-f40c2107cc68", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of tuples where each tuple contains triplets of distinct elements from the given array.", "code": "def find_distinct_triplets(arr):\n    unique_elements = list(set(arr))\n    return [(unique_elements[i], unique_elements[j], unique_elements[k]) for i in range(len(unique_elements)) for j in range(i + 1, len(unique_elements)) for k in range(j + 1, len(unique_elements))]", "task_id": "953_e6fd2d7a-ea21-4f56-ab9d-969de5a3276a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of tuples where each tuple contains quadruplets of distinct elements from the given array.", "code": "def find_distinct_quadruplets(arr):\n    unique_elements = list(set(arr))\n    return [(unique_elements[i], unique_elements[j], unique_elements[k], unique_elements[l]) for i in range(len(unique_elements)) for j in range(i + 1, len(unique_elements)) for k in range(j + 1, len(unique_elements)) for l in range(k + 1, len(unique_elements))]", "task_id": "953_5df1b883-4f75-4919-9912-6b3f3f5acc36", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the sum of all distinct elements in the given array.", "code": "def find_distinct_element_sum(arr):\n    return sum(set(arr))", "task_id": "953_30c1e047-dc54-442a-9329-e70562c04564", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the product of all distinct elements in the given array.", "code": "def find_distinct_element_product(arr):\n    from functools import reduce\n    from operator import mul\n    return reduce(mul, set(arr), 1)", "task_id": "953_1780c2fa-0439-4ccf-ac91-37d022420598", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the average of all distinct elements in the given array.", "code": "def find_distinct_element_average(arr):\n    unique_elements = set(arr)\n    return sum(unique_elements) / len(unique_elements)", "task_id": "953_64acf824-e22a-4040-8965-9c98563b1018", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is perfect.", "code": "def is_perfect(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum == n", "task_id": "955_71f074c3-3424-4e04-8df9-2244f2b53c76", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is deficient.", "code": "def is_deficient(n):\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return fctrsum < n", "task_id": "955_2bb2885b-0e60-4eb0-a718-5c0ef6256558", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of all divisors of a given number.", "code": "def sum_of_divisors(n):\n    return sum([fctr for fctr in range(1, n+1) if n % fctr == 0])", "task_id": "955_d300fa03-289f-4d4f-a0fd-9d9ad7818465", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is a prime number.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "955_e9b11489-0744-4557-9007-7e6e6e522cd3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if two given numbers are amicable.", "code": "def is_amicable(a, b):\n    def sum_of_divisors(n):\n        return sum([fctr for fctr in range(1, n) if n % fctr == 0])\n    return sum_of_divisors(a) == b and sum_of_divisors(b) == a", "task_id": "955_de045463-c4d1-461d-bc1d-91877160f65e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is a palindrome.", "code": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]", "task_id": "955_a3bd7b56-2ac9-4b49-8867-895bc612d430", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the digits of a given number.", "code": "def reverse_number(n):\n    return int(str(n)[::-1])", "task_id": "955_37bb2527-932a-4d60-9c97-c80486e554d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is an Armstrong number.", "code": "def is_armstrong(n):\n    num_str = str(n)\n    num_len = len(num_str)\n    return n == sum([int(digit)**num_len for digit in num_str])", "task_id": "955_e54bf219-1322-4999-8502-cc60d0fadb8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the sum of the digits of a given number.", "code": "def sum_of_digits(n):\n    return sum([int(digit) for digit in str(n)])", "task_id": "955_fe2f1c61-5f78-43af-80d4-894ea7993c12", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find out if the given number is a Harshad number.", "code": "def is_harshad(n):\n    return n % sum([int(digit) for digit in str(n)]) == 0", "task_id": "955_948c2dd9-1a8e-4275-bb06-29b81c65c369", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at digits by using regex.", "code": "import re\ndef split_at_digits(text):\n    return re.findall(r'\\D+', text)", "task_id": "956_d6ac112b-c715-4941-907d-aceffa37b10a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at vowels by using regex.", "code": "import re\ndef split_at_vowels(text):\n    return re.findall(r'[^aeiouAEIOU]+', text)", "task_id": "956_047ee3cc-e054-436e-a7d3-54fc6f1a233c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at special characters (non-alphanumeric) by using regex.", "code": "import re\ndef split_at_special_chars(text):\n    return re.findall(r'[\\w]+', text)", "task_id": "956_4a00d08e-895f-466b-b7a2-1d2ecf5e627b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at spaces by using regex.", "code": "import re\ndef split_at_spaces(text):\n    return re.findall(r'\\S+', text)", "task_id": "956_d23eb831-d8d0-4bda-823b-55094adc620c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at lowercase letters by using regex.", "code": "import re\ndef split_at_lowercase(text):\n    return re.findall(r'[A-Z][^a-z]*', text)", "task_id": "956_3e45c7b4-71f1-4d16-97d9-020c30225b40", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at consonants by using regex.", "code": "import re\ndef split_at_consonants(text):\n    return re.findall(r'[aeiouAEIOU]+', text)", "task_id": "956_db029603-459c-43d8-aa55-af16e421bd4a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at punctuation marks by using regex.", "code": "import re\ndef split_at_punctuation(text):\n    return re.findall(r'[\\w\\s]+', text)", "task_id": "956_81c2d76a-9fc0-4d0f-981d-d18abb31d218", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at uppercase letters and digits by using regex.", "code": "import re\ndef split_at_uppercase_and_digits(text):\n    return re.findall(r'[^A-Z0-9]+', text)", "task_id": "956_20420362-2cdf-4fb2-823a-e003bee65917", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at any whitespace character by using regex.", "code": "import re\ndef split_at_whitespace(text):\n    return re.findall(r'\\S+', text)", "task_id": "956_d9eb26ee-ec70-472c-9d9c-8b2244dc307f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to split the given string at non-alphanumeric characters by using regex.", "code": "import re\ndef split_at_non_alphanumeric(text):\n    return re.findall(r'[\\w]+', text)", "task_id": "956_76ae5fb5-d58b-4745-a6da-68cfc042c8a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the rightmost set bit in a given integer.", "code": "def find_rightmost_set_bit(n: int) -> int:\n    return (n & -n).bit_length()", "task_id": "957_9b7eba97-3711-4c57-8351-caee0ecf57b1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of set bits in a given integer.", "code": "def count_set_bits(n: int) -> int:\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count", "task_id": "957_9fd17fc0-47d4-494a-a3c1-bce1c107954c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to toggle the rightmost set bit in a given integer.", "code": "def toggle_rightmost_set_bit(n: int) -> int:\n    return n ^ (n & -n)", "task_id": "957_1f9f9b24-6220-4aa6-b77f-e57ea65f75ff", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is a power of two.", "code": "def is_power_of_two(n: int) -> bool:\n    return n > 0 and (n & (n - 1)) == 0", "task_id": "957_ecba2aed-41a4-4258-95c9-a3ace779575c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to clear the rightmost set bit in a given integer.", "code": "def clear_rightmost_set_bit(n: int) -> int:\n    return n & (n - 1)", "task_id": "957_f410d2aa-0d1a-42d8-b7e5-92d711538482", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the rightmost unset bit in a given integer.", "code": "def find_rightmost_unset_bit(n: int) -> int:\n    return (~n & (n + 1)).bit_length()", "task_id": "957_9efc0e3f-da0a-43bc-bde3-954d03b3d9d4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to set the rightmost unset bit in a given integer.", "code": "def set_rightmost_unset_bit(n: int) -> int:\n    return n | (n + 1)", "task_id": "957_81f50fac-0a95-4ade-b899-336052d9662d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the position of the leftmost set bit in a given integer.", "code": "def find_leftmost_set_bit(n: int) -> int:\n    return n.bit_length()", "task_id": "957_c3544884-d881-4238-8602-b95ec38d1d4c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of trailing zeros in a given integer.", "code": "def count_trailing_zeros(n: int) -> int:\n    if n == 0:\n        return 0\n    count = 0\n    while (n & 1) == 0:\n        n >>= 1\n        count += 1\n    return count", "task_id": "957_86fabf65-ba01-4a4c-ad04-3592fc497f80", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if a given integer is even.", "code": "def is_even(n: int) -> bool:\n    return (n & 1) == 0", "task_id": "957_8974efcd-236d-4560-b8a0-473cacf72e2f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit percentage if the given amount has profit else return 0.", "code": "def profit_percentage(actual_cost: float, sale_amount: float) -> float:\n    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        return (profit / actual_cost) * 100\n    else:\n        return 0", "task_id": "954_8bb9de03-e9bc-449e-8796-d6b7067938ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns 'Profit' if there is a profit, 'Loss' if there is a loss, and 'No Profit No Loss' if there is neither.", "code": "def profit_or_loss(actual_cost: float, sale_amount: float) -> str:\n    if sale_amount > actual_cost:\n        return 'Profit'\n    elif sale_amount < actual_cost:\n        return 'Loss'\n    else:\n        return 'No Profit No Loss'", "task_id": "954_12c47527-9adb-4873-8d0c-59d1e07dcf17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that returns a tuple containing 'Profit' or 'Loss' and the amount of profit or loss.", "code": "def profit_or_loss_amount(actual_cost: float, sale_amount: float) -> tuple:\n    if sale_amount > actual_cost:\n        return ('Profit', sale_amount - actual_cost)\n    elif sale_amount < actual_cost:\n        return ('Loss', actual_cost - sale_amount)\n    else:\n        return ('No Profit No Loss', 0)", "task_id": "954_94b5298c-9a4f-4e3d-a768-52528c5cac70", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount after applying a given tax rate if there is a profit, else return 0.", "code": "def profit_amount_with_tax(actual_cost: float, sale_amount: float, tax_rate: float) -> float:\n    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        return profit - (profit * tax_rate / 100)\n    else:\n        return 0", "task_id": "954_7088cb3d-2abb-4bfa-b234-301ba6e81803", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit or loss percentage. Return positive value for profit and negative for loss.", "code": "def profit_or_loss_percentage(actual_cost: float, sale_amount: float) -> float:\n    if sale_amount > actual_cost:\n        return ((sale_amount - actual_cost) / actual_cost) * 100\n    elif sale_amount < actual_cost:\n        return -((actual_cost - sale_amount) / actual_cost) * 100\n    else:\n        return 0", "task_id": "954_574261f1-9555-4d82-9020-4d64792a104c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount after applying a given discount on the sale amount if there is a profit, else return 0.", "code": "def profit_amount_with_discount(actual_cost: float, sale_amount: float, discount: float) -> float:\n    discounted_sale_amount = sale_amount - (sale_amount * discount / 100)\n    if discounted_sale_amount > actual_cost:\n        return discounted_sale_amount - actual_cost\n    else:\n        return 0", "task_id": "954_e0c37480-f08f-48d9-9432-362c74a7a953", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount in a different currency using the given exchange rate if there is a profit, else return 0.", "code": "def profit_amount_in_currency(actual_cost: float, sale_amount: float, exchange_rate: float) -> float:\n    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        return profit * exchange_rate\n    else:\n        return 0", "task_id": "954_f70cbe67-6b77-4a77-a05a-c7d0c85aa9ec", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount after adding a given bonus to the sale amount if there is a profit, else return 0.", "code": "def profit_amount_with_bonus(actual_cost: float, sale_amount: float, bonus: float) -> float:\n    total_sale_amount = sale_amount + bonus\n    if total_sale_amount > actual_cost:\n        return total_sale_amount - actual_cost\n    else:\n        return 0", "task_id": "954_28d9caa9-e6bc-4339-aeb9-ec5af0d58cd9", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount after subtracting a given penalty from the sale amount if there is a profit, else return 0.", "code": "def profit_amount_with_penalty(actual_cost: float, sale_amount: float, penalty: float) -> float:\n    total_sale_amount = sale_amount - penalty\n    if total_sale_amount > actual_cost:\n        return total_sale_amount - actual_cost\n    else:\n        return 0", "task_id": "954_90a940ed-4485-48a1-9f54-1c774c5da539", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function that calculates the profit amount if the profit exceeds a given threshold, else return 0.", "code": "def profit_amount_with_threshold(actual_cost: float, sale_amount: float, threshold: float) -> float:\n    if sale_amount > actual_cost:\n        profit = sale_amount - actual_cost\n        if profit > threshold:\n            return profit\n    return 0", "task_id": "954_fc3aa70a-4f6b-4c21-9581-8980ff2370ee", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the median of a list.", "code": "def Median(lst):\n    lst.sort()\n    n = len(lst)\n    if n % 2 == 0:\n        return (lst[n//2 - 1] + lst[n//2]) / 2\n    else:\n        return lst[n//2]", "task_id": "959_3b69e481-e8e5-4335-b504-0c2cd8467c82", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the mode of a list.", "code": "from collections import Counter\n\ndef Mode(lst):\n    data = Counter(lst)\n    return data.most_common(1)[0][0]", "task_id": "959_72afc704-0160-4438-a1f6-c062f04153bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the range (difference between the maximum and minimum) of a list.", "code": "def Range(lst):\n    return max(lst) - min(lst)", "task_id": "959_9f463984-f67b-4ea4-a86d-3c9e8301ea9f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the variance of a list.", "code": "def Variance(lst):\n    mean = sum(lst) / len(lst)\n    return sum((x - mean) ** 2 for x in lst) / len(lst)", "task_id": "959_55741288-9db6-477d-b0c9-6300e2eb9339", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the standard deviation of a list.", "code": "import math\n\ndef StandardDeviation(lst):\n    mean = sum(lst) / len(lst)\n    variance = sum((x - mean) ** 2 for x in lst) / len(lst)\n    return math.sqrt(variance)", "task_id": "959_6cd7301f-fccb-4e44-a0cb-e1b9c03ddf60", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of squares of a list.", "code": "def SumOfSquares(lst):\n    return sum(x ** 2 for x in lst)", "task_id": "959_b8960574-89de-43d8-87d3-f226a8501bb3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the product of all elements in a list.", "code": "def Product(lst):\n    result = 1\n    for x in lst:\n        result *= x\n    return result", "task_id": "959_018309ef-c32b-48ac-b635-a8a5ea96237b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the geometric mean of a list.", "code": "import math\n\ndef GeometricMean(lst):\n    product = 1\n    for x in lst:\n        product *= x\n    return product ** (1 / len(lst))", "task_id": "959_4632fe3a-b3f8-4021-ba73-8192591b0450", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the harmonic mean of a list.", "code": "def HarmonicMean(lst):\n    return len(lst) / sum(1 / x for x in lst)", "task_id": "959_bcb270ea-3a59-4ce0-9a96-6b2808760b0d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the second largest element in a list.", "code": "def SecondLargest(lst):\n    unique_lst = list(set(lst))\n    unique_lst.sort()\n    return unique_lst[-2]", "task_id": "959_6adfa445-bd18-4e6c-852e-abcb4461768e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a Roman numeral into an integer.", "code": "def roman_to_int(s: str) -> int:\n    roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n    total = 0\n    prev_value = 0\n    for char in reversed(s):\n        value = roman[char]\n        if value < prev_value:\n            total -= value\n        else:\n            total += value\n        prev_value = value\n    return total", "task_id": "958_6d4f3e92-afd8-44a7-9244-4cfda56d61a8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer into a binary string.", "code": "def int_to_binary(num: int) -> str:\n    return bin(num)[2:]", "task_id": "958_dc4c1d98-4acd-4928-9776-8e3f4246fb8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a binary string into an integer.", "code": "def binary_to_int(b: str) -> int:\n    return int(b, 2)", "task_id": "958_71b43b02-2105-4f7e-980e-2eeede2b6e38", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer into a hexadecimal string.", "code": "def int_to_hex(num: int) -> str:\n    return hex(num)[2:]", "task_id": "958_444ab3c9-c4d0-4c66-8f32-da950136b592", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a hexadecimal string into an integer.", "code": "def hex_to_int(h: str) -> int:\n    return int(h, 16)", "task_id": "958_d2af0563-4861-44d4-a6ab-d82518f1ee75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer into an octal string.", "code": "def int_to_octal(num: int) -> str:\n    return oct(num)[2:]", "task_id": "958_b7992d8b-9bee-4bc4-9553-e68d568ba1fb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an octal string into an integer.", "code": "def octal_to_int(o: str) -> int:\n    return int(o, 8)", "task_id": "958_27866c73-6a0f-4440-a3ce-b4fd6c3a9d19", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer into a string representation of a given base (2-16).", "code": "def int_to_base(num: int, base: int) -> str:\n    if num == 0:\n        return '0'\n    digits = '0123456789ABCDEF'\n    result = ''\n    while num > 0:\n        result = digits[num % base] + result\n        num //= base\n    return result", "task_id": "958_c74bcead-400a-4996-ab05-4f1cc047df45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a string representation of a given base (2-16) into an integer.", "code": "def base_to_int(s: str, base: int) -> int:\n    return int(s, base)", "task_id": "958_648940e3-1141-4bcb-b207-fccfb97515dd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer into a Roman numeral, including subtractive notation (e.g., IV for 4).", "code": "def int_to_roman_with_subtractives(num: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num", "task_id": "958_d184d0fc-ea1a-4ada-ac3c-e4b43ba2c026", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a binary string to an integer.", "code": "def binary_to_int(s: str) -> int:\n    return int(s, 2)", "task_id": "961_ab307c0d-2aa2-4357-8254-ff9987166792", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a hexadecimal string to an integer.", "code": "def hex_to_int(s: str) -> int:\n    return int(s, 16)", "task_id": "961_539042b8-a2a5-437b-8816-f87c00469a63", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer to a roman numeral.", "code": "def int_to_roman(num: int) -> str:\n    val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n    syb = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n    roman_num = ''\n    i = 0\n    while num > 0:\n        for _ in range(num // val[i]):\n            roman_num += syb[i]\n            num -= val[i]\n        i += 1\n    return roman_num", "task_id": "961_8a59964e-7e43-4317-aae7-b3c0f65de3ab", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer to a binary string.", "code": "def int_to_binary(n: int) -> str:\n    return bin(n)[2:]", "task_id": "961_060dc815-a86d-4170-a8ed-77066f9b11f0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert an integer to a hexadecimal string.", "code": "def int_to_hex(n: int) -> str:\n    return hex(n)[2:]", "task_id": "961_3867b5e8-7058-4d52-b171-b87a45a772db", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a valid roman numeral.", "code": "def is_valid_roman(s: str) -> bool:\n    valid_roman = {'I', 'V', 'X', 'L', 'C', 'D', 'M'}\n    return all(c in valid_roman for c in s)", "task_id": "961_32637ec2-cbae-4c9f-a5af-6d893c343dcc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a valid binary string.", "code": "def is_valid_binary(s: str) -> bool:\n    return all(c in '01' for c in s)", "task_id": "961_34ac826c-8531-41f4-9f9f-260976d9143f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a valid hexadecimal string.", "code": "def is_valid_hex(s: str) -> bool:\n    valid_hex = '0123456789abcdefABCDEF'\n    return all(c in valid_hex for c in s)", "task_id": "961_74a2d2c9-dbe4-4444-b0f9-17ac7cf6bf33", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a roman numeral to a binary string.", "code": "def roman_to_binary(s: str) -> str:\n    def roman_to_int(s: str) -> int:\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\n        int_val = 0\n        for i in range(len(s)):\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\n            else:\n                int_val += rom_val[s[i]]\n        return int_val\n    return bin(roman_to_int(s))[2:]", "task_id": "961_8ab313c5-706f-49ac-9204-6a58a98a8755", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a binary string to a roman numeral.", "code": "def binary_to_roman(s: str) -> str:\n    def int_to_roman(num: int) -> str:\n        val = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]\n        syb = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']\n        roman_num = ''\n        i = 0\n        while num > 0:\n            for _ in range(num // val[i]):\n                roman_num += syb[i]\n                num -= val[i]\n            i += 1\n        return roman_num\n    return int_to_roman(int(s, 2))", "task_id": "961_086c61cf-c58c-4b36-a829-c66f5399ce64", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to climb a staircase with n steps, where you can either take 1 step or 2 steps at a time.", "code": "def count_ways_to_climb(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return count_ways_to_climb(n - 1) + count_ways_to_climb(n - 2)", "task_id": "960_a7fe88d7-303a-4a5a-8f11-906324f59cdd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fibonacci(n - 1) + fibonacci(n - 2)", "task_id": "960_50066b5d-4aee-4536-9ba6-5921af78735f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to reach the end of an n x m grid, moving only right or down.", "code": "def count_ways_to_reach_end(n, m):\n    if n == 1 or m == 1:\n        return 1\n    return count_ways_to_reach_end(n - 1, m) + count_ways_to_reach_end(n, m - 1)", "task_id": "960_20a194ac-073a-4df2-b048-6bbfd05341a4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to make change for n cents using a given list of coin denominations.", "code": "def count_ways_to_make_change(n, coins):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    if len(coins) == 0 and n > 0:\n        return 0\n    return count_ways_to_make_change(n - coins[0], coins) + count_ways_to_make_change(n, coins[1:])", "task_id": "960_a117bf67-1937-4255-9a51-10c7397d985c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to partition a set of n elements.", "code": "def count_ways_to_partition(n):\n    if n == 0 or n == 1:\n        return 1\n    return n * count_ways_to_partition(n - 1)", "task_id": "960_1a284d10-55c0-483d-a83e-54c0ee026718", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to reach a score of n in a game where you can score 3, 5, or 10 points at a time.", "code": "def count_ways_to_reach_score(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return count_ways_to_reach_score(n - 3) + count_ways_to_reach_score(n - 5) + count_ways_to_reach_score(n - 10)", "task_id": "960_363a163e-0899-409a-b40e-1fd83d2ad8c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to cover a distance of n units, where you can take 1, 2, or 3 steps at a time.", "code": "def count_ways_to_cover_distance(n):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    return count_ways_to_cover_distance(n - 1) + count_ways_to_cover_distance(n - 2) + count_ways_to_cover_distance(n - 3)", "task_id": "960_d6332d54-8024-4440-a4d8-effe456a3205", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to split an array into two subarrays with equal sum.", "code": "def count_ways_to_split_array(arr):\n    total_sum = sum(arr)\n    if total_sum % 2 != 0:\n        return 0\n    half_sum = total_sum // 2\n    current_sum = 0\n    count = 0\n    for num in arr:\n        current_sum += num\n        if current_sum == half_sum:\n            count += 1\n    return count", "task_id": "960_12b992a2-2d89-45c6-b961-2ce98de992b8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to form a palindrome by rearranging the characters of a given string.", "code": "from collections import Counter\n\ndef count_ways_to_form_palindrome(s):\n    freq = Counter(s)\n    odd_count = sum(1 for count in freq.values() if count % 2 != 0)\n    return 1 if odd_count <= 1 else 0", "task_id": "960_8f0df54b-786c-4c2c-bda5-98e70b8368c2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of ways to reach a target number n using a given list of step sizes.", "code": "def count_ways_to_reach_target(n, steps):\n    if n == 0:\n        return 1\n    if n < 0:\n        return 0\n    total_ways = 0\n    for step in steps:\n        total_ways += count_ways_to_reach_target(n - step, steps)\n    return total_ways", "task_id": "960_ca495ae5-9c4a-4e0c-bab0-f4dd46f2bb7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the sum of squares of three numbers.", "code": "def sum_of_squares(a, b, c):\n    return a**2 + b**2 + c**2", "task_id": "963_91bd588d-e829-4f5d-8035-4ba369aa767b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number is prime.", "code": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "task_id": "963_6489036a-c9e9-4c6b-ac28-931dbcf8566a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse a given string.", "code": "def reverse_string(s):\n    return s[::-1]", "task_id": "963_77d8b4f0-fd76-4e19-8736-c067ecc9c09e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to return the nth Fibonacci number.", "code": "def fibonacci(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(n-1):\n            a, b = b, a + b\n        return b", "task_id": "963_dc85b688-ede5-42d7-a098-4efb5539871c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(s):\n    return s == s[::-1]", "task_id": "963_8fbd7591-e522-42d3-b580-ace378e30463", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the factorial of a number.", "code": "def factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)", "task_id": "963_dd3fa10e-a7d0-4546-9601-ecf6f56aa58e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the greatest common divisor (GCD) of two numbers.", "code": "def gcd(a, b):\n    while b:\n        a, b = b, a % b\n    return a", "task_id": "963_cc5f45c3-1407-4d42-8a61-813c488e2324", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to calculate the least common multiple (LCM) of two numbers.", "code": "def lcm(a, b):\n    def gcd(a, b):\n        while b:\n            a, b = b, a % b\n        return a\n    return abs(a * b) // gcd(a, b)", "task_id": "963_25892629-b293-450f-9a6c-f064c2cdbb75", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(s):\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in s if char in vowels)", "task_id": "963_8e86fcc8-96a1-4a78-a9c2-3ab457148bd2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a number is even.", "code": "def is_even(n):\n    return n % 2 == 0", "task_id": "963_bafb48dc-145c-4d7c-ac1b-89416dbb6241", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "code": "def sum_Natural(n): \n    sum = (n * (n + 1)) \n    return int(sum) \ndef sum_odd(l, r): \n    return (sum_Natural(int((r + 1) // 2)) - sum_Natural(int(l // 2)))", "task_id": "962_581361dc-ca7e-4f76-84c6-c4b6f6a77fc1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all natural numbers that are multiples of 3 within the range l and r.", "code": "def sum_Natural(n): \n    sum = (n * (n + 1)) \n    return int(sum) \ndef sum_multiples_of_three(l, r): \n    return (sum_Natural(r // 3) * 3 - sum_Natural((l - 1) // 3) * 3)", "task_id": "962_de309eaa-9429-41f4-a2d6-4646071a3445", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the squares of all natural numbers within the range l and r.", "code": "def sum_squares(l, r): \n    return sum(x**2 for x in range(l, r + 1))", "task_id": "962_b2f5add5-5b36-43b3-ac8a-29db125c8673", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the cubes of all natural numbers within the range l and r.", "code": "def sum_cubes(l, r): \n    return sum(x**3 for x in range(l, r + 1))", "task_id": "962_708d12e5-0139-42cd-81f0-f158446231a0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all prime numbers within the range l and r.", "code": "def is_prime(n): \n    if n <= 1: \n        return False \n    for i in range(2, int(n**0.5) + 1): \n        if n % i == 0: \n            return False \n    return True \ndef sum_primes(l, r): \n    return sum(x for x in range(l, r + 1) if is_prime(x))", "task_id": "962_b4f53360-e3c2-4cfa-9427-c607e41ff711", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n Fibonacci numbers.", "code": "def sum_fibonacci(n): \n    a, b = 0, 1 \n    sum = 0 \n    for _ in range(n): \n        sum += a \n        a, b = b, a + b \n    return sum", "task_id": "962_225a0a5a-a68a-4e23-bdcb-d20753d9302a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the digits of a given number n.", "code": "def sum_digits(n): \n    return sum(int(digit) for digit in str(n))", "task_id": "962_859b78a6-c432-403b-99ba-c17bd1cbda62", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the factorials of all natural numbers within the range l and r.", "code": "import math \ndef sum_factorials(l, r): \n    return sum(math.factorial(x) for x in range(l, r + 1))", "task_id": "962_09ce5e13-3f77-466e-a7bc-60f17b88bd6d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of all powers of 2 within the range l and r.", "code": "def sum_powers_of_two(l, r): \n    return sum(2**x for x in range(l, r + 1))", "task_id": "962_473433b1-0b7d-4662-9d56-ff0344041d06", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the sum of the first n terms of an arithmetic series with first term a and common difference d.", "code": "def sum_arithmetic_series(a, d, n): \n    return n * (2 * a + (n - 1) * d) // 2", "task_id": "962_15e1d735-4f94-47e8-af48-8d7f821954b7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert snake case string to camel case string.", "code": "def snake_to_camel(text):\n    components = text.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])", "task_id": "965_4d9f7aef-cf21-42e4-9fe7-0a6ff1fa3010", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to reverse the words in a given string.", "code": "def reverse_words(text):\n    return ' '.join(text.split()[::-1])", "task_id": "965_172c88df-2e55-40f1-88f9-6229b7e14980", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of vowels in a given string.", "code": "def count_vowels(text):\n    return sum(1 for char in text.lower() if char in 'aeiou')", "task_id": "965_307a145c-d813-4b1b-917f-26f37123b6bc", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if a given string is a palindrome.", "code": "def is_palindrome(text):\n    cleaned = ''.join(char.lower() for char in text if char.isalnum())\n    return cleaned == cleaned[::-1]", "task_id": "965_861e564d-b94e-4c39-9bec-f73d477d0e00", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove duplicates from a list while preserving the order.", "code": "def remove_duplicates(lst):\n    seen = set()\n    result = []\n    for item in lst:\n        if item not in seen:\n            seen.add(item)\n            result.append(item)\n    return result", "task_id": "965_1ff00821-73c4-47e4-9a9e-8056893bba05", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to flatten a nested list.", "code": "def flatten_list(nested_list):\n    result = []\n    for item in nested_list:\n        if isinstance(item, list):\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result", "task_id": "965_f4c8ed59-15b9-4e87-9bff-48fac580ea45", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to generate the first n Fibonacci numbers.", "code": "def fibonacci(n):\n    if n <= 0:\n        return []\n    elif n == 1:\n        return [0]\n    elif n == 2:\n        return [0, 1]\n    fibs = [0, 1]\n    for i in range(2, n):\n        fibs.append(fibs[-1] + fibs[-2])\n    return fibs", "task_id": "965_91a6dec9-b401-4696-8f85-1684e0ccf788", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to check if two strings are anagrams of each other.", "code": "def is_anagram(str1, str2):\n    return sorted(str1) == sorted(str2)", "task_id": "965_6f3aa6dd-788d-44e6-8d0c-2f1ee8f98d83", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to convert a string to title case.", "code": "def title_case(text):\n    return text.title()", "task_id": "965_ecb3c306-786d-482b-b661-2dac62caff1c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to count the number of words in a given string.", "code": "def count_words(text):\n    return len(text.split())", "task_id": "965_ed5ea448-efc4-4e23-8f6c-cd00d3d1a00c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether the length of a single word is even or not.", "code": "def is_word_length_even(word: str) -> bool:\n    return len(word) % 2 == 0", "task_id": "964_0a49bb29-a952-4d13-b37d-090c6df05190", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether all words in a sentence have even lengths.", "code": "def all_words_even_length(sentence: str) -> bool:\n    words = sentence.split()\n    return all(len(word) % 2 == 0 for word in words)", "task_id": "964_c1df1ff3-e4ba-4bff-a49b-c16295840f0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the first word in a sentence that has an even length. If no such word exists, return an empty string.", "code": "def first_even_length_word(sentence: str) -> str:\n    words = sentence.split()\n    for word in words:\n        if len(word) % 2 == 0:\n            return word\n    return ''", "task_id": "964_46f97f54-147f-4280-a14f-ae947de4883a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in a sentence that have even lengths.", "code": "def count_even_length_words(sentence: str) -> int:\n    words = sentence.split()\n    return sum(1 for word in words if len(word) % 2 == 0)", "task_id": "964_caefb7f2-d3c0-4cb0-b8ed-169bffe9e538", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of words in a sentence that have even lengths.", "code": "def even_length_words(sentence: str) -> list:\n    words = sentence.split()\n    return [word for word in words if len(word) % 2 == 0]", "task_id": "964_820e80d0-4367-4c31-868b-3dfc350b7ddf", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return a list of words in a sentence that have odd lengths.", "code": "def odd_length_words(sentence: str) -> list:\n    words = sentence.split()\n    return [word for word in words if len(word) % 2 != 0]", "task_id": "964_d4f64b70-8fb0-4452-b55a-98f20cf811d1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check whether there is at least one word in a sentence that has an even length.", "code": "def has_even_length_word(sentence: str) -> bool:\n    words = sentence.split()\n    return any(len(word) % 2 == 0 for word in words)", "task_id": "964_08be2cec-4356-4ab9-b138-d587f4d59ba1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the longest word in a sentence that has an even length. If no such word exists, return an empty string.", "code": "def longest_even_length_word(sentence: str) -> str:\n    words = sentence.split()\n    even_length_words = [word for word in words if len(word) % 2 == 0]\n    if not even_length_words:\n        return ''\n    return max(even_length_words, key=len)", "task_id": "964_f1647671-64a9-4283-adde-538ee7ef1ee3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to return the shortest word in a sentence that has an even length. If no such word exists, return an empty string.", "code": "def shortest_even_length_word(sentence: str) -> str:\n    words = sentence.split()\n    even_length_words = [word for word in words if len(word) % 2 == 0]\n    if not even_length_words:\n        return ''\n    return min(even_length_words, key=len)", "task_id": "964_2574337f-5c66-46c7-9607-bbdfddb11dc2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all words in a sentence that have even lengths with the word 'EVEN'.", "code": "def replace_even_length_words(sentence: str) -> str:\n    words = sentence.split()\n    return ' '.join(['EVEN' if len(word) % 2 == 0 else word for word in words])", "task_id": "964_acfc8d51-f855-44c4-a1f7-b75900bdfaba", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty strings from a list of strings.", "code": "def remove_empty_strings(lst):\n    return [s for s in lst if s]", "task_id": "966_31d7e821-51d1-4b45-addf-9bb74511775b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove None values from a list.", "code": "def remove_none(lst):\n    return [x for x in lst if x is not None]", "task_id": "966_6d83f85c-f63a-4b5d-88eb-0b0556894ebb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove zeros from a list of integers.", "code": "def remove_zeros(lst):\n    return [x for x in lst if x != 0]", "task_id": "966_532308ec-bb65-4914-be0d-285e629cc747", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove all False values from a list of booleans.", "code": "def remove_false(lst):\n    return [x for x in lst if x]", "task_id": "966_4e1368eb-dfdd-474a-8500-bf5c8802f532", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty dictionaries from a list of dictionaries.", "code": "def remove_empty_dicts(lst):\n    return [d for d in lst if d]", "task_id": "966_c11b7e13-106d-4529-aaa2-6f7a4961650b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove negative numbers from a list of integers.", "code": "def remove_negative_numbers(lst):\n    return [x for x in lst if x >= 0]", "task_id": "966_8a994bc4-5300-4f49-90a0-1ee7eb17049d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty lists from a list of lists.", "code": "def remove_empty_lists(lst):\n    return [x for x in lst if x]", "task_id": "966_cf2a52a9-bc2c-4866-8599-160bb10e1d7c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty sets from a list of sets.", "code": "def remove_empty_sets(lst):\n    return [s for s in lst if s]", "task_id": "966_7cc7d5ff-beca-4876-8bd7-899bb7ca88d6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty strings from a list of tuples.", "code": "def remove_empty_strings_from_tuples(lst):\n    return [t for t in lst if t != ('',)]", "task_id": "966_9c3dd534-980e-4e87-b66c-32047eb3f53a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to remove empty lists from a list of tuples.", "code": "def remove_empty_lists_from_tuples(lst):\n    return [t for t in lst if t != ([],)]", "task_id": "966_99e631bb-368d-44fb-85ae-bb41e8739f37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with an added constant C.", "code": "def max_value(A, B, N, C):\n    x = min(B - 1, N)\n    return (A * x + C) // B", "task_id": "968_1b7d9ca1-c3d2-4c36-80a8-0866dfc19fc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with an offset added to the input.", "code": "def max_value_with_offset(A, B, N, offset):\n    x = min(B - 1, N + offset)\n    return (A * x) // B", "task_id": "968_136879f1-0487-4661-8e5c-1d646a584638", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with a multiplier applied to the input.", "code": "def max_value_with_multiplier(A, B, N, multiplier):\n    x = min(B - 1, N * multiplier)\n    return (A * x) // B", "task_id": "968_64bc667c-c094-490f-964a-b54dbcbb2035", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with a divisor applied to the input.", "code": "def max_value_with_divisor(A, B, N, divisor):\n    x = min(B - 1, N // divisor)\n    return (A * x) // B", "task_id": "968_446f1180-d958-489b-87f1-c2828d1775c6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with a modulus applied to the input.", "code": "def max_value_with_modulus(A, B, N, mod):\n    x = min(B - 1, N % mod)\n    return (A * x) // B", "task_id": "968_20f7a7e6-2ccd-4df6-9681-789175c24aa7", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with an increment added to the input.", "code": "def max_value_with_increment(A, B, N, increment):\n    x = min(B - 1, N + increment)\n    return (A * x) // B", "task_id": "968_00ba1927-e21d-439d-bed1-8b28f5aaab17", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with a decrement subtracted from the input.", "code": "def max_value_with_decrement(A, B, N, decrement):\n    x = min(B - 1, N - decrement)\n    return (A * x) // B", "task_id": "968_ad861d68-59a2-4e96-a127-d866a26b3710", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with the input raised to a power.", "code": "def max_value_with_power(A, B, N, power):\n    x = min(B - 1, N ** power)\n    return (A * x) // B", "task_id": "968_37d774f9-8040-458d-a4ac-dc7fa46d901c", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with the input squared.", "code": "def max_value_with_square(A, B, N):\n    x = min(B - 1, N ** 2)\n    return (A * x) // B", "task_id": "968_cd3c15da-d27e-42af-a42e-31d0c79216c1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to find the maximum possible value for the given periodic function with the input cubed.", "code": "def max_value_with_cube(A, B, N):\n    x = min(B - 1, N ** 3)\n    return (A * x) // B", "task_id": "968_eeed8280-1c42-48cc-a970-af10d7f41b5f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of two numbers.", "code": "def max_of_two(a: int, b: int) -> int:\n    if a > b:\n        return a\n    return b", "task_id": "970_ae5b709c-c4dd-484d-8fe9-91c767686d16", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum of three numbers.", "code": "def min_of_three(a: int, b: int, c: int) -> int:\n    return min(a, b, c)", "task_id": "970_6caf41f2-a959-47ce-aa96-f3970ddd764e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum of three numbers.", "code": "def max_of_three(a: int, b: int, c: int) -> int:\n    return max(a, b, c)", "task_id": "970_9da1b454-f82f-425d-878b-70bd0797dabb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum number in a list.", "code": "def min_of_list(nums: list[int]) -> int:\n    return min(nums)", "task_id": "970_d0de4302-b217-401b-a591-edb9c53c7242", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number in a list.", "code": "def max_of_list(nums: list[int]) -> int:\n    return max(nums)", "task_id": "970_6191eb57-863c-439d-9bce-328e3db36bc4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second minimum number in a list.", "code": "def second_min_of_list(nums: list[int]) -> int:\n    unique_nums = list(set(nums))\n    unique_nums.sort()\n    return unique_nums[1] if len(unique_nums) > 1 else unique_nums[0]", "task_id": "970_f9088a42-e537-41ff-a155-0b733afc5c8d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the second maximum number in a list.", "code": "def second_max_of_list(nums: list[int]) -> int:\n    unique_nums = list(set(nums))\n    unique_nums.sort(reverse=True)\n    return unique_nums[1] if len(unique_nums) > 1 else unique_nums[0]", "task_id": "970_7c297b4c-1b29-4126-ad61-02efee202728", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find both the minimum and maximum numbers in a list.", "code": "def min_and_max_of_list(nums: list[int]) -> tuple[int, int]:\n    return (min(nums), max(nums))", "task_id": "970_946c2e15-376e-4a06-a6fb-3f94f5474025", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lexicographically smaller of two strings.", "code": "def min_of_two_strings(a: str, b: str) -> str:\n    return a if a < b else b", "task_id": "970_04987735-83d6-4fcb-ad9a-ad79b1f06dbb", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the lexicographically larger of two strings.", "code": "def max_of_two_strings(a: str, b: str) -> str:\n    return a if a > b else b", "task_id": "970_98451702-77d9-4c46-bbe3-1abf0c9ced37", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge lists if they have similar initial elements.", "code": "def merge_lists_with_common_prefix(lst):\n    res = []\n    for sub in lst:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    return res", "task_id": "969_c5081b7c-c3e3-44a3-b6a9-7a8e2bf0a06a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine dictionaries if they have similar keys.", "code": "def combine_dicts_with_common_key(dicts):\n    res = {}\n    for d in dicts:\n        for k, v in d.items():\n            if k in res:\n                res[k].append(v)\n            else:\n                res[k] = [v]\n    return res", "task_id": "969_7bca70d0-741f-487e-a159-2bada431ae87", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge strings if they have similar initial characters.", "code": "def merge_strings_with_common_prefix(strings):\n    res = []\n    for s in strings:\n        if res and res[-1][0] == s[0]:\n            res[-1] += s[1:]\n        else:\n            res.append(s)\n    return res", "task_id": "969_1ef5f4d1-0188-4222-8129-5ab87eaa3196", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine lists if they have the same first element.", "code": "def combine_lists_with_common_first_element(lists):\n    res = []\n    for sub in lists:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    return res", "task_id": "969_225a121c-9e36-44a0-b209-34874a7b8ded", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge tuples if they have the same first element.", "code": "def merge_tuples_with_common_first_element(tuples):\n    res = []\n    for sub in tuples:\n        if res and res[-1][0] == sub[0]:\n            res[-1] += sub[1:]\n        else:\n            res.append(sub)\n    return res", "task_id": "969_edc763cc-832f-4d70-bb27-40a097275f99", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to group lists by their first element.", "code": "def group_lists_by_first_element(lists):\n    res = {}\n    for sub in lists:\n        if sub[0] in res:\n            res[sub[0]].append(sub)\n        else:\n            res[sub[0]] = [sub]\n    return res", "task_id": "969_3134e1ab-d5da-4cb8-bf30-5fa300bf7d2e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge dictionaries if they have similar keys, concatenating their values.", "code": "def merge_dicts_with_common_key(dicts):\n    res = {}\n    for d in dicts:\n        for k, v in d.items():\n            if k in res:\n                res[k] += v\n            else:\n                res[k] = v\n    return res", "task_id": "969_a19520d0-3c04-4d49-9752-cad09fe1145d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to join lists if they have the same first element.", "code": "def join_lists_with_common_first_element(lists):\n    res = []\n    for sub in lists:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    return res", "task_id": "969_b6f512e9-78b4-4f69-96d6-4a1bd3fdb133", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to combine strings if they have the same initial substring.", "code": "def combine_strings_with_common_prefix(strings):\n    res = []\n    for s in strings:\n        if res and res[-1][0] == s[0]:\n            res[-1] += s[1:]\n        else:\n            res.append(s)\n    return res", "task_id": "969_d1b9c294-dd4e-4566-9f98-f9768c6416f6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to merge lists if they have the same initial element.", "code": "def merge_lists_with_common_initial_element(lists):\n    res = []\n    for sub in lists:\n        if res and res[-1][0] == sub[0]:\n            res[-1].extend(sub[1:])\n        else:\n            res.append([ele for ele in sub])\n    return res", "task_id": "969_ad887901-118c-404f-bb6b-8bee231e5cbe", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to reverse the string.", "code": "def reverse_string(s: str) -> str:\n    return s[::-1]", "task_id": "973_66e0adc7-ddae-4b10-ab86-46abddd4d4f1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to right rotate the string.", "code": "def right_rotate(s: str, d: int) -> str:\n    d = d % len(s)\n    return s[-d:] + s[:-d]", "task_id": "973_9480e274-9945-4ac7-b98c-7171e86a8c1e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to capitalize the first letter of each word in the string.", "code": "def capitalize_string(s: str) -> str:\n    return s.title()", "task_id": "973_77726f88-6ae9-454c-b8df-eba159f835a2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove all vowels from the string.", "code": "def remove_vowels(s: str) -> str:\n    vowels = 'aeiouAEIOU'\n    return ''.join([char for char in s if char not in vowels])", "task_id": "973_ffb4e64a-c7cd-43e8-b9d7-4b1194455cb1", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to check if the string is a palindrome.", "code": "def is_palindrome(s: str) -> bool:\n    return s == s[::-1]", "task_id": "973_bc1db225-c095-4cf0-9ea9-150250088bda", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of times a substring appears in the string.", "code": "def count_substring(s: str, sub: str) -> int:\n    return s.count(sub)", "task_id": "973_a07dbfa5-4638-44e9-8434-63a75a58481d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to replace all spaces in the string with underscores.", "code": "def replace_spaces(s: str) -> str:\n    return s.replace(' ', '_')", "task_id": "973_45cd31fa-371f-408f-a464-7599a79d6108", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to remove duplicate characters from the string.", "code": "def remove_duplicates(s: str) -> str:\n    return ''.join(sorted(set(s), key=s.index))", "task_id": "973_f7dd7c3f-652e-4f60-991b-02cee8760565", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to convert the string to alternate case (upper, lower, upper, lower, etc.).", "code": "def alternate_case(s: str) -> str:\n    return ''.join([char.upper() if i % 2 == 0 else char.lower() for i, char in enumerate(s)])", "task_id": "973_7034f33b-1e29-46a8-a25b-00c13e08c396", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a python function to count the number of words in the string.", "code": "def count_words(s: str) -> int:\n    return len(s.split())", "task_id": "973_00b59323-f5fe-4372-8436-fcdf7506e73a", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then reverse the resulting tuple.", "code": "def concatenate_and_reverse(tup1, tup2):\n  res = tup1 + tup2\n  return res[::-1]", "task_id": "972_e25b6bde-6694-4f23-805d-082ce9041a89", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then append the sum of all elements to the resulting tuple.", "code": "def concatenate_and_sum(tup1, tup2):\n  res = tup1 + tup2\n  total_sum = sum(res)\n  return res + (total_sum,)", "task_id": "972_cdcac677-4f26-45d5-b37f-fdbf74cec9c8", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then sort the resulting tuple.", "code": "def concatenate_and_sort(tup1, tup2):\n  res = tup1 + tup2\n  return tuple(sorted(res))", "task_id": "972_88af670c-9dc8-4414-9e15-7f2e899aa748", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then double each element in the resulting tuple.", "code": "def concatenate_and_double(tup1, tup2):\n  res = tup1 + tup2\n  return tuple(x * 2 for x in res)", "task_id": "972_71ebfc3e-e4da-4387-815a-6b29c0285d0e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then filter out all odd numbers from the resulting tuple.", "code": "def concatenate_and_filter_even(tup1, tup2):\n  res = tup1 + tup2\n  return tuple(x for x in res if x % 2 == 0)", "task_id": "972_d924e242-5477-41ee-b2c8-313e85e5a54b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then square each element in the resulting tuple.", "code": "def concatenate_and_square(tup1, tup2):\n  res = tup1 + tup2\n  return tuple(x ** 2 for x in res)", "task_id": "972_2cd9c1b0-2435-424d-b005-ef9d5e34b0e6", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then remove duplicate elements from the resulting tuple.", "code": "def concatenate_and_unique(tup1, tup2):\n  res = tup1 + tup2\n  return tuple(dict.fromkeys(res))", "task_id": "972_c1215d3a-c1a7-4f8b-a8d7-4e2d4c70ab3e", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then multiply each element in the resulting tuple by a given factor.", "code": "def concatenate_and_multiply(tup1, tup2, factor):\n  res = tup1 + tup2\n  return tuple(x * factor for x in res)", "task_id": "972_520625d7-e40d-4f72-bbe9-471e01ceb6be", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then replace all occurrences of a given element with another element in the resulting tuple.", "code": "def concatenate_and_replace(tup1, tup2, old, new):\n  res = tup1 + tup2\n  return tuple(new if x == old else x for x in res)", "task_id": "972_42899606-5513-4af4-b10b-804e4c64392d", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to concatenate the given two tuples and then interleave their elements in the resulting tuple.", "code": "def concatenate_and_interleave(tup1, tup2):\n  res = []\n  for x, y in zip(tup1, tup2):\n    res.extend([x, y])\n  res.extend(tup1[len(tup2):])\n  res.extend(tup2[len(tup1):])\n  return tuple(res)", "task_id": "972_05475bbb-c41b-4407-b2f8-9ed0bc7158ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, and return the remainder.", "code": "def max_segments_with_remainder(n, a, b, c):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    max_segments = dp[n]\n    remainder = n - max_segments * min(a, b, c) if max_segments != -1 else n\n    return max_segments, remainder", "task_id": "971_9df30478-dce1-425f-8629-8aa8636b83ca", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, with each segment being at least min_length.", "code": "def max_segments_with_min_length(n, a, b, c, min_length):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a <= n and a >= min_length:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n and b >= min_length:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n and c >= min_length:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]", "task_id": "971_0864a0f7-199f-43c9-b96b-510f0b773b94", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, with each segment being exactly exact_length.", "code": "def max_segments_with_exact_length(n, a, b, c, exact_length):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a <= n and a == exact_length:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n and b == exact_length:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n and c == exact_length:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]", "task_id": "971_ee3c2c0e-80d4-4d76-aab2-6415c2cbd8b4", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but no more than limit segments can be used.", "code": "def max_segments_with_limit(n, a, b, c, limit):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1 and dp[i] < limit:\n            if i + a <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]", "task_id": "971_a6165733-21cc-449e-b14f-101b76906595", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but each segment incurs a penalty of penalty units.", "code": "def max_segments_with_penalty(n, a, b, c, penalty):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a + penalty <= n:\n                dp[i + a + penalty] = max(dp[i] + 1, dp[i + a + penalty])\n            if i + b + penalty <= n:\n                dp[i + b + penalty] = max(dp[i] + 1, dp[i + b + penalty])\n            if i + c + penalty <= n:\n                dp[i + c + penalty] = max(dp[i] + 1, dp[i + c + penalty])\n    return dp[n]", "task_id": "971_4137d137-4b11-4329-8df5-f8c94f5117c0", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but prioritize segments based on the given priority list.", "code": "def max_segments_with_priority(n, a, b, c, priority):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    lengths = [a, b, c]\n    lengths.sort(key=lambda x: priority.index(x))\n    for i in range(n):\n        if dp[i] != -1:\n            for length in lengths:\n                if i + length <= n:\n                    dp[i + length] = max(dp[i] + 1, dp[i + length])\n    return dp[n]", "task_id": "971_01c62c85-adf3-4584-9af5-6733572c1a8f", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but each segment has a corresponding cost from the cost list.", "code": "def max_segments_with_cost(n, a, b, c, cost):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a <= n and cost[0] <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n and cost[1] <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n and cost[2] <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]", "task_id": "971_56c09fca-e0c0-4f8a-8a7d-1f22f280ac09", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but each segment has a corresponding weight from the weight list.", "code": "def max_segments_with_weight(n, a, b, c, weight):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a <= n and weight[0] <= n:\n                dp[i + a] = max(dp[i] + 1, dp[i + a])\n            if i + b <= n and weight[1] <= n:\n                dp[i + b] = max(dp[i] + 1, dp[i + b])\n            if i + c <= n and weight[2] <= n:\n                dp[i + c] = max(dp[i] + 1, dp[i + c])\n    return dp[n]", "task_id": "971_4d529eaa-c97a-4ac8-b149-c5f0963ae2d3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but each segment adds a bonus of bonus units.", "code": "def max_segments_with_bonus(n, a, b, c, bonus):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a + bonus <= n:\n                dp[i + a + bonus] = max(dp[i] + 1, dp[i + a + bonus])\n            if i + b + bonus <= n:\n                dp[i + b + bonus] = max(dp[i] + 1, dp[i + b + bonus])\n            if i + c + bonus <= n:\n                dp[i + c + bonus] = max(dp[i] + 1, dp[i + c + bonus])\n    return dp[n]", "task_id": "971_548ce56c-8a73-4dc3-a2ba-6cbca7e763cd", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum number of segments of lengths a, b, and c that can be formed from n, but each segment incurs a penalty of penalty units and adds a bonus of bonus units.", "code": "def max_segments_with_penalty_and_bonus(n, a, b, c, penalty, bonus):\n    dp = [-1] * (n + 10)\n    dp[0] = 0\n    for i in range(n):\n        if dp[i] != -1:\n            if i + a + penalty - bonus <= n:\n                dp[i + a + penalty - bonus] = max(dp[i] + 1, dp[i + a + penalty - bonus])\n            if i + b + penalty - bonus <= n:\n                dp[i + b + penalty - bonus] = max(dp[i] + 1, dp[i + b + penalty - bonus])\n            if i + c + penalty - bonus <= n:\n                dp[i + c + penalty - bonus] = max(dp[i] + 1, dp[i + c + penalty - bonus])\n    return dp[n]", "task_id": "971_0303f75b-6efc-46a3-a1db-93af787a02e2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the maximum total path sum in the given triangle.", "code": "def max_sum_path(A): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + max(memo[j], memo[j + 1]) \n\treturn memo[0]", "task_id": "974_48e81e78-5641-4e16-8118-f8f08ae15194", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but some positions are obstacles and cannot be part of the path.", "code": "def min_sum_path_with_obstacles(A, obstacles): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tobstacle_set = set(obstacles)\n\tfor i in range(len(A[n])): \n\t\tif (n, i) in obstacle_set:\n\t\t\tmemo[i] = float('inf')\n\t\telse:\n\t\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tif (i, j) in obstacle_set:\n\t\t\t\tmemo[j] = float('inf')\n\t\t\telse:\n\t\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) \n\treturn memo[0]", "task_id": "974_d95754df-a5d0-4f87-bd4d-98bcd2be64ce", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but you can only move down to k adjacent positions.", "code": "def min_sum_path_with_restriction(A, k): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j:min(j + k + 1, len(A[i + 1]))]) \n\treturn memo[0]", "task_id": "974_7b8619f5-078c-4bee-a83e-0b4f0d27e436", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but each step down has an additional penalty.", "code": "def min_sum_path_with_penalty(A, penalty): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) + penalty \n\treturn memo[0]", "task_id": "974_b6fbe4fa-a5b5-4e21-887b-ba77b0779aa3", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but each step down has an additional bonus.", "code": "def min_sum_path_with_bonus(A, bonus): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) - bonus \n\treturn memo[0]", "task_id": "974_f03dd7cb-9060-405e-b152-06997e830a84", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but you can skip up to 'skip' levels.", "code": "def min_sum_path_with_skip(A, skip): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) \n\tfor _ in range(skip):\n\t\tmemo = [min(memo)] * len(memo)\n\treturn memo[0]", "task_id": "974_af0770a2-a0af-44d7-9831-d117cf1d9cf2", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, starting from any of the given starting positions.", "code": "def min_sum_path_with_multiple_starts(A, starts): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) \n\treturn min(memo[start] for start in starts)", "task_id": "974_b76b2fae-7a30-4bdd-b425-5450ed625905", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but you cannot move to certain restricted positions.", "code": "def min_sum_path_with_restrictions(A, restrictions): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\trestriction_set = set(restrictions)\n\tfor i in range(len(A[n])): \n\t\tif (n, i) in restriction_set:\n\t\t\tmemo[i] = float('inf')\n\t\telse:\n\t\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tif (i, j) in restriction_set:\n\t\t\t\tmemo[j] = float('inf')\n\t\t\telse:\n\t\t\t\tmemo[j] = A[i][j] + min(memo[j], memo[j + 1]) \n\treturn memo[0]", "task_id": "974_723ee45e-3699-482c-8bc0-0ea44aa4f562", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but each step down has a variable penalty.", "code": "def min_sum_path_with_variable_penalty(A, penalties): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j] + penalties[i][j], memo[j + 1] + penalties[i][j + 1]) \n\treturn memo[0]", "task_id": "974_3dabb13b-5731-4b53-ac28-83590ee2bc4b", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
{"text": "Write a function to find the minimum total path sum in the given triangle, but each step down has a variable bonus.", "code": "def min_sum_path_with_variable_bonus(A, bonuses): \n\tmemo = [None] * len(A) \n\tn = len(A) - 1\n\tfor i in range(len(A[n])): \n\t\tmemo[i] = A[n][i] \n\tfor i in range(len(A) - 2, -1,-1): \n\t\tfor j in range( len(A[i])): \n\t\t\tmemo[j] = A[i][j] + min(memo[j] - bonuses[i][j], memo[j + 1] - bonuses[i][j + 1]) \n\treturn memo[0]", "task_id": "974_0175c91e-a152-4766-919e-3bd3e49aea91", "test_setup_code": "", "test_list": [], "challenge_test_list": []}
